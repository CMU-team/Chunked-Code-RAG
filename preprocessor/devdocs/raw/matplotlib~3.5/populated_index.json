[{"name": "_api", "path": "_api_api", "type": "_api", "text": "\nHelper functions for managing the Matplotlib API.\n\nThis documentation is only relevant for Matplotlib developers, not for users.\n\nWarning\n\nThis module and its submodules are for internal use only. Do not use them in\nyour own code. We may change the API at any time with no warning.\n\nHelper decorator for implementing module-level `__getattr__` as a class.\n\nThis decorator must be used at the module toplevel as follows:\n\nThe `__getattr__` class will be replaced by a `__getattr__` function such that\ntrying to access `name` on the module will resolve the corresponding property\n(which may be decorated e.g. with `_api.deprecated` for deprecating module\nglobals). The properties are all implicitly cached. Moreover, a suitable\nAttributeError is generated and raised if no property with the given name\nexists.\n\nkwargs must consist of a single key, value pair. If key is in _mapping, return\n`_mapping[value]`; else, raise an appropriate ValueError.\n\nFor each key, value pair in kwargs, check that value is in _values.\n\nSequence of values to check on.\n\nWhether to print _values when raising ValueError.\n\nkey, value pairs as keyword arguments to find in _values.\n\nIf any value in kwargs is not found in _values.\n\nFor each key, value pair in kwargs, check that value is an instance of one of\n_types; if not, raise an appropriate TypeError.\n\nAs a special case, a `None` entry in _types is treated as NoneType.\n\nFor each key, value pair in kwargs, check that value has the shape _shape, if\nnot, raise an appropriate ValueError.\n\nNone in the shape is treated as a \"free\" size that can have any length. e.g.\n(None, 2) -> (N, 2)\n\nThe values checked must be numpy arrays.\n\nTo check for (N, 2) shaped arrays\n\nBases: `object`\n\nLike `property`, but also triggers on access via the class, and it is the\nclass that's passed as argument.\n\nSelect and call the function that accepts `*args, **kwargs`.\n\nfuncs is a list of functions which should not raise any exception (other than\n`TypeError` if the arguments passed do not match their signature).\n\n`select_matching_signature` tries to call each of the functions in funcs with\n`*args, **kwargs` (in the order in which they are given). Calls that fail with\na `TypeError` are silently skipped. As soon as a call succeeds,\n`select_matching_signature` returns its return value. If no function accepts\n`*args, **kwargs`, then the `TypeError` raised by the last failing call is re-\nraised.\n\nCallers should normally make sure that any `*args, **kwargs` can only bind a\nsingle func (to avoid any ambiguity), although this is not checked by\n`select_matching_signature`.\n\n`select_matching_signature` is intended to help implementing signature-\noverloaded functions. In general, such functions should be avoided, except for\nback-compatibility concerns. A typical use pattern is\n\nwhich allows my_func to be called either with two parameters (old1 and old2)\nor a single one (new). Note that the new signature is given last, so that\ncallers get a `TypeError` corresponding to the new signature if the arguments\nthey passed in do not match any signature.\n\n`warnings.warn` wrapper that sets stacklevel to \"outside Matplotlib\".\n\nThe original emitter of the warning can be obtained by patching this function\nback to `warnings.warn`, i.e. `_api.warn_external = warnings.warn` (or\n`functools.partial(warnings.warn, stacklevel=2)`, etc.).\n\nHelper functions for deprecating parts of the Matplotlib API.\n\nThis documentation is only relevant for Matplotlib developers, not for users.\n\nWarning\n\nThis module is for internal use only. Do not use it in your own code. We may\nchange the API at any time with no warning.\n\nBases: `DeprecationWarning`\n\nA class for issuing deprecation warnings for Matplotlib users.\n\nDecorator indicating that parameter name of func is being deprecated.\n\nThe actual implementation of func should keep the name parameter in its\nsignature, or accept a `**kwargs` argument (through which name would be\npassed).\n\nParameters that come after the deprecated parameter effectively become\nkeyword-only (as they cannot be passed positionally without triggering the\nDeprecationWarning on the deprecated parameter), and should be marked as such\nafter the deprecation period has passed and the deprecated parameter is\nremoved.\n\nParameters other than since, name, and func are keyword-only and forwarded to\n`warn_deprecated`.\n\nReturn `obj.method` with a deprecation if it was overridden, else None.\n\nAn unbound method, i.e. an expression of the form `Class.method_name`.\nRemember that within the body of a method, one can always use `__class__` to\nrefer to the class that is currently being defined.\n\nEither an object of the class where method is defined, or a subclass of that\nclass.\n\nWhether to allow overrides by \"empty\" methods without emitting a warning.\n\nAdditional parameters passed to `warn_deprecated` to generate the deprecation\nwarning; must at least include the \"since\" key.\n\nBases: `object`\n\nHelper to deprecate public access to an attribute (or method).\n\nThis helper should only be used at class scope, as follows:\n\nwhere all parameters are forwarded to `deprecated`. This form makes `attr` a\nproperty which forwards read and write access to `self._attr` (same name but\nwith a leading underscore), with a deprecation warning. Note that the\nattribute name is derived from the name this helper is assigned to. This\nhelper also works for deprecating methods.\n\nDecorator to mark a function, a class, or a property as deprecated.\n\nWhen deprecating a classmethod, a staticmethod, or a property, the\n`@deprecated` decorator should go under `@classmethod` and `@staticmethod`\n(i.e., `deprecated` should directly decorate the underlying callable), but\nover `@property`.\n\nWhen deprecating a class `C` intended to be used as a base class in a multiple\ninheritance hierarchy, `C` must define an `__init__` method (if `C` instead\ninherited its `__init__` from its own base class, then `@deprecated` would\nmess up `__init__` inheritance when installing its own (deprecation-emitting)\n`C.__init__`).\n\nParameters are the same as for `warn_deprecated`, except that obj_type\ndefaults to 'class' if decorating a class, 'attribute' if decorating a\nproperty, and 'function' otherwise.\n\nDecorator indicating that passing parameter name (or any of the following\nones) positionally to func is being deprecated.\n\nWhen used on a method that has a pyplot wrapper, this should be the outermost\ndecorator, so that `boilerplate.py` can access the original signature.\n\nalias of `matplotlib._api.deprecation.MatplotlibDeprecationWarning`\n\nDecorator indicating that parameter old of func is renamed to new.\n\nThe actual implementation of func should use new, not old. If old is passed to\nfunc, a DeprecationWarning is emitted, and its value is used, even if new is\nalso passed by keyword (this is to simplify pyplot wrapper functions, which\nalways pass new explicitly to the Axes method). If new is also passed but\npositionally, a TypeError will be raised by the underlying function during\nargument binding.\n\nDisplay a standardized deprecation.\n\nThe release at which this API became deprecated.\n\nOverride the default deprecation message. The `%(since)s`, `%(name)s`,\n`%(alternative)s`, `%(obj_type)s`, `%(addendum)s`, and `%(removal)s` format\nspecifiers will be replaced by the values of the respective arguments passed\nto this function.\n\nThe name of the deprecated object.\n\nAn alternative API that the user may use in place of the deprecated API. The\ndeprecation warning will tell the user about this alternative if provided.\n\nIf True, uses a PendingDeprecationWarning instead of a DeprecationWarning.\nCannot be used together with removal.\n\nThe object type being deprecated.\n\nAdditional text appended directly to the final message.\n\nThe expected removal version. With the default (an empty string), a removal\nversion is automatically computed from since. Set to other Falsy values to not\nschedule a removal date. Cannot be used together with pending.\n\n"}, {"name": "_api.caching_module_getattr()", "path": "_api_api#matplotlib._api.caching_module_getattr", "type": "_api", "text": "\nHelper decorator for implementing module-level `__getattr__` as a class.\n\nThis decorator must be used at the module toplevel as follows:\n\nThe `__getattr__` class will be replaced by a `__getattr__` function such that\ntrying to access `name` on the module will resolve the corresponding property\n(which may be decorated e.g. with `_api.deprecated` for deprecating module\nglobals). The properties are all implicitly cached. Moreover, a suitable\nAttributeError is generated and raised if no property with the given name\nexists.\n\n"}, {"name": "_api.check_getitem()", "path": "_api_api#matplotlib._api.check_getitem", "type": "_api", "text": "\nkwargs must consist of a single key, value pair. If key is in _mapping, return\n`_mapping[value]`; else, raise an appropriate ValueError.\n\n"}, {"name": "_api.check_in_list()", "path": "_api_api#matplotlib._api.check_in_list", "type": "_api", "text": "\nFor each key, value pair in kwargs, check that value is in _values.\n\nSequence of values to check on.\n\nWhether to print _values when raising ValueError.\n\nkey, value pairs as keyword arguments to find in _values.\n\nIf any value in kwargs is not found in _values.\n\n"}, {"name": "_api.check_isinstance()", "path": "_api_api#matplotlib._api.check_isinstance", "type": "_api", "text": "\nFor each key, value pair in kwargs, check that value is an instance of one of\n_types; if not, raise an appropriate TypeError.\n\nAs a special case, a `None` entry in _types is treated as NoneType.\n\n"}, {"name": "_api.check_shape()", "path": "_api_api#matplotlib._api.check_shape", "type": "_api", "text": "\nFor each key, value pair in kwargs, check that value has the shape _shape, if\nnot, raise an appropriate ValueError.\n\nNone in the shape is treated as a \"free\" size that can have any length. e.g.\n(None, 2) -> (N, 2)\n\nThe values checked must be numpy arrays.\n\nTo check for (N, 2) shaped arrays\n\n"}, {"name": "_api.classproperty", "path": "_api_api#matplotlib._api.classproperty", "type": "_api", "text": "\nBases: `object`\n\nLike `property`, but also triggers on access via the class, and it is the\nclass that's passed as argument.\n\n"}, {"name": "_api.deprecation.delete_parameter()", "path": "_api_api#matplotlib._api.deprecation.delete_parameter", "type": "_api", "text": "\nDecorator indicating that parameter name of func is being deprecated.\n\nThe actual implementation of func should keep the name parameter in its\nsignature, or accept a `**kwargs` argument (through which name would be\npassed).\n\nParameters that come after the deprecated parameter effectively become\nkeyword-only (as they cannot be passed positionally without triggering the\nDeprecationWarning on the deprecated parameter), and should be marked as such\nafter the deprecation period has passed and the deprecated parameter is\nremoved.\n\nParameters other than since, name, and func are keyword-only and forwarded to\n`warn_deprecated`.\n\n"}, {"name": "_api.deprecation.deprecate_method_override()", "path": "_api_api#matplotlib._api.deprecation.deprecate_method_override", "type": "_api", "text": "\nReturn `obj.method` with a deprecation if it was overridden, else None.\n\nAn unbound method, i.e. an expression of the form `Class.method_name`.\nRemember that within the body of a method, one can always use `__class__` to\nrefer to the class that is currently being defined.\n\nEither an object of the class where method is defined, or a subclass of that\nclass.\n\nWhether to allow overrides by \"empty\" methods without emitting a warning.\n\nAdditional parameters passed to `warn_deprecated` to generate the deprecation\nwarning; must at least include the \"since\" key.\n\n"}, {"name": "_api.deprecation.deprecate_privatize_attribute", "path": "_api_api#matplotlib._api.deprecation.deprecate_privatize_attribute", "type": "_api", "text": "\nBases: `object`\n\nHelper to deprecate public access to an attribute (or method).\n\nThis helper should only be used at class scope, as follows:\n\nwhere all parameters are forwarded to `deprecated`. This form makes `attr` a\nproperty which forwards read and write access to `self._attr` (same name but\nwith a leading underscore), with a deprecation warning. Note that the\nattribute name is derived from the name this helper is assigned to. This\nhelper also works for deprecating methods.\n\n"}, {"name": "_api.deprecation.deprecated()", "path": "_api_api#matplotlib._api.deprecation.deprecated", "type": "_api", "text": "\nDecorator to mark a function, a class, or a property as deprecated.\n\nWhen deprecating a classmethod, a staticmethod, or a property, the\n`@deprecated` decorator should go under `@classmethod` and `@staticmethod`\n(i.e., `deprecated` should directly decorate the underlying callable), but\nover `@property`.\n\nWhen deprecating a class `C` intended to be used as a base class in a multiple\ninheritance hierarchy, `C` must define an `__init__` method (if `C` instead\ninherited its `__init__` from its own base class, then `@deprecated` would\nmess up `__init__` inheritance when installing its own (deprecation-emitting)\n`C.__init__`).\n\nParameters are the same as for `warn_deprecated`, except that obj_type\ndefaults to 'class' if decorating a class, 'attribute' if decorating a\nproperty, and 'function' otherwise.\n\n"}, {"name": "_api.deprecation.make_keyword_only()", "path": "_api_api#matplotlib._api.deprecation.make_keyword_only", "type": "_api", "text": "\nDecorator indicating that passing parameter name (or any of the following\nones) positionally to func is being deprecated.\n\nWhen used on a method that has a pyplot wrapper, this should be the outermost\ndecorator, so that `boilerplate.py` can access the original signature.\n\n"}, {"name": "_api.deprecation.MatplotlibDeprecationWarning", "path": "_api_api#matplotlib._api.deprecation.MatplotlibDeprecationWarning", "type": "_api", "text": "\nBases: `DeprecationWarning`\n\nA class for issuing deprecation warnings for Matplotlib users.\n\n"}, {"name": "_api.deprecation.mplDeprecation", "path": "_api_api#matplotlib._api.deprecation.mplDeprecation", "type": "_api", "text": "\nalias of `matplotlib._api.deprecation.MatplotlibDeprecationWarning`\n\n"}, {"name": "_api.deprecation.rename_parameter()", "path": "_api_api#matplotlib._api.deprecation.rename_parameter", "type": "_api", "text": "\nDecorator indicating that parameter old of func is renamed to new.\n\nThe actual implementation of func should use new, not old. If old is passed to\nfunc, a DeprecationWarning is emitted, and its value is used, even if new is\nalso passed by keyword (this is to simplify pyplot wrapper functions, which\nalways pass new explicitly to the Axes method). If new is also passed but\npositionally, a TypeError will be raised by the underlying function during\nargument binding.\n\n"}, {"name": "_api.deprecation.suppress_matplotlib_deprecation_warning()", "path": "_api_api#matplotlib._api.deprecation.suppress_matplotlib_deprecation_warning", "type": "_api", "text": "\n\n"}, {"name": "_api.deprecation.warn_deprecated()", "path": "_api_api#matplotlib._api.deprecation.warn_deprecated", "type": "_api", "text": "\nDisplay a standardized deprecation.\n\nThe release at which this API became deprecated.\n\nOverride the default deprecation message. The `%(since)s`, `%(name)s`,\n`%(alternative)s`, `%(obj_type)s`, `%(addendum)s`, and `%(removal)s` format\nspecifiers will be replaced by the values of the respective arguments passed\nto this function.\n\nThe name of the deprecated object.\n\nAn alternative API that the user may use in place of the deprecated API. The\ndeprecation warning will tell the user about this alternative if provided.\n\nIf True, uses a PendingDeprecationWarning instead of a DeprecationWarning.\nCannot be used together with removal.\n\nThe object type being deprecated.\n\nAdditional text appended directly to the final message.\n\nThe expected removal version. With the default (an empty string), a removal\nversion is automatically computed from since. Set to other Falsy values to not\nschedule a removal date. Cannot be used together with pending.\n\n"}, {"name": "_api.select_matching_signature()", "path": "_api_api#matplotlib._api.select_matching_signature", "type": "_api", "text": "\nSelect and call the function that accepts `*args, **kwargs`.\n\nfuncs is a list of functions which should not raise any exception (other than\n`TypeError` if the arguments passed do not match their signature).\n\n`select_matching_signature` tries to call each of the functions in funcs with\n`*args, **kwargs` (in the order in which they are given). Calls that fail with\na `TypeError` are silently skipped. As soon as a call succeeds,\n`select_matching_signature` returns its return value. If no function accepts\n`*args, **kwargs`, then the `TypeError` raised by the last failing call is re-\nraised.\n\nCallers should normally make sure that any `*args, **kwargs` can only bind a\nsingle func (to avoid any ambiguity), although this is not checked by\n`select_matching_signature`.\n\n`select_matching_signature` is intended to help implementing signature-\noverloaded functions. In general, such functions should be avoided, except for\nback-compatibility concerns. A typical use pattern is\n\nwhich allows my_func to be called either with two parameters (old1 and old2)\nor a single one (new). Note that the new signature is given last, so that\ncallers get a `TypeError` corresponding to the new signature if the arguments\nthey passed in do not match any signature.\n\n"}, {"name": "_api.warn_external()", "path": "_api_api#matplotlib._api.warn_external", "type": "_api", "text": "\n`warnings.warn` wrapper that sets stacklevel to \"outside Matplotlib\".\n\nThe original emitter of the warning can be obtained by patching this function\nback to `warnings.warn`, i.e. `_api.warn_external = warnings.warn` (or\n`functools.partial(warnings.warn, stacklevel=2)`, etc.).\n\n"}, {"name": "_enums", "path": "_enums_api", "type": "_enums", "text": "\nEnums representing sets of strings that Matplotlib uses as input parameters.\n\nMatplotlib often uses simple data types like strings or tuples to define a\nconcept; e.g. the line capstyle can be specified as one of 'butt', 'round', or\n'projecting'. The classes in this module are used internally and serve to\ndocument these concepts formally.\n\nAs an end-user you will not use these classes directly, but only the values\nthey define.\n\nDefine how the connection between two line segments is drawn.\n\nFor a visual impression of each JoinStyle, `view these docs online`, or run\n`JoinStyle.demo`.\n\nLines in Matplotlib are typically defined by a 1D `Path` and a finite\n`linewidth`, where the underlying 1D `Path` represents the center of the\nstroked line.\n\nBy default, `GraphicsContextBase` defines the boundaries of a stroked line to\nsimply be every point within some radius, `linewidth/2`, away from any point\nof the center line. However, this results in corners appearing \"rounded\",\nwhich may not be the desired behavior if you are drawing, for example, a\npolygon or pointed star.\n\nSupported values:\n\nthe \"arrow-tip\" style. Each boundary of the filled-in area will extend in a\nstraight line parallel to the tangent vector of the centerline at the point it\nmeets the corner, until they meet in a sharp point.\n\nstokes every point within a radius of `linewidth/2` of the center lines.\n\nthe \"squared-off\" style. It can be thought of as a rounded corner where the\n\"circular\" part of the corner has been cut off.\n\nNote\n\nVery long miter tips are cut off (to form a bevel) after a backend-dependent\nlimit called the \"miter limit\", which specifies the maximum allowed ratio of\nmiter length to line width. For example, the PDF backend uses the default\nvalue of 10 specified by the PDF standard, while the SVG backend does not even\nspecify the miter limit, resulting in a default value of 4 per the SVG\nspecification. Matplotlib does not currently allow the user to adjust this\nparameter.\n\nA more detailed description of the effect of a miter limit can be found in the\nMozilla Developer Docs\n\n(Source code, png, pdf)\n\nDemonstrate how each JoinStyle looks for various join angles.\n\nDefine how the two endpoints (caps) of an unclosed line are drawn.\n\nHow to draw the start and end points of lines that represent a closed curve\n(i.e. that end in a `CLOSEPOLY`) is controlled by the line's `JoinStyle`. For\nall other lines, how the start and end points are drawn is controlled by the\nCapStyle.\n\nFor a visual impression of each CapStyle, `view these docs online` or run\n`CapStyle.demo`.\n\nSupported values:\n\nthe line is squared off at its endpoint.\n\nthe line is squared off as in butt, but the filled in area extends beyond the\nendpoint a distance of `linewidth/2`.\n\nlike butt, but a semicircular cap is added to the end of the line, of radius\n`linewidth/2`.\n\n(Source code, png, pdf)\n\nDemonstrate how each CapStyle looks for a thick line segment.\n\n"}, {"name": "_enums.CapStyle", "path": "_enums_api#matplotlib._enums.CapStyle", "type": "_enums", "text": "\nDefine how the two endpoints (caps) of an unclosed line are drawn.\n\nHow to draw the start and end points of lines that represent a closed curve\n(i.e. that end in a `CLOSEPOLY`) is controlled by the line's `JoinStyle`. For\nall other lines, how the start and end points are drawn is controlled by the\nCapStyle.\n\nFor a visual impression of each CapStyle, `view these docs online` or run\n`CapStyle.demo`.\n\nSupported values:\n\nthe line is squared off at its endpoint.\n\nthe line is squared off as in butt, but the filled in area extends beyond the\nendpoint a distance of `linewidth/2`.\n\nlike butt, but a semicircular cap is added to the end of the line, of radius\n`linewidth/2`.\n\n(Source code, png, pdf)\n\nDemonstrate how each CapStyle looks for a thick line segment.\n\n"}, {"name": "_enums.CapStyle.demo()", "path": "_enums_api#matplotlib._enums.CapStyle.demo", "type": "_enums", "text": "\nDemonstrate how each CapStyle looks for a thick line segment.\n\n"}, {"name": "_enums.JoinStyle", "path": "_enums_api#matplotlib._enums.JoinStyle", "type": "_enums", "text": "\nDefine how the connection between two line segments is drawn.\n\nFor a visual impression of each JoinStyle, `view these docs online`, or run\n`JoinStyle.demo`.\n\nLines in Matplotlib are typically defined by a 1D `Path` and a finite\n`linewidth`, where the underlying 1D `Path` represents the center of the\nstroked line.\n\nBy default, `GraphicsContextBase` defines the boundaries of a stroked line to\nsimply be every point within some radius, `linewidth/2`, away from any point\nof the center line. However, this results in corners appearing \"rounded\",\nwhich may not be the desired behavior if you are drawing, for example, a\npolygon or pointed star.\n\nSupported values:\n\nthe \"arrow-tip\" style. Each boundary of the filled-in area will extend in a\nstraight line parallel to the tangent vector of the centerline at the point it\nmeets the corner, until they meet in a sharp point.\n\nstokes every point within a radius of `linewidth/2` of the center lines.\n\nthe \"squared-off\" style. It can be thought of as a rounded corner where the\n\"circular\" part of the corner has been cut off.\n\nNote\n\nVery long miter tips are cut off (to form a bevel) after a backend-dependent\nlimit called the \"miter limit\", which specifies the maximum allowed ratio of\nmiter length to line width. For example, the PDF backend uses the default\nvalue of 10 specified by the PDF standard, while the SVG backend does not even\nspecify the miter limit, resulting in a default value of 4 per the SVG\nspecification. Matplotlib does not currently allow the user to adjust this\nparameter.\n\nA more detailed description of the effect of a miter limit can be found in the\nMozilla Developer Docs\n\n(Source code, png, pdf)\n\nDemonstrate how each JoinStyle looks for various join angles.\n\n"}, {"name": "_enums.JoinStyle.demo()", "path": "_enums_api#matplotlib._enums.JoinStyle.demo", "type": "_enums", "text": "\nDemonstrate how each JoinStyle looks for various join angles.\n\n"}, {"name": "afm", "path": "afm_api", "type": "afm", "text": "\nA python interface to Adobe Font Metrics Files.\n\nAlthough a number of other Python implementations exist, and may be more\ncomplete than this, it was decided not to go with them because they were\neither:\n\nIt is pretty easy to use, and has no external dependencies:\n\nAs in the Adobe Font Metrics File Format Specification, all dimensions are\ngiven in units of 1/1000 of the scale factor (point size) of the font being\nused.\n\nBases: `object`\n\nParse the AFM file in file object fh.\n\nThe font family name, e.g., 'Times'.\n\nReturn the fontangle as float.\n\nReturn the cap height as float.\n\nReturn the font family name, e.g., 'Times'.\n\nReturn the font name, e.g., 'Times-Roman'.\n\nReturn the font full name, e.g., 'Times-Roman'.\n\nGet the bounding box (ink) height of character c (space is 0).\n\nReturn the standard horizontal stem width as float, or None if not specified\nin AFM file.\n\nReturn the kerning pair distance (possibly 0) for chars c1 and c2.\n\nReturn the kerning pair distance (possibly 0) for chars name1 and name2.\n\nGet the name of the character, i.e., ';' is 'semicolon'.\n\nReturn the string bounding box.\n\nReturn the string bounding box and the maximal descent.\n\nReturn the underline thickness as float.\n\nReturn the standard vertical stem width as float, or None if not specified in\nAFM file.\n\nReturn the font weight, e.g., 'Bold' or 'Roman'.\n\nGet the width of the character from the character metric WX field.\n\nGet the width of the character from a type1 character name.\n\nReturn the xheight as float.\n\nReturn the string width (including kerning) and string height as a (w, h)\ntuple.\n\nBases: `tuple`\n\nRepresents the character metrics of a single character.\n\nThe fields do currently only describe a subset of character metrics\ninformation defined in the AFM standard.\n\nCreate new instance of CharMetrics(width, name, bbox)\n\nThe bbox of the character (B) as a tuple (llx, lly, urx, ury).\n\nThe character name (N).\n\nThe character width (WX).\n\nBases: `tuple`\n\nRepresents the information on a composite element of a composite char.\n\nCreate new instance of CompositePart(name, dx, dy)\n\nx-displacement of the part from the origin.\n\ny-displacement of the part from the origin.\n\nName of the part, e.g. 'acute'.\n\n"}, {"name": "afm.AFM", "path": "afm_api#matplotlib.afm.AFM", "type": "afm", "text": "\nBases: `object`\n\nParse the AFM file in file object fh.\n\nThe font family name, e.g., 'Times'.\n\nReturn the fontangle as float.\n\nReturn the cap height as float.\n\nReturn the font family name, e.g., 'Times'.\n\nReturn the font name, e.g., 'Times-Roman'.\n\nReturn the font full name, e.g., 'Times-Roman'.\n\nGet the bounding box (ink) height of character c (space is 0).\n\nReturn the standard horizontal stem width as float, or None if not specified\nin AFM file.\n\nReturn the kerning pair distance (possibly 0) for chars c1 and c2.\n\nReturn the kerning pair distance (possibly 0) for chars name1 and name2.\n\nGet the name of the character, i.e., ';' is 'semicolon'.\n\nReturn the string bounding box.\n\nReturn the string bounding box and the maximal descent.\n\nReturn the underline thickness as float.\n\nReturn the standard vertical stem width as float, or None if not specified in\nAFM file.\n\nReturn the font weight, e.g., 'Bold' or 'Roman'.\n\nGet the width of the character from the character metric WX field.\n\nGet the width of the character from a type1 character name.\n\nReturn the xheight as float.\n\nReturn the string width (including kerning) and string height as a (w, h)\ntuple.\n\n"}, {"name": "afm.AFM.get_angle()", "path": "afm_api#matplotlib.afm.AFM.get_angle", "type": "afm", "text": "\nReturn the fontangle as float.\n\n"}, {"name": "afm.AFM.get_bbox_char()", "path": "afm_api#matplotlib.afm.AFM.get_bbox_char", "type": "afm", "text": "\n\n"}, {"name": "afm.AFM.get_capheight()", "path": "afm_api#matplotlib.afm.AFM.get_capheight", "type": "afm", "text": "\nReturn the cap height as float.\n\n"}, {"name": "afm.AFM.get_familyname()", "path": "afm_api#matplotlib.afm.AFM.get_familyname", "type": "afm", "text": "\nReturn the font family name, e.g., 'Times'.\n\n"}, {"name": "afm.AFM.get_fontname()", "path": "afm_api#matplotlib.afm.AFM.get_fontname", "type": "afm", "text": "\nReturn the font name, e.g., 'Times-Roman'.\n\n"}, {"name": "afm.AFM.get_fullname()", "path": "afm_api#matplotlib.afm.AFM.get_fullname", "type": "afm", "text": "\nReturn the font full name, e.g., 'Times-Roman'.\n\n"}, {"name": "afm.AFM.get_height_char()", "path": "afm_api#matplotlib.afm.AFM.get_height_char", "type": "afm", "text": "\nGet the bounding box (ink) height of character c (space is 0).\n\n"}, {"name": "afm.AFM.get_horizontal_stem_width()", "path": "afm_api#matplotlib.afm.AFM.get_horizontal_stem_width", "type": "afm", "text": "\nReturn the standard horizontal stem width as float, or None if not specified\nin AFM file.\n\n"}, {"name": "afm.AFM.get_kern_dist()", "path": "afm_api#matplotlib.afm.AFM.get_kern_dist", "type": "afm", "text": "\nReturn the kerning pair distance (possibly 0) for chars c1 and c2.\n\n"}, {"name": "afm.AFM.get_kern_dist_from_name()", "path": "afm_api#matplotlib.afm.AFM.get_kern_dist_from_name", "type": "afm", "text": "\nReturn the kerning pair distance (possibly 0) for chars name1 and name2.\n\n"}, {"name": "afm.AFM.get_name_char()", "path": "afm_api#matplotlib.afm.AFM.get_name_char", "type": "afm", "text": "\nGet the name of the character, i.e., ';' is 'semicolon'.\n\n"}, {"name": "afm.AFM.get_str_bbox()", "path": "afm_api#matplotlib.afm.AFM.get_str_bbox", "type": "afm", "text": "\nReturn the string bounding box.\n\n"}, {"name": "afm.AFM.get_str_bbox_and_descent()", "path": "afm_api#matplotlib.afm.AFM.get_str_bbox_and_descent", "type": "afm", "text": "\nReturn the string bounding box and the maximal descent.\n\n"}, {"name": "afm.AFM.get_underline_thickness()", "path": "afm_api#matplotlib.afm.AFM.get_underline_thickness", "type": "afm", "text": "\nReturn the underline thickness as float.\n\n"}, {"name": "afm.AFM.get_vertical_stem_width()", "path": "afm_api#matplotlib.afm.AFM.get_vertical_stem_width", "type": "afm", "text": "\nReturn the standard vertical stem width as float, or None if not specified in\nAFM file.\n\n"}, {"name": "afm.AFM.get_weight()", "path": "afm_api#matplotlib.afm.AFM.get_weight", "type": "afm", "text": "\nReturn the font weight, e.g., 'Bold' or 'Roman'.\n\n"}, {"name": "afm.AFM.get_width_char()", "path": "afm_api#matplotlib.afm.AFM.get_width_char", "type": "afm", "text": "\nGet the width of the character from the character metric WX field.\n\n"}, {"name": "afm.AFM.get_width_from_char_name()", "path": "afm_api#matplotlib.afm.AFM.get_width_from_char_name", "type": "afm", "text": "\nGet the width of the character from a type1 character name.\n\n"}, {"name": "afm.AFM.get_xheight()", "path": "afm_api#matplotlib.afm.AFM.get_xheight", "type": "afm", "text": "\nReturn the xheight as float.\n\n"}, {"name": "afm.AFM.string_width_height()", "path": "afm_api#matplotlib.afm.AFM.string_width_height", "type": "afm", "text": "\nReturn the string width (including kerning) and string height as a (w, h)\ntuple.\n\n"}, {"name": "afm.CharMetrics", "path": "afm_api#matplotlib.afm.CharMetrics", "type": "afm", "text": "\nBases: `tuple`\n\nRepresents the character metrics of a single character.\n\nThe fields do currently only describe a subset of character metrics\ninformation defined in the AFM standard.\n\nCreate new instance of CharMetrics(width, name, bbox)\n\nThe bbox of the character (B) as a tuple (llx, lly, urx, ury).\n\nThe character name (N).\n\nThe character width (WX).\n\n"}, {"name": "afm.CharMetrics.bbox", "path": "afm_api#matplotlib.afm.CharMetrics.bbox", "type": "afm", "text": "\nThe bbox of the character (B) as a tuple (llx, lly, urx, ury).\n\n"}, {"name": "afm.CharMetrics.name", "path": "afm_api#matplotlib.afm.CharMetrics.name", "type": "afm", "text": "\nThe character name (N).\n\n"}, {"name": "afm.CharMetrics.width", "path": "afm_api#matplotlib.afm.CharMetrics.width", "type": "afm", "text": "\nThe character width (WX).\n\n"}, {"name": "afm.CompositePart", "path": "afm_api#matplotlib.afm.CompositePart", "type": "afm", "text": "\nBases: `tuple`\n\nRepresents the information on a composite element of a composite char.\n\nCreate new instance of CompositePart(name, dx, dy)\n\nx-displacement of the part from the origin.\n\ny-displacement of the part from the origin.\n\nName of the part, e.g. 'acute'.\n\n"}, {"name": "afm.CompositePart.dx", "path": "afm_api#matplotlib.afm.CompositePart.dx", "type": "afm", "text": "\nx-displacement of the part from the origin.\n\n"}, {"name": "afm.CompositePart.dy", "path": "afm_api#matplotlib.afm.CompositePart.dy", "type": "afm", "text": "\ny-displacement of the part from the origin.\n\n"}, {"name": "afm.CompositePart.name", "path": "afm_api#matplotlib.afm.CompositePart.name", "type": "afm", "text": "\nName of the part, e.g. 'acute'.\n\n"}, {"name": "animation", "path": "animation_api", "type": "animation", "text": "\nTable of Contents\n\nThe easiest way to make a live animation in Matplotlib is to use one of the\n`Animation` classes.\n\n`Animation`\n\nA base class for Animations.\n\n`FuncAnimation`\n\nMakes an animation by repeatedly calling a function func.\n\n`ArtistAnimation`\n\nAnimation using a fixed set of `Artist` objects.\n\nIn both cases it is critical to keep a reference to the instance object. The\nanimation is advanced by a timer (typically from the host GUI framework) which\nthe `Animation` object holds the only reference to. If you do not hold a\nreference to the `Animation` object, it (and hence the timers) will be garbage\ncollected which will stop the animation.\n\nTo save an animation use `Animation.save`, `Animation.to_html5_video`, or\n`Animation.to_jshtml`.\n\nSee Helper Classes below for details about what movie formats are supported.\n\nThe inner workings of `FuncAnimation` is more-or-less:\n\nwith details to handle 'blitting' (to dramatically improve the live\nperformance), to be non-blocking, not repeatedly start/stop the GUI event\nloop, handle repeats, multiple animated axes, and easily save the animation to\na movie file.\n\n'Blitting' is a standard technique in computer graphics. The general gist is\nto take an existing bit map (in our case a mostly rasterized figure) and then\n'blit' one more artist on top. Thus, by managing a saved 'clean' bitmap, we\ncan only re-draw the few artists that are changing at each frame and possibly\nsave significant amounts of time. When we use blitting (by passing\n`blit=True`), the core loop of `FuncAnimation` gets a bit more complicated:\n\nThis is of course leaving out many details (such as updating the background\nwhen the figure is resized or fully re-drawn). However, this hopefully\nminimalist example gives a sense of how `init_func` and `func` are used inside\nof `FuncAnimation` and the theory of how 'blitting' works.\n\nThe expected signature on `func` and `init_func` is very simple to keep\n`FuncAnimation` out of your book keeping and plotting logic, but this means\nthat the callable objects you pass in must know what artists they should be\nworking on. There are several approaches to handling this, of varying\ncomplexity and encapsulation. The simplest approach, which works quite well in\nthe case of a script, is to define the artist at a global scope and let Python\nsort things out. For example\n\nThe second method is to use `functools.partial` to 'bind' artists to function.\nA third method is to use closures to build up the required artists and\nfunctions. A fourth method is to create a class.\n\nThe provided writers fall into a few broad categories.\n\nThe Pillow writer relies on the Pillow library to write the animation, keeping\nall data in memory.\n\n`PillowWriter`\n\nThe HTML writer generates JavaScript-based animations.\n\n`HTMLWriter`\n\nWriter for JavaScript-based HTML movies.\n\nThe pipe-based writers stream the captured frames over a pipe to an external\nprocess. The pipe-based variants tend to be more performant, but may not work\non all systems.\n\n`FFMpegWriter`\n\nPipe-based ffmpeg writer.\n\n`ImageMagickWriter`\n\nPipe-based animated gif.\n\nThe file-based writers save temporary files for each frame which are stitched\ninto a single file at the end. Although slower, these writers can be easier to\ndebug.\n\n`FFMpegFileWriter`\n\nFile-based ffmpeg writer.\n\n`ImageMagickFileWriter`\n\nFile-based animated gif writer.\n\nFundamentally, a `MovieWriter` provides a way to grab sequential frames from\nthe same underlying `Figure` object. The base class `MovieWriter` implements 3\nmethods and a context manager. The only difference between the pipe-based and\nfile-based writers is in the arguments to their respective `setup` methods.\n\nThe `setup()` method is used to prepare the writer (possibly opening a pipe),\nsuccessive calls to `grab_frame()` capture a single frame at a time and\n`finish()` finalizes the movie and writes the output file to disk. For example\n\nIf using the writer classes directly (not through `Animation.save`), it is\nstrongly encouraged to use the `saving` context manager\n\nto ensures that setup and cleanup are performed as necessary.\n\n`Animation`\n\nA base class for Animations.\n\n`TimedAnimation`\n\n`Animation` subclass for time-based animation.\n\nA module-level registry is provided to map between the name of the writer and\nthe class to allow a string to be passed to `Animation.save` instead of a\nwriter instance.\n\n`MovieWriterRegistry`\n\nRegistry of available writer classes by human readable name.\n\nTo reduce code duplication base classes\n\n`AbstractMovieWriter`\n\nAbstract base class for writing movies.\n\n`MovieWriter`\n\nBase class for writing movies.\n\n`FileMovieWriter`\n\n`MovieWriter` for writing to individual files and stitching at the end.\n\nand mixins\n\n`FFMpegBase`\n\nMixin class for FFMpeg output.\n\n`ImageMagickBase`\n\nMixin class for ImageMagick output.\n\nare provided.\n\nSee the source code for how to easily implement new `MovieWriter` classes.\n\n"}, {"name": "animation.AbstractMovieWriter", "path": "_as_gen/matplotlib.animation.abstractmoviewriter", "type": "animation", "text": "\nAbstract base class for writing movies. Fundamentally, what a MovieWriter does\nis provide is a way to grab frames by calling grab_frame().\n\nsetup() is called to start the process and finish() is called afterwards.\n\nThis class is set up to provide for writing movie frame data to a pipe.\nsaving() is provided as a context manager to facilitate this process as:\n\nThe use of the context manager ensures that setup() and finish() are performed\nas necessary.\n\nAn instance of a concrete subclass of this class can be given as the `writer`\nargument of `Animation.save()`.\n\n`__init__`([fps, metadata, codec, bitrate])\n\n`finish`()\n\nFinish any processing for writing the movie.\n\n`grab_frame`(**savefig_kwargs)\n\nGrab the image information from the figure and save as a movie frame.\n\n`saving`(fig, outfile, dpi, *args, **kwargs)\n\nContext manager to facilitate writing the movie file.\n\n`setup`(fig, outfile[, dpi])\n\nSetup for writing the movie file.\n\n`frame_size`\n\nA tuple `(width, height)` in pixels of a movie frame.\n\nFinish any processing for writing the movie.\n\nA tuple `(width, height)` in pixels of a movie frame.\n\nGrab the image information from the figure and save as a movie frame.\n\nAll keyword arguments in savefig_kwargs are passed on to the `savefig` call\nthat saves the figure.\n\nContext manager to facilitate writing the movie file.\n\n`*args, **kw` are any parameters that should be passed to `setup`.\n\nSetup for writing the movie file.\n\nThe figure object that contains the information for frames.\n\nThe filename of the resulting movie file.\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the\nresulting movie file.\n\n"}, {"name": "animation.AbstractMovieWriter.__init__()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.__init__", "type": "animation", "text": "\n\n"}, {"name": "animation.AbstractMovieWriter.finish()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.finish", "type": "animation", "text": "\nFinish any processing for writing the movie.\n\n"}, {"name": "animation.AbstractMovieWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.grab_frame", "type": "animation", "text": "\nGrab the image information from the figure and save as a movie frame.\n\nAll keyword arguments in savefig_kwargs are passed on to the `savefig` call\nthat saves the figure.\n\n"}, {"name": "animation.AbstractMovieWriter.saving()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.saving", "type": "animation", "text": "\nContext manager to facilitate writing the movie file.\n\n`*args, **kw` are any parameters that should be passed to `setup`.\n\n"}, {"name": "animation.AbstractMovieWriter.setup()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.setup", "type": "animation", "text": "\nSetup for writing the movie file.\n\nThe figure object that contains the information for frames.\n\nThe filename of the resulting movie file.\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the\nresulting movie file.\n\n"}, {"name": "animation.Animation", "path": "_as_gen/matplotlib.animation.animation", "type": "animation", "text": "\nA base class for Animations.\n\nThis class is not usable as is, and should be subclassed to provide needed\nbehavior.\n\nNote\n\nYou must store the created Animation in a variable that lives as long as the\nanimation should run. Otherwise, the Animation object will be garbage-\ncollected and the animation stops.\n\nThe figure object used to get needed events, such as draw or resize.\n\nA class that can run a callback when desired events are generated, as well as\nbe stopped and started.\n\nExamples include timers (see `TimedAnimation`) and file system notifications.\n\nWhether blitting is used to optimize drawing.\n\nSee also\n\n`__init__`(fig[, event_source, blit])\n\n`new_frame_seq`()\n\nReturn a new sequence of frame information.\n\n`new_saved_frame_seq`()\n\nReturn a new sequence of saved/cached frame information.\n\n`pause`()\n\nPause the animation.\n\n`resume`()\n\nResume the animation.\n\n`save`(filename[, writer, fps, dpi, codec, ...])\n\nSave the animation as a movie file by drawing every frame.\n\n`to_html5_video`([embed_limit])\n\nConvert the animation to an HTML5 `<video>` tag.\n\n`to_jshtml`([fps, embed_frames, default_mode])\n\nGenerate HTML representation of the animation.\n\nReturn a new sequence of frame information.\n\nReturn a new sequence of saved/cached frame information.\n\nPause the animation.\n\nResume the animation.\n\nSave the animation as a movie file by drawing every frame.\n\nThe output filename, e.g., `mymovie.mp4`.\n\nA `MovieWriter` instance to use or a key that identifies a class to use, such\nas 'ffmpeg'.\n\nMovie frame rate (per second). If not set, the frame rate from the animation's\nframe interval.\n\nControls the dots per inch for the movie frames. Together with the figure's\nsize in inches, this controls the size of the movie.\n\nThe video codec to use. Not all codecs are supported by a given `MovieWriter`.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nDictionary of keys and values for metadata to include in the output file. Some\nkeys that may be of use include: title, artist, genre, subject, copyright,\nsrcform, comment.\n\nAdditional `Animation` objects that should be included in the saved movie\nfile. These need to be from the same `matplotlib.figure.Figure` instance.\nAlso, animation frames will just be simply combined, so there should be a 1:1\ncorrespondence between the frames from the different animations.\n\nKeyword arguments passed to each `savefig` call used to save the individual\nframes.\n\nA callback function that will be called for every frame to notify the saving\nprogress. It must have the signature\n\nwhere current_frame is the current frame number and total_frames is the total\nnumber of frames to be saved. total_frames is set to None, if the total number\nof frames can not be determined. Return values may exist but are ignored.\n\nExample code to write the progress to stdout:\n\nfps, codec, bitrate, extra_args and metadata are used to construct a\n`MovieWriter` instance and can only be passed if writer is a string. If they\nare passed as non-None and writer is a `MovieWriter`, a `RuntimeError` will be\nraised.\n\nConvert the animation to an HTML5 `<video>` tag.\n\nThis saves the animation as an h264 video, encoded in base64 directly into the\nHTML5 video tag. This respects `rcParams[\"animation.writer\"]` (default:\n`'ffmpeg'`) and `rcParams[\"animation.bitrate\"]` (default: `-1`). This also\nmakes use of the `interval` to control the speed, and uses the `repeat`\nparameter to decide whether to loop.\n\nLimit, in MB, of the returned animation. No animation is created if the limit\nis exceeded. Defaults to `rcParams[\"animation.embed_limit\"]` (default: `20.0`)\n= 20.0.\n\nAn HTML5 video tag with the animation embedded as base64 encoded h264 video.\nIf the embed_limit is exceeded, this returns the string \"Video too large to\nembed.\"\n\nGenerate HTML representation of the animation.\n\nMovie frame rate (per second). If not set, the frame rate from the animation's\nframe interval.\n\nWhat to do when the animation ends. Must be one of `{'loop', 'once',\n'reflect'}`. Defaults to `'loop'` if `self.repeat` is True, otherwise\n`'once'`.\n\n"}, {"name": "animation.Animation.__init__()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.__init__", "type": "animation", "text": "\n\n"}, {"name": "animation.Animation.new_frame_seq()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.new_frame_seq", "type": "animation", "text": "\nReturn a new sequence of frame information.\n\n"}, {"name": "animation.Animation.new_saved_frame_seq()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.new_saved_frame_seq", "type": "animation", "text": "\nReturn a new sequence of saved/cached frame information.\n\n"}, {"name": "animation.Animation.pause()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.pause", "type": "animation", "text": "\nPause the animation.\n\n"}, {"name": "animation.Animation.resume()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.resume", "type": "animation", "text": "\nResume the animation.\n\n"}, {"name": "animation.Animation.save()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.save", "type": "animation", "text": "\nSave the animation as a movie file by drawing every frame.\n\nThe output filename, e.g., `mymovie.mp4`.\n\nA `MovieWriter` instance to use or a key that identifies a class to use, such\nas 'ffmpeg'.\n\nMovie frame rate (per second). If not set, the frame rate from the animation's\nframe interval.\n\nControls the dots per inch for the movie frames. Together with the figure's\nsize in inches, this controls the size of the movie.\n\nThe video codec to use. Not all codecs are supported by a given `MovieWriter`.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nDictionary of keys and values for metadata to include in the output file. Some\nkeys that may be of use include: title, artist, genre, subject, copyright,\nsrcform, comment.\n\nAdditional `Animation` objects that should be included in the saved movie\nfile. These need to be from the same `matplotlib.figure.Figure` instance.\nAlso, animation frames will just be simply combined, so there should be a 1:1\ncorrespondence between the frames from the different animations.\n\nKeyword arguments passed to each `savefig` call used to save the individual\nframes.\n\nA callback function that will be called for every frame to notify the saving\nprogress. It must have the signature\n\nwhere current_frame is the current frame number and total_frames is the total\nnumber of frames to be saved. total_frames is set to None, if the total number\nof frames can not be determined. Return values may exist but are ignored.\n\nExample code to write the progress to stdout:\n\nfps, codec, bitrate, extra_args and metadata are used to construct a\n`MovieWriter` instance and can only be passed if writer is a string. If they\nare passed as non-None and writer is a `MovieWriter`, a `RuntimeError` will be\nraised.\n\n"}, {"name": "animation.Animation.to_html5_video()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.to_html5_video", "type": "animation", "text": "\nConvert the animation to an HTML5 `<video>` tag.\n\nThis saves the animation as an h264 video, encoded in base64 directly into the\nHTML5 video tag. This respects `rcParams[\"animation.writer\"]` (default:\n`'ffmpeg'`) and `rcParams[\"animation.bitrate\"]` (default: `-1`). This also\nmakes use of the `interval` to control the speed, and uses the `repeat`\nparameter to decide whether to loop.\n\nLimit, in MB, of the returned animation. No animation is created if the limit\nis exceeded. Defaults to `rcParams[\"animation.embed_limit\"]` (default: `20.0`)\n= 20.0.\n\nAn HTML5 video tag with the animation embedded as base64 encoded h264 video.\nIf the embed_limit is exceeded, this returns the string \"Video too large to\nembed.\"\n\n"}, {"name": "animation.Animation.to_jshtml()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.to_jshtml", "type": "animation", "text": "\nGenerate HTML representation of the animation.\n\nMovie frame rate (per second). If not set, the frame rate from the animation's\nframe interval.\n\nWhat to do when the animation ends. Must be one of `{'loop', 'once',\n'reflect'}`. Defaults to `'loop'` if `self.repeat` is True, otherwise\n`'once'`.\n\n"}, {"name": "animation.ArtistAnimation", "path": "_as_gen/matplotlib.animation.artistanimation", "type": "animation", "text": "\nAnimation using a fixed set of `Artist` objects.\n\nBefore creating an instance, all plotting should have taken place and the\nrelevant artists saved.\n\nNote\n\nYou must store the created Animation in a variable that lives as long as the\nanimation should run. Otherwise, the Animation object will be garbage-\ncollected and the animation stops.\n\nThe figure object used to get needed events, such as draw or resize.\n\nEach list entry is a collection of `Artist` objects that are made visible on\nthe corresponding frame. Other artists are made invisible.\n\nDelay between frames in milliseconds.\n\nThe delay in milliseconds between consecutive animation runs, if repeat is\nTrue.\n\nWhether the animation repeats when the sequence of frames is completed.\n\nWhether blitting is used to optimize drawing.\n\n`__init__`(fig, artists, *args, **kwargs)\n\n`new_frame_seq`()\n\nReturn a new sequence of frame information.\n\n`new_saved_frame_seq`()\n\nReturn a new sequence of saved/cached frame information.\n\n`pause`()\n\nPause the animation.\n\n`resume`()\n\nResume the animation.\n\n`save`(filename[, writer, fps, dpi, codec, ...])\n\nSave the animation as a movie file by drawing every frame.\n\n`to_html5_video`([embed_limit])\n\nConvert the animation to an HTML5 `<video>` tag.\n\n`to_jshtml`([fps, embed_frames, default_mode])\n\nGenerate HTML representation of the animation.\n\n"}, {"name": "animation.ArtistAnimation.__init__()", "path": "_as_gen/matplotlib.animation.artistanimation#matplotlib.animation.ArtistAnimation.__init__", "type": "animation", "text": "\n\n"}, {"name": "animation.FFMpegBase", "path": "_as_gen/matplotlib.animation.ffmpegbase", "type": "animation", "text": "\nMixin class for FFMpeg output.\n\nTo be useful this must be multiply-inherited from with a `MovieWriterBase`\nsub-class.\n\n`__init__`(*args, **kwargs)\n\n`output_args`\n\n"}, {"name": "animation.FFMpegBase.__init__()", "path": "_as_gen/matplotlib.animation.ffmpegbase#matplotlib.animation.FFMpegBase.__init__", "type": "animation", "text": "\n\n"}, {"name": "animation.FFMpegFileWriter", "path": "_as_gen/matplotlib.animation.ffmpegfilewriter", "type": "animation", "text": "\nFile-based ffmpeg writer.\n\nFrames are written to temporary files on disk and then stitched together at\nthe end.\n\n`__init__`(*args, **kwargs)\n\n`bin_path`()\n\nReturn the binary path to the commandline tool used by a specific subclass.\n\n`cleanup`()\n\n[Deprecated]\n\n`finish`()\n\nFinish any processing for writing the movie.\n\n`grab_frame`(**savefig_kwargs)\n\nGrab the image information from the figure and save as a movie frame.\n\n`isAvailable`()\n\nReturn whether a MovieWriter subclass is actually available.\n\n`saving`(fig, outfile, dpi, *args, **kwargs)\n\nContext manager to facilitate writing the movie file.\n\n`setup`(fig, outfile[, dpi, frame_prefix])\n\nSetup for writing the movie file.\n\n`frame_format`\n\nFormat (png, jpeg, etc.) to use for saving the frames, which can be decided by\nthe individual subclasses.\n\n`frame_size`\n\nA tuple `(width, height)` in pixels of a movie frame.\n\n`output_args`\n\n`supported_formats`\n\n"}, {"name": "animation.FFMpegFileWriter.__init__()", "path": "_as_gen/matplotlib.animation.ffmpegfilewriter#matplotlib.animation.FFMpegFileWriter.__init__", "type": "animation", "text": "\n\n"}, {"name": "animation.FFMpegFileWriter.supported_formats", "path": "_as_gen/matplotlib.animation.ffmpegfilewriter#matplotlib.animation.FFMpegFileWriter.supported_formats", "type": "animation", "text": "\n\n"}, {"name": "animation.FFMpegWriter", "path": "_as_gen/matplotlib.animation.ffmpegwriter", "type": "animation", "text": "\nPipe-based ffmpeg writer.\n\nFrames are streamed directly to ffmpeg via a pipe and written in a single\npass.\n\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\n`__init__`([fps, codec, bitrate, extra_args, ...])\n\n`bin_path`()\n\nReturn the binary path to the commandline tool used by a specific subclass.\n\n`cleanup`()\n\n[Deprecated]\n\n`finish`()\n\nFinish any processing for writing the movie.\n\n`grab_frame`(**savefig_kwargs)\n\nGrab the image information from the figure and save as a movie frame.\n\n`isAvailable`()\n\nReturn whether a MovieWriter subclass is actually available.\n\n`saving`(fig, outfile, dpi, *args, **kwargs)\n\nContext manager to facilitate writing the movie file.\n\n`setup`(fig, outfile[, dpi])\n\nSetup for writing the movie file.\n\n`frame_size`\n\nA tuple `(width, height)` in pixels of a movie frame.\n\n`output_args`\n\n`supported_formats`\n\n"}, {"name": "animation.FFMpegWriter.__init__()", "path": "_as_gen/matplotlib.animation.ffmpegwriter#matplotlib.animation.FFMpegWriter.__init__", "type": "animation", "text": "\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\n"}, {"name": "animation.FileMovieWriter", "path": "_as_gen/matplotlib.animation.filemoviewriter", "type": "animation", "text": "\n`MovieWriter` for writing to individual files and stitching at the end.\n\nThis must be sub-classed to be useful.\n\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\n`__init__`(*args, **kwargs)\n\n`bin_path`()\n\nReturn the binary path to the commandline tool used by a specific subclass.\n\n`cleanup`()\n\n[Deprecated]\n\n`finish`()\n\nFinish any processing for writing the movie.\n\n`grab_frame`(**savefig_kwargs)\n\nGrab the image information from the figure and save as a movie frame.\n\n`isAvailable`()\n\nReturn whether a MovieWriter subclass is actually available.\n\n`saving`(fig, outfile, dpi, *args, **kwargs)\n\nContext manager to facilitate writing the movie file.\n\n`setup`(fig, outfile[, dpi, frame_prefix])\n\nSetup for writing the movie file.\n\n`frame_format`\n\nFormat (png, jpeg, etc.) to use for saving the frames, which can be decided by\nthe individual subclasses.\n\n`frame_size`\n\nA tuple `(width, height)` in pixels of a movie frame.\n\n`supported_formats`\n\nFinish any processing for writing the movie.\n\nFormat (png, jpeg, etc.) to use for saving the frames, which can be decided by\nthe individual subclasses.\n\nGrab the image information from the figure and save as a movie frame.\n\nAll keyword arguments in savefig_kwargs are passed on to the `savefig` call\nthat saves the figure.\n\nSetup for writing the movie file.\n\nThe figure to grab the rendered frames from.\n\nThe filename of the resulting movie file.\n\nThe dpi of the output file. This, with the figure size, controls the size in\npixels of the resulting movie file.\n\nThe filename prefix to use for temporary files. If None (the default), files\nare written to a temporary directory which is deleted by `cleanup`; if not\nNone, no temporary files are deleted.\n\n"}, {"name": "animation.FileMovieWriter.__init__()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.__init__", "type": "animation", "text": "\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\n"}, {"name": "animation.FileMovieWriter.finish()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.finish", "type": "animation", "text": "\nFinish any processing for writing the movie.\n\n"}, {"name": "animation.FileMovieWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.grab_frame", "type": "animation", "text": "\nGrab the image information from the figure and save as a movie frame.\n\nAll keyword arguments in savefig_kwargs are passed on to the `savefig` call\nthat saves the figure.\n\n"}, {"name": "animation.FileMovieWriter.setup()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.setup", "type": "animation", "text": "\nSetup for writing the movie file.\n\nThe figure to grab the rendered frames from.\n\nThe filename of the resulting movie file.\n\nThe dpi of the output file. This, with the figure size, controls the size in\npixels of the resulting movie file.\n\nThe filename prefix to use for temporary files. If None (the default), files\nare written to a temporary directory which is deleted by `cleanup`; if not\nNone, no temporary files are deleted.\n\n"}, {"name": "animation.FuncAnimation", "path": "_as_gen/matplotlib.animation.funcanimation", "type": "animation", "text": "\nMakes an animation by repeatedly calling a function func.\n\nNote\n\nYou must store the created Animation in a variable that lives as long as the\nanimation should run. Otherwise, the Animation object will be garbage-\ncollected and the animation stops.\n\nThe figure object used to get needed events, such as draw or resize.\n\nThe function to call at each frame. The first argument will be the next value\nin frames. Any additional positional arguments can be supplied via the fargs\nparameter.\n\nThe required signature is:\n\nIf `blit == True`, func must return an iterable of all artists that were\nmodified or created. This information is used by the blitting algorithm to\ndetermine which parts of the figure have to be updated. The return value is\nunused if `blit == False` and may be omitted in that case.\n\nSource of data to pass func and each frame of the animation\n\nIf a generator function, then must have the signature:\n\nIn all of these cases, the values in frames is simply passed through to the\nuser-supplied func and thus can be of any type.\n\nA function used to draw a clear frame. If not given, the results of drawing\nfrom the first item in the frames sequence will be used. This function will be\ncalled once before the first frame.\n\nThe required signature is:\n\nIf `blit == True`, init_func must return an iterable of artists to be re-\ndrawn. This information is used by the blitting algorithm to determine which\nparts of the figure have to be updated. The return value is unused if `blit ==\nFalse` and may be omitted in that case.\n\nAdditional arguments to pass to each call to func.\n\nFallback for the number of values from frames to cache. This is only used if\nthe number of frames cannot be inferred from frames, i.e. when it's an\niterator without length or a generator.\n\nDelay between frames in milliseconds.\n\nThe delay in milliseconds between consecutive animation runs, if repeat is\nTrue.\n\nWhether the animation repeats when the sequence of frames is completed.\n\nWhether blitting is used to optimize drawing. Note: when using blitting, any\nanimated artists will be drawn according to their zorder; however, they will\nbe drawn on top of any previous artists, regardless of their zorder.\n\nWhether frame data is cached. Disabling cache might be helpful when frames\ncontain large objects.\n\n`__init__`(fig, func[, frames, init_func, ...])\n\n`new_frame_seq`()\n\nReturn a new sequence of frame information.\n\n`new_saved_frame_seq`()\n\nReturn a new sequence of saved/cached frame information.\n\n`pause`()\n\nPause the animation.\n\n`resume`()\n\nResume the animation.\n\n`save`(filename[, writer, fps, dpi, codec, ...])\n\nSave the animation as a movie file by drawing every frame.\n\n`to_html5_video`([embed_limit])\n\nConvert the animation to an HTML5 `<video>` tag.\n\n`to_jshtml`([fps, embed_frames, default_mode])\n\nGenerate HTML representation of the animation.\n\nReturn a new sequence of frame information.\n\nReturn a new sequence of saved/cached frame information.\n\n"}, {"name": "animation.FuncAnimation.__init__()", "path": "_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation.__init__", "type": "animation", "text": "\n\n"}, {"name": "animation.FuncAnimation.new_frame_seq()", "path": "_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation.new_frame_seq", "type": "animation", "text": "\nReturn a new sequence of frame information.\n\n"}, {"name": "animation.FuncAnimation.new_saved_frame_seq()", "path": "_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation.new_saved_frame_seq", "type": "animation", "text": "\nReturn a new sequence of saved/cached frame information.\n\n"}, {"name": "animation.HTMLWriter", "path": "_as_gen/matplotlib.animation.htmlwriter", "type": "animation", "text": "\nWriter for JavaScript-based HTML movies.\n\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\n`__init__`([fps, codec, bitrate, extra_args, ...])\n\n`bin_path`()\n\nReturn the binary path to the commandline tool used by a specific subclass.\n\n`cleanup`()\n\n[Deprecated]\n\n`finish`()\n\nFinish any processing for writing the movie.\n\n`grab_frame`(**savefig_kwargs)\n\nGrab the image information from the figure and save as a movie frame.\n\n`isAvailable`()\n\nReturn whether a MovieWriter subclass is actually available.\n\n`saving`(fig, outfile, dpi, *args, **kwargs)\n\nContext manager to facilitate writing the movie file.\n\n`setup`(fig, outfile, dpi[, frame_dir])\n\nSetup for writing the movie file.\n\n`frame_format`\n\nFormat (png, jpeg, etc.) to use for saving the frames, which can be decided by\nthe individual subclasses.\n\n`frame_size`\n\nA tuple `(width, height)` in pixels of a movie frame.\n\n`supported_formats`\n\nFinish any processing for writing the movie.\n\nGrab the image information from the figure and save as a movie frame.\n\nAll keyword arguments in savefig_kwargs are passed on to the `savefig` call\nthat saves the figure.\n\nReturn whether a MovieWriter subclass is actually available.\n\nSetup for writing the movie file.\n\nThe figure to grab the rendered frames from.\n\nThe filename of the resulting movie file.\n\nThe dpi of the output file. This, with the figure size, controls the size in\npixels of the resulting movie file.\n\nThe filename prefix to use for temporary files. If None (the default), files\nare written to a temporary directory which is deleted by `cleanup`; if not\nNone, no temporary files are deleted.\n\n"}, {"name": "animation.HTMLWriter.__init__()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.__init__", "type": "animation", "text": "\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\n"}, {"name": "animation.HTMLWriter.finish()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.finish", "type": "animation", "text": "\nFinish any processing for writing the movie.\n\n"}, {"name": "animation.HTMLWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.grab_frame", "type": "animation", "text": "\nGrab the image information from the figure and save as a movie frame.\n\nAll keyword arguments in savefig_kwargs are passed on to the `savefig` call\nthat saves the figure.\n\n"}, {"name": "animation.HTMLWriter.isAvailable()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.isAvailable", "type": "animation", "text": "\nReturn whether a MovieWriter subclass is actually available.\n\n"}, {"name": "animation.HTMLWriter.setup()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.setup", "type": "animation", "text": "\nSetup for writing the movie file.\n\nThe figure to grab the rendered frames from.\n\nThe filename of the resulting movie file.\n\nThe dpi of the output file. This, with the figure size, controls the size in\npixels of the resulting movie file.\n\nThe filename prefix to use for temporary files. If None (the default), files\nare written to a temporary directory which is deleted by `cleanup`; if not\nNone, no temporary files are deleted.\n\n"}, {"name": "animation.HTMLWriter.supported_formats", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.supported_formats", "type": "animation", "text": "\n\n"}, {"name": "animation.ImageMagickBase", "path": "_as_gen/matplotlib.animation.imagemagickbase", "type": "animation", "text": "\nMixin class for ImageMagick output.\n\nTo be useful this must be multiply-inherited from with a `MovieWriterBase`\nsub-class.\n\n`__init__`(*args, **kwargs)\n\n`bin_path`()\n\n`isAvailable`()\n\n`delay`\n\n`output_args`\n\n"}, {"name": "animation.ImageMagickBase.__init__()", "path": "_as_gen/matplotlib.animation.imagemagickbase#matplotlib.animation.ImageMagickBase.__init__", "type": "animation", "text": "\n\n"}, {"name": "animation.ImageMagickBase.bin_path()", "path": "_as_gen/matplotlib.animation.imagemagickbase#matplotlib.animation.ImageMagickBase.bin_path", "type": "animation", "text": "\n\n"}, {"name": "animation.ImageMagickBase.isAvailable()", "path": "_as_gen/matplotlib.animation.imagemagickbase#matplotlib.animation.ImageMagickBase.isAvailable", "type": "animation", "text": "\n\n"}, {"name": "animation.ImageMagickFileWriter", "path": "_as_gen/matplotlib.animation.imagemagickfilewriter", "type": "animation", "text": "\nFile-based animated gif writer.\n\nFrames are written to temporary files on disk and then stitched together at\nthe end.\n\n`__init__`(*args, **kwargs)\n\n`bin_path`()\n\nReturn the binary path to the commandline tool used by a specific subclass.\n\n`cleanup`()\n\n[Deprecated]\n\n`finish`()\n\nFinish any processing for writing the movie.\n\n`grab_frame`(**savefig_kwargs)\n\nGrab the image information from the figure and save as a movie frame.\n\n`isAvailable`()\n\nReturn whether a MovieWriter subclass is actually available.\n\n`saving`(fig, outfile, dpi, *args, **kwargs)\n\nContext manager to facilitate writing the movie file.\n\n`setup`(fig, outfile[, dpi, frame_prefix])\n\nSetup for writing the movie file.\n\n`delay`\n\n`frame_format`\n\nFormat (png, jpeg, etc.) to use for saving the frames, which can be decided by\nthe individual subclasses.\n\n`frame_size`\n\nA tuple `(width, height)` in pixels of a movie frame.\n\n`output_args`\n\n`supported_formats`\n\n"}, {"name": "animation.ImageMagickFileWriter.__init__()", "path": "_as_gen/matplotlib.animation.imagemagickfilewriter#matplotlib.animation.ImageMagickFileWriter.__init__", "type": "animation", "text": "\n\n"}, {"name": "animation.ImageMagickFileWriter.supported_formats", "path": "_as_gen/matplotlib.animation.imagemagickfilewriter#matplotlib.animation.ImageMagickFileWriter.supported_formats", "type": "animation", "text": "\n\n"}, {"name": "animation.ImageMagickWriter", "path": "_as_gen/matplotlib.animation.imagemagickwriter", "type": "animation", "text": "\nPipe-based animated gif.\n\nFrames are streamed directly to ImageMagick via a pipe and written in a single\npass.\n\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\n`__init__`([fps, codec, bitrate, extra_args, ...])\n\n`bin_path`()\n\nReturn the binary path to the commandline tool used by a specific subclass.\n\n`cleanup`()\n\n[Deprecated]\n\n`finish`()\n\nFinish any processing for writing the movie.\n\n`grab_frame`(**savefig_kwargs)\n\nGrab the image information from the figure and save as a movie frame.\n\n`isAvailable`()\n\nReturn whether a MovieWriter subclass is actually available.\n\n`saving`(fig, outfile, dpi, *args, **kwargs)\n\nContext manager to facilitate writing the movie file.\n\n`setup`(fig, outfile[, dpi])\n\nSetup for writing the movie file.\n\n`delay`\n\n`frame_size`\n\nA tuple `(width, height)` in pixels of a movie frame.\n\n`output_args`\n\n`supported_formats`\n\n"}, {"name": "animation.ImageMagickWriter.__init__()", "path": "_as_gen/matplotlib.animation.imagemagickwriter#matplotlib.animation.ImageMagickWriter.__init__", "type": "animation", "text": "\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\n"}, {"name": "animation.MovieWriter", "path": "_as_gen/matplotlib.animation.moviewriter", "type": "animation", "text": "\nBase class for writing movies.\n\nThis is a base class for MovieWriter subclasses that write a movie frame data\nto a pipe. You cannot instantiate this class directly. See examples for how to\nuse its subclasses.\n\nThe format used in writing frame data, defaults to 'rgba'.\n\nThe figure to capture data from. This must be provided by the sub-classes.\n\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\n`__init__`([fps, codec, bitrate, extra_args, ...])\n\n`bin_path`()\n\nReturn the binary path to the commandline tool used by a specific subclass.\n\n`cleanup`()\n\n[Deprecated]\n\n`finish`()\n\nFinish any processing for writing the movie.\n\n`grab_frame`(**savefig_kwargs)\n\nGrab the image information from the figure and save as a movie frame.\n\n`isAvailable`()\n\nReturn whether a MovieWriter subclass is actually available.\n\n`saving`(fig, outfile, dpi, *args, **kwargs)\n\nContext manager to facilitate writing the movie file.\n\n`setup`(fig, outfile[, dpi])\n\nSetup for writing the movie file.\n\n`frame_size`\n\nA tuple `(width, height)` in pixels of a movie frame.\n\n`supported_formats`\n\nReturn the binary path to the commandline tool used by a specific subclass.\nThis is a class method so that the tool can be looked for before making a\nparticular MovieWriter subclass available.\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\nFinish any processing for writing the movie.\n\nGrab the image information from the figure and save as a movie frame.\n\nAll keyword arguments in savefig_kwargs are passed on to the `savefig` call\nthat saves the figure.\n\nReturn whether a MovieWriter subclass is actually available.\n\nSetup for writing the movie file.\n\nThe figure object that contains the information for frames.\n\nThe filename of the resulting movie file.\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the\nresulting movie file.\n\n"}, {"name": "animation.MovieWriter.__init__()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.__init__", "type": "animation", "text": "\nMovie frame rate (per second).\n\nThe codec to use.\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher\nquality movies, but increase the file size. A value of -1 lets the underlying\nmovie encoder select the bitrate.\n\nExtra command-line arguments passed to the underlying movie encoder. The\ndefault, None, means to use `rcParams[\"animation.[name-of-encoder]_args\"]` for\nthe builtin writers.\n\nA dictionary of keys and values for metadata to include in the output file.\nSome keys that may be of use include: title, artist, genre, subject,\ncopyright, srcform, comment.\n\n"}, {"name": "animation.MovieWriter.bin_path()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.bin_path", "type": "animation", "text": "\nReturn the binary path to the commandline tool used by a specific subclass.\nThis is a class method so that the tool can be looked for before making a\nparticular MovieWriter subclass available.\n\n"}, {"name": "animation.MovieWriter.cleanup()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.cleanup", "type": "animation", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "animation.MovieWriter.finish()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.finish", "type": "animation", "text": "\nFinish any processing for writing the movie.\n\n"}, {"name": "animation.MovieWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.grab_frame", "type": "animation", "text": "\nGrab the image information from the figure and save as a movie frame.\n\nAll keyword arguments in savefig_kwargs are passed on to the `savefig` call\nthat saves the figure.\n\n"}, {"name": "animation.MovieWriter.isAvailable()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.isAvailable", "type": "animation", "text": "\nReturn whether a MovieWriter subclass is actually available.\n\n"}, {"name": "animation.MovieWriter.setup()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.setup", "type": "animation", "text": "\nSetup for writing the movie file.\n\nThe figure object that contains the information for frames.\n\nThe filename of the resulting movie file.\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the\nresulting movie file.\n\n"}, {"name": "animation.MovieWriter.supported_formats", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.supported_formats", "type": "animation", "text": "\n\n"}, {"name": "animation.MovieWriterRegistry", "path": "_as_gen/matplotlib.animation.moviewriterregistry", "type": "animation", "text": "\nRegistry of available writer classes by human readable name.\n\n`__init__`()\n\n`is_available`(name)\n\nCheck if given writer is available by name.\n\n`list`()\n\nGet a list of available MovieWriters.\n\n`register`(name)\n\nDecorator for registering a class under a name.\n\nCheck if given writer is available by name.\n\nGet a list of available MovieWriters.\n\nDecorator for registering a class under a name.\n\nExample use:\n\n"}, {"name": "animation.MovieWriterRegistry.__init__()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.__init__", "type": "animation", "text": "\n\n"}, {"name": "animation.MovieWriterRegistry.is_available()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.is_available", "type": "animation", "text": "\nCheck if given writer is available by name.\n\n"}, {"name": "animation.MovieWriterRegistry.list()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.list", "type": "animation", "text": "\nGet a list of available MovieWriters.\n\n"}, {"name": "animation.MovieWriterRegistry.register()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.register", "type": "animation", "text": "\nDecorator for registering a class under a name.\n\nExample use:\n\n"}, {"name": "animation.PillowWriter", "path": "_as_gen/matplotlib.animation.pillowwriter", "type": "animation", "text": "\n`__init__`([fps, metadata, codec, bitrate])\n\n`finish`()\n\nFinish any processing for writing the movie.\n\n`grab_frame`(**savefig_kwargs)\n\nGrab the image information from the figure and save as a movie frame.\n\n`isAvailable`()\n\n`saving`(fig, outfile, dpi, *args, **kwargs)\n\nContext manager to facilitate writing the movie file.\n\n`setup`(fig, outfile[, dpi])\n\nSetup for writing the movie file.\n\n`frame_size`\n\nA tuple `(width, height)` in pixels of a movie frame.\n\nFinish any processing for writing the movie.\n\nGrab the image information from the figure and save as a movie frame.\n\nAll keyword arguments in savefig_kwargs are passed on to the `savefig` call\nthat saves the figure.\n\nSetup for writing the movie file.\n\nThe figure object that contains the information for frames.\n\nThe filename of the resulting movie file.\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the\nresulting movie file.\n\n"}, {"name": "animation.PillowWriter.__init__()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.__init__", "type": "animation", "text": "\n\n"}, {"name": "animation.PillowWriter.finish()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.finish", "type": "animation", "text": "\nFinish any processing for writing the movie.\n\n"}, {"name": "animation.PillowWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.grab_frame", "type": "animation", "text": "\nGrab the image information from the figure and save as a movie frame.\n\nAll keyword arguments in savefig_kwargs are passed on to the `savefig` call\nthat saves the figure.\n\n"}, {"name": "animation.PillowWriter.isAvailable()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.isAvailable", "type": "animation", "text": "\n\n"}, {"name": "animation.PillowWriter.setup()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.setup", "type": "animation", "text": "\nSetup for writing the movie file.\n\nThe figure object that contains the information for frames.\n\nThe filename of the resulting movie file.\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the\nresulting movie file.\n\n"}, {"name": "animation.TimedAnimation", "path": "_as_gen/matplotlib.animation.timedanimation", "type": "animation", "text": "\n`Animation` subclass for time-based animation.\n\nA new frame is drawn every interval milliseconds.\n\nNote\n\nYou must store the created Animation in a variable that lives as long as the\nanimation should run. Otherwise, the Animation object will be garbage-\ncollected and the animation stops.\n\nThe figure object used to get needed events, such as draw or resize.\n\nDelay between frames in milliseconds.\n\nThe delay in milliseconds between consecutive animation runs, if repeat is\nTrue.\n\nWhether the animation repeats when the sequence of frames is completed.\n\nWhether blitting is used to optimize drawing.\n\n`__init__`(fig[, interval, repeat_delay, ...])\n\n`new_frame_seq`()\n\nReturn a new sequence of frame information.\n\n`new_saved_frame_seq`()\n\nReturn a new sequence of saved/cached frame information.\n\n`pause`()\n\nPause the animation.\n\n`resume`()\n\nResume the animation.\n\n`save`(filename[, writer, fps, dpi, codec, ...])\n\nSave the animation as a movie file by drawing every frame.\n\n`to_html5_video`([embed_limit])\n\nConvert the animation to an HTML5 `<video>` tag.\n\n`to_jshtml`([fps, embed_frames, default_mode])\n\nGenerate HTML representation of the animation.\n\n"}, {"name": "animation.TimedAnimation.__init__()", "path": "_as_gen/matplotlib.animation.timedanimation#matplotlib.animation.TimedAnimation.__init__", "type": "animation", "text": "\n\n"}, {"name": "artist", "path": "artist_api", "type": "artist", "text": "\nAbstract base class for objects that render into a FigureCanvas.\n\nTypically, all visible elements in a figure are subclasses of Artist.\n\n`Artist.add_callback`\n\nAdd a callback function that will be called whenever one of the `Artist`'s\nproperties changes.\n\n`Artist.remove_callback`\n\nRemove a callback based on its observer id.\n\n`Artist.pchanged`\n\nCall all of the registered callbacks.\n\n`Artist.get_cursor_data`\n\nReturn the cursor data for a given event.\n\n`Artist.format_cursor_data`\n\nReturn a string representation of data.\n\n`Artist.mouseover`\n\nIf this property is set to True, the artist will be queried for custom context\ninformation when the mouse cursor moves over it.\n\n`Artist.contains`\n\nTest whether the artist contains the mouse event.\n\n`Artist.pick`\n\nProcess a pick event.\n\n`Artist.pickable`\n\nReturn whether the artist is pickable.\n\n`Artist.set_picker`\n\nDefine the picking behavior of the artist.\n\n`Artist.get_picker`\n\nReturn the picking behavior of the artist.\n\n`Artist.set_clip_on`\n\nSet whether the artist uses clipping.\n\n`Artist.get_clip_on`\n\nReturn whether the artist uses clipping.\n\n`Artist.set_clip_box`\n\nSet the artist's clip `Bbox`.\n\n`Artist.get_clip_box`\n\nReturn the clipbox.\n\n`Artist.set_clip_path`\n\nSet the artist's clip path.\n\n`Artist.get_clip_path`\n\nReturn the clip path.\n\n`Artist.update`\n\nUpdate this artist's properties from the dict props.\n\n`Artist.update_from`\n\nCopy properties from other to self.\n\n`Artist.properties`\n\nReturn a dictionary of all the properties of the artist.\n\n`Artist.set`\n\nSet multiple properties at once.\n\n`Artist.draw`\n\nDraw the Artist (and its children) using the given renderer.\n\n`Artist.set_animated`\n\nSet whether the artist is intended to be used in an animation.\n\n`Artist.get_animated`\n\nReturn whether the artist is animated.\n\n`Artist.set_alpha`\n\nSet the alpha value used for blending - not supported on all backends.\n\n`Artist.get_alpha`\n\nReturn the alpha value used for blending - not supported on all backends.\n\n`Artist.set_snap`\n\nSet the snapping behavior.\n\n`Artist.get_snap`\n\nReturn the snap setting.\n\n`Artist.set_visible`\n\nSet the artist's visibility.\n\n`Artist.get_visible`\n\nReturn the visibility.\n\n`Artist.zorder`\n\n`Artist.set_zorder`\n\nSet the zorder for the artist.\n\n`Artist.get_zorder`\n\nReturn the artist's zorder.\n\n`Artist.set_agg_filter`\n\nSet the agg filter.\n\n`Artist.set_sketch_params`\n\nSet the sketch parameters.\n\n`Artist.get_sketch_params`\n\nReturn the sketch parameters for the artist.\n\n`Artist.set_rasterized`\n\nForce rasterized (bitmap) drawing for vector graphics output.\n\n`Artist.get_rasterized`\n\nReturn whether the artist is to be rasterized.\n\n`Artist.set_path_effects`\n\nSet the path effects.\n\n`Artist.get_path_effects`\n\n`Artist.get_agg_filter`\n\nReturn filter function to be used for agg filter.\n\n`Artist.get_window_extent`\n\nGet the artist's bounding box in display space.\n\n`Artist.get_transformed_clip_path_and_affine`\n\nReturn the clip path with the non-affine part of its transformation applied,\nand the remaining affine part of its transformation.\n\n`Artist.remove`\n\nRemove the artist from the figure if possible.\n\n`Artist.axes`\n\nThe `Axes` instance the artist resides in, or None.\n\n`Artist.set_figure`\n\nSet the `Figure` instance the artist belongs to.\n\n`Artist.get_figure`\n\nReturn the `Figure` instance the artist belongs to.\n\n`Artist.get_children`\n\nReturn a list of the child `Artist`s of this `Artist`.\n\n`Artist.findobj`\n\nFind artist objects.\n\n`Artist.set_transform`\n\nSet the artist transform.\n\n`Artist.get_transform`\n\nReturn the `Transform` instance used by this artist.\n\n`Artist.is_transform_set`\n\nReturn whether the Artist has an explicitly set transform.\n\n`Artist.convert_xunits`\n\nConvert x using the unit type of the xaxis.\n\n`Artist.convert_yunits`\n\nConvert y using the unit type of the yaxis.\n\n`Artist.have_units`\n\nReturn whether units are set on any axis.\n\n`Artist.set_gid`\n\nSet the (group) id for the artist.\n\n`Artist.get_gid`\n\nReturn the group id.\n\n`Artist.set_label`\n\nSet a label that will be displayed in the legend.\n\n`Artist.get_label`\n\nReturn the label used for this artist in the legend.\n\n`Artist.set_url`\n\nSet the url for the artist.\n\n`Artist.get_url`\n\nReturn the url.\n\n`Artist.sticky_edges`\n\n`x` and `y` sticky edge lists for autoscaling.\n\n`Artist.set_in_layout`\n\nSet if artist is to be included in layout calculations, E.g.\n\n`Artist.get_in_layout`\n\nReturn boolean flag, `True` if artist is included in layout calculations.\n\n`Artist.stale`\n\nWhether the artist is 'stale' and needs to be re-drawn for the output to match\nthe internal state of the artist.\n\n`allow_rasterization`\n\nDecorator for Artist.draw method.\n\n`get`\n\nReturn the value of an `Artist`'s property, or print all of them.\n\n`getp`\n\nReturn the value of an `Artist`'s property, or print all of them.\n\n`setp`\n\nSet one or more properties on an `Artist`, or list allowed values.\n\n`kwdoc`\n\nInspect an `Artist` class (using `ArtistInspector`) and return information\nabout its settable properties and their current values.\n\n`ArtistInspector`\n\nA helper class to inspect an `Artist` and return information about its\nsettable properties and their current values.\n\n"}, {"name": "artist.allow_rasterization", "path": "_as_gen/matplotlib.artist.allow_rasterization", "type": "artist", "text": "\nDecorator for Artist.draw method. Provides routines that run before and after\nthe draw call. The before and after functions are useful for changing artist-\ndependent renderer attributes or making other setup function calls, such as\nstarting and flushing a mixed-mode renderer.\n\n"}, {"name": "artist.Artist", "path": "artist_api#matplotlib.artist.Artist", "type": "artist", "text": "\nAbstract base class for objects that render into a FigureCanvas.\n\nTypically, all visible elements in a figure are subclasses of Artist.\n\n"}, {"name": "artist.Artist.add_callback", "path": "_as_gen/matplotlib.artist.artist.add_callback", "type": "artist", "text": "\nAdd a callback function that will be called whenever one of the `Artist`'s\nproperties changes.\n\nThe callback function. It must have the signature:\n\nwhere artist is the calling `Artist`. Return values may exist but are ignored.\n\nThe observer id associated with the callback. This id can be used for removing\nthe callback with `remove_callback` later.\n\nSee also\n\n"}, {"name": "artist.Artist.axes", "path": "_as_gen/matplotlib.artist.artist.axes", "type": "artist", "text": "\nThe `Axes` instance the artist resides in, or None.\n\n"}, {"name": "artist.Artist.contains", "path": "_as_gen/matplotlib.artist.artist.contains", "type": "artist", "text": "\nTest whether the artist contains the mouse event.\n\nWhether any values are within the radius.\n\nAn artist-specific dictionary of details of the event context, such as which\npoints are contained in the pick radius. See the individual Artist subclasses\nfor details.\n\n"}, {"name": "artist.Artist.convert_xunits", "path": "_as_gen/matplotlib.artist.artist.convert_xunits", "type": "artist", "text": "\nConvert x using the unit type of the xaxis.\n\nIf the artist is not in contained in an Axes or if the xaxis does not have\nunits, x itself is returned.\n\n"}, {"name": "artist.Artist.convert_yunits", "path": "_as_gen/matplotlib.artist.artist.convert_yunits", "type": "artist", "text": "\nConvert y using the unit type of the yaxis.\n\nIf the artist is not in contained in an Axes or if the yaxis does not have\nunits, y itself is returned.\n\n"}, {"name": "artist.Artist.draw", "path": "_as_gen/matplotlib.artist.artist.draw", "type": "artist", "text": "\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\n"}, {"name": "artist.Artist.findobj", "path": "_as_gen/matplotlib.artist.artist.findobj", "type": "artist", "text": "\nFind artist objects.\n\nRecursively find all `Artist` instances contained in the artist.\n\nA filter criterion for the matches. This can be\n\nInclude self in the list to be checked for a match.\n\n"}, {"name": "artist.Artist.format_cursor_data", "path": "_as_gen/matplotlib.artist.artist.format_cursor_data", "type": "artist", "text": "\nReturn a string representation of data.\n\nNote\n\nThis method is intended to be overridden by artist subclasses. As an end-user\nof Matplotlib you will most likely not call this method yourself.\n\nThe default implementation converts ints and floats and arrays of ints and\nfloats into a comma-separated string enclosed in square brackets, unless the\nartist has an associated colorbar, in which case scalar values are formatted\nusing the colorbar's formatter.\n\nSee also\n\n"}, {"name": "artist.Artist.get_agg_filter", "path": "_as_gen/matplotlib.artist.artist.get_agg_filter", "type": "artist", "text": "\nReturn filter function to be used for agg filter.\n\n"}, {"name": "artist.Artist.get_alpha", "path": "_as_gen/matplotlib.artist.artist.get_alpha", "type": "artist", "text": "\nReturn the alpha value used for blending - not supported on all backends.\n\n"}, {"name": "artist.Artist.get_animated", "path": "_as_gen/matplotlib.artist.artist.get_animated", "type": "artist", "text": "\nReturn whether the artist is animated.\n\n"}, {"name": "artist.Artist.get_children", "path": "_as_gen/matplotlib.artist.artist.get_children", "type": "artist", "text": "\nReturn a list of the child `Artist`s of this `Artist`.\n\n"}, {"name": "artist.Artist.get_clip_box", "path": "_as_gen/matplotlib.artist.artist.get_clip_box", "type": "artist", "text": "\nReturn the clipbox.\n\n"}, {"name": "artist.Artist.get_clip_on", "path": "_as_gen/matplotlib.artist.artist.get_clip_on", "type": "artist", "text": "\nReturn whether the artist uses clipping.\n\n"}, {"name": "artist.Artist.get_clip_path", "path": "_as_gen/matplotlib.artist.artist.get_clip_path", "type": "artist", "text": "\nReturn the clip path.\n\n"}, {"name": "artist.Artist.get_cursor_data", "path": "_as_gen/matplotlib.artist.artist.get_cursor_data", "type": "artist", "text": "\nReturn the cursor data for a given event.\n\nNote\n\nThis method is intended to be overridden by artist subclasses. As an end-user\nof Matplotlib you will most likely not call this method yourself.\n\nCursor data can be used by Artists to provide additional context information\nfor a given event. The default implementation just returns None.\n\nSubclasses can override the method and return arbitrary data. However, when\ndoing so, they must ensure that `format_cursor_data` can convert the data to a\nstring representation.\n\nThe only current use case is displaying the z-value of an `AxesImage` in the\nstatus bar of a plot window, while moving the mouse.\n\nSee also\n\n"}, {"name": "artist.Artist.get_figure", "path": "_as_gen/matplotlib.artist.artist.get_figure", "type": "artist", "text": "\nReturn the `Figure` instance the artist belongs to.\n\n"}, {"name": "artist.Artist.get_gid", "path": "_as_gen/matplotlib.artist.artist.get_gid", "type": "artist", "text": "\nReturn the group id.\n\n"}, {"name": "artist.Artist.get_in_layout", "path": "_as_gen/matplotlib.artist.artist.get_in_layout", "type": "artist", "text": "\nReturn boolean flag, `True` if artist is included in layout calculations.\n\nE.g. Constrained Layout Guide, `Figure.tight_layout()`, and\n`fig.savefig(fname, bbox_inches='tight')`.\n\n"}, {"name": "artist.Artist.get_label", "path": "_as_gen/matplotlib.artist.artist.get_label", "type": "artist", "text": "\nReturn the label used for this artist in the legend.\n\n"}, {"name": "artist.Artist.get_path_effects", "path": "_as_gen/matplotlib.artist.artist.get_path_effects", "type": "artist", "text": "\n\n"}, {"name": "artist.Artist.get_picker", "path": "_as_gen/matplotlib.artist.artist.get_picker", "type": "artist", "text": "\nReturn the picking behavior of the artist.\n\nThe possible values are described in `set_picker`.\n\nSee also\n\n"}, {"name": "artist.Artist.get_rasterized", "path": "_as_gen/matplotlib.artist.artist.get_rasterized", "type": "artist", "text": "\nReturn whether the artist is to be rasterized.\n\n"}, {"name": "artist.Artist.get_sketch_params", "path": "_as_gen/matplotlib.artist.artist.get_sketch_params", "type": "artist", "text": "\nReturn the sketch parameters for the artist.\n\nA 3-tuple with the following elements:\n\nReturns None if no sketch parameters were set.\n\n"}, {"name": "artist.Artist.get_snap", "path": "_as_gen/matplotlib.artist.artist.get_snap", "type": "artist", "text": "\nReturn the snap setting.\n\nSee `set_snap` for details.\n\n"}, {"name": "artist.Artist.get_transform", "path": "_as_gen/matplotlib.artist.artist.get_transform", "type": "artist", "text": "\nReturn the `Transform` instance used by this artist.\n\n"}, {"name": "artist.Artist.get_transformed_clip_path_and_affine", "path": "_as_gen/matplotlib.artist.artist.get_transformed_clip_path_and_affine", "type": "artist", "text": "\nReturn the clip path with the non-affine part of its transformation applied,\nand the remaining affine part of its transformation.\n\n"}, {"name": "artist.Artist.get_url", "path": "_as_gen/matplotlib.artist.artist.get_url", "type": "artist", "text": "\nReturn the url.\n\n"}, {"name": "artist.Artist.get_visible", "path": "_as_gen/matplotlib.artist.artist.get_visible", "type": "artist", "text": "\nReturn the visibility.\n\n"}, {"name": "artist.Artist.get_window_extent", "path": "_as_gen/matplotlib.artist.artist.get_window_extent", "type": "artist", "text": "\nGet the artist's bounding box in display space.\n\nThe bounding box' width and height are nonnegative.\n\nSubclasses should override for inclusion in the bounding box \"tight\"\ncalculation. Default is to return an empty bounding box at 0, 0.\n\nBe careful when using this function, the results will not update if the artist\nwindow extent of the artist changes. The extent can change due to any changes\nin the transform stack, such as changing the axes limits, the figure size, or\nthe canvas used (as is done when saving a figure). This can lead to unexpected\nbehavior where interactive figures will look fine on the screen, but will save\nincorrectly.\n\n"}, {"name": "artist.Artist.get_zorder", "path": "_as_gen/matplotlib.artist.artist.get_zorder", "type": "artist", "text": "\nReturn the artist's zorder.\n\n"}, {"name": "artist.Artist.have_units", "path": "_as_gen/matplotlib.artist.artist.have_units", "type": "artist", "text": "\nReturn whether units are set on any axis.\n\n"}, {"name": "artist.Artist.is_transform_set", "path": "_as_gen/matplotlib.artist.artist.is_transform_set", "type": "artist", "text": "\nReturn whether the Artist has an explicitly set transform.\n\nThis is True after `set_transform` has been called.\n\n"}, {"name": "artist.Artist.mouseover", "path": "_as_gen/matplotlib.artist.artist.mouseover", "type": "artist", "text": "\nIf this property is set to True, the artist will be queried for custom context\ninformation when the mouse cursor moves over it.\n\nSee also `get_cursor_data()`, `ToolCursorPosition` and `NavigationToolbar2`.\n\n"}, {"name": "artist.Artist.pchanged", "path": "_as_gen/matplotlib.artist.artist.pchanged", "type": "artist", "text": "\nCall all of the registered callbacks.\n\nThis function is triggered internally when a property is changed.\n\nSee also\n\n"}, {"name": "artist.Artist.pick", "path": "_as_gen/matplotlib.artist.artist.pick", "type": "artist", "text": "\nProcess a pick event.\n\nEach child artist will fire a pick event if mouseevent is over the artist and\nthe artist has picker set.\n\nSee also\n\n"}, {"name": "artist.Artist.pickable", "path": "_as_gen/matplotlib.artist.artist.pickable", "type": "artist", "text": "\nReturn whether the artist is pickable.\n\nSee also\n\n"}, {"name": "artist.Artist.properties", "path": "_as_gen/matplotlib.artist.artist.properties", "type": "artist", "text": "\nReturn a dictionary of all the properties of the artist.\n\n"}, {"name": "artist.Artist.remove", "path": "_as_gen/matplotlib.artist.artist.remove", "type": "artist", "text": "\nRemove the artist from the figure if possible.\n\nThe effect will not be visible until the figure is redrawn, e.g., with\n`FigureCanvasBase.draw_idle`. Call `relim` to update the axes limits if\ndesired.\n\nNote: `relim` will not see collections even if the collection was added to the\naxes with autolim = True.\n\nNote: there is no support for removing the artist's legend entry.\n\n"}, {"name": "artist.Artist.remove_callback", "path": "_as_gen/matplotlib.artist.artist.remove_callback", "type": "artist", "text": "\nRemove a callback based on its observer id.\n\nSee also\n\n"}, {"name": "artist.Artist.set", "path": "_as_gen/matplotlib.artist.artist.set", "type": "artist", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\n"}, {"name": "artist.Artist.set_agg_filter", "path": "_as_gen/matplotlib.artist.artist.set_agg_filter", "type": "artist", "text": "\nSet the agg filter.\n\nA filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array.\n\n"}, {"name": "artist.Artist.set_alpha", "path": "_as_gen/matplotlib.artist.artist.set_alpha", "type": "artist", "text": "\nSet the alpha value used for blending - not supported on all backends.\n\nalpha must be within the 0-1 range, inclusive.\n\n"}, {"name": "artist.Artist.set_animated", "path": "_as_gen/matplotlib.artist.artist.set_animated", "type": "artist", "text": "\nSet whether the artist is intended to be used in an animation.\n\nIf True, the artist is excluded from regular drawing of the figure. You have\nto call `Figure.draw_artist` / `Axes.draw_artist` explicitly on the artist.\nThis appoach is used to speed up animations using blitting.\n\nSee also `matplotlib.animation` and Faster rendering by using blitting.\n\n"}, {"name": "artist.Artist.set_clip_box", "path": "_as_gen/matplotlib.artist.artist.set_clip_box", "type": "artist", "text": "\nSet the artist's clip `Bbox`.\n\n"}, {"name": "artist.Artist.set_clip_on", "path": "_as_gen/matplotlib.artist.artist.set_clip_on", "type": "artist", "text": "\nSet whether the artist uses clipping.\n\nWhen False artists will be visible outside of the axes which can lead to\nunexpected results.\n\n"}, {"name": "artist.Artist.set_clip_path", "path": "_as_gen/matplotlib.artist.artist.set_clip_path", "type": "artist", "text": "\nSet the artist's clip path.\n\nThe clip path. If given a `Path`, transform must be provided as well. If None,\na previously set clip path is removed.\n\nOnly used if path is a `Path`, in which case the given `Path` is converted to\na `TransformedPath` using transform.\n\nFor efficiency, if path is a `Rectangle` this method will set the clipping box\nto the corresponding rectangle and set the clipping path to `None`.\n\nFor technical reasons (support of `set`), a tuple (path, transform) is also\naccepted as a single positional parameter.\n\n"}, {"name": "artist.Artist.set_figure", "path": "_as_gen/matplotlib.artist.artist.set_figure", "type": "artist", "text": "\nSet the `Figure` instance the artist belongs to.\n\n"}, {"name": "artist.Artist.set_gid", "path": "_as_gen/matplotlib.artist.artist.set_gid", "type": "artist", "text": "\nSet the (group) id for the artist.\n\n"}, {"name": "artist.Artist.set_in_layout", "path": "_as_gen/matplotlib.artist.artist.set_in_layout", "type": "artist", "text": "\nSet if artist is to be included in layout calculations, E.g. Constrained\nLayout Guide, `Figure.tight_layout()`, and `fig.savefig(fname,\nbbox_inches='tight')`.\n\n"}, {"name": "artist.Artist.set_label", "path": "_as_gen/matplotlib.artist.artist.set_label", "type": "artist", "text": "\nSet a label that will be displayed in the legend.\n\ns will be converted to a string by calling `str`.\n\n"}, {"name": "artist.Artist.set_path_effects", "path": "_as_gen/matplotlib.artist.artist.set_path_effects", "type": "artist", "text": "\nSet the path effects.\n\n"}, {"name": "artist.Artist.set_picker", "path": "_as_gen/matplotlib.artist.artist.set_picker", "type": "artist", "text": "\nDefine the picking behavior of the artist.\n\nThis can be one of the following:\n\nA function: If picker is callable, it is a user supplied function which\ndetermines whether the artist is hit by the mouse event:\n\nto determine the hit test. if the mouse event is over the artist, return\nhit=True and props is a dictionary of properties you want added to the\nPickEvent attributes.\n\n"}, {"name": "artist.Artist.set_rasterized", "path": "_as_gen/matplotlib.artist.artist.set_rasterized", "type": "artist", "text": "\nForce rasterized (bitmap) drawing for vector graphics output.\n\nRasterized drawing is not supported by all artists. If you try to enable this\non an artist that does not support it, the command has no effect and a warning\nwill be issued.\n\nThis setting is ignored for pixel-based output.\n\nSee also Rasterization for vector graphics.\n\n"}, {"name": "artist.Artist.set_sketch_params", "path": "_as_gen/matplotlib.artist.artist.set_sketch_params", "type": "artist", "text": "\nSet the sketch parameters.\n\nThe amplitude of the wiggle perpendicular to the source line, in pixels. If\nscale is `None`, or not provided, no sketch filter will be provided.\n\nThe length of the wiggle along the line, in pixels (default 128.0)\n\nThe scale factor by which the length is shrunken or expanded (default 16.0)\n\nThe PGF backend uses this argument as an RNG seed and not as described above.\nUsing the same seed yields the same random shape.\n\n"}, {"name": "artist.Artist.set_snap", "path": "_as_gen/matplotlib.artist.artist.set_snap", "type": "artist", "text": "\nSet the snapping behavior.\n\nSnapping aligns positions with the pixel grid, which results in clearer\nimages. For example, if a black line of 1px width was defined at a position in\nbetween two pixels, the resulting image would contain the interpolated value\nof that line in the pixel grid, which would be a grey value on both adjacent\npixel positions. In contrast, snapping will move the line to the nearest\ninteger pixel value, so that the resulting image will really contain a 1px\nwide black line.\n\nSnapping is currently only supported by the Agg and MacOSX backends.\n\nPossible values:\n\n"}, {"name": "artist.Artist.set_transform", "path": "_as_gen/matplotlib.artist.artist.set_transform", "type": "artist", "text": "\nSet the artist transform.\n\n"}, {"name": "artist.Artist.set_url", "path": "_as_gen/matplotlib.artist.artist.set_url", "type": "artist", "text": "\nSet the url for the artist.\n\n"}, {"name": "artist.Artist.set_visible", "path": "_as_gen/matplotlib.artist.artist.set_visible", "type": "artist", "text": "\nSet the artist's visibility.\n\n"}, {"name": "artist.Artist.set_zorder", "path": "_as_gen/matplotlib.artist.artist.set_zorder", "type": "artist", "text": "\nSet the zorder for the artist. Artists with lower zorder values are drawn\nfirst.\n\n"}, {"name": "artist.Artist.stale", "path": "_as_gen/matplotlib.artist.artist.stale", "type": "artist", "text": "\nWhether the artist is 'stale' and needs to be re-drawn for the output to match\nthe internal state of the artist.\n\n"}, {"name": "artist.Artist.sticky_edges", "path": "_as_gen/matplotlib.artist.artist.sticky_edges", "type": "artist", "text": "\n`x` and `y` sticky edge lists for autoscaling.\n\nWhen performing autoscaling, if a data limit coincides with a value in the\ncorresponding sticky_edges list, then no margin will be added--the view limit\n\"sticks\" to the edge. A typical use case is histograms, where one usually\nexpects no margin on the bottom edge (0) of the histogram.\n\nMoreover, margin expansion \"bumps\" against sticky edges and cannot cross them.\nFor example, if the upper data limit is 1.0, the upper view limit computed by\nsimple margin application is 1.2, but there is a sticky edge at 1.1, then the\nactual upper view limit will be 1.1.\n\nThis attribute cannot be assigned to; however, the `x` and `y` lists can be\nmodified in place as needed.\n\n"}, {"name": "artist.Artist.update", "path": "_as_gen/matplotlib.artist.artist.update", "type": "artist", "text": "\nUpdate this artist's properties from the dict props.\n\n"}, {"name": "artist.Artist.update_from", "path": "_as_gen/matplotlib.artist.artist.update_from", "type": "artist", "text": "\nCopy properties from other to self.\n\n"}, {"name": "artist.Artist.zorder", "path": "_as_gen/matplotlib.artist.artist.zorder", "type": "artist", "text": "\n\n"}, {"name": "artist.ArtistInspector", "path": "_as_gen/matplotlib.artist.artistinspector", "type": "artist", "text": "\nA helper class to inspect an `Artist` and return information about its\nsettable properties and their current values.\n\nInitialize the artist inspector with an `Artist` or an iterable of `Artist`s.\nIf an iterable is used, we assume it is a homogeneous sequence (all `Artist`s\nare of the same type) and it is your responsibility to make sure this is so.\n\nInitialize the artist inspector with an `Artist` or an iterable of `Artist`s.\nIf an iterable is used, we assume it is a homogeneous sequence (all `Artist`s\nare of the same type) and it is your responsibility to make sure this is so.\n\n`__init__`(o)\n\nInitialize the artist inspector with an `Artist` or an iterable of `Artist`s.\n\n`aliased_name`(s)\n\nReturn 'PROPNAME or alias' if s has an alias, else return 'PROPNAME'.\n\n`aliased_name_rest`(s, target)\n\nReturn 'PROPNAME or alias' if s has an alias, else return 'PROPNAME',\nformatted for reST.\n\n`get_aliases`()\n\nGet a dict mapping property fullnames to sets of aliases for each alias in the\n`ArtistInspector`.\n\n`get_setters`()\n\nGet the attribute strings with setters for object.\n\n`get_valid_values`(attr)\n\nGet the legal arguments for the setter associated with attr.\n\n`is_alias`(o)\n\nReturn whether method object o is an alias for another method.\n\n`pprint_getters`()\n\nReturn the getters and actual values as list of strings.\n\n`pprint_setters`([prop, leadingspace])\n\nIf prop is None, return a list of strings of all settable properties and their\nvalid values.\n\n`pprint_setters_rest`([prop, leadingspace])\n\nIf prop is None, return a list of reST-formatted strings of all settable\nproperties and their valid values.\n\n`properties`()\n\nReturn a dictionary mapping property name -> value.\n\nReturn 'PROPNAME or alias' if s has an alias, else return 'PROPNAME'.\n\ne.g., for the line markerfacecolor property, which has an alias, return\n'markerfacecolor or mfc' and for the transform property, which does not,\nreturn 'transform'.\n\nReturn 'PROPNAME or alias' if s has an alias, else return 'PROPNAME',\nformatted for reST.\n\ne.g., for the line markerfacecolor property, which has an alias, return\n'markerfacecolor or mfc' and for the transform property, which does not,\nreturn 'transform'.\n\nGet a dict mapping property fullnames to sets of aliases for each alias in the\n`ArtistInspector`.\n\ne.g., for lines:\n\nGet the attribute strings with setters for object.\n\nFor example, for a line, return `['markerfacecolor', 'linewidth', ....]`.\n\nGet the legal arguments for the setter associated with attr.\n\nThis is done by querying the docstring of the setter for a line that begins\nwith \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a numpydoc-style\ndocumentation for the setter's first argument.\n\nReturn whether method object o is an alias for another method.\n\nReturn the getters and actual values as list of strings.\n\nIf prop is None, return a list of strings of all settable properties and their\nvalid values.\n\nIf prop is not None, it is a valid property name and that property will be\nreturned as a string of property : valid values.\n\nIf prop is None, return a list of reST-formatted strings of all settable\nproperties and their valid values.\n\nIf prop is not None, it is a valid property name and that property will be\nreturned as a string of \"property : valid\" values.\n\nReturn a dictionary mapping property name -> value.\n\n"}, {"name": "artist.ArtistInspector.__init__()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.__init__", "type": "artist", "text": "\nInitialize the artist inspector with an `Artist` or an iterable of `Artist`s.\nIf an iterable is used, we assume it is a homogeneous sequence (all `Artist`s\nare of the same type) and it is your responsibility to make sure this is so.\n\n"}, {"name": "artist.ArtistInspector.aliased_name()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.aliased_name", "type": "artist", "text": "\nReturn 'PROPNAME or alias' if s has an alias, else return 'PROPNAME'.\n\ne.g., for the line markerfacecolor property, which has an alias, return\n'markerfacecolor or mfc' and for the transform property, which does not,\nreturn 'transform'.\n\n"}, {"name": "artist.ArtistInspector.aliased_name_rest()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.aliased_name_rest", "type": "artist", "text": "\nReturn 'PROPNAME or alias' if s has an alias, else return 'PROPNAME',\nformatted for reST.\n\ne.g., for the line markerfacecolor property, which has an alias, return\n'markerfacecolor or mfc' and for the transform property, which does not,\nreturn 'transform'.\n\n"}, {"name": "artist.ArtistInspector.get_aliases()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.get_aliases", "type": "artist", "text": "\nGet a dict mapping property fullnames to sets of aliases for each alias in the\n`ArtistInspector`.\n\ne.g., for lines:\n\n"}, {"name": "artist.ArtistInspector.get_setters()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.get_setters", "type": "artist", "text": "\nGet the attribute strings with setters for object.\n\nFor example, for a line, return `['markerfacecolor', 'linewidth', ....]`.\n\n"}, {"name": "artist.ArtistInspector.get_valid_values()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.get_valid_values", "type": "artist", "text": "\nGet the legal arguments for the setter associated with attr.\n\nThis is done by querying the docstring of the setter for a line that begins\nwith \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a numpydoc-style\ndocumentation for the setter's first argument.\n\n"}, {"name": "artist.ArtistInspector.is_alias()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.is_alias", "type": "artist", "text": "\nReturn whether method object o is an alias for another method.\n\n"}, {"name": "artist.ArtistInspector.pprint_getters()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.pprint_getters", "type": "artist", "text": "\nReturn the getters and actual values as list of strings.\n\n"}, {"name": "artist.ArtistInspector.pprint_setters()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.pprint_setters", "type": "artist", "text": "\nIf prop is None, return a list of strings of all settable properties and their\nvalid values.\n\nIf prop is not None, it is a valid property name and that property will be\nreturned as a string of property : valid values.\n\n"}, {"name": "artist.ArtistInspector.pprint_setters_rest()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.pprint_setters_rest", "type": "artist", "text": "\nIf prop is None, return a list of reST-formatted strings of all settable\nproperties and their valid values.\n\nIf prop is not None, it is a valid property name and that property will be\nreturned as a string of \"property : valid\" values.\n\n"}, {"name": "artist.ArtistInspector.properties()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.properties", "type": "artist", "text": "\nReturn a dictionary mapping property name -> value.\n\n"}, {"name": "artist.get", "path": "_as_gen/matplotlib.artist.get", "type": "artist", "text": "\nReturn the value of an `Artist`'s property, or print all of them.\n\nThe queried artist; e.g., a `Line2D`, a `Text`, or an `Axes`.\n\nIf property is 'somename', this function returns `obj.get_somename()`.\n\nIf it's None (or unset), it prints all gettable properties from obj. Many\nproperties have aliases for shorter typing, e.g. 'lw' is an alias for\n'linewidth'. In the output, aliases and full property names will be listed as:\n\nproperty or alias = value\n\ne.g.:\n\nlinewidth or lw = 2\n\nSee also\n\n"}, {"name": "artist.getp", "path": "_as_gen/matplotlib.artist.getp", "type": "artist", "text": "\nReturn the value of an `Artist`'s property, or print all of them.\n\nThe queried artist; e.g., a `Line2D`, a `Text`, or an `Axes`.\n\nIf property is 'somename', this function returns `obj.get_somename()`.\n\nIf it's None (or unset), it prints all gettable properties from obj. Many\nproperties have aliases for shorter typing, e.g. 'lw' is an alias for\n'linewidth'. In the output, aliases and full property names will be listed as:\n\nproperty or alias = value\n\ne.g.:\n\nlinewidth or lw = 2\n\nSee also\n\n"}, {"name": "artist.kwdoc", "path": "_as_gen/matplotlib.artist.kwdoc", "type": "artist", "text": "\nInspect an `Artist` class (using `ArtistInspector`) and return information\nabout its settable properties and their current values.\n\nThe settable properties of artist, as plain text if\n`rcParams[\"docstring.hardcopy\"]` (default: `False`) is False and as a rst\ntable (intended for use in Sphinx) if it is True.\n\n"}, {"name": "artist.setp", "path": "_as_gen/matplotlib.artist.setp", "type": "artist", "text": "\nSet one or more properties on an `Artist`, or list allowed values.\n\nThe artist(s) whose properties are being set or queried. When setting\nproperties, all artists are affected; when querying the allowed values, only\nthe first instance in the sequence is queried.\n\nFor example, two lines can be made thicker and red with a single call:\n\nWhere `setp` writes its output when asked to list allowed values.\n\nThe default, `None`, means `sys.stdout`.\n\nThe properties to set. The following combinations are supported:\n\nSet the linestyle of a line to be dashed:\n\nSet multiple properties at once:\n\nList allowed values for a line's linestyle:\n\nList all properties that can be set, and their allowed values:\n\n`setp` also supports MATLAB style string/value pairs. For example, the\nfollowing are equivalent:\n\nSee also\n\n"}, {"name": "axes", "path": "axes_api", "type": "axes", "text": "\nTable of Contents\n\nPlotting\n\nAxis / limits\n\nBases: `matplotlib.axes._base._AxesBase`\n\nThe `Axes` contains most of the figure elements: `Axis`, `Tick`, `Line2D`,\n`Text`, `Polygon`, etc., and sets the coordinate system.\n\nThe `Axes` instance supports callbacks through a callbacks attribute which is\na `CallbackRegistry` instance. The events you can connect to are\n'xlim_changed' and 'ylim_changed' and the callback will be called with\nfunc(ax) where ax is the `Axes` instance.\n\nThe bounding box enclosing all data displayed in the Axes.\n\nThe view limits in data coordinates.\n\nBuild an Axes in a figure.\n\nThe Axes is built in the `Figure` fig.\n\nThe Axes is built in the rectangle rect. rect is in `Figure` coordinates.\n\nThe x or y `axis` is shared with the x or y axis in the input `Axes`.\n\nWhether the Axes frame is visible.\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See\n`set_box_aspect` for details.\n\nOther optional keyword arguments:\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nThe new `Axes` object.\n\n`SubplotBase`\n\nBase class for subplots, which are `Axes` instances with additional methods to\nfacilitate generating and manipulating a set of `Axes` within a figure.\n\n`subplot_class_factory`\n\n`Axes.plot`\n\nPlot y versus x as lines and/or markers.\n\n`Axes.errorbar`\n\nPlot y versus x as lines and/or markers with attached errorbars.\n\n`Axes.scatter`\n\nA scatter plot of y vs.\n\n`Axes.plot_date`\n\nPlot coercing the axis to treat floats as dates.\n\n`Axes.step`\n\nMake a step plot.\n\n`Axes.loglog`\n\nMake a plot with log scaling on both the x and y axis.\n\n`Axes.semilogx`\n\nMake a plot with log scaling on the x axis.\n\n`Axes.semilogy`\n\nMake a plot with log scaling on the y axis.\n\n`Axes.fill_between`\n\nFill the area between two horizontal curves.\n\n`Axes.fill_betweenx`\n\nFill the area between two vertical curves.\n\n`Axes.bar`\n\nMake a bar plot.\n\n`Axes.barh`\n\nMake a horizontal bar plot.\n\n`Axes.bar_label`\n\nLabel a bar plot.\n\n`Axes.stem`\n\nCreate a stem plot.\n\n`Axes.eventplot`\n\nPlot identical parallel lines at the given positions.\n\n`Axes.pie`\n\nPlot a pie chart.\n\n`Axes.stackplot`\n\nDraw a stacked area plot.\n\n`Axes.broken_barh`\n\nPlot a horizontal sequence of rectangles.\n\n`Axes.vlines`\n\nPlot vertical lines at each x from ymin to ymax.\n\n`Axes.hlines`\n\nPlot horizontal lines at each y from xmin to xmax.\n\n`Axes.fill`\n\nPlot filled polygons.\n\n`Axes.axhline`\n\nAdd a horizontal line across the axis.\n\n`Axes.axhspan`\n\nAdd a horizontal span (rectangle) across the Axes.\n\n`Axes.axvline`\n\nAdd a vertical line across the Axes.\n\n`Axes.axvspan`\n\nAdd a vertical span (rectangle) across the Axes.\n\n`Axes.axline`\n\nAdd an infinitely long straight line.\n\n`Axes.acorr`\n\nPlot the autocorrelation of x.\n\n`Axes.angle_spectrum`\n\nPlot the angle spectrum.\n\n`Axes.cohere`\n\nPlot the coherence between x and y.\n\n`Axes.csd`\n\nPlot the cross-spectral density.\n\n`Axes.magnitude_spectrum`\n\nPlot the magnitude spectrum.\n\n`Axes.phase_spectrum`\n\nPlot the phase spectrum.\n\n`Axes.psd`\n\nPlot the power spectral density.\n\n`Axes.specgram`\n\nPlot a spectrogram.\n\n`Axes.xcorr`\n\nPlot the cross correlation between x and y.\n\n`Axes.boxplot`\n\nDraw a box and whisker plot.\n\n`Axes.violinplot`\n\nMake a violin plot.\n\n`Axes.violin`\n\nDrawing function for violin plots.\n\n`Axes.bxp`\n\nDrawing function for box and whisker plots.\n\n`Axes.hexbin`\n\nMake a 2D hexagonal binning plot of points x, y.\n\n`Axes.hist`\n\nPlot a histogram.\n\n`Axes.hist2d`\n\nMake a 2D histogram plot.\n\n`Axes.stairs`\n\nA stepwise constant function as a line with bounding edges or a filled plot.\n\n`Axes.clabel`\n\nLabel a contour plot.\n\n`Axes.contour`\n\nPlot contour lines.\n\n`Axes.contourf`\n\nPlot filled contours.\n\n`Axes.imshow`\n\nDisplay data as an image, i.e., on a 2D regular raster.\n\n`Axes.matshow`\n\nPlot the values of a 2D matrix or array as color-coded image.\n\n`Axes.pcolor`\n\nCreate a pseudocolor plot with a non-regular rectangular grid.\n\n`Axes.pcolorfast`\n\nCreate a pseudocolor plot with a non-regular rectangular grid.\n\n`Axes.pcolormesh`\n\nCreate a pseudocolor plot with a non-regular rectangular grid.\n\n`Axes.spy`\n\nPlot the sparsity pattern of a 2D array.\n\n`Axes.tripcolor`\n\nCreate a pseudocolor plot of an unstructured triangular grid.\n\n`Axes.triplot`\n\nDraw a unstructured triangular grid as lines and/or markers.\n\n`Axes.tricontour`\n\nDraw contour lines on an unstructured triangular grid.\n\n`Axes.tricontourf`\n\nDraw contour regions on an unstructured triangular grid.\n\n`Axes.annotate`\n\nAnnotate the point xy with text text.\n\n`Axes.text`\n\nAdd text to the Axes.\n\n`Axes.table`\n\nAdd a table to an `Axes`.\n\n`Axes.arrow`\n\nAdd an arrow to the Axes.\n\n`Axes.inset_axes`\n\nAdd a child inset Axes to this existing Axes.\n\n`Axes.indicate_inset`\n\nAdd an inset indicator to the Axes.\n\n`Axes.indicate_inset_zoom`\n\nAdd an inset indicator rectangle to the Axes based on the axis limits for an\ninset_ax and draw connectors between inset_ax and the rectangle.\n\n`Axes.secondary_xaxis`\n\nAdd a second x-axis to this Axes.\n\n`Axes.secondary_yaxis`\n\nAdd a second y-axis to this Axes.\n\n`Axes.barbs`\n\nPlot a 2D field of barbs.\n\n`Axes.quiver`\n\nPlot a 2D field of arrows.\n\n`Axes.quiverkey`\n\nAdd a key to a quiver plot.\n\n`Axes.streamplot`\n\nDraw streamlines of a vector flow.\n\n`Axes.cla`\n\nClear the Axes.\n\n`Axes.clear`\n\nClear the Axes.\n\n`Axes.axis`\n\nConvenience method to get or set some axis properties.\n\n`Axes.set_axis_off`\n\nTurn the x- and y-axis off.\n\n`Axes.set_axis_on`\n\nTurn the x- and y-axis on.\n\n`Axes.set_frame_on`\n\nSet whether the Axes rectangle patch is drawn.\n\n`Axes.get_frame_on`\n\nGet whether the Axes rectangle patch is drawn.\n\n`Axes.set_axisbelow`\n\nSet whether axis ticks and gridlines are above or below most artists.\n\n`Axes.get_axisbelow`\n\nGet whether axis ticks and gridlines are above or below most artists.\n\n`Axes.grid`\n\nConfigure the grid lines.\n\n`Axes.get_facecolor`\n\nGet the facecolor of the Axes.\n\n`Axes.set_facecolor`\n\nSet the facecolor of the Axes.\n\n`Axes.set_prop_cycle`\n\nSet the property cycle of the Axes.\n\n`Axes.get_xaxis`\n\nReturn the XAxis instance.\n\n`Axes.get_yaxis`\n\nReturn the YAxis instance.\n\n`Axes.invert_xaxis`\n\nInvert the x-axis.\n\n`Axes.xaxis_inverted`\n\nReturn whether the xaxis is oriented in the \"inverse\" direction.\n\n`Axes.invert_yaxis`\n\nInvert the y-axis.\n\n`Axes.yaxis_inverted`\n\nReturn whether the yaxis is oriented in the \"inverse\" direction.\n\n`Axes.set_xlim`\n\nSet the x-axis view limits.\n\n`Axes.get_xlim`\n\nReturn the x-axis view limits.\n\n`Axes.set_ylim`\n\nSet the y-axis view limits.\n\n`Axes.get_ylim`\n\nReturn the y-axis view limits.\n\n`Axes.update_datalim`\n\nExtend the `dataLim` Bbox to include the given points.\n\n`Axes.set_xbound`\n\nSet the lower and upper numerical bounds of the x-axis.\n\n`Axes.get_xbound`\n\nReturn the lower and upper x-axis bounds, in increasing order.\n\n`Axes.set_ybound`\n\nSet the lower and upper numerical bounds of the y-axis.\n\n`Axes.get_ybound`\n\nReturn the lower and upper y-axis bounds, in increasing order.\n\n`Axes.set_xlabel`\n\nSet the label for the x-axis.\n\n`Axes.get_xlabel`\n\nGet the xlabel text string.\n\n`Axes.set_ylabel`\n\nSet the label for the y-axis.\n\n`Axes.get_ylabel`\n\nGet the ylabel text string.\n\n`Axes.set_title`\n\nSet a title for the Axes.\n\n`Axes.get_title`\n\nGet an Axes title.\n\n`Axes.legend`\n\nPlace a legend on the Axes.\n\n`Axes.get_legend`\n\nReturn the `Legend` instance, or None if no legend is defined.\n\n`Axes.get_legend_handles_labels`\n\nReturn handles and labels for legend\n\n`Axes.set_xscale`\n\nSet the x-axis scale.\n\n`Axes.get_xscale`\n\nReturn the xaxis' scale (as a str).\n\n`Axes.set_yscale`\n\nSet the y-axis scale.\n\n`Axes.get_yscale`\n\nReturn the yaxis' scale (as a str).\n\n`Axes.use_sticky_edges`\n\nWhen autoscaling, whether to obey all `Artist.sticky_edges`.\n\n`Axes.margins`\n\nSet or retrieve autoscaling margins.\n\n`Axes.set_xmargin`\n\nSet padding of X data limits prior to autoscaling.\n\n`Axes.set_ymargin`\n\nSet padding of Y data limits prior to autoscaling.\n\n`Axes.relim`\n\nRecompute the data limits based on current artists.\n\n`Axes.autoscale`\n\nAutoscale the axis view to the data (toggle).\n\n`Axes.autoscale_view`\n\nAutoscale the view limits using the data limits.\n\n`Axes.set_autoscale_on`\n\nSet whether autoscaling is applied to each axis on the next draw or call to\n`Axes.autoscale_view`.\n\n`Axes.get_autoscale_on`\n\nReturn True if each axis is autoscaled, False otherwise.\n\n`Axes.set_autoscalex_on`\n\nSet whether the x-axis is autoscaled on the next draw or call to\n`Axes.autoscale_view`.\n\n`Axes.get_autoscalex_on`\n\nReturn whether the x-axis is autoscaled.\n\n`Axes.set_autoscaley_on`\n\nSet whether the y-axis is autoscaled on the next draw or call to\n`Axes.autoscale_view`.\n\n`Axes.get_autoscaley_on`\n\nReturn whether the y-axis is autoscaled.\n\n`Axes.apply_aspect`\n\nAdjust the Axes for a specified data aspect ratio.\n\n`Axes.set_aspect`\n\nSet the aspect ratio of the axes scaling, i.e. y/x-scale.\n\n`Axes.get_aspect`\n\nReturn the aspect ratio of the axes scaling.\n\n`Axes.set_box_aspect`\n\nSet the Axes box aspect, i.e. the ratio of height to width.\n\n`Axes.get_box_aspect`\n\nReturn the Axes box aspect, i.e. the ratio of height to width.\n\n`Axes.set_adjustable`\n\nSet how the Axes adjusts to achieve the required aspect ratio.\n\n`Axes.get_adjustable`\n\nReturn whether the Axes will adjust its physical dimension ('box') or its data\nlimits ('datalim') to achieve the desired aspect ratio.\n\n`Axes.set_xticks`\n\nSet the xaxis' tick locations and optionally labels.\n\n`Axes.get_xticks`\n\nReturn the xaxis' tick locations in data coordinates.\n\n`Axes.set_xticklabels`\n\nSet the xaxis' labels with list of string labels.\n\n`Axes.get_xticklabels`\n\nGet the xaxis' tick labels.\n\n`Axes.get_xmajorticklabels`\n\nReturn the xaxis' major tick labels, as a list of `Text`.\n\n`Axes.get_xminorticklabels`\n\nReturn the xaxis' minor tick labels, as a list of `Text`.\n\n`Axes.get_xgridlines`\n\nReturn the xaxis' grid lines as a list of `Line2D`s.\n\n`Axes.get_xticklines`\n\nReturn the xaxis' tick lines as a list of `Line2D`s.\n\n`Axes.xaxis_date`\n\nSet up axis ticks and labels to treat data along the xaxis as dates.\n\n`Axes.set_yticks`\n\nSet the yaxis' tick locations and optionally labels.\n\n`Axes.get_yticks`\n\nReturn the yaxis' tick locations in data coordinates.\n\n`Axes.set_yticklabels`\n\nSet the yaxis' labels with list of string labels.\n\n`Axes.get_yticklabels`\n\nGet the yaxis' tick labels.\n\n`Axes.get_ymajorticklabels`\n\nReturn the yaxis' major tick labels, as a list of `Text`.\n\n`Axes.get_yminorticklabels`\n\nReturn the yaxis' minor tick labels, as a list of `Text`.\n\n`Axes.get_ygridlines`\n\nReturn the yaxis' grid lines as a list of `Line2D`s.\n\n`Axes.get_yticklines`\n\nReturn the yaxis' tick lines as a list of `Line2D`s.\n\n`Axes.yaxis_date`\n\nSet up axis ticks and labels to treat data along the yaxis as dates.\n\n`Axes.minorticks_off`\n\nRemove minor ticks from the Axes.\n\n`Axes.minorticks_on`\n\nDisplay minor ticks on the Axes.\n\n`Axes.ticklabel_format`\n\nConfigure the `ScalarFormatter` used by default for linear axes.\n\n`Axes.tick_params`\n\nChange the appearance of ticks, tick labels, and gridlines.\n\n`Axes.locator_params`\n\nControl behavior of major tick locators.\n\n`Axes.convert_xunits`\n\nConvert x using the unit type of the xaxis.\n\n`Axes.convert_yunits`\n\nConvert y using the unit type of the yaxis.\n\n`Axes.have_units`\n\nReturn whether units are set on any axis.\n\n`Axes.add_artist`\n\nAdd an `Artist` to the Axes; return the artist.\n\n`Axes.add_child_axes`\n\nAdd an `AxesBase` to the Axes' children; return the child Axes.\n\n`Axes.add_collection`\n\nAdd a `Collection` to the Axes; return the collection.\n\n`Axes.add_container`\n\nAdd a `Container` to the axes' containers; return the container.\n\n`Axes.add_image`\n\nAdd an `AxesImage` to the Axes; return the image.\n\n`Axes.add_line`\n\nAdd a `Line2D` to the Axes; return the line.\n\n`Axes.add_patch`\n\nAdd a `Patch` to the Axes; return the patch.\n\n`Axes.add_table`\n\nAdd a `Table` to the Axes; return the table.\n\n`Axes.twinx`\n\nCreate a twin Axes sharing the xaxis.\n\n`Axes.twiny`\n\nCreate a twin Axes sharing the yaxis.\n\n`Axes.sharex`\n\nShare the x-axis with other.\n\n`Axes.sharey`\n\nShare the y-axis with other.\n\n`Axes.get_shared_x_axes`\n\nReturn a reference to the shared axes Grouper object for x axes.\n\n`Axes.get_shared_y_axes`\n\nReturn a reference to the shared axes Grouper object for y axes.\n\n`Axes.get_anchor`\n\nGet the anchor location.\n\n`Axes.set_anchor`\n\nDefine the anchor location.\n\n`Axes.get_axes_locator`\n\nReturn the axes_locator.\n\n`Axes.set_axes_locator`\n\nSet the Axes locator.\n\n`Axes.reset_position`\n\nReset the active position to the original position.\n\n`Axes.get_position`\n\nReturn the position of the Axes within the figure as a `Bbox`.\n\n`Axes.set_position`\n\nSet the Axes position.\n\n`Axes.stale`\n\nWhether the artist is 'stale' and needs to be re-drawn for the output to match\nthe internal state of the artist.\n\n`Axes.pchanged`\n\nCall all of the registered callbacks.\n\n`Axes.add_callback`\n\nAdd a callback function that will be called whenever one of the `Artist`'s\nproperties changes.\n\n`Axes.remove_callback`\n\nRemove a callback based on its observer id.\n\n`Axes.can_pan`\n\nReturn whether this Axes supports any pan/zoom button functionality.\n\n`Axes.can_zoom`\n\nReturn whether this Axes supports the zoom box button functionality.\n\n`Axes.get_navigate`\n\nGet whether the Axes responds to navigation commands.\n\n`Axes.set_navigate`\n\nSet whether the Axes responds to navigation toolbar commands.\n\n`Axes.get_navigate_mode`\n\nGet the navigation toolbar button status: 'PAN', 'ZOOM', or None.\n\n`Axes.set_navigate_mode`\n\nSet the navigation toolbar button status.\n\n`Axes.start_pan`\n\nCalled when a pan operation has started.\n\n`Axes.drag_pan`\n\nCalled when the mouse moves during a pan operation.\n\n`Axes.end_pan`\n\nCalled when a pan operation completes (when the mouse button is up.)\n\n`Axes.format_coord`\n\nReturn a format string formatting the x, y coordinates.\n\n`Axes.format_cursor_data`\n\nReturn a string representation of data.\n\n`Axes.format_xdata`\n\nReturn x formatted as an x-value.\n\n`Axes.format_ydata`\n\nReturn y formatted as an y-value.\n\n`Axes.mouseover`\n\nIf this property is set to True, the artist will be queried for custom context\ninformation when the mouse cursor moves over it.\n\n`Axes.in_axes`\n\nReturn whether the given event (in display coords) is in the Axes.\n\n`Axes.contains`\n\nTest whether the artist contains the mouse event.\n\n`Axes.contains_point`\n\nReturn whether point (pair of pixel coordinates) is inside the axes patch.\n\n`Axes.get_cursor_data`\n\nReturn the cursor data for a given event.\n\n`Axes.get_children`\n\nReturn a list of the child `Artist`s of this `Artist`.\n\n`Axes.get_images`\n\nReturn a list of `AxesImage`s contained by the Axes.\n\n`Axes.get_lines`\n\nReturn a list of lines contained by the Axes.\n\n`Axes.findobj`\n\nFind artist objects.\n\n`Axes.draw`\n\nDraw the Artist (and its children) using the given renderer.\n\n`Axes.draw_artist`\n\nEfficiently redraw a single artist.\n\n`Axes.redraw_in_frame`\n\nEfficiently redraw Axes data, but not axis ticks, labels, etc.\n\n`Axes.get_renderer_cache`\n\n`Axes.get_rasterization_zorder`\n\nReturn the zorder value below which artists will be rasterized.\n\n`Axes.set_rasterization_zorder`\n\nSet the zorder threshold for rasterization for vector graphics output.\n\n`Axes.get_window_extent`\n\nReturn the Axes bounding box in display space; args and kwargs are empty.\n\n`Axes.get_tightbbox`\n\nReturn the tight bounding box of the axes, including axis and their decorators\n(xlabel, title, etc).\n\nMethods used by `Axis` that must be overridden for non-rectilinear Axes.\n\n`Axes.name`\n\n`Axes.get_xaxis_transform`\n\nGet the transformation used for drawing x-axis labels, ticks and gridlines.\n\n`Axes.get_yaxis_transform`\n\nGet the transformation used for drawing y-axis labels, ticks and gridlines.\n\n`Axes.get_data_ratio`\n\nReturn the aspect ratio of the scaled data.\n\n`Axes.get_xaxis_text1_transform`\n\n`Axes.get_xaxis_text2_transform`\n\n`Axes.get_yaxis_text1_transform`\n\n`Axes.get_yaxis_text2_transform`\n\n`Axes.zorder`\n\n`Axes.get_default_bbox_extra_artists`\n\nReturn a default list of artists that are used for the bounding box\ncalculation.\n\n`Axes.get_transformed_clip_path_and_affine`\n\nReturn the clip path with the non-affine part of its transformation applied,\nand the remaining affine part of its transformation.\n\n`Axes.has_data`\n\nReturn whether any artists have been added to the Axes.\n\n`Axes.set`\n\nSet multiple properties at once.\n\n"}, {"name": "axes.Axes", "path": "axes_api#matplotlib.axes.Axes", "type": "axes", "text": "\nBases: `matplotlib.axes._base._AxesBase`\n\nThe `Axes` contains most of the figure elements: `Axis`, `Tick`, `Line2D`,\n`Text`, `Polygon`, etc., and sets the coordinate system.\n\nThe `Axes` instance supports callbacks through a callbacks attribute which is\na `CallbackRegistry` instance. The events you can connect to are\n'xlim_changed' and 'ylim_changed' and the callback will be called with\nfunc(ax) where ax is the `Axes` instance.\n\nThe bounding box enclosing all data displayed in the Axes.\n\nThe view limits in data coordinates.\n\nBuild an Axes in a figure.\n\nThe Axes is built in the `Figure` fig.\n\nThe Axes is built in the rectangle rect. rect is in `Figure` coordinates.\n\nThe x or y `axis` is shared with the x or y axis in the input `Axes`.\n\nWhether the Axes frame is visible.\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See\n`set_box_aspect` for details.\n\nOther optional keyword arguments:\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nThe new `Axes` object.\n\n"}, {"name": "axes.Axes.acorr", "path": "_as_gen/matplotlib.axes.axes.acorr", "type": "axes", "text": "\nPlot the autocorrelation of x.\n\nA detrending function applied to x. It must have the signature\n\nIf `True`, input vectors are normalised to unit length.\n\nDetermines the plot style.\n\nIf `True`, vertical lines are plotted from 0 to the acorr value using\n`Axes.vlines`. Additionally, a horizontal line is plotted at y=0 using\n`Axes.axhline`.\n\nIf `False`, markers are plotted at the acorr values using `Axes.plot`.\n\nNumber of lags to show. If `None`, will return all `2 * len(x) - 1` lags.\n\nThe lag vector.\n\nThe auto correlation vector.\n\n`Artist` added to the Axes of the correlation:\n\nHorizontal line at 0 if usevlines is True None usevlines is False.\n\nThe linestyle for plotting the data points. Only used if usevlines is `False`.\n\nThe marker for plotting the data points. Only used if usevlines is `False`.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx\n\nAdditional parameters are passed to `Axes.vlines` and `Axes.axhline` if\nusevlines is `True`; otherwise they are passed to `Axes.plot`.\n\nThe cross correlation is performed with `numpy.correlate` with `mode =\n\"full\"`.\n\nCross- and Auto-Correlation Demo\n\n"}, {"name": "axes.Axes.add_artist", "path": "_as_gen/matplotlib.axes.axes.add_artist", "type": "axes", "text": "\nAdd an `Artist` to the Axes; return the artist.\n\nUse `add_artist` only for artists for which there is no dedicated \"add\"\nmethod; and if necessary, use a method such as `update_datalim` to manually\nupdate the dataLim if the artist is to be included in autoscaling.\n\nIf no `transform` has been specified when creating the artist (e.g.\n`artist.get_transform() == None`) then the transform is set to `ax.transData`.\n\nScatter plots with a legend\n\nBboxImage Demo\n\nBar of pie\n\nAnnotating Plots\n\nAnnotationBbox demo\n\nUsing a text as a Path\n\nEllipse Demo\n\nAnchored Direction Arrow\n\nAxes Grid2\n\nInset Locator Demo2\n\nSimple Anchored Artists\n\nAnatomy of a figure\n\nAnchored Artists\n\nArtist tests\n\nAnchored Box04\n\nAnnotate Explain\n\nConnect Simple01\n\nSimple Annotate01\n\nSimple Legend02\n\nLegend guide\n\nAnnotations\n\n"}, {"name": "axes.Axes.add_callback", "path": "_as_gen/matplotlib.axes.axes.add_callback", "type": "axes", "text": "\nAdd a callback function that will be called whenever one of the `Artist`'s\nproperties changes.\n\nThe callback function. It must have the signature:\n\nwhere artist is the calling `Artist`. Return values may exist but are ignored.\n\nThe observer id associated with the callback. This id can be used for removing\nthe callback with `remove_callback` later.\n\nSee also\n\n"}, {"name": "axes.Axes.add_child_axes", "path": "_as_gen/matplotlib.axes.axes.add_child_axes", "type": "axes", "text": "\nAdd an `AxesBase` to the Axes' children; return the child Axes.\n\nThis is the lowlevel version. See `axes.Axes.inset_axes`.\n\n"}, {"name": "axes.Axes.add_collection", "path": "_as_gen/matplotlib.axes.axes.add_collection", "type": "axes", "text": "\nAdd a `Collection` to the Axes; return the collection.\n\nEventCollection Demo\n\nUsing span_where\n\nCreating boxes from error bars using PatchCollection\n\nReference for Matplotlib artists\n\nLine, Poly and RegularPoly Collection with autoscaling\n\nEllipse Collection\n\nLine Collection\n\nCircles, Wedges and Polygons\n\nLasso Demo\n\nMRI With EEG\n\nArtist tests\n\nAutoscaling\n\n"}, {"name": "axes.Axes.add_container", "path": "_as_gen/matplotlib.axes.axes.add_container", "type": "axes", "text": "\nAdd a `Container` to the axes' containers; return the container.\n\n"}, {"name": "axes.Axes.add_image", "path": "_as_gen/matplotlib.axes.axes.add_image", "type": "axes", "text": "\nAdd an `AxesImage` to the Axes; return the image.\n\nImage Nonuniform\n\n"}, {"name": "axes.Axes.add_line", "path": "_as_gen/matplotlib.axes.axes.add_line", "type": "axes", "text": "\nAdd a `Line2D` to the Axes; return the line.\n\nArtist within an artist\n\nReference for Matplotlib artists\n\nArtist tests\n\nArtist tutorial\n\n"}, {"name": "axes.Axes.add_patch", "path": "_as_gen/matplotlib.axes.axes.add_patch", "type": "axes", "text": "\nAdd a `Patch` to the Axes; return the patch.\n\nCurve with error band\n\nImage Demo\n\nAxes box aspect\n\nControlling view limits using margins and sticky_edges\n\nBoxplots\n\nPlot a confidence ellipse of a two-dimensional dataset\n\nAnnotating Plots\n\nPrecise text layout\n\nCompound path\n\nDolphins\n\nMmh Donuts!!!\n\nDrawing fancy boxes\n\nHatch style reference\n\nPathPatch object\n\nBezier Curve\n\nggplot style sheet\n\nInset Locator Demo\n\nFirefox\n\nIntegral as the area under a curve\n\nLooking Glass\n\nPath Editor\n\nPoly Editor\n\nTrifinder Event Demo\n\nViewlims\n\nChanging colors of lines intersecting a box\n\nBuilding histograms using Rectangles and PolyCollections\n\nPacked-bubble chart\n\nSVG Filter Pie\n\nTickedStroke patheffect\n\nDraw flat objects in 3D plot\n\nArtist tests\n\nEllipse With Units\n\nArtist tutorial\n\nLegend guide\n\nPath Tutorial\n\nTransformations Tutorial\n\nSpecifying Colors\n\nText properties and layout\n\n"}, {"name": "axes.Axes.add_table", "path": "_as_gen/matplotlib.axes.axes.add_table", "type": "axes", "text": "\nAdd a `Table` to the Axes; return the table.\n\n"}, {"name": "axes.Axes.angle_spectrum", "path": "_as_gen/matplotlib.axes.axes.angle_spectrum", "type": "axes", "text": "\nPlot the angle spectrum.\n\nCompute the angle spectrum (wrapped phase spectrum) of x. Data is padded to a\nlength of pad_to and the windowing function window is applied to the signal.\n\nArray or sequence containing the data.\n\nThe sampling frequency (samples per time unit). It is used to calculate the\nFourier frequencies, freqs, in cycles per time unit.\n\nA function or a vector of length NFFT. To create window vectors see\n`window_hanning`, `window_none`, `numpy.blackman`, `numpy.hamming`,\n`numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc. If a\nfunction is passed as the argument, it must take a data segment as an argument\nand return the windowed version of the segment.\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data\nand two-sided for complex data. 'onesided' forces the return of a one-sided\nspectrum, while 'twosided' forces two-sided.\n\nThe number of points to which the data segment is padded when performing the\nFFT. While not increasing the actual resolution of the spectrum (the minimum\ndistance between resolvable peaks), this can give more points in the plot,\nallowing for more detail. This corresponds to the n parameter in the call to\nfft(). The default is None, which sets pad_to equal to the length of the input\nsignal (i.e. no padding).\n\nThe center frequency of x, which offsets the x extents of the plot to reflect\nthe frequency range used when a signal is acquired and then filtered and\ndownsampled to baseband.\n\nThe values for the angle spectrum in radians (real valued).\n\nThe frequencies corresponding to the elements in spectrum.\n\nThe line created by this function.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx\n\nKeyword arguments control the `Line2D` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSee also\n\nPlots the magnitudes of the corresponding frequencies.\n\nPlots the unwrapped version of this function.\n\nCan plot the angle spectrum of segments within the signal in a colormap.\n\n"}, {"name": "axes.Axes.annotate", "path": "_as_gen/matplotlib.axes.axes.annotate", "type": "axes", "text": "\nAnnotate the point xy with text text.\n\nIn the simplest form, the text is placed at xy.\n\nOptionally, the text can be displayed in another position xytext. An arrow\npointing from the text to the annotated point xy can then be added by defining\narrowprops.\n\nThe text of the annotation.\n\nThe point (x, y) to annotate. The coordinate system is determined by xycoords.\n\nThe position (x, y) to place the text at. The coordinate system is determined\nby textcoords.\n\nThe coordinate system that xy is given in. The following types of values are\nsupported:\n\nOne of the following strings:\n\nValue\n\nDescription\n\n'figure points'\n\nPoints from the lower left of the figure\n\n'figure pixels'\n\nPixels from the lower left of the figure\n\n'figure fraction'\n\nFraction of figure from lower left\n\n'subfigure points'\n\nPoints from the lower left of the subfigure\n\n'subfigure pixels'\n\nPixels from the lower left of the subfigure\n\n'subfigure fraction'\n\nFraction of subfigure from lower left\n\n'axes points'\n\nPoints from lower left corner of axes\n\n'axes pixels'\n\nPixels from lower left corner of axes\n\n'axes fraction'\n\nFraction of axes from lower left\n\n'data'\n\nUse the coordinate system of the object being annotated (default)\n\n'polar'\n\n(theta, r) if not native 'data' coordinates\n\nNote that 'subfigure pixels' and 'figure pixels' are the same for the parent\nfigure, so users who want code that is usable in a subfigure can use\n'subfigure pixels'.\n\nA function with one of the following signatures:\n\nwhere renderer is a `RendererBase` subclass.\n\nThe result of the function is interpreted like the `Artist` and `Transform`\ncases above.\n\nSee Advanced Annotations for more details.\n\nThe coordinate system that xytext is given in.\n\nAll xycoords values are valid as well as the following strings:\n\nValue\n\nDescription\n\n'offset points'\n\nOffset (in points) from the xy value\n\n'offset pixels'\n\nOffset (in pixels) from the xy value\n\nThe properties used to draw a `FancyArrowPatch` arrow between the positions xy\nand xytext. Defaults to None, i.e. no arrow is drawn.\n\nFor historical reasons there are two different ways to specify arrows,\n\"simple\" and \"fancy\":\n\nSimple arrow:\n\nIf arrowprops does not contain the key 'arrowstyle' the allowed keys are:\n\nKey\n\nDescription\n\nwidth\n\nThe width of the arrow in points\n\nheadwidth\n\nThe width of the base of the arrow head in points\n\nheadlength\n\nThe length of the arrow head in points\n\nshrink\n\nFraction of total length to shrink from both ends\n\n?\n\nAny key to `matplotlib.patches.FancyArrowPatch`\n\nThe arrow is attached to the edge of the text box, the exact position (corners\nor centers) depending on where it's pointing to.\n\nFancy arrow:\n\nThis is used if 'arrowstyle' is provided in the arrowprops.\n\nValid keys are the following `FancyArrowPatch` parameters:\n\nKey\n\nDescription\n\narrowstyle\n\nthe arrow style\n\nconnectionstyle\n\nthe connection style\n\nrelpos\n\nsee below; default is (0.5, 0.5)\n\npatchA\n\ndefault is bounding box of the text\n\npatchB\n\ndefault is None\n\nshrinkA\n\ndefault is 2 points\n\nshrinkB\n\ndefault is 2 points\n\nmutation_scale\n\ndefault is text size (in points)\n\nmutation_aspect\n\ndefault is 1.\n\n?\n\nany key for `matplotlib.patches.PathPatch`\n\nThe exact starting point position of the arrow is defined by relpos. It's a\ntuple of relative coordinates of the text box, where (0, 0) is the lower left\ncorner and (1, 1) is the upper right corner. Values <0 and >1 are supported\nand specify points outside the text box. By default (0.5, 0.5) the starting\npoint is centered in the text box.\n\nWhether to draw the annotation when the annotation point xy is outside the\naxes area.\n\nAdditional kwargs are passed to `Text`.\n\nSee also\n\nBroken Barh\n\nHat graph\n\nCreating a timeline with lines, dates, and text\n\nCombining two subplots using subplots and GridSpec\n\nLabeling a pie and a donut\n\nScale invariant angle label\n\nAnnotating Plots\n\nAnnotation arrow style reference\n\nRendering math equations using TeX\n\nAnnotate Transform\n\nAnnotating a plot\n\nAnnotation Polar\n\nText Commands\n\nMmh Donuts!!!\n\naxis_direction demo\n\nSimple Axis Pad\n\nXKCD\n\nPatheffect Demo\n\nAnnotation with units\n\nAnnotate Explain\n\nAnnotate Simple01\n\nAnnotate Simple02\n\nAnnotate Simple03\n\nAnnotate Simple04\n\nAnnotate Simple Coord01\n\nAnnotate Simple Coord02\n\nAnnotate Simple Coord03\n\nConnection styles for annotations\n\nSimple Annotate01\n\nBasic Usage\n\nFaster rendering by using blitting\n\nTransformations Tutorial\n\nText in Matplotlib Plots\n\nAnnotations\n\n"}, {"name": "axes.Axes.apply_aspect", "path": "_as_gen/matplotlib.axes.axes.apply_aspect", "type": "axes", "text": "\nAdjust the Axes for a specified data aspect ratio.\n\nDepending on `get_adjustable` this will modify either the Axes box (position)\nor the view limits. In the former case, `get_anchor` will affect the position.\n\nSee also\n\nFor a description of aspect ratio handling.\n\nSet how the Axes adjusts to achieve the required aspect ratio.\n\nSet the position in case of extra space.\n\nThis is called automatically when each Axes is drawn. You may need to call it\nyourself if you need to update the Axes position and/or view limits before the\nFigure is drawn.\n\n"}, {"name": "axes.Axes.arrow", "path": "_as_gen/matplotlib.axes.axes.arrow", "type": "axes", "text": "\nAdd an arrow to the Axes.\n\nThis draws an arrow from `(x, y)` to `(x+dx, y+dy)`.\n\nThe x and y coordinates of the arrow base.\n\nThe length of the arrow along x and y direction.\n\nWidth of full arrow tail.\n\nTrue if head is to be counted in calculating the length.\n\nTotal width of the full arrow head.\n\nLength of arrow head.\n\nDraw the left-half, right-half, or full arrow.\n\nFraction that the arrow is swept back (0 overhang means triangular shape). Can\nbe negative or greater than one.\n\nIf True, the head starts being drawn at coordinate 0 instead of ending at\ncoordinate 0.\n\n`Patch` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nunknown\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nThe created `FancyArrow` object.\n\nThe resulting arrow is affected by the Axes aspect ratio and limits. This may\nproduce an arrow whose head is not square with its stem. To create an arrow\nwhose head is square with its stem, use `annotate()` for example:\n\nArrow Demo\n\n"}, {"name": "axes.Axes.autoscale", "path": "_as_gen/matplotlib.axes.axes.autoscale", "type": "axes", "text": "\nAutoscale the axis view to the data (toggle).\n\nConvenience method for simple axis view autoscaling. It turns autoscaling on\nor off, and then, if autoscaling for either axis is on, it performs the\nautoscaling on the specified axis or Axes.\n\nTrue turns autoscaling on, False turns it off. None leaves the autoscaling\nstate unchanged.\n\nWhich axis to operate on.\n\nIf True, first set the margins to zero. Then, this argument is forwarded to\n`autoscale_view` (regardless of its value); see the description of its\nbehavior there.\n\nAxes box aspect\n\nAutoscaling\n\n"}, {"name": "axes.Axes.autoscale_view", "path": "_as_gen/matplotlib.axes.axes.autoscale_view", "type": "axes", "text": "\nAutoscale the view limits using the data limits.\n\nIf True, only expand the axis limits using the margins. Note that unlike for\n`autoscale`, `tight=True` does not set the margins to zero.\n\nIf False and `rcParams[\"axes.autolimit_mode\"]` (default: `'data'`) is\n'round_numbers', then after expansion by the margins, further expand the axis\nlimits using the axis major locator.\n\nIf None (the default), reuse the value set in the previous call to\n`autoscale_view` (the initial value is False, but the default style sets\n`rcParams[\"axes.autolimit_mode\"]` (default: `'data'`) to 'data', in which case\nthis behaves like True).\n\nWhether to autoscale the x axis.\n\nWhether to autoscale the y axis.\n\nThe autoscaling preserves any preexisting axis direction reversal.\n\nThe data limits are not updated automatically when artist data are changed\nafter the artist has been added to an Axes instance. In that case, use\n`matplotlib.axes.Axes.relim()` prior to calling autoscale_view.\n\nIf the views of the Axes are fixed, e.g. via `set_xlim`, they will not be\nchanged by autoscale_view(). See `matplotlib.axes.Axes.autoscale()` for an\nalternative.\n\nLine, Poly and RegularPoly Collection with autoscaling\n\nCompound path\n\nEllipse Collection\n\nPacked-bubble chart\n\nGroup barchart with units\n\nTextbox\n\nAutoscaling\n\n"}, {"name": "axes.Axes.axhline", "path": "_as_gen/matplotlib.axes.axes.axhline", "type": "axes", "text": "\nAdd a horizontal line across the axis.\n\ny position in data coordinates of the horizontal line.\n\nShould be between 0 and 1, 0 being the far left of the plot, 1 the far right\nof the plot.\n\nShould be between 0 and 1, 0 being the far left of the plot, 1 the far right\nof the plot.\n\nValid keyword arguments are `Line2D` properties, with the exception of\n'transform':\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSee also\n\nAdd horizontal lines in data coordinates.\n\nAdd a horizontal span (rectangle) across the axis.\n\nAdd a line with an arbitrary slope.\n\ndraw a thick red hline at 'y' = 0 that spans the xrange:\n\ndraw a default hline at 'y' = 1 that spans the xrange:\n\ndraw a default hline at 'y' = .5 that spans the middle half of the xrange:\n\nBar Label Demo\n\nFilling the area between lines\n\nUsing span_where\n\naxhspan Demo\n\nPlot a confidence ellipse of a two-dimensional dataset\n\nMultiline\n\nUsetex Baseline Test\n\nCross hair cursor\n\nTransformations Tutorial\n\n"}, {"name": "axes.Axes.axhspan", "path": "_as_gen/matplotlib.axes.axes.axhspan", "type": "axes", "text": "\nAdd a horizontal span (rectangle) across the Axes.\n\nThe rectangle spans from ymin to ymax vertically, and, by default, the whole\nx-axis horizontally. The x-span can be set using xmin (default: 0) and xmax\n(default: 1) which are in axis units; e.g. `xmin = 0.5` always refers to the\nmiddle of the x-axis regardless of the limits set by `set_xlim`.\n\nLower y-coordinate of the span, in data units.\n\nUpper y-coordinate of the span, in data units.\n\nLower x-coordinate of the span, in x-axis (0-1) units.\n\nUpper x-coordinate of the span, in x-axis (0-1) units.\n\nHorizontal span (rectangle) from (xmin, ymin) to (xmax, ymax).\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`closed`\n\nbool\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xy`\n\n(N, 2) array-like\n\n`zorder`\n\nfloat\n\nSee also\n\nAdd a vertical span across the Axes.\n\naxhspan Demo\n\nTransformations Tutorial\n\n"}, {"name": "axes.Axes.axis", "path": "_as_gen/matplotlib.axes.axes.axis", "type": "axes", "text": "\nConvenience method to get or set some axis properties.\n\nCall signatures:\n\nThe axis limits to be set. This can also be achieved using\n\nIf a bool, turns axis lines and labels on or off. If a string, possible values\nare:\n\nValue\n\nDescription\n\n'on'\n\nTurn on axis lines and labels. Same as `True`.\n\n'off'\n\nTurn off axis lines and labels. Same as `False`.\n\n'equal'\n\nSet equal scaling (i.e., make circles circular) by changing axis limits. This\nis the same as `ax.set_aspect('equal', adjustable='datalim')`. Explicit data\nlimits may not be respected in this case.\n\n'scaled'\n\nSet equal scaling (i.e., make circles circular) by changing dimensions of the\nplot box. This is the same as `ax.set_aspect('equal', adjustable='box',\nanchor='C')`. Additionally, further autoscaling will be disabled.\n\n'tight'\n\nSet limits just large enough to show all data, then disable further\nautoscaling.\n\n'auto'\n\nAutomatic scaling (fill plot box with data).\n\n'image'\n\n'scaled' with axis limits equal to data limits.\n\n'square'\n\nSquare plot; similar to 'scaled', but initially forcing `xmax-xmin == ymax-\nymin`.\n\nWhether observers are notified of the axis limit change. This option is passed\non to `set_xlim` and `set_ylim`.\n\nThe axis limits.\n\nSee also\n\nClipping images with patches\n\nBasic pie chart\n\nBar of pie\n\nHatch style reference\n\nPathPatch object\n\nggplot style sheet\n\nParasite Simple2\n\nSimple Axisline4\n\nAxis Direction\n\naxis_direction demo\n\nAxis line styles\n\nmpl_toolkits.axisartist.floating_axes features\n\nParasite Axes demo\n\nParasite axis demo\n\nTicklabel alignment\n\nTicklabel direction\n\nSimple Axis Direction01\n\nSimple Axis Direction03\n\nSimple Axis Pad\n\nCustom spines with axisartist\n\nSimple Axisline\n\nSimple Axisline3\n\nPacked-bubble chart\n\nTickedStroke patheffect\n\nMRI\n\nMRI With EEG\n\nBasic Usage\n\nSpecifying Colors\n\nText in Matplotlib Plots\n\n"}, {"name": "axes.Axes.axline", "path": "_as_gen/matplotlib.axes.axes.axline", "type": "axes", "text": "\nAdd an infinitely long straight line.\n\nThe line can be defined either by two points xy1 and xy2, or by one point xy1\nand a slope.\n\nThis draws a straight line \"on the screen\", regardless of the x and y scales,\nand is thus also suitable for drawing exponential decays in semilog plots,\npower laws in loglog plots, etc. However, slope should only be used with\nlinear scales; It has no clear meaning for all other scales, and thus the\nbehavior is undefined. Please specify the line using the points xy1, xy2 for\nnon-linear scales.\n\nThe transform keyword argument only applies to the points xy1, xy2. The slope\n(if given) is always in data coordinates. This can be used e.g. with\n`ax.transAxes` for drawing grid lines with a fixed slope.\n\nPoints for the line to pass through. Either xy2 or slope has to be given.\n\nThe slope of the line. Either xy2 or slope has to be given.\n\nValid kwargs are `Line2D` properties\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSee also\n\nfor horizontal lines\n\nfor vertical lines\n\nDraw a thick red line passing through (0, 0) and (1, 1):\n\naxhspan Demo\n\nAnscombe's quartet\n\n"}, {"name": "axes.Axes.axvline", "path": "_as_gen/matplotlib.axes.axes.axvline", "type": "axes", "text": "\nAdd a vertical line across the Axes.\n\nx position in data coordinates of the vertical line.\n\nShould be between 0 and 1, 0 being the bottom of the plot, 1 the top of the\nplot.\n\nShould be between 0 and 1, 0 being the bottom of the plot, 1 the top of the\nplot.\n\nValid keyword arguments are `Line2D` properties, with the exception of\n'transform':\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSee also\n\nAdd vertical lines in data coordinates.\n\nAdd a vertical span (rectangle) across the axis.\n\nAdd a line with an arbitrary slope.\n\ndraw a thick red vline at x = 0 that spans the yrange:\n\ndraw a default vline at x = 1 that spans the yrange:\n\ndraw a default vline at x = .5 that spans the middle half of the yrange:\n\naxhspan Demo\n\nPlot a confidence ellipse of a two-dimensional dataset\n\nUsetex Baseline Test\n\nCross hair cursor\n\nSkewT-logP diagram: using transforms and custom projections\n\nThe Lifecycle of a Plot\n\nTransformations Tutorial\n\n"}, {"name": "axes.Axes.axvspan", "path": "_as_gen/matplotlib.axes.axes.axvspan", "type": "axes", "text": "\nAdd a vertical span (rectangle) across the Axes.\n\nThe rectangle spans from xmin to xmax horizontally, and, by default, the whole\ny-axis vertically. The y-span can be set using ymin (default: 0) and ymax\n(default: 1) which are in axis units; e.g. `ymin = 0.5` always refers to the\nmiddle of the y-axis regardless of the limits set by `set_ylim`.\n\nLower x-coordinate of the span, in data units.\n\nUpper x-coordinate of the span, in data units.\n\nLower y-coordinate of the span, in y-axis units (0-1).\n\nUpper y-coordinate of the span, in y-axis units (0-1).\n\nVertical span (rectangle) from (xmin, ymin) to (xmax, ymax).\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`closed`\n\nbool\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xy`\n\n(N, 2) array-like\n\n`zorder`\n\nfloat\n\nSee also\n\nAdd a horizontal span across the Axes.\n\nDraw a vertical, green, translucent rectangle from x = 1.25 to x = 1.55 that\nspans the yrange of the Axes.\n\naxhspan Demo\n\nTransformations Tutorial\n\n"}, {"name": "axes.Axes.bar", "path": "_as_gen/matplotlib.axes.axes.bar", "type": "axes", "text": "\nMake a bar plot.\n\nThe bars are positioned at x with the given alignment. Their dimensions are\ngiven by height and width. The vertical baseline is bottom (default 0).\n\nMany parameters can take either a single value applying to all bars or a\nsequence of values, one for each bar.\n\nThe x coordinates of the bars. See also align for the alignment of the bars to\nthe coordinates.\n\nThe height(s) of the bars.\n\nThe width(s) of the bars.\n\nThe y coordinate(s) of the bars bases.\n\nAlignment of the bars to the x coordinates:\n\nTo align the bars on the right edge pass a negative width and `align='edge'`.\n\nContainer with all the bars and optionally errorbars.\n\nThe colors of the bar faces.\n\nThe colors of the bar edges.\n\nWidth of the bar edge(s). If 0, don't draw edges.\n\nThe tick labels of the bars. Default: None (Use default numeric labels.)\n\nIf not None, add horizontal / vertical errorbars to the bar tips. The values\nare +/- sizes relative to the data:\n\nSee Different ways of specifying error bars for an example on the usage of\n`xerr` and `yerr`.\n\nThe line color of the errorbars.\n\nThe length of the error bar caps in points.\n\nDictionary of kwargs to be passed to the `errorbar` method. Values of ecolor\nor capsize defined here take precedence over the independent kwargs.\n\nIf True, set the y-axis to be log scale.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`angle`\n\nunknown\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`bounds`\n\n(left, bottom, width, height)\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`height`\n\nunknown\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nunknown\n\n`x`\n\nunknown\n\n`xy`\n\n(float, float)\n\n`y`\n\nunknown\n\n`zorder`\n\nfloat\n\nSee also\n\nPlot a horizontal bar plot.\n\nStacked bars can be achieved by passing individual bottom values per bar. See\nStacked bar chart.\n\nBar Label Demo\n\nStacked bar chart\n\nGrouped bar chart with labels\n\nHat graph\n\nBar of pie\n\nNested pie charts\n\nBar chart on polar axis\n\nLegend Demo\n\nggplot style sheet\n\nmpl_toolkits.axisartist.floating_axes features\n\nXKCD\n\nCreate 2D bar graphs in different planes\n\nLog Bar\n\nCustom Ticker1\n\nGroup barchart with units\n\nBasic Usage\n\nArtist tutorial\n\nPath Tutorial\n\nbar(x, height) / barh(y, width)\n\n"}, {"name": "axes.Axes.bar_label", "path": "_as_gen/matplotlib.axes.axes.bar_label", "type": "axes", "text": "\nLabel a bar plot.\n\nAdds labels to bars in the given `BarContainer`. You may need to adjust the\naxis limits to fit the labels.\n\nContainer with all the bars and optionally errorbars, likely returned from\n`bar` or `barh`.\n\nA list of label texts, that should be displayed. If not given, the label texts\nwill be the data values formatted with fmt.\n\nA format string for the label.\n\nThe label type. Possible values:\n\nDistance of label from the end of the bar, in points.\n\nAny remaining keyword arguments are passed through to `Axes.annotate`.\n\nA list of `Text` instances for the labels.\n\nBar Label Demo\n\nGrouped bar chart with labels\n\n"}, {"name": "axes.Axes.barbs", "path": "_as_gen/matplotlib.axes.axes.barbs", "type": "axes", "text": "\nPlot a 2D field of barbs.\n\nCall signature:\n\nWhere X, Y define the barb locations, U, V define the barb directions, and C\noptionally sets the color.\n\nAll arguments may be 1D or 2D. U, V, C may be masked arrays, but masked X, Y\nare not supported at present.\n\nBarbs are traditionally used in meteorology as a way to plot the speed and\ndirection of wind observations, but can technically be used to plot any two\ndimensional vector quantity. As opposed to arrows, which give vector magnitude\nby the length of the arrow, the barbs give more quantitative information about\nthe vector magnitude by putting slanted lines or a triangle for various\nincrements in magnitude, as show schematically below:\n\nThe largest increment is given by a triangle (or \"flag\"). After those come\nfull lines (barbs). The smallest increment is a half line. There is only, of\ncourse, ever at most 1 half line. If the magnitude is small and only needs a\nsingle half-line and no full lines or triangles, the half-line is offset from\nthe end of the barb so that it can be easily distinguished from barbs with a\nsingle full line. The magnitude for the barb shown above would nominally be\n65, using the standard increments of 50, 10, and 5.\n\nSee also https://en.wikipedia.org/wiki/Wind_barb.\n\nThe x and y coordinates of the barb locations. See pivot for how the barbs are\ndrawn to the x, y positions.\n\nIf not given, they will be generated as a uniform integer meshgrid based on\nthe dimensions of U and V.\n\nIf X and Y are 1D but U, V are 2D, X, Y are expanded to 2D using `X, Y =\nnp.meshgrid(X, Y)`. In this case `len(X)` and `len(Y)` must match the column\nand row dimensions of U and V.\n\nThe x and y components of the barb shaft.\n\nNumeric data that defines the barb colors by colormapping via norm and cmap.\n\nThis does not support explicit colors. If you want to set colors directly, use\nbarbcolor instead.\n\nLength of the barb in points; the other parts of the barb are scaled against\nthis.\n\nThe part of the arrow that is anchored to the X, Y grid. The barb rotates\nabout this point. This can also be a number, which shifts the start of the\nbarb that many points away from grid point.\n\nThe color of all parts of the barb except for the flags. This parameter is\nanalogous to the edgecolor parameter for polygons, which can be used instead.\nHowever this parameter will override facecolor.\n\nThe color of any flags on the barb. This parameter is analogous to the\nfacecolor parameter for polygons, which can be used instead. However, this\nparameter will override facecolor. If this is not set (and C has not either)\nthen flagcolor will be set to match barbcolor so that the barb has a uniform\ncolor. If C has been set, flagcolor has no effect.\n\nA dictionary of coefficients specifying the ratio of a given feature to the\nlength of the barb. Only those values one wishes to override need to be\nincluded. These features include:\n\nWhether the empty barbs (circles) that are drawn should be filled with the\nflag color. If they are not filled, the center is transparent.\n\nWhether the vector magnitude should be rounded when allocating barb\ncomponents. If True, the magnitude is rounded to the nearest multiple of the\nhalf-barb increment. If False, the magnitude is simply truncated to the next\nlowest multiple.\n\nA dictionary of increments specifying values to associate with different parts\nof the barb. Only those values one wishes to override need to be included.\n\nWhether the lines and flags should point opposite to normal. Normal behavior\nis for the barbs and lines to point right (comes from wind barbs having these\nfeatures point towards low pressure in the Northern Hemisphere).\n\nA single value is applied to all barbs. Individual barbs can be flipped by\npassing a bool array of the same size as U and V.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nThe barbs can further be customized using `PolyCollection` keyword arguments:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\narray-like or scalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa or antialiaseds\n\nbool or list of bools\n\n`array`\n\narray-like or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clim`\n\n(vmin: float, vmax: float)\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`cmap`\n\n`Colormap` or str or None\n\n`color`\n\ncolor or list of rgba tuples\n\n`edgecolor` or ec or edgecolors\n\ncolor or list of colors or 'face'\n\n`facecolor` or facecolors or fc\n\ncolor or list of colors\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or dashes or linestyles or ls\n\nstr or tuple or list thereof\n\n`linewidth` or linewidths or lw\n\nfloat or list of floats\n\n`norm`\n\n`Normalize` or None\n\n`offset_transform`\n\n`Transform`\n\n`offsets`\n\n(N, 2) or (2,) array-like\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`paths`\n\nlist of array-like\n\n`picker`\n\nNone or bool or float or callable\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sizes`\n\nndarray or None\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`urls`\n\nlist of str or None\n\n`verts`\n\nlist of array-like\n\n`verts_and_codes`\n\nunknown\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nWind Barbs\n\nbarbs(X, Y, U, V)\n\n"}, {"name": "axes.Axes.barh", "path": "_as_gen/matplotlib.axes.axes.barh", "type": "axes", "text": "\nMake a horizontal bar plot.\n\nThe bars are positioned at y with the given alignment. Their dimensions are\ngiven by width and height. The horizontal baseline is left (default 0).\n\nMany parameters can take either a single value applying to all bars or a\nsequence of values, one for each bar.\n\nThe y coordinates of the bars. See also align for the alignment of the bars to\nthe coordinates.\n\nThe width(s) of the bars.\n\nThe heights of the bars.\n\nThe x coordinates of the left sides of the bars.\n\nAlignment of the base to the y coordinates*:\n\nTo align the bars on the top edge pass a negative height and `align='edge'`.\n\nContainer with all the bars and optionally errorbars.\n\nThe colors of the bar faces.\n\nThe colors of the bar edges.\n\nWidth of the bar edge(s). If 0, don't draw edges.\n\nThe tick labels of the bars. Default: None (Use default numeric labels.)\n\nIf not `None`, add horizontal / vertical errorbars to the bar tips. The values\nare +/- sizes relative to the data:\n\nSee Different ways of specifying error bars for an example on the usage of\n`xerr` and `yerr`.\n\nThe line color of the errorbars.\n\nThe length of the error bar caps in points.\n\nDictionary of kwargs to be passed to the `errorbar` method. Values of ecolor\nor capsize defined here take precedence over the independent kwargs.\n\nIf `True`, set the x-axis to be log scale.\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`angle`\n\nunknown\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`bounds`\n\n(left, bottom, width, height)\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`height`\n\nunknown\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nunknown\n\n`x`\n\nunknown\n\n`xy`\n\n(float, float)\n\n`y`\n\nunknown\n\n`zorder`\n\nfloat\n\nSee also\n\nPlot a vertical bar plot.\n\nStacked bars can be achieved by passing individual left values per bar. See\nDiscrete distribution as horizontal bar chart .\n\nBar Label Demo\n\nHorizontal bar chart\n\nProducing multiple histograms side by side\n\nThe Lifecycle of a Plot\n\n"}, {"name": "axes.Axes.boxplot", "path": "_as_gen/matplotlib.axes.axes.boxplot", "type": "axes", "text": "\nDraw a box and whisker plot.\n\nThe box extends from the first quartile (Q1) to the third quartile (Q3) of the\ndata, with a line at the median. The whiskers extend from the box by 1.5x the\ninter-quartile range (IQR). Flier points are those past the end of the\nwhiskers. See https://en.wikipedia.org/wiki/Box_plot for reference.\n\nThe input data. If a 2D array, a boxplot is drawn for each column in x. If a\nsequence of 1D arrays, a boxplot is drawn for each array in x.\n\nWhether to draw a notched boxplot (`True`), or a rectangular boxplot\n(`False`). The notches represent the confidence interval (CI) around the\nmedian. The documentation for bootstrap describes how the locations of the\nnotches are computed by default, but their locations may also be overridden by\nsetting the conf_intervals parameter.\n\nNote\n\nIn cases where the values of the CI are less than the lower quartile or\ngreater than the upper quartile, the notches will extend beyond the box,\ngiving it a distinctive \"flipped\" appearance. This is expected behavior and\nconsistent with other statistical visualization packages.\n\nThe default symbol for flier points. An empty string ('') hides the fliers. If\n`None`, then the fliers default to 'b+'. More control is provided by the\nflierprops parameter.\n\nIf `True`, draws vertical boxes. If `False`, draw horizontal boxes.\n\nThe position of the whiskers.\n\nIf a float, the lower whisker is at the lowest datum above `Q1 -\nwhis*(Q3-Q1)`, and the upper whisker at the highest datum below `Q3 +\nwhis*(Q3-Q1)`, where Q1 and Q3 are the first and third quartiles. The default\nvalue of `whis = 1.5` corresponds to Tukey's original definition of boxplots.\n\nIf a pair of floats, they indicate the percentiles at which to draw the\nwhiskers (e.g., (5, 95)). In particular, setting this to (0, 100) results in\nwhiskers covering the whole range of the data.\n\nIn the edge case where `Q1 == Q3`, whis is automatically set to (0, 100)\n(cover the whole range of the data) if autorange is True.\n\nBeyond the whiskers, data are considered outliers and are plotted as\nindividual points.\n\nSpecifies whether to bootstrap the confidence intervals around the median for\nnotched boxplots. If bootstrap is None, no bootstrapping is performed, and\nnotches are calculated using a Gaussian-based asymptotic approximation (see\nMcGill, R., Tukey, J.W., and Larsen, W.A., 1978, and Kendall and Stuart,\n1967). Otherwise, bootstrap specifies the number of times to bootstrap the\nmedian to determine its 95% confidence intervals. Values between 1000 and\n10000 are recommended.\n\nA 1D array-like of length `len(x)`. Each entry that is not `None` forces the\nvalue of the median for the corresponding dataset. For entries that are\n`None`, the medians are computed by Matplotlib as normal.\n\nA 2D array-like of shape `(len(x), 2)`. Each entry that is not None forces the\nlocation of the corresponding notch (which is only drawn if notch is `True`).\nFor entries that are `None`, the notches are computed by the method specified\nby the other parameters (e.g., bootstrap).\n\nThe positions of the boxes. The ticks and limits are automatically set to\nmatch the positions. Defaults to `range(1, N+1)` where N is the number of\nboxes to be drawn.\n\nThe widths of the boxes. The default is 0.5, or `0.15*(distance between\nextreme positions)`, if that is smaller.\n\nIf `False` produces boxes with the Line2D artist. Otherwise, boxes are drawn\nwith Patch artists.\n\nLabels for each dataset (one per dataset).\n\nIf True, the tick locations and labels will be adjusted to match the boxplot\npositions.\n\nWhen `True` and the data are distributed such that the 25th and 75th\npercentiles are equal, whis is set to (0, 100) such that the whisker ends are\nat the minimum and maximum of the data.\n\nIf `True` (and showmeans is `True`), will try to render the mean as a line\nspanning the full width of the box according to meanprops (see below). Not\nrecommended if shownotches is also True. Otherwise, means will be shown as\npoints.\n\nThe zorder of the boxplot.\n\nA dictionary mapping each component of the boxplot to a list of the `Line2D`\ninstances created. That dictionary has the following keys (assuming vertical\nboxplots):\n\nShow the caps on the ends of whiskers.\n\nShow the central box.\n\nShow the outliers beyond the caps.\n\nShow the arithmetic means.\n\nThe style of the caps.\n\nThe style of the box.\n\nThe style of the whiskers.\n\nThe style of the fliers.\n\nThe style of the median.\n\nThe style of the mean.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nSee also\n\nDraw an estimate of the probability density function.\n\nBox plots with custom fill colors\n\nBoxplots\n\nBoxplot Demo\n\nboxplot(X)\n\n"}, {"name": "axes.Axes.broken_barh", "path": "_as_gen/matplotlib.axes.axes.broken_barh", "type": "axes", "text": "\nPlot a horizontal sequence of rectangles.\n\nA rectangle is drawn for each element of xranges. All rectangles have the same\nvertical position and size defined by yrange.\n\nThis is a convenience function for instantiating a `BrokenBarHCollection`,\nadding it to the Axes and autoscaling the view.\n\nThe x-positions and extends of the rectangles. For each tuple (xmin, xwidth) a\nrectangle is drawn from xmin to xmin \\+ xwidth.\n\nThe y-position and extend for all the rectangles.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nEach kwarg can be either a single argument applying to all rectangles, e.g.:\n\nor a sequence of arguments over which is cycled, e.g.:\n\nwould create interleaving black and blue rectangles.\n\nSupported keywords:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\narray-like or scalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa or antialiaseds\n\nbool or list of bools\n\n`array`\n\narray-like or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clim`\n\n(vmin: float, vmax: float)\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`cmap`\n\n`Colormap` or str or None\n\n`color`\n\ncolor or list of rgba tuples\n\n`edgecolor` or ec or edgecolors\n\ncolor or list of colors or 'face'\n\n`facecolor` or facecolors or fc\n\ncolor or list of colors\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or dashes or linestyles or ls\n\nstr or tuple or list thereof\n\n`linewidth` or linewidths or lw\n\nfloat or list of floats\n\n`norm`\n\n`Normalize` or None\n\n`offset_transform`\n\n`Transform`\n\n`offsets`\n\n(N, 2) or (2,) array-like\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`paths`\n\nlist of array-like\n\n`picker`\n\nNone or bool or float or callable\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sizes`\n\nndarray or None\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`urls`\n\nlist of str or None\n\n`verts`\n\nlist of array-like\n\n`verts_and_codes`\n\nunknown\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nBroken Barh\n\n"}, {"name": "axes.Axes.bxp", "path": "_as_gen/matplotlib.axes.axes.bxp", "type": "axes", "text": "\nDrawing function for box and whisker plots.\n\nMake a box and whisker plot for each column of x or each vector in sequence x.\nThe box extends from the lower to upper quartile values of the data, with a\nline at the median. The whiskers extend from the box to show the range of the\ndata. Flier points are those past the end of the whiskers.\n\nA list of dictionaries containing stats for each boxplot. Required keys are:\n\nOptional keys are:\n\nThe positions of the boxes. The ticks and limits are automatically set to\nmatch the positions.\n\nThe widths of the boxes. The default is `clip(0.15*(distance between extreme\npositions), 0.15, 0.5)`.\n\nIf `True` (default), makes the boxes vertical. If `False`, makes horizontal\nboxes.\n\nIf `False` produces boxes with the `Line2D` artist. If `True` produces boxes\nwith the `Patch` artist.\n\nWhether to draw the CI notches, the mean value (both default to False), the\ncaps, the box, and the fliers (all three default to True).\n\nArtist properties for the boxes, whiskers, caps, fliers, medians, and means.\n\nIf `True` (and showmeans is `True`), will try to render the mean as a line\nspanning the full width of the box according to meanprops. Not recommended if\nshownotches is also True. Otherwise, means will be shown as points.\n\nIf True, the tick locations and labels will be adjusted to match the boxplot\npositions.\n\nThe zorder of the resulting boxplot.\n\nA dictionary mapping each component of the boxplot to a list of the `Line2D`\ninstances created. That dictionary has the following keys (assuming vertical\nboxplots):\n\n(Source code, png, pdf)\n\n(png, pdf)\n\n"}, {"name": "axes.Axes.can_pan", "path": "_as_gen/matplotlib.axes.axes.can_pan", "type": "axes", "text": "\nReturn whether this Axes supports any pan/zoom button functionality.\n\n"}, {"name": "axes.Axes.can_zoom", "path": "_as_gen/matplotlib.axes.axes.can_zoom", "type": "axes", "text": "\nReturn whether this Axes supports the zoom box button functionality.\n\n"}, {"name": "axes.Axes.cla", "path": "_as_gen/matplotlib.axes.axes.cla", "type": "axes", "text": "\nClear the Axes.\n\npyplot animation\n\nData Browser\n\n"}, {"name": "axes.Axes.clabel", "path": "_as_gen/matplotlib.axes.axes.clabel", "type": "axes", "text": "\nLabel a contour plot.\n\nAdds labels to line contours in given `ContourSet`.\n\nLine contours to label.\n\nA list of level values, that should be labeled. The list must be a subset of\n`CS.levels`. If not given, all levels are labeled.\n\nAll other parameters are documented in `clabel`.\n\nContour Demo\n\nContour Label Demo\n\nContourf Demo\n\nContouring the solution space of optimizations\n\nPatheffect Demo\n\nTickedStroke patheffect\n\n"}, {"name": "axes.Axes.clear", "path": "_as_gen/matplotlib.axes.axes.clear", "type": "axes", "text": "\nClear the Axes.\n\n"}, {"name": "axes.Axes.cohere", "path": "_as_gen/matplotlib.axes.axes.cohere", "type": "axes", "text": "\nPlot the coherence between x and y.\n\nPlot the coherence between x and y. Coherence is the normalized cross spectral\ndensity:\n\nThe sampling frequency (samples per time unit). It is used to calculate the\nFourier frequencies, freqs, in cycles per time unit.\n\nA function or a vector of length NFFT. To create window vectors see\n`window_hanning`, `window_none`, `numpy.blackman`, `numpy.hamming`,\n`numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc. If a\nfunction is passed as the argument, it must take a data segment as an argument\nand return the windowed version of the segment.\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data\nand two-sided for complex data. 'onesided' forces the return of a one-sided\nspectrum, while 'twosided' forces two-sided.\n\nThe number of points to which the data segment is padded when performing the\nFFT. This can be different from NFFT, which specifies the number of data\npoints used. While not increasing the actual resolution of the spectrum (the\nminimum distance between resolvable peaks), this can give more points in the\nplot, allowing for more detail. This corresponds to the n parameter in the\ncall to fft(). The default is None, which sets pad_to equal to NFFT\n\nThe number of data points used in each block for the FFT. A power 2 is most\nefficient. This should NOT be used to get zero padding, or the scaling of the\nresult will be incorrect; use pad_to for this instead.\n\nThe function applied to each segment before fft-ing, designed to remove the\nmean or linear trend. Unlike in MATLAB, where the detrend parameter is a\nvector, in Matplotlib it is a function. The `mlab` module defines\n`detrend_none`, `detrend_mean`, and `detrend_linear`, but you can use a custom\nfunction as well. You can also use a string to choose one of the functions:\n'none' calls `detrend_none`. 'mean' calls `detrend_mean`. 'linear' calls\n`detrend_linear`.\n\nWhether the resulting density values should be scaled by the scaling\nfrequency, which gives density in units of Hz^-1. This allows for integration\nover the returned frequency values. The default is True for MATLAB\ncompatibility.\n\nThe number of points of overlap between blocks.\n\nThe center frequency of x, which offsets the x extents of the plot to reflect\nthe frequency range used when a signal is acquired and then filtered and\ndownsampled to baseband.\n\nThe coherence vector.\n\nThe frequencies for the elements in Cxy.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, y\n\nKeyword arguments control the `Line2D` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures, John\nWiley & Sons (1986)\n\n"}, {"name": "axes.Axes.contains", "path": "_as_gen/matplotlib.axes.axes.contains", "type": "axes", "text": "\nTest whether the artist contains the mouse event.\n\nWhether any values are within the radius.\n\nAn artist-specific dictionary of details of the event context, such as which\npoints are contained in the pick radius. See the individual Artist subclasses\nfor details.\n\n"}, {"name": "axes.Axes.contains_point", "path": "_as_gen/matplotlib.axes.axes.contains_point", "type": "axes", "text": "\nReturn whether point (pair of pixel coordinates) is inside the axes patch.\n\n"}, {"name": "axes.Axes.contour", "path": "_as_gen/matplotlib.axes.axes.contour", "type": "axes", "text": "\nPlot contour lines.\n\nCall signature:\n\n`contour` and `contourf` draw contour lines and filled contours, respectively.\nExcept as noted, function signatures and return values are the same for both\nversions.\n\nThe coordinates of the values in Z.\n\nX and Y must both be 2D with the same shape as Z (e.g. created via\n`numpy.meshgrid`), or they must both be 1-D such that `len(X) == N` is the\nnumber of columns in Z and `len(Y) == M` is the number of rows in Z.\n\nX and Y must both be ordered monotonically.\n\nIf not given, they are assumed to be integer indices, i.e. `X = range(N)`, `Y\n= range(M)`.\n\nThe height values over which the contour is drawn.\n\nDetermines the number and positions of the contour lines / regions.\n\nIf an int n, use `MaxNLocator`, which tries to automatically choose no more\nthan n+1 \"nice\" contour levels between vmin and vmax.\n\nIf array-like, draw contour lines at the specified levels. The values must be\nin increasing order.\n\nEnable/disable corner masking, which only has an effect if Z is a masked\narray. If `False`, any quad touching a masked point is masked out. If `True`,\nonly the triangular corners of quads nearest those points are always masked\nout, other triangular corners comprising three unmasked points are contoured\nas usual.\n\nThe colors of the levels, i.e. the lines for `contour` and the areas for\n`contourf`.\n\nThe sequence is cycled for the levels in ascending order. If the sequence is\nshorter than the number of levels, it's repeated.\n\nAs a shortcut, single color strings may be used in place of one-element lists,\ni.e. `'red'` instead of `['red']` to color all levels with the same color.\nThis shortcut does only work for color strings, not for other ways of\nspecifying colors.\n\nBy default (value None), the colormap specified by cmap will be used.\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nA `Colormap` instance or registered colormap name. The colormap maps the level\nvalues to colors.\n\nIf both colors and cmap are given, an error is raised.\n\nIf a colormap is used, the `Normalize` instance scales the level values to the\ncanonical colormap range [0, 1] for mapping to colors. If not given, the\ndefault linear scaling is used.\n\nIf not None, either or both of these values will be supplied to the\n`Normalize` instance, overriding the default color scaling based on levels.\n\nDetermines the orientation and exact position of Z by specifying the position\nof `Z[0, 0]`. This is only relevant, if X, Y are not given.\n\nIf origin is not None, then extent is interpreted as in `imshow`: it gives the\nouter pixel boundaries. In this case, the position of Z[0, 0] is the center of\nthe pixel, not a corner. If origin is None, then (x0, y0) is the position of\nZ[0, 0], and (x1, y1) is the position of Z[-1, -1].\n\nThis argument is ignored if X and Y are specified in the call to contour.\n\nThe locator is used to determine the contour levels if they are not given\nexplicitly via levels. Defaults to `MaxNLocator`.\n\nDetermines the `contourf`-coloring of values that are outside the levels\nrange.\n\nIf 'neither', values outside the levels range are not colored. If 'min', 'max'\nor 'both', color the values below, above or below and above the levels range.\n\nValues below `min(levels)` and above `max(levels)` are mapped to the\nunder/over values of the `Colormap`. Note that most colormaps do not have\ndedicated colors for these by default, so that the over and under values are\nthe edge values of the colormap. You may want to set these values explicitly\nusing `Colormap.set_under` and `Colormap.set_over`.\n\nNote\n\nAn existing `QuadContourSet` does not get notified if properties of its\ncolormap are changed. Therefore, an explicit call `QuadContourSet.changed()`\nis needed after modifying the colormap. The explicit call can be left out, if\na colorbar is assigned to the `QuadContourSet` because it internally calls\n`QuadContourSet.changed()`.\n\nExample:\n\nOverride axis units by specifying an instance of a\n`matplotlib.units.ConversionInterface`.\n\nEnable antialiasing, overriding the defaults. For filled contours, the default\nis True. For line contours, it is taken from `rcParams[\"lines.antialiased\"]`\n(default: `True`).\n\nIf 0, no subdivision of the domain. Specify a positive integer to divide the\ndomain into subdomains of nchunk by nchunk quads. Chunking reduces the maximum\nlength of polygons generated by the contouring algorithm which reduces the\nrendering workload passed on to the backend and also requires slightly less\nRAM. It can however introduce rendering artifacts at chunk boundaries\ndepending on the backend, the antialiased flag and value of alpha.\n\nOnly applies to `contour`.\n\nThe line width of the contour lines.\n\nIf a number, all levels will be plotted with this linewidth.\n\nIf a sequence, the levels in ascending order will be plotted with the\nlinewidths in the order specified.\n\nIf None, this falls back to `rcParams[\"lines.linewidth\"]` (default: `1.5`).\n\nOnly applies to `contour`.\n\nIf linestyles is None, the default is 'solid' unless the lines are monochrome.\nIn that case, negative contours will take their linestyle from\n`rcParams[\"contour.negative_linestyle\"]` (default: `'dashed'`) setting.\n\nlinestyles can also be an iterable of the above strings specifying a set of\nlinestyles to be used. If this iterable is shorter than the number of contour\nlevels it will be repeated as necessary.\n\nOnly applies to `contourf`.\n\nA list of cross hatch patterns to use on the filled areas. If None, no\nhatching will be added to the contour. Hatching is supported in the\nPostScript, PDF, SVG and Agg backends only.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\n`contourf` fills intervals that are closed at the top; that is, for boundaries\nz1 and z2, the filled region is:\n\nexcept for the lowest interval, which is closed on both sides (i.e. it\nincludes the lowest value).\n\nContour Corner Mask\n\nContour Demo\n\nContour Label Demo\n\nContourf Demo\n\nContourf Hatching\n\nContouring the solution space of optimizations\n\nBlend transparency with color in 2D images\n\nContour plot of irregularly spaced data\n\nPatheffect Demo\n\nTickedStroke patheffect\n\nDemonstrates plotting contour (level) curves in 3D\n\nDemonstrates plotting contour (level) curves in 3D using the extend3d option\n\nProjecting contour profiles onto a graph\n\ncontour(X, Y, Z)\n\n"}, {"name": "axes.Axes.contourf", "path": "_as_gen/matplotlib.axes.axes.contourf", "type": "axes", "text": "\nPlot filled contours.\n\nCall signature:\n\n`contour` and `contourf` draw contour lines and filled contours, respectively.\nExcept as noted, function signatures and return values are the same for both\nversions.\n\nThe coordinates of the values in Z.\n\nX and Y must both be 2D with the same shape as Z (e.g. created via\n`numpy.meshgrid`), or they must both be 1-D such that `len(X) == N` is the\nnumber of columns in Z and `len(Y) == M` is the number of rows in Z.\n\nX and Y must both be ordered monotonically.\n\nIf not given, they are assumed to be integer indices, i.e. `X = range(N)`, `Y\n= range(M)`.\n\nThe height values over which the contour is drawn.\n\nDetermines the number and positions of the contour lines / regions.\n\nIf an int n, use `MaxNLocator`, which tries to automatically choose no more\nthan n+1 \"nice\" contour levels between vmin and vmax.\n\nIf array-like, draw contour lines at the specified levels. The values must be\nin increasing order.\n\nEnable/disable corner masking, which only has an effect if Z is a masked\narray. If `False`, any quad touching a masked point is masked out. If `True`,\nonly the triangular corners of quads nearest those points are always masked\nout, other triangular corners comprising three unmasked points are contoured\nas usual.\n\nThe colors of the levels, i.e. the lines for `contour` and the areas for\n`contourf`.\n\nThe sequence is cycled for the levels in ascending order. If the sequence is\nshorter than the number of levels, it's repeated.\n\nAs a shortcut, single color strings may be used in place of one-element lists,\ni.e. `'red'` instead of `['red']` to color all levels with the same color.\nThis shortcut does only work for color strings, not for other ways of\nspecifying colors.\n\nBy default (value None), the colormap specified by cmap will be used.\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nA `Colormap` instance or registered colormap name. The colormap maps the level\nvalues to colors.\n\nIf both colors and cmap are given, an error is raised.\n\nIf a colormap is used, the `Normalize` instance scales the level values to the\ncanonical colormap range [0, 1] for mapping to colors. If not given, the\ndefault linear scaling is used.\n\nIf not None, either or both of these values will be supplied to the\n`Normalize` instance, overriding the default color scaling based on levels.\n\nDetermines the orientation and exact position of Z by specifying the position\nof `Z[0, 0]`. This is only relevant, if X, Y are not given.\n\nIf origin is not None, then extent is interpreted as in `imshow`: it gives the\nouter pixel boundaries. In this case, the position of Z[0, 0] is the center of\nthe pixel, not a corner. If origin is None, then (x0, y0) is the position of\nZ[0, 0], and (x1, y1) is the position of Z[-1, -1].\n\nThis argument is ignored if X and Y are specified in the call to contour.\n\nThe locator is used to determine the contour levels if they are not given\nexplicitly via levels. Defaults to `MaxNLocator`.\n\nDetermines the `contourf`-coloring of values that are outside the levels\nrange.\n\nIf 'neither', values outside the levels range are not colored. If 'min', 'max'\nor 'both', color the values below, above or below and above the levels range.\n\nValues below `min(levels)` and above `max(levels)` are mapped to the\nunder/over values of the `Colormap`. Note that most colormaps do not have\ndedicated colors for these by default, so that the over and under values are\nthe edge values of the colormap. You may want to set these values explicitly\nusing `Colormap.set_under` and `Colormap.set_over`.\n\nNote\n\nAn existing `QuadContourSet` does not get notified if properties of its\ncolormap are changed. Therefore, an explicit call `QuadContourSet.changed()`\nis needed after modifying the colormap. The explicit call can be left out, if\na colorbar is assigned to the `QuadContourSet` because it internally calls\n`QuadContourSet.changed()`.\n\nExample:\n\nOverride axis units by specifying an instance of a\n`matplotlib.units.ConversionInterface`.\n\nEnable antialiasing, overriding the defaults. For filled contours, the default\nis True. For line contours, it is taken from `rcParams[\"lines.antialiased\"]`\n(default: `True`).\n\nIf 0, no subdivision of the domain. Specify a positive integer to divide the\ndomain into subdomains of nchunk by nchunk quads. Chunking reduces the maximum\nlength of polygons generated by the contouring algorithm which reduces the\nrendering workload passed on to the backend and also requires slightly less\nRAM. It can however introduce rendering artifacts at chunk boundaries\ndepending on the backend, the antialiased flag and value of alpha.\n\nOnly applies to `contour`.\n\nThe line width of the contour lines.\n\nIf a number, all levels will be plotted with this linewidth.\n\nIf a sequence, the levels in ascending order will be plotted with the\nlinewidths in the order specified.\n\nIf None, this falls back to `rcParams[\"lines.linewidth\"]` (default: `1.5`).\n\nOnly applies to `contour`.\n\nIf linestyles is None, the default is 'solid' unless the lines are monochrome.\nIn that case, negative contours will take their linestyle from\n`rcParams[\"contour.negative_linestyle\"]` (default: `'dashed'`) setting.\n\nlinestyles can also be an iterable of the above strings specifying a set of\nlinestyles to be used. If this iterable is shorter than the number of contour\nlevels it will be repeated as necessary.\n\nOnly applies to `contourf`.\n\nA list of cross hatch patterns to use on the filled areas. If None, no\nhatching will be added to the contour. Hatching is supported in the\nPostScript, PDF, SVG and Agg backends only.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\n`contourf` fills intervals that are closed at the top; that is, for boundaries\nz1 and z2, the filled region is:\n\nexcept for the lowest interval, which is closed on both sides (i.e. it\nincludes the lowest value).\n\nContour Corner Mask\n\nContourf Demo\n\nContourf Hatching\n\nContourf and log color scale\n\nContour plot of irregularly spaced data\n\npcolormesh\n\nFrontpage contour example\n\n3D box surface plot\n\nFilled contours\n\nProjecting filled contour onto a graph\n\ncontourf(X, Y, Z)\n\n"}, {"name": "axes.Axes.convert_xunits", "path": "_as_gen/matplotlib.axes.axes.convert_xunits", "type": "axes", "text": "\nConvert x using the unit type of the xaxis.\n\nIf the artist is not in contained in an Axes or if the xaxis does not have\nunits, x itself is returned.\n\n"}, {"name": "axes.Axes.convert_yunits", "path": "_as_gen/matplotlib.axes.axes.convert_yunits", "type": "axes", "text": "\nConvert y using the unit type of the yaxis.\n\nIf the artist is not in contained in an Axes or if the yaxis does not have\nunits, y itself is returned.\n\n"}, {"name": "axes.Axes.csd", "path": "_as_gen/matplotlib.axes.axes.csd", "type": "axes", "text": "\nPlot the cross-spectral density.\n\nThe cross spectral density \\\\(P_{xy}\\\\) by Welch's average periodogram method.\nThe vectors x and y are divided into NFFT length segments. Each segment is\ndetrended by function detrend and windowed by function window. noverlap gives\nthe length of the overlap between segments. The product of the direct FFTs of\nx and y are averaged over each segment to compute \\\\(P_{xy}\\\\), with a scaling\nto correct for power loss due to windowing.\n\nIf len(x) < NFFT or len(y) < NFFT, they will be zero padded to NFFT.\n\nArrays or sequences containing the data.\n\nThe sampling frequency (samples per time unit). It is used to calculate the\nFourier frequencies, freqs, in cycles per time unit.\n\nA function or a vector of length NFFT. To create window vectors see\n`window_hanning`, `window_none`, `numpy.blackman`, `numpy.hamming`,\n`numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc. If a\nfunction is passed as the argument, it must take a data segment as an argument\nand return the windowed version of the segment.\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data\nand two-sided for complex data. 'onesided' forces the return of a one-sided\nspectrum, while 'twosided' forces two-sided.\n\nThe number of points to which the data segment is padded when performing the\nFFT. This can be different from NFFT, which specifies the number of data\npoints used. While not increasing the actual resolution of the spectrum (the\nminimum distance between resolvable peaks), this can give more points in the\nplot, allowing for more detail. This corresponds to the n parameter in the\ncall to fft(). The default is None, which sets pad_to equal to NFFT\n\nThe number of data points used in each block for the FFT. A power 2 is most\nefficient. This should NOT be used to get zero padding, or the scaling of the\nresult will be incorrect; use pad_to for this instead.\n\nThe function applied to each segment before fft-ing, designed to remove the\nmean or linear trend. Unlike in MATLAB, where the detrend parameter is a\nvector, in Matplotlib it is a function. The `mlab` module defines\n`detrend_none`, `detrend_mean`, and `detrend_linear`, but you can use a custom\nfunction as well. You can also use a string to choose one of the functions:\n'none' calls `detrend_none`. 'mean' calls `detrend_mean`. 'linear' calls\n`detrend_linear`.\n\nWhether the resulting density values should be scaled by the scaling\nfrequency, which gives density in units of Hz^-1. This allows for integration\nover the returned frequency values. The default is True for MATLAB\ncompatibility.\n\nThe number of points of overlap between segments.\n\nThe center frequency of x, which offsets the x extents of the plot to reflect\nthe frequency range used when a signal is acquired and then filtered and\ndownsampled to baseband.\n\nWhether to include the line object plotted in the returned values.\n\nThe values for the cross spectrum \\\\(P_{xy}\\\\) before scaling (complex\nvalued).\n\nThe frequencies corresponding to the elements in Pxy.\n\nThe line created by this function. Only returned if return_line is True.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, y\n\nKeyword arguments control the `Line2D` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSee also\n\nis equivalent to setting `y = x`.\n\nFor plotting, the power is plotted as \\\\(10 \\log_{10}(P_{xy})\\\\) for decibels,\nthough \\\\(P_{xy}\\\\) itself is returned.\n\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures, John\nWiley & Sons (1986)\n\nCSD Demo\n\n"}, {"name": "axes.Axes.drag_pan", "path": "_as_gen/matplotlib.axes.axes.drag_pan", "type": "axes", "text": "\nCalled when the mouse moves during a pan operation.\n\nThe pressed mouse button.\n\nThe pressed key, if any.\n\nThe mouse coordinates in display coords.\n\nThis is intended to be overridden by new projection types.\n\n"}, {"name": "axes.Axes.draw", "path": "_as_gen/matplotlib.axes.axes.draw", "type": "axes", "text": "\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\n"}, {"name": "axes.Axes.draw_artist", "path": "_as_gen/matplotlib.axes.axes.draw_artist", "type": "axes", "text": "\nEfficiently redraw a single artist.\n\nThis method can only be used after an initial draw of the figure, because that\ncreates and caches the renderer needed here.\n\nFaster rendering by using blitting\n\n"}, {"name": "axes.Axes.end_pan", "path": "_as_gen/matplotlib.axes.axes.end_pan", "type": "axes", "text": "\nCalled when a pan operation completes (when the mouse button is up.)\n\nThis is intended to be overridden by new projection types.\n\n"}, {"name": "axes.Axes.errorbar", "path": "_as_gen/matplotlib.axes.axes.errorbar", "type": "axes", "text": "\nPlot y versus x as lines and/or markers with attached errorbars.\n\nx, y define the data locations, xerr, yerr define the errorbar sizes. By\ndefault, this draws the data markers/lines as well the errorbars. Use\nfmt='none' to draw errorbars without any data markers.\n\nThe data positions.\n\nThe errorbar sizes:\n\nNote that all error arrays should have positive values.\n\nSee Different ways of specifying error bars for an example on the usage of\n`xerr` and `yerr`.\n\nThe format for the data points / data lines. See `plot` for details.\n\nUse 'none' (case insensitive) to plot errorbars without any data markers.\n\nThe color of the errorbar lines. If None, use the color of the line connecting\nthe markers.\n\nThe linewidth of the errorbar lines. If None, the linewidth of the current\nstyle is used.\n\nThe length of the error bar caps in points.\n\nAn alias to the keyword argument markeredgewidth (a.k.a. mew). This setting is\na more sensible name for the property that controls the thickness of the error\nbar cap in points. For backwards compatibility, if mew or markeredgewidth are\ngiven, then they will over-ride capthick. This may change in future releases.\n\nIf True, will plot the errorbars above the plot symbols. Default is below.\n\nThese arguments can be used to indicate that a value gives only upper/lower\nlimits. In that case a caret symbol is used to indicate this. lims-arguments\nmay be scalars, or array-likes of the same length as xerr and yerr. To use\nlimits with inverted axes, `set_xlim` or `set_ylim` must be called before\n`errorbar()`. Note the tricky parameter names: setting e.g. lolims to True\nmeans that the y-value is a lower limit of the True value, so, only an upward-\npointing arrow will be drawn!\n\ndraws error bars on a subset of the data. errorevery =N draws error bars on\nthe points (x[::N], y[::N]). errorevery =(start, N) draws error bars on the\npoints (x[start::N], y[start::N]). e.g. errorevery=(6, 3) adds error bars to\nthe data at (x[6], x[9], x[12], x[15], ...). Used to avoid overlapping error\nbars when two series share x-axis values.\n\nThe container contains:\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, y, xerr, yerr\n\nAll other keyword arguments are passed on to the `plot` call drawing the\nmarkers. For example, this code makes big red squares with thick green edges:\n\nwhere mfc, mec, ms and mew are aliases for the longer property names,\nmarkerfacecolor, markeredgecolor, markersize and markeredgewidth.\n\nValid kwargs for the marker properties are `Line2D` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nErrorbar subsampling\n\nErrorbar function\n\nDifferent ways of specifying error bars\n\nIncluding upper and lower limits in error bars\n\nCreating boxes from error bars using PatchCollection\n\nLegend Demo\n\nParasite Simple2\n\n3D errorbars\n\nLog Demo\n\nerrorbar(x, y, yerr, xerr)\n\n"}, {"name": "axes.Axes.eventplot", "path": "_as_gen/matplotlib.axes.axes.eventplot", "type": "axes", "text": "\nPlot identical parallel lines at the given positions.\n\nThis type of plot is commonly used in neuroscience for representing neural\nevents, where it is usually called a spike raster, dot raster, or raster plot.\n\nHowever, it is useful in any situation where you wish to show the timing or\nposition of multiple sets of discrete events, such as the arrival times of\npeople to a business on each day of the month or the date of hurricanes each\nyear of the last century.\n\nA 1D array-like defines the positions of one sequence of events.\n\nMultiple groups of events may be passed as a list of array-likes. Each group\ncan be styled independently by passing lists of values to lineoffsets,\nlinelengths, linewidths, colors and linestyles.\n\nNote that positions can be a 2D array, but in practice different event groups\nusually have different counts so that one will use a list of different-length\narrays rather than a 2D array.\n\nThe direction of the event sequence:\n\nThe offset of the center of the lines from the origin, in the direction\northogonal to orientation.\n\nIf positions is 2D, this can be a sequence with length matching the length of\npositions.\n\nThe total height of the lines (i.e. the lines stretches from `lineoffset -\nlinelength/2` to `lineoffset + linelength/2`).\n\nIf positions is 2D, this can be a sequence with length matching the length of\npositions.\n\nThe line width(s) of the event lines, in points.\n\nIf positions is 2D, this can be a sequence with length matching the length of\npositions.\n\nThe color(s) of the event lines.\n\nIf positions is 2D, this can be a sequence with length matching the length of\npositions.\n\nDefault is 'solid'. Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',\n'-', '--', '-.', ':']. Dash tuples should be of the form:\n\nwhere onoffseq is an even length tuple of on and off ink in points.\n\nIf positions is 2D, this can be a sequence with length matching the length of\npositions.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\npositions, lineoffsets, linelengths, linewidths, colors, linestyles\n\nOther keyword arguments are line collection properties. See `LineCollection`\nfor a list of the valid properties.\n\nThe `EventCollection` that were added.\n\nFor linelengths, linewidths, colors, and linestyles, if only a single value is\ngiven, that value is applied to all lines. If an array-like is given, it must\nhave the same length as positions, and each value will be applied to the\ncorresponding row of the array.\n\n(Source code, png, pdf)\n\neventplot(D)\n\n"}, {"name": "axes.Axes.fill", "path": "_as_gen/matplotlib.axes.axes.fill", "type": "axes", "text": "\nPlot filled polygons.\n\nEach polygon is defined by the lists of x and y positions of its nodes,\noptionally followed by a color specifier. See `matplotlib.colors` for\nsupported color specifiers. The standard color cycle is used for polygons\nwithout a color specifier.\n\nYou can plot multiple polygons by providing multiple x, y, [color] groups.\n\nFor example, each of the following is legal:\n\nAn object with labelled data. If given, provide the label names to plot in x\nand y, e.g.:\n\nUse `fill_between()` if you would like to fill the region between two curves.\n\nFilled polygon\n\nRadar chart (aka spider or star chart)\n\nEllipse With Units\n\n"}, {"name": "axes.Axes.fill_between", "path": "_as_gen/matplotlib.axes.axes.fill_between", "type": "axes", "text": "\nFill the area between two horizontal curves.\n\nThe curves are defined by the points (x, y1) and (x, y2). This creates one or\nmultiple polygons describing the filled area.\n\nYou may exclude some horizontal sections from filling using where.\n\nBy default, the edges connect the given points directly. Use step if the\nfilling should be a step function, i.e. constant in between x.\n\nThe x coordinates of the nodes defining the curves.\n\nThe y coordinates of the nodes defining the first curve.\n\nThe y coordinates of the nodes defining the second curve.\n\nDefine where to exclude some horizontal regions from being filled. The filled\nregions are defined by the coordinates `x[where]`. More precisely, fill\nbetween `x[i]` and `x[i+1]` if `where[i] and where[i+1]`. Note that this\ndefinition implies that an isolated True value between two False values in\nwhere will not result in filling. Both sides of the True position remain\nunfilled due to the adjacent False values.\n\nThis option is only relevant if where is used and the two curves are crossing\neach other.\n\nSemantically, where is often used for y1 > y2 or similar. By default, the\nnodes of the polygon defining the filled region will only be placed at the\npositions in the x array. Such a polygon cannot describe the above semantics\nclose to the intersection. The x-sections containing the intersection are\nsimply clipped.\n\nSetting interpolate to True will calculate the actual intersection point and\nextend the filled region up to this point.\n\nDefine step if the filling should be a step function, i.e. constant in between\nx. The value determines where the step will occur:\n\nA `PolyCollection` containing the plotted polygons.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, y1, y2, where\n\nAll other keyword arguments are passed on to `PolyCollection`. They control\nthe `Polygon` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\narray-like or scalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa or antialiaseds\n\nbool or list of bools\n\n`array`\n\narray-like or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clim`\n\n(vmin: float, vmax: float)\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`cmap`\n\n`Colormap` or str or None\n\n`color`\n\ncolor or list of rgba tuples\n\n`edgecolor` or ec or edgecolors\n\ncolor or list of colors or 'face'\n\n`facecolor` or facecolors or fc\n\ncolor or list of colors\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or dashes or linestyles or ls\n\nstr or tuple or list thereof\n\n`linewidth` or linewidths or lw\n\nfloat or list of floats\n\n`norm`\n\n`Normalize` or None\n\n`offset_transform`\n\n`Transform`\n\n`offsets`\n\n(N, 2) or (2,) array-like\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`paths`\n\nlist of array-like\n\n`picker`\n\nNone or bool or float or callable\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sizes`\n\nndarray or None\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`urls`\n\nlist of str or None\n\n`verts`\n\nlist of array-like\n\n`verts_and_codes`\n\nunknown\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nSee also\n\nFill between two sets of y-values.\n\nFill between two sets of x-values.\n\nFill Between and Alpha\n\nFilling the area between lines\n\nfill_between(x, y1, y2)\n\n"}, {"name": "axes.Axes.fill_betweenx", "path": "_as_gen/matplotlib.axes.axes.fill_betweenx", "type": "axes", "text": "\nFill the area between two vertical curves.\n\nThe curves are defined by the points (y, x1) and (y, x2). This creates one or\nmultiple polygons describing the filled area.\n\nYou may exclude some vertical sections from filling using where.\n\nBy default, the edges connect the given points directly. Use step if the\nfilling should be a step function, i.e. constant in between y.\n\nThe y coordinates of the nodes defining the curves.\n\nThe x coordinates of the nodes defining the first curve.\n\nThe x coordinates of the nodes defining the second curve.\n\nDefine where to exclude some vertical regions from being filled. The filled\nregions are defined by the coordinates `y[where]`. More precisely, fill\nbetween `y[i]` and `y[i+1]` if `where[i] and where[i+1]`. Note that this\ndefinition implies that an isolated True value between two False values in\nwhere will not result in filling. Both sides of the True position remain\nunfilled due to the adjacent False values.\n\nThis option is only relevant if where is used and the two curves are crossing\neach other.\n\nSemantically, where is often used for x1 > x2 or similar. By default, the\nnodes of the polygon defining the filled region will only be placed at the\npositions in the y array. Such a polygon cannot describe the above semantics\nclose to the intersection. The y-sections containing the intersection are\nsimply clipped.\n\nSetting interpolate to True will calculate the actual intersection point and\nextend the filled region up to this point.\n\nDefine step if the filling should be a step function, i.e. constant in between\ny. The value determines where the step will occur:\n\nA `PolyCollection` containing the plotted polygons.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\ny, x1, x2, where\n\nAll other keyword arguments are passed on to `PolyCollection`. They control\nthe `Polygon` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\narray-like or scalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa or antialiaseds\n\nbool or list of bools\n\n`array`\n\narray-like or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clim`\n\n(vmin: float, vmax: float)\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`cmap`\n\n`Colormap` or str or None\n\n`color`\n\ncolor or list of rgba tuples\n\n`edgecolor` or ec or edgecolors\n\ncolor or list of colors or 'face'\n\n`facecolor` or facecolors or fc\n\ncolor or list of colors\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or dashes or linestyles or ls\n\nstr or tuple or list thereof\n\n`linewidth` or linewidths or lw\n\nfloat or list of floats\n\n`norm`\n\n`Normalize` or None\n\n`offset_transform`\n\n`Transform`\n\n`offsets`\n\n(N, 2) or (2,) array-like\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`paths`\n\nlist of array-like\n\n`picker`\n\nNone or bool or float or callable\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sizes`\n\nndarray or None\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`urls`\n\nlist of str or None\n\n`verts`\n\nlist of array-like\n\n`verts_and_codes`\n\nunknown\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nSee also\n\nFill between two sets of y-values.\n\nFill between two sets of x-values.\n\nFill Betweenx Demo\n\n"}, {"name": "axes.Axes.findobj", "path": "_as_gen/matplotlib.axes.axes.findobj", "type": "axes", "text": "\nFind artist objects.\n\nRecursively find all `Artist` instances contained in the artist.\n\nA filter criterion for the matches. This can be\n\nInclude self in the list to be checked for a match.\n\n"}, {"name": "axes.Axes.format_coord", "path": "_as_gen/matplotlib.axes.axes.format_coord", "type": "axes", "text": "\nReturn a format string formatting the x, y coordinates.\n\n"}, {"name": "axes.Axes.format_cursor_data", "path": "_as_gen/matplotlib.axes.axes.format_cursor_data", "type": "axes", "text": "\nReturn a string representation of data.\n\nNote\n\nThis method is intended to be overridden by artist subclasses. As an end-user\nof Matplotlib you will most likely not call this method yourself.\n\nThe default implementation converts ints and floats and arrays of ints and\nfloats into a comma-separated string enclosed in square brackets, unless the\nartist has an associated colorbar, in which case scalar values are formatted\nusing the colorbar's formatter.\n\nSee also\n\n"}, {"name": "axes.Axes.format_xdata", "path": "_as_gen/matplotlib.axes.axes.format_xdata", "type": "axes", "text": "\nReturn x formatted as an x-value.\n\nThis function will use the `fmt_xdata` attribute if it is not None, else will\nfall back on the xaxis major formatter.\n\n"}, {"name": "axes.Axes.format_ydata", "path": "_as_gen/matplotlib.axes.axes.format_ydata", "type": "axes", "text": "\nReturn y formatted as an y-value.\n\nThis function will use the `fmt_ydata` attribute if it is not None, else will\nfall back on the yaxis major formatter.\n\n"}, {"name": "axes.Axes.get_adjustable", "path": "_as_gen/matplotlib.axes.axes.get_adjustable", "type": "axes", "text": "\nReturn whether the Axes will adjust its physical dimension ('box') or its data\nlimits ('datalim') to achieve the desired aspect ratio.\n\nSee also\n\nSet how the Axes adjusts to achieve the required aspect ratio.\n\nFor a description of aspect handling.\n\n"}, {"name": "axes.Axes.get_anchor", "path": "_as_gen/matplotlib.axes.axes.get_anchor", "type": "axes", "text": "\nGet the anchor location.\n\nSee also\n\nfor a description of the anchor.\n\nfor a description of aspect handling.\n\n"}, {"name": "axes.Axes.get_aspect", "path": "_as_gen/matplotlib.axes.axes.get_aspect", "type": "axes", "text": "\nReturn the aspect ratio of the axes scaling.\n\nThis is either \"auto\" or a float giving the ratio of y/x-scale.\n\n"}, {"name": "axes.Axes.get_autoscale_on", "path": "_as_gen/matplotlib.axes.axes.get_autoscale_on", "type": "axes", "text": "\nReturn True if each axis is autoscaled, False otherwise.\n\n"}, {"name": "axes.Axes.get_autoscalex_on", "path": "_as_gen/matplotlib.axes.axes.get_autoscalex_on", "type": "axes", "text": "\nReturn whether the x-axis is autoscaled.\n\n"}, {"name": "axes.Axes.get_autoscaley_on", "path": "_as_gen/matplotlib.axes.axes.get_autoscaley_on", "type": "axes", "text": "\nReturn whether the y-axis is autoscaled.\n\n"}, {"name": "axes.Axes.get_axes_locator", "path": "_as_gen/matplotlib.axes.axes.get_axes_locator", "type": "axes", "text": "\nReturn the axes_locator.\n\n"}, {"name": "axes.Axes.get_axisbelow", "path": "_as_gen/matplotlib.axes.axes.get_axisbelow", "type": "axes", "text": "\nGet whether axis ticks and gridlines are above or below most artists.\n\nSee also\n\n"}, {"name": "axes.Axes.get_box_aspect", "path": "_as_gen/matplotlib.axes.axes.get_box_aspect", "type": "axes", "text": "\nReturn the Axes box aspect, i.e. the ratio of height to width.\n\nThe box aspect is `None` (i.e. chosen depending on the available figure space)\nunless explicitly specified.\n\nSee also\n\nfor a description of box aspect.\n\nfor a description of aspect handling.\n\n"}, {"name": "axes.Axes.get_children", "path": "_as_gen/matplotlib.axes.axes.get_children", "type": "axes", "text": "\nReturn a list of the child `Artist`s of this `Artist`.\n\n"}, {"name": "axes.Axes.get_cursor_data", "path": "_as_gen/matplotlib.axes.axes.get_cursor_data", "type": "axes", "text": "\nReturn the cursor data for a given event.\n\nNote\n\nThis method is intended to be overridden by artist subclasses. As an end-user\nof Matplotlib you will most likely not call this method yourself.\n\nCursor data can be used by Artists to provide additional context information\nfor a given event. The default implementation just returns None.\n\nSubclasses can override the method and return arbitrary data. However, when\ndoing so, they must ensure that `format_cursor_data` can convert the data to a\nstring representation.\n\nThe only current use case is displaying the z-value of an `AxesImage` in the\nstatus bar of a plot window, while moving the mouse.\n\nSee also\n\n"}, {"name": "axes.Axes.get_data_ratio", "path": "_as_gen/matplotlib.axes.axes.get_data_ratio", "type": "axes", "text": "\nReturn the aspect ratio of the scaled data.\n\nThis method is intended to be overridden by new projection types.\n\n"}, {"name": "axes.Axes.get_default_bbox_extra_artists", "path": "_as_gen/matplotlib.axes.axes.get_default_bbox_extra_artists", "type": "axes", "text": "\nReturn a default list of artists that are used for the bounding box\ncalculation.\n\nArtists are excluded either by not being visible or\n`artist.set_in_layout(False)`.\n\n"}, {"name": "axes.Axes.get_facecolor", "path": "_as_gen/matplotlib.axes.axes.get_facecolor", "type": "axes", "text": "\nGet the facecolor of the Axes.\n\n"}, {"name": "axes.Axes.get_frame_on", "path": "_as_gen/matplotlib.axes.axes.get_frame_on", "type": "axes", "text": "\nGet whether the Axes rectangle patch is drawn.\n\n"}, {"name": "axes.Axes.get_images", "path": "_as_gen/matplotlib.axes.axes.get_images", "type": "axes", "text": "\nReturn a list of `AxesImage`s contained by the Axes.\n\n"}, {"name": "axes.Axes.get_legend", "path": "_as_gen/matplotlib.axes.axes.get_legend", "type": "axes", "text": "\nReturn the `Legend` instance, or None if no legend is defined.\n\n"}, {"name": "axes.Axes.get_legend_handles_labels", "path": "_as_gen/matplotlib.axes.axes.get_legend_handles_labels", "type": "axes", "text": "\nReturn handles and labels for legend\n\n`ax.legend()` is equivalent to\n\nLegend guide\n\n"}, {"name": "axes.Axes.get_lines", "path": "_as_gen/matplotlib.axes.axes.get_lines", "type": "axes", "text": "\nReturn a list of lines contained by the Axes.\n\n"}, {"name": "axes.Axes.get_navigate", "path": "_as_gen/matplotlib.axes.axes.get_navigate", "type": "axes", "text": "\nGet whether the Axes responds to navigation commands.\n\n"}, {"name": "axes.Axes.get_navigate_mode", "path": "_as_gen/matplotlib.axes.axes.get_navigate_mode", "type": "axes", "text": "\nGet the navigation toolbar button status: 'PAN', 'ZOOM', or None.\n\n"}, {"name": "axes.Axes.get_position", "path": "_as_gen/matplotlib.axes.axes.get_position", "type": "axes", "text": "\nReturn the position of the Axes within the figure as a `Bbox`.\n\nIf `True`, return the original position. Otherwise return the active position.\nFor an explanation of the positions see `set_position`.\n\nContour Demo\n\n"}, {"name": "axes.Axes.get_rasterization_zorder", "path": "_as_gen/matplotlib.axes.axes.get_rasterization_zorder", "type": "axes", "text": "\nReturn the zorder value below which artists will be rasterized.\n\n"}, {"name": "axes.Axes.get_renderer_cache", "path": "_as_gen/matplotlib.axes.axes.get_renderer_cache", "type": "axes", "text": "\n\n"}, {"name": "axes.Axes.get_shared_x_axes", "path": "_as_gen/matplotlib.axes.axes.get_shared_x_axes", "type": "axes", "text": "\nReturn a reference to the shared axes Grouper object for x axes.\n\n"}, {"name": "axes.Axes.get_shared_y_axes", "path": "_as_gen/matplotlib.axes.axes.get_shared_y_axes", "type": "axes", "text": "\nReturn a reference to the shared axes Grouper object for y axes.\n\n"}, {"name": "axes.Axes.get_tightbbox", "path": "_as_gen/matplotlib.axes.axes.get_tightbbox", "type": "axes", "text": "\nReturn the tight bounding box of the axes, including axis and their decorators\n(xlabel, title, etc).\n\nArtists that have `artist.set_in_layout(False)` are not included in the bbox.\n\nrenderer that will be used to draw the figures (i.e.\n`fig.canvas.get_renderer()`)\n\nList of artists to include in the tight bounding box. If `None` (default),\nthen all artist children of the Axes are included in the tight bounding box.\n\nIf call_axes_locator is `False`, it does not call the `_axes_locator`\nattribute, which is necessary to get the correct bounding box.\n`call_axes_locator=False` can be used if the caller is only interested in the\nrelative size of the tightbbox compared to the Axes bbox.\n\nThe bounding box will not include the x-extent of the title and the xlabel, or\nthe y-extent of the ylabel.\n\nBounding box in figure pixel coordinates.\n\nSee also\n\n"}, {"name": "axes.Axes.get_title", "path": "_as_gen/matplotlib.axes.axes.get_title", "type": "axes", "text": "\nGet an Axes title.\n\nGet one of the three available Axes titles. The available titles are\npositioned above the Axes in the center, flush with the left edge, and flush\nwith the right edge.\n\nWhich title to return.\n\nThe title text string.\n\n"}, {"name": "axes.Axes.get_transformed_clip_path_and_affine", "path": "_as_gen/matplotlib.axes.axes.get_transformed_clip_path_and_affine", "type": "axes", "text": "\nReturn the clip path with the non-affine part of its transformation applied,\nand the remaining affine part of its transformation.\n\n"}, {"name": "axes.Axes.get_window_extent", "path": "_as_gen/matplotlib.axes.axes.get_window_extent", "type": "axes", "text": "\nReturn the Axes bounding box in display space; args and kwargs are empty.\n\nThis bounding box does not include the spines, ticks, ticklables, or other\nlabels. For a bounding box including these elements use `get_tightbbox`.\n\nSee also\n\n"}, {"name": "axes.Axes.get_xaxis", "path": "_as_gen/matplotlib.axes.axes.get_xaxis", "type": "axes", "text": "\nReturn the XAxis instance.\n\nThe use of this function is discouraged. You should instead directly access\nthe attribute `ax.xaxis`.\n\n"}, {"name": "axes.Axes.get_xaxis_text1_transform", "path": "_as_gen/matplotlib.axes.axes.get_xaxis_text1_transform", "type": "axes", "text": "\nThe transform used for drawing x-axis labels, which will add pad_points of\npadding (in points) between the axis and the label. The x-direction is in data\ncoordinates and the y-direction is in axis coordinates\n\nThe text vertical alignment.\n\nThe text horizontal alignment.\n\nThis transformation is primarily used by the `Axis` class, and is meant to be\noverridden by new kinds of projections that may need to place axis elements in\ndifferent locations.\n\n"}, {"name": "axes.Axes.get_xaxis_text2_transform", "path": "_as_gen/matplotlib.axes.axes.get_xaxis_text2_transform", "type": "axes", "text": "\nThe transform used for drawing secondary x-axis labels, which will add\npad_points of padding (in points) between the axis and the label. The\nx-direction is in data coordinates and the y-direction is in axis coordinates\n\nThe text vertical alignment.\n\nThe text horizontal alignment.\n\nThis transformation is primarily used by the `Axis` class, and is meant to be\noverridden by new kinds of projections that may need to place axis elements in\ndifferent locations.\n\n"}, {"name": "axes.Axes.get_xaxis_transform", "path": "_as_gen/matplotlib.axes.axes.get_xaxis_transform", "type": "axes", "text": "\nGet the transformation used for drawing x-axis labels, ticks and gridlines.\nThe x-direction is in data coordinates and the y-direction is in axis\ncoordinates.\n\nNote\n\nThis transformation is primarily used by the `Axis` class, and is meant to be\noverridden by new kinds of projections that may need to place axis elements in\ndifferent locations.\n\nFilling the area between lines\n\nhlines and vlines\n\nBoxplots\n\nScale invariant angle label\n\nCentered spines with arrows\n\nTransformations Tutorial\n\n"}, {"name": "axes.Axes.get_xbound", "path": "_as_gen/matplotlib.axes.axes.get_xbound", "type": "axes", "text": "\nReturn the lower and upper x-axis bounds, in increasing order.\n\nSee also\n\n"}, {"name": "axes.Axes.get_xgridlines", "path": "_as_gen/matplotlib.axes.axes.get_xgridlines", "type": "axes", "text": "\nReturn the xaxis' grid lines as a list of `Line2D`s.\n\n"}, {"name": "axes.Axes.get_xlabel", "path": "_as_gen/matplotlib.axes.axes.get_xlabel", "type": "axes", "text": "\nGet the xlabel text string.\n\n"}, {"name": "axes.Axes.get_xlim", "path": "_as_gen/matplotlib.axes.axes.get_xlim", "type": "axes", "text": "\nReturn the x-axis view limits.\n\nThe current x-axis limits in data coordinates.\n\nSee also\n\nThe x-axis may be inverted, in which case the left value will be greater than\nthe right value.\n\nDecay\n\n"}, {"name": "axes.Axes.get_xmajorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_xmajorticklabels", "type": "axes", "text": "\nReturn the xaxis' major tick labels, as a list of `Text`.\n\n"}, {"name": "axes.Axes.get_xminorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_xminorticklabels", "type": "axes", "text": "\nReturn the xaxis' minor tick labels, as a list of `Text`.\n\n"}, {"name": "axes.Axes.get_xscale", "path": "_as_gen/matplotlib.axes.axes.get_xscale", "type": "axes", "text": "\nReturn the xaxis' scale (as a str).\n\n"}, {"name": "axes.Axes.get_xticklabels", "path": "_as_gen/matplotlib.axes.axes.get_xticklabels", "type": "axes", "text": "\nGet the xaxis' tick labels.\n\nWhether to return the minor or the major ticklabels.\n\nOverrides minor.\n\nSelects which ticklabels to return\n\nThe tick label strings are not populated until a `draw` method has been\ncalled.\n\nSee also: `draw` and `draw`.\n\nCreating a timeline with lines, dates, and text\n\nCreating annotated heatmaps\n\nAligning Labels\n\nBoxplots\n\nDate tick labels\n\nFormatting date ticks using ConciseDateFormatter\n\nEvans test\n\nThe Lifecycle of a Plot\n\n"}, {"name": "axes.Axes.get_xticklines", "path": "_as_gen/matplotlib.axes.axes.get_xticklines", "type": "axes", "text": "\nReturn the xaxis' tick lines as a list of `Line2D`s.\n\n"}, {"name": "axes.Axes.get_xticks", "path": "_as_gen/matplotlib.axes.axes.get_xticks", "type": "axes", "text": "\nReturn the xaxis' tick locations in data coordinates.\n\n"}, {"name": "axes.Axes.get_yaxis", "path": "_as_gen/matplotlib.axes.axes.get_yaxis", "type": "axes", "text": "\nReturn the YAxis instance.\n\nThe use of this function is discouraged. You should instead directly access\nthe attribute `ax.yaxis`.\n\n"}, {"name": "axes.Axes.get_yaxis_text1_transform", "path": "_as_gen/matplotlib.axes.axes.get_yaxis_text1_transform", "type": "axes", "text": "\nThe transform used for drawing y-axis labels, which will add pad_points of\npadding (in points) between the axis and the label. The x-direction is in axis\ncoordinates and the y-direction is in data coordinates\n\nThe text vertical alignment.\n\nThe text horizontal alignment.\n\nThis transformation is primarily used by the `Axis` class, and is meant to be\noverridden by new kinds of projections that may need to place axis elements in\ndifferent locations.\n\n"}, {"name": "axes.Axes.get_yaxis_text2_transform", "path": "_as_gen/matplotlib.axes.axes.get_yaxis_text2_transform", "type": "axes", "text": "\nThe transform used for drawing secondart y-axis labels, which will add\npad_points of padding (in points) between the axis and the label. The\nx-direction is in axis coordinates and the y-direction is in data coordinates\n\nThe text vertical alignment.\n\nThe text horizontal alignment.\n\nThis transformation is primarily used by the `Axis` class, and is meant to be\noverridden by new kinds of projections that may need to place axis elements in\ndifferent locations.\n\n"}, {"name": "axes.Axes.get_yaxis_transform", "path": "_as_gen/matplotlib.axes.axes.get_yaxis_transform", "type": "axes", "text": "\nGet the transformation used for drawing y-axis labels, ticks and gridlines.\nThe x-direction is in axis coordinates and the y-direction is in data\ncoordinates.\n\nNote\n\nThis transformation is primarily used by the `Axis` class, and is meant to be\noverridden by new kinds of projections that may need to place axis elements in\ndifferent locations.\n\nCentered spines with arrows\n\nConnect Simple01\n\nTransformations Tutorial\n\n"}, {"name": "axes.Axes.get_ybound", "path": "_as_gen/matplotlib.axes.axes.get_ybound", "type": "axes", "text": "\nReturn the lower and upper y-axis bounds, in increasing order.\n\nSee also\n\n"}, {"name": "axes.Axes.get_ygridlines", "path": "_as_gen/matplotlib.axes.axes.get_ygridlines", "type": "axes", "text": "\nReturn the yaxis' grid lines as a list of `Line2D`s.\n\n"}, {"name": "axes.Axes.get_ylabel", "path": "_as_gen/matplotlib.axes.axes.get_ylabel", "type": "axes", "text": "\nGet the ylabel text string.\n\n"}, {"name": "axes.Axes.get_ylim", "path": "_as_gen/matplotlib.axes.axes.get_ylim", "type": "axes", "text": "\nReturn the y-axis view limits.\n\nThe current y-axis limits in data coordinates.\n\nSee also\n\nThe y-axis may be inverted, in which case the bottom value will be greater\nthan the top value.\n\nLine, Poly and RegularPoly Collection with autoscaling\n\n"}, {"name": "axes.Axes.get_ymajorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_ymajorticklabels", "type": "axes", "text": "\nReturn the yaxis' major tick labels, as a list of `Text`.\n\n"}, {"name": "axes.Axes.get_yminorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_yminorticklabels", "type": "axes", "text": "\nReturn the yaxis' minor tick labels, as a list of `Text`.\n\n"}, {"name": "axes.Axes.get_yscale", "path": "_as_gen/matplotlib.axes.axes.get_yscale", "type": "axes", "text": "\nReturn the yaxis' scale (as a str).\n\n"}, {"name": "axes.Axes.get_yticklabels", "path": "_as_gen/matplotlib.axes.axes.get_yticklabels", "type": "axes", "text": "\nGet the yaxis' tick labels.\n\nWhether to return the minor or the major ticklabels.\n\nOverrides minor.\n\nSelects which ticklabels to return\n\nThe tick label strings are not populated until a `draw` method has been\ncalled.\n\nSee also: `draw` and `draw`.\n\nFill Between and Alpha\n\nProgrammatically controlling subplot adjustment\n\n"}, {"name": "axes.Axes.get_yticklines", "path": "_as_gen/matplotlib.axes.axes.get_yticklines", "type": "axes", "text": "\nReturn the yaxis' tick lines as a list of `Line2D`s.\n\n"}, {"name": "axes.Axes.get_yticks", "path": "_as_gen/matplotlib.axes.axes.get_yticks", "type": "axes", "text": "\nReturn the yaxis' tick locations in data coordinates.\n\n"}, {"name": "axes.Axes.grid", "path": "_as_gen/matplotlib.axes.axes.grid", "type": "axes", "text": "\nConfigure the grid lines.\n\nWhether to show the grid lines. If any kwargs are supplied, it is assumed you\nwant the grid on and visible will be set to True.\n\nIf visible is None and there are no kwargs, this toggles the visibility of the\nlines.\n\nThe grid lines to apply the changes on.\n\nThe axis to apply the changes on.\n\nDefine the line properties of the grid, e.g.:\n\nValid keyword arguments are:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nThe axis is drawn as a unit, so the effective zorder for drawing the grid is\ndetermined by the zorder of each axis, not by the zorder of the `Line2D`\nobjects comprising the grid. Therefore, to set grid zorder, use\n`set_axisbelow` or, for more control, call the `set_zorder` method of each\naxis.\n\nBroken Barh\n\nCSD Demo\n\nFill Between and Alpha\n\nPsd Demo\n\nScatter Demo2\n\nScatter plots with a legend\n\nSimple Plot\n\nCross- and Auto-Correlation Demo\n\nContour Corner Mask\n\nCreating annotated heatmaps\n\nImage Demo\n\nWatermark image\n\nAxes Props\n\nFigure labels: suptitle, supxlabel, supylabel\n\nInvert Axes\n\nUsing histograms to plot a cumulative distribution\n\nPolar plot\n\nDate tick labels\n\nMultiline\n\nText watermark\n\nPathPatch object\n\nAnatomy of a figure\n\nBachelor's degrees by gender\n\nDecay\n\nThe double pendulum problem\n\nCustom projection\n\nPatheffect Demo\n\nPythonic Matplotlib\n\n2D and 3D Axes in same Figure\n\nLog Demo\n\nLog Axis\n\nScales\n\nSymlog Demo\n\nArtist tests\n\nBasic Usage\n\n"}, {"name": "axes.Axes.has_data", "path": "_as_gen/matplotlib.axes.axes.has_data", "type": "axes", "text": "\nReturn whether any artists have been added to the Axes.\n\nThis should not be used to determine whether the dataLim need to be updated,\nand may not actually be useful for anything.\n\n"}, {"name": "axes.Axes.have_units", "path": "_as_gen/matplotlib.axes.axes.have_units", "type": "axes", "text": "\nReturn whether units are set on any axis.\n\n"}, {"name": "axes.Axes.hexbin", "path": "_as_gen/matplotlib.axes.axes.hexbin", "type": "axes", "text": "\nMake a 2D hexagonal binning plot of points x, y.\n\nIf C is None, the value of the hexagon is determined by the number of points\nin the hexagon. Otherwise, C specifies values at the coordinate (x[i], y[i]).\nFor each hexagon, these values are reduced using reduce_C_function.\n\nThe data positions. x and y must be of the same length.\n\nIf given, these values are accumulated in the bins. Otherwise, every point has\na value of 1. Must be of the same length as x and y.\n\nIf a single int, the number of hexagons in the x-direction. The number of\nhexagons in the y-direction is chosen such that the hexagons are approximately\nregular.\n\nAlternatively, if a tuple (nx, ny), the number of hexagons in the x-direction\nand the y-direction.\n\nDiscretization of the hexagon values.\n\nUse a linear or log10 scale on the horizontal axis.\n\nUse a linear or log10 scale on the vertical axis.\n\nIf not None, only display cells with more than mincnt number of points in the\ncell.\n\nIf marginals is True, plot the marginal density as colormapped rectangles\nalong the bottom of the x-axis and left of the y-axis.\n\nThe limits of the bins (xmin, xmax, ymin, ymax). The default assigns the\nlimits based on gridsize, x, y, xscale and yscale.\n\nIf xscale or yscale is set to 'log', the limits are expected to be the\nexponent for a power of 10. E.g. for x-limits of 1 and 50 in 'linear' scale\nand y-limits of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).\n\nA `PolyCollection` defining the hexagonal bins.\n\nIf marginals is True, horizontal bar and vertical bar (both PolyCollections)\nwill be attached to the return collection as attributes hbar and vbar.\n\nThe Colormap instance or registered colormap name used to map the bin values\nto colors.\n\nThe Normalize instance scales the bin values to the canonical colormap range\n[0, 1] for mapping to colors. By default, the data range is mapped to the\ncolorbar range using linear scaling.\n\nThe colorbar range. If None, suitable min/max values are automatically chosen\nby the `Normalize` instance (defaults to the respective min/max values of the\nbins in case of the default linear scaling). It is an error to use vmin/vmax\nwhen norm is given.\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nIf None, defaults to 1.0.\n\nThe color of the hexagon edges. Possible values are:\n\nThe function to aggregate C within the bins. It is ignored if C is not given.\nThis must have the signature:\n\nCommonly used functions are:\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, y, C\n\nAll other keyword arguments are passed on to `PolyCollection`:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\narray-like or scalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa or antialiaseds\n\nbool or list of bools\n\n`array`\n\narray-like or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clim`\n\n(vmin: float, vmax: float)\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`cmap`\n\n`Colormap` or str or None\n\n`color`\n\ncolor or list of rgba tuples\n\n`edgecolor` or ec or edgecolors\n\ncolor or list of colors or 'face'\n\n`facecolor` or facecolors or fc\n\ncolor or list of colors\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or dashes or linestyles or ls\n\nstr or tuple or list thereof\n\n`linewidth` or linewidths or lw\n\nfloat or list of floats\n\n`norm`\n\n`Normalize` or None\n\n`offset_transform`\n\n`Transform`\n\n`offsets`\n\n(N, 2) or (2,) array-like\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`paths`\n\nlist of array-like\n\n`picker`\n\nNone or bool or float or callable\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sizes`\n\nndarray or None\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`urls`\n\nlist of str or None\n\n`verts`\n\nlist of array-like\n\n`verts_and_codes`\n\nunknown\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nSee also\n\n2D histogram rectangular bins\n\nHexagonal binned plot\n\nhexbin(x, y, C)\n\n"}, {"name": "axes.Axes.hist", "path": "_as_gen/matplotlib.axes.axes.hist", "type": "axes", "text": "\nPlot a histogram.\n\nCompute and draw the histogram of x. The return value is a tuple (n, bins,\npatches) or ([n0, n1, ...], bins, [patches0, patches1, ...]) if the input\ncontains multiple data. See the documentation of the weights parameter to draw\na histogram of already-binned data.\n\nMultiple data can be provided via x as a list of datasets of potentially\ndifferent length ([x0, x1, ...]), or as a 2D ndarray in which each column is a\ndataset. Note that the ndarray form is transposed relative to the list form.\n\nMasked arrays are not supported.\n\nThe bins, range, weights, and density parameters behave as in\n`numpy.histogram`.\n\nInput values, this takes either a single array or a sequence of arrays which\nare not required to be of the same length.\n\nIf bins is an integer, it defines the number of equal-width bins in the range.\n\nIf bins is a sequence, it defines the bin edges, including the left edge of\nthe first bin and the right edge of the last bin; in this case, bins may be\nunequally spaced. All but the last (righthand-most) bin is half-open. In other\nwords, if bins is:\n\nthen the first bin is `[1, 2)` (including 1, but excluding 2) and the second\n`[2, 3)`. The last bin, however, is `[3, 4]`, which includes 4.\n\nIf bins is a string, it is one of the binning strategies supported by\n`numpy.histogram_bin_edges`: 'auto', 'fd', 'doane', 'scott', 'stone', 'rice',\n'sturges', or 'sqrt'.\n\nThe lower and upper range of the bins. Lower and upper outliers are ignored.\nIf not provided, range is `(x.min(), x.max())`. Range has no effect if bins is\na sequence.\n\nIf bins is a sequence or range is specified, autoscaling is based on the\nspecified bin range instead of the range of x.\n\nIf `True`, draw and return a probability density: each bin will display the\nbin's raw count divided by the total number of counts and the bin width\n(`density = counts / (sum(counts) * np.diff(bins))`), so that the area under\nthe histogram integrates to 1 (`np.sum(density * np.diff(bins)) == 1`).\n\nIf stacked is also `True`, the sum of the histograms is normalized to 1.\n\nAn array of weights, of the same shape as x. Each value in x only contributes\nits associated weight towards the bin count (instead of 1). If density is\n`True`, the weights are normalized, so that the integral of the density over\nthe range remains 1.\n\nThis parameter can be used to draw a histogram of data that has already been\nbinned, e.g. using `numpy.histogram` (by treating each bin as a single point\nwith a weight equal to its count)\n\n(or you may alternatively use `bar()`).\n\nIf `True`, then a histogram is computed where each bin gives the counts in\nthat bin plus all bins for smaller values. The last bin gives the total number\nof datapoints.\n\nIf density is also `True` then the histogram is normalized such that the last\nbin equals 1.\n\nIf cumulative is a number less than 0 (e.g., -1), the direction of\naccumulation is reversed. In this case, if density is also `True`, then the\nhistogram is normalized such that the first bin equals 1.\n\nLocation of the bottom of each bin, ie. bins are drawn from `bottom` to\n`bottom + hist(x, bins)` If a scalar, the bottom of each bin is shifted by the\nsame amount. If an array, each bin is shifted independently and the length of\nbottom must match the number of bins. If None, defaults to 0.\n\nThe type of histogram to draw.\n\nThe horizontal alignment of the histogram bars.\n\nIf 'horizontal', `barh` will be used for bar-type histograms and the bottom\nkwarg will be the left edges.\n\nThe relative width of the bars as a fraction of the bin width. If `None`,\nautomatically compute the width.\n\nIgnored if histtype is 'step' or 'stepfilled'.\n\nIf `True`, the histogram axis will be set to a log scale.\n\nColor or sequence of colors, one per dataset. Default (`None`) uses the\nstandard line color sequence.\n\nString, or sequence of strings to match multiple datasets. Bar charts yield\nmultiple patches per dataset, but only the first gets the label, so that\n`legend` will work as expected.\n\nIf `True`, multiple data are stacked on top of each other If `False` multiple\ndata are arranged side by side if histtype is 'bar' or on top of each other if\nhisttype is 'step'\n\nThe values of the histogram bins. See density and weights for a description of\nthe possible semantics. If input x is an array, then this is an array of\nlength nbins. If input is a sequence of arrays `[data1, data2, ...]`, then\nthis is a list of arrays with the values of the histograms for each of the\narrays in the same order. The dtype of the array n (or of its element arrays)\nwill always be float even if no weighting or normalization is used.\n\nThe edges of the bins. Length nbins + 1 (nbins left edges and right edge of\nlast bin). Always a single array even when multiple data sets are passed in.\n\nContainer of individual artists used to create the histogram or list of such\ncontainers if there are multiple input datasets.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, weights\n\n`Patch` properties\n\nSee also\n\n2D histogram with rectangular bins\n\n2D histogram with hexagonal bins\n\nFor large numbers of bins (>1000), 'step' and 'stepfilled' can be\nsignificantly faster than 'bar' and 'barstacked'.\n\nScatter plot with histograms\n\nAxes Demo\n\nUsing histograms to plot a cumulative distribution\n\nSome features of the histogram (hist) function\n\nThe histogram (hist) function with multiple data sets\n\nPlacing text boxes\n\nSimple axes labels\n\nBayesian Methods for Hackers style sheet\n\nScatter Histogram (Locatable Axes)\n\nAnimated histogram\n\nFrontpage histogram example\n\nMRI With EEG\n\nBasic Usage\n\nArtist tutorial\n\nPath Tutorial\n\nTransformations Tutorial\n\nhist(x)\n\n"}, {"name": "axes.Axes.hist2d", "path": "_as_gen/matplotlib.axes.axes.hist2d", "type": "axes", "text": "\nMake a 2D histogram plot.\n\nInput values\n\nThe bin specification:\n\nThe default value is 10.\n\nThe leftmost and rightmost edges of the bins along each dimension (if not\nspecified explicitly in the bins parameters): `[[xmin, xmax], [ymin, ymax]]`.\nAll values outside of this range will be considered outliers and not tallied\nin the histogram.\n\nNormalize histogram. See the documentation for the density parameter of `hist`\nfor more details.\n\nAn array of values w_i weighing each sample (x_i, y_i).\n\nAll bins that has count less than cmin or more than cmax will not be displayed\n(set to NaN before passing to imshow) and these count values in the return\nvalue count histogram will also be set to nan upon return.\n\nThe bi-dimensional histogram of samples x and y. Values in x are histogrammed\nalong the first dimension and values in y are histogrammed along the second\ndimension.\n\nThe bin edges along the x axis.\n\nThe bin edges along the y axis.\n\nA `colors.Colormap` instance. If not set, use rc settings.\n\nA `colors.Normalize` instance is used to scale luminance data to `[0, 1]`. If\nnot set, defaults to `colors.Normalize()`.\n\nArguments passed to the `Normalize` instance.\n\nThe alpha blending value.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, y, weights\n\nAdditional parameters are passed along to the `pcolormesh` method and\n`QuadMesh` constructor.\n\nSee also\n\n1D histogram plotting\n\n2D histogram with hexagonal bins\n\nHistograms\n\nExploring normalizations\n\nhist2d(x, y)\n\n"}, {"name": "axes.Axes.hlines", "path": "_as_gen/matplotlib.axes.axes.hlines", "type": "axes", "text": "\nPlot horizontal lines at each y from xmin to xmax.\n\ny-indexes where to plot the lines.\n\nRespective beginning and end of each line. If scalars are provided, all lines\nwill have same length.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\ny, xmin, xmax, colors\n\nSee also\n\nvertical lines\n\nhorizontal line across the Axes\n\nhlines and vlines\n\nSpecifying Colors\n\n"}, {"name": "axes.Axes.imshow", "path": "_as_gen/matplotlib.axes.axes.imshow", "type": "axes", "text": "\nDisplay data as an image, i.e., on a 2D regular raster.\n\nThe input may either be actual RGB(A) data, or 2D scalar data, which will be\nrendered as a pseudocolor image. For displaying a grayscale image set up the\ncolormapping using the parameters `cmap='gray', vmin=0, vmax=255`.\n\nThe number of pixels used to render an image is set by the Axes size and the\ndpi of the figure. This can lead to aliasing artifacts when the image is\nresampled because the displayed image size will usually not match the size of\nX (see Image antialiasing). The resampling can be controlled via the\ninterpolation parameter and/or `rcParams[\"image.interpolation\"]` (default:\n`'antialiased'`).\n\nThe image data. Supported array shapes are:\n\nThe first two dimensions (M, N) define the rows and columns of the image.\n\nOut-of-range RGB(A) values are clipped.\n\nThe Colormap instance or registered colormap name used to map scalar data to\ncolors. This parameter is ignored for RGB(A) data.\n\nThe `Normalize` instance used to scale scalar data to the [0, 1] range before\nmapping to colors using cmap. By default, a linear scaling mapping the lowest\nvalue to 0 and the highest to 1 is used. This parameter is ignored for RGB(A)\ndata.\n\nThe aspect ratio of the Axes. This parameter is particularly relevant for\nimages since it determines whether data pixels are square.\n\nThis parameter is a shortcut for explicitly calling `Axes.set_aspect`. See\nthere for further details.\n\nThe interpolation method used.\n\nSupported values are 'none', 'antialiased', 'nearest', 'bilinear', 'bicubic',\n'spline16', 'spline36', 'hanning', 'hamming', 'hermite', 'kaiser', 'quadric',\n'catrom', 'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos', 'blackman'.\n\nIf interpolation is 'none', then no interpolation is performed on the Agg, ps,\npdf and svg backends. Other backends will fall back to 'nearest'. Note that\nmost SVG renderers perform interpolation at rendering and that the default\ninterpolation method they implement may differ.\n\nIf interpolation is the default 'antialiased', then 'nearest' interpolation is\nused if the image is upsampled by more than a factor of three (i.e. the number\nof display pixels is at least three times the size of the data array). If the\nupsampling rate is smaller than 3, or the image is downsampled, then 'hanning'\ninterpolation is used to act as an anti-aliasing filter, unless the image\nhappens to be upsampled by exactly a factor of two or one.\n\nSee Interpolations for imshow for an overview of the supported interpolation\nmethods, and Image antialiasing for a discussion of image antialiasing.\n\nSome interpolation methods require an additional radius parameter, which can\nbe set by filterrad. Additionally, the antigrain image resize filter is\ncontrolled by the parameter filternorm.\n\nIf 'data', interpolation is carried out on the data provided by the user. If\n'rgba', the interpolation is carried out after the colormapping has been\napplied (visual interpolation).\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque). If alpha is\nan array, the alpha blending values are applied pixel by pixel, and alpha must\nhave the same shape as X.\n\nWhen using scalar data and no explicit norm, vmin and vmax define the data\nrange that the colormap covers. By default, the colormap covers the complete\nvalue range of the supplied data. It is an error to use vmin/vmax when norm is\ngiven. When using RGB(A) data, parameters vmin/vmax are ignored.\n\nPlace the [0, 0] index of the array in the upper left or lower left corner of\nthe Axes. The convention (the default) 'upper' is typically used for matrices\nand images.\n\nNote that the vertical axis points upward for 'lower' but downward for\n'upper'.\n\nSee the origin and extent in imshow tutorial for examples and a more detailed\ndescription.\n\nThe bounding box in data coordinates that the image will fill. The image is\nstretched individually along x and y to fill the box.\n\nThe default extent is determined by the following conditions. Pixels have unit\nsize in data coordinates. Their centers are on integer coordinates, and their\ncenter coordinates range from 0 to columns-1 horizontally and from 0 to rows-1\nvertically.\n\nNote that the direction of the vertical axis and thus the default values for\ntop and bottom depend on origin:\n\nSee the origin and extent in imshow tutorial for examples and a more detailed\ndescription.\n\nA parameter for the antigrain image resize filter (see the antigrain\ndocumentation). If filternorm is set, the filter normalizes integer values and\ncorrects the rounding errors. It doesn't do anything with the source floating\npoint values, it corrects only integers according to the rule of 1.0 which\nmeans that any sum of pixel weights must be equal to 1.0. So, the filter\nfunction must produce a graph of the proper shape.\n\nThe filter radius for filters that have a radius parameter, i.e. when\ninterpolation is one of: 'sinc', 'lanczos' or 'blackman'.\n\nWhen True, use a full resampling method. When False, only resample when the\noutput image is larger than the input image.\n\nSet the url of the created `AxesImage`. See `Artist.set_url`.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nThese parameters are passed on to the constructor of the `AxesImage` artist.\n\nSee also\n\nPlot a matrix or an array as an image.\n\nUnless extent is used, pixel centers will be located at integer coordinates.\nIn other words: the origin will coincide with the center of pixel (0, 0).\n\nThere are two common representations for RGB images with an alpha channel:\n\n`imshow` expects RGB images adopting the straight (unassociated) alpha\nrepresentation.\n\nBar chart with gradients\n\nBarcode\n\nContour Demo\n\nCreating annotated heatmaps\n\nImage antialiasing\n\nClipping images with patches\n\nImage Demo\n\nImage Masked\n\nBlend transparency with color in 2D images\n\nModifying the coordinate formatter\n\nInterpolations for imshow\n\nPcolor Demo\n\nStreamplot\n\nAxes box aspect\n\nZoom region inset axes\n\nUsing a text as a Path\n\nColorbar\n\nCreating a colormap from a list of colors\n\nAnchored Direction Arrow\n\nAxes Grid2\n\nHBoxDivider demo\n\nAdding a colorbar to inset axes\n\nColorbar with AxesDivider\n\nControlling the position and size of colorbars with Inset Axes\n\nInset Locator Demo2\n\nSimple ImageGrid\n\nSimple ImageGrid 2\n\nSimple Colorbar\n\nShaded & power normalized rendering\n\npyplot animation\n\nAnimated image using a precomputed list of images\n\nImage Slices Viewer\n\nViewlims\n\nPatheffect Demo\n\nMRI\n\nMRI With EEG\n\nTopographic hillshading\n\nDropped spines\n\nColorbar Tick Labelling\n\nInteractive Adjustment of Colormap Range\n\nArtist tutorial\n\nTight Layout guide\n\nChoosing Colormaps in Matplotlib\n\nimshow(Z)\n\n"}, {"name": "axes.Axes.in_axes", "path": "_as_gen/matplotlib.axes.axes.in_axes", "type": "axes", "text": "\nReturn whether the given event (in display coords) is in the Axes.\n\n"}, {"name": "axes.Axes.indicate_inset", "path": "_as_gen/matplotlib.axes.axes.indicate_inset", "type": "axes", "text": "\nAdd an inset indicator to the Axes. This is a rectangle on the plot at the\nposition indicated by bounds that optionally has lines that connect the\nrectangle to an inset Axes (`Axes.inset_axes`).\n\nLower-left corner of rectangle to be marked, and its width and height.\n\nAn optional inset Axes to draw connecting lines to. Two lines are drawn\nconnecting the indicator box to the inset Axes on corners chosen so as to not\noverlap with the indicator box.\n\nTransform for the rectangle coordinates. Defaults to `ax.transAxes`, i.e. the\nunits of rect are in Axes-relative coordinates.\n\nFacecolor of the rectangle.\n\nColor of the rectangle and color of the connecting lines.\n\nTransparency of the rectangle and connector lines.\n\nDrawing order of the rectangle and connector lines. The default, 4.99, is just\nbelow the default level of inset Axes.\n\nOther keyword arguments are passed on to the `Rectangle` patch:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`angle`\n\nunknown\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`bounds`\n\n(left, bottom, width, height)\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`height`\n\nunknown\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nunknown\n\n`x`\n\nunknown\n\n`xy`\n\n(float, float)\n\n`y`\n\nunknown\n\n`zorder`\n\nfloat\n\nThe indicator frame.\n\nThe four connector lines connecting to (lower_left, upper_left, lower_right\nupper_right) corners of inset_ax. Two lines are set with visibility to False,\nbut the user can set the visibility to True if the automatic choice is not\ndeemed correct.\n\nWarning\n\nThis method is experimental as of 3.0, and the API may change.\n\n"}, {"name": "axes.Axes.indicate_inset_zoom", "path": "_as_gen/matplotlib.axes.axes.indicate_inset_zoom", "type": "axes", "text": "\nAdd an inset indicator rectangle to the Axes based on the axis limits for an\ninset_ax and draw connectors between inset_ax and the rectangle.\n\nInset Axes to draw connecting lines to. Two lines are drawn connecting the\nindicator box to the inset Axes on corners chosen so as to not overlap with\nthe indicator box.\n\nOther keyword arguments are passed on to `Axes.indicate_inset`\n\nRectangle artist.\n\nEach of four connector lines coming from the rectangle drawn on this axis, in\nthe order lower left, upper left, lower right, upper right. Two are set with\nvisibility to False, but the user can set the visibility to True if the\nautomatic choice is not deemed correct.\n\nWarning\n\nThis method is experimental as of 3.0, and the API may change.\n\nZoom region inset axes\n\n"}, {"name": "axes.Axes.inset_axes", "path": "_as_gen/matplotlib.axes.axes.inset_axes", "type": "axes", "text": "\nAdd a child inset Axes to this existing Axes.\n\nLower-left corner of inset Axes, and its width and height.\n\nDefaults to `ax.transAxes`, i.e. the units of rect are in Axes-relative\ncoordinates.\n\nDefaults to 5 (same as `Axes.legend`). Adjust higher or lower to change\nwhether it is above or below data plotted on the parent Axes.\n\nOther keyword arguments are passed on to the child `Axes`.\n\nThe created `Axes` instance.\n\nWarning\n\nThis method is experimental as of 3.0, and the API may change.\n\nThis example makes two inset Axes, the first is in Axes-relative coordinates,\nand the second in data-coordinates:\n\nPlacing Colorbars\n\nZoom region inset axes\n\n"}, {"name": "axes.Axes.invert_xaxis", "path": "_as_gen/matplotlib.axes.axes.invert_xaxis", "type": "axes", "text": "\nInvert the x-axis.\n\nSee also\n\n"}, {"name": "axes.Axes.invert_yaxis", "path": "_as_gen/matplotlib.axes.axes.invert_yaxis", "type": "axes", "text": "\nInvert the y-axis.\n\nSee also\n\nBar Label Demo\n\nHorizontal bar chart\n\nMarker reference\n\n"}, {"name": "axes.Axes.legend", "path": "_as_gen/matplotlib.axes.axes.legend", "type": "axes", "text": "\nPlace a legend on the Axes.\n\nCall signatures:\n\nThe call signatures correspond to the following different ways to use this\nmethod:\n\n1\\. Automatic detection of elements to be shown in the legend\n\nThe elements to be added to the legend are automatically determined, when you\ndo not pass in any extra arguments.\n\nIn this case, the labels are taken from the artist. You can specify them\neither at artist creation or by calling the `set_label()` method on the\nartist:\n\nor:\n\nSpecific lines can be excluded from the automatic legend element selection by\ndefining a label starting with an underscore. This is default for all artists,\nso calling `Axes.legend` without any arguments and without setting the labels\nmanually will result in no legend being drawn.\n\n2\\. Explicitly listing the artists and labels in the legend\n\nFor full control of which artists have a legend entry, it is possible to pass\nan iterable of legend artists followed by an iterable of legend labels\nrespectively:\n\n3\\. Explicitly listing the artists in the legend\n\nThis is similar to 2, but the labels are taken from the artists' label\nproperties. Example:\n\n4\\. Labeling existing plot elements\n\nDiscouraged\n\nThis call signature is discouraged, because the relation between plot elements\nand labels is only implicit by their order and can easily be mixed up.\n\nTo make a legend for all artists on an Axes, call this function with an\niterable of strings, one for each legend item. For example:\n\nA list of Artists (lines, patches) to be added to the legend. Use this\ntogether with labels, if you need full control on what is shown in the legend\nand the automatic mechanism described above is not sufficient.\n\nThe length of handles and labels should be the same in this case. If they are\nnot, they are truncated to the smaller length.\n\nA list of labels to show next to the artists. Use this together with handles,\nif you need full control on what is shown in the legend and the automatic\nmechanism described above is not sufficient.\n\nThe location of the legend.\n\nThe strings `'upper left', 'upper right', 'lower left', 'lower right'` place\nthe legend at the corresponding corner of the axes/figure.\n\nThe strings `'upper center', 'lower center', 'center left', 'center right'`\nplace the legend at the center of the corresponding edge of the axes/figure.\n\nThe string `'center'` places the legend at the center of the axes/figure.\n\nThe string `'best'` places the legend at the location, among the nine\nlocations defined so far, with the minimum overlap with other drawn artists.\nThis option can be quite slow for plots with large amounts of data; your\nplotting speed may benefit from providing a specific location.\n\nThe location can also be a 2-tuple giving the coordinates of the lower-left\ncorner of the legend in axes coordinates (in which case bbox_to_anchor will be\nignored).\n\nFor back-compatibility, `'center right'` (but no other location) can also be\nspelled `'right'`, and each \"string\" locations can also be given as a numeric\nvalue:\n\nLocation String\n\nLocation Code\n\n'best'\n\n0\n\n'upper right'\n\n1\n\n'upper left'\n\n2\n\n'lower left'\n\n3\n\n'lower right'\n\n4\n\n'right'\n\n5\n\n'center left'\n\n6\n\n'center right'\n\n7\n\n'lower center'\n\n8\n\n'upper center'\n\n9\n\n'center'\n\n10\n\nBox that is used to position the legend in conjunction with loc. Defaults to\n`axes.bbox` (if called as a method to `Axes.legend`) or `figure.bbox` (if\n`Figure.legend`). This argument allows arbitrary placement of the legend.\n\nBbox coordinates are interpreted in the coordinate system given by\nbbox_transform, with the default transform Axes or Figure coordinates,\ndepending on which `legend` is called.\n\nIf a 4-tuple or `BboxBase` is given, then it specifies the bbox `(x, y, width,\nheight)` that the legend is placed in. To put the legend in the best location\nin the bottom right quadrant of the axes (or figure):\n\nA 2-tuple `(x, y)` places the corner of the legend specified by loc at x, y.\nFor example, to put the legend's upper right-hand corner in the center of the\naxes (or figure) the following keywords can be used:\n\nThe number of columns that the legend has.\n\nThe font properties of the legend. If None (default), the current\n`matplotlib.rcParams` will be used.\n\nThe font size of the legend. If the value is numeric the size will be the\nabsolute font size in points. String values are relative to the current\ndefault font size. This argument is only used if prop is not specified.\n\nThe color of the text in the legend. Either a valid color string (for example,\n'red'), or a list of color strings. The labelcolor can also be made to match\nthe color of the line or marker using 'linecolor', 'markerfacecolor' (or\n'mfc'), or 'markeredgecolor' (or 'mec').\n\nLabelcolor can be set globally using `rcParams[\"legend.labelcolor\"]` (default:\n`'None'`). If None, use `rcParams[\"text.color\"]` (default: `'black'`).\n\nThe number of marker points in the legend when creating a legend entry for a\n`Line2D` (line).\n\nThe number of marker points in the legend when creating a legend entry for a\n`PathCollection` (scatter plot).\n\nThe vertical offset (relative to the font size) for the markers created for a\nscatter plot legend entry. 0.0 is at the base the legend text, and 1.0 is at\nthe top. To draw all markers at the same height, set to `[0.5]`.\n\nThe relative size of legend markers compared with the originally drawn ones.\n\nIf True, legend marker is placed to the left of the legend label. If False,\nlegend marker is placed to the right of the legend label.\n\nWhether the legend should be drawn on a patch (frame).\n\nWhether round edges should be enabled around the `FancyBboxPatch` which makes\nup the legend's background.\n\nWhether to draw a shadow behind the legend.\n\nThe alpha transparency of the legend's background. If shadow is activated and\nframealpha is `None`, the default value is ignored.\n\nThe legend's background color. If `\"inherit\"`, use\n`rcParams[\"axes.facecolor\"]` (default: `'white'`).\n\nThe legend's background patch edge color. If `\"inherit\"`, use take\n`rcParams[\"axes.edgecolor\"]` (default: `'black'`).\n\nIf mode is set to `\"expand\"` the legend will be horizontally expanded to fill\nthe axes area (or bbox_to_anchor if defines the legend's size).\n\nThe transform for the bounding box (bbox_to_anchor). For a value of `None`\n(default) the Axes' `transAxes` transform will be used.\n\nThe legend's title. Default is no title (`None`).\n\nThe font properties of the legend's title. If None (default), the\ntitle_fontsize argument will be used if present; if title_fontsize is also\nNone, the current `rcParams[\"legend.title_fontsize\"]` (default: `None`) will\nbe used.\n\nThe font size of the legend's title. Note: This cannot be combined with\ntitle_fontproperties. If you want to set the fontsize alongside other font\nproperties, use the size parameter in title_fontproperties.\n\nThe fractional whitespace inside the legend border, in font-size units.\n\nThe vertical space between the legend entries, in font-size units.\n\nThe length of the legend handles, in font-size units.\n\nThe height of the legend handles, in font-size units.\n\nThe pad between the legend handle and text, in font-size units.\n\nThe pad between the axes and legend border, in font-size units.\n\nThe spacing between columns, in font-size units.\n\nThe custom dictionary mapping instances or types to a legend handler. This\nhandler_map updates the default handler map found at\n`matplotlib.legend.Legend.get_legend_handler_map`.\n\nSee also\n\nSome artists are not supported by this function. See Legend guide for details.\n\n(Source code, png, pdf)\n\nBar Label Demo\n\nStacked bar chart\n\nGrouped bar chart with labels\n\nPlotting categorical variables\n\nFill Between and Alpha\n\nHat graph\n\nCustomizing dashed line styles\n\nLines with a ticked patheffect\n\nprop_cycle property markevery in rcParams\n\nScatter plots with a legend\n\nStackplots and streamgraphs\n\nStairs Demo\n\nContourf Hatching\n\nTricontour Demo\n\nSecondary Axis\n\nPlot a confidence ellipse of a two-dimensional dataset\n\nUsing histograms to plot a cumulative distribution\n\nThe histogram (hist) function with multiple data sets\n\nBar of pie\n\nLabeling a pie and a donut\n\nPolar Legend\n\nComposing Custom Legends\n\nLegend using pre-defined labels\n\nLegend Demo\n\nMathtext\n\nRendering math equations using TeX\n\nParasite Axes demo\n\nParasite axis demo\n\nAnatomy of a figure\n\nLegend Picking\n\nPatheffect Demo\n\nTickedStroke patheffect\n\nPlot 2D data on 3D plot\n\nParametric Curve\n\nMultiple Yaxis With Spines\n\nGroup barchart with units\n\nSimple Legend01\n\nSimple Legend02\n\nBasic Usage\n\nLegend guide\n\nConstrained Layout Guide\n\nTight Layout guide\n\nSpecifying Colors\n\n"}, {"name": "axes.Axes.locator_params", "path": "_as_gen/matplotlib.axes.axes.locator_params", "type": "axes", "text": "\nControl behavior of major tick locators.\n\nBecause the locator is involved in autoscaling, `autoscale_view` is called\nautomatically after the parameters are changed.\n\nThe axis on which to operate.\n\nParameter passed to `autoscale_view`. Default is None, for no change.\n\nRemaining keyword arguments are passed to directly to the `set_params()`\nmethod of the locator. Supported keywords depend on the type of the locator.\nSee for example `set_params` for the `ticker.MaxNLocator` used by default for\nlinear axes.\n\nWhen plotting small subplots, one might want to reduce the maximum number of\nticks and use tight bounds, for example:\n\nContourf Demo\n\nConstrained Layout Guide\n\nTight Layout guide\n\n"}, {"name": "axes.Axes.loglog", "path": "_as_gen/matplotlib.axes.axes.loglog", "type": "axes", "text": "\nMake a plot with log scaling on both the x and y axis.\n\nCall signatures:\n\nThis is just a thin wrapper around `plot` which additionally changes both the\nx-axis and the y-axis to log scaling. All of the concepts and parameters of\nplot can be used here as well.\n\nThe additional parameters base, subs and nonpositive control the x/y-axis\nproperties. They are just forwarded to `Axes.set_xscale` and\n`Axes.set_yscale`. To use different properties on the x-axis and the y-axis,\nuse e.g. `ax.set_xscale(\"log\", base=10); ax.set_yscale(\"log\", base=2)`.\n\nBase of the logarithm.\n\nThe location of the minor ticks. If None, reasonable locations are\nautomatically chosen depending on the number of decades in the plot. See\n`Axes.set_xscale`/`Axes.set_yscale` for details.\n\nNon-positive values can be masked as invalid, or clipped to a very small\npositive number.\n\nAll parameters supported by `plot`.\n\nObjects representing the plotted data.\n\nSecondary Axis\n\nLog Demo\n\n"}, {"name": "axes.Axes.magnitude_spectrum", "path": "_as_gen/matplotlib.axes.axes.magnitude_spectrum", "type": "axes", "text": "\nPlot the magnitude spectrum.\n\nCompute the magnitude spectrum of x. Data is padded to a length of pad_to and\nthe windowing function window is applied to the signal.\n\nArray or sequence containing the data.\n\nThe sampling frequency (samples per time unit). It is used to calculate the\nFourier frequencies, freqs, in cycles per time unit.\n\nA function or a vector of length NFFT. To create window vectors see\n`window_hanning`, `window_none`, `numpy.blackman`, `numpy.hamming`,\n`numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc. If a\nfunction is passed as the argument, it must take a data segment as an argument\nand return the windowed version of the segment.\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data\nand two-sided for complex data. 'onesided' forces the return of a one-sided\nspectrum, while 'twosided' forces two-sided.\n\nThe number of points to which the data segment is padded when performing the\nFFT. While not increasing the actual resolution of the spectrum (the minimum\ndistance between resolvable peaks), this can give more points in the plot,\nallowing for more detail. This corresponds to the n parameter in the call to\nfft(). The default is None, which sets pad_to equal to the length of the input\nsignal (i.e. no padding).\n\nThe scaling of the values in the spec. 'linear' is no scaling. 'dB' returns\nthe values in dB scale, i.e., the dB amplitude (20 * log10). 'default' is\n'linear'.\n\nThe center frequency of x, which offsets the x extents of the plot to reflect\nthe frequency range used when a signal is acquired and then filtered and\ndownsampled to baseband.\n\nThe values for the magnitude spectrum before scaling (real valued).\n\nThe frequencies corresponding to the elements in spectrum.\n\nThe line created by this function.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx\n\nKeyword arguments control the `Line2D` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSee also\n\nPlots the power spectral density.\n\nPlots the angles of the corresponding frequencies.\n\nPlots the phase (unwrapped angle) of the corresponding frequencies.\n\nCan plot the magnitude spectrum of segments within the signal in a colormap.\n\n"}, {"name": "axes.Axes.margins", "path": "_as_gen/matplotlib.axes.axes.margins", "type": "axes", "text": "\nSet or retrieve autoscaling margins.\n\nThe padding added to each limit of the Axes is the margin times the data\ninterval. All input parameters must be floats within the range [0, 1]. Passing\nboth positional and keyword arguments is invalid and will raise a TypeError.\nIf no arguments (positional or otherwise) are provided, the current margins\nwill remain in place and simply be returned.\n\nSpecifying any margin changes only the autoscaling; for example, if xmargin is\nnot None, then xmargin times the X data interval will be added to each end of\nthat interval before it is used in autoscaling.\n\nIf a single positional argument is provided, it specifies both margins of the\nx-axis and y-axis limits. If two positional arguments are provided, they will\nbe interpreted as xmargin, ymargin. If setting the margin on a single axis is\ndesired, use the keyword arguments described below.\n\nSpecific margin values for the x-axis and y-axis, respectively. These cannot\nbe used with positional arguments, but can be used individually to alter on\ne.g., only the y-axis.\n\nThe tight parameter is passed to `autoscale_view()`, which is executed after a\nmargin is changed; the default here is True, on the assumption that when\nmargins are specified, no additional padding to match tick marks is usually\ndesired. Set tight to None will preserve the previous setting.\n\nIf a previously used Axes method such as `pcolor()` has set `use_sticky_edges`\nto `True`, only the limits not set by the \"sticky artists\" will be modified.\nTo force all of the margins to be set, set `use_sticky_edges` to `False`\nbefore calling `margins()`.\n\nMarker reference\n\nCreating a timeline with lines, dates, and text\n\nTrigradient Demo\n\nControlling view limits using margins and sticky_edges\n\nScale invariant angle label\n\nggplot style sheet\n\nAutoscaling\n\n"}, {"name": "axes.Axes.matshow", "path": "_as_gen/matplotlib.axes.axes.matshow", "type": "axes", "text": "\nPlot the values of a 2D matrix or array as color-coded image.\n\nThe matrix will be shown the way it would be printed, with the first row at\nthe top. Row and column numbering is zero-based.\n\nThe matrix to be displayed.\n\nSee also\n\nMore general function to plot data on a 2D regular raster.\n\nThis is just a convenience function wrapping `imshow` to set useful defaults\nfor displaying a matrix. In particular:\n\n"}, {"name": "axes.Axes.minorticks_off", "path": "_as_gen/matplotlib.axes.axes.minorticks_off", "type": "axes", "text": "\nRemove minor ticks from the Axes.\n\n"}, {"name": "axes.Axes.minorticks_on", "path": "_as_gen/matplotlib.axes.axes.minorticks_on", "type": "axes", "text": "\nDisplay minor ticks on the Axes.\n\nDisplaying minor ticks may reduce performance; you may turn them off using\n`minorticks_off()` if drawing speed is a problem.\n\nMRI With EEG\n\n"}, {"name": "axes.Axes.mouseover", "path": "_as_gen/matplotlib.axes.axes.mouseover", "type": "axes", "text": "\nIf this property is set to True, the artist will be queried for custom context\ninformation when the mouse cursor moves over it.\n\nSee also `get_cursor_data()`, `ToolCursorPosition` and `NavigationToolbar2`.\n\n"}, {"name": "axes.Axes.name", "path": "_as_gen/matplotlib.axes.axes.name", "type": "axes", "text": "\n\n"}, {"name": "axes.Axes.pchanged", "path": "_as_gen/matplotlib.axes.axes.pchanged", "type": "axes", "text": "\nCall all of the registered callbacks.\n\nThis function is triggered internally when a property is changed.\n\nSee also\n\n"}, {"name": "axes.Axes.pcolor", "path": "_as_gen/matplotlib.axes.axes.pcolor", "type": "axes", "text": "\nCreate a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature:\n\nX and Y can be used to specify the corners of the quadrilaterals.\n\nHint\n\n`pcolor()` can be very slow for large arrays. In most cases you should use the\nsimilar but much faster `pcolormesh` instead. See Differences between pcolor()\nand pcolormesh() for a discussion of the differences.\n\nThe color-mapped values.\n\nThe coordinates of the corners of quadrilaterals of a pcolormesh:\n\nNote that the column index corresponds to the x-coordinate, and the row index\ncorresponds to y. For details, see the Notes section below.\n\nIf `shading='flat'` the dimensions of X and Y should be one greater than those\nof C, and the quadrilateral is colored due to the value at `C[i, j]`. If X, Y\nand C have equal dimensions, a warning will be raised and the last row and\ncolumn of C will be ignored.\n\nIf `shading='nearest'`, the dimensions of X and Y should be the same as those\nof C (if not, a ValueError will be raised). The color `C[i, j]` will be\ncentered on `(X[i, j], Y[i, j])`.\n\nIf X and/or Y are 1-D arrays or column vectors they will be expanded as needed\ninto the appropriate 2D arrays, making a rectangular grid.\n\nThe fill style for the quadrilateral. Possible values:\n\nSee pcolormesh grids and shading for more description.\n\nA Colormap instance or registered colormap name. The colormap maps the C\nvalues to colors.\n\nThe Normalize instance scales the data values to the canonical colormap range\n[0, 1] for mapping to colors. By default, the data range is mapped to the\ncolorbar range using linear scaling.\n\nThe colorbar range. If None, suitable min/max values are automatically chosen\nby the `Normalize` instance (defaults to the respective min/max values of C in\ncase of the default linear scaling). It is an error to use vmin/vmax when norm\nis given.\n\nThe color of the edges. Defaults to 'none'. Possible values:\n\nThe singular form edgecolor works as an alias.\n\nThe alpha blending value of the face color, between 0 (transparent) and 1\n(opaque). Note: The edgecolor is currently not affected by this.\n\nWhether to snap the mesh to pixel boundaries.\n\nThe default antialiaseds is False if the default edgecolors=\"none\" is used.\nThis eliminates artificial lines at patch boundaries, and works regardless of\nthe value of alpha. If edgecolors is not \"none\", then the default antialiaseds\nis taken from `rcParams[\"patch.antialiased\"]` (default: `True`). Stroking the\nedges may be preferred if alpha is 1, but will cause artifacts otherwise.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nAdditionally, the following arguments are allowed. They are passed along to\nthe `PolyCollection` constructor:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\narray-like or scalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa or antialiaseds\n\nbool or list of bools\n\n`array`\n\narray-like or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clim`\n\n(vmin: float, vmax: float)\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`cmap`\n\n`Colormap` or str or None\n\n`color`\n\ncolor or list of rgba tuples\n\n`edgecolor` or ec or edgecolors\n\ncolor or list of colors or 'face'\n\n`facecolor` or facecolors or fc\n\ncolor or list of colors\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or dashes or linestyles or ls\n\nstr or tuple or list thereof\n\n`linewidth` or linewidths or lw\n\nfloat or list of floats\n\n`norm`\n\n`Normalize` or None\n\n`offset_transform`\n\n`Transform`\n\n`offsets`\n\n(N, 2) or (2,) array-like\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`paths`\n\nlist of array-like\n\n`picker`\n\nNone or bool or float or callable\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sizes`\n\nndarray or None\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`urls`\n\nlist of str or None\n\n`verts`\n\nlist of array-like\n\n`verts_and_codes`\n\nunknown\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nSee also\n\nfor an explanation of the differences between pcolor and pcolormesh.\n\nIf X and Y are each equidistant, `imshow` can be a faster alternative.\n\nMasked arrays\n\nX, Y and C may be masked arrays. If either `C[i, j]`, or one of the vertices\nsurrounding `C[i, j]` (X or Y at `[i, j], [i+1, j], [i, j+1], [i+1, j+1]`) is\nmasked, nothing is plotted.\n\nGrid orientation\n\nThe grid orientation follows the standard matrix convention: An array C with\nshape (nrows, ncolumns) is plotted with the column number as X and the row\nnumber as Y.\n\nPcolor Demo\n\nControlling view limits using margins and sticky_edges\n\n"}, {"name": "axes.Axes.pcolorfast", "path": "_as_gen/matplotlib.axes.axes.pcolorfast", "type": "axes", "text": "\nCreate a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature:\n\nThis method is similar to `pcolor` and `pcolormesh`. It's designed to provide\nthe fastest pcolor-type plotting with the Agg backend. To achieve this, it\nuses different algorithms internally depending on the complexity of the input\ngrid (regular rectangular, non-regular rectangular or arbitrary\nquadrilateral).\n\nWarning\n\nThis method is experimental. Compared to `pcolor` or `pcolormesh` it has some\nlimitations:\n\nThe image data. Supported array shapes are:\n\nThe first two dimensions (M, N) define the rows and columns of the image.\n\nThis parameter can only be passed positionally.\n\nX and Y are used to specify the coordinates of the quadrilaterals. There are\ndifferent ways to do this:\n\nUse tuples `X=(xmin, xmax)` and `Y=(ymin, ymax)` to define a uniform\nrectangular grid.\n\nThe tuples define the outer edges of the grid. All individual quadrilaterals\nwill be of the same size. This is the fastest version.\n\nUse 1D arrays X, Y to specify a non-uniform rectangular grid.\n\nIn this case X and Y have to be monotonic 1D arrays of length N+1 and M+1,\nspecifying the x and y boundaries of the cells.\n\nThe speed is intermediate. Note: The grid is checked, and if found to be\nuniform the fast version is used.\n\nUse 2D arrays X, Y if you need an arbitrary quadrilateral grid (i.e. if the\nquadrilaterals are not rectangular).\n\nIn this case X and Y are 2D arrays with shape (M + 1, N + 1), specifying the x\nand y coordinates of the corners of the colored quadrilaterals.\n\nThis is the most general, but the slowest to render. It may produce faster and\nmore compact output using ps, pdf, and svg backends, however.\n\nThese arguments can only be passed positionally.\n\nA Colormap instance or registered colormap name. The colormap maps the C\nvalues to colors.\n\nThe Normalize instance scales the data values to the canonical colormap range\n[0, 1] for mapping to colors. By default, the data range is mapped to the\ncolorbar range using linear scaling.\n\nThe colorbar range. If None, suitable min/max values are automatically chosen\nby the `Normalize` instance (defaults to the respective min/max values of C in\ncase of the default linear scaling). It is an error to use vmin/vmax when norm\nis given.\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nWhether to snap the mesh to pixel boundaries.\n\nThe return type depends on the type of grid:\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nSupported additional parameters depend on the type of grid. See return types\nof image for further description.\n\nPcolor Demo\n\n"}, {"name": "axes.Axes.pcolormesh", "path": "_as_gen/matplotlib.axes.axes.pcolormesh", "type": "axes", "text": "\nCreate a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature:\n\nX and Y can be used to specify the corners of the quadrilaterals.\n\nHint\n\n`pcolormesh` is similar to `pcolor`. It is much faster and preferred in most\ncases. For a detailed discussion on the differences see Differences between\npcolor() and pcolormesh().\n\nThe color-mapped values.\n\nThe coordinates of the corners of quadrilaterals of a pcolormesh:\n\nNote that the column index corresponds to the x-coordinate, and the row index\ncorresponds to y. For details, see the Notes section below.\n\nIf `shading='flat'` the dimensions of X and Y should be one greater than those\nof C, and the quadrilateral is colored due to the value at `C[i, j]`. If X, Y\nand C have equal dimensions, a warning will be raised and the last row and\ncolumn of C will be ignored.\n\nIf `shading='nearest'` or `'gouraud'`, the dimensions of X and Y should be the\nsame as those of C (if not, a ValueError will be raised). For `'nearest'` the\ncolor `C[i, j]` is centered on `(X[i, j], Y[i, j])`. For `'gouraud'`, a smooth\ninterpolation is caried out between the quadrilateral corners.\n\nIf X and/or Y are 1-D arrays or column vectors they will be expanded as needed\ninto the appropriate 2D arrays, making a rectangular grid.\n\nA Colormap instance or registered colormap name. The colormap maps the C\nvalues to colors.\n\nThe Normalize instance scales the data values to the canonical colormap range\n[0, 1] for mapping to colors. By default, the data range is mapped to the\ncolorbar range using linear scaling.\n\nThe colorbar range. If None, suitable min/max values are automatically chosen\nby the `Normalize` instance (defaults to the respective min/max values of C in\ncase of the default linear scaling). It is an error to use vmin/vmax when norm\nis given.\n\nThe color of the edges. Defaults to 'none'. Possible values:\n\nThe singular form edgecolor works as an alias.\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nThe fill style for the quadrilateral; defaults to 'flat' or\n`rcParams[\"pcolor.shading\"]` (default: `'auto'`). Possible values:\n\nSee pcolormesh grids and shading for more description.\n\nWhether to snap the mesh to pixel boundaries.\n\nRasterize the pcolormesh when drawing vector graphics. This can speed up\nrendering and produce smaller files for large data sets. See also\nRasterization for vector graphics.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nAdditionally, the following arguments are allowed. They are passed along to\nthe `QuadMesh` constructor:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\narray-like or scalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa or antialiaseds\n\nbool or list of bools\n\n`array`\n\n(M, N) array-like or M*N array-like\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clim`\n\n(vmin: float, vmax: float)\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`cmap`\n\n`Colormap` or str or None\n\n`color`\n\ncolor or list of rgba tuples\n\n`edgecolor` or ec or edgecolors\n\ncolor or list of colors or 'face'\n\n`facecolor` or facecolors or fc\n\ncolor or list of colors\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or dashes or linestyles or ls\n\nstr or tuple or list thereof\n\n`linewidth` or linewidths or lw\n\nfloat or list of floats\n\n`norm`\n\n`Normalize` or None\n\n`offset_transform`\n\n`Transform`\n\n`offsets`\n\n(N, 2) or (2,) array-like\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`urls`\n\nlist of str or None\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nSee also\n\nAn alternative implementation with slightly different features. For a detailed\ndiscussion on the differences see Differences between pcolor() and\npcolormesh().\n\nIf X and Y are each equidistant, `imshow` can be a faster alternative.\n\nMasked arrays\n\nC may be a masked array. If `C[i, j]` is masked, the corresponding\nquadrilateral will be transparent. Masking of X and Y is not supported. Use\n`pcolor` if you need this functionality.\n\nGrid orientation\n\nThe grid orientation follows the standard matrix convention: An array C with\nshape (nrows, ncolumns) is plotted with the column number as X and the row\nnumber as Y.\n\nDifferences between pcolor() and pcolormesh()\n\nBoth methods are used to create a pseudocolor plot of a 2D array using\nquadrilaterals.\n\nThe main difference lies in the created object and internal data handling:\nWhile `pcolor` returns a `PolyCollection`, `pcolormesh` returns a `QuadMesh`.\nThe latter is more specialized for the given purpose and thus is faster. It\nshould almost always be preferred.\n\nThere is also a slight difference in the handling of masked arrays. Both\n`pcolor` and `pcolormesh` support masked arrays for C. However, only `pcolor`\nsupports masked arrays for X and Y. The reason lies in the internal handling\nof the masked values. `pcolor` leaves out the respective polygons from the\nPolyCollection. `pcolormesh` sets the facecolor of the masked elements to\ntransparent. You can see the difference when using edgecolors. While all edges\nare drawn irrespective of masking in a QuadMesh, the edge between two adjacent\nmasked quadrilaterals in `pcolor` is not drawn as the corresponding polygons\ndo not exist in the PolyCollection.\n\nAnother difference is the support of Gouraud shading in `pcolormesh`, which is\nnot available with `pcolor`.\n\nPcolor Demo\n\npcolormesh grids and shading\n\npcolormesh\n\nPlacing Colorbars\n\nFigure subfigures\n\nRasterization for vector graphics\n\nConstrained Layout Guide\n\nColormap Normalization\n\npcolormesh(X, Y, Z)\n\n"}, {"name": "axes.Axes.phase_spectrum", "path": "_as_gen/matplotlib.axes.axes.phase_spectrum", "type": "axes", "text": "\nPlot the phase spectrum.\n\nCompute the phase spectrum (unwrapped angle spectrum) of x. Data is padded to\na length of pad_to and the windowing function window is applied to the signal.\n\nArray or sequence containing the data\n\nThe sampling frequency (samples per time unit). It is used to calculate the\nFourier frequencies, freqs, in cycles per time unit.\n\nA function or a vector of length NFFT. To create window vectors see\n`window_hanning`, `window_none`, `numpy.blackman`, `numpy.hamming`,\n`numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc. If a\nfunction is passed as the argument, it must take a data segment as an argument\nand return the windowed version of the segment.\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data\nand two-sided for complex data. 'onesided' forces the return of a one-sided\nspectrum, while 'twosided' forces two-sided.\n\nThe number of points to which the data segment is padded when performing the\nFFT. While not increasing the actual resolution of the spectrum (the minimum\ndistance between resolvable peaks), this can give more points in the plot,\nallowing for more detail. This corresponds to the n parameter in the call to\nfft(). The default is None, which sets pad_to equal to the length of the input\nsignal (i.e. no padding).\n\nThe center frequency of x, which offsets the x extents of the plot to reflect\nthe frequency range used when a signal is acquired and then filtered and\ndownsampled to baseband.\n\nThe values for the phase spectrum in radians (real valued).\n\nThe frequencies corresponding to the elements in spectrum.\n\nThe line created by this function.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx\n\nKeyword arguments control the `Line2D` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSee also\n\nPlots the magnitudes of the corresponding frequencies.\n\nPlots the wrapped version of this function.\n\nCan plot the phase spectrum of segments within the signal in a colormap.\n\n"}, {"name": "axes.Axes.pie", "path": "_as_gen/matplotlib.axes.axes.pie", "type": "axes", "text": "\nPlot a pie chart.\n\nMake a pie chart of array x. The fractional area of each wedge is given by\n`x/sum(x)`. If `sum(x) < 1`, then the values of x give the fractional area\ndirectly and the array will not be normalized. The resulting pie will have an\nempty wedge of size `1 - sum(x)`.\n\nThe wedges are plotted counterclockwise, by default starting from the x-axis.\n\nThe wedge sizes.\n\nIf not None, is a `len(x)` array which specifies the fraction of the radius\nwith which to offset each wedge.\n\nA sequence of strings providing the labels for each wedge\n\nA sequence of colors through which the pie chart will cycle. If None, will use\nthe colors in the currently active cycle.\n\nIf not None, is a string or function used to label the wedges with their\nnumeric value. The label will be placed inside the wedge. If it is a format\nstring, the label will be `fmt % pct`. If it is a function, it will be called.\n\nThe ratio between the center of each pie slice and the start of the text\ngenerated by autopct. Ignored if autopct is None.\n\nDraw a shadow beneath the pie.\n\nWhen True, always make a full pie by normalizing x so that `sum(x) == 1`.\nFalse makes a partial pie if `sum(x) <= 1` and raises a `ValueError` for\n`sum(x) > 1`.\n\nThe radial distance at which the pie labels are drawn. If set to `None`, label\nare not drawn, but are stored for use in `legend()`\n\nThe angle by which the start of the pie is rotated, counterclockwise from the\nx-axis.\n\nThe radius of the pie.\n\nSpecify fractions direction, clockwise or counterclockwise.\n\nDict of arguments passed to the wedge objects making the pie. For example, you\ncan pass in `wedgeprops = {'linewidth': 3}` to set the width of the wedge\nborder lines equal to 3. For more details, look at the doc/arguments of the\nwedge object. By default `clip_on=False`.\n\nDict of arguments to pass to the text objects.\n\nThe coordinates of the center of the chart.\n\nPlot Axes frame with the chart if true.\n\nRotate each label to the angle of the corresponding slice if true.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, explode, labels, colors\n\nA sequence of `matplotlib.patches.Wedge` instances\n\nA list of the label `Text` instances.\n\nA list of `Text` instances for the numeric labels. This will only be returned\nif the parameter autopct is not None.\n\nThe pie chart will probably look best if the figure and Axes are square, or\nthe Axes aspect is equal. This method sets the aspect ratio of the axis to\n\"equal\". The Axes aspect ratio can be controlled with `Axes.set_aspect`.\n\nBasic pie chart\n\nBar of pie\n\nNested pie charts\n\nLabeling a pie and a donut\n\nSVG Filter Pie\n\npie(x)\n\n"}, {"name": "axes.Axes.plot", "path": "_as_gen/matplotlib.axes.axes.plot", "type": "axes", "text": "\nPlot y versus x as lines and/or markers.\n\nCall signatures:\n\nThe coordinates of the points or line nodes are given by x, y.\n\nThe optional parameter fmt is a convenient way for defining basic formatting\nlike color, marker and linestyle. It's a shortcut string notation described in\nthe Notes section below.\n\nYou can use `Line2D` properties as keyword arguments for more control on the\nappearance. Line properties and fmt can be mixed. The following two calls\nyield identical results:\n\nWhen conflicting with fmt, keyword arguments take precedence.\n\nPlotting labelled data\n\nThere's a convenient way for plotting objects with labelled data (i.e. data\nthat can be accessed by index `obj['y']`). Instead of giving the data in x and\ny, you can provide the object in the data parameter and just give the labels\nfor x and y:\n\nAll indexable objects are supported. This could e.g. be a `dict`, a\n`pandas.DataFrame` or a structured numpy array.\n\nPlotting multiple sets of data\n\nThere are various ways to plot multiple sets of data.\n\nThe most straight forward way is just to call `plot` multiple times. Example:\n\nIf x and/or y are 2D arrays a separate data set will be drawn for every\ncolumn. If both x and y are 2D, they must have the same shape. If only one of\nthem is 2D with shape (N, m) the other must have length N and will be used for\nevery data set m.\n\nExample:\n\nis equivalent to:\n\nThe third way is to specify multiple sets of [x], y, [fmt] groups:\n\nIn this case, any additional keyword argument applies to all datasets. Also\nthis syntax cannot be combined with the data parameter.\n\nBy default, each line is assigned a different style specified by a 'style\ncycle'. The fmt and line property parameters are only necessary if you want\nexplicit deviations from these defaults. Alternatively, you can also change\nthe style cycle using `rcParams[\"axes.prop_cycle\"]` (default: `cycler('color',\n['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2',\n'#7f7f7f', '#bcbd22', '#17becf'])`).\n\nThe horizontal / vertical coordinates of the data points. x values are\noptional and default to `range(len(y))`.\n\nCommonly, these parameters are 1D arrays.\n\nThey can also be scalars, or two-dimensional (in that case, the columns\nrepresent separate data sets).\n\nThese arguments cannot be passed as keywords.\n\nA format string, e.g. 'ro' for red circles. See the Notes section for a full\ndescription of the format strings.\n\nFormat strings are just an abbreviation for quickly setting basic line\nproperties. All of these and more can also be controlled by keyword arguments.\n\nThis argument cannot be passed as keyword.\n\nAn object with labelled data. If given, provide the label names to plot in x\nand y.\n\nNote\n\nTechnically there's a slight ambiguity in calls where the second label is a\nvalid fmt. `plot('n', 'o', data=obj)` could be `plt(x, y)` or `plt(y, fmt)`.\nIn such cases, the former interpretation is chosen, but a warning is issued.\nYou may suppress the warning by adding an empty format string `plot('n', 'o',\n'', data=obj)`.\n\nA list of lines representing the plotted data.\n\nThese parameters determine if the view limits are adapted to the data limits.\nThe values are passed on to `autoscale_view`.\n\nkwargs are used to specify properties like a line label (for auto legends),\nlinewidth, antialiasing, marker face color. Example:\n\nIf you specify multiple lines with one plot call, the kwargs apply to all\nthose lines. In case the label object is iterable, each element is used as\nlabels for each set of data.\n\nHere is a list of available `Line2D` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSee also\n\nXY scatter plot with markers of varying size and/or color ( sometimes also\ncalled bubble chart).\n\nFormat Strings\n\nA format string consists of a part for color, marker and line:\n\nEach of them is optional. If not provided, the value from the style cycle is\nused. Exception: If `line` is given, but no `marker`, the data will be a line\nwithout markers.\n\nOther combinations such as `[color][marker][line]` are also supported, but\nnote that their parsing may be ambiguous.\n\nMarkers\n\ncharacter\n\ndescription\n\n`'.'`\n\npoint marker\n\n`','`\n\npixel marker\n\n`'o'`\n\ncircle marker\n\n`'v'`\n\ntriangle_down marker\n\n`'^'`\n\ntriangle_up marker\n\n`'<'`\n\ntriangle_left marker\n\n`'>'`\n\ntriangle_right marker\n\n`'1'`\n\ntri_down marker\n\n`'2'`\n\ntri_up marker\n\n`'3'`\n\ntri_left marker\n\n`'4'`\n\ntri_right marker\n\n`'8'`\n\noctagon marker\n\n`'s'`\n\nsquare marker\n\n`'p'`\n\npentagon marker\n\n`'P'`\n\nplus (filled) marker\n\n`'*'`\n\nstar marker\n\n`'h'`\n\nhexagon1 marker\n\n`'H'`\n\nhexagon2 marker\n\n`'+'`\n\nplus marker\n\n`'x'`\n\nx marker\n\n`'X'`\n\nx (filled) marker\n\n`'D'`\n\ndiamond marker\n\n`'d'`\n\nthin_diamond marker\n\n`'|'`\n\nvline marker\n\n`'_'`\n\nhline marker\n\nLine Styles\n\ncharacter\n\ndescription\n\n`'-'`\n\nsolid line style\n\n`'--'`\n\ndashed line style\n\n`'-.'`\n\ndash-dot line style\n\n`':'`\n\ndotted line style\n\nExample format strings:\n\nColors\n\nThe supported color abbreviations are the single letter codes\n\ncharacter\n\ncolor\n\n`'b'`\n\nblue\n\n`'g'`\n\ngreen\n\n`'r'`\n\nred\n\n`'c'`\n\ncyan\n\n`'m'`\n\nmagenta\n\n`'y'`\n\nyellow\n\n`'k'`\n\nblack\n\n`'w'`\n\nwhite\n\nand the `'CN'` colors that index into the default property cycle.\n\nIf the color is the only part of the format string, you can additionally use\nany `matplotlib.colors` spec, e.g. full names (`'green'`) or hex strings\n(`'#008000'`).\n\nPlotting categorical variables\n\nCSD Demo\n\nCurve with error band\n\nEventCollection Demo\n\nFill Between and Alpha\n\nFilling the area between lines\n\nFill Betweenx Demo\n\nCustomizing dashed line styles\n\nLines with a ticked patheffect\n\nMarker reference\n\nMarkevery Demo\n\nprop_cycle property markevery in rcParams\n\nPsd Demo\n\nSimple Plot\n\nUsing span_where\n\nCreating a timeline with lines, dates, and text\n\nhlines and vlines\n\nContour Corner Mask\n\nContour plot of irregularly spaced data\n\npcolormesh grids and shading\n\nStreamplot\n\nSpectrogram Demo\n\nWatermark image\n\nAligning Labels\n\nAxes box aspect\n\nAxes Demo\n\nControlling view limits using margins and sticky_edges\n\nAxes Props\n\naxhspan Demo\n\nBroken Axis\n\nResizing axes with constrained layout\n\nResizing axes with tight layout\n\nFigure labels: suptitle, supxlabel, supylabel\n\nInvert Axes\n\nSecondary Axis\n\nSharing axis limits and views\n\nFigure subfigures\n\nMultiple subplots\n\nCreating multiple subplots using plt.subplots\n\nPlots with different scales\n\nBoxplots\n\nUsing histograms to plot a cumulative distribution\n\nSome features of the histogram (hist) function\n\nPolar plot\n\nPolar Legend\n\nUsing accented text in matplotlib\n\nScale invariant angle label\n\nAnnotating Plots\n\nComposing Custom Legends\n\nDate tick labels\n\nCustom tick formatter for time series\n\nAnnotationBbox demo\n\nLabeling ticks using engineering notation\n\nAnnotation arrow style reference\n\nLegend using pre-defined labels\n\nLegend Demo\n\nMathtext\n\nMath fontfamily\n\nMultiline\n\nRendering math equations using TeX\n\nText Rotation Relative To Line\n\nTitle positioning\n\nText watermark\n\nAnnotate Transform\n\nAnnotating a plot\n\nAnnotation Polar\n\nProgrammatically controlling subplot adjustment\n\nDollar Ticks\n\nSimple axes labels\n\nText Commands\n\nColor Demo\n\nColor by y-value\n\nPathPatch object\n\nBezier Curve\n\nDark background style sheet\n\nFiveThirtyEight style sheet\n\nggplot style sheet\n\nAxes with a fixed physical size\n\nParasite Simple\n\nSimple Axisline4\n\nAxis line styles\n\nParasite Axes demo\n\nParasite axis demo\n\nCustom spines with axisartist\n\nSimple Axisline\n\nAnatomy of a figure\n\nBachelor's degrees by gender\n\nIntegral as the area under a curve\n\nXKCD\n\nDecay\n\nThe Bayes update\n\nThe double pendulum problem\n\nAnimated 3D random walk\n\nAnimated line plot\n\nMATPLOTLIB UNCHAINED\n\nMouse move and click events\n\nData Browser\n\nKeypress event\n\nLegend Picking\n\nLooking Glass\n\nPath Editor\n\nPick Event Demo2\n\nResampling Data\n\nTimers\n\nFrontpage histogram example\n\nFrontpage plot example\n\nChanging colors of lines intersecting a box\n\nCross hair cursor\n\nCustom projection\n\nPatheffect Demo\n\nPythonic Matplotlib\n\nSVG Filter Line\n\nTickedStroke patheffect\n\nZorder Demo\n\nPlot 2D data on 3D plot\n\n3D box surface plot\n\nParametric Curve\n\nLorenz Attractor\n\n2D and 3D Axes in same Figure\n\nLoglog Aspect\n\nScales\n\nSymlog Demo\n\nAnscombe's quartet\n\nRadar chart (aka spider or star chart)\n\nCentered spines with arrows\n\nMultiple Yaxis With Spines\n\nSpine Placement\n\nSpines\n\nCustom spine bounds\n\nCentering labels between ticks\n\nFormatting date ticks using ConciseDateFormatter\n\nDate Demo Convert\n\nDate Index Formatter\n\nDate Precision and Epochs\n\nMajor and minor ticks\n\nThe default tick formatter\n\nSet default y-axis tick labels on the right\n\nSetting tick labels from a list of values\n\nSet default x-axis tick labels on the top\n\nEvans test\n\nCanvasAgg demo\n\nAnnotate Explain\n\nConnect Simple01\n\nConnection styles for annotations\n\nNested GridSpecs\n\nPgf Fonts\n\nPgf Texsystem\n\nSimple Annotate01\n\nSimple Legend01\n\nSimple Legend02\n\nAnnotated Cursor\n\nCheck Buttons\n\nCursor\n\nMulticursor\n\nRadio Buttons\n\nRectangle and ellipse selectors\n\nSpan Selector\n\nTextbox\n\nBasic Usage\n\nArtist tutorial\n\nLegend guide\n\nStyling with cycler\n\nConstrained Layout Guide\n\nTight Layout guide\n\nArranging multiple Axes in a Figure\n\nAutoscaling\n\nFaster rendering by using blitting\n\nPath Tutorial\n\nTransformations Tutorial\n\nSpecifying Colors\n\nText in Matplotlib Plots\n\nplot(x, y)\n\nfill_between(x, y1, y2)\n\ntricontour(x, y, z)\n\ntricontourf(x, y, z)\n\ntripcolor(x, y, z)\n\n"}, {"name": "axes.Axes.plot_date", "path": "_as_gen/matplotlib.axes.axes.plot_date", "type": "axes", "text": "\nPlot coercing the axis to treat floats as dates.\n\nDiscouraged\n\nThis method exists for historic reasons and will be deprecated in the future.\n\nSimilar to `plot`, this plots y vs. x as lines or markers. However, the axis\nlabels are formatted as dates depending on xdate and ydate. Note that `plot`\nwill work with `datetime` and `numpy.datetime64` objects without resorting to\nthis method.\n\nThe coordinates of the data points. If xdate or ydate is True, the respective\nvalues x or y are interpreted as Matplotlib dates.\n\nThe plot format string. For details, see the corresponding parameter in\n`plot`.\n\nThe time zone to use in labeling dates.\n\nIf True, the x-axis will be interpreted as Matplotlib dates.\n\nIf True, the y-axis will be interpreted as Matplotlib dates.\n\nObjects representing the plotted data.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, y\n\nKeyword arguments control the `Line2D` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSee also\n\nHelper functions on dates.\n\nConvert dates to num.\n\nConvert num to dates.\n\nCreate an equally spaced sequence of dates.\n\nIf you are using custom date tickers and formatters, it may be necessary to\nset the formatters/locators after the call to `plot_date`. `plot_date` will\nset the default tick locator to `AutoDateLocator` (if the tick locator is not\nalready set to a `DateLocator` instance) and the default tick formatter to\n`AutoDateFormatter` (if the tick formatter is not already set to a\n`DateFormatter` instance).\n\n"}, {"name": "axes.Axes.psd", "path": "_as_gen/matplotlib.axes.axes.psd", "type": "axes", "text": "\nPlot the power spectral density.\n\nThe power spectral density \\\\(P_{xx}\\\\) by Welch's average periodogram method.\nThe vector x is divided into NFFT length segments. Each segment is detrended\nby function detrend and windowed by function window. noverlap gives the length\nof the overlap between segments. The \\\\(|\\mathrm{fft}(i)|^2\\\\) of each segment\n\\\\(i\\\\) are averaged to compute \\\\(P_{xx}\\\\), with a scaling to correct for\npower loss due to windowing.\n\nIf len(x) < NFFT, it will be zero padded to NFFT.\n\nArray or sequence containing the data\n\nThe sampling frequency (samples per time unit). It is used to calculate the\nFourier frequencies, freqs, in cycles per time unit.\n\nA function or a vector of length NFFT. To create window vectors see\n`window_hanning`, `window_none`, `numpy.blackman`, `numpy.hamming`,\n`numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc. If a\nfunction is passed as the argument, it must take a data segment as an argument\nand return the windowed version of the segment.\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data\nand two-sided for complex data. 'onesided' forces the return of a one-sided\nspectrum, while 'twosided' forces two-sided.\n\nThe number of points to which the data segment is padded when performing the\nFFT. This can be different from NFFT, which specifies the number of data\npoints used. While not increasing the actual resolution of the spectrum (the\nminimum distance between resolvable peaks), this can give more points in the\nplot, allowing for more detail. This corresponds to the n parameter in the\ncall to fft(). The default is None, which sets pad_to equal to NFFT\n\nThe number of data points used in each block for the FFT. A power 2 is most\nefficient. This should NOT be used to get zero padding, or the scaling of the\nresult will be incorrect; use pad_to for this instead.\n\nThe function applied to each segment before fft-ing, designed to remove the\nmean or linear trend. Unlike in MATLAB, where the detrend parameter is a\nvector, in Matplotlib it is a function. The `mlab` module defines\n`detrend_none`, `detrend_mean`, and `detrend_linear`, but you can use a custom\nfunction as well. You can also use a string to choose one of the functions:\n'none' calls `detrend_none`. 'mean' calls `detrend_mean`. 'linear' calls\n`detrend_linear`.\n\nWhether the resulting density values should be scaled by the scaling\nfrequency, which gives density in units of Hz^-1. This allows for integration\nover the returned frequency values. The default is True for MATLAB\ncompatibility.\n\nThe number of points of overlap between segments.\n\nThe center frequency of x, which offsets the x extents of the plot to reflect\nthe frequency range used when a signal is acquired and then filtered and\ndownsampled to baseband.\n\nWhether to include the line object plotted in the returned values.\n\nThe values for the power spectrum \\\\(P_{xx}\\\\) before scaling (real valued).\n\nThe frequencies corresponding to the elements in Pxx.\n\nThe line created by this function. Only returned if return_line is True.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx\n\nKeyword arguments control the `Line2D` properties:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSee also\n\nDiffers in the default overlap; in not returning the mean of the segment\nperiodograms; in returning the times of the segments; and in plotting a\ncolormap instead of a line.\n\nPlots the magnitude spectrum.\n\nPlots the spectral density between two signals.\n\nFor plotting, the power is plotted as \\\\(10\\log_{10}(P_{xx})\\\\) for decibels,\nthough Pxx itself is returned.\n\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures, John\nWiley & Sons (1986)\n\nPsd Demo\n\n"}, {"name": "axes.Axes.quiver", "path": "_as_gen/matplotlib.axes.axes.quiver", "type": "axes", "text": "\nPlot a 2D field of arrows.\n\nCall signature:\n\nX, Y define the arrow locations, U, V define the arrow directions, and C\noptionally sets the color.\n\nEach arrow is internally represented by a filled polygon with a default edge\nlinewidth of 0. As a result, an arrow is rather a filled area, not a line with\na head, and `PolyCollection` properties like linewidth, linestyle, facecolor,\netc. act accordingly.\n\nArrow size\n\nThe default settings auto-scales the length of the arrows to a reasonable\nsize. To change this behavior see the scale and scale_units parameters.\n\nArrow shape\n\nThe defaults give a slightly swept-back arrow; to make the head a triangle,\nmake headaxislength the same as headlength. To make the arrow more pointed,\nreduce headwidth or increase headlength and headaxislength. To make the head\nsmaller relative to the shaft, scale down all the head parameters. You will\nprobably do best to leave minshaft alone.\n\nArrow outline\n\nlinewidths and edgecolors can be used to customize the arrow outlines.\n\nThe x and y coordinates of the arrow locations.\n\nIf not given, they will be generated as a uniform integer meshgrid based on\nthe dimensions of U and V.\n\nIf X and Y are 1D but U, V are 2D, X, Y are expanded to 2D using `X, Y =\nnp.meshgrid(X, Y)`. In this case `len(X)` and `len(Y)` must match the column\nand row dimensions of U and V.\n\nThe x and y direction components of the arrow vectors.\n\nThey must have the same number of elements, matching the number of arrow\nlocations. U and V may be masked. Only locations unmasked in U, V, and C will\nbe drawn.\n\nNumeric data that defines the arrow colors by colormapping via norm and cmap.\n\nThis does not support explicit colors. If you want to set colors directly, use\ncolor instead. The size of C must match the number of arrow locations.\n\nThe arrow dimensions (except for length) are measured in multiples of this\nunit.\n\nThe following values are supported:\n\nThe arrows scale differently depending on the units. For 'x' or 'y', the\narrows get larger as one zooms in; for other units, the arrow size is\nindependent of the zoom state. For 'width or 'height', the arrow size\nincreases with the width and height of the axes, respectively, when the window\nis resized; for 'dots' or 'inches', resizing does not change the arrows.\n\nMethod for determining the angle of the arrows.\n\n'uv': The arrow axis aspect ratio is 1 so that if U == V the orientation of\nthe arrow on the plot is 45 degrees counter-clockwise from the horizontal axis\n(positive to the right).\n\nUse this if the arrows symbolize a quantity that is not based on X, Y data\ncoordinates.\n\nAlternatively, arbitrary angles may be specified explicitly as an array of\nvalues in degrees, counter-clockwise from the horizontal axis.\n\nIn this case U, V is only used to determine the length of the arrows.\n\nNote: inverting a data axis will correspondingly invert the arrows only with\n`angles='xy'`.\n\nNumber of data units per arrow length unit, e.g., m/s per plot width; a\nsmaller scale parameter makes the arrow longer. Default is None.\n\nIf None, a simple autoscaling algorithm is used, based on the average vector\nlength and the number of vectors. The arrow length unit is given by the\nscale_units parameter.\n\nIf the scale kwarg is None, the arrow length unit. Default is None.\n\ne.g. scale_units is 'inches', scale is 2.0, and `(u, v) = (1, 0)`, then the\nvector will be 0.5 inches long.\n\nIf scale_units is 'width' or 'height', then the vector will be half the\nwidth/height of the axes.\n\nIf scale_units is 'x' then the vector will be 0.5 x-axis units. To plot\nvectors in the x-y plane, with u and v having the same units as x and y, use\n`angles='xy', scale_units='xy', scale=1`.\n\nShaft width in arrow units; default depends on choice of units, above, and\nnumber of vectors; a typical starting value is about 0.005 times the width of\nthe plot.\n\nHead width as multiple of shaft width.\n\nHead length as multiple of shaft width.\n\nHead length at shaft intersection.\n\nLength below which arrow scales, in units of head length. Do not set this to\nless than 1, or small arrows will look terrible!\n\nMinimum length as a multiple of shaft width; if an arrow length is less than\nthis, plot a dot (hexagon) of this diameter instead.\n\nThe part of the arrow that is anchored to the X, Y grid. The arrow rotates\nabout this point.\n\n'mid' is a synonym for 'middle'.\n\nExplicit color(s) for the arrows. If C has been set, color has no effect.\n\nThis is a synonym for the `PolyCollection` facecolor parameter.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nAll other keyword arguments are passed on to `PolyCollection`:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\narray-like or scalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa or antialiaseds\n\nbool or list of bools\n\n`array`\n\narray-like or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clim`\n\n(vmin: float, vmax: float)\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`cmap`\n\n`Colormap` or str or None\n\n`color`\n\ncolor or list of rgba tuples\n\n`edgecolor` or ec or edgecolors\n\ncolor or list of colors or 'face'\n\n`facecolor` or facecolors or fc\n\ncolor or list of colors\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or dashes or linestyles or ls\n\nstr or tuple or list thereof\n\n`linewidth` or linewidths or lw\n\nfloat or list of floats\n\n`norm`\n\n`Normalize` or None\n\n`offset_transform`\n\n`Transform`\n\n`offsets`\n\n(N, 2) or (2,) array-like\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`paths`\n\nlist of array-like\n\n`picker`\n\nNone or bool or float or callable\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sizes`\n\nndarray or None\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`urls`\n\nlist of str or None\n\n`verts`\n\nlist of array-like\n\n`verts_and_codes`\n\nunknown\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nSee also\n\nAdd a key to a quiver plot.\n\nAdvanced quiver and quiverkey functions\n\nQuiver Simple Demo\n\nTrigradient Demo\n\n3D quiver plot\n\nquiver(X, Y, U, V)\n\n"}, {"name": "axes.Axes.quiverkey", "path": "_as_gen/matplotlib.axes.axes.quiverkey", "type": "axes", "text": "\nAdd a key to a quiver plot.\n\nThe positioning of the key depends on X, Y, coordinates, and labelpos. If\nlabelpos is 'N' or 'S', X, Y give the position of the middle of the key arrow.\nIf labelpos is 'E', X, Y positions the head, and if labelpos is 'W', X, Y\npositions the tail; in either of these two cases, X, Y is somewhere in the\nmiddle of the arrow+label key object.\n\nA `Quiver` object as returned by a call to `quiver()`.\n\nThe location of the key.\n\nThe length of the key.\n\nThe key label (e.g., length and units of the key).\n\nThe angle of the key arrow, in degrees anti-clockwise from the x-axis.\n\nCoordinate system and units for X, Y: 'axes' and 'figure' are normalized\ncoordinate systems with (0, 0) in the lower left and (1, 1) in the upper\nright; 'data' are the axes data coordinates (used for the locations of the\nvectors in the quiver plot itself); 'inches' is position in the figure in\ninches, with (0, 0) at the lower left corner.\n\nOverrides face and edge colors from Q.\n\nPosition the label above, below, to the right, to the left of the arrow,\nrespectively.\n\nDistance in inches between the arrow and the label.\n\nLabel color.\n\nA dictionary with keyword arguments accepted by the `FontProperties`\ninitializer: family, style, variant, size, weight.\n\nAny additional keyword arguments are used to override vector properties taken\nfrom Q.\n\nAdvanced quiver and quiverkey functions\n\nQuiver Simple Demo\n\n"}, {"name": "axes.Axes.redraw_in_frame", "path": "_as_gen/matplotlib.axes.axes.redraw_in_frame", "type": "axes", "text": "\nEfficiently redraw Axes data, but not axis ticks, labels, etc.\n\nThis method can only be used after an initial draw which caches the renderer.\n\n"}, {"name": "axes.Axes.relim", "path": "_as_gen/matplotlib.axes.axes.relim", "type": "axes", "text": "\nRecompute the data limits based on current artists.\n\nAt present, `Collection` instances are not supported.\n\nWhether to exclude invisible artists.\n\nPacked-bubble chart\n\nTextbox\n\n"}, {"name": "axes.Axes.remove_callback", "path": "_as_gen/matplotlib.axes.axes.remove_callback", "type": "axes", "text": "\nRemove a callback based on its observer id.\n\nSee also\n\n"}, {"name": "axes.Axes.reset_position", "path": "_as_gen/matplotlib.axes.axes.reset_position", "type": "axes", "text": "\nReset the active position to the original position.\n\nThis resets the a possible position change due to aspect constraints. For an\nexplanation of the positions see `set_position`.\n\n"}, {"name": "axes.Axes.scatter", "path": "_as_gen/matplotlib.axes.axes.scatter", "type": "axes", "text": "\nA scatter plot of y vs. x with varying marker size and/or color.\n\nThe data positions.\n\nThe marker size in points**2. Default is `rcParams['lines.markersize'] ** 2`.\n\nThe marker colors. Possible values:\n\nNote that c should not be a single numeric RGB or RGBA sequence because that\nis indistinguishable from an array of values to be colormapped. If you want to\nspecify the same RGB or RGBA value for all points, use a 2D array with a\nsingle row. Otherwise, value- matching will have precedence in case of a size\nmatching with x and y.\n\nIf you wish to specify a single color for all points prefer the color keyword\nargument.\n\nDefaults to `None`. In that case the marker color is determined by the value\nof color, facecolor or facecolors. In case those are not specified or `None`,\nthe marker color is determined by the next color of the `Axes`' current \"shape\nand fill\" color cycle. This cycle defaults to `rcParams[\"axes.prop_cycle\"]`\n(default: `cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728',\n'#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'])`).\n\nThe marker style. marker can be either an instance of the class or the text\nshorthand for a particular marker. See `matplotlib.markers` for more\ninformation about marker styles.\n\nA `Colormap` instance or registered colormap name. cmap is only used if c is\nan array of floats.\n\nIf c is an array of floats, norm is used to scale the color data, c, in the\nrange 0 to 1, in order to map into the colormap cmap. If None, use the default\n`colors.Normalize`.\n\nvmin and vmax are used in conjunction with the default norm to map the color\narray c to the colormap cmap. If None, the respective min and max of the color\narray is used. It is an error to use vmin/vmax when norm is given.\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nThe linewidth of the marker edges. Note: The default edgecolors is 'face'. You\nmay want to change this as well.\n\nThe edge color of the marker. Possible values:\n\nFor non-filled markers, edgecolors is ignored. Instead, the color is\ndetermined like with 'face', i.e. from c, colors, or facecolors.\n\nWhether to plot points with nonfinite c (i.e. `inf`, `-inf` or `nan`). If\n`True` the points are drawn with the bad colormap color (see\n`Colormap.set_bad`).\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, y, s, linewidths, edgecolors, c, facecolor, facecolors, color\n\nSee also\n\nTo plot scatter plots when markers are identical in size and color.\n\nScatter Custom Symbol\n\nScatter Demo2\n\nScatter plot with histograms\n\nScatter plot with pie chart markers\n\nScatter plots with a legend\n\nAdvanced quiver and quiverkey functions\n\nAxes box aspect\n\nAxis Label Position\n\nPlot a confidence ellipse of a two-dimensional dataset\n\nViolin plot customization\n\nScatter plot on polar axis\n\nLegend Demo\n\nScatter Histogram (Locatable Axes)\n\nmpl_toolkits.axisartist.floating_axes features\n\nRain simulation\n\nZoom Window\n\nPlotting with keywords\n\nZorder Demo\n\nPlot 2D data on 3D plot\n\n3D scatterplot\n\nAutomatically setting tick positions\n\nUnit handling\n\nAnnotate Text Arrow\n\nPolygon Selector\n\nBasic Usage\n\nChoosing Colormaps in Matplotlib\n\nscatter(x, y)\n\n"}, {"name": "axes.Axes.secondary_xaxis", "path": "_as_gen/matplotlib.axes.axes.secondary_xaxis", "type": "axes", "text": "\nAdd a second x-axis to this Axes.\n\nFor example if we want to have a second scale for the data plotted on the\nxaxis.\n\nThe position to put the secondary axis. Strings can be 'top' or 'bottom' for\norientation='x' and 'right' or 'left' for orientation='y'. A float indicates\nthe relative position on the parent axes to put the new axes, 0.0 being the\nbottom (or left) and 1.0 being the top (or right).\n\nIf a 2-tuple of functions, the user specifies the transform function and its\ninverse. i.e. `functions=(lambda x: 2 / x, lambda x: 2 / x)` would be an\nreciprocal transform with a factor of 2.\n\nThe user can also directly supply a subclass of `transforms.Transform` so long\nas it has an inverse.\n\nSee Secondary Axis for examples of making these conversions.\n\nOther miscellaneous axes parameters.\n\nWarning\n\nThis method is experimental as of 3.1, and the API may change.\n\nThe main axis shows frequency, and the secondary axis shows period.\n\n(Source code, png, pdf)\n\nSecondary Axis\n\nBasic Usage\n\n"}, {"name": "axes.Axes.secondary_yaxis", "path": "_as_gen/matplotlib.axes.axes.secondary_yaxis", "type": "axes", "text": "\nAdd a second y-axis to this Axes.\n\nFor example if we want to have a second scale for the data plotted on the\nyaxis.\n\nThe position to put the secondary axis. Strings can be 'top' or 'bottom' for\norientation='x' and 'right' or 'left' for orientation='y'. A float indicates\nthe relative position on the parent axes to put the new axes, 0.0 being the\nbottom (or left) and 1.0 being the top (or right).\n\nIf a 2-tuple of functions, the user specifies the transform function and its\ninverse. i.e. `functions=(lambda x: 2 / x, lambda x: 2 / x)` would be an\nreciprocal transform with a factor of 2.\n\nThe user can also directly supply a subclass of `transforms.Transform` so long\nas it has an inverse.\n\nSee Secondary Axis for examples of making these conversions.\n\nOther miscellaneous axes parameters.\n\nWarning\n\nThis method is experimental as of 3.1, and the API may change.\n\nAdd a secondary Axes that converts from radians to degrees\n\n(Source code, png, pdf)\n\nSecondary Axis\n\n"}, {"name": "axes.Axes.semilogx", "path": "_as_gen/matplotlib.axes.axes.semilogx", "type": "axes", "text": "\nMake a plot with log scaling on the x axis.\n\nCall signatures:\n\nThis is just a thin wrapper around `plot` which additionally changes the\nx-axis to log scaling. All of the concepts and parameters of plot can be used\nhere as well.\n\nThe additional parameters base, subs, and nonpositive control the x-axis\nproperties. They are just forwarded to `Axes.set_xscale`.\n\nBase of the x logarithm.\n\nThe location of the minor xticks. If None, reasonable locations are\nautomatically chosen depending on the number of decades in the plot. See\n`Axes.set_xscale` for details.\n\nNon-positive values in x can be masked as invalid, or clipped to a very small\npositive number.\n\nAll parameters supported by `plot`.\n\nObjects representing the plotted data.\n\nLog Demo\n\nLog Axis\n\nTransformations Tutorial\n\n"}, {"name": "axes.Axes.semilogy", "path": "_as_gen/matplotlib.axes.axes.semilogy", "type": "axes", "text": "\nMake a plot with log scaling on the y axis.\n\nCall signatures:\n\nThis is just a thin wrapper around `plot` which additionally changes the\ny-axis to log scaling. All of the concepts and parameters of plot can be used\nhere as well.\n\nThe additional parameters base, subs, and nonpositive control the y-axis\nproperties. They are just forwarded to `Axes.set_yscale`.\n\nBase of the y logarithm.\n\nThe location of the minor yticks. If None, reasonable locations are\nautomatically chosen depending on the number of decades in the plot. See\n`Axes.set_yscale` for details.\n\nNon-positive values in y can be masked as invalid, or clipped to a very small\npositive number.\n\nAll parameters supported by `plot`.\n\nObjects representing the plotted data.\n\nLog Demo\n\nSkewT-logP diagram: using transforms and custom projections\n\n"}, {"name": "axes.Axes.set", "path": "_as_gen/matplotlib.axes.axes.set", "type": "axes", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nCurve with error band\n\nBar chart with gradients\n\nSimple Plot\n\nCreating a timeline with lines, dates, and text\n\nContour plot of irregularly spaced data\n\nStreamplot\n\nAxes Demo\n\nCreating multiple subplots using plt.subplots\n\nBoxplots\n\nHexagonal binned plot\n\nNested pie charts\n\nAnnotating Plots\n\nArrow Demo\n\nUsetex Baseline Test\n\nText Commands\n\nDrawing fancy boxes\n\nAdding a colorbar to inset axes\n\nInset Locator Demo\n\nAnimated 3D random walk\n\nZoom Window\n\nManual Contour\n\nPlotting with keywords\n\n3D box surface plot\n\nProjecting contour profiles onto a graph\n\nProjecting filled contour onto a graph\n\nGenerate polygons to fill under 3D line graph\n\n3D stem\n\n3D voxel / volumetric plot with rgb colors\n\nLog Demo\n\nAnnotate Explain\n\nConnection styles for annotations\n\nNested GridSpecs\n\nSimple Annotate01\n\nMouse Cursor\n\nThe Lifecycle of a Plot\n\nArranging multiple Axes in a Figure\n\nplot(x, y)\n\nscatter(x, y)\n\nbar(x, height) / barh(y, width)\n\nstem(x, y)\n\nstep(x, y)\n\nfill_between(x, y1, y2)\n\nbarbs(X, Y, U, V)\n\nquiver(X, Y, U, V)\n\nhist(x)\n\nboxplot(X)\n\nerrorbar(x, y, yerr, xerr)\n\nviolinplot(D)\n\neventplot(D)\n\nhist2d(x, y)\n\nhexbin(x, y, C)\n\npie(x)\n\ntricontour(x, y, z)\n\ntricontourf(x, y, z)\n\ntripcolor(x, y, z)\n\ntriplot(x, y)\n\n"}, {"name": "axes.Axes.set_adjustable", "path": "_as_gen/matplotlib.axes.axes.set_adjustable", "type": "axes", "text": "\nSet how the Axes adjusts to achieve the required aspect ratio.\n\nIf 'box', change the physical dimensions of the Axes. If 'datalim', change the\n`x` or `y` data limits.\n\nIf `True`, apply the settings to all shared Axes.\n\nSee also\n\nFor a description of aspect handling.\n\nShared Axes (of which twinned Axes are a special case) impose restrictions on\nhow aspect ratios can be imposed. For twinned Axes, use 'datalim'. For Axes\nthat share both x and y, use 'box'. Otherwise, either 'datalim' or 'box' may\nbe used. These limitations are partly a requirement to avoid over-\nspecification, and partly a result of the particular implementation we are\ncurrently using, in which the adjustments for aspect ratios are done\nsequentially and independently on each Axes as it is drawn.\n\nLoglog Aspect\n\n"}, {"name": "axes.Axes.set_anchor", "path": "_as_gen/matplotlib.axes.axes.set_anchor", "type": "axes", "text": "\nDefine the anchor location.\n\nThe actual drawing area (active position) of the Axes may be smaller than the\nBbox (original position) when a fixed aspect is required. The anchor defines\nwhere the drawing area will be located within the available space.\n\nEither an (x, y) pair of relative coordinates (0 is left or bottom, 1 is right\nor top), 'C' (center), or a cardinal direction ('SW', southwest, is bottom\nleft, etc.). str inputs are shorthands for (x, y) coordinates, as shown in the\nfollowing table:\n\n'NW' (0.0, 1.0)\n\n'N' (0.5, 1.0)\n\n'NE' (1.0, 1.0)\n\n'W' (0.0, 0.5)\n\n'C' (0.5, 0.5)\n\n'E' (1.0, 0.5)\n\n'SW' (0.0, 0.0)\n\n'S' (0.5, 0.0)\n\n'SE' (1.0, 0.0)\n\nIf `True`, apply the settings to all shared Axes.\n\nSee also\n\nfor a description of aspect handling.\n\n"}, {"name": "axes.Axes.set_aspect", "path": "_as_gen/matplotlib.axes.axes.set_aspect", "type": "axes", "text": "\nSet the aspect ratio of the axes scaling, i.e. y/x-scale.\n\nPossible values:\n\nIf not `None`, this defines which parameter will be adjusted to meet the\nrequired aspect. See `set_adjustable` for further details.\n\nIf not `None`, this defines where the Axes will be drawn if there is extra\nspace due to aspect constraints. The most common way to to specify the anchor\nare abbreviations of cardinal directions:\n\nvalue\n\ndescription\n\n'C'\n\ncentered\n\n'SW'\n\nlower left corner\n\n'S'\n\nmiddle of bottom edge\n\n'SE'\n\nlower right corner\n\netc.\n\nSee `set_anchor` for further details.\n\nIf `True`, apply the settings to all shared Axes.\n\nSee also\n\nSet how the Axes adjusts to achieve the required aspect ratio.\n\nSet the position in case of extra space.\n\nBar chart with gradients\n\nStreamplot\n\nTricontour Demo\n\nTricontour Smooth Delaunay\n\nTricontour Smooth User\n\nTrigradient Demo\n\nTripcolor Demo\n\nTriplot Demo\n\nAxes box aspect\n\nControlling view limits using margins and sticky_edges\n\nPlacing Colorbars\n\nMultiline\n\nMmh Donuts!!!\n\nInset Locator Demo2\n\nScatter Histogram (Locatable Axes)\n\nSimple Anchored Artists\n\naxis_direction demo\n\nSimple Axis Pad\n\nThe double pendulum problem\n\nAnchored Artists\n\nRasterization for vector graphics\n\nLoglog Aspect\n\nAnnotate Text Arrow\n\nTransformations Tutorial\n\nColormap Normalization\n\n"}, {"name": "axes.Axes.set_autoscale_on", "path": "_as_gen/matplotlib.axes.axes.set_autoscale_on", "type": "axes", "text": "\nSet whether autoscaling is applied to each axis on the next draw or call to\n`Axes.autoscale_view`.\n\nResampling Data\n\n"}, {"name": "axes.Axes.set_autoscalex_on", "path": "_as_gen/matplotlib.axes.axes.set_autoscalex_on", "type": "axes", "text": "\nSet whether the x-axis is autoscaled on the next draw or call to\n`Axes.autoscale_view`.\n\n"}, {"name": "axes.Axes.set_autoscaley_on", "path": "_as_gen/matplotlib.axes.axes.set_autoscaley_on", "type": "axes", "text": "\nSet whether the y-axis is autoscaled on the next draw or call to\n`Axes.autoscale_view`.\n\n"}, {"name": "axes.Axes.set_axes_locator", "path": "_as_gen/matplotlib.axes.axes.set_axes_locator", "type": "axes", "text": "\nSet the Axes locator.\n\nHBoxDivider demo\n\n"}, {"name": "axes.Axes.set_axis_off", "path": "_as_gen/matplotlib.axes.axes.set_axis_off", "type": "axes", "text": "\nTurn the x- and y-axis off.\n\nThis affects the axis lines, ticks, ticklabels, grid and axis labels.\n\nMarker reference\n\nBarcode\n\nBlend transparency with color in 2D images\n\nNested pie charts\n\nAnnotation arrow style reference\n\nPrecise text layout\n\nDrawing fancy boxes\n\nChoosing Colormaps in Matplotlib\n\nText properties and layout\n\n"}, {"name": "axes.Axes.set_axis_on", "path": "_as_gen/matplotlib.axes.axes.set_axis_on", "type": "axes", "text": "\nTurn the x- and y-axis on.\n\nThis affects the axis lines, ticks, ticklabels, grid and axis labels.\n\n"}, {"name": "axes.Axes.set_axisbelow", "path": "_as_gen/matplotlib.axes.axes.set_axisbelow", "type": "axes", "text": "\nSet whether axis ticks and gridlines are above or below most artists.\n\nThis controls the zorder of the ticks and gridlines. For more information on\nthe zorder see Zorder Demo.\n\nPossible values:\n\nSee also\n\n"}, {"name": "axes.Axes.set_box_aspect", "path": "_as_gen/matplotlib.axes.axes.set_box_aspect", "type": "axes", "text": "\nSet the Axes box aspect, i.e. the ratio of height to width.\n\nThis defines the aspect of the Axes in figure space and is not to be confused\nwith the data aspect (see `set_aspect`).\n\nChanges the physical dimensions of the Axes, such that the ratio of the Axes\nheight to the Axes width in physical units is equal to aspect. Defining a box\naspect will change the adjustable property to 'datalim' (see\n`set_adjustable`).\n\nNone will disable a fixed box aspect so that height and width of the Axes are\nchosen independently.\n\nSee also\n\nfor a description of aspect handling.\n\nAxes box aspect\n\n"}, {"name": "axes.Axes.set_facecolor", "path": "_as_gen/matplotlib.axes.axes.set_facecolor", "type": "axes", "text": "\nSet the facecolor of the Axes.\n\nColor Demo\n\n"}, {"name": "axes.Axes.set_frame_on", "path": "_as_gen/matplotlib.axes.axes.set_frame_on", "type": "axes", "text": "\nSet whether the Axes rectangle patch is drawn.\n\n"}, {"name": "axes.Axes.set_navigate", "path": "_as_gen/matplotlib.axes.axes.set_navigate", "type": "axes", "text": "\nSet whether the Axes responds to navigation toolbar commands.\n\n"}, {"name": "axes.Axes.set_navigate_mode", "path": "_as_gen/matplotlib.axes.axes.set_navigate_mode", "type": "axes", "text": "\nSet the navigation toolbar button status.\n\nWarning\n\nthis is not a user-API function.\n\n"}, {"name": "axes.Axes.set_position", "path": "_as_gen/matplotlib.axes.axes.set_position", "type": "axes", "text": "\nSet the Axes position.\n\nAxes have two position attributes. The 'original' position is the position\nallocated for the Axes. The 'active' position is the position the Axes is\nactually drawn at. These positions are usually the same unless a fixed aspect\nis set to the Axes. See `Axes.set_aspect` for details.\n\nThe new position of the in `Figure` coordinates.\n\nDetermines which position variables to change.\n\nSee also\n\nContour Demo\n\n"}, {"name": "axes.Axes.set_prop_cycle", "path": "_as_gen/matplotlib.axes.axes.set_prop_cycle", "type": "axes", "text": "\nSet the property cycle of the Axes.\n\nThe property cycle controls the style properties such as color, marker and\nlinestyle of future plot commands. The style properties of data already added\nto the Axes are not modified.\n\nCall signatures:\n\nForm 1 sets given `Cycler` object.\n\nForm 2 creates a `Cycler` which cycles over one or more properties\nsimultaneously and set it as the property cycle of the Axes. If multiple\nproperties are given, their value lists must have the same length. This is\njust a shortcut for explicitly creating a cycler and passing it to the\nfunction, i.e. it's short for `set_prop_cycle(cycler(label=values\nlabel2=values2, ...))`.\n\nForm 3 creates a `Cycler` for a single property and set it as the property\ncycle of the Axes. This form exists for compatibility with the original\n`cycler.cycler` interface. Its use is discouraged in favor of the kwarg form,\ni.e. `set_prop_cycle(label=values)`.\n\nSet the given Cycler. None resets to the cycle defined by the current style.\n\nThe property key. Must be a valid `Artist` property. For example, 'color' or\n'linestyle'. Aliases are allowed, such as 'c' for 'color' and 'lw' for\n'linewidth'.\n\nFinite-length iterable of the property values. These values are validated and\nwill raise a ValueError if invalid.\n\nSee also\n\nConvenience function for creating validated cyclers for properties.\n\nThe original function for creating unvalidated cyclers.\n\nSetting the property cycle for a single property:\n\nSetting the property cycle for simultaneously cycling over multiple properties\n(e.g. red circle, green plus, blue cross):\n\nBachelor's degrees by gender\n\nStyling with cycler\n\n"}, {"name": "axes.Axes.set_rasterization_zorder", "path": "_as_gen/matplotlib.axes.axes.set_rasterization_zorder", "type": "axes", "text": "\nSet the zorder threshold for rasterization for vector graphics output.\n\nAll artists with a zorder below the given value will be rasterized if they\nsupport rasterization.\n\nThis setting is ignored for pixel-based output.\n\nSee also Rasterization for vector graphics.\n\nThe zorder below which artists are rasterized. If `None` rasterization based\non zorder is deactivated.\n\nRasterization for vector graphics\n\n"}, {"name": "axes.Axes.set_title", "path": "_as_gen/matplotlib.axes.axes.set_title", "type": "axes", "text": "\nSet a title for the Axes.\n\nSet one of the three available Axes titles. The available titles are\npositioned above the Axes in the center, flush with the left edge, and flush\nwith the right edge.\n\nText to use for the title\n\nA dictionary controlling the appearance of the title text, the default\nfontdict is:\n\nWhich title to set.\n\nVertical Axes loation for the title (1.0 is the top). If None (the default), y\nis determined automatically to avoid decorators on the Axes.\n\nThe offset of the title from the top of the Axes, in points.\n\nThe matplotlib text instance representing the title\n\nOther keyword arguments are text properties, see `Text` for a list of valid\ntext properties.\n\nBar Label Demo\n\nStacked bar chart\n\nGrouped bar chart with labels\n\nHorizontal bar chart\n\nErrorbar subsampling\n\nEventCollection Demo\n\nFill Between and Alpha\n\nFilling the area between lines\n\nFill Betweenx Demo\n\nHat graph\n\nMarkevery Demo\n\nPsd Demo\n\nScatter Demo2\n\nUsing span_where\n\nStackplots and streamgraphs\n\nhlines and vlines\n\nContour Corner Mask\n\nContour Demo\n\nContour Label Demo\n\nContourf Demo\n\nCreating annotated heatmaps\n\nImage antialiasing\n\nImage Demo\n\nImage Masked\n\nImage Nonuniform\n\nInterpolations for imshow\n\nContour plot of irregularly spaced data\n\nPcolor Demo\n\npcolormesh grids and shading\n\npcolormesh\n\nStreamplot\n\nAdvanced quiver and quiverkey functions\n\nTricontour Demo\n\nTricontour Smooth Delaunay\n\nTricontour Smooth User\n\nTrigradient Demo\n\nTripcolor Demo\n\nTriplot Demo\n\nAxes Demo\n\nControlling view limits using margins and sticky_edges\n\nResizing axes with constrained layout\n\nResizing axes with tight layout\n\nFigure labels: suptitle, supxlabel, supylabel\n\nInvert Axes\n\nSecondary Axis\n\nFigure subfigures\n\nCreating multiple subplots using plt.subplots\n\nBox plots with custom fill colors\n\nPlot a confidence ellipse of a two-dimensional dataset\n\nViolin plot customization\n\nDifferent ways of specifying error bars\n\nIncluding upper and lower limits in error bars\n\nHexagonal binned plot\n\nUsing histograms to plot a cumulative distribution\n\nSome features of the histogram (hist) function\n\nThe histogram (hist) function with multiple data sets\n\nBar of pie\n\nLabeling a pie and a donut\n\nPolar plot\n\nUsing accented text in matplotlib\n\nScale invariant angle label\n\nDate tick labels\n\nCustom tick formatter for time series\n\nLabeling ticks using engineering notation\n\nUsing a ttf font file in Matplotlib\n\nLabelling subplots\n\nLegend Demo\n\nMathtext\n\nMath fontfamily\n\nMultiline\n\nRendering math equations using TeX\n\nTitle positioning\n\nBoxplot Demo\n\nSimple axes labels\n\nText Commands\n\nColor Demo\n\nCreating a colormap from a list of colors\n\nLine, Poly and RegularPoly Collection with autoscaling\n\nCompound path\n\nMmh Donuts!!!\n\nLine Collection\n\nBezier Curve\n\nBayesian Methods for Hackers style sheet\n\nDark background style sheet\n\nFiveThirtyEight style sheet\n\nMake Room For Ylabel Using Axesgrid\n\nAxis Direction\n\nAnatomy of a figure\n\nXKCD\n\npyplot animation\n\nData Browser\n\nImage Slices Viewer\n\nKeypress event\n\nLasso Demo\n\nLegend Picking\n\nLooking Glass\n\nPath Editor\n\nPick Event Demo2\n\nPoly Editor\n\nTrifinder Event Demo\n\nViewlims\n\nCross hair cursor\n\nPacked-bubble chart\n\nPythonic Matplotlib\n\nRasterization for vector graphics\n\nZorder Demo\n\nDemo of 3D bar charts\n\nLorenz Attractor\n\n3D wireframe plots in one direction\n\nLoglog Aspect\n\nExploring normalizations\n\nScales\n\nRadar chart (aka spider or star chart)\n\nTopographic hillshading\n\nSpine Placement\n\nSpines\n\nDropped spines\n\nColorbar Tick Labelling\n\nDate Precision and Epochs\n\nSet default x-axis tick labels on the top\n\nArtist tests\n\nGroup barchart with units\n\nEvans test\n\nInteractive Adjustment of Colormap Range\n\nAnnotated Cursor\n\nRectangle and ellipse selectors\n\nSpan Selector\n\nBasic Usage\n\nImage tutorial\n\nArtist tutorial\n\nStyling with cycler\n\nConstrained Layout Guide\n\nTight Layout guide\n\nTransformations Tutorial\n\nSpecifying Colors\n\nColormap Normalization\n\nText in Matplotlib Plots\n\n"}, {"name": "axes.Axes.set_xbound", "path": "_as_gen/matplotlib.axes.axes.set_xbound", "type": "axes", "text": "\nSet the lower and upper numerical bounds of the x-axis.\n\nThis method will honor axis inversion regardless of parameter order. It will\nnot change the autoscaling setting (`get_autoscalex_on()`).\n\nThe lower and upper bounds. If None, the respective axis bound is not\nmodified.\n\nSee also\n\n"}, {"name": "axes.Axes.set_xlabel", "path": "_as_gen/matplotlib.axes.axes.set_xlabel", "type": "axes", "text": "\nSet the label for the x-axis.\n\nThe label text.\n\nSpacing in points from the Axes bounding box including ticks and tick labels.\nIf None, the previous value is left as is.\n\nThe label position. This is a high-level alternative for passing parameters x\nand horizontalalignment.\n\n`Text` properties control the appearance of the label.\n\nSee also\n\nDocuments the properties supported by `Text`.\n\nBar Label Demo\n\nHorizontal bar chart\n\nBroken Barh\n\nCSD Demo\n\nFill Between and Alpha\n\nFilling the area between lines\n\nFill Betweenx Demo\n\nHatch-filled histograms\n\nHat graph\n\nPsd Demo\n\nScatter Demo2\n\nStackplots and streamgraphs\n\nhlines and vlines\n\nContourf Demo\n\nTricontour Demo\n\nTripcolor Demo\n\nTriplot Demo\n\nAligning Labels\n\nAxes Demo\n\nAxis Label Position\n\nResizing axes with constrained layout\n\nResizing axes with tight layout\n\nFigure labels: suptitle, supxlabel, supylabel\n\nInvert Axes\n\nSecondary Axis\n\nFigure subfigures\n\nMultiple subplots\n\nPlots with different scales\n\nBox plots with custom fill colors\n\nBoxplots\n\nBox plot vs. violin plot comparison\n\nViolin plot customization\n\nUsing histograms to plot a cumulative distribution\n\nSome features of the histogram (hist) function\n\nProducing multiple histograms side by side\n\nUsing accented text in matplotlib\n\nLabeling ticks using engineering notation\n\nUsing a ttf font file in Matplotlib\n\nLegend Demo\n\nMathtext\n\nMultiline\n\nRendering math equations using TeX\n\nTitle positioning\n\nSimple axes labels\n\nText Commands\n\nColor Demo\n\nLine, Poly and RegularPoly Collection with autoscaling\n\nEllipse Collection\n\nDark background style sheet\n\nMake Room For Ylabel Using Axesgrid\n\nParasite Simple\n\nParasite Axes demo\n\nParasite axis demo\n\nTicklabel alignment\n\nSimple Axis Direction03\n\nSimple Axisline\n\nAnatomy of a figure\n\nXKCD\n\nKeypress event\n\nPythonic Matplotlib\n\nPlot 2D data on 3D plot\n\nCreate 2D bar graphs in different planes\n\n3D errorbars\n\nLorenz Attractor\n\nAutomatic Text Offsetting\n\n3D scatterplot\n\n3D surface with polar coordinates\n\nText annotations in 3D\n\nLog Bar\n\nMRI With EEG\n\nMultiple Yaxis With Spines\n\nCentering labels between ticks\n\nPgf Fonts\n\nPgf Texsystem\n\nSlider\n\nBasic Usage\n\nArtist tutorial\n\nConstrained Layout Guide\n\nTight Layout guide\n\nArranging multiple Axes in a Figure\n\nChoosing Colormaps in Matplotlib\n\nText in Matplotlib Plots\n\n"}, {"name": "axes.Axes.set_xlim", "path": "_as_gen/matplotlib.axes.axes.set_xlim", "type": "axes", "text": "\nSet the x-axis view limits.\n\nThe left xlim in data coordinates. Passing None leaves the limit unchanged.\n\nThe left and right xlims may also be passed as the tuple (left, right) as the\nfirst positional argument (or as the left keyword argument).\n\nThe right xlim in data coordinates. Passing None leaves the limit unchanged.\n\nWhether to notify observers of limit change.\n\nWhether to turn on autoscaling of the x-axis. True turns on, False turns off,\nNone leaves unchanged.\n\nThey are equivalent to left and right respectively, and it is an error to pass\nboth xmin and left or xmax and right.\n\nThe new x-axis limits in data coordinates.\n\nSee also\n\nThe left value may be greater than the right value, in which case the x-axis\nvalues will decrease from left to right.\n\nOne limit may be left unchanged.\n\nLimits may be passed in reverse order to flip the direction of the x-axis. For\nexample, suppose x represents the number of years before present. The x-axis\nlimits might be set like the following so 5000 years ago is on the left of the\nplot and the present is on the right.\n\nBar Label Demo\n\nBroken Barh\n\nCSD Demo\n\nEventCollection Demo\n\nMarkevery Demo\n\nContouring the solution space of optimizations\n\nImage Nonuniform\n\npcolormesh grids and shading\n\nAxes box aspect\n\nAxes Demo\n\nFigure labels: suptitle, supxlabel, supylabel\n\nInvert Axes\n\nZoom region inset axes\n\nBoxplots\n\nViolin plot customization\n\nIncluding upper and lower limits in error bars\n\nBar of pie\n\nAnnotationBbox demo\n\nUsing a text as a Path\n\nText Rotation Relative To Line\n\nAnnotate Transform\n\nMmh Donuts!!!\n\nEllipse Demo\n\nLine Collection\n\nInset Locator Demo2\n\nParasite Simple2\n\naxis_direction demo\n\nParasite Axes demo\n\nParasite axis demo\n\nSimple Axis Pad\n\nAnatomy of a figure\n\nBachelor's degrees by gender\n\nXKCD\n\nDecay\n\nRain simulation\n\nPath Editor\n\nPoly Editor\n\nResampling Data\n\nZoom Window\n\nFrontpage contour example\n\nFrontpage plot example\n\nCustom projection\n\nBuilding histograms using Rectangles and PolyCollections\n\nSVG Filter Line\n\nTickedStroke patheffect\n\nPlot 2D data on 3D plot\n\nDraw flat objects in 3D plot\n\nText annotations in 3D\n\nLoglog Aspect\n\nScales\n\nMRI With EEG\n\nSkewT-logP diagram: using transforms and custom projections\n\nMultiple Yaxis With Spines\n\nCustom spine bounds\n\nFormatting date ticks using ConciseDateFormatter\n\nDate Demo Convert\n\nAnnotation with units\n\nArtist tests\n\nAnnotate Text Arrow\n\nConnect Simple01\n\nAnnotated Cursor\n\nCursor\n\nSpan Selector\n\nPath Tutorial\n\nTransformations Tutorial\n\nSpecifying Colors\n\nChoosing Colormaps in Matplotlib\n\n"}, {"name": "axes.Axes.set_xmargin", "path": "_as_gen/matplotlib.axes.axes.set_xmargin", "type": "axes", "text": "\nSet padding of X data limits prior to autoscaling.\n\nm times the data interval will be added to each end of that interval before it\nis used in autoscaling. For example, if your data is in the range [0, 2], a\nfactor of `m = 0.1` will result in a range [-0.2, 2.2].\n\nNegative values -0.5 < m < 0 will result in clipping of the data range. I.e.\nfor a data range [0, 2], a factor of `m = -0.1` will result in a range [0.2,\n1.8].\n\nAutomatically setting tick positions\n\n"}, {"name": "axes.Axes.set_xscale", "path": "_as_gen/matplotlib.axes.axes.set_xscale", "type": "axes", "text": "\nSet the x-axis scale.\n\nThe axis scale type to apply.\n\nDifferent keyword arguments are accepted, depending on the scale. See the\nrespective class keyword arguments:\n\nBy default, Matplotlib supports the above mentioned scales. Additionally,\ncustom scales may be registered using `matplotlib.scale.register_scale`. These\nscales can then also be used here.\n\nMarkevery Demo\n\nLabeling ticks using engineering notation\n\nInset Locator Demo\n\nLoglog Aspect\n\nLog Demo\n\nSymlog Demo\n\nTransformations Tutorial\n\n"}, {"name": "axes.Axes.set_xticklabels", "path": "_as_gen/matplotlib.axes.axes.set_xticklabels", "type": "axes", "text": "\nSet the xaxis' labels with list of string labels.\n\nWarning\n\nThis method should only be used after fixing the tick positions using\n`Axes.set_xticks`. Otherwise, the labels may end up in unexpected positions.\n\nThe label texts.\n\nA dictionary controlling the appearance of the ticklabels. The default\nfontdict is:\n\nWhether to set the minor ticklabels rather than the major ones.\n\nThe labels.\n\nManaging multiple figures in pyplot\n\nZoom region inset axes\n\nBoxplots\n\nRendering math equations using TeX\n\nXKCD\n\nColorbar Tick Labelling\n\nConstrained Layout Guide\n\n"}, {"name": "axes.Axes.set_xticks", "path": "_as_gen/matplotlib.axes.axes.set_xticks", "type": "axes", "text": "\nSet the xaxis' tick locations and optionally labels.\n\nIf necessary, the view limits of the Axis are expanded so that all given ticks\nare visible.\n\nList of tick locations.\n\nList of tick labels. If not set, the labels show the data value.\n\nIf `False`, set the major ticks; if `True`, the minor ticks.\n\n`Text` properties for the labels. These take effect only if you pass labels.\nIn other cases, please use `tick_params`.\n\nThe mandatory expansion of the view limits is an intentional design choice to\nprevent the surprise of a non-visible tick. If you need other limits, you\nshould set the limits explicitly after setting the ticks.\n\nBar Label Demo\n\nGrouped bar chart with labels\n\nHat graph\n\nPsd Demo\n\nCreating annotated heatmaps\n\nBox plot vs. violin plot comparison\n\nViolin plot customization\n\nProducing multiple histograms side by side\n\nMultiline\n\nRendering math equations using TeX\n\nggplot style sheet\n\nScatter Histogram (Locatable Axes)\n\nSimple Axisline4\n\nTicklabel alignment\n\nTicklabel direction\n\nBachelor's degrees by gender\n\nIntegral as the area under a curve\n\nShaded & power normalized rendering\n\nXKCD\n\nRain simulation\n\nMATPLOTLIB UNCHAINED\n\nFrontpage 3D example\n\nFrontpage contour example\n\nFrontpage histogram example\n\nFrontpage plot example\n\nLog Bar\n\nMRI With EEG\n\nCustom spine bounds\n\nGroup barchart with units\n\nThe Lifecycle of a Plot\n\n"}, {"name": "axes.Axes.set_ybound", "path": "_as_gen/matplotlib.axes.axes.set_ybound", "type": "axes", "text": "\nSet the lower and upper numerical bounds of the y-axis.\n\nThis method will honor axis inversion regardless of parameter order. It will\nnot change the autoscaling setting (`get_autoscaley_on()`).\n\nThe lower and upper bounds. If None, the respective axis bound is not\nmodified.\n\nSee also\n\n"}, {"name": "axes.Axes.set_ylabel", "path": "_as_gen/matplotlib.axes.axes.set_ylabel", "type": "axes", "text": "\nSet the label for the y-axis.\n\nThe label text.\n\nSpacing in points from the Axes bounding box including ticks and tick labels.\nIf None, the previous value is left as is.\n\nThe label position. This is a high-level alternative for passing parameters y\nand horizontalalignment.\n\n`Text` properties control the appearance of the label.\n\nSee also\n\nDocuments the properties supported by `Text`.\n\nBar Label Demo\n\nStacked bar chart\n\nGrouped bar chart with labels\n\nCSD Demo\n\nFill Between and Alpha\n\nHatch-filled histograms\n\nHat graph\n\nPsd Demo\n\nScatter Demo2\n\nStackplots and streamgraphs\n\nContourf Demo\n\nCreating annotated heatmaps\n\nTricontour Demo\n\nTripcolor Demo\n\nTriplot Demo\n\nAligning Labels\n\nAxes Demo\n\nAxis Label Position\n\nResizing axes with constrained layout\n\nResizing axes with tight layout\n\nFigure labels: suptitle, supxlabel, supylabel\n\nInvert Axes\n\nSecondary Axis\n\nFigure subfigures\n\nMultiple subplots\n\nPlots with different scales\n\nBox plots with custom fill colors\n\nBoxplots\n\nBox plot vs. violin plot comparison\n\nViolin plot customization\n\nUsing histograms to plot a cumulative distribution\n\nSome features of the histogram (hist) function\n\nProducing multiple histograms side by side\n\nUsing accented text in matplotlib\n\nDate tick labels\n\nLegend Demo\n\nMathtext\n\nMultiline\n\nRendering math equations using TeX\n\nSimple axes labels\n\nText Commands\n\nColor Demo\n\nLine, Poly and RegularPoly Collection with autoscaling\n\nEllipse Collection\n\nDark background style sheet\n\nMake Room For Ylabel Using Axesgrid\n\nParasite Simple\n\nParasite Axes demo\n\nParasite axis demo\n\nTicklabel alignment\n\nSimple Axis Direction03\n\nSimple Axisline\n\nAnatomy of a figure\n\nXKCD\n\nPythonic Matplotlib\n\nPlot 2D data on 3D plot\n\nCreate 2D bar graphs in different planes\n\n3D errorbars\n\nLorenz Attractor\n\n2D and 3D Axes in same Figure\n\nAutomatic Text Offsetting\n\n3D scatterplot\n\n3D surface with polar coordinates\n\nText annotations in 3D\n\nLog Bar\n\nSymlog Demo\n\nMRI With EEG\n\nTopographic hillshading\n\nMultiple Yaxis With Spines\n\nBasic Usage\n\nArtist tutorial\n\nConstrained Layout Guide\n\nTight Layout guide\n\nArranging multiple Axes in a Figure\n\nChoosing Colormaps in Matplotlib\n\nText in Matplotlib Plots\n\n"}, {"name": "axes.Axes.set_ylim", "path": "_as_gen/matplotlib.axes.axes.set_ylim", "type": "axes", "text": "\nSet the y-axis view limits.\n\nThe bottom ylim in data coordinates. Passing None leaves the limit unchanged.\n\nThe bottom and top ylims may also be passed as the tuple (bottom, top) as the\nfirst positional argument (or as the bottom keyword argument).\n\nThe top ylim in data coordinates. Passing None leaves the limit unchanged.\n\nWhether to notify observers of limit change.\n\nWhether to turn on autoscaling of the y-axis. True turns on, False turns off,\nNone leaves unchanged.\n\nThey are equivalent to bottom and top respectively, and it is an error to pass\nboth ymin and bottom or ymax and top.\n\nThe new y-axis limits in data coordinates.\n\nSee also\n\nThe bottom value may be greater than the top value, in which case the y-axis\nvalues will decrease from bottom to top.\n\nOne limit may be left unchanged.\n\nLimits may be passed in reverse order to flip the direction of the y-axis. For\nexample, suppose `y` represents depth of the ocean in m. The y-axis limits\nmight be set like the following so 5000 m depth is at the bottom of the plot\nand the surface, 0 m, is at the top.\n\nBroken Barh\n\nEventCollection Demo\n\nHat graph\n\nMarkevery Demo\n\nPsd Demo\n\nContouring the solution space of optimizations\n\nImage Nonuniform\n\npcolormesh grids and shading\n\nAxes Demo\n\nBroken Axis\n\nFigure labels: suptitle, supxlabel, supylabel\n\nZoom region inset axes\n\nBoxplots\n\nAnnotationBbox demo\n\nUsing a text as a Path\n\nAnnotate Transform\n\nAnnotating a plot\n\nLine, Poly and RegularPoly Collection with autoscaling\n\nMmh Donuts!!!\n\nEllipse Demo\n\nLine Collection\n\nInset Locator Demo2\n\nParasite Simple2\n\naxis_direction demo\n\nParasite Axes demo\n\nParasite axis demo\n\nSimple Axis Pad\n\nSimple Axisline\n\nAnatomy of a figure\n\nBachelor's degrees by gender\n\nIntegral as the area under a curve\n\nXKCD\n\nDecay\n\nAnimated histogram\n\nRain simulation\n\nMATPLOTLIB UNCHAINED\n\nData Browser\n\nPath Editor\n\nPick Event Demo2\n\nPoly Editor\n\nZoom Window\n\nFrontpage contour example\n\nFrontpage plot example\n\nCustom projection\n\nBuilding histograms using Rectangles and PolyCollections\n\nPythonic Matplotlib\n\nSVG Filter Line\n\nTickedStroke patheffect\n\nPlot 2D data on 3D plot\n\nDraw flat objects in 3D plot\n\nText annotations in 3D\n\nLoglog Aspect\n\nLog Demo\n\nMRI With EEG\n\nSkewT-logP diagram: using transforms and custom projections\n\nMultiple Yaxis With Spines\n\nCustom spine bounds\n\nAnnotation with units\n\nArtist tests\n\nAnnotate Text Arrow\n\nConnect Simple01\n\nAnnotated Cursor\n\nCursor\n\nSpan Selector\n\nBasic Usage\n\nPath Tutorial\n\nTransformations Tutorial\n\nSpecifying Colors\n\nChoosing Colormaps in Matplotlib\n\n"}, {"name": "axes.Axes.set_ymargin", "path": "_as_gen/matplotlib.axes.axes.set_ymargin", "type": "axes", "text": "\nSet padding of Y data limits prior to autoscaling.\n\nm times the data interval will be added to each end of that interval before it\nis used in autoscaling. For example, if your data is in the range [0, 2], a\nfactor of `m = 0.1` will result in a range [-0.2, 2.2].\n\nNegative values -0.5 < m < 0 will result in clipping of the data range. I.e.\nfor a data range [0, 2], a factor of `m = -0.1` will result in a range [0.2,\n1.8].\n\n"}, {"name": "axes.Axes.set_yscale", "path": "_as_gen/matplotlib.axes.axes.set_yscale", "type": "axes", "text": "\nSet the y-axis scale.\n\nThe axis scale type to apply.\n\nDifferent keyword arguments are accepted, depending on the scale. See the\nrespective class keyword arguments:\n\nBy default, Matplotlib supports the above mentioned scales. Additionally,\ncustom scales may be registered using `matplotlib.scale.register_scale`. These\nscales can then also be used here.\n\nMarkevery Demo\n\nArtist customization in box plots\n\nBoxplot drawer function\n\nDifferent ways of specifying error bars\n\nLoglog Aspect\n\nLog Bar\n\nLog Demo\n\nScales\n\nSymlog Demo\n\n"}, {"name": "axes.Axes.set_yticklabels", "path": "_as_gen/matplotlib.axes.axes.set_yticklabels", "type": "axes", "text": "\nSet the yaxis' labels with list of string labels.\n\nWarning\n\nThis method should only be used after fixing the tick positions using\n`Axes.set_yticks`. Otherwise, the labels may end up in unexpected positions.\n\nThe label texts.\n\nA dictionary controlling the appearance of the ticklabels. The default\nfontdict is:\n\nWhether to set the minor ticklabels rather than the major ones.\n\nThe labels.\n\nZoom region inset axes\n\nArtist customization in box plots\n\nBoxplot drawer function\n\nViolin plot basics\n\nRendering math equations using TeX\n\nColorbar Tick Labelling\n\nConstrained Layout Guide\n\n"}, {"name": "axes.Axes.set_yticks", "path": "_as_gen/matplotlib.axes.axes.set_yticks", "type": "axes", "text": "\nSet the yaxis' tick locations and optionally labels.\n\nIf necessary, the view limits of the Axis are expanded so that all given ticks\nare visible.\n\nList of tick locations.\n\nList of tick labels. If not set, the labels show the data value.\n\nIf `False`, set the major ticks; if `True`, the minor ticks.\n\n`Text` properties for the labels. These take effect only if you pass labels.\nIn other cases, please use `tick_params`.\n\nThe mandatory expansion of the view limits is an intentional design choice to\nprevent the surprise of a non-visible tick. If you need other limits, you\nshould set the limits explicitly after setting the ticks.\n\nBar Label Demo\n\nHorizontal bar chart\n\nBroken Barh\n\nPsd Demo\n\nCreating annotated heatmaps\n\nRendering math equations using TeX\n\nProgrammatically controlling subplot adjustment\n\nMake Room For Ylabel Using Axesgrid\n\nScatter Histogram (Locatable Axes)\n\nTicklabel alignment\n\nTicklabel direction\n\nBachelor's degrees by gender\n\nIntegral as the area under a curve\n\nShaded & power normalized rendering\n\nXKCD\n\nRain simulation\n\nMATPLOTLIB UNCHAINED\n\nFrontpage 3D example\n\nFrontpage contour example\n\nFrontpage histogram example\n\nFrontpage plot example\n\nCreate 2D bar graphs in different planes\n\nMRI With EEG\n\nSkewT-logP diagram: using transforms and custom projections\n\nCustom spine bounds\n\n"}, {"name": "axes.Axes.sharex", "path": "_as_gen/matplotlib.axes.axes.sharex", "type": "axes", "text": "\nShare the x-axis with other.\n\nThis is equivalent to passing `sharex=other` when constructing the axes, and\ncannot be used if the x-axis is already being shared with another Axes.\n\n"}, {"name": "axes.Axes.sharey", "path": "_as_gen/matplotlib.axes.axes.sharey", "type": "axes", "text": "\nShare the y-axis with other.\n\nThis is equivalent to passing `sharey=other` when constructing the axes, and\ncannot be used if the y-axis is already being shared with another Axes.\n\n"}, {"name": "axes.Axes.specgram", "path": "_as_gen/matplotlib.axes.axes.specgram", "type": "axes", "text": "\nPlot a spectrogram.\n\nCompute and plot a spectrogram of data in x. Data are split into NFFT length\nsegments and the spectrum of each section is computed. The windowing function\nwindow is applied to each segment, and the amount of overlap of each segment\nis specified with noverlap. The spectrogram is plotted as a colormap (using\nimshow).\n\nArray or sequence containing the data.\n\nThe sampling frequency (samples per time unit). It is used to calculate the\nFourier frequencies, freqs, in cycles per time unit.\n\nA function or a vector of length NFFT. To create window vectors see\n`window_hanning`, `window_none`, `numpy.blackman`, `numpy.hamming`,\n`numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc. If a\nfunction is passed as the argument, it must take a data segment as an argument\nand return the windowed version of the segment.\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data\nand two-sided for complex data. 'onesided' forces the return of a one-sided\nspectrum, while 'twosided' forces two-sided.\n\nThe number of points to which the data segment is padded when performing the\nFFT. This can be different from NFFT, which specifies the number of data\npoints used. While not increasing the actual resolution of the spectrum (the\nminimum distance between resolvable peaks), this can give more points in the\nplot, allowing for more detail. This corresponds to the n parameter in the\ncall to fft(). The default is None, which sets pad_to equal to NFFT\n\nThe number of data points used in each block for the FFT. A power 2 is most\nefficient. This should NOT be used to get zero padding, or the scaling of the\nresult will be incorrect; use pad_to for this instead.\n\nThe function applied to each segment before fft-ing, designed to remove the\nmean or linear trend. Unlike in MATLAB, where the detrend parameter is a\nvector, in Matplotlib it is a function. The `mlab` module defines\n`detrend_none`, `detrend_mean`, and `detrend_linear`, but you can use a custom\nfunction as well. You can also use a string to choose one of the functions:\n'none' calls `detrend_none`. 'mean' calls `detrend_mean`. 'linear' calls\n`detrend_linear`.\n\nWhether the resulting density values should be scaled by the scaling\nfrequency, which gives density in units of Hz^-1. This allows for integration\nover the returned frequency values. The default is True for MATLAB\ncompatibility.\n\nWhat sort of spectrum to use. Default is 'psd', which takes the power spectral\ndensity. 'magnitude' returns the magnitude spectrum. 'angle' returns the phase\nspectrum without unwrapping. 'phase' returns the phase spectrum with\nunwrapping.\n\nThe number of points of overlap between blocks.\n\nThe scaling of the values in the spec. 'linear' is no scaling. 'dB' returns\nthe values in dB scale. When mode is 'psd', this is dB power (10 * log10).\nOtherwise this is dB amplitude (20 * log10). 'default' is 'dB' if mode is\n'psd' or 'magnitude' and 'linear' otherwise. This must be 'linear' if mode is\n'angle' or 'phase'.\n\nThe center frequency of x, which offsets the x extents of the plot to reflect\nthe frequency range used when a signal is acquired and then filtered and\ndownsampled to baseband.\n\nThe image extent along the x-axis. The default sets xmin to the left border of\nthe first bin (spectrum column) and xmax to the right border of the last bin.\nNote that for noverlap>0 the width of the bins is smaller than those of the\nsegments.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx\n\nAdditional keyword arguments are passed on to `imshow` which makes the\nspecgram image. The origin keyword argument is not supported.\n\nColumns are the periodograms of successive segments.\n\nThe frequencies corresponding to the rows in spectrum.\n\nThe times corresponding to midpoints of segments (i.e., the columns in\nspectrum).\n\nThe image created by imshow containing the spectrogram.\n\nSee also\n\nDiffers in the default overlap; in returning the mean of the segment\nperiodograms; in not returning times; and in generating a line plot instead of\ncolormap.\n\nA single spectrum, similar to having a single segment when mode is\n'magnitude'. Plots a line instead of a colormap.\n\nA single spectrum, similar to having a single segment when mode is 'angle'.\nPlots a line instead of a colormap.\n\nA single spectrum, similar to having a single segment when mode is 'phase'.\nPlots a line instead of a colormap.\n\nThe parameters detrend and scale_by_freq do only apply when mode is set to\n'psd'.\n\nSpectrogram Demo\n\n"}, {"name": "axes.Axes.spy", "path": "_as_gen/matplotlib.axes.axes.spy", "type": "axes", "text": "\nPlot the sparsity pattern of a 2D array.\n\nThis visualizes the non-zero values of the array.\n\nTwo plotting styles are available: image and marker. Both are available for\nfull arrays, but only the marker style works for `scipy.sparse.spmatrix`\ninstances.\n\nImage style\n\nIf marker and markersize are None, `imshow` is used. Any extra remaining\nkeyword arguments are passed to this method.\n\nMarker style\n\nIf Z is a `scipy.sparse.spmatrix` or marker or markersize are None, a `Line2D`\nobject will be returned with the value of marker determining the marker type,\nand any remaining keyword arguments passed to `plot`.\n\nThe array to be plotted.\n\nIf precision is 0, any non-zero value will be plotted. Otherwise, values of\n\\\\(|Z| > precision\\\\) will be plotted.\n\nFor `scipy.sparse.spmatrix` instances, you can also pass 'present'. In this\ncase any value present in the array will be plotted, even if it is identically\nzero.\n\nThe aspect ratio of the Axes. This parameter is particularly relevant for\nimages since it determines whether data pixels are square.\n\nThis parameter is a shortcut for explicitly calling `Axes.set_aspect`. See\nthere for further details.\n\nPlace the [0, 0] index of the array in the upper left or lower left corner of\nthe Axes. The convention 'upper' is typically used for matrices and images.\n\nThe return type depends on the plotting style (see above).\n\nThe supported additional parameters depend on the plotting style.\n\nFor the image style, you can pass the following additional parameters of\n`imshow`:\n\nFor the marker style, you can pass any `Line2D` property except for linestyle:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`transform`\n\nunknown\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSpy Demos\n\n"}, {"name": "axes.Axes.stackplot", "path": "_as_gen/matplotlib.axes.axes.stackplot", "type": "axes", "text": "\nDraw a stacked area plot.\n\nThe data is assumed to be unstacked. Each of the following calls is legal:\n\nMethod used to calculate the baseline:\n\nA sequence of labels to assign to each data series. If unspecified, then no\nlabels will be applied to artists.\n\nA sequence of colors to be cycled through and used to color the stacked areas.\nThe sequence need not be exactly the same length as the number of provided y,\nin which case the colors will repeat from the beginning.\n\nIf not specified, the colors from the Axes property cycle will be used.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nAll other keyword arguments are passed to `Axes.fill_between`.\n\nA list of `PolyCollection` instances, one for each element in the stacked area\nplot.\n\nStackplots and streamgraphs\n\n"}, {"name": "axes.Axes.stairs", "path": "_as_gen/matplotlib.axes.axes.stairs", "type": "axes", "text": "\nA stepwise constant function as a line with bounding edges or a filled plot.\n\nThe step heights.\n\nThe edge positions, with `len(edges) == len(vals) + 1`, between which the\ncurve takes on vals values.\n\nThe direction of the steps. Vertical means that values are along the y-axis,\nand edges are along the x-axis.\n\nThe bottom value of the bounding edges or when `fill=True`, position of lower\nedge. If fill is True or an array is passed to baseline, a closed path is\ndrawn.\n\nWhether the area under the step curve should be filled.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\n`StepPatch` properties\n\n"}, {"name": "axes.Axes.stale", "path": "_as_gen/matplotlib.axes.axes.stale", "type": "axes", "text": "\nWhether the artist is 'stale' and needs to be re-drawn for the output to match\nthe internal state of the artist.\n\n"}, {"name": "axes.Axes.start_pan", "path": "_as_gen/matplotlib.axes.axes.start_pan", "type": "axes", "text": "\nCalled when a pan operation has started.\n\nThe mouse coordinates in display coords.\n\nThe pressed mouse button.\n\nThis is intended to be overridden by new projection types.\n\n"}, {"name": "axes.Axes.stem", "path": "_as_gen/matplotlib.axes.axes.stem", "type": "axes", "text": "\nCreate a stem plot.\n\nA stem plot draws lines perpendicular to a baseline at each location locs from\nthe baseline to heads, and places a marker there. For vertical stem plots (the\ndefault), the locs are x positions, and the heads are y values. For horizontal\nstem plots, the locs are y positions, and the heads are x values.\n\nCall signature:\n\nThe locs-positions are optional. The formats may be provided either as\npositional or as keyword-arguments.\n\nFor vertical stem plots, the x-positions of the stems. For horizontal stem\nplots, the y-positions of the stems.\n\nFor vertical stem plots, the y-values of the stem heads. For horizontal stem\nplots, the x-values of the stem heads.\n\nA string defining the color and/or linestyle of the vertical lines:\n\nCharacter\n\nLine Style\n\n`'-'`\n\nsolid line\n\n`'--'`\n\ndashed line\n\n`'-.'`\n\ndash-dot line\n\n`':'`\n\ndotted line\n\nDefault: 'C0-', i.e. solid line with the first color of the color cycle.\n\nNote: Markers specified through this parameter (e.g. 'x') will be silently\nignored (unless using `use_line_collection=False`). Instead, markers should be\nspecified using markerfmt.\n\nA string defining the color and/or shape of the markers at the stem heads.\nDefault: 'C0o', i.e. filled circles with the first color of the color cycle.\n\nA format string defining the properties of the baseline.\n\nIf 'vertical', will produce a plot with stems oriented vertically, otherwise\nthe stems will be oriented horizontally.\n\nThe y/x-position of the baseline (depending on orientation).\n\nThe label to use for the stems in legends.\n\nIf `True`, store and plot the stem lines as a `LineCollection` instead of\nindividual lines, which significantly increases performance. If `False`,\ndefaults to the old behavior of using a list of `Line2D` objects. This\nparameter may be deprecated in the future.\n\nIf given, all parameters also accept a string `s`, which is interpreted as\n`data[s]` (unless this raises an exception).\n\nThe container may be treated like a tuple (markerline, stemlines, baseline)\n\nSee also\n\nThe MATLAB function stem which inspired this method.\n\nLegend Demo\n\n3D stem\n\nstem(x, y)\n\n"}, {"name": "axes.Axes.step", "path": "_as_gen/matplotlib.axes.axes.step", "type": "axes", "text": "\nMake a step plot.\n\nCall signatures:\n\nThis is just a thin wrapper around `plot` which changes some formatting\noptions. Most of the concepts and parameters of plot can be used here as well.\n\nNote\n\nThis method uses a standard plot with a step drawstyle: The x values are the\nreference positions and steps extend left/right/both directions depending on\nwhere.\n\nFor the common case where you know the values and edges of the steps, use\n`stairs` instead.\n\n1D sequence of x positions. It is assumed, but not checked, that it is\nuniformly increasing.\n\n1D sequence of y levels.\n\nA format string, e.g. 'g' for a green line. See `plot` for a more detailed\ndescription.\n\nNote: While full format strings are accepted, it is recommended to only\nspecify the color. Line styles are currently ignored (use the keyword argument\nlinestyle instead). Markers are accepted and plotted on the given positions,\nhowever, this is a rarely needed feature for step plots.\n\nDefine where the steps should be placed:\n\nAn object with labelled data. If given, provide the label names to plot in x\nand y.\n\nAdditional parameters are the same as those for `plot`.\n\nObjects representing the plotted data.\n\nstep(x, y)\n\n"}, {"name": "axes.Axes.streamplot", "path": "_as_gen/matplotlib.axes.axes.streamplot", "type": "axes", "text": "\nDraw streamlines of a vector flow.\n\nEvenly spaced strictly increasing arrays to make a grid. If 2D, all rows of x\nmust be equal and all columns of y must be equal; i.e., they must be as if\ngenerated by `np.meshgrid(x_1d, y_1d)`.\n\nx and y-velocities. The number of rows and columns must match the length of y\nand x, respectively.\n\nControls the closeness of streamlines. When `density = 1`, the domain is\ndivided into a 30x30 grid. density linearly scales this grid. Each cell in the\ngrid can have, at most, one traversing streamline. For different densities in\neach direction, use a tuple (density_x, density_y).\n\nThe width of the stream lines. With a 2D array the line width can be varied\nacross the grid. The array must have the same shape as u and v.\n\nThe streamline color. If given an array, its values are converted to colors\nusing cmap and norm. The array must have the same shape as u and v.\n\nColormap used to plot streamlines and arrows. This is only used if color is an\narray.\n\nNormalize object used to scale luminance data to 0, 1. If `None`, stretch\n(min, max) to (0, 1). This is only used if color is an array.\n\nScaling factor for the arrow size.\n\nArrow style specification. See `FancyArrowPatch`.\n\nMinimum length of streamline in axes coordinates.\n\nCoordinates of starting points for the streamlines in data coordinates (the\nsame coordinates as the x and y arrays).\n\nThe zorder of the stream lines and arrows. Artists with lower zorder values\nare drawn first.\n\nMaximum length of streamline in axes coordinates.\n\nIntegrate the streamline in forward, backward or both directions.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, y, u, v, start_points\n\nContainer object with attributes\n\nThis container will probably change in the future to allow changes to the\ncolormap, alpha, etc. for both lines and arrows, but these changes should be\nbackward compatible.\n\nStreamplot\n\nstreamplot(X, Y, U, V)\n\n"}, {"name": "axes.Axes.table", "path": "_as_gen/matplotlib.axes.axes.table", "type": "axes", "text": "\nAdd a table to an `Axes`.\n\nAt least one of cellText or cellColours must be specified. These parameters\nmust be 2D lists, in which the outer lists define the rows and the inner list\ndefine the column values per row. Each row must have the same number of\nelements.\n\nThe table can optionally have row and column headers, which are configured\nusing rowLabels, rowColours, rowLoc and colLabels, colColours, colLoc\nrespectively.\n\nFor finer grained control over tables, use the `Table` class and add it to the\naxes with `Axes.add_table`.\n\nThe texts to place into the table cells.\n\nNote: Line breaks in the strings are currently not accounted for and will\nresult in the text exceeding the cell boundaries.\n\nThe background colors of the cells.\n\nThe alignment of the text within the cells.\n\nThe column widths in units of the axes. If not given, all columns will have a\nwidth of 1 / ncols.\n\nThe text of the row header cells.\n\nThe colors of the row header cells.\n\nThe text alignment of the row header cells.\n\nThe text of the column header cells.\n\nThe colors of the column header cells.\n\nThe text alignment of the column header cells.\n\nThe position of the cell with respect to ax. This must be one of the `codes`.\n\nA bounding box to draw the table into. If this is not None, this overrides\nloc.\n\nThe cell edges to be drawn with a line. See also `visible_edges`.\n\nThe created table.\n\n`Table` properties.\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`fontsize`\n\nfloat\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes.Axes.text", "path": "_as_gen/matplotlib.axes.axes.text", "type": "axes", "text": "\nAdd text to the Axes.\n\nAdd the text s to the Axes at location x, y in data coordinates.\n\nThe position to place the text. By default, this is in data coordinates. The\ncoordinate system can be changed using the transform parameter.\n\nThe text.\n\nA dictionary to override the default text properties. If fontdict is None, the\ndefaults are determined by `rcParams`.\n\nThe created `Text` instance.\n\nOther miscellaneous text parameters.\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`backgroundcolor`\n\ncolor\n\n`bbox`\n\ndict with properties for `patches.FancyBboxPatch`\n\n`clip_box`\n\nunknown\n\n`clip_on`\n\nunknown\n\n`clip_path`\n\nunknown\n\n`color` or c\n\ncolor\n\n`figure`\n\n`Figure`\n\n`fontfamily` or family\n\n{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}\n\n`fontproperties` or font or font_properties\n\n`font_manager.FontProperties` or `str` or `pathlib.Path`\n\n`fontsize` or size\n\nfloat or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-\nlarge'}\n\n`fontstretch` or stretch\n\n{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed',\n'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-\nexpanded', 'ultra-expanded'}\n\n`fontstyle` or style\n\n{'normal', 'italic', 'oblique'}\n\n`fontvariant` or variant\n\n{'normal', 'small-caps'}\n\n`fontweight` or weight\n\n{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular',\n'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',\n'extra bold', 'black'}\n\n`gid`\n\nstr\n\n`horizontalalignment` or ha\n\n{'center', 'right', 'left'}\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linespacing`\n\nfloat (multiple of font size)\n\n`math_fontfamily`\n\nstr\n\n`multialignment` or ma\n\n{'left', 'right', 'center'}\n\n`parse_math`\n\nbool\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n(float, float)\n\n`rasterized`\n\nbool\n\n`rotation`\n\nfloat or {'vertical', 'horizontal'}\n\n`rotation_mode`\n\n{None, 'default', 'anchor'}\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`text`\n\nobject\n\n`transform`\n\n`Transform`\n\n`transform_rotates_text`\n\nbool\n\n`url`\n\nstr\n\n`usetex`\n\nbool or None\n\n`verticalalignment` or va\n\n{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n`visible`\n\nbool\n\n`wrap`\n\nbool\n\n`x`\n\nfloat\n\n`y`\n\nfloat\n\n`zorder`\n\nfloat\n\nIndividual keyword arguments can be used to override any given parameter:\n\nThe default transform specifies that text is in data coords, alternatively,\nyou can specify text in axis coords ((0, 0) is lower-left and (1, 1) is upper-\nright). The example below places text in the center of the Axes:\n\nYou can put a rectangular box around the text instance (e.g., to set a\nbackground color) by using the keyword bbox. bbox is a dictionary of\n`Rectangle` properties. For example:\n\nMarker reference\n\nBboxImage Demo\n\nCreating annotated heatmaps\n\nBoxplots\n\nBar of pie\n\nUsing accented text in matplotlib\n\nArrow Demo\n\nAnnotation arrow style reference\n\nLabelling subplots\n\nMathtext\n\nMath fontfamily\n\nMultiline\n\nPlacing text boxes\n\nRendering math equations using TeX\n\nPrecise text layout\n\nText Rotation Relative To Line\n\nUsetex Baseline Test\n\nText watermark\n\nText Commands\n\nDrawing fancy boxes\n\nHatch style reference\n\nAnatomy of a figure\n\nBachelor's degrees by gender\n\nIntegral as the area under a curve\n\nShaded & power normalized rendering\n\nThe double pendulum problem\n\nMATPLOTLIB UNCHAINED\n\nData Browser\n\nPick Event Demo2\n\nCross hair cursor\n\nPacked-bubble chart\n\nRasterization for vector graphics\n\nText annotations in 3D\n\nAnscombe's quartet\n\nAnnotate Explain\n\nAnnotate Text Arrow\n\nConnection styles for annotations\n\nCustom box styles\n\nPgf Fonts\n\nPgf Texsystem\n\nSimple Annotate01\n\nMouse Cursor\n\nBasic Usage\n\nThe Lifecycle of a Plot\n\nArtist tutorial\n\nArranging multiple Axes in a Figure\n\nPath Tutorial\n\nTransformations Tutorial\n\nSpecifying Colors\n\nChoosing Colormaps in Matplotlib\n\nText in Matplotlib Plots\n\nText properties and layout\n\n"}, {"name": "axes.Axes.tick_params", "path": "_as_gen/matplotlib.axes.axes.tick_params", "type": "axes", "text": "\nChange the appearance of ticks, tick labels, and gridlines.\n\nTick properties that are not explicitly set using the keyword arguments remain\nunchanged unless reset is True.\n\nThe axis to which the parameters are applied.\n\nThe group of ticks to which the parameters are applied.\n\nWhether to reset the ticks to defaults before updating them.\n\nPuts ticks inside the axes, outside the axes, or both.\n\nTick length in points.\n\nTick width in points.\n\nTick color.\n\nDistance in points between tick and label.\n\nTick label font size in points or as a string (e.g., 'large').\n\nTick label color.\n\nTick color and label color.\n\nTick and label zorder.\n\nWhether to draw the respective ticks.\n\nWhether to draw the respective tick labels.\n\nTick label rotation\n\nGridline color.\n\nTransparency of gridlines: 0 (transparent) to 1 (opaque).\n\nWidth of gridlines in points.\n\nAny valid `Line2D` line style spec.\n\nThis will make all major ticks be red, pointing out of the box, and with\ndimensions 6 points by 2 points. Tick labels will also be red. Gridlines will\nbe red and translucent.\n\nScatter plot with histograms\n\nCreating annotated heatmaps\n\nAxes Props\n\nBroken Axis\n\nPlots with different scales\n\nPolar Legend\n\nColor Demo\n\nInset Locator Demo\n\nInset Locator Demo2\n\nMake Room For Ylabel Using Axesgrid\n\nSimple Axes Divider 3\n\nAnatomy of a figure\n\nBachelor's degrees by gender\n\nAnscombe's quartet\n\nMultiple Yaxis With Spines\n\nMajor and minor ticks\n\nText in Matplotlib Plots\n\n"}, {"name": "axes.Axes.ticklabel_format", "path": "_as_gen/matplotlib.axes.axes.ticklabel_format", "type": "axes", "text": "\nConfigure the `ScalarFormatter` used by default for linear axes.\n\nIf a parameter is not set, the corresponding property of the formatter is left\nunchanged.\n\nThe axis to configure. Only major ticks are affected.\n\nWhether to use scientific notation. The formatter default is to use scientific\nnotation.\n\nScientific notation is used only for numbers outside the range 10m to 10n (and\nonly if the formatter is configured to use scientific notation at all). Use\n(0, 0) to include all numbers. Use (m, m) where m != 0 to fix the order of\nmagnitude to 10m. The formatter default is `rcParams[\"axes.formatter.limits\"]`\n(default: `[-5, 6]`).\n\nIf True, the offset is calculated as needed. If False, no offset is used. If a\nnumeric value, it sets the offset. The formatter default is\n`rcParams[\"axes.formatter.useoffset\"]` (default: `True`).\n\nWhether to format the number using the current locale or using the C (English)\nlocale. This affects e.g. the decimal separator. The formatter default is\n`rcParams[\"axes.formatter.use_locale\"]` (default: `False`).\n\nRender the offset and scientific notation in mathtext. The formatter default\nis `rcParams[\"axes.formatter.use_mathtext\"]` (default: `False`).\n\nIf the current formatter is not a `ScalarFormatter`.\n\nThe default tick formatter\n\n"}, {"name": "axes.Axes.tricontour", "path": "_as_gen/matplotlib.axes.axes.tricontour", "type": "axes", "text": "\nDraw contour lines on an unstructured triangular grid.\n\nThe triangulation can be specified in one of two ways; either\n\nwhere triangulation is a `Triangulation` object, or\n\nin which case a `Triangulation` object will be created. See that class'\ndocstring for an explanation of these cases.\n\nThe remaining arguments may be:\n\nwhere Z is the array of values to contour, one per point in the triangulation.\nThe level values are chosen automatically.\n\ncontour up to levels+1 automatically chosen contour levels (levels intervals).\n\ndraw contour lines at the values specified in sequence levels, which must be\nin increasing order.\n\nUse keyword arguments to control colors, linewidth, origin, cmap ... see below\nfor more details.\n\nThe unstructured triangular grid.\n\nIf specified, then x, y, triangles, and mask are not accepted.\n\nThe coordinates of the values in Z.\n\nFor each triangle, the indices of the three points that make up the triangle,\nordered in an anticlockwise manner. If not specified, the Delaunay\ntriangulation is calculated.\n\nWhich triangles are masked out.\n\nThe height values over which the contour is drawn.\n\nDetermines the number and positions of the contour lines / regions.\n\nIf an int n, use `MaxNLocator`, which tries to automatically choose no more\nthan n+1 \"nice\" contour levels between vmin and vmax.\n\nIf array-like, draw contour lines at the specified levels. The values must be\nin increasing order.\n\nThe colors of the levels, i.e., the contour lines.\n\nThe sequence is cycled for the levels in ascending order. If the sequence is\nshorter than the number of levels, it's repeated.\n\nAs a shortcut, single color strings may be used in place of one-element lists,\ni.e. `'red'` instead of `['red']` to color all levels with the same color.\nThis shortcut does only work for color strings, not for other ways of\nspecifying colors.\n\nBy default (value None), the colormap specified by cmap will be used.\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nA `Colormap` instance or registered colormap name. The colormap maps the level\nvalues to colors.\n\nIf both colors and cmap are given, an error is raised.\n\nIf a colormap is used, the `Normalize` instance scales the level values to the\ncanonical colormap range [0, 1] for mapping to colors. If not given, the\ndefault linear scaling is used.\n\nIf not None, either or both of these values will be supplied to the\n`Normalize` instance, overriding the default color scaling based on levels.\n\nDetermines the orientation and exact position of Z by specifying the position\nof `Z[0, 0]`. This is only relevant, if X, Y are not given.\n\nIf origin is not None, then extent is interpreted as in `imshow`: it gives the\nouter pixel boundaries. In this case, the position of Z[0, 0] is the center of\nthe pixel, not a corner. If origin is None, then (x0, y0) is the position of\nZ[0, 0], and (x1, y1) is the position of Z[-1, -1].\n\nThis argument is ignored if X and Y are specified in the call to contour.\n\nThe locator is used to determine the contour levels if they are not given\nexplicitly via levels. Defaults to `MaxNLocator`.\n\nDetermines the `tricontour`-coloring of values that are outside the levels\nrange.\n\nIf 'neither', values outside the levels range are not colored. If 'min', 'max'\nor 'both', color the values below, above or below and above the levels range.\n\nValues below `min(levels)` and above `max(levels)` are mapped to the\nunder/over values of the `Colormap`. Note that most colormaps do not have\ndedicated colors for these by default, so that the over and under values are\nthe edge values of the colormap. You may want to set these values explicitly\nusing `Colormap.set_under` and `Colormap.set_over`.\n\nNote\n\nAn existing `TriContourSet` does not get notified if properties of its\ncolormap are changed. Therefore, an explicit call to `ContourSet.changed()` is\nneeded after modifying the colormap. The explicit call can be left out, if a\ncolorbar is assigned to the `TriContourSet` because it internally calls\n`ContourSet.changed()`.\n\nOverride axis units by specifying an instance of a\n`matplotlib.units.ConversionInterface`.\n\nEnable antialiasing, overriding the defaults. For filled contours, the default\nis True. For line contours, it is taken from `rcParams[\"lines.antialiased\"]`\n(default: `True`).\n\nThe line width of the contour lines.\n\nIf a number, all levels will be plotted with this linewidth.\n\nIf a sequence, the levels in ascending order will be plotted with the\nlinewidths in the order specified.\n\nIf None, this falls back to `rcParams[\"lines.linewidth\"]` (default: `1.5`).\n\nIf linestyles is None, the default is 'solid' unless the lines are monochrome.\nIn that case, negative contours will take their linestyle from\n`rcParams[\"contour.negative_linestyle\"]` (default: `'dashed'`) setting.\n\nlinestyles can also be an iterable of the above strings specifying a set of\nlinestyles to be used. If this iterable is shorter than the number of contour\nlevels it will be repeated as necessary.\n\nContour plot of irregularly spaced data\n\nTricontour Demo\n\nTricontour Smooth Delaunay\n\nTricontour Smooth User\n\nTrigradient Demo\n\nTriangular 3D contour plot\n\ntricontour(x, y, z)\n\n"}, {"name": "axes.Axes.tricontourf", "path": "_as_gen/matplotlib.axes.axes.tricontourf", "type": "axes", "text": "\nDraw contour regions on an unstructured triangular grid.\n\nThe triangulation can be specified in one of two ways; either\n\nwhere triangulation is a `Triangulation` object, or\n\nin which case a `Triangulation` object will be created. See that class'\ndocstring for an explanation of these cases.\n\nThe remaining arguments may be:\n\nwhere Z is the array of values to contour, one per point in the triangulation.\nThe level values are chosen automatically.\n\ncontour up to levels+1 automatically chosen contour levels (levels intervals).\n\ndraw contour regions at the values specified in sequence levels, which must be\nin increasing order.\n\nUse keyword arguments to control colors, linewidth, origin, cmap ... see below\nfor more details.\n\nThe unstructured triangular grid.\n\nIf specified, then x, y, triangles, and mask are not accepted.\n\nThe coordinates of the values in Z.\n\nFor each triangle, the indices of the three points that make up the triangle,\nordered in an anticlockwise manner. If not specified, the Delaunay\ntriangulation is calculated.\n\nWhich triangles are masked out.\n\nThe height values over which the contour is drawn.\n\nDetermines the number and positions of the contour lines / regions.\n\nIf an int n, use `MaxNLocator`, which tries to automatically choose no more\nthan n+1 \"nice\" contour levels between vmin and vmax.\n\nIf array-like, draw contour lines at the specified levels. The values must be\nin increasing order.\n\nThe colors of the levels, i.e., the contour regions.\n\nThe sequence is cycled for the levels in ascending order. If the sequence is\nshorter than the number of levels, it's repeated.\n\nAs a shortcut, single color strings may be used in place of one-element lists,\ni.e. `'red'` instead of `['red']` to color all levels with the same color.\nThis shortcut does only work for color strings, not for other ways of\nspecifying colors.\n\nBy default (value None), the colormap specified by cmap will be used.\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nA `Colormap` instance or registered colormap name. The colormap maps the level\nvalues to colors.\n\nIf both colors and cmap are given, an error is raised.\n\nIf a colormap is used, the `Normalize` instance scales the level values to the\ncanonical colormap range [0, 1] for mapping to colors. If not given, the\ndefault linear scaling is used.\n\nIf not None, either or both of these values will be supplied to the\n`Normalize` instance, overriding the default color scaling based on levels.\n\nDetermines the orientation and exact position of Z by specifying the position\nof `Z[0, 0]`. This is only relevant, if X, Y are not given.\n\nIf origin is not None, then extent is interpreted as in `imshow`: it gives the\nouter pixel boundaries. In this case, the position of Z[0, 0] is the center of\nthe pixel, not a corner. If origin is None, then (x0, y0) is the position of\nZ[0, 0], and (x1, y1) is the position of Z[-1, -1].\n\nThis argument is ignored if X and Y are specified in the call to contour.\n\nThe locator is used to determine the contour levels if they are not given\nexplicitly via levels. Defaults to `MaxNLocator`.\n\nDetermines the `tricontourf`-coloring of values that are outside the levels\nrange.\n\nIf 'neither', values outside the levels range are not colored. If 'min', 'max'\nor 'both', color the values below, above or below and above the levels range.\n\nValues below `min(levels)` and above `max(levels)` are mapped to the\nunder/over values of the `Colormap`. Note that most colormaps do not have\ndedicated colors for these by default, so that the over and under values are\nthe edge values of the colormap. You may want to set these values explicitly\nusing `Colormap.set_under` and `Colormap.set_over`.\n\nNote\n\nAn existing `TriContourSet` does not get notified if properties of its\ncolormap are changed. Therefore, an explicit call to `ContourSet.changed()` is\nneeded after modifying the colormap. The explicit call can be left out, if a\ncolorbar is assigned to the `TriContourSet` because it internally calls\n`ContourSet.changed()`.\n\nOverride axis units by specifying an instance of a\n`matplotlib.units.ConversionInterface`.\n\nEnable antialiasing, overriding the defaults. For filled contours, the default\nis True. For line contours, it is taken from `rcParams[\"lines.antialiased\"]`\n(default: `True`).\n\nA list of cross hatch patterns to use on the filled areas. If None, no\nhatching will be added to the contour. Hatching is supported in the\nPostScript, PDF, SVG and Agg backends only.\n\n`tricontourf` fills intervals that are closed at the top; that is, for\nboundaries z1 and z2, the filled region is:\n\nexcept for the lowest interval, which is closed on both sides (i.e. it\nincludes the lowest value).\n\nContour plot of irregularly spaced data\n\nTricontour Demo\n\nTricontour Smooth User\n\nTriangular 3D filled contour plot\n\ntricontourf(x, y, z)\n\n"}, {"name": "axes.Axes.tripcolor", "path": "_as_gen/matplotlib.axes.axes.tripcolor", "type": "axes", "text": "\nCreate a pseudocolor plot of an unstructured triangular grid.\n\nThe triangulation can be specified in one of two ways; either:\n\nwhere triangulation is a `Triangulation` object, or\n\nin which case a Triangulation object will be created. See `Triangulation` for\na explanation of these possibilities.\n\nThe next argument must be C, the array of color values, either one per point\nin the triangulation if color values are defined at points, or one per\ntriangle in the triangulation if color values are defined at triangles. If\nthere are the same number of points and triangles in the triangulation it is\nassumed that color values are defined at points; to force the use of color\nvalues at triangles use the kwarg `facecolors=C` instead of just `C`.\n\nshading may be 'flat' (the default) or 'gouraud'. If shading is 'flat' and C\nvalues are defined at points, the color values used for each triangle are from\nthe mean C of the triangle's three points. If shading is 'gouraud' then color\nvalues must be defined at points.\n\nThe remaining kwargs are the same as for `pcolor`.\n\nTripcolor Demo\n\ntripcolor(x, y, z)\n\n"}, {"name": "axes.Axes.triplot", "path": "_as_gen/matplotlib.axes.axes.triplot", "type": "axes", "text": "\nDraw a unstructured triangular grid as lines and/or markers.\n\nThe triangulation to plot can be specified in one of two ways; either:\n\nwhere triangulation is a `Triangulation` object, or\n\nin which case a Triangulation object will be created. See `Triangulation` for\na explanation of these possibilities.\n\nThe remaining args and kwargs are the same as for `plot`.\n\nThe drawn triangles edges.\n\nThe drawn marker nodes.\n\nTricontour Smooth Delaunay\n\nTricontour Smooth User\n\nTrigradient Demo\n\nTriplot Demo\n\nTrifinder Event Demo\n\ntriplot(x, y)\n\n"}, {"name": "axes.Axes.twinx", "path": "_as_gen/matplotlib.axes.axes.twinx", "type": "axes", "text": "\nCreate a twin Axes sharing the xaxis.\n\nCreate a new Axes with an invisible x-axis and an independent y-axis\npositioned opposite to the original one (i.e. at right). The x-axis autoscale\nsetting will be inherited from the original Axes. To ensure that the tick\nmarks of both y-axes align, see `LinearLocator`.\n\nThe newly created Axes instance\n\nFor those who are 'picking' artists while using twinx, pick events are only\ncalled for the artists in the top-most Axes.\n\nAxes box aspect\n\nPlots with different scales\n\nParasite Simple\n\nParasite axis demo\n\nMultiple Yaxis With Spines\n\nBasic Usage\n\n"}, {"name": "axes.Axes.twiny", "path": "_as_gen/matplotlib.axes.axes.twiny", "type": "axes", "text": "\nCreate a twin Axes sharing the yaxis.\n\nCreate a new Axes with an invisible y-axis and an independent x-axis\npositioned opposite to the original one (i.e. at top). The y-axis autoscale\nsetting will be inherited from the original Axes. To ensure that the tick\nmarks of both x-axes align, see `LinearLocator`.\n\nThe newly created Axes instance\n\nFor those who are 'picking' artists while using twiny, pick events are only\ncalled for the artists in the top-most Axes.\n\n"}, {"name": "axes.Axes.update_datalim", "path": "_as_gen/matplotlib.axes.axes.update_datalim", "type": "axes", "text": "\nExtend the `dataLim` Bbox to include the given points.\n\nIf no data is set currently, the Bbox will ignore its limits and set the bound\nto be the bounds of the xydata (xys). Otherwise, it will compute the bounds of\nthe union of its current data and the data in xys.\n\nThe points to include in the data limits Bbox. This can be either a list of\n(x, y) tuples or a Nx2 array.\n\nWhether to update the x/y limits.\n\n"}, {"name": "axes.Axes.use_sticky_edges", "path": "_as_gen/matplotlib.axes.axes.use_sticky_edges", "type": "axes", "text": "\nWhen autoscaling, whether to obey all `Artist.sticky_edges`.\n\nDefault is `True`.\n\nSetting this to `False` ensures that the specified margins will be applied,\neven if the plot includes an image, for example, which would otherwise force a\nview limit to coincide with its data limit.\n\nThe changing this property does not change the plot until `autoscale` or\n`autoscale_view` is called.\n\n"}, {"name": "axes.Axes.violin", "path": "_as_gen/matplotlib.axes.axes.violin", "type": "axes", "text": "\nDrawing function for violin plots.\n\nDraw a violin plot for each column of vpstats. Each filled area extends to\nrepresent the entire data range, with optional lines at the mean, the median,\nthe minimum, the maximum, and the quantiles values.\n\nA list of dictionaries containing stats for each violin plot. Required keys\nare:\n\nOptional keys are:\n\nThe positions of the violins. The ticks and limits are automatically set to\nmatch the positions.\n\nIf true, plots the violins vertically. Otherwise, plots the violins\nhorizontally.\n\nEither a scalar or a vector that sets the maximal width of each violin. The\ndefault is 0.5, which uses about half of the available horizontal space.\n\nIf true, will toggle rendering of the means.\n\nIf true, will toggle rendering of the extrema.\n\nIf true, will toggle rendering of the medians.\n\nA dictionary mapping each component of the violinplot to a list of the\ncorresponding collection instances created. The dictionary has the following\nkeys:\n\n"}, {"name": "axes.Axes.violinplot", "path": "_as_gen/matplotlib.axes.axes.violinplot", "type": "axes", "text": "\nMake a violin plot.\n\nMake a violin plot for each column of dataset or each vector in sequence\ndataset. Each filled area extends to represent the entire data range, with\noptional lines at the mean, the median, the minimum, the maximum, and user-\nspecified quantiles.\n\nThe input data.\n\nThe positions of the violins. The ticks and limits are automatically set to\nmatch the positions.\n\nIf true, creates a vertical violin plot. Otherwise, creates a horizontal\nviolin plot.\n\nEither a scalar or a vector that sets the maximal width of each violin. The\ndefault is 0.5, which uses about half of the available horizontal space.\n\nIf `True`, will toggle rendering of the means.\n\nIf `True`, will toggle rendering of the extrema.\n\nIf `True`, will toggle rendering of the medians.\n\nIf not None, set a list of floats in interval [0, 1] for each violin, which\nstands for the quantiles that will be rendered for that violin.\n\nDefines the number of points to evaluate each of the gaussian kernel density\nestimations at.\n\nThe method used to calculate the estimator bandwidth. This can be 'scott',\n'silverman', a scalar constant or a callable. If a scalar, this will be used\ndirectly as `kde.factor`. If a callable, it should take a `GaussianKDE`\ninstance as its only parameter and return a scalar. If None (default), 'scott'\nis used.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\ndataset\n\nA dictionary mapping each component of the violinplot to a list of the\ncorresponding collection instances created. The dictionary has the following\nkeys:\n\nViolin plot customization\n\nviolinplot(D)\n\n"}, {"name": "axes.Axes.vlines", "path": "_as_gen/matplotlib.axes.axes.vlines", "type": "axes", "text": "\nPlot vertical lines at each x from ymin to ymax.\n\nx-indexes where to plot the lines.\n\nRespective beginning and end of each line. If scalars are provided, all lines\nwill have same length.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, ymin, ymax, colors\n\nSee also\n\nhorizontal lines\n\nvertical line across the Axes\n\nCreating a timeline with lines, dates, and text\n\nhlines and vlines\n\nViolin plot customization\n\n"}, {"name": "axes.Axes.xaxis_date", "path": "_as_gen/matplotlib.axes.axes.xaxis_date", "type": "axes", "text": "\nSet up axis ticks and labels to treat data along the xaxis as dates.\n\nThe timezone used to create date labels.\n\n"}, {"name": "axes.Axes.xaxis_inverted", "path": "_as_gen/matplotlib.axes.axes.xaxis_inverted", "type": "axes", "text": "\nReturn whether the xaxis is oriented in the \"inverse\" direction.\n\nThe \"normal\" direction is increasing to the right for the x-axis and to the\ntop for the y-axis; the \"inverse\" direction is increasing to the left for the\nx-axis and to the bottom for the y-axis.\n\n"}, {"name": "axes.Axes.xcorr", "path": "_as_gen/matplotlib.axes.axes.xcorr", "type": "axes", "text": "\nPlot the cross correlation between x and y.\n\nThe correlation with lag k is defined as \\\\(\\sum_n x[n+k] \\cdot y^*[n]\\\\),\nwhere \\\\(y^*\\\\) is the complex conjugate of \\\\(y\\\\).\n\nA detrending function applied to x and y. It must have the signature\n\nIf `True`, input vectors are normalised to unit length.\n\nDetermines the plot style.\n\nIf `True`, vertical lines are plotted from 0 to the xcorr value using\n`Axes.vlines`. Additionally, a horizontal line is plotted at y=0 using\n`Axes.axhline`.\n\nIf `False`, markers are plotted at the xcorr values using `Axes.plot`.\n\nNumber of lags to show. If None, will return all `2 * len(x) - 1` lags.\n\nThe lag vector.\n\nThe auto correlation vector.\n\n`Artist` added to the Axes of the correlation:\n\nHorizontal line at 0 if usevlines is True None usevlines is False.\n\nThe linestyle for plotting the data points. Only used if usevlines is `False`.\n\nThe marker for plotting the data points. Only used if usevlines is `False`.\n\nIf given, the following parameters also accept a string `s`, which is\ninterpreted as `data[s]` (unless this raises an exception):\n\nx, y\n\nAdditional parameters are passed to `Axes.vlines` and `Axes.axhline` if\nusevlines is `True`; otherwise they are passed to `Axes.plot`.\n\nThe cross correlation is performed with `numpy.correlate` with `mode =\n\"full\"`.\n\nCross- and Auto-Correlation Demo\n\n"}, {"name": "axes.Axes.yaxis_date", "path": "_as_gen/matplotlib.axes.axes.yaxis_date", "type": "axes", "text": "\nSet up axis ticks and labels to treat data along the yaxis as dates.\n\nThe timezone used to create date labels.\n\n"}, {"name": "axes.Axes.yaxis_inverted", "path": "_as_gen/matplotlib.axes.axes.yaxis_inverted", "type": "axes", "text": "\nReturn whether the yaxis is oriented in the \"inverse\" direction.\n\nThe \"normal\" direction is increasing to the right for the x-axis and to the\ntop for the y-axis; the \"inverse\" direction is increasing to the left for the\nx-axis and to the bottom for the y-axis.\n\n"}, {"name": "axes.Axes.zorder", "path": "_as_gen/matplotlib.axes.axes.zorder", "type": "axes", "text": "\n\n"}, {"name": "axes.subplot_class_factory", "path": "_as_gen/matplotlib.axes.subplot_class_factory", "type": "axes", "text": "\n\n"}, {"name": "axes.SubplotBase", "path": "_as_gen/matplotlib.axes.subplotbase", "type": "axes", "text": "\nBases: `object`\n\nBase class for subplots, which are `Axes` instances with additional methods to\nfacilitate generating and manipulating a set of `Axes` within a figure.\n\nThe array of subplots in the figure has dimensions `(nrows, ncols)`, and index\nis the index of the subplot being created. index starts at 1 in the upper left\ncorner and increases to the right.\n\nIf nrows, ncols, and index are all single digit numbers, then args can be\npassed as a single 3-digit number (e.g. 234 for (2, 3, 4)).\n\nKeyword arguments are passed to the Axes (sub)class constructor.\n\n[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3).\n\nDeprecated since version 3.4.\n\n[Deprecated] Get the subplot geometry, e.g., (2, 2, 3).\n\nDeprecated since version 3.4.\n\nReturn the `GridSpec` instance associated with the subplot.\n\nReturn the `SubplotSpec` instance associated with the subplot.\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\nOnly show \"outer\" labels and tick labels.\n\nx-labels are only kept for subplots on the last row (or first row, if labels\nare on the top side); y-labels only for subplots on the first column (or last\ncolumn, if labels are on the right side).\n\nSet the `SubplotSpec`. instance associated with the subplot.\n\n[Deprecated] Update the subplot position from `self.figure.subplotpars`.\n\nDeprecated since version 3.4.\n\n"}, {"name": "axes.SubplotBase.change_geometry()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.change_geometry", "type": "axes", "text": "\n[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3).\n\nDeprecated since version 3.4.\n\n"}, {"name": "axes.SubplotBase.get_geometry()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.get_geometry", "type": "axes", "text": "\n[Deprecated] Get the subplot geometry, e.g., (2, 2, 3).\n\nDeprecated since version 3.4.\n\n"}, {"name": "axes.SubplotBase.get_gridspec()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.get_gridspec", "type": "axes", "text": "\nReturn the `GridSpec` instance associated with the subplot.\n\n"}, {"name": "axes.SubplotBase.get_subplotspec()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.get_subplotspec", "type": "axes", "text": "\nReturn the `SubplotSpec` instance associated with the subplot.\n\n"}, {"name": "axes.SubplotBase.is_first_col()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_first_col", "type": "axes", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axes.SubplotBase.is_first_row()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_first_row", "type": "axes", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axes.SubplotBase.is_last_col()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_last_col", "type": "axes", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axes.SubplotBase.is_last_row()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_last_row", "type": "axes", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axes.SubplotBase.label_outer()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.label_outer", "type": "axes", "text": "\nOnly show \"outer\" labels and tick labels.\n\nx-labels are only kept for subplots on the last row (or first row, if labels\nare on the top side); y-labels only for subplots on the first column (or last\ncolumn, if labels are on the right side).\n\n"}, {"name": "axes.SubplotBase.set_subplotspec()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.set_subplotspec", "type": "axes", "text": "\nSet the `SubplotSpec`. instance associated with the subplot.\n\n"}, {"name": "axes.SubplotBase.update_params()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.update_params", "type": "axes", "text": "\n[Deprecated] Update the subplot position from `self.figure.subplotpars`.\n\nDeprecated since version 3.4.\n\n"}, {"name": "axes_grid", "path": "toolkits/axes_grid", "type": "axes_grid", "text": "\nNote\n\nAxesGrid has been a part of matplotlib since v 0.99. Originally, the toolkit\nused the axes_grid namespace. In more recent versions, the toolkit has been\nsplit into axes_grid1 and axisartist. While axes_grid is maintained for the\nbackward compatibility, use of axes_grid1 and axisartist is recommended. For\nthe documentation on `axes_grid`, see the previous version of the docs.\n\n"}, {"name": "axes_grid1", "path": "toolkits/axes_grid1", "type": "axes_grid1", "text": "\n`mpl_toolkits.axes_grid1` provides a framework of helper classes to adjust the\npositioning of multiple fixed-aspect Axes (e.g., displaying images). It can be\ncontrasted with the `aspect` property of Matplotlib Axes, which adjusts the\nposition of a single Axes.\n\nSee Overview of mpl_toolkits.axes_grid1 for a guide on the usage of\naxes_grid1.\n\nThe submodules of the axes_grid1 API are:\n\n`axes_grid1.anchored_artists`\n\n`axes_grid1.axes_divider`\n\nHelper classes to adjust the positions of multiple axes at drawing time.\n\n`axes_grid1.axes_grid`\n\n`axes_grid1.axes_rgb`\n\n`axes_grid1.axes_size`\n\nProvides classes of simple units that will be used with AxesDivider class (or\nothers) to determine the size of each axes.\n\n`axes_grid1.inset_locator`\n\nA collection of functions and objects for creating or placing inset axes.\n\n`axes_grid1.mpl_axes`\n\n`axes_grid1.parasite_axes`\n\n"}, {"name": "axes_grid1.anchored_artists", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists", "type": "axes_grid1", "text": "\n`AnchoredAuxTransformBox`(transform, loc[, ...])\n\nAn anchored container with transformed coordinates.\n\n`AnchoredDirectionArrows`(transform, label_x, ...)\n\nDraw two perpendicular arrows to indicate directions.\n\n`AnchoredDrawingArea`(width, height, xdescent, ...)\n\nAn anchored container with a fixed size and fillable DrawingArea.\n\n`AnchoredEllipse`(transform, width, height, ...)\n\nDraw an anchored ellipse of a given size.\n\n`AnchoredSizeBar`(transform, size, label, loc)\n\nDraw a horizontal scale bar with a center-aligned label underneath.\n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredAuxTransformBox", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredauxtransformbox", "type": "axes_grid1", "text": "\nBases: `matplotlib.offsetbox.AnchoredOffsetbox`\n\nAn anchored container with transformed coordinates.\n\nArtists added to the drawing_area are scaled according to the coordinates of\nthe transformation used. The dimensions of this artist will scale to contain\nthe artists added.\n\nThe transformation object for the coordinate system in use, i.e.,\n`matplotlib.axes.Axes.transData`.\n\nLocation of this artist. Valid locations are 'upper left', 'upper center',\n'upper right', 'center left', 'center', 'center right', 'lower left', 'lower\ncenter, 'lower right'. For backward compatibility, numeric values are accepted\nas well. See the parameter loc of `Legend` for details.\n\nPadding around the child objects, in fraction of the font size.\n\nBorder padding, in fraction of the font size.\n\nFont property used as a reference for paddings.\n\nIf True, draw a box around this artists.\n\nKeyword arguments forwarded to `AnchoredOffsetbox`.\n\nTo display an ellipse in the upper left, with a width of 0.1 and height of 0.4\nin data coordinates:\n\nA container for artists to display.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\nAnnotations\n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredAuxTransformBox.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredauxtransformbox#mpl_toolkits.axes_grid1.anchored_artists.AnchoredAuxTransformBox.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredDirectionArrows", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddirectionarrows", "type": "axes_grid1", "text": "\nBases: `matplotlib.offsetbox.AnchoredOffsetbox`\n\nDraw two perpendicular arrows to indicate directions.\n\nThe transformation object for the coordinate system in use, i.e.,\n`matplotlib.axes.Axes.transAxes`.\n\nLabel text for the x and y arrows\n\nLength of the arrow, given in coordinates of transform.\n\nSize of label strings, given in coordinates of transform.\n\nLocation of this ellipse. Valid locations are 'upper left', 'upper center',\n'upper right', 'center left', 'center', 'center right', 'lower left', 'lower\ncenter, 'lower right'. For backward compatibility, numeric values are accepted\nas well. See the parameter loc of `Legend` for details.\n\nThe angle of the arrows in degrees.\n\nThe ratio of the length of arrow_x and arrow_y. Negative numbers can be used\nto change the direction.\n\nPadding around the labels and arrows, in fraction of the font size.\n\nBorder padding, in fraction of the font size.\n\nIf True, draw a box around the arrows and labels.\n\nColor for the arrows and labels.\n\nAlpha values of the arrows and labels\n\nSeparation between the arrows and labels in coordinates of transform.\n\nFont properties for the label text.\n\nFraction of the arrow behind the arrow crossing.\n\nWidth of arrow head, sent to ArrowStyle.\n\nLength of arrow head, sent to ArrowStyle.\n\nWidth of arrow tail, sent to ArrowStyle.\n\nProperties of the text and arrows, passed to `textpath.TextPath` and\n`patches.FancyArrowPatch`.\n\nKeyword arguments forwarded to `AnchoredOffsetbox`.\n\nIf prop is passed as a keyword argument, but fontproperties is not, then prop\nis be assumed to be the intended fontproperties. Using both prop and\nfontproperties is not supported.\n\nUsing several of the optional parameters, creating downward pointing arrow and\nhigh contrast text labels.\n\nArrow x and y\n\nPath for arrow labels\n\nPatch for arrow labels\n\nContainer for the arrows and labels.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\nAnchored Direction Arrow\n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredDirectionArrows.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddirectionarrows#mpl_toolkits.axes_grid1.anchored_artists.AnchoredDirectionArrows.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredDrawingArea", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddrawingarea", "type": "axes_grid1", "text": "\nBases: `matplotlib.offsetbox.AnchoredOffsetbox`\n\nAn anchored container with a fixed size and fillable DrawingArea.\n\nArtists added to the drawing_area will have their coordinates interpreted as\npixels. Any transformations set on the artists will be overridden.\n\nwidth and height of the container, in pixels.\n\ndescent of the container in the x- and y- direction, in pixels.\n\nLocation of this artist. Valid locations are 'upper left', 'upper center',\n'upper right', 'center left', 'center', 'center right', 'lower left', 'lower\ncenter, 'lower right'. For backward compatibility, numeric values are accepted\nas well. See the parameter loc of `Legend` for details.\n\nPadding around the child objects, in fraction of the font size.\n\nBorder padding, in fraction of the font size.\n\nFont property used as a reference for paddings.\n\nIf True, draw a box around this artists.\n\nKeyword arguments forwarded to `AnchoredOffsetbox`.\n\nTo display blue and red circles of different sizes in the upper right of an\naxes ax:\n\nA container for artists to display.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\nSimple Anchored Artists\n\nAnnotations\n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredDrawingArea.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddrawingarea#mpl_toolkits.axes_grid1.anchored_artists.AnchoredDrawingArea.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredEllipse", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredellipse", "type": "axes_grid1", "text": "\nBases: `matplotlib.offsetbox.AnchoredOffsetbox`\n\nDraw an anchored ellipse of a given size.\n\nThe transformation object for the coordinate system in use, i.e.,\n`matplotlib.axes.Axes.transData`.\n\nWidth and height of the ellipse, given in coordinates of transform.\n\nRotation of the ellipse, in degrees, anti-clockwise.\n\nLocation of this ellipse. Valid locations are 'upper left', 'upper center',\n'upper right', 'center left', 'center', 'center right', 'lower left', 'lower\ncenter, 'lower right'. For backward compatibility, numeric values are accepted\nas well. See the parameter loc of `Legend` for details.\n\nPadding around the ellipse, in fraction of the font size.\n\nBorder padding, in fraction of the font size.\n\nIf True, draw a box around the ellipse.\n\nFont property used as a reference for paddings.\n\nKeyword arguments forwarded to `AnchoredOffsetbox`.\n\nEllipse patch drawn.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\nSimple Anchored Artists\n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredEllipse.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredellipse#mpl_toolkits.axes_grid1.anchored_artists.AnchoredEllipse.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredSizeBar", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredsizebar", "type": "axes_grid1", "text": "\nBases: `matplotlib.offsetbox.AnchoredOffsetbox`\n\nDraw a horizontal scale bar with a center-aligned label underneath.\n\nThe transformation object for the coordinate system in use, i.e.,\n`matplotlib.axes.Axes.transData`.\n\nHorizontal length of the size bar, given in coordinates of transform.\n\nLabel to display.\n\nLocation of this ellipse. Valid locations are 'upper left', 'upper center',\n'upper right', 'center left', 'center', 'center right', 'lower left', 'lower\ncenter, 'lower right'. For backward compatibility, numeric values are accepted\nas well. See the parameter loc of `Legend` for details.\n\nPadding around the label and size bar, in fraction of the font size.\n\nBorder padding, in fraction of the font size.\n\nSeparation between the label and the size bar, in points.\n\nIf True, draw a box around the horizontal bar and label.\n\nVertical length of the size bar, given in coordinates of transform.\n\nColor for the size bar and label.\n\nIf True, the label will be over the size bar.\n\nFont properties for the label text.\n\nIf True and if size_vertical is nonzero, the size bar will be filled in with\nthe color specified by the size bar. Defaults to True if size_vertical is\ngreater than zero and False otherwise.\n\nKeyword arguments forwarded to `AnchoredOffsetbox`.\n\nIf prop is passed as a keyword argument, but fontproperties is not, then prop\nis be assumed to be the intended fontproperties. Using both prop and\nfontproperties is not supported.\n\nUsing all the optional parameters\n\nContainer for the size bar.\n\nContainer for the label of the size bar.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\nInset Locator Demo2\n\nSimple Anchored Artists\n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredSizeBar.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredsizebar#mpl_toolkits.axes_grid1.anchored_artists.AnchoredSizeBar.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.axes_divider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider", "type": "axes_grid1", "text": "\nHelper classes to adjust the positions of multiple axes at drawing time.\n\n`AxesDivider`(axes[, xref, yref])\n\nDivider based on the pre-existing axes.\n\n`AxesLocator`(axes_divider, nx, ny[, nx1, ny1])\n\nA callable object which returns the position and size of a given AxesDivider\ncell.\n\n`Divider`(fig, pos, horizontal, vertical[, ...])\n\nAn Axes positioning class.\n\n`HBoxDivider`(fig, *args[, horizontal, ...])\n\nA `SubplotDivider` for laying out axes horizontally, while ensuring that they\nhave equal heights.\n\n`SubplotDivider`(fig, *args[, horizontal, ...])\n\nThe Divider class whose rectangle area is specified as a subplot geometry.\n\n`VBoxDivider`(fig, *args[, horizontal, ...])\n\nA `SubplotDivider` for laying out axes vertically, while ensuring that they\nhave equal widths.\n\n`make_axes_area_auto_adjustable`(ax[, ...])\n\n`make_axes_locatable`(axes)\n\n"}, {"name": "axes_grid1.axes_divider.AxesDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_divider.Divider`\n\nDivider based on the pre-existing axes.\n\nCreate an axes at the given position with the same height (or width) of the\nmain axes.\n\n[\"left\"|\"right\"|\"bottom\"|\"top\"]\n\nsize and pad should be axes_grid.axes_size compatible.\n\nReturn the anchor.\n\nReturn aspect.\n\nReturn the position of the rectangle.\n\nAdd a new axes on the right (or left) side of the main axes.\n\nThe axes width. float or str arguments are interpreted as\n`axes_size.from_any(size, AxesX(<main_axes>))`.\n\nPadding between the axes. float or str arguments are interpreted as\n`axes_size.from_any(size, AxesX(<main_axes>))`. Defaults to\n`rcParams[\"figure.subplot.wspace\"]` (default: `0.2`) times the main axes\nwidth.\n\nIf False, the new axes is appended at the end of the list, i.e., it became the\nright-most axes. If True, it is inserted at the start of the list, and becomes\nthe left-most axes.\n\nAll extra keywords arguments are passed to the created axes. If axes_class is\ngiven, the new axes will be created as an instance of the given class.\nOtherwise, the same class of the main axes will be used.\n\nAdd a new axes on the top (or bottom) side of the main axes.\n\nThe axes height. float or str arguments are interpreted as\n`axes_size.from_any(size, AxesY(<main_axes>))`.\n\nPadding between the axes. float or str arguments are interpreted as\n`axes_size.from_any(size, AxesY(<main_axes>))`. Defaults to\n`rcParams[\"figure.subplot.hspace\"]` (default: `0.2`) times the main axes\nheight.\n\nIf False, the new axes is appended at the end of the list, i.e., it became the\nright-most axes. If True, it is inserted at the start of the list, and becomes\nthe left-most axes.\n\nAll extra keywords arguments are passed to the created axes. If axes_class is\ngiven, the new axes will be created as an instance of the given class.\nOtherwise, the same class of the main axes will be used.\n\nColorbar with AxesDivider\n\nMake Room For Ylabel Using Axesgrid\n\nScatter Histogram (Locatable Axes)\n\nSimple Colorbar\n\nTight Layout guide\n\n"}, {"name": "axes_grid1.axes_divider.AxesDivider.append_axes()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.append_axes", "type": "axes_grid1", "text": "\nCreate an axes at the given position with the same height (or width) of the\nmain axes.\n\n[\"left\"|\"right\"|\"bottom\"|\"top\"]\n\nsize and pad should be axes_grid.axes_size compatible.\n\n"}, {"name": "axes_grid1.axes_divider.AxesDivider.get_anchor()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_anchor", "type": "axes_grid1", "text": "\nReturn the anchor.\n\n"}, {"name": "axes_grid1.axes_divider.AxesDivider.get_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_aspect", "type": "axes_grid1", "text": "\nReturn aspect.\n\n"}, {"name": "axes_grid1.axes_divider.AxesDivider.get_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_position", "type": "axes_grid1", "text": "\nReturn the position of the rectangle.\n\n"}, {"name": "axes_grid1.axes_divider.AxesDivider.get_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_subplotspec", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.AxesDivider.new_horizontal()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.new_horizontal", "type": "axes_grid1", "text": "\nAdd a new axes on the right (or left) side of the main axes.\n\nThe axes width. float or str arguments are interpreted as\n`axes_size.from_any(size, AxesX(<main_axes>))`.\n\nPadding between the axes. float or str arguments are interpreted as\n`axes_size.from_any(size, AxesX(<main_axes>))`. Defaults to\n`rcParams[\"figure.subplot.wspace\"]` (default: `0.2`) times the main axes\nwidth.\n\nIf False, the new axes is appended at the end of the list, i.e., it became the\nright-most axes. If True, it is inserted at the start of the list, and becomes\nthe left-most axes.\n\nAll extra keywords arguments are passed to the created axes. If axes_class is\ngiven, the new axes will be created as an instance of the given class.\nOtherwise, the same class of the main axes will be used.\n\n"}, {"name": "axes_grid1.axes_divider.AxesDivider.new_vertical()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.new_vertical", "type": "axes_grid1", "text": "\nAdd a new axes on the top (or bottom) side of the main axes.\n\nThe axes height. float or str arguments are interpreted as\n`axes_size.from_any(size, AxesY(<main_axes>))`.\n\nPadding between the axes. float or str arguments are interpreted as\n`axes_size.from_any(size, AxesY(<main_axes>))`. Defaults to\n`rcParams[\"figure.subplot.hspace\"]` (default: `0.2`) times the main axes\nheight.\n\nIf False, the new axes is appended at the end of the list, i.e., it became the\nright-most axes. If True, it is inserted at the start of the list, and becomes\nthe left-most axes.\n\nAll extra keywords arguments are passed to the created axes. If axes_class is\ngiven, the new axes will be created as an instance of the given class.\nOtherwise, the same class of the main axes will be used.\n\n"}, {"name": "axes_grid1.axes_divider.AxesLocator", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axeslocator", "type": "axes_grid1", "text": "\nBases: `object`\n\nA callable object which returns the position and size of a given AxesDivider\ncell.\n\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\nSame as nx and nx1, but for row positions.\n\nCall self as a function.\n\n"}, {"name": "axes_grid1.axes_divider.AxesLocator.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axeslocator#mpl_toolkits.axes_grid1.axes_divider.AxesLocator.__call__", "type": "axes_grid1", "text": "\nCall self as a function.\n\n"}, {"name": "axes_grid1.axes_divider.AxesLocator.get_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axeslocator#mpl_toolkits.axes_grid1.axes_divider.AxesLocator.get_subplotspec", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.Divider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider", "type": "axes_grid1", "text": "\nBases: `object`\n\nAn Axes positioning class.\n\nThe divider is initialized with lists of horizontal and vertical sizes\n(`mpl_toolkits.axes_grid1.axes_size`) based on which a given rectangular area\nwill be divided.\n\nThe `new_locator` method then creates a callable object that can be used as\nthe axes_locator of the axes.\n\nPosition of the rectangle that will be divided.\n\nSizes for horizontal division.\n\nSizes for vertical division.\n\nWhether overall rectangular area is reduced so that the relative part of the\nhorizontal and vertical scales have the same scale.\n\nPlacement of the reduced rectangle, when aspect is True.\n\nReturn the anchor.\n\nReturn aspect.\n\nReturn horizontal sizes.\n\nReturn the position of the rectangle.\n\nReturn vertical sizes.\n\n[Deprecated]\n\nDeprecated since version 3.5:\n\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\nSame as nx and nx1, but for row positions.\n\nReturn a new `AxesLocator` for the specified cell.\n\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\nSame as nx and nx1, but for row positions.\n\nEither an (x, y) pair of relative coordinates (0 is left or bottom, 1 is right\nor top), 'C' (center), or a cardinal direction ('SW', southwest, is bottom\nleft, etc.).\n\nSee also\n\nsizes for horizontal division\n\nSet the position of the rectangle.\n\nposition of the rectangle that will be divided\n\nsizes for vertical division\n\n"}, {"name": "axes_grid1.axes_divider.Divider.add_auto_adjustable_area()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.add_auto_adjustable_area", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.Divider.append_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.append_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_anchor()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_anchor", "type": "axes_grid1", "text": "\nReturn the anchor.\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_aspect", "type": "axes_grid1", "text": "\nReturn aspect.\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_horizontal()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_horizontal", "type": "axes_grid1", "text": "\nReturn horizontal sizes.\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_horizontal_sizes()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_horizontal_sizes", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_locator", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_position", "type": "axes_grid1", "text": "\nReturn the position of the rectangle.\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_position_runtime()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_position_runtime", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_vertical()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_vertical", "type": "axes_grid1", "text": "\nReturn vertical sizes.\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_vertical_sizes()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_vertical_sizes", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_vsize_hsize()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_vsize_hsize", "type": "axes_grid1", "text": "\n[Deprecated]\n\nDeprecated since version 3.5:\n\n"}, {"name": "axes_grid1.axes_divider.Divider.locate()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.locate", "type": "axes_grid1", "text": "\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\nSame as nx and nx1, but for row positions.\n\n"}, {"name": "axes_grid1.axes_divider.Divider.new_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.new_locator", "type": "axes_grid1", "text": "\nReturn a new `AxesLocator` for the specified cell.\n\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\nSame as nx and nx1, but for row positions.\n\n"}, {"name": "axes_grid1.axes_divider.Divider.set_anchor()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_anchor", "type": "axes_grid1", "text": "\nEither an (x, y) pair of relative coordinates (0 is left or bottom, 1 is right\nor top), 'C' (center), or a cardinal direction ('SW', southwest, is bottom\nleft, etc.).\n\nSee also\n\n"}, {"name": "axes_grid1.axes_divider.Divider.set_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_aspect", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.Divider.set_horizontal()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_horizontal", "type": "axes_grid1", "text": "\nsizes for horizontal division\n\n"}, {"name": "axes_grid1.axes_divider.Divider.set_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_locator", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.Divider.set_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_position", "type": "axes_grid1", "text": "\nSet the position of the rectangle.\n\nposition of the rectangle that will be divided\n\n"}, {"name": "axes_grid1.axes_divider.Divider.set_vertical()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_vertical", "type": "axes_grid1", "text": "\nsizes for vertical division\n\n"}, {"name": "axes_grid1.axes_divider.HBoxDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.hboxdivider", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_divider.SubplotDivider`\n\nA `SubplotDivider` for laying out axes horizontally, while ensuring that they\nhave equal heights.\n\n(Source code, png, pdf)\n\nThe array of subplots in the figure has dimensions `(nrows, ncols)`, and index\nis the index of the subplot being created. index starts at 1 in the upper left\ncorner and increases to the right.\n\nIf nrows, ncols, and index are all single digit numbers, then args can be\npassed as a single 3-digit number (e.g. 234 for (2, 3, 4)).\n\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\nSame as nx and nx1, but for row positions.\n\nCreate a new `AxesLocator` for the specified cell.\n\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\nHBoxDivider demo\n\n"}, {"name": "axes_grid1.axes_divider.HBoxDivider.locate()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.hboxdivider#mpl_toolkits.axes_grid1.axes_divider.HBoxDivider.locate", "type": "axes_grid1", "text": "\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\nSame as nx and nx1, but for row positions.\n\n"}, {"name": "axes_grid1.axes_divider.HBoxDivider.new_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.hboxdivider#mpl_toolkits.axes_grid1.axes_divider.HBoxDivider.new_locator", "type": "axes_grid1", "text": "\nCreate a new `AxesLocator` for the specified cell.\n\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\n"}, {"name": "axes_grid1.axes_divider.make_axes_area_auto_adjustable", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.make_axes_area_auto_adjustable", "type": "axes_grid1", "text": "\nMake Room For Ylabel Using Axesgrid\n\n"}, {"name": "axes_grid1.axes_divider.make_axes_locatable", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.make_axes_locatable", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_divider.SubplotDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_divider.Divider`\n\nThe Divider class whose rectangle area is specified as a subplot geometry.\n\nThe array of subplots in the figure has dimensions `(nrows, ncols)`, and index\nis the index of the subplot being created. index starts at 1 in the upper left\ncorner and increases to the right.\n\nIf nrows, ncols, and index are all single digit numbers, then args can be\npassed as a single 3-digit number (e.g. 234 for (2, 3, 4)).\n\n[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3).\n\nDeprecated since version 3.4.\n\n[Deprecated] Get the subplot geometry, e.g., (2, 2, 3).\n\nDeprecated since version 3.4.\n\nReturn the bounds of the subplot box.\n\nGet the SubplotSpec instance.\n\nSet the SubplotSpec instance.\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.change_geometry()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.change_geometry", "type": "axes_grid1", "text": "\n[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3).\n\nDeprecated since version 3.4.\n\n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.get_geometry()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.get_geometry", "type": "axes_grid1", "text": "\n[Deprecated] Get the subplot geometry, e.g., (2, 2, 3).\n\nDeprecated since version 3.4.\n\n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.get_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.get_position", "type": "axes_grid1", "text": "\nReturn the bounds of the subplot box.\n\n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.get_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.get_subplotspec", "type": "axes_grid1", "text": "\nGet the SubplotSpec instance.\n\n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.set_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.set_subplotspec", "type": "axes_grid1", "text": "\nSet the SubplotSpec instance.\n\n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.update_params()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.update_params", "type": "axes_grid1", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axes_grid1.axes_divider.VBoxDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.vboxdivider", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_divider.SubplotDivider`\n\nA `SubplotDivider` for laying out axes vertically, while ensuring that they\nhave equal widths.\n\nThe array of subplots in the figure has dimensions `(nrows, ncols)`, and index\nis the index of the subplot being created. index starts at 1 in the upper left\ncorner and increases to the right.\n\nIf nrows, ncols, and index are all single digit numbers, then args can be\npassed as a single 3-digit number (e.g. 234 for (2, 3, 4)).\n\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\nSame as nx and nx1, but for row positions.\n\nCreate a new `AxesLocator` for the specified cell.\n\nIntegers specifying the row-position of the cell. When ny1 is None, a single\nny-th row is specified. Otherwise location of rows spanning between ny to ny1\n(but excluding ny1-th row) is specified.\n\n"}, {"name": "axes_grid1.axes_divider.VBoxDivider.locate()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.vboxdivider#mpl_toolkits.axes_grid1.axes_divider.VBoxDivider.locate", "type": "axes_grid1", "text": "\nIntegers specifying the column-position of the cell. When nx1 is None, a\nsingle nx-th column is specified. Otherwise location of columns spanning\nbetween nx to nx1 (but excluding nx1-th column) is specified.\n\nSame as nx and nx1, but for row positions.\n\n"}, {"name": "axes_grid1.axes_divider.VBoxDivider.new_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.vboxdivider#mpl_toolkits.axes_grid1.axes_divider.VBoxDivider.new_locator", "type": "axes_grid1", "text": "\nCreate a new `AxesLocator` for the specified cell.\n\nIntegers specifying the row-position of the cell. When ny1 is None, a single\nny-th row is specified. Otherwise location of rows spanning between ny to ny1\n(but excluding ny1-th row) is specified.\n\n"}, {"name": "axes_grid1.axes_grid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid", "type": "axes_grid1", "text": "\n`AxesGrid`\n\nalias of `mpl_toolkits.axes_grid1.axes_grid.ImageGrid`\n\n`CbarAxes`(*args, orientation, **kwargs)\n\n[Deprecated]\n\n`CbarAxesBase`(*args, orientation, **kwargs)\n\n`Grid`(fig, rect, nrows_ncols[, ngrids, ...])\n\nA grid of Axes.\n\n`ImageGrid`(fig, rect, nrows_ncols[, ngrids, ...])\n\n"}, {"name": "axes_grid1.axes_grid.AxesGrid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.axesgrid", "type": "axes_grid1", "text": "\nalias of `mpl_toolkits.axes_grid1.axes_grid.ImageGrid`\n\n"}, {"name": "axes_grid1.axes_grid.CbarAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxes", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase`,\n`mpl_toolkits.axes_grid1.mpl_axes.Axes`\n\n[Deprecated]\n\nDeprecated since version 3.5:\n\nBuild an Axes in a figure.\n\nThe Axes is built in the `Figure` fig.\n\nThe Axes is built in the rectangle rect. rect is in `Figure` coordinates.\n\nThe x or y `axis` is shared with the x or y axis in the input `Axes`.\n\nWhether the Axes frame is visible.\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See\n`set_box_aspect` for details.\n\nOther optional keyword arguments:\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nThe new `Axes` object.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.axes_grid.CbarAxes.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxes#mpl_toolkits.axes_grid1.axes_grid.CbarAxes.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.axes_grid.CbarAxesBase", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase", "type": "axes_grid1", "text": "\nBases: `object`\n\n"}, {"name": "axes_grid1.axes_grid.CbarAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase#mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase.cla", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_grid.CbarAxesBase.colorbar()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase#mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase.colorbar", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_grid.CbarAxesBase.toggle_label()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase#mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase.toggle_label", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_grid.Grid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid", "type": "axes_grid1", "text": "\nBases: `object`\n\nA grid of Axes.\n\nIn Matplotlib, the axes location (and size) is specified in normalized figure\ncoordinates. This may not be ideal for images that needs to be displayed with\na given aspect ratio; for example, it is difficult to display multiple images\nof a same size with some fixed padding between them. AxesGrid can be used in\nsuch case.\n\nThe parent figure.\n\nThe axes position, as a `(left, bottom, width, height)` tuple or as a three-\ndigit subplot position code (e.g., \"121\").\n\nNumber of rows and columns in the grid.\n\nIf not None, only the first ngrids axes in the grid are created.\n\nWhether axes are created in row-major (\"row by row\") or column-major order\n(\"column by column\"). This also affects the order in which axes are accessed\nusing indexing (`grid[index]`).\n\nPadding or (horizontal padding, vertical padding) between axes, in inches.\n\nWhether all axes share their x- and y-axis. Overrides share_x and share_y.\n\nWhether all axes of a column share their x-axis.\n\nWhether all axes of a row share their y-axis.\n\nDetermines which axes will get tick labels:\n\nWhether the axes aspect ratio follows the aspect ratio of the data limits.\n\nReturn the aspect of the SubplotDivider.\n\nReturn the axes padding.\n\nPadding (horizontal pad, vertical pad) in inches.\n\nReturn the number of rows and columns of the grid as (nrows, ncols).\n\n[Deprecated]\n\nDeprecated since version 3.5:\n\nSet the aspect of the SubplotDivider.\n\nSet the padding between the axes.\n\nThe padding (horizontal pad, vertical pad) in inches.\n\nDefine which axes have tick labels.\n\nThe label mode:\n\n"}, {"name": "axes_grid1.axes_grid.Grid.get_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_aspect", "type": "axes_grid1", "text": "\nReturn the aspect of the SubplotDivider.\n\n"}, {"name": "axes_grid1.axes_grid.Grid.get_axes_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_axes_locator", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_grid.Grid.get_axes_pad()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_axes_pad", "type": "axes_grid1", "text": "\nReturn the axes padding.\n\nPadding (horizontal pad, vertical pad) in inches.\n\n"}, {"name": "axes_grid1.axes_grid.Grid.get_divider()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_divider", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_grid.Grid.get_geometry()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_geometry", "type": "axes_grid1", "text": "\nReturn the number of rows and columns of the grid as (nrows, ncols).\n\n"}, {"name": "axes_grid1.axes_grid.Grid.get_vsize_hsize()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_vsize_hsize", "type": "axes_grid1", "text": "\n[Deprecated]\n\nDeprecated since version 3.5:\n\n"}, {"name": "axes_grid1.axes_grid.Grid.set_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_aspect", "type": "axes_grid1", "text": "\nSet the aspect of the SubplotDivider.\n\n"}, {"name": "axes_grid1.axes_grid.Grid.set_axes_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_axes_locator", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_grid.Grid.set_axes_pad()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_axes_pad", "type": "axes_grid1", "text": "\nSet the padding between the axes.\n\nThe padding (horizontal pad, vertical pad) in inches.\n\n"}, {"name": "axes_grid1.axes_grid.Grid.set_label_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_label_mode", "type": "axes_grid1", "text": "\nDefine which axes have tick labels.\n\nThe label mode:\n\n"}, {"name": "axes_grid1.axes_grid.ImageGrid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.imagegrid", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_grid.Grid`\n\nThe parent figure.\n\nThe axes position, as a `(left, bottom, width, height)` tuple or as a three-\ndigit subplot position code (e.g., \"121\").\n\nNumber of rows and columns in the grid.\n\nIf not None, only the first ngrids axes in the grid are created.\n\nWhether axes are created in row-major (\"row by row\") or column-major order\n(\"column by column\"). This also affects the order in which axes are accessed\nusing indexing (`grid[index]`).\n\nPadding or (horizontal padding, vertical padding) between axes, in inches.\n\nWhether all axes share their x- and y-axis.\n\nWhether the axes aspect ratio follows the aspect ratio of the data limits.\n\nDetermines which axes will get tick labels:\n\nWhether to create a colorbar for \"each\" axes, a \"single\" colorbar for the\nentire grid, colorbars only for axes on the \"edge\" determined by\ncbar_location, or no colorbars. The colorbars are stored in the `cbar_axes`\nattribute.\n\nPadding between the image axes and the colorbar axes.\n\nColorbar size.\n\nIf True, each axes in the grid has a cax attribute that is bound to associated\ncbar_axes.\n\n"}, {"name": "axes_grid1.axes_rgb", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb", "type": "axes_grid1", "text": "\n`RGBAxes`(*args[, pad])\n\n4-panel imshow (RGB, R, G, B).\n\n`make_rgb_axes`(ax[, pad, axes_class])\n\n"}, {"name": "axes_grid1.axes_rgb.make_rgb_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb.make_rgb_axes", "type": "axes_grid1", "text": "\nFraction of the axes height.\n\nShowing RGB channels using RGBAxes\n\n"}, {"name": "axes_grid1.axes_rgb.RGBAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb.rgbaxes", "type": "axes_grid1", "text": "\nBases: `object`\n\n4-panel imshow (RGB, R, G, B).\n\nLayout:\n\nRGB\n\nR\n\nG\n\nB\n\nSubclasses can override the `_defaultAxesClass` attribute.\n\nThe axes object for the three-channel imshow.\n\nThe axes object for the red channel imshow.\n\nThe axes object for the green channel imshow.\n\nThe axes object for the blue channel imshow.\n\nfraction of the axes height to put as padding.\n\nUnpacked into axes_class() init for RGB\n\nUnpacked into axes_class() init for RGB, R, G, B axes\n\nCreate the four images {rgb, r, g, b}.\n\nThe red, green, and blue arrays.\n\nkwargs get unpacked into the imshow calls for the four images.\n\nShowing RGB channels using RGBAxes\n\n"}, {"name": "axes_grid1.axes_rgb.RGBAxes.imshow_rgb()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb.rgbaxes#mpl_toolkits.axes_grid1.axes_rgb.RGBAxes.imshow_rgb", "type": "axes_grid1", "text": "\nCreate the four images {rgb, r, g, b}.\n\nThe red, green, and blue arrays.\n\nkwargs get unpacked into the imshow calls for the four images.\n\n"}, {"name": "axes_grid1.axes_size", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size", "type": "axes_grid1", "text": "\nProvides classes of simple units that will be used with AxesDivider class (or\nothers) to determine the size of each axes. The unit classes define `get_size`\nmethod that returns a tuple of two floats, meaning relative and absolute\nsizes, respectively.\n\nNote that this class is nothing more than a simple tuple of two floats. Take a\nlook at the Divider class to see how these two values are used.\n\n`Add`(a, b)\n\n`AddList`(add_list)\n\n`AxesX`(axes[, aspect, ref_ax])\n\nScaled size whose relative part corresponds to the data width of the axes\nmultiplied by the aspect.\n\n`AxesY`(axes[, aspect, ref_ax])\n\nScaled size whose relative part corresponds to the data height of the axes\nmultiplied by the aspect.\n\n`Fixed`(fixed_size)\n\nSimple fixed size with absolute part = fixed_size and relative part = 0.\n\n`Fraction`(fraction, ref_size)\n\nAn instance whose size is a fraction of the ref_size.\n\n`GetExtentHelper`(ax, direction)\n\n`MaxExtent`(artist_list, w_or_h)\n\nSize whose absolute part is either the largest width or the largest height of\nthe given artist_list.\n\n`MaxHeight`(artist_list)\n\nSize whose absolute part is the largest height of the given artist_list.\n\n`MaxWidth`(artist_list)\n\nSize whose absolute part is the largest width of the given artist_list.\n\n`Padded`(size, pad)\n\nReturn a instance where the absolute part of size is increase by the amount of\npad.\n\n`Scalable`\n\nalias of `mpl_toolkits.axes_grid1.axes_size.Scaled`\n\n`Scaled`(scalable_size)\n\nSimple scaled(?) size with absolute part = 0 and relative part =\nscalable_size.\n\n`SizeFromFunc`(func)\n\n`from_any`(size[, fraction_ref])\n\nCreate a Fixed unit when the first argument is a float, or a Fraction unit if\nthat is a string that ends with %.\n\n"}, {"name": "axes_grid1.axes_size.Add", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.add", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size._Base`\n\n"}, {"name": "axes_grid1.axes_size.Add.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.add#mpl_toolkits.axes_grid1.axes_size.Add.get_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_size.AddList", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.addlist", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size._Base`\n\n"}, {"name": "axes_grid1.axes_size.AddList.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.addlist#mpl_toolkits.axes_grid1.axes_size.AddList.get_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_size.AxesX", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesx", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size._Base`\n\nScaled size whose relative part corresponds to the data width of the axes\nmultiplied by the aspect.\n\nHBoxDivider demo\n\nSimple Axes Divider 3\n\n"}, {"name": "axes_grid1.axes_size.AxesX.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesx#mpl_toolkits.axes_grid1.axes_size.AxesX.get_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_size.AxesY", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesy", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size._Base`\n\nScaled size whose relative part corresponds to the data height of the axes\nmultiplied by the aspect.\n\nHBoxDivider demo\n\nSimple Axes Divider 3\n\n"}, {"name": "axes_grid1.axes_size.AxesY.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesy#mpl_toolkits.axes_grid1.axes_size.AxesY.get_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_size.Fixed", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fixed", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size._Base`\n\nSimple fixed size with absolute part = fixed_size and relative part = 0.\n\nHBoxDivider demo\n\nAxes with a fixed physical size\n\nSimple Axes Divider 1\n\nSimple Axes Divider 3\n\n"}, {"name": "axes_grid1.axes_size.Fixed.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fixed#mpl_toolkits.axes_grid1.axes_size.Fixed.get_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_size.Fraction", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fraction", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size._Base`\n\nAn instance whose size is a fraction of the ref_size.\n\n"}, {"name": "axes_grid1.axes_size.Fraction.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fraction#mpl_toolkits.axes_grid1.axes_size.Fraction.get_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_size.from_any", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.from_any", "type": "axes_grid1", "text": "\nCreate a Fixed unit when the first argument is a float, or a Fraction unit if\nthat is a string that ends with %. The second argument is only meaningful when\nFraction unit is created.\n\n"}, {"name": "axes_grid1.axes_size.GetExtentHelper", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.getextenthelper", "type": "axes_grid1", "text": "\nBases: `object`\n\nCall self as a function.\n\n"}, {"name": "axes_grid1.axes_size.GetExtentHelper.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.getextenthelper#mpl_toolkits.axes_grid1.axes_size.GetExtentHelper.__call__", "type": "axes_grid1", "text": "\nCall self as a function.\n\n"}, {"name": "axes_grid1.axes_size.MaxExtent", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxextent", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size._Base`\n\nSize whose absolute part is either the largest width or the largest height of\nthe given artist_list.\n\n"}, {"name": "axes_grid1.axes_size.MaxExtent.add_artist()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxextent#mpl_toolkits.axes_grid1.axes_size.MaxExtent.add_artist", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_size.MaxExtent.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxextent#mpl_toolkits.axes_grid1.axes_size.MaxExtent.get_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_size.MaxHeight", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxheight", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size.MaxExtent`\n\nSize whose absolute part is the largest height of the given artist_list.\n\n"}, {"name": "axes_grid1.axes_size.MaxWidth", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxwidth", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size.MaxExtent`\n\nSize whose absolute part is the largest width of the given artist_list.\n\n"}, {"name": "axes_grid1.axes_size.Padded", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.padded", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size._Base`\n\nReturn a instance where the absolute part of size is increase by the amount of\npad.\n\n"}, {"name": "axes_grid1.axes_size.Padded.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.padded#mpl_toolkits.axes_grid1.axes_size.Padded.get_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_size.Scalable", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.scalable", "type": "axes_grid1", "text": "\nalias of `mpl_toolkits.axes_grid1.axes_size.Scaled`\n\n"}, {"name": "axes_grid1.axes_size.Scaled", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.scaled", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size._Base`\n\nSimple scaled(?) size with absolute part = 0 and relative part =\nscalable_size.\n\nHBoxDivider demo\n\nAxes with a fixed physical size\n\nSimple Axes Divider 1\n\n"}, {"name": "axes_grid1.axes_size.Scaled.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.scaled#mpl_toolkits.axes_grid1.axes_size.Scaled.get_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.axes_size.SizeFromFunc", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.sizefromfunc", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_size._Base`\n\n"}, {"name": "axes_grid1.axes_size.SizeFromFunc.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.sizefromfunc#mpl_toolkits.axes_grid1.axes_size.SizeFromFunc.get_size", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.inset_locator", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator", "type": "axes_grid1", "text": "\nA collection of functions and objects for creating or placing inset axes.\n\n`AnchoredLocatorBase`(bbox_to_anchor, ...[, ...])\n\n`AnchoredSizeLocator`(bbox_to_anchor, x_size, ...)\n\n`AnchoredZoomLocator`(parent_axes, zoom, loc)\n\n`BboxConnector`(bbox1, bbox2, loc1[, loc2])\n\nConnect two bboxes with a straight line.\n\n`BboxConnectorPatch`(bbox1, bbox2, loc1a, ...)\n\nConnect two bboxes with a quadrilateral.\n\n`BboxPatch`(bbox, **kwargs)\n\nPatch showing the shape bounded by a Bbox.\n\n`InsetPosition`(parent, lbwh)\n\nAn object for positioning an inset axes.\n\n`inset_axes`(parent_axes, width, height[, ...])\n\nCreate an inset axes with a given width and height.\n\n`mark_inset`(parent_axes, inset_axes, loc1, ...)\n\nDraw a box to mark the location of an area represented by an inset axes.\n\n`zoomed_inset_axes`(parent_axes, zoom[, loc, ...])\n\nCreate an anchored inset axes by scaling a parent axes.\n\n"}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase", "type": "axes_grid1", "text": "\nBases: `matplotlib.offsetbox.AnchoredOffsetbox`\n\nThe box location. Valid locations are 'upper left', 'upper center', 'upper\nright', 'center left', 'center', 'center right', 'lower left', 'lower center,\n'lower right'. For backward compatibility, numeric values are accepted as\nwell. See the parameter loc of `Legend` for details.\n\nPadding around the child as fraction of the fontsize.\n\nPadding between the offsetbox frame and the bbox_to_anchor.\n\nThe box that will be anchored.\n\nThis is only used as a reference for paddings. If not given,\n`rcParams[\"legend.fontsize\"]` (default: `'medium'`) is used.\n\nWhether to draw a frame around the box.\n\nBox that is used to position the legend in conjunction with loc.\n\nThe transform for the bounding box (bbox_to_anchor).\n\nAll other parameters are passed on to `OffsetBox`.\n\nSee `Legend` for a detailed description of the anchoring mechanism.\n\nCall self as a function.\n\nUpdate the location of children if necessary and draw them to the given\nrenderer.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase#mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase.__call__", "type": "axes_grid1", "text": "\nCall self as a function.\n\n"}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase.draw()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase#mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase.draw", "type": "axes_grid1", "text": "\nUpdate the location of children if necessary and draw them to the given\nrenderer.\n\n"}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase#mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.inset_locator.AnchoredSizeLocator", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredsizelocator", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase`\n\nThe box location. Valid locations are 'upper left', 'upper center', 'upper\nright', 'center left', 'center', 'center right', 'lower left', 'lower center,\n'lower right'. For backward compatibility, numeric values are accepted as\nwell. See the parameter loc of `Legend` for details.\n\nPadding around the child as fraction of the fontsize.\n\nPadding between the offsetbox frame and the bbox_to_anchor.\n\nThe box that will be anchored.\n\nThis is only used as a reference for paddings. If not given,\n`rcParams[\"legend.fontsize\"]` (default: `'medium'`) is used.\n\nWhether to draw a frame around the box.\n\nBox that is used to position the legend in conjunction with loc.\n\nThe transform for the bounding box (bbox_to_anchor).\n\nAll other parameters are passed on to `OffsetBox`.\n\nSee `Legend` for a detailed description of the anchoring mechanism.\n\nReturn the extent of the box as (width, height, x, y).\n\nThis is the extent of the child plus the padding.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.inset_locator.AnchoredSizeLocator.get_extent()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredsizelocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredSizeLocator.get_extent", "type": "axes_grid1", "text": "\nReturn the extent of the box as (width, height, x, y).\n\nThis is the extent of the child plus the padding.\n\n"}, {"name": "axes_grid1.inset_locator.AnchoredSizeLocator.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredsizelocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredSizeLocator.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.inset_locator.AnchoredZoomLocator", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredzoomlocator", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase`\n\nThe box location. Valid locations are 'upper left', 'upper center', 'upper\nright', 'center left', 'center', 'center right', 'lower left', 'lower center,\n'lower right'. For backward compatibility, numeric values are accepted as\nwell. See the parameter loc of `Legend` for details.\n\nPadding around the child as fraction of the fontsize.\n\nPadding between the offsetbox frame and the bbox_to_anchor.\n\nThe box that will be anchored.\n\nThis is only used as a reference for paddings. If not given,\n`rcParams[\"legend.fontsize\"]` (default: `'medium'`) is used.\n\nWhether to draw a frame around the box.\n\nBox that is used to position the legend in conjunction with loc.\n\nThe transform for the bounding box (bbox_to_anchor).\n\nAll other parameters are passed on to `OffsetBox`.\n\nSee `Legend` for a detailed description of the anchoring mechanism.\n\nReturn the extent of the box as (width, height, x, y).\n\nThis is the extent of the child plus the padding.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.inset_locator.AnchoredZoomLocator.get_extent()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredzoomlocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredZoomLocator.get_extent", "type": "axes_grid1", "text": "\nReturn the extent of the box as (width, height, x, y).\n\nThis is the extent of the child plus the padding.\n\n"}, {"name": "axes_grid1.inset_locator.AnchoredZoomLocator.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredzoomlocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredZoomLocator.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`bbox_to_anchor`\n\nunknown\n\n`child`\n\nunknown\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`height`\n\nfloat\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`offset`\n\n(float, float) or callable\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`width`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.inset_locator.BboxConnector", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector", "type": "axes_grid1", "text": "\nBases: `matplotlib.patches.Patch`\n\nConnect two bboxes with a straight line.\n\nBounding boxes to connect.\n\nCorner of bbox1 to draw the line. Valid values are:\n\nCorner of bbox2 to draw the line. If None, defaults to loc1. Valid values are:\n\nPatch properties for the line drawn. Valid arguments include:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nunknown\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nHelper function to obtain a Path from one bbox to another.\n\nBounding boxes to connect.\n\nCorner of bbox1 to use. Valid values are:\n\nCorner of bbox2 to use. If None, defaults to loc1. Valid values are:\n\nA line segment from the loc1 corner of bbox1 to the loc2 corner of bbox2.\n\nHelper function to obtain the location of a corner of a bbox\n\nCorner of bbox. Valid values are:\n\nCoordinates of the corner specified by loc.\n\nReturn the path of this patch.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nAxes Zoom Effect\n\n"}, {"name": "axes_grid1.inset_locator.BboxConnector.connect_bbox()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.connect_bbox", "type": "axes_grid1", "text": "\nHelper function to obtain a Path from one bbox to another.\n\nBounding boxes to connect.\n\nCorner of bbox1 to use. Valid values are:\n\nCorner of bbox2 to use. If None, defaults to loc1. Valid values are:\n\nA line segment from the loc1 corner of bbox1 to the loc2 corner of bbox2.\n\n"}, {"name": "axes_grid1.inset_locator.BboxConnector.get_bbox_edge_pos()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.get_bbox_edge_pos", "type": "axes_grid1", "text": "\nHelper function to obtain the location of a corner of a bbox\n\nCorner of bbox. Valid values are:\n\nCoordinates of the corner specified by loc.\n\n"}, {"name": "axes_grid1.inset_locator.BboxConnector.get_path()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.get_path", "type": "axes_grid1", "text": "\nReturn the path of this patch.\n\n"}, {"name": "axes_grid1.inset_locator.BboxConnector.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.inset_locator.BboxConnectorPatch", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnectorpatch", "type": "axes_grid1", "text": "\nBases: `mpl_toolkits.axes_grid1.inset_locator.BboxConnector`\n\nConnect two bboxes with a quadrilateral.\n\nThe quadrilateral is specified by two lines that start and end at corners of\nthe bboxes. The four sides of the quadrilateral are defined by the two lines\ngiven, the line between the two corners specified in bbox1 and the line\nbetween the two corners specified in bbox2.\n\nBounding boxes to connect.\n\nCorners of bbox1 and bbox2 to draw the first line. Valid values are:\n\nCorners of bbox1 and bbox2 to draw the second line. Valid values are:\n\nPatch properties for the line drawn:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nunknown\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nReturn the path of this patch.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nAxes Zoom Effect\n\n"}, {"name": "axes_grid1.inset_locator.BboxConnectorPatch.get_path()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnectorpatch#mpl_toolkits.axes_grid1.inset_locator.BboxConnectorPatch.get_path", "type": "axes_grid1", "text": "\nReturn the path of this patch.\n\n"}, {"name": "axes_grid1.inset_locator.BboxConnectorPatch.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnectorpatch#mpl_toolkits.axes_grid1.inset_locator.BboxConnectorPatch.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.inset_locator.BboxPatch", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxpatch", "type": "axes_grid1", "text": "\nBases: `matplotlib.patches.Patch`\n\nPatch showing the shape bounded by a Bbox.\n\nBbox to use for the extents of this patch.\n\nPatch properties. Valid arguments include:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nunknown\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nReturn the path of this patch.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nAxes Zoom Effect\n\n"}, {"name": "axes_grid1.inset_locator.BboxPatch.get_path()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxpatch#mpl_toolkits.axes_grid1.inset_locator.BboxPatch.get_path", "type": "axes_grid1", "text": "\nReturn the path of this patch.\n\n"}, {"name": "axes_grid1.inset_locator.BboxPatch.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxpatch#mpl_toolkits.axes_grid1.inset_locator.BboxPatch.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.inset_locator.inset_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.inset_axes", "type": "axes_grid1", "text": "\nCreate an inset axes with a given width and height.\n\nBoth sizes used can be specified either in inches or percentage. For example,:\n\ncreates in inset axes in the lower left corner of parent_axes which spans over\n30% in height and 40% in width of the parent_axes. Since the usage of\n`inset_axes` may become slightly tricky when exceeding such standard cases, it\nis recommended to read the examples.\n\nAxes to place the inset axes.\n\nSize of the inset axes to create. If a float is provided, it is the size in\ninches, e.g. width=1.3. If a string is provided, it is the size in relative\nunits, e.g. width='40%'. By default, i.e. if neither bbox_to_anchor nor\nbbox_transform are specified, those are relative to the parent_axes. Otherwise\nthey are to be understood relative to the bounding box provided via\nbbox_to_anchor.\n\nLocation to place the inset axes. Valid locations are 'upper left', 'upper\ncenter', 'upper right', 'center left', 'center', 'center right', 'lower left',\n'lower center, 'lower right'. For backward compatibility, numeric values are\naccepted as well. See the parameter loc of `Legend` for details.\n\nBbox that the inset axes will be anchored to. If None, a tuple of (0, 0, 1, 1)\nis used if bbox_transform is set to parent_axes.transAxes or\nparent_axes.figure.transFigure. Otherwise, parent_axes.bbox is used. If a\ntuple, can be either [left, bottom, width, height], or [left, bottom]. If the\nkwargs width and/or height are specified in relative units, the 2-tuple [left,\nbottom] cannot be used. Note that, unless bbox_transform is set, the units of\nthe bounding box are interpreted in the pixel coordinate. When using\nbbox_to_anchor with tuple, it almost always makes sense to also specify a\nbbox_transform. This might often be the axes transform parent_axes.transAxes.\n\nTransformation for the bbox that contains the inset axes. If None, a\n`transforms.IdentityTransform` is used. The value of bbox_to_anchor (or the\nreturn value of its get_points method) is transformed by the bbox_transform\nand then interpreted as points in the pixel coordinate (which is dpi\ndependent). You may provide bbox_to_anchor in some normalized coordinate, and\ngive an appropriate transform (e.g., parent_axes.transAxes).\n\nThe type of the newly created inset axes.\n\nKeyword arguments to pass to the constructor of the inset axes. Valid\narguments include:\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nPadding between inset axes and the bbox_to_anchor. The units are axes font\nsize, i.e. for a default font size of 10 points borderpad = 0.5 is equivalent\nto a padding of 5 points.\n\nInset axes object created.\n\nThe meaning of bbox_to_anchor and bbox_to_transform is interpreted differently\nfrom that of legend. The value of bbox_to_anchor (or the return value of its\nget_points method; the default is parent_axes.bbox) is transformed by the\nbbox_transform (the default is Identity transform) and then interpreted as\npoints in the pixel coordinate (which is dpi dependent).\n\nThus, following three calls are identical and creates an inset axes with\nrespect to the parent_axes:\n\nAdding a colorbar to inset axes\n\nControlling the position and size of colorbars with Inset Axes\n\nInset Locator Demo\n\n"}, {"name": "axes_grid1.inset_locator.InsetPosition", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.insetposition", "type": "axes_grid1", "text": "\nBases: `object`\n\nAn object for positioning an inset axes.\n\nThis is created by specifying the normalized coordinates in the axes, instead\nof the figure.\n\nAxes to use for normalizing coordinates.\n\nThe left edge, bottom edge, width, and height of the inset axes, in units of\nthe normalized coordinate of the parent axes.\n\nSee also\n\nThe following bounds the inset axes to a box with 20% of the parent axes's\nheight and 40% of the width. The size of the axes specified ([0, 0, 1, 1])\nensures that the axes completely fills the bounding box:\n\nCall self as a function.\n\n"}, {"name": "axes_grid1.inset_locator.InsetPosition.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.insetposition#mpl_toolkits.axes_grid1.inset_locator.InsetPosition.__call__", "type": "axes_grid1", "text": "\nCall self as a function.\n\n"}, {"name": "axes_grid1.inset_locator.mark_inset", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.mark_inset", "type": "axes_grid1", "text": "\nDraw a box to mark the location of an area represented by an inset axes.\n\nThis function draws a box in parent_axes at the bounding box of inset_axes,\nand shows a connection with the inset axes by drawing lines at the corners,\ngiving a \"zoomed in\" effect.\n\nAxes which contains the area of the inset axes.\n\nThe inset axes.\n\nCorners to use for connecting the inset axes and the area in the parent axes.\n\nPatch properties for the lines and box drawn:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nunknown\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool or None\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color`\n\ncolor\n\n`edgecolor` or ec\n\ncolor or None\n\n`facecolor` or fc\n\ncolor or None\n\n`figure`\n\n`Figure`\n\n`fill`\n\nbool\n\n`gid`\n\nstr\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat or None\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nThe patch drawn to represent the area of the inset axes.\n\nThe patches connecting two corners of the inset axes and its area.\n\nInset Locator Demo2\n\n"}, {"name": "axes_grid1.inset_locator.zoomed_inset_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.zoomed_inset_axes", "type": "axes_grid1", "text": "\nCreate an anchored inset axes by scaling a parent axes. For usage, also see\nthe examples.\n\nAxes to place the inset axes.\n\nScaling factor of the data axes. zoom > 1 will enlarge the coordinates (i.e.,\n\"zoomed in\"), while zoom < 1 will shrink the coordinates (i.e., \"zoomed out\").\n\nLocation to place the inset axes. Valid locations are 'upper left', 'upper\ncenter', 'upper right', 'center left', 'center', 'center right', 'lower left',\n'lower center, 'lower right'. For backward compatibility, numeric values are\naccepted as well. See the parameter loc of `Legend` for details.\n\nBbox that the inset axes will be anchored to. If None, parent_axes.bbox is\nused. If a tuple, can be either [left, bottom, width, height], or [left,\nbottom]. If the kwargs width and/or height are specified in relative units,\nthe 2-tuple [left, bottom] cannot be used. Note that the units of the bounding\nbox are determined through the transform in use. When using bbox_to_anchor it\nalmost always makes sense to also specify a bbox_transform. This might often\nbe the axes transform parent_axes.transAxes.\n\nTransformation for the bbox that contains the inset axes. If None, a\n`transforms.IdentityTransform` is used (i.e. pixel coordinates). This is\nuseful when not providing any argument to bbox_to_anchor. When using\nbbox_to_anchor it almost always makes sense to also specify a bbox_transform.\nThis might often be the axes transform parent_axes.transAxes. Inversely, when\nspecifying the axes- or figure-transform here, be aware that not specifying\nbbox_to_anchor will use parent_axes.bbox, the units of which are in display\n(pixel) coordinates.\n\nThe type of the newly created inset axes.\n\nKeyword arguments to pass to the constructor of the inset axes. Valid\narguments include:\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nPadding between inset axes and the bbox_to_anchor. The units are axes font\nsize, i.e. for a default font size of 10 points borderpad = 0.5 is equivalent\nto a padding of 5 points.\n\nInset axes object created.\n\nAdding a colorbar to inset axes\n\nInset Locator Demo2\n\n"}, {"name": "axes_grid1.mpl_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes", "type": "axes_grid1", "text": "\n`Axes`(fig, rect, *[, facecolor, frameon, ...])\n\nBuild an Axes in a figure.\n\n`SimpleAxisArtist`(axis, axisnum, spine)\n\n`SimpleChainedObjects`(objects)\n\n"}, {"name": "axes_grid1.mpl_axes.Axes", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes", "type": "axes_grid1", "text": "\nBases: `matplotlib.axes._axes.Axes`\n\nBuild an Axes in a figure.\n\nThe Axes is built in the `Figure` fig.\n\nThe Axes is built in the rectangle rect. rect is in `Figure` coordinates.\n\nThe x or y `axis` is shared with the x or y axis in the input `Axes`.\n\nWhether the Axes frame is visible.\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See\n`set_box_aspect` for details.\n\nOther optional keyword arguments:\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nThe new `Axes` object.\n\nBases: `dict`\n\nCall self as a function.\n\nConvenience method to get or set some axis properties.\n\nCall signatures:\n\nThe axis limits to be set. This can also be achieved using\n\nIf a bool, turns axis lines and labels on or off. If a string, possible values\nare:\n\nValue\n\nDescription\n\n'on'\n\nTurn on axis lines and labels. Same as `True`.\n\n'off'\n\nTurn off axis lines and labels. Same as `False`.\n\n'equal'\n\nSet equal scaling (i.e., make circles circular) by changing axis limits. This\nis the same as `ax.set_aspect('equal', adjustable='datalim')`. Explicit data\nlimits may not be respected in this case.\n\n'scaled'\n\nSet equal scaling (i.e., make circles circular) by changing dimensions of the\nplot box. This is the same as `ax.set_aspect('equal', adjustable='box',\nanchor='C')`. Additionally, further autoscaling will be disabled.\n\n'tight'\n\nSet limits just large enough to show all data, then disable further\nautoscaling.\n\n'auto'\n\nAutomatic scaling (fill plot box with data).\n\n'image'\n\n'scaled' with axis limits equal to data limits.\n\n'square'\n\nSquare plot; similar to 'scaled', but initially forcing `xmax-xmin == ymax-\nymin`.\n\nWhether observers are notified of the axis limit change. This option is passed\non to `set_xlim` and `set_ylim`.\n\nThe axis limits.\n\nSee also\n\nClear the Axes.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nAxes Divider\n\nAxes Grid2\n\nParasite Simple2\n\nSimple ImageGrid\n\nSimple ImageGrid 2\n\nTight Layout guide\n\n"}, {"name": "axes_grid1.mpl_axes.Axes.AxisDict", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.AxisDict", "type": "axes_grid1", "text": "\nBases: `dict`\n\nCall self as a function.\n\n"}, {"name": "axes_grid1.mpl_axes.Axes.AxisDict.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.AxisDict.__call__", "type": "axes_grid1", "text": "\nCall self as a function.\n\n"}, {"name": "axes_grid1.mpl_axes.Axes.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.cla", "type": "axes_grid1", "text": "\nClear the Axes.\n\n"}, {"name": "axes_grid1.mpl_axes.Axes.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist", "type": "axes_grid1", "text": "\nBases: `matplotlib.artist.Artist`\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nunknown\n\n`zorder`\n\nfloat\n\nSet a label that will be displayed in the legend.\n\ns will be converted to a string by calling `str`.\n\nSet the artist's visibility.\n\n"}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.set", "type": "axes_grid1", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.set_label()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.set_label", "type": "axes_grid1", "text": "\nSet a label that will be displayed in the legend.\n\ns will be converted to a string by calling `str`.\n\n"}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.set_visible()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.set_visible", "type": "axes_grid1", "text": "\nSet the artist's visibility.\n\n"}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.toggle()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.toggle", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.mpl_axes.SimpleChainedObjects", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simplechainedobjects", "type": "axes_grid1", "text": "\nBases: `object`\n\nCall self as a function.\n\n"}, {"name": "axes_grid1.mpl_axes.SimpleChainedObjects.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simplechainedobjects#mpl_toolkits.axes_grid1.mpl_axes.SimpleChainedObjects.__call__", "type": "axes_grid1", "text": "\nCall self as a function.\n\n"}, {"name": "axes_grid1.parasite_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes", "type": "axes_grid1", "text": "\n`HostAxes`\n\nalias of `mpl_toolkits.axes_grid1.parasite_axes.AxesHostAxes`\n\n`HostAxesBase`(*args, **kwargs)\n\n`ParasiteAxes`\n\nalias of `mpl_toolkits.axes_grid1.parasite_axes.AxesParasite`\n\n`ParasiteAxesAuxTrans`\n\nalias of `mpl_toolkits.axes_grid1.parasite_axes.AxesParasiteParasiteAuxTrans`\n\n`ParasiteAxesAuxTransBase`(parent_axes, ...[, ...])\n\n[Deprecated]\n\n`ParasiteAxesBase`(parent_axes[, ...])\n\n`host_axes`(*args[, axes_class, figure])\n\nCreate axes that can act as a hosts to parasitic axes.\n\n`host_axes_class_factory`(axes_class)\n\n`host_subplot`(*args[, axes_class, figure])\n\nCreate a subplot that can act as a host to parasitic axes.\n\n`host_subplot_class_factory`(axes_class)\n\n`parasite_axes_auxtrans_class_factory`(axes_class)\n\n[Deprecated]\n\n`parasite_axes_class_factory`(axes_class)\n\n"}, {"name": "axes_grid1.parasite_axes.host_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_axes", "type": "axes_grid1", "text": "\nCreate axes that can act as a hosts to parasitic axes.\n\nFigure to which the axes will be added. Defaults to the current figure\n`pyplot.gcf()`.\n\nWill be passed on to the underlying `Axes` object creation.\n\n"}, {"name": "axes_grid1.parasite_axes.host_axes_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_axes_class_factory", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.host_subplot", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_subplot", "type": "axes_grid1", "text": "\nCreate a subplot that can act as a host to parasitic axes.\n\nFigure to which the subplot will be added. Defaults to the current figure\n`pyplot.gcf()`.\n\nWill be passed on to the underlying `Axes` object creation.\n\n"}, {"name": "axes_grid1.parasite_axes.host_subplot_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_subplot_class_factory", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxes", "type": "axes_grid1", "text": "\nalias of `mpl_toolkits.axes_grid1.parasite_axes.AxesHostAxes`\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase", "type": "axes_grid1", "text": "\nBases: `object`\n\nAdd a parasite axes to this host.\n\nDespite this method's name, this should actually be thought of as an\n`add_parasite_axes` method.\n\ntr may be `Transform`, in which case the following relation will hold:\n`parasite.transData = tr + host.transData`. Alternatively, it may be None (the\ndefault), no special relationship will hold between the parasite's and the\nhost's `transData`.\n\nCreate a twin of Axes with no shared axis.\n\nWhile self will have ticks on the left and bottom axis, the returned axes will\nhave ticks on the top and right axis.\n\nCreate a twin of Axes with a shared x-axis but independent y-axis.\n\nThe y-axis of self will have ticks on the left and the returned axes will have\nticks on the right.\n\nCreate a twin of Axes with a shared y-axis but independent x-axis.\n\nThe x-axis of self will have ticks on the bottom and the returned axes will\nhave ticks on the top.\n\nParasite Simple2\n\nCurvilinear grid demo\n\nmpl_toolkits.axisartist.floating_axes features\n\nfloating_axis demo\n\nParasite Axes demo\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.cla", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.draw()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.draw", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.get_aux_axes()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.get_aux_axes", "type": "axes_grid1", "text": "\nAdd a parasite axes to this host.\n\nDespite this method's name, this should actually be thought of as an\n`add_parasite_axes` method.\n\ntr may be `Transform`, in which case the following relation will hold:\n`parasite.transData = tr + host.transData`. Alternatively, it may be None (the\ndefault), no special relationship will hold between the parasite's and the\nhost's `transData`.\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.get_tightbbox()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.get_tightbbox", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.pick()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.pick", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.twin()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.twin", "type": "axes_grid1", "text": "\nCreate a twin of Axes with no shared axis.\n\nWhile self will have ticks on the left and bottom axis, the returned axes will\nhave ticks on the top and right axis.\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.twinx()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.twinx", "type": "axes_grid1", "text": "\nCreate a twin of Axes with a shared x-axis but independent y-axis.\n\nThe y-axis of self will have ticks on the left and the returned axes will have\nticks on the right.\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.twiny()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.twiny", "type": "axes_grid1", "text": "\nCreate a twin of Axes with a shared y-axis but independent x-axis.\n\nThe x-axis of self will have ticks on the bottom and the returned axes will\nhave ticks on the top.\n\n"}, {"name": "axes_grid1.parasite_axes.parasite_axes_auxtrans_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasite_axes_auxtrans_class_factory", "type": "axes_grid1", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axes_grid1.parasite_axes.parasite_axes_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasite_axes_class_factory", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxes", "type": "axes_grid1", "text": "\nalias of `mpl_toolkits.axes_grid1.parasite_axes.AxesParasite`\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTrans", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtrans", "type": "axes_grid1", "text": "\nalias of `mpl_toolkits.axes_grid1.parasite_axes.AxesParasiteParasiteAuxTrans`\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase", "type": "axes_grid1", "text": "\nBases: `object`\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.apply_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.apply_aspect", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.get_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.get_viewlim_mode", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.set_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.set_viewlim_mode", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.update_viewlim()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.update_viewlim", "type": "axes_grid1", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase", "type": "axes_grid1", "text": "\nBases: `object`\n\n[Deprecated]\n\nDeprecated since version 3.5:\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\nParasite Axes demo\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.apply_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.apply_aspect", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.cla", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.get_images_artists()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.get_images_artists", "type": "axes_grid1", "text": "\n[Deprecated]\n\nDeprecated since version 3.5:\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.get_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.get_viewlim_mode", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.pick()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.pick", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.set_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.set_viewlim_mode", "type": "axes_grid1", "text": "\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.update_viewlim()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.update_viewlim", "type": "axes_grid1", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axis", "path": "axis_api", "type": "axis", "text": "\nTable of Contents\n\n`Axis` objects\n\nClasses for the ticks and x and y axis.\n\nBase class for `XAxis` and `YAxis`.\n\nThe `Axes` instance the artist resides in, or None.\n\nDetermines the major tick positions and their label format.\n\nDetermines the minor tick positions and their label format.\n\nThe axis label.\n\nThe distance between the axis label and the tick labels. Defaults to\n`rcParams[\"axes.labelpad\"]` (default: `4.0`) = 4.\n\nA `Text` object containing the data offset of the ticks (if any).\n\nThe acceptance radius for containment tests. See also `Axis.contains`.\n\nThe major ticks.\n\nThe minor ticks.\n\nThe `Axes` to which the created Axis belongs.\n\nThe acceptance radius for containment tests. See also `Axis.contains`.\n\nThe `Axes` to which the created Axis belongs.\n\nThe acceptance radius for containment tests. See also `Axis.contains`.\n\nThe `Axes` to which the created Axis belongs.\n\nThe acceptance radius for containment tests. See also `Axis.contains`.\n\nA container for the objects defining tick position and format.\n\nDetermines the positions of the ticks.\n\nDetermines the format of the tick labels.\n\n`Axis.clear`\n\nClear the axis.\n\n`Axis.cla`\n\n[Deprecated] Clear this axis.\n\n`Axis.get_scale`\n\nReturn this Axis' scale (as a str).\n\n`Axis.get_major_formatter`\n\nGet the formatter of the major ticker.\n\n`Axis.get_major_locator`\n\nGet the locator of the major ticker.\n\n`Axis.get_minor_formatter`\n\nGet the formatter of the minor ticker.\n\n`Axis.get_minor_locator`\n\nGet the locator of the minor ticker.\n\n`Axis.set_major_formatter`\n\nSet the formatter of the major ticker.\n\n`Axis.set_major_locator`\n\nSet the locator of the major ticker.\n\n`Axis.set_minor_formatter`\n\nSet the formatter of the minor ticker.\n\n`Axis.set_minor_locator`\n\nSet the locator of the minor ticker.\n\n`Axis.remove_overlapping_locs`\n\nIf minor ticker locations that overlap with major ticker locations should be\ntrimmed.\n\n`Axis.get_remove_overlapping_locs`\n\n`Axis.set_remove_overlapping_locs`\n\n`Axis.set_label_coords`\n\nSet the coordinates of the label.\n\n`Axis.set_label_position`\n\nSet the label position (top or bottom)\n\n`Axis.set_label_text`\n\nSet the text value of the axis label.\n\n`Axis.get_label`\n\nReturn the axis label as a Text instance.\n\n`Axis.get_label_position`\n\nReturn the label position (top or bottom)\n\n`Axis.get_label_text`\n\nGet the text of the label.\n\n`Axis.get_major_ticks`\n\nReturn the list of major `Tick`s.\n\n`Axis.get_majorticklabels`\n\nReturn this Axis' major tick labels, as a list of `Text`.\n\n`Axis.get_majorticklines`\n\nReturn this Axis' major tick lines as a list of `Line2D`s.\n\n`Axis.get_majorticklocs`\n\nReturn this Axis' major tick locations in data coordinates.\n\n`Axis.get_minor_ticks`\n\nReturn the list of minor `Tick`s.\n\n`Axis.get_minorticklabels`\n\nReturn this Axis' minor tick labels, as a list of `Text`.\n\n`Axis.get_minorticklines`\n\nReturn this Axis' minor tick lines as a list of `Line2D`s.\n\n`Axis.get_minorticklocs`\n\nReturn this Axis' minor tick locations in data coordinates.\n\n`Axis.get_offset_text`\n\nReturn the axis offsetText as a Text instance.\n\n`Axis.get_tick_padding`\n\n`Axis.get_ticklabels`\n\nGet this Axis' tick labels.\n\n`Axis.get_ticklines`\n\nReturn this Axis' tick lines as a list of `Line2D`s.\n\n`Axis.get_ticklocs`\n\nReturn this Axis' tick locations in data coordinates.\n\n`Axis.get_gridlines`\n\nReturn this Axis' grid lines as a list of `Line2D`s.\n\n`Axis.grid`\n\nConfigure the grid lines.\n\n`Axis.set_tick_params`\n\nSet appearance parameters for ticks, ticklabels, and gridlines.\n\n`Axis.axis_date`\n\nSet up axis ticks and labels to treat data along this Axis as dates.\n\n`Axis.get_data_interval`\n\nReturn the `(min, max)` data limits of this axis.\n\n`Axis.get_view_interval`\n\nReturn the `(min, max)` view limits of this axis.\n\n`Axis.get_inverted`\n\nReturn whether this Axis is oriented in the \"inverse\" direction.\n\n`Axis.set_data_interval`\n\nSet the axis data limits.\n\n`Axis.set_view_interval`\n\nSet the axis view limits.\n\n`Axis.set_inverted`\n\nSet whether this Axis is oriented in the \"inverse\" direction.\n\n`Axis.get_minpos`\n\n`Axis.get_tick_space`\n\nReturn the estimated number of ticks that can fit on the axis.\n\n`Axis.get_ticklabel_extents`\n\nGet the extents of the tick labels on either side of the axes.\n\n`Axis.get_tightbbox`\n\nReturn a bounding box that encloses the axis.\n\n`Axis.contains`\n\nTest whether the artist contains the mouse event.\n\n`Axis.get_pickradius`\n\nReturn the depth of the axis used by the picker.\n\n`Axis.set_pickradius`\n\nSet the depth of the axis used by the picker.\n\n`Axis.convert_units`\n\n`Axis.set_units`\n\nSet the units for axis.\n\n`Axis.get_units`\n\nReturn the units for axis.\n\n`Axis.update_units`\n\nIntrospect data for units converter and update the axis.converter instance if\nnecessary.\n\n`XAxis.axis_name`\n\nRead-only name identifying the axis.\n\n`XAxis.get_text_heights`\n\nReturn how much space should be reserved for text above and below the axes, as\na pair of floats.\n\n`XAxis.get_ticks_position`\n\nReturn the ticks position (\"top\", \"bottom\", \"default\", or \"unknown\").\n\n`XAxis.set_ticks_position`\n\nSet the ticks position.\n\n`XAxis.set_label_position`\n\nSet the label position (top or bottom)\n\n`XAxis.tick_bottom`\n\nMove ticks and ticklabels (if present) to the bottom of the axes.\n\n`XAxis.tick_top`\n\nMove ticks and ticklabels (if present) to the top of the axes.\n\n`YAxis.axis_name`\n\nRead-only name identifying the axis.\n\n`YAxis.get_text_widths`\n\n`YAxis.get_ticks_position`\n\nReturn the ticks position (\"left\", \"right\", \"default\", or \"unknown\").\n\n`YAxis.set_offset_position`\n\n`YAxis.set_ticks_position`\n\nSet the ticks position.\n\n`YAxis.set_label_position`\n\nSet the label position (left or right)\n\n`YAxis.tick_left`\n\nMove ticks and ticklabels (if present) to the left of the axes.\n\n`YAxis.tick_right`\n\nMove ticks and ticklabels (if present) to the right of the axes.\n\n`Axis.OFFSETTEXTPAD`\n\n`Axis.axes`\n\nThe `Axes` instance the artist resides in, or None.\n\n`Axis.limit_range_for_scale`\n\n`Axis.reset_ticks`\n\nRe-initialize the major and minor Tick lists.\n\n`Axis.set_default_intervals`\n\nSet the default limits for the axis data and view interval if they have not\nbeen not mutated yet.\n\nThese methods should be used together with care, calling `set_ticks` to\nspecify the desired tick locations before calling `set_ticklabels` to specify\na matching series of labels. Calling `set_ticks` makes a `FixedLocator`; it's\nlist of locations is then used by `set_ticklabels` to make an appropriate\n`FuncFormatter`.\n\n`Axis.set_ticks`\n\nSet this Axis' tick locations and optionally labels.\n\n`Axis.set_ticklabels`\n\nSet the text values of the tick labels.\n\nAbstract base class for the axis ticks, grid lines and labels.\n\nTicks mark a position on an Axis. They contain two lines as markers and two\nlabels; one each for the bottom and top positions (in case of an `XAxis`) or\nfor the left and right positions (in case of a `YAxis`).\n\nThe left/bottom tick marker.\n\nThe right/top tick marker.\n\nThe grid line associated with the label position.\n\nThe left/bottom tick label.\n\nThe right/top tick label.\n\nbbox is the Bound2D bounding box in display coords of the Axes loc is the tick\nlocation in data coords size is the tick size in points\n\nContains all the Artists needed to make an x tick - the tick line, the label\ntext and the grid line\n\nbbox is the Bound2D bounding box in display coords of the Axes loc is the tick\nlocation in data coords size is the tick size in points\n\nContains all the Artists needed to make a Y tick - the tick line, the label\ntext and the grid line\n\nbbox is the Bound2D bounding box in display coords of the Axes loc is the tick\nlocation in data coords size is the tick size in points\n\n`Tick.get_loc`\n\nReturn the tick location (data coords) as a scalar.\n\n`Tick.get_pad`\n\nGet the value of the tick label pad in points.\n\n`Tick.get_pad_pixels`\n\n`Tick.get_tick_padding`\n\nGet the length of the tick outside of the axes.\n\n`Tick.get_tickdir`\n\n`Tick.get_view_interval`\n\nReturn the view limits `(min, max)` of the axis the tick belongs to.\n\n`Tick.set_label1`\n\nSet the label1 text.\n\n`Tick.set_label2`\n\nSet the label2 text.\n\n`Tick.set_pad`\n\nSet the tick label pad in points\n\n`Tick.set_url`\n\nSet the url of label1 and label2.\n\n`Tick.update_position`\n\nSet the location of tick in data coords with scalar loc.\n\n"}, {"name": "axis.Axis", "path": "axis_api#matplotlib.axis.Axis", "type": "axis", "text": "\nBase class for `XAxis` and `YAxis`.\n\nThe `Axes` instance the artist resides in, or None.\n\nDetermines the major tick positions and their label format.\n\nDetermines the minor tick positions and their label format.\n\nThe axis label.\n\nThe distance between the axis label and the tick labels. Defaults to\n`rcParams[\"axes.labelpad\"]` (default: `4.0`) = 4.\n\nA `Text` object containing the data offset of the ticks (if any).\n\nThe acceptance radius for containment tests. See also `Axis.contains`.\n\nThe major ticks.\n\nThe minor ticks.\n\nThe `Axes` to which the created Axis belongs.\n\nThe acceptance radius for containment tests. See also `Axis.contains`.\n\n"}, {"name": "axis.Axis.axes", "path": "_as_gen/matplotlib.axis.axis.axes", "type": "axis", "text": "\nThe `Axes` instance the artist resides in, or None.\n\n"}, {"name": "axis.Axis.axis_date", "path": "_as_gen/matplotlib.axis.axis.axis_date", "type": "axis", "text": "\nSet up axis ticks and labels to treat data along this Axis as dates.\n\nThe timezone used to create date labels.\n\n"}, {"name": "axis.Axis.cla", "path": "_as_gen/matplotlib.axis.axis.cla", "type": "axis", "text": "\n[Deprecated] Clear this axis.\n\nDeprecated since version 3.4.\n\n"}, {"name": "axis.Axis.clear", "path": "_as_gen/matplotlib.axis.axis.clear", "type": "axis", "text": "\nClear the axis.\n\nThis resets axis properties to their default values:\n\n"}, {"name": "axis.Axis.contains", "path": "_as_gen/matplotlib.axis.axis.contains", "type": "axis", "text": "\nTest whether the artist contains the mouse event.\n\nWhether any values are within the radius.\n\nAn artist-specific dictionary of details of the event context, such as which\npoints are contained in the pick radius. See the individual Artist subclasses\nfor details.\n\n"}, {"name": "axis.Axis.convert_units", "path": "_as_gen/matplotlib.axis.axis.convert_units", "type": "axis", "text": "\n\n"}, {"name": "axis.Axis.get_data_interval", "path": "_as_gen/matplotlib.axis.axis.get_data_interval", "type": "axis", "text": "\nReturn the `(min, max)` data limits of this axis.\n\n"}, {"name": "axis.Axis.get_gridlines", "path": "_as_gen/matplotlib.axis.axis.get_gridlines", "type": "axis", "text": "\nReturn this Axis' grid lines as a list of `Line2D`s.\n\n"}, {"name": "axis.Axis.get_inverted", "path": "_as_gen/matplotlib.axis.axis.get_inverted", "type": "axis", "text": "\nReturn whether this Axis is oriented in the \"inverse\" direction.\n\nThe \"normal\" direction is increasing to the right for the x-axis and to the\ntop for the y-axis; the \"inverse\" direction is increasing to the left for the\nx-axis and to the bottom for the y-axis.\n\n"}, {"name": "axis.Axis.get_label", "path": "_as_gen/matplotlib.axis.axis.get_label", "type": "axis", "text": "\nReturn the axis label as a Text instance.\n\nParasite Simple\n\n"}, {"name": "axis.Axis.get_label_position", "path": "_as_gen/matplotlib.axis.axis.get_label_position", "type": "axis", "text": "\nReturn the label position (top or bottom)\n\n"}, {"name": "axis.Axis.get_label_text", "path": "_as_gen/matplotlib.axis.axis.get_label_text", "type": "axis", "text": "\nGet the text of the label.\n\n"}, {"name": "axis.Axis.get_major_formatter", "path": "_as_gen/matplotlib.axis.axis.get_major_formatter", "type": "axis", "text": "\nGet the formatter of the major ticker.\n\n"}, {"name": "axis.Axis.get_major_locator", "path": "_as_gen/matplotlib.axis.axis.get_major_locator", "type": "axis", "text": "\nGet the locator of the major ticker.\n\nDate tick labels\n\nInset Locator Demo2\n\nBasic Usage\n\n"}, {"name": "axis.Axis.get_major_ticks", "path": "_as_gen/matplotlib.axis.axis.get_major_ticks", "type": "axis", "text": "\nReturn the list of major `Tick`s.\n\n"}, {"name": "axis.Axis.get_majorticklabels", "path": "_as_gen/matplotlib.axis.axis.get_majorticklabels", "type": "axis", "text": "\nReturn this Axis' major tick labels, as a list of `Text`.\n\n"}, {"name": "axis.Axis.get_majorticklines", "path": "_as_gen/matplotlib.axis.axis.get_majorticklines", "type": "axis", "text": "\nReturn this Axis' major tick lines as a list of `Line2D`s.\n\n"}, {"name": "axis.Axis.get_majorticklocs", "path": "_as_gen/matplotlib.axis.axis.get_majorticklocs", "type": "axis", "text": "\nReturn this Axis' major tick locations in data coordinates.\n\n"}, {"name": "axis.Axis.get_minor_formatter", "path": "_as_gen/matplotlib.axis.axis.get_minor_formatter", "type": "axis", "text": "\nGet the formatter of the minor ticker.\n\n"}, {"name": "axis.Axis.get_minor_locator", "path": "_as_gen/matplotlib.axis.axis.get_minor_locator", "type": "axis", "text": "\nGet the locator of the minor ticker.\n\n"}, {"name": "axis.Axis.get_minor_ticks", "path": "_as_gen/matplotlib.axis.axis.get_minor_ticks", "type": "axis", "text": "\nReturn the list of minor `Tick`s.\n\nCentering labels between ticks\n\n"}, {"name": "axis.Axis.get_minorticklabels", "path": "_as_gen/matplotlib.axis.axis.get_minorticklabels", "type": "axis", "text": "\nReturn this Axis' minor tick labels, as a list of `Text`.\n\n"}, {"name": "axis.Axis.get_minorticklines", "path": "_as_gen/matplotlib.axis.axis.get_minorticklines", "type": "axis", "text": "\nReturn this Axis' minor tick lines as a list of `Line2D`s.\n\n"}, {"name": "axis.Axis.get_minorticklocs", "path": "_as_gen/matplotlib.axis.axis.get_minorticklocs", "type": "axis", "text": "\nReturn this Axis' minor tick locations in data coordinates.\n\n"}, {"name": "axis.Axis.get_minpos", "path": "_as_gen/matplotlib.axis.axis.get_minpos", "type": "axis", "text": "\n\n"}, {"name": "axis.Axis.get_offset_text", "path": "_as_gen/matplotlib.axis.axis.get_offset_text", "type": "axis", "text": "\nReturn the axis offsetText as a Text instance.\n\n"}, {"name": "axis.Axis.get_pickradius", "path": "_as_gen/matplotlib.axis.axis.get_pickradius", "type": "axis", "text": "\nReturn the depth of the axis used by the picker.\n\n"}, {"name": "axis.Axis.get_remove_overlapping_locs", "path": "_as_gen/matplotlib.axis.axis.get_remove_overlapping_locs", "type": "axis", "text": "\n\n"}, {"name": "axis.Axis.get_scale", "path": "_as_gen/matplotlib.axis.axis.get_scale", "type": "axis", "text": "\nReturn this Axis' scale (as a str).\n\n"}, {"name": "axis.Axis.get_tick_padding", "path": "_as_gen/matplotlib.axis.axis.get_tick_padding", "type": "axis", "text": "\n\n"}, {"name": "axis.Axis.get_tick_space", "path": "_as_gen/matplotlib.axis.axis.get_tick_space", "type": "axis", "text": "\nReturn the estimated number of ticks that can fit on the axis.\n\n"}, {"name": "axis.Axis.get_ticklabel_extents", "path": "_as_gen/matplotlib.axis.axis.get_ticklabel_extents", "type": "axis", "text": "\nGet the extents of the tick labels on either side of the axes.\n\n"}, {"name": "axis.Axis.get_ticklabels", "path": "_as_gen/matplotlib.axis.axis.get_ticklabels", "type": "axis", "text": "\nGet this Axis' tick labels.\n\nWhether to return the minor or the major ticklabels.\n\nOverrides minor.\n\nSelects which ticklabels to return\n\nThe tick label strings are not populated until a `draw` method has been\ncalled.\n\nSee also: `draw` and `draw`.\n\nImage Masked\n\nFig Axes Customize Simple\n\nArtist tutorial\n\n"}, {"name": "axis.Axis.get_ticklines", "path": "_as_gen/matplotlib.axis.axis.get_ticklines", "type": "axis", "text": "\nReturn this Axis' tick lines as a list of `Line2D`s.\n\nFig Axes Customize Simple\n\nArtist tutorial\n\n"}, {"name": "axis.Axis.get_ticklocs", "path": "_as_gen/matplotlib.axis.axis.get_ticklocs", "type": "axis", "text": "\nReturn this Axis' tick locations in data coordinates.\n\nArtist tutorial\n\n"}, {"name": "axis.Axis.get_tightbbox", "path": "_as_gen/matplotlib.axis.axis.get_tightbbox", "type": "axis", "text": "\nReturn a bounding box that encloses the axis. It only accounts tick labels,\naxis label, and offsetText.\n\nIf for_layout_only is True, then the width of the label (if this is an x-axis)\nor the height of the label (if this is a y-axis) is collapsed to near zero.\nThis allows tight/constrained_layout to ignore too-long labels when doing\ntheir layout.\n\n"}, {"name": "axis.Axis.get_units", "path": "_as_gen/matplotlib.axis.axis.get_units", "type": "axis", "text": "\nReturn the units for axis.\n\n"}, {"name": "axis.Axis.get_view_interval", "path": "_as_gen/matplotlib.axis.axis.get_view_interval", "type": "axis", "text": "\nReturn the `(min, max)` view limits of this axis.\n\n"}, {"name": "axis.Axis.grid", "path": "_as_gen/matplotlib.axis.axis.grid", "type": "axis", "text": "\nConfigure the grid lines.\n\nWhether to show the grid lines. If any kwargs are supplied, it is assumed you\nwant the grid on and visible will be set to True.\n\nIf visible is None and there are no kwargs, this toggles the visibility of the\nlines.\n\nThe grid lines to apply the changes on.\n\nDefine the line properties of the grid, e.g.:\n\nBox plots with custom fill colors\n\nBoxplots\n\nBox plot vs. violin plot comparison\n\nSymlog Demo\n\n"}, {"name": "axis.Axis.limit_range_for_scale", "path": "_as_gen/matplotlib.axis.axis.limit_range_for_scale", "type": "axis", "text": "\n\n"}, {"name": "axis.Axis.OFFSETTEXTPAD", "path": "_as_gen/matplotlib.axis.axis.offsettextpad", "type": "axis", "text": "\n\n"}, {"name": "axis.Axis.remove_overlapping_locs", "path": "_as_gen/matplotlib.axis.axis.remove_overlapping_locs", "type": "axis", "text": "\nIf minor ticker locations that overlap with major ticker locations should be\ntrimmed.\n\n"}, {"name": "axis.Axis.reset_ticks", "path": "_as_gen/matplotlib.axis.axis.reset_ticks", "type": "axis", "text": "\nRe-initialize the major and minor Tick lists.\n\nEach list starts with a single fresh Tick.\n\n"}, {"name": "axis.Axis.set_data_interval", "path": "_as_gen/matplotlib.axis.axis.set_data_interval", "type": "axis", "text": "\nSet the axis data limits. This method is for internal use.\n\nIf ignore is False (the default), this method will never reduce the\npreexisting data limits, only expand them if vmin or vmax are not within them.\nMoreover, the order of vmin and vmax does not matter; the orientation of the\naxis will not change.\n\nIf ignore is True, the data limits will be set exactly to `(vmin, vmax)` in\nthat order.\n\n"}, {"name": "axis.Axis.set_default_intervals", "path": "_as_gen/matplotlib.axis.axis.set_default_intervals", "type": "axis", "text": "\nSet the default limits for the axis data and view interval if they have not\nbeen not mutated yet.\n\n"}, {"name": "axis.Axis.set_inverted", "path": "_as_gen/matplotlib.axis.axis.set_inverted", "type": "axis", "text": "\nSet whether this Axis is oriented in the \"inverse\" direction.\n\nThe \"normal\" direction is increasing to the right for the x-axis and to the\ntop for the y-axis; the \"inverse\" direction is increasing to the left for the\nx-axis and to the bottom for the y-axis.\n\n"}, {"name": "axis.Axis.set_label_coords", "path": "_as_gen/matplotlib.axis.axis.set_label_coords", "type": "axis", "text": "\nSet the coordinates of the label.\n\nBy default, the x coordinate of the y label and the y coordinate of the x\nlabel are determined by the tick label bounding boxes, but this can lead to\npoor alignment of multiple labels if there are multiple axes.\n\nYou can also specify the coordinate system of the label with the transform. If\nNone, the default coordinate system will be the axes coordinate system: (0, 0)\nis bottom left, (0.5, 0.5) is center, etc.\n\n"}, {"name": "axis.Axis.set_label_position", "path": "_as_gen/matplotlib.axis.axis.set_label_position", "type": "axis", "text": "\nSet the label position (top or bottom)\n\nTitle positioning\n\n"}, {"name": "axis.Axis.set_label_text", "path": "_as_gen/matplotlib.axis.axis.set_label_text", "type": "axis", "text": "\nSet the text value of the axis label.\n\nText string.\n\nText properties.\n\nMerged into fontdict.\n\n"}, {"name": "axis.Axis.set_major_formatter", "path": "_as_gen/matplotlib.axis.axis.set_major_formatter", "type": "axis", "text": "\nSet the formatter of the major ticker.\n\nIn addition to a `Formatter` instance, this also accepts a `str` or function.\n\nFor a `str` a `StrMethodFormatter` is used. The field used for the value must\nbe labeled `'x'` and the field used for the position must be labeled `'pos'`.\nSee the `StrMethodFormatter` documentation for more information.\n\nFor a function, a `FuncFormatter` is used. The function must take two inputs\n(a tick value `x` and a position `pos`), and return a string containing the\ncorresponding tick label. See the `FuncFormatter` documentation for more\ninformation.\n\nCreating a timeline with lines, dates, and text\n\nDate tick labels\n\nCustom tick formatter for time series\n\nLabeling ticks using engineering notation\n\nDollar Ticks\n\nBachelor's degrees by gender\n\n3D surface (colormap)\n\nSkewT-logP diagram: using transforms and custom projections\n\nCentering labels between ticks\n\nCustom Ticker1\n\nFormatting date ticks using ConciseDateFormatter\n\nDate Demo Convert\n\nPlacing date ticks using recurrence rules\n\nDate Index Formatter\n\nMajor and minor ticks\n\nSetting tick labels from a list of values\n\nBasic Usage\n\nThe Lifecycle of a Plot\n\nArtist tutorial\n\nChoosing Colormaps in Matplotlib\n\nText in Matplotlib Plots\n\n"}, {"name": "axis.Axis.set_major_locator", "path": "_as_gen/matplotlib.axis.axis.set_major_locator", "type": "axis", "text": "\nSet the locator of the major ticker.\n\nHatch-filled histograms\n\nCreating a timeline with lines, dates, and text\n\nDate tick labels\n\nAnatomy of a figure\n\n3D surface (colormap)\n\n3D surface (checkerboard)\n\nScales\n\nMRI With EEG\n\nSkewT-logP diagram: using transforms and custom projections\n\nCentering labels between ticks\n\nFormatting date ticks using ConciseDateFormatter\n\nDate Demo Convert\n\nPlacing date ticks using recurrence rules\n\nMajor and minor ticks\n\nSetting tick labels from a list of values\n\nChoosing Colormaps in Matplotlib\n\nText in Matplotlib Plots\n\n"}, {"name": "axis.Axis.set_minor_formatter", "path": "_as_gen/matplotlib.axis.axis.set_minor_formatter", "type": "axis", "text": "\nSet the formatter of the minor ticker.\n\nIn addition to a `Formatter` instance, this also accepts a `str` or function.\nSee `Axis.set_major_formatter` for more information.\n\nAnatomy of a figure\n\nScales\n\nSkewT-logP diagram: using transforms and custom projections\n\nCentering labels between ticks\n\n"}, {"name": "axis.Axis.set_minor_locator", "path": "_as_gen/matplotlib.axis.axis.set_minor_locator", "type": "axis", "text": "\nSet the locator of the minor ticker.\n\nSecondary Axis\n\nDate tick labels\n\nAnatomy of a figure\n\nCentering labels between ticks\n\nDate Demo Convert\n\nMajor and minor ticks\n\n"}, {"name": "axis.Axis.set_pickradius", "path": "_as_gen/matplotlib.axis.axis.set_pickradius", "type": "axis", "text": "\nSet the depth of the axis used by the picker.\n\n"}, {"name": "axis.Axis.set_remove_overlapping_locs", "path": "_as_gen/matplotlib.axis.axis.set_remove_overlapping_locs", "type": "axis", "text": "\n\n"}, {"name": "axis.Axis.set_tick_params", "path": "_as_gen/matplotlib.axis.axis.set_tick_params", "type": "axis", "text": "\nSet appearance parameters for ticks, ticklabels, and gridlines.\n\nFor documentation of keyword arguments, see\n`matplotlib.axes.Axes.tick_params()`.\n\nViolin plot customization\n\nDollar Ticks\n\nScatter Histogram (Locatable Axes)\n\nPythonic Matplotlib\n\nPlacing date ticks using recurrence rules\n\nDate Precision and Epochs\n\nChoosing Colormaps in Matplotlib\n\n"}, {"name": "axis.Axis.set_ticklabels", "path": "_as_gen/matplotlib.axis.axis.set_ticklabels", "type": "axis", "text": "\nSet the text values of the tick labels.\n\nDiscouraged\n\nThe use of this method is discouraged, because of the dependency on tick\npositions. In most cases, you'll want to use `set_[x/y]ticks(positions,\nlabels)` instead.\n\nIf you are using this method, you should always fix the tick positions before,\ne.g. by using `Axis.set_ticks` or by explicitly setting a `FixedLocator`.\nOtherwise, ticks are free to move and the labels may end up in unexpected\npositions.\n\nTexts for labeling each tick location in the sequence set by `Axis.set_ticks`;\nthe number of labels must match the number of locations.\n\nIf True, set minor ticks instead of major ticks.\n\nText properties.\n\nFor each tick, includes `tick.label1` if it is visible, then `tick.label2` if\nit is visible, in that order.\n\n"}, {"name": "axis.Axis.set_ticks", "path": "_as_gen/matplotlib.axis.axis.set_ticks", "type": "axis", "text": "\nSet this Axis' tick locations and optionally labels.\n\nIf necessary, the view limits of the Axis are expanded so that all given ticks\nare visible.\n\nList of tick locations.\n\nList of tick labels. If not set, the labels show the data value.\n\nIf `False`, set the major ticks; if `True`, the minor ticks.\n\n`Text` properties for the labels. These take effect only if you pass labels.\nIn other cases, please use `tick_params`.\n\nThe mandatory expansion of the view limits is an intentional design choice to\nprevent the surprise of a non-visible tick. If you need other limits, you\nshould set the limits explicitly after setting the ticks.\n\nSpine Placement\n\n"}, {"name": "axis.Axis.set_units", "path": "_as_gen/matplotlib.axis.axis.set_units", "type": "axis", "text": "\nSet the units for axis.\n\nThe units of any shared axis will also be updated.\n\nArtist tests\n\nGroup barchart with units\n\nUnit handling\n\n"}, {"name": "axis.Axis.set_view_interval", "path": "_as_gen/matplotlib.axis.axis.set_view_interval", "type": "axis", "text": "\nSet the axis view limits. This method is for internal use; Matplotlib users\nshould typically use e.g. `set_xlim` or `set_ylim`.\n\nIf ignore is False (the default), this method will never reduce the\npreexisting view limits, only expand them if vmin or vmax are not within them.\nMoreover, the order of vmin and vmax does not matter; the orientation of the\naxis will not change.\n\nIf ignore is True, the view limits will be set exactly to `(vmin, vmax)` in\nthat order.\n\n"}, {"name": "axis.Axis.update_units", "path": "_as_gen/matplotlib.axis.axis.update_units", "type": "axis", "text": "\nIntrospect data for units converter and update the axis.converter instance if\nnecessary. Return True if data is registered for unit conversion.\n\n"}, {"name": "axis.Tick", "path": "axis_api#matplotlib.axis.Tick", "type": "axis", "text": "\nAbstract base class for the axis ticks, grid lines and labels.\n\nTicks mark a position on an Axis. They contain two lines as markers and two\nlabels; one each for the bottom and top positions (in case of an `XAxis`) or\nfor the left and right positions (in case of a `YAxis`).\n\nThe left/bottom tick marker.\n\nThe right/top tick marker.\n\nThe grid line associated with the label position.\n\nThe left/bottom tick label.\n\nThe right/top tick label.\n\nbbox is the Bound2D bounding box in display coords of the Axes loc is the tick\nlocation in data coords size is the tick size in points\n\n"}, {"name": "axis.Tick.get_loc", "path": "_as_gen/matplotlib.axis.tick.get_loc", "type": "axis", "text": "\nReturn the tick location (data coords) as a scalar.\n\n"}, {"name": "axis.Tick.get_pad", "path": "_as_gen/matplotlib.axis.tick.get_pad", "type": "axis", "text": "\nGet the value of the tick label pad in points.\n\n"}, {"name": "axis.Tick.get_pad_pixels", "path": "_as_gen/matplotlib.axis.tick.get_pad_pixels", "type": "axis", "text": "\n\n"}, {"name": "axis.Tick.get_tick_padding", "path": "_as_gen/matplotlib.axis.tick.get_tick_padding", "type": "axis", "text": "\nGet the length of the tick outside of the axes.\n\n"}, {"name": "axis.Tick.get_tickdir", "path": "_as_gen/matplotlib.axis.tick.get_tickdir", "type": "axis", "text": "\n\n"}, {"name": "axis.Tick.get_view_interval", "path": "_as_gen/matplotlib.axis.tick.get_view_interval", "type": "axis", "text": "\nReturn the view limits `(min, max)` of the axis the tick belongs to.\n\n"}, {"name": "axis.Tick.set_label1", "path": "_as_gen/matplotlib.axis.tick.set_label1", "type": "axis", "text": "\nSet the label1 text.\n\n"}, {"name": "axis.Tick.set_label2", "path": "_as_gen/matplotlib.axis.tick.set_label2", "type": "axis", "text": "\nSet the label2 text.\n\n"}, {"name": "axis.Tick.set_pad", "path": "_as_gen/matplotlib.axis.tick.set_pad", "type": "axis", "text": "\nSet the tick label pad in points\n\n"}, {"name": "axis.Tick.set_url", "path": "_as_gen/matplotlib.axis.tick.set_url", "type": "axis", "text": "\nSet the url of label1 and label2.\n\n"}, {"name": "axis.Tick.update_position", "path": "_as_gen/matplotlib.axis.tick.update_position", "type": "axis", "text": "\nSet the location of tick in data coords with scalar loc.\n\n"}, {"name": "axis.Ticker", "path": "axis_api#matplotlib.axis.Ticker", "type": "axis", "text": "\nA container for the objects defining tick position and format.\n\nDetermines the positions of the ticks.\n\nDetermines the format of the tick labels.\n\n"}, {"name": "axis.XAxis", "path": "axis_api#matplotlib.axis.XAxis", "type": "axis", "text": "\nThe `Axes` to which the created Axis belongs.\n\nThe acceptance radius for containment tests. See also `Axis.contains`.\n\n"}, {"name": "axis.XAxis.axis_name", "path": "_as_gen/matplotlib.axis.xaxis.axis_name", "type": "axis", "text": "\nRead-only name identifying the axis.\n\n"}, {"name": "axis.XAxis.get_text_heights", "path": "_as_gen/matplotlib.axis.xaxis.get_text_heights", "type": "axis", "text": "\nReturn how much space should be reserved for text above and below the axes, as\na pair of floats.\n\n"}, {"name": "axis.XAxis.get_ticks_position", "path": "_as_gen/matplotlib.axis.xaxis.get_ticks_position", "type": "axis", "text": "\nReturn the ticks position (\"top\", \"bottom\", \"default\", or \"unknown\").\n\n"}, {"name": "axis.XAxis.set_label_position", "path": "_as_gen/matplotlib.axis.xaxis.set_label_position", "type": "axis", "text": "\nSet the label position (top or bottom)\n\nTitle positioning\n\n"}, {"name": "axis.XAxis.set_ticks_position", "path": "_as_gen/matplotlib.axis.xaxis.set_ticks_position", "type": "axis", "text": "\nSet the ticks position.\n\n'both' sets the ticks to appear on both positions, but does not change the\ntick labels. 'default' resets the tick positions to the default: ticks on both\npositions, labels at bottom. 'none' can be used if you don't want any ticks.\n'none' and 'both' affect only the ticks, not the labels.\n\nViolin plot customization\n\nColorbar with AxesDivider\n\nControlling the position and size of colorbars with Inset Axes\n\nIntegral as the area under a curve\n\nXKCD\n\nSpine Placement\n\nSpines\n\nCustom spine bounds\n\nDropped spines\n\nChoosing Colormaps in Matplotlib\n\n"}, {"name": "axis.XAxis.tick_bottom", "path": "_as_gen/matplotlib.axis.xaxis.tick_bottom", "type": "axis", "text": "\nMove ticks and ticklabels (if present) to the bottom of the axes.\n\nBroken Axis\n\nBachelor's degrees by gender\n\n"}, {"name": "axis.XAxis.tick_top", "path": "_as_gen/matplotlib.axis.xaxis.tick_top", "type": "axis", "text": "\nMove ticks and ticklabels (if present) to the top of the axes.\n\nBroken Axis\n\nTitle positioning\n\n"}, {"name": "axis.XTick", "path": "axis_api#matplotlib.axis.XTick", "type": "axis", "text": "\nContains all the Artists needed to make an x tick - the tick line, the label\ntext and the grid line\n\nbbox is the Bound2D bounding box in display coords of the Axes loc is the tick\nlocation in data coords size is the tick size in points\n\n"}, {"name": "axis.YAxis", "path": "axis_api#matplotlib.axis.YAxis", "type": "axis", "text": "\nThe `Axes` to which the created Axis belongs.\n\nThe acceptance radius for containment tests. See also `Axis.contains`.\n\n"}, {"name": "axis.YAxis.axis_name", "path": "_as_gen/matplotlib.axis.yaxis.axis_name", "type": "axis", "text": "\nRead-only name identifying the axis.\n\n"}, {"name": "axis.YAxis.get_text_widths", "path": "_as_gen/matplotlib.axis.yaxis.get_text_widths", "type": "axis", "text": "\n\n"}, {"name": "axis.YAxis.get_ticks_position", "path": "_as_gen/matplotlib.axis.yaxis.get_ticks_position", "type": "axis", "text": "\nReturn the ticks position (\"left\", \"right\", \"default\", or \"unknown\").\n\n"}, {"name": "axis.YAxis.set_label_position", "path": "_as_gen/matplotlib.axis.yaxis.set_label_position", "type": "axis", "text": "\nSet the label position (left or right)\n\n"}, {"name": "axis.YAxis.set_offset_position", "path": "_as_gen/matplotlib.axis.yaxis.set_offset_position", "type": "axis", "text": "\n\n"}, {"name": "axis.YAxis.set_ticks_position", "path": "_as_gen/matplotlib.axis.yaxis.set_ticks_position", "type": "axis", "text": "\nSet the ticks position.\n\n'both' sets the ticks to appear on both positions, but does not change the\ntick labels. 'default' resets the tick positions to the default: ticks on both\npositions, labels at left. 'none' can be used if you don't want any ticks.\n'none' and 'both' affect only the ticks, not the labels.\n\nSpine Placement\n\nSpines\n\nCustom spine bounds\n\nDropped spines\n\n"}, {"name": "axis.YAxis.tick_left", "path": "_as_gen/matplotlib.axis.yaxis.tick_left", "type": "axis", "text": "\nMove ticks and ticklabels (if present) to the left of the axes.\n\nBachelor's degrees by gender\n\nSet default y-axis tick labels on the right\n\n"}, {"name": "axis.YAxis.tick_right", "path": "_as_gen/matplotlib.axis.yaxis.tick_right", "type": "axis", "text": "\nMove ticks and ticklabels (if present) to the right of the axes.\n\n"}, {"name": "axis.YTick", "path": "axis_api#matplotlib.axis.YTick", "type": "axis", "text": "\nContains all the Artists needed to make a Y tick - the tick line, the label\ntext and the grid line\n\nbbox is the Bound2D bounding box in display coords of the Axes loc is the tick\nlocation in data coords size is the tick size in points\n\n"}, {"name": "axisartist", "path": "toolkits/axisartist", "type": "axisartist", "text": "\nThe axisartist namespace provides a derived Axes implementation\n(`mpl_toolkits.axisartist.Axes`), designed to support curvilinear grids. The\nbiggest difference is that the artists that are responsible for drawing axis\nlines, ticks, ticklabels, and axis labels are separated out from Matplotlib's\nAxis class.\n\nYou can find a tutorial describing usage of axisartist at the axisartist user\nguide.\n\nThe submodules of the axisartist API are:\n\n`axisartist.angle_helper`\n\n`axisartist.axes_divider`\n\n`axisartist.axes_grid`\n\n`axisartist.axes_rgb`\n\n`axisartist.axis_artist`\n\nThe `axis_artist` module implements custom artists to draw axis elements (axis\nlines and labels, tick lines and labels, grid lines).\n\n`axisartist.axisline_style`\n\n`axisartist.axislines`\n\nAxislines includes modified implementation of the Axes class.\n\n`axisartist.clip_path`\n\n`axisartist.floating_axes`\n\nAn experimental support for curvilinear grid.\n\n`axisartist.grid_finder`\n\n`axisartist.grid_helper_curvelinear`\n\nAn experimental support for curvilinear grid.\n\n`axisartist.parasite_axes`\n\n"}, {"name": "axisartist.angle_helper", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper", "type": "axisartist", "text": "\n`ExtremeFinderCycle`(nx, ny[, lon_cycle, ...])\n\nThis subclass handles the case where one or both coordinates should be taken\nmodulo 360, or be restricted to not exceed a specific range.\n\n`FormatterDMS`()\n\n`FormatterHMS`()\n\n`LocatorBase`(nbins[, include_last])\n\n`LocatorD`(nbins[, include_last])\n\n`LocatorDM`(nbins[, include_last])\n\n`LocatorDMS`(nbins[, include_last])\n\n`LocatorH`(nbins[, include_last])\n\n`LocatorHM`(nbins[, include_last])\n\n`LocatorHMS`(nbins[, include_last])\n\n`select_step`(v1, v2, nv[, hour, ...])\n\n`select_step24`(v1, v2, nv[, include_last, ...])\n\n`select_step360`(v1, v2, nv[, include_last, ...])\n\n`select_step_degree`(dv)\n\n`select_step_hour`(dv)\n\n`select_step_sub`(dv)\n\n"}, {"name": "axisartist.angle_helper.ExtremeFinderCycle", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.extremefindercycle", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple`\n\nThis subclass handles the case where one or both coordinates should be taken\nmodulo 360, or be restricted to not exceed a specific range.\n\nThe number of samples in each direction.\n\nIf not None, values in the corresponding direction are taken modulo lon_cycle\nor lat_cycle; in theory this can be any number but the implementation actually\nassumes that it is 360 (if not None); other values give nonsensical results.\n\nThis is done by \"unwrapping\" the transformed grid coordinates so that jumps\nare less than a half-cycle; then normalizing the span to no more than a full\ncycle.\n\nFor example, if values are in the union of the [0, 2] and [358, 360] intervals\n(typically, angles measured modulo 360), the values in the second interval are\nnormalized to [-2, 0] instead so that the values now cover [-2, 2]. If values\nare in a range of [5, 1000], this gets normalized to [5, 365].\n\nIf not None, the computed bounding box is clipped to the given range in the\ncorresponding direction.\n\nCompute an approximation of the bounding box obtained by applying transform_xy\nto the box delimited by `(x1, y1, x2, y2)`.\n\nThe intended use is to have `(x1, y1, x2, y2)` in axes coordinates, and have\ntransform_xy be the transform from axes coordinates to data coordinates; this\nmethod then returns the range of data coordinates that span the actual axes.\n\nThe computation is done by sampling `nx * ny` equispaced points in the `(x1,\ny1, x2, y2)` box and finding the resulting points with extremal coordinates;\nthen adding some padding to take into account the finite sampling.\n\nAs each sampling step covers a relative range of 1/nx or 1/ny, the padding is\ncomputed by expanding the span covered by the extremal coordinates by these\nfractions.\n\naxis_direction demo\n\nCurvilinear grid demo\n\nfloating_axis demo\n\nSimple Axis Pad\n\n"}, {"name": "axisartist.angle_helper.ExtremeFinderCycle.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.extremefindercycle#mpl_toolkits.axisartist.angle_helper.ExtremeFinderCycle.__call__", "type": "axisartist", "text": "\nCompute an approximation of the bounding box obtained by applying transform_xy\nto the box delimited by `(x1, y1, x2, y2)`.\n\nThe intended use is to have `(x1, y1, x2, y2)` in axes coordinates, and have\ntransform_xy be the transform from axes coordinates to data coordinates; this\nmethod then returns the range of data coordinates that span the actual axes.\n\nThe computation is done by sampling `nx * ny` equispaced points in the `(x1,\ny1, x2, y2)` box and finding the resulting points with extremal coordinates;\nthen adding some padding to take into account the finite sampling.\n\nAs each sampling step covers a relative range of 1/nx or 1/ny, the padding is\ncomputed by expanding the span covered by the extremal coordinates by these\nfractions.\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms", "type": "axisartist", "text": "\nBases: `object`\n\nCall self as a function.\n\naxis_direction demo\n\nCurvilinear grid demo\n\nmpl_toolkits.axisartist.floating_axes features\n\nfloating_axis demo\n\nSimple Axis Pad\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.deg_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.deg_mark", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d_m", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d_m", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d_m_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d_m_partial", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d_ms", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d_ms", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_ds", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_ds", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_s_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_s_partial", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_ss_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_ss_partial", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.min_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.min_mark", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.sec_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.sec_mark", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.angle_helper.FormatterDMS`\n\nCall self as a function.\n\nmpl_toolkits.axisartist.floating_axes features\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.deg_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.deg_mark", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d_m", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d_m", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d_m_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d_m_partial", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d_ms", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d_ms", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_ds", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_ds", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_s_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_s_partial", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_ss_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_ss_partial", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.min_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.min_mark", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.sec_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.sec_mark", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.LocatorBase", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorbase", "type": "axisartist", "text": "\nBases: `object`\n\naxis_direction demo\n\nCurvilinear grid demo\n\nmpl_toolkits.axisartist.floating_axes features\n\nfloating_axis demo\n\nSimple Axis Pad\n\n"}, {"name": "axisartist.angle_helper.LocatorBase.set_params()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorbase#mpl_toolkits.axisartist.angle_helper.LocatorBase.set_params", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.LocatorD", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatord", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.angle_helper.LocatorBase`\n\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.LocatorD.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatord#mpl_toolkits.axisartist.angle_helper.LocatorD.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.LocatorDM", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordm", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.angle_helper.LocatorBase`\n\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.LocatorDM.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordm#mpl_toolkits.axisartist.angle_helper.LocatorDM.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.LocatorDMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordms", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.angle_helper.LocatorBase`\n\nCall self as a function.\n\naxis_direction demo\n\nCurvilinear grid demo\n\nfloating_axis demo\n\nSimple Axis Pad\n\n"}, {"name": "axisartist.angle_helper.LocatorDMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordms#mpl_toolkits.axisartist.angle_helper.LocatorDMS.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.LocatorH", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorh", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.angle_helper.LocatorBase`\n\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.LocatorH.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorh#mpl_toolkits.axisartist.angle_helper.LocatorH.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.LocatorHM", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhm", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.angle_helper.LocatorBase`\n\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.LocatorHM.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhm#mpl_toolkits.axisartist.angle_helper.LocatorHM.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.LocatorHMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhms", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.angle_helper.LocatorBase`\n\nCall self as a function.\n\nmpl_toolkits.axisartist.floating_axes features\n\n"}, {"name": "axisartist.angle_helper.LocatorHMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhms#mpl_toolkits.axisartist.angle_helper.LocatorHMS.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.angle_helper.select_step", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.select_step24", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step24", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.select_step360", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step360", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.select_step_degree", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step_degree", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.select_step_hour", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step_hour", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.angle_helper.select_step_sub", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step_sub", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axes_divider", "path": "_as_gen/mpl_toolkits.axisartist.axes_divider", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axes_grid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid", "type": "axisartist", "text": "\n`AxesGrid`\n\nalias of `mpl_toolkits.axisartist.axes_grid.ImageGrid`\n\n`CbarAxes`(*args, orientation, **kwargs)\n\n[Deprecated]\n\n`Grid`(fig, rect, nrows_ncols[, ngrids, ...])\n\n`ImageGrid`(fig, rect, nrows_ncols[, ngrids, ...])\n\n"}, {"name": "axisartist.axes_grid.AxesGrid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.axesgrid", "type": "axisartist", "text": "\nalias of `mpl_toolkits.axisartist.axes_grid.ImageGrid`\n\n"}, {"name": "axisartist.axes_grid.CbarAxes", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.cbaraxes", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase`,\n`mpl_toolkits.axisartist.axislines.Axes`\n\n[Deprecated]\n\nDeprecated since version 3.5:\n\nBuild an Axes in a figure.\n\nThe Axes is built in the `Figure` fig.\n\nThe Axes is built in the rectangle rect. rect is in `Figure` coordinates.\n\nThe x or y `axis` is shared with the x or y axis in the input `Axes`.\n\nWhether the Axes frame is visible.\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See\n`set_box_aspect` for details.\n\nOther optional keyword arguments:\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nThe new `Axes` object.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axes_grid.CbarAxes.set()", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.cbaraxes#mpl_toolkits.axisartist.axes_grid.CbarAxes.set", "type": "axisartist", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axes_grid.Grid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.grid", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_grid.Grid`\n\nThe parent figure.\n\nThe axes position, as a `(left, bottom, width, height)` tuple or as a three-\ndigit subplot position code (e.g., \"121\").\n\nNumber of rows and columns in the grid.\n\nIf not None, only the first ngrids axes in the grid are created.\n\nWhether axes are created in row-major (\"row by row\") or column-major order\n(\"column by column\"). This also affects the order in which axes are accessed\nusing indexing (`grid[index]`).\n\nPadding or (horizontal padding, vertical padding) between axes, in inches.\n\nWhether all axes share their x- and y-axis. Overrides share_x and share_y.\n\nWhether all axes of a column share their x-axis.\n\nWhether all axes of a row share their y-axis.\n\nDetermines which axes will get tick labels:\n\nWhether the axes aspect ratio follows the aspect ratio of the data limits.\n\n"}, {"name": "axisartist.axes_grid.ImageGrid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.imagegrid", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_grid.ImageGrid`\n\nThe parent figure.\n\nThe axes position, as a `(left, bottom, width, height)` tuple or as a three-\ndigit subplot position code (e.g., \"121\").\n\nNumber of rows and columns in the grid.\n\nIf not None, only the first ngrids axes in the grid are created.\n\nWhether axes are created in row-major (\"row by row\") or column-major order\n(\"column by column\"). This also affects the order in which axes are accessed\nusing indexing (`grid[index]`).\n\nPadding or (horizontal padding, vertical padding) between axes, in inches.\n\nWhether all axes share their x- and y-axis.\n\nWhether the axes aspect ratio follows the aspect ratio of the data limits.\n\nDetermines which axes will get tick labels:\n\nWhether to create a colorbar for \"each\" axes, a \"single\" colorbar for the\nentire grid, colorbars only for axes on the \"edge\" determined by\ncbar_location, or no colorbars. The colorbars are stored in the `cbar_axes`\nattribute.\n\nPadding between the image axes and the colorbar axes.\n\nColorbar size.\n\nIf True, each axes in the grid has a cax attribute that is bound to associated\ncbar_axes.\n\n"}, {"name": "axisartist.axes_rgb", "path": "_as_gen/mpl_toolkits.axisartist.axes_rgb", "type": "axisartist", "text": "\n`RGBAxes`(*args[, pad])\n\n"}, {"name": "axisartist.axes_rgb.RGBAxes", "path": "_as_gen/mpl_toolkits.axisartist.axes_rgb.rgbaxes", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axes_grid1.axes_rgb.RGBAxes`\n\nfraction of the axes height to put as padding.\n\nUnpacked into axes_class() init for RGB\n\nUnpacked into axes_class() init for RGB, R, G, B axes\n\n"}, {"name": "axisartist.axis_artist", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist", "type": "axisartist", "text": "\nThe `axis_artist` module implements custom artists to draw axis elements (axis\nlines and labels, tick lines and labels, grid lines).\n\nAxis lines and labels and tick lines and labels are managed by the\n`AxisArtist` class; grid lines are managed by the `GridlinesCollection` class.\n\nThere is one `AxisArtist` per Axis; it can be accessed through the `axis`\ndictionary of the parent Axes (which should be a\n`mpl_toolkits.axislines.Axes`), e.g. `ax.axis[\"bottom\"]`.\n\nChildren of the AxisArtist are accessed as attributes: `.line` and `.label`\nfor the axis line and label, `.major_ticks`, `.major_ticklabels`,\n`.minor_ticks`, `.minor_ticklabels` for the tick lines and labels (e.g.\n`ax.axis[\"bottom\"].line`).\n\nChildren properties (colors, fonts, line widths, etc.) can be set using\nsetters, e.g.\n\nHowever, things like the locations of ticks, and their ticklabels need to be\nchanged from the side of the grid_helper.\n\n`AxisArtist`, `AxisLabel`, `TickLabels` have an axis_direction attribute,\nwhich adjusts the location, angle, etc. The axis_direction must be one of\n\"left\", \"right\", \"bottom\", \"top\", and follows the Matplotlib convention for\nrectangular axis.\n\nFor example, for the bottom axis (the left and right is relative to the\ndirection of the increasing coordinate),\n\nThe text angles are actually relative to (90 + angle of the direction to the\nticklabel), which gives 0 for bottom axis.\n\nParameter\n\nleft\n\nbottom\n\nright\n\ntop\n\nticklabels location\n\nleft\n\nright\n\nright\n\nleft\n\naxislabel location\n\nleft\n\nright\n\nright\n\nleft\n\nticklabels angle\n\n90\n\n0\n\n-90\n180\n\naxislabel angle\n\n180\n\n0\n\n0\n\n180\n\nticklabel va\n\ncenter\n\nbaseline\n\ncenter\n\nbaseline\n\naxislabel va\n\ncenter\n\ntop\n\ncenter\n\nbottom\n\nticklabel ha\n\nright\n\ncenter\n\nright\n\ncenter\n\naxislabel ha\n\nright\n\ncenter\n\nright\n\ncenter\n\nTicks are by default direct opposite side of the ticklabels. To make ticks to\nthe same side of the ticklabels,\n\nThe following attributes can be customized (use the `set_xxx` methods):\n\n`AttributeCopier`()\n\n`AxisArtist`(axes, helper[, offset, ...])\n\nAn artist which draws axis (a line along which the n-th axes coord is\nconstant) line, ticks, ticklabels, and axis label.\n\n`AxisLabel`(*args[, axis_direction, axis])\n\nAxis Label.\n\n`GridlinesCollection`(*args[, which, axis])\n\n`LabelBase`(*args, **kwargs)\n\nA base class for AxisLabel and TickLabels.\n\n`TickLabels`(*[, axis_direction])\n\nTick Labels.\n\n`Ticks`(ticksize[, tick_out, axis])\n\nTicks are derived from Line2D, and note that ticks themselves are markers.\n\n"}, {"name": "axisartist.axis_artist.AttributeCopier", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.attributecopier", "type": "axisartist", "text": "\nBases: `object`\n\nReturn the underlying artist that actually defines some properties (e.g.,\ncolor) of this artist.\n\n"}, {"name": "axisartist.axis_artist.AttributeCopier.get_attribute_from_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.attributecopier#mpl_toolkits.axisartist.axis_artist.AttributeCopier.get_attribute_from_ref_artist", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.AttributeCopier.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.attributecopier#mpl_toolkits.axisartist.axis_artist.AttributeCopier.get_ref_artist", "type": "axisartist", "text": "\nReturn the underlying artist that actually defines some properties (e.g.,\ncolor) of this artist.\n\n"}, {"name": "axisartist.axis_artist.AxisArtist", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist", "type": "axisartist", "text": "\nBases: `matplotlib.artist.Artist`\n\nAn artist which draws axis (a line along which the n-th axes coord is\nconstant) line, ticks, ticklabels, and axis label.\n\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\nReturn the current axisline style.\n\nReturn axis artist helper instance.\n\nLike `Artist.get_window_extent`, but includes any clipping.\n\nrenderer that will be used to draw the figures (i.e.\n`fig.canvas.get_renderer()`)\n\nThe enclosing bounding box (in figure pixel coordinates).\n\nReturn the `Transform` instance used by this artist.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`axis_direction`\n\nunknown\n\n`axislabel_direction`\n\n{\"+\", \"-\"}\n\n`axisline_style`\n\nstr or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`ticklabel_direction`\n\n{\"+\", \"-\"}\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\nAdjust the direction, text angle, text alignment of ticklabels, labels\nfollowing the matplotlib convention for the rectangle axes.\n\nThe axis_direction must be one of [left, right, bottom, top].\n\nproperty\n\nleft\n\nbottom\n\nright\n\ntop\n\nticklabels location\n\n\"-\"\n\n\"+\"\n\n\"+\"\n\n\"-\"\n\naxislabel location\n\n\"-\"\n\n\"+\"\n\n\"+\"\n\n\"-\"\n\nticklabels angle\n\n90\n\n0\n\n-90\n180\n\nticklabel va\n\ncenter\n\nbaseline\n\ncenter\n\nbaseline\n\nticklabel ha\n\nright\n\ncenter\n\nright\n\ncenter\n\naxislabel angle\n\n180\n\n0\n\n0\n\n180\n\naxislabel va\n\ncenter\n\ntop\n\ncenter\n\nbottom\n\naxislabel ha\n\nright\n\ncenter\n\nright\n\ncenter\n\nNote that the direction \"+\" and \"-\" are relative to the direction of the\nincreasing coordinate. Also, the text angles are actually relative to (90 +\nangle of the direction to the ticklabel), which gives 0 for bottom axis.\n\nAdjust the direction of the axislabel.\n\nNote that the label_directions '+' and '-' are relative to the direction of\nthe increasing coordinate.\n\nSet the axisline style.\n\nThe new style is completely defined by the passed attributes. Existing style\nattributes are forgotten.\n\nThe line style, e.g. '->', optionally followed by a comma-separated list of\nattributes. Alternatively, the attributes can be provided as keywords.\n\nIf None this returns a string containing the available styles.\n\nThe following two commands are equal: >>> set_axisline_style(\"->,size=1.5\")\n>>> set_axisline_style(\"->\", size=1.5)\n\nSet a label that will be displayed in the legend.\n\ns will be converted to a string by calling `str`.\n\nAdjust the direction of the ticklabel.\n\nNote that the label_directions '+' and '-' are relative to the direction of\nthe increasing coordinate.\n\nToggle visibility of ticks, ticklabels, and (axis) label. To turn all off,\n\nTo turn all off but ticks on\n\nTo turn all on but (axis) label off\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.draw", "type": "axisartist", "text": "\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.get_axisline_style()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_axisline_style", "type": "axisartist", "text": "\nReturn the current axisline style.\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.get_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_helper", "type": "axisartist", "text": "\nReturn axis artist helper instance.\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.get_tightbbox()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_tightbbox", "type": "axisartist", "text": "\nLike `Artist.get_window_extent`, but includes any clipping.\n\nrenderer that will be used to draw the figures (i.e.\n`fig.canvas.get_renderer()`)\n\nThe enclosing bounding box (in figure pixel coordinates).\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.get_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_transform", "type": "axisartist", "text": "\nReturn the `Transform` instance used by this artist.\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.invert_ticklabel_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.invert_ticklabel_direction", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set", "type": "axisartist", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`axis_direction`\n\nunknown\n\n`axislabel_direction`\n\n{\"+\", \"-\"}\n\n`axisline_style`\n\nstr or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`ticklabel_direction`\n\n{\"+\", \"-\"}\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.set_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_axis_direction", "type": "axisartist", "text": "\nAdjust the direction, text angle, text alignment of ticklabels, labels\nfollowing the matplotlib convention for the rectangle axes.\n\nThe axis_direction must be one of [left, right, bottom, top].\n\nproperty\n\nleft\n\nbottom\n\nright\n\ntop\n\nticklabels location\n\n\"-\"\n\n\"+\"\n\n\"+\"\n\n\"-\"\n\naxislabel location\n\n\"-\"\n\n\"+\"\n\n\"+\"\n\n\"-\"\n\nticklabels angle\n\n90\n\n0\n\n-90\n180\n\nticklabel va\n\ncenter\n\nbaseline\n\ncenter\n\nbaseline\n\nticklabel ha\n\nright\n\ncenter\n\nright\n\ncenter\n\naxislabel angle\n\n180\n\n0\n\n0\n\n180\n\naxislabel va\n\ncenter\n\ntop\n\ncenter\n\nbottom\n\naxislabel ha\n\nright\n\ncenter\n\nright\n\ncenter\n\nNote that the direction \"+\" and \"-\" are relative to the direction of the\nincreasing coordinate. Also, the text angles are actually relative to (90 +\nangle of the direction to the ticklabel), which gives 0 for bottom axis.\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.set_axislabel_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_axislabel_direction", "type": "axisartist", "text": "\nAdjust the direction of the axislabel.\n\nNote that the label_directions '+' and '-' are relative to the direction of\nthe increasing coordinate.\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.set_axisline_style()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_axisline_style", "type": "axisartist", "text": "\nSet the axisline style.\n\nThe new style is completely defined by the passed attributes. Existing style\nattributes are forgotten.\n\nThe line style, e.g. '->', optionally followed by a comma-separated list of\nattributes. Alternatively, the attributes can be provided as keywords.\n\nIf None this returns a string containing the available styles.\n\nThe following two commands are equal: >>> set_axisline_style(\"->,size=1.5\")\n>>> set_axisline_style(\"->\", size=1.5)\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.set_label()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_label", "type": "axisartist", "text": "\nSet a label that will be displayed in the legend.\n\ns will be converted to a string by calling `str`.\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.set_ticklabel_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_ticklabel_direction", "type": "axisartist", "text": "\nAdjust the direction of the ticklabel.\n\nNote that the label_directions '+' and '-' are relative to the direction of\nthe increasing coordinate.\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.toggle()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.toggle", "type": "axisartist", "text": "\nToggle visibility of ticks, ticklabels, and (axis) label. To turn all off,\n\nTo turn all off but ticks on\n\nTo turn all on but (axis) label off\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.ZORDER", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.ZORDER", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.zorder", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.zorder", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.AxisLabel", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axis_artist.AttributeCopier`,\n`mpl_toolkits.axisartist.axis_artist.LabelBase`\n\nAxis Label. Derived from Text. The position of the text is updated in the fly,\nso changing text position has no effect. Otherwise, the properties can be\nchanged as a normal Text.\n\nTo change the pad between ticklabels and axis label, use set_pad.\n\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\nReturn the color of the text.\n\nReturn the internal pad in points.\n\nSee `set_pad` for more details.\n\nReturn the underlying artist that actually defines some properties (e.g.,\ncolor) of this artist.\n\nReturn the text string.\n\nReturn the `Bbox` bounding the text, in display units.\n\nIn addition to being used internally, this is useful for specifying clickable\nregions in a png file on a web page.\n\nA renderer is needed to compute the bounding box. If the artist has already\nbeen drawn, the renderer is cached; thus, it is only necessary to pass this\nargument when calling `get_window_extent` before the first `draw`. In\npractice, it is usually easier to trigger a draw first (e.g. by saving the\nfigure).\n\nThe dpi value for computing the bbox, defaults to `self.figure.dpi` (not the\nrenderer dpi); should be set e.g. if to match regions with a figure saved with\na custom dpi value.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`axis_direction`\n\nunknown\n\n`backgroundcolor`\n\ncolor\n\n`bbox`\n\ndict with properties for `patches.FancyBboxPatch`\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`default_alignment`\n\nunknown\n\n`default_angle`\n\nunknown\n\n`figure`\n\n`Figure`\n\n`fontfamily` or family\n\n{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}\n\n`fontproperties` or font or font_properties\n\n`font_manager.FontProperties` or `str` or `pathlib.Path`\n\n`fontsize` or size\n\nfloat or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-\nlarge'}\n\n`fontstretch` or stretch\n\n{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed',\n'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-\nexpanded', 'ultra-expanded'}\n\n`fontstyle` or style\n\n{'normal', 'italic', 'oblique'}\n\n`fontvariant` or variant\n\n{'normal', 'small-caps'}\n\n`fontweight` or weight\n\n{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular',\n'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',\n'extra bold', 'black'}\n\n`gid`\n\nstr\n\n`horizontalalignment` or ha\n\n{'center', 'right', 'left'}\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linespacing`\n\nfloat (multiple of font size)\n\n`math_fontfamily`\n\nstr\n\n`multialignment` or ma\n\n{'left', 'right', 'center'}\n\n`pad`\n\nunknown\n\n`parse_math`\n\nbool\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n(float, float)\n\n`rasterized`\n\nbool\n\n`rotation`\n\nfloat or {'vertical', 'horizontal'}\n\n`rotation_mode`\n\n{None, 'default', 'anchor'}\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`text`\n\nobject\n\n`transform`\n\n`Transform`\n\n`transform_rotates_text`\n\nbool\n\n`url`\n\nstr\n\n`usetex`\n\nbool or None\n\n`verticalalignment` or va\n\n{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n`visible`\n\nbool\n\n`wrap`\n\nbool\n\n`x`\n\nfloat\n\n`y`\n\nfloat\n\n`zorder`\n\nfloat\n\nAdjust the text angle and text alignment of axis label according to the\nmatplotlib convention.\n\nproperty\n\nleft\n\nbottom\n\nright\n\ntop\n\naxislabel angle\n\n180\n\n0\n\n0\n\n180\n\naxislabel va\n\ncenter\n\ntop\n\ncenter\n\nbottom\n\naxislabel ha\n\nright\n\ncenter\n\nright\n\ncenter\n\nNote that the text angles are actually relative to (90 + angle of the\ndirection to the ticklabel), which gives 0 for bottom axis.\n\nSet the internal pad in points.\n\nThe actual pad will be the sum of the internal pad and the external pad (the\nlatter is set automatically by the AxisArtist).\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.draw", "type": "axisartist", "text": "\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.get_color()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_color", "type": "axisartist", "text": "\nReturn the color of the text.\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.get_pad()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_pad", "type": "axisartist", "text": "\nReturn the internal pad in points.\n\nSee `set_pad` for more details.\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_ref_artist", "type": "axisartist", "text": "\nReturn the underlying artist that actually defines some properties (e.g.,\ncolor) of this artist.\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.get_text()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_text", "type": "axisartist", "text": "\nReturn the text string.\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.get_window_extent()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_window_extent", "type": "axisartist", "text": "\nReturn the `Bbox` bounding the text, in display units.\n\nIn addition to being used internally, this is useful for specifying clickable\nregions in a png file on a web page.\n\nA renderer is needed to compute the bounding box. If the artist has already\nbeen drawn, the renderer is cached; thus, it is only necessary to pass this\nargument when calling `get_window_extent` before the first `draw`. In\npractice, it is usually easier to trigger a draw first (e.g. by saving the\nfigure).\n\nThe dpi value for computing the bbox, defaults to `self.figure.dpi` (not the\nrenderer dpi); should be set e.g. if to match regions with a figure saved with\na custom dpi value.\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set", "type": "axisartist", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`axis_direction`\n\nunknown\n\n`backgroundcolor`\n\ncolor\n\n`bbox`\n\ndict with properties for `patches.FancyBboxPatch`\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`default_alignment`\n\nunknown\n\n`default_angle`\n\nunknown\n\n`figure`\n\n`Figure`\n\n`fontfamily` or family\n\n{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}\n\n`fontproperties` or font or font_properties\n\n`font_manager.FontProperties` or `str` or `pathlib.Path`\n\n`fontsize` or size\n\nfloat or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-\nlarge'}\n\n`fontstretch` or stretch\n\n{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed',\n'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-\nexpanded', 'ultra-expanded'}\n\n`fontstyle` or style\n\n{'normal', 'italic', 'oblique'}\n\n`fontvariant` or variant\n\n{'normal', 'small-caps'}\n\n`fontweight` or weight\n\n{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular',\n'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',\n'extra bold', 'black'}\n\n`gid`\n\nstr\n\n`horizontalalignment` or ha\n\n{'center', 'right', 'left'}\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linespacing`\n\nfloat (multiple of font size)\n\n`math_fontfamily`\n\nstr\n\n`multialignment` or ma\n\n{'left', 'right', 'center'}\n\n`pad`\n\nunknown\n\n`parse_math`\n\nbool\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n(float, float)\n\n`rasterized`\n\nbool\n\n`rotation`\n\nfloat or {'vertical', 'horizontal'}\n\n`rotation_mode`\n\n{None, 'default', 'anchor'}\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`text`\n\nobject\n\n`transform`\n\n`Transform`\n\n`transform_rotates_text`\n\nbool\n\n`url`\n\nstr\n\n`usetex`\n\nbool or None\n\n`verticalalignment` or va\n\n{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n`visible`\n\nbool\n\n`wrap`\n\nbool\n\n`x`\n\nfloat\n\n`y`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.set_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_axis_direction", "type": "axisartist", "text": "\nAdjust the text angle and text alignment of axis label according to the\nmatplotlib convention.\n\nproperty\n\nleft\n\nbottom\n\nright\n\ntop\n\naxislabel angle\n\n180\n\n0\n\n0\n\n180\n\naxislabel va\n\ncenter\n\ntop\n\ncenter\n\nbottom\n\naxislabel ha\n\nright\n\ncenter\n\nright\n\ncenter\n\nNote that the text angles are actually relative to (90 + angle of the\ndirection to the ticklabel), which gives 0 for bottom axis.\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.set_default_alignment()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_default_alignment", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.set_default_angle()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_default_angle", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.set_pad()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_pad", "type": "axisartist", "text": "\nSet the internal pad in points.\n\nThe actual pad will be the sum of the internal pad and the external pad (the\nlatter is set automatically by the AxisArtist).\n\n"}, {"name": "axisartist.axis_artist.GridlinesCollection", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection", "type": "axisartist", "text": "\nBases: `matplotlib.collections.LineCollection`\n\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\narray-like or scalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa or antialiaseds\n\nbool or list of bools\n\n`array`\n\narray-like or None\n\n`axis`\n\nunknown\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clim`\n\n(vmin: float, vmax: float)\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`cmap`\n\n`Colormap` or str or None\n\n`color`\n\ncolor or list of colors\n\n`colors`\n\ncolor or list of colors\n\n`edgecolor` or ec or edgecolors\n\ncolor or list of colors or 'face'\n\n`facecolor` or facecolors or fc\n\ncolor or list of colors\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`grid_helper`\n\nunknown\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or dashes or linestyles or ls\n\nstr or tuple or list thereof\n\n`linewidth` or linewidths or lw\n\nfloat or list of floats\n\n`norm`\n\n`Normalize` or None\n\n`offset_transform`\n\n`Transform`\n\n`offsets`\n\n(N, 2) or (2,) array-like\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`paths`\n\nunknown\n\n`picker`\n\nNone or bool or float or callable\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`segments`\n\nunknown\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`urls`\n\nlist of str or None\n\n`verts`\n\nunknown\n\n`visible`\n\nbool\n\n`which`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axis_artist.GridlinesCollection.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.draw", "type": "axisartist", "text": "\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\n"}, {"name": "axisartist.axis_artist.GridlinesCollection.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set", "type": "axisartist", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\narray-like or scalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa or antialiaseds\n\nbool or list of bools\n\n`array`\n\narray-like or None\n\n`axis`\n\nunknown\n\n`capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`clim`\n\n(vmin: float, vmax: float)\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`cmap`\n\n`Colormap` or str or None\n\n`color`\n\ncolor or list of colors\n\n`colors`\n\ncolor or list of colors\n\n`edgecolor` or ec or edgecolors\n\ncolor or list of colors or 'face'\n\n`facecolor` or facecolors or fc\n\ncolor or list of colors\n\n`figure`\n\n`Figure`\n\n`gid`\n\nstr\n\n`grid_helper`\n\nunknown\n\n`hatch`\n\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\n`in_layout`\n\nbool\n\n`joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`label`\n\nobject\n\n`linestyle` or dashes or linestyles or ls\n\nstr or tuple or list thereof\n\n`linewidth` or linewidths or lw\n\nfloat or list of floats\n\n`norm`\n\n`Normalize` or None\n\n`offset_transform`\n\n`Transform`\n\n`offsets`\n\n(N, 2) or (2,) array-like\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`paths`\n\nunknown\n\n`picker`\n\nNone or bool or float or callable\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`segments`\n\nunknown\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`urls`\n\nlist of str or None\n\n`verts`\n\nunknown\n\n`visible`\n\nbool\n\n`which`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axis_artist.GridlinesCollection.set_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set_axis", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.GridlinesCollection.set_grid_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set_grid_helper", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.GridlinesCollection.set_which()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set_which", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.LabelBase", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase", "type": "axisartist", "text": "\nBases: `matplotlib.text.Text`\n\nA base class for AxisLabel and TickLabels. The position and angle of the text\nare calculated by to offset_ref_angle, text_ref_angle, and offset_radius\nattributes.\n\nCreate a `Text` instance at x, y with string text.\n\nValid keyword arguments are:\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`backgroundcolor`\n\ncolor\n\n`bbox`\n\ndict with properties for `patches.FancyBboxPatch`\n\n`clip_box`\n\nunknown\n\n`clip_on`\n\nunknown\n\n`clip_path`\n\nunknown\n\n`color` or c\n\ncolor\n\n`figure`\n\n`Figure`\n\n`fontfamily` or family\n\n{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}\n\n`fontproperties` or font or font_properties\n\n`font_manager.FontProperties` or `str` or `pathlib.Path`\n\n`fontsize` or size\n\nfloat or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-\nlarge'}\n\n`fontstretch` or stretch\n\n{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed',\n'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-\nexpanded', 'ultra-expanded'}\n\n`fontstyle` or style\n\n{'normal', 'italic', 'oblique'}\n\n`fontvariant` or variant\n\n{'normal', 'small-caps'}\n\n`fontweight` or weight\n\n{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular',\n'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',\n'extra bold', 'black'}\n\n`gid`\n\nstr\n\n`horizontalalignment` or ha\n\n{'center', 'right', 'left'}\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linespacing`\n\nfloat (multiple of font size)\n\n`math_fontfamily`\n\nstr\n\n`multialignment` or ma\n\n{'left', 'right', 'center'}\n\n`parse_math`\n\nbool\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n(float, float)\n\n`rasterized`\n\nbool\n\n`rotation`\n\nfloat or {'vertical', 'horizontal'}\n\n`rotation_mode`\n\n{None, 'default', 'anchor'}\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`text`\n\nobject\n\n`transform`\n\n`Transform`\n\n`transform_rotates_text`\n\nbool\n\n`url`\n\nstr\n\n`usetex`\n\nbool or None\n\n`verticalalignment` or va\n\n{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n`visible`\n\nbool\n\n`wrap`\n\nbool\n\n`x`\n\nfloat\n\n`y`\n\nfloat\n\n`zorder`\n\nfloat\n\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\nReturn the `Bbox` bounding the text, in display units.\n\nIn addition to being used internally, this is useful for specifying clickable\nregions in a png file on a web page.\n\nA renderer is needed to compute the bounding box. If the artist has already\nbeen drawn, the renderer is cached; thus, it is only necessary to pass this\nargument when calling `get_window_extent` before the first `draw`. In\npractice, it is usually easier to trigger a draw first (e.g. by saving the\nfigure).\n\nThe dpi value for computing the bbox, defaults to `self.figure.dpi` (not the\nrenderer dpi); should be set e.g. if to match regions with a figure saved with\na custom dpi value.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`backgroundcolor`\n\ncolor\n\n`bbox`\n\ndict with properties for `patches.FancyBboxPatch`\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`figure`\n\n`Figure`\n\n`fontfamily` or family\n\n{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}\n\n`fontproperties` or font or font_properties\n\n`font_manager.FontProperties` or `str` or `pathlib.Path`\n\n`fontsize` or size\n\nfloat or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-\nlarge'}\n\n`fontstretch` or stretch\n\n{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed',\n'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-\nexpanded', 'ultra-expanded'}\n\n`fontstyle` or style\n\n{'normal', 'italic', 'oblique'}\n\n`fontvariant` or variant\n\n{'normal', 'small-caps'}\n\n`fontweight` or weight\n\n{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular',\n'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',\n'extra bold', 'black'}\n\n`gid`\n\nstr\n\n`horizontalalignment` or ha\n\n{'center', 'right', 'left'}\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linespacing`\n\nfloat (multiple of font size)\n\n`math_fontfamily`\n\nstr\n\n`multialignment` or ma\n\n{'left', 'right', 'center'}\n\n`parse_math`\n\nbool\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n(float, float)\n\n`rasterized`\n\nbool\n\n`rotation`\n\nfloat or {'vertical', 'horizontal'}\n\n`rotation_mode`\n\n{None, 'default', 'anchor'}\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`text`\n\nobject\n\n`transform`\n\n`Transform`\n\n`transform_rotates_text`\n\nbool\n\n`url`\n\nstr\n\n`usetex`\n\nbool or None\n\n`verticalalignment` or va\n\n{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n`visible`\n\nbool\n\n`wrap`\n\nbool\n\n`x`\n\nfloat\n\n`y`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axis_artist.LabelBase.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase#mpl_toolkits.axisartist.axis_artist.LabelBase.draw", "type": "axisartist", "text": "\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\n"}, {"name": "axisartist.axis_artist.LabelBase.get_window_extent()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase#mpl_toolkits.axisartist.axis_artist.LabelBase.get_window_extent", "type": "axisartist", "text": "\nReturn the `Bbox` bounding the text, in display units.\n\nIn addition to being used internally, this is useful for specifying clickable\nregions in a png file on a web page.\n\nA renderer is needed to compute the bounding box. If the artist has already\nbeen drawn, the renderer is cached; thus, it is only necessary to pass this\nargument when calling `get_window_extent` before the first `draw`. In\npractice, it is usually easier to trigger a draw first (e.g. by saving the\nfigure).\n\nThe dpi value for computing the bbox, defaults to `self.figure.dpi` (not the\nrenderer dpi); should be set e.g. if to match regions with a figure saved with\na custom dpi value.\n\n"}, {"name": "axisartist.axis_artist.LabelBase.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase#mpl_toolkits.axisartist.axis_artist.LabelBase.set", "type": "axisartist", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`backgroundcolor`\n\ncolor\n\n`bbox`\n\ndict with properties for `patches.FancyBboxPatch`\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`figure`\n\n`Figure`\n\n`fontfamily` or family\n\n{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}\n\n`fontproperties` or font or font_properties\n\n`font_manager.FontProperties` or `str` or `pathlib.Path`\n\n`fontsize` or size\n\nfloat or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-\nlarge'}\n\n`fontstretch` or stretch\n\n{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed',\n'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-\nexpanded', 'ultra-expanded'}\n\n`fontstyle` or style\n\n{'normal', 'italic', 'oblique'}\n\n`fontvariant` or variant\n\n{'normal', 'small-caps'}\n\n`fontweight` or weight\n\n{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular',\n'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',\n'extra bold', 'black'}\n\n`gid`\n\nstr\n\n`horizontalalignment` or ha\n\n{'center', 'right', 'left'}\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linespacing`\n\nfloat (multiple of font size)\n\n`math_fontfamily`\n\nstr\n\n`multialignment` or ma\n\n{'left', 'right', 'center'}\n\n`parse_math`\n\nbool\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n(float, float)\n\n`rasterized`\n\nbool\n\n`rotation`\n\nfloat or {'vertical', 'horizontal'}\n\n`rotation_mode`\n\n{None, 'default', 'anchor'}\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`text`\n\nobject\n\n`transform`\n\n`Transform`\n\n`transform_rotates_text`\n\nbool\n\n`url`\n\nstr\n\n`usetex`\n\nbool or None\n\n`verticalalignment` or va\n\n{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n`visible`\n\nbool\n\n`wrap`\n\nbool\n\n`x`\n\nfloat\n\n`y`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axis_artist.TickLabels", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axis_artist.AxisLabel`\n\nTick Labels. While derived from Text, this single artist draws all ticklabels.\nAs in AxisLabel, the position of the text is updated in the fly, so changing\ntext position has no effect. Otherwise, the properties can be changed as a\nnormal Text. Unlike the ticklabels of the mainline matplotlib, properties of\nsingle ticklabel alone cannot modified.\n\nTo change the pad between ticks and ticklabels, use set_pad.\n\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\nReturn the underlying artist that actually defines some properties (e.g.,\ncolor) of this artist.\n\nReturn a list of `(width, height, descent)` tuples for ticklabels.\n\nEmpty labels are left out.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`axis_direction`\n\nunknown\n\n`backgroundcolor`\n\ncolor\n\n`bbox`\n\ndict with properties for `patches.FancyBboxPatch`\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`default_alignment`\n\nunknown\n\n`default_angle`\n\nunknown\n\n`figure`\n\n`Figure`\n\n`fontfamily` or family\n\n{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}\n\n`fontproperties` or font or font_properties\n\n`font_manager.FontProperties` or `str` or `pathlib.Path`\n\n`fontsize` or size\n\nfloat or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-\nlarge'}\n\n`fontstretch` or stretch\n\n{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed',\n'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-\nexpanded', 'ultra-expanded'}\n\n`fontstyle` or style\n\n{'normal', 'italic', 'oblique'}\n\n`fontvariant` or variant\n\n{'normal', 'small-caps'}\n\n`fontweight` or weight\n\n{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular',\n'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',\n'extra bold', 'black'}\n\n`gid`\n\nstr\n\n`horizontalalignment` or ha\n\n{'center', 'right', 'left'}\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linespacing`\n\nfloat (multiple of font size)\n\n`locs_angles_labels`\n\nunknown\n\n`math_fontfamily`\n\nstr\n\n`multialignment` or ma\n\n{'left', 'right', 'center'}\n\n`pad`\n\nunknown\n\n`parse_math`\n\nbool\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n(float, float)\n\n`rasterized`\n\nbool\n\n`rotation`\n\nfloat or {'vertical', 'horizontal'}\n\n`rotation_mode`\n\n{None, 'default', 'anchor'}\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`text`\n\nobject\n\n`transform`\n\n`Transform`\n\n`transform_rotates_text`\n\nbool\n\n`url`\n\nstr\n\n`usetex`\n\nbool or None\n\n`verticalalignment` or va\n\n{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n`visible`\n\nbool\n\n`wrap`\n\nbool\n\n`x`\n\nfloat\n\n`y`\n\nfloat\n\n`zorder`\n\nfloat\n\nAdjust the text angle and text alignment of ticklabels according to the\nmatplotlib convention.\n\nThe label_direction must be one of [left, right, bottom, top].\n\nproperty\n\nleft\n\nbottom\n\nright\n\ntop\n\nticklabels angle\n\n90\n\n0\n\n-90\n180\n\nticklabel va\n\ncenter\n\nbaseline\n\ncenter\n\nbaseline\n\nticklabel ha\n\nright\n\ncenter\n\nright\n\ncenter\n\nNote that the text angles are actually relative to (90 + angle of the\ndirection to the ticklabel), which gives 0 for bottom axis.\n\n"}, {"name": "axisartist.axis_artist.TickLabels.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.draw", "type": "axisartist", "text": "\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\n"}, {"name": "axisartist.axis_artist.TickLabels.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.get_ref_artist", "type": "axisartist", "text": "\nReturn the underlying artist that actually defines some properties (e.g.,\ncolor) of this artist.\n\n"}, {"name": "axisartist.axis_artist.TickLabels.get_texts_widths_heights_descents()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.get_texts_widths_heights_descents", "type": "axisartist", "text": "\nReturn a list of `(width, height, descent)` tuples for ticklabels.\n\nEmpty labels are left out.\n\n"}, {"name": "axisartist.axis_artist.TickLabels.get_window_extents()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.get_window_extents", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.TickLabels.invert_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.invert_axis_direction", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.TickLabels.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.set", "type": "axisartist", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`axis_direction`\n\nunknown\n\n`backgroundcolor`\n\ncolor\n\n`bbox`\n\ndict with properties for `patches.FancyBboxPatch`\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\ncolor\n\n`default_alignment`\n\nunknown\n\n`default_angle`\n\nunknown\n\n`figure`\n\n`Figure`\n\n`fontfamily` or family\n\n{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}\n\n`fontproperties` or font or font_properties\n\n`font_manager.FontProperties` or `str` or `pathlib.Path`\n\n`fontsize` or size\n\nfloat or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-\nlarge'}\n\n`fontstretch` or stretch\n\n{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed',\n'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-\nexpanded', 'ultra-expanded'}\n\n`fontstyle` or style\n\n{'normal', 'italic', 'oblique'}\n\n`fontvariant` or variant\n\n{'normal', 'small-caps'}\n\n`fontweight` or weight\n\n{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular',\n'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',\n'extra bold', 'black'}\n\n`gid`\n\nstr\n\n`horizontalalignment` or ha\n\n{'center', 'right', 'left'}\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linespacing`\n\nfloat (multiple of font size)\n\n`locs_angles_labels`\n\nunknown\n\n`math_fontfamily`\n\nstr\n\n`multialignment` or ma\n\n{'left', 'right', 'center'}\n\n`pad`\n\nunknown\n\n`parse_math`\n\nbool\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n(float, float)\n\n`rasterized`\n\nbool\n\n`rotation`\n\nfloat or {'vertical', 'horizontal'}\n\n`rotation_mode`\n\n{None, 'default', 'anchor'}\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`text`\n\nobject\n\n`transform`\n\n`Transform`\n\n`transform_rotates_text`\n\nbool\n\n`url`\n\nstr\n\n`usetex`\n\nbool or None\n\n`verticalalignment` or va\n\n{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n`visible`\n\nbool\n\n`wrap`\n\nbool\n\n`x`\n\nfloat\n\n`y`\n\nfloat\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axis_artist.TickLabels.set_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.set_axis_direction", "type": "axisartist", "text": "\nAdjust the text angle and text alignment of ticklabels according to the\nmatplotlib convention.\n\nThe label_direction must be one of [left, right, bottom, top].\n\nproperty\n\nleft\n\nbottom\n\nright\n\ntop\n\nticklabels angle\n\n90\n\n0\n\n-90\n180\n\nticklabel va\n\ncenter\n\nbaseline\n\ncenter\n\nbaseline\n\nticklabel ha\n\nright\n\ncenter\n\nright\n\ncenter\n\nNote that the text angles are actually relative to (90 + angle of the\ndirection to the ticklabel), which gives 0 for bottom axis.\n\n"}, {"name": "axisartist.axis_artist.TickLabels.set_locs_angles_labels()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.set_locs_angles_labels", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.Ticks", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axis_artist.AttributeCopier`,\n`matplotlib.lines.Line2D`\n\nTicks are derived from Line2D, and note that ticks themselves are markers.\nThus, you should use set_mec, set_mew, etc.\n\nTo change the tick size (length), you need to use set_ticksize. To change the\ndirection of the ticks (ticks are in opposite direction of ticklabels by\ndefault), use set_tick_out(False).\n\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\nReturn the line color.\n\nSee also `set_color`.\n\nReturn the marker edge color.\n\nSee also `set_markeredgecolor`.\n\nReturn the marker edge width in points.\n\nSee also `set_markeredgewidth`.\n\nReturn the underlying artist that actually defines some properties (e.g.,\ncolor) of this artist.\n\nReturn whether ticks are drawn inside or outside the axes.\n\nReturn length of the ticks in points.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\nunknown\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`locs_angles`\n\nunknown\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`tick_out`\n\nunknown\n\n`ticksize`\n\nunknown\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\nSet the color of the line.\n\nSet whether ticks are drawn inside or outside the axes.\n\nSet length of the ticks in points.\n\n"}, {"name": "axisartist.axis_artist.Ticks.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.draw", "type": "axisartist", "text": "\nDraw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`Artist.get_visible` returns\nFalse).\n\nThis method is overridden in the Artist subclasses.\n\n"}, {"name": "axisartist.axis_artist.Ticks.get_color()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_color", "type": "axisartist", "text": "\nReturn the line color.\n\nSee also `set_color`.\n\n"}, {"name": "axisartist.axis_artist.Ticks.get_markeredgecolor()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_markeredgecolor", "type": "axisartist", "text": "\nReturn the marker edge color.\n\nSee also `set_markeredgecolor`.\n\n"}, {"name": "axisartist.axis_artist.Ticks.get_markeredgewidth()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_markeredgewidth", "type": "axisartist", "text": "\nReturn the marker edge width in points.\n\nSee also `set_markeredgewidth`.\n\n"}, {"name": "axisartist.axis_artist.Ticks.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_ref_artist", "type": "axisartist", "text": "\nReturn the underlying artist that actually defines some properties (e.g.,\ncolor) of this artist.\n\n"}, {"name": "axisartist.axis_artist.Ticks.get_tick_out()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_tick_out", "type": "axisartist", "text": "\nReturn whether ticks are drawn inside or outside the axes.\n\n"}, {"name": "axisartist.axis_artist.Ticks.get_ticksize()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_ticksize", "type": "axisartist", "text": "\nReturn length of the ticks in points.\n\n"}, {"name": "axisartist.axis_artist.Ticks.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set", "type": "axisartist", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`animated`\n\nbool\n\n`antialiased` or aa\n\nbool\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`color` or c\n\nunknown\n\n`dash_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`dash_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`dashes`\n\nsequence of floats (on/off ink in points) or (None, None)\n\n`data`\n\n(2, N) array or two 1D arrays\n\n`drawstyle` or ds\n\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default:\n'default'\n\n`figure`\n\n`Figure`\n\n`fillstyle`\n\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`linestyle` or ls\n\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n`linewidth` or lw\n\nfloat\n\n`locs_angles`\n\nunknown\n\n`marker`\n\nmarker style string, `Path` or `MarkerStyle`\n\n`markeredgecolor` or mec\n\ncolor\n\n`markeredgewidth` or mew\n\nfloat\n\n`markerfacecolor` or mfc\n\ncolor\n\n`markerfacecoloralt` or mfcalt\n\ncolor\n\n`markersize` or ms\n\nfloat\n\n`markevery`\n\nNone or int or (int, int) or slice or list[int] or float or (float, float) or\nlist[bool]\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\n`pickradius`\n\nfloat\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`solid_capstyle`\n\n`CapStyle` or {'butt', 'projecting', 'round'}\n\n`solid_joinstyle`\n\n`JoinStyle` or {'miter', 'round', 'bevel'}\n\n`tick_out`\n\nunknown\n\n`ticksize`\n\nunknown\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xdata`\n\n1D array\n\n`ydata`\n\n1D array\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axis_artist.Ticks.set_color()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_color", "type": "axisartist", "text": "\nSet the color of the line.\n\n"}, {"name": "axisartist.axis_artist.Ticks.set_locs_angles()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_locs_angles", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axis_artist.Ticks.set_tick_out()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_tick_out", "type": "axisartist", "text": "\nSet whether ticks are drawn inside or outside the axes.\n\n"}, {"name": "axisartist.axis_artist.Ticks.set_ticksize()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_ticksize", "type": "axisartist", "text": "\nSet length of the ticks in points.\n\n"}, {"name": "axisartist.axisline_style", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style", "type": "axisartist", "text": "\n`AxislineStyle`(stylename, **kw)\n\nA container class which defines style classes for AxisArtists.\n\n"}, {"name": "axisartist.axisline_style.AxislineStyle", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle", "type": "axisartist", "text": "\nBases: `matplotlib.patches._Style`\n\nA container class which defines style classes for AxisArtists.\n\nAn instance of any axisline style class is an callable object, whose call\nsignature is\n\nWhen called, this should return an `Artist` with the following methods:\n\nReturn the instance of the subclass with the given style name.\n\nBases: `mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow`\n\nSize of the arrow as a fraction of the ticklabel size.\n\nalias of\n`mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.FilledArrow`\n\nBases: `mpl_toolkits.axisartist.axisline_style.AxislineStyle._Base`\n\nA simple arrow.\n\nSize of the arrow as a fraction of the ticklabel size.\n\nalias of\n`mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.SimpleArrow`\n\n"}, {"name": "axisartist.axisline_style.AxislineStyle.FilledArrow", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.FilledArrow", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow`\n\nSize of the arrow as a fraction of the ticklabel size.\n\nalias of\n`mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.FilledArrow`\n\n"}, {"name": "axisartist.axisline_style.AxislineStyle.FilledArrow.ArrowAxisClass", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.FilledArrow.ArrowAxisClass", "type": "axisartist", "text": "\nalias of\n`mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.FilledArrow`\n\n"}, {"name": "axisartist.axisline_style.AxislineStyle.SimpleArrow", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axisline_style.AxislineStyle._Base`\n\nA simple arrow.\n\nSize of the arrow as a fraction of the ticklabel size.\n\nalias of\n`mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.SimpleArrow`\n\n"}, {"name": "axisartist.axisline_style.AxislineStyle.SimpleArrow.ArrowAxisClass", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow.ArrowAxisClass", "type": "axisartist", "text": "\nalias of\n`mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.SimpleArrow`\n\n"}, {"name": "axisartist.axisline_style.AxislineStyle.SimpleArrow.new_line()", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow.new_line", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines", "path": "_as_gen/mpl_toolkits.axisartist.axislines", "type": "axisartist", "text": "\nAxislines includes modified implementation of the Axes class. The biggest\ndifference is that the artists responsible for drawing the axis spine, ticks,\nticklabels and axis labels are separated out from Matplotlib's Axis class.\nOriginally, this change was motivated to support curvilinear grid. Here are a\nfew reasons that I came up with a new axes class:\n\nIn the new axes class, xaxis and yaxis is set to not visible by default, and\nnew set of artist (AxisArtist) are defined to draw axis line, ticks,\nticklabels and axis label. Axes.axis attribute serves as a dictionary of these\nartists, i.e., ax.axis[\"left\"] is a AxisArtist instance responsible to draw\nleft y-axis. The default Axes.axis contains \"bottom\", \"left\", \"top\" and\n\"right\".\n\nAxisArtist can be considered as a container artist and has following children\nartists which will draw ticks, labels, etc.\n\nNote that these are separate artists from `matplotlib.axis.Axis`, thus most\ntick-related functions in Matplotlib won't work. For example, color and\nmarkerwidth of the `ax.axis[\"bottom\"].major_ticks` will follow those of\nAxes.xaxis unless explicitly specified.\n\nIn addition to AxisArtist, the Axes will have gridlines attribute, which\nobviously draws grid lines. The gridlines needs to be separated from the axis\nas some gridlines can never pass any axis.\n\n`Axes`(*args[, grid_helper])\n\nBuild an Axes in a figure.\n\n`AxesZero`(*args[, grid_helper])\n\nBuild an Axes in a figure.\n\n`AxisArtistHelper`()\n\nAxisArtistHelper should define following method with given APIs. Note that the\nfirst axes argument will be axes attribute of the caller artist.::.\n\n`AxisArtistHelperRectlinear`()\n\n`GridHelperBase`()\n\n`GridHelperRectlinear`(axes)\n\n"}, {"name": "axisartist.axislines.Axes", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes", "type": "axisartist", "text": "\nBases: `matplotlib.axes._axes.Axes`\n\nBuild an Axes in a figure.\n\nThe Axes is built in the `Figure` fig.\n\nThe Axes is built in the rectangle rect. rect is in `Figure` coordinates.\n\nThe x or y `axis` is shared with the x or y axis in the input `Axes`.\n\nWhether the Axes frame is visible.\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See\n`set_box_aspect` for details.\n\nOther optional keyword arguments:\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nThe new `Axes` object.\n\nCall self as a function.\n\nConvenience method to get or set some axis properties.\n\nCall signatures:\n\nThe axis limits to be set. This can also be achieved using\n\nIf a bool, turns axis lines and labels on or off. If a string, possible values\nare:\n\nValue\n\nDescription\n\n'on'\n\nTurn on axis lines and labels. Same as `True`.\n\n'off'\n\nTurn off axis lines and labels. Same as `False`.\n\n'equal'\n\nSet equal scaling (i.e., make circles circular) by changing axis limits. This\nis the same as `ax.set_aspect('equal', adjustable='datalim')`. Explicit data\nlimits may not be respected in this case.\n\n'scaled'\n\nSet equal scaling (i.e., make circles circular) by changing dimensions of the\nplot box. This is the same as `ax.set_aspect('equal', adjustable='box',\nanchor='C')`. Additionally, further autoscaling will be disabled.\n\n'tight'\n\nSet limits just large enough to show all data, then disable further\nautoscaling.\n\n'auto'\n\nAutomatic scaling (fill plot box with data).\n\n'image'\n\n'scaled' with axis limits equal to data limits.\n\n'square'\n\nSquare plot; similar to 'scaled', but initially forcing `xmax-xmin == ymax-\nymin`.\n\nWhether observers are notified of the axis limit change. This option is passed\non to `set_xlim` and `set_ylim`.\n\nThe axis limits.\n\nSee also\n\nClear the Axes.\n\nReturn a list of the child `Artist`s of this `Artist`.\n\nToggle the gridlines, and optionally set the properties of the lines.\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\nCreate and return a new GridlineCollection instance.\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axislines.Axes.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.axislines.Axes.cla()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.cla", "type": "axisartist", "text": "\nClear the Axes.\n\n"}, {"name": "axisartist.axislines.Axes.get_children()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.get_children", "type": "axisartist", "text": "\nReturn a list of the child `Artist`s of this `Artist`.\n\n"}, {"name": "axisartist.axislines.Axes.get_grid_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.get_grid_helper", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.Axes.grid()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.grid", "type": "axisartist", "text": "\nToggle the gridlines, and optionally set the properties of the lines.\n\n"}, {"name": "axisartist.axislines.Axes.invalidate_grid_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.invalidate_grid_helper", "type": "axisartist", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axisartist.axislines.Axes.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.new_fixed_axis", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.Axes.new_floating_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.new_floating_axis", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.Axes.new_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.new_gridlines", "type": "axisartist", "text": "\nCreate and return a new GridlineCollection instance.\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\n"}, {"name": "axisartist.axislines.Axes.set()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.set", "type": "axisartist", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axislines.Axes.toggle_axisline()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.toggle_axisline", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxesZero", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axeszero", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axislines.Axes`\n\nBuild an Axes in a figure.\n\nThe Axes is built in the `Figure` fig.\n\nThe Axes is built in the rectangle rect. rect is in `Figure` coordinates.\n\nThe x or y `axis` is shared with the x or y axis in the input `Axes`.\n\nWhether the Axes frame is visible.\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See\n`set_box_aspect` for details.\n\nOther optional keyword arguments:\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\nThe new `Axes` object.\n\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axislines.AxesZero.set()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axeszero#mpl_toolkits.axisartist.axislines.AxesZero.set", "type": "axisartist", "text": "\nSet multiple properties at once.\n\nSupported properties are\n\nProperty\n\nDescription\n\n`adjustable`\n\n{'box', 'datalim'}\n\n`agg_filter`\n\na filter function, which takes a (m, n, 3) float array and a dpi value, and\nreturns a (m, n, 3) array\n\n`alpha`\n\nscalar or None\n\n`anchor`\n\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n`animated`\n\nbool\n\n`aspect`\n\n{'auto', 'equal'} or float\n\n`autoscale_on`\n\nbool\n\n`autoscalex_on`\n\nbool\n\n`autoscaley_on`\n\nbool\n\n`axes_locator`\n\nCallable[[Axes, Renderer], Bbox]\n\n`axisbelow`\n\nbool or 'line'\n\n`box_aspect`\n\nfloat or None\n\n`clip_box`\n\n`Bbox`\n\n`clip_on`\n\nbool\n\n`clip_path`\n\nPatch or (Path, Transform) or None\n\n`facecolor` or fc\n\ncolor\n\n`figure`\n\n`Figure`\n\n`frame_on`\n\nbool\n\n`gid`\n\nstr\n\n`in_layout`\n\nbool\n\n`label`\n\nobject\n\n`navigate`\n\nbool\n\n`navigate_mode`\n\nunknown\n\n`path_effects`\n\n`AbstractPathEffect`\n\n`picker`\n\nNone or bool or float or callable\n\n`position`\n\n[left, bottom, width, height] or `Bbox`\n\n`prop_cycle`\n\nunknown\n\n`rasterization_zorder`\n\nfloat or None\n\n`rasterized`\n\nbool\n\n`sketch_params`\n\n(scale: float, length: float, randomness: float)\n\n`snap`\n\nbool or None\n\n`title`\n\nstr\n\n`transform`\n\n`Transform`\n\n`url`\n\nstr\n\n`visible`\n\nbool\n\n`xbound`\n\nunknown\n\n`xlabel`\n\nstr\n\n`xlim`\n\n(bottom: float, top: float)\n\n`xmargin`\n\nfloat greater than -0.5\n\n`xscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`xticklabels`\n\nunknown\n\n`xticks`\n\nunknown\n\n`ybound`\n\nunknown\n\n`ylabel`\n\nstr\n\n`ylim`\n\n(bottom: float, top: float)\n\n`ymargin`\n\nfloat greater than -0.5\n\n`yscale`\n\n{\"linear\", \"log\", \"symlog\", \"logit\", ...} or `ScaleBase`\n\n`yticklabels`\n\nunknown\n\n`yticks`\n\nunknown\n\n`zorder`\n\nfloat\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper", "type": "axisartist", "text": "\nBases: `object`\n\nAxisArtistHelper should define following method with given APIs. Note that the\nfirst axes argument will be axes attribute of the caller artist.:\n\nBases: `mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base`\n\nHelper class for a fixed (in the axes coordinate) axis.\n\nnth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x\naxis, nth_coord = 1 -> y axis\n\nReturn the label reference position in transAxes.\n\nget_label_transform() returns a transform of (transAxes+offset)\n\nBases: `mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base`\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base`\n\nHelper class for a fixed (in the axes coordinate) axis.\n\nnth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x\naxis, nth_coord = 1 -> y axis\n\nReturn the label reference position in transAxes.\n\nget_label_transform() returns a transform of (transAxes+offset)\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_pos_angle()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_pos_angle", "type": "axisartist", "text": "\nReturn the label reference position in transAxes.\n\nget_label_transform() returns a transform of (transAxes+offset)\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_line", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_line_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_line_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_nth_coord()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_nth_coord", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_tick_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Floating", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base`\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Floating.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating.get_line", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Floating.get_nth_coord()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating.get_nth_coord", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear", "type": "axisartist", "text": "\nBases: `object`\n\nBases: `mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed`\n\nnth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x\naxis, nth_coord = 1 -> y axis\n\ntick_loc, tick_angle, tick_label\n\nBases: `mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating`\n\nReturn the label reference position in transAxes.\n\nget_label_transform() returns a transform of (transAxes+offset)\n\ntick_loc, tick_angle, tick_label\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Fixed", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Fixed", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed`\n\nnth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x\naxis, nth_coord = 1 -> y axis\n\ntick_loc, tick_angle, tick_label\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Fixed.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Fixed.get_tick_iterators", "type": "axisartist", "text": "\ntick_loc, tick_angle, tick_label\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating`\n\nReturn the label reference position in transAxes.\n\nget_label_transform() returns a transform of (transAxes+offset)\n\ntick_loc, tick_angle, tick_label\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_pos_angle()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_pos_angle", "type": "axisartist", "text": "\nReturn the label reference position in transAxes.\n\nget_label_transform() returns a transform of (transAxes+offset)\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_iterators", "type": "axisartist", "text": "\ntick_loc, tick_angle, tick_label\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.GridHelperBase", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase", "type": "axisartist", "text": "\nBases: `object`\n\nReturn list of grid lines as a list of paths (list of points).\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\nCreate and return a new GridlineCollection instance.\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axisartist.axislines.GridHelperBase.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.get_gridlines", "type": "axisartist", "text": "\nReturn list of grid lines as a list of paths (list of points).\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\n"}, {"name": "axisartist.axislines.GridHelperBase.invalidate()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.invalidate", "type": "axisartist", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axisartist.axislines.GridHelperBase.new_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.new_gridlines", "type": "axisartist", "text": "\nCreate and return a new GridlineCollection instance.\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\n"}, {"name": "axisartist.axislines.GridHelperBase.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.update_lim", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.GridHelperBase.valid()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.valid", "type": "axisartist", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "axisartist.axislines.GridHelperRectlinear", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axislines.GridHelperBase`\n\nReturn list of gridline coordinates in data coordinates.\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\n"}, {"name": "axisartist.axislines.GridHelperRectlinear.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear#mpl_toolkits.axisartist.axislines.GridHelperRectlinear.get_gridlines", "type": "axisartist", "text": "\nReturn list of gridline coordinates in data coordinates.\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\n"}, {"name": "axisartist.axislines.GridHelperRectlinear.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear#mpl_toolkits.axisartist.axislines.GridHelperRectlinear.new_fixed_axis", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.axislines.GridHelperRectlinear.new_floating_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear#mpl_toolkits.axisartist.axislines.GridHelperRectlinear.new_floating_axis", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.clip_path", "path": "_as_gen/mpl_toolkits.axisartist.clip_path", "type": "axisartist", "text": "\n`atan2`(dy, dx)\n\n`clip`(xlines, ylines, x0[, clip, xdir, ydir])\n\n`clip_line_to_rect`(xline, yline, bbox)\n\n"}, {"name": "axisartist.clip_path.atan2", "path": "_as_gen/mpl_toolkits.axisartist.clip_path.atan2", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.clip_path.clip", "path": "_as_gen/mpl_toolkits.axisartist.clip_path.clip", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.clip_path.clip_line_to_rect", "path": "_as_gen/mpl_toolkits.axisartist.clip_path.clip_line_to_rect", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.floating_axes", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes", "type": "axisartist", "text": "\nAn experimental support for curvilinear grid.\n\n`ExtremeFinderFixed`(extremes)\n\nThis subclass always returns the same bounding box.\n\n`FixedAxisArtistHelper`(grid_helper, side[, ...])\n\nnth_coord = along which coordinate value varies.\n\n`FloatingAxes`\n\nalias of `mpl_toolkits.axisartist.floating_axes.FloatingAxesHostAxes`\n\n`FloatingAxesBase`(*args, **kwargs)\n\n`FloatingAxisArtistHelper`(grid_helper, ...[, ...])\n\nnth_coord = along which coordinate value varies.\n\n`GridHelperCurveLinear`(aux_trans, extremes[, ...])\n\naux_trans : a transform from the source (curved) coordinate to target\n(rectilinear) coordinate.\n\n`floatingaxes_class_factory`(axes_class)\n\n"}, {"name": "axisartist.floating_axes.ExtremeFinderFixed", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.extremefinderfixed", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple`\n\nThis subclass always returns the same bounding box.\n\nThe bounding box that this helper always returns.\n\nCompute an approximation of the bounding box obtained by applying transform_xy\nto the box delimited by `(x1, y1, x2, y2)`.\n\nThe intended use is to have `(x1, y1, x2, y2)` in axes coordinates, and have\ntransform_xy be the transform from axes coordinates to data coordinates; this\nmethod then returns the range of data coordinates that span the actual axes.\n\nThe computation is done by sampling `nx * ny` equispaced points in the `(x1,\ny1, x2, y2)` box and finding the resulting points with extremal coordinates;\nthen adding some padding to take into account the finite sampling.\n\nAs each sampling step covers a relative range of 1/nx or 1/ny, the padding is\ncomputed by expanding the span covered by the extremal coordinates by these\nfractions.\n\n"}, {"name": "axisartist.floating_axes.ExtremeFinderFixed.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.extremefinderfixed#mpl_toolkits.axisartist.floating_axes.ExtremeFinderFixed.__call__", "type": "axisartist", "text": "\nCompute an approximation of the bounding box obtained by applying transform_xy\nto the box delimited by `(x1, y1, x2, y2)`.\n\nThe intended use is to have `(x1, y1, x2, y2)` in axes coordinates, and have\ntransform_xy be the transform from axes coordinates to data coordinates; this\nmethod then returns the range of data coordinates that span the actual axes.\n\nThe computation is done by sampling `nx * ny` equispaced points in the `(x1,\ny1, x2, y2)` box and finding the resulting points with extremal coordinates;\nthen adding some padding to take into account the finite sampling.\n\nAs each sampling step covers a relative range of 1/nx or 1/ny, the padding is\ncomputed by expanding the span covered by the extremal coordinates by these\nfractions.\n\n"}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper", "type": "axisartist", "text": "\nBases:\n`mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper`\n\nnth_coord = 0 -> x axis, nth_coord = 1 -> y axis\n\ntick_loc, tick_angle, tick_label, (optionally) tick_label\n\n"}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper#mpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper.get_line", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper#mpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper.get_tick_iterators", "type": "axisartist", "text": "\ntick_loc, tick_angle, tick_label, (optionally) tick_label\n\n"}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper#mpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper.update_lim", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.floating_axes.FloatingAxes", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxes", "type": "axisartist", "text": "\nalias of `mpl_toolkits.axisartist.floating_axes.FloatingAxesHostAxes`\n\n"}, {"name": "axisartist.floating_axes.floatingaxes_class_factory", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxes_class_factory", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.floating_axes.FloatingAxesBase", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxesbase", "type": "axisartist", "text": "\nBases: `object`\n\nmpl_toolkits.axisartist.floating_axes features\n\n"}, {"name": "axisartist.floating_axes.FloatingAxesBase.adjust_axes_lim()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxesbase#mpl_toolkits.axisartist.floating_axes.FloatingAxesBase.adjust_axes_lim", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.floating_axes.FloatingAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxesbase#mpl_toolkits.axisartist.floating_axes.FloatingAxesBase.cla", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.floating_axes.FloatingAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxisartisthelper", "type": "axisartist", "text": "\nBases:\n`mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper`\n\nnth_coord = 0 -> x axis, nth_coord = 1 -> y axis\n\n"}, {"name": "axisartist.floating_axes.GridHelperCurveLinear", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear`\n\naux_trans : a transform from the source (curved) coordinate to target\n(rectilinear) coordinate. An instance of MPL's Transform (inverse transform\nshould be defined) or a tuple of two callable objects which defines the\ntransform and its inverse. The callables need take two arguments of array of\nsource coordinates and should return two target coordinates.\n\ne.g., `x2, y2 = trans(x1, y1)`\n\n[Deprecated] Return (N, 2) array of (x, y) coordinate of the boundary.\n\nDeprecated since version 3.5.\n\nReturn v=0, nth=1.\n\nReturn list of grid lines as a list of paths (list of points).\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\nmpl_toolkits.axisartist.floating_axes features\n\n"}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.get_boundary()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.get_boundary", "type": "axisartist", "text": "\n[Deprecated] Return (N, 2) array of (x, y) coordinate of the boundary.\n\nDeprecated since version 3.5.\n\n"}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.get_data_boundary()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.get_data_boundary", "type": "axisartist", "text": "\nReturn v=0, nth=1.\n\n"}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.get_gridlines", "type": "axisartist", "text": "\nReturn list of grid lines as a list of paths (list of points).\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\n"}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.new_fixed_axis", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_finder", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder", "type": "axisartist", "text": "\n`DictFormatter`(format_dict[, formatter])\n\nformat_dict : dictionary for format strings to be used.\n\n`ExtremeFinderSimple`(nx, ny)\n\nA helper class to figure out the range of grid lines that need to be drawn.\n\n`FixedLocator`(locs)\n\n`FormatterPrettyPrint`([useMathText])\n\n`GridFinder`(transform[, extreme_finder, ...])\n\ntransform : transform from the image coordinate (which will be the transData\nof the axes to the world coordinate.\n\n`MaxNLocator`([nbins, steps, trim, integer, ...])\n\n"}, {"name": "axisartist.grid_finder.DictFormatter", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.dictformatter", "type": "axisartist", "text": "\nBases: `object`\n\nformat_dict : dictionary for format strings to be used. formatter : fall-back\nformatter\n\nfactor is ignored if value is found in the dictionary\n\nmpl_toolkits.axisartist.floating_axes features\n\n"}, {"name": "axisartist.grid_finder.DictFormatter.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.dictformatter#mpl_toolkits.axisartist.grid_finder.DictFormatter.__call__", "type": "axisartist", "text": "\nfactor is ignored if value is found in the dictionary\n\n"}, {"name": "axisartist.grid_finder.ExtremeFinderSimple", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.extremefindersimple", "type": "axisartist", "text": "\nBases: `object`\n\nA helper class to figure out the range of grid lines that need to be drawn.\n\nThe number of samples in each direction.\n\nCompute an approximation of the bounding box obtained by applying transform_xy\nto the box delimited by `(x1, y1, x2, y2)`.\n\nThe intended use is to have `(x1, y1, x2, y2)` in axes coordinates, and have\ntransform_xy be the transform from axes coordinates to data coordinates; this\nmethod then returns the range of data coordinates that span the actual axes.\n\nThe computation is done by sampling `nx * ny` equispaced points in the `(x1,\ny1, x2, y2)` box and finding the resulting points with extremal coordinates;\nthen adding some padding to take into account the finite sampling.\n\nAs each sampling step covers a relative range of 1/nx or 1/ny, the padding is\ncomputed by expanding the span covered by the extremal coordinates by these\nfractions.\n\naxis_direction demo\n\nCurvilinear grid demo\n\nDemo CurveLinear Grid2\n\nfloating_axis demo\n\nSimple Axis Pad\n\n"}, {"name": "axisartist.grid_finder.ExtremeFinderSimple.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.extremefindersimple#mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple.__call__", "type": "axisartist", "text": "\nCompute an approximation of the bounding box obtained by applying transform_xy\nto the box delimited by `(x1, y1, x2, y2)`.\n\nThe intended use is to have `(x1, y1, x2, y2)` in axes coordinates, and have\ntransform_xy be the transform from axes coordinates to data coordinates; this\nmethod then returns the range of data coordinates that span the actual axes.\n\nThe computation is done by sampling `nx * ny` equispaced points in the `(x1,\ny1, x2, y2)` box and finding the resulting points with extremal coordinates;\nthen adding some padding to take into account the finite sampling.\n\nAs each sampling step covers a relative range of 1/nx or 1/ny, the padding is\ncomputed by expanding the span covered by the extremal coordinates by these\nfractions.\n\n"}, {"name": "axisartist.grid_finder.FixedLocator", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.fixedlocator", "type": "axisartist", "text": "\nBases: `object`\n\nCall self as a function.\n\nmpl_toolkits.axisartist.floating_axes features\n\n"}, {"name": "axisartist.grid_finder.FixedLocator.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.fixedlocator#mpl_toolkits.axisartist.grid_finder.FixedLocator.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.grid_finder.FormatterPrettyPrint", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.formatterprettyprint", "type": "axisartist", "text": "\nBases: `object`\n\nCall self as a function.\n\n"}, {"name": "axisartist.grid_finder.FormatterPrettyPrint.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.formatterprettyprint#mpl_toolkits.axisartist.grid_finder.FormatterPrettyPrint.__call__", "type": "axisartist", "text": "\nCall self as a function.\n\n"}, {"name": "axisartist.grid_finder.GridFinder", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder", "type": "axisartist", "text": "\nBases: `object`\n\ntransform : transform from the image coordinate (which will be the transData\nof the axes to the world coordinate.\n\nor transform = (transform_xy, inv_transform_xy)\n\nlocator1, locator2 : grid locator for 1st and 2nd axis.\n\nrough number of grids in each direction.\n\n"}, {"name": "axisartist.grid_finder.GridFinder.get_grid_info()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.get_grid_info", "type": "axisartist", "text": "\nrough number of grids in each direction.\n\n"}, {"name": "axisartist.grid_finder.GridFinder.get_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.get_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_finder.GridFinder.inv_transform_xy()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.inv_transform_xy", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_finder.GridFinder.set_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.set_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_finder.GridFinder.transform_xy()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.transform_xy", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_finder.GridFinder.update()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.update", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_finder.GridFinder.update_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.update_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_finder.MaxNLocator", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.maxnlocator", "type": "axisartist", "text": "\nBases: `matplotlib.ticker.MaxNLocator`\n\nMaximum number of intervals; one less than max number of ticks. If the string\n'auto', the number of bins will be automatically determined based on the\nlength of the axis.\n\nSequence of nice numbers starting with 1 and ending with 10; e.g., [1, 2, 4,\n5, 10], where the values are acceptable tick multiples. i.e. for the example,\n20, 40, 60 would be an acceptable set of ticks, as would 0.4, 0.6, 0.8,\nbecause they are multiples of 2. However, 30, 60, 90 would not be allowed\nbecause 3 does not appear in the list of steps.\n\nIf True, ticks will take only integer values, provided at least min_n_ticks\nintegers are found within the view limits.\n\nIf True, autoscaling will result in a range symmetric about zero.\n\nRemove edge ticks -- useful for stacked or ganged plots where the upper tick\nof one axes overlaps with the lower tick of the axes above it, primarily when\n`rcParams[\"axes.autolimit_mode\"]` (default: `'data'`) is `'round_numbers'`. If\n`prune=='lower'`, the smallest tick will be removed. If `prune == 'upper'`,\nthe largest tick will be removed. If `prune == 'both'`, the largest and\nsmallest ticks will be removed. If prune is None, no ticks will be removed.\n\nRelax nbins and integer constraints if necessary to obtain this minimum number\nof ticks.\n\nReturn the locations of the ticks.\n\naxis_direction demo\n\nDemo CurveLinear Grid2\n\nmpl_toolkits.axisartist.floating_axes features\n\nSimple Axis Pad\n\n"}, {"name": "axisartist.grid_finder.MaxNLocator.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.maxnlocator#mpl_toolkits.axisartist.grid_finder.MaxNLocator.__call__", "type": "axisartist", "text": "\nReturn the locations of the ticks.\n\n"}, {"name": "axisartist.grid_helper_curvelinear", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear", "type": "axisartist", "text": "\nAn experimental support for curvilinear grid.\n\n`FixedAxisArtistHelper`(grid_helper, side[, ...])\n\nHelper class for a fixed axis.\n\n`FloatingAxisArtistHelper`(grid_helper, ...[, ...])\n\nnth_coord = along which coordinate value varies.\n\n`GridHelperCurveLinear`(aux_trans[, ...])\n\naux_trans : a transform from the source (curved) coordinate to target\n(rectilinear) coordinate.\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed`\n\nHelper class for a fixed axis.\n\nnth_coord = 0 -> x axis, nth_coord = 1 -> y axis\n\n[Deprecated]\n\nDeprecated since version 3.5:\n\ntick_loc, tick_angle, tick_label\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.change_tick_coord()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.change_tick_coord", "type": "axisartist", "text": "\n[Deprecated]\n\nDeprecated since version 3.5:\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_iterators", "type": "axisartist", "text": "\ntick_loc, tick_angle, tick_label\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.update_lim", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating`\n\nnth_coord = 0 -> x axis, nth_coord = 1 -> y axis\n\ntick_loc, tick_angle, tick_label, (optionally) tick_label\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_pos_angle()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_pos_angle", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_iterators", "type": "axisartist", "text": "\ntick_loc, tick_angle, tick_label, (optionally) tick_label\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_transform", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.set_extremes()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.set_extremes", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.update_lim", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear", "type": "axisartist", "text": "\nBases: `mpl_toolkits.axisartist.axislines.GridHelperBase`\n\naux_trans : a transform from the source (curved) coordinate to target\n(rectilinear) coordinate. An instance of MPL's Transform (inverse transform\nshould be defined) or a tuple of two callable objects which defines the\ntransform and its inverse. The callables need take two arguments of array of\nsource coordinates and should return two target coordinates.\n\ne.g., `x2, y2 = trans(x1, y1)`\n\nReturn list of grid lines as a list of paths (list of points).\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_gridlines", "type": "axisartist", "text": "\nReturn list of grid lines as a list of paths (list of points).\n\nwhich : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"\n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_tick_iterator()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_tick_iterator", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_fixed_axis", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_floating_axis()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_floating_axis", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.update_grid_finder()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.update_grid_finder", "type": "axisartist", "text": "\n\n"}, {"name": "axisartist.parasite_axes", "path": "_as_gen/mpl_toolkits.axisartist.parasite_axes", "type": "axisartist", "text": "\n\n"}, {"name": "backend_agg", "path": "backend_agg_api", "type": "backend_agg", "text": "\nAn Anti-Grain Geometry (AGG) backend.\n\nFeatures that are implemented:\n\nStill TODO:\n\nalias of `matplotlib.backends.backend_agg.FigureCanvasAgg`\n\nBases: `matplotlib.backend_bases.FigureCanvasBase`\n\nGet the image as a `memoryview` to the renderer's buffer.\n\n`draw` must be called at least once before this function will work and to\nupdate the renderer for any subsequent changes to the Figure.\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nWrite the figure to a JPEG file.\n\nThe file to write to.\n\nAdditional keyword arguments that are passed to `PIL.Image.Image.save` when\nsaving the figure.\n\nWrite the figure to a JPEG file.\n\nThe file to write to.\n\nAdditional keyword arguments that are passed to `PIL.Image.Image.save` when\nsaving the figure.\n\nWrite the figure to a PNG file.\n\nThe file to write to.\n\nMetadata in the PNG file as key-value pairs of bytes or latin-1 encodable\nstrings. According to the PNG specification, keys must be shorter than 79\nchars.\n\nThe PNG specification defines some common keywords that may be used as\nappropriate:\n\nOther keywords may be invented for other purposes.\n\nIf 'Software' is not given, an autogenerated value for Matplotlib will be\nused. This can be removed by setting it to None.\n\nFor more details see the PNG specification.\n\nKeyword arguments passed to `PIL.Image.Image.save`.\n\nIf the 'pnginfo' key is present, it completely overrides metadata, including\nthe default 'Software' key.\n\nGet the image as ARGB `bytes`.\n\n`draw` must be called at least once before this function will work and to\nupdate the renderer for any subsequent changes to the Figure.\n\nGet the image as RGB `bytes`.\n\n`draw` must be called at least once before this function will work and to\nupdate the renderer for any subsequent changes to the Figure.\n\nBases: `matplotlib.backend_bases.RendererBase`\n\nThe renderer handles all the drawing primitives using a graphics context\ninstance that controls the colors/styles\n\nDraw mathtext using `matplotlib.mathtext`.\n\nDraw a `Path` instance using the given affine transform.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nReturn the canvas width and height in display coords.\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\nReturn whether image composition by Matplotlib should be skipped.\n\nRaster backends should usually return False (letting the C-level rasterizer\ntake care of image composition); vector backends should usually return `not\nrcParams[\"image.composite_image\"]`.\n\nReturn whether arbitrary affine transformations in `draw_image()` are\nsupported (True for most vector backends).\n\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\nRestore the saved region. If bbox (instance of BboxBase, or its extents) is\ngiven, only the region specified by the bbox will be restored. xy (a pair of\nfloats) optionally specifies the new position (the LLC of the original region,\nnot the LLC of the bbox) where the region will be restored.\n\nStart filtering. It simply create a new canvas (the old one is saved).\n\nSave the plot in the current canvas as a image and apply the post_processing\nfunction.\n\n# ny, nx, depth = image.shape # image (numpy array) has RGBA channels and has\na depth of 4. ... # create a new_image (numpy array of 4 channels, size can be\n# different). The resulting image may have offsets from # lower-left corner of\nthe original image return new_image, offset_x, offset_y\n\nThe saved renderer is restored and the returned image from post_processing is\nplotted (using draw_image) on it.\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "backend_bases", "path": "backend_bases_api", "type": "backend_bases", "text": "\nAbstract base classes define the primitives that renderers and graphics\ncontexts must implement to serve as a Matplotlib backend.\n\nAn abstract base class to handle drawing/rendering operations.\n\nThe abstraction layer that separates the `Figure` from the backend specific\ndetails like a user interface drawing area.\n\nAn abstract base class that provides color, line styles, etc.\n\nThe base class for all of the Matplotlib event handling. Derived classes such\nas `KeyEvent` and `MouseEvent` store the meta data like keys and buttons\npressed, x and y locations in pixel and `Axes` coordinates.\n\nThe base class for the `Show` class of each interactive backend; the 'show'\ncallable is then set to `Show.__call__`.\n\nThe base class for the Toolbar class of each interactive backend.\n\nBases: `matplotlib.backend_bases.Event`\n\nAn event triggered by a figure being closed.\n\nBases: `matplotlib.backend_bases.Event`\n\nAn event triggered by a draw operation on the canvas.\n\nIn most backends, callbacks subscribed to this event will be fired after the\nrendering is complete but before the screen is updated. Any extra artists\ndrawn to the canvas's renderer will be reflected without an explicit call to\n`blit`.\n\nWarning\n\nCalling `canvas.draw` and `canvas.blit` in these callbacks may not be safe\nwith all backends and may cause infinite recursion.\n\nA DrawEvent has a number of special attributes in addition to those defined by\nthe parent `Event` class.\n\nThe renderer for the draw event.\n\nBases: `object`\n\nA Matplotlib event.\n\nThe following attributes are defined and shown with their default values.\nSubclasses may define additional attributes.\n\nThe event name.\n\nThe backend-specific canvas instance generating the event.\n\nThe GUI event that triggered the Matplotlib event.\n\nBases: `object`\n\nThe canvas the figure renders into.\n\nA high-level figure instance.\n\nBlit the canvas in bbox (default entire canvas).\n\nCallback processing for mouse button press events.\n\nBackend derived classes should call this function on any mouse button press.\n(x, y) are the canvas coords ((0, 0) is lower left). button and key are as\ndefined in `MouseEvent`.\n\nThis method will call all functions connected to the 'button_press_event' with\na `MouseEvent` instance.\n\nCallback processing for mouse button release events.\n\nBackend derived classes should call this function on any mouse button release.\n\nThis method will call all functions connected to the 'button_release_event'\nwith a `MouseEvent` instance.\n\nThe canvas coordinates where 0=left.\n\nThe canvas coordinates where 0=bottom.\n\nThe native UI event that generated the Matplotlib event.\n\nPass a `CloseEvent` to all functions connected to `close_event`.\n\nThe ratio of physical to logical pixels used for the canvas on screen.\n\nBy default, this is 1, meaning physical and logical pixels are the same size.\nSubclasses that support High DPI screens may set this property to indicate\nthat said ratio is different. All Matplotlib interaction, unless working\ndirectly with the canvas, remains in logical pixels.\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nPass a `DrawEvent` to all functions connected to `draw_event`.\n\nRequest a widget redraw once control returns to the GUI event loop.\n\nEven if multiple calls to `draw_idle` occur before control returns to the GUI\nevent loop, the figure will only be rendered once.\n\nBackends may choose to override the method and implement their own strategy to\nprevent multiple renderings.\n\nCallback processing for the mouse cursor entering the canvas.\n\nBackend derived classes should call this function when entering canvas.\n\nThe native UI event that generated the Matplotlib event.\n\nThe coordinate location of the pointer when the canvas is entered.\n\nFlush the GUI events for the figure.\n\nInteractive backends need to reimplement this method.\n\nReturn a string, which includes extension, suitable for use as a default\nfilename.\n\nReturn the default savefig file format as specified in\n`rcParams[\"savefig.format\"]` (default: `'png'`).\n\nThe returned string does not include a period. This method is overridden in\nbackends that only support a single file type.\n\nReturn dict of savefig file formats supported by this backend.\n\nReturn a dict of savefig file formats supported by this backend, where the\nkeys are a file type name, such as 'Joint Photographic Experts Group', and the\nvalues are a list of filename extensions used for that filetype, such as\n['jpg', 'jpeg'].\n\nReturn the figure width and height in integral points or pixels.\n\nWhen the figure is used on High DPI screens (and the backend supports it), the\ntruncation to integers occurs after scaling by the device pixel ratio.\n\nWhether to return true physical pixels or logical pixels. Physical pixels may\nbe used by backends that support HiDPI, but still configure the canvas using\nits actual size.\n\nThe size of the figure, in points or pixels, depending on the backend.\n\n[Deprecated] Return the title text of the window containing the figure, or\nNone if there is no window (e.g., a PS backend).\n\nDeprecated since version 3.4.\n\nSet the child `Axes` which is grabbing the mouse events.\n\nUsually called by the widgets themselves. It is an error to call this if the\nmouse is already grabbed by another axes.\n\nReturn the topmost visible `Axes` containing the point xy.\n\n(x, y) pixel positions from left/bottom of the canvas.\n\nThe topmost visible axes containing the point, or None if no axes.\n\nReturn whether the renderer is in the process of saving to a file, rather than\nrendering for an on-screen buffer.\n\nPass a `KeyEvent` to all functions connected to `key_press_event`.\n\nPass a `KeyEvent` to all functions connected to `key_release_event`.\n\nCallback processing for the mouse cursor leaving the canvas.\n\nBackend derived classes should call this function when leaving canvas.\n\nThe native UI event that generated the Matplotlib event.\n\nCallback processing for mouse movement events.\n\nBackend derived classes should call this function on any motion-notify-event.\n\nThis method will call all functions connected to the 'motion_notify_event'\nwith a `MouseEvent` instance.\n\nThe canvas coordinates where 0=left.\n\nThe canvas coordinates where 0=bottom.\n\nThe native UI event that generated the Matplotlib event.\n\nBind function func to event s.\n\nOne of the following events ids:\n\nThe callback function to be executed, which must have the signature:\n\nFor the location events (button and key press/release), if the mouse is over\nthe axes, the `inaxes` attribute of the event will be set to the `Axes` the\nevent occurs is over, and additionally, the variables `xdata` and `ydata`\nattributes will be set to the mouse location in data coordinates. See\n`KeyEvent` and `MouseEvent` for more info.\n\nA connection id that can be used with `FigureCanvasBase.mpl_disconnect`.\n\nDisconnect the callback with id cid.\n\nCreate a new backend-specific subclass of `Timer`.\n\nThis is useful for getting periodic events through the backend's native event\nloop. Implemented only for backends with GUIs.\n\nTimer interval in milliseconds.\n\nSequence of (func, args, kwargs) where `func(*args, **kwargs)` will be\nexecuted by the timer every interval.\n\nCallbacks which return `False` or `0` will be removed from the timer.\n\nCallback processing for pick events.\n\nThis method will be called by artists who are picked and will fire off\n`PickEvent` callbacks registered listeners.\n\nNote that artists are not pickable by default (see `Artist.set_picker`).\n\nRender the figure to hardcopy. Set the figure patch face and edge colors. This\nis useful because some of the GUIs have a gray figure face color background\nand you'll probably want to override this on hardcopy.\n\nThe file where the figure is saved.\n\nThe dots per inch to save the figure in.\n\nThe facecolor of the figure. If 'auto', use the current figure facecolor.\n\nThe edgecolor of the figure. If 'auto', use the current figure edgecolor.\n\nOnly currently applies to PostScript printing.\n\nForce a specific file format. If not given, the format is inferred from the\nfilename extension, and if that fails from `rcParams[\"savefig.format\"]`\n(default: `'png'`).\n\nBounding box in inches: only the given portion of the figure is saved. If\n'tight', try to figure out the tight bbox of the figure.\n\nAmount of padding around the figure when bbox_inches is 'tight'.\n\nA list of extra artists that will be considered when the tight bbox is\ncalculated.\n\nUse a non-default backend to render the file, e.g. to render a png file with\nthe \"cairo\" backend rather than the default \"agg\", or a pdf file with the\n\"pgf\" backend rather than the default \"pdf\". Note that the default backend is\nnormally sufficient. See The builtin backends for a list of valid backends for\neach file format. Custom backends can be referenced as \"module://...\".\n\nRelease the mouse grab held by the `Axes` ax.\n\nUsually called by the widgets. It is ok to call this even if ax doesn't have\nthe mouse grab currently.\n\nUNUSED: Set the canvas size in pixels.\n\nCertain backends may implement a similar method internally, but this is not a\nrequirement of, nor is it used by, Matplotlib itself.\n\nPass a `ResizeEvent` to all functions connected to `resize_event`.\n\nCallback processing for scroll events.\n\nBackend derived classes should call this function on any scroll wheel event.\n(x, y) are the canvas coords ((0, 0) is lower left). button and key are as\ndefined in `MouseEvent`.\n\nThis method will call all functions connected to the 'scroll_event' with a\n`MouseEvent` instance.\n\nSet the current cursor.\n\nThis may have no effect if the backend does not display anything.\n\nIf required by the backend, this method should trigger an update in the\nbackend event loop after the cursor is set, as this method may be called e.g.\nbefore a long-running task during which the GUI is not updated.\n\nThe cursor to display over the canvas. Note: some backends may change the\ncursor for the entire window.\n\n[Deprecated] Set the title text of the window containing the figure. Note that\nthis has no effect if there is no window (e.g., a PS backend).\n\nDeprecated since version 3.4.\n\nStart a blocking event loop.\n\nSuch an event loop is used by interactive functions, such as `ginput` and\n`waitforbuttonpress`, to wait for events.\n\nThe event loop blocks until a callback function triggers `stop_event_loop`, or\ntimeout is reached.\n\nIf timeout is 0 or negative, never timeout.\n\nOnly interactive backends need to reimplement this method and it relies on\n`flush_events` being properly implemented.\n\nInteractive backends should implement this in a more native way.\n\nStop the current blocking event loop.\n\nInteractive backends need to reimplement this to match `start_event_loop`\n\nInstantiate an instance of FigureCanvasClass\n\nThis is used for backend switching, e.g., to instantiate a FigureCanvasPS from\na FigureCanvasGTK. Note, deep copying is not done, so any changes to one of\nthe instances (e.g., setting figure size or line props), will be reflected in\nthe other\n\nBases: `object`\n\nA backend-independent abstraction of a figure container and controller.\n\nThe figure manager is used by pyplot to interact with the window in a backend-\nindependent way. It's an adapter for the real (GUI) framework that represents\nthe visual figure on screen.\n\nGUI backends define from this class to translate common operations such as\nshow or resize to the GUI-specific code. Non-GUI backends do not support these\noperations an can just use the base class.\n\nThis following basic operations are accessible:\n\nWindow operations\n\nKey and mouse button press handling\n\nThe figure manager sets up default key and mouse button press handling by\nhooking up the `key_press_handler` to the matplotlib event system. This\nensures the same shortcuts and mouse actions across backends.\n\nOther operations\n\nSubclasses will have additional attributes and functions to access additional\nfunctionality. This is of course backend-specific. For example, most GUI\nbackends have `window` and `toolbar` attributes that give access to the native\nGUI widgets of the respective framework.\n\nThe backend-specific canvas instance.\n\nThe figure number.\n\nThe default key handler cid, when using the toolmanager. To disable the\ndefault key press handling use:\n\nThe default mouse button handler cid, when using the toolmanager. To disable\nthe default button press handling use:\n\n[Deprecated] The default Matplotlib button actions for extra mouse buttons.\n\nDeprecated since version 3.4.\n\nReturn the title text of the window containing the figure, or None if there is\nno window (e.g., a PS backend).\n\n[Deprecated] Implement the default Matplotlib key bindings defined at\nNavigation keyboard shortcuts.\n\nDeprecated since version 3.4.\n\nFor GUI backends, resize the window (in physical pixels).\n\nSet the title text of the window containing the figure.\n\nThis has no effect for non-GUI (e.g., PS) backends.\n\nFor GUI backends, show the figure window and redraw. For non-GUI backends,\nraise an exception, unless running headless (i.e. on Linux with an unset\nDISPLAY); this exception is converted to a warning in `Figure.show`.\n\nBases: `object`\n\nAn abstract base class that provides color, line styles, etc.\n\nCopy properties from gc to self.\n\nReturn the alpha value used for blending - not supported on all backends.\n\nReturn whether the object should try to do antialiased rendering.\n\nReturn the `CapStyle`.\n\nReturn the clip path in the form (path, transform), where path is a `Path`\ninstance, and transform is an affine transform to apply to the path before\nclipping.\n\nReturn the clip rectangle as a `Bbox` instance.\n\nReturn the dash style as an (offset, dash-list) pair.\n\nThe dash list is a even-length list that gives the ink on, ink off in points.\nSee p. 107 of to PostScript blue book for more info.\n\nDefault value is (None, None).\n\nReturn whether the value given by get_alpha() should be used to override any\nother alpha-channel values.\n\nReturn the object identifier if one is set, None otherwise.\n\nGet the current hatch style.\n\nGet the hatch color.\n\nGet the hatch linewidth.\n\nReturn a `Path` for the current hatch.\n\nReturn the `JoinStyle`.\n\nReturn the line width in points.\n\nReturn a tuple of three or four floats from 0-1.\n\nReturn the sketch parameters for the artist.\n\nA 3-tuple with the following elements:\n\nMay return `None` if no sketch parameters were set.\n\nReturn the snap setting, which can be:\n\nReturn a url if one is set, None otherwise.\n\nRestore the graphics context from the stack - needed only for backends that\nsave graphics contexts on a stack.\n\nSet the alpha value used for blending - not supported on all backends.\n\nIf `alpha=None` (the default), the alpha components of the foreground and fill\ncolors will be used to set their respective transparencies (where applicable);\notherwise, `alpha` will override them.\n\nSet whether object should be drawn with antialiased rendering.\n\nSet how to draw endpoints of lines.\n\nSet the clip path to a `TransformedPath` or None.\n\nSet the clip rectangle to a `Bbox` or None.\n\nSet the dash style for the gc.\n\nThe offset (usually 0).\n\nThe on-off sequence as points. None specifies a solid line.\n\nSee p. 107 of to PostScript blue book for more info.\n\nSet the foreground color.\n\nIf fg is known to be an `(r, g, b, a)` tuple, isRGBA can be set to True to\nimprove performance.\n\nSet the id.\n\nSet the hatch style (for fills).\n\nSet the hatch color.\n\nSet how to draw connections between line segments.\n\nSet the linewidth in points.\n\nSet the sketch parameters.\n\nThe amplitude of the wiggle perpendicular to the source line, in pixels. If\nscale is `None`, or not provided, no sketch filter will be provided.\n\nThe length of the wiggle along the line, in pixels.\n\nThe scale factor by which the length is shrunken or expanded.\n\nSet the snap setting which may be:\n\nSet the url for links in compatible backends.\n\nBases: `matplotlib.backend_bases.LocationEvent`\n\nA key event (key press, key release).\n\nA KeyEvent has a number of special attributes in addition to those defined by\nthe parent `Event` and `LocationEvent` classes.\n\nModifier keys will be prefixed to the pressed key and will be in the order\n\"ctrl\", \"alt\", \"super\". The exception to this rule is when the pressed key is\nitself a modifier key, therefore \"ctrl+alt\" and \"alt+control\" can both be\nvalid key values.\n\nThe key(s) pressed. Could be None, a single case sensitive Unicode character\n(\"g\", \"G\", \"#\", etc.), a special key (\"control\", \"shift\", \"f1\", \"up\", etc.) or\na combination of the above (e.g., \"ctrl+alt+g\", \"ctrl+alt+G\").\n\nBases: `matplotlib.backend_bases.Event`\n\nAn event that has a screen location.\n\nA LocationEvent has a number of special attributes in addition to those\ndefined by the parent `Event` class.\n\nEvent location in pixels from bottom left of canvas.\n\nThe `Axes` instance over which the mouse is, if any.\n\nData coordinates of the mouse within inaxes, or None if the mouse is not over\nan Axes.\n\nBases: `enum.IntEnum`\n\nAn enumeration.\n\nBases: `matplotlib.backend_bases.LocationEvent`\n\nA mouse event ('button_press_event', 'button_release_event', 'scroll_event',\n'motion_notify_event').\n\nA MouseEvent has a number of special attributes in addition to those defined\nby the parent `Event` and `LocationEvent` classes.\n\nThe button pressed. 'up' and 'down' are used for scroll events. Note that LEFT\nand RIGHT actually refer to the \"primary\" and \"secondary\" buttons, i.e. if the\nuser inverts their left and right buttons (\"left-handed setting\") then the\nLEFT button will be the one physically on the right.\n\nThe key pressed when the mouse event triggered, e.g. 'shift'. See `KeyEvent`.\n\nWarning\n\nThis key is currently obtained from the last 'key_press_event' or\n'key_release_event' that occurred within the canvas. Thus, if the last change\nof keyboard state occurred while the canvas did not have focus, this attribute\nwill be wrong.\n\nThe number of scroll steps (positive for 'up', negative for 'down'). This\napplies only to 'scroll_event' and defaults to 0 otherwise.\n\nWhether the event is a double-click. This applies only to 'button_press_event'\nand is False otherwise. In particular, it's not used in\n'button_release_event'.\n\nBases: `object`\n\nBase class for the navigation cursor, version 2.\n\nBackends must implement a canvas that handles connections for\n'button_press_event' and 'button_release_event'. See\n`FigureCanvasBase.mpl_connect()` for more information.\n\nThey must also define\n\nsave the current figure\n\ndraw the zoom to rect \"rubberband\" rectangle\n\ndisplay message\n\nyou can change the history back / forward buttons to indicate disabled /\nenabled state.\n\nand override `__init__` to set up the toolbar -- without forgetting to call\nthe base-class init. Typically, `__init__` needs to set up toolbar buttons\nconnected to the `home`, `back`, `forward`, `pan`, `zoom`, and `save_figure`\nmethods and using standard icons in the \"images\" subdirectory of the data\npath.\n\nThat's it, we'll do the rest!\n\nMove back up the view lim stack.\n\nFor convenience of being directly connected as a GUI callback, which often get\npassed additional parameters, this method accepts arbitrary parameters, but\ndoes not use them.\n\nCallback for dragging in pan/zoom mode.\n\nCallback for dragging in zoom mode.\n\nDraw a rectangle rubberband to indicate zoom limits.\n\nNote that it is not guaranteed that `x0 <= x1` and `y0 <= y1`.\n\nMove forward in the view lim stack.\n\nFor convenience of being directly connected as a GUI callback, which often get\npassed additional parameters, this method accepts arbitrary parameters, but\ndoes not use them.\n\nRestore the original view.\n\nFor convenience of being directly connected as a GUI callback, which often get\npassed additional parameters, this method accepts arbitrary parameters, but\ndoes not use them.\n\nToggle the pan/zoom tool.\n\nPan with left button, zoom with right.\n\nCallback for mouse button press in pan/zoom mode.\n\nCallback for mouse button press in zoom to rect mode.\n\nPush the current view limits and position onto the stack.\n\nCallback for mouse button release in pan/zoom mode.\n\nCallback for mouse button release in zoom to rect mode.\n\nRemove the rubberband.\n\nSave the current figure.\n\n[Deprecated] Set the current cursor to one of the `Cursors` enums values.\n\nIf required by the backend, this method should trigger an update in the\nbackend event loop after the cursor is set, as this method may be called e.g.\nbefore a long-running task during which the GUI is not updated.\n\nDeprecated since version 3.5.\n\nEnable or disable the back/forward button.\n\nDisplay a message on toolbar or in status bar.\n\nReset the axes stack.\n\nToggle zoom to rect mode.\n\nBases: `Exception`\n\nRaised when trying show a figure in a non-GUI backend.\n\nBases: `matplotlib.backend_bases.Event`\n\nA pick event.\n\nThis event is fired when the user picks a location on the canvas sufficiently\nclose to an artist that has been made pickable with `Artist.set_picker`.\n\nA PickEvent has a number of special attributes in addition to those defined by\nthe parent `Event` class.\n\nBind a function `on_pick()` to pick events, that prints the coordinates of the\npicked data point:\n\nThe mouse event that generated the pick.\n\nThe picked artist. Note that artists are not pickable by default (see\n`Artist.set_picker`).\n\nAdditional attributes may be present depending on the type of the picked\nobject; e.g., a `Line2D` pick may define different extra attributes than a\n`PatchCollection` pick.\n\nBases: `object`\n\nAn abstract base class to handle drawing/rendering operations.\n\nThe following methods must be implemented in the backend for full\nfunctionality (though just implementing `draw_path()` alone would give a\nhighly capable backend):\n\nThe following methods should be implemented in the backend for optimization\nreasons:\n\nClose a grouping element with label s.\n\nOnly used by the SVG renderer.\n\nDraw a Gouraud-shaded triangle.\n\nThe graphics context.\n\nArray of (x, y) points for the triangle.\n\nRGBA colors for each point of the triangle.\n\nAn affine transform to apply to the points.\n\nDraw a series of Gouraud triangles.\n\nArray of N (x, y) points for the triangles.\n\nArray of N RGBA colors for each point of the triangles.\n\nAn affine transform to apply to the points.\n\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\nDraw a marker at each of path's vertices (excluding control points).\n\nThis provides a fallback implementation of draw_markers that makes multiple\ncalls to `draw_path()`. Some backends may want to override this method in\norder to draw the marker only once and reuse it multiple times.\n\nThe graphics context.\n\nAn affine transform applied to the marker.\n\nAn affine transform applied to the path.\n\nDraw a `Path` instance using the given affine transform.\n\nDraw a collection of paths selecting drawing properties from the lists\nfacecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a\nlist of offsets to apply to each of the paths. The offsets in offsets are\nfirst transformed by offsetTrans before being applied.\n\noffset_position is unused now, but the argument is kept for backwards\ncompatibility.\n\nThis provides a fallback implementation of `draw_path_collection()` that makes\nmultiple calls to `draw_path()`. Some backends may want to override this in\norder to render each set of path data only once, and then reference that path\nmultiple times with the different offsets, colors, styles etc. The generator\nmethods `_iter_collection_raw_paths()` and `_iter_collection()` are provided\nto help with (and standardize) the implementation across backends. It is\nhighly recommended to use those generators, so that changes to the behavior of\n`draw_path_collection()` can be made globally.\n\nFallback implementation of `draw_quad_mesh()` that generates paths and then\ncalls `draw_path_collection()`.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nReturn whether y values increase from top to bottom.\n\nNote that this only affects drawing of texts and images.\n\nReturn the canvas width and height in display coords.\n\nGet the factor by which to magnify images passed to `draw_image()`. Allows a\nbackend to have images at a different resolution to other artists.\n\nReturn the `TexManager` instance.\n\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\nReturn an instance of a `GraphicsContextBase`.\n\nOpen a grouping element with label s and gid (if set) as id.\n\nOnly used by the SVG renderer.\n\nReturn whether image composition by Matplotlib should be skipped.\n\nRaster backends should usually return False (letting the C-level rasterizer\ntake care of image composition); vector backends should usually return `not\nrcParams[\"image.composite_image\"]`.\n\nReturn whether arbitrary affine transformations in `draw_image()` are\nsupported (True for most vector backends).\n\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\nSwitch to a temporary renderer for image filtering effects.\n\nCurrently only supported by the agg renderer.\n\nSwitch to the raster renderer.\n\nUsed by `MixedModeRenderer`.\n\nSwitch back to the original renderer. The contents of the temporary renderer\nis processed with the filter_func and is drawn on the original renderer as an\nimage.\n\nCurrently only supported by the agg renderer.\n\nSwitch back to the vector renderer and draw the contents of the raster\nrenderer as an image on the vector renderer.\n\nUsed by `MixedModeRenderer`.\n\nBases: `matplotlib.backend_bases.Event`\n\nAn event triggered by a canvas resize.\n\nA ResizeEvent has a number of special attributes in addition to those defined\nby the parent `Event` class.\n\nWidth of the canvas in pixels.\n\nHeight of the canvas in pixels.\n\nBases: `matplotlib.backend_bases._Backend`\n\nSimple base class to generate a `show()` function in backends.\n\nSubclass must override `mainloop()` method.\n\nBases: `object`\n\nA base class for providing timer events, useful for things animations.\nBackends need to implement a few specific methods in order to use their own\ntiming mechanisms so that the timer events are integrated into their event\nloops.\n\nSubclasses must override the following methods:\n\nSubclasses may additionally override the following methods:\n\nThe time between timer events in milliseconds. Will be stored as\n`timer.interval`.\n\nList of (func, args, kwargs) tuples that will be called upon timer events.\nThis list is accessible as `timer.callbacks` and can be manipulated directly,\nor the functions `add_callback` and `remove_callback` can be used.\n\nRegister func to be called by timer when the event fires. Any additional\narguments provided will be passed to func.\n\nThis function returns func, which makes it possible to use it as a decorator.\n\nThe time between timer events, in milliseconds.\n\nRemove func from list of callbacks.\n\nargs and kwargs are optional and used to distinguish between copies of the\nsame function registered to be called with different arguments. This behavior\nis deprecated. In the future, `*args, **kwargs` won't be considered anymore;\nto keep a specific callback removable by itself, pass it to `add_callback` as\na `functools.partial` object.\n\nWhether this timer should stop after a single run.\n\nStart the timer object.\n\nTimer interval in milliseconds; overrides a previously set interval if\nprovided.\n\nStop the timer.\n\nBases: `object`\n\nBase class for all tool containers, e.g. toolbars.\n\nThe tools with which this `ToolContainer` wants to communicate.\n\nAdd a tool to this container.\n\nThe tool to add, see `ToolManager.get_tool`.\n\nThe name of the group to add this tool to.\n\nThe position within the group to place this tool.\n\nAdd a toolitem to the container.\n\nThis method must be implemented per backend.\n\nThe callback associated with the button click event, must be exactly\n`self.trigger_tool(name)`.\n\nName of the tool to add, this gets used as the tool's ID and as the default\nlabel of the buttons.\n\nName of the group that this tool belongs to.\n\nPosition of the tool within its group, if -1 it goes at the end.\n\nFilename of the image for the button or `None`.\n\nDescription of the tool, used for the tooltips.\n\nRemove a toolitem from the `ToolContainer`.\n\nThis method must get implemented per backend.\n\nCalled when `ToolManager` emits a `tool_removed_event`.\n\nName of the tool to remove.\n\nDisplay a message on the toolbar.\n\nMessage text.\n\nToggle the toolitem without firing event.\n\nId of the tool to toggle.\n\nWhether to set this tool as toggled or not.\n\nTrigger the tool.\n\nName (id) of the tool triggered from within the container.\n\nThe default Matplotlib button actions for extra mouse buttons.\n\nParameters are as for `key_press_handler`, except that event is a\n`MouseEvent`.\n\nReturn the registered default canvas for given file format. Handles deferred\nimport of required backend.\n\nImplement the default Matplotlib key bindings for the canvas and toolbar\ndescribed at Navigation keyboard shortcuts.\n\nA key press/release event.\n\nThe backend-specific canvas instance. This parameter is kept for back-\ncompatibility, but, if set, should always be equal to `event.canvas`.\n\nThe navigation cursor toolbar. This parameter is kept for back-compatibility,\nbut, if set, should always be equal to `event.canvas.toolbar`.\n\nRegister a backend for saving to a given file format.\n\nFile extension\n\nBackend for handling file output\n\nDescription of the file type.\n\n"}, {"name": "backend_bases.button_press_handler()", "path": "backend_bases_api#matplotlib.backend_bases.button_press_handler", "type": "backend_bases", "text": "\nThe default Matplotlib button actions for extra mouse buttons.\n\nParameters are as for `key_press_handler`, except that event is a\n`MouseEvent`.\n\n"}, {"name": "backend_bases.CloseEvent", "path": "backend_bases_api#matplotlib.backend_bases.CloseEvent", "type": "backend_bases", "text": "\nBases: `matplotlib.backend_bases.Event`\n\nAn event triggered by a figure being closed.\n\n"}, {"name": "backend_bases.DrawEvent", "path": "backend_bases_api#matplotlib.backend_bases.DrawEvent", "type": "backend_bases", "text": "\nBases: `matplotlib.backend_bases.Event`\n\nAn event triggered by a draw operation on the canvas.\n\nIn most backends, callbacks subscribed to this event will be fired after the\nrendering is complete but before the screen is updated. Any extra artists\ndrawn to the canvas's renderer will be reflected without an explicit call to\n`blit`.\n\nWarning\n\nCalling `canvas.draw` and `canvas.blit` in these callbacks may not be safe\nwith all backends and may cause infinite recursion.\n\nA DrawEvent has a number of special attributes in addition to those defined by\nthe parent `Event` class.\n\nThe renderer for the draw event.\n\n"}, {"name": "backend_bases.Event", "path": "backend_bases_api#matplotlib.backend_bases.Event", "type": "backend_bases", "text": "\nBases: `object`\n\nA Matplotlib event.\n\nThe following attributes are defined and shown with their default values.\nSubclasses may define additional attributes.\n\nThe event name.\n\nThe backend-specific canvas instance generating the event.\n\nThe GUI event that triggered the Matplotlib event.\n\n"}, {"name": "backend_bases.FigureCanvasBase", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase", "type": "backend_bases", "text": "\nBases: `object`\n\nThe canvas the figure renders into.\n\nA high-level figure instance.\n\nBlit the canvas in bbox (default entire canvas).\n\nCallback processing for mouse button press events.\n\nBackend derived classes should call this function on any mouse button press.\n(x, y) are the canvas coords ((0, 0) is lower left). button and key are as\ndefined in `MouseEvent`.\n\nThis method will call all functions connected to the 'button_press_event' with\na `MouseEvent` instance.\n\nCallback processing for mouse button release events.\n\nBackend derived classes should call this function on any mouse button release.\n\nThis method will call all functions connected to the 'button_release_event'\nwith a `MouseEvent` instance.\n\nThe canvas coordinates where 0=left.\n\nThe canvas coordinates where 0=bottom.\n\nThe native UI event that generated the Matplotlib event.\n\nPass a `CloseEvent` to all functions connected to `close_event`.\n\nThe ratio of physical to logical pixels used for the canvas on screen.\n\nBy default, this is 1, meaning physical and logical pixels are the same size.\nSubclasses that support High DPI screens may set this property to indicate\nthat said ratio is different. All Matplotlib interaction, unless working\ndirectly with the canvas, remains in logical pixels.\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nPass a `DrawEvent` to all functions connected to `draw_event`.\n\nRequest a widget redraw once control returns to the GUI event loop.\n\nEven if multiple calls to `draw_idle` occur before control returns to the GUI\nevent loop, the figure will only be rendered once.\n\nBackends may choose to override the method and implement their own strategy to\nprevent multiple renderings.\n\nCallback processing for the mouse cursor entering the canvas.\n\nBackend derived classes should call this function when entering canvas.\n\nThe native UI event that generated the Matplotlib event.\n\nThe coordinate location of the pointer when the canvas is entered.\n\nFlush the GUI events for the figure.\n\nInteractive backends need to reimplement this method.\n\nReturn a string, which includes extension, suitable for use as a default\nfilename.\n\nReturn the default savefig file format as specified in\n`rcParams[\"savefig.format\"]` (default: `'png'`).\n\nThe returned string does not include a period. This method is overridden in\nbackends that only support a single file type.\n\nReturn dict of savefig file formats supported by this backend.\n\nReturn a dict of savefig file formats supported by this backend, where the\nkeys are a file type name, such as 'Joint Photographic Experts Group', and the\nvalues are a list of filename extensions used for that filetype, such as\n['jpg', 'jpeg'].\n\nReturn the figure width and height in integral points or pixels.\n\nWhen the figure is used on High DPI screens (and the backend supports it), the\ntruncation to integers occurs after scaling by the device pixel ratio.\n\nWhether to return true physical pixels or logical pixels. Physical pixels may\nbe used by backends that support HiDPI, but still configure the canvas using\nits actual size.\n\nThe size of the figure, in points or pixels, depending on the backend.\n\n[Deprecated] Return the title text of the window containing the figure, or\nNone if there is no window (e.g., a PS backend).\n\nDeprecated since version 3.4.\n\nSet the child `Axes` which is grabbing the mouse events.\n\nUsually called by the widgets themselves. It is an error to call this if the\nmouse is already grabbed by another axes.\n\nReturn the topmost visible `Axes` containing the point xy.\n\n(x, y) pixel positions from left/bottom of the canvas.\n\nThe topmost visible axes containing the point, or None if no axes.\n\nReturn whether the renderer is in the process of saving to a file, rather than\nrendering for an on-screen buffer.\n\nPass a `KeyEvent` to all functions connected to `key_press_event`.\n\nPass a `KeyEvent` to all functions connected to `key_release_event`.\n\nCallback processing for the mouse cursor leaving the canvas.\n\nBackend derived classes should call this function when leaving canvas.\n\nThe native UI event that generated the Matplotlib event.\n\nCallback processing for mouse movement events.\n\nBackend derived classes should call this function on any motion-notify-event.\n\nThis method will call all functions connected to the 'motion_notify_event'\nwith a `MouseEvent` instance.\n\nThe canvas coordinates where 0=left.\n\nThe canvas coordinates where 0=bottom.\n\nThe native UI event that generated the Matplotlib event.\n\nBind function func to event s.\n\nOne of the following events ids:\n\nThe callback function to be executed, which must have the signature:\n\nFor the location events (button and key press/release), if the mouse is over\nthe axes, the `inaxes` attribute of the event will be set to the `Axes` the\nevent occurs is over, and additionally, the variables `xdata` and `ydata`\nattributes will be set to the mouse location in data coordinates. See\n`KeyEvent` and `MouseEvent` for more info.\n\nA connection id that can be used with `FigureCanvasBase.mpl_disconnect`.\n\nDisconnect the callback with id cid.\n\nCreate a new backend-specific subclass of `Timer`.\n\nThis is useful for getting periodic events through the backend's native event\nloop. Implemented only for backends with GUIs.\n\nTimer interval in milliseconds.\n\nSequence of (func, args, kwargs) where `func(*args, **kwargs)` will be\nexecuted by the timer every interval.\n\nCallbacks which return `False` or `0` will be removed from the timer.\n\nCallback processing for pick events.\n\nThis method will be called by artists who are picked and will fire off\n`PickEvent` callbacks registered listeners.\n\nNote that artists are not pickable by default (see `Artist.set_picker`).\n\nRender the figure to hardcopy. Set the figure patch face and edge colors. This\nis useful because some of the GUIs have a gray figure face color background\nand you'll probably want to override this on hardcopy.\n\nThe file where the figure is saved.\n\nThe dots per inch to save the figure in.\n\nThe facecolor of the figure. If 'auto', use the current figure facecolor.\n\nThe edgecolor of the figure. If 'auto', use the current figure edgecolor.\n\nOnly currently applies to PostScript printing.\n\nForce a specific file format. If not given, the format is inferred from the\nfilename extension, and if that fails from `rcParams[\"savefig.format\"]`\n(default: `'png'`).\n\nBounding box in inches: only the given portion of the figure is saved. If\n'tight', try to figure out the tight bbox of the figure.\n\nAmount of padding around the figure when bbox_inches is 'tight'.\n\nA list of extra artists that will be considered when the tight bbox is\ncalculated.\n\nUse a non-default backend to render the file, e.g. to render a png file with\nthe \"cairo\" backend rather than the default \"agg\", or a pdf file with the\n\"pgf\" backend rather than the default \"pdf\". Note that the default backend is\nnormally sufficient. See The builtin backends for a list of valid backends for\neach file format. Custom backends can be referenced as \"module://...\".\n\nRelease the mouse grab held by the `Axes` ax.\n\nUsually called by the widgets. It is ok to call this even if ax doesn't have\nthe mouse grab currently.\n\nUNUSED: Set the canvas size in pixels.\n\nCertain backends may implement a similar method internally, but this is not a\nrequirement of, nor is it used by, Matplotlib itself.\n\nPass a `ResizeEvent` to all functions connected to `resize_event`.\n\nCallback processing for scroll events.\n\nBackend derived classes should call this function on any scroll wheel event.\n(x, y) are the canvas coords ((0, 0) is lower left). button and key are as\ndefined in `MouseEvent`.\n\nThis method will call all functions connected to the 'scroll_event' with a\n`MouseEvent` instance.\n\nSet the current cursor.\n\nThis may have no effect if the backend does not display anything.\n\nIf required by the backend, this method should trigger an update in the\nbackend event loop after the cursor is set, as this method may be called e.g.\nbefore a long-running task during which the GUI is not updated.\n\nThe cursor to display over the canvas. Note: some backends may change the\ncursor for the entire window.\n\n[Deprecated] Set the title text of the window containing the figure. Note that\nthis has no effect if there is no window (e.g., a PS backend).\n\nDeprecated since version 3.4.\n\nStart a blocking event loop.\n\nSuch an event loop is used by interactive functions, such as `ginput` and\n`waitforbuttonpress`, to wait for events.\n\nThe event loop blocks until a callback function triggers `stop_event_loop`, or\ntimeout is reached.\n\nIf timeout is 0 or negative, never timeout.\n\nOnly interactive backends need to reimplement this method and it relies on\n`flush_events` being properly implemented.\n\nInteractive backends should implement this in a more native way.\n\nStop the current blocking event loop.\n\nInteractive backends need to reimplement this to match `start_event_loop`\n\nInstantiate an instance of FigureCanvasClass\n\nThis is used for backend switching, e.g., to instantiate a FigureCanvasPS from\na FigureCanvasGTK. Note, deep copying is not done, so any changes to one of\nthe instances (e.g., setting figure size or line props), will be reflected in\nthe other\n\n"}, {"name": "backend_bases.FigureCanvasBase.blit()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.blit", "type": "backend_bases", "text": "\nBlit the canvas in bbox (default entire canvas).\n\n"}, {"name": "backend_bases.FigureCanvasBase.button_press_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.button_press_event", "type": "backend_bases", "text": "\nCallback processing for mouse button press events.\n\nBackend derived classes should call this function on any mouse button press.\n(x, y) are the canvas coords ((0, 0) is lower left). button and key are as\ndefined in `MouseEvent`.\n\nThis method will call all functions connected to the 'button_press_event' with\na `MouseEvent` instance.\n\n"}, {"name": "backend_bases.FigureCanvasBase.button_release_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.button_release_event", "type": "backend_bases", "text": "\nCallback processing for mouse button release events.\n\nBackend derived classes should call this function on any mouse button release.\n\nThis method will call all functions connected to the 'button_release_event'\nwith a `MouseEvent` instance.\n\nThe canvas coordinates where 0=left.\n\nThe canvas coordinates where 0=bottom.\n\nThe native UI event that generated the Matplotlib event.\n\n"}, {"name": "backend_bases.FigureCanvasBase.close_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.close_event", "type": "backend_bases", "text": "\nPass a `CloseEvent` to all functions connected to `close_event`.\n\n"}, {"name": "backend_bases.FigureCanvasBase.draw()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.draw", "type": "backend_bases", "text": "\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\n"}, {"name": "backend_bases.FigureCanvasBase.draw_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.draw_event", "type": "backend_bases", "text": "\nPass a `DrawEvent` to all functions connected to `draw_event`.\n\n"}, {"name": "backend_bases.FigureCanvasBase.draw_idle()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.draw_idle", "type": "backend_bases", "text": "\nRequest a widget redraw once control returns to the GUI event loop.\n\nEven if multiple calls to `draw_idle` occur before control returns to the GUI\nevent loop, the figure will only be rendered once.\n\nBackends may choose to override the method and implement their own strategy to\nprevent multiple renderings.\n\n"}, {"name": "backend_bases.FigureCanvasBase.enter_notify_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.enter_notify_event", "type": "backend_bases", "text": "\nCallback processing for the mouse cursor entering the canvas.\n\nBackend derived classes should call this function when entering canvas.\n\nThe native UI event that generated the Matplotlib event.\n\nThe coordinate location of the pointer when the canvas is entered.\n\n"}, {"name": "backend_bases.FigureCanvasBase.events", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.events", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.FigureCanvasBase.filetypes", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.filetypes", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.FigureCanvasBase.fixed_dpi", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.fixed_dpi", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.FigureCanvasBase.flush_events()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.flush_events", "type": "backend_bases", "text": "\nFlush the GUI events for the figure.\n\nInteractive backends need to reimplement this method.\n\n"}, {"name": "backend_bases.FigureCanvasBase.get_default_filename()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_default_filename", "type": "backend_bases", "text": "\nReturn a string, which includes extension, suitable for use as a default\nfilename.\n\n"}, {"name": "backend_bases.FigureCanvasBase.get_default_filetype()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_default_filetype", "type": "backend_bases", "text": "\nReturn the default savefig file format as specified in\n`rcParams[\"savefig.format\"]` (default: `'png'`).\n\nThe returned string does not include a period. This method is overridden in\nbackends that only support a single file type.\n\n"}, {"name": "backend_bases.FigureCanvasBase.get_supported_filetypes()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_supported_filetypes", "type": "backend_bases", "text": "\nReturn dict of savefig file formats supported by this backend.\n\n"}, {"name": "backend_bases.FigureCanvasBase.get_supported_filetypes_grouped()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_supported_filetypes_grouped", "type": "backend_bases", "text": "\nReturn a dict of savefig file formats supported by this backend, where the\nkeys are a file type name, such as 'Joint Photographic Experts Group', and the\nvalues are a list of filename extensions used for that filetype, such as\n['jpg', 'jpeg'].\n\n"}, {"name": "backend_bases.FigureCanvasBase.get_width_height()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_width_height", "type": "backend_bases", "text": "\nReturn the figure width and height in integral points or pixels.\n\nWhen the figure is used on High DPI screens (and the backend supports it), the\ntruncation to integers occurs after scaling by the device pixel ratio.\n\nWhether to return true physical pixels or logical pixels. Physical pixels may\nbe used by backends that support HiDPI, but still configure the canvas using\nits actual size.\n\nThe size of the figure, in points or pixels, depending on the backend.\n\n"}, {"name": "backend_bases.FigureCanvasBase.get_window_title()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_window_title", "type": "backend_bases", "text": "\n[Deprecated] Return the title text of the window containing the figure, or\nNone if there is no window (e.g., a PS backend).\n\nDeprecated since version 3.4.\n\n"}, {"name": "backend_bases.FigureCanvasBase.grab_mouse()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.grab_mouse", "type": "backend_bases", "text": "\nSet the child `Axes` which is grabbing the mouse events.\n\nUsually called by the widgets themselves. It is an error to call this if the\nmouse is already grabbed by another axes.\n\n"}, {"name": "backend_bases.FigureCanvasBase.inaxes()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.inaxes", "type": "backend_bases", "text": "\nReturn the topmost visible `Axes` containing the point xy.\n\n(x, y) pixel positions from left/bottom of the canvas.\n\nThe topmost visible axes containing the point, or None if no axes.\n\n"}, {"name": "backend_bases.FigureCanvasBase.is_saving()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.is_saving", "type": "backend_bases", "text": "\nReturn whether the renderer is in the process of saving to a file, rather than\nrendering for an on-screen buffer.\n\n"}, {"name": "backend_bases.FigureCanvasBase.key_press_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.key_press_event", "type": "backend_bases", "text": "\nPass a `KeyEvent` to all functions connected to `key_press_event`.\n\n"}, {"name": "backend_bases.FigureCanvasBase.key_release_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.key_release_event", "type": "backend_bases", "text": "\nPass a `KeyEvent` to all functions connected to `key_release_event`.\n\n"}, {"name": "backend_bases.FigureCanvasBase.leave_notify_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.leave_notify_event", "type": "backend_bases", "text": "\nCallback processing for the mouse cursor leaving the canvas.\n\nBackend derived classes should call this function when leaving canvas.\n\nThe native UI event that generated the Matplotlib event.\n\n"}, {"name": "backend_bases.FigureCanvasBase.motion_notify_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.motion_notify_event", "type": "backend_bases", "text": "\nCallback processing for mouse movement events.\n\nBackend derived classes should call this function on any motion-notify-event.\n\nThis method will call all functions connected to the 'motion_notify_event'\nwith a `MouseEvent` instance.\n\nThe canvas coordinates where 0=left.\n\nThe canvas coordinates where 0=bottom.\n\nThe native UI event that generated the Matplotlib event.\n\n"}, {"name": "backend_bases.FigureCanvasBase.mpl_connect()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.mpl_connect", "type": "backend_bases", "text": "\nBind function func to event s.\n\nOne of the following events ids:\n\nThe callback function to be executed, which must have the signature:\n\nFor the location events (button and key press/release), if the mouse is over\nthe axes, the `inaxes` attribute of the event will be set to the `Axes` the\nevent occurs is over, and additionally, the variables `xdata` and `ydata`\nattributes will be set to the mouse location in data coordinates. See\n`KeyEvent` and `MouseEvent` for more info.\n\nA connection id that can be used with `FigureCanvasBase.mpl_disconnect`.\n\n"}, {"name": "backend_bases.FigureCanvasBase.mpl_disconnect()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.mpl_disconnect", "type": "backend_bases", "text": "\nDisconnect the callback with id cid.\n\n"}, {"name": "backend_bases.FigureCanvasBase.new_timer()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.new_timer", "type": "backend_bases", "text": "\nCreate a new backend-specific subclass of `Timer`.\n\nThis is useful for getting periodic events through the backend's native event\nloop. Implemented only for backends with GUIs.\n\nTimer interval in milliseconds.\n\nSequence of (func, args, kwargs) where `func(*args, **kwargs)` will be\nexecuted by the timer every interval.\n\nCallbacks which return `False` or `0` will be removed from the timer.\n\n"}, {"name": "backend_bases.FigureCanvasBase.pick()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.pick", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.FigureCanvasBase.pick_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.pick_event", "type": "backend_bases", "text": "\nCallback processing for pick events.\n\nThis method will be called by artists who are picked and will fire off\n`PickEvent` callbacks registered listeners.\n\nNote that artists are not pickable by default (see `Artist.set_picker`).\n\n"}, {"name": "backend_bases.FigureCanvasBase.print_figure()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.print_figure", "type": "backend_bases", "text": "\nRender the figure to hardcopy. Set the figure patch face and edge colors. This\nis useful because some of the GUIs have a gray figure face color background\nand you'll probably want to override this on hardcopy.\n\nThe file where the figure is saved.\n\nThe dots per inch to save the figure in.\n\nThe facecolor of the figure. If 'auto', use the current figure facecolor.\n\nThe edgecolor of the figure. If 'auto', use the current figure edgecolor.\n\nOnly currently applies to PostScript printing.\n\nForce a specific file format. If not given, the format is inferred from the\nfilename extension, and if that fails from `rcParams[\"savefig.format\"]`\n(default: `'png'`).\n\nBounding box in inches: only the given portion of the figure is saved. If\n'tight', try to figure out the tight bbox of the figure.\n\nAmount of padding around the figure when bbox_inches is 'tight'.\n\nA list of extra artists that will be considered when the tight bbox is\ncalculated.\n\nUse a non-default backend to render the file, e.g. to render a png file with\nthe \"cairo\" backend rather than the default \"agg\", or a pdf file with the\n\"pgf\" backend rather than the default \"pdf\". Note that the default backend is\nnormally sufficient. See The builtin backends for a list of valid backends for\neach file format. Custom backends can be referenced as \"module://...\".\n\n"}, {"name": "backend_bases.FigureCanvasBase.release_mouse()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.release_mouse", "type": "backend_bases", "text": "\nRelease the mouse grab held by the `Axes` ax.\n\nUsually called by the widgets. It is ok to call this even if ax doesn't have\nthe mouse grab currently.\n\n"}, {"name": "backend_bases.FigureCanvasBase.required_interactive_framework", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.required_interactive_framework", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.FigureCanvasBase.resize()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.resize", "type": "backend_bases", "text": "\nUNUSED: Set the canvas size in pixels.\n\nCertain backends may implement a similar method internally, but this is not a\nrequirement of, nor is it used by, Matplotlib itself.\n\n"}, {"name": "backend_bases.FigureCanvasBase.resize_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.resize_event", "type": "backend_bases", "text": "\nPass a `ResizeEvent` to all functions connected to `resize_event`.\n\n"}, {"name": "backend_bases.FigureCanvasBase.scroll_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.scroll_event", "type": "backend_bases", "text": "\nCallback processing for scroll events.\n\nBackend derived classes should call this function on any scroll wheel event.\n(x, y) are the canvas coords ((0, 0) is lower left). button and key are as\ndefined in `MouseEvent`.\n\nThis method will call all functions connected to the 'scroll_event' with a\n`MouseEvent` instance.\n\n"}, {"name": "backend_bases.FigureCanvasBase.set_cursor()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.set_cursor", "type": "backend_bases", "text": "\nSet the current cursor.\n\nThis may have no effect if the backend does not display anything.\n\nIf required by the backend, this method should trigger an update in the\nbackend event loop after the cursor is set, as this method may be called e.g.\nbefore a long-running task during which the GUI is not updated.\n\nThe cursor to display over the canvas. Note: some backends may change the\ncursor for the entire window.\n\n"}, {"name": "backend_bases.FigureCanvasBase.set_window_title()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.set_window_title", "type": "backend_bases", "text": "\n[Deprecated] Set the title text of the window containing the figure. Note that\nthis has no effect if there is no window (e.g., a PS backend).\n\nDeprecated since version 3.4.\n\n"}, {"name": "backend_bases.FigureCanvasBase.start_event_loop()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.start_event_loop", "type": "backend_bases", "text": "\nStart a blocking event loop.\n\nSuch an event loop is used by interactive functions, such as `ginput` and\n`waitforbuttonpress`, to wait for events.\n\nThe event loop blocks until a callback function triggers `stop_event_loop`, or\ntimeout is reached.\n\nIf timeout is 0 or negative, never timeout.\n\nOnly interactive backends need to reimplement this method and it relies on\n`flush_events` being properly implemented.\n\nInteractive backends should implement this in a more native way.\n\n"}, {"name": "backend_bases.FigureCanvasBase.stop_event_loop()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.stop_event_loop", "type": "backend_bases", "text": "\nStop the current blocking event loop.\n\nInteractive backends need to reimplement this to match `start_event_loop`\n\n"}, {"name": "backend_bases.FigureCanvasBase.supports_blit", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.supports_blit", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.FigureCanvasBase.switch_backends()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.switch_backends", "type": "backend_bases", "text": "\nInstantiate an instance of FigureCanvasClass\n\nThis is used for backend switching, e.g., to instantiate a FigureCanvasPS from\na FigureCanvasGTK. Note, deep copying is not done, so any changes to one of\nthe instances (e.g., setting figure size or line props), will be reflected in\nthe other\n\n"}, {"name": "backend_bases.FigureManagerBase", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase", "type": "backend_bases", "text": "\nBases: `object`\n\nA backend-independent abstraction of a figure container and controller.\n\nThe figure manager is used by pyplot to interact with the window in a backend-\nindependent way. It's an adapter for the real (GUI) framework that represents\nthe visual figure on screen.\n\nGUI backends define from this class to translate common operations such as\nshow or resize to the GUI-specific code. Non-GUI backends do not support these\noperations an can just use the base class.\n\nThis following basic operations are accessible:\n\nWindow operations\n\nKey and mouse button press handling\n\nThe figure manager sets up default key and mouse button press handling by\nhooking up the `key_press_handler` to the matplotlib event system. This\nensures the same shortcuts and mouse actions across backends.\n\nOther operations\n\nSubclasses will have additional attributes and functions to access additional\nfunctionality. This is of course backend-specific. For example, most GUI\nbackends have `window` and `toolbar` attributes that give access to the native\nGUI widgets of the respective framework.\n\nThe backend-specific canvas instance.\n\nThe figure number.\n\nThe default key handler cid, when using the toolmanager. To disable the\ndefault key press handling use:\n\nThe default mouse button handler cid, when using the toolmanager. To disable\nthe default button press handling use:\n\n[Deprecated] The default Matplotlib button actions for extra mouse buttons.\n\nDeprecated since version 3.4.\n\nReturn the title text of the window containing the figure, or None if there is\nno window (e.g., a PS backend).\n\n[Deprecated] Implement the default Matplotlib key bindings defined at\nNavigation keyboard shortcuts.\n\nDeprecated since version 3.4.\n\nFor GUI backends, resize the window (in physical pixels).\n\nSet the title text of the window containing the figure.\n\nThis has no effect for non-GUI (e.g., PS) backends.\n\nFor GUI backends, show the figure window and redraw. For non-GUI backends,\nraise an exception, unless running headless (i.e. on Linux with an unset\nDISPLAY); this exception is converted to a warning in `Figure.show`.\n\n"}, {"name": "backend_bases.FigureManagerBase.button_press()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.button_press", "type": "backend_bases", "text": "\n[Deprecated] The default Matplotlib button actions for extra mouse buttons.\n\nDeprecated since version 3.4.\n\n"}, {"name": "backend_bases.FigureManagerBase.destroy()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.destroy", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.FigureManagerBase.full_screen_toggle()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.full_screen_toggle", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.FigureManagerBase.get_window_title()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.get_window_title", "type": "backend_bases", "text": "\nReturn the title text of the window containing the figure, or None if there is\nno window (e.g., a PS backend).\n\n"}, {"name": "backend_bases.FigureManagerBase.key_press()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.key_press", "type": "backend_bases", "text": "\n[Deprecated] Implement the default Matplotlib key bindings defined at\nNavigation keyboard shortcuts.\n\nDeprecated since version 3.4.\n\n"}, {"name": "backend_bases.FigureManagerBase.resize()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.resize", "type": "backend_bases", "text": "\nFor GUI backends, resize the window (in physical pixels).\n\n"}, {"name": "backend_bases.FigureManagerBase.set_window_title()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.set_window_title", "type": "backend_bases", "text": "\nSet the title text of the window containing the figure.\n\nThis has no effect for non-GUI (e.g., PS) backends.\n\n"}, {"name": "backend_bases.FigureManagerBase.show()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.show", "type": "backend_bases", "text": "\nFor GUI backends, show the figure window and redraw. For non-GUI backends,\nraise an exception, unless running headless (i.e. on Linux with an unset\nDISPLAY); this exception is converted to a warning in `Figure.show`.\n\n"}, {"name": "backend_bases.get_registered_canvas_class()", "path": "backend_bases_api#matplotlib.backend_bases.get_registered_canvas_class", "type": "backend_bases", "text": "\nReturn the registered default canvas for given file format. Handles deferred\nimport of required backend.\n\n"}, {"name": "backend_bases.GraphicsContextBase", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase", "type": "backend_bases", "text": "\nBases: `object`\n\nAn abstract base class that provides color, line styles, etc.\n\nCopy properties from gc to self.\n\nReturn the alpha value used for blending - not supported on all backends.\n\nReturn whether the object should try to do antialiased rendering.\n\nReturn the `CapStyle`.\n\nReturn the clip path in the form (path, transform), where path is a `Path`\ninstance, and transform is an affine transform to apply to the path before\nclipping.\n\nReturn the clip rectangle as a `Bbox` instance.\n\nReturn the dash style as an (offset, dash-list) pair.\n\nThe dash list is a even-length list that gives the ink on, ink off in points.\nSee p. 107 of to PostScript blue book for more info.\n\nDefault value is (None, None).\n\nReturn whether the value given by get_alpha() should be used to override any\nother alpha-channel values.\n\nReturn the object identifier if one is set, None otherwise.\n\nGet the current hatch style.\n\nGet the hatch color.\n\nGet the hatch linewidth.\n\nReturn a `Path` for the current hatch.\n\nReturn the `JoinStyle`.\n\nReturn the line width in points.\n\nReturn a tuple of three or four floats from 0-1.\n\nReturn the sketch parameters for the artist.\n\nA 3-tuple with the following elements:\n\nMay return `None` if no sketch parameters were set.\n\nReturn the snap setting, which can be:\n\nReturn a url if one is set, None otherwise.\n\nRestore the graphics context from the stack - needed only for backends that\nsave graphics contexts on a stack.\n\nSet the alpha value used for blending - not supported on all backends.\n\nIf `alpha=None` (the default), the alpha components of the foreground and fill\ncolors will be used to set their respective transparencies (where applicable);\notherwise, `alpha` will override them.\n\nSet whether object should be drawn with antialiased rendering.\n\nSet how to draw endpoints of lines.\n\nSet the clip path to a `TransformedPath` or None.\n\nSet the clip rectangle to a `Bbox` or None.\n\nSet the dash style for the gc.\n\nThe offset (usually 0).\n\nThe on-off sequence as points. None specifies a solid line.\n\nSee p. 107 of to PostScript blue book for more info.\n\nSet the foreground color.\n\nIf fg is known to be an `(r, g, b, a)` tuple, isRGBA can be set to True to\nimprove performance.\n\nSet the id.\n\nSet the hatch style (for fills).\n\nSet the hatch color.\n\nSet how to draw connections between line segments.\n\nSet the linewidth in points.\n\nSet the sketch parameters.\n\nThe amplitude of the wiggle perpendicular to the source line, in pixels. If\nscale is `None`, or not provided, no sketch filter will be provided.\n\nThe length of the wiggle along the line, in pixels.\n\nThe scale factor by which the length is shrunken or expanded.\n\nSet the snap setting which may be:\n\nSet the url for links in compatible backends.\n\n"}, {"name": "backend_bases.GraphicsContextBase.copy_properties()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.copy_properties", "type": "backend_bases", "text": "\nCopy properties from gc to self.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_alpha()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_alpha", "type": "backend_bases", "text": "\nReturn the alpha value used for blending - not supported on all backends.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_antialiased()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_antialiased", "type": "backend_bases", "text": "\nReturn whether the object should try to do antialiased rendering.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_capstyle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_capstyle", "type": "backend_bases", "text": "\nReturn the `CapStyle`.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_clip_path()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_clip_path", "type": "backend_bases", "text": "\nReturn the clip path in the form (path, transform), where path is a `Path`\ninstance, and transform is an affine transform to apply to the path before\nclipping.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_clip_rectangle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_clip_rectangle", "type": "backend_bases", "text": "\nReturn the clip rectangle as a `Bbox` instance.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_dashes()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_dashes", "type": "backend_bases", "text": "\nReturn the dash style as an (offset, dash-list) pair.\n\nThe dash list is a even-length list that gives the ink on, ink off in points.\nSee p. 107 of to PostScript blue book for more info.\n\nDefault value is (None, None).\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_forced_alpha()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_forced_alpha", "type": "backend_bases", "text": "\nReturn whether the value given by get_alpha() should be used to override any\nother alpha-channel values.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_gid()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_gid", "type": "backend_bases", "text": "\nReturn the object identifier if one is set, None otherwise.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_hatch()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_hatch", "type": "backend_bases", "text": "\nGet the current hatch style.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_hatch_color()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_hatch_color", "type": "backend_bases", "text": "\nGet the hatch color.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_hatch_linewidth()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_hatch_linewidth", "type": "backend_bases", "text": "\nGet the hatch linewidth.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_hatch_path()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_hatch_path", "type": "backend_bases", "text": "\nReturn a `Path` for the current hatch.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_joinstyle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_joinstyle", "type": "backend_bases", "text": "\nReturn the `JoinStyle`.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_linewidth()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_linewidth", "type": "backend_bases", "text": "\nReturn the line width in points.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_rgb()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_rgb", "type": "backend_bases", "text": "\nReturn a tuple of three or four floats from 0-1.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_sketch_params()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_sketch_params", "type": "backend_bases", "text": "\nReturn the sketch parameters for the artist.\n\nA 3-tuple with the following elements:\n\nMay return `None` if no sketch parameters were set.\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_snap()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_snap", "type": "backend_bases", "text": "\nReturn the snap setting, which can be:\n\n"}, {"name": "backend_bases.GraphicsContextBase.get_url()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_url", "type": "backend_bases", "text": "\nReturn a url if one is set, None otherwise.\n\n"}, {"name": "backend_bases.GraphicsContextBase.restore()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.restore", "type": "backend_bases", "text": "\nRestore the graphics context from the stack - needed only for backends that\nsave graphics contexts on a stack.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_alpha()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_alpha", "type": "backend_bases", "text": "\nSet the alpha value used for blending - not supported on all backends.\n\nIf `alpha=None` (the default), the alpha components of the foreground and fill\ncolors will be used to set their respective transparencies (where applicable);\notherwise, `alpha` will override them.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_antialiased()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_antialiased", "type": "backend_bases", "text": "\nSet whether object should be drawn with antialiased rendering.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_capstyle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_capstyle", "type": "backend_bases", "text": "\nSet how to draw endpoints of lines.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_clip_path()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_clip_path", "type": "backend_bases", "text": "\nSet the clip path to a `TransformedPath` or None.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_clip_rectangle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_clip_rectangle", "type": "backend_bases", "text": "\nSet the clip rectangle to a `Bbox` or None.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_dashes()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_dashes", "type": "backend_bases", "text": "\nSet the dash style for the gc.\n\nThe offset (usually 0).\n\nThe on-off sequence as points. None specifies a solid line.\n\nSee p. 107 of to PostScript blue book for more info.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_foreground()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_foreground", "type": "backend_bases", "text": "\nSet the foreground color.\n\nIf fg is known to be an `(r, g, b, a)` tuple, isRGBA can be set to True to\nimprove performance.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_gid()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_gid", "type": "backend_bases", "text": "\nSet the id.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_hatch()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_hatch", "type": "backend_bases", "text": "\nSet the hatch style (for fills).\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_hatch_color()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_hatch_color", "type": "backend_bases", "text": "\nSet the hatch color.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_joinstyle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_joinstyle", "type": "backend_bases", "text": "\nSet how to draw connections between line segments.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_linewidth()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_linewidth", "type": "backend_bases", "text": "\nSet the linewidth in points.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_sketch_params()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_sketch_params", "type": "backend_bases", "text": "\nSet the sketch parameters.\n\nThe amplitude of the wiggle perpendicular to the source line, in pixels. If\nscale is `None`, or not provided, no sketch filter will be provided.\n\nThe length of the wiggle along the line, in pixels.\n\nThe scale factor by which the length is shrunken or expanded.\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_snap()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_snap", "type": "backend_bases", "text": "\nSet the snap setting which may be:\n\n"}, {"name": "backend_bases.GraphicsContextBase.set_url()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_url", "type": "backend_bases", "text": "\nSet the url for links in compatible backends.\n\n"}, {"name": "backend_bases.key_press_handler()", "path": "backend_bases_api#matplotlib.backend_bases.key_press_handler", "type": "backend_bases", "text": "\nImplement the default Matplotlib key bindings for the canvas and toolbar\ndescribed at Navigation keyboard shortcuts.\n\nA key press/release event.\n\nThe backend-specific canvas instance. This parameter is kept for back-\ncompatibility, but, if set, should always be equal to `event.canvas`.\n\nThe navigation cursor toolbar. This parameter is kept for back-compatibility,\nbut, if set, should always be equal to `event.canvas.toolbar`.\n\n"}, {"name": "backend_bases.KeyEvent", "path": "backend_bases_api#matplotlib.backend_bases.KeyEvent", "type": "backend_bases", "text": "\nBases: `matplotlib.backend_bases.LocationEvent`\n\nA key event (key press, key release).\n\nA KeyEvent has a number of special attributes in addition to those defined by\nthe parent `Event` and `LocationEvent` classes.\n\nModifier keys will be prefixed to the pressed key and will be in the order\n\"ctrl\", \"alt\", \"super\". The exception to this rule is when the pressed key is\nitself a modifier key, therefore \"ctrl+alt\" and \"alt+control\" can both be\nvalid key values.\n\nThe key(s) pressed. Could be None, a single case sensitive Unicode character\n(\"g\", \"G\", \"#\", etc.), a special key (\"control\", \"shift\", \"f1\", \"up\", etc.) or\na combination of the above (e.g., \"ctrl+alt+g\", \"ctrl+alt+G\").\n\n"}, {"name": "backend_bases.LocationEvent", "path": "backend_bases_api#matplotlib.backend_bases.LocationEvent", "type": "backend_bases", "text": "\nBases: `matplotlib.backend_bases.Event`\n\nAn event that has a screen location.\n\nA LocationEvent has a number of special attributes in addition to those\ndefined by the parent `Event` class.\n\nEvent location in pixels from bottom left of canvas.\n\nThe `Axes` instance over which the mouse is, if any.\n\nData coordinates of the mouse within inaxes, or None if the mouse is not over\nan Axes.\n\n"}, {"name": "backend_bases.LocationEvent.lastevent", "path": "backend_bases_api#matplotlib.backend_bases.LocationEvent.lastevent", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.MouseButton", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton", "type": "backend_bases", "text": "\nBases: `enum.IntEnum`\n\nAn enumeration.\n\n"}, {"name": "backend_bases.MouseButton.BACK", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton.BACK", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.MouseButton.FORWARD", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton.FORWARD", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.MouseButton.LEFT", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton.LEFT", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.MouseButton.MIDDLE", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton.MIDDLE", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.MouseButton.RIGHT", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton.RIGHT", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.MouseEvent", "path": "backend_bases_api#matplotlib.backend_bases.MouseEvent", "type": "backend_bases", "text": "\nBases: `matplotlib.backend_bases.LocationEvent`\n\nA mouse event ('button_press_event', 'button_release_event', 'scroll_event',\n'motion_notify_event').\n\nA MouseEvent has a number of special attributes in addition to those defined\nby the parent `Event` and `LocationEvent` classes.\n\nThe button pressed. 'up' and 'down' are used for scroll events. Note that LEFT\nand RIGHT actually refer to the \"primary\" and \"secondary\" buttons, i.e. if the\nuser inverts their left and right buttons (\"left-handed setting\") then the\nLEFT button will be the one physically on the right.\n\nThe key pressed when the mouse event triggered, e.g. 'shift'. See `KeyEvent`.\n\nWarning\n\nThis key is currently obtained from the last 'key_press_event' or\n'key_release_event' that occurred within the canvas. Thus, if the last change\nof keyboard state occurred while the canvas did not have focus, this attribute\nwill be wrong.\n\nThe number of scroll steps (positive for 'up', negative for 'down'). This\napplies only to 'scroll_event' and defaults to 0 otherwise.\n\nWhether the event is a double-click. This applies only to 'button_press_event'\nand is False otherwise. In particular, it's not used in\n'button_release_event'.\n\n"}, {"name": "backend_bases.NavigationToolbar2", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2", "type": "backend_bases", "text": "\nBases: `object`\n\nBase class for the navigation cursor, version 2.\n\nBackends must implement a canvas that handles connections for\n'button_press_event' and 'button_release_event'. See\n`FigureCanvasBase.mpl_connect()` for more information.\n\nThey must also define\n\nsave the current figure\n\ndraw the zoom to rect \"rubberband\" rectangle\n\ndisplay message\n\nyou can change the history back / forward buttons to indicate disabled /\nenabled state.\n\nand override `__init__` to set up the toolbar -- without forgetting to call\nthe base-class init. Typically, `__init__` needs to set up toolbar buttons\nconnected to the `home`, `back`, `forward`, `pan`, `zoom`, and `save_figure`\nmethods and using standard icons in the \"images\" subdirectory of the data\npath.\n\nThat's it, we'll do the rest!\n\nMove back up the view lim stack.\n\nFor convenience of being directly connected as a GUI callback, which often get\npassed additional parameters, this method accepts arbitrary parameters, but\ndoes not use them.\n\nCallback for dragging in pan/zoom mode.\n\nCallback for dragging in zoom mode.\n\nDraw a rectangle rubberband to indicate zoom limits.\n\nNote that it is not guaranteed that `x0 <= x1` and `y0 <= y1`.\n\nMove forward in the view lim stack.\n\nFor convenience of being directly connected as a GUI callback, which often get\npassed additional parameters, this method accepts arbitrary parameters, but\ndoes not use them.\n\nRestore the original view.\n\nFor convenience of being directly connected as a GUI callback, which often get\npassed additional parameters, this method accepts arbitrary parameters, but\ndoes not use them.\n\nToggle the pan/zoom tool.\n\nPan with left button, zoom with right.\n\nCallback for mouse button press in pan/zoom mode.\n\nCallback for mouse button press in zoom to rect mode.\n\nPush the current view limits and position onto the stack.\n\nCallback for mouse button release in pan/zoom mode.\n\nCallback for mouse button release in zoom to rect mode.\n\nRemove the rubberband.\n\nSave the current figure.\n\n[Deprecated] Set the current cursor to one of the `Cursors` enums values.\n\nIf required by the backend, this method should trigger an update in the\nbackend event loop after the cursor is set, as this method may be called e.g.\nbefore a long-running task during which the GUI is not updated.\n\nDeprecated since version 3.5.\n\nEnable or disable the back/forward button.\n\nDisplay a message on toolbar or in status bar.\n\nReset the axes stack.\n\nToggle zoom to rect mode.\n\n"}, {"name": "backend_bases.NavigationToolbar2.back()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.back", "type": "backend_bases", "text": "\nMove back up the view lim stack.\n\nFor convenience of being directly connected as a GUI callback, which often get\npassed additional parameters, this method accepts arbitrary parameters, but\ndoes not use them.\n\n"}, {"name": "backend_bases.NavigationToolbar2.configure_subplots()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.configure_subplots", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.NavigationToolbar2.drag_pan()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.drag_pan", "type": "backend_bases", "text": "\nCallback for dragging in pan/zoom mode.\n\n"}, {"name": "backend_bases.NavigationToolbar2.drag_zoom()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.drag_zoom", "type": "backend_bases", "text": "\nCallback for dragging in zoom mode.\n\n"}, {"name": "backend_bases.NavigationToolbar2.draw_rubberband()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.draw_rubberband", "type": "backend_bases", "text": "\nDraw a rectangle rubberband to indicate zoom limits.\n\nNote that it is not guaranteed that `x0 <= x1` and `y0 <= y1`.\n\n"}, {"name": "backend_bases.NavigationToolbar2.forward()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.forward", "type": "backend_bases", "text": "\nMove forward in the view lim stack.\n\nFor convenience of being directly connected as a GUI callback, which often get\npassed additional parameters, this method accepts arbitrary parameters, but\ndoes not use them.\n\n"}, {"name": "backend_bases.NavigationToolbar2.home()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.home", "type": "backend_bases", "text": "\nRestore the original view.\n\nFor convenience of being directly connected as a GUI callback, which often get\npassed additional parameters, this method accepts arbitrary parameters, but\ndoes not use them.\n\n"}, {"name": "backend_bases.NavigationToolbar2.mouse_move()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.mouse_move", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.NavigationToolbar2.pan()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.pan", "type": "backend_bases", "text": "\nToggle the pan/zoom tool.\n\nPan with left button, zoom with right.\n\n"}, {"name": "backend_bases.NavigationToolbar2.press_pan()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.press_pan", "type": "backend_bases", "text": "\nCallback for mouse button press in pan/zoom mode.\n\n"}, {"name": "backend_bases.NavigationToolbar2.press_zoom()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.press_zoom", "type": "backend_bases", "text": "\nCallback for mouse button press in zoom to rect mode.\n\n"}, {"name": "backend_bases.NavigationToolbar2.push_current()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.push_current", "type": "backend_bases", "text": "\nPush the current view limits and position onto the stack.\n\n"}, {"name": "backend_bases.NavigationToolbar2.release_pan()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.release_pan", "type": "backend_bases", "text": "\nCallback for mouse button release in pan/zoom mode.\n\n"}, {"name": "backend_bases.NavigationToolbar2.release_zoom()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.release_zoom", "type": "backend_bases", "text": "\nCallback for mouse button release in zoom to rect mode.\n\n"}, {"name": "backend_bases.NavigationToolbar2.remove_rubberband()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.remove_rubberband", "type": "backend_bases", "text": "\nRemove the rubberband.\n\n"}, {"name": "backend_bases.NavigationToolbar2.save_figure()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.save_figure", "type": "backend_bases", "text": "\nSave the current figure.\n\n"}, {"name": "backend_bases.NavigationToolbar2.set_cursor()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.set_cursor", "type": "backend_bases", "text": "\n[Deprecated] Set the current cursor to one of the `Cursors` enums values.\n\nIf required by the backend, this method should trigger an update in the\nbackend event loop after the cursor is set, as this method may be called e.g.\nbefore a long-running task during which the GUI is not updated.\n\nDeprecated since version 3.5.\n\n"}, {"name": "backend_bases.NavigationToolbar2.set_history_buttons()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.set_history_buttons", "type": "backend_bases", "text": "\nEnable or disable the back/forward button.\n\n"}, {"name": "backend_bases.NavigationToolbar2.set_message()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.set_message", "type": "backend_bases", "text": "\nDisplay a message on toolbar or in status bar.\n\n"}, {"name": "backend_bases.NavigationToolbar2.toolitems", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.toolitems", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.NavigationToolbar2.update()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.update", "type": "backend_bases", "text": "\nReset the axes stack.\n\n"}, {"name": "backend_bases.NavigationToolbar2.zoom()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.zoom", "type": "backend_bases", "text": "\nToggle zoom to rect mode.\n\n"}, {"name": "backend_bases.NonGuiException", "path": "backend_bases_api#matplotlib.backend_bases.NonGuiException", "type": "backend_bases", "text": "\nBases: `Exception`\n\nRaised when trying show a figure in a non-GUI backend.\n\n"}, {"name": "backend_bases.PickEvent", "path": "backend_bases_api#matplotlib.backend_bases.PickEvent", "type": "backend_bases", "text": "\nBases: `matplotlib.backend_bases.Event`\n\nA pick event.\n\nThis event is fired when the user picks a location on the canvas sufficiently\nclose to an artist that has been made pickable with `Artist.set_picker`.\n\nA PickEvent has a number of special attributes in addition to those defined by\nthe parent `Event` class.\n\nBind a function `on_pick()` to pick events, that prints the coordinates of the\npicked data point:\n\nThe mouse event that generated the pick.\n\nThe picked artist. Note that artists are not pickable by default (see\n`Artist.set_picker`).\n\nAdditional attributes may be present depending on the type of the picked\nobject; e.g., a `Line2D` pick may define different extra attributes than a\n`PatchCollection` pick.\n\n"}, {"name": "backend_bases.register_backend()", "path": "backend_bases_api#matplotlib.backend_bases.register_backend", "type": "backend_bases", "text": "\nRegister a backend for saving to a given file format.\n\nFile extension\n\nBackend for handling file output\n\nDescription of the file type.\n\n"}, {"name": "backend_bases.RendererBase", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase", "type": "backend_bases", "text": "\nBases: `object`\n\nAn abstract base class to handle drawing/rendering operations.\n\nThe following methods must be implemented in the backend for full\nfunctionality (though just implementing `draw_path()` alone would give a\nhighly capable backend):\n\nThe following methods should be implemented in the backend for optimization\nreasons:\n\nClose a grouping element with label s.\n\nOnly used by the SVG renderer.\n\nDraw a Gouraud-shaded triangle.\n\nThe graphics context.\n\nArray of (x, y) points for the triangle.\n\nRGBA colors for each point of the triangle.\n\nAn affine transform to apply to the points.\n\nDraw a series of Gouraud triangles.\n\nArray of N (x, y) points for the triangles.\n\nArray of N RGBA colors for each point of the triangles.\n\nAn affine transform to apply to the points.\n\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\nDraw a marker at each of path's vertices (excluding control points).\n\nThis provides a fallback implementation of draw_markers that makes multiple\ncalls to `draw_path()`. Some backends may want to override this method in\norder to draw the marker only once and reuse it multiple times.\n\nThe graphics context.\n\nAn affine transform applied to the marker.\n\nAn affine transform applied to the path.\n\nDraw a `Path` instance using the given affine transform.\n\nDraw a collection of paths selecting drawing properties from the lists\nfacecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a\nlist of offsets to apply to each of the paths. The offsets in offsets are\nfirst transformed by offsetTrans before being applied.\n\noffset_position is unused now, but the argument is kept for backwards\ncompatibility.\n\nThis provides a fallback implementation of `draw_path_collection()` that makes\nmultiple calls to `draw_path()`. Some backends may want to override this in\norder to render each set of path data only once, and then reference that path\nmultiple times with the different offsets, colors, styles etc. The generator\nmethods `_iter_collection_raw_paths()` and `_iter_collection()` are provided\nto help with (and standardize) the implementation across backends. It is\nhighly recommended to use those generators, so that changes to the behavior of\n`draw_path_collection()` can be made globally.\n\nFallback implementation of `draw_quad_mesh()` that generates paths and then\ncalls `draw_path_collection()`.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nReturn whether y values increase from top to bottom.\n\nNote that this only affects drawing of texts and images.\n\nReturn the canvas width and height in display coords.\n\nGet the factor by which to magnify images passed to `draw_image()`. Allows a\nbackend to have images at a different resolution to other artists.\n\nReturn the `TexManager` instance.\n\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\nReturn an instance of a `GraphicsContextBase`.\n\nOpen a grouping element with label s and gid (if set) as id.\n\nOnly used by the SVG renderer.\n\nReturn whether image composition by Matplotlib should be skipped.\n\nRaster backends should usually return False (letting the C-level rasterizer\ntake care of image composition); vector backends should usually return `not\nrcParams[\"image.composite_image\"]`.\n\nReturn whether arbitrary affine transformations in `draw_image()` are\nsupported (True for most vector backends).\n\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\nSwitch to a temporary renderer for image filtering effects.\n\nCurrently only supported by the agg renderer.\n\nSwitch to the raster renderer.\n\nUsed by `MixedModeRenderer`.\n\nSwitch back to the original renderer. The contents of the temporary renderer\nis processed with the filter_func and is drawn on the original renderer as an\nimage.\n\nCurrently only supported by the agg renderer.\n\nSwitch back to the vector renderer and draw the contents of the raster\nrenderer as an image on the vector renderer.\n\nUsed by `MixedModeRenderer`.\n\n"}, {"name": "backend_bases.RendererBase.close_group()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.close_group", "type": "backend_bases", "text": "\nClose a grouping element with label s.\n\nOnly used by the SVG renderer.\n\n"}, {"name": "backend_bases.RendererBase.draw_gouraud_triangle()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_gouraud_triangle", "type": "backend_bases", "text": "\nDraw a Gouraud-shaded triangle.\n\nThe graphics context.\n\nArray of (x, y) points for the triangle.\n\nRGBA colors for each point of the triangle.\n\nAn affine transform to apply to the points.\n\n"}, {"name": "backend_bases.RendererBase.draw_gouraud_triangles()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_gouraud_triangles", "type": "backend_bases", "text": "\nDraw a series of Gouraud triangles.\n\nArray of N (x, y) points for the triangles.\n\nArray of N RGBA colors for each point of the triangles.\n\nAn affine transform to apply to the points.\n\n"}, {"name": "backend_bases.RendererBase.draw_image()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_image", "type": "backend_bases", "text": "\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\n"}, {"name": "backend_bases.RendererBase.draw_markers()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_markers", "type": "backend_bases", "text": "\nDraw a marker at each of path's vertices (excluding control points).\n\nThis provides a fallback implementation of draw_markers that makes multiple\ncalls to `draw_path()`. Some backends may want to override this method in\norder to draw the marker only once and reuse it multiple times.\n\nThe graphics context.\n\nAn affine transform applied to the marker.\n\nAn affine transform applied to the path.\n\n"}, {"name": "backend_bases.RendererBase.draw_path()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_path", "type": "backend_bases", "text": "\nDraw a `Path` instance using the given affine transform.\n\n"}, {"name": "backend_bases.RendererBase.draw_path_collection()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_path_collection", "type": "backend_bases", "text": "\nDraw a collection of paths selecting drawing properties from the lists\nfacecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a\nlist of offsets to apply to each of the paths. The offsets in offsets are\nfirst transformed by offsetTrans before being applied.\n\noffset_position is unused now, but the argument is kept for backwards\ncompatibility.\n\nThis provides a fallback implementation of `draw_path_collection()` that makes\nmultiple calls to `draw_path()`. Some backends may want to override this in\norder to render each set of path data only once, and then reference that path\nmultiple times with the different offsets, colors, styles etc. The generator\nmethods `_iter_collection_raw_paths()` and `_iter_collection()` are provided\nto help with (and standardize) the implementation across backends. It is\nhighly recommended to use those generators, so that changes to the behavior of\n`draw_path_collection()` can be made globally.\n\n"}, {"name": "backend_bases.RendererBase.draw_quad_mesh()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_quad_mesh", "type": "backend_bases", "text": "\nFallback implementation of `draw_quad_mesh()` that generates paths and then\ncalls `draw_path_collection()`.\n\n"}, {"name": "backend_bases.RendererBase.draw_tex()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_tex", "type": "backend_bases", "text": "\n\n"}, {"name": "backend_bases.RendererBase.draw_text()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_text", "type": "backend_bases", "text": "\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\n"}, {"name": "backend_bases.RendererBase.flipy()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.flipy", "type": "backend_bases", "text": "\nReturn whether y values increase from top to bottom.\n\nNote that this only affects drawing of texts and images.\n\n"}, {"name": "backend_bases.RendererBase.get_canvas_width_height()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.get_canvas_width_height", "type": "backend_bases", "text": "\nReturn the canvas width and height in display coords.\n\n"}, {"name": "backend_bases.RendererBase.get_image_magnification()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.get_image_magnification", "type": "backend_bases", "text": "\nGet the factor by which to magnify images passed to `draw_image()`. Allows a\nbackend to have images at a different resolution to other artists.\n\n"}, {"name": "backend_bases.RendererBase.get_texmanager()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.get_texmanager", "type": "backend_bases", "text": "\nReturn the `TexManager` instance.\n\n"}, {"name": "backend_bases.RendererBase.get_text_width_height_descent()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.get_text_width_height_descent", "type": "backend_bases", "text": "\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\n"}, {"name": "backend_bases.RendererBase.new_gc()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.new_gc", "type": "backend_bases", "text": "\nReturn an instance of a `GraphicsContextBase`.\n\n"}, {"name": "backend_bases.RendererBase.open_group()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.open_group", "type": "backend_bases", "text": "\nOpen a grouping element with label s and gid (if set) as id.\n\nOnly used by the SVG renderer.\n\n"}, {"name": "backend_bases.RendererBase.option_image_nocomposite()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.option_image_nocomposite", "type": "backend_bases", "text": "\nReturn whether image composition by Matplotlib should be skipped.\n\nRaster backends should usually return False (letting the C-level rasterizer\ntake care of image composition); vector backends should usually return `not\nrcParams[\"image.composite_image\"]`.\n\n"}, {"name": "backend_bases.RendererBase.option_scale_image()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.option_scale_image", "type": "backend_bases", "text": "\nReturn whether arbitrary affine transformations in `draw_image()` are\nsupported (True for most vector backends).\n\n"}, {"name": "backend_bases.RendererBase.points_to_pixels()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.points_to_pixels", "type": "backend_bases", "text": "\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\n"}, {"name": "backend_bases.RendererBase.start_filter()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.start_filter", "type": "backend_bases", "text": "\nSwitch to a temporary renderer for image filtering effects.\n\nCurrently only supported by the agg renderer.\n\n"}, {"name": "backend_bases.RendererBase.start_rasterizing()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.start_rasterizing", "type": "backend_bases", "text": "\nSwitch to the raster renderer.\n\nUsed by `MixedModeRenderer`.\n\n"}, {"name": "backend_bases.RendererBase.stop_filter()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.stop_filter", "type": "backend_bases", "text": "\nSwitch back to the original renderer. The contents of the temporary renderer\nis processed with the filter_func and is drawn on the original renderer as an\nimage.\n\nCurrently only supported by the agg renderer.\n\n"}, {"name": "backend_bases.RendererBase.stop_rasterizing()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.stop_rasterizing", "type": "backend_bases", "text": "\nSwitch back to the vector renderer and draw the contents of the raster\nrenderer as an image on the vector renderer.\n\nUsed by `MixedModeRenderer`.\n\n"}, {"name": "backend_bases.ResizeEvent", "path": "backend_bases_api#matplotlib.backend_bases.ResizeEvent", "type": "backend_bases", "text": "\nBases: `matplotlib.backend_bases.Event`\n\nAn event triggered by a canvas resize.\n\nA ResizeEvent has a number of special attributes in addition to those defined\nby the parent `Event` class.\n\nWidth of the canvas in pixels.\n\nHeight of the canvas in pixels.\n\n"}, {"name": "backend_bases.ShowBase", "path": "backend_bases_api#matplotlib.backend_bases.ShowBase", "type": "backend_bases", "text": "\nBases: `matplotlib.backend_bases._Backend`\n\nSimple base class to generate a `show()` function in backends.\n\nSubclass must override `mainloop()` method.\n\n"}, {"name": "backend_bases.TimerBase", "path": "backend_bases_api#matplotlib.backend_bases.TimerBase", "type": "backend_bases", "text": "\nBases: `object`\n\nA base class for providing timer events, useful for things animations.\nBackends need to implement a few specific methods in order to use their own\ntiming mechanisms so that the timer events are integrated into their event\nloops.\n\nSubclasses must override the following methods:\n\nSubclasses may additionally override the following methods:\n\nThe time between timer events in milliseconds. Will be stored as\n`timer.interval`.\n\nList of (func, args, kwargs) tuples that will be called upon timer events.\nThis list is accessible as `timer.callbacks` and can be manipulated directly,\nor the functions `add_callback` and `remove_callback` can be used.\n\nRegister func to be called by timer when the event fires. Any additional\narguments provided will be passed to func.\n\nThis function returns func, which makes it possible to use it as a decorator.\n\nThe time between timer events, in milliseconds.\n\nRemove func from list of callbacks.\n\nargs and kwargs are optional and used to distinguish between copies of the\nsame function registered to be called with different arguments. This behavior\nis deprecated. In the future, `*args, **kwargs` won't be considered anymore;\nto keep a specific callback removable by itself, pass it to `add_callback` as\na `functools.partial` object.\n\nWhether this timer should stop after a single run.\n\nStart the timer object.\n\nTimer interval in milliseconds; overrides a previously set interval if\nprovided.\n\nStop the timer.\n\n"}, {"name": "backend_bases.TimerBase.add_callback()", "path": "backend_bases_api#matplotlib.backend_bases.TimerBase.add_callback", "type": "backend_bases", "text": "\nRegister func to be called by timer when the event fires. Any additional\narguments provided will be passed to func.\n\nThis function returns func, which makes it possible to use it as a decorator.\n\n"}, {"name": "backend_bases.TimerBase.remove_callback()", "path": "backend_bases_api#matplotlib.backend_bases.TimerBase.remove_callback", "type": "backend_bases", "text": "\nRemove func from list of callbacks.\n\nargs and kwargs are optional and used to distinguish between copies of the\nsame function registered to be called with different arguments. This behavior\nis deprecated. In the future, `*args, **kwargs` won't be considered anymore;\nto keep a specific callback removable by itself, pass it to `add_callback` as\na `functools.partial` object.\n\n"}, {"name": "backend_bases.TimerBase.start()", "path": "backend_bases_api#matplotlib.backend_bases.TimerBase.start", "type": "backend_bases", "text": "\nStart the timer object.\n\nTimer interval in milliseconds; overrides a previously set interval if\nprovided.\n\n"}, {"name": "backend_bases.TimerBase.stop()", "path": "backend_bases_api#matplotlib.backend_bases.TimerBase.stop", "type": "backend_bases", "text": "\nStop the timer.\n\n"}, {"name": "backend_bases.ToolContainerBase", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase", "type": "backend_bases", "text": "\nBases: `object`\n\nBase class for all tool containers, e.g. toolbars.\n\nThe tools with which this `ToolContainer` wants to communicate.\n\nAdd a tool to this container.\n\nThe tool to add, see `ToolManager.get_tool`.\n\nThe name of the group to add this tool to.\n\nThe position within the group to place this tool.\n\nAdd a toolitem to the container.\n\nThis method must be implemented per backend.\n\nThe callback associated with the button click event, must be exactly\n`self.trigger_tool(name)`.\n\nName of the tool to add, this gets used as the tool's ID and as the default\nlabel of the buttons.\n\nName of the group that this tool belongs to.\n\nPosition of the tool within its group, if -1 it goes at the end.\n\nFilename of the image for the button or `None`.\n\nDescription of the tool, used for the tooltips.\n\nRemove a toolitem from the `ToolContainer`.\n\nThis method must get implemented per backend.\n\nCalled when `ToolManager` emits a `tool_removed_event`.\n\nName of the tool to remove.\n\nDisplay a message on the toolbar.\n\nMessage text.\n\nToggle the toolitem without firing event.\n\nId of the tool to toggle.\n\nWhether to set this tool as toggled or not.\n\nTrigger the tool.\n\nName (id) of the tool triggered from within the container.\n\n"}, {"name": "backend_bases.ToolContainerBase.add_tool()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.add_tool", "type": "backend_bases", "text": "\nAdd a tool to this container.\n\nThe tool to add, see `ToolManager.get_tool`.\n\nThe name of the group to add this tool to.\n\nThe position within the group to place this tool.\n\n"}, {"name": "backend_bases.ToolContainerBase.add_toolitem()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.add_toolitem", "type": "backend_bases", "text": "\nAdd a toolitem to the container.\n\nThis method must be implemented per backend.\n\nThe callback associated with the button click event, must be exactly\n`self.trigger_tool(name)`.\n\nName of the tool to add, this gets used as the tool's ID and as the default\nlabel of the buttons.\n\nName of the group that this tool belongs to.\n\nPosition of the tool within its group, if -1 it goes at the end.\n\nFilename of the image for the button or `None`.\n\nDescription of the tool, used for the tooltips.\n\n"}, {"name": "backend_bases.ToolContainerBase.remove_toolitem()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.remove_toolitem", "type": "backend_bases", "text": "\nRemove a toolitem from the `ToolContainer`.\n\nThis method must get implemented per backend.\n\nCalled when `ToolManager` emits a `tool_removed_event`.\n\nName of the tool to remove.\n\n"}, {"name": "backend_bases.ToolContainerBase.set_message()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.set_message", "type": "backend_bases", "text": "\nDisplay a message on the toolbar.\n\nMessage text.\n\n"}, {"name": "backend_bases.ToolContainerBase.toggle_toolitem()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.toggle_toolitem", "type": "backend_bases", "text": "\nToggle the toolitem without firing event.\n\nId of the tool to toggle.\n\nWhether to set this tool as toggled or not.\n\n"}, {"name": "backend_bases.ToolContainerBase.trigger_tool()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.trigger_tool", "type": "backend_bases", "text": "\nTrigger the tool.\n\nName (id) of the tool triggered from within the container.\n\n"}, {"name": "backend_cairo", "path": "backend_cairo_api", "type": "backend_cairo", "text": "\nSteve Chaplin and others\n\nThis backend depends on cairocffi or pycairo.\n\nalias of `matplotlib.backends.backend_cairo.FigureCanvasCairo`\n\nBases: `matplotlib.backend_bases.FigureCanvasBase`\n\nBases: `matplotlib.backend_bases.GraphicsContextBase`\n\nReturn a tuple of three or four floats from 0-1.\n\nRestore the graphics context from the stack - needed only for backends that\nsave graphics contexts on a stack.\n\nSet the alpha value used for blending - not supported on all backends.\n\nIf `alpha=None` (the default), the alpha components of the foreground and fill\ncolors will be used to set their respective transparencies (where applicable);\notherwise, `alpha` will override them.\n\nSet whether object should be drawn with antialiased rendering.\n\nSet how to draw endpoints of lines.\n\nSet the clip path to a `TransformedPath` or None.\n\nSet the clip rectangle to a `Bbox` or None.\n\nSet the dash style for the gc.\n\nThe offset (usually 0).\n\nThe on-off sequence as points. None specifies a solid line.\n\nSee p. 107 of to PostScript blue book for more info.\n\nSet the foreground color.\n\nIf fg is known to be an `(r, g, b, a)` tuple, isRGBA can be set to True to\nimprove performance.\n\nSet how to draw connections between line segments.\n\nSet the linewidth in points.\n\nBases: `matplotlib.backend_bases.RendererBase`\n\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\nDraw a marker at each of path's vertices (excluding control points).\n\nThis provides a fallback implementation of draw_markers that makes multiple\ncalls to `draw_path()`. Some backends may want to override this method in\norder to draw the marker only once and reuse it multiple times.\n\nThe graphics context.\n\nAn affine transform applied to the marker.\n\nAn affine transform applied to the path.\n\nDraw a `Path` instance using the given affine transform.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nReturn the canvas width and height in display coords.\n\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\nReturn an instance of a `GraphicsContextBase`.\n\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\n"}, {"name": "backend_gtk3agg, backend_gtk3cairo", "path": "backend_gtk3_api", "type": "backend_gtk3agg, backend_gtk3cairo", "text": "\nNOTE These backends are not documented here, to avoid adding a dependency to\nbuilding the docs.\n\n"}, {"name": "backend_gtk4agg, backend_gtk4cairo", "path": "backend_gtk4_api", "type": "backend_gtk4agg, backend_gtk4cairo", "text": "\nNOTE These backends are not documented here, to avoid adding a dependency to\nbuilding the docs.\n\n"}, {"name": "backend_managers", "path": "backend_managers_api", "type": "backend_managers", "text": "\nBases: `object`\n\nEvent for tool manipulation (add/remove).\n\nBases: `object`\n\nManager for actions triggered by user interactions (key press, toolbar clicks,\n...) on a Figure.\n\nFigure that holds the canvas.\n\n`LockDraw` object to know if the `canvas` key_press_event is locked.\n\n`LockDraw` object to know if the message is available to write.\n\nCurrently toggled tools.\n\nAdd tool to `ToolManager`.\n\nIf successful, adds a new event `tool_trigger_{name}` where `{name}` is the\nname of the tool; the event is fired every time the tool is triggered.\n\nName of the tool, treated as the ID, has to be unique.\n\nReference to find the class of the Tool to added.\n\nSee also\n\nThe base class for tools.\n\nargs and kwargs get passed directly to the tools constructor.\n\nCanvas managed by FigureManager.\n\nFigure that holds the canvas.\n\nReturn the tool object with the given name.\n\nFor convenience, this passes tool objects through.\n\nName of the tool, or the tool itself.\n\nWhether a warning should be emitted it no tool with the given name exists.\n\nThe tool or None if no tool with the given name exists.\n\nReturn the keymap associated with the specified tool.\n\nName of the Tool.\n\nList of keys associated with the tool.\n\nEmit a `ToolManagerMessageEvent`.\n\nRemove tool named name.\n\nName of the tool.\n\nBind the given figure to the tools.\n\nForce tools to update figure.\n\nConnect event with string s to func.\n\nThe name of the event. The following events are recognized:\n\nFor every tool added a new event is created\n\nCallback function for the toolmanager event with signature:\n\nThe callback id for the connection. This can be used in\n`toolmanager_disconnect`.\n\nDisconnect callback id cid.\n\nExample usage:\n\nA dict mapping tool name -> controlled tool.\n\nTrigger a tool and emit the `tool_trigger_{name}` event.\n\nName of the tool.\n\nObject that wishes to trigger the tool.\n\nOriginal Canvas event or None.\n\nExtra data to pass to the tool when triggering.\n\nSet the keymap to associate with the specified tool.\n\nName of the Tool.\n\nKeys to associate with the tool.\n\nBases: `object`\n\nEvent carrying messages from toolmanager.\n\nMessages usually get displayed to the user by the toolbar.\n\nBases: `matplotlib.backend_managers.ToolEvent`\n\nEvent to inform that a tool has been triggered.\n\n"}, {"name": "backend_managers.ToolEvent", "path": "backend_managers_api#matplotlib.backend_managers.ToolEvent", "type": "backend_managers", "text": "\nBases: `object`\n\nEvent for tool manipulation (add/remove).\n\n"}, {"name": "backend_managers.ToolManager", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager", "type": "backend_managers", "text": "\nBases: `object`\n\nManager for actions triggered by user interactions (key press, toolbar clicks,\n...) on a Figure.\n\nFigure that holds the canvas.\n\n`LockDraw` object to know if the `canvas` key_press_event is locked.\n\n`LockDraw` object to know if the message is available to write.\n\nCurrently toggled tools.\n\nAdd tool to `ToolManager`.\n\nIf successful, adds a new event `tool_trigger_{name}` where `{name}` is the\nname of the tool; the event is fired every time the tool is triggered.\n\nName of the tool, treated as the ID, has to be unique.\n\nReference to find the class of the Tool to added.\n\nSee also\n\nThe base class for tools.\n\nargs and kwargs get passed directly to the tools constructor.\n\nCanvas managed by FigureManager.\n\nFigure that holds the canvas.\n\nReturn the tool object with the given name.\n\nFor convenience, this passes tool objects through.\n\nName of the tool, or the tool itself.\n\nWhether a warning should be emitted it no tool with the given name exists.\n\nThe tool or None if no tool with the given name exists.\n\nReturn the keymap associated with the specified tool.\n\nName of the Tool.\n\nList of keys associated with the tool.\n\nEmit a `ToolManagerMessageEvent`.\n\nRemove tool named name.\n\nName of the tool.\n\nBind the given figure to the tools.\n\nForce tools to update figure.\n\nConnect event with string s to func.\n\nThe name of the event. The following events are recognized:\n\nFor every tool added a new event is created\n\nCallback function for the toolmanager event with signature:\n\nThe callback id for the connection. This can be used in\n`toolmanager_disconnect`.\n\nDisconnect callback id cid.\n\nExample usage:\n\nA dict mapping tool name -> controlled tool.\n\nTrigger a tool and emit the `tool_trigger_{name}` event.\n\nName of the tool.\n\nObject that wishes to trigger the tool.\n\nOriginal Canvas event or None.\n\nExtra data to pass to the tool when triggering.\n\nSet the keymap to associate with the specified tool.\n\nName of the Tool.\n\nKeys to associate with the tool.\n\n"}, {"name": "backend_managers.ToolManager.add_tool()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.add_tool", "type": "backend_managers", "text": "\nAdd tool to `ToolManager`.\n\nIf successful, adds a new event `tool_trigger_{name}` where `{name}` is the\nname of the tool; the event is fired every time the tool is triggered.\n\nName of the tool, treated as the ID, has to be unique.\n\nReference to find the class of the Tool to added.\n\nSee also\n\nThe base class for tools.\n\nargs and kwargs get passed directly to the tools constructor.\n\n"}, {"name": "backend_managers.ToolManager.get_tool()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.get_tool", "type": "backend_managers", "text": "\nReturn the tool object with the given name.\n\nFor convenience, this passes tool objects through.\n\nName of the tool, or the tool itself.\n\nWhether a warning should be emitted it no tool with the given name exists.\n\nThe tool or None if no tool with the given name exists.\n\n"}, {"name": "backend_managers.ToolManager.get_tool_keymap()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.get_tool_keymap", "type": "backend_managers", "text": "\nReturn the keymap associated with the specified tool.\n\nName of the Tool.\n\nList of keys associated with the tool.\n\n"}, {"name": "backend_managers.ToolManager.message_event()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.message_event", "type": "backend_managers", "text": "\nEmit a `ToolManagerMessageEvent`.\n\n"}, {"name": "backend_managers.ToolManager.remove_tool()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.remove_tool", "type": "backend_managers", "text": "\nRemove tool named name.\n\nName of the tool.\n\n"}, {"name": "backend_managers.ToolManager.set_figure()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.set_figure", "type": "backend_managers", "text": "\nBind the given figure to the tools.\n\nForce tools to update figure.\n\n"}, {"name": "backend_managers.ToolManager.toolmanager_connect()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.toolmanager_connect", "type": "backend_managers", "text": "\nConnect event with string s to func.\n\nThe name of the event. The following events are recognized:\n\nFor every tool added a new event is created\n\nCallback function for the toolmanager event with signature:\n\nThe callback id for the connection. This can be used in\n`toolmanager_disconnect`.\n\n"}, {"name": "backend_managers.ToolManager.toolmanager_disconnect()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.toolmanager_disconnect", "type": "backend_managers", "text": "\nDisconnect callback id cid.\n\nExample usage:\n\n"}, {"name": "backend_managers.ToolManager.trigger_tool()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.trigger_tool", "type": "backend_managers", "text": "\nTrigger a tool and emit the `tool_trigger_{name}` event.\n\nName of the tool.\n\nObject that wishes to trigger the tool.\n\nOriginal Canvas event or None.\n\nExtra data to pass to the tool when triggering.\n\n"}, {"name": "backend_managers.ToolManager.update_keymap()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.update_keymap", "type": "backend_managers", "text": "\nSet the keymap to associate with the specified tool.\n\nName of the Tool.\n\nKeys to associate with the tool.\n\n"}, {"name": "backend_managers.ToolManagerMessageEvent", "path": "backend_managers_api#matplotlib.backend_managers.ToolManagerMessageEvent", "type": "backend_managers", "text": "\nBases: `object`\n\nEvent carrying messages from toolmanager.\n\nMessages usually get displayed to the user by the toolbar.\n\n"}, {"name": "backend_managers.ToolTriggerEvent", "path": "backend_managers_api#matplotlib.backend_managers.ToolTriggerEvent", "type": "backend_managers", "text": "\nBases: `matplotlib.backend_managers.ToolEvent`\n\nEvent to inform that a tool has been triggered.\n\n"}, {"name": "backend_mixed", "path": "backend_mixed_api", "type": "backend_mixed", "text": "\nBases: `object`\n\nA helper class to implement a renderer that switches between vector and raster\ndrawing. An example may be a PDF writer, where most things are drawn with PDF\nvector commands, but some very complex objects, such as quad meshes, are\nrasterised and then output as images.\n\nThe figure instance.\n\nThe width of the canvas in logical units\n\nThe height of the canvas in logical units\n\nThe dpi of the canvas\n\nAn instance of a subclass of `RendererBase` that will be used for the vector\ndrawing.\n\nThe renderer class to use for the raster drawing. If not provided, this will\nuse the Agg backend (which is currently the only viable option anyway.)\n\nEnter \"raster\" mode. All subsequent drawing commands (until `stop_rasterizing`\nis called) will be drawn with the raster backend.\n\nExit \"raster\" mode. All of the drawing that was done since the last\n`start_rasterizing` call will be copied to the vector backend by calling\ndraw_image.\n\n"}, {"name": "backend_nbagg", "path": "backend_nbagg_api", "type": "backend_nbagg", "text": "\nInteractive figures in the IPython notebook.\n\nBases: `object`\n\nManages the Comm connection between IPython and the browser (client).\n\nComms are 2 way, with the CommSocket being able to publish a message via the\nsend_json method, and handle a message with on_message. On the JS side\nfigure.send_message and figure.ws.onmessage do the sending and receiving\nrespectively.\n\nalias of `matplotlib.backends.backend_nbagg.FigureCanvasNbAgg`\n\nBases: `matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore`\n\nalias of `matplotlib.backends.backend_nbagg.FigureManagerNbAgg`\n\nBases: `matplotlib.backends.backend_webagg_core.FigureManagerWebAgg`\n\nalias of `matplotlib.backends.backend_nbagg.NavigationIPy`\n\nClear up any closed Comms.\n\nA special method to re-show the figure in the notebook.\n\nFor GUI backends, show the figure window and redraw. For non-GUI backends,\nraise an exception, unless running headless (i.e. on Linux with an unset\nDISPLAY); this exception is converted to a warning in `Figure.show`.\n\nBases: `matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg`\n\nReturn a string showing the figure and connection status for the backend.\n\nThis is intended as a diagnostic tool, and not for general use.\n\nCreate a new figure manager instance for the given figure.\n\nShow all figures.\n\n`show` blocks by calling `mainloop` if block is `True`, or if it is `None` and\nwe are neither in IPython's `%pylab` mode, nor in `interactive` mode.\n\n"}, {"name": "backend_pdf", "path": "backend_pdf_api", "type": "backend_pdf", "text": "\nA PDF Matplotlib backend.\n\nAuthor: Jouni K Sepp\u00e4nen <jks@iki.fi> and others.\n\nalias of `matplotlib.backends.backend_pdf.FigureCanvasPdf`\n\nBases: `matplotlib.backend_bases.FigureCanvasBase`\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nReturn the default savefig file format as specified in\n`rcParams[\"savefig.format\"]` (default: `'png'`).\n\nThe returned string does not include a period. This method is overridden in\nbackends that only support a single file type.\n\nBases: `matplotlib.backend_bases.GraphicsContextBase`\n\nSet clip rectangle. Calls `pop()` and `push()`.\n\nCopy properties of other into self.\n\nCopy properties of other into self and return PDF commands needed to transform\nself into other.\n\nPredicate: does the path need to be filled?\n\nAn optional argument can be used to specify an alternative _fillcolor, as\nneeded by RendererPdf.draw_markers.\n\nMake sure every pushed graphics state is popped.\n\nReturn the appropriate pdf operator to cause the path to be stroked, filled,\nor both.\n\nPredicate: does the path need to be stroked (its outline drawn)? This tests\nfor the various conditions that disable stroking the path, in which case it\nwould presumably be filled.\n\nBases: `object`\n\nPDF name object.\n\nBases: `matplotlib.backends.backend_pdf.Operator`, `enum.Enum`\n\nAn enumeration.\n\nReturn the PDF operator to paint a path.\n\nFill the path with the fill color.\n\nStroke the outline of the path with the line color.\n\nBases: `object`\n\nPDF operator object.\n\nBases: `object`\n\nPDF file object.\n\nOutput target; if a string, a file will be opened for writing.\n\nInformation dictionary object (see PDF reference section 10.2.1 'Document\nInformation Dictionary'), e.g.: `{'Creator': 'My software', 'Author': 'Me',\n'Title': 'Awesome'}`.\n\nThe standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator',\n'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been\npredefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed\nby setting them to `None`.\n\nAdd a Gouraud triangle shading.\n\nTriangle vertices, shape (n, 3, 2) where n = number of triangles, 3 =\nvertices, 2 = x, y.\n\nVertex colors, shape (n, 3, 1) or (n, 3, 4) as with points, but last dimension\nis either (gray,) or (r, g, b, alpha).\n\nReturn name of an ExtGState that sets alpha to the given value.\n\nFlush all buffers and free all resources.\n\nGiven a dvi font object, return a name suitable for Op.selectfont. This\nregisters the font information in `self.dviFontInfo` if not yet registered.\n\nEmbed the TTF font from the named file into the document.\n\nWrite out the various deferred objects and the pdf end matter.\n\nSelect a font based on fontprop and return a name suitable for Op.selectfont.\nIf fontprop is a string, it will be interpreted as the filename of the font.\n\nReturn name of an image XObject representing the given image.\n\nReturn name of a marker XObject representing the given path.\n\nReserve an ID for an indirect object.\n\nThe name is used for debugging in case we forget to print out the object with\nwriteObject.\n\nWrite out the info dictionary, checking it for good form\n\nWrite out the PDF trailer.\n\nWrite out the xref table.\n\nBases: `object`\n\nA multi-page PDF file.\n\nIn reality `PdfPages` is a thin wrapper around `PdfFile`, in order to avoid\nconfusion when using `savefig` and forgetting the format argument.\n\nCreate a new PdfPages object.\n\nPlots using `PdfPages.savefig` will be written to a file at this location. The\nfile is opened at once and any older file with the same name is overwritten.\n\nIf set to False, then empty pdf files will be deleted automatically when\nclosed.\n\nInformation dictionary object (see PDF reference section 10.2.1 'Document\nInformation Dictionary'), e.g.: `{'Creator': 'My software', 'Author': 'Me',\n'Title': 'Awesome'}`.\n\nThe standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator',\n'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been\npredefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed\nby setting them to `None`.\n\nAdd a new text note to the page to be saved next. The optional positionRect\nspecifies the position of the new note on the page. It is outside the page per\ndefault to make sure it is invisible on printouts.\n\nFinalize this object, making the underlying file a complete PDF file.\n\nReturn the current number of pages in the multipage pdf file.\n\nReturn a modifiable information dictionary object (see PDF reference section\n10.2.1 'Document Information Dictionary').\n\nSave a `Figure` to this file as a new page.\n\nAny other keyword arguments are passed to `savefig`.\n\nThe figure, or index of the figure, that is saved to the file.\n\nBases: `object`\n\nPDF reference object.\n\nUse PdfFile.reserveObject() to create References.\n\nBases: `matplotlib.backends._backend_pdf_ps.RendererPDFPSBase`\n\nDraw a Gouraud-shaded triangle.\n\nThe graphics context.\n\nArray of (x, y) points for the triangle.\n\nRGBA colors for each point of the triangle.\n\nAn affine transform to apply to the points.\n\nDraw a series of Gouraud triangles.\n\nArray of N (x, y) points for the triangles.\n\nArray of N RGBA colors for each point of the triangles.\n\nAn affine transform to apply to the points.\n\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\nDraw a marker at each of path's vertices (excluding control points).\n\nThis provides a fallback implementation of draw_markers that makes multiple\ncalls to `draw_path()`. Some backends may want to override this method in\norder to draw the marker only once and reuse it multiple times.\n\nThe graphics context.\n\nAn affine transform applied to the marker.\n\nAn affine transform applied to the path.\n\nDraw a `Path` instance using the given affine transform.\n\nDraw a collection of paths selecting drawing properties from the lists\nfacecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a\nlist of offsets to apply to each of the paths. The offsets in offsets are\nfirst transformed by offsetTrans before being applied.\n\noffset_position is unused now, but the argument is kept for backwards\ncompatibility.\n\nThis provides a fallback implementation of `draw_path_collection()` that makes\nmultiple calls to `draw_path()`. Some backends may want to override this in\norder to render each set of path data only once, and then reference that path\nmultiple times with the different offsets, colors, styles etc. The generator\nmethods `_iter_collection_raw_paths()` and `_iter_collection()` are provided\nto help with (and standardize) the implementation across backends. It is\nhighly recommended to use those generators, so that changes to the behavior of\n`draw_path_collection()` can be made globally.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nGet the factor by which to magnify images passed to `draw_image()`. Allows a\nbackend to have images at a different resolution to other artists.\n\nReturn an instance of a `GraphicsContextBase`.\n\nBases: `object`\n\nPDF stream object.\n\nThis has no pdfRepr method. Instead, call begin(), then output the contents of\nthe stream by calling write(), and finally call end().\n\nObject id of the stream.\n\nAn unused Reference object for the length of the stream; None means to use a\nmemory buffer so the length can be inlined.\n\nThe underlying object to write the stream to.\n\nExtra key-value pairs to include in the stream header.\n\nIf the data is already png encoded, the decode parameters.\n\nFinalize stream.\n\nWrite some data on the stream.\n\nBases: `object`\n\nStore verbatim PDF command content for later inclusion in the stream.\n\nMake one string from sequence of strings, with whitespace in between.\n\nThe whitespace is chosen to form lines of at most linelen characters, if\npossible.\n\nMap Python objects to PDF syntax.\n\n"}, {"name": "backend_pgf", "path": "backend_pgf_api", "type": "backend_pgf", "text": "\nalias of `matplotlib.backends.backend_pgf.FigureCanvasPgf`\n\nBases: `matplotlib.backend_bases.FigureCanvasBase`\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nReturn the default savefig file format as specified in\n`rcParams[\"savefig.format\"]` (default: `'png'`).\n\nThe returned string does not include a period. This method is overridden in\nbackends that only support a single file type.\n\nUse LaTeX to compile a pgf generated figure to pdf.\n\nOutput pgf macros for drawing the figure so it can be included and rendered in\nlatex documents.\n\nUse LaTeX to compile a pgf figure to pdf and convert it to png.\n\nBases: `Exception`\n\nBases: `object`\n\nThe LatexManager opens an instance of the LaTeX application for determining\nthe metrics of text elements. The LaTeX environment can be modified by setting\nfonts and/or a custom preamble in `rcParams`.\n\nGet the width, total height, and descent (in TeX points) for a text typeset by\nthe current LaTeX environment.\n\nBases: `object`\n\nA multi-page PDF file using the pgf backend\n\nCreate a new PdfPages object.\n\nPlots using `PdfPages.savefig` will be written to a file at this location. Any\nolder file with the same name is overwritten.\n\nIf set to False, then empty pdf files will be deleted automatically when\nclosed.\n\nInformation dictionary object (see PDF reference section 10.2.1 'Document\nInformation Dictionary'), e.g.: `{'Creator': 'My software', 'Author': 'Me',\n'Title': 'Awesome'}`.\n\nThe standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator',\n'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been\npredefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed\nby setting them to `None`.\n\nNote that some versions of LaTeX engines may ignore the 'Producer' key and set\nit to themselves.\n\nFinalize this object, running LaTeX in a temporary directory and moving the\nfinal pdf file to filename.\n\nReturn the current number of pages in the multipage pdf file.\n\nSave a `Figure` to this file as a new page.\n\nAny other keyword arguments are passed to `savefig`.\n\nThe figure, or index of the figure, that is saved to the file.\n\nBases: `matplotlib.backend_bases.RendererBase`\n\nCreate a new PGF renderer that translates any drawing instruction into text\ncommands to be interpreted in a latex pgfpicture environment.\n\nMatplotlib figure to initialize height, width and dpi from.\n\nFile handle for the output of the drawing commands.\n\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\nDraw a marker at each of path's vertices (excluding control points).\n\nThis provides a fallback implementation of draw_markers that makes multiple\ncalls to `draw_path()`. Some backends may want to override this method in\norder to draw the marker only once and reuse it multiple times.\n\nThe graphics context.\n\nAn affine transform applied to the marker.\n\nAn affine transform applied to the path.\n\nDraw a `Path` instance using the given affine transform.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nReturn whether y values increase from top to bottom.\n\nNote that this only affects drawing of texts and images.\n\nReturn the canvas width and height in display coords.\n\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\nReturn whether image composition by Matplotlib should be skipped.\n\nRaster backends should usually return False (letting the C-level rasterizer\ntake care of image composition); vector backends should usually return `not\nrcParams[\"image.composite_image\"]`.\n\nReturn whether arbitrary affine transformations in `draw_image()` are\nsupported (True for most vector backends).\n\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\nBases: `object`\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\nDo some necessary and/or useful substitutions for texts to be included in\nLaTeX documents.\n\nThis distinguishes text-mode and math-mode by replacing the math separator `$`\nwith `\\(\\displaystyle %s\\)`. Escaped math separators (`\\$`) are ignored.\n\nThe following characters are escaped in text segments: `_^$%`\n\nBuild fontspec preamble from rc.\n\nGet LaTeX preamble from rc.\n\nReturn a function that converts a pdf file to a png file.\n\n"}, {"name": "backend_ps", "path": "backend_ps_api", "type": "backend_ps", "text": "\nA PostScript backend, which can produce both PostScript .ps and .eps.\n\nalias of `matplotlib.backends.backend_ps.FigureCanvasPS`\n\nBases: `matplotlib.backend_bases.FigureCanvasBase`\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nReturn the default savefig file format as specified in\n`rcParams[\"savefig.format\"]` (default: `'png'`).\n\nThe returned string does not include a period. This method is overridden in\nbackends that only support a single file type.\n\nBases: `matplotlib.backend_bases.GraphicsContextBase`\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\nReturn the `CapStyle`.\n\nReturn the `JoinStyle`.\n\nBases: `object`\n\nBases: `matplotlib.backends._backend_pdf_ps.RendererPDFPSBase`\n\nThe renderer handles all the drawing primitives using a graphics context\ninstance that controls the colors/styles.\n\nDraw a Gouraud-shaded triangle.\n\nThe graphics context.\n\nArray of (x, y) points for the triangle.\n\nRGBA colors for each point of the triangle.\n\nAn affine transform to apply to the points.\n\nDraw a series of Gouraud triangles.\n\nArray of N (x, y) points for the triangles.\n\nArray of N RGBA colors for each point of the triangles.\n\nAn affine transform to apply to the points.\n\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\nDraw a marker at each of path's vertices (excluding control points).\n\nThis provides a fallback implementation of draw_markers that makes multiple\ncalls to `draw_path()`. Some backends may want to override this method in\norder to draw the marker only once and reuse it multiple times.\n\nThe graphics context.\n\nAn affine transform applied to the marker.\n\nAn affine transform applied to the path.\n\nDraw the math text using matplotlib.mathtext.\n\nDraw a `Path` instance using the given affine transform.\n\nDraw a collection of paths selecting drawing properties from the lists\nfacecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a\nlist of offsets to apply to each of the paths. The offsets in offsets are\nfirst transformed by offsetTrans before being applied.\n\noffset_position is unused now, but the argument is kept for backwards\ncompatibility.\n\nThis provides a fallback implementation of `draw_path_collection()` that makes\nmultiple calls to `draw_path()`. Some backends may want to override this in\norder to render each set of path data only once, and then reference that path\nmultiple times with the different offsets, colors, styles etc. The generator\nmethods `_iter_collection_raw_paths()` and `_iter_collection()` are provided\nto help with (and standardize) the implementation across backends. It is\nhighly recommended to use those generators, so that changes to the behavior of\n`draw_path_collection()` can be made globally.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nGet the factor by which to magnify images passed to draw_image. Allows a\nbackend to have images at a different resolution to other artists.\n\nWhen we want to use the LaTeX backend with postscript, we write PSFrag tags to\na temporary postscript file, each one marking a position for LaTeX to render\nsome text. convert_psfrags generates a LaTeX document containing the commands\nto convert those tags to text. LaTeX/dvips produces the postscript file that\nincludes the actual text.\n\nReturn a postscript header string for the given bbox lbrt=(l, b, r, t).\nOptionally, return rotate command.\n\nUse ghostscript's pswrite or epswrite device to distill a file. This yields\nsmaller files without illegal encapsulated postscript operators. The output is\nlow-level, converting text to outlines.\n\nConvert the postscript to encapsulated postscript. The bbox of the eps file\nwill be replaced with the given bbox argument. If None, original bbox will be\nused.\n\nQuote dangerous characters of S for use in a PostScript string constant.\n\nUse ghostscript's ps2pdf and xpdf's/poppler's pdftops to distill a file. This\nyields smaller files without illegal encapsulated postscript operators. This\ndistiller is preferred, generating high-level postscript output that treats\ntext as text.\n\n"}, {"name": "backend_qtagg, backend_qtcairo", "path": "backend_qt_api", "type": "backend_qtagg, backend_qtcairo", "text": "\nNOTE These backends are not documented here, to avoid adding a dependency to\nbuilding the docs.\n\n"}, {"name": "backend_svg", "path": "backend_svg_api", "type": "backend_svg", "text": "\nalias of `matplotlib.backends.backend_svg.FigureCanvasSVG`\n\nBases: `matplotlib.backend_bases.FigureCanvasBase`\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nReturn the default savefig file format as specified in\n`rcParams[\"savefig.format\"]` (default: `'png'`).\n\nThe returned string does not include a period. This method is overridden in\nbackends that only support a single file type.\n\nOutput target; if a string, a file will be opened for writing.\n\nMetadata in the SVG file defined as key-value pairs of strings, datetimes, or\nlists of strings, e.g., `{'Creator': 'My software', 'Contributor': ['Me', 'My\nFriend'], 'Title': 'Awesome'}`.\n\nThe standard keys and their value types are:\n\nValues have been predefined for `'Creator'`, `'Date'`, `'Format'`, and\n`'Type'`. They can be removed by setting them to `None`.\n\nInformation is encoded as Dublin Core Metadata.\n\nBases: `matplotlib.backend_bases.RendererBase`\n\nClose a grouping element with label s.\n\nOnly used by the SVG renderer.\n\nDraw a Gouraud-shaded triangle.\n\nThe graphics context.\n\nArray of (x, y) points for the triangle.\n\nRGBA colors for each point of the triangle.\n\nAn affine transform to apply to the points.\n\nDraw a series of Gouraud triangles.\n\nArray of N (x, y) points for the triangles.\n\nArray of N RGBA colors for each point of the triangles.\n\nAn affine transform to apply to the points.\n\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\nDraw a marker at each of path's vertices (excluding control points).\n\nThis provides a fallback implementation of draw_markers that makes multiple\ncalls to `draw_path()`. Some backends may want to override this method in\norder to draw the marker only once and reuse it multiple times.\n\nThe graphics context.\n\nAn affine transform applied to the marker.\n\nAn affine transform applied to the path.\n\nDraw a `Path` instance using the given affine transform.\n\nDraw a collection of paths selecting drawing properties from the lists\nfacecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a\nlist of offsets to apply to each of the paths. The offsets in offsets are\nfirst transformed by offsetTrans before being applied.\n\noffset_position is unused now, but the argument is kept for backwards\ncompatibility.\n\nThis provides a fallback implementation of `draw_path_collection()` that makes\nmultiple calls to `draw_path()`. Some backends may want to override this in\norder to render each set of path data only once, and then reference that path\nmultiple times with the different offsets, colors, styles etc. The generator\nmethods `_iter_collection_raw_paths()` and `_iter_collection()` are provided\nto help with (and standardize) the implementation across backends. It is\nhighly recommended to use those generators, so that changes to the behavior of\n`draw_path_collection()` can be made globally.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nReturn whether y values increase from top to bottom.\n\nNote that this only affects drawing of texts and images.\n\nReturn the canvas width and height in display coords.\n\nGet the factor by which to magnify images passed to `draw_image()`. Allows a\nbackend to have images at a different resolution to other artists.\n\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\nOpen a grouping element with label s and gid (if set) as id.\n\nOnly used by the SVG renderer.\n\nReturn whether image composition by Matplotlib should be skipped.\n\nRaster backends should usually return False (letting the C-level rasterizer\ntake care of image composition); vector backends should usually return `not\nrcParams[\"image.composite_image\"]`.\n\nReturn whether arbitrary affine transformations in `draw_image()` are\nsupported (True for most vector backends).\n\nBases: `object`\n\nClose open elements, up to (and including) the element identified by the given\nidentifier.\n\nElement identifier, as returned by the `start()` method.\n\nAdd a comment to the output stream.\n\nComment text.\n\nAdd character data to the output stream.\n\nCharacter data.\n\nAdd an entire element. This is the same as calling `start()`, `data()`, and\n`end()` in sequence. The text argument can be omitted.\n\nClose the current element (opened by the most recent call to `start()`).\n\nElement tag. If given, the tag must match the start tag. If omitted, the\ncurrent element is closed.\n\nFlush the output stream.\n\nOpen a new element. Attributes can be given as keyword arguments, or as a\nstring/string dictionary. The method returns an opaque identifier that can be\npassed to the `close()` method, to close all open elements up to and including\nthis one.\n\nElement tag.\n\nAttribute dictionary. Alternatively, attributes can be given as keyword\narguments.\n\nCreate a short string representation of a float, which is %f formatting with\ntrailing zeros and the decimal point removed.\n\n"}, {"name": "backend_template", "path": "backend_template_api", "type": "backend_template", "text": "\nA fully functional, do-nothing backend intended as a template for backend\nwriters. It is fully functional in that you can select it as a backend e.g.\nwith\n\nand your program will (should!) run without error, though no output is\nproduced. This provides a starting point for backend writers; you can\nselectively implement drawing methods (`draw_path`, `draw_image`, etc.) and\nslowly see your figure come to life instead having to have a full blown\nimplementation before getting any results.\n\nCopy this file to a directory outside of the Matplotlib source tree, somewhere\nwhere Python can import it (by adding the directory to your `sys.path` or by\npackaging it as a normal Python package); if the backend is importable as\n`import my.backend` you can then select it using\n\nIf your backend implements support for saving figures (i.e. has a `print_xyz`\nmethod), you can register it as the default handler for a given file type:\n\nalias of `matplotlib.backends.backend_template.FigureCanvasTemplate`\n\nBases: `matplotlib.backend_bases.FigureCanvasBase`\n\nThe canvas the figure renders into. Calls the draw and print fig methods,\ncreates the renderers, etc.\n\nNote: GUI templates will want to connect events for button presses, mouse\nmovements and key presses to functions that call the base class methods\nbutton_press_event, button_release_event, motion_notify_event,\nkey_press_event, and key_release_event. See the implementations of the\ninteractive backends for examples.\n\nA high-level Figure instance\n\nDraw the figure using the renderer.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nReturn the default savefig file format as specified in\n`rcParams[\"savefig.format\"]` (default: `'png'`).\n\nThe returned string does not include a period. This method is overridden in\nbackends that only support a single file type.\n\nWrite out format foo.\n\nThis method is normally called via `Figure.savefig` and\n`FigureCanvasBase.print_figure`, which take care of setting the figure\nfacecolor, edgecolor, and dpi to the desired output values, and will restore\nthem to the original values. Therefore, `print_foo` does not need to handle\nthese settings.\n\nalias of `matplotlib.backends.backend_template.FigureManagerTemplate`\n\nBases: `matplotlib.backend_bases.FigureManagerBase`\n\nHelper class for pyplot mode, wraps everything up into a neat bundle.\n\nFor non-interactive backends, the base class is sufficient.\n\nBases: `matplotlib.backend_bases.GraphicsContextBase`\n\nThe graphics context provides the color, line styles, etc... See the cairo and\npostscript backends for examples of mapping the graphics context attributes\n(cap styles, join styles, line widths, colors) to a particular backend. In\ncairo this is done by wrapping a cairo.Context object and forwarding the\nappropriate calls to it using a dictionary mapping styles to gdk constants. In\nPostscript, all the work is done by the renderer, mapping line styles to\npostscript calls.\n\nIf it's more appropriate to do the mapping at the renderer level (as in the\npostscript backend), you don't need to override any of the GC methods. If it's\nmore appropriate to wrap an instance (as in the cairo backend) and do the\nmapping here, you'll need to override several of the setter methods.\n\nThe base GraphicsContext stores colors as a RGB tuple on the unit interval,\ne.g., (0.5, 0.0, 1.0). You may need to map this to colors appropriate for your\nbackend.\n\nBases: `matplotlib.backend_bases.RendererBase`\n\nThe renderer handles drawing/rendering operations.\n\nThis is a minimal do-nothing class that can be used to get started when\nwriting a new backend. Refer to `backend_bases.RendererBase` for documentation\nof the methods.\n\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\nDraw a `Path` instance using the given affine transform.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nReturn whether y values increase from top to bottom.\n\nNote that this only affects drawing of texts and images.\n\nReturn the canvas width and height in display coords.\n\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\nReturn an instance of a `GraphicsContextBase`.\n\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\nFor image backends - is not required. For GUI backends - this should be\noverridden if drawing should be done in interactive python mode.\n\nCreate a new figure manager instance.\n\nCreate a new figure manager instance for the given figure.\n\nFor image backends - is not required. For GUI backends - show() is usually the\nlast line of a pyplot script and tells the backend that it is time to draw. In\ninteractive mode, this should do nothing.\n\n"}, {"name": "backend_tkagg, backend_tkcairo", "path": "backend_tk_api", "type": "backend_tkagg, backend_tkcairo", "text": "\nalias of `matplotlib.backends.backend_tkagg.FigureCanvasTkAgg`\n\nBases: `matplotlib.backends.backend_agg.FigureCanvasAgg`,\n`matplotlib.backends._backend_tk.FigureCanvasTk`\n\nBlit the canvas in bbox (default entire canvas).\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nalias of `matplotlib.backends.backend_tkcairo.FigureCanvasTkCairo`\n\nBases: `matplotlib.backends.backend_cairo.FigureCanvasCairo`,\n`matplotlib.backends._backend_tk.FigureCanvasTk`\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\n"}, {"name": "backend_tools", "path": "backend_tools_api", "type": "backend_tools", "text": "\nAbstract base classes define the primitives for Tools. These tools are used by\n`matplotlib.backend_managers.ToolManager`\n\nSimple stateless tool\n\nTool that has two states, only one Toggle tool can be active at any given time\nfor the same `matplotlib.backend_managers.ToolManager`\n\nBases: `matplotlib.backend_tools.ToolToggleBase`\n\nBase Tool to toggle between linear and logarithmic.\n\nDisable the toggle tool.\n\n`trigger` call this method when `toggled` is True.\n\nThis can happen in different circumstances.\n\nEnable the toggle tool.\n\n`trigger` calls this method when `toggled` is False.\n\nCalls `enable` or `disable` based on `toggled` value.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nBase tool for the configuration of subplots.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nBases: `enum.IntEnum`\n\nBackend-independent cursor types.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nDraw and remove a rubberband.\n\nDraw rubberband.\n\nThis method must get implemented per backend.\n\nRemove rubberband.\n\nThis method should get implemented per backend.\n\nCall `draw_rubberband` or `remove_rubberband` based on data.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nBase tool for figure saving.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nChange to the current cursor while inaxes.\n\nThis tool, keeps track of all `ToolToggleBase` derived tools, and calls\n`set_cursor` when a tool gets triggered.\n\n[Deprecated] Set the cursor.\n\nDeprecated since version 3.5.\n\nBases: `matplotlib.backend_tools.ViewsPositionsBase`\n\nMove back up the view limits stack.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nBases: `object`\n\nBase tool class.\n\nA base tool, only implements `trigger` method or no method at all. The tool is\ninstantiated by `matplotlib.backend_managers.ToolManager`.\n\nThe canvas of the figure affected by this tool, or None.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nDestroy the tool.\n\nThis method is called by `ToolManager.remove_tool`.\n\nThe Figure affected by this tool, or None.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nThe tool id (str, must be unique among tools of a tool manager).\n\nThe `ToolManager` that controls this tool.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\nalias of `matplotlib.backend_tools.ToolCopyToClipboardBase`\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nTool to copy the figure to the clipboard.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nSend message with the current pointer position.\n\nThis tool runs in the background reporting the position of the cursor.\n\nCall `matplotlib.backend_managers.ToolManager.message_event`.\n\nBases: `matplotlib.backend_tools.ViewsPositionsBase`\n\nMove forward in the view lim stack.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nBases: `matplotlib.backend_tools.ToolToggleBase`\n\nTool to toggle full screen.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nDisable the toggle tool.\n\n`trigger` call this method when `toggled` is True.\n\nThis can happen in different circumstances.\n\nEnable the toggle tool.\n\n`trigger` calls this method when `toggled` is False.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nTool to toggle the major grids of the figure.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nConvert a shortcut string from the notation used in rc config to the standard\nnotation for displaying shortcuts, e.g. 'ctrl+a' -> 'Ctrl+A'.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nBases: `matplotlib.backend_tools.ViewsPositionsBase`\n\nRestore the original view limits.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nTool to toggle the major and minor grids of the figure.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\nBases: `matplotlib.backend_tools.ZoomPanBase`\n\nPan axes with left mouse, zoom with right.\n\nCursor to use when the tool is active.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nAttribute to group 'radio' like tools (mutually exclusive).\n\n`str` that identifies the group or None if not belonging to a group.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nTool to call the figure manager destroy method.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nTool to call the figure manager destroy method.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\nalias of `matplotlib.backend_tools.SetCursorBase`\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nToggleable tool.\n\nEvery time it is triggered, it switches between enable and disable.\n\nVariable length argument to be used by the Tool.\n\n`toggled` if present and True, sets the initial state of the Tool Arbitrary\nkeyword arguments to be consumed by the Tool\n\nCursor to use when the tool is active.\n\nDefault of toggled state.\n\nDisable the toggle tool.\n\n`trigger` call this method when `toggled` is True.\n\nThis can happen in different circumstances.\n\nEnable the toggle tool.\n\n`trigger` calls this method when `toggled` is False.\n\nAttribute to group 'radio' like tools (mutually exclusive).\n\n`str` that identifies the group or None if not belonging to a group.\n\nState of the toggled tool.\n\nCalls `enable` or `disable` based on `toggled` value.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nAuxiliary Tool to handle changes in views and positions.\n\nRuns in the background and should get used by all the tools that need to\naccess the figure's history of views and positions, e.g.\n\nAdd the current figure to the stack of views and positions.\n\nBack one step in the stack of views and positions.\n\nReset the axes stack.\n\nForward one step in the stack of views and positions.\n\nRecall the first view and position from the stack.\n\nPush the current view limits and position onto their respective stacks.\n\nMake sure that `self.home_views` has an entry for all axes present in the\nfigure.\n\nUpdate the view limits and position for each axes from the current stack\nposition. If any axes are present in the figure that aren't in the current\nstack position, use the home view limits for those axes and don't update any\npositions.\n\nBases: `matplotlib.backend_tools.AxisScaleBase`\n\nTool to toggle between linear and logarithmic scales on the X axis.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nBases: `matplotlib.backend_tools.AxisScaleBase`\n\nTool to toggle between linear and logarithmic scales on the Y axis.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nBases: `matplotlib.backend_tools.ZoomPanBase`\n\nA Tool for zooming using a rectangle selector.\n\nCursor to use when the tool is active.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nAttribute to group 'radio' like tools (mutually exclusive).\n\n`str` that identifies the group or None if not belonging to a group.\n\nBases: `matplotlib.backend_tools.ToolBase`\n\nBase class for `ToolHome`, `ToolBack` and `ToolForward`.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\nBases: `matplotlib.backend_tools.ToolToggleBase`\n\nBase class for `ToolZoom` and `ToolPan`.\n\nRelease the canvas and disconnect press/release events.\n\nConnect press/release events and lock the canvas.\n\nCalls `enable` or `disable` based on `toggled` value.\n\nAdd multiple tools to the container.\n\n`backend_bases.ToolContainerBase` object that will get the tools added.\n\nList in the form `[[group1, [tool1, tool2 ...]], [group2, [...]]]` where the\ntools `[tool1, tool2, ...]` will display in group1. See `add_tool` for\ndetails.\n\nAdd multiple tools to a `ToolManager`.\n\nManager to which the tools are added.\n\nThe tools to add in a {name: tool} dict, see `add_tool` for more info.\n\nalias of `matplotlib.backend_tools.Cursors`\n\nDefault tools in the toolbar\n\nDefault tools\n\n"}, {"name": "backend_tools.add_tools_to_container()", "path": "backend_tools_api#matplotlib.backend_tools.add_tools_to_container", "type": "backend_tools", "text": "\nAdd multiple tools to the container.\n\n`backend_bases.ToolContainerBase` object that will get the tools added.\n\nList in the form `[[group1, [tool1, tool2 ...]], [group2, [...]]]` where the\ntools `[tool1, tool2, ...]` will display in group1. See `add_tool` for\ndetails.\n\n"}, {"name": "backend_tools.add_tools_to_manager()", "path": "backend_tools_api#matplotlib.backend_tools.add_tools_to_manager", "type": "backend_tools", "text": "\nAdd multiple tools to a `ToolManager`.\n\nManager to which the tools are added.\n\nThe tools to add in a {name: tool} dict, see `add_tool` for more info.\n\n"}, {"name": "backend_tools.AxisScaleBase", "path": "backend_tools_api#matplotlib.backend_tools.AxisScaleBase", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolToggleBase`\n\nBase Tool to toggle between linear and logarithmic.\n\nDisable the toggle tool.\n\n`trigger` call this method when `toggled` is True.\n\nThis can happen in different circumstances.\n\nEnable the toggle tool.\n\n`trigger` calls this method when `toggled` is False.\n\nCalls `enable` or `disable` based on `toggled` value.\n\n"}, {"name": "backend_tools.AxisScaleBase.disable()", "path": "backend_tools_api#matplotlib.backend_tools.AxisScaleBase.disable", "type": "backend_tools", "text": "\nDisable the toggle tool.\n\n`trigger` call this method when `toggled` is True.\n\nThis can happen in different circumstances.\n\n"}, {"name": "backend_tools.AxisScaleBase.enable()", "path": "backend_tools_api#matplotlib.backend_tools.AxisScaleBase.enable", "type": "backend_tools", "text": "\nEnable the toggle tool.\n\n`trigger` calls this method when `toggled` is False.\n\n"}, {"name": "backend_tools.AxisScaleBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.AxisScaleBase.trigger", "type": "backend_tools", "text": "\nCalls `enable` or `disable` based on `toggled` value.\n\n"}, {"name": "backend_tools.ConfigureSubplotsBase", "path": "backend_tools_api#matplotlib.backend_tools.ConfigureSubplotsBase", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nBase tool for the configuration of subplots.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ConfigureSubplotsBase.description", "path": "backend_tools_api#matplotlib.backend_tools.ConfigureSubplotsBase.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ConfigureSubplotsBase.image", "path": "backend_tools_api#matplotlib.backend_tools.ConfigureSubplotsBase.image", "type": "backend_tools", "text": "\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.cursors", "path": "backend_tools_api#matplotlib.backend_tools.cursors", "type": "backend_tools", "text": "\nalias of `matplotlib.backend_tools.Cursors`\n\n"}, {"name": "backend_tools.Cursors", "path": "backend_tools_api#matplotlib.backend_tools.Cursors", "type": "backend_tools", "text": "\nBases: `enum.IntEnum`\n\nBackend-independent cursor types.\n\n"}, {"name": "backend_tools.Cursors.HAND", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.HAND", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.Cursors.MOVE", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.MOVE", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.Cursors.POINTER", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.POINTER", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.Cursors.RESIZE_HORIZONTAL", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.RESIZE_HORIZONTAL", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.Cursors.RESIZE_VERTICAL", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.RESIZE_VERTICAL", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.Cursors.SELECT_REGION", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.SELECT_REGION", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.Cursors.WAIT", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.WAIT", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.default_toolbar_tools", "path": "backend_tools_api#matplotlib.backend_tools.default_toolbar_tools", "type": "backend_tools", "text": "\nDefault tools in the toolbar\n\n"}, {"name": "backend_tools.default_tools", "path": "backend_tools_api#matplotlib.backend_tools.default_tools", "type": "backend_tools", "text": "\nDefault tools\n\n"}, {"name": "backend_tools.RubberbandBase", "path": "backend_tools_api#matplotlib.backend_tools.RubberbandBase", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nDraw and remove a rubberband.\n\nDraw rubberband.\n\nThis method must get implemented per backend.\n\nRemove rubberband.\n\nThis method should get implemented per backend.\n\nCall `draw_rubberband` or `remove_rubberband` based on data.\n\n"}, {"name": "backend_tools.RubberbandBase.draw_rubberband()", "path": "backend_tools_api#matplotlib.backend_tools.RubberbandBase.draw_rubberband", "type": "backend_tools", "text": "\nDraw rubberband.\n\nThis method must get implemented per backend.\n\n"}, {"name": "backend_tools.RubberbandBase.remove_rubberband()", "path": "backend_tools_api#matplotlib.backend_tools.RubberbandBase.remove_rubberband", "type": "backend_tools", "text": "\nRemove rubberband.\n\nThis method should get implemented per backend.\n\n"}, {"name": "backend_tools.RubberbandBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.RubberbandBase.trigger", "type": "backend_tools", "text": "\nCall `draw_rubberband` or `remove_rubberband` based on data.\n\n"}, {"name": "backend_tools.SaveFigureBase", "path": "backend_tools_api#matplotlib.backend_tools.SaveFigureBase", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nBase tool for figure saving.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.SaveFigureBase.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.SaveFigureBase.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.SaveFigureBase.description", "path": "backend_tools_api#matplotlib.backend_tools.SaveFigureBase.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.SaveFigureBase.image", "path": "backend_tools_api#matplotlib.backend_tools.SaveFigureBase.image", "type": "backend_tools", "text": "\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.SetCursorBase", "path": "backend_tools_api#matplotlib.backend_tools.SetCursorBase", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nChange to the current cursor while inaxes.\n\nThis tool, keeps track of all `ToolToggleBase` derived tools, and calls\n`set_cursor` when a tool gets triggered.\n\n[Deprecated] Set the cursor.\n\nDeprecated since version 3.5.\n\n"}, {"name": "backend_tools.SetCursorBase.set_cursor()", "path": "backend_tools_api#matplotlib.backend_tools.SetCursorBase.set_cursor", "type": "backend_tools", "text": "\n[Deprecated] Set the cursor.\n\nDeprecated since version 3.5.\n\n"}, {"name": "backend_tools.SetCursorBase.set_figure()", "path": "backend_tools_api#matplotlib.backend_tools.SetCursorBase.set_figure", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.ToolBack", "path": "backend_tools_api#matplotlib.backend_tools.ToolBack", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ViewsPositionsBase`\n\nMove back up the view limits stack.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolBack.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolBack.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolBack.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolBack.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolBack.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolBack.image", "type": "backend_tools", "text": "\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolBase", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase", "type": "backend_tools", "text": "\nBases: `object`\n\nBase tool class.\n\nA base tool, only implements `trigger` method or no method at all. The tool is\ninstantiated by `matplotlib.backend_managers.ToolManager`.\n\nThe canvas of the figure affected by this tool, or None.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nDestroy the tool.\n\nThis method is called by `ToolManager.remove_tool`.\n\nThe Figure affected by this tool, or None.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nThe tool id (str, must be unique among tools of a tool manager).\n\nThe `ToolManager` that controls this tool.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolBase.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolBase.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolBase.destroy()", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.destroy", "type": "backend_tools", "text": "\nDestroy the tool.\n\nThis method is called by `ToolManager.remove_tool`.\n\n"}, {"name": "backend_tools.ToolBase.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.image", "type": "backend_tools", "text": "\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolBase.set_figure()", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.set_figure", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.ToolBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.trigger", "type": "backend_tools", "text": "\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolCopyToClipboard", "path": "backend_tools_api#matplotlib.backend_tools.ToolCopyToClipboard", "type": "backend_tools", "text": "\nalias of `matplotlib.backend_tools.ToolCopyToClipboardBase`\n\n"}, {"name": "backend_tools.ToolCopyToClipboardBase", "path": "backend_tools_api#matplotlib.backend_tools.ToolCopyToClipboardBase", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nTool to copy the figure to the clipboard.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolCopyToClipboardBase.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolCopyToClipboardBase.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolCopyToClipboardBase.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolCopyToClipboardBase.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolCopyToClipboardBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolCopyToClipboardBase.trigger", "type": "backend_tools", "text": "\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolCursorPosition", "path": "backend_tools_api#matplotlib.backend_tools.ToolCursorPosition", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nSend message with the current pointer position.\n\nThis tool runs in the background reporting the position of the cursor.\n\nCall `matplotlib.backend_managers.ToolManager.message_event`.\n\n"}, {"name": "backend_tools.ToolCursorPosition.send_message()", "path": "backend_tools_api#matplotlib.backend_tools.ToolCursorPosition.send_message", "type": "backend_tools", "text": "\nCall `matplotlib.backend_managers.ToolManager.message_event`.\n\n"}, {"name": "backend_tools.ToolCursorPosition.set_figure()", "path": "backend_tools_api#matplotlib.backend_tools.ToolCursorPosition.set_figure", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.ToolForward", "path": "backend_tools_api#matplotlib.backend_tools.ToolForward", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ViewsPositionsBase`\n\nMove forward in the view lim stack.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolForward.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolForward.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolForward.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolForward.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolForward.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolForward.image", "type": "backend_tools", "text": "\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolFullScreen", "path": "backend_tools_api#matplotlib.backend_tools.ToolFullScreen", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolToggleBase`\n\nTool to toggle full screen.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nDisable the toggle tool.\n\n`trigger` call this method when `toggled` is True.\n\nThis can happen in different circumstances.\n\nEnable the toggle tool.\n\n`trigger` calls this method when `toggled` is False.\n\n"}, {"name": "backend_tools.ToolFullScreen.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolFullScreen.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolFullScreen.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolFullScreen.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolFullScreen.disable()", "path": "backend_tools_api#matplotlib.backend_tools.ToolFullScreen.disable", "type": "backend_tools", "text": "\nDisable the toggle tool.\n\n`trigger` call this method when `toggled` is True.\n\nThis can happen in different circumstances.\n\n"}, {"name": "backend_tools.ToolFullScreen.enable()", "path": "backend_tools_api#matplotlib.backend_tools.ToolFullScreen.enable", "type": "backend_tools", "text": "\nEnable the toggle tool.\n\n`trigger` calls this method when `toggled` is False.\n\n"}, {"name": "backend_tools.ToolGrid", "path": "backend_tools_api#matplotlib.backend_tools.ToolGrid", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nTool to toggle the major grids of the figure.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolGrid.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolGrid.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolGrid.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolGrid.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolGrid.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolGrid.trigger", "type": "backend_tools", "text": "\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolHelpBase", "path": "backend_tools_api#matplotlib.backend_tools.ToolHelpBase", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nConvert a shortcut string from the notation used in rc config to the standard\nnotation for displaying shortcuts, e.g. 'ctrl+a' -> 'Ctrl+A'.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolHelpBase.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolHelpBase.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolHelpBase.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolHelpBase.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolHelpBase.format_shortcut()", "path": "backend_tools_api#matplotlib.backend_tools.ToolHelpBase.format_shortcut", "type": "backend_tools", "text": "\nConvert a shortcut string from the notation used in rc config to the standard\nnotation for displaying shortcuts, e.g. 'ctrl+a' -> 'Ctrl+A'.\n\n"}, {"name": "backend_tools.ToolHelpBase.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolHelpBase.image", "type": "backend_tools", "text": "\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolHome", "path": "backend_tools_api#matplotlib.backend_tools.ToolHome", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ViewsPositionsBase`\n\nRestore the original view limits.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolHome.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolHome.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolHome.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolHome.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolHome.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolHome.image", "type": "backend_tools", "text": "\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolMinorGrid", "path": "backend_tools_api#matplotlib.backend_tools.ToolMinorGrid", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nTool to toggle the major and minor grids of the figure.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolMinorGrid.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolMinorGrid.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolMinorGrid.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolMinorGrid.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolMinorGrid.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolMinorGrid.trigger", "type": "backend_tools", "text": "\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolPan", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ZoomPanBase`\n\nPan axes with left mouse, zoom with right.\n\nCursor to use when the tool is active.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nAttribute to group 'radio' like tools (mutually exclusive).\n\n`str` that identifies the group or None if not belonging to a group.\n\n"}, {"name": "backend_tools.ToolPan.cursor", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan.cursor", "type": "backend_tools", "text": "\nCursor to use when the tool is active.\n\n"}, {"name": "backend_tools.ToolPan.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolPan.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolPan.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan.image", "type": "backend_tools", "text": "\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolPan.radio_group", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan.radio_group", "type": "backend_tools", "text": "\nAttribute to group 'radio' like tools (mutually exclusive).\n\n`str` that identifies the group or None if not belonging to a group.\n\n"}, {"name": "backend_tools.ToolQuit", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuit", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nTool to call the figure manager destroy method.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolQuit.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuit.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolQuit.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuit.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolQuit.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuit.trigger", "type": "backend_tools", "text": "\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolQuitAll", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuitAll", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nTool to call the figure manager destroy method.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolQuitAll.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuitAll.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolQuitAll.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuitAll.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolQuitAll.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuitAll.trigger", "type": "backend_tools", "text": "\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ToolSetCursor", "path": "backend_tools_api#matplotlib.backend_tools.ToolSetCursor", "type": "backend_tools", "text": "\nalias of `matplotlib.backend_tools.SetCursorBase`\n\n"}, {"name": "backend_tools.ToolToggleBase", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nToggleable tool.\n\nEvery time it is triggered, it switches between enable and disable.\n\nVariable length argument to be used by the Tool.\n\n`toggled` if present and True, sets the initial state of the Tool Arbitrary\nkeyword arguments to be consumed by the Tool\n\nCursor to use when the tool is active.\n\nDefault of toggled state.\n\nDisable the toggle tool.\n\n`trigger` call this method when `toggled` is True.\n\nThis can happen in different circumstances.\n\nEnable the toggle tool.\n\n`trigger` calls this method when `toggled` is False.\n\nAttribute to group 'radio' like tools (mutually exclusive).\n\n`str` that identifies the group or None if not belonging to a group.\n\nState of the toggled tool.\n\nCalls `enable` or `disable` based on `toggled` value.\n\n"}, {"name": "backend_tools.ToolToggleBase.cursor", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.cursor", "type": "backend_tools", "text": "\nCursor to use when the tool is active.\n\n"}, {"name": "backend_tools.ToolToggleBase.default_toggled", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.default_toggled", "type": "backend_tools", "text": "\nDefault of toggled state.\n\n"}, {"name": "backend_tools.ToolToggleBase.disable()", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.disable", "type": "backend_tools", "text": "\nDisable the toggle tool.\n\n`trigger` call this method when `toggled` is True.\n\nThis can happen in different circumstances.\n\n"}, {"name": "backend_tools.ToolToggleBase.enable()", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.enable", "type": "backend_tools", "text": "\nEnable the toggle tool.\n\n`trigger` calls this method when `toggled` is False.\n\n"}, {"name": "backend_tools.ToolToggleBase.radio_group", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.radio_group", "type": "backend_tools", "text": "\nAttribute to group 'radio' like tools (mutually exclusive).\n\n`str` that identifies the group or None if not belonging to a group.\n\n"}, {"name": "backend_tools.ToolToggleBase.set_figure()", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.set_figure", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.ToolToggleBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.trigger", "type": "backend_tools", "text": "\nCalls `enable` or `disable` based on `toggled` value.\n\n"}, {"name": "backend_tools.ToolViewsPositions", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nAuxiliary Tool to handle changes in views and positions.\n\nRuns in the background and should get used by all the tools that need to\naccess the figure's history of views and positions, e.g.\n\nAdd the current figure to the stack of views and positions.\n\nBack one step in the stack of views and positions.\n\nReset the axes stack.\n\nForward one step in the stack of views and positions.\n\nRecall the first view and position from the stack.\n\nPush the current view limits and position onto their respective stacks.\n\nMake sure that `self.home_views` has an entry for all axes present in the\nfigure.\n\nUpdate the view limits and position for each axes from the current stack\nposition. If any axes are present in the figure that aren't in the current\nstack position, use the home view limits for those axes and don't update any\npositions.\n\n"}, {"name": "backend_tools.ToolViewsPositions.add_figure()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.add_figure", "type": "backend_tools", "text": "\nAdd the current figure to the stack of views and positions.\n\n"}, {"name": "backend_tools.ToolViewsPositions.back()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.back", "type": "backend_tools", "text": "\nBack one step in the stack of views and positions.\n\n"}, {"name": "backend_tools.ToolViewsPositions.clear()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.clear", "type": "backend_tools", "text": "\nReset the axes stack.\n\n"}, {"name": "backend_tools.ToolViewsPositions.forward()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.forward", "type": "backend_tools", "text": "\nForward one step in the stack of views and positions.\n\n"}, {"name": "backend_tools.ToolViewsPositions.home()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.home", "type": "backend_tools", "text": "\nRecall the first view and position from the stack.\n\n"}, {"name": "backend_tools.ToolViewsPositions.push_current()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.push_current", "type": "backend_tools", "text": "\nPush the current view limits and position onto their respective stacks.\n\n"}, {"name": "backend_tools.ToolViewsPositions.update_home_views()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.update_home_views", "type": "backend_tools", "text": "\nMake sure that `self.home_views` has an entry for all axes present in the\nfigure.\n\n"}, {"name": "backend_tools.ToolViewsPositions.update_view()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.update_view", "type": "backend_tools", "text": "\nUpdate the view limits and position for each axes from the current stack\nposition. If any axes are present in the figure that aren't in the current\nstack position, use the home view limits for those axes and don't update any\npositions.\n\n"}, {"name": "backend_tools.ToolXScale", "path": "backend_tools_api#matplotlib.backend_tools.ToolXScale", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.AxisScaleBase`\n\nTool to toggle between linear and logarithmic scales on the X axis.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolXScale.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolXScale.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolXScale.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolXScale.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolXScale.set_scale()", "path": "backend_tools_api#matplotlib.backend_tools.ToolXScale.set_scale", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.ToolYScale", "path": "backend_tools_api#matplotlib.backend_tools.ToolYScale", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.AxisScaleBase`\n\nTool to toggle between linear and logarithmic scales on the Y axis.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolYScale.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolYScale.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolYScale.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolYScale.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolYScale.set_scale()", "path": "backend_tools_api#matplotlib.backend_tools.ToolYScale.set_scale", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.ToolZoom", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ZoomPanBase`\n\nA Tool for zooming using a rectangle selector.\n\nCursor to use when the tool is active.\n\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\nAttribute to group 'radio' like tools (mutually exclusive).\n\n`str` that identifies the group or None if not belonging to a group.\n\n"}, {"name": "backend_tools.ToolZoom.cursor", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom.cursor", "type": "backend_tools", "text": "\nCursor to use when the tool is active.\n\n"}, {"name": "backend_tools.ToolZoom.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom.default_keymap", "type": "backend_tools", "text": "\nKeymap to associate with this tool.\n\n`list[str]`: List of keys that will trigger this tool when a keypress event is\nemitted on `self.figure.canvas`.\n\n"}, {"name": "backend_tools.ToolZoom.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom.description", "type": "backend_tools", "text": "\nDescription of the Tool.\n\n`str`: Tooltip used if the Tool is included in a Toolbar.\n\n"}, {"name": "backend_tools.ToolZoom.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom.image", "type": "backend_tools", "text": "\nFilename of the image.\n\n`str`: Filename of the image to use in a Toolbar. If None, the name is used as\na label in the toolbar button.\n\n"}, {"name": "backend_tools.ToolZoom.radio_group", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom.radio_group", "type": "backend_tools", "text": "\nAttribute to group 'radio' like tools (mutually exclusive).\n\n`str` that identifies the group or None if not belonging to a group.\n\n"}, {"name": "backend_tools.ViewsPositionsBase", "path": "backend_tools_api#matplotlib.backend_tools.ViewsPositionsBase", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolBase`\n\nBase class for `ToolHome`, `ToolBack` and `ToolForward`.\n\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ViewsPositionsBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ViewsPositionsBase.trigger", "type": "backend_tools", "text": "\nCalled when this tool gets used.\n\nThis method is called by `ToolManager.trigger_tool`.\n\nThe canvas event that caused this tool to be called.\n\nObject that requested the tool to be triggered.\n\nExtra data.\n\n"}, {"name": "backend_tools.ZoomPanBase", "path": "backend_tools_api#matplotlib.backend_tools.ZoomPanBase", "type": "backend_tools", "text": "\nBases: `matplotlib.backend_tools.ToolToggleBase`\n\nBase class for `ToolZoom` and `ToolPan`.\n\nRelease the canvas and disconnect press/release events.\n\nConnect press/release events and lock the canvas.\n\nCalls `enable` or `disable` based on `toggled` value.\n\n"}, {"name": "backend_tools.ZoomPanBase.disable()", "path": "backend_tools_api#matplotlib.backend_tools.ZoomPanBase.disable", "type": "backend_tools", "text": "\nRelease the canvas and disconnect press/release events.\n\n"}, {"name": "backend_tools.ZoomPanBase.enable()", "path": "backend_tools_api#matplotlib.backend_tools.ZoomPanBase.enable", "type": "backend_tools", "text": "\nConnect press/release events and lock the canvas.\n\n"}, {"name": "backend_tools.ZoomPanBase.scroll_zoom()", "path": "backend_tools_api#matplotlib.backend_tools.ZoomPanBase.scroll_zoom", "type": "backend_tools", "text": "\n\n"}, {"name": "backend_tools.ZoomPanBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ZoomPanBase.trigger", "type": "backend_tools", "text": "\nCalls `enable` or `disable` based on `toggled` value.\n\n"}, {"name": "backend_webagg", "path": "backend_webagg_api", "type": "backend_webagg", "text": "\nDisplays Agg images in the browser, with interactivity\n\nalias of `matplotlib.backends.backend_webagg.FigureCanvasWebAgg`\n\nBases: `matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore`\n\nBases: `threading.Thread`\n\nThis constructor should always be called with keyword arguments. Arguments\nare:\n\ngroup should be None; reserved for future extension when a ThreadGroup class\nis implemented.\n\ntarget is the callable object to be invoked by the run() method. Defaults to\nNone, meaning nothing is called.\n\nname is the thread name. By default, a unique name is constructed of the form\n\"Thread-N\" where N is a small decimal number.\n\nargs is the argument tuple for the target invocation. Defaults to ().\n\nkwargs is a dictionary of keyword arguments for the target invocation.\nDefaults to {}.\n\nIf a subclass overrides the constructor, it must make sure to invoke the base\nclass constructor (Thread.__init__()) before doing anything else to the\nthread.\n\nMethod representing the thread's activity.\n\nYou may override this method in a subclass. The standard run() method invokes\nthe callable object passed to the object's constructor as the target argument,\nif any, with sequential and keyword arguments taken from the args and kwargs\narguments, respectively.\n\nBases: `tornado.web.Application`\n\nBases: `tornado.web.RequestHandler`\n\nBases: `tornado.web.RequestHandler`\n\nBases: `tornado.web.RequestHandler`\n\nBases: `tornado.web.RequestHandler`\n\nBases: `tornado.web.RequestHandler`\n\nBases: `tornado.websocket.WebSocketHandler`\n\nInvoked when the WebSocket is closed.\n\nIf the connection was closed cleanly and a status code or reason phrase was\nsupplied, these values will be available as the attributes `self.close_code`\nand `self.close_reason`.\n\nChanged in version 4.0: Added `close_code` and `close_reason` attributes.\n\nHandle incoming messages on the WebSocket\n\nThis method must be overridden.\n\nChanged in version 4.5: `on_message` can be a coroutine.\n\nInvoked when a new WebSocket is opened.\n\nThe arguments to `open` are extracted from the `tornado.web.URLSpec` regular\nexpression, just like the arguments to `tornado.web.RequestHandler.get`.\n\n`open` may be a coroutine. `on_message` will not be called until `open` has\nreturned.\n\nChanged in version 5.1: `open` may be a coroutine.\n\nShow all figures.\n\n`show` blocks by calling `mainloop` if block is `True`, or if it is `None` and\nwe are neither in IPython's `%pylab` mode, nor in `interactive` mode.\n\n"}, {"name": "backend_wxagg, backend_wxcairo", "path": "backend_wx_api", "type": "backend_wxagg, backend_wxcairo", "text": "\nNOTE These backends are not documented here, to avoid adding a dependency to\nbuilding the docs.\n\n"}, {"name": "backends", "path": "index_backend_api", "type": "backends", "text": "\n\n"}, {"name": "backends.backend_agg.FigureCanvas", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvas", "type": "backend_agg", "text": "\nalias of `matplotlib.backends.backend_agg.FigureCanvasAgg`\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg", "type": "backend_agg", "text": "\nBases: `matplotlib.backend_bases.FigureCanvasBase`\n\nGet the image as a `memoryview` to the renderer's buffer.\n\n`draw` must be called at least once before this function will work and to\nupdate the renderer for any subsequent changes to the Figure.\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nWrite the figure to a JPEG file.\n\nThe file to write to.\n\nAdditional keyword arguments that are passed to `PIL.Image.Image.save` when\nsaving the figure.\n\nWrite the figure to a JPEG file.\n\nThe file to write to.\n\nAdditional keyword arguments that are passed to `PIL.Image.Image.save` when\nsaving the figure.\n\nWrite the figure to a PNG file.\n\nThe file to write to.\n\nMetadata in the PNG file as key-value pairs of bytes or latin-1 encodable\nstrings. According to the PNG specification, keys must be shorter than 79\nchars.\n\nThe PNG specification defines some common keywords that may be used as\nappropriate:\n\nOther keywords may be invented for other purposes.\n\nIf 'Software' is not given, an autogenerated value for Matplotlib will be\nused. This can be removed by setting it to None.\n\nFor more details see the PNG specification.\n\nKeyword arguments passed to `PIL.Image.Image.save`.\n\nIf the 'pnginfo' key is present, it completely overrides metadata, including\nthe default 'Software' key.\n\nGet the image as ARGB `bytes`.\n\n`draw` must be called at least once before this function will work and to\nupdate the renderer for any subsequent changes to the Figure.\n\nGet the image as RGB `bytes`.\n\n`draw` must be called at least once before this function will work and to\nupdate the renderer for any subsequent changes to the Figure.\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.buffer_rgba()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.buffer_rgba", "type": "backend_agg", "text": "\nGet the image as a `memoryview` to the renderer's buffer.\n\n`draw` must be called at least once before this function will work and to\nupdate the renderer for any subsequent changes to the Figure.\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.copy_from_bbox()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.copy_from_bbox", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.draw()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "type": "backend_agg", "text": "\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.get_renderer()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.get_renderer", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.print_jpeg()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpeg", "type": "backend_agg", "text": "\nWrite the figure to a JPEG file.\n\nThe file to write to.\n\nAdditional keyword arguments that are passed to `PIL.Image.Image.save` when\nsaving the figure.\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.print_jpg()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg", "type": "backend_agg", "text": "\nWrite the figure to a JPEG file.\n\nThe file to write to.\n\nAdditional keyword arguments that are passed to `PIL.Image.Image.save` when\nsaving the figure.\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.print_png()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_png", "type": "backend_agg", "text": "\nWrite the figure to a PNG file.\n\nThe file to write to.\n\nMetadata in the PNG file as key-value pairs of bytes or latin-1 encodable\nstrings. According to the PNG specification, keys must be shorter than 79\nchars.\n\nThe PNG specification defines some common keywords that may be used as\nappropriate:\n\nOther keywords may be invented for other purposes.\n\nIf 'Software' is not given, an autogenerated value for Matplotlib will be\nused. This can be removed by setting it to None.\n\nFor more details see the PNG specification.\n\nKeyword arguments passed to `PIL.Image.Image.save`.\n\nIf the 'pnginfo' key is present, it completely overrides metadata, including\nthe default 'Software' key.\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.print_raw()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_raw", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.print_rgba()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_rgba", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.print_tif()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_tif", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.print_tiff()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_tiff", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.print_to_buffer()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_to_buffer", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.restore_region()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.restore_region", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.tostring_argb()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_argb", "type": "backend_agg", "text": "\nGet the image as ARGB `bytes`.\n\n`draw` must be called at least once before this function will work and to\nupdate the renderer for any subsequent changes to the Figure.\n\n"}, {"name": "backends.backend_agg.FigureCanvasAgg.tostring_rgb()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "type": "backend_agg", "text": "\nGet the image as RGB `bytes`.\n\n`draw` must be called at least once before this function will work and to\nupdate the renderer for any subsequent changes to the Figure.\n\n"}, {"name": "backends.backend_agg.get_hinting_flag()", "path": "backend_agg_api#matplotlib.backends.backend_agg.get_hinting_flag", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.RendererAgg", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg", "type": "backend_agg", "text": "\nBases: `matplotlib.backend_bases.RendererBase`\n\nThe renderer handles all the drawing primitives using a graphics context\ninstance that controls the colors/styles\n\nDraw mathtext using `matplotlib.mathtext`.\n\nDraw a `Path` instance using the given affine transform.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nReturn the canvas width and height in display coords.\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\nReturn whether image composition by Matplotlib should be skipped.\n\nRaster backends should usually return False (letting the C-level rasterizer\ntake care of image composition); vector backends should usually return `not\nrcParams[\"image.composite_image\"]`.\n\nReturn whether arbitrary affine transformations in `draw_image()` are\nsupported (True for most vector backends).\n\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\nRestore the saved region. If bbox (instance of BboxBase, or its extents) is\ngiven, only the region specified by the bbox will be restored. xy (a pair of\nfloats) optionally specifies the new position (the LLC of the original region,\nnot the LLC of the bbox) where the region will be restored.\n\nStart filtering. It simply create a new canvas (the old one is saved).\n\nSave the plot in the current canvas as a image and apply the post_processing\nfunction.\n\n# ny, nx, depth = image.shape # image (numpy array) has RGBA channels and has\na depth of 4. ... # create a new_image (numpy array of 4 channels, size can be\n# different). The resulting image may have offsets from # lower-left corner of\nthe original image return new_image, offset_x, offset_y\n\nThe saved renderer is restored and the returned image from post_processing is\nplotted (using draw_image) on it.\n\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "backends.backend_agg.RendererAgg.buffer_rgba()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.buffer_rgba", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.RendererAgg.clear()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.clear", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.RendererAgg.draw_mathtext()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.draw_mathtext", "type": "backend_agg", "text": "\nDraw mathtext using `matplotlib.mathtext`.\n\n"}, {"name": "backends.backend_agg.RendererAgg.draw_path()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.draw_path", "type": "backend_agg", "text": "\nDraw a `Path` instance using the given affine transform.\n\n"}, {"name": "backends.backend_agg.RendererAgg.draw_tex()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.draw_tex", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.RendererAgg.draw_text()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.draw_text", "type": "backend_agg", "text": "\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\n"}, {"name": "backends.backend_agg.RendererAgg.get_canvas_width_height()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.get_canvas_width_height", "type": "backend_agg", "text": "\nReturn the canvas width and height in display coords.\n\n"}, {"name": "backends.backend_agg.RendererAgg.get_content_extents()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.get_content_extents", "type": "backend_agg", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "backends.backend_agg.RendererAgg.get_text_width_height_descent()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.get_text_width_height_descent", "type": "backend_agg", "text": "\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\n"}, {"name": "backends.backend_agg.RendererAgg.lock", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.lock", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.RendererAgg.option_image_nocomposite()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.option_image_nocomposite", "type": "backend_agg", "text": "\nReturn whether image composition by Matplotlib should be skipped.\n\nRaster backends should usually return False (letting the C-level rasterizer\ntake care of image composition); vector backends should usually return `not\nrcParams[\"image.composite_image\"]`.\n\n"}, {"name": "backends.backend_agg.RendererAgg.option_scale_image()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.option_scale_image", "type": "backend_agg", "text": "\nReturn whether arbitrary affine transformations in `draw_image()` are\nsupported (True for most vector backends).\n\n"}, {"name": "backends.backend_agg.RendererAgg.points_to_pixels()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.points_to_pixels", "type": "backend_agg", "text": "\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\n"}, {"name": "backends.backend_agg.RendererAgg.restore_region()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.restore_region", "type": "backend_agg", "text": "\nRestore the saved region. If bbox (instance of BboxBase, or its extents) is\ngiven, only the region specified by the bbox will be restored. xy (a pair of\nfloats) optionally specifies the new position (the LLC of the original region,\nnot the LLC of the bbox) where the region will be restored.\n\n"}, {"name": "backends.backend_agg.RendererAgg.start_filter()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.start_filter", "type": "backend_agg", "text": "\nStart filtering. It simply create a new canvas (the old one is saved).\n\n"}, {"name": "backends.backend_agg.RendererAgg.stop_filter()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.stop_filter", "type": "backend_agg", "text": "\nSave the plot in the current canvas as a image and apply the post_processing\nfunction.\n\n# ny, nx, depth = image.shape # image (numpy array) has RGBA channels and has\na depth of 4. ... # create a new_image (numpy array of 4 channels, size can be\n# different). The resulting image may have offsets from # lower-left corner of\nthe original image return new_image, offset_x, offset_y\n\nThe saved renderer is restored and the returned image from post_processing is\nplotted (using draw_image) on it.\n\n"}, {"name": "backends.backend_agg.RendererAgg.tostring_argb()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.tostring_argb", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.RendererAgg.tostring_rgb()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.tostring_rgb", "type": "backend_agg", "text": "\n\n"}, {"name": "backends.backend_agg.RendererAgg.tostring_rgba_minimized()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.tostring_rgba_minimized", "type": "backend_agg", "text": "\n[Deprecated]\n\nDeprecated since version 3.4:\n\n"}, {"name": "backends.backend_cairo.FigureCanvas", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvas", "type": "backend_cairo", "text": "\nalias of `matplotlib.backends.backend_cairo.FigureCanvasCairo`\n\n"}, {"name": "backends.backend_cairo.FigureCanvasCairo", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo", "type": "backend_cairo", "text": "\nBases: `matplotlib.backend_bases.FigureCanvasBase`\n\n"}, {"name": "backends.backend_cairo.FigureCanvasCairo.copy_from_bbox()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.copy_from_bbox", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_pdf()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_pdf", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_png()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_png", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_ps()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_ps", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_raw()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_raw", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_rgba()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_rgba", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_svg()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_svg", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_svgz()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_svgz", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_cairo.FigureCanvasCairo.restore_region()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.restore_region", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo", "type": "backend_cairo", "text": "\nBases: `matplotlib.backend_bases.GraphicsContextBase`\n\nReturn a tuple of three or four floats from 0-1.\n\nRestore the graphics context from the stack - needed only for backends that\nsave graphics contexts on a stack.\n\nSet the alpha value used for blending - not supported on all backends.\n\nIf `alpha=None` (the default), the alpha components of the foreground and fill\ncolors will be used to set their respective transparencies (where applicable);\notherwise, `alpha` will override them.\n\nSet whether object should be drawn with antialiased rendering.\n\nSet how to draw endpoints of lines.\n\nSet the clip path to a `TransformedPath` or None.\n\nSet the clip rectangle to a `Bbox` or None.\n\nSet the dash style for the gc.\n\nThe offset (usually 0).\n\nThe on-off sequence as points. None specifies a solid line.\n\nSee p. 107 of to PostScript blue book for more info.\n\nSet the foreground color.\n\nIf fg is known to be an `(r, g, b, a)` tuple, isRGBA can be set to True to\nimprove performance.\n\nSet how to draw connections between line segments.\n\nSet the linewidth in points.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.get_rgb()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.get_rgb", "type": "backend_cairo", "text": "\nReturn a tuple of three or four floats from 0-1.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.restore()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.restore", "type": "backend_cairo", "text": "\nRestore the graphics context from the stack - needed only for backends that\nsave graphics contexts on a stack.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_alpha()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_alpha", "type": "backend_cairo", "text": "\nSet the alpha value used for blending - not supported on all backends.\n\nIf `alpha=None` (the default), the alpha components of the foreground and fill\ncolors will be used to set their respective transparencies (where applicable);\notherwise, `alpha` will override them.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_antialiased()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_antialiased", "type": "backend_cairo", "text": "\nSet whether object should be drawn with antialiased rendering.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_capstyle()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle", "type": "backend_cairo", "text": "\nSet how to draw endpoints of lines.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_clip_path()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_path", "type": "backend_cairo", "text": "\nSet the clip path to a `TransformedPath` or None.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_clip_rectangle()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_rectangle", "type": "backend_cairo", "text": "\nSet the clip rectangle to a `Bbox` or None.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_dashes()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes", "type": "backend_cairo", "text": "\nSet the dash style for the gc.\n\nThe offset (usually 0).\n\nThe on-off sequence as points. None specifies a solid line.\n\nSee p. 107 of to PostScript blue book for more info.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_foreground()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground", "type": "backend_cairo", "text": "\nSet the foreground color.\n\nIf fg is known to be an `(r, g, b, a)` tuple, isRGBA can be set to True to\nimprove performance.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_joinstyle()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle", "type": "backend_cairo", "text": "\nSet how to draw connections between line segments.\n\n"}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_linewidth()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_linewidth", "type": "backend_cairo", "text": "\nSet the linewidth in points.\n\n"}, {"name": "backends.backend_cairo.RendererCairo", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo", "type": "backend_cairo", "text": "\nBases: `matplotlib.backend_bases.RendererBase`\n\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\nDraw a marker at each of path's vertices (excluding control points).\n\nThis provides a fallback implementation of draw_markers that makes multiple\ncalls to `draw_path()`. Some backends may want to override this method in\norder to draw the marker only once and reuse it multiple times.\n\nThe graphics context.\n\nAn affine transform applied to the marker.\n\nAn affine transform applied to the path.\n\nDraw a `Path` instance using the given affine transform.\n\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\nReturn the canvas width and height in display coords.\n\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\nReturn an instance of a `GraphicsContextBase`.\n\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\n"}, {"name": "backends.backend_cairo.RendererCairo.draw_image()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.draw_image", "type": "backend_cairo", "text": "\nDraw an RGBA image.\n\nA graphics context with clipping information.\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side\nof the canvas.\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of\nthe canvas.\n\nAn array of RGBA pixels.\n\nIf and only if the concrete backend is written such that\n`option_scale_image()` returns `True`, an affine transformation (i.e., an\n`Affine2DBase`) may be passed to `draw_image()`. The translation vector of the\ntransformation is given in physical units (i.e., dots or pixels). Note that\nthe transformation does not override x and y, and has to be applied before\ntranslating the result by x and y (this can be accomplished by adding x and y\nto the translation vector defined by transform).\n\n"}, {"name": "backends.backend_cairo.RendererCairo.draw_markers()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.draw_markers", "type": "backend_cairo", "text": "\nDraw a marker at each of path's vertices (excluding control points).\n\nThis provides a fallback implementation of draw_markers that makes multiple\ncalls to `draw_path()`. Some backends may want to override this method in\norder to draw the marker only once and reuse it multiple times.\n\nThe graphics context.\n\nAn affine transform applied to the marker.\n\nAn affine transform applied to the path.\n\n"}, {"name": "backends.backend_cairo.RendererCairo.draw_path()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.draw_path", "type": "backend_cairo", "text": "\nDraw a `Path` instance using the given affine transform.\n\n"}, {"name": "backends.backend_cairo.RendererCairo.draw_text()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.draw_text", "type": "backend_cairo", "text": "\nDraw the text instance.\n\nThe graphics context.\n\nThe x location of the text in display coords.\n\nThe y location of the text baseline in display coords.\n\nThe text string.\n\nThe font properties.\n\nThe rotation angle in degrees anti-clockwise.\n\nThe original text object to be rendered.\n\nNote for backend implementers:\n\nWhen you are trying to determine if you have gotten your bounding box right\n(which is what enables the text layout/alignment to work properly), it helps\nto change the line in text.py:\n\nto if 1, and then the actual bounding box will be plotted along with your\ntext.\n\n"}, {"name": "backends.backend_cairo.RendererCairo.get_canvas_width_height()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.get_canvas_width_height", "type": "backend_cairo", "text": "\nReturn the canvas width and height in display coords.\n\n"}, {"name": "backends.backend_cairo.RendererCairo.get_text_width_height_descent()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.get_text_width_height_descent", "type": "backend_cairo", "text": "\nGet the width, height, and descent (offset from the bottom to the baseline),\nin display coords, of the string s with `FontProperties` prop.\n\n"}, {"name": "backends.backend_cairo.RendererCairo.new_gc()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.new_gc", "type": "backend_cairo", "text": "\nReturn an instance of a `GraphicsContextBase`.\n\n"}, {"name": "backends.backend_cairo.RendererCairo.points_to_pixels()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels", "type": "backend_cairo", "text": "\nConvert points to display units.\n\nYou need to override this function (unless your backend doesn't have a dpi,\ne.g., postscript or svg). Some imaging systems assume some value for pixels\nper inch:\n\na float or a numpy array of float\n\n"}, {"name": "backends.backend_cairo.RendererCairo.set_ctx_from_surface()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.set_ctx_from_surface", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_cairo.RendererCairo.set_width_height()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.set_width_height", "type": "backend_cairo", "text": "\n\n"}, {"name": "backends.backend_mixed.MixedModeRenderer", "path": "backend_mixed_api#matplotlib.backends.backend_mixed.MixedModeRenderer", "type": "backend_mixed", "text": "\nBases: `object`\n\nA helper class to implement a renderer that switches between vector and raster\ndrawing. An example may be a PDF writer, where most things are drawn with PDF\nvector commands, but some very complex objects, such as quad meshes, are\nrasterised and then output as images.\n\nThe figure instance.\n\nThe width of the canvas in logical units\n\nThe height of the canvas in logical units\n\nThe dpi of the canvas\n\nAn instance of a subclass of `RendererBase` that will be used for the vector\ndrawing.\n\nThe renderer class to use for the raster drawing. If not provided, this will\nuse the Agg backend (which is currently the only viable option anyway.)\n\nEnter \"raster\" mode. All subsequent drawing commands (until `stop_rasterizing`\nis called) will be drawn with the raster backend.\n\nExit \"raster\" mode. All of the drawing that was done since the last\n`start_rasterizing` call will be copied to the vector backend by calling\ndraw_image.\n\n"}, {"name": "backends.backend_mixed.MixedModeRenderer.start_rasterizing()", "path": "backend_mixed_api#matplotlib.backends.backend_mixed.MixedModeRenderer.start_rasterizing", "type": "backend_mixed", "text": "\nEnter \"raster\" mode. All subsequent drawing commands (until `stop_rasterizing`\nis called) will be drawn with the raster backend.\n\n"}, {"name": "backends.backend_mixed.MixedModeRenderer.stop_rasterizing()", "path": "backend_mixed_api#matplotlib.backends.backend_mixed.MixedModeRenderer.stop_rasterizing", "type": "backend_mixed", "text": "\nExit \"raster\" mode. All of the drawing that was done since the last\n`start_rasterizing` call will be copied to the vector backend by calling\ndraw_image.\n\n"}, {"name": "backends.backend_nbagg.CommSocket", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket", "type": "backend_nbagg", "text": "\nBases: `object`\n\nManages the Comm connection between IPython and the browser (client).\n\nComms are 2 way, with the CommSocket being able to publish a message via the\nsend_json method, and handle a message with on_message. On the JS side\nfigure.send_message and figure.ws.onmessage do the sending and receiving\nrespectively.\n\n"}, {"name": "backends.backend_nbagg.CommSocket.is_open()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket.is_open", "type": "backend_nbagg", "text": "\n\n"}, {"name": "backends.backend_nbagg.CommSocket.on_close()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket.on_close", "type": "backend_nbagg", "text": "\n\n"}, {"name": "backends.backend_nbagg.CommSocket.on_message()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket.on_message", "type": "backend_nbagg", "text": "\n\n"}, {"name": "backends.backend_nbagg.CommSocket.send_binary()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket.send_binary", "type": "backend_nbagg", "text": "\n\n"}, {"name": "backends.backend_nbagg.CommSocket.send_json()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket.send_json", "type": "backend_nbagg", "text": "\n\n"}, {"name": "backends.backend_nbagg.connection_info()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.connection_info", "type": "backend_nbagg", "text": "\nReturn a string showing the figure and connection status for the backend.\n\nThis is intended as a diagnostic tool, and not for general use.\n\n"}, {"name": "backends.backend_nbagg.FigureCanvas", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureCanvas", "type": "backend_nbagg", "text": "\nalias of `matplotlib.backends.backend_nbagg.FigureCanvasNbAgg`\n\n"}, {"name": "backends.backend_nbagg.FigureCanvasNbAgg", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureCanvasNbAgg", "type": "backend_nbagg", "text": "\nBases: `matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore`\n\n"}, {"name": "backends.backend_nbagg.FigureManager", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManager", "type": "backend_nbagg", "text": "\nalias of `matplotlib.backends.backend_nbagg.FigureManagerNbAgg`\n\n"}, {"name": "backends.backend_nbagg.FigureManagerNbAgg", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg", "type": "backend_nbagg", "text": "\nBases: `matplotlib.backends.backend_webagg_core.FigureManagerWebAgg`\n\nalias of `matplotlib.backends.backend_nbagg.NavigationIPy`\n\nClear up any closed Comms.\n\nA special method to re-show the figure in the notebook.\n\nFor GUI backends, show the figure window and redraw. For non-GUI backends,\nraise an exception, unless running headless (i.e. on Linux with an unset\nDISPLAY); this exception is converted to a warning in `Figure.show`.\n\n"}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.clearup_closed()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.clearup_closed", "type": "backend_nbagg", "text": "\nClear up any closed Comms.\n\n"}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.destroy()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.destroy", "type": "backend_nbagg", "text": "\n\n"}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.display_js()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.display_js", "type": "backend_nbagg", "text": "\n\n"}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.get_javascript()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.get_javascript", "type": "backend_nbagg", "text": "\n\n"}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.remove_comm()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.remove_comm", "type": "backend_nbagg", "text": "\n\n"}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.reshow()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.reshow", "type": "backend_nbagg", "text": "\nA special method to re-show the figure in the notebook.\n\n"}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.show()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.show", "type": "backend_nbagg", "text": "\nFor GUI backends, show the figure window and redraw. For non-GUI backends,\nraise an exception, unless running headless (i.e. on Linux with an unset\nDISPLAY); this exception is converted to a warning in `Figure.show`.\n\n"}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.ToolbarCls", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.ToolbarCls", "type": "backend_nbagg", "text": "\nalias of `matplotlib.backends.backend_nbagg.NavigationIPy`\n\n"}, {"name": "backends.backend_nbagg.NavigationIPy", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.NavigationIPy", "type": "backend_nbagg", "text": "\nBases: `matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg`\n\n"}, {"name": "backends.backend_nbagg.NavigationIPy.toolitems", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.NavigationIPy.toolitems", "type": "backend_nbagg", "text": "\n\n"}, {"name": "backends.backend_nbagg.new_figure_manager_given_figure()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.new_figure_manager_given_figure", "type": "backend_nbagg", "text": "\nCreate a new figure manager instance for the given figure.\n\n"}, {"name": "backends.backend_nbagg.show()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.show", "type": "backend_nbagg", "text": "\nShow all figures.\n\n`show` blocks by calling `mainloop` if block is `True`, or if it is `None` and\nwe are neither in IPython's `%pylab` mode, nor in `interactive` mode.\n\n"}, {"name": "backends.backend_pdf.FigureCanvas", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvas", "type": "backend_pdf", "text": "\nalias of `matplotlib.backends.backend_pdf.FigureCanvasPdf`\n\n"}, {"name": "backends.backend_pdf.FigureCanvasPdf", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf", "type": "backend_pdf", "text": "\nBases: `matplotlib.backend_bases.FigureCanvasBase`\n\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\nReturn the default savefig file format as specified in\n`rcParams[\"savefig.format\"]` (default: `'png'`).\n\nThe returned string does not include a period. This method is overridden in\nbackends that only support a single file type.\n\n"}, {"name": "backends.backend_pdf.FigureCanvasPdf.draw()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf.draw", "type": "backend_pdf", "text": "\nRender the `Figure`.\n\nIt is important that this method actually walk the artist tree even if not\noutput is produced because this will trigger deferred work (like computing\nlimits auto-limits and tick values) that users may want access to before\nsaving to disk.\n\n"}, {"name": "backends.backend_pdf.FigureCanvasPdf.filetypes", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf.filetypes", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.FigureCanvasPdf.fixed_dpi", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf.fixed_dpi", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.FigureCanvasPdf.get_default_filetype()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf.get_default_filetype", "type": "backend_pdf", "text": "\nReturn the default savefig file format as specified in\n`rcParams[\"savefig.format\"]` (default: `'png'`).\n\nThe returned string does not include a period. This method is overridden in\nbackends that only support a single file type.\n\n"}, {"name": "backends.backend_pdf.FigureCanvasPdf.print_pdf()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf.print_pdf", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.fill()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.fill", "type": "backend_pdf", "text": "\nMake one string from sequence of strings, with whitespace in between.\n\nThe whitespace is chosen to form lines of at most linelen characters, if\npossible.\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf", "type": "backend_pdf", "text": "\nBases: `matplotlib.backend_bases.GraphicsContextBase`\n\nSet clip rectangle. Calls `pop()` and `push()`.\n\nCopy properties of other into self.\n\nCopy properties of other into self and return PDF commands needed to transform\nself into other.\n\nPredicate: does the path need to be filled?\n\nAn optional argument can be used to specify an alternative _fillcolor, as\nneeded by RendererPdf.draw_markers.\n\nMake sure every pushed graphics state is popped.\n\nReturn the appropriate pdf operator to cause the path to be stroked, filled,\nor both.\n\nPredicate: does the path need to be stroked (its outline drawn)? This tests\nfor the various conditions that disable stroking the path, in which case it\nwould presumably be filled.\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.alpha_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.alpha_cmd", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.capstyle_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.capstyle_cmd", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.capstyles", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.capstyles", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.clip_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.clip_cmd", "type": "backend_pdf", "text": "\nSet clip rectangle. Calls `pop()` and `push()`.\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.commands", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.commands", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.copy_properties()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.copy_properties", "type": "backend_pdf", "text": "\nCopy properties of other into self.\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.dash_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.dash_cmd", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.delta()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.delta", "type": "backend_pdf", "text": "\nCopy properties of other into self and return PDF commands needed to transform\nself into other.\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.fill()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.fill", "type": "backend_pdf", "text": "\nPredicate: does the path need to be filled?\n\nAn optional argument can be used to specify an alternative _fillcolor, as\nneeded by RendererPdf.draw_markers.\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.fillcolor_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.fillcolor_cmd", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.finalize()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.finalize", "type": "backend_pdf", "text": "\nMake sure every pushed graphics state is popped.\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.hatch_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.hatch_cmd", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.joinstyle_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.joinstyle_cmd", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.joinstyles", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.joinstyles", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.linewidth_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.linewidth_cmd", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.paint()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.paint", "type": "backend_pdf", "text": "\nReturn the appropriate pdf operator to cause the path to be stroked, filled,\nor both.\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.pop()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.pop", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.push()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.push", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.rgb_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.rgb_cmd", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.GraphicsContextPdf.stroke()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.stroke", "type": "backend_pdf", "text": "\nPredicate: does the path need to be stroked (its outline drawn)? This tests\nfor the various conditions that disable stroking the path, in which case it\nwould presumably be filled.\n\n"}, {"name": "backends.backend_pdf.Name", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Name", "type": "backend_pdf", "text": "\nBases: `object`\n\nPDF name object.\n\n"}, {"name": "backends.backend_pdf.Name.hexify()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Name.hexify", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Name.name", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Name.name", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Name.pdfRepr()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Name.pdfRepr", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op", "type": "backend_pdf", "text": "\nBases: `matplotlib.backends.backend_pdf.Operator`, `enum.Enum`\n\nAn enumeration.\n\nReturn the PDF operator to paint a path.\n\nFill the path with the fill color.\n\nStroke the outline of the path with the line color.\n\n"}, {"name": "backends.backend_pdf.Op.begin_text", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.begin_text", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.clip", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.clip", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.close_fill_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.close_fill_stroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.close_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.close_stroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.closepath", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.closepath", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.concat_matrix", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.concat_matrix", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.curveto", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.curveto", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.end_text", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.end_text", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.endpath", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.endpath", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.fill", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.fill", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.fill_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.fill_stroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.grestore", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.grestore", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.gsave", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.gsave", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.lineto", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.lineto", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.moveto", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.moveto", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.op", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.op", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.paint_path()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.paint_path", "type": "backend_pdf", "text": "\nReturn the PDF operator to paint a path.\n\nFill the path with the fill color.\n\nStroke the outline of the path with the line color.\n\n"}, {"name": "backends.backend_pdf.Op.rectangle", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.rectangle", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.selectfont", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.selectfont", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setcolor_nonstroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setcolor_nonstroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setcolor_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setcolor_stroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setcolorspace_nonstroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setcolorspace_nonstroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setcolorspace_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setcolorspace_stroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setdash", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setdash", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setgray_nonstroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setgray_nonstroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setgray_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setgray_stroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setgstate", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setgstate", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setlinecap", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setlinecap", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setlinejoin", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setlinejoin", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setlinewidth", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setlinewidth", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setrgb_nonstroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setrgb_nonstroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.setrgb_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setrgb_stroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.shading", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.shading", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.show", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.show", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.showkern", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.showkern", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.stroke", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.textmatrix", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.textmatrix", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.textpos", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.textpos", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Op.use_xobject", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.use_xobject", "type": "backend_pdf", "text": "\n\n"}, {"name": "backends.backend_pdf.Operator", "path": "backend_pdf_api#mat