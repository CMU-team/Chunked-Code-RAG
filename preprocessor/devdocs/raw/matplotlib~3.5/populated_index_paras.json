[{"name": "_api", "path": "_api_api", "type": "_api", "text": ["Helper functions for managing the Matplotlib API.", "This documentation is only relevant for Matplotlib developers, not for users.", "Warning", "This module and its submodules are for internal use only. Do not use them in your own code. We may change the API at any time with no warning.", "Helper decorator for implementing module-level __getattr__ as a class.", "This decorator must be used at the module toplevel as follows:", "The __getattr__ class will be replaced by a __getattr__ function such that trying to access name on the module will resolve the corresponding property (which may be decorated e.g. with _api.deprecated for deprecating module globals). The properties are all implicitly cached. Moreover, a suitable AttributeError is generated and raised if no property with the given name exists.", "kwargs must consist of a single key, value pair. If key is in _mapping, return _mapping[value]; else, raise an appropriate ValueError.", "For each key, value pair in kwargs, check that value is in _values.", "Sequence of values to check on.", "Whether to print _values when raising ValueError.", "key, value pairs as keyword arguments to find in _values.", "If any value in kwargs is not found in _values.", "For each key, value pair in kwargs, check that value is an instance of one of _types; if not, raise an appropriate TypeError.", "As a special case, a None entry in _types is treated as NoneType.", "For each key, value pair in kwargs, check that value has the shape _shape, if not, raise an appropriate ValueError.", "None in the shape is treated as a \"free\" size that can have any length. e.g. (None, 2) -> (N, 2)", "The values checked must be numpy arrays.", "To check for (N, 2) shaped arrays", "Bases: object", "Like property, but also triggers on access via the class, and it is the class that's passed as argument.", "Select and call the function that accepts *args, **kwargs.", "funcs is a list of functions which should not raise any exception (other than TypeError if the arguments passed do not match their signature).", "select_matching_signature tries to call each of the functions in funcs with *args, **kwargs (in the order in which they are given). Calls that fail with a TypeError are silently skipped. As soon as a call succeeds, select_matching_signature returns its return value. If no function accepts *args, **kwargs, then the TypeError raised by the last failing call is re-raised.", "Callers should normally make sure that any *args, **kwargs can only bind a single func (to avoid any ambiguity), although this is not checked by select_matching_signature.", "select_matching_signature is intended to help implementing signature-overloaded functions. In general, such functions should be avoided, except for back-compatibility concerns. A typical use pattern is", "which allows my_func to be called either with two parameters (old1 and old2) or a single one (new). Note that the new signature is given last, so that callers get a TypeError corresponding to the new signature if the arguments they passed in do not match any signature.", "warnings.warn wrapper that sets stacklevel to \"outside Matplotlib\".", "The original emitter of the warning can be obtained by patching this function back to warnings.warn, i.e. _api.warn_external =\nwarnings.warn (or functools.partial(warnings.warn, stacklevel=2), etc.).", "Helper functions for deprecating parts of the Matplotlib API.", "This documentation is only relevant for Matplotlib developers, not for users.", "Warning", "This module is for internal use only. Do not use it in your own code. We may change the API at any time with no warning.", "Bases: DeprecationWarning", "A class for issuing deprecation warnings for Matplotlib users.", "Decorator indicating that parameter name of func is being deprecated.", "The actual implementation of func should keep the name parameter in its signature, or accept a **kwargs argument (through which name would be passed).", "Parameters that come after the deprecated parameter effectively become keyword-only (as they cannot be passed positionally without triggering the DeprecationWarning on the deprecated parameter), and should be marked as such after the deprecation period has passed and the deprecated parameter is removed.", "Parameters other than since, name, and func are keyword-only and forwarded to warn_deprecated.", "Return obj.method with a deprecation if it was overridden, else None.", "An unbound method, i.e. an expression of the form Class.method_name. Remember that within the body of a method, one can always use __class__ to refer to the class that is currently being defined.", "Either an object of the class where method is defined, or a subclass of that class.", "Whether to allow overrides by \"empty\" methods without emitting a warning.", "Additional parameters passed to warn_deprecated to generate the deprecation warning; must at least include the \"since\" key.", "Bases: object", "Helper to deprecate public access to an attribute (or method).", "This helper should only be used at class scope, as follows:", "where all parameters are forwarded to deprecated. This form makes attr a property which forwards read and write access to self._attr (same name but with a leading underscore), with a deprecation warning. Note that the attribute name is derived from the name this helper is assigned to. This helper also works for deprecating methods.", "Decorator to mark a function, a class, or a property as deprecated.", "When deprecating a classmethod, a staticmethod, or a property, the @deprecated decorator should go under @classmethod and @staticmethod (i.e., deprecated should directly decorate the underlying callable), but over @property.", "When deprecating a class C intended to be used as a base class in a multiple inheritance hierarchy, C must define an __init__ method (if C instead inherited its __init__ from its own base class, then @deprecated would mess up __init__ inheritance when installing its own (deprecation-emitting) C.__init__).", "Parameters are the same as for warn_deprecated, except that obj_type defaults to 'class' if decorating a class, 'attribute' if decorating a property, and 'function' otherwise.", "Decorator indicating that passing parameter name (or any of the following ones) positionally to func is being deprecated.", "When used on a method that has a pyplot wrapper, this should be the outermost decorator, so that boilerplate.py can access the original signature.", "alias of matplotlib._api.deprecation.MatplotlibDeprecationWarning", "Decorator indicating that parameter old of func is renamed to new.", "The actual implementation of func should use new, not old. If old is passed to func, a DeprecationWarning is emitted, and its value is used, even if new is also passed by keyword (this is to simplify pyplot wrapper functions, which always pass new explicitly to the Axes method). If new is also passed but positionally, a TypeError will be raised by the underlying function during argument binding.", "Display a standardized deprecation.", "The release at which this API became deprecated.", "Override the default deprecation message. The %(since)s, %(name)s, %(alternative)s, %(obj_type)s, %(addendum)s, and %(removal)s format specifiers will be replaced by the values of the respective arguments passed to this function.", "The name of the deprecated object.", "An alternative API that the user may use in place of the deprecated API. The deprecation warning will tell the user about this alternative if provided.", "If True, uses a PendingDeprecationWarning instead of a DeprecationWarning. Cannot be used together with removal.", "The object type being deprecated.", "Additional text appended directly to the final message.", "The expected removal version. With the default (an empty string), a removal version is automatically computed from since. Set to other Falsy values to not schedule a removal date. Cannot be used together with pending."]}, {"name": "_api.caching_module_getattr()", "path": "_api_api#matplotlib._api.caching_module_getattr", "type": "_api", "text": ["Helper decorator for implementing module-level __getattr__ as a class.", "This decorator must be used at the module toplevel as follows:", "The __getattr__ class will be replaced by a __getattr__ function such that trying to access name on the module will resolve the corresponding property (which may be decorated e.g. with _api.deprecated for deprecating module globals). The properties are all implicitly cached. Moreover, a suitable AttributeError is generated and raised if no property with the given name exists."]}, {"name": "_api.check_getitem()", "path": "_api_api#matplotlib._api.check_getitem", "type": "_api", "text": ["kwargs must consist of a single key, value pair. If key is in _mapping, return _mapping[value]; else, raise an appropriate ValueError."]}, {"name": "_api.check_in_list()", "path": "_api_api#matplotlib._api.check_in_list", "type": "_api", "text": ["For each key, value pair in kwargs, check that value is in _values.", "Sequence of values to check on.", "Whether to print _values when raising ValueError.", "key, value pairs as keyword arguments to find in _values.", "If any value in kwargs is not found in _values."]}, {"name": "_api.check_isinstance()", "path": "_api_api#matplotlib._api.check_isinstance", "type": "_api", "text": ["For each key, value pair in kwargs, check that value is an instance of one of _types; if not, raise an appropriate TypeError.", "As a special case, a None entry in _types is treated as NoneType."]}, {"name": "_api.check_shape()", "path": "_api_api#matplotlib._api.check_shape", "type": "_api", "text": ["For each key, value pair in kwargs, check that value has the shape _shape, if not, raise an appropriate ValueError.", "None in the shape is treated as a \"free\" size that can have any length. e.g. (None, 2) -> (N, 2)", "The values checked must be numpy arrays.", "To check for (N, 2) shaped arrays"]}, {"name": "_api.classproperty", "path": "_api_api#matplotlib._api.classproperty", "type": "_api", "text": ["Bases: object", "Like property, but also triggers on access via the class, and it is the class that's passed as argument."]}, {"name": "_api.deprecation.delete_parameter()", "path": "_api_api#matplotlib._api.deprecation.delete_parameter", "type": "_api", "text": ["Decorator indicating that parameter name of func is being deprecated.", "The actual implementation of func should keep the name parameter in its signature, or accept a **kwargs argument (through which name would be passed).", "Parameters that come after the deprecated parameter effectively become keyword-only (as they cannot be passed positionally without triggering the DeprecationWarning on the deprecated parameter), and should be marked as such after the deprecation period has passed and the deprecated parameter is removed.", "Parameters other than since, name, and func are keyword-only and forwarded to warn_deprecated."]}, {"name": "_api.deprecation.deprecate_method_override()", "path": "_api_api#matplotlib._api.deprecation.deprecate_method_override", "type": "_api", "text": ["Return obj.method with a deprecation if it was overridden, else None.", "An unbound method, i.e. an expression of the form Class.method_name. Remember that within the body of a method, one can always use __class__ to refer to the class that is currently being defined.", "Either an object of the class where method is defined, or a subclass of that class.", "Whether to allow overrides by \"empty\" methods without emitting a warning.", "Additional parameters passed to warn_deprecated to generate the deprecation warning; must at least include the \"since\" key."]}, {"name": "_api.deprecation.deprecate_privatize_attribute", "path": "_api_api#matplotlib._api.deprecation.deprecate_privatize_attribute", "type": "_api", "text": ["Bases: object", "Helper to deprecate public access to an attribute (or method).", "This helper should only be used at class scope, as follows:", "where all parameters are forwarded to deprecated. This form makes attr a property which forwards read and write access to self._attr (same name but with a leading underscore), with a deprecation warning. Note that the attribute name is derived from the name this helper is assigned to. This helper also works for deprecating methods."]}, {"name": "_api.deprecation.deprecated()", "path": "_api_api#matplotlib._api.deprecation.deprecated", "type": "_api", "text": ["Decorator to mark a function, a class, or a property as deprecated.", "When deprecating a classmethod, a staticmethod, or a property, the @deprecated decorator should go under @classmethod and @staticmethod (i.e., deprecated should directly decorate the underlying callable), but over @property.", "When deprecating a class C intended to be used as a base class in a multiple inheritance hierarchy, C must define an __init__ method (if C instead inherited its __init__ from its own base class, then @deprecated would mess up __init__ inheritance when installing its own (deprecation-emitting) C.__init__).", "Parameters are the same as for warn_deprecated, except that obj_type defaults to 'class' if decorating a class, 'attribute' if decorating a property, and 'function' otherwise."]}, {"name": "_api.deprecation.make_keyword_only()", "path": "_api_api#matplotlib._api.deprecation.make_keyword_only", "type": "_api", "text": ["Decorator indicating that passing parameter name (or any of the following ones) positionally to func is being deprecated.", "When used on a method that has a pyplot wrapper, this should be the outermost decorator, so that boilerplate.py can access the original signature."]}, {"name": "_api.deprecation.MatplotlibDeprecationWarning", "path": "_api_api#matplotlib._api.deprecation.MatplotlibDeprecationWarning", "type": "_api", "text": ["Bases: DeprecationWarning", "A class for issuing deprecation warnings for Matplotlib users."]}, {"name": "_api.deprecation.mplDeprecation", "path": "_api_api#matplotlib._api.deprecation.mplDeprecation", "type": "_api", "text": ["alias of matplotlib._api.deprecation.MatplotlibDeprecationWarning"]}, {"name": "_api.deprecation.rename_parameter()", "path": "_api_api#matplotlib._api.deprecation.rename_parameter", "type": "_api", "text": ["Decorator indicating that parameter old of func is renamed to new.", "The actual implementation of func should use new, not old. If old is passed to func, a DeprecationWarning is emitted, and its value is used, even if new is also passed by keyword (this is to simplify pyplot wrapper functions, which always pass new explicitly to the Axes method). If new is also passed but positionally, a TypeError will be raised by the underlying function during argument binding."]}, {"name": "_api.deprecation.suppress_matplotlib_deprecation_warning()", "path": "_api_api#matplotlib._api.deprecation.suppress_matplotlib_deprecation_warning", "type": "_api", "text": []}, {"name": "_api.deprecation.warn_deprecated()", "path": "_api_api#matplotlib._api.deprecation.warn_deprecated", "type": "_api", "text": ["Display a standardized deprecation.", "The release at which this API became deprecated.", "Override the default deprecation message. The %(since)s, %(name)s, %(alternative)s, %(obj_type)s, %(addendum)s, and %(removal)s format specifiers will be replaced by the values of the respective arguments passed to this function.", "The name of the deprecated object.", "An alternative API that the user may use in place of the deprecated API. The deprecation warning will tell the user about this alternative if provided.", "If True, uses a PendingDeprecationWarning instead of a DeprecationWarning. Cannot be used together with removal.", "The object type being deprecated.", "Additional text appended directly to the final message.", "The expected removal version. With the default (an empty string), a removal version is automatically computed from since. Set to other Falsy values to not schedule a removal date. Cannot be used together with pending."]}, {"name": "_api.select_matching_signature()", "path": "_api_api#matplotlib._api.select_matching_signature", "type": "_api", "text": ["Select and call the function that accepts *args, **kwargs.", "funcs is a list of functions which should not raise any exception (other than TypeError if the arguments passed do not match their signature).", "select_matching_signature tries to call each of the functions in funcs with *args, **kwargs (in the order in which they are given). Calls that fail with a TypeError are silently skipped. As soon as a call succeeds, select_matching_signature returns its return value. If no function accepts *args, **kwargs, then the TypeError raised by the last failing call is re-raised.", "Callers should normally make sure that any *args, **kwargs can only bind a single func (to avoid any ambiguity), although this is not checked by select_matching_signature.", "select_matching_signature is intended to help implementing signature-overloaded functions. In general, such functions should be avoided, except for back-compatibility concerns. A typical use pattern is", "which allows my_func to be called either with two parameters (old1 and old2) or a single one (new). Note that the new signature is given last, so that callers get a TypeError corresponding to the new signature if the arguments they passed in do not match any signature."]}, {"name": "_api.warn_external()", "path": "_api_api#matplotlib._api.warn_external", "type": "_api", "text": ["warnings.warn wrapper that sets stacklevel to \"outside Matplotlib\".", "The original emitter of the warning can be obtained by patching this function back to warnings.warn, i.e. _api.warn_external =\nwarnings.warn (or functools.partial(warnings.warn, stacklevel=2), etc.)."]}, {"name": "_enums", "path": "_enums_api", "type": "_enums", "text": ["Enums representing sets of strings that Matplotlib uses as input parameters.", "Matplotlib often uses simple data types like strings or tuples to define a concept; e.g. the line capstyle can be specified as one of 'butt', 'round', or 'projecting'. The classes in this module are used internally and serve to document these concepts formally.", "As an end-user you will not use these classes directly, but only the values they define.", "Define how the connection between two line segments is drawn.", "For a visual impression of each JoinStyle, view these docs online, or run JoinStyle.demo.", "Lines in Matplotlib are typically defined by a 1D Path and a finite linewidth, where the underlying 1D Path represents the center of the stroked line.", "By default, GraphicsContextBase defines the boundaries of a stroked line to simply be every point within some radius, linewidth/2, away from any point of the center line. However, this results in corners appearing \"rounded\", which may not be the desired behavior if you are drawing, for example, a polygon or pointed star.", "Supported values:", "the \"arrow-tip\" style. Each boundary of the filled-in area will extend in a straight line parallel to the tangent vector of the centerline at the point it meets the corner, until they meet in a sharp point.", "stokes every point within a radius of linewidth/2 of the center lines.", "the \"squared-off\" style. It can be thought of as a rounded corner where the \"circular\" part of the corner has been cut off.", "Note", "Very long miter tips are cut off (to form a bevel) after a backend-dependent limit called the \"miter limit\", which specifies the maximum allowed ratio of miter length to line width. For example, the PDF backend uses the default value of 10 specified by the PDF standard, while the SVG backend does not even specify the miter limit, resulting in a default value of 4 per the SVG specification. Matplotlib does not currently allow the user to adjust this parameter.", "A more detailed description of the effect of a miter limit can be found in the Mozilla Developer Docs", "(Source code, png, pdf)", "Demonstrate how each JoinStyle looks for various join angles.", "Define how the two endpoints (caps) of an unclosed line are drawn.", "How to draw the start and end points of lines that represent a closed curve (i.e. that end in a CLOSEPOLY) is controlled by the line's JoinStyle. For all other lines, how the start and end points are drawn is controlled by the CapStyle.", "For a visual impression of each CapStyle, view these docs online or run CapStyle.demo.", "Supported values:", "the line is squared off at its endpoint.", "the line is squared off as in butt, but the filled in area extends beyond the endpoint a distance of linewidth/2.", "like butt, but a semicircular cap is added to the end of the line, of radius linewidth/2.", "(Source code, png, pdf)", "Demonstrate how each CapStyle looks for a thick line segment."]}, {"name": "_enums.CapStyle", "path": "_enums_api#matplotlib._enums.CapStyle", "type": "_enums", "text": ["Define how the two endpoints (caps) of an unclosed line are drawn.", "How to draw the start and end points of lines that represent a closed curve (i.e. that end in a CLOSEPOLY) is controlled by the line's JoinStyle. For all other lines, how the start and end points are drawn is controlled by the CapStyle.", "For a visual impression of each CapStyle, view these docs online or run CapStyle.demo.", "Supported values:", "the line is squared off at its endpoint.", "the line is squared off as in butt, but the filled in area extends beyond the endpoint a distance of linewidth/2.", "like butt, but a semicircular cap is added to the end of the line, of radius linewidth/2.", "(Source code, png, pdf)", "Demonstrate how each CapStyle looks for a thick line segment."]}, {"name": "_enums.CapStyle.demo()", "path": "_enums_api#matplotlib._enums.CapStyle.demo", "type": "_enums", "text": ["Demonstrate how each CapStyle looks for a thick line segment."]}, {"name": "_enums.JoinStyle", "path": "_enums_api#matplotlib._enums.JoinStyle", "type": "_enums", "text": ["Define how the connection between two line segments is drawn.", "For a visual impression of each JoinStyle, view these docs online, or run JoinStyle.demo.", "Lines in Matplotlib are typically defined by a 1D Path and a finite linewidth, where the underlying 1D Path represents the center of the stroked line.", "By default, GraphicsContextBase defines the boundaries of a stroked line to simply be every point within some radius, linewidth/2, away from any point of the center line. However, this results in corners appearing \"rounded\", which may not be the desired behavior if you are drawing, for example, a polygon or pointed star.", "Supported values:", "the \"arrow-tip\" style. Each boundary of the filled-in area will extend in a straight line parallel to the tangent vector of the centerline at the point it meets the corner, until they meet in a sharp point.", "stokes every point within a radius of linewidth/2 of the center lines.", "the \"squared-off\" style. It can be thought of as a rounded corner where the \"circular\" part of the corner has been cut off.", "Note", "Very long miter tips are cut off (to form a bevel) after a backend-dependent limit called the \"miter limit\", which specifies the maximum allowed ratio of miter length to line width. For example, the PDF backend uses the default value of 10 specified by the PDF standard, while the SVG backend does not even specify the miter limit, resulting in a default value of 4 per the SVG specification. Matplotlib does not currently allow the user to adjust this parameter.", "A more detailed description of the effect of a miter limit can be found in the Mozilla Developer Docs", "(Source code, png, pdf)", "Demonstrate how each JoinStyle looks for various join angles."]}, {"name": "_enums.JoinStyle.demo()", "path": "_enums_api#matplotlib._enums.JoinStyle.demo", "type": "_enums", "text": ["Demonstrate how each JoinStyle looks for various join angles."]}, {"name": "afm", "path": "afm_api", "type": "afm", "text": ["A python interface to Adobe Font Metrics Files.", "Although a number of other Python implementations exist, and may be more complete than this, it was decided not to go with them because they were either:", "It is pretty easy to use, and has no external dependencies:", "As in the Adobe Font Metrics File Format Specification, all dimensions are given in units of 1/1000 of the scale factor (point size) of the font being used.", "Bases: object", "Parse the AFM file in file object fh.", "The font family name, e.g., 'Times'.", "Return the fontangle as float.", "Return the cap height as float.", "Return the font family name, e.g., 'Times'.", "Return the font name, e.g., 'Times-Roman'.", "Return the font full name, e.g., 'Times-Roman'.", "Get the bounding box (ink) height of character c (space is 0).", "Return the standard horizontal stem width as float, or None if not specified in AFM file.", "Return the kerning pair distance (possibly 0) for chars c1 and c2.", "Return the kerning pair distance (possibly 0) for chars name1 and name2.", "Get the name of the character, i.e., ';' is 'semicolon'.", "Return the string bounding box.", "Return the string bounding box and the maximal descent.", "Return the underline thickness as float.", "Return the standard vertical stem width as float, or None if not specified in AFM file.", "Return the font weight, e.g., 'Bold' or 'Roman'.", "Get the width of the character from the character metric WX field.", "Get the width of the character from a type1 character name.", "Return the xheight as float.", "Return the string width (including kerning) and string height as a (w, h) tuple.", "Bases: tuple", "Represents the character metrics of a single character.", "The fields do currently only describe a subset of character metrics information defined in the AFM standard.", "Create new instance of CharMetrics(width, name, bbox)", "The bbox of the character (B) as a tuple (llx, lly, urx, ury).", "The character name (N).", "The character width (WX).", "Bases: tuple", "Represents the information on a composite element of a composite char.", "Create new instance of CompositePart(name, dx, dy)", "x-displacement of the part from the origin.", "y-displacement of the part from the origin.", "Name of the part, e.g. 'acute'."]}, {"name": "afm.AFM", "path": "afm_api#matplotlib.afm.AFM", "type": "afm", "text": ["Bases: object", "Parse the AFM file in file object fh.", "The font family name, e.g., 'Times'.", "Return the fontangle as float.", "Return the cap height as float.", "Return the font family name, e.g., 'Times'.", "Return the font name, e.g., 'Times-Roman'.", "Return the font full name, e.g., 'Times-Roman'.", "Get the bounding box (ink) height of character c (space is 0).", "Return the standard horizontal stem width as float, or None if not specified in AFM file.", "Return the kerning pair distance (possibly 0) for chars c1 and c2.", "Return the kerning pair distance (possibly 0) for chars name1 and name2.", "Get the name of the character, i.e., ';' is 'semicolon'.", "Return the string bounding box.", "Return the string bounding box and the maximal descent.", "Return the underline thickness as float.", "Return the standard vertical stem width as float, or None if not specified in AFM file.", "Return the font weight, e.g., 'Bold' or 'Roman'.", "Get the width of the character from the character metric WX field.", "Get the width of the character from a type1 character name.", "Return the xheight as float.", "Return the string width (including kerning) and string height as a (w, h) tuple."]}, {"name": "afm.AFM.get_angle()", "path": "afm_api#matplotlib.afm.AFM.get_angle", "type": "afm", "text": ["Return the fontangle as float."]}, {"name": "afm.AFM.get_bbox_char()", "path": "afm_api#matplotlib.afm.AFM.get_bbox_char", "type": "afm", "text": []}, {"name": "afm.AFM.get_capheight()", "path": "afm_api#matplotlib.afm.AFM.get_capheight", "type": "afm", "text": ["Return the cap height as float."]}, {"name": "afm.AFM.get_familyname()", "path": "afm_api#matplotlib.afm.AFM.get_familyname", "type": "afm", "text": ["Return the font family name, e.g., 'Times'."]}, {"name": "afm.AFM.get_fontname()", "path": "afm_api#matplotlib.afm.AFM.get_fontname", "type": "afm", "text": ["Return the font name, e.g., 'Times-Roman'."]}, {"name": "afm.AFM.get_fullname()", "path": "afm_api#matplotlib.afm.AFM.get_fullname", "type": "afm", "text": ["Return the font full name, e.g., 'Times-Roman'."]}, {"name": "afm.AFM.get_height_char()", "path": "afm_api#matplotlib.afm.AFM.get_height_char", "type": "afm", "text": ["Get the bounding box (ink) height of character c (space is 0)."]}, {"name": "afm.AFM.get_horizontal_stem_width()", "path": "afm_api#matplotlib.afm.AFM.get_horizontal_stem_width", "type": "afm", "text": ["Return the standard horizontal stem width as float, or None if not specified in AFM file."]}, {"name": "afm.AFM.get_kern_dist()", "path": "afm_api#matplotlib.afm.AFM.get_kern_dist", "type": "afm", "text": ["Return the kerning pair distance (possibly 0) for chars c1 and c2."]}, {"name": "afm.AFM.get_kern_dist_from_name()", "path": "afm_api#matplotlib.afm.AFM.get_kern_dist_from_name", "type": "afm", "text": ["Return the kerning pair distance (possibly 0) for chars name1 and name2."]}, {"name": "afm.AFM.get_name_char()", "path": "afm_api#matplotlib.afm.AFM.get_name_char", "type": "afm", "text": ["Get the name of the character, i.e., ';' is 'semicolon'."]}, {"name": "afm.AFM.get_str_bbox()", "path": "afm_api#matplotlib.afm.AFM.get_str_bbox", "type": "afm", "text": ["Return the string bounding box."]}, {"name": "afm.AFM.get_str_bbox_and_descent()", "path": "afm_api#matplotlib.afm.AFM.get_str_bbox_and_descent", "type": "afm", "text": ["Return the string bounding box and the maximal descent."]}, {"name": "afm.AFM.get_underline_thickness()", "path": "afm_api#matplotlib.afm.AFM.get_underline_thickness", "type": "afm", "text": ["Return the underline thickness as float."]}, {"name": "afm.AFM.get_vertical_stem_width()", "path": "afm_api#matplotlib.afm.AFM.get_vertical_stem_width", "type": "afm", "text": ["Return the standard vertical stem width as float, or None if not specified in AFM file."]}, {"name": "afm.AFM.get_weight()", "path": "afm_api#matplotlib.afm.AFM.get_weight", "type": "afm", "text": ["Return the font weight, e.g., 'Bold' or 'Roman'."]}, {"name": "afm.AFM.get_width_char()", "path": "afm_api#matplotlib.afm.AFM.get_width_char", "type": "afm", "text": ["Get the width of the character from the character metric WX field."]}, {"name": "afm.AFM.get_width_from_char_name()", "path": "afm_api#matplotlib.afm.AFM.get_width_from_char_name", "type": "afm", "text": ["Get the width of the character from a type1 character name."]}, {"name": "afm.AFM.get_xheight()", "path": "afm_api#matplotlib.afm.AFM.get_xheight", "type": "afm", "text": ["Return the xheight as float."]}, {"name": "afm.AFM.string_width_height()", "path": "afm_api#matplotlib.afm.AFM.string_width_height", "type": "afm", "text": ["Return the string width (including kerning) and string height as a (w, h) tuple."]}, {"name": "afm.CharMetrics", "path": "afm_api#matplotlib.afm.CharMetrics", "type": "afm", "text": ["Bases: tuple", "Represents the character metrics of a single character.", "The fields do currently only describe a subset of character metrics information defined in the AFM standard.", "Create new instance of CharMetrics(width, name, bbox)", "The bbox of the character (B) as a tuple (llx, lly, urx, ury).", "The character name (N).", "The character width (WX)."]}, {"name": "afm.CharMetrics.bbox", "path": "afm_api#matplotlib.afm.CharMetrics.bbox", "type": "afm", "text": ["The bbox of the character (B) as a tuple (llx, lly, urx, ury)."]}, {"name": "afm.CharMetrics.name", "path": "afm_api#matplotlib.afm.CharMetrics.name", "type": "afm", "text": ["The character name (N)."]}, {"name": "afm.CharMetrics.width", "path": "afm_api#matplotlib.afm.CharMetrics.width", "type": "afm", "text": ["The character width (WX)."]}, {"name": "afm.CompositePart", "path": "afm_api#matplotlib.afm.CompositePart", "type": "afm", "text": ["Bases: tuple", "Represents the information on a composite element of a composite char.", "Create new instance of CompositePart(name, dx, dy)", "x-displacement of the part from the origin.", "y-displacement of the part from the origin.", "Name of the part, e.g. 'acute'."]}, {"name": "afm.CompositePart.dx", "path": "afm_api#matplotlib.afm.CompositePart.dx", "type": "afm", "text": ["x-displacement of the part from the origin."]}, {"name": "afm.CompositePart.dy", "path": "afm_api#matplotlib.afm.CompositePart.dy", "type": "afm", "text": ["y-displacement of the part from the origin."]}, {"name": "afm.CompositePart.name", "path": "afm_api#matplotlib.afm.CompositePart.name", "type": "afm", "text": ["Name of the part, e.g. 'acute'."]}, {"name": "animation", "path": "animation_api", "type": "animation", "text": ["Table of Contents", "The easiest way to make a live animation in Matplotlib is to use one of the Animation classes.", "Animation", "A base class for Animations.", "FuncAnimation", "Makes an animation by repeatedly calling a function func.", "ArtistAnimation", "Animation using a fixed set of Artist objects.", "In both cases it is critical to keep a reference to the instance object. The animation is advanced by a timer (typically from the host GUI framework) which the Animation object holds the only reference to. If you do not hold a reference to the Animation object, it (and hence the timers) will be garbage collected which will stop the animation.", "To save an animation use Animation.save, Animation.to_html5_video, or Animation.to_jshtml.", "See Helper Classes below for details about what movie formats are supported.", "The inner workings of FuncAnimation is more-or-less:", "with details to handle 'blitting' (to dramatically improve the live performance), to be non-blocking, not repeatedly start/stop the GUI event loop, handle repeats, multiple animated axes, and easily save the animation to a movie file.", "'Blitting' is a standard technique in computer graphics. The general gist is to take an existing bit map (in our case a mostly rasterized figure) and then 'blit' one more artist on top. Thus, by managing a saved 'clean' bitmap, we can only re-draw the few artists that are changing at each frame and possibly save significant amounts of time. When we use blitting (by passing blit=True), the core loop of FuncAnimation gets a bit more complicated:", "This is of course leaving out many details (such as updating the background when the figure is resized or fully re-drawn). However, this hopefully minimalist example gives a sense of how init_func and func are used inside of FuncAnimation and the theory of how 'blitting' works.", "The expected signature on func and init_func is very simple to keep FuncAnimation out of your book keeping and plotting logic, but this means that the callable objects you pass in must know what artists they should be working on. There are several approaches to handling this, of varying complexity and encapsulation. The simplest approach, which works quite well in the case of a script, is to define the artist at a global scope and let Python sort things out. For example", "The second method is to use functools.partial to 'bind' artists to function. A third method is to use closures to build up the required artists and functions. A fourth method is to create a class.", "The provided writers fall into a few broad categories.", "The Pillow writer relies on the Pillow library to write the animation, keeping all data in memory.", "PillowWriter", "The HTML writer generates JavaScript-based animations.", "HTMLWriter", "Writer for JavaScript-based HTML movies.", "The pipe-based writers stream the captured frames over a pipe to an external process. The pipe-based variants tend to be more performant, but may not work on all systems.", "FFMpegWriter", "Pipe-based ffmpeg writer.", "ImageMagickWriter", "Pipe-based animated gif.", "The file-based writers save temporary files for each frame which are stitched into a single file at the end. Although slower, these writers can be easier to debug.", "FFMpegFileWriter", "File-based ffmpeg writer.", "ImageMagickFileWriter", "File-based animated gif writer.", "Fundamentally, a MovieWriter provides a way to grab sequential frames from the same underlying Figure object. The base class MovieWriter implements 3 methods and a context manager. The only difference between the pipe-based and file-based writers is in the arguments to their respective setup methods.", "The setup() method is used to prepare the writer (possibly opening a pipe), successive calls to grab_frame() capture a single frame at a time and finish() finalizes the movie and writes the output file to disk. For example", "If using the writer classes directly (not through Animation.save), it is strongly encouraged to use the saving context manager", "to ensures that setup and cleanup are performed as necessary.", "Animation", "A base class for Animations.", "TimedAnimation", "Animation subclass for time-based animation.", "A module-level registry is provided to map between the name of the writer and the class to allow a string to be passed to Animation.save instead of a writer instance.", "MovieWriterRegistry", "Registry of available writer classes by human readable name.", "To reduce code duplication base classes", "AbstractMovieWriter", "Abstract base class for writing movies.", "MovieWriter", "Base class for writing movies.", "FileMovieWriter", "MovieWriter for writing to individual files and stitching at the end.", "and mixins", "FFMpegBase", "Mixin class for FFMpeg output.", "ImageMagickBase", "Mixin class for ImageMagick output.", "are provided.", "See the source code for how to easily implement new MovieWriter classes."]}, {"name": "animation.AbstractMovieWriter", "path": "_as_gen/matplotlib.animation.abstractmoviewriter", "type": "animation", "text": ["Abstract base class for writing movies. Fundamentally, what a MovieWriter does is provide is a way to grab frames by calling grab_frame().", "setup() is called to start the process and finish() is called afterwards.", "This class is set up to provide for writing movie frame data to a pipe. saving() is provided as a context manager to facilitate this process as:", "The use of the context manager ensures that setup() and finish() are performed as necessary.", "An instance of a concrete subclass of this class can be given as the writer argument of Animation.save().", "__init__([fps, metadata, codec, bitrate])", "finish()", "Finish any processing for writing the movie.", "grab_frame(**savefig_kwargs)", "Grab the image information from the figure and save as a movie frame.", "saving(fig, outfile, dpi, *args, **kwargs)", "Context manager to facilitate writing the movie file.", "setup(fig, outfile[, dpi])", "Setup for writing the movie file.", "frame_size", "A tuple (width, height) in pixels of a movie frame.", "Finish any processing for writing the movie.", "A tuple (width, height) in pixels of a movie frame.", "Grab the image information from the figure and save as a movie frame.", "All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure.", "Context manager to facilitate writing the movie file.", "*args, **kw are any parameters that should be passed to setup.", "Setup for writing the movie file.", "The figure object that contains the information for frames.", "The filename of the resulting movie file.", "The DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file."]}, {"name": "animation.AbstractMovieWriter.__init__()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.__init__", "type": "animation", "text": []}, {"name": "animation.AbstractMovieWriter.finish()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.finish", "type": "animation", "text": ["Finish any processing for writing the movie."]}, {"name": "animation.AbstractMovieWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.grab_frame", "type": "animation", "text": ["Grab the image information from the figure and save as a movie frame.", "All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure."]}, {"name": "animation.AbstractMovieWriter.saving()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.saving", "type": "animation", "text": ["Context manager to facilitate writing the movie file.", "*args, **kw are any parameters that should be passed to setup."]}, {"name": "animation.AbstractMovieWriter.setup()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.setup", "type": "animation", "text": ["Setup for writing the movie file.", "The figure object that contains the information for frames.", "The filename of the resulting movie file.", "The DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file."]}, {"name": "animation.Animation", "path": "_as_gen/matplotlib.animation.animation", "type": "animation", "text": ["A base class for Animations.", "This class is not usable as is, and should be subclassed to provide needed behavior.", "Note", "You must store the created Animation in a variable that lives as long as the animation should run. Otherwise, the Animation object will be garbage-collected and the animation stops.", "The figure object used to get needed events, such as draw or resize.", "A class that can run a callback when desired events are generated, as well as be stopped and started.", "Examples include timers (see TimedAnimation) and file system notifications.", "Whether blitting is used to optimize drawing.", "See also", "__init__(fig[, event_source, blit])", "new_frame_seq()", "Return a new sequence of frame information.", "new_saved_frame_seq()", "Return a new sequence of saved/cached frame information.", "pause()", "Pause the animation.", "resume()", "Resume the animation.", "save(filename[, writer, fps, dpi, codec, ...])", "Save the animation as a movie file by drawing every frame.", "to_html5_video([embed_limit])", "Convert the animation to an HTML5 <video> tag.", "to_jshtml([fps, embed_frames, default_mode])", "Generate HTML representation of the animation.", "Return a new sequence of frame information.", "Return a new sequence of saved/cached frame information.", "Pause the animation.", "Resume the animation.", "Save the animation as a movie file by drawing every frame.", "The output filename, e.g., mymovie.mp4.", "A MovieWriter instance to use or a key that identifies a class to use, such as 'ffmpeg'.", "Movie frame rate (per second). If not set, the frame rate from the animation's frame interval.", "Controls the dots per inch for the movie frames. Together with the figure's size in inches, this controls the size of the movie.", "The video codec to use. Not all codecs are supported by a given MovieWriter.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "Dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "Additional Animation objects that should be included in the saved movie file. These need to be from the same matplotlib.figure.Figure instance. Also, animation frames will just be simply combined, so there should be a 1:1 correspondence between the frames from the different animations.", "Keyword arguments passed to each savefig call used to save the individual frames.", "A callback function that will be called for every frame to notify the saving progress. It must have the signature", "where current_frame is the current frame number and total_frames is the total number of frames to be saved. total_frames is set to None, if the total number of frames can not be determined. Return values may exist but are ignored.", "Example code to write the progress to stdout:", "fps, codec, bitrate, extra_args and metadata are used to construct a MovieWriter instance and can only be passed if writer is a string. If they are passed as non-None and writer is a MovieWriter, a RuntimeError will be raised.", "Convert the animation to an HTML5 <video> tag.", "This saves the animation as an h264 video, encoded in base64 directly into the HTML5 video tag. This respects rcParams[\"animation.writer\"] (default: 'ffmpeg') and rcParams[\"animation.bitrate\"] (default: -1). This also makes use of the interval to control the speed, and uses the repeat parameter to decide whether to loop.", "Limit, in MB, of the returned animation. No animation is created if the limit is exceeded. Defaults to rcParams[\"animation.embed_limit\"] (default: 20.0) = 20.0.", "An HTML5 video tag with the animation embedded as base64 encoded h264 video. If the embed_limit is exceeded, this returns the string \"Video too large to embed.\"", "Generate HTML representation of the animation.", "Movie frame rate (per second). If not set, the frame rate from the animation's frame interval.", "What to do when the animation ends. Must be one of {'loop',\n'once', 'reflect'}. Defaults to 'loop' if self.repeat is True, otherwise 'once'."]}, {"name": "animation.Animation.__init__()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.__init__", "type": "animation", "text": []}, {"name": "animation.Animation.new_frame_seq()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.new_frame_seq", "type": "animation", "text": ["Return a new sequence of frame information."]}, {"name": "animation.Animation.new_saved_frame_seq()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.new_saved_frame_seq", "type": "animation", "text": ["Return a new sequence of saved/cached frame information."]}, {"name": "animation.Animation.pause()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.pause", "type": "animation", "text": ["Pause the animation."]}, {"name": "animation.Animation.resume()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.resume", "type": "animation", "text": ["Resume the animation."]}, {"name": "animation.Animation.save()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.save", "type": "animation", "text": ["Save the animation as a movie file by drawing every frame.", "The output filename, e.g., mymovie.mp4.", "A MovieWriter instance to use or a key that identifies a class to use, such as 'ffmpeg'.", "Movie frame rate (per second). If not set, the frame rate from the animation's frame interval.", "Controls the dots per inch for the movie frames. Together with the figure's size in inches, this controls the size of the movie.", "The video codec to use. Not all codecs are supported by a given MovieWriter.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "Dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "Additional Animation objects that should be included in the saved movie file. These need to be from the same matplotlib.figure.Figure instance. Also, animation frames will just be simply combined, so there should be a 1:1 correspondence between the frames from the different animations.", "Keyword arguments passed to each savefig call used to save the individual frames.", "A callback function that will be called for every frame to notify the saving progress. It must have the signature", "where current_frame is the current frame number and total_frames is the total number of frames to be saved. total_frames is set to None, if the total number of frames can not be determined. Return values may exist but are ignored.", "Example code to write the progress to stdout:", "fps, codec, bitrate, extra_args and metadata are used to construct a MovieWriter instance and can only be passed if writer is a string. If they are passed as non-None and writer is a MovieWriter, a RuntimeError will be raised."]}, {"name": "animation.Animation.to_html5_video()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.to_html5_video", "type": "animation", "text": ["Convert the animation to an HTML5 <video> tag.", "This saves the animation as an h264 video, encoded in base64 directly into the HTML5 video tag. This respects rcParams[\"animation.writer\"] (default: 'ffmpeg') and rcParams[\"animation.bitrate\"] (default: -1). This also makes use of the interval to control the speed, and uses the repeat parameter to decide whether to loop.", "Limit, in MB, of the returned animation. No animation is created if the limit is exceeded. Defaults to rcParams[\"animation.embed_limit\"] (default: 20.0) = 20.0.", "An HTML5 video tag with the animation embedded as base64 encoded h264 video. If the embed_limit is exceeded, this returns the string \"Video too large to embed.\""]}, {"name": "animation.Animation.to_jshtml()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.to_jshtml", "type": "animation", "text": ["Generate HTML representation of the animation.", "Movie frame rate (per second). If not set, the frame rate from the animation's frame interval.", "What to do when the animation ends. Must be one of {'loop',\n'once', 'reflect'}. Defaults to 'loop' if self.repeat is True, otherwise 'once'."]}, {"name": "animation.ArtistAnimation", "path": "_as_gen/matplotlib.animation.artistanimation", "type": "animation", "text": ["Animation using a fixed set of Artist objects.", "Before creating an instance, all plotting should have taken place and the relevant artists saved.", "Note", "You must store the created Animation in a variable that lives as long as the animation should run. Otherwise, the Animation object will be garbage-collected and the animation stops.", "The figure object used to get needed events, such as draw or resize.", "Each list entry is a collection of Artist objects that are made visible on the corresponding frame. Other artists are made invisible.", "Delay between frames in milliseconds.", "The delay in milliseconds between consecutive animation runs, if repeat is True.", "Whether the animation repeats when the sequence of frames is completed.", "Whether blitting is used to optimize drawing.", "__init__(fig, artists, *args, **kwargs)", "new_frame_seq()", "Return a new sequence of frame information.", "new_saved_frame_seq()", "Return a new sequence of saved/cached frame information.", "pause()", "Pause the animation.", "resume()", "Resume the animation.", "save(filename[, writer, fps, dpi, codec, ...])", "Save the animation as a movie file by drawing every frame.", "to_html5_video([embed_limit])", "Convert the animation to an HTML5 <video> tag.", "to_jshtml([fps, embed_frames, default_mode])", "Generate HTML representation of the animation."]}, {"name": "animation.ArtistAnimation.__init__()", "path": "_as_gen/matplotlib.animation.artistanimation#matplotlib.animation.ArtistAnimation.__init__", "type": "animation", "text": []}, {"name": "animation.FFMpegBase", "path": "_as_gen/matplotlib.animation.ffmpegbase", "type": "animation", "text": ["Mixin class for FFMpeg output.", "To be useful this must be multiply-inherited from with a MovieWriterBase sub-class.", "__init__(*args, **kwargs)", "output_args"]}, {"name": "animation.FFMpegBase.__init__()", "path": "_as_gen/matplotlib.animation.ffmpegbase#matplotlib.animation.FFMpegBase.__init__", "type": "animation", "text": []}, {"name": "animation.FFMpegFileWriter", "path": "_as_gen/matplotlib.animation.ffmpegfilewriter", "type": "animation", "text": ["File-based ffmpeg writer.", "Frames are written to temporary files on disk and then stitched together at the end.", "__init__(*args, **kwargs)", "bin_path()", "Return the binary path to the commandline tool used by a specific subclass.", "cleanup()", "[Deprecated]", "finish()", "Finish any processing for writing the movie.", "grab_frame(**savefig_kwargs)", "Grab the image information from the figure and save as a movie frame.", "isAvailable()", "Return whether a MovieWriter subclass is actually available.", "saving(fig, outfile, dpi, *args, **kwargs)", "Context manager to facilitate writing the movie file.", "setup(fig, outfile[, dpi, frame_prefix])", "Setup for writing the movie file.", "frame_format", "Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.", "frame_size", "A tuple (width, height) in pixels of a movie frame.", "output_args", "supported_formats"]}, {"name": "animation.FFMpegFileWriter.__init__()", "path": "_as_gen/matplotlib.animation.ffmpegfilewriter#matplotlib.animation.FFMpegFileWriter.__init__", "type": "animation", "text": []}, {"name": "animation.FFMpegFileWriter.supported_formats", "path": "_as_gen/matplotlib.animation.ffmpegfilewriter#matplotlib.animation.FFMpegFileWriter.supported_formats", "type": "animation", "text": []}, {"name": "animation.FFMpegWriter", "path": "_as_gen/matplotlib.animation.ffmpegwriter", "type": "animation", "text": ["Pipe-based ffmpeg writer.", "Frames are streamed directly to ffmpeg via a pipe and written in a single pass.", "Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "__init__([fps, codec, bitrate, extra_args, ...])", "bin_path()", "Return the binary path to the commandline tool used by a specific subclass.", "cleanup()", "[Deprecated]", "finish()", "Finish any processing for writing the movie.", "grab_frame(**savefig_kwargs)", "Grab the image information from the figure and save as a movie frame.", "isAvailable()", "Return whether a MovieWriter subclass is actually available.", "saving(fig, outfile, dpi, *args, **kwargs)", "Context manager to facilitate writing the movie file.", "setup(fig, outfile[, dpi])", "Setup for writing the movie file.", "frame_size", "A tuple (width, height) in pixels of a movie frame.", "output_args", "supported_formats"]}, {"name": "animation.FFMpegWriter.__init__()", "path": "_as_gen/matplotlib.animation.ffmpegwriter#matplotlib.animation.FFMpegWriter.__init__", "type": "animation", "text": ["Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment."]}, {"name": "animation.FileMovieWriter", "path": "_as_gen/matplotlib.animation.filemoviewriter", "type": "animation", "text": ["MovieWriter for writing to individual files and stitching at the end.", "This must be sub-classed to be useful.", "Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "__init__(*args, **kwargs)", "bin_path()", "Return the binary path to the commandline tool used by a specific subclass.", "cleanup()", "[Deprecated]", "finish()", "Finish any processing for writing the movie.", "grab_frame(**savefig_kwargs)", "Grab the image information from the figure and save as a movie frame.", "isAvailable()", "Return whether a MovieWriter subclass is actually available.", "saving(fig, outfile, dpi, *args, **kwargs)", "Context manager to facilitate writing the movie file.", "setup(fig, outfile[, dpi, frame_prefix])", "Setup for writing the movie file.", "frame_format", "Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.", "frame_size", "A tuple (width, height) in pixels of a movie frame.", "supported_formats", "Finish any processing for writing the movie.", "Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.", "Grab the image information from the figure and save as a movie frame.", "All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure.", "Setup for writing the movie file.", "The figure to grab the rendered frames from.", "The filename of the resulting movie file.", "The dpi of the output file. This, with the figure size, controls the size in pixels of the resulting movie file.", "The filename prefix to use for temporary files. If None (the default), files are written to a temporary directory which is deleted by cleanup; if not None, no temporary files are deleted."]}, {"name": "animation.FileMovieWriter.__init__()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.__init__", "type": "animation", "text": ["Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment."]}, {"name": "animation.FileMovieWriter.finish()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.finish", "type": "animation", "text": ["Finish any processing for writing the movie."]}, {"name": "animation.FileMovieWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.grab_frame", "type": "animation", "text": ["Grab the image information from the figure and save as a movie frame.", "All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure."]}, {"name": "animation.FileMovieWriter.setup()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.setup", "type": "animation", "text": ["Setup for writing the movie file.", "The figure to grab the rendered frames from.", "The filename of the resulting movie file.", "The dpi of the output file. This, with the figure size, controls the size in pixels of the resulting movie file.", "The filename prefix to use for temporary files. If None (the default), files are written to a temporary directory which is deleted by cleanup; if not None, no temporary files are deleted."]}, {"name": "animation.FuncAnimation", "path": "_as_gen/matplotlib.animation.funcanimation", "type": "animation", "text": ["Makes an animation by repeatedly calling a function func.", "Note", "You must store the created Animation in a variable that lives as long as the animation should run. Otherwise, the Animation object will be garbage-collected and the animation stops.", "The figure object used to get needed events, such as draw or resize.", "The function to call at each frame. The first argument will be the next value in frames. Any additional positional arguments can be supplied via the fargs parameter.", "The required signature is:", "If blit == True, func must return an iterable of all artists that were modified or created. This information is used by the blitting algorithm to determine which parts of the figure have to be updated. The return value is unused if blit == False and may be omitted in that case.", "Source of data to pass func and each frame of the animation", "If a generator function, then must have the signature:", "In all of these cases, the values in frames is simply passed through to the user-supplied func and thus can be of any type.", "A function used to draw a clear frame. If not given, the results of drawing from the first item in the frames sequence will be used. This function will be called once before the first frame.", "The required signature is:", "If blit == True, init_func must return an iterable of artists to be re-drawn. This information is used by the blitting algorithm to determine which parts of the figure have to be updated. The return value is unused if blit == False and may be omitted in that case.", "Additional arguments to pass to each call to func.", "Fallback for the number of values from frames to cache. This is only used if the number of frames cannot be inferred from frames, i.e. when it's an iterator without length or a generator.", "Delay between frames in milliseconds.", "The delay in milliseconds between consecutive animation runs, if repeat is True.", "Whether the animation repeats when the sequence of frames is completed.", "Whether blitting is used to optimize drawing. Note: when using blitting, any animated artists will be drawn according to their zorder; however, they will be drawn on top of any previous artists, regardless of their zorder.", "Whether frame data is cached. Disabling cache might be helpful when frames contain large objects.", "__init__(fig, func[, frames, init_func, ...])", "new_frame_seq()", "Return a new sequence of frame information.", "new_saved_frame_seq()", "Return a new sequence of saved/cached frame information.", "pause()", "Pause the animation.", "resume()", "Resume the animation.", "save(filename[, writer, fps, dpi, codec, ...])", "Save the animation as a movie file by drawing every frame.", "to_html5_video([embed_limit])", "Convert the animation to an HTML5 <video> tag.", "to_jshtml([fps, embed_frames, default_mode])", "Generate HTML representation of the animation.", "Return a new sequence of frame information.", "Return a new sequence of saved/cached frame information."]}, {"name": "animation.FuncAnimation.__init__()", "path": "_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation.__init__", "type": "animation", "text": []}, {"name": "animation.FuncAnimation.new_frame_seq()", "path": "_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation.new_frame_seq", "type": "animation", "text": ["Return a new sequence of frame information."]}, {"name": "animation.FuncAnimation.new_saved_frame_seq()", "path": "_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation.new_saved_frame_seq", "type": "animation", "text": ["Return a new sequence of saved/cached frame information."]}, {"name": "animation.HTMLWriter", "path": "_as_gen/matplotlib.animation.htmlwriter", "type": "animation", "text": ["Writer for JavaScript-based HTML movies.", "Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "__init__([fps, codec, bitrate, extra_args, ...])", "bin_path()", "Return the binary path to the commandline tool used by a specific subclass.", "cleanup()", "[Deprecated]", "finish()", "Finish any processing for writing the movie.", "grab_frame(**savefig_kwargs)", "Grab the image information from the figure and save as a movie frame.", "isAvailable()", "Return whether a MovieWriter subclass is actually available.", "saving(fig, outfile, dpi, *args, **kwargs)", "Context manager to facilitate writing the movie file.", "setup(fig, outfile, dpi[, frame_dir])", "Setup for writing the movie file.", "frame_format", "Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.", "frame_size", "A tuple (width, height) in pixels of a movie frame.", "supported_formats", "Finish any processing for writing the movie.", "Grab the image information from the figure and save as a movie frame.", "All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure.", "Return whether a MovieWriter subclass is actually available.", "Setup for writing the movie file.", "The figure to grab the rendered frames from.", "The filename of the resulting movie file.", "The dpi of the output file. This, with the figure size, controls the size in pixels of the resulting movie file.", "The filename prefix to use for temporary files. If None (the default), files are written to a temporary directory which is deleted by cleanup; if not None, no temporary files are deleted."]}, {"name": "animation.HTMLWriter.__init__()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.__init__", "type": "animation", "text": ["Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment."]}, {"name": "animation.HTMLWriter.finish()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.finish", "type": "animation", "text": ["Finish any processing for writing the movie."]}, {"name": "animation.HTMLWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.grab_frame", "type": "animation", "text": ["Grab the image information from the figure and save as a movie frame.", "All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure."]}, {"name": "animation.HTMLWriter.isAvailable()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.isAvailable", "type": "animation", "text": ["Return whether a MovieWriter subclass is actually available."]}, {"name": "animation.HTMLWriter.setup()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.setup", "type": "animation", "text": ["Setup for writing the movie file.", "The figure to grab the rendered frames from.", "The filename of the resulting movie file.", "The dpi of the output file. This, with the figure size, controls the size in pixels of the resulting movie file.", "The filename prefix to use for temporary files. If None (the default), files are written to a temporary directory which is deleted by cleanup; if not None, no temporary files are deleted."]}, {"name": "animation.HTMLWriter.supported_formats", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.supported_formats", "type": "animation", "text": []}, {"name": "animation.ImageMagickBase", "path": "_as_gen/matplotlib.animation.imagemagickbase", "type": "animation", "text": ["Mixin class for ImageMagick output.", "To be useful this must be multiply-inherited from with a MovieWriterBase sub-class.", "__init__(*args, **kwargs)", "bin_path()", "isAvailable()", "delay", "output_args"]}, {"name": "animation.ImageMagickBase.__init__()", "path": "_as_gen/matplotlib.animation.imagemagickbase#matplotlib.animation.ImageMagickBase.__init__", "type": "animation", "text": []}, {"name": "animation.ImageMagickBase.bin_path()", "path": "_as_gen/matplotlib.animation.imagemagickbase#matplotlib.animation.ImageMagickBase.bin_path", "type": "animation", "text": []}, {"name": "animation.ImageMagickBase.isAvailable()", "path": "_as_gen/matplotlib.animation.imagemagickbase#matplotlib.animation.ImageMagickBase.isAvailable", "type": "animation", "text": []}, {"name": "animation.ImageMagickFileWriter", "path": "_as_gen/matplotlib.animation.imagemagickfilewriter", "type": "animation", "text": ["File-based animated gif writer.", "Frames are written to temporary files on disk and then stitched together at the end.", "__init__(*args, **kwargs)", "bin_path()", "Return the binary path to the commandline tool used by a specific subclass.", "cleanup()", "[Deprecated]", "finish()", "Finish any processing for writing the movie.", "grab_frame(**savefig_kwargs)", "Grab the image information from the figure and save as a movie frame.", "isAvailable()", "Return whether a MovieWriter subclass is actually available.", "saving(fig, outfile, dpi, *args, **kwargs)", "Context manager to facilitate writing the movie file.", "setup(fig, outfile[, dpi, frame_prefix])", "Setup for writing the movie file.", "delay", "frame_format", "Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.", "frame_size", "A tuple (width, height) in pixels of a movie frame.", "output_args", "supported_formats"]}, {"name": "animation.ImageMagickFileWriter.__init__()", "path": "_as_gen/matplotlib.animation.imagemagickfilewriter#matplotlib.animation.ImageMagickFileWriter.__init__", "type": "animation", "text": []}, {"name": "animation.ImageMagickFileWriter.supported_formats", "path": "_as_gen/matplotlib.animation.imagemagickfilewriter#matplotlib.animation.ImageMagickFileWriter.supported_formats", "type": "animation", "text": []}, {"name": "animation.ImageMagickWriter", "path": "_as_gen/matplotlib.animation.imagemagickwriter", "type": "animation", "text": ["Pipe-based animated gif.", "Frames are streamed directly to ImageMagick via a pipe and written in a single pass.", "Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "__init__([fps, codec, bitrate, extra_args, ...])", "bin_path()", "Return the binary path to the commandline tool used by a specific subclass.", "cleanup()", "[Deprecated]", "finish()", "Finish any processing for writing the movie.", "grab_frame(**savefig_kwargs)", "Grab the image information from the figure and save as a movie frame.", "isAvailable()", "Return whether a MovieWriter subclass is actually available.", "saving(fig, outfile, dpi, *args, **kwargs)", "Context manager to facilitate writing the movie file.", "setup(fig, outfile[, dpi])", "Setup for writing the movie file.", "delay", "frame_size", "A tuple (width, height) in pixels of a movie frame.", "output_args", "supported_formats"]}, {"name": "animation.ImageMagickWriter.__init__()", "path": "_as_gen/matplotlib.animation.imagemagickwriter#matplotlib.animation.ImageMagickWriter.__init__", "type": "animation", "text": ["Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment."]}, {"name": "animation.MovieWriter", "path": "_as_gen/matplotlib.animation.moviewriter", "type": "animation", "text": ["Base class for writing movies.", "This is a base class for MovieWriter subclasses that write a movie frame data to a pipe. You cannot instantiate this class directly. See examples for how to use its subclasses.", "The format used in writing frame data, defaults to 'rgba'.", "The figure to capture data from. This must be provided by the sub-classes.", "Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.", "__init__([fps, codec, bitrate, extra_args, ...])", "bin_path()", "Return the binary path to the commandline tool used by a specific subclass.", "cleanup()", "[Deprecated]", "finish()", "Finish any processing for writing the movie.", "grab_frame(**savefig_kwargs)", "Grab the image information from the figure and save as a movie frame.", "isAvailable()", "Return whether a MovieWriter subclass is actually available.", "saving(fig, outfile, dpi, *args, **kwargs)", "Context manager to facilitate writing the movie file.", "setup(fig, outfile[, dpi])", "Setup for writing the movie file.", "frame_size", "A tuple (width, height) in pixels of a movie frame.", "supported_formats", "Return the binary path to the commandline tool used by a specific subclass. This is a class method so that the tool can be looked for before making a particular MovieWriter subclass available.", "[Deprecated]", "Deprecated since version 3.4: ", "Finish any processing for writing the movie.", "Grab the image information from the figure and save as a movie frame.", "All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure.", "Return whether a MovieWriter subclass is actually available.", "Setup for writing the movie file.", "The figure object that contains the information for frames.", "The filename of the resulting movie file.", "The DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file."]}, {"name": "animation.MovieWriter.__init__()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.__init__", "type": "animation", "text": ["Movie frame rate (per second).", "The codec to use.", "The bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.", "Extra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.", "A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment."]}, {"name": "animation.MovieWriter.bin_path()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.bin_path", "type": "animation", "text": ["Return the binary path to the commandline tool used by a specific subclass. This is a class method so that the tool can be looked for before making a particular MovieWriter subclass available."]}, {"name": "animation.MovieWriter.cleanup()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.cleanup", "type": "animation", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "animation.MovieWriter.finish()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.finish", "type": "animation", "text": ["Finish any processing for writing the movie."]}, {"name": "animation.MovieWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.grab_frame", "type": "animation", "text": ["Grab the image information from the figure and save as a movie frame.", "All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure."]}, {"name": "animation.MovieWriter.isAvailable()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.isAvailable", "type": "animation", "text": ["Return whether a MovieWriter subclass is actually available."]}, {"name": "animation.MovieWriter.setup()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.setup", "type": "animation", "text": ["Setup for writing the movie file.", "The figure object that contains the information for frames.", "The filename of the resulting movie file.", "The DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file."]}, {"name": "animation.MovieWriter.supported_formats", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.supported_formats", "type": "animation", "text": []}, {"name": "animation.MovieWriterRegistry", "path": "_as_gen/matplotlib.animation.moviewriterregistry", "type": "animation", "text": ["Registry of available writer classes by human readable name.", "__init__()", "is_available(name)", "Check if given writer is available by name.", "list()", "Get a list of available MovieWriters.", "register(name)", "Decorator for registering a class under a name.", "Check if given writer is available by name.", "Get a list of available MovieWriters.", "Decorator for registering a class under a name.", "Example use:"]}, {"name": "animation.MovieWriterRegistry.__init__()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.__init__", "type": "animation", "text": []}, {"name": "animation.MovieWriterRegistry.is_available()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.is_available", "type": "animation", "text": ["Check if given writer is available by name."]}, {"name": "animation.MovieWriterRegistry.list()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.list", "type": "animation", "text": ["Get a list of available MovieWriters."]}, {"name": "animation.MovieWriterRegistry.register()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.register", "type": "animation", "text": ["Decorator for registering a class under a name.", "Example use:"]}, {"name": "animation.PillowWriter", "path": "_as_gen/matplotlib.animation.pillowwriter", "type": "animation", "text": ["__init__([fps, metadata, codec, bitrate])", "finish()", "Finish any processing for writing the movie.", "grab_frame(**savefig_kwargs)", "Grab the image information from the figure and save as a movie frame.", "isAvailable()", "saving(fig, outfile, dpi, *args, **kwargs)", "Context manager to facilitate writing the movie file.", "setup(fig, outfile[, dpi])", "Setup for writing the movie file.", "frame_size", "A tuple (width, height) in pixels of a movie frame.", "Finish any processing for writing the movie.", "Grab the image information from the figure and save as a movie frame.", "All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure.", "Setup for writing the movie file.", "The figure object that contains the information for frames.", "The filename of the resulting movie file.", "The DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file."]}, {"name": "animation.PillowWriter.__init__()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.__init__", "type": "animation", "text": []}, {"name": "animation.PillowWriter.finish()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.finish", "type": "animation", "text": ["Finish any processing for writing the movie."]}, {"name": "animation.PillowWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.grab_frame", "type": "animation", "text": ["Grab the image information from the figure and save as a movie frame.", "All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure."]}, {"name": "animation.PillowWriter.isAvailable()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.isAvailable", "type": "animation", "text": []}, {"name": "animation.PillowWriter.setup()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.setup", "type": "animation", "text": ["Setup for writing the movie file.", "The figure object that contains the information for frames.", "The filename of the resulting movie file.", "The DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file."]}, {"name": "animation.TimedAnimation", "path": "_as_gen/matplotlib.animation.timedanimation", "type": "animation", "text": ["Animation subclass for time-based animation.", "A new frame is drawn every interval milliseconds.", "Note", "You must store the created Animation in a variable that lives as long as the animation should run. Otherwise, the Animation object will be garbage-collected and the animation stops.", "The figure object used to get needed events, such as draw or resize.", "Delay between frames in milliseconds.", "The delay in milliseconds between consecutive animation runs, if repeat is True.", "Whether the animation repeats when the sequence of frames is completed.", "Whether blitting is used to optimize drawing.", "__init__(fig[, interval, repeat_delay, ...])", "new_frame_seq()", "Return a new sequence of frame information.", "new_saved_frame_seq()", "Return a new sequence of saved/cached frame information.", "pause()", "Pause the animation.", "resume()", "Resume the animation.", "save(filename[, writer, fps, dpi, codec, ...])", "Save the animation as a movie file by drawing every frame.", "to_html5_video([embed_limit])", "Convert the animation to an HTML5 <video> tag.", "to_jshtml([fps, embed_frames, default_mode])", "Generate HTML representation of the animation."]}, {"name": "animation.TimedAnimation.__init__()", "path": "_as_gen/matplotlib.animation.timedanimation#matplotlib.animation.TimedAnimation.__init__", "type": "animation", "text": []}, {"name": "artist", "path": "artist_api", "type": "artist", "text": ["Abstract base class for objects that render into a FigureCanvas.", "Typically, all visible elements in a figure are subclasses of Artist.", "Artist.add_callback", "Add a callback function that will be called whenever one of the Artist's properties changes.", "Artist.remove_callback", "Remove a callback based on its observer id.", "Artist.pchanged", "Call all of the registered callbacks.", "Artist.get_cursor_data", "Return the cursor data for a given event.", "Artist.format_cursor_data", "Return a string representation of data.", "Artist.mouseover", "If this property is set to True, the artist will be queried for custom context information when the mouse cursor moves over it.", "Artist.contains", "Test whether the artist contains the mouse event.", "Artist.pick", "Process a pick event.", "Artist.pickable", "Return whether the artist is pickable.", "Artist.set_picker", "Define the picking behavior of the artist.", "Artist.get_picker", "Return the picking behavior of the artist.", "Artist.set_clip_on", "Set whether the artist uses clipping.", "Artist.get_clip_on", "Return whether the artist uses clipping.", "Artist.set_clip_box", "Set the artist's clip Bbox.", "Artist.get_clip_box", "Return the clipbox.", "Artist.set_clip_path", "Set the artist's clip path.", "Artist.get_clip_path", "Return the clip path.", "Artist.update", "Update this artist's properties from the dict props.", "Artist.update_from", "Copy properties from other to self.", "Artist.properties", "Return a dictionary of all the properties of the artist.", "Artist.set", "Set multiple properties at once.", "Artist.draw", "Draw the Artist (and its children) using the given renderer.", "Artist.set_animated", "Set whether the artist is intended to be used in an animation.", "Artist.get_animated", "Return whether the artist is animated.", "Artist.set_alpha", "Set the alpha value used for blending - not supported on all backends.", "Artist.get_alpha", "Return the alpha value used for blending - not supported on all backends.", "Artist.set_snap", "Set the snapping behavior.", "Artist.get_snap", "Return the snap setting.", "Artist.set_visible", "Set the artist's visibility.", "Artist.get_visible", "Return the visibility.", "Artist.zorder", "Artist.set_zorder", "Set the zorder for the artist.", "Artist.get_zorder", "Return the artist's zorder.", "Artist.set_agg_filter", "Set the agg filter.", "Artist.set_sketch_params", "Set the sketch parameters.", "Artist.get_sketch_params", "Return the sketch parameters for the artist.", "Artist.set_rasterized", "Force rasterized (bitmap) drawing for vector graphics output.", "Artist.get_rasterized", "Return whether the artist is to be rasterized.", "Artist.set_path_effects", "Set the path effects.", "Artist.get_path_effects", "Artist.get_agg_filter", "Return filter function to be used for agg filter.", "Artist.get_window_extent", "Get the artist's bounding box in display space.", "Artist.get_transformed_clip_path_and_affine", "Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.", "Artist.remove", "Remove the artist from the figure if possible.", "Artist.axes", "The Axes instance the artist resides in, or None.", "Artist.set_figure", "Set the Figure instance the artist belongs to.", "Artist.get_figure", "Return the Figure instance the artist belongs to.", "Artist.get_children", "Return a list of the child Artists of this Artist.", "Artist.findobj", "Find artist objects.", "Artist.set_transform", "Set the artist transform.", "Artist.get_transform", "Return the Transform instance used by this artist.", "Artist.is_transform_set", "Return whether the Artist has an explicitly set transform.", "Artist.convert_xunits", "Convert x using the unit type of the xaxis.", "Artist.convert_yunits", "Convert y using the unit type of the yaxis.", "Artist.have_units", "Return whether units are set on any axis.", "Artist.set_gid", "Set the (group) id for the artist.", "Artist.get_gid", "Return the group id.", "Artist.set_label", "Set a label that will be displayed in the legend.", "Artist.get_label", "Return the label used for this artist in the legend.", "Artist.set_url", "Set the url for the artist.", "Artist.get_url", "Return the url.", "Artist.sticky_edges", "x and y sticky edge lists for autoscaling.", "Artist.set_in_layout", "Set if artist is to be included in layout calculations, E.g.", "Artist.get_in_layout", "Return boolean flag, True if artist is included in layout calculations.", "Artist.stale", "Whether the artist is 'stale' and needs to be re-drawn for the output to match the internal state of the artist.", "allow_rasterization", "Decorator for Artist.draw method.", "get", "Return the value of an Artist's property, or print all of them.", "getp", "Return the value of an Artist's property, or print all of them.", "setp", "Set one or more properties on an Artist, or list allowed values.", "kwdoc", "Inspect an Artist class (using ArtistInspector) and return information about its settable properties and their current values.", "ArtistInspector", "A helper class to inspect an Artist and return information about its settable properties and their current values."]}, {"name": "artist.allow_rasterization", "path": "_as_gen/matplotlib.artist.allow_rasterization", "type": "artist", "text": ["Decorator for Artist.draw method. Provides routines that run before and after the draw call. The before and after functions are useful for changing artist-dependent renderer attributes or making other setup function calls, such as starting and flushing a mixed-mode renderer."]}, {"name": "artist.Artist", "path": "artist_api#matplotlib.artist.Artist", "type": "artist", "text": ["Abstract base class for objects that render into a FigureCanvas.", "Typically, all visible elements in a figure are subclasses of Artist."]}, {"name": "artist.Artist.add_callback", "path": "_as_gen/matplotlib.artist.artist.add_callback", "type": "artist", "text": ["Add a callback function that will be called whenever one of the Artist's properties changes.", "The callback function. It must have the signature:", "where artist is the calling Artist. Return values may exist but are ignored.", "The observer id associated with the callback. This id can be used for removing the callback with remove_callback later.", "See also"]}, {"name": "artist.Artist.axes", "path": "_as_gen/matplotlib.artist.artist.axes", "type": "artist", "text": ["The Axes instance the artist resides in, or None."]}, {"name": "artist.Artist.contains", "path": "_as_gen/matplotlib.artist.artist.contains", "type": "artist", "text": ["Test whether the artist contains the mouse event.", "Whether any values are within the radius.", "An artist-specific dictionary of details of the event context, such as which points are contained in the pick radius. See the individual Artist subclasses for details."]}, {"name": "artist.Artist.convert_xunits", "path": "_as_gen/matplotlib.artist.artist.convert_xunits", "type": "artist", "text": ["Convert x using the unit type of the xaxis.", "If the artist is not in contained in an Axes or if the xaxis does not have units, x itself is returned."]}, {"name": "artist.Artist.convert_yunits", "path": "_as_gen/matplotlib.artist.artist.convert_yunits", "type": "artist", "text": ["Convert y using the unit type of the yaxis.", "If the artist is not in contained in an Axes or if the yaxis does not have units, y itself is returned."]}, {"name": "artist.Artist.draw", "path": "_as_gen/matplotlib.artist.artist.draw", "type": "artist", "text": ["Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses."]}, {"name": "artist.Artist.findobj", "path": "_as_gen/matplotlib.artist.artist.findobj", "type": "artist", "text": ["Find artist objects.", "Recursively find all Artist instances contained in the artist.", "A filter criterion for the matches. This can be", "Include self in the list to be checked for a match."]}, {"name": "artist.Artist.format_cursor_data", "path": "_as_gen/matplotlib.artist.artist.format_cursor_data", "type": "artist", "text": ["Return a string representation of data.", "Note", "This method is intended to be overridden by artist subclasses. As an end-user of Matplotlib you will most likely not call this method yourself.", "The default implementation converts ints and floats and arrays of ints and floats into a comma-separated string enclosed in square brackets, unless the artist has an associated colorbar, in which case scalar values are formatted using the colorbar's formatter.", "See also"]}, {"name": "artist.Artist.get_agg_filter", "path": "_as_gen/matplotlib.artist.artist.get_agg_filter", "type": "artist", "text": ["Return filter function to be used for agg filter."]}, {"name": "artist.Artist.get_alpha", "path": "_as_gen/matplotlib.artist.artist.get_alpha", "type": "artist", "text": ["Return the alpha value used for blending - not supported on all backends."]}, {"name": "artist.Artist.get_animated", "path": "_as_gen/matplotlib.artist.artist.get_animated", "type": "artist", "text": ["Return whether the artist is animated."]}, {"name": "artist.Artist.get_children", "path": "_as_gen/matplotlib.artist.artist.get_children", "type": "artist", "text": ["Return a list of the child Artists of this Artist."]}, {"name": "artist.Artist.get_clip_box", "path": "_as_gen/matplotlib.artist.artist.get_clip_box", "type": "artist", "text": ["Return the clipbox."]}, {"name": "artist.Artist.get_clip_on", "path": "_as_gen/matplotlib.artist.artist.get_clip_on", "type": "artist", "text": ["Return whether the artist uses clipping."]}, {"name": "artist.Artist.get_clip_path", "path": "_as_gen/matplotlib.artist.artist.get_clip_path", "type": "artist", "text": ["Return the clip path."]}, {"name": "artist.Artist.get_cursor_data", "path": "_as_gen/matplotlib.artist.artist.get_cursor_data", "type": "artist", "text": ["Return the cursor data for a given event.", "Note", "This method is intended to be overridden by artist subclasses. As an end-user of Matplotlib you will most likely not call this method yourself.", "Cursor data can be used by Artists to provide additional context information for a given event. The default implementation just returns None.", "Subclasses can override the method and return arbitrary data. However, when doing so, they must ensure that format_cursor_data can convert the data to a string representation.", "The only current use case is displaying the z-value of an AxesImage in the status bar of a plot window, while moving the mouse.", "See also"]}, {"name": "artist.Artist.get_figure", "path": "_as_gen/matplotlib.artist.artist.get_figure", "type": "artist", "text": ["Return the Figure instance the artist belongs to."]}, {"name": "artist.Artist.get_gid", "path": "_as_gen/matplotlib.artist.artist.get_gid", "type": "artist", "text": ["Return the group id."]}, {"name": "artist.Artist.get_in_layout", "path": "_as_gen/matplotlib.artist.artist.get_in_layout", "type": "artist", "text": ["Return boolean flag, True if artist is included in layout calculations.", "E.g. Constrained Layout Guide, Figure.tight_layout(), and fig.savefig(fname, bbox_inches='tight')."]}, {"name": "artist.Artist.get_label", "path": "_as_gen/matplotlib.artist.artist.get_label", "type": "artist", "text": ["Return the label used for this artist in the legend."]}, {"name": "artist.Artist.get_path_effects", "path": "_as_gen/matplotlib.artist.artist.get_path_effects", "type": "artist", "text": []}, {"name": "artist.Artist.get_picker", "path": "_as_gen/matplotlib.artist.artist.get_picker", "type": "artist", "text": ["Return the picking behavior of the artist.", "The possible values are described in set_picker.", "See also"]}, {"name": "artist.Artist.get_rasterized", "path": "_as_gen/matplotlib.artist.artist.get_rasterized", "type": "artist", "text": ["Return whether the artist is to be rasterized."]}, {"name": "artist.Artist.get_sketch_params", "path": "_as_gen/matplotlib.artist.artist.get_sketch_params", "type": "artist", "text": ["Return the sketch parameters for the artist.", "A 3-tuple with the following elements:", "Returns None if no sketch parameters were set."]}, {"name": "artist.Artist.get_snap", "path": "_as_gen/matplotlib.artist.artist.get_snap", "type": "artist", "text": ["Return the snap setting.", "See set_snap for details."]}, {"name": "artist.Artist.get_transform", "path": "_as_gen/matplotlib.artist.artist.get_transform", "type": "artist", "text": ["Return the Transform instance used by this artist."]}, {"name": "artist.Artist.get_transformed_clip_path_and_affine", "path": "_as_gen/matplotlib.artist.artist.get_transformed_clip_path_and_affine", "type": "artist", "text": ["Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation."]}, {"name": "artist.Artist.get_url", "path": "_as_gen/matplotlib.artist.artist.get_url", "type": "artist", "text": ["Return the url."]}, {"name": "artist.Artist.get_visible", "path": "_as_gen/matplotlib.artist.artist.get_visible", "type": "artist", "text": ["Return the visibility."]}, {"name": "artist.Artist.get_window_extent", "path": "_as_gen/matplotlib.artist.artist.get_window_extent", "type": "artist", "text": ["Get the artist's bounding box in display space.", "The bounding box' width and height are nonnegative.", "Subclasses should override for inclusion in the bounding box \"tight\" calculation. Default is to return an empty bounding box at 0, 0.", "Be careful when using this function, the results will not update if the artist window extent of the artist changes. The extent can change due to any changes in the transform stack, such as changing the axes limits, the figure size, or the canvas used (as is done when saving a figure). This can lead to unexpected behavior where interactive figures will look fine on the screen, but will save incorrectly."]}, {"name": "artist.Artist.get_zorder", "path": "_as_gen/matplotlib.artist.artist.get_zorder", "type": "artist", "text": ["Return the artist's zorder."]}, {"name": "artist.Artist.have_units", "path": "_as_gen/matplotlib.artist.artist.have_units", "type": "artist", "text": ["Return whether units are set on any axis."]}, {"name": "artist.Artist.is_transform_set", "path": "_as_gen/matplotlib.artist.artist.is_transform_set", "type": "artist", "text": ["Return whether the Artist has an explicitly set transform.", "This is True after set_transform has been called."]}, {"name": "artist.Artist.mouseover", "path": "_as_gen/matplotlib.artist.artist.mouseover", "type": "artist", "text": ["If this property is set to True, the artist will be queried for custom context information when the mouse cursor moves over it.", "See also get_cursor_data(), ToolCursorPosition and NavigationToolbar2."]}, {"name": "artist.Artist.pchanged", "path": "_as_gen/matplotlib.artist.artist.pchanged", "type": "artist", "text": ["Call all of the registered callbacks.", "This function is triggered internally when a property is changed.", "See also"]}, {"name": "artist.Artist.pick", "path": "_as_gen/matplotlib.artist.artist.pick", "type": "artist", "text": ["Process a pick event.", "Each child artist will fire a pick event if mouseevent is over the artist and the artist has picker set.", "See also"]}, {"name": "artist.Artist.pickable", "path": "_as_gen/matplotlib.artist.artist.pickable", "type": "artist", "text": ["Return whether the artist is pickable.", "See also"]}, {"name": "artist.Artist.properties", "path": "_as_gen/matplotlib.artist.artist.properties", "type": "artist", "text": ["Return a dictionary of all the properties of the artist."]}, {"name": "artist.Artist.remove", "path": "_as_gen/matplotlib.artist.artist.remove", "type": "artist", "text": ["Remove the artist from the figure if possible.", "The effect will not be visible until the figure is redrawn, e.g., with FigureCanvasBase.draw_idle. Call relim to update the axes limits if desired.", "Note: relim will not see collections even if the collection was added to the axes with autolim = True.", "Note: there is no support for removing the artist's legend entry."]}, {"name": "artist.Artist.remove_callback", "path": "_as_gen/matplotlib.artist.artist.remove_callback", "type": "artist", "text": ["Remove a callback based on its observer id.", "See also"]}, {"name": "artist.Artist.set", "path": "_as_gen/matplotlib.artist.artist.set", "type": "artist", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "in_layout", "bool", "label", "object", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float"]}, {"name": "artist.Artist.set_agg_filter", "path": "_as_gen/matplotlib.artist.artist.set_agg_filter", "type": "artist", "text": ["Set the agg filter.", "A filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array."]}, {"name": "artist.Artist.set_alpha", "path": "_as_gen/matplotlib.artist.artist.set_alpha", "type": "artist", "text": ["Set the alpha value used for blending - not supported on all backends.", "alpha must be within the 0-1 range, inclusive."]}, {"name": "artist.Artist.set_animated", "path": "_as_gen/matplotlib.artist.artist.set_animated", "type": "artist", "text": ["Set whether the artist is intended to be used in an animation.", "If True, the artist is excluded from regular drawing of the figure. You have to call Figure.draw_artist / Axes.draw_artist explicitly on the artist. This appoach is used to speed up animations using blitting.", "See also matplotlib.animation and Faster rendering by using blitting."]}, {"name": "artist.Artist.set_clip_box", "path": "_as_gen/matplotlib.artist.artist.set_clip_box", "type": "artist", "text": ["Set the artist's clip Bbox."]}, {"name": "artist.Artist.set_clip_on", "path": "_as_gen/matplotlib.artist.artist.set_clip_on", "type": "artist", "text": ["Set whether the artist uses clipping.", "When False artists will be visible outside of the axes which can lead to unexpected results."]}, {"name": "artist.Artist.set_clip_path", "path": "_as_gen/matplotlib.artist.artist.set_clip_path", "type": "artist", "text": ["Set the artist's clip path.", "The clip path. If given a Path, transform must be provided as well. If None, a previously set clip path is removed.", "Only used if path is a Path, in which case the given Path is converted to a TransformedPath using transform.", "For efficiency, if path is a Rectangle this method will set the clipping box to the corresponding rectangle and set the clipping path to None.", "For technical reasons (support of set), a tuple (path, transform) is also accepted as a single positional parameter."]}, {"name": "artist.Artist.set_figure", "path": "_as_gen/matplotlib.artist.artist.set_figure", "type": "artist", "text": ["Set the Figure instance the artist belongs to."]}, {"name": "artist.Artist.set_gid", "path": "_as_gen/matplotlib.artist.artist.set_gid", "type": "artist", "text": ["Set the (group) id for the artist."]}, {"name": "artist.Artist.set_in_layout", "path": "_as_gen/matplotlib.artist.artist.set_in_layout", "type": "artist", "text": ["Set if artist is to be included in layout calculations, E.g. Constrained Layout Guide, Figure.tight_layout(), and fig.savefig(fname, bbox_inches='tight')."]}, {"name": "artist.Artist.set_label", "path": "_as_gen/matplotlib.artist.artist.set_label", "type": "artist", "text": ["Set a label that will be displayed in the legend.", "s will be converted to a string by calling str."]}, {"name": "artist.Artist.set_path_effects", "path": "_as_gen/matplotlib.artist.artist.set_path_effects", "type": "artist", "text": ["Set the path effects."]}, {"name": "artist.Artist.set_picker", "path": "_as_gen/matplotlib.artist.artist.set_picker", "type": "artist", "text": ["Define the picking behavior of the artist.", "This can be one of the following:", "A function: If picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:", "to determine the hit test. if the mouse event is over the artist, return hit=True and props is a dictionary of properties you want added to the PickEvent attributes."]}, {"name": "artist.Artist.set_rasterized", "path": "_as_gen/matplotlib.artist.artist.set_rasterized", "type": "artist", "text": ["Force rasterized (bitmap) drawing for vector graphics output.", "Rasterized drawing is not supported by all artists. If you try to enable this on an artist that does not support it, the command has no effect and a warning will be issued.", "This setting is ignored for pixel-based output.", "See also Rasterization for vector graphics."]}, {"name": "artist.Artist.set_sketch_params", "path": "_as_gen/matplotlib.artist.artist.set_sketch_params", "type": "artist", "text": ["Set the sketch parameters.", "The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is None, or not provided, no sketch filter will be provided.", "The length of the wiggle along the line, in pixels (default 128.0)", "The scale factor by which the length is shrunken or expanded (default 16.0)", "The PGF backend uses this argument as an RNG seed and not as described above. Using the same seed yields the same random shape."]}, {"name": "artist.Artist.set_snap", "path": "_as_gen/matplotlib.artist.artist.set_snap", "type": "artist", "text": ["Set the snapping behavior.", "Snapping aligns positions with the pixel grid, which results in clearer images. For example, if a black line of 1px width was defined at a position in between two pixels, the resulting image would contain the interpolated value of that line in the pixel grid, which would be a grey value on both adjacent pixel positions. In contrast, snapping will move the line to the nearest integer pixel value, so that the resulting image will really contain a 1px wide black line.", "Snapping is currently only supported by the Agg and MacOSX backends.", "Possible values:"]}, {"name": "artist.Artist.set_transform", "path": "_as_gen/matplotlib.artist.artist.set_transform", "type": "artist", "text": ["Set the artist transform."]}, {"name": "artist.Artist.set_url", "path": "_as_gen/matplotlib.artist.artist.set_url", "type": "artist", "text": ["Set the url for the artist."]}, {"name": "artist.Artist.set_visible", "path": "_as_gen/matplotlib.artist.artist.set_visible", "type": "artist", "text": ["Set the artist's visibility."]}, {"name": "artist.Artist.set_zorder", "path": "_as_gen/matplotlib.artist.artist.set_zorder", "type": "artist", "text": ["Set the zorder for the artist. Artists with lower zorder values are drawn first."]}, {"name": "artist.Artist.stale", "path": "_as_gen/matplotlib.artist.artist.stale", "type": "artist", "text": ["Whether the artist is 'stale' and needs to be re-drawn for the output to match the internal state of the artist."]}, {"name": "artist.Artist.sticky_edges", "path": "_as_gen/matplotlib.artist.artist.sticky_edges", "type": "artist", "text": ["x and y sticky edge lists for autoscaling.", "When performing autoscaling, if a data limit coincides with a value in the corresponding sticky_edges list, then no margin will be added--the view limit \"sticks\" to the edge. A typical use case is histograms, where one usually expects no margin on the bottom edge (0) of the histogram.", "Moreover, margin expansion \"bumps\" against sticky edges and cannot cross them. For example, if the upper data limit is 1.0, the upper view limit computed by simple margin application is 1.2, but there is a sticky edge at 1.1, then the actual upper view limit will be 1.1.", "This attribute cannot be assigned to; however, the x and y lists can be modified in place as needed."]}, {"name": "artist.Artist.update", "path": "_as_gen/matplotlib.artist.artist.update", "type": "artist", "text": ["Update this artist's properties from the dict props."]}, {"name": "artist.Artist.update_from", "path": "_as_gen/matplotlib.artist.artist.update_from", "type": "artist", "text": ["Copy properties from other to self."]}, {"name": "artist.Artist.zorder", "path": "_as_gen/matplotlib.artist.artist.zorder", "type": "artist", "text": []}, {"name": "artist.ArtistInspector", "path": "_as_gen/matplotlib.artist.artistinspector", "type": "artist", "text": ["A helper class to inspect an Artist and return information about its settable properties and their current values.", "Initialize the artist inspector with an Artist or an iterable of Artists. If an iterable is used, we assume it is a homogeneous sequence (all Artists are of the same type) and it is your responsibility to make sure this is so.", "Initialize the artist inspector with an Artist or an iterable of Artists. If an iterable is used, we assume it is a homogeneous sequence (all Artists are of the same type) and it is your responsibility to make sure this is so.", "__init__(o)", "Initialize the artist inspector with an Artist or an iterable of Artists.", "aliased_name(s)", "Return 'PROPNAME or alias' if s has an alias, else return 'PROPNAME'.", "aliased_name_rest(s, target)", "Return 'PROPNAME or alias' if s has an alias, else return 'PROPNAME', formatted for reST.", "get_aliases()", "Get a dict mapping property fullnames to sets of aliases for each alias in the ArtistInspector.", "get_setters()", "Get the attribute strings with setters for object.", "get_valid_values(attr)", "Get the legal arguments for the setter associated with attr.", "is_alias(o)", "Return whether method object o is an alias for another method.", "pprint_getters()", "Return the getters and actual values as list of strings.", "pprint_setters([prop, leadingspace])", "If prop is None, return a list of strings of all settable properties and their valid values.", "pprint_setters_rest([prop, leadingspace])", "If prop is None, return a list of reST-formatted strings of all settable properties and their valid values.", "properties()", "Return a dictionary mapping property name -> value.", "Return 'PROPNAME or alias' if s has an alias, else return 'PROPNAME'.", "e.g., for the line markerfacecolor property, which has an alias, return 'markerfacecolor or mfc' and for the transform property, which does not, return 'transform'.", "Return 'PROPNAME or alias' if s has an alias, else return 'PROPNAME', formatted for reST.", "e.g., for the line markerfacecolor property, which has an alias, return 'markerfacecolor or mfc' and for the transform property, which does not, return 'transform'.", "Get a dict mapping property fullnames to sets of aliases for each alias in the ArtistInspector.", "e.g., for lines:", "Get the attribute strings with setters for object.", "For example, for a line, return ['markerfacecolor', 'linewidth',\n....].", "Get the legal arguments for the setter associated with attr.", "This is done by querying the docstring of the setter for a line that begins with \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a numpydoc-style documentation for the setter's first argument.", "Return whether method object o is an alias for another method.", "Return the getters and actual values as list of strings.", "If prop is None, return a list of strings of all settable properties and their valid values.", "If prop is not None, it is a valid property name and that property will be returned as a string of property : valid values.", "If prop is None, return a list of reST-formatted strings of all settable properties and their valid values.", "If prop is not None, it is a valid property name and that property will be returned as a string of \"property : valid\" values.", "Return a dictionary mapping property name -> value."]}, {"name": "artist.ArtistInspector.__init__()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.__init__", "type": "artist", "text": ["Initialize the artist inspector with an Artist or an iterable of Artists. If an iterable is used, we assume it is a homogeneous sequence (all Artists are of the same type) and it is your responsibility to make sure this is so."]}, {"name": "artist.ArtistInspector.aliased_name()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.aliased_name", "type": "artist", "text": ["Return 'PROPNAME or alias' if s has an alias, else return 'PROPNAME'.", "e.g., for the line markerfacecolor property, which has an alias, return 'markerfacecolor or mfc' and for the transform property, which does not, return 'transform'."]}, {"name": "artist.ArtistInspector.aliased_name_rest()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.aliased_name_rest", "type": "artist", "text": ["Return 'PROPNAME or alias' if s has an alias, else return 'PROPNAME', formatted for reST.", "e.g., for the line markerfacecolor property, which has an alias, return 'markerfacecolor or mfc' and for the transform property, which does not, return 'transform'."]}, {"name": "artist.ArtistInspector.get_aliases()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.get_aliases", "type": "artist", "text": ["Get a dict mapping property fullnames to sets of aliases for each alias in the ArtistInspector.", "e.g., for lines:"]}, {"name": "artist.ArtistInspector.get_setters()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.get_setters", "type": "artist", "text": ["Get the attribute strings with setters for object.", "For example, for a line, return ['markerfacecolor', 'linewidth',\n....]."]}, {"name": "artist.ArtistInspector.get_valid_values()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.get_valid_values", "type": "artist", "text": ["Get the legal arguments for the setter associated with attr.", "This is done by querying the docstring of the setter for a line that begins with \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a numpydoc-style documentation for the setter's first argument."]}, {"name": "artist.ArtistInspector.is_alias()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.is_alias", "type": "artist", "text": ["Return whether method object o is an alias for another method."]}, {"name": "artist.ArtistInspector.pprint_getters()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.pprint_getters", "type": "artist", "text": ["Return the getters and actual values as list of strings."]}, {"name": "artist.ArtistInspector.pprint_setters()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.pprint_setters", "type": "artist", "text": ["If prop is None, return a list of strings of all settable properties and their valid values.", "If prop is not None, it is a valid property name and that property will be returned as a string of property : valid values."]}, {"name": "artist.ArtistInspector.pprint_setters_rest()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.pprint_setters_rest", "type": "artist", "text": ["If prop is None, return a list of reST-formatted strings of all settable properties and their valid values.", "If prop is not None, it is a valid property name and that property will be returned as a string of \"property : valid\" values."]}, {"name": "artist.ArtistInspector.properties()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.properties", "type": "artist", "text": ["Return a dictionary mapping property name -> value."]}, {"name": "artist.get", "path": "_as_gen/matplotlib.artist.get", "type": "artist", "text": ["Return the value of an Artist's property, or print all of them.", "The queried artist; e.g., a Line2D, a Text, or an Axes.", "If property is 'somename', this function returns obj.get_somename().", "If it's None (or unset), it prints all gettable properties from obj. Many properties have aliases for shorter typing, e.g. 'lw' is an alias for 'linewidth'. In the output, aliases and full property names will be listed as:", "property or alias = value", "e.g.:", "linewidth or lw = 2", "See also"]}, {"name": "artist.getp", "path": "_as_gen/matplotlib.artist.getp", "type": "artist", "text": ["Return the value of an Artist's property, or print all of them.", "The queried artist; e.g., a Line2D, a Text, or an Axes.", "If property is 'somename', this function returns obj.get_somename().", "If it's None (or unset), it prints all gettable properties from obj. Many properties have aliases for shorter typing, e.g. 'lw' is an alias for 'linewidth'. In the output, aliases and full property names will be listed as:", "property or alias = value", "e.g.:", "linewidth or lw = 2", "See also"]}, {"name": "artist.kwdoc", "path": "_as_gen/matplotlib.artist.kwdoc", "type": "artist", "text": ["Inspect an Artist class (using ArtistInspector) and return information about its settable properties and their current values.", "The settable properties of artist, as plain text if rcParams[\"docstring.hardcopy\"] (default: False) is False and as a rst table (intended for use in Sphinx) if it is True."]}, {"name": "artist.setp", "path": "_as_gen/matplotlib.artist.setp", "type": "artist", "text": ["Set one or more properties on an Artist, or list allowed values.", "The artist(s) whose properties are being set or queried. When setting properties, all artists are affected; when querying the allowed values, only the first instance in the sequence is queried.", "For example, two lines can be made thicker and red with a single call:", "Where setp writes its output when asked to list allowed values.", "The default, None, means sys.stdout.", "The properties to set. The following combinations are supported:", "Set the linestyle of a line to be dashed:", "Set multiple properties at once:", "List allowed values for a line's linestyle:", "List all properties that can be set, and their allowed values:", "setp also supports MATLAB style string/value pairs. For example, the following are equivalent:", "See also"]}, {"name": "axes", "path": "axes_api", "type": "axes", "text": ["Table of Contents", "Plotting", "Axis / limits", "Bases: matplotlib.axes._base._AxesBase", "The Axes contains most of the figure elements: Axis, Tick, Line2D, Text, Polygon, etc., and sets the coordinate system.", "The Axes instance supports callbacks through a callbacks attribute which is a CallbackRegistry instance. The events you can connect to are 'xlim_changed' and 'ylim_changed' and the callback will be called with func(ax) where ax is the Axes instance.", "The bounding box enclosing all data displayed in the Axes.", "The view limits in data coordinates.", "Build an Axes in a figure.", "The Axes is built in the Figure fig.", "The Axes is built in the rectangle rect. rect is in Figure coordinates.", "The x or y axis is shared with the x or y axis in the input Axes.", "Whether the Axes frame is visible.", "Set a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.", "Other optional keyword arguments:", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "The new Axes object.", "SubplotBase", "Base class for subplots, which are Axes instances with additional methods to facilitate generating and manipulating a set of Axes within a figure.", "subplot_class_factory", "Axes.plot", "Plot y versus x as lines and/or markers.", "Axes.errorbar", "Plot y versus x as lines and/or markers with attached errorbars.", "Axes.scatter", "A scatter plot of y vs.", "Axes.plot_date", "Plot coercing the axis to treat floats as dates.", "Axes.step", "Make a step plot.", "Axes.loglog", "Make a plot with log scaling on both the x and y axis.", "Axes.semilogx", "Make a plot with log scaling on the x axis.", "Axes.semilogy", "Make a plot with log scaling on the y axis.", "Axes.fill_between", "Fill the area between two horizontal curves.", "Axes.fill_betweenx", "Fill the area between two vertical curves.", "Axes.bar", "Make a bar plot.", "Axes.barh", "Make a horizontal bar plot.", "Axes.bar_label", "Label a bar plot.", "Axes.stem", "Create a stem plot.", "Axes.eventplot", "Plot identical parallel lines at the given positions.", "Axes.pie", "Plot a pie chart.", "Axes.stackplot", "Draw a stacked area plot.", "Axes.broken_barh", "Plot a horizontal sequence of rectangles.", "Axes.vlines", "Plot vertical lines at each x from ymin to ymax.", "Axes.hlines", "Plot horizontal lines at each y from xmin to xmax.", "Axes.fill", "Plot filled polygons.", "Axes.axhline", "Add a horizontal line across the axis.", "Axes.axhspan", "Add a horizontal span (rectangle) across the Axes.", "Axes.axvline", "Add a vertical line across the Axes.", "Axes.axvspan", "Add a vertical span (rectangle) across the Axes.", "Axes.axline", "Add an infinitely long straight line.", "Axes.acorr", "Plot the autocorrelation of x.", "Axes.angle_spectrum", "Plot the angle spectrum.", "Axes.cohere", "Plot the coherence between x and y.", "Axes.csd", "Plot the cross-spectral density.", "Axes.magnitude_spectrum", "Plot the magnitude spectrum.", "Axes.phase_spectrum", "Plot the phase spectrum.", "Axes.psd", "Plot the power spectral density.", "Axes.specgram", "Plot a spectrogram.", "Axes.xcorr", "Plot the cross correlation between x and y.", "Axes.boxplot", "Draw a box and whisker plot.", "Axes.violinplot", "Make a violin plot.", "Axes.violin", "Drawing function for violin plots.", "Axes.bxp", "Drawing function for box and whisker plots.", "Axes.hexbin", "Make a 2D hexagonal binning plot of points x, y.", "Axes.hist", "Plot a histogram.", "Axes.hist2d", "Make a 2D histogram plot.", "Axes.stairs", "A stepwise constant function as a line with bounding edges or a filled plot.", "Axes.clabel", "Label a contour plot.", "Axes.contour", "Plot contour lines.", "Axes.contourf", "Plot filled contours.", "Axes.imshow", "Display data as an image, i.e., on a 2D regular raster.", "Axes.matshow", "Plot the values of a 2D matrix or array as color-coded image.", "Axes.pcolor", "Create a pseudocolor plot with a non-regular rectangular grid.", "Axes.pcolorfast", "Create a pseudocolor plot with a non-regular rectangular grid.", "Axes.pcolormesh", "Create a pseudocolor plot with a non-regular rectangular grid.", "Axes.spy", "Plot the sparsity pattern of a 2D array.", "Axes.tripcolor", "Create a pseudocolor plot of an unstructured triangular grid.", "Axes.triplot", "Draw a unstructured triangular grid as lines and/or markers.", "Axes.tricontour", "Draw contour lines on an unstructured triangular grid.", "Axes.tricontourf", "Draw contour regions on an unstructured triangular grid.", "Axes.annotate", "Annotate the point xy with text text.", "Axes.text", "Add text to the Axes.", "Axes.table", "Add a table to an Axes.", "Axes.arrow", "Add an arrow to the Axes.", "Axes.inset_axes", "Add a child inset Axes to this existing Axes.", "Axes.indicate_inset", "Add an inset indicator to the Axes.", "Axes.indicate_inset_zoom", "Add an inset indicator rectangle to the Axes based on the axis limits for an inset_ax and draw connectors between inset_ax and the rectangle.", "Axes.secondary_xaxis", "Add a second x-axis to this Axes.", "Axes.secondary_yaxis", "Add a second y-axis to this Axes.", "Axes.barbs", "Plot a 2D field of barbs.", "Axes.quiver", "Plot a 2D field of arrows.", "Axes.quiverkey", "Add a key to a quiver plot.", "Axes.streamplot", "Draw streamlines of a vector flow.", "Axes.cla", "Clear the Axes.", "Axes.clear", "Clear the Axes.", "Axes.axis", "Convenience method to get or set some axis properties.", "Axes.set_axis_off", "Turn the x- and y-axis off.", "Axes.set_axis_on", "Turn the x- and y-axis on.", "Axes.set_frame_on", "Set whether the Axes rectangle patch is drawn.", "Axes.get_frame_on", "Get whether the Axes rectangle patch is drawn.", "Axes.set_axisbelow", "Set whether axis ticks and gridlines are above or below most artists.", "Axes.get_axisbelow", "Get whether axis ticks and gridlines are above or below most artists.", "Axes.grid", "Configure the grid lines.", "Axes.get_facecolor", "Get the facecolor of the Axes.", "Axes.set_facecolor", "Set the facecolor of the Axes.", "Axes.set_prop_cycle", "Set the property cycle of the Axes.", "Axes.get_xaxis", "Return the XAxis instance.", "Axes.get_yaxis", "Return the YAxis instance.", "Axes.invert_xaxis", "Invert the x-axis.", "Axes.xaxis_inverted", "Return whether the xaxis is oriented in the \"inverse\" direction.", "Axes.invert_yaxis", "Invert the y-axis.", "Axes.yaxis_inverted", "Return whether the yaxis is oriented in the \"inverse\" direction.", "Axes.set_xlim", "Set the x-axis view limits.", "Axes.get_xlim", "Return the x-axis view limits.", "Axes.set_ylim", "Set the y-axis view limits.", "Axes.get_ylim", "Return the y-axis view limits.", "Axes.update_datalim", "Extend the dataLim Bbox to include the given points.", "Axes.set_xbound", "Set the lower and upper numerical bounds of the x-axis.", "Axes.get_xbound", "Return the lower and upper x-axis bounds, in increasing order.", "Axes.set_ybound", "Set the lower and upper numerical bounds of the y-axis.", "Axes.get_ybound", "Return the lower and upper y-axis bounds, in increasing order.", "Axes.set_xlabel", "Set the label for the x-axis.", "Axes.get_xlabel", "Get the xlabel text string.", "Axes.set_ylabel", "Set the label for the y-axis.", "Axes.get_ylabel", "Get the ylabel text string.", "Axes.set_title", "Set a title for the Axes.", "Axes.get_title", "Get an Axes title.", "Axes.legend", "Place a legend on the Axes.", "Axes.get_legend", "Return the Legend instance, or None if no legend is defined.", "Axes.get_legend_handles_labels", "Return handles and labels for legend", "Axes.set_xscale", "Set the x-axis scale.", "Axes.get_xscale", "Return the xaxis' scale (as a str).", "Axes.set_yscale", "Set the y-axis scale.", "Axes.get_yscale", "Return the yaxis' scale (as a str).", "Axes.use_sticky_edges", "When autoscaling, whether to obey all Artist.sticky_edges.", "Axes.margins", "Set or retrieve autoscaling margins.", "Axes.set_xmargin", "Set padding of X data limits prior to autoscaling.", "Axes.set_ymargin", "Set padding of Y data limits prior to autoscaling.", "Axes.relim", "Recompute the data limits based on current artists.", "Axes.autoscale", "Autoscale the axis view to the data (toggle).", "Axes.autoscale_view", "Autoscale the view limits using the data limits.", "Axes.set_autoscale_on", "Set whether autoscaling is applied to each axis on the next draw or call to Axes.autoscale_view.", "Axes.get_autoscale_on", "Return True if each axis is autoscaled, False otherwise.", "Axes.set_autoscalex_on", "Set whether the x-axis is autoscaled on the next draw or call to Axes.autoscale_view.", "Axes.get_autoscalex_on", "Return whether the x-axis is autoscaled.", "Axes.set_autoscaley_on", "Set whether the y-axis is autoscaled on the next draw or call to Axes.autoscale_view.", "Axes.get_autoscaley_on", "Return whether the y-axis is autoscaled.", "Axes.apply_aspect", "Adjust the Axes for a specified data aspect ratio.", "Axes.set_aspect", "Set the aspect ratio of the axes scaling, i.e. y/x-scale.", "Axes.get_aspect", "Return the aspect ratio of the axes scaling.", "Axes.set_box_aspect", "Set the Axes box aspect, i.e. the ratio of height to width.", "Axes.get_box_aspect", "Return the Axes box aspect, i.e. the ratio of height to width.", "Axes.set_adjustable", "Set how the Axes adjusts to achieve the required aspect ratio.", "Axes.get_adjustable", "Return whether the Axes will adjust its physical dimension ('box') or its data limits ('datalim') to achieve the desired aspect ratio.", "Axes.set_xticks", "Set the xaxis' tick locations and optionally labels.", "Axes.get_xticks", "Return the xaxis' tick locations in data coordinates.", "Axes.set_xticklabels", "Set the xaxis' labels with list of string labels.", "Axes.get_xticklabels", "Get the xaxis' tick labels.", "Axes.get_xmajorticklabels", "Return the xaxis' major tick labels, as a list of Text.", "Axes.get_xminorticklabels", "Return the xaxis' minor tick labels, as a list of Text.", "Axes.get_xgridlines", "Return the xaxis' grid lines as a list of Line2Ds.", "Axes.get_xticklines", "Return the xaxis' tick lines as a list of Line2Ds.", "Axes.xaxis_date", "Set up axis ticks and labels to treat data along the xaxis as dates.", "Axes.set_yticks", "Set the yaxis' tick locations and optionally labels.", "Axes.get_yticks", "Return the yaxis' tick locations in data coordinates.", "Axes.set_yticklabels", "Set the yaxis' labels with list of string labels.", "Axes.get_yticklabels", "Get the yaxis' tick labels.", "Axes.get_ymajorticklabels", "Return the yaxis' major tick labels, as a list of Text.", "Axes.get_yminorticklabels", "Return the yaxis' minor tick labels, as a list of Text.", "Axes.get_ygridlines", "Return the yaxis' grid lines as a list of Line2Ds.", "Axes.get_yticklines", "Return the yaxis' tick lines as a list of Line2Ds.", "Axes.yaxis_date", "Set up axis ticks and labels to treat data along the yaxis as dates.", "Axes.minorticks_off", "Remove minor ticks from the Axes.", "Axes.minorticks_on", "Display minor ticks on the Axes.", "Axes.ticklabel_format", "Configure the ScalarFormatter used by default for linear axes.", "Axes.tick_params", "Change the appearance of ticks, tick labels, and gridlines.", "Axes.locator_params", "Control behavior of major tick locators.", "Axes.convert_xunits", "Convert x using the unit type of the xaxis.", "Axes.convert_yunits", "Convert y using the unit type of the yaxis.", "Axes.have_units", "Return whether units are set on any axis.", "Axes.add_artist", "Add an Artist to the Axes; return the artist.", "Axes.add_child_axes", "Add an AxesBase to the Axes' children; return the child Axes.", "Axes.add_collection", "Add a Collection to the Axes; return the collection.", "Axes.add_container", "Add a Container to the axes' containers; return the container.", "Axes.add_image", "Add an AxesImage to the Axes; return the image.", "Axes.add_line", "Add a Line2D to the Axes; return the line.", "Axes.add_patch", "Add a Patch to the Axes; return the patch.", "Axes.add_table", "Add a Table to the Axes; return the table.", "Axes.twinx", "Create a twin Axes sharing the xaxis.", "Axes.twiny", "Create a twin Axes sharing the yaxis.", "Axes.sharex", "Share the x-axis with other.", "Axes.sharey", "Share the y-axis with other.", "Axes.get_shared_x_axes", "Return a reference to the shared axes Grouper object for x axes.", "Axes.get_shared_y_axes", "Return a reference to the shared axes Grouper object for y axes.", "Axes.get_anchor", "Get the anchor location.", "Axes.set_anchor", "Define the anchor location.", "Axes.get_axes_locator", "Return the axes_locator.", "Axes.set_axes_locator", "Set the Axes locator.", "Axes.reset_position", "Reset the active position to the original position.", "Axes.get_position", "Return the position of the Axes within the figure as a Bbox.", "Axes.set_position", "Set the Axes position.", "Axes.stale", "Whether the artist is 'stale' and needs to be re-drawn for the output to match the internal state of the artist.", "Axes.pchanged", "Call all of the registered callbacks.", "Axes.add_callback", "Add a callback function that will be called whenever one of the Artist's properties changes.", "Axes.remove_callback", "Remove a callback based on its observer id.", "Axes.can_pan", "Return whether this Axes supports any pan/zoom button functionality.", "Axes.can_zoom", "Return whether this Axes supports the zoom box button functionality.", "Axes.get_navigate", "Get whether the Axes responds to navigation commands.", "Axes.set_navigate", "Set whether the Axes responds to navigation toolbar commands.", "Axes.get_navigate_mode", "Get the navigation toolbar button status: 'PAN', 'ZOOM', or None.", "Axes.set_navigate_mode", "Set the navigation toolbar button status.", "Axes.start_pan", "Called when a pan operation has started.", "Axes.drag_pan", "Called when the mouse moves during a pan operation.", "Axes.end_pan", "Called when a pan operation completes (when the mouse button is up.)", "Axes.format_coord", "Return a format string formatting the x, y coordinates.", "Axes.format_cursor_data", "Return a string representation of data.", "Axes.format_xdata", "Return x formatted as an x-value.", "Axes.format_ydata", "Return y formatted as an y-value.", "Axes.mouseover", "If this property is set to True, the artist will be queried for custom context information when the mouse cursor moves over it.", "Axes.in_axes", "Return whether the given event (in display coords) is in the Axes.", "Axes.contains", "Test whether the artist contains the mouse event.", "Axes.contains_point", "Return whether point (pair of pixel coordinates) is inside the axes patch.", "Axes.get_cursor_data", "Return the cursor data for a given event.", "Axes.get_children", "Return a list of the child Artists of this Artist.", "Axes.get_images", "Return a list of AxesImages contained by the Axes.", "Axes.get_lines", "Return a list of lines contained by the Axes.", "Axes.findobj", "Find artist objects.", "Axes.draw", "Draw the Artist (and its children) using the given renderer.", "Axes.draw_artist", "Efficiently redraw a single artist.", "Axes.redraw_in_frame", "Efficiently redraw Axes data, but not axis ticks, labels, etc.", "Axes.get_renderer_cache", "Axes.get_rasterization_zorder", "Return the zorder value below which artists will be rasterized.", "Axes.set_rasterization_zorder", "Set the zorder threshold for rasterization for vector graphics output.", "Axes.get_window_extent", "Return the Axes bounding box in display space; args and kwargs are empty.", "Axes.get_tightbbox", "Return the tight bounding box of the axes, including axis and their decorators (xlabel, title, etc).", "Methods used by Axis that must be overridden for non-rectilinear Axes.", "Axes.name", "Axes.get_xaxis_transform", "Get the transformation used for drawing x-axis labels, ticks and gridlines.", "Axes.get_yaxis_transform", "Get the transformation used for drawing y-axis labels, ticks and gridlines.", "Axes.get_data_ratio", "Return the aspect ratio of the scaled data.", "Axes.get_xaxis_text1_transform", "Axes.get_xaxis_text2_transform", "Axes.get_yaxis_text1_transform", "Axes.get_yaxis_text2_transform", "Axes.zorder", "Axes.get_default_bbox_extra_artists", "Return a default list of artists that are used for the bounding box calculation.", "Axes.get_transformed_clip_path_and_affine", "Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.", "Axes.has_data", "Return whether any artists have been added to the Axes.", "Axes.set", "Set multiple properties at once."]}, {"name": "axes.Axes", "path": "axes_api#matplotlib.axes.Axes", "type": "axes", "text": ["Bases: matplotlib.axes._base._AxesBase", "The Axes contains most of the figure elements: Axis, Tick, Line2D, Text, Polygon, etc., and sets the coordinate system.", "The Axes instance supports callbacks through a callbacks attribute which is a CallbackRegistry instance. The events you can connect to are 'xlim_changed' and 'ylim_changed' and the callback will be called with func(ax) where ax is the Axes instance.", "The bounding box enclosing all data displayed in the Axes.", "The view limits in data coordinates.", "Build an Axes in a figure.", "The Axes is built in the Figure fig.", "The Axes is built in the rectangle rect. rect is in Figure coordinates.", "The x or y axis is shared with the x or y axis in the input Axes.", "Whether the Axes frame is visible.", "Set a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.", "Other optional keyword arguments:", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "The new Axes object."]}, {"name": "axes.Axes.acorr", "path": "_as_gen/matplotlib.axes.axes.acorr", "type": "axes", "text": ["Plot the autocorrelation of x.", "A detrending function applied to x. It must have the signature", "If True, input vectors are normalised to unit length.", "Determines the plot style.", "If True, vertical lines are plotted from 0 to the acorr value using Axes.vlines. Additionally, a horizontal line is plotted at y=0 using Axes.axhline.", "If False, markers are plotted at the acorr values using Axes.plot.", "Number of lags to show. If None, will return all 2 * len(x) - 1 lags.", "The lag vector.", "The auto correlation vector.", "Artist added to the Axes of the correlation:", "Horizontal line at 0 if usevlines is True None usevlines is False.", "The linestyle for plotting the data points. Only used if usevlines is False.", "The marker for plotting the data points. Only used if usevlines is False.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x", "Additional parameters are passed to Axes.vlines and Axes.axhline if usevlines is True; otherwise they are passed to Axes.plot.", "The cross correlation is performed with numpy.correlate with mode = \"full\".", "Cross- and Auto-Correlation Demo"]}, {"name": "axes.Axes.add_artist", "path": "_as_gen/matplotlib.axes.axes.add_artist", "type": "axes", "text": ["Add an Artist to the Axes; return the artist.", "Use add_artist only for artists for which there is no dedicated \"add\" method; and if necessary, use a method such as update_datalim to manually update the dataLim if the artist is to be included in autoscaling.", "If no transform has been specified when creating the artist (e.g. artist.get_transform() == None) then the transform is set to ax.transData.", "Scatter plots with a legend", "BboxImage Demo", "Bar of pie", "Annotating Plots", "AnnotationBbox demo", "Using a text as a Path", "Ellipse Demo", "Anchored Direction Arrow", "Axes Grid2", "Inset Locator Demo2", "Simple Anchored Artists", "Anatomy of a figure", "Anchored Artists", "Artist tests", "Anchored Box04", "Annotate Explain", "Connect Simple01", "Simple Annotate01", "Simple Legend02", "Legend guide", "Annotations"]}, {"name": "axes.Axes.add_callback", "path": "_as_gen/matplotlib.axes.axes.add_callback", "type": "axes", "text": ["Add a callback function that will be called whenever one of the Artist's properties changes.", "The callback function. It must have the signature:", "where artist is the calling Artist. Return values may exist but are ignored.", "The observer id associated with the callback. This id can be used for removing the callback with remove_callback later.", "See also"]}, {"name": "axes.Axes.add_child_axes", "path": "_as_gen/matplotlib.axes.axes.add_child_axes", "type": "axes", "text": ["Add an AxesBase to the Axes' children; return the child Axes.", "This is the lowlevel version. See axes.Axes.inset_axes."]}, {"name": "axes.Axes.add_collection", "path": "_as_gen/matplotlib.axes.axes.add_collection", "type": "axes", "text": ["Add a Collection to the Axes; return the collection.", "EventCollection Demo", "Using span_where", "Creating boxes from error bars using PatchCollection", "Reference for Matplotlib artists", "Line, Poly and RegularPoly Collection with autoscaling", "Ellipse Collection", "Line Collection", "Circles, Wedges and Polygons", "Lasso Demo", "MRI With EEG", "Artist tests", "Autoscaling"]}, {"name": "axes.Axes.add_container", "path": "_as_gen/matplotlib.axes.axes.add_container", "type": "axes", "text": ["Add a Container to the axes' containers; return the container."]}, {"name": "axes.Axes.add_image", "path": "_as_gen/matplotlib.axes.axes.add_image", "type": "axes", "text": ["Add an AxesImage to the Axes; return the image.", "Image Nonuniform"]}, {"name": "axes.Axes.add_line", "path": "_as_gen/matplotlib.axes.axes.add_line", "type": "axes", "text": ["Add a Line2D to the Axes; return the line.", "Artist within an artist", "Reference for Matplotlib artists", "Artist tests", "Artist tutorial"]}, {"name": "axes.Axes.add_patch", "path": "_as_gen/matplotlib.axes.axes.add_patch", "type": "axes", "text": ["Add a Patch to the Axes; return the patch.", "Curve with error band", "Image Demo", "Axes box aspect", "Controlling view limits using margins and sticky_edges", "Boxplots", "Plot a confidence ellipse of a two-dimensional dataset", "Annotating Plots", "Precise text layout", "Compound path", "Dolphins", "Mmh Donuts!!!", "Drawing fancy boxes", "Hatch style reference", "PathPatch object", "Bezier Curve", "ggplot style sheet", "Inset Locator Demo", "Firefox", "Integral as the area under a curve", "Looking Glass", "Path Editor", "Poly Editor", "Trifinder Event Demo", "Viewlims", "Changing colors of lines intersecting a box", "Building histograms using Rectangles and PolyCollections", "Packed-bubble chart", "SVG Filter Pie", "TickedStroke patheffect", "Draw flat objects in 3D plot", "Artist tests", "Ellipse With Units", "Artist tutorial", "Legend guide", "Path Tutorial", "Transformations Tutorial", "Specifying Colors", "Text properties and layout"]}, {"name": "axes.Axes.add_table", "path": "_as_gen/matplotlib.axes.axes.add_table", "type": "axes", "text": ["Add a Table to the Axes; return the table."]}, {"name": "axes.Axes.angle_spectrum", "path": "_as_gen/matplotlib.axes.axes.angle_spectrum", "type": "axes", "text": ["Plot the angle spectrum.", "Compute the angle spectrum (wrapped phase spectrum) of x. Data is padded to a length of pad_to and the windowing function window is applied to the signal.", "Array or sequence containing the data.", "The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.", "A function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.", "Which sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.", "The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to the length of the input signal (i.e. no padding).", "The center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.", "The values for the angle spectrum in radians (real valued).", "The frequencies corresponding to the elements in spectrum.", "The line created by this function.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x", "Keyword arguments control the Line2D properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "See also", "Plots the magnitudes of the corresponding frequencies.", "Plots the unwrapped version of this function.", "Can plot the angle spectrum of segments within the signal in a colormap."]}, {"name": "axes.Axes.annotate", "path": "_as_gen/matplotlib.axes.axes.annotate", "type": "axes", "text": ["Annotate the point xy with text text.", "In the simplest form, the text is placed at xy.", "Optionally, the text can be displayed in another position xytext. An arrow pointing from the text to the annotated point xy can then be added by defining arrowprops.", "The text of the annotation.", "The point (x, y) to annotate. The coordinate system is determined by xycoords.", "The position (x, y) to place the text at. The coordinate system is determined by textcoords.", "The coordinate system that xy is given in. The following types of values are supported:", "One of the following strings:", "Value", "Description", "'figure points'", "Points from the lower left of the figure", "'figure pixels'", "Pixels from the lower left of the figure", "'figure fraction'", "Fraction of figure from lower left", "'subfigure points'", "Points from the lower left of the subfigure", "'subfigure pixels'", "Pixels from the lower left of the subfigure", "'subfigure fraction'", "Fraction of subfigure from lower left", "'axes points'", "Points from lower left corner of axes", "'axes pixels'", "Pixels from lower left corner of axes", "'axes fraction'", "Fraction of axes from lower left", "'data'", "Use the coordinate system of the object being annotated (default)", "'polar'", "(theta, r) if not native 'data' coordinates", "Note that 'subfigure pixels' and 'figure pixels' are the same for the parent figure, so users who want code that is usable in a subfigure can use 'subfigure pixels'.", "A function with one of the following signatures:", "where renderer is a RendererBase subclass.", "The result of the function is interpreted like the Artist and Transform cases above.", "See Advanced Annotations for more details.", "The coordinate system that xytext is given in.", "All xycoords values are valid as well as the following strings:", "Value", "Description", "'offset points'", "Offset (in points) from the xy value", "'offset pixels'", "Offset (in pixels) from the xy value", "The properties used to draw a FancyArrowPatch arrow between the positions xy and xytext. Defaults to None, i.e. no arrow is drawn.", "For historical reasons there are two different ways to specify arrows, \"simple\" and \"fancy\":", "Simple arrow:", "If arrowprops does not contain the key 'arrowstyle' the allowed keys are:", "Key", "Description", "width", "The width of the arrow in points", "headwidth", "The width of the base of the arrow head in points", "headlength", "The length of the arrow head in points", "shrink", "Fraction of total length to shrink from both ends", "?", "Any key to matplotlib.patches.FancyArrowPatch", "The arrow is attached to the edge of the text box, the exact position (corners or centers) depending on where it's pointing to.", "Fancy arrow:", "This is used if 'arrowstyle' is provided in the arrowprops.", "Valid keys are the following FancyArrowPatch parameters:", "Key", "Description", "arrowstyle", "the arrow style", "connectionstyle", "the connection style", "relpos", "see below; default is (0.5, 0.5)", "patchA", "default is bounding box of the text", "patchB", "default is None", "shrinkA", "default is 2 points", "shrinkB", "default is 2 points", "mutation_scale", "default is text size (in points)", "mutation_aspect", "default is 1.", "?", "any key for matplotlib.patches.PathPatch", "The exact starting point position of the arrow is defined by relpos. It's a tuple of relative coordinates of the text box, where (0, 0) is the lower left corner and (1, 1) is the upper right corner. Values <0 and >1 are supported and specify points outside the text box. By default (0.5, 0.5) the starting point is centered in the text box.", "Whether to draw the annotation when the annotation point xy is outside the axes area.", "Additional kwargs are passed to Text.", "See also", "Broken Barh", "Hat graph", "Creating a timeline with lines, dates, and text", "Combining two subplots using subplots and GridSpec", "Labeling a pie and a donut", "Scale invariant angle label", "Annotating Plots", "Annotation arrow style reference", "Rendering math equations using TeX", "Annotate Transform", "Annotating a plot", "Annotation Polar", "Text Commands", "Mmh Donuts!!!", "axis_direction demo", "Simple Axis Pad", "XKCD", "Patheffect Demo", "Annotation with units", "Annotate Explain", "Annotate Simple01", "Annotate Simple02", "Annotate Simple03", "Annotate Simple04", "Annotate Simple Coord01", "Annotate Simple Coord02", "Annotate Simple Coord03", "Connection styles for annotations", "Simple Annotate01", "Basic Usage", "Faster rendering by using blitting", "Transformations Tutorial", "Text in Matplotlib Plots", "Annotations"]}, {"name": "axes.Axes.apply_aspect", "path": "_as_gen/matplotlib.axes.axes.apply_aspect", "type": "axes", "text": ["Adjust the Axes for a specified data aspect ratio.", "Depending on get_adjustable this will modify either the Axes box (position) or the view limits. In the former case, get_anchor will affect the position.", "See also", "For a description of aspect ratio handling.", "Set how the Axes adjusts to achieve the required aspect ratio.", "Set the position in case of extra space.", "This is called automatically when each Axes is drawn. You may need to call it yourself if you need to update the Axes position and/or view limits before the Figure is drawn."]}, {"name": "axes.Axes.arrow", "path": "_as_gen/matplotlib.axes.axes.arrow", "type": "axes", "text": ["Add an arrow to the Axes.", "This draws an arrow from (x, y) to (x+dx, y+dy).", "The x and y coordinates of the arrow base.", "The length of the arrow along x and y direction.", "Width of full arrow tail.", "True if head is to be counted in calculating the length.", "Total width of the full arrow head.", "Length of arrow head.", "Draw the left-half, right-half, or full arrow.", "Fraction that the arrow is swept back (0 overhang means triangular shape). Can be negative or greater than one.", "If True, the head starts being drawn at coordinate 0 instead of ending at coordinate 0.", "Patch properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "unknown", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float", "The created FancyArrow object.", "The resulting arrow is affected by the Axes aspect ratio and limits. This may produce an arrow whose head is not square with its stem. To create an arrow whose head is square with its stem, use annotate() for example:", "Arrow Demo"]}, {"name": "axes.Axes.autoscale", "path": "_as_gen/matplotlib.axes.axes.autoscale", "type": "axes", "text": ["Autoscale the axis view to the data (toggle).", "Convenience method for simple axis view autoscaling. It turns autoscaling on or off, and then, if autoscaling for either axis is on, it performs the autoscaling on the specified axis or Axes.", "True turns autoscaling on, False turns it off. None leaves the autoscaling state unchanged.", "Which axis to operate on.", "If True, first set the margins to zero. Then, this argument is forwarded to autoscale_view (regardless of its value); see the description of its behavior there.", "Axes box aspect", "Autoscaling"]}, {"name": "axes.Axes.autoscale_view", "path": "_as_gen/matplotlib.axes.axes.autoscale_view", "type": "axes", "text": ["Autoscale the view limits using the data limits.", "If True, only expand the axis limits using the margins. Note that unlike for autoscale, tight=True does not set the margins to zero.", "If False and rcParams[\"axes.autolimit_mode\"] (default: 'data') is 'round_numbers', then after expansion by the margins, further expand the axis limits using the axis major locator.", "If None (the default), reuse the value set in the previous call to autoscale_view (the initial value is False, but the default style sets rcParams[\"axes.autolimit_mode\"] (default: 'data') to 'data', in which case this behaves like True).", "Whether to autoscale the x axis.", "Whether to autoscale the y axis.", "The autoscaling preserves any preexisting axis direction reversal.", "The data limits are not updated automatically when artist data are changed after the artist has been added to an Axes instance. In that case, use matplotlib.axes.Axes.relim() prior to calling autoscale_view.", "If the views of the Axes are fixed, e.g. via set_xlim, they will not be changed by autoscale_view(). See matplotlib.axes.Axes.autoscale() for an alternative.", "Line, Poly and RegularPoly Collection with autoscaling", "Compound path", "Ellipse Collection", "Packed-bubble chart", "Group barchart with units", "Textbox", "Autoscaling"]}, {"name": "axes.Axes.axhline", "path": "_as_gen/matplotlib.axes.axes.axhline", "type": "axes", "text": ["Add a horizontal line across the axis.", "y position in data coordinates of the horizontal line.", "Should be between 0 and 1, 0 being the far left of the plot, 1 the far right of the plot.", "Should be between 0 and 1, 0 being the far left of the plot, 1 the far right of the plot.", "Valid keyword arguments are Line2D properties, with the exception of 'transform':", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "See also", "Add horizontal lines in data coordinates.", "Add a horizontal span (rectangle) across the axis.", "Add a line with an arbitrary slope.", "draw a thick red hline at 'y' = 0 that spans the xrange:", "draw a default hline at 'y' = 1 that spans the xrange:", "draw a default hline at 'y' = .5 that spans the middle half of the xrange:", "Bar Label Demo", "Filling the area between lines", "Using span_where", "axhspan Demo", "Plot a confidence ellipse of a two-dimensional dataset", "Multiline", "Usetex Baseline Test", "Cross hair cursor", "Transformations Tutorial"]}, {"name": "axes.Axes.axhspan", "path": "_as_gen/matplotlib.axes.axes.axhspan", "type": "axes", "text": ["Add a horizontal span (rectangle) across the Axes.", "The rectangle spans from ymin to ymax vertically, and, by default, the whole x-axis horizontally. The x-span can be set using xmin (default: 0) and xmax (default: 1) which are in axis units; e.g. xmin = 0.5 always refers to the middle of the x-axis regardless of the limits set by set_xlim.", "Lower y-coordinate of the span, in data units.", "Upper y-coordinate of the span, in data units.", "Lower x-coordinate of the span, in x-axis (0-1) units.", "Upper x-coordinate of the span, in x-axis (0-1) units.", "Horizontal span (rectangle) from (xmin, ymin) to (xmax, ymax).", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "closed", "bool", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "xy", "(N, 2) array-like", "zorder", "float", "See also", "Add a vertical span across the Axes.", "axhspan Demo", "Transformations Tutorial"]}, {"name": "axes.Axes.axis", "path": "_as_gen/matplotlib.axes.axes.axis", "type": "axes", "text": ["Convenience method to get or set some axis properties.", "Call signatures:", "The axis limits to be set. This can also be achieved using", "If a bool, turns axis lines and labels on or off. If a string, possible values are:", "Value", "Description", "'on'", "Turn on axis lines and labels. Same as True.", "'off'", "Turn off axis lines and labels. Same as False.", "'equal'", "Set equal scaling (i.e., make circles circular) by changing axis limits. This is the same as ax.set_aspect('equal', adjustable='datalim'). Explicit data limits may not be respected in this case.", "'scaled'", "Set equal scaling (i.e., make circles circular) by changing dimensions of the plot box. This is the same as ax.set_aspect('equal', adjustable='box', anchor='C'). Additionally, further autoscaling will be disabled.", "'tight'", "Set limits just large enough to show all data, then disable further autoscaling.", "'auto'", "Automatic scaling (fill plot box with data).", "'image'", "'scaled' with axis limits equal to data limits.", "'square'", "Square plot; similar to 'scaled', but initially forcing xmax-xmin == ymax-ymin.", "Whether observers are notified of the axis limit change. This option is passed on to set_xlim and set_ylim.", "The axis limits.", "See also", "Clipping images with patches", "Basic pie chart", "Bar of pie", "Hatch style reference", "PathPatch object", "ggplot style sheet", "Parasite Simple2", "Simple Axisline4", "Axis Direction", "axis_direction demo", "Axis line styles", "mpl_toolkits.axisartist.floating_axes features", "Parasite Axes demo", "Parasite axis demo", "Ticklabel alignment", "Ticklabel direction", "Simple Axis Direction01", "Simple Axis Direction03", "Simple Axis Pad", "Custom spines with axisartist", "Simple Axisline", "Simple Axisline3", "Packed-bubble chart", "TickedStroke patheffect", "MRI", "MRI With EEG", "Basic Usage", "Specifying Colors", "Text in Matplotlib Plots"]}, {"name": "axes.Axes.axline", "path": "_as_gen/matplotlib.axes.axes.axline", "type": "axes", "text": ["Add an infinitely long straight line.", "The line can be defined either by two points xy1 and xy2, or by one point xy1 and a slope.", "This draws a straight line \"on the screen\", regardless of the x and y scales, and is thus also suitable for drawing exponential decays in semilog plots, power laws in loglog plots, etc. However, slope should only be used with linear scales; It has no clear meaning for all other scales, and thus the behavior is undefined. Please specify the line using the points xy1, xy2 for non-linear scales.", "The transform keyword argument only applies to the points xy1, xy2. The slope (if given) is always in data coordinates. This can be used e.g. with ax.transAxes for drawing grid lines with a fixed slope.", "Points for the line to pass through. Either xy2 or slope has to be given.", "The slope of the line. Either xy2 or slope has to be given.", "Valid kwargs are Line2D properties", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "See also", "for horizontal lines", "for vertical lines", "Draw a thick red line passing through (0, 0) and (1, 1):", "axhspan Demo", "Anscombe's quartet"]}, {"name": "axes.Axes.axvline", "path": "_as_gen/matplotlib.axes.axes.axvline", "type": "axes", "text": ["Add a vertical line across the Axes.", "x position in data coordinates of the vertical line.", "Should be between 0 and 1, 0 being the bottom of the plot, 1 the top of the plot.", "Should be between 0 and 1, 0 being the bottom of the plot, 1 the top of the plot.", "Valid keyword arguments are Line2D properties, with the exception of 'transform':", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "See also", "Add vertical lines in data coordinates.", "Add a vertical span (rectangle) across the axis.", "Add a line with an arbitrary slope.", "draw a thick red vline at x = 0 that spans the yrange:", "draw a default vline at x = 1 that spans the yrange:", "draw a default vline at x = .5 that spans the middle half of the yrange:", "axhspan Demo", "Plot a confidence ellipse of a two-dimensional dataset", "Usetex Baseline Test", "Cross hair cursor", "SkewT-logP diagram: using transforms and custom projections", "The Lifecycle of a Plot", "Transformations Tutorial"]}, {"name": "axes.Axes.axvspan", "path": "_as_gen/matplotlib.axes.axes.axvspan", "type": "axes", "text": ["Add a vertical span (rectangle) across the Axes.", "The rectangle spans from xmin to xmax horizontally, and, by default, the whole y-axis vertically. The y-span can be set using ymin (default: 0) and ymax (default: 1) which are in axis units; e.g. ymin = 0.5 always refers to the middle of the y-axis regardless of the limits set by set_ylim.", "Lower x-coordinate of the span, in data units.", "Upper x-coordinate of the span, in data units.", "Lower y-coordinate of the span, in y-axis units (0-1).", "Upper y-coordinate of the span, in y-axis units (0-1).", "Vertical span (rectangle) from (xmin, ymin) to (xmax, ymax).", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "closed", "bool", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "xy", "(N, 2) array-like", "zorder", "float", "See also", "Add a horizontal span across the Axes.", "Draw a vertical, green, translucent rectangle from x = 1.25 to x = 1.55 that spans the yrange of the Axes.", "axhspan Demo", "Transformations Tutorial"]}, {"name": "axes.Axes.bar", "path": "_as_gen/matplotlib.axes.axes.bar", "type": "axes", "text": ["Make a bar plot.", "The bars are positioned at x with the given alignment. Their dimensions are given by height and width. The vertical baseline is bottom (default 0).", "Many parameters can take either a single value applying to all bars or a sequence of values, one for each bar.", "The x coordinates of the bars. See also align for the alignment of the bars to the coordinates.", "The height(s) of the bars.", "The width(s) of the bars.", "The y coordinate(s) of the bars bases.", "Alignment of the bars to the x coordinates:", "To align the bars on the right edge pass a negative width and align='edge'.", "Container with all the bars and optionally errorbars.", "The colors of the bar faces.", "The colors of the bar edges.", "Width of the bar edge(s). If 0, don't draw edges.", "The tick labels of the bars. Default: None (Use default numeric labels.)", "If not None, add horizontal / vertical errorbars to the bar tips. The values are +/- sizes relative to the data:", "See Different ways of specifying error bars for an example on the usage of xerr and yerr.", "The line color of the errorbars.", "The length of the error bar caps in points.", "Dictionary of kwargs to be passed to the errorbar method. Values of ecolor or capsize defined here take precedence over the independent kwargs.", "If True, set the y-axis to be log scale.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "angle", "unknown", "animated", "bool", "antialiased or aa", "bool or None", "bounds", "(left, bottom, width, height)", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "height", "unknown", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "unknown", "x", "unknown", "xy", "(float, float)", "y", "unknown", "zorder", "float", "See also", "Plot a horizontal bar plot.", "Stacked bars can be achieved by passing individual bottom values per bar. See Stacked bar chart.", "Bar Label Demo", "Stacked bar chart", "Grouped bar chart with labels", "Hat graph", "Bar of pie", "Nested pie charts", "Bar chart on polar axis", "Legend Demo", "ggplot style sheet", "mpl_toolkits.axisartist.floating_axes features", "XKCD", "Create 2D bar graphs in different planes", "Log Bar", "Custom Ticker1", "Group barchart with units", "Basic Usage", "Artist tutorial", "Path Tutorial", "bar(x, height) / barh(y, width)"]}, {"name": "axes.Axes.bar_label", "path": "_as_gen/matplotlib.axes.axes.bar_label", "type": "axes", "text": ["Label a bar plot.", "Adds labels to bars in the given BarContainer. You may need to adjust the axis limits to fit the labels.", "Container with all the bars and optionally errorbars, likely returned from bar or barh.", "A list of label texts, that should be displayed. If not given, the label texts will be the data values formatted with fmt.", "A format string for the label.", "The label type. Possible values:", "Distance of label from the end of the bar, in points.", "Any remaining keyword arguments are passed through to Axes.annotate.", "A list of Text instances for the labels.", "Bar Label Demo", "Grouped bar chart with labels"]}, {"name": "axes.Axes.barbs", "path": "_as_gen/matplotlib.axes.axes.barbs", "type": "axes", "text": ["Plot a 2D field of barbs.", "Call signature:", "Where X, Y define the barb locations, U, V define the barb directions, and C optionally sets the color.", "All arguments may be 1D or 2D. U, V, C may be masked arrays, but masked X, Y are not supported at present.", "Barbs are traditionally used in meteorology as a way to plot the speed and direction of wind observations, but can technically be used to plot any two dimensional vector quantity. As opposed to arrows, which give vector magnitude by the length of the arrow, the barbs give more quantitative information about the vector magnitude by putting slanted lines or a triangle for various increments in magnitude, as show schematically below:", "The largest increment is given by a triangle (or \"flag\"). After those come full lines (barbs). The smallest increment is a half line. There is only, of course, ever at most 1 half line. If the magnitude is small and only needs a single half-line and no full lines or triangles, the half-line is offset from the end of the barb so that it can be easily distinguished from barbs with a single full line. The magnitude for the barb shown above would nominally be 65, using the standard increments of 50, 10, and 5.", "See also https://en.wikipedia.org/wiki/Wind_barb.", "The x and y coordinates of the barb locations. See pivot for how the barbs are drawn to the x, y positions.", "If not given, they will be generated as a uniform integer meshgrid based on the dimensions of U and V.", "If X and Y are 1D but U, V are 2D, X, Y are expanded to 2D using X, Y = np.meshgrid(X, Y). In this case len(X) and len(Y) must match the column and row dimensions of U and V.", "The x and y components of the barb shaft.", "Numeric data that defines the barb colors by colormapping via norm and cmap.", "This does not support explicit colors. If you want to set colors directly, use barbcolor instead.", "Length of the barb in points; the other parts of the barb are scaled against this.", "The part of the arrow that is anchored to the X, Y grid. The barb rotates about this point. This can also be a number, which shifts the start of the barb that many points away from grid point.", "The color of all parts of the barb except for the flags. This parameter is analogous to the edgecolor parameter for polygons, which can be used instead. However this parameter will override facecolor.", "The color of any flags on the barb. This parameter is analogous to the facecolor parameter for polygons, which can be used instead. However, this parameter will override facecolor. If this is not set (and C has not either) then flagcolor will be set to match barbcolor so that the barb has a uniform color. If C has been set, flagcolor has no effect.", "A dictionary of coefficients specifying the ratio of a given feature to the length of the barb. Only those values one wishes to override need to be included. These features include:", "Whether the empty barbs (circles) that are drawn should be filled with the flag color. If they are not filled, the center is transparent.", "Whether the vector magnitude should be rounded when allocating barb components. If True, the magnitude is rounded to the nearest multiple of the half-barb increment. If False, the magnitude is simply truncated to the next lowest multiple.", "A dictionary of increments specifying values to associate with different parts of the barb. Only those values one wishes to override need to be included.", "Whether the lines and flags should point opposite to normal. Normal behavior is for the barbs and lines to point right (comes from wind barbs having these features point towards low pressure in the Northern Hemisphere).", "A single value is applied to all barbs. Individual barbs can be flipped by passing a bool array of the same size as U and V.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "The barbs can further be customized using PolyCollection keyword arguments:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "array-like or scalar or None", "animated", "bool", "antialiased or aa or antialiaseds", "bool or list of bools", "array", "array-like or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clim", "(vmin: float, vmax: float)", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "cmap", "Colormap or str or None", "color", "color or list of rgba tuples", "edgecolor or ec or edgecolors", "color or list of colors or 'face'", "facecolor or facecolors or fc", "color or list of colors", "figure", "Figure", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or dashes or linestyles or ls", "str or tuple or list thereof", "linewidth or linewidths or lw", "float or list of floats", "norm", "Normalize or None", "offset_transform", "Transform", "offsets", "(N, 2) or (2,) array-like", "path_effects", "AbstractPathEffect", "paths", "list of array-like", "picker", "None or bool or float or callable", "pickradius", "float", "rasterized", "bool", "sizes", "ndarray or None", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "urls", "list of str or None", "verts", "list of array-like", "verts_and_codes", "unknown", "visible", "bool", "zorder", "float", "Wind Barbs", "barbs(X, Y, U, V)"]}, {"name": "axes.Axes.barh", "path": "_as_gen/matplotlib.axes.axes.barh", "type": "axes", "text": ["Make a horizontal bar plot.", "The bars are positioned at y with the given alignment. Their dimensions are given by width and height. The horizontal baseline is left (default 0).", "Many parameters can take either a single value applying to all bars or a sequence of values, one for each bar.", "The y coordinates of the bars. See also align for the alignment of the bars to the coordinates.", "The width(s) of the bars.", "The heights of the bars.", "The x coordinates of the left sides of the bars.", "Alignment of the base to the y coordinates*:", "To align the bars on the top edge pass a negative height and align='edge'.", "Container with all the bars and optionally errorbars.", "The colors of the bar faces.", "The colors of the bar edges.", "Width of the bar edge(s). If 0, don't draw edges.", "The tick labels of the bars. Default: None (Use default numeric labels.)", "If not None, add horizontal / vertical errorbars to the bar tips. The values are +/- sizes relative to the data:", "See Different ways of specifying error bars for an example on the usage of xerr and yerr.", "The line color of the errorbars.", "The length of the error bar caps in points.", "Dictionary of kwargs to be passed to the errorbar method. Values of ecolor or capsize defined here take precedence over the independent kwargs.", "If True, set the x-axis to be log scale.", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "angle", "unknown", "animated", "bool", "antialiased or aa", "bool or None", "bounds", "(left, bottom, width, height)", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "height", "unknown", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "unknown", "x", "unknown", "xy", "(float, float)", "y", "unknown", "zorder", "float", "See also", "Plot a vertical bar plot.", "Stacked bars can be achieved by passing individual left values per bar. See Discrete distribution as horizontal bar chart .", "Bar Label Demo", "Horizontal bar chart", "Producing multiple histograms side by side", "The Lifecycle of a Plot"]}, {"name": "axes.Axes.boxplot", "path": "_as_gen/matplotlib.axes.axes.boxplot", "type": "axes", "text": ["Draw a box and whisker plot.", "The box extends from the first quartile (Q1) to the third quartile (Q3) of the data, with a line at the median. The whiskers extend from the box by 1.5x the inter-quartile range (IQR). Flier points are those past the end of the whiskers. See https://en.wikipedia.org/wiki/Box_plot for reference.", "The input data. If a 2D array, a boxplot is drawn for each column in x. If a sequence of 1D arrays, a boxplot is drawn for each array in x.", "Whether to draw a notched boxplot (True), or a rectangular boxplot (False). The notches represent the confidence interval (CI) around the median. The documentation for bootstrap describes how the locations of the notches are computed by default, but their locations may also be overridden by setting the conf_intervals parameter.", "Note", "In cases where the values of the CI are less than the lower quartile or greater than the upper quartile, the notches will extend beyond the box, giving it a distinctive \"flipped\" appearance. This is expected behavior and consistent with other statistical visualization packages.", "The default symbol for flier points. An empty string ('') hides the fliers. If None, then the fliers default to 'b+'. More control is provided by the flierprops parameter.", "If True, draws vertical boxes. If False, draw horizontal boxes.", "The position of the whiskers.", "If a float, the lower whisker is at the lowest datum above Q1 - whis*(Q3-Q1), and the upper whisker at the highest datum below Q3 + whis*(Q3-Q1), where Q1 and Q3 are the first and third quartiles. The default value of whis = 1.5 corresponds to Tukey's original definition of boxplots.", "If a pair of floats, they indicate the percentiles at which to draw the whiskers (e.g., (5, 95)). In particular, setting this to (0, 100) results in whiskers covering the whole range of the data.", "In the edge case where Q1 == Q3, whis is automatically set to (0, 100) (cover the whole range of the data) if autorange is True.", "Beyond the whiskers, data are considered outliers and are plotted as individual points.", "Specifies whether to bootstrap the confidence intervals around the median for notched boxplots. If bootstrap is None, no bootstrapping is performed, and notches are calculated using a Gaussian-based asymptotic approximation (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and Kendall and Stuart, 1967). Otherwise, bootstrap specifies the number of times to bootstrap the median to determine its 95% confidence intervals. Values between 1000 and 10000 are recommended.", "A 1D array-like of length len(x). Each entry that is not None forces the value of the median for the corresponding dataset. For entries that are None, the medians are computed by Matplotlib as normal.", "A 2D array-like of shape (len(x), 2). Each entry that is not None forces the location of the corresponding notch (which is only drawn if notch is True). For entries that are None, the notches are computed by the method specified by the other parameters (e.g., bootstrap).", "The positions of the boxes. The ticks and limits are automatically set to match the positions. Defaults to range(1, N+1) where N is the number of boxes to be drawn.", "The widths of the boxes. The default is 0.5, or 0.15*(distance\nbetween extreme positions), if that is smaller.", "If False produces boxes with the Line2D artist. Otherwise, boxes are drawn with Patch artists.", "Labels for each dataset (one per dataset).", "If True, the tick locations and labels will be adjusted to match the boxplot positions.", "When True and the data are distributed such that the 25th and 75th percentiles are equal, whis is set to (0, 100) such that the whisker ends are at the minimum and maximum of the data.", "If True (and showmeans is True), will try to render the mean as a line spanning the full width of the box according to meanprops (see below). Not recommended if shownotches is also True. Otherwise, means will be shown as points.", "The zorder of the boxplot.", "A dictionary mapping each component of the boxplot to a list of the Line2D instances created. That dictionary has the following keys (assuming vertical boxplots):", "Show the caps on the ends of whiskers.", "Show the central box.", "Show the outliers beyond the caps.", "Show the arithmetic means.", "The style of the caps.", "The style of the box.", "The style of the whiskers.", "The style of the fliers.", "The style of the median.", "The style of the mean.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "See also", "Draw an estimate of the probability density function.", "Box plots with custom fill colors", "Boxplots", "Boxplot Demo", "boxplot(X)"]}, {"name": "axes.Axes.broken_barh", "path": "_as_gen/matplotlib.axes.axes.broken_barh", "type": "axes", "text": ["Plot a horizontal sequence of rectangles.", "A rectangle is drawn for each element of xranges. All rectangles have the same vertical position and size defined by yrange.", "This is a convenience function for instantiating a BrokenBarHCollection, adding it to the Axes and autoscaling the view.", "The x-positions and extends of the rectangles. For each tuple (xmin, xwidth) a rectangle is drawn from xmin to xmin + xwidth.", "The y-position and extend for all the rectangles.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "Each kwarg can be either a single argument applying to all rectangles, e.g.:", "or a sequence of arguments over which is cycled, e.g.:", "would create interleaving black and blue rectangles.", "Supported keywords:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "array-like or scalar or None", "animated", "bool", "antialiased or aa or antialiaseds", "bool or list of bools", "array", "array-like or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clim", "(vmin: float, vmax: float)", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "cmap", "Colormap or str or None", "color", "color or list of rgba tuples", "edgecolor or ec or edgecolors", "color or list of colors or 'face'", "facecolor or facecolors or fc", "color or list of colors", "figure", "Figure", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or dashes or linestyles or ls", "str or tuple or list thereof", "linewidth or linewidths or lw", "float or list of floats", "norm", "Normalize or None", "offset_transform", "Transform", "offsets", "(N, 2) or (2,) array-like", "path_effects", "AbstractPathEffect", "paths", "list of array-like", "picker", "None or bool or float or callable", "pickradius", "float", "rasterized", "bool", "sizes", "ndarray or None", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "urls", "list of str or None", "verts", "list of array-like", "verts_and_codes", "unknown", "visible", "bool", "zorder", "float", "Broken Barh"]}, {"name": "axes.Axes.bxp", "path": "_as_gen/matplotlib.axes.axes.bxp", "type": "axes", "text": ["Drawing function for box and whisker plots.", "Make a box and whisker plot for each column of x or each vector in sequence x. The box extends from the lower to upper quartile values of the data, with a line at the median. The whiskers extend from the box to show the range of the data. Flier points are those past the end of the whiskers.", "A list of dictionaries containing stats for each boxplot. Required keys are:", "Optional keys are:", "The positions of the boxes. The ticks and limits are automatically set to match the positions.", "The widths of the boxes. The default is clip(0.15*(distance between extreme positions), 0.15, 0.5).", "If True (default), makes the boxes vertical. If False, makes horizontal boxes.", "If False produces boxes with the Line2D artist. If True produces boxes with the Patch artist.", "Whether to draw the CI notches, the mean value (both default to False), the caps, the box, and the fliers (all three default to True).", "Artist properties for the boxes, whiskers, caps, fliers, medians, and means.", "If True (and showmeans is True), will try to render the mean as a line spanning the full width of the box according to meanprops. Not recommended if shownotches is also True. Otherwise, means will be shown as points.", "If True, the tick locations and labels will be adjusted to match the boxplot positions.", "The zorder of the resulting boxplot.", "A dictionary mapping each component of the boxplot to a list of the Line2D instances created. That dictionary has the following keys (assuming vertical boxplots):", "(Source code, png, pdf)", "(png, pdf)"]}, {"name": "axes.Axes.can_pan", "path": "_as_gen/matplotlib.axes.axes.can_pan", "type": "axes", "text": ["Return whether this Axes supports any pan/zoom button functionality."]}, {"name": "axes.Axes.can_zoom", "path": "_as_gen/matplotlib.axes.axes.can_zoom", "type": "axes", "text": ["Return whether this Axes supports the zoom box button functionality."]}, {"name": "axes.Axes.cla", "path": "_as_gen/matplotlib.axes.axes.cla", "type": "axes", "text": ["Clear the Axes.", "pyplot animation", "Data Browser"]}, {"name": "axes.Axes.clabel", "path": "_as_gen/matplotlib.axes.axes.clabel", "type": "axes", "text": ["Label a contour plot.", "Adds labels to line contours in given ContourSet.", "Line contours to label.", "A list of level values, that should be labeled. The list must be a subset of CS.levels. If not given, all levels are labeled.", "All other parameters are documented in clabel.", "Contour Demo", "Contour Label Demo", "Contourf Demo", "Contouring the solution space of optimizations", "Patheffect Demo", "TickedStroke patheffect"]}, {"name": "axes.Axes.clear", "path": "_as_gen/matplotlib.axes.axes.clear", "type": "axes", "text": ["Clear the Axes."]}, {"name": "axes.Axes.cohere", "path": "_as_gen/matplotlib.axes.axes.cohere", "type": "axes", "text": ["Plot the coherence between x and y.", "Plot the coherence between x and y. Coherence is the normalized cross spectral density:", "The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.", "A function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.", "Which sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.", "The number of points to which the data segment is padded when performing the FFT. This can be different from NFFT, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to NFFT", "The number of data points used in each block for the FFT. A power 2 is most efficient. This should NOT be used to get zero padding, or the scaling of the result will be incorrect; use pad_to for this instead.", "The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the detrend parameter is a vector, in Matplotlib it is a function. The mlab module defines detrend_none, detrend_mean, and detrend_linear, but you can use a custom function as well. You can also use a string to choose one of the functions: 'none' calls detrend_none. 'mean' calls detrend_mean. 'linear' calls detrend_linear.", "Whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.", "The number of points of overlap between blocks.", "The center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.", "The coherence vector.", "The frequencies for the elements in Cxy.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, y", "Keyword arguments control the Line2D properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John Wiley & Sons (1986)"]}, {"name": "axes.Axes.contains", "path": "_as_gen/matplotlib.axes.axes.contains", "type": "axes", "text": ["Test whether the artist contains the mouse event.", "Whether any values are within the radius.", "An artist-specific dictionary of details of the event context, such as which points are contained in the pick radius. See the individual Artist subclasses for details."]}, {"name": "axes.Axes.contains_point", "path": "_as_gen/matplotlib.axes.axes.contains_point", "type": "axes", "text": ["Return whether point (pair of pixel coordinates) is inside the axes patch."]}, {"name": "axes.Axes.contour", "path": "_as_gen/matplotlib.axes.axes.contour", "type": "axes", "text": ["Plot contour lines.", "Call signature:", "contour and contourf draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.", "The coordinates of the values in Z.", "X and Y must both be 2D with the same shape as Z (e.g. created via numpy.meshgrid), or they must both be 1-D such that len(X) == N is the number of columns in Z and len(Y) == M is the number of rows in Z.", "X and Y must both be ordered monotonically.", "If not given, they are assumed to be integer indices, i.e. X = range(N), Y = range(M).", "The height values over which the contour is drawn.", "Determines the number and positions of the contour lines / regions.", "If an int n, use MaxNLocator, which tries to automatically choose no more than n+1 \"nice\" contour levels between vmin and vmax.", "If array-like, draw contour lines at the specified levels. The values must be in increasing order.", "Enable/disable corner masking, which only has an effect if Z is a masked array. If False, any quad touching a masked point is masked out. If True, only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual.", "The colors of the levels, i.e. the lines for contour and the areas for contourf.", "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated.", "As a shortcut, single color strings may be used in place of one-element lists, i.e. 'red' instead of ['red'] to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors.", "By default (value None), the colormap specified by cmap will be used.", "The alpha blending value, between 0 (transparent) and 1 (opaque).", "A Colormap instance or registered colormap name. The colormap maps the level values to colors.", "If both colors and cmap are given, an error is raised.", "If a colormap is used, the Normalize instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used.", "If not None, either or both of these values will be supplied to the Normalize instance, overriding the default color scaling based on levels.", "Determines the orientation and exact position of Z by specifying the position of Z[0, 0]. This is only relevant, if X, Y are not given.", "If origin is not None, then extent is interpreted as in imshow: it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If origin is None, then (x0, y0) is the position of Z[0, 0], and (x1, y1) is the position of Z[-1, -1].", "This argument is ignored if X and Y are specified in the call to contour.", "The locator is used to determine the contour levels if they are not given explicitly via levels. Defaults to MaxNLocator.", "Determines the contourf-coloring of values that are outside the levels range.", "If 'neither', values outside the levels range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the levels range.", "Values below min(levels) and above max(levels) are mapped to the under/over values of the Colormap. Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using Colormap.set_under and Colormap.set_over.", "Note", "An existing QuadContourSet does not get notified if properties of its colormap are changed. Therefore, an explicit call QuadContourSet.changed() is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the QuadContourSet because it internally calls QuadContourSet.changed().", "Example:", "Override axis units by specifying an instance of a matplotlib.units.ConversionInterface.", "Enable antialiasing, overriding the defaults. For filled contours, the default is True. For line contours, it is taken from rcParams[\"lines.antialiased\"] (default: True).", "If 0, no subdivision of the domain. Specify a positive integer to divide the domain into subdomains of nchunk by nchunk quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM. It can however introduce rendering artifacts at chunk boundaries depending on the backend, the antialiased flag and value of alpha.", "Only applies to contour.", "The line width of the contour lines.", "If a number, all levels will be plotted with this linewidth.", "If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified.", "If None, this falls back to rcParams[\"lines.linewidth\"] (default: 1.5).", "Only applies to contour.", "If linestyles is None, the default is 'solid' unless the lines are monochrome. In that case, negative contours will take their linestyle from rcParams[\"contour.negative_linestyle\"] (default: 'dashed') setting.", "linestyles can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.", "Only applies to contourf.", "A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "contourf fills intervals that are closed at the top; that is, for boundaries z1 and z2, the filled region is:", "except for the lowest interval, which is closed on both sides (i.e. it includes the lowest value).", "Contour Corner Mask", "Contour Demo", "Contour Label Demo", "Contourf Demo", "Contourf Hatching", "Contouring the solution space of optimizations", "Blend transparency with color in 2D images", "Contour plot of irregularly spaced data", "Patheffect Demo", "TickedStroke patheffect", "Demonstrates plotting contour (level) curves in 3D", "Demonstrates plotting contour (level) curves in 3D using the extend3d option", "Projecting contour profiles onto a graph", "contour(X, Y, Z)"]}, {"name": "axes.Axes.contourf", "path": "_as_gen/matplotlib.axes.axes.contourf", "type": "axes", "text": ["Plot filled contours.", "Call signature:", "contour and contourf draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.", "The coordinates of the values in Z.", "X and Y must both be 2D with the same shape as Z (e.g. created via numpy.meshgrid), or they must both be 1-D such that len(X) == N is the number of columns in Z and len(Y) == M is the number of rows in Z.", "X and Y must both be ordered monotonically.", "If not given, they are assumed to be integer indices, i.e. X = range(N), Y = range(M).", "The height values over which the contour is drawn.", "Determines the number and positions of the contour lines / regions.", "If an int n, use MaxNLocator, which tries to automatically choose no more than n+1 \"nice\" contour levels between vmin and vmax.", "If array-like, draw contour lines at the specified levels. The values must be in increasing order.", "Enable/disable corner masking, which only has an effect if Z is a masked array. If False, any quad touching a masked point is masked out. If True, only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual.", "The colors of the levels, i.e. the lines for contour and the areas for contourf.", "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated.", "As a shortcut, single color strings may be used in place of one-element lists, i.e. 'red' instead of ['red'] to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors.", "By default (value None), the colormap specified by cmap will be used.", "The alpha blending value, between 0 (transparent) and 1 (opaque).", "A Colormap instance or registered colormap name. The colormap maps the level values to colors.", "If both colors and cmap are given, an error is raised.", "If a colormap is used, the Normalize instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used.", "If not None, either or both of these values will be supplied to the Normalize instance, overriding the default color scaling based on levels.", "Determines the orientation and exact position of Z by specifying the position of Z[0, 0]. This is only relevant, if X, Y are not given.", "If origin is not None, then extent is interpreted as in imshow: it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If origin is None, then (x0, y0) is the position of Z[0, 0], and (x1, y1) is the position of Z[-1, -1].", "This argument is ignored if X and Y are specified in the call to contour.", "The locator is used to determine the contour levels if they are not given explicitly via levels. Defaults to MaxNLocator.", "Determines the contourf-coloring of values that are outside the levels range.", "If 'neither', values outside the levels range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the levels range.", "Values below min(levels) and above max(levels) are mapped to the under/over values of the Colormap. Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using Colormap.set_under and Colormap.set_over.", "Note", "An existing QuadContourSet does not get notified if properties of its colormap are changed. Therefore, an explicit call QuadContourSet.changed() is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the QuadContourSet because it internally calls QuadContourSet.changed().", "Example:", "Override axis units by specifying an instance of a matplotlib.units.ConversionInterface.", "Enable antialiasing, overriding the defaults. For filled contours, the default is True. For line contours, it is taken from rcParams[\"lines.antialiased\"] (default: True).", "If 0, no subdivision of the domain. Specify a positive integer to divide the domain into subdomains of nchunk by nchunk quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM. It can however introduce rendering artifacts at chunk boundaries depending on the backend, the antialiased flag and value of alpha.", "Only applies to contour.", "The line width of the contour lines.", "If a number, all levels will be plotted with this linewidth.", "If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified.", "If None, this falls back to rcParams[\"lines.linewidth\"] (default: 1.5).", "Only applies to contour.", "If linestyles is None, the default is 'solid' unless the lines are monochrome. In that case, negative contours will take their linestyle from rcParams[\"contour.negative_linestyle\"] (default: 'dashed') setting.", "linestyles can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.", "Only applies to contourf.", "A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "contourf fills intervals that are closed at the top; that is, for boundaries z1 and z2, the filled region is:", "except for the lowest interval, which is closed on both sides (i.e. it includes the lowest value).", "Contour Corner Mask", "Contourf Demo", "Contourf Hatching", "Contourf and log color scale", "Contour plot of irregularly spaced data", "pcolormesh", "Frontpage contour example", "3D box surface plot", "Filled contours", "Projecting filled contour onto a graph", "contourf(X, Y, Z)"]}, {"name": "axes.Axes.convert_xunits", "path": "_as_gen/matplotlib.axes.axes.convert_xunits", "type": "axes", "text": ["Convert x using the unit type of the xaxis.", "If the artist is not in contained in an Axes or if the xaxis does not have units, x itself is returned."]}, {"name": "axes.Axes.convert_yunits", "path": "_as_gen/matplotlib.axes.axes.convert_yunits", "type": "axes", "text": ["Convert y using the unit type of the yaxis.", "If the artist is not in contained in an Axes or if the yaxis does not have units, y itself is returned."]}, {"name": "axes.Axes.csd", "path": "_as_gen/matplotlib.axes.axes.csd", "type": "axes", "text": ["Plot the cross-spectral density.", "The cross spectral density \\(P_{xy}\\) by Welch's average periodogram method. The vectors x and y are divided into NFFT length segments. Each segment is detrended by function detrend and windowed by function window. noverlap gives the length of the overlap between segments. The product of the direct FFTs of x and y are averaged over each segment to compute \\(P_{xy}\\), with a scaling to correct for power loss due to windowing.", "If len(x) < NFFT or len(y) < NFFT, they will be zero padded to NFFT.", "Arrays or sequences containing the data.", "The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.", "A function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.", "Which sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.", "The number of points to which the data segment is padded when performing the FFT. This can be different from NFFT, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to NFFT", "The number of data points used in each block for the FFT. A power 2 is most efficient. This should NOT be used to get zero padding, or the scaling of the result will be incorrect; use pad_to for this instead.", "The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the detrend parameter is a vector, in Matplotlib it is a function. The mlab module defines detrend_none, detrend_mean, and detrend_linear, but you can use a custom function as well. You can also use a string to choose one of the functions: 'none' calls detrend_none. 'mean' calls detrend_mean. 'linear' calls detrend_linear.", "Whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.", "The number of points of overlap between segments.", "The center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.", "Whether to include the line object plotted in the returned values.", "The values for the cross spectrum \\(P_{xy}\\) before scaling (complex valued).", "The frequencies corresponding to the elements in Pxy.", "The line created by this function. Only returned if return_line is True.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, y", "Keyword arguments control the Line2D properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "See also", "is equivalent to setting y = x.", "For plotting, the power is plotted as \\(10 \\log_{10}(P_{xy})\\) for decibels, though \\(P_{xy}\\) itself is returned.", "Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John Wiley & Sons (1986)", "CSD Demo"]}, {"name": "axes.Axes.drag_pan", "path": "_as_gen/matplotlib.axes.axes.drag_pan", "type": "axes", "text": ["Called when the mouse moves during a pan operation.", "The pressed mouse button.", "The pressed key, if any.", "The mouse coordinates in display coords.", "This is intended to be overridden by new projection types."]}, {"name": "axes.Axes.draw", "path": "_as_gen/matplotlib.axes.axes.draw", "type": "axes", "text": ["Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses."]}, {"name": "axes.Axes.draw_artist", "path": "_as_gen/matplotlib.axes.axes.draw_artist", "type": "axes", "text": ["Efficiently redraw a single artist.", "This method can only be used after an initial draw of the figure, because that creates and caches the renderer needed here.", "Faster rendering by using blitting"]}, {"name": "axes.Axes.end_pan", "path": "_as_gen/matplotlib.axes.axes.end_pan", "type": "axes", "text": ["Called when a pan operation completes (when the mouse button is up.)", "This is intended to be overridden by new projection types."]}, {"name": "axes.Axes.errorbar", "path": "_as_gen/matplotlib.axes.axes.errorbar", "type": "axes", "text": ["Plot y versus x as lines and/or markers with attached errorbars.", "x, y define the data locations, xerr, yerr define the errorbar sizes. By default, this draws the data markers/lines as well the errorbars. Use fmt='none' to draw errorbars without any data markers.", "The data positions.", "The errorbar sizes:", "Note that all error arrays should have positive values.", "See Different ways of specifying error bars for an example on the usage of xerr and yerr.", "The format for the data points / data lines. See plot for details.", "Use 'none' (case insensitive) to plot errorbars without any data markers.", "The color of the errorbar lines. If None, use the color of the line connecting the markers.", "The linewidth of the errorbar lines. If None, the linewidth of the current style is used.", "The length of the error bar caps in points.", "An alias to the keyword argument markeredgewidth (a.k.a. mew). This setting is a more sensible name for the property that controls the thickness of the error bar cap in points. For backwards compatibility, if mew or markeredgewidth are given, then they will over-ride capthick. This may change in future releases.", "If True, will plot the errorbars above the plot symbols. Default is below.", "These arguments can be used to indicate that a value gives only upper/lower limits. In that case a caret symbol is used to indicate this. lims-arguments may be scalars, or array-likes of the same length as xerr and yerr. To use limits with inverted axes, set_xlim or set_ylim must be called before errorbar(). Note the tricky parameter names: setting e.g. lolims to True means that the y-value is a lower limit of the True value, so, only an upward-pointing arrow will be drawn!", "draws error bars on a subset of the data. errorevery =N draws error bars on the points (x[::N], y[::N]). errorevery =(start, N) draws error bars on the points (x[start::N], y[start::N]). e.g. errorevery=(6, 3) adds error bars to the data at (x[6], x[9], x[12], x[15], ...). Used to avoid overlapping error bars when two series share x-axis values.", "The container contains:", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, y, xerr, yerr", "All other keyword arguments are passed on to the plot call drawing the markers. For example, this code makes big red squares with thick green edges:", "where mfc, mec, ms and mew are aliases for the longer property names, markerfacecolor, markeredgecolor, markersize and markeredgewidth.", "Valid kwargs for the marker properties are Line2D properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "Errorbar subsampling", "Errorbar function", "Different ways of specifying error bars", "Including upper and lower limits in error bars", "Creating boxes from error bars using PatchCollection", "Legend Demo", "Parasite Simple2", "3D errorbars", "Log Demo", "errorbar(x, y, yerr, xerr)"]}, {"name": "axes.Axes.eventplot", "path": "_as_gen/matplotlib.axes.axes.eventplot", "type": "axes", "text": ["Plot identical parallel lines at the given positions.", "This type of plot is commonly used in neuroscience for representing neural events, where it is usually called a spike raster, dot raster, or raster plot.", "However, it is useful in any situation where you wish to show the timing or position of multiple sets of discrete events, such as the arrival times of people to a business on each day of the month or the date of hurricanes each year of the last century.", "A 1D array-like defines the positions of one sequence of events.", "Multiple groups of events may be passed as a list of array-likes. Each group can be styled independently by passing lists of values to lineoffsets, linelengths, linewidths, colors and linestyles.", "Note that positions can be a 2D array, but in practice different event groups usually have different counts so that one will use a list of different-length arrays rather than a 2D array.", "The direction of the event sequence:", "The offset of the center of the lines from the origin, in the direction orthogonal to orientation.", "If positions is 2D, this can be a sequence with length matching the length of positions.", "The total height of the lines (i.e. the lines stretches from lineoffset - linelength/2 to lineoffset + linelength/2).", "If positions is 2D, this can be a sequence with length matching the length of positions.", "The line width(s) of the event lines, in points.", "If positions is 2D, this can be a sequence with length matching the length of positions.", "The color(s) of the event lines.", "If positions is 2D, this can be a sequence with length matching the length of positions.", "Default is 'solid'. Valid strings are ['solid', 'dashed', 'dashdot', 'dotted', '-', '--', '-.', ':']. Dash tuples should be of the form:", "where onoffseq is an even length tuple of on and off ink in points.", "If positions is 2D, this can be a sequence with length matching the length of positions.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "positions, lineoffsets, linelengths, linewidths, colors, linestyles", "Other keyword arguments are line collection properties. See LineCollection for a list of the valid properties.", "The EventCollection that were added.", "For linelengths, linewidths, colors, and linestyles, if only a single value is given, that value is applied to all lines. If an array-like is given, it must have the same length as positions, and each value will be applied to the corresponding row of the array.", "(Source code, png, pdf)", "eventplot(D)"]}, {"name": "axes.Axes.fill", "path": "_as_gen/matplotlib.axes.axes.fill", "type": "axes", "text": ["Plot filled polygons.", "Each polygon is defined by the lists of x and y positions of its nodes, optionally followed by a color specifier. See matplotlib.colors for supported color specifiers. The standard color cycle is used for polygons without a color specifier.", "You can plot multiple polygons by providing multiple x, y, [color] groups.", "For example, each of the following is legal:", "An object with labelled data. If given, provide the label names to plot in x and y, e.g.:", "Use fill_between() if you would like to fill the region between two curves.", "Filled polygon", "Radar chart (aka spider or star chart)", "Ellipse With Units"]}, {"name": "axes.Axes.fill_between", "path": "_as_gen/matplotlib.axes.axes.fill_between", "type": "axes", "text": ["Fill the area between two horizontal curves.", "The curves are defined by the points (x, y1) and (x, y2). This creates one or multiple polygons describing the filled area.", "You may exclude some horizontal sections from filling using where.", "By default, the edges connect the given points directly. Use step if the filling should be a step function, i.e. constant in between x.", "The x coordinates of the nodes defining the curves.", "The y coordinates of the nodes defining the first curve.", "The y coordinates of the nodes defining the second curve.", "Define where to exclude some horizontal regions from being filled. The filled regions are defined by the coordinates x[where]. More precisely, fill between x[i] and x[i+1] if where[i] and where[i+1]. Note that this definition implies that an isolated True value between two False values in where will not result in filling. Both sides of the True position remain unfilled due to the adjacent False values.", "This option is only relevant if where is used and the two curves are crossing each other.", "Semantically, where is often used for y1 > y2 or similar. By default, the nodes of the polygon defining the filled region will only be placed at the positions in the x array. Such a polygon cannot describe the above semantics close to the intersection. The x-sections containing the intersection are simply clipped.", "Setting interpolate to True will calculate the actual intersection point and extend the filled region up to this point.", "Define step if the filling should be a step function, i.e. constant in between x. The value determines where the step will occur:", "A PolyCollection containing the plotted polygons.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, y1, y2, where", "All other keyword arguments are passed on to PolyCollection. They control the Polygon properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "array-like or scalar or None", "animated", "bool", "antialiased or aa or antialiaseds", "bool or list of bools", "array", "array-like or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clim", "(vmin: float, vmax: float)", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "cmap", "Colormap or str or None", "color", "color or list of rgba tuples", "edgecolor or ec or edgecolors", "color or list of colors or 'face'", "facecolor or facecolors or fc", "color or list of colors", "figure", "Figure", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or dashes or linestyles or ls", "str or tuple or list thereof", "linewidth or linewidths or lw", "float or list of floats", "norm", "Normalize or None", "offset_transform", "Transform", "offsets", "(N, 2) or (2,) array-like", "path_effects", "AbstractPathEffect", "paths", "list of array-like", "picker", "None or bool or float or callable", "pickradius", "float", "rasterized", "bool", "sizes", "ndarray or None", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "urls", "list of str or None", "verts", "list of array-like", "verts_and_codes", "unknown", "visible", "bool", "zorder", "float", "See also", "Fill between two sets of y-values.", "Fill between two sets of x-values.", "Fill Between and Alpha", "Filling the area between lines", "fill_between(x, y1, y2)"]}, {"name": "axes.Axes.fill_betweenx", "path": "_as_gen/matplotlib.axes.axes.fill_betweenx", "type": "axes", "text": ["Fill the area between two vertical curves.", "The curves are defined by the points (y, x1) and (y, x2). This creates one or multiple polygons describing the filled area.", "You may exclude some vertical sections from filling using where.", "By default, the edges connect the given points directly. Use step if the filling should be a step function, i.e. constant in between y.", "The y coordinates of the nodes defining the curves.", "The x coordinates of the nodes defining the first curve.", "The x coordinates of the nodes defining the second curve.", "Define where to exclude some vertical regions from being filled. The filled regions are defined by the coordinates y[where]. More precisely, fill between y[i] and y[i+1] if where[i] and where[i+1]. Note that this definition implies that an isolated True value between two False values in where will not result in filling. Both sides of the True position remain unfilled due to the adjacent False values.", "This option is only relevant if where is used and the two curves are crossing each other.", "Semantically, where is often used for x1 > x2 or similar. By default, the nodes of the polygon defining the filled region will only be placed at the positions in the y array. Such a polygon cannot describe the above semantics close to the intersection. The y-sections containing the intersection are simply clipped.", "Setting interpolate to True will calculate the actual intersection point and extend the filled region up to this point.", "Define step if the filling should be a step function, i.e. constant in between y. The value determines where the step will occur:", "A PolyCollection containing the plotted polygons.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "y, x1, x2, where", "All other keyword arguments are passed on to PolyCollection. They control the Polygon properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "array-like or scalar or None", "animated", "bool", "antialiased or aa or antialiaseds", "bool or list of bools", "array", "array-like or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clim", "(vmin: float, vmax: float)", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "cmap", "Colormap or str or None", "color", "color or list of rgba tuples", "edgecolor or ec or edgecolors", "color or list of colors or 'face'", "facecolor or facecolors or fc", "color or list of colors", "figure", "Figure", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or dashes or linestyles or ls", "str or tuple or list thereof", "linewidth or linewidths or lw", "float or list of floats", "norm", "Normalize or None", "offset_transform", "Transform", "offsets", "(N, 2) or (2,) array-like", "path_effects", "AbstractPathEffect", "paths", "list of array-like", "picker", "None or bool or float or callable", "pickradius", "float", "rasterized", "bool", "sizes", "ndarray or None", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "urls", "list of str or None", "verts", "list of array-like", "verts_and_codes", "unknown", "visible", "bool", "zorder", "float", "See also", "Fill between two sets of y-values.", "Fill between two sets of x-values.", "Fill Betweenx Demo"]}, {"name": "axes.Axes.findobj", "path": "_as_gen/matplotlib.axes.axes.findobj", "type": "axes", "text": ["Find artist objects.", "Recursively find all Artist instances contained in the artist.", "A filter criterion for the matches. This can be", "Include self in the list to be checked for a match."]}, {"name": "axes.Axes.format_coord", "path": "_as_gen/matplotlib.axes.axes.format_coord", "type": "axes", "text": ["Return a format string formatting the x, y coordinates."]}, {"name": "axes.Axes.format_cursor_data", "path": "_as_gen/matplotlib.axes.axes.format_cursor_data", "type": "axes", "text": ["Return a string representation of data.", "Note", "This method is intended to be overridden by artist subclasses. As an end-user of Matplotlib you will most likely not call this method yourself.", "The default implementation converts ints and floats and arrays of ints and floats into a comma-separated string enclosed in square brackets, unless the artist has an associated colorbar, in which case scalar values are formatted using the colorbar's formatter.", "See also"]}, {"name": "axes.Axes.format_xdata", "path": "_as_gen/matplotlib.axes.axes.format_xdata", "type": "axes", "text": ["Return x formatted as an x-value.", "This function will use the fmt_xdata attribute if it is not None, else will fall back on the xaxis major formatter."]}, {"name": "axes.Axes.format_ydata", "path": "_as_gen/matplotlib.axes.axes.format_ydata", "type": "axes", "text": ["Return y formatted as an y-value.", "This function will use the fmt_ydata attribute if it is not None, else will fall back on the yaxis major formatter."]}, {"name": "axes.Axes.get_adjustable", "path": "_as_gen/matplotlib.axes.axes.get_adjustable", "type": "axes", "text": ["Return whether the Axes will adjust its physical dimension ('box') or its data limits ('datalim') to achieve the desired aspect ratio.", "See also", "Set how the Axes adjusts to achieve the required aspect ratio.", "For a description of aspect handling."]}, {"name": "axes.Axes.get_anchor", "path": "_as_gen/matplotlib.axes.axes.get_anchor", "type": "axes", "text": ["Get the anchor location.", "See also", "for a description of the anchor.", "for a description of aspect handling."]}, {"name": "axes.Axes.get_aspect", "path": "_as_gen/matplotlib.axes.axes.get_aspect", "type": "axes", "text": ["Return the aspect ratio of the axes scaling.", "This is either \"auto\" or a float giving the ratio of y/x-scale."]}, {"name": "axes.Axes.get_autoscale_on", "path": "_as_gen/matplotlib.axes.axes.get_autoscale_on", "type": "axes", "text": ["Return True if each axis is autoscaled, False otherwise."]}, {"name": "axes.Axes.get_autoscalex_on", "path": "_as_gen/matplotlib.axes.axes.get_autoscalex_on", "type": "axes", "text": ["Return whether the x-axis is autoscaled."]}, {"name": "axes.Axes.get_autoscaley_on", "path": "_as_gen/matplotlib.axes.axes.get_autoscaley_on", "type": "axes", "text": ["Return whether the y-axis is autoscaled."]}, {"name": "axes.Axes.get_axes_locator", "path": "_as_gen/matplotlib.axes.axes.get_axes_locator", "type": "axes", "text": ["Return the axes_locator."]}, {"name": "axes.Axes.get_axisbelow", "path": "_as_gen/matplotlib.axes.axes.get_axisbelow", "type": "axes", "text": ["Get whether axis ticks and gridlines are above or below most artists.", "See also"]}, {"name": "axes.Axes.get_box_aspect", "path": "_as_gen/matplotlib.axes.axes.get_box_aspect", "type": "axes", "text": ["Return the Axes box aspect, i.e. the ratio of height to width.", "The box aspect is None (i.e. chosen depending on the available figure space) unless explicitly specified.", "See also", "for a description of box aspect.", "for a description of aspect handling."]}, {"name": "axes.Axes.get_children", "path": "_as_gen/matplotlib.axes.axes.get_children", "type": "axes", "text": ["Return a list of the child Artists of this Artist."]}, {"name": "axes.Axes.get_cursor_data", "path": "_as_gen/matplotlib.axes.axes.get_cursor_data", "type": "axes", "text": ["Return the cursor data for a given event.", "Note", "This method is intended to be overridden by artist subclasses. As an end-user of Matplotlib you will most likely not call this method yourself.", "Cursor data can be used by Artists to provide additional context information for a given event. The default implementation just returns None.", "Subclasses can override the method and return arbitrary data. However, when doing so, they must ensure that format_cursor_data can convert the data to a string representation.", "The only current use case is displaying the z-value of an AxesImage in the status bar of a plot window, while moving the mouse.", "See also"]}, {"name": "axes.Axes.get_data_ratio", "path": "_as_gen/matplotlib.axes.axes.get_data_ratio", "type": "axes", "text": ["Return the aspect ratio of the scaled data.", "This method is intended to be overridden by new projection types."]}, {"name": "axes.Axes.get_default_bbox_extra_artists", "path": "_as_gen/matplotlib.axes.axes.get_default_bbox_extra_artists", "type": "axes", "text": ["Return a default list of artists that are used for the bounding box calculation.", "Artists are excluded either by not being visible or artist.set_in_layout(False)."]}, {"name": "axes.Axes.get_facecolor", "path": "_as_gen/matplotlib.axes.axes.get_facecolor", "type": "axes", "text": ["Get the facecolor of the Axes."]}, {"name": "axes.Axes.get_frame_on", "path": "_as_gen/matplotlib.axes.axes.get_frame_on", "type": "axes", "text": ["Get whether the Axes rectangle patch is drawn."]}, {"name": "axes.Axes.get_images", "path": "_as_gen/matplotlib.axes.axes.get_images", "type": "axes", "text": ["Return a list of AxesImages contained by the Axes."]}, {"name": "axes.Axes.get_legend", "path": "_as_gen/matplotlib.axes.axes.get_legend", "type": "axes", "text": ["Return the Legend instance, or None if no legend is defined."]}, {"name": "axes.Axes.get_legend_handles_labels", "path": "_as_gen/matplotlib.axes.axes.get_legend_handles_labels", "type": "axes", "text": ["Return handles and labels for legend", "ax.legend() is equivalent to", "Legend guide"]}, {"name": "axes.Axes.get_lines", "path": "_as_gen/matplotlib.axes.axes.get_lines", "type": "axes", "text": ["Return a list of lines contained by the Axes."]}, {"name": "axes.Axes.get_navigate", "path": "_as_gen/matplotlib.axes.axes.get_navigate", "type": "axes", "text": ["Get whether the Axes responds to navigation commands."]}, {"name": "axes.Axes.get_navigate_mode", "path": "_as_gen/matplotlib.axes.axes.get_navigate_mode", "type": "axes", "text": ["Get the navigation toolbar button status: 'PAN', 'ZOOM', or None."]}, {"name": "axes.Axes.get_position", "path": "_as_gen/matplotlib.axes.axes.get_position", "type": "axes", "text": ["Return the position of the Axes within the figure as a Bbox.", "If True, return the original position. Otherwise return the active position. For an explanation of the positions see set_position.", "Contour Demo"]}, {"name": "axes.Axes.get_rasterization_zorder", "path": "_as_gen/matplotlib.axes.axes.get_rasterization_zorder", "type": "axes", "text": ["Return the zorder value below which artists will be rasterized."]}, {"name": "axes.Axes.get_renderer_cache", "path": "_as_gen/matplotlib.axes.axes.get_renderer_cache", "type": "axes", "text": []}, {"name": "axes.Axes.get_shared_x_axes", "path": "_as_gen/matplotlib.axes.axes.get_shared_x_axes", "type": "axes", "text": ["Return a reference to the shared axes Grouper object for x axes."]}, {"name": "axes.Axes.get_shared_y_axes", "path": "_as_gen/matplotlib.axes.axes.get_shared_y_axes", "type": "axes", "text": ["Return a reference to the shared axes Grouper object for y axes."]}, {"name": "axes.Axes.get_tightbbox", "path": "_as_gen/matplotlib.axes.axes.get_tightbbox", "type": "axes", "text": ["Return the tight bounding box of the axes, including axis and their decorators (xlabel, title, etc).", "Artists that have artist.set_in_layout(False) are not included in the bbox.", "renderer that will be used to draw the figures (i.e. fig.canvas.get_renderer())", "List of artists to include in the tight bounding box. If None (default), then all artist children of the Axes are included in the tight bounding box.", "If call_axes_locator is False, it does not call the _axes_locator attribute, which is necessary to get the correct bounding box. call_axes_locator=False can be used if the caller is only interested in the relative size of the tightbbox compared to the Axes bbox.", "The bounding box will not include the x-extent of the title and the xlabel, or the y-extent of the ylabel.", "Bounding box in figure pixel coordinates.", "See also"]}, {"name": "axes.Axes.get_title", "path": "_as_gen/matplotlib.axes.axes.get_title", "type": "axes", "text": ["Get an Axes title.", "Get one of the three available Axes titles. The available titles are positioned above the Axes in the center, flush with the left edge, and flush with the right edge.", "Which title to return.", "The title text string."]}, {"name": "axes.Axes.get_transformed_clip_path_and_affine", "path": "_as_gen/matplotlib.axes.axes.get_transformed_clip_path_and_affine", "type": "axes", "text": ["Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation."]}, {"name": "axes.Axes.get_window_extent", "path": "_as_gen/matplotlib.axes.axes.get_window_extent", "type": "axes", "text": ["Return the Axes bounding box in display space; args and kwargs are empty.", "This bounding box does not include the spines, ticks, ticklables, or other labels. For a bounding box including these elements use get_tightbbox.", "See also"]}, {"name": "axes.Axes.get_xaxis", "path": "_as_gen/matplotlib.axes.axes.get_xaxis", "type": "axes", "text": ["Return the XAxis instance.", "The use of this function is discouraged. You should instead directly access the attribute ax.xaxis."]}, {"name": "axes.Axes.get_xaxis_text1_transform", "path": "_as_gen/matplotlib.axes.axes.get_xaxis_text1_transform", "type": "axes", "text": ["The transform used for drawing x-axis labels, which will add pad_points of padding (in points) between the axis and the label. The x-direction is in data coordinates and the y-direction is in axis coordinates", "The text vertical alignment.", "The text horizontal alignment.", "This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations."]}, {"name": "axes.Axes.get_xaxis_text2_transform", "path": "_as_gen/matplotlib.axes.axes.get_xaxis_text2_transform", "type": "axes", "text": ["The transform used for drawing secondary x-axis labels, which will add pad_points of padding (in points) between the axis and the label. The x-direction is in data coordinates and the y-direction is in axis coordinates", "The text vertical alignment.", "The text horizontal alignment.", "This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations."]}, {"name": "axes.Axes.get_xaxis_transform", "path": "_as_gen/matplotlib.axes.axes.get_xaxis_transform", "type": "axes", "text": ["Get the transformation used for drawing x-axis labels, ticks and gridlines. The x-direction is in data coordinates and the y-direction is in axis coordinates.", "Note", "This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.", "Filling the area between lines", "hlines and vlines", "Boxplots", "Scale invariant angle label", "Centered spines with arrows", "Transformations Tutorial"]}, {"name": "axes.Axes.get_xbound", "path": "_as_gen/matplotlib.axes.axes.get_xbound", "type": "axes", "text": ["Return the lower and upper x-axis bounds, in increasing order.", "See also"]}, {"name": "axes.Axes.get_xgridlines", "path": "_as_gen/matplotlib.axes.axes.get_xgridlines", "type": "axes", "text": ["Return the xaxis' grid lines as a list of Line2Ds."]}, {"name": "axes.Axes.get_xlabel", "path": "_as_gen/matplotlib.axes.axes.get_xlabel", "type": "axes", "text": ["Get the xlabel text string."]}, {"name": "axes.Axes.get_xlim", "path": "_as_gen/matplotlib.axes.axes.get_xlim", "type": "axes", "text": ["Return the x-axis view limits.", "The current x-axis limits in data coordinates.", "See also", "The x-axis may be inverted, in which case the left value will be greater than the right value.", "Decay"]}, {"name": "axes.Axes.get_xmajorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_xmajorticklabels", "type": "axes", "text": ["Return the xaxis' major tick labels, as a list of Text."]}, {"name": "axes.Axes.get_xminorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_xminorticklabels", "type": "axes", "text": ["Return the xaxis' minor tick labels, as a list of Text."]}, {"name": "axes.Axes.get_xscale", "path": "_as_gen/matplotlib.axes.axes.get_xscale", "type": "axes", "text": ["Return the xaxis' scale (as a str)."]}, {"name": "axes.Axes.get_xticklabels", "path": "_as_gen/matplotlib.axes.axes.get_xticklabels", "type": "axes", "text": ["Get the xaxis' tick labels.", "Whether to return the minor or the major ticklabels.", "Overrides minor.", "Selects which ticklabels to return", "The tick label strings are not populated until a draw method has been called.", "See also: draw and draw.", "Creating a timeline with lines, dates, and text", "Creating annotated heatmaps", "Aligning Labels", "Boxplots", "Date tick labels", "Formatting date ticks using ConciseDateFormatter", "Evans test", "The Lifecycle of a Plot"]}, {"name": "axes.Axes.get_xticklines", "path": "_as_gen/matplotlib.axes.axes.get_xticklines", "type": "axes", "text": ["Return the xaxis' tick lines as a list of Line2Ds."]}, {"name": "axes.Axes.get_xticks", "path": "_as_gen/matplotlib.axes.axes.get_xticks", "type": "axes", "text": ["Return the xaxis' tick locations in data coordinates."]}, {"name": "axes.Axes.get_yaxis", "path": "_as_gen/matplotlib.axes.axes.get_yaxis", "type": "axes", "text": ["Return the YAxis instance.", "The use of this function is discouraged. You should instead directly access the attribute ax.yaxis."]}, {"name": "axes.Axes.get_yaxis_text1_transform", "path": "_as_gen/matplotlib.axes.axes.get_yaxis_text1_transform", "type": "axes", "text": ["The transform used for drawing y-axis labels, which will add pad_points of padding (in points) between the axis and the label. The x-direction is in axis coordinates and the y-direction is in data coordinates", "The text vertical alignment.", "The text horizontal alignment.", "This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations."]}, {"name": "axes.Axes.get_yaxis_text2_transform", "path": "_as_gen/matplotlib.axes.axes.get_yaxis_text2_transform", "type": "axes", "text": ["The transform used for drawing secondart y-axis labels, which will add pad_points of padding (in points) between the axis and the label. The x-direction is in axis coordinates and the y-direction is in data coordinates", "The text vertical alignment.", "The text horizontal alignment.", "This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations."]}, {"name": "axes.Axes.get_yaxis_transform", "path": "_as_gen/matplotlib.axes.axes.get_yaxis_transform", "type": "axes", "text": ["Get the transformation used for drawing y-axis labels, ticks and gridlines. The x-direction is in axis coordinates and the y-direction is in data coordinates.", "Note", "This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.", "Centered spines with arrows", "Connect Simple01", "Transformations Tutorial"]}, {"name": "axes.Axes.get_ybound", "path": "_as_gen/matplotlib.axes.axes.get_ybound", "type": "axes", "text": ["Return the lower and upper y-axis bounds, in increasing order.", "See also"]}, {"name": "axes.Axes.get_ygridlines", "path": "_as_gen/matplotlib.axes.axes.get_ygridlines", "type": "axes", "text": ["Return the yaxis' grid lines as a list of Line2Ds."]}, {"name": "axes.Axes.get_ylabel", "path": "_as_gen/matplotlib.axes.axes.get_ylabel", "type": "axes", "text": ["Get the ylabel text string."]}, {"name": "axes.Axes.get_ylim", "path": "_as_gen/matplotlib.axes.axes.get_ylim", "type": "axes", "text": ["Return the y-axis view limits.", "The current y-axis limits in data coordinates.", "See also", "The y-axis may be inverted, in which case the bottom value will be greater than the top value.", "Line, Poly and RegularPoly Collection with autoscaling"]}, {"name": "axes.Axes.get_ymajorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_ymajorticklabels", "type": "axes", "text": ["Return the yaxis' major tick labels, as a list of Text."]}, {"name": "axes.Axes.get_yminorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_yminorticklabels", "type": "axes", "text": ["Return the yaxis' minor tick labels, as a list of Text."]}, {"name": "axes.Axes.get_yscale", "path": "_as_gen/matplotlib.axes.axes.get_yscale", "type": "axes", "text": ["Return the yaxis' scale (as a str)."]}, {"name": "axes.Axes.get_yticklabels", "path": "_as_gen/matplotlib.axes.axes.get_yticklabels", "type": "axes", "text": ["Get the yaxis' tick labels.", "Whether to return the minor or the major ticklabels.", "Overrides minor.", "Selects which ticklabels to return", "The tick label strings are not populated until a draw method has been called.", "See also: draw and draw.", "Fill Between and Alpha", "Programmatically controlling subplot adjustment"]}, {"name": "axes.Axes.get_yticklines", "path": "_as_gen/matplotlib.axes.axes.get_yticklines", "type": "axes", "text": ["Return the yaxis' tick lines as a list of Line2Ds."]}, {"name": "axes.Axes.get_yticks", "path": "_as_gen/matplotlib.axes.axes.get_yticks", "type": "axes", "text": ["Return the yaxis' tick locations in data coordinates."]}, {"name": "axes.Axes.grid", "path": "_as_gen/matplotlib.axes.axes.grid", "type": "axes", "text": ["Configure the grid lines.", "Whether to show the grid lines. If any kwargs are supplied, it is assumed you want the grid on and visible will be set to True.", "If visible is None and there are no kwargs, this toggles the visibility of the lines.", "The grid lines to apply the changes on.", "The axis to apply the changes on.", "Define the line properties of the grid, e.g.:", "Valid keyword arguments are:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "The axis is drawn as a unit, so the effective zorder for drawing the grid is determined by the zorder of each axis, not by the zorder of the Line2D objects comprising the grid. Therefore, to set grid zorder, use set_axisbelow or, for more control, call the set_zorder method of each axis.", "Broken Barh", "CSD Demo", "Fill Between and Alpha", "Psd Demo", "Scatter Demo2", "Scatter plots with a legend", "Simple Plot", "Cross- and Auto-Correlation Demo", "Contour Corner Mask", "Creating annotated heatmaps", "Image Demo", "Watermark image", "Axes Props", "Figure labels: suptitle, supxlabel, supylabel", "Invert Axes", "Using histograms to plot a cumulative distribution", "Polar plot", "Date tick labels", "Multiline", "Text watermark", "PathPatch object", "Anatomy of a figure", "Bachelor's degrees by gender", "Decay", "The double pendulum problem", "Custom projection", "Patheffect Demo", "Pythonic Matplotlib", "2D and 3D Axes in same Figure", "Log Demo", "Log Axis", "Scales", "Symlog Demo", "Artist tests", "Basic Usage"]}, {"name": "axes.Axes.has_data", "path": "_as_gen/matplotlib.axes.axes.has_data", "type": "axes", "text": ["Return whether any artists have been added to the Axes.", "This should not be used to determine whether the dataLim need to be updated, and may not actually be useful for anything."]}, {"name": "axes.Axes.have_units", "path": "_as_gen/matplotlib.axes.axes.have_units", "type": "axes", "text": ["Return whether units are set on any axis."]}, {"name": "axes.Axes.hexbin", "path": "_as_gen/matplotlib.axes.axes.hexbin", "type": "axes", "text": ["Make a 2D hexagonal binning plot of points x, y.", "If C is None, the value of the hexagon is determined by the number of points in the hexagon. Otherwise, C specifies values at the coordinate (x[i], y[i]). For each hexagon, these values are reduced using reduce_C_function.", "The data positions. x and y must be of the same length.", "If given, these values are accumulated in the bins. Otherwise, every point has a value of 1. Must be of the same length as x and y.", "If a single int, the number of hexagons in the x-direction. The number of hexagons in the y-direction is chosen such that the hexagons are approximately regular.", "Alternatively, if a tuple (nx, ny), the number of hexagons in the x-direction and the y-direction.", "Discretization of the hexagon values.", "Use a linear or log10 scale on the horizontal axis.", "Use a linear or log10 scale on the vertical axis.", "If not None, only display cells with more than mincnt number of points in the cell.", "If marginals is True, plot the marginal density as colormapped rectangles along the bottom of the x-axis and left of the y-axis.", "The limits of the bins (xmin, xmax, ymin, ymax). The default assigns the limits based on gridsize, x, y, xscale and yscale.", "If xscale or yscale is set to 'log', the limits are expected to be the exponent for a power of 10. E.g. for x-limits of 1 and 50 in 'linear' scale and y-limits of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).", "A PolyCollection defining the hexagonal bins.", "If marginals is True, horizontal bar and vertical bar (both PolyCollections) will be attached to the return collection as attributes hbar and vbar.", "The Colormap instance or registered colormap name used to map the bin values to colors.", "The Normalize instance scales the bin values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling.", "The colorbar range. If None, suitable min/max values are automatically chosen by the Normalize instance (defaults to the respective min/max values of the bins in case of the default linear scaling). It is an error to use vmin/vmax when norm is given.", "The alpha blending value, between 0 (transparent) and 1 (opaque).", "If None, defaults to 1.0.", "The color of the hexagon edges. Possible values are:", "The function to aggregate C within the bins. It is ignored if C is not given. This must have the signature:", "Commonly used functions are:", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, y, C", "All other keyword arguments are passed on to PolyCollection:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "array-like or scalar or None", "animated", "bool", "antialiased or aa or antialiaseds", "bool or list of bools", "array", "array-like or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clim", "(vmin: float, vmax: float)", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "cmap", "Colormap or str or None", "color", "color or list of rgba tuples", "edgecolor or ec or edgecolors", "color or list of colors or 'face'", "facecolor or facecolors or fc", "color or list of colors", "figure", "Figure", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or dashes or linestyles or ls", "str or tuple or list thereof", "linewidth or linewidths or lw", "float or list of floats", "norm", "Normalize or None", "offset_transform", "Transform", "offsets", "(N, 2) or (2,) array-like", "path_effects", "AbstractPathEffect", "paths", "list of array-like", "picker", "None or bool or float or callable", "pickradius", "float", "rasterized", "bool", "sizes", "ndarray or None", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "urls", "list of str or None", "verts", "list of array-like", "verts_and_codes", "unknown", "visible", "bool", "zorder", "float", "See also", "2D histogram rectangular bins", "Hexagonal binned plot", "hexbin(x, y, C)"]}, {"name": "axes.Axes.hist", "path": "_as_gen/matplotlib.axes.axes.hist", "type": "axes", "text": ["Plot a histogram.", "Compute and draw the histogram of x. The return value is a tuple (n, bins, patches) or ([n0, n1, ...], bins, [patches0, patches1, ...]) if the input contains multiple data. See the documentation of the weights parameter to draw a histogram of already-binned data.", "Multiple data can be provided via x as a list of datasets of potentially different length ([x0, x1, ...]), or as a 2D ndarray in which each column is a dataset. Note that the ndarray form is transposed relative to the list form.", "Masked arrays are not supported.", "The bins, range, weights, and density parameters behave as in numpy.histogram.", "Input values, this takes either a single array or a sequence of arrays which are not required to be of the same length.", "If bins is an integer, it defines the number of equal-width bins in the range.", "If bins is a sequence, it defines the bin edges, including the left edge of the first bin and the right edge of the last bin; in this case, bins may be unequally spaced. All but the last (righthand-most) bin is half-open. In other words, if bins is:", "then the first bin is [1, 2) (including 1, but excluding 2) and the second [2, 3). The last bin, however, is [3, 4], which includes 4.", "If bins is a string, it is one of the binning strategies supported by numpy.histogram_bin_edges: 'auto', 'fd', 'doane', 'scott', 'stone', 'rice', 'sturges', or 'sqrt'.", "The lower and upper range of the bins. Lower and upper outliers are ignored. If not provided, range is (x.min(), x.max()). Range has no effect if bins is a sequence.", "If bins is a sequence or range is specified, autoscaling is based on the specified bin range instead of the range of x.", "If True, draw and return a probability density: each bin will display the bin's raw count divided by the total number of counts and the bin width (density = counts / (sum(counts) * np.diff(bins))), so that the area under the histogram integrates to 1 (np.sum(density * np.diff(bins)) == 1).", "If stacked is also True, the sum of the histograms is normalized to 1.", "An array of weights, of the same shape as x. Each value in x only contributes its associated weight towards the bin count (instead of 1). If density is True, the weights are normalized, so that the integral of the density over the range remains 1.", "This parameter can be used to draw a histogram of data that has already been binned, e.g. using numpy.histogram (by treating each bin as a single point with a weight equal to its count)", "(or you may alternatively use bar()).", "If True, then a histogram is computed where each bin gives the counts in that bin plus all bins for smaller values. The last bin gives the total number of datapoints.", "If density is also True then the histogram is normalized such that the last bin equals 1.", "If cumulative is a number less than 0 (e.g., -1), the direction of accumulation is reversed. In this case, if density is also True, then the histogram is normalized such that the first bin equals 1.", "Location of the bottom of each bin, ie. bins are drawn from bottom to bottom + hist(x, bins) If a scalar, the bottom of each bin is shifted by the same amount. If an array, each bin is shifted independently and the length of bottom must match the number of bins. If None, defaults to 0.", "The type of histogram to draw.", "The horizontal alignment of the histogram bars.", "If 'horizontal', barh will be used for bar-type histograms and the bottom kwarg will be the left edges.", "The relative width of the bars as a fraction of the bin width. If None, automatically compute the width.", "Ignored if histtype is 'step' or 'stepfilled'.", "If True, the histogram axis will be set to a log scale.", "Color or sequence of colors, one per dataset. Default (None) uses the standard line color sequence.", "String, or sequence of strings to match multiple datasets. Bar charts yield multiple patches per dataset, but only the first gets the label, so that legend will work as expected.", "If True, multiple data are stacked on top of each other If False multiple data are arranged side by side if histtype is 'bar' or on top of each other if histtype is 'step'", "The values of the histogram bins. See density and weights for a description of the possible semantics. If input x is an array, then this is an array of length nbins. If input is a sequence of arrays [data1, data2, ...], then this is a list of arrays with the values of the histograms for each of the arrays in the same order. The dtype of the array n (or of its element arrays) will always be float even if no weighting or normalization is used.", "The edges of the bins. Length nbins + 1 (nbins left edges and right edge of last bin). Always a single array even when multiple data sets are passed in.", "Container of individual artists used to create the histogram or list of such containers if there are multiple input datasets.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, weights", "Patch properties", "See also", "2D histogram with rectangular bins", "2D histogram with hexagonal bins", "For large numbers of bins (>1000), 'step' and 'stepfilled' can be significantly faster than 'bar' and 'barstacked'.", "Scatter plot with histograms", "Axes Demo", "Using histograms to plot a cumulative distribution", "Some features of the histogram (hist) function", "The histogram (hist) function with multiple data sets", "Placing text boxes", "Simple axes labels", "Bayesian Methods for Hackers style sheet", "Scatter Histogram (Locatable Axes)", "Animated histogram", "Frontpage histogram example", "MRI With EEG", "Basic Usage", "Artist tutorial", "Path Tutorial", "Transformations Tutorial", "hist(x)"]}, {"name": "axes.Axes.hist2d", "path": "_as_gen/matplotlib.axes.axes.hist2d", "type": "axes", "text": ["Make a 2D histogram plot.", "Input values", "The bin specification:", "The default value is 10.", "The leftmost and rightmost edges of the bins along each dimension (if not specified explicitly in the bins parameters): [[xmin,\nxmax], [ymin, ymax]]. All values outside of this range will be considered outliers and not tallied in the histogram.", "Normalize histogram. See the documentation for the density parameter of hist for more details.", "An array of values w_i weighing each sample (x_i, y_i).", "All bins that has count less than cmin or more than cmax will not be displayed (set to NaN before passing to imshow) and these count values in the return value count histogram will also be set to nan upon return.", "The bi-dimensional histogram of samples x and y. Values in x are histogrammed along the first dimension and values in y are histogrammed along the second dimension.", "The bin edges along the x axis.", "The bin edges along the y axis.", "A colors.Colormap instance. If not set, use rc settings.", "A colors.Normalize instance is used to scale luminance data to [0, 1]. If not set, defaults to colors.Normalize().", "Arguments passed to the Normalize instance.", "The alpha blending value.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, y, weights", "Additional parameters are passed along to the pcolormesh method and QuadMesh constructor.", "See also", "1D histogram plotting", "2D histogram with hexagonal bins", "Histograms", "Exploring normalizations", "hist2d(x, y)"]}, {"name": "axes.Axes.hlines", "path": "_as_gen/matplotlib.axes.axes.hlines", "type": "axes", "text": ["Plot horizontal lines at each y from xmin to xmax.", "y-indexes where to plot the lines.", "Respective beginning and end of each line. If scalars are provided, all lines will have same length.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "y, xmin, xmax, colors", "See also", "vertical lines", "horizontal line across the Axes", "hlines and vlines", "Specifying Colors"]}, {"name": "axes.Axes.imshow", "path": "_as_gen/matplotlib.axes.axes.imshow", "type": "axes", "text": ["Display data as an image, i.e., on a 2D regular raster.", "The input may either be actual RGB(A) data, or 2D scalar data, which will be rendered as a pseudocolor image. For displaying a grayscale image set up the colormapping using the parameters cmap='gray', vmin=0, vmax=255.", "The number of pixels used to render an image is set by the Axes size and the dpi of the figure. This can lead to aliasing artifacts when the image is resampled because the displayed image size will usually not match the size of X (see Image antialiasing). The resampling can be controlled via the interpolation parameter and/or rcParams[\"image.interpolation\"] (default: 'antialiased').", "The image data. Supported array shapes are:", "The first two dimensions (M, N) define the rows and columns of the image.", "Out-of-range RGB(A) values are clipped.", "The Colormap instance or registered colormap name used to map scalar data to colors. This parameter is ignored for RGB(A) data.", "The Normalize instance used to scale scalar data to the [0, 1] range before mapping to colors using cmap. By default, a linear scaling mapping the lowest value to 0 and the highest to 1 is used. This parameter is ignored for RGB(A) data.", "The aspect ratio of the Axes. This parameter is particularly relevant for images since it determines whether data pixels are square.", "This parameter is a shortcut for explicitly calling Axes.set_aspect. See there for further details.", "The interpolation method used.", "Supported values are 'none', 'antialiased', 'nearest', 'bilinear', 'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite', 'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos', 'blackman'.", "If interpolation is 'none', then no interpolation is performed on the Agg, ps, pdf and svg backends. Other backends will fall back to 'nearest'. Note that most SVG renderers perform interpolation at rendering and that the default interpolation method they implement may differ.", "If interpolation is the default 'antialiased', then 'nearest' interpolation is used if the image is upsampled by more than a factor of three (i.e. the number of display pixels is at least three times the size of the data array). If the upsampling rate is smaller than 3, or the image is downsampled, then 'hanning' interpolation is used to act as an anti-aliasing filter, unless the image happens to be upsampled by exactly a factor of two or one.", "See Interpolations for imshow for an overview of the supported interpolation methods, and Image antialiasing for a discussion of image antialiasing.", "Some interpolation methods require an additional radius parameter, which can be set by filterrad. Additionally, the antigrain image resize filter is controlled by the parameter filternorm.", "If 'data', interpolation is carried out on the data provided by the user. If 'rgba', the interpolation is carried out after the colormapping has been applied (visual interpolation).", "The alpha blending value, between 0 (transparent) and 1 (opaque). If alpha is an array, the alpha blending values are applied pixel by pixel, and alpha must have the same shape as X.", "When using scalar data and no explicit norm, vmin and vmax define the data range that the colormap covers. By default, the colormap covers the complete value range of the supplied data. It is an error to use vmin/vmax when norm is given. When using RGB(A) data, parameters vmin/vmax are ignored.", "Place the [0, 0] index of the array in the upper left or lower left corner of the Axes. The convention (the default) 'upper' is typically used for matrices and images.", "Note that the vertical axis points upward for 'lower' but downward for 'upper'.", "See the origin and extent in imshow tutorial for examples and a more detailed description.", "The bounding box in data coordinates that the image will fill. The image is stretched individually along x and y to fill the box.", "The default extent is determined by the following conditions. Pixels have unit size in data coordinates. Their centers are on integer coordinates, and their center coordinates range from 0 to columns-1 horizontally and from 0 to rows-1 vertically.", "Note that the direction of the vertical axis and thus the default values for top and bottom depend on origin:", "See the origin and extent in imshow tutorial for examples and a more detailed description.", "A parameter for the antigrain image resize filter (see the antigrain documentation). If filternorm is set, the filter normalizes integer values and corrects the rounding errors. It doesn't do anything with the source floating point values, it corrects only integers according to the rule of 1.0 which means that any sum of pixel weights must be equal to 1.0. So, the filter function must produce a graph of the proper shape.", "The filter radius for filters that have a radius parameter, i.e. when interpolation is one of: 'sinc', 'lanczos' or 'blackman'.", "When True, use a full resampling method. When False, only resample when the output image is larger than the input image.", "Set the url of the created AxesImage. See Artist.set_url.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "These parameters are passed on to the constructor of the AxesImage artist.", "See also", "Plot a matrix or an array as an image.", "Unless extent is used, pixel centers will be located at integer coordinates. In other words: the origin will coincide with the center of pixel (0, 0).", "There are two common representations for RGB images with an alpha channel:", "imshow expects RGB images adopting the straight (unassociated) alpha representation.", "Bar chart with gradients", "Barcode", "Contour Demo", "Creating annotated heatmaps", "Image antialiasing", "Clipping images with patches", "Image Demo", "Image Masked", "Blend transparency with color in 2D images", "Modifying the coordinate formatter", "Interpolations for imshow", "Pcolor Demo", "Streamplot", "Axes box aspect", "Zoom region inset axes", "Using a text as a Path", "Colorbar", "Creating a colormap from a list of colors", "Anchored Direction Arrow", "Axes Grid2", "HBoxDivider demo", "Adding a colorbar to inset axes", "Colorbar with AxesDivider", "Controlling the position and size of colorbars with Inset Axes", "Inset Locator Demo2", "Simple ImageGrid", "Simple ImageGrid 2", "Simple Colorbar", "Shaded & power normalized rendering", "pyplot animation", "Animated image using a precomputed list of images", "Image Slices Viewer", "Viewlims", "Patheffect Demo", "MRI", "MRI With EEG", "Topographic hillshading", "Dropped spines", "Colorbar Tick Labelling", "Interactive Adjustment of Colormap Range", "Artist tutorial", "Tight Layout guide", "Choosing Colormaps in Matplotlib", "imshow(Z)"]}, {"name": "axes.Axes.in_axes", "path": "_as_gen/matplotlib.axes.axes.in_axes", "type": "axes", "text": ["Return whether the given event (in display coords) is in the Axes."]}, {"name": "axes.Axes.indicate_inset", "path": "_as_gen/matplotlib.axes.axes.indicate_inset", "type": "axes", "text": ["Add an inset indicator to the Axes. This is a rectangle on the plot at the position indicated by bounds that optionally has lines that connect the rectangle to an inset Axes (Axes.inset_axes).", "Lower-left corner of rectangle to be marked, and its width and height.", "An optional inset Axes to draw connecting lines to. Two lines are drawn connecting the indicator box to the inset Axes on corners chosen so as to not overlap with the indicator box.", "Transform for the rectangle coordinates. Defaults to ax.transAxes, i.e. the units of rect are in Axes-relative coordinates.", "Facecolor of the rectangle.", "Color of the rectangle and color of the connecting lines.", "Transparency of the rectangle and connector lines.", "Drawing order of the rectangle and connector lines. The default, 4.99, is just below the default level of inset Axes.", "Other keyword arguments are passed on to the Rectangle patch:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "angle", "unknown", "animated", "bool", "antialiased or aa", "bool or None", "bounds", "(left, bottom, width, height)", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "height", "unknown", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "unknown", "x", "unknown", "xy", "(float, float)", "y", "unknown", "zorder", "float", "The indicator frame.", "The four connector lines connecting to (lower_left, upper_left, lower_right upper_right) corners of inset_ax. Two lines are set with visibility to False, but the user can set the visibility to True if the automatic choice is not deemed correct.", "Warning", "This method is experimental as of 3.0, and the API may change."]}, {"name": "axes.Axes.indicate_inset_zoom", "path": "_as_gen/matplotlib.axes.axes.indicate_inset_zoom", "type": "axes", "text": ["Add an inset indicator rectangle to the Axes based on the axis limits for an inset_ax and draw connectors between inset_ax and the rectangle.", "Inset Axes to draw connecting lines to. Two lines are drawn connecting the indicator box to the inset Axes on corners chosen so as to not overlap with the indicator box.", "Other keyword arguments are passed on to Axes.indicate_inset", "Rectangle artist.", "Each of four connector lines coming from the rectangle drawn on this axis, in the order lower left, upper left, lower right, upper right. Two are set with visibility to False, but the user can set the visibility to True if the automatic choice is not deemed correct.", "Warning", "This method is experimental as of 3.0, and the API may change.", "Zoom region inset axes"]}, {"name": "axes.Axes.inset_axes", "path": "_as_gen/matplotlib.axes.axes.inset_axes", "type": "axes", "text": ["Add a child inset Axes to this existing Axes.", "Lower-left corner of inset Axes, and its width and height.", "Defaults to ax.transAxes, i.e. the units of rect are in Axes-relative coordinates.", "Defaults to 5 (same as Axes.legend). Adjust higher or lower to change whether it is above or below data plotted on the parent Axes.", "Other keyword arguments are passed on to the child Axes.", "The created Axes instance.", "Warning", "This method is experimental as of 3.0, and the API may change.", "This example makes two inset Axes, the first is in Axes-relative coordinates, and the second in data-coordinates:", "Placing Colorbars", "Zoom region inset axes"]}, {"name": "axes.Axes.invert_xaxis", "path": "_as_gen/matplotlib.axes.axes.invert_xaxis", "type": "axes", "text": ["Invert the x-axis.", "See also"]}, {"name": "axes.Axes.invert_yaxis", "path": "_as_gen/matplotlib.axes.axes.invert_yaxis", "type": "axes", "text": ["Invert the y-axis.", "See also", "Bar Label Demo", "Horizontal bar chart", "Marker reference"]}, {"name": "axes.Axes.legend", "path": "_as_gen/matplotlib.axes.axes.legend", "type": "axes", "text": ["Place a legend on the Axes.", "Call signatures:", "The call signatures correspond to the following different ways to use this method:", "1. Automatic detection of elements to be shown in the legend", "The elements to be added to the legend are automatically determined, when you do not pass in any extra arguments.", "In this case, the labels are taken from the artist. You can specify them either at artist creation or by calling the set_label() method on the artist:", "or:", "Specific lines can be excluded from the automatic legend element selection by defining a label starting with an underscore. This is default for all artists, so calling Axes.legend without any arguments and without setting the labels manually will result in no legend being drawn.", "2. Explicitly listing the artists and labels in the legend", "For full control of which artists have a legend entry, it is possible to pass an iterable of legend artists followed by an iterable of legend labels respectively:", "3. Explicitly listing the artists in the legend", "This is similar to 2, but the labels are taken from the artists' label properties. Example:", "4. Labeling existing plot elements", "Discouraged", "This call signature is discouraged, because the relation between plot elements and labels is only implicit by their order and can easily be mixed up.", "To make a legend for all artists on an Axes, call this function with an iterable of strings, one for each legend item. For example:", "A list of Artists (lines, patches) to be added to the legend. Use this together with labels, if you need full control on what is shown in the legend and the automatic mechanism described above is not sufficient.", "The length of handles and labels should be the same in this case. If they are not, they are truncated to the smaller length.", "A list of labels to show next to the artists. Use this together with handles, if you need full control on what is shown in the legend and the automatic mechanism described above is not sufficient.", "The location of the legend.", "The strings 'upper left', 'upper right', 'lower left', 'lower right' place the legend at the corresponding corner of the axes/figure.", "The strings 'upper center', 'lower center', 'center left', 'center right' place the legend at the center of the corresponding edge of the axes/figure.", "The string 'center' places the legend at the center of the axes/figure.", "The string 'best' places the legend at the location, among the nine locations defined so far, with the minimum overlap with other drawn artists. This option can be quite slow for plots with large amounts of data; your plotting speed may benefit from providing a specific location.", "The location can also be a 2-tuple giving the coordinates of the lower-left corner of the legend in axes coordinates (in which case bbox_to_anchor will be ignored).", "For back-compatibility, 'center right' (but no other location) can also be spelled 'right', and each \"string\" locations can also be given as a numeric value:", "Location String", "Location Code", "'best'", "0", "'upper right'", "1", "'upper left'", "2", "'lower left'", "3", "'lower right'", "4", "'right'", "5", "'center left'", "6", "'center right'", "7", "'lower center'", "8", "'upper center'", "9", "'center'", "10", "Box that is used to position the legend in conjunction with loc. Defaults to axes.bbox (if called as a method to Axes.legend) or figure.bbox (if Figure.legend). This argument allows arbitrary placement of the legend.", "Bbox coordinates are interpreted in the coordinate system given by bbox_transform, with the default transform Axes or Figure coordinates, depending on which legend is called.", "If a 4-tuple or BboxBase is given, then it specifies the bbox (x, y, width, height) that the legend is placed in. To put the legend in the best location in the bottom right quadrant of the axes (or figure):", "A 2-tuple (x, y) places the corner of the legend specified by loc at x, y. For example, to put the legend's upper right-hand corner in the center of the axes (or figure) the following keywords can be used:", "The number of columns that the legend has.", "The font properties of the legend. If None (default), the current matplotlib.rcParams will be used.", "The font size of the legend. If the value is numeric the size will be the absolute font size in points. String values are relative to the current default font size. This argument is only used if prop is not specified.", "The color of the text in the legend. Either a valid color string (for example, 'red'), or a list of color strings. The labelcolor can also be made to match the color of the line or marker using 'linecolor', 'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').", "Labelcolor can be set globally using rcParams[\"legend.labelcolor\"] (default: 'None'). If None, use rcParams[\"text.color\"] (default: 'black').", "The number of marker points in the legend when creating a legend entry for a Line2D (line).", "The number of marker points in the legend when creating a legend entry for a PathCollection (scatter plot).", "The vertical offset (relative to the font size) for the markers created for a scatter plot legend entry. 0.0 is at the base the legend text, and 1.0 is at the top. To draw all markers at the same height, set to [0.5].", "The relative size of legend markers compared with the originally drawn ones.", "If True, legend marker is placed to the left of the legend label. If False, legend marker is placed to the right of the legend label.", "Whether the legend should be drawn on a patch (frame).", "Whether round edges should be enabled around the FancyBboxPatch which makes up the legend's background.", "Whether to draw a shadow behind the legend.", "The alpha transparency of the legend's background. If shadow is activated and framealpha is None, the default value is ignored.", "The legend's background color. If \"inherit\", use rcParams[\"axes.facecolor\"] (default: 'white').", "The legend's background patch edge color. If \"inherit\", use take rcParams[\"axes.edgecolor\"] (default: 'black').", "If mode is set to \"expand\" the legend will be horizontally expanded to fill the axes area (or bbox_to_anchor if defines the legend's size).", "The transform for the bounding box (bbox_to_anchor). For a value of None (default) the Axes' transAxes transform will be used.", "The legend's title. Default is no title (None).", "The font properties of the legend's title. If None (default), the title_fontsize argument will be used if present; if title_fontsize is also None, the current rcParams[\"legend.title_fontsize\"] (default: None) will be used.", "The font size of the legend's title. Note: This cannot be combined with title_fontproperties. If you want to set the fontsize alongside other font properties, use the size parameter in title_fontproperties.", "The fractional whitespace inside the legend border, in font-size units.", "The vertical space between the legend entries, in font-size units.", "The length of the legend handles, in font-size units.", "The height of the legend handles, in font-size units.", "The pad between the legend handle and text, in font-size units.", "The pad between the axes and legend border, in font-size units.", "The spacing between columns, in font-size units.", "The custom dictionary mapping instances or types to a legend handler. This handler_map updates the default handler map found at matplotlib.legend.Legend.get_legend_handler_map.", "See also", "Some artists are not supported by this function. See Legend guide for details.", "(Source code, png, pdf)", "Bar Label Demo", "Stacked bar chart", "Grouped bar chart with labels", "Plotting categorical variables", "Fill Between and Alpha", "Hat graph", "Customizing dashed line styles", "Lines with a ticked patheffect", "prop_cycle property markevery in rcParams", "Scatter plots with a legend", "Stackplots and streamgraphs", "Stairs Demo", "Contourf Hatching", "Tricontour Demo", "Secondary Axis", "Plot a confidence ellipse of a two-dimensional dataset", "Using histograms to plot a cumulative distribution", "The histogram (hist) function with multiple data sets", "Bar of pie", "Labeling a pie and a donut", "Polar Legend", "Composing Custom Legends", "Legend using pre-defined labels", "Legend Demo", "Mathtext", "Rendering math equations using TeX", "Parasite Axes demo", "Parasite axis demo", "Anatomy of a figure", "Legend Picking", "Patheffect Demo", "TickedStroke patheffect", "Plot 2D data on 3D plot", "Parametric Curve", "Multiple Yaxis With Spines", "Group barchart with units", "Simple Legend01", "Simple Legend02", "Basic Usage", "Legend guide", "Constrained Layout Guide", "Tight Layout guide", "Specifying Colors"]}, {"name": "axes.Axes.locator_params", "path": "_as_gen/matplotlib.axes.axes.locator_params", "type": "axes", "text": ["Control behavior of major tick locators.", "Because the locator is involved in autoscaling, autoscale_view is called automatically after the parameters are changed.", "The axis on which to operate.", "Parameter passed to autoscale_view. Default is None, for no change.", "Remaining keyword arguments are passed to directly to the set_params() method of the locator. Supported keywords depend on the type of the locator. See for example set_params for the ticker.MaxNLocator used by default for linear axes.", "When plotting small subplots, one might want to reduce the maximum number of ticks and use tight bounds, for example:", "Contourf Demo", "Constrained Layout Guide", "Tight Layout guide"]}, {"name": "axes.Axes.loglog", "path": "_as_gen/matplotlib.axes.axes.loglog", "type": "axes", "text": ["Make a plot with log scaling on both the x and y axis.", "Call signatures:", "This is just a thin wrapper around plot which additionally changes both the x-axis and the y-axis to log scaling. All of the concepts and parameters of plot can be used here as well.", "The additional parameters base, subs and nonpositive control the x/y-axis properties. They are just forwarded to Axes.set_xscale and Axes.set_yscale. To use different properties on the x-axis and the y-axis, use e.g. ax.set_xscale(\"log\", base=10); ax.set_yscale(\"log\", base=2).", "Base of the logarithm.", "The location of the minor ticks. If None, reasonable locations are automatically chosen depending on the number of decades in the plot. See Axes.set_xscale/Axes.set_yscale for details.", "Non-positive values can be masked as invalid, or clipped to a very small positive number.", "All parameters supported by plot.", "Objects representing the plotted data.", "Secondary Axis", "Log Demo"]}, {"name": "axes.Axes.magnitude_spectrum", "path": "_as_gen/matplotlib.axes.axes.magnitude_spectrum", "type": "axes", "text": ["Plot the magnitude spectrum.", "Compute the magnitude spectrum of x. Data is padded to a length of pad_to and the windowing function window is applied to the signal.", "Array or sequence containing the data.", "The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.", "A function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.", "Which sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.", "The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to the length of the input signal (i.e. no padding).", "The scaling of the values in the spec. 'linear' is no scaling. 'dB' returns the values in dB scale, i.e., the dB amplitude (20 * log10). 'default' is 'linear'.", "The center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.", "The values for the magnitude spectrum before scaling (real valued).", "The frequencies corresponding to the elements in spectrum.", "The line created by this function.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x", "Keyword arguments control the Line2D properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "See also", "Plots the power spectral density.", "Plots the angles of the corresponding frequencies.", "Plots the phase (unwrapped angle) of the corresponding frequencies.", "Can plot the magnitude spectrum of segments within the signal in a colormap."]}, {"name": "axes.Axes.margins", "path": "_as_gen/matplotlib.axes.axes.margins", "type": "axes", "text": ["Set or retrieve autoscaling margins.", "The padding added to each limit of the Axes is the margin times the data interval. All input parameters must be floats within the range [0, 1]. Passing both positional and keyword arguments is invalid and will raise a TypeError. If no arguments (positional or otherwise) are provided, the current margins will remain in place and simply be returned.", "Specifying any margin changes only the autoscaling; for example, if xmargin is not None, then xmargin times the X data interval will be added to each end of that interval before it is used in autoscaling.", "If a single positional argument is provided, it specifies both margins of the x-axis and y-axis limits. If two positional arguments are provided, they will be interpreted as xmargin, ymargin. If setting the margin on a single axis is desired, use the keyword arguments described below.", "Specific margin values for the x-axis and y-axis, respectively. These cannot be used with positional arguments, but can be used individually to alter on e.g., only the y-axis.", "The tight parameter is passed to autoscale_view(), which is executed after a margin is changed; the default here is True, on the assumption that when margins are specified, no additional padding to match tick marks is usually desired. Set tight to None will preserve the previous setting.", "If a previously used Axes method such as pcolor() has set use_sticky_edges to True, only the limits not set by the \"sticky artists\" will be modified. To force all of the margins to be set, set use_sticky_edges to False before calling margins().", "Marker reference", "Creating a timeline with lines, dates, and text", "Trigradient Demo", "Controlling view limits using margins and sticky_edges", "Scale invariant angle label", "ggplot style sheet", "Autoscaling"]}, {"name": "axes.Axes.matshow", "path": "_as_gen/matplotlib.axes.axes.matshow", "type": "axes", "text": ["Plot the values of a 2D matrix or array as color-coded image.", "The matrix will be shown the way it would be printed, with the first row at the top. Row and column numbering is zero-based.", "The matrix to be displayed.", "See also", "More general function to plot data on a 2D regular raster.", "This is just a convenience function wrapping imshow to set useful defaults for displaying a matrix. In particular:"]}, {"name": "axes.Axes.minorticks_off", "path": "_as_gen/matplotlib.axes.axes.minorticks_off", "type": "axes", "text": ["Remove minor ticks from the Axes."]}, {"name": "axes.Axes.minorticks_on", "path": "_as_gen/matplotlib.axes.axes.minorticks_on", "type": "axes", "text": ["Display minor ticks on the Axes.", "Displaying minor ticks may reduce performance; you may turn them off using minorticks_off() if drawing speed is a problem.", "MRI With EEG"]}, {"name": "axes.Axes.mouseover", "path": "_as_gen/matplotlib.axes.axes.mouseover", "type": "axes", "text": ["If this property is set to True, the artist will be queried for custom context information when the mouse cursor moves over it.", "See also get_cursor_data(), ToolCursorPosition and NavigationToolbar2."]}, {"name": "axes.Axes.name", "path": "_as_gen/matplotlib.axes.axes.name", "type": "axes", "text": []}, {"name": "axes.Axes.pchanged", "path": "_as_gen/matplotlib.axes.axes.pchanged", "type": "axes", "text": ["Call all of the registered callbacks.", "This function is triggered internally when a property is changed.", "See also"]}, {"name": "axes.Axes.pcolor", "path": "_as_gen/matplotlib.axes.axes.pcolor", "type": "axes", "text": ["Create a pseudocolor plot with a non-regular rectangular grid.", "Call signature:", "X and Y can be used to specify the corners of the quadrilaterals.", "Hint", "pcolor() can be very slow for large arrays. In most cases you should use the similar but much faster pcolormesh instead. See Differences between pcolor() and pcolormesh() for a discussion of the differences.", "The color-mapped values.", "The coordinates of the corners of quadrilaterals of a pcolormesh:", "Note that the column index corresponds to the x-coordinate, and the row index corresponds to y. For details, see the Notes section below.", "If shading='flat' the dimensions of X and Y should be one greater than those of C, and the quadrilateral is colored due to the value at C[i, j]. If X, Y and C have equal dimensions, a warning will be raised and the last row and column of C will be ignored.", "If shading='nearest', the dimensions of X and Y should be the same as those of C (if not, a ValueError will be raised). The color C[i, j] will be centered on (X[i, j], Y[i, j]).", "If X and/or Y are 1-D arrays or column vectors they will be expanded as needed into the appropriate 2D arrays, making a rectangular grid.", "The fill style for the quadrilateral. Possible values:", "See pcolormesh grids and shading for more description.", "A Colormap instance or registered colormap name. The colormap maps the C values to colors.", "The Normalize instance scales the data values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling.", "The colorbar range. If None, suitable min/max values are automatically chosen by the Normalize instance (defaults to the respective min/max values of C in case of the default linear scaling). It is an error to use vmin/vmax when norm is given.", "The color of the edges. Defaults to 'none'. Possible values:", "The singular form edgecolor works as an alias.", "The alpha blending value of the face color, between 0 (transparent) and 1 (opaque). Note: The edgecolor is currently not affected by this.", "Whether to snap the mesh to pixel boundaries.", "The default antialiaseds is False if the default edgecolors=\"none\" is used. This eliminates artificial lines at patch boundaries, and works regardless of the value of alpha. If edgecolors is not \"none\", then the default antialiaseds is taken from rcParams[\"patch.antialiased\"] (default: True). Stroking the edges may be preferred if alpha is 1, but will cause artifacts otherwise.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "Additionally, the following arguments are allowed. They are passed along to the PolyCollection constructor:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "array-like or scalar or None", "animated", "bool", "antialiased or aa or antialiaseds", "bool or list of bools", "array", "array-like or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clim", "(vmin: float, vmax: float)", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "cmap", "Colormap or str or None", "color", "color or list of rgba tuples", "edgecolor or ec or edgecolors", "color or list of colors or 'face'", "facecolor or facecolors or fc", "color or list of colors", "figure", "Figure", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or dashes or linestyles or ls", "str or tuple or list thereof", "linewidth or linewidths or lw", "float or list of floats", "norm", "Normalize or None", "offset_transform", "Transform", "offsets", "(N, 2) or (2,) array-like", "path_effects", "AbstractPathEffect", "paths", "list of array-like", "picker", "None or bool or float or callable", "pickradius", "float", "rasterized", "bool", "sizes", "ndarray or None", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "urls", "list of str or None", "verts", "list of array-like", "verts_and_codes", "unknown", "visible", "bool", "zorder", "float", "See also", "for an explanation of the differences between pcolor and pcolormesh.", "If X and Y are each equidistant, imshow can be a faster alternative.", "Masked arrays", "X, Y and C may be masked arrays. If either C[i, j], or one of the vertices surrounding C[i, j] (X or Y at [i, j], [i+1, j], [i, j+1], [i+1, j+1]) is masked, nothing is plotted.", "Grid orientation", "The grid orientation follows the standard matrix convention: An array C with shape (nrows, ncolumns) is plotted with the column number as X and the row number as Y.", "Pcolor Demo", "Controlling view limits using margins and sticky_edges"]}, {"name": "axes.Axes.pcolorfast", "path": "_as_gen/matplotlib.axes.axes.pcolorfast", "type": "axes", "text": ["Create a pseudocolor plot with a non-regular rectangular grid.", "Call signature:", "This method is similar to pcolor and pcolormesh. It's designed to provide the fastest pcolor-type plotting with the Agg backend. To achieve this, it uses different algorithms internally depending on the complexity of the input grid (regular rectangular, non-regular rectangular or arbitrary quadrilateral).", "Warning", "This method is experimental. Compared to pcolor or pcolormesh it has some limitations:", "The image data. Supported array shapes are:", "The first two dimensions (M, N) define the rows and columns of the image.", "This parameter can only be passed positionally.", "X and Y are used to specify the coordinates of the quadrilaterals. There are different ways to do this:", "Use tuples X=(xmin, xmax) and Y=(ymin, ymax) to define a uniform rectangular grid.", "The tuples define the outer edges of the grid. All individual quadrilaterals will be of the same size. This is the fastest version.", "Use 1D arrays X, Y to specify a non-uniform rectangular grid.", "In this case X and Y have to be monotonic 1D arrays of length N+1 and M+1, specifying the x and y boundaries of the cells.", "The speed is intermediate. Note: The grid is checked, and if found to be uniform the fast version is used.", "Use 2D arrays X, Y if you need an arbitrary quadrilateral grid (i.e. if the quadrilaterals are not rectangular).", "In this case X and Y are 2D arrays with shape (M + 1, N + 1), specifying the x and y coordinates of the corners of the colored quadrilaterals.", "This is the most general, but the slowest to render. It may produce faster and more compact output using ps, pdf, and svg backends, however.", "These arguments can only be passed positionally.", "A Colormap instance or registered colormap name. The colormap maps the C values to colors.", "The Normalize instance scales the data values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling.", "The colorbar range. If None, suitable min/max values are automatically chosen by the Normalize instance (defaults to the respective min/max values of C in case of the default linear scaling). It is an error to use vmin/vmax when norm is given.", "The alpha blending value, between 0 (transparent) and 1 (opaque).", "Whether to snap the mesh to pixel boundaries.", "The return type depends on the type of grid:", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "Supported additional parameters depend on the type of grid. See return types of image for further description.", "Pcolor Demo"]}, {"name": "axes.Axes.pcolormesh", "path": "_as_gen/matplotlib.axes.axes.pcolormesh", "type": "axes", "text": ["Create a pseudocolor plot with a non-regular rectangular grid.", "Call signature:", "X and Y can be used to specify the corners of the quadrilaterals.", "Hint", "pcolormesh is similar to pcolor. It is much faster and preferred in most cases. For a detailed discussion on the differences see Differences between pcolor() and pcolormesh().", "The color-mapped values.", "The coordinates of the corners of quadrilaterals of a pcolormesh:", "Note that the column index corresponds to the x-coordinate, and the row index corresponds to y. For details, see the Notes section below.", "If shading='flat' the dimensions of X and Y should be one greater than those of C, and the quadrilateral is colored due to the value at C[i, j]. If X, Y and C have equal dimensions, a warning will be raised and the last row and column of C will be ignored.", "If shading='nearest' or 'gouraud', the dimensions of X and Y should be the same as those of C (if not, a ValueError will be raised). For 'nearest' the color C[i, j] is centered on (X[i, j], Y[i, j]). For 'gouraud', a smooth interpolation is caried out between the quadrilateral corners.", "If X and/or Y are 1-D arrays or column vectors they will be expanded as needed into the appropriate 2D arrays, making a rectangular grid.", "A Colormap instance or registered colormap name. The colormap maps the C values to colors.", "The Normalize instance scales the data values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling.", "The colorbar range. If None, suitable min/max values are automatically chosen by the Normalize instance (defaults to the respective min/max values of C in case of the default linear scaling). It is an error to use vmin/vmax when norm is given.", "The color of the edges. Defaults to 'none'. Possible values:", "The singular form edgecolor works as an alias.", "The alpha blending value, between 0 (transparent) and 1 (opaque).", "The fill style for the quadrilateral; defaults to 'flat' or rcParams[\"pcolor.shading\"] (default: 'auto'). Possible values:", "See pcolormesh grids and shading for more description.", "Whether to snap the mesh to pixel boundaries.", "Rasterize the pcolormesh when drawing vector graphics. This can speed up rendering and produce smaller files for large data sets. See also Rasterization for vector graphics.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "Additionally, the following arguments are allowed. They are passed along to the QuadMesh constructor:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "array-like or scalar or None", "animated", "bool", "antialiased or aa or antialiaseds", "bool or list of bools", "array", "(M, N) array-like or M*N array-like", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clim", "(vmin: float, vmax: float)", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "cmap", "Colormap or str or None", "color", "color or list of rgba tuples", "edgecolor or ec or edgecolors", "color or list of colors or 'face'", "facecolor or facecolors or fc", "color or list of colors", "figure", "Figure", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or dashes or linestyles or ls", "str or tuple or list thereof", "linewidth or linewidths or lw", "float or list of floats", "norm", "Normalize or None", "offset_transform", "Transform", "offsets", "(N, 2) or (2,) array-like", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "urls", "list of str or None", "visible", "bool", "zorder", "float", "See also", "An alternative implementation with slightly different features. For a detailed discussion on the differences see Differences between pcolor() and pcolormesh().", "If X and Y are each equidistant, imshow can be a faster alternative.", "Masked arrays", "C may be a masked array. If C[i, j] is masked, the corresponding quadrilateral will be transparent. Masking of X and Y is not supported. Use pcolor if you need this functionality.", "Grid orientation", "The grid orientation follows the standard matrix convention: An array C with shape (nrows, ncolumns) is plotted with the column number as X and the row number as Y.", "Differences between pcolor() and pcolormesh()", "Both methods are used to create a pseudocolor plot of a 2D array using quadrilaterals.", "The main difference lies in the created object and internal data handling: While pcolor returns a PolyCollection, pcolormesh returns a QuadMesh. The latter is more specialized for the given purpose and thus is faster. It should almost always be preferred.", "There is also a slight difference in the handling of masked arrays. Both pcolor and pcolormesh support masked arrays for C. However, only pcolor supports masked arrays for X and Y. The reason lies in the internal handling of the masked values. pcolor leaves out the respective polygons from the PolyCollection. pcolormesh sets the facecolor of the masked elements to transparent. You can see the difference when using edgecolors. While all edges are drawn irrespective of masking in a QuadMesh, the edge between two adjacent masked quadrilaterals in pcolor is not drawn as the corresponding polygons do not exist in the PolyCollection.", "Another difference is the support of Gouraud shading in pcolormesh, which is not available with pcolor.", "Pcolor Demo", "pcolormesh grids and shading", "pcolormesh", "Placing Colorbars", "Figure subfigures", "Rasterization for vector graphics", "Constrained Layout Guide", "Colormap Normalization", "pcolormesh(X, Y, Z)"]}, {"name": "axes.Axes.phase_spectrum", "path": "_as_gen/matplotlib.axes.axes.phase_spectrum", "type": "axes", "text": ["Plot the phase spectrum.", "Compute the phase spectrum (unwrapped angle spectrum) of x. Data is padded to a length of pad_to and the windowing function window is applied to the signal.", "Array or sequence containing the data", "The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.", "A function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.", "Which sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.", "The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to the length of the input signal (i.e. no padding).", "The center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.", "The values for the phase spectrum in radians (real valued).", "The frequencies corresponding to the elements in spectrum.", "The line created by this function.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x", "Keyword arguments control the Line2D properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "See also", "Plots the magnitudes of the corresponding frequencies.", "Plots the wrapped version of this function.", "Can plot the phase spectrum of segments within the signal in a colormap."]}, {"name": "axes.Axes.pie", "path": "_as_gen/matplotlib.axes.axes.pie", "type": "axes", "text": ["Plot a pie chart.", "Make a pie chart of array x. The fractional area of each wedge is given by x/sum(x). If sum(x) < 1, then the values of x give the fractional area directly and the array will not be normalized. The resulting pie will have an empty wedge of size 1 - sum(x).", "The wedges are plotted counterclockwise, by default starting from the x-axis.", "The wedge sizes.", "If not None, is a len(x) array which specifies the fraction of the radius with which to offset each wedge.", "A sequence of strings providing the labels for each wedge", "A sequence of colors through which the pie chart will cycle. If None, will use the colors in the currently active cycle.", "If not None, is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be fmt % pct. If it is a function, it will be called.", "The ratio between the center of each pie slice and the start of the text generated by autopct. Ignored if autopct is None.", "Draw a shadow beneath the pie.", "When True, always make a full pie by normalizing x so that sum(x) == 1. False makes a partial pie if sum(x) <= 1 and raises a ValueError for sum(x) > 1.", "The radial distance at which the pie labels are drawn. If set to None, label are not drawn, but are stored for use in legend()", "The angle by which the start of the pie is rotated, counterclockwise from the x-axis.", "The radius of the pie.", "Specify fractions direction, clockwise or counterclockwise.", "Dict of arguments passed to the wedge objects making the pie. For example, you can pass in wedgeprops = {'linewidth': 3} to set the width of the wedge border lines equal to 3. For more details, look at the doc/arguments of the wedge object. By default clip_on=False.", "Dict of arguments to pass to the text objects.", "The coordinates of the center of the chart.", "Plot Axes frame with the chart if true.", "Rotate each label to the angle of the corresponding slice if true.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, explode, labels, colors", "A sequence of matplotlib.patches.Wedge instances", "A list of the label Text instances.", "A list of Text instances for the numeric labels. This will only be returned if the parameter autopct is not None.", "The pie chart will probably look best if the figure and Axes are square, or the Axes aspect is equal. This method sets the aspect ratio of the axis to \"equal\". The Axes aspect ratio can be controlled with Axes.set_aspect.", "Basic pie chart", "Bar of pie", "Nested pie charts", "Labeling a pie and a donut", "SVG Filter Pie", "pie(x)"]}, {"name": "axes.Axes.plot", "path": "_as_gen/matplotlib.axes.axes.plot", "type": "axes", "text": ["Plot y versus x as lines and/or markers.", "Call signatures:", "The coordinates of the points or line nodes are given by x, y.", "The optional parameter fmt is a convenient way for defining basic formatting like color, marker and linestyle. It's a shortcut string notation described in the Notes section below.", "You can use Line2D properties as keyword arguments for more control on the appearance. Line properties and fmt can be mixed. The following two calls yield identical results:", "When conflicting with fmt, keyword arguments take precedence.", "Plotting labelled data", "There's a convenient way for plotting objects with labelled data (i.e. data that can be accessed by index obj['y']). Instead of giving the data in x and y, you can provide the object in the data parameter and just give the labels for x and y:", "All indexable objects are supported. This could e.g. be a dict, a pandas.DataFrame or a structured numpy array.", "Plotting multiple sets of data", "There are various ways to plot multiple sets of data.", "The most straight forward way is just to call plot multiple times. Example:", "If x and/or y are 2D arrays a separate data set will be drawn for every column. If both x and y are 2D, they must have the same shape. If only one of them is 2D with shape (N, m) the other must have length N and will be used for every data set m.", "Example:", "is equivalent to:", "The third way is to specify multiple sets of [x], y, [fmt] groups:", "In this case, any additional keyword argument applies to all datasets. Also this syntax cannot be combined with the data parameter.", "By default, each line is assigned a different style specified by a 'style cycle'. The fmt and line property parameters are only necessary if you want explicit deviations from these defaults. Alternatively, you can also change the style cycle using rcParams[\"axes.prop_cycle\"] (default: cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'])).", "The horizontal / vertical coordinates of the data points. x values are optional and default to range(len(y)).", "Commonly, these parameters are 1D arrays.", "They can also be scalars, or two-dimensional (in that case, the columns represent separate data sets).", "These arguments cannot be passed as keywords.", "A format string, e.g. 'ro' for red circles. See the Notes section for a full description of the format strings.", "Format strings are just an abbreviation for quickly setting basic line properties. All of these and more can also be controlled by keyword arguments.", "This argument cannot be passed as keyword.", "An object with labelled data. If given, provide the label names to plot in x and y.", "Note", "Technically there's a slight ambiguity in calls where the second label is a valid fmt. plot('n', 'o', data=obj) could be plt(x, y) or plt(y, fmt). In such cases, the former interpretation is chosen, but a warning is issued. You may suppress the warning by adding an empty format string plot('n', 'o', '', data=obj).", "A list of lines representing the plotted data.", "These parameters determine if the view limits are adapted to the data limits. The values are passed on to autoscale_view.", "kwargs are used to specify properties like a line label (for auto legends), linewidth, antialiasing, marker face color. Example:", "If you specify multiple lines with one plot call, the kwargs apply to all those lines. In case the label object is iterable, each element is used as labels for each set of data.", "Here is a list of available Line2D properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "See also", "XY scatter plot with markers of varying size and/or color ( sometimes also called bubble chart).", "Format Strings", "A format string consists of a part for color, marker and line:", "Each of them is optional. If not provided, the value from the style cycle is used. Exception: If line is given, but no marker, the data will be a line without markers.", "Other combinations such as [color][marker][line] are also supported, but note that their parsing may be ambiguous.", "Markers", "character", "description", "'.'", "point marker", "','", "pixel marker", "'o'", "circle marker", "'v'", "triangle_down marker", "'^'", "triangle_up marker", "'<'", "triangle_left marker", "'>'", "triangle_right marker", "'1'", "tri_down marker", "'2'", "tri_up marker", "'3'", "tri_left marker", "'4'", "tri_right marker", "'8'", "octagon marker", "'s'", "square marker", "'p'", "pentagon marker", "'P'", "plus (filled) marker", "'*'", "star marker", "'h'", "hexagon1 marker", "'H'", "hexagon2 marker", "'+'", "plus marker", "'x'", "x marker", "'X'", "x (filled) marker", "'D'", "diamond marker", "'d'", "thin_diamond marker", "'|'", "vline marker", "'_'", "hline marker", "Line Styles", "character", "description", "'-'", "solid line style", "'--'", "dashed line style", "'-.'", "dash-dot line style", "':'", "dotted line style", "Example format strings:", "Colors", "The supported color abbreviations are the single letter codes", "character", "color", "'b'", "blue", "'g'", "green", "'r'", "red", "'c'", "cyan", "'m'", "magenta", "'y'", "yellow", "'k'", "black", "'w'", "white", "and the 'CN' colors that index into the default property cycle.", "If the color is the only part of the format string, you can additionally use any matplotlib.colors spec, e.g. full names ('green') or hex strings ('#008000').", "Plotting categorical variables", "CSD Demo", "Curve with error band", "EventCollection Demo", "Fill Between and Alpha", "Filling the area between lines", "Fill Betweenx Demo", "Customizing dashed line styles", "Lines with a ticked patheffect", "Marker reference", "Markevery Demo", "prop_cycle property markevery in rcParams", "Psd Demo", "Simple Plot", "Using span_where", "Creating a timeline with lines, dates, and text", "hlines and vlines", "Contour Corner Mask", "Contour plot of irregularly spaced data", "pcolormesh grids and shading", "Streamplot", "Spectrogram Demo", "Watermark image", "Aligning Labels", "Axes box aspect", "Axes Demo", "Controlling view limits using margins and sticky_edges", "Axes Props", "axhspan Demo", "Broken Axis", "Resizing axes with constrained layout", "Resizing axes with tight layout", "Figure labels: suptitle, supxlabel, supylabel", "Invert Axes", "Secondary Axis", "Sharing axis limits and views", "Figure subfigures", "Multiple subplots", "Creating multiple subplots using plt.subplots", "Plots with different scales", "Boxplots", "Using histograms to plot a cumulative distribution", "Some features of the histogram (hist) function", "Polar plot", "Polar Legend", "Using accented text in matplotlib", "Scale invariant angle label", "Annotating Plots", "Composing Custom Legends", "Date tick labels", "Custom tick formatter for time series", "AnnotationBbox demo", "Labeling ticks using engineering notation", "Annotation arrow style reference", "Legend using pre-defined labels", "Legend Demo", "Mathtext", "Math fontfamily", "Multiline", "Rendering math equations using TeX", "Text Rotation Relative To Line", "Title positioning", "Text watermark", "Annotate Transform", "Annotating a plot", "Annotation Polar", "Programmatically controlling subplot adjustment", "Dollar Ticks", "Simple axes labels", "Text Commands", "Color Demo", "Color by y-value", "PathPatch object", "Bezier Curve", "Dark background style sheet", "FiveThirtyEight style sheet", "ggplot style sheet", "Axes with a fixed physical size", "Parasite Simple", "Simple Axisline4", "Axis line styles", "Parasite Axes demo", "Parasite axis demo", "Custom spines with axisartist", "Simple Axisline", "Anatomy of a figure", "Bachelor's degrees by gender", "Integral as the area under a curve", "XKCD", "Decay", "The Bayes update", "The double pendulum problem", "Animated 3D random walk", "Animated line plot", "MATPLOTLIB UNCHAINED", "Mouse move and click events", "Data Browser", "Keypress event", "Legend Picking", "Looking Glass", "Path Editor", "Pick Event Demo2", "Resampling Data", "Timers", "Frontpage histogram example", "Frontpage plot example", "Changing colors of lines intersecting a box", "Cross hair cursor", "Custom projection", "Patheffect Demo", "Pythonic Matplotlib", "SVG Filter Line", "TickedStroke patheffect", "Zorder Demo", "Plot 2D data on 3D plot", "3D box surface plot", "Parametric Curve", "Lorenz Attractor", "2D and 3D Axes in same Figure", "Loglog Aspect", "Scales", "Symlog Demo", "Anscombe's quartet", "Radar chart (aka spider or star chart)", "Centered spines with arrows", "Multiple Yaxis With Spines", "Spine Placement", "Spines", "Custom spine bounds", "Centering labels between ticks", "Formatting date ticks using ConciseDateFormatter", "Date Demo Convert", "Date Index Formatter", "Date Precision and Epochs", "Major and minor ticks", "The default tick formatter", "Set default y-axis tick labels on the right", "Setting tick labels from a list of values", "Set default x-axis tick labels on the top", "Evans test", "CanvasAgg demo", "Annotate Explain", "Connect Simple01", "Connection styles for annotations", "Nested GridSpecs", "Pgf Fonts", "Pgf Texsystem", "Simple Annotate01", "Simple Legend01", "Simple Legend02", "Annotated Cursor", "Check Buttons", "Cursor", "Multicursor", "Radio Buttons", "Rectangle and ellipse selectors", "Span Selector", "Textbox", "Basic Usage", "Artist tutorial", "Legend guide", "Styling with cycler", "Constrained Layout Guide", "Tight Layout guide", "Arranging multiple Axes in a Figure", "Autoscaling", "Faster rendering by using blitting", "Path Tutorial", "Transformations Tutorial", "Specifying Colors", "Text in Matplotlib Plots", "plot(x, y)", "fill_between(x, y1, y2)", "tricontour(x, y, z)", "tricontourf(x, y, z)", "tripcolor(x, y, z)"]}, {"name": "axes.Axes.plot_date", "path": "_as_gen/matplotlib.axes.axes.plot_date", "type": "axes", "text": ["Plot coercing the axis to treat floats as dates.", "Discouraged", "This method exists for historic reasons and will be deprecated in the future.", "Similar to plot, this plots y vs. x as lines or markers. However, the axis labels are formatted as dates depending on xdate and ydate. Note that plot will work with datetime and numpy.datetime64 objects without resorting to this method.", "The coordinates of the data points. If xdate or ydate is True, the respective values x or y are interpreted as Matplotlib dates.", "The plot format string. For details, see the corresponding parameter in plot.", "The time zone to use in labeling dates.", "If True, the x-axis will be interpreted as Matplotlib dates.", "If True, the y-axis will be interpreted as Matplotlib dates.", "Objects representing the plotted data.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, y", "Keyword arguments control the Line2D properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "See also", "Helper functions on dates.", "Convert dates to num.", "Convert num to dates.", "Create an equally spaced sequence of dates.", "If you are using custom date tickers and formatters, it may be necessary to set the formatters/locators after the call to plot_date. plot_date will set the default tick locator to AutoDateLocator (if the tick locator is not already set to a DateLocator instance) and the default tick formatter to AutoDateFormatter (if the tick formatter is not already set to a DateFormatter instance)."]}, {"name": "axes.Axes.psd", "path": "_as_gen/matplotlib.axes.axes.psd", "type": "axes", "text": ["Plot the power spectral density.", "The power spectral density \\(P_{xx}\\) by Welch's average periodogram method. The vector x is divided into NFFT length segments. Each segment is detrended by function detrend and windowed by function window. noverlap gives the length of the overlap between segments. The \\(|\\mathrm{fft}(i)|^2\\) of each segment \\(i\\) are averaged to compute \\(P_{xx}\\), with a scaling to correct for power loss due to windowing.", "If len(x) < NFFT, it will be zero padded to NFFT.", "Array or sequence containing the data", "The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.", "A function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.", "Which sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.", "The number of points to which the data segment is padded when performing the FFT. This can be different from NFFT, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to NFFT", "The number of data points used in each block for the FFT. A power 2 is most efficient. This should NOT be used to get zero padding, or the scaling of the result will be incorrect; use pad_to for this instead.", "The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the detrend parameter is a vector, in Matplotlib it is a function. The mlab module defines detrend_none, detrend_mean, and detrend_linear, but you can use a custom function as well. You can also use a string to choose one of the functions: 'none' calls detrend_none. 'mean' calls detrend_mean. 'linear' calls detrend_linear.", "Whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.", "The number of points of overlap between segments.", "The center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.", "Whether to include the line object plotted in the returned values.", "The values for the power spectrum \\(P_{xx}\\) before scaling (real valued).", "The frequencies corresponding to the elements in Pxx.", "The line created by this function. Only returned if return_line is True.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x", "Keyword arguments control the Line2D properties:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "See also", "Differs in the default overlap; in not returning the mean of the segment periodograms; in returning the times of the segments; and in plotting a colormap instead of a line.", "Plots the magnitude spectrum.", "Plots the spectral density between two signals.", "For plotting, the power is plotted as \\(10\\log_{10}(P_{xx})\\) for decibels, though Pxx itself is returned.", "Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John Wiley & Sons (1986)", "Psd Demo"]}, {"name": "axes.Axes.quiver", "path": "_as_gen/matplotlib.axes.axes.quiver", "type": "axes", "text": ["Plot a 2D field of arrows.", "Call signature:", "X, Y define the arrow locations, U, V define the arrow directions, and C optionally sets the color.", "Each arrow is internally represented by a filled polygon with a default edge linewidth of 0. As a result, an arrow is rather a filled area, not a line with a head, and PolyCollection properties like linewidth, linestyle, facecolor, etc. act accordingly.", "Arrow size", "The default settings auto-scales the length of the arrows to a reasonable size. To change this behavior see the scale and scale_units parameters.", "Arrow shape", "The defaults give a slightly swept-back arrow; to make the head a triangle, make headaxislength the same as headlength. To make the arrow more pointed, reduce headwidth or increase headlength and headaxislength. To make the head smaller relative to the shaft, scale down all the head parameters. You will probably do best to leave minshaft alone.", "Arrow outline", "linewidths and edgecolors can be used to customize the arrow outlines.", "The x and y coordinates of the arrow locations.", "If not given, they will be generated as a uniform integer meshgrid based on the dimensions of U and V.", "If X and Y are 1D but U, V are 2D, X, Y are expanded to 2D using X, Y = np.meshgrid(X, Y). In this case len(X) and len(Y) must match the column and row dimensions of U and V.", "The x and y direction components of the arrow vectors.", "They must have the same number of elements, matching the number of arrow locations. U and V may be masked. Only locations unmasked in U, V, and C will be drawn.", "Numeric data that defines the arrow colors by colormapping via norm and cmap.", "This does not support explicit colors. If you want to set colors directly, use color instead. The size of C must match the number of arrow locations.", "The arrow dimensions (except for length) are measured in multiples of this unit.", "The following values are supported:", "The arrows scale differently depending on the units. For 'x' or 'y', the arrows get larger as one zooms in; for other units, the arrow size is independent of the zoom state. For 'width or 'height', the arrow size increases with the width and height of the axes, respectively, when the window is resized; for 'dots' or 'inches', resizing does not change the arrows.", "Method for determining the angle of the arrows.", "'uv': The arrow axis aspect ratio is 1 so that if U == V the orientation of the arrow on the plot is 45 degrees counter-clockwise from the horizontal axis (positive to the right).", "Use this if the arrows symbolize a quantity that is not based on X, Y data coordinates.", "Alternatively, arbitrary angles may be specified explicitly as an array of values in degrees, counter-clockwise from the horizontal axis.", "In this case U, V is only used to determine the length of the arrows.", "Note: inverting a data axis will correspondingly invert the arrows only with angles='xy'.", "Number of data units per arrow length unit, e.g., m/s per plot width; a smaller scale parameter makes the arrow longer. Default is None.", "If None, a simple autoscaling algorithm is used, based on the average vector length and the number of vectors. The arrow length unit is given by the scale_units parameter.", "If the scale kwarg is None, the arrow length unit. Default is None.", "e.g. scale_units is 'inches', scale is 2.0, and (u, v) = (1, 0), then the vector will be 0.5 inches long.", "If scale_units is 'width' or 'height', then the vector will be half the width/height of the axes.", "If scale_units is 'x' then the vector will be 0.5 x-axis units. To plot vectors in the x-y plane, with u and v having the same units as x and y, use angles='xy', scale_units='xy', scale=1.", "Shaft width in arrow units; default depends on choice of units, above, and number of vectors; a typical starting value is about 0.005 times the width of the plot.", "Head width as multiple of shaft width.", "Head length as multiple of shaft width.", "Head length at shaft intersection.", "Length below which arrow scales, in units of head length. Do not set this to less than 1, or small arrows will look terrible!", "Minimum length as a multiple of shaft width; if an arrow length is less than this, plot a dot (hexagon) of this diameter instead.", "The part of the arrow that is anchored to the X, Y grid. The arrow rotates about this point.", "'mid' is a synonym for 'middle'.", "Explicit color(s) for the arrows. If C has been set, color has no effect.", "This is a synonym for the PolyCollection facecolor parameter.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "All other keyword arguments are passed on to PolyCollection:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "array-like or scalar or None", "animated", "bool", "antialiased or aa or antialiaseds", "bool or list of bools", "array", "array-like or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clim", "(vmin: float, vmax: float)", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "cmap", "Colormap or str or None", "color", "color or list of rgba tuples", "edgecolor or ec or edgecolors", "color or list of colors or 'face'", "facecolor or facecolors or fc", "color or list of colors", "figure", "Figure", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or dashes or linestyles or ls", "str or tuple or list thereof", "linewidth or linewidths or lw", "float or list of floats", "norm", "Normalize or None", "offset_transform", "Transform", "offsets", "(N, 2) or (2,) array-like", "path_effects", "AbstractPathEffect", "paths", "list of array-like", "picker", "None or bool or float or callable", "pickradius", "float", "rasterized", "bool", "sizes", "ndarray or None", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "urls", "list of str or None", "verts", "list of array-like", "verts_and_codes", "unknown", "visible", "bool", "zorder", "float", "See also", "Add a key to a quiver plot.", "Advanced quiver and quiverkey functions", "Quiver Simple Demo", "Trigradient Demo", "3D quiver plot", "quiver(X, Y, U, V)"]}, {"name": "axes.Axes.quiverkey", "path": "_as_gen/matplotlib.axes.axes.quiverkey", "type": "axes", "text": ["Add a key to a quiver plot.", "The positioning of the key depends on X, Y, coordinates, and labelpos. If labelpos is 'N' or 'S', X, Y give the position of the middle of the key arrow. If labelpos is 'E', X, Y positions the head, and if labelpos is 'W', X, Y positions the tail; in either of these two cases, X, Y is somewhere in the middle of the arrow+label key object.", "A Quiver object as returned by a call to quiver().", "The location of the key.", "The length of the key.", "The key label (e.g., length and units of the key).", "The angle of the key arrow, in degrees anti-clockwise from the x-axis.", "Coordinate system and units for X, Y: 'axes' and 'figure' are normalized coordinate systems with (0, 0) in the lower left and (1, 1) in the upper right; 'data' are the axes data coordinates (used for the locations of the vectors in the quiver plot itself); 'inches' is position in the figure in inches, with (0, 0) at the lower left corner.", "Overrides face and edge colors from Q.", "Position the label above, below, to the right, to the left of the arrow, respectively.", "Distance in inches between the arrow and the label.", "Label color.", "A dictionary with keyword arguments accepted by the FontProperties initializer: family, style, variant, size, weight.", "Any additional keyword arguments are used to override vector properties taken from Q.", "Advanced quiver and quiverkey functions", "Quiver Simple Demo"]}, {"name": "axes.Axes.redraw_in_frame", "path": "_as_gen/matplotlib.axes.axes.redraw_in_frame", "type": "axes", "text": ["Efficiently redraw Axes data, but not axis ticks, labels, etc.", "This method can only be used after an initial draw which caches the renderer."]}, {"name": "axes.Axes.relim", "path": "_as_gen/matplotlib.axes.axes.relim", "type": "axes", "text": ["Recompute the data limits based on current artists.", "At present, Collection instances are not supported.", "Whether to exclude invisible artists.", "Packed-bubble chart", "Textbox"]}, {"name": "axes.Axes.remove_callback", "path": "_as_gen/matplotlib.axes.axes.remove_callback", "type": "axes", "text": ["Remove a callback based on its observer id.", "See also"]}, {"name": "axes.Axes.reset_position", "path": "_as_gen/matplotlib.axes.axes.reset_position", "type": "axes", "text": ["Reset the active position to the original position.", "This resets the a possible position change due to aspect constraints. For an explanation of the positions see set_position."]}, {"name": "axes.Axes.scatter", "path": "_as_gen/matplotlib.axes.axes.scatter", "type": "axes", "text": ["A scatter plot of y vs. x with varying marker size and/or color.", "The data positions.", "The marker size in points**2. Default is rcParams['lines.markersize'] ** 2.", "The marker colors. Possible values:", "Note that c should not be a single numeric RGB or RGBA sequence because that is indistinguishable from an array of values to be colormapped. If you want to specify the same RGB or RGBA value for all points, use a 2D array with a single row. Otherwise, value- matching will have precedence in case of a size matching with x and y.", "If you wish to specify a single color for all points prefer the color keyword argument.", "Defaults to None. In that case the marker color is determined by the value of color, facecolor or facecolors. In case those are not specified or None, the marker color is determined by the next color of the Axes' current \"shape and fill\" color cycle. This cycle defaults to rcParams[\"axes.prop_cycle\"] (default: cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'])).", "The marker style. marker can be either an instance of the class or the text shorthand for a particular marker. See matplotlib.markers for more information about marker styles.", "A Colormap instance or registered colormap name. cmap is only used if c is an array of floats.", "If c is an array of floats, norm is used to scale the color data, c, in the range 0 to 1, in order to map into the colormap cmap. If None, use the default colors.Normalize.", "vmin and vmax are used in conjunction with the default norm to map the color array c to the colormap cmap. If None, the respective min and max of the color array is used. It is an error to use vmin/vmax when norm is given.", "The alpha blending value, between 0 (transparent) and 1 (opaque).", "The linewidth of the marker edges. Note: The default edgecolors is 'face'. You may want to change this as well.", "The edge color of the marker. Possible values:", "For non-filled markers, edgecolors is ignored. Instead, the color is determined like with 'face', i.e. from c, colors, or facecolors.", "Whether to plot points with nonfinite c (i.e. inf, -inf or nan). If True the points are drawn with the bad colormap color (see Colormap.set_bad).", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, y, s, linewidths, edgecolors, c, facecolor, facecolors, color", "See also", "To plot scatter plots when markers are identical in size and color.", "Scatter Custom Symbol", "Scatter Demo2", "Scatter plot with histograms", "Scatter plot with pie chart markers", "Scatter plots with a legend", "Advanced quiver and quiverkey functions", "Axes box aspect", "Axis Label Position", "Plot a confidence ellipse of a two-dimensional dataset", "Violin plot customization", "Scatter plot on polar axis", "Legend Demo", "Scatter Histogram (Locatable Axes)", "mpl_toolkits.axisartist.floating_axes features", "Rain simulation", "Zoom Window", "Plotting with keywords", "Zorder Demo", "Plot 2D data on 3D plot", "3D scatterplot", "Automatically setting tick positions", "Unit handling", "Annotate Text Arrow", "Polygon Selector", "Basic Usage", "Choosing Colormaps in Matplotlib", "scatter(x, y)"]}, {"name": "axes.Axes.secondary_xaxis", "path": "_as_gen/matplotlib.axes.axes.secondary_xaxis", "type": "axes", "text": ["Add a second x-axis to this Axes.", "For example if we want to have a second scale for the data plotted on the xaxis.", "The position to put the secondary axis. Strings can be 'top' or 'bottom' for orientation='x' and 'right' or 'left' for orientation='y'. A float indicates the relative position on the parent axes to put the new axes, 0.0 being the bottom (or left) and 1.0 being the top (or right).", "If a 2-tuple of functions, the user specifies the transform function and its inverse. i.e. functions=(lambda x: 2 / x, lambda x: 2 / x) would be an reciprocal transform with a factor of 2.", "The user can also directly supply a subclass of transforms.Transform so long as it has an inverse.", "See Secondary Axis for examples of making these conversions.", "Other miscellaneous axes parameters.", "Warning", "This method is experimental as of 3.1, and the API may change.", "The main axis shows frequency, and the secondary axis shows period.", "(Source code, png, pdf)", "Secondary Axis", "Basic Usage"]}, {"name": "axes.Axes.secondary_yaxis", "path": "_as_gen/matplotlib.axes.axes.secondary_yaxis", "type": "axes", "text": ["Add a second y-axis to this Axes.", "For example if we want to have a second scale for the data plotted on the yaxis.", "The position to put the secondary axis. Strings can be 'top' or 'bottom' for orientation='x' and 'right' or 'left' for orientation='y'. A float indicates the relative position on the parent axes to put the new axes, 0.0 being the bottom (or left) and 1.0 being the top (or right).", "If a 2-tuple of functions, the user specifies the transform function and its inverse. i.e. functions=(lambda x: 2 / x, lambda x: 2 / x) would be an reciprocal transform with a factor of 2.", "The user can also directly supply a subclass of transforms.Transform so long as it has an inverse.", "See Secondary Axis for examples of making these conversions.", "Other miscellaneous axes parameters.", "Warning", "This method is experimental as of 3.1, and the API may change.", "Add a secondary Axes that converts from radians to degrees", "(Source code, png, pdf)", "Secondary Axis"]}, {"name": "axes.Axes.semilogx", "path": "_as_gen/matplotlib.axes.axes.semilogx", "type": "axes", "text": ["Make a plot with log scaling on the x axis.", "Call signatures:", "This is just a thin wrapper around plot which additionally changes the x-axis to log scaling. All of the concepts and parameters of plot can be used here as well.", "The additional parameters base, subs, and nonpositive control the x-axis properties. They are just forwarded to Axes.set_xscale.", "Base of the x logarithm.", "The location of the minor xticks. If None, reasonable locations are automatically chosen depending on the number of decades in the plot. See Axes.set_xscale for details.", "Non-positive values in x can be masked as invalid, or clipped to a very small positive number.", "All parameters supported by plot.", "Objects representing the plotted data.", "Log Demo", "Log Axis", "Transformations Tutorial"]}, {"name": "axes.Axes.semilogy", "path": "_as_gen/matplotlib.axes.axes.semilogy", "type": "axes", "text": ["Make a plot with log scaling on the y axis.", "Call signatures:", "This is just a thin wrapper around plot which additionally changes the y-axis to log scaling. All of the concepts and parameters of plot can be used here as well.", "The additional parameters base, subs, and nonpositive control the y-axis properties. They are just forwarded to Axes.set_yscale.", "Base of the y logarithm.", "The location of the minor yticks. If None, reasonable locations are automatically chosen depending on the number of decades in the plot. See Axes.set_yscale for details.", "Non-positive values in y can be masked as invalid, or clipped to a very small positive number.", "All parameters supported by plot.", "Objects representing the plotted data.", "Log Demo", "SkewT-logP diagram: using transforms and custom projections"]}, {"name": "axes.Axes.set", "path": "_as_gen/matplotlib.axes.axes.set", "type": "axes", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "Curve with error band", "Bar chart with gradients", "Simple Plot", "Creating a timeline with lines, dates, and text", "Contour plot of irregularly spaced data", "Streamplot", "Axes Demo", "Creating multiple subplots using plt.subplots", "Boxplots", "Hexagonal binned plot", "Nested pie charts", "Annotating Plots", "Arrow Demo", "Usetex Baseline Test", "Text Commands", "Drawing fancy boxes", "Adding a colorbar to inset axes", "Inset Locator Demo", "Animated 3D random walk", "Zoom Window", "Manual Contour", "Plotting with keywords", "3D box surface plot", "Projecting contour profiles onto a graph", "Projecting filled contour onto a graph", "Generate polygons to fill under 3D line graph", "3D stem", "3D voxel / volumetric plot with rgb colors", "Log Demo", "Annotate Explain", "Connection styles for annotations", "Nested GridSpecs", "Simple Annotate01", "Mouse Cursor", "The Lifecycle of a Plot", "Arranging multiple Axes in a Figure", "plot(x, y)", "scatter(x, y)", "bar(x, height) / barh(y, width)", "stem(x, y)", "step(x, y)", "fill_between(x, y1, y2)", "barbs(X, Y, U, V)", "quiver(X, Y, U, V)", "hist(x)", "boxplot(X)", "errorbar(x, y, yerr, xerr)", "violinplot(D)", "eventplot(D)", "hist2d(x, y)", "hexbin(x, y, C)", "pie(x)", "tricontour(x, y, z)", "tricontourf(x, y, z)", "tripcolor(x, y, z)", "triplot(x, y)"]}, {"name": "axes.Axes.set_adjustable", "path": "_as_gen/matplotlib.axes.axes.set_adjustable", "type": "axes", "text": ["Set how the Axes adjusts to achieve the required aspect ratio.", "If 'box', change the physical dimensions of the Axes. If 'datalim', change the x or y data limits.", "If True, apply the settings to all shared Axes.", "See also", "For a description of aspect handling.", "Shared Axes (of which twinned Axes are a special case) impose restrictions on how aspect ratios can be imposed. For twinned Axes, use 'datalim'. For Axes that share both x and y, use 'box'. Otherwise, either 'datalim' or 'box' may be used. These limitations are partly a requirement to avoid over-specification, and partly a result of the particular implementation we are currently using, in which the adjustments for aspect ratios are done sequentially and independently on each Axes as it is drawn.", "Loglog Aspect"]}, {"name": "axes.Axes.set_anchor", "path": "_as_gen/matplotlib.axes.axes.set_anchor", "type": "axes", "text": ["Define the anchor location.", "The actual drawing area (active position) of the Axes may be smaller than the Bbox (original position) when a fixed aspect is required. The anchor defines where the drawing area will be located within the available space.", "Either an (x, y) pair of relative coordinates (0 is left or bottom, 1 is right or top), 'C' (center), or a cardinal direction ('SW', southwest, is bottom left, etc.). str inputs are shorthands for (x, y) coordinates, as shown in the following table:", "'NW' (0.0, 1.0)", "'N' (0.5, 1.0)", "'NE' (1.0, 1.0)", "'W' (0.0, 0.5)", "'C' (0.5, 0.5)", "'E' (1.0, 0.5)", "'SW' (0.0, 0.0)", "'S' (0.5, 0.0)", "'SE' (1.0, 0.0)", "If True, apply the settings to all shared Axes.", "See also", "for a description of aspect handling."]}, {"name": "axes.Axes.set_aspect", "path": "_as_gen/matplotlib.axes.axes.set_aspect", "type": "axes", "text": ["Set the aspect ratio of the axes scaling, i.e. y/x-scale.", "Possible values:", "If not None, this defines which parameter will be adjusted to meet the required aspect. See set_adjustable for further details.", "If not None, this defines where the Axes will be drawn if there is extra space due to aspect constraints. The most common way to to specify the anchor are abbreviations of cardinal directions:", "value", "description", "'C'", "centered", "'SW'", "lower left corner", "'S'", "middle of bottom edge", "'SE'", "lower right corner", "etc.", "See set_anchor for further details.", "If True, apply the settings to all shared Axes.", "See also", "Set how the Axes adjusts to achieve the required aspect ratio.", "Set the position in case of extra space.", "Bar chart with gradients", "Streamplot", "Tricontour Demo", "Tricontour Smooth Delaunay", "Tricontour Smooth User", "Trigradient Demo", "Tripcolor Demo", "Triplot Demo", "Axes box aspect", "Controlling view limits using margins and sticky_edges", "Placing Colorbars", "Multiline", "Mmh Donuts!!!", "Inset Locator Demo2", "Scatter Histogram (Locatable Axes)", "Simple Anchored Artists", "axis_direction demo", "Simple Axis Pad", "The double pendulum problem", "Anchored Artists", "Rasterization for vector graphics", "Loglog Aspect", "Annotate Text Arrow", "Transformations Tutorial", "Colormap Normalization"]}, {"name": "axes.Axes.set_autoscale_on", "path": "_as_gen/matplotlib.axes.axes.set_autoscale_on", "type": "axes", "text": ["Set whether autoscaling is applied to each axis on the next draw or call to Axes.autoscale_view.", "Resampling Data"]}, {"name": "axes.Axes.set_autoscalex_on", "path": "_as_gen/matplotlib.axes.axes.set_autoscalex_on", "type": "axes", "text": ["Set whether the x-axis is autoscaled on the next draw or call to Axes.autoscale_view."]}, {"name": "axes.Axes.set_autoscaley_on", "path": "_as_gen/matplotlib.axes.axes.set_autoscaley_on", "type": "axes", "text": ["Set whether the y-axis is autoscaled on the next draw or call to Axes.autoscale_view."]}, {"name": "axes.Axes.set_axes_locator", "path": "_as_gen/matplotlib.axes.axes.set_axes_locator", "type": "axes", "text": ["Set the Axes locator.", "HBoxDivider demo"]}, {"name": "axes.Axes.set_axis_off", "path": "_as_gen/matplotlib.axes.axes.set_axis_off", "type": "axes", "text": ["Turn the x- and y-axis off.", "This affects the axis lines, ticks, ticklabels, grid and axis labels.", "Marker reference", "Barcode", "Blend transparency with color in 2D images", "Nested pie charts", "Annotation arrow style reference", "Precise text layout", "Drawing fancy boxes", "Choosing Colormaps in Matplotlib", "Text properties and layout"]}, {"name": "axes.Axes.set_axis_on", "path": "_as_gen/matplotlib.axes.axes.set_axis_on", "type": "axes", "text": ["Turn the x- and y-axis on.", "This affects the axis lines, ticks, ticklabels, grid and axis labels."]}, {"name": "axes.Axes.set_axisbelow", "path": "_as_gen/matplotlib.axes.axes.set_axisbelow", "type": "axes", "text": ["Set whether axis ticks and gridlines are above or below most artists.", "This controls the zorder of the ticks and gridlines. For more information on the zorder see Zorder Demo.", "Possible values:", "See also"]}, {"name": "axes.Axes.set_box_aspect", "path": "_as_gen/matplotlib.axes.axes.set_box_aspect", "type": "axes", "text": ["Set the Axes box aspect, i.e. the ratio of height to width.", "This defines the aspect of the Axes in figure space and is not to be confused with the data aspect (see set_aspect).", "Changes the physical dimensions of the Axes, such that the ratio of the Axes height to the Axes width in physical units is equal to aspect. Defining a box aspect will change the adjustable property to 'datalim' (see set_adjustable).", "None will disable a fixed box aspect so that height and width of the Axes are chosen independently.", "See also", "for a description of aspect handling.", "Axes box aspect"]}, {"name": "axes.Axes.set_facecolor", "path": "_as_gen/matplotlib.axes.axes.set_facecolor", "type": "axes", "text": ["Set the facecolor of the Axes.", "Color Demo"]}, {"name": "axes.Axes.set_frame_on", "path": "_as_gen/matplotlib.axes.axes.set_frame_on", "type": "axes", "text": ["Set whether the Axes rectangle patch is drawn."]}, {"name": "axes.Axes.set_navigate", "path": "_as_gen/matplotlib.axes.axes.set_navigate", "type": "axes", "text": ["Set whether the Axes responds to navigation toolbar commands."]}, {"name": "axes.Axes.set_navigate_mode", "path": "_as_gen/matplotlib.axes.axes.set_navigate_mode", "type": "axes", "text": ["Set the navigation toolbar button status.", "Warning", "this is not a user-API function."]}, {"name": "axes.Axes.set_position", "path": "_as_gen/matplotlib.axes.axes.set_position", "type": "axes", "text": ["Set the Axes position.", "Axes have two position attributes. The 'original' position is the position allocated for the Axes. The 'active' position is the position the Axes is actually drawn at. These positions are usually the same unless a fixed aspect is set to the Axes. See Axes.set_aspect for details.", "The new position of the in Figure coordinates.", "Determines which position variables to change.", "See also", "Contour Demo"]}, {"name": "axes.Axes.set_prop_cycle", "path": "_as_gen/matplotlib.axes.axes.set_prop_cycle", "type": "axes", "text": ["Set the property cycle of the Axes.", "The property cycle controls the style properties such as color, marker and linestyle of future plot commands. The style properties of data already added to the Axes are not modified.", "Call signatures:", "Form 1 sets given Cycler object.", "Form 2 creates a Cycler which cycles over one or more properties simultaneously and set it as the property cycle of the Axes. If multiple properties are given, their value lists must have the same length. This is just a shortcut for explicitly creating a cycler and passing it to the function, i.e. it's short for set_prop_cycle(cycler(label=values label2=values2, ...)).", "Form 3 creates a Cycler for a single property and set it as the property cycle of the Axes. This form exists for compatibility with the original cycler.cycler interface. Its use is discouraged in favor of the kwarg form, i.e. set_prop_cycle(label=values).", "Set the given Cycler. None resets to the cycle defined by the current style.", "The property key. Must be a valid Artist property. For example, 'color' or 'linestyle'. Aliases are allowed, such as 'c' for 'color' and 'lw' for 'linewidth'.", "Finite-length iterable of the property values. These values are validated and will raise a ValueError if invalid.", "See also", "Convenience function for creating validated cyclers for properties.", "The original function for creating unvalidated cyclers.", "Setting the property cycle for a single property:", "Setting the property cycle for simultaneously cycling over multiple properties (e.g. red circle, green plus, blue cross):", "Bachelor's degrees by gender", "Styling with cycler"]}, {"name": "axes.Axes.set_rasterization_zorder", "path": "_as_gen/matplotlib.axes.axes.set_rasterization_zorder", "type": "axes", "text": ["Set the zorder threshold for rasterization for vector graphics output.", "All artists with a zorder below the given value will be rasterized if they support rasterization.", "This setting is ignored for pixel-based output.", "See also Rasterization for vector graphics.", "The zorder below which artists are rasterized. If None rasterization based on zorder is deactivated.", "Rasterization for vector graphics"]}, {"name": "axes.Axes.set_title", "path": "_as_gen/matplotlib.axes.axes.set_title", "type": "axes", "text": ["Set a title for the Axes.", "Set one of the three available Axes titles. The available titles are positioned above the Axes in the center, flush with the left edge, and flush with the right edge.", "Text to use for the title", "A dictionary controlling the appearance of the title text, the default fontdict is:", "Which title to set.", "Vertical Axes loation for the title (1.0 is the top). If None (the default), y is determined automatically to avoid decorators on the Axes.", "The offset of the title from the top of the Axes, in points.", "The matplotlib text instance representing the title", "Other keyword arguments are text properties, see Text for a list of valid text properties.", "Bar Label Demo", "Stacked bar chart", "Grouped bar chart with labels", "Horizontal bar chart", "Errorbar subsampling", "EventCollection Demo", "Fill Between and Alpha", "Filling the area between lines", "Fill Betweenx Demo", "Hat graph", "Markevery Demo", "Psd Demo", "Scatter Demo2", "Using span_where", "Stackplots and streamgraphs", "hlines and vlines", "Contour Corner Mask", "Contour Demo", "Contour Label Demo", "Contourf Demo", "Creating annotated heatmaps", "Image antialiasing", "Image Demo", "Image Masked", "Image Nonuniform", "Interpolations for imshow", "Contour plot of irregularly spaced data", "Pcolor Demo", "pcolormesh grids and shading", "pcolormesh", "Streamplot", "Advanced quiver and quiverkey functions", "Tricontour Demo", "Tricontour Smooth Delaunay", "Tricontour Smooth User", "Trigradient Demo", "Tripcolor Demo", "Triplot Demo", "Axes Demo", "Controlling view limits using margins and sticky_edges", "Resizing axes with constrained layout", "Resizing axes with tight layout", "Figure labels: suptitle, supxlabel, supylabel", "Invert Axes", "Secondary Axis", "Figure subfigures", "Creating multiple subplots using plt.subplots", "Box plots with custom fill colors", "Plot a confidence ellipse of a two-dimensional dataset", "Violin plot customization", "Different ways of specifying error bars", "Including upper and lower limits in error bars", "Hexagonal binned plot", "Using histograms to plot a cumulative distribution", "Some features of the histogram (hist) function", "The histogram (hist) function with multiple data sets", "Bar of pie", "Labeling a pie and a donut", "Polar plot", "Using accented text in matplotlib", "Scale invariant angle label", "Date tick labels", "Custom tick formatter for time series", "Labeling ticks using engineering notation", "Using a ttf font file in Matplotlib", "Labelling subplots", "Legend Demo", "Mathtext", "Math fontfamily", "Multiline", "Rendering math equations using TeX", "Title positioning", "Boxplot Demo", "Simple axes labels", "Text Commands", "Color Demo", "Creating a colormap from a list of colors", "Line, Poly and RegularPoly Collection with autoscaling", "Compound path", "Mmh Donuts!!!", "Line Collection", "Bezier Curve", "Bayesian Methods for Hackers style sheet", "Dark background style sheet", "FiveThirtyEight style sheet", "Make Room For Ylabel Using Axesgrid", "Axis Direction", "Anatomy of a figure", "XKCD", "pyplot animation", "Data Browser", "Image Slices Viewer", "Keypress event", "Lasso Demo", "Legend Picking", "Looking Glass", "Path Editor", "Pick Event Demo2", "Poly Editor", "Trifinder Event Demo", "Viewlims", "Cross hair cursor", "Packed-bubble chart", "Pythonic Matplotlib", "Rasterization for vector graphics", "Zorder Demo", "Demo of 3D bar charts", "Lorenz Attractor", "3D wireframe plots in one direction", "Loglog Aspect", "Exploring normalizations", "Scales", "Radar chart (aka spider or star chart)", "Topographic hillshading", "Spine Placement", "Spines", "Dropped spines", "Colorbar Tick Labelling", "Date Precision and Epochs", "Set default x-axis tick labels on the top", "Artist tests", "Group barchart with units", "Evans test", "Interactive Adjustment of Colormap Range", "Annotated Cursor", "Rectangle and ellipse selectors", "Span Selector", "Basic Usage", "Image tutorial", "Artist tutorial", "Styling with cycler", "Constrained Layout Guide", "Tight Layout guide", "Transformations Tutorial", "Specifying Colors", "Colormap Normalization", "Text in Matplotlib Plots"]}, {"name": "axes.Axes.set_xbound", "path": "_as_gen/matplotlib.axes.axes.set_xbound", "type": "axes", "text": ["Set the lower and upper numerical bounds of the x-axis.", "This method will honor axis inversion regardless of parameter order. It will not change the autoscaling setting (get_autoscalex_on()).", "The lower and upper bounds. If None, the respective axis bound is not modified.", "See also"]}, {"name": "axes.Axes.set_xlabel", "path": "_as_gen/matplotlib.axes.axes.set_xlabel", "type": "axes", "text": ["Set the label for the x-axis.", "The label text.", "Spacing in points from the Axes bounding box including ticks and tick labels. If None, the previous value is left as is.", "The label position. This is a high-level alternative for passing parameters x and horizontalalignment.", "Text properties control the appearance of the label.", "See also", "Documents the properties supported by Text.", "Bar Label Demo", "Horizontal bar chart", "Broken Barh", "CSD Demo", "Fill Between and Alpha", "Filling the area between lines", "Fill Betweenx Demo", "Hatch-filled histograms", "Hat graph", "Psd Demo", "Scatter Demo2", "Stackplots and streamgraphs", "hlines and vlines", "Contourf Demo", "Tricontour Demo", "Tripcolor Demo", "Triplot Demo", "Aligning Labels", "Axes Demo", "Axis Label Position", "Resizing axes with constrained layout", "Resizing axes with tight layout", "Figure labels: suptitle, supxlabel, supylabel", "Invert Axes", "Secondary Axis", "Figure subfigures", "Multiple subplots", "Plots with different scales", "Box plots with custom fill colors", "Boxplots", "Box plot vs. violin plot comparison", "Violin plot customization", "Using histograms to plot a cumulative distribution", "Some features of the histogram (hist) function", "Producing multiple histograms side by side", "Using accented text in matplotlib", "Labeling ticks using engineering notation", "Using a ttf font file in Matplotlib", "Legend Demo", "Mathtext", "Multiline", "Rendering math equations using TeX", "Title positioning", "Simple axes labels", "Text Commands", "Color Demo", "Line, Poly and RegularPoly Collection with autoscaling", "Ellipse Collection", "Dark background style sheet", "Make Room For Ylabel Using Axesgrid", "Parasite Simple", "Parasite Axes demo", "Parasite axis demo", "Ticklabel alignment", "Simple Axis Direction03", "Simple Axisline", "Anatomy of a figure", "XKCD", "Keypress event", "Pythonic Matplotlib", "Plot 2D data on 3D plot", "Create 2D bar graphs in different planes", "3D errorbars", "Lorenz Attractor", "Automatic Text Offsetting", "3D scatterplot", "3D surface with polar coordinates", "Text annotations in 3D", "Log Bar", "MRI With EEG", "Multiple Yaxis With Spines", "Centering labels between ticks", "Pgf Fonts", "Pgf Texsystem", "Slider", "Basic Usage", "Artist tutorial", "Constrained Layout Guide", "Tight Layout guide", "Arranging multiple Axes in a Figure", "Choosing Colormaps in Matplotlib", "Text in Matplotlib Plots"]}, {"name": "axes.Axes.set_xlim", "path": "_as_gen/matplotlib.axes.axes.set_xlim", "type": "axes", "text": ["Set the x-axis view limits.", "The left xlim in data coordinates. Passing None leaves the limit unchanged.", "The left and right xlims may also be passed as the tuple (left, right) as the first positional argument (or as the left keyword argument).", "The right xlim in data coordinates. Passing None leaves the limit unchanged.", "Whether to notify observers of limit change.", "Whether to turn on autoscaling of the x-axis. True turns on, False turns off, None leaves unchanged.", "They are equivalent to left and right respectively, and it is an error to pass both xmin and left or xmax and right.", "The new x-axis limits in data coordinates.", "See also", "The left value may be greater than the right value, in which case the x-axis values will decrease from left to right.", "One limit may be left unchanged.", "Limits may be passed in reverse order to flip the direction of the x-axis. For example, suppose x represents the number of years before present. The x-axis limits might be set like the following so 5000 years ago is on the left of the plot and the present is on the right.", "Bar Label Demo", "Broken Barh", "CSD Demo", "EventCollection Demo", "Markevery Demo", "Contouring the solution space of optimizations", "Image Nonuniform", "pcolormesh grids and shading", "Axes box aspect", "Axes Demo", "Figure labels: suptitle, supxlabel, supylabel", "Invert Axes", "Zoom region inset axes", "Boxplots", "Violin plot customization", "Including upper and lower limits in error bars", "Bar of pie", "AnnotationBbox demo", "Using a text as a Path", "Text Rotation Relative To Line", "Annotate Transform", "Mmh Donuts!!!", "Ellipse Demo", "Line Collection", "Inset Locator Demo2", "Parasite Simple2", "axis_direction demo", "Parasite Axes demo", "Parasite axis demo", "Simple Axis Pad", "Anatomy of a figure", "Bachelor's degrees by gender", "XKCD", "Decay", "Rain simulation", "Path Editor", "Poly Editor", "Resampling Data", "Zoom Window", "Frontpage contour example", "Frontpage plot example", "Custom projection", "Building histograms using Rectangles and PolyCollections", "SVG Filter Line", "TickedStroke patheffect", "Plot 2D data on 3D plot", "Draw flat objects in 3D plot", "Text annotations in 3D", "Loglog Aspect", "Scales", "MRI With EEG", "SkewT-logP diagram: using transforms and custom projections", "Multiple Yaxis With Spines", "Custom spine bounds", "Formatting date ticks using ConciseDateFormatter", "Date Demo Convert", "Annotation with units", "Artist tests", "Annotate Text Arrow", "Connect Simple01", "Annotated Cursor", "Cursor", "Span Selector", "Path Tutorial", "Transformations Tutorial", "Specifying Colors", "Choosing Colormaps in Matplotlib"]}, {"name": "axes.Axes.set_xmargin", "path": "_as_gen/matplotlib.axes.axes.set_xmargin", "type": "axes", "text": ["Set padding of X data limits prior to autoscaling.", "m times the data interval will be added to each end of that interval before it is used in autoscaling. For example, if your data is in the range [0, 2], a factor of m = 0.1 will result in a range [-0.2, 2.2].", "Negative values -0.5 < m < 0 will result in clipping of the data range. I.e. for a data range [0, 2], a factor of m = -0.1 will result in a range [0.2, 1.8].", "Automatically setting tick positions"]}, {"name": "axes.Axes.set_xscale", "path": "_as_gen/matplotlib.axes.axes.set_xscale", "type": "axes", "text": ["Set the x-axis scale.", "The axis scale type to apply.", "Different keyword arguments are accepted, depending on the scale. See the respective class keyword arguments:", "By default, Matplotlib supports the above mentioned scales. Additionally, custom scales may be registered using matplotlib.scale.register_scale. These scales can then also be used here.", "Markevery Demo", "Labeling ticks using engineering notation", "Inset Locator Demo", "Loglog Aspect", "Log Demo", "Symlog Demo", "Transformations Tutorial"]}, {"name": "axes.Axes.set_xticklabels", "path": "_as_gen/matplotlib.axes.axes.set_xticklabels", "type": "axes", "text": ["Set the xaxis' labels with list of string labels.", "Warning", "This method should only be used after fixing the tick positions using Axes.set_xticks. Otherwise, the labels may end up in unexpected positions.", "The label texts.", "A dictionary controlling the appearance of the ticklabels. The default fontdict is:", "Whether to set the minor ticklabels rather than the major ones.", "The labels.", "Managing multiple figures in pyplot", "Zoom region inset axes", "Boxplots", "Rendering math equations using TeX", "XKCD", "Colorbar Tick Labelling", "Constrained Layout Guide"]}, {"name": "axes.Axes.set_xticks", "path": "_as_gen/matplotlib.axes.axes.set_xticks", "type": "axes", "text": ["Set the xaxis' tick locations and optionally labels.", "If necessary, the view limits of the Axis are expanded so that all given ticks are visible.", "List of tick locations.", "List of tick labels. If not set, the labels show the data value.", "If False, set the major ticks; if True, the minor ticks.", "Text properties for the labels. These take effect only if you pass labels. In other cases, please use tick_params.", "The mandatory expansion of the view limits is an intentional design choice to prevent the surprise of a non-visible tick. If you need other limits, you should set the limits explicitly after setting the ticks.", "Bar Label Demo", "Grouped bar chart with labels", "Hat graph", "Psd Demo", "Creating annotated heatmaps", "Box plot vs. violin plot comparison", "Violin plot customization", "Producing multiple histograms side by side", "Multiline", "Rendering math equations using TeX", "ggplot style sheet", "Scatter Histogram (Locatable Axes)", "Simple Axisline4", "Ticklabel alignment", "Ticklabel direction", "Bachelor's degrees by gender", "Integral as the area under a curve", "Shaded & power normalized rendering", "XKCD", "Rain simulation", "MATPLOTLIB UNCHAINED", "Frontpage 3D example", "Frontpage contour example", "Frontpage histogram example", "Frontpage plot example", "Log Bar", "MRI With EEG", "Custom spine bounds", "Group barchart with units", "The Lifecycle of a Plot"]}, {"name": "axes.Axes.set_ybound", "path": "_as_gen/matplotlib.axes.axes.set_ybound", "type": "axes", "text": ["Set the lower and upper numerical bounds of the y-axis.", "This method will honor axis inversion regardless of parameter order. It will not change the autoscaling setting (get_autoscaley_on()).", "The lower and upper bounds. If None, the respective axis bound is not modified.", "See also"]}, {"name": "axes.Axes.set_ylabel", "path": "_as_gen/matplotlib.axes.axes.set_ylabel", "type": "axes", "text": ["Set the label for the y-axis.", "The label text.", "Spacing in points from the Axes bounding box including ticks and tick labels. If None, the previous value is left as is.", "The label position. This is a high-level alternative for passing parameters y and horizontalalignment.", "Text properties control the appearance of the label.", "See also", "Documents the properties supported by Text.", "Bar Label Demo", "Stacked bar chart", "Grouped bar chart with labels", "CSD Demo", "Fill Between and Alpha", "Hatch-filled histograms", "Hat graph", "Psd Demo", "Scatter Demo2", "Stackplots and streamgraphs", "Contourf Demo", "Creating annotated heatmaps", "Tricontour Demo", "Tripcolor Demo", "Triplot Demo", "Aligning Labels", "Axes Demo", "Axis Label Position", "Resizing axes with constrained layout", "Resizing axes with tight layout", "Figure labels: suptitle, supxlabel, supylabel", "Invert Axes", "Secondary Axis", "Figure subfigures", "Multiple subplots", "Plots with different scales", "Box plots with custom fill colors", "Boxplots", "Box plot vs. violin plot comparison", "Violin plot customization", "Using histograms to plot a cumulative distribution", "Some features of the histogram (hist) function", "Producing multiple histograms side by side", "Using accented text in matplotlib", "Date tick labels", "Legend Demo", "Mathtext", "Multiline", "Rendering math equations using TeX", "Simple axes labels", "Text Commands", "Color Demo", "Line, Poly and RegularPoly Collection with autoscaling", "Ellipse Collection", "Dark background style sheet", "Make Room For Ylabel Using Axesgrid", "Parasite Simple", "Parasite Axes demo", "Parasite axis demo", "Ticklabel alignment", "Simple Axis Direction03", "Simple Axisline", "Anatomy of a figure", "XKCD", "Pythonic Matplotlib", "Plot 2D data on 3D plot", "Create 2D bar graphs in different planes", "3D errorbars", "Lorenz Attractor", "2D and 3D Axes in same Figure", "Automatic Text Offsetting", "3D scatterplot", "3D surface with polar coordinates", "Text annotations in 3D", "Log Bar", "Symlog Demo", "MRI With EEG", "Topographic hillshading", "Multiple Yaxis With Spines", "Basic Usage", "Artist tutorial", "Constrained Layout Guide", "Tight Layout guide", "Arranging multiple Axes in a Figure", "Choosing Colormaps in Matplotlib", "Text in Matplotlib Plots"]}, {"name": "axes.Axes.set_ylim", "path": "_as_gen/matplotlib.axes.axes.set_ylim", "type": "axes", "text": ["Set the y-axis view limits.", "The bottom ylim in data coordinates. Passing None leaves the limit unchanged.", "The bottom and top ylims may also be passed as the tuple (bottom, top) as the first positional argument (or as the bottom keyword argument).", "The top ylim in data coordinates. Passing None leaves the limit unchanged.", "Whether to notify observers of limit change.", "Whether to turn on autoscaling of the y-axis. True turns on, False turns off, None leaves unchanged.", "They are equivalent to bottom and top respectively, and it is an error to pass both ymin and bottom or ymax and top.", "The new y-axis limits in data coordinates.", "See also", "The bottom value may be greater than the top value, in which case the y-axis values will decrease from bottom to top.", "One limit may be left unchanged.", "Limits may be passed in reverse order to flip the direction of the y-axis. For example, suppose y represents depth of the ocean in m. The y-axis limits might be set like the following so 5000 m depth is at the bottom of the plot and the surface, 0 m, is at the top.", "Broken Barh", "EventCollection Demo", "Hat graph", "Markevery Demo", "Psd Demo", "Contouring the solution space of optimizations", "Image Nonuniform", "pcolormesh grids and shading", "Axes Demo", "Broken Axis", "Figure labels: suptitle, supxlabel, supylabel", "Zoom region inset axes", "Boxplots", "AnnotationBbox demo", "Using a text as a Path", "Annotate Transform", "Annotating a plot", "Line, Poly and RegularPoly Collection with autoscaling", "Mmh Donuts!!!", "Ellipse Demo", "Line Collection", "Inset Locator Demo2", "Parasite Simple2", "axis_direction demo", "Parasite Axes demo", "Parasite axis demo", "Simple Axis Pad", "Simple Axisline", "Anatomy of a figure", "Bachelor's degrees by gender", "Integral as the area under a curve", "XKCD", "Decay", "Animated histogram", "Rain simulation", "MATPLOTLIB UNCHAINED", "Data Browser", "Path Editor", "Pick Event Demo2", "Poly Editor", "Zoom Window", "Frontpage contour example", "Frontpage plot example", "Custom projection", "Building histograms using Rectangles and PolyCollections", "Pythonic Matplotlib", "SVG Filter Line", "TickedStroke patheffect", "Plot 2D data on 3D plot", "Draw flat objects in 3D plot", "Text annotations in 3D", "Loglog Aspect", "Log Demo", "MRI With EEG", "SkewT-logP diagram: using transforms and custom projections", "Multiple Yaxis With Spines", "Custom spine bounds", "Annotation with units", "Artist tests", "Annotate Text Arrow", "Connect Simple01", "Annotated Cursor", "Cursor", "Span Selector", "Basic Usage", "Path Tutorial", "Transformations Tutorial", "Specifying Colors", "Choosing Colormaps in Matplotlib"]}, {"name": "axes.Axes.set_ymargin", "path": "_as_gen/matplotlib.axes.axes.set_ymargin", "type": "axes", "text": ["Set padding of Y data limits prior to autoscaling.", "m times the data interval will be added to each end of that interval before it is used in autoscaling. For example, if your data is in the range [0, 2], a factor of m = 0.1 will result in a range [-0.2, 2.2].", "Negative values -0.5 < m < 0 will result in clipping of the data range. I.e. for a data range [0, 2], a factor of m = -0.1 will result in a range [0.2, 1.8]."]}, {"name": "axes.Axes.set_yscale", "path": "_as_gen/matplotlib.axes.axes.set_yscale", "type": "axes", "text": ["Set the y-axis scale.", "The axis scale type to apply.", "Different keyword arguments are accepted, depending on the scale. See the respective class keyword arguments:", "By default, Matplotlib supports the above mentioned scales. Additionally, custom scales may be registered using matplotlib.scale.register_scale. These scales can then also be used here.", "Markevery Demo", "Artist customization in box plots", "Boxplot drawer function", "Different ways of specifying error bars", "Loglog Aspect", "Log Bar", "Log Demo", "Scales", "Symlog Demo"]}, {"name": "axes.Axes.set_yticklabels", "path": "_as_gen/matplotlib.axes.axes.set_yticklabels", "type": "axes", "text": ["Set the yaxis' labels with list of string labels.", "Warning", "This method should only be used after fixing the tick positions using Axes.set_yticks. Otherwise, the labels may end up in unexpected positions.", "The label texts.", "A dictionary controlling the appearance of the ticklabels. The default fontdict is:", "Whether to set the minor ticklabels rather than the major ones.", "The labels.", "Zoom region inset axes", "Artist customization in box plots", "Boxplot drawer function", "Violin plot basics", "Rendering math equations using TeX", "Colorbar Tick Labelling", "Constrained Layout Guide"]}, {"name": "axes.Axes.set_yticks", "path": "_as_gen/matplotlib.axes.axes.set_yticks", "type": "axes", "text": ["Set the yaxis' tick locations and optionally labels.", "If necessary, the view limits of the Axis are expanded so that all given ticks are visible.", "List of tick locations.", "List of tick labels. If not set, the labels show the data value.", "If False, set the major ticks; if True, the minor ticks.", "Text properties for the labels. These take effect only if you pass labels. In other cases, please use tick_params.", "The mandatory expansion of the view limits is an intentional design choice to prevent the surprise of a non-visible tick. If you need other limits, you should set the limits explicitly after setting the ticks.", "Bar Label Demo", "Horizontal bar chart", "Broken Barh", "Psd Demo", "Creating annotated heatmaps", "Rendering math equations using TeX", "Programmatically controlling subplot adjustment", "Make Room For Ylabel Using Axesgrid", "Scatter Histogram (Locatable Axes)", "Ticklabel alignment", "Ticklabel direction", "Bachelor's degrees by gender", "Integral as the area under a curve", "Shaded & power normalized rendering", "XKCD", "Rain simulation", "MATPLOTLIB UNCHAINED", "Frontpage 3D example", "Frontpage contour example", "Frontpage histogram example", "Frontpage plot example", "Create 2D bar graphs in different planes", "MRI With EEG", "SkewT-logP diagram: using transforms and custom projections", "Custom spine bounds"]}, {"name": "axes.Axes.sharex", "path": "_as_gen/matplotlib.axes.axes.sharex", "type": "axes", "text": ["Share the x-axis with other.", "This is equivalent to passing sharex=other when constructing the axes, and cannot be used if the x-axis is already being shared with another Axes."]}, {"name": "axes.Axes.sharey", "path": "_as_gen/matplotlib.axes.axes.sharey", "type": "axes", "text": ["Share the y-axis with other.", "This is equivalent to passing sharey=other when constructing the axes, and cannot be used if the y-axis is already being shared with another Axes."]}, {"name": "axes.Axes.specgram", "path": "_as_gen/matplotlib.axes.axes.specgram", "type": "axes", "text": ["Plot a spectrogram.", "Compute and plot a spectrogram of data in x. Data are split into NFFT length segments and the spectrum of each section is computed. The windowing function window is applied to each segment, and the amount of overlap of each segment is specified with noverlap. The spectrogram is plotted as a colormap (using imshow).", "Array or sequence containing the data.", "The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.", "A function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.", "Which sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.", "The number of points to which the data segment is padded when performing the FFT. This can be different from NFFT, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to NFFT", "The number of data points used in each block for the FFT. A power 2 is most efficient. This should NOT be used to get zero padding, or the scaling of the result will be incorrect; use pad_to for this instead.", "The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the detrend parameter is a vector, in Matplotlib it is a function. The mlab module defines detrend_none, detrend_mean, and detrend_linear, but you can use a custom function as well. You can also use a string to choose one of the functions: 'none' calls detrend_none. 'mean' calls detrend_mean. 'linear' calls detrend_linear.", "Whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.", "What sort of spectrum to use. Default is 'psd', which takes the power spectral density. 'magnitude' returns the magnitude spectrum. 'angle' returns the phase spectrum without unwrapping. 'phase' returns the phase spectrum with unwrapping.", "The number of points of overlap between blocks.", "The scaling of the values in the spec. 'linear' is no scaling. 'dB' returns the values in dB scale. When mode is 'psd', this is dB power (10 * log10). Otherwise this is dB amplitude (20 * log10). 'default' is 'dB' if mode is 'psd' or 'magnitude' and 'linear' otherwise. This must be 'linear' if mode is 'angle' or 'phase'.", "The center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.", "The image extent along the x-axis. The default sets xmin to the left border of the first bin (spectrum column) and xmax to the right border of the last bin. Note that for noverlap>0 the width of the bins is smaller than those of the segments.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x", "Additional keyword arguments are passed on to imshow which makes the specgram image. The origin keyword argument is not supported.", "Columns are the periodograms of successive segments.", "The frequencies corresponding to the rows in spectrum.", "The times corresponding to midpoints of segments (i.e., the columns in spectrum).", "The image created by imshow containing the spectrogram.", "See also", "Differs in the default overlap; in returning the mean of the segment periodograms; in not returning times; and in generating a line plot instead of colormap.", "A single spectrum, similar to having a single segment when mode is 'magnitude'. Plots a line instead of a colormap.", "A single spectrum, similar to having a single segment when mode is 'angle'. Plots a line instead of a colormap.", "A single spectrum, similar to having a single segment when mode is 'phase'. Plots a line instead of a colormap.", "The parameters detrend and scale_by_freq do only apply when mode is set to 'psd'.", "Spectrogram Demo"]}, {"name": "axes.Axes.spy", "path": "_as_gen/matplotlib.axes.axes.spy", "type": "axes", "text": ["Plot the sparsity pattern of a 2D array.", "This visualizes the non-zero values of the array.", "Two plotting styles are available: image and marker. Both are available for full arrays, but only the marker style works for scipy.sparse.spmatrix instances.", "Image style", "If marker and markersize are None, imshow is used. Any extra remaining keyword arguments are passed to this method.", "Marker style", "If Z is a scipy.sparse.spmatrix or marker or markersize are None, a Line2D object will be returned with the value of marker determining the marker type, and any remaining keyword arguments passed to plot.", "The array to be plotted.", "If precision is 0, any non-zero value will be plotted. Otherwise, values of \\(|Z| > precision\\) will be plotted.", "For scipy.sparse.spmatrix instances, you can also pass 'present'. In this case any value present in the array will be plotted, even if it is identically zero.", "The aspect ratio of the Axes. This parameter is particularly relevant for images since it determines whether data pixels are square.", "This parameter is a shortcut for explicitly calling Axes.set_aspect. See there for further details.", "Place the [0, 0] index of the array in the upper left or lower left corner of the Axes. The convention 'upper' is typically used for matrices and images.", "The return type depends on the plotting style (see above).", "The supported additional parameters depend on the plotting style.", "For the image style, you can pass the following additional parameters of imshow:", "For the marker style, you can pass any Line2D property except for linestyle:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "transform", "unknown", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "Spy Demos"]}, {"name": "axes.Axes.stackplot", "path": "_as_gen/matplotlib.axes.axes.stackplot", "type": "axes", "text": ["Draw a stacked area plot.", "The data is assumed to be unstacked. Each of the following calls is legal:", "Method used to calculate the baseline:", "A sequence of labels to assign to each data series. If unspecified, then no labels will be applied to artists.", "A sequence of colors to be cycled through and used to color the stacked areas. The sequence need not be exactly the same length as the number of provided y, in which case the colors will repeat from the beginning.", "If not specified, the colors from the Axes property cycle will be used.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "All other keyword arguments are passed to Axes.fill_between.", "A list of PolyCollection instances, one for each element in the stacked area plot.", "Stackplots and streamgraphs"]}, {"name": "axes.Axes.stairs", "path": "_as_gen/matplotlib.axes.axes.stairs", "type": "axes", "text": ["A stepwise constant function as a line with bounding edges or a filled plot.", "The step heights.", "The edge positions, with len(edges) == len(vals) + 1, between which the curve takes on vals values.", "The direction of the steps. Vertical means that values are along the y-axis, and edges are along the x-axis.", "The bottom value of the bounding edges or when fill=True, position of lower edge. If fill is True or an array is passed to baseline, a closed path is drawn.", "Whether the area under the step curve should be filled.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "StepPatch properties"]}, {"name": "axes.Axes.stale", "path": "_as_gen/matplotlib.axes.axes.stale", "type": "axes", "text": ["Whether the artist is 'stale' and needs to be re-drawn for the output to match the internal state of the artist."]}, {"name": "axes.Axes.start_pan", "path": "_as_gen/matplotlib.axes.axes.start_pan", "type": "axes", "text": ["Called when a pan operation has started.", "The mouse coordinates in display coords.", "The pressed mouse button.", "This is intended to be overridden by new projection types."]}, {"name": "axes.Axes.stem", "path": "_as_gen/matplotlib.axes.axes.stem", "type": "axes", "text": ["Create a stem plot.", "A stem plot draws lines perpendicular to a baseline at each location locs from the baseline to heads, and places a marker there. For vertical stem plots (the default), the locs are x positions, and the heads are y values. For horizontal stem plots, the locs are y positions, and the heads are x values.", "Call signature:", "The locs-positions are optional. The formats may be provided either as positional or as keyword-arguments.", "For vertical stem plots, the x-positions of the stems. For horizontal stem plots, the y-positions of the stems.", "For vertical stem plots, the y-values of the stem heads. For horizontal stem plots, the x-values of the stem heads.", "A string defining the color and/or linestyle of the vertical lines:", "Character", "Line Style", "'-'", "solid line", "'--'", "dashed line", "'-.'", "dash-dot line", "':'", "dotted line", "Default: 'C0-', i.e. solid line with the first color of the color cycle.", "Note: Markers specified through this parameter (e.g. 'x') will be silently ignored (unless using use_line_collection=False). Instead, markers should be specified using markerfmt.", "A string defining the color and/or shape of the markers at the stem heads. Default: 'C0o', i.e. filled circles with the first color of the color cycle.", "A format string defining the properties of the baseline.", "If 'vertical', will produce a plot with stems oriented vertically, otherwise the stems will be oriented horizontally.", "The y/x-position of the baseline (depending on orientation).", "The label to use for the stems in legends.", "If True, store and plot the stem lines as a LineCollection instead of individual lines, which significantly increases performance. If False, defaults to the old behavior of using a list of Line2D objects. This parameter may be deprecated in the future.", "If given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).", "The container may be treated like a tuple (markerline, stemlines, baseline)", "See also", "The MATLAB function stem which inspired this method.", "Legend Demo", "3D stem", "stem(x, y)"]}, {"name": "axes.Axes.step", "path": "_as_gen/matplotlib.axes.axes.step", "type": "axes", "text": ["Make a step plot.", "Call signatures:", "This is just a thin wrapper around plot which changes some formatting options. Most of the concepts and parameters of plot can be used here as well.", "Note", "This method uses a standard plot with a step drawstyle: The x values are the reference positions and steps extend left/right/both directions depending on where.", "For the common case where you know the values and edges of the steps, use stairs instead.", "1D sequence of x positions. It is assumed, but not checked, that it is uniformly increasing.", "1D sequence of y levels.", "A format string, e.g. 'g' for a green line. See plot for a more detailed description.", "Note: While full format strings are accepted, it is recommended to only specify the color. Line styles are currently ignored (use the keyword argument linestyle instead). Markers are accepted and plotted on the given positions, however, this is a rarely needed feature for step plots.", "Define where the steps should be placed:", "An object with labelled data. If given, provide the label names to plot in x and y.", "Additional parameters are the same as those for plot.", "Objects representing the plotted data.", "step(x, y)"]}, {"name": "axes.Axes.streamplot", "path": "_as_gen/matplotlib.axes.axes.streamplot", "type": "axes", "text": ["Draw streamlines of a vector flow.", "Evenly spaced strictly increasing arrays to make a grid. If 2D, all rows of x must be equal and all columns of y must be equal; i.e., they must be as if generated by np.meshgrid(x_1d, y_1d).", "x and y-velocities. The number of rows and columns must match the length of y and x, respectively.", "Controls the closeness of streamlines. When density = 1, the domain is divided into a 30x30 grid. density linearly scales this grid. Each cell in the grid can have, at most, one traversing streamline. For different densities in each direction, use a tuple (density_x, density_y).", "The width of the stream lines. With a 2D array the line width can be varied across the grid. The array must have the same shape as u and v.", "The streamline color. If given an array, its values are converted to colors using cmap and norm. The array must have the same shape as u and v.", "Colormap used to plot streamlines and arrows. This is only used if color is an array.", "Normalize object used to scale luminance data to 0, 1. If None, stretch (min, max) to (0, 1). This is only used if color is an array.", "Scaling factor for the arrow size.", "Arrow style specification. See FancyArrowPatch.", "Minimum length of streamline in axes coordinates.", "Coordinates of starting points for the streamlines in data coordinates (the same coordinates as the x and y arrays).", "The zorder of the stream lines and arrows. Artists with lower zorder values are drawn first.", "Maximum length of streamline in axes coordinates.", "Integrate the streamline in forward, backward or both directions.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, y, u, v, start_points", "Container object with attributes", "This container will probably change in the future to allow changes to the colormap, alpha, etc. for both lines and arrows, but these changes should be backward compatible.", "Streamplot", "streamplot(X, Y, U, V)"]}, {"name": "axes.Axes.table", "path": "_as_gen/matplotlib.axes.axes.table", "type": "axes", "text": ["Add a table to an Axes.", "At least one of cellText or cellColours must be specified. These parameters must be 2D lists, in which the outer lists define the rows and the inner list define the column values per row. Each row must have the same number of elements.", "The table can optionally have row and column headers, which are configured using rowLabels, rowColours, rowLoc and colLabels, colColours, colLoc respectively.", "For finer grained control over tables, use the Table class and add it to the axes with Axes.add_table.", "The texts to place into the table cells.", "Note: Line breaks in the strings are currently not accounted for and will result in the text exceeding the cell boundaries.", "The background colors of the cells.", "The alignment of the text within the cells.", "The column widths in units of the axes. If not given, all columns will have a width of 1 / ncols.", "The text of the row header cells.", "The colors of the row header cells.", "The text alignment of the row header cells.", "The text of the column header cells.", "The colors of the column header cells.", "The text alignment of the column header cells.", "The position of the cell with respect to ax. This must be one of the codes.", "A bounding box to draw the table into. If this is not None, this overrides loc.", "The cell edges to be drawn with a line. See also visible_edges.", "The created table.", "Table properties.", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "fontsize", "float", "gid", "str", "in_layout", "bool", "label", "object", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float"]}, {"name": "axes.Axes.text", "path": "_as_gen/matplotlib.axes.axes.text", "type": "axes", "text": ["Add text to the Axes.", "Add the text s to the Axes at location x, y in data coordinates.", "The position to place the text. By default, this is in data coordinates. The coordinate system can be changed using the transform parameter.", "The text.", "A dictionary to override the default text properties. If fontdict is None, the defaults are determined by rcParams.", "The created Text instance.", "Other miscellaneous text parameters.", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "backgroundcolor", "color", "bbox", "dict with properties for patches.FancyBboxPatch", "clip_box", "unknown", "clip_on", "unknown", "clip_path", "unknown", "color or c", "color", "figure", "Figure", "fontfamily or family", "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}", "fontproperties or font or font_properties", "font_manager.FontProperties or str or pathlib.Path", "fontsize or size", "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}", "fontstretch or stretch", "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}", "fontstyle or style", "{'normal', 'italic', 'oblique'}", "fontvariant or variant", "{'normal', 'small-caps'}", "fontweight or weight", "{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}", "gid", "str", "horizontalalignment or ha", "{'center', 'right', 'left'}", "in_layout", "bool", "label", "object", "linespacing", "float (multiple of font size)", "math_fontfamily", "str", "multialignment or ma", "{'left', 'right', 'center'}", "parse_math", "bool", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "(float, float)", "rasterized", "bool", "rotation", "float or {'vertical', 'horizontal'}", "rotation_mode", "{None, 'default', 'anchor'}", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "text", "object", "transform", "Transform", "transform_rotates_text", "bool", "url", "str", "usetex", "bool or None", "verticalalignment or va", "{'center', 'top', 'bottom', 'baseline', 'center_baseline'}", "visible", "bool", "wrap", "bool", "x", "float", "y", "float", "zorder", "float", "Individual keyword arguments can be used to override any given parameter:", "The default transform specifies that text is in data coords, alternatively, you can specify text in axis coords ((0, 0) is lower-left and (1, 1) is upper-right). The example below places text in the center of the Axes:", "You can put a rectangular box around the text instance (e.g., to set a background color) by using the keyword bbox. bbox is a dictionary of Rectangle properties. For example:", "Marker reference", "BboxImage Demo", "Creating annotated heatmaps", "Boxplots", "Bar of pie", "Using accented text in matplotlib", "Arrow Demo", "Annotation arrow style reference", "Labelling subplots", "Mathtext", "Math fontfamily", "Multiline", "Placing text boxes", "Rendering math equations using TeX", "Precise text layout", "Text Rotation Relative To Line", "Usetex Baseline Test", "Text watermark", "Text Commands", "Drawing fancy boxes", "Hatch style reference", "Anatomy of a figure", "Bachelor's degrees by gender", "Integral as the area under a curve", "Shaded & power normalized rendering", "The double pendulum problem", "MATPLOTLIB UNCHAINED", "Data Browser", "Pick Event Demo2", "Cross hair cursor", "Packed-bubble chart", "Rasterization for vector graphics", "Text annotations in 3D", "Anscombe's quartet", "Annotate Explain", "Annotate Text Arrow", "Connection styles for annotations", "Custom box styles", "Pgf Fonts", "Pgf Texsystem", "Simple Annotate01", "Mouse Cursor", "Basic Usage", "The Lifecycle of a Plot", "Artist tutorial", "Arranging multiple Axes in a Figure", "Path Tutorial", "Transformations Tutorial", "Specifying Colors", "Choosing Colormaps in Matplotlib", "Text in Matplotlib Plots", "Text properties and layout"]}, {"name": "axes.Axes.tick_params", "path": "_as_gen/matplotlib.axes.axes.tick_params", "type": "axes", "text": ["Change the appearance of ticks, tick labels, and gridlines.", "Tick properties that are not explicitly set using the keyword arguments remain unchanged unless reset is True.", "The axis to which the parameters are applied.", "The group of ticks to which the parameters are applied.", "Whether to reset the ticks to defaults before updating them.", "Puts ticks inside the axes, outside the axes, or both.", "Tick length in points.", "Tick width in points.", "Tick color.", "Distance in points between tick and label.", "Tick label font size in points or as a string (e.g., 'large').", "Tick label color.", "Tick color and label color.", "Tick and label zorder.", "Whether to draw the respective ticks.", "Whether to draw the respective tick labels.", "Tick label rotation", "Gridline color.", "Transparency of gridlines: 0 (transparent) to 1 (opaque).", "Width of gridlines in points.", "Any valid Line2D line style spec.", "This will make all major ticks be red, pointing out of the box, and with dimensions 6 points by 2 points. Tick labels will also be red. Gridlines will be red and translucent.", "Scatter plot with histograms", "Creating annotated heatmaps", "Axes Props", "Broken Axis", "Plots with different scales", "Polar Legend", "Color Demo", "Inset Locator Demo", "Inset Locator Demo2", "Make Room For Ylabel Using Axesgrid", "Simple Axes Divider 3", "Anatomy of a figure", "Bachelor's degrees by gender", "Anscombe's quartet", "Multiple Yaxis With Spines", "Major and minor ticks", "Text in Matplotlib Plots"]}, {"name": "axes.Axes.ticklabel_format", "path": "_as_gen/matplotlib.axes.axes.ticklabel_format", "type": "axes", "text": ["Configure the ScalarFormatter used by default for linear axes.", "If a parameter is not set, the corresponding property of the formatter is left unchanged.", "The axis to configure. Only major ticks are affected.", "Whether to use scientific notation. The formatter default is to use scientific notation.", "Scientific notation is used only for numbers outside the range 10m to 10n (and only if the formatter is configured to use scientific notation at all). Use (0, 0) to include all numbers. Use (m, m) where m != 0 to fix the order of magnitude to 10m. The formatter default is rcParams[\"axes.formatter.limits\"] (default: [-5, 6]).", "If True, the offset is calculated as needed. If False, no offset is used. If a numeric value, it sets the offset. The formatter default is rcParams[\"axes.formatter.useoffset\"] (default: True).", "Whether to format the number using the current locale or using the C (English) locale. This affects e.g. the decimal separator. The formatter default is rcParams[\"axes.formatter.use_locale\"] (default: False).", "Render the offset and scientific notation in mathtext. The formatter default is rcParams[\"axes.formatter.use_mathtext\"] (default: False).", "If the current formatter is not a ScalarFormatter.", "The default tick formatter"]}, {"name": "axes.Axes.tricontour", "path": "_as_gen/matplotlib.axes.axes.tricontour", "type": "axes", "text": ["Draw contour lines on an unstructured triangular grid.", "The triangulation can be specified in one of two ways; either", "where triangulation is a Triangulation object, or", "in which case a Triangulation object will be created. See that class' docstring for an explanation of these cases.", "The remaining arguments may be:", "where Z is the array of values to contour, one per point in the triangulation. The level values are chosen automatically.", "contour up to levels+1 automatically chosen contour levels (levels intervals).", "draw contour lines at the values specified in sequence levels, which must be in increasing order.", "Use keyword arguments to control colors, linewidth, origin, cmap ... see below for more details.", "The unstructured triangular grid.", "If specified, then x, y, triangles, and mask are not accepted.", "The coordinates of the values in Z.", "For each triangle, the indices of the three points that make up the triangle, ordered in an anticlockwise manner. If not specified, the Delaunay triangulation is calculated.", "Which triangles are masked out.", "The height values over which the contour is drawn.", "Determines the number and positions of the contour lines / regions.", "If an int n, use MaxNLocator, which tries to automatically choose no more than n+1 \"nice\" contour levels between vmin and vmax.", "If array-like, draw contour lines at the specified levels. The values must be in increasing order.", "The colors of the levels, i.e., the contour lines.", "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated.", "As a shortcut, single color strings may be used in place of one-element lists, i.e. 'red' instead of ['red'] to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors.", "By default (value None), the colormap specified by cmap will be used.", "The alpha blending value, between 0 (transparent) and 1 (opaque).", "A Colormap instance or registered colormap name. The colormap maps the level values to colors.", "If both colors and cmap are given, an error is raised.", "If a colormap is used, the Normalize instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used.", "If not None, either or both of these values will be supplied to the Normalize instance, overriding the default color scaling based on levels.", "Determines the orientation and exact position of Z by specifying the position of Z[0, 0]. This is only relevant, if X, Y are not given.", "If origin is not None, then extent is interpreted as in imshow: it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If origin is None, then (x0, y0) is the position of Z[0, 0], and (x1, y1) is the position of Z[-1, -1].", "This argument is ignored if X and Y are specified in the call to contour.", "The locator is used to determine the contour levels if they are not given explicitly via levels. Defaults to MaxNLocator.", "Determines the tricontour-coloring of values that are outside the levels range.", "If 'neither', values outside the levels range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the levels range.", "Values below min(levels) and above max(levels) are mapped to the under/over values of the Colormap. Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using Colormap.set_under and Colormap.set_over.", "Note", "An existing TriContourSet does not get notified if properties of its colormap are changed. Therefore, an explicit call to ContourSet.changed() is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the TriContourSet because it internally calls ContourSet.changed().", "Override axis units by specifying an instance of a matplotlib.units.ConversionInterface.", "Enable antialiasing, overriding the defaults. For filled contours, the default is True. For line contours, it is taken from rcParams[\"lines.antialiased\"] (default: True).", "The line width of the contour lines.", "If a number, all levels will be plotted with this linewidth.", "If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified.", "If None, this falls back to rcParams[\"lines.linewidth\"] (default: 1.5).", "If linestyles is None, the default is 'solid' unless the lines are monochrome. In that case, negative contours will take their linestyle from rcParams[\"contour.negative_linestyle\"] (default: 'dashed') setting.", "linestyles can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.", "Contour plot of irregularly spaced data", "Tricontour Demo", "Tricontour Smooth Delaunay", "Tricontour Smooth User", "Trigradient Demo", "Triangular 3D contour plot", "tricontour(x, y, z)"]}, {"name": "axes.Axes.tricontourf", "path": "_as_gen/matplotlib.axes.axes.tricontourf", "type": "axes", "text": ["Draw contour regions on an unstructured triangular grid.", "The triangulation can be specified in one of two ways; either", "where triangulation is a Triangulation object, or", "in which case a Triangulation object will be created. See that class' docstring for an explanation of these cases.", "The remaining arguments may be:", "where Z is the array of values to contour, one per point in the triangulation. The level values are chosen automatically.", "contour up to levels+1 automatically chosen contour levels (levels intervals).", "draw contour regions at the values specified in sequence levels, which must be in increasing order.", "Use keyword arguments to control colors, linewidth, origin, cmap ... see below for more details.", "The unstructured triangular grid.", "If specified, then x, y, triangles, and mask are not accepted.", "The coordinates of the values in Z.", "For each triangle, the indices of the three points that make up the triangle, ordered in an anticlockwise manner. If not specified, the Delaunay triangulation is calculated.", "Which triangles are masked out.", "The height values over which the contour is drawn.", "Determines the number and positions of the contour lines / regions.", "If an int n, use MaxNLocator, which tries to automatically choose no more than n+1 \"nice\" contour levels between vmin and vmax.", "If array-like, draw contour lines at the specified levels. The values must be in increasing order.", "The colors of the levels, i.e., the contour regions.", "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated.", "As a shortcut, single color strings may be used in place of one-element lists, i.e. 'red' instead of ['red'] to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors.", "By default (value None), the colormap specified by cmap will be used.", "The alpha blending value, between 0 (transparent) and 1 (opaque).", "A Colormap instance or registered colormap name. The colormap maps the level values to colors.", "If both colors and cmap are given, an error is raised.", "If a colormap is used, the Normalize instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used.", "If not None, either or both of these values will be supplied to the Normalize instance, overriding the default color scaling based on levels.", "Determines the orientation and exact position of Z by specifying the position of Z[0, 0]. This is only relevant, if X, Y are not given.", "If origin is not None, then extent is interpreted as in imshow: it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If origin is None, then (x0, y0) is the position of Z[0, 0], and (x1, y1) is the position of Z[-1, -1].", "This argument is ignored if X and Y are specified in the call to contour.", "The locator is used to determine the contour levels if they are not given explicitly via levels. Defaults to MaxNLocator.", "Determines the tricontourf-coloring of values that are outside the levels range.", "If 'neither', values outside the levels range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the levels range.", "Values below min(levels) and above max(levels) are mapped to the under/over values of the Colormap. Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using Colormap.set_under and Colormap.set_over.", "Note", "An existing TriContourSet does not get notified if properties of its colormap are changed. Therefore, an explicit call to ContourSet.changed() is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the TriContourSet because it internally calls ContourSet.changed().", "Override axis units by specifying an instance of a matplotlib.units.ConversionInterface.", "Enable antialiasing, overriding the defaults. For filled contours, the default is True. For line contours, it is taken from rcParams[\"lines.antialiased\"] (default: True).", "A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only.", "tricontourf fills intervals that are closed at the top; that is, for boundaries z1 and z2, the filled region is:", "except for the lowest interval, which is closed on both sides (i.e. it includes the lowest value).", "Contour plot of irregularly spaced data", "Tricontour Demo", "Tricontour Smooth User", "Triangular 3D filled contour plot", "tricontourf(x, y, z)"]}, {"name": "axes.Axes.tripcolor", "path": "_as_gen/matplotlib.axes.axes.tripcolor", "type": "axes", "text": ["Create a pseudocolor plot of an unstructured triangular grid.", "The triangulation can be specified in one of two ways; either:", "where triangulation is a Triangulation object, or", "in which case a Triangulation object will be created. See Triangulation for a explanation of these possibilities.", "The next argument must be C, the array of color values, either one per point in the triangulation if color values are defined at points, or one per triangle in the triangulation if color values are defined at triangles. If there are the same number of points and triangles in the triangulation it is assumed that color values are defined at points; to force the use of color values at triangles use the kwarg facecolors=C instead of just C.", "shading may be 'flat' (the default) or 'gouraud'. If shading is 'flat' and C values are defined at points, the color values used for each triangle are from the mean C of the triangle's three points. If shading is 'gouraud' then color values must be defined at points.", "The remaining kwargs are the same as for pcolor.", "Tripcolor Demo", "tripcolor(x, y, z)"]}, {"name": "axes.Axes.triplot", "path": "_as_gen/matplotlib.axes.axes.triplot", "type": "axes", "text": ["Draw a unstructured triangular grid as lines and/or markers.", "The triangulation to plot can be specified in one of two ways; either:", "where triangulation is a Triangulation object, or", "in which case a Triangulation object will be created. See Triangulation for a explanation of these possibilities.", "The remaining args and kwargs are the same as for plot.", "The drawn triangles edges.", "The drawn marker nodes.", "Tricontour Smooth Delaunay", "Tricontour Smooth User", "Trigradient Demo", "Triplot Demo", "Trifinder Event Demo", "triplot(x, y)"]}, {"name": "axes.Axes.twinx", "path": "_as_gen/matplotlib.axes.axes.twinx", "type": "axes", "text": ["Create a twin Axes sharing the xaxis.", "Create a new Axes with an invisible x-axis and an independent y-axis positioned opposite to the original one (i.e. at right). The x-axis autoscale setting will be inherited from the original Axes. To ensure that the tick marks of both y-axes align, see LinearLocator.", "The newly created Axes instance", "For those who are 'picking' artists while using twinx, pick events are only called for the artists in the top-most Axes.", "Axes box aspect", "Plots with different scales", "Parasite Simple", "Parasite axis demo", "Multiple Yaxis With Spines", "Basic Usage"]}, {"name": "axes.Axes.twiny", "path": "_as_gen/matplotlib.axes.axes.twiny", "type": "axes", "text": ["Create a twin Axes sharing the yaxis.", "Create a new Axes with an invisible y-axis and an independent x-axis positioned opposite to the original one (i.e. at top). The y-axis autoscale setting will be inherited from the original Axes. To ensure that the tick marks of both x-axes align, see LinearLocator.", "The newly created Axes instance", "For those who are 'picking' artists while using twiny, pick events are only called for the artists in the top-most Axes."]}, {"name": "axes.Axes.update_datalim", "path": "_as_gen/matplotlib.axes.axes.update_datalim", "type": "axes", "text": ["Extend the dataLim Bbox to include the given points.", "If no data is set currently, the Bbox will ignore its limits and set the bound to be the bounds of the xydata (xys). Otherwise, it will compute the bounds of the union of its current data and the data in xys.", "The points to include in the data limits Bbox. This can be either a list of (x, y) tuples or a Nx2 array.", "Whether to update the x/y limits."]}, {"name": "axes.Axes.use_sticky_edges", "path": "_as_gen/matplotlib.axes.axes.use_sticky_edges", "type": "axes", "text": ["When autoscaling, whether to obey all Artist.sticky_edges.", "Default is True.", "Setting this to False ensures that the specified margins will be applied, even if the plot includes an image, for example, which would otherwise force a view limit to coincide with its data limit.", "The changing this property does not change the plot until autoscale or autoscale_view is called."]}, {"name": "axes.Axes.violin", "path": "_as_gen/matplotlib.axes.axes.violin", "type": "axes", "text": ["Drawing function for violin plots.", "Draw a violin plot for each column of vpstats. Each filled area extends to represent the entire data range, with optional lines at the mean, the median, the minimum, the maximum, and the quantiles values.", "A list of dictionaries containing stats for each violin plot. Required keys are:", "Optional keys are:", "The positions of the violins. The ticks and limits are automatically set to match the positions.", "If true, plots the violins vertically. Otherwise, plots the violins horizontally.", "Either a scalar or a vector that sets the maximal width of each violin. The default is 0.5, which uses about half of the available horizontal space.", "If true, will toggle rendering of the means.", "If true, will toggle rendering of the extrema.", "If true, will toggle rendering of the medians.", "A dictionary mapping each component of the violinplot to a list of the corresponding collection instances created. The dictionary has the following keys:"]}, {"name": "axes.Axes.violinplot", "path": "_as_gen/matplotlib.axes.axes.violinplot", "type": "axes", "text": ["Make a violin plot.", "Make a violin plot for each column of dataset or each vector in sequence dataset. Each filled area extends to represent the entire data range, with optional lines at the mean, the median, the minimum, the maximum, and user-specified quantiles.", "The input data.", "The positions of the violins. The ticks and limits are automatically set to match the positions.", "If true, creates a vertical violin plot. Otherwise, creates a horizontal violin plot.", "Either a scalar or a vector that sets the maximal width of each violin. The default is 0.5, which uses about half of the available horizontal space.", "If True, will toggle rendering of the means.", "If True, will toggle rendering of the extrema.", "If True, will toggle rendering of the medians.", "If not None, set a list of floats in interval [0, 1] for each violin, which stands for the quantiles that will be rendered for that violin.", "Defines the number of points to evaluate each of the gaussian kernel density estimations at.", "The method used to calculate the estimator bandwidth. This can be 'scott', 'silverman', a scalar constant or a callable. If a scalar, this will be used directly as kde.factor. If a callable, it should take a GaussianKDE instance as its only parameter and return a scalar. If None (default), 'scott' is used.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "dataset", "A dictionary mapping each component of the violinplot to a list of the corresponding collection instances created. The dictionary has the following keys:", "Violin plot customization", "violinplot(D)"]}, {"name": "axes.Axes.vlines", "path": "_as_gen/matplotlib.axes.axes.vlines", "type": "axes", "text": ["Plot vertical lines at each x from ymin to ymax.", "x-indexes where to plot the lines.", "Respective beginning and end of each line. If scalars are provided, all lines will have same length.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, ymin, ymax, colors", "See also", "horizontal lines", "vertical line across the Axes", "Creating a timeline with lines, dates, and text", "hlines and vlines", "Violin plot customization"]}, {"name": "axes.Axes.xaxis_date", "path": "_as_gen/matplotlib.axes.axes.xaxis_date", "type": "axes", "text": ["Set up axis ticks and labels to treat data along the xaxis as dates.", "The timezone used to create date labels."]}, {"name": "axes.Axes.xaxis_inverted", "path": "_as_gen/matplotlib.axes.axes.xaxis_inverted", "type": "axes", "text": ["Return whether the xaxis is oriented in the \"inverse\" direction.", "The \"normal\" direction is increasing to the right for the x-axis and to the top for the y-axis; the \"inverse\" direction is increasing to the left for the x-axis and to the bottom for the y-axis."]}, {"name": "axes.Axes.xcorr", "path": "_as_gen/matplotlib.axes.axes.xcorr", "type": "axes", "text": ["Plot the cross correlation between x and y.", "The correlation with lag k is defined as \\(\\sum_n x[n+k] \\cdot y^*[n]\\), where \\(y^*\\) is the complex conjugate of \\(y\\).", "A detrending function applied to x and y. It must have the signature", "If True, input vectors are normalised to unit length.", "Determines the plot style.", "If True, vertical lines are plotted from 0 to the xcorr value using Axes.vlines. Additionally, a horizontal line is plotted at y=0 using Axes.axhline.", "If False, markers are plotted at the xcorr values using Axes.plot.", "Number of lags to show. If None, will return all 2 * len(x) - 1 lags.", "The lag vector.", "The auto correlation vector.", "Artist added to the Axes of the correlation:", "Horizontal line at 0 if usevlines is True None usevlines is False.", "The linestyle for plotting the data points. Only used if usevlines is False.", "The marker for plotting the data points. Only used if usevlines is False.", "If given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception):", "x, y", "Additional parameters are passed to Axes.vlines and Axes.axhline if usevlines is True; otherwise they are passed to Axes.plot.", "The cross correlation is performed with numpy.correlate with mode = \"full\".", "Cross- and Auto-Correlation Demo"]}, {"name": "axes.Axes.yaxis_date", "path": "_as_gen/matplotlib.axes.axes.yaxis_date", "type": "axes", "text": ["Set up axis ticks and labels to treat data along the yaxis as dates.", "The timezone used to create date labels."]}, {"name": "axes.Axes.yaxis_inverted", "path": "_as_gen/matplotlib.axes.axes.yaxis_inverted", "type": "axes", "text": ["Return whether the yaxis is oriented in the \"inverse\" direction.", "The \"normal\" direction is increasing to the right for the x-axis and to the top for the y-axis; the \"inverse\" direction is increasing to the left for the x-axis and to the bottom for the y-axis."]}, {"name": "axes.Axes.zorder", "path": "_as_gen/matplotlib.axes.axes.zorder", "type": "axes", "text": []}, {"name": "axes.subplot_class_factory", "path": "_as_gen/matplotlib.axes.subplot_class_factory", "type": "axes", "text": []}, {"name": "axes.SubplotBase", "path": "_as_gen/matplotlib.axes.subplotbase", "type": "axes", "text": ["Bases: object", "Base class for subplots, which are Axes instances with additional methods to facilitate generating and manipulating a set of Axes within a figure.", "The array of subplots in the figure has dimensions (nrows,\nncols), and index is the index of the subplot being created. index starts at 1 in the upper left corner and increases to the right.", "If nrows, ncols, and index are all single digit numbers, then args can be passed as a single 3-digit number (e.g. 234 for (2, 3, 4)).", "Keyword arguments are passed to the Axes (sub)class constructor.", "[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3).", "Deprecated since version 3.4.", "[Deprecated] Get the subplot geometry, e.g., (2, 2, 3).", "Deprecated since version 3.4.", "Return the GridSpec instance associated with the subplot.", "Return the SubplotSpec instance associated with the subplot.", "[Deprecated]", "Deprecated since version 3.4: ", "[Deprecated]", "Deprecated since version 3.4: ", "[Deprecated]", "Deprecated since version 3.4: ", "[Deprecated]", "Deprecated since version 3.4: ", "Only show \"outer\" labels and tick labels.", "x-labels are only kept for subplots on the last row (or first row, if labels are on the top side); y-labels only for subplots on the first column (or last column, if labels are on the right side).", "Set the SubplotSpec. instance associated with the subplot.", "[Deprecated] Update the subplot position from self.figure.subplotpars.", "Deprecated since version 3.4."]}, {"name": "axes.SubplotBase.change_geometry()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.change_geometry", "type": "axes", "text": ["[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3).", "Deprecated since version 3.4."]}, {"name": "axes.SubplotBase.get_geometry()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.get_geometry", "type": "axes", "text": ["[Deprecated] Get the subplot geometry, e.g., (2, 2, 3).", "Deprecated since version 3.4."]}, {"name": "axes.SubplotBase.get_gridspec()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.get_gridspec", "type": "axes", "text": ["Return the GridSpec instance associated with the subplot."]}, {"name": "axes.SubplotBase.get_subplotspec()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.get_subplotspec", "type": "axes", "text": ["Return the SubplotSpec instance associated with the subplot."]}, {"name": "axes.SubplotBase.is_first_col()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_first_col", "type": "axes", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axes.SubplotBase.is_first_row()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_first_row", "type": "axes", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axes.SubplotBase.is_last_col()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_last_col", "type": "axes", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axes.SubplotBase.is_last_row()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_last_row", "type": "axes", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axes.SubplotBase.label_outer()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.label_outer", "type": "axes", "text": ["Only show \"outer\" labels and tick labels.", "x-labels are only kept for subplots on the last row (or first row, if labels are on the top side); y-labels only for subplots on the first column (or last column, if labels are on the right side)."]}, {"name": "axes.SubplotBase.set_subplotspec()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.set_subplotspec", "type": "axes", "text": ["Set the SubplotSpec. instance associated with the subplot."]}, {"name": "axes.SubplotBase.update_params()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.update_params", "type": "axes", "text": ["[Deprecated] Update the subplot position from self.figure.subplotpars.", "Deprecated since version 3.4."]}, {"name": "axes_grid", "path": "toolkits/axes_grid", "type": "axes_grid", "text": ["Note", "AxesGrid has been a part of matplotlib since v 0.99. Originally, the toolkit used the axes_grid namespace. In more recent versions, the toolkit has been split into axes_grid1 and axisartist. While axes_grid is maintained for the backward compatibility, use of axes_grid1 and axisartist is recommended. For the documentation on axes_grid, see the previous version of the docs."]}, {"name": "axes_grid1", "path": "toolkits/axes_grid1", "type": "axes_grid1", "text": ["mpl_toolkits.axes_grid1 provides a framework of helper classes to adjust the positioning of multiple fixed-aspect Axes (e.g., displaying images). It can be contrasted with the aspect property of Matplotlib Axes, which adjusts the position of a single Axes.", "See Overview of mpl_toolkits.axes_grid1 for a guide on the usage of axes_grid1.", "The submodules of the axes_grid1 API are:", "axes_grid1.anchored_artists", "axes_grid1.axes_divider", "Helper classes to adjust the positions of multiple axes at drawing time.", "axes_grid1.axes_grid", "axes_grid1.axes_rgb", "axes_grid1.axes_size", "Provides classes of simple units that will be used with AxesDivider class (or others) to determine the size of each axes.", "axes_grid1.inset_locator", "A collection of functions and objects for creating or placing inset axes.", "axes_grid1.mpl_axes", "axes_grid1.parasite_axes"]}, {"name": "axes_grid1.anchored_artists", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists", "type": "axes_grid1", "text": ["AnchoredAuxTransformBox(transform, loc[, ...])", "An anchored container with transformed coordinates.", "AnchoredDirectionArrows(transform, label_x, ...)", "Draw two perpendicular arrows to indicate directions.", "AnchoredDrawingArea(width, height, xdescent, ...)", "An anchored container with a fixed size and fillable DrawingArea.", "AnchoredEllipse(transform, width, height, ...)", "Draw an anchored ellipse of a given size.", "AnchoredSizeBar(transform, size, label, loc)", "Draw a horizontal scale bar with a center-aligned label underneath."]}, {"name": "axes_grid1.anchored_artists.AnchoredAuxTransformBox", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredauxtransformbox", "type": "axes_grid1", "text": ["Bases: matplotlib.offsetbox.AnchoredOffsetbox", "An anchored container with transformed coordinates.", "Artists added to the drawing_area are scaled according to the coordinates of the transformation used. The dimensions of this artist will scale to contain the artists added.", "The transformation object for the coordinate system in use, i.e., matplotlib.axes.Axes.transData.", "Location of this artist. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.", "Padding around the child objects, in fraction of the font size.", "Border padding, in fraction of the font size.", "Font property used as a reference for paddings.", "If True, draw a box around this artists.", "Keyword arguments forwarded to AnchoredOffsetbox.", "To display an ellipse in the upper left, with a width of 0.1 and height of 0.4 in data coordinates:", "A container for artists to display.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float", "Annotations"]}, {"name": "axes_grid1.anchored_artists.AnchoredAuxTransformBox.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredauxtransformbox#mpl_toolkits.axes_grid1.anchored_artists.AnchoredAuxTransformBox.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.anchored_artists.AnchoredDirectionArrows", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddirectionarrows", "type": "axes_grid1", "text": ["Bases: matplotlib.offsetbox.AnchoredOffsetbox", "Draw two perpendicular arrows to indicate directions.", "The transformation object for the coordinate system in use, i.e., matplotlib.axes.Axes.transAxes.", "Label text for the x and y arrows", "Length of the arrow, given in coordinates of transform.", "Size of label strings, given in coordinates of transform.", "Location of this ellipse. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.", "The angle of the arrows in degrees.", "The ratio of the length of arrow_x and arrow_y. Negative numbers can be used to change the direction.", "Padding around the labels and arrows, in fraction of the font size.", "Border padding, in fraction of the font size.", "If True, draw a box around the arrows and labels.", "Color for the arrows and labels.", "Alpha values of the arrows and labels", "Separation between the arrows and labels in coordinates of transform.", "Font properties for the label text.", "Fraction of the arrow behind the arrow crossing.", "Width of arrow head, sent to ArrowStyle.", "Length of arrow head, sent to ArrowStyle.", "Width of arrow tail, sent to ArrowStyle.", "Properties of the text and arrows, passed to textpath.TextPath and patches.FancyArrowPatch.", "Keyword arguments forwarded to AnchoredOffsetbox.", "If prop is passed as a keyword argument, but fontproperties is not, then prop is be assumed to be the intended fontproperties. Using both prop and fontproperties is not supported.", "Using several of the optional parameters, creating downward pointing arrow and high contrast text labels.", "Arrow x and y", "Path for arrow labels", "Patch for arrow labels", "Container for the arrows and labels.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float", "Anchored Direction Arrow"]}, {"name": "axes_grid1.anchored_artists.AnchoredDirectionArrows.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddirectionarrows#mpl_toolkits.axes_grid1.anchored_artists.AnchoredDirectionArrows.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.anchored_artists.AnchoredDrawingArea", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddrawingarea", "type": "axes_grid1", "text": ["Bases: matplotlib.offsetbox.AnchoredOffsetbox", "An anchored container with a fixed size and fillable DrawingArea.", "Artists added to the drawing_area will have their coordinates interpreted as pixels. Any transformations set on the artists will be overridden.", "width and height of the container, in pixels.", "descent of the container in the x- and y- direction, in pixels.", "Location of this artist. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.", "Padding around the child objects, in fraction of the font size.", "Border padding, in fraction of the font size.", "Font property used as a reference for paddings.", "If True, draw a box around this artists.", "Keyword arguments forwarded to AnchoredOffsetbox.", "To display blue and red circles of different sizes in the upper right of an axes ax:", "A container for artists to display.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float", "Simple Anchored Artists", "Annotations"]}, {"name": "axes_grid1.anchored_artists.AnchoredDrawingArea.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddrawingarea#mpl_toolkits.axes_grid1.anchored_artists.AnchoredDrawingArea.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.anchored_artists.AnchoredEllipse", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredellipse", "type": "axes_grid1", "text": ["Bases: matplotlib.offsetbox.AnchoredOffsetbox", "Draw an anchored ellipse of a given size.", "The transformation object for the coordinate system in use, i.e., matplotlib.axes.Axes.transData.", "Width and height of the ellipse, given in coordinates of transform.", "Rotation of the ellipse, in degrees, anti-clockwise.", "Location of this ellipse. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.", "Padding around the ellipse, in fraction of the font size.", "Border padding, in fraction of the font size.", "If True, draw a box around the ellipse.", "Font property used as a reference for paddings.", "Keyword arguments forwarded to AnchoredOffsetbox.", "Ellipse patch drawn.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float", "Simple Anchored Artists"]}, {"name": "axes_grid1.anchored_artists.AnchoredEllipse.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredellipse#mpl_toolkits.axes_grid1.anchored_artists.AnchoredEllipse.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.anchored_artists.AnchoredSizeBar", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredsizebar", "type": "axes_grid1", "text": ["Bases: matplotlib.offsetbox.AnchoredOffsetbox", "Draw a horizontal scale bar with a center-aligned label underneath.", "The transformation object for the coordinate system in use, i.e., matplotlib.axes.Axes.transData.", "Horizontal length of the size bar, given in coordinates of transform.", "Label to display.", "Location of this ellipse. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.", "Padding around the label and size bar, in fraction of the font size.", "Border padding, in fraction of the font size.", "Separation between the label and the size bar, in points.", "If True, draw a box around the horizontal bar and label.", "Vertical length of the size bar, given in coordinates of transform.", "Color for the size bar and label.", "If True, the label will be over the size bar.", "Font properties for the label text.", "If True and if size_vertical is nonzero, the size bar will be filled in with the color specified by the size bar. Defaults to True if size_vertical is greater than zero and False otherwise.", "Keyword arguments forwarded to AnchoredOffsetbox.", "If prop is passed as a keyword argument, but fontproperties is not, then prop is be assumed to be the intended fontproperties. Using both prop and fontproperties is not supported.", "Using all the optional parameters", "Container for the size bar.", "Container for the label of the size bar.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float", "Inset Locator Demo2", "Simple Anchored Artists"]}, {"name": "axes_grid1.anchored_artists.AnchoredSizeBar.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredsizebar#mpl_toolkits.axes_grid1.anchored_artists.AnchoredSizeBar.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.axes_divider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider", "type": "axes_grid1", "text": ["Helper classes to adjust the positions of multiple axes at drawing time.", "AxesDivider(axes[, xref, yref])", "Divider based on the pre-existing axes.", "AxesLocator(axes_divider, nx, ny[, nx1, ny1])", "A callable object which returns the position and size of a given AxesDivider cell.", "Divider(fig, pos, horizontal, vertical[, ...])", "An Axes positioning class.", "HBoxDivider(fig, *args[, horizontal, ...])", "A SubplotDivider for laying out axes horizontally, while ensuring that they have equal heights.", "SubplotDivider(fig, *args[, horizontal, ...])", "The Divider class whose rectangle area is specified as a subplot geometry.", "VBoxDivider(fig, *args[, horizontal, ...])", "A SubplotDivider for laying out axes vertically, while ensuring that they have equal widths.", "make_axes_area_auto_adjustable(ax[, ...])", "make_axes_locatable(axes)"]}, {"name": "axes_grid1.axes_divider.AxesDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_divider.Divider", "Divider based on the pre-existing axes.", "Create an axes at the given position with the same height (or width) of the main axes.", "[\"left\"|\"right\"|\"bottom\"|\"top\"]", "size and pad should be axes_grid.axes_size compatible.", "Return the anchor.", "Return aspect.", "Return the position of the rectangle.", "Add a new axes on the right (or left) side of the main axes.", "The axes width. float or str arguments are interpreted as axes_size.from_any(size, AxesX(<main_axes>)).", "Padding between the axes. float or str arguments are interpreted as axes_size.from_any(size, AxesX(<main_axes>)). Defaults to rcParams[\"figure.subplot.wspace\"] (default: 0.2) times the main axes width.", "If False, the new axes is appended at the end of the list, i.e., it became the right-most axes. If True, it is inserted at the start of the list, and becomes the left-most axes.", "All extra keywords arguments are passed to the created axes. If axes_class is given, the new axes will be created as an instance of the given class. Otherwise, the same class of the main axes will be used.", "Add a new axes on the top (or bottom) side of the main axes.", "The axes height. float or str arguments are interpreted as axes_size.from_any(size, AxesY(<main_axes>)).", "Padding between the axes. float or str arguments are interpreted as axes_size.from_any(size, AxesY(<main_axes>)). Defaults to rcParams[\"figure.subplot.hspace\"] (default: 0.2) times the main axes height.", "If False, the new axes is appended at the end of the list, i.e., it became the right-most axes. If True, it is inserted at the start of the list, and becomes the left-most axes.", "All extra keywords arguments are passed to the created axes. If axes_class is given, the new axes will be created as an instance of the given class. Otherwise, the same class of the main axes will be used.", "Colorbar with AxesDivider", "Make Room For Ylabel Using Axesgrid", "Scatter Histogram (Locatable Axes)", "Simple Colorbar", "Tight Layout guide"]}, {"name": "axes_grid1.axes_divider.AxesDivider.append_axes()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.append_axes", "type": "axes_grid1", "text": ["Create an axes at the given position with the same height (or width) of the main axes.", "[\"left\"|\"right\"|\"bottom\"|\"top\"]", "size and pad should be axes_grid.axes_size compatible."]}, {"name": "axes_grid1.axes_divider.AxesDivider.get_anchor()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_anchor", "type": "axes_grid1", "text": ["Return the anchor."]}, {"name": "axes_grid1.axes_divider.AxesDivider.get_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_aspect", "type": "axes_grid1", "text": ["Return aspect."]}, {"name": "axes_grid1.axes_divider.AxesDivider.get_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_position", "type": "axes_grid1", "text": ["Return the position of the rectangle."]}, {"name": "axes_grid1.axes_divider.AxesDivider.get_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_subplotspec", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.AxesDivider.new_horizontal()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.new_horizontal", "type": "axes_grid1", "text": ["Add a new axes on the right (or left) side of the main axes.", "The axes width. float or str arguments are interpreted as axes_size.from_any(size, AxesX(<main_axes>)).", "Padding between the axes. float or str arguments are interpreted as axes_size.from_any(size, AxesX(<main_axes>)). Defaults to rcParams[\"figure.subplot.wspace\"] (default: 0.2) times the main axes width.", "If False, the new axes is appended at the end of the list, i.e., it became the right-most axes. If True, it is inserted at the start of the list, and becomes the left-most axes.", "All extra keywords arguments are passed to the created axes. If axes_class is given, the new axes will be created as an instance of the given class. Otherwise, the same class of the main axes will be used."]}, {"name": "axes_grid1.axes_divider.AxesDivider.new_vertical()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.new_vertical", "type": "axes_grid1", "text": ["Add a new axes on the top (or bottom) side of the main axes.", "The axes height. float or str arguments are interpreted as axes_size.from_any(size, AxesY(<main_axes>)).", "Padding between the axes. float or str arguments are interpreted as axes_size.from_any(size, AxesY(<main_axes>)). Defaults to rcParams[\"figure.subplot.hspace\"] (default: 0.2) times the main axes height.", "If False, the new axes is appended at the end of the list, i.e., it became the right-most axes. If True, it is inserted at the start of the list, and becomes the left-most axes.", "All extra keywords arguments are passed to the created axes. If axes_class is given, the new axes will be created as an instance of the given class. Otherwise, the same class of the main axes will be used."]}, {"name": "axes_grid1.axes_divider.AxesLocator", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axeslocator", "type": "axes_grid1", "text": ["Bases: object", "A callable object which returns the position and size of a given AxesDivider cell.", "Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.", "Same as nx and nx1, but for row positions.", "Call self as a function."]}, {"name": "axes_grid1.axes_divider.AxesLocator.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axeslocator#mpl_toolkits.axes_grid1.axes_divider.AxesLocator.__call__", "type": "axes_grid1", "text": ["Call self as a function."]}, {"name": "axes_grid1.axes_divider.AxesLocator.get_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axeslocator#mpl_toolkits.axes_grid1.axes_divider.AxesLocator.get_subplotspec", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.Divider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider", "type": "axes_grid1", "text": ["Bases: object", "An Axes positioning class.", "The divider is initialized with lists of horizontal and vertical sizes (mpl_toolkits.axes_grid1.axes_size) based on which a given rectangular area will be divided.", "The new_locator method then creates a callable object that can be used as the axes_locator of the axes.", "Position of the rectangle that will be divided.", "Sizes for horizontal division.", "Sizes for vertical division.", "Whether overall rectangular area is reduced so that the relative part of the horizontal and vertical scales have the same scale.", "Placement of the reduced rectangle, when aspect is True.", "Return the anchor.", "Return aspect.", "Return horizontal sizes.", "Return the position of the rectangle.", "Return vertical sizes.", "[Deprecated]", "Deprecated since version 3.5: ", "Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.", "Same as nx and nx1, but for row positions.", "Return a new AxesLocator for the specified cell.", "Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.", "Same as nx and nx1, but for row positions.", "Either an (x, y) pair of relative coordinates (0 is left or bottom, 1 is right or top), 'C' (center), or a cardinal direction ('SW', southwest, is bottom left, etc.).", "See also", "sizes for horizontal division", "Set the position of the rectangle.", "position of the rectangle that will be divided", "sizes for vertical division"]}, {"name": "axes_grid1.axes_divider.Divider.add_auto_adjustable_area()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.add_auto_adjustable_area", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.Divider.append_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.append_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.Divider.get_anchor()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_anchor", "type": "axes_grid1", "text": ["Return the anchor."]}, {"name": "axes_grid1.axes_divider.Divider.get_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_aspect", "type": "axes_grid1", "text": ["Return aspect."]}, {"name": "axes_grid1.axes_divider.Divider.get_horizontal()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_horizontal", "type": "axes_grid1", "text": ["Return horizontal sizes."]}, {"name": "axes_grid1.axes_divider.Divider.get_horizontal_sizes()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_horizontal_sizes", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.Divider.get_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_locator", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.Divider.get_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_position", "type": "axes_grid1", "text": ["Return the position of the rectangle."]}, {"name": "axes_grid1.axes_divider.Divider.get_position_runtime()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_position_runtime", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.Divider.get_vertical()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_vertical", "type": "axes_grid1", "text": ["Return vertical sizes."]}, {"name": "axes_grid1.axes_divider.Divider.get_vertical_sizes()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_vertical_sizes", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.Divider.get_vsize_hsize()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_vsize_hsize", "type": "axes_grid1", "text": ["[Deprecated]", "Deprecated since version 3.5: "]}, {"name": "axes_grid1.axes_divider.Divider.locate()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.locate", "type": "axes_grid1", "text": ["Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.", "Same as nx and nx1, but for row positions."]}, {"name": "axes_grid1.axes_divider.Divider.new_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.new_locator", "type": "axes_grid1", "text": ["Return a new AxesLocator for the specified cell.", "Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.", "Same as nx and nx1, but for row positions."]}, {"name": "axes_grid1.axes_divider.Divider.set_anchor()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_anchor", "type": "axes_grid1", "text": ["Either an (x, y) pair of relative coordinates (0 is left or bottom, 1 is right or top), 'C' (center), or a cardinal direction ('SW', southwest, is bottom left, etc.).", "See also"]}, {"name": "axes_grid1.axes_divider.Divider.set_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_aspect", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.Divider.set_horizontal()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_horizontal", "type": "axes_grid1", "text": ["sizes for horizontal division"]}, {"name": "axes_grid1.axes_divider.Divider.set_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_locator", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.Divider.set_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_position", "type": "axes_grid1", "text": ["Set the position of the rectangle.", "position of the rectangle that will be divided"]}, {"name": "axes_grid1.axes_divider.Divider.set_vertical()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_vertical", "type": "axes_grid1", "text": ["sizes for vertical division"]}, {"name": "axes_grid1.axes_divider.HBoxDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.hboxdivider", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_divider.SubplotDivider", "A SubplotDivider for laying out axes horizontally, while ensuring that they have equal heights.", "(Source code, png, pdf)", "The array of subplots in the figure has dimensions (nrows,\nncols), and index is the index of the subplot being created. index starts at 1 in the upper left corner and increases to the right.", "If nrows, ncols, and index are all single digit numbers, then args can be passed as a single 3-digit number (e.g. 234 for (2, 3, 4)).", "Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.", "Same as nx and nx1, but for row positions.", "Create a new AxesLocator for the specified cell.", "Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.", "HBoxDivider demo"]}, {"name": "axes_grid1.axes_divider.HBoxDivider.locate()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.hboxdivider#mpl_toolkits.axes_grid1.axes_divider.HBoxDivider.locate", "type": "axes_grid1", "text": ["Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.", "Same as nx and nx1, but for row positions."]}, {"name": "axes_grid1.axes_divider.HBoxDivider.new_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.hboxdivider#mpl_toolkits.axes_grid1.axes_divider.HBoxDivider.new_locator", "type": "axes_grid1", "text": ["Create a new AxesLocator for the specified cell.", "Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified."]}, {"name": "axes_grid1.axes_divider.make_axes_area_auto_adjustable", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.make_axes_area_auto_adjustable", "type": "axes_grid1", "text": ["Make Room For Ylabel Using Axesgrid"]}, {"name": "axes_grid1.axes_divider.make_axes_locatable", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.make_axes_locatable", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_divider.SubplotDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_divider.Divider", "The Divider class whose rectangle area is specified as a subplot geometry.", "The array of subplots in the figure has dimensions (nrows,\nncols), and index is the index of the subplot being created. index starts at 1 in the upper left corner and increases to the right.", "If nrows, ncols, and index are all single digit numbers, then args can be passed as a single 3-digit number (e.g. 234 for (2, 3, 4)).", "[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3).", "Deprecated since version 3.4.", "[Deprecated] Get the subplot geometry, e.g., (2, 2, 3).", "Deprecated since version 3.4.", "Return the bounds of the subplot box.", "Get the SubplotSpec instance.", "Set the SubplotSpec instance.", "[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axes_grid1.axes_divider.SubplotDivider.change_geometry()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.change_geometry", "type": "axes_grid1", "text": ["[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3).", "Deprecated since version 3.4."]}, {"name": "axes_grid1.axes_divider.SubplotDivider.get_geometry()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.get_geometry", "type": "axes_grid1", "text": ["[Deprecated] Get the subplot geometry, e.g., (2, 2, 3).", "Deprecated since version 3.4."]}, {"name": "axes_grid1.axes_divider.SubplotDivider.get_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.get_position", "type": "axes_grid1", "text": ["Return the bounds of the subplot box."]}, {"name": "axes_grid1.axes_divider.SubplotDivider.get_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.get_subplotspec", "type": "axes_grid1", "text": ["Get the SubplotSpec instance."]}, {"name": "axes_grid1.axes_divider.SubplotDivider.set_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.set_subplotspec", "type": "axes_grid1", "text": ["Set the SubplotSpec instance."]}, {"name": "axes_grid1.axes_divider.SubplotDivider.update_params()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.update_params", "type": "axes_grid1", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axes_grid1.axes_divider.VBoxDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.vboxdivider", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_divider.SubplotDivider", "A SubplotDivider for laying out axes vertically, while ensuring that they have equal widths.", "The array of subplots in the figure has dimensions (nrows,\nncols), and index is the index of the subplot being created. index starts at 1 in the upper left corner and increases to the right.", "If nrows, ncols, and index are all single digit numbers, then args can be passed as a single 3-digit number (e.g. 234 for (2, 3, 4)).", "Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.", "Same as nx and nx1, but for row positions.", "Create a new AxesLocator for the specified cell.", "Integers specifying the row-position of the cell. When ny1 is None, a single ny-th row is specified. Otherwise location of rows spanning between ny to ny1 (but excluding ny1-th row) is specified."]}, {"name": "axes_grid1.axes_divider.VBoxDivider.locate()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.vboxdivider#mpl_toolkits.axes_grid1.axes_divider.VBoxDivider.locate", "type": "axes_grid1", "text": ["Integers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.", "Same as nx and nx1, but for row positions."]}, {"name": "axes_grid1.axes_divider.VBoxDivider.new_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.vboxdivider#mpl_toolkits.axes_grid1.axes_divider.VBoxDivider.new_locator", "type": "axes_grid1", "text": ["Create a new AxesLocator for the specified cell.", "Integers specifying the row-position of the cell. When ny1 is None, a single ny-th row is specified. Otherwise location of rows spanning between ny to ny1 (but excluding ny1-th row) is specified."]}, {"name": "axes_grid1.axes_grid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid", "type": "axes_grid1", "text": ["AxesGrid", "alias of mpl_toolkits.axes_grid1.axes_grid.ImageGrid", "CbarAxes(*args, orientation, **kwargs)", "[Deprecated]", "CbarAxesBase(*args, orientation, **kwargs)", "Grid(fig, rect, nrows_ncols[, ngrids, ...])", "A grid of Axes.", "ImageGrid(fig, rect, nrows_ncols[, ngrids, ...])"]}, {"name": "axes_grid1.axes_grid.AxesGrid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.axesgrid", "type": "axes_grid1", "text": ["alias of mpl_toolkits.axes_grid1.axes_grid.ImageGrid"]}, {"name": "axes_grid1.axes_grid.CbarAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxes", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase, mpl_toolkits.axes_grid1.mpl_axes.Axes", "[Deprecated]", "Deprecated since version 3.5: ", "Build an Axes in a figure.", "The Axes is built in the Figure fig.", "The Axes is built in the rectangle rect. rect is in Figure coordinates.", "The x or y axis is shared with the x or y axis in the input Axes.", "Whether the Axes frame is visible.", "Set a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.", "Other optional keyword arguments:", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "The new Axes object.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float"]}, {"name": "axes_grid1.axes_grid.CbarAxes.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxes#mpl_toolkits.axes_grid1.axes_grid.CbarAxes.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float"]}, {"name": "axes_grid1.axes_grid.CbarAxesBase", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase", "type": "axes_grid1", "text": ["Bases: object"]}, {"name": "axes_grid1.axes_grid.CbarAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase#mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase.cla", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_grid.CbarAxesBase.colorbar()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase#mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase.colorbar", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_grid.CbarAxesBase.toggle_label()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase#mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase.toggle_label", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_grid.Grid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid", "type": "axes_grid1", "text": ["Bases: object", "A grid of Axes.", "In Matplotlib, the axes location (and size) is specified in normalized figure coordinates. This may not be ideal for images that needs to be displayed with a given aspect ratio; for example, it is difficult to display multiple images of a same size with some fixed padding between them. AxesGrid can be used in such case.", "The parent figure.", "The axes position, as a (left, bottom, width, height) tuple or as a three-digit subplot position code (e.g., \"121\").", "Number of rows and columns in the grid.", "If not None, only the first ngrids axes in the grid are created.", "Whether axes are created in row-major (\"row by row\") or column-major order (\"column by column\"). This also affects the order in which axes are accessed using indexing (grid[index]).", "Padding or (horizontal padding, vertical padding) between axes, in inches.", "Whether all axes share their x- and y-axis. Overrides share_x and share_y.", "Whether all axes of a column share their x-axis.", "Whether all axes of a row share their y-axis.", "Determines which axes will get tick labels:", "Whether the axes aspect ratio follows the aspect ratio of the data limits.", "Return the aspect of the SubplotDivider.", "Return the axes padding.", "Padding (horizontal pad, vertical pad) in inches.", "Return the number of rows and columns of the grid as (nrows, ncols).", "[Deprecated]", "Deprecated since version 3.5: ", "Set the aspect of the SubplotDivider.", "Set the padding between the axes.", "The padding (horizontal pad, vertical pad) in inches.", "Define which axes have tick labels.", "The label mode:"]}, {"name": "axes_grid1.axes_grid.Grid.get_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_aspect", "type": "axes_grid1", "text": ["Return the aspect of the SubplotDivider."]}, {"name": "axes_grid1.axes_grid.Grid.get_axes_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_axes_locator", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_grid.Grid.get_axes_pad()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_axes_pad", "type": "axes_grid1", "text": ["Return the axes padding.", "Padding (horizontal pad, vertical pad) in inches."]}, {"name": "axes_grid1.axes_grid.Grid.get_divider()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_divider", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_grid.Grid.get_geometry()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_geometry", "type": "axes_grid1", "text": ["Return the number of rows and columns of the grid as (nrows, ncols)."]}, {"name": "axes_grid1.axes_grid.Grid.get_vsize_hsize()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_vsize_hsize", "type": "axes_grid1", "text": ["[Deprecated]", "Deprecated since version 3.5: "]}, {"name": "axes_grid1.axes_grid.Grid.set_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_aspect", "type": "axes_grid1", "text": ["Set the aspect of the SubplotDivider."]}, {"name": "axes_grid1.axes_grid.Grid.set_axes_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_axes_locator", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_grid.Grid.set_axes_pad()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_axes_pad", "type": "axes_grid1", "text": ["Set the padding between the axes.", "The padding (horizontal pad, vertical pad) in inches."]}, {"name": "axes_grid1.axes_grid.Grid.set_label_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_label_mode", "type": "axes_grid1", "text": ["Define which axes have tick labels.", "The label mode:"]}, {"name": "axes_grid1.axes_grid.ImageGrid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.imagegrid", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_grid.Grid", "The parent figure.", "The axes position, as a (left, bottom, width, height) tuple or as a three-digit subplot position code (e.g., \"121\").", "Number of rows and columns in the grid.", "If not None, only the first ngrids axes in the grid are created.", "Whether axes are created in row-major (\"row by row\") or column-major order (\"column by column\"). This also affects the order in which axes are accessed using indexing (grid[index]).", "Padding or (horizontal padding, vertical padding) between axes, in inches.", "Whether all axes share their x- and y-axis.", "Whether the axes aspect ratio follows the aspect ratio of the data limits.", "Determines which axes will get tick labels:", "Whether to create a colorbar for \"each\" axes, a \"single\" colorbar for the entire grid, colorbars only for axes on the \"edge\" determined by cbar_location, or no colorbars. The colorbars are stored in the cbar_axes attribute.", "Padding between the image axes and the colorbar axes.", "Colorbar size.", "If True, each axes in the grid has a cax attribute that is bound to associated cbar_axes."]}, {"name": "axes_grid1.axes_rgb", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb", "type": "axes_grid1", "text": ["RGBAxes(*args[, pad])", "4-panel imshow (RGB, R, G, B).", "make_rgb_axes(ax[, pad, axes_class])"]}, {"name": "axes_grid1.axes_rgb.make_rgb_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb.make_rgb_axes", "type": "axes_grid1", "text": ["Fraction of the axes height.", "Showing RGB channels using RGBAxes"]}, {"name": "axes_grid1.axes_rgb.RGBAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb.rgbaxes", "type": "axes_grid1", "text": ["Bases: object", "4-panel imshow (RGB, R, G, B).", "Layout:", "RGB", "R", "G", "B", "Subclasses can override the _defaultAxesClass attribute.", "The axes object for the three-channel imshow.", "The axes object for the red channel imshow.", "The axes object for the green channel imshow.", "The axes object for the blue channel imshow.", "fraction of the axes height to put as padding.", "Unpacked into axes_class() init for RGB", "Unpacked into axes_class() init for RGB, R, G, B axes", "Create the four images {rgb, r, g, b}.", "The red, green, and blue arrays.", "kwargs get unpacked into the imshow calls for the four images.", "Showing RGB channels using RGBAxes"]}, {"name": "axes_grid1.axes_rgb.RGBAxes.imshow_rgb()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb.rgbaxes#mpl_toolkits.axes_grid1.axes_rgb.RGBAxes.imshow_rgb", "type": "axes_grid1", "text": ["Create the four images {rgb, r, g, b}.", "The red, green, and blue arrays.", "kwargs get unpacked into the imshow calls for the four images."]}, {"name": "axes_grid1.axes_size", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size", "type": "axes_grid1", "text": ["Provides classes of simple units that will be used with AxesDivider class (or others) to determine the size of each axes. The unit classes define get_size method that returns a tuple of two floats, meaning relative and absolute sizes, respectively.", "Note that this class is nothing more than a simple tuple of two floats. Take a look at the Divider class to see how these two values are used.", "Add(a, b)", "AddList(add_list)", "AxesX(axes[, aspect, ref_ax])", "Scaled size whose relative part corresponds to the data width of the axes multiplied by the aspect.", "AxesY(axes[, aspect, ref_ax])", "Scaled size whose relative part corresponds to the data height of the axes multiplied by the aspect.", "Fixed(fixed_size)", "Simple fixed size with absolute part = fixed_size and relative part = 0.", "Fraction(fraction, ref_size)", "An instance whose size is a fraction of the ref_size.", "GetExtentHelper(ax, direction)", "MaxExtent(artist_list, w_or_h)", "Size whose absolute part is either the largest width or the largest height of the given artist_list.", "MaxHeight(artist_list)", "Size whose absolute part is the largest height of the given artist_list.", "MaxWidth(artist_list)", "Size whose absolute part is the largest width of the given artist_list.", "Padded(size, pad)", "Return a instance where the absolute part of size is increase by the amount of pad.", "Scalable", "alias of mpl_toolkits.axes_grid1.axes_size.Scaled", "Scaled(scalable_size)", "Simple scaled(?) size with absolute part = 0 and relative part = scalable_size.", "SizeFromFunc(func)", "from_any(size[, fraction_ref])", "Create a Fixed unit when the first argument is a float, or a Fraction unit if that is a string that ends with %."]}, {"name": "axes_grid1.axes_size.Add", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.add", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size._Base"]}, {"name": "axes_grid1.axes_size.Add.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.add#mpl_toolkits.axes_grid1.axes_size.Add.get_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_size.AddList", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.addlist", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size._Base"]}, {"name": "axes_grid1.axes_size.AddList.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.addlist#mpl_toolkits.axes_grid1.axes_size.AddList.get_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_size.AxesX", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesx", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size._Base", "Scaled size whose relative part corresponds to the data width of the axes multiplied by the aspect.", "HBoxDivider demo", "Simple Axes Divider 3"]}, {"name": "axes_grid1.axes_size.AxesX.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesx#mpl_toolkits.axes_grid1.axes_size.AxesX.get_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_size.AxesY", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesy", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size._Base", "Scaled size whose relative part corresponds to the data height of the axes multiplied by the aspect.", "HBoxDivider demo", "Simple Axes Divider 3"]}, {"name": "axes_grid1.axes_size.AxesY.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesy#mpl_toolkits.axes_grid1.axes_size.AxesY.get_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_size.Fixed", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fixed", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size._Base", "Simple fixed size with absolute part = fixed_size and relative part = 0.", "HBoxDivider demo", "Axes with a fixed physical size", "Simple Axes Divider 1", "Simple Axes Divider 3"]}, {"name": "axes_grid1.axes_size.Fixed.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fixed#mpl_toolkits.axes_grid1.axes_size.Fixed.get_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_size.Fraction", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fraction", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size._Base", "An instance whose size is a fraction of the ref_size."]}, {"name": "axes_grid1.axes_size.Fraction.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fraction#mpl_toolkits.axes_grid1.axes_size.Fraction.get_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_size.from_any", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.from_any", "type": "axes_grid1", "text": ["Create a Fixed unit when the first argument is a float, or a Fraction unit if that is a string that ends with %. The second argument is only meaningful when Fraction unit is created."]}, {"name": "axes_grid1.axes_size.GetExtentHelper", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.getextenthelper", "type": "axes_grid1", "text": ["Bases: object", "Call self as a function."]}, {"name": "axes_grid1.axes_size.GetExtentHelper.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.getextenthelper#mpl_toolkits.axes_grid1.axes_size.GetExtentHelper.__call__", "type": "axes_grid1", "text": ["Call self as a function."]}, {"name": "axes_grid1.axes_size.MaxExtent", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxextent", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size._Base", "Size whose absolute part is either the largest width or the largest height of the given artist_list."]}, {"name": "axes_grid1.axes_size.MaxExtent.add_artist()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxextent#mpl_toolkits.axes_grid1.axes_size.MaxExtent.add_artist", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_size.MaxExtent.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxextent#mpl_toolkits.axes_grid1.axes_size.MaxExtent.get_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_size.MaxHeight", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxheight", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size.MaxExtent", "Size whose absolute part is the largest height of the given artist_list."]}, {"name": "axes_grid1.axes_size.MaxWidth", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxwidth", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size.MaxExtent", "Size whose absolute part is the largest width of the given artist_list."]}, {"name": "axes_grid1.axes_size.Padded", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.padded", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size._Base", "Return a instance where the absolute part of size is increase by the amount of pad."]}, {"name": "axes_grid1.axes_size.Padded.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.padded#mpl_toolkits.axes_grid1.axes_size.Padded.get_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_size.Scalable", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.scalable", "type": "axes_grid1", "text": ["alias of mpl_toolkits.axes_grid1.axes_size.Scaled"]}, {"name": "axes_grid1.axes_size.Scaled", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.scaled", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size._Base", "Simple scaled(?) size with absolute part = 0 and relative part = scalable_size.", "HBoxDivider demo", "Axes with a fixed physical size", "Simple Axes Divider 1"]}, {"name": "axes_grid1.axes_size.Scaled.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.scaled#mpl_toolkits.axes_grid1.axes_size.Scaled.get_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.axes_size.SizeFromFunc", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.sizefromfunc", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.axes_size._Base"]}, {"name": "axes_grid1.axes_size.SizeFromFunc.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.sizefromfunc#mpl_toolkits.axes_grid1.axes_size.SizeFromFunc.get_size", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.inset_locator", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator", "type": "axes_grid1", "text": ["A collection of functions and objects for creating or placing inset axes.", "AnchoredLocatorBase(bbox_to_anchor, ...[, ...])", "AnchoredSizeLocator(bbox_to_anchor, x_size, ...)", "AnchoredZoomLocator(parent_axes, zoom, loc)", "BboxConnector(bbox1, bbox2, loc1[, loc2])", "Connect two bboxes with a straight line.", "BboxConnectorPatch(bbox1, bbox2, loc1a, ...)", "Connect two bboxes with a quadrilateral.", "BboxPatch(bbox, **kwargs)", "Patch showing the shape bounded by a Bbox.", "InsetPosition(parent, lbwh)", "An object for positioning an inset axes.", "inset_axes(parent_axes, width, height[, ...])", "Create an inset axes with a given width and height.", "mark_inset(parent_axes, inset_axes, loc1, ...)", "Draw a box to mark the location of an area represented by an inset axes.", "zoomed_inset_axes(parent_axes, zoom[, loc, ...])", "Create an anchored inset axes by scaling a parent axes."]}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase", "type": "axes_grid1", "text": ["Bases: matplotlib.offsetbox.AnchoredOffsetbox", "The box location. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.", "Padding around the child as fraction of the fontsize.", "Padding between the offsetbox frame and the bbox_to_anchor.", "The box that will be anchored.", "This is only used as a reference for paddings. If not given, rcParams[\"legend.fontsize\"] (default: 'medium') is used.", "Whether to draw a frame around the box.", "Box that is used to position the legend in conjunction with loc.", "The transform for the bounding box (bbox_to_anchor).", "All other parameters are passed on to OffsetBox.", "See Legend for a detailed description of the anchoring mechanism.", "Call self as a function.", "Update the location of children if necessary and draw them to the given renderer.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase#mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase.__call__", "type": "axes_grid1", "text": ["Call self as a function."]}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase.draw()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase#mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase.draw", "type": "axes_grid1", "text": ["Update the location of children if necessary and draw them to the given renderer."]}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase#mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.inset_locator.AnchoredSizeLocator", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredsizelocator", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase", "The box location. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.", "Padding around the child as fraction of the fontsize.", "Padding between the offsetbox frame and the bbox_to_anchor.", "The box that will be anchored.", "This is only used as a reference for paddings. If not given, rcParams[\"legend.fontsize\"] (default: 'medium') is used.", "Whether to draw a frame around the box.", "Box that is used to position the legend in conjunction with loc.", "The transform for the bounding box (bbox_to_anchor).", "All other parameters are passed on to OffsetBox.", "See Legend for a detailed description of the anchoring mechanism.", "Return the extent of the box as (width, height, x, y).", "This is the extent of the child plus the padding.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.inset_locator.AnchoredSizeLocator.get_extent()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredsizelocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredSizeLocator.get_extent", "type": "axes_grid1", "text": ["Return the extent of the box as (width, height, x, y).", "This is the extent of the child plus the padding."]}, {"name": "axes_grid1.inset_locator.AnchoredSizeLocator.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredsizelocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredSizeLocator.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.inset_locator.AnchoredZoomLocator", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredzoomlocator", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase", "The box location. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.", "Padding around the child as fraction of the fontsize.", "Padding between the offsetbox frame and the bbox_to_anchor.", "The box that will be anchored.", "This is only used as a reference for paddings. If not given, rcParams[\"legend.fontsize\"] (default: 'medium') is used.", "Whether to draw a frame around the box.", "Box that is used to position the legend in conjunction with loc.", "The transform for the bounding box (bbox_to_anchor).", "All other parameters are passed on to OffsetBox.", "See Legend for a detailed description of the anchoring mechanism.", "Return the extent of the box as (width, height, x, y).", "This is the extent of the child plus the padding.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.inset_locator.AnchoredZoomLocator.get_extent()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredzoomlocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredZoomLocator.get_extent", "type": "axes_grid1", "text": ["Return the extent of the box as (width, height, x, y).", "This is the extent of the child plus the padding."]}, {"name": "axes_grid1.inset_locator.AnchoredZoomLocator.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredzoomlocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredZoomLocator.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "bbox_to_anchor", "unknown", "child", "unknown", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "height", "float", "in_layout", "bool", "label", "object", "offset", "(float, float) or callable", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "width", "float", "zorder", "float"]}, {"name": "axes_grid1.inset_locator.BboxConnector", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector", "type": "axes_grid1", "text": ["Bases: matplotlib.patches.Patch", "Connect two bboxes with a straight line.", "Bounding boxes to connect.", "Corner of bbox1 to draw the line. Valid values are:", "Corner of bbox2 to draw the line. If None, defaults to loc1. Valid values are:", "Patch properties for the line drawn. Valid arguments include:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "unknown", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float", "Helper function to obtain a Path from one bbox to another.", "Bounding boxes to connect.", "Corner of bbox1 to use. Valid values are:", "Corner of bbox2 to use. If None, defaults to loc1. Valid values are:", "A line segment from the loc1 corner of bbox1 to the loc2 corner of bbox2.", "Helper function to obtain the location of a corner of a bbox", "Corner of bbox. Valid values are:", "Coordinates of the corner specified by loc.", "Return the path of this patch.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float", "Axes Zoom Effect"]}, {"name": "axes_grid1.inset_locator.BboxConnector.connect_bbox()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.connect_bbox", "type": "axes_grid1", "text": ["Helper function to obtain a Path from one bbox to another.", "Bounding boxes to connect.", "Corner of bbox1 to use. Valid values are:", "Corner of bbox2 to use. If None, defaults to loc1. Valid values are:", "A line segment from the loc1 corner of bbox1 to the loc2 corner of bbox2."]}, {"name": "axes_grid1.inset_locator.BboxConnector.get_bbox_edge_pos()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.get_bbox_edge_pos", "type": "axes_grid1", "text": ["Helper function to obtain the location of a corner of a bbox", "Corner of bbox. Valid values are:", "Coordinates of the corner specified by loc."]}, {"name": "axes_grid1.inset_locator.BboxConnector.get_path()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.get_path", "type": "axes_grid1", "text": ["Return the path of this patch."]}, {"name": "axes_grid1.inset_locator.BboxConnector.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float"]}, {"name": "axes_grid1.inset_locator.BboxConnectorPatch", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnectorpatch", "type": "axes_grid1", "text": ["Bases: mpl_toolkits.axes_grid1.inset_locator.BboxConnector", "Connect two bboxes with a quadrilateral.", "The quadrilateral is specified by two lines that start and end at corners of the bboxes. The four sides of the quadrilateral are defined by the two lines given, the line between the two corners specified in bbox1 and the line between the two corners specified in bbox2.", "Bounding boxes to connect.", "Corners of bbox1 and bbox2 to draw the first line. Valid values are:", "Corners of bbox1 and bbox2 to draw the second line. Valid values are:", "Patch properties for the line drawn:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "unknown", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float", "Return the path of this patch.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float", "Axes Zoom Effect"]}, {"name": "axes_grid1.inset_locator.BboxConnectorPatch.get_path()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnectorpatch#mpl_toolkits.axes_grid1.inset_locator.BboxConnectorPatch.get_path", "type": "axes_grid1", "text": ["Return the path of this patch."]}, {"name": "axes_grid1.inset_locator.BboxConnectorPatch.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnectorpatch#mpl_toolkits.axes_grid1.inset_locator.BboxConnectorPatch.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float"]}, {"name": "axes_grid1.inset_locator.BboxPatch", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxpatch", "type": "axes_grid1", "text": ["Bases: matplotlib.patches.Patch", "Patch showing the shape bounded by a Bbox.", "Bbox to use for the extents of this patch.", "Patch properties. Valid arguments include:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "unknown", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float", "Return the path of this patch.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float", "Axes Zoom Effect"]}, {"name": "axes_grid1.inset_locator.BboxPatch.get_path()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxpatch#mpl_toolkits.axes_grid1.inset_locator.BboxPatch.get_path", "type": "axes_grid1", "text": ["Return the path of this patch."]}, {"name": "axes_grid1.inset_locator.BboxPatch.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxpatch#mpl_toolkits.axes_grid1.inset_locator.BboxPatch.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float"]}, {"name": "axes_grid1.inset_locator.inset_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.inset_axes", "type": "axes_grid1", "text": ["Create an inset axes with a given width and height.", "Both sizes used can be specified either in inches or percentage. For example,:", "creates in inset axes in the lower left corner of parent_axes which spans over 30% in height and 40% in width of the parent_axes. Since the usage of inset_axes may become slightly tricky when exceeding such standard cases, it is recommended to read the examples.", "Axes to place the inset axes.", "Size of the inset axes to create. If a float is provided, it is the size in inches, e.g. width=1.3. If a string is provided, it is the size in relative units, e.g. width='40%'. By default, i.e. if neither bbox_to_anchor nor bbox_transform are specified, those are relative to the parent_axes. Otherwise they are to be understood relative to the bounding box provided via bbox_to_anchor.", "Location to place the inset axes. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.", "Bbox that the inset axes will be anchored to. If None, a tuple of (0, 0, 1, 1) is used if bbox_transform is set to parent_axes.transAxes or parent_axes.figure.transFigure. Otherwise, parent_axes.bbox is used. If a tuple, can be either [left, bottom, width, height], or [left, bottom]. If the kwargs width and/or height are specified in relative units, the 2-tuple [left, bottom] cannot be used. Note that, unless bbox_transform is set, the units of the bounding box are interpreted in the pixel coordinate. When using bbox_to_anchor with tuple, it almost always makes sense to also specify a bbox_transform. This might often be the axes transform parent_axes.transAxes.", "Transformation for the bbox that contains the inset axes. If None, a transforms.IdentityTransform is used. The value of bbox_to_anchor (or the return value of its get_points method) is transformed by the bbox_transform and then interpreted as points in the pixel coordinate (which is dpi dependent). You may provide bbox_to_anchor in some normalized coordinate, and give an appropriate transform (e.g., parent_axes.transAxes).", "The type of the newly created inset axes.", "Keyword arguments to pass to the constructor of the inset axes. Valid arguments include:", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "Padding between inset axes and the bbox_to_anchor. The units are axes font size, i.e. for a default font size of 10 points borderpad = 0.5 is equivalent to a padding of 5 points.", "Inset axes object created.", "The meaning of bbox_to_anchor and bbox_to_transform is interpreted differently from that of legend. The value of bbox_to_anchor (or the return value of its get_points method; the default is parent_axes.bbox) is transformed by the bbox_transform (the default is Identity transform) and then interpreted as points in the pixel coordinate (which is dpi dependent).", "Thus, following three calls are identical and creates an inset axes with respect to the parent_axes:", "Adding a colorbar to inset axes", "Controlling the position and size of colorbars with Inset Axes", "Inset Locator Demo"]}, {"name": "axes_grid1.inset_locator.InsetPosition", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.insetposition", "type": "axes_grid1", "text": ["Bases: object", "An object for positioning an inset axes.", "This is created by specifying the normalized coordinates in the axes, instead of the figure.", "Axes to use for normalizing coordinates.", "The left edge, bottom edge, width, and height of the inset axes, in units of the normalized coordinate of the parent axes.", "See also", "The following bounds the inset axes to a box with 20% of the parent axes's height and 40% of the width. The size of the axes specified ([0, 0, 1, 1]) ensures that the axes completely fills the bounding box:", "Call self as a function."]}, {"name": "axes_grid1.inset_locator.InsetPosition.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.insetposition#mpl_toolkits.axes_grid1.inset_locator.InsetPosition.__call__", "type": "axes_grid1", "text": ["Call self as a function."]}, {"name": "axes_grid1.inset_locator.mark_inset", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.mark_inset", "type": "axes_grid1", "text": ["Draw a box to mark the location of an area represented by an inset axes.", "This function draws a box in parent_axes at the bounding box of inset_axes, and shows a connection with the inset axes by drawing lines at the corners, giving a \"zoomed in\" effect.", "Axes which contains the area of the inset axes.", "The inset axes.", "Corners to use for connecting the inset axes and the area in the parent axes.", "Patch properties for the lines and box drawn:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "unknown", "animated", "bool", "antialiased or aa", "bool or None", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color", "color", "edgecolor or ec", "color or None", "facecolor or fc", "color or None", "figure", "Figure", "fill", "bool", "gid", "str", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float or None", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float", "The patch drawn to represent the area of the inset axes.", "The patches connecting two corners of the inset axes and its area.", "Inset Locator Demo2"]}, {"name": "axes_grid1.inset_locator.zoomed_inset_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.zoomed_inset_axes", "type": "axes_grid1", "text": ["Create an anchored inset axes by scaling a parent axes. For usage, also see the examples.", "Axes to place the inset axes.", "Scaling factor of the data axes. zoom > 1 will enlarge the coordinates (i.e., \"zoomed in\"), while zoom < 1 will shrink the coordinates (i.e., \"zoomed out\").", "Location to place the inset axes. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.", "Bbox that the inset axes will be anchored to. If None, parent_axes.bbox is used. If a tuple, can be either [left, bottom, width, height], or [left, bottom]. If the kwargs width and/or height are specified in relative units, the 2-tuple [left, bottom] cannot be used. Note that the units of the bounding box are determined through the transform in use. When using bbox_to_anchor it almost always makes sense to also specify a bbox_transform. This might often be the axes transform parent_axes.transAxes.", "Transformation for the bbox that contains the inset axes. If None, a transforms.IdentityTransform is used (i.e. pixel coordinates). This is useful when not providing any argument to bbox_to_anchor. When using bbox_to_anchor it almost always makes sense to also specify a bbox_transform. This might often be the axes transform parent_axes.transAxes. Inversely, when specifying the axes- or figure-transform here, be aware that not specifying bbox_to_anchor will use parent_axes.bbox, the units of which are in display (pixel) coordinates.", "The type of the newly created inset axes.", "Keyword arguments to pass to the constructor of the inset axes. Valid arguments include:", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "Padding between inset axes and the bbox_to_anchor. The units are axes font size, i.e. for a default font size of 10 points borderpad = 0.5 is equivalent to a padding of 5 points.", "Inset axes object created.", "Adding a colorbar to inset axes", "Inset Locator Demo2"]}, {"name": "axes_grid1.mpl_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes", "type": "axes_grid1", "text": ["Axes(fig, rect, *[, facecolor, frameon, ...])", "Build an Axes in a figure.", "SimpleAxisArtist(axis, axisnum, spine)", "SimpleChainedObjects(objects)"]}, {"name": "axes_grid1.mpl_axes.Axes", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes", "type": "axes_grid1", "text": ["Bases: matplotlib.axes._axes.Axes", "Build an Axes in a figure.", "The Axes is built in the Figure fig.", "The Axes is built in the rectangle rect. rect is in Figure coordinates.", "The x or y axis is shared with the x or y axis in the input Axes.", "Whether the Axes frame is visible.", "Set a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.", "Other optional keyword arguments:", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "The new Axes object.", "Bases: dict", "Call self as a function.", "Convenience method to get or set some axis properties.", "Call signatures:", "The axis limits to be set. This can also be achieved using", "If a bool, turns axis lines and labels on or off. If a string, possible values are:", "Value", "Description", "'on'", "Turn on axis lines and labels. Same as True.", "'off'", "Turn off axis lines and labels. Same as False.", "'equal'", "Set equal scaling (i.e., make circles circular) by changing axis limits. This is the same as ax.set_aspect('equal', adjustable='datalim'). Explicit data limits may not be respected in this case.", "'scaled'", "Set equal scaling (i.e., make circles circular) by changing dimensions of the plot box. This is the same as ax.set_aspect('equal', adjustable='box', anchor='C'). Additionally, further autoscaling will be disabled.", "'tight'", "Set limits just large enough to show all data, then disable further autoscaling.", "'auto'", "Automatic scaling (fill plot box with data).", "'image'", "'scaled' with axis limits equal to data limits.", "'square'", "Square plot; similar to 'scaled', but initially forcing xmax-xmin == ymax-ymin.", "Whether observers are notified of the axis limit change. This option is passed on to set_xlim and set_ylim.", "The axis limits.", "See also", "Clear the Axes.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "Axes Divider", "Axes Grid2", "Parasite Simple2", "Simple ImageGrid", "Simple ImageGrid 2", "Tight Layout guide"]}, {"name": "axes_grid1.mpl_axes.Axes.AxisDict", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.AxisDict", "type": "axes_grid1", "text": ["Bases: dict", "Call self as a function."]}, {"name": "axes_grid1.mpl_axes.Axes.AxisDict.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.AxisDict.__call__", "type": "axes_grid1", "text": ["Call self as a function."]}, {"name": "axes_grid1.mpl_axes.Axes.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.cla", "type": "axes_grid1", "text": ["Clear the Axes."]}, {"name": "axes_grid1.mpl_axes.Axes.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float"]}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist", "type": "axes_grid1", "text": ["Bases: matplotlib.artist.Artist", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "in_layout", "bool", "label", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "unknown", "zorder", "float", "Set a label that will be displayed in the legend.", "s will be converted to a string by calling str.", "Set the artist's visibility."]}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.set", "type": "axes_grid1", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "in_layout", "bool", "label", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "visible", "unknown", "zorder", "float"]}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.set_label()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.set_label", "type": "axes_grid1", "text": ["Set a label that will be displayed in the legend.", "s will be converted to a string by calling str."]}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.set_visible()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.set_visible", "type": "axes_grid1", "text": ["Set the artist's visibility."]}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.toggle()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.toggle", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.mpl_axes.SimpleChainedObjects", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simplechainedobjects", "type": "axes_grid1", "text": ["Bases: object", "Call self as a function."]}, {"name": "axes_grid1.mpl_axes.SimpleChainedObjects.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simplechainedobjects#mpl_toolkits.axes_grid1.mpl_axes.SimpleChainedObjects.__call__", "type": "axes_grid1", "text": ["Call self as a function."]}, {"name": "axes_grid1.parasite_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes", "type": "axes_grid1", "text": ["HostAxes", "alias of mpl_toolkits.axes_grid1.parasite_axes.AxesHostAxes", "HostAxesBase(*args, **kwargs)", "ParasiteAxes", "alias of mpl_toolkits.axes_grid1.parasite_axes.AxesParasite", "ParasiteAxesAuxTrans", "alias of mpl_toolkits.axes_grid1.parasite_axes.AxesParasiteParasiteAuxTrans", "ParasiteAxesAuxTransBase(parent_axes, ...[, ...])", "[Deprecated]", "ParasiteAxesBase(parent_axes[, ...])", "host_axes(*args[, axes_class, figure])", "Create axes that can act as a hosts to parasitic axes.", "host_axes_class_factory(axes_class)", "host_subplot(*args[, axes_class, figure])", "Create a subplot that can act as a host to parasitic axes.", "host_subplot_class_factory(axes_class)", "parasite_axes_auxtrans_class_factory(axes_class)", "[Deprecated]", "parasite_axes_class_factory(axes_class)"]}, {"name": "axes_grid1.parasite_axes.host_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_axes", "type": "axes_grid1", "text": ["Create axes that can act as a hosts to parasitic axes.", "Figure to which the axes will be added. Defaults to the current figure pyplot.gcf().", "Will be passed on to the underlying Axes object creation."]}, {"name": "axes_grid1.parasite_axes.host_axes_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_axes_class_factory", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.host_subplot", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_subplot", "type": "axes_grid1", "text": ["Create a subplot that can act as a host to parasitic axes.", "Figure to which the subplot will be added. Defaults to the current figure pyplot.gcf().", "Will be passed on to the underlying Axes object creation."]}, {"name": "axes_grid1.parasite_axes.host_subplot_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_subplot_class_factory", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.HostAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxes", "type": "axes_grid1", "text": ["alias of mpl_toolkits.axes_grid1.parasite_axes.AxesHostAxes"]}, {"name": "axes_grid1.parasite_axes.HostAxesBase", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase", "type": "axes_grid1", "text": ["Bases: object", "Add a parasite axes to this host.", "Despite this method's name, this should actually be thought of as an add_parasite_axes method.", "tr may be Transform, in which case the following relation will hold: parasite.transData = tr + host.transData. Alternatively, it may be None (the default), no special relationship will hold between the parasite's and the host's transData.", "Create a twin of Axes with no shared axis.", "While self will have ticks on the left and bottom axis, the returned axes will have ticks on the top and right axis.", "Create a twin of Axes with a shared x-axis but independent y-axis.", "The y-axis of self will have ticks on the left and the returned axes will have ticks on the right.", "Create a twin of Axes with a shared y-axis but independent x-axis.", "The x-axis of self will have ticks on the bottom and the returned axes will have ticks on the top.", "Parasite Simple2", "Curvilinear grid demo", "mpl_toolkits.axisartist.floating_axes features", "floating_axis demo", "Parasite Axes demo"]}, {"name": "axes_grid1.parasite_axes.HostAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.cla", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.HostAxesBase.draw()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.draw", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.HostAxesBase.get_aux_axes()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.get_aux_axes", "type": "axes_grid1", "text": ["Add a parasite axes to this host.", "Despite this method's name, this should actually be thought of as an add_parasite_axes method.", "tr may be Transform, in which case the following relation will hold: parasite.transData = tr + host.transData. Alternatively, it may be None (the default), no special relationship will hold between the parasite's and the host's transData."]}, {"name": "axes_grid1.parasite_axes.HostAxesBase.get_tightbbox()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.get_tightbbox", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.HostAxesBase.pick()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.pick", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.HostAxesBase.twin()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.twin", "type": "axes_grid1", "text": ["Create a twin of Axes with no shared axis.", "While self will have ticks on the left and bottom axis, the returned axes will have ticks on the top and right axis."]}, {"name": "axes_grid1.parasite_axes.HostAxesBase.twinx()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.twinx", "type": "axes_grid1", "text": ["Create a twin of Axes with a shared x-axis but independent y-axis.", "The y-axis of self will have ticks on the left and the returned axes will have ticks on the right."]}, {"name": "axes_grid1.parasite_axes.HostAxesBase.twiny()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.twiny", "type": "axes_grid1", "text": ["Create a twin of Axes with a shared y-axis but independent x-axis.", "The x-axis of self will have ticks on the bottom and the returned axes will have ticks on the top."]}, {"name": "axes_grid1.parasite_axes.parasite_axes_auxtrans_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasite_axes_auxtrans_class_factory", "type": "axes_grid1", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axes_grid1.parasite_axes.parasite_axes_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasite_axes_class_factory", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.ParasiteAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxes", "type": "axes_grid1", "text": ["alias of mpl_toolkits.axes_grid1.parasite_axes.AxesParasite"]}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTrans", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtrans", "type": "axes_grid1", "text": ["alias of mpl_toolkits.axes_grid1.parasite_axes.AxesParasiteParasiteAuxTrans"]}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase", "type": "axes_grid1", "text": ["Bases: object", "[Deprecated]", "Deprecated since version 3.4: ", "[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.apply_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.apply_aspect", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.get_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.get_viewlim_mode", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.set_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.set_viewlim_mode", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.update_viewlim()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.update_viewlim", "type": "axes_grid1", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase", "type": "axes_grid1", "text": ["Bases: object", "[Deprecated]", "Deprecated since version 3.5: ", "[Deprecated]", "Deprecated since version 3.4: ", "Parasite Axes demo"]}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.apply_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.apply_aspect", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.cla", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.get_images_artists()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.get_images_artists", "type": "axes_grid1", "text": ["[Deprecated]", "Deprecated since version 3.5: "]}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.get_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.get_viewlim_mode", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.pick()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.pick", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.set_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.set_viewlim_mode", "type": "axes_grid1", "text": []}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.update_viewlim()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.update_viewlim", "type": "axes_grid1", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axis", "path": "axis_api", "type": "axis", "text": ["Table of Contents", "Axis objects", "Classes for the ticks and x and y axis.", "Base class for XAxis and YAxis.", "The Axes instance the artist resides in, or None.", "Determines the major tick positions and their label format.", "Determines the minor tick positions and their label format.", "The axis label.", "The distance between the axis label and the tick labels. Defaults to rcParams[\"axes.labelpad\"] (default: 4.0) = 4.", "A Text object containing the data offset of the ticks (if any).", "The acceptance radius for containment tests. See also Axis.contains.", "The major ticks.", "The minor ticks.", "The Axes to which the created Axis belongs.", "The acceptance radius for containment tests. See also Axis.contains.", "The Axes to which the created Axis belongs.", "The acceptance radius for containment tests. See also Axis.contains.", "The Axes to which the created Axis belongs.", "The acceptance radius for containment tests. See also Axis.contains.", "A container for the objects defining tick position and format.", "Determines the positions of the ticks.", "Determines the format of the tick labels.", "Axis.clear", "Clear the axis.", "Axis.cla", "[Deprecated] Clear this axis.", "Axis.get_scale", "Return this Axis' scale (as a str).", "Axis.get_major_formatter", "Get the formatter of the major ticker.", "Axis.get_major_locator", "Get the locator of the major ticker.", "Axis.get_minor_formatter", "Get the formatter of the minor ticker.", "Axis.get_minor_locator", "Get the locator of the minor ticker.", "Axis.set_major_formatter", "Set the formatter of the major ticker.", "Axis.set_major_locator", "Set the locator of the major ticker.", "Axis.set_minor_formatter", "Set the formatter of the minor ticker.", "Axis.set_minor_locator", "Set the locator of the minor ticker.", "Axis.remove_overlapping_locs", "If minor ticker locations that overlap with major ticker locations should be trimmed.", "Axis.get_remove_overlapping_locs", "Axis.set_remove_overlapping_locs", "Axis.set_label_coords", "Set the coordinates of the label.", "Axis.set_label_position", "Set the label position (top or bottom)", "Axis.set_label_text", "Set the text value of the axis label.", "Axis.get_label", "Return the axis label as a Text instance.", "Axis.get_label_position", "Return the label position (top or bottom)", "Axis.get_label_text", "Get the text of the label.", "Axis.get_major_ticks", "Return the list of major Ticks.", "Axis.get_majorticklabels", "Return this Axis' major tick labels, as a list of Text.", "Axis.get_majorticklines", "Return this Axis' major tick lines as a list of Line2Ds.", "Axis.get_majorticklocs", "Return this Axis' major tick locations in data coordinates.", "Axis.get_minor_ticks", "Return the list of minor Ticks.", "Axis.get_minorticklabels", "Return this Axis' minor tick labels, as a list of Text.", "Axis.get_minorticklines", "Return this Axis' minor tick lines as a list of Line2Ds.", "Axis.get_minorticklocs", "Return this Axis' minor tick locations in data coordinates.", "Axis.get_offset_text", "Return the axis offsetText as a Text instance.", "Axis.get_tick_padding", "Axis.get_ticklabels", "Get this Axis' tick labels.", "Axis.get_ticklines", "Return this Axis' tick lines as a list of Line2Ds.", "Axis.get_ticklocs", "Return this Axis' tick locations in data coordinates.", "Axis.get_gridlines", "Return this Axis' grid lines as a list of Line2Ds.", "Axis.grid", "Configure the grid lines.", "Axis.set_tick_params", "Set appearance parameters for ticks, ticklabels, and gridlines.", "Axis.axis_date", "Set up axis ticks and labels to treat data along this Axis as dates.", "Axis.get_data_interval", "Return the (min, max) data limits of this axis.", "Axis.get_view_interval", "Return the (min, max) view limits of this axis.", "Axis.get_inverted", "Return whether this Axis is oriented in the \"inverse\" direction.", "Axis.set_data_interval", "Set the axis data limits.", "Axis.set_view_interval", "Set the axis view limits.", "Axis.set_inverted", "Set whether this Axis is oriented in the \"inverse\" direction.", "Axis.get_minpos", "Axis.get_tick_space", "Return the estimated number of ticks that can fit on the axis.", "Axis.get_ticklabel_extents", "Get the extents of the tick labels on either side of the axes.", "Axis.get_tightbbox", "Return a bounding box that encloses the axis.", "Axis.contains", "Test whether the artist contains the mouse event.", "Axis.get_pickradius", "Return the depth of the axis used by the picker.", "Axis.set_pickradius", "Set the depth of the axis used by the picker.", "Axis.convert_units", "Axis.set_units", "Set the units for axis.", "Axis.get_units", "Return the units for axis.", "Axis.update_units", "Introspect data for units converter and update the axis.converter instance if necessary.", "XAxis.axis_name", "Read-only name identifying the axis.", "XAxis.get_text_heights", "Return how much space should be reserved for text above and below the axes, as a pair of floats.", "XAxis.get_ticks_position", "Return the ticks position (\"top\", \"bottom\", \"default\", or \"unknown\").", "XAxis.set_ticks_position", "Set the ticks position.", "XAxis.set_label_position", "Set the label position (top or bottom)", "XAxis.tick_bottom", "Move ticks and ticklabels (if present) to the bottom of the axes.", "XAxis.tick_top", "Move ticks and ticklabels (if present) to the top of the axes.", "YAxis.axis_name", "Read-only name identifying the axis.", "YAxis.get_text_widths", "YAxis.get_ticks_position", "Return the ticks position (\"left\", \"right\", \"default\", or \"unknown\").", "YAxis.set_offset_position", "YAxis.set_ticks_position", "Set the ticks position.", "YAxis.set_label_position", "Set the label position (left or right)", "YAxis.tick_left", "Move ticks and ticklabels (if present) to the left of the axes.", "YAxis.tick_right", "Move ticks and ticklabels (if present) to the right of the axes.", "Axis.OFFSETTEXTPAD", "Axis.axes", "The Axes instance the artist resides in, or None.", "Axis.limit_range_for_scale", "Axis.reset_ticks", "Re-initialize the major and minor Tick lists.", "Axis.set_default_intervals", "Set the default limits for the axis data and view interval if they have not been not mutated yet.", "These methods should be used together with care, calling set_ticks to specify the desired tick locations before calling set_ticklabels to specify a matching series of labels. Calling set_ticks makes a FixedLocator; it's list of locations is then used by set_ticklabels to make an appropriate FuncFormatter.", "Axis.set_ticks", "Set this Axis' tick locations and optionally labels.", "Axis.set_ticklabels", "Set the text values of the tick labels.", "Abstract base class for the axis ticks, grid lines and labels.", "Ticks mark a position on an Axis. They contain two lines as markers and two labels; one each for the bottom and top positions (in case of an XAxis) or for the left and right positions (in case of a YAxis).", "The left/bottom tick marker.", "The right/top tick marker.", "The grid line associated with the label position.", "The left/bottom tick label.", "The right/top tick label.", "bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points", "Contains all the Artists needed to make an x tick - the tick line, the label text and the grid line", "bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points", "Contains all the Artists needed to make a Y tick - the tick line, the label text and the grid line", "bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points", "Tick.get_loc", "Return the tick location (data coords) as a scalar.", "Tick.get_pad", "Get the value of the tick label pad in points.", "Tick.get_pad_pixels", "Tick.get_tick_padding", "Get the length of the tick outside of the axes.", "Tick.get_tickdir", "Tick.get_view_interval", "Return the view limits (min, max) of the axis the tick belongs to.", "Tick.set_label1", "Set the label1 text.", "Tick.set_label2", "Set the label2 text.", "Tick.set_pad", "Set the tick label pad in points", "Tick.set_url", "Set the url of label1 and label2.", "Tick.update_position", "Set the location of tick in data coords with scalar loc."]}, {"name": "axis.Axis", "path": "axis_api#matplotlib.axis.Axis", "type": "axis", "text": ["Base class for XAxis and YAxis.", "The Axes instance the artist resides in, or None.", "Determines the major tick positions and their label format.", "Determines the minor tick positions and their label format.", "The axis label.", "The distance between the axis label and the tick labels. Defaults to rcParams[\"axes.labelpad\"] (default: 4.0) = 4.", "A Text object containing the data offset of the ticks (if any).", "The acceptance radius for containment tests. See also Axis.contains.", "The major ticks.", "The minor ticks.", "The Axes to which the created Axis belongs.", "The acceptance radius for containment tests. See also Axis.contains."]}, {"name": "axis.Axis.axes", "path": "_as_gen/matplotlib.axis.axis.axes", "type": "axis", "text": ["The Axes instance the artist resides in, or None."]}, {"name": "axis.Axis.axis_date", "path": "_as_gen/matplotlib.axis.axis.axis_date", "type": "axis", "text": ["Set up axis ticks and labels to treat data along this Axis as dates.", "The timezone used to create date labels."]}, {"name": "axis.Axis.cla", "path": "_as_gen/matplotlib.axis.axis.cla", "type": "axis", "text": ["[Deprecated] Clear this axis.", "Deprecated since version 3.4."]}, {"name": "axis.Axis.clear", "path": "_as_gen/matplotlib.axis.axis.clear", "type": "axis", "text": ["Clear the axis.", "This resets axis properties to their default values:"]}, {"name": "axis.Axis.contains", "path": "_as_gen/matplotlib.axis.axis.contains", "type": "axis", "text": ["Test whether the artist contains the mouse event.", "Whether any values are within the radius.", "An artist-specific dictionary of details of the event context, such as which points are contained in the pick radius. See the individual Artist subclasses for details."]}, {"name": "axis.Axis.convert_units", "path": "_as_gen/matplotlib.axis.axis.convert_units", "type": "axis", "text": []}, {"name": "axis.Axis.get_data_interval", "path": "_as_gen/matplotlib.axis.axis.get_data_interval", "type": "axis", "text": ["Return the (min, max) data limits of this axis."]}, {"name": "axis.Axis.get_gridlines", "path": "_as_gen/matplotlib.axis.axis.get_gridlines", "type": "axis", "text": ["Return this Axis' grid lines as a list of Line2Ds."]}, {"name": "axis.Axis.get_inverted", "path": "_as_gen/matplotlib.axis.axis.get_inverted", "type": "axis", "text": ["Return whether this Axis is oriented in the \"inverse\" direction.", "The \"normal\" direction is increasing to the right for the x-axis and to the top for the y-axis; the \"inverse\" direction is increasing to the left for the x-axis and to the bottom for the y-axis."]}, {"name": "axis.Axis.get_label", "path": "_as_gen/matplotlib.axis.axis.get_label", "type": "axis", "text": ["Return the axis label as a Text instance.", "Parasite Simple"]}, {"name": "axis.Axis.get_label_position", "path": "_as_gen/matplotlib.axis.axis.get_label_position", "type": "axis", "text": ["Return the label position (top or bottom)"]}, {"name": "axis.Axis.get_label_text", "path": "_as_gen/matplotlib.axis.axis.get_label_text", "type": "axis", "text": ["Get the text of the label."]}, {"name": "axis.Axis.get_major_formatter", "path": "_as_gen/matplotlib.axis.axis.get_major_formatter", "type": "axis", "text": ["Get the formatter of the major ticker."]}, {"name": "axis.Axis.get_major_locator", "path": "_as_gen/matplotlib.axis.axis.get_major_locator", "type": "axis", "text": ["Get the locator of the major ticker.", "Date tick labels", "Inset Locator Demo2", "Basic Usage"]}, {"name": "axis.Axis.get_major_ticks", "path": "_as_gen/matplotlib.axis.axis.get_major_ticks", "type": "axis", "text": ["Return the list of major Ticks."]}, {"name": "axis.Axis.get_majorticklabels", "path": "_as_gen/matplotlib.axis.axis.get_majorticklabels", "type": "axis", "text": ["Return this Axis' major tick labels, as a list of Text."]}, {"name": "axis.Axis.get_majorticklines", "path": "_as_gen/matplotlib.axis.axis.get_majorticklines", "type": "axis", "text": ["Return this Axis' major tick lines as a list of Line2Ds."]}, {"name": "axis.Axis.get_majorticklocs", "path": "_as_gen/matplotlib.axis.axis.get_majorticklocs", "type": "axis", "text": ["Return this Axis' major tick locations in data coordinates."]}, {"name": "axis.Axis.get_minor_formatter", "path": "_as_gen/matplotlib.axis.axis.get_minor_formatter", "type": "axis", "text": ["Get the formatter of the minor ticker."]}, {"name": "axis.Axis.get_minor_locator", "path": "_as_gen/matplotlib.axis.axis.get_minor_locator", "type": "axis", "text": ["Get the locator of the minor ticker."]}, {"name": "axis.Axis.get_minor_ticks", "path": "_as_gen/matplotlib.axis.axis.get_minor_ticks", "type": "axis", "text": ["Return the list of minor Ticks.", "Centering labels between ticks"]}, {"name": "axis.Axis.get_minorticklabels", "path": "_as_gen/matplotlib.axis.axis.get_minorticklabels", "type": "axis", "text": ["Return this Axis' minor tick labels, as a list of Text."]}, {"name": "axis.Axis.get_minorticklines", "path": "_as_gen/matplotlib.axis.axis.get_minorticklines", "type": "axis", "text": ["Return this Axis' minor tick lines as a list of Line2Ds."]}, {"name": "axis.Axis.get_minorticklocs", "path": "_as_gen/matplotlib.axis.axis.get_minorticklocs", "type": "axis", "text": ["Return this Axis' minor tick locations in data coordinates."]}, {"name": "axis.Axis.get_minpos", "path": "_as_gen/matplotlib.axis.axis.get_minpos", "type": "axis", "text": []}, {"name": "axis.Axis.get_offset_text", "path": "_as_gen/matplotlib.axis.axis.get_offset_text", "type": "axis", "text": ["Return the axis offsetText as a Text instance."]}, {"name": "axis.Axis.get_pickradius", "path": "_as_gen/matplotlib.axis.axis.get_pickradius", "type": "axis", "text": ["Return the depth of the axis used by the picker."]}, {"name": "axis.Axis.get_remove_overlapping_locs", "path": "_as_gen/matplotlib.axis.axis.get_remove_overlapping_locs", "type": "axis", "text": []}, {"name": "axis.Axis.get_scale", "path": "_as_gen/matplotlib.axis.axis.get_scale", "type": "axis", "text": ["Return this Axis' scale (as a str)."]}, {"name": "axis.Axis.get_tick_padding", "path": "_as_gen/matplotlib.axis.axis.get_tick_padding", "type": "axis", "text": []}, {"name": "axis.Axis.get_tick_space", "path": "_as_gen/matplotlib.axis.axis.get_tick_space", "type": "axis", "text": ["Return the estimated number of ticks that can fit on the axis."]}, {"name": "axis.Axis.get_ticklabel_extents", "path": "_as_gen/matplotlib.axis.axis.get_ticklabel_extents", "type": "axis", "text": ["Get the extents of the tick labels on either side of the axes."]}, {"name": "axis.Axis.get_ticklabels", "path": "_as_gen/matplotlib.axis.axis.get_ticklabels", "type": "axis", "text": ["Get this Axis' tick labels.", "Whether to return the minor or the major ticklabels.", "Overrides minor.", "Selects which ticklabels to return", "The tick label strings are not populated until a draw method has been called.", "See also: draw and draw.", "Image Masked", "Fig Axes Customize Simple", "Artist tutorial"]}, {"name": "axis.Axis.get_ticklines", "path": "_as_gen/matplotlib.axis.axis.get_ticklines", "type": "axis", "text": ["Return this Axis' tick lines as a list of Line2Ds.", "Fig Axes Customize Simple", "Artist tutorial"]}, {"name": "axis.Axis.get_ticklocs", "path": "_as_gen/matplotlib.axis.axis.get_ticklocs", "type": "axis", "text": ["Return this Axis' tick locations in data coordinates.", "Artist tutorial"]}, {"name": "axis.Axis.get_tightbbox", "path": "_as_gen/matplotlib.axis.axis.get_tightbbox", "type": "axis", "text": ["Return a bounding box that encloses the axis. It only accounts tick labels, axis label, and offsetText.", "If for_layout_only is True, then the width of the label (if this is an x-axis) or the height of the label (if this is a y-axis) is collapsed to near zero. This allows tight/constrained_layout to ignore too-long labels when doing their layout."]}, {"name": "axis.Axis.get_units", "path": "_as_gen/matplotlib.axis.axis.get_units", "type": "axis", "text": ["Return the units for axis."]}, {"name": "axis.Axis.get_view_interval", "path": "_as_gen/matplotlib.axis.axis.get_view_interval", "type": "axis", "text": ["Return the (min, max) view limits of this axis."]}, {"name": "axis.Axis.grid", "path": "_as_gen/matplotlib.axis.axis.grid", "type": "axis", "text": ["Configure the grid lines.", "Whether to show the grid lines. If any kwargs are supplied, it is assumed you want the grid on and visible will be set to True.", "If visible is None and there are no kwargs, this toggles the visibility of the lines.", "The grid lines to apply the changes on.", "Define the line properties of the grid, e.g.:", "Box plots with custom fill colors", "Boxplots", "Box plot vs. violin plot comparison", "Symlog Demo"]}, {"name": "axis.Axis.limit_range_for_scale", "path": "_as_gen/matplotlib.axis.axis.limit_range_for_scale", "type": "axis", "text": []}, {"name": "axis.Axis.OFFSETTEXTPAD", "path": "_as_gen/matplotlib.axis.axis.offsettextpad", "type": "axis", "text": []}, {"name": "axis.Axis.remove_overlapping_locs", "path": "_as_gen/matplotlib.axis.axis.remove_overlapping_locs", "type": "axis", "text": ["If minor ticker locations that overlap with major ticker locations should be trimmed."]}, {"name": "axis.Axis.reset_ticks", "path": "_as_gen/matplotlib.axis.axis.reset_ticks", "type": "axis", "text": ["Re-initialize the major and minor Tick lists.", "Each list starts with a single fresh Tick."]}, {"name": "axis.Axis.set_data_interval", "path": "_as_gen/matplotlib.axis.axis.set_data_interval", "type": "axis", "text": ["Set the axis data limits. This method is for internal use.", "If ignore is False (the default), this method will never reduce the preexisting data limits, only expand them if vmin or vmax are not within them. Moreover, the order of vmin and vmax does not matter; the orientation of the axis will not change.", "If ignore is True, the data limits will be set exactly to (vmin,\nvmax) in that order."]}, {"name": "axis.Axis.set_default_intervals", "path": "_as_gen/matplotlib.axis.axis.set_default_intervals", "type": "axis", "text": ["Set the default limits for the axis data and view interval if they have not been not mutated yet."]}, {"name": "axis.Axis.set_inverted", "path": "_as_gen/matplotlib.axis.axis.set_inverted", "type": "axis", "text": ["Set whether this Axis is oriented in the \"inverse\" direction.", "The \"normal\" direction is increasing to the right for the x-axis and to the top for the y-axis; the \"inverse\" direction is increasing to the left for the x-axis and to the bottom for the y-axis."]}, {"name": "axis.Axis.set_label_coords", "path": "_as_gen/matplotlib.axis.axis.set_label_coords", "type": "axis", "text": ["Set the coordinates of the label.", "By default, the x coordinate of the y label and the y coordinate of the x label are determined by the tick label bounding boxes, but this can lead to poor alignment of multiple labels if there are multiple axes.", "You can also specify the coordinate system of the label with the transform. If None, the default coordinate system will be the axes coordinate system: (0, 0) is bottom left, (0.5, 0.5) is center, etc."]}, {"name": "axis.Axis.set_label_position", "path": "_as_gen/matplotlib.axis.axis.set_label_position", "type": "axis", "text": ["Set the label position (top or bottom)", "Title positioning"]}, {"name": "axis.Axis.set_label_text", "path": "_as_gen/matplotlib.axis.axis.set_label_text", "type": "axis", "text": ["Set the text value of the axis label.", "Text string.", "Text properties.", "Merged into fontdict."]}, {"name": "axis.Axis.set_major_formatter", "path": "_as_gen/matplotlib.axis.axis.set_major_formatter", "type": "axis", "text": ["Set the formatter of the major ticker.", "In addition to a Formatter instance, this also accepts a str or function.", "For a str a StrMethodFormatter is used. The field used for the value must be labeled 'x' and the field used for the position must be labeled 'pos'. See the StrMethodFormatter documentation for more information.", "For a function, a FuncFormatter is used. The function must take two inputs (a tick value x and a position pos), and return a string containing the corresponding tick label. See the FuncFormatter documentation for more information.", "Creating a timeline with lines, dates, and text", "Date tick labels", "Custom tick formatter for time series", "Labeling ticks using engineering notation", "Dollar Ticks", "Bachelor's degrees by gender", "3D surface (colormap)", "SkewT-logP diagram: using transforms and custom projections", "Centering labels between ticks", "Custom Ticker1", "Formatting date ticks using ConciseDateFormatter", "Date Demo Convert", "Placing date ticks using recurrence rules", "Date Index Formatter", "Major and minor ticks", "Setting tick labels from a list of values", "Basic Usage", "The Lifecycle of a Plot", "Artist tutorial", "Choosing Colormaps in Matplotlib", "Text in Matplotlib Plots"]}, {"name": "axis.Axis.set_major_locator", "path": "_as_gen/matplotlib.axis.axis.set_major_locator", "type": "axis", "text": ["Set the locator of the major ticker.", "Hatch-filled histograms", "Creating a timeline with lines, dates, and text", "Date tick labels", "Anatomy of a figure", "3D surface (colormap)", "3D surface (checkerboard)", "Scales", "MRI With EEG", "SkewT-logP diagram: using transforms and custom projections", "Centering labels between ticks", "Formatting date ticks using ConciseDateFormatter", "Date Demo Convert", "Placing date ticks using recurrence rules", "Major and minor ticks", "Setting tick labels from a list of values", "Choosing Colormaps in Matplotlib", "Text in Matplotlib Plots"]}, {"name": "axis.Axis.set_minor_formatter", "path": "_as_gen/matplotlib.axis.axis.set_minor_formatter", "type": "axis", "text": ["Set the formatter of the minor ticker.", "In addition to a Formatter instance, this also accepts a str or function. See Axis.set_major_formatter for more information.", "Anatomy of a figure", "Scales", "SkewT-logP diagram: using transforms and custom projections", "Centering labels between ticks"]}, {"name": "axis.Axis.set_minor_locator", "path": "_as_gen/matplotlib.axis.axis.set_minor_locator", "type": "axis", "text": ["Set the locator of the minor ticker.", "Secondary Axis", "Date tick labels", "Anatomy of a figure", "Centering labels between ticks", "Date Demo Convert", "Major and minor ticks"]}, {"name": "axis.Axis.set_pickradius", "path": "_as_gen/matplotlib.axis.axis.set_pickradius", "type": "axis", "text": ["Set the depth of the axis used by the picker."]}, {"name": "axis.Axis.set_remove_overlapping_locs", "path": "_as_gen/matplotlib.axis.axis.set_remove_overlapping_locs", "type": "axis", "text": []}, {"name": "axis.Axis.set_tick_params", "path": "_as_gen/matplotlib.axis.axis.set_tick_params", "type": "axis", "text": ["Set appearance parameters for ticks, ticklabels, and gridlines.", "For documentation of keyword arguments, see matplotlib.axes.Axes.tick_params().", "Violin plot customization", "Dollar Ticks", "Scatter Histogram (Locatable Axes)", "Pythonic Matplotlib", "Placing date ticks using recurrence rules", "Date Precision and Epochs", "Choosing Colormaps in Matplotlib"]}, {"name": "axis.Axis.set_ticklabels", "path": "_as_gen/matplotlib.axis.axis.set_ticklabels", "type": "axis", "text": ["Set the text values of the tick labels.", "Discouraged", "The use of this method is discouraged, because of the dependency on tick positions. In most cases, you'll want to use set_[x/y]ticks(positions, labels) instead.", "If you are using this method, you should always fix the tick positions before, e.g. by using Axis.set_ticks or by explicitly setting a FixedLocator. Otherwise, ticks are free to move and the labels may end up in unexpected positions.", "Texts for labeling each tick location in the sequence set by Axis.set_ticks; the number of labels must match the number of locations.", "If True, set minor ticks instead of major ticks.", "Text properties.", "For each tick, includes tick.label1 if it is visible, then tick.label2 if it is visible, in that order."]}, {"name": "axis.Axis.set_ticks", "path": "_as_gen/matplotlib.axis.axis.set_ticks", "type": "axis", "text": ["Set this Axis' tick locations and optionally labels.", "If necessary, the view limits of the Axis are expanded so that all given ticks are visible.", "List of tick locations.", "List of tick labels. If not set, the labels show the data value.", "If False, set the major ticks; if True, the minor ticks.", "Text properties for the labels. These take effect only if you pass labels. In other cases, please use tick_params.", "The mandatory expansion of the view limits is an intentional design choice to prevent the surprise of a non-visible tick. If you need other limits, you should set the limits explicitly after setting the ticks.", "Spine Placement"]}, {"name": "axis.Axis.set_units", "path": "_as_gen/matplotlib.axis.axis.set_units", "type": "axis", "text": ["Set the units for axis.", "The units of any shared axis will also be updated.", "Artist tests", "Group barchart with units", "Unit handling"]}, {"name": "axis.Axis.set_view_interval", "path": "_as_gen/matplotlib.axis.axis.set_view_interval", "type": "axis", "text": ["Set the axis view limits. This method is for internal use; Matplotlib users should typically use e.g. set_xlim or set_ylim.", "If ignore is False (the default), this method will never reduce the preexisting view limits, only expand them if vmin or vmax are not within them. Moreover, the order of vmin and vmax does not matter; the orientation of the axis will not change.", "If ignore is True, the view limits will be set exactly to (vmin,\nvmax) in that order."]}, {"name": "axis.Axis.update_units", "path": "_as_gen/matplotlib.axis.axis.update_units", "type": "axis", "text": ["Introspect data for units converter and update the axis.converter instance if necessary. Return True if data is registered for unit conversion."]}, {"name": "axis.Tick", "path": "axis_api#matplotlib.axis.Tick", "type": "axis", "text": ["Abstract base class for the axis ticks, grid lines and labels.", "Ticks mark a position on an Axis. They contain two lines as markers and two labels; one each for the bottom and top positions (in case of an XAxis) or for the left and right positions (in case of a YAxis).", "The left/bottom tick marker.", "The right/top tick marker.", "The grid line associated with the label position.", "The left/bottom tick label.", "The right/top tick label.", "bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points"]}, {"name": "axis.Tick.get_loc", "path": "_as_gen/matplotlib.axis.tick.get_loc", "type": "axis", "text": ["Return the tick location (data coords) as a scalar."]}, {"name": "axis.Tick.get_pad", "path": "_as_gen/matplotlib.axis.tick.get_pad", "type": "axis", "text": ["Get the value of the tick label pad in points."]}, {"name": "axis.Tick.get_pad_pixels", "path": "_as_gen/matplotlib.axis.tick.get_pad_pixels", "type": "axis", "text": []}, {"name": "axis.Tick.get_tick_padding", "path": "_as_gen/matplotlib.axis.tick.get_tick_padding", "type": "axis", "text": ["Get the length of the tick outside of the axes."]}, {"name": "axis.Tick.get_tickdir", "path": "_as_gen/matplotlib.axis.tick.get_tickdir", "type": "axis", "text": []}, {"name": "axis.Tick.get_view_interval", "path": "_as_gen/matplotlib.axis.tick.get_view_interval", "type": "axis", "text": ["Return the view limits (min, max) of the axis the tick belongs to."]}, {"name": "axis.Tick.set_label1", "path": "_as_gen/matplotlib.axis.tick.set_label1", "type": "axis", "text": ["Set the label1 text."]}, {"name": "axis.Tick.set_label2", "path": "_as_gen/matplotlib.axis.tick.set_label2", "type": "axis", "text": ["Set the label2 text."]}, {"name": "axis.Tick.set_pad", "path": "_as_gen/matplotlib.axis.tick.set_pad", "type": "axis", "text": ["Set the tick label pad in points"]}, {"name": "axis.Tick.set_url", "path": "_as_gen/matplotlib.axis.tick.set_url", "type": "axis", "text": ["Set the url of label1 and label2."]}, {"name": "axis.Tick.update_position", "path": "_as_gen/matplotlib.axis.tick.update_position", "type": "axis", "text": ["Set the location of tick in data coords with scalar loc."]}, {"name": "axis.Ticker", "path": "axis_api#matplotlib.axis.Ticker", "type": "axis", "text": ["A container for the objects defining tick position and format.", "Determines the positions of the ticks.", "Determines the format of the tick labels."]}, {"name": "axis.XAxis", "path": "axis_api#matplotlib.axis.XAxis", "type": "axis", "text": ["The Axes to which the created Axis belongs.", "The acceptance radius for containment tests. See also Axis.contains."]}, {"name": "axis.XAxis.axis_name", "path": "_as_gen/matplotlib.axis.xaxis.axis_name", "type": "axis", "text": ["Read-only name identifying the axis."]}, {"name": "axis.XAxis.get_text_heights", "path": "_as_gen/matplotlib.axis.xaxis.get_text_heights", "type": "axis", "text": ["Return how much space should be reserved for text above and below the axes, as a pair of floats."]}, {"name": "axis.XAxis.get_ticks_position", "path": "_as_gen/matplotlib.axis.xaxis.get_ticks_position", "type": "axis", "text": ["Return the ticks position (\"top\", \"bottom\", \"default\", or \"unknown\")."]}, {"name": "axis.XAxis.set_label_position", "path": "_as_gen/matplotlib.axis.xaxis.set_label_position", "type": "axis", "text": ["Set the label position (top or bottom)", "Title positioning"]}, {"name": "axis.XAxis.set_ticks_position", "path": "_as_gen/matplotlib.axis.xaxis.set_ticks_position", "type": "axis", "text": ["Set the ticks position.", "'both' sets the ticks to appear on both positions, but does not change the tick labels. 'default' resets the tick positions to the default: ticks on both positions, labels at bottom. 'none' can be used if you don't want any ticks. 'none' and 'both' affect only the ticks, not the labels.", "Violin plot customization", "Colorbar with AxesDivider", "Controlling the position and size of colorbars with Inset Axes", "Integral as the area under a curve", "XKCD", "Spine Placement", "Spines", "Custom spine bounds", "Dropped spines", "Choosing Colormaps in Matplotlib"]}, {"name": "axis.XAxis.tick_bottom", "path": "_as_gen/matplotlib.axis.xaxis.tick_bottom", "type": "axis", "text": ["Move ticks and ticklabels (if present) to the bottom of the axes.", "Broken Axis", "Bachelor's degrees by gender"]}, {"name": "axis.XAxis.tick_top", "path": "_as_gen/matplotlib.axis.xaxis.tick_top", "type": "axis", "text": ["Move ticks and ticklabels (if present) to the top of the axes.", "Broken Axis", "Title positioning"]}, {"name": "axis.XTick", "path": "axis_api#matplotlib.axis.XTick", "type": "axis", "text": ["Contains all the Artists needed to make an x tick - the tick line, the label text and the grid line", "bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points"]}, {"name": "axis.YAxis", "path": "axis_api#matplotlib.axis.YAxis", "type": "axis", "text": ["The Axes to which the created Axis belongs.", "The acceptance radius for containment tests. See also Axis.contains."]}, {"name": "axis.YAxis.axis_name", "path": "_as_gen/matplotlib.axis.yaxis.axis_name", "type": "axis", "text": ["Read-only name identifying the axis."]}, {"name": "axis.YAxis.get_text_widths", "path": "_as_gen/matplotlib.axis.yaxis.get_text_widths", "type": "axis", "text": []}, {"name": "axis.YAxis.get_ticks_position", "path": "_as_gen/matplotlib.axis.yaxis.get_ticks_position", "type": "axis", "text": ["Return the ticks position (\"left\", \"right\", \"default\", or \"unknown\")."]}, {"name": "axis.YAxis.set_label_position", "path": "_as_gen/matplotlib.axis.yaxis.set_label_position", "type": "axis", "text": ["Set the label position (left or right)"]}, {"name": "axis.YAxis.set_offset_position", "path": "_as_gen/matplotlib.axis.yaxis.set_offset_position", "type": "axis", "text": []}, {"name": "axis.YAxis.set_ticks_position", "path": "_as_gen/matplotlib.axis.yaxis.set_ticks_position", "type": "axis", "text": ["Set the ticks position.", "'both' sets the ticks to appear on both positions, but does not change the tick labels. 'default' resets the tick positions to the default: ticks on both positions, labels at left. 'none' can be used if you don't want any ticks. 'none' and 'both' affect only the ticks, not the labels.", "Spine Placement", "Spines", "Custom spine bounds", "Dropped spines"]}, {"name": "axis.YAxis.tick_left", "path": "_as_gen/matplotlib.axis.yaxis.tick_left", "type": "axis", "text": ["Move ticks and ticklabels (if present) to the left of the axes.", "Bachelor's degrees by gender", "Set default y-axis tick labels on the right"]}, {"name": "axis.YAxis.tick_right", "path": "_as_gen/matplotlib.axis.yaxis.tick_right", "type": "axis", "text": ["Move ticks and ticklabels (if present) to the right of the axes."]}, {"name": "axis.YTick", "path": "axis_api#matplotlib.axis.YTick", "type": "axis", "text": ["Contains all the Artists needed to make a Y tick - the tick line, the label text and the grid line", "bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points"]}, {"name": "axisartist", "path": "toolkits/axisartist", "type": "axisartist", "text": ["The axisartist namespace provides a derived Axes implementation (mpl_toolkits.axisartist.Axes), designed to support curvilinear grids. The biggest difference is that the artists that are responsible for drawing axis lines, ticks, ticklabels, and axis labels are separated out from Matplotlib's Axis class.", "You can find a tutorial describing usage of axisartist at the axisartist user guide.", "The submodules of the axisartist API are:", "axisartist.angle_helper", "axisartist.axes_divider", "axisartist.axes_grid", "axisartist.axes_rgb", "axisartist.axis_artist", "The axis_artist module implements custom artists to draw axis elements (axis lines and labels, tick lines and labels, grid lines).", "axisartist.axisline_style", "axisartist.axislines", "Axislines includes modified implementation of the Axes class.", "axisartist.clip_path", "axisartist.floating_axes", "An experimental support for curvilinear grid.", "axisartist.grid_finder", "axisartist.grid_helper_curvelinear", "An experimental support for curvilinear grid.", "axisartist.parasite_axes"]}, {"name": "axisartist.angle_helper", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper", "type": "axisartist", "text": ["ExtremeFinderCycle(nx, ny[, lon_cycle, ...])", "This subclass handles the case where one or both coordinates should be taken modulo 360, or be restricted to not exceed a specific range.", "FormatterDMS()", "FormatterHMS()", "LocatorBase(nbins[, include_last])", "LocatorD(nbins[, include_last])", "LocatorDM(nbins[, include_last])", "LocatorDMS(nbins[, include_last])", "LocatorH(nbins[, include_last])", "LocatorHM(nbins[, include_last])", "LocatorHMS(nbins[, include_last])", "select_step(v1, v2, nv[, hour, ...])", "select_step24(v1, v2, nv[, include_last, ...])", "select_step360(v1, v2, nv[, include_last, ...])", "select_step_degree(dv)", "select_step_hour(dv)", "select_step_sub(dv)"]}, {"name": "axisartist.angle_helper.ExtremeFinderCycle", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.extremefindercycle", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple", "This subclass handles the case where one or both coordinates should be taken modulo 360, or be restricted to not exceed a specific range.", "The number of samples in each direction.", "If not None, values in the corresponding direction are taken modulo lon_cycle or lat_cycle; in theory this can be any number but the implementation actually assumes that it is 360 (if not None); other values give nonsensical results.", "This is done by \"unwrapping\" the transformed grid coordinates so that jumps are less than a half-cycle; then normalizing the span to no more than a full cycle.", "For example, if values are in the union of the [0, 2] and [358, 360] intervals (typically, angles measured modulo 360), the values in the second interval are normalized to [-2, 0] instead so that the values now cover [-2, 2]. If values are in a range of [5, 1000], this gets normalized to [5, 365].", "If not None, the computed bounding box is clipped to the given range in the corresponding direction.", "Compute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2).", "The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes.", "The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling.", "As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions.", "axis_direction demo", "Curvilinear grid demo", "floating_axis demo", "Simple Axis Pad"]}, {"name": "axisartist.angle_helper.ExtremeFinderCycle.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.extremefindercycle#mpl_toolkits.axisartist.angle_helper.ExtremeFinderCycle.__call__", "type": "axisartist", "text": ["Compute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2).", "The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes.", "The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling.", "As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions."]}, {"name": "axisartist.angle_helper.FormatterDMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms", "type": "axisartist", "text": ["Bases: object", "Call self as a function.", "axis_direction demo", "Curvilinear grid demo", "mpl_toolkits.axisartist.floating_axes features", "floating_axis demo", "Simple Axis Pad"]}, {"name": "axisartist.angle_helper.FormatterDMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.angle_helper.FormatterDMS.deg_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.deg_mark", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d_m", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d_m", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d_m_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d_m_partial", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d_ms", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d_ms", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_ds", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_ds", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_s_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_s_partial", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_ss_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_ss_partial", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterDMS.min_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.min_mark", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterDMS.sec_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.sec_mark", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterHMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.angle_helper.FormatterDMS", "Call self as a function.", "mpl_toolkits.axisartist.floating_axes features"]}, {"name": "axisartist.angle_helper.FormatterHMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.angle_helper.FormatterHMS.deg_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.deg_mark", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d_m", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d_m", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d_m_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d_m_partial", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d_ms", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d_ms", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_ds", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_ds", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_s_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_s_partial", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_ss_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_ss_partial", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterHMS.min_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.min_mark", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.FormatterHMS.sec_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.sec_mark", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.LocatorBase", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorbase", "type": "axisartist", "text": ["Bases: object", "axis_direction demo", "Curvilinear grid demo", "mpl_toolkits.axisartist.floating_axes features", "floating_axis demo", "Simple Axis Pad"]}, {"name": "axisartist.angle_helper.LocatorBase.set_params()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorbase#mpl_toolkits.axisartist.angle_helper.LocatorBase.set_params", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.LocatorD", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatord", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.angle_helper.LocatorBase", "Call self as a function."]}, {"name": "axisartist.angle_helper.LocatorD.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatord#mpl_toolkits.axisartist.angle_helper.LocatorD.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.angle_helper.LocatorDM", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordm", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.angle_helper.LocatorBase", "Call self as a function."]}, {"name": "axisartist.angle_helper.LocatorDM.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordm#mpl_toolkits.axisartist.angle_helper.LocatorDM.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.angle_helper.LocatorDMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordms", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.angle_helper.LocatorBase", "Call self as a function.", "axis_direction demo", "Curvilinear grid demo", "floating_axis demo", "Simple Axis Pad"]}, {"name": "axisartist.angle_helper.LocatorDMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordms#mpl_toolkits.axisartist.angle_helper.LocatorDMS.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.angle_helper.LocatorH", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorh", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.angle_helper.LocatorBase", "Call self as a function."]}, {"name": "axisartist.angle_helper.LocatorH.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorh#mpl_toolkits.axisartist.angle_helper.LocatorH.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.angle_helper.LocatorHM", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhm", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.angle_helper.LocatorBase", "Call self as a function."]}, {"name": "axisartist.angle_helper.LocatorHM.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhm#mpl_toolkits.axisartist.angle_helper.LocatorHM.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.angle_helper.LocatorHMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhms", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.angle_helper.LocatorBase", "Call self as a function.", "mpl_toolkits.axisartist.floating_axes features"]}, {"name": "axisartist.angle_helper.LocatorHMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhms#mpl_toolkits.axisartist.angle_helper.LocatorHMS.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.angle_helper.select_step", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.select_step24", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step24", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.select_step360", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step360", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.select_step_degree", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step_degree", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.select_step_hour", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step_hour", "type": "axisartist", "text": []}, {"name": "axisartist.angle_helper.select_step_sub", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step_sub", "type": "axisartist", "text": []}, {"name": "axisartist.axes_divider", "path": "_as_gen/mpl_toolkits.axisartist.axes_divider", "type": "axisartist", "text": []}, {"name": "axisartist.axes_grid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid", "type": "axisartist", "text": ["AxesGrid", "alias of mpl_toolkits.axisartist.axes_grid.ImageGrid", "CbarAxes(*args, orientation, **kwargs)", "[Deprecated]", "Grid(fig, rect, nrows_ncols[, ngrids, ...])", "ImageGrid(fig, rect, nrows_ncols[, ngrids, ...])"]}, {"name": "axisartist.axes_grid.AxesGrid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.axesgrid", "type": "axisartist", "text": ["alias of mpl_toolkits.axisartist.axes_grid.ImageGrid"]}, {"name": "axisartist.axes_grid.CbarAxes", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.cbaraxes", "type": "axisartist", "text": ["Bases: mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase, mpl_toolkits.axisartist.axislines.Axes", "[Deprecated]", "Deprecated since version 3.5: ", "Build an Axes in a figure.", "The Axes is built in the Figure fig.", "The Axes is built in the rectangle rect. rect is in Figure coordinates.", "The x or y axis is shared with the x or y axis in the input Axes.", "Whether the Axes frame is visible.", "Set a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.", "Other optional keyword arguments:", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "The new Axes object.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float"]}, {"name": "axisartist.axes_grid.CbarAxes.set()", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.cbaraxes#mpl_toolkits.axisartist.axes_grid.CbarAxes.set", "type": "axisartist", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float"]}, {"name": "axisartist.axes_grid.Grid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.grid", "type": "axisartist", "text": ["Bases: mpl_toolkits.axes_grid1.axes_grid.Grid", "The parent figure.", "The axes position, as a (left, bottom, width, height) tuple or as a three-digit subplot position code (e.g., \"121\").", "Number of rows and columns in the grid.", "If not None, only the first ngrids axes in the grid are created.", "Whether axes are created in row-major (\"row by row\") or column-major order (\"column by column\"). This also affects the order in which axes are accessed using indexing (grid[index]).", "Padding or (horizontal padding, vertical padding) between axes, in inches.", "Whether all axes share their x- and y-axis. Overrides share_x and share_y.", "Whether all axes of a column share their x-axis.", "Whether all axes of a row share their y-axis.", "Determines which axes will get tick labels:", "Whether the axes aspect ratio follows the aspect ratio of the data limits."]}, {"name": "axisartist.axes_grid.ImageGrid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.imagegrid", "type": "axisartist", "text": ["Bases: mpl_toolkits.axes_grid1.axes_grid.ImageGrid", "The parent figure.", "The axes position, as a (left, bottom, width, height) tuple or as a three-digit subplot position code (e.g., \"121\").", "Number of rows and columns in the grid.", "If not None, only the first ngrids axes in the grid are created.", "Whether axes are created in row-major (\"row by row\") or column-major order (\"column by column\"). This also affects the order in which axes are accessed using indexing (grid[index]).", "Padding or (horizontal padding, vertical padding) between axes, in inches.", "Whether all axes share their x- and y-axis.", "Whether the axes aspect ratio follows the aspect ratio of the data limits.", "Determines which axes will get tick labels:", "Whether to create a colorbar for \"each\" axes, a \"single\" colorbar for the entire grid, colorbars only for axes on the \"edge\" determined by cbar_location, or no colorbars. The colorbars are stored in the cbar_axes attribute.", "Padding between the image axes and the colorbar axes.", "Colorbar size.", "If True, each axes in the grid has a cax attribute that is bound to associated cbar_axes."]}, {"name": "axisartist.axes_rgb", "path": "_as_gen/mpl_toolkits.axisartist.axes_rgb", "type": "axisartist", "text": ["RGBAxes(*args[, pad])"]}, {"name": "axisartist.axes_rgb.RGBAxes", "path": "_as_gen/mpl_toolkits.axisartist.axes_rgb.rgbaxes", "type": "axisartist", "text": ["Bases: mpl_toolkits.axes_grid1.axes_rgb.RGBAxes", "fraction of the axes height to put as padding.", "Unpacked into axes_class() init for RGB", "Unpacked into axes_class() init for RGB, R, G, B axes"]}, {"name": "axisartist.axis_artist", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist", "type": "axisartist", "text": ["The axis_artist module implements custom artists to draw axis elements (axis lines and labels, tick lines and labels, grid lines).", "Axis lines and labels and tick lines and labels are managed by the AxisArtist class; grid lines are managed by the GridlinesCollection class.", "There is one AxisArtist per Axis; it can be accessed through the axis dictionary of the parent Axes (which should be a mpl_toolkits.axislines.Axes), e.g. ax.axis[\"bottom\"].", "Children of the AxisArtist are accessed as attributes: .line and .label for the axis line and label, .major_ticks, .major_ticklabels, .minor_ticks, .minor_ticklabels for the tick lines and labels (e.g. ax.axis[\"bottom\"].line).", "Children properties (colors, fonts, line widths, etc.) can be set using setters, e.g.", "However, things like the locations of ticks, and their ticklabels need to be changed from the side of the grid_helper.", "AxisArtist, AxisLabel, TickLabels have an axis_direction attribute, which adjusts the location, angle, etc. The axis_direction must be one of \"left\", \"right\", \"bottom\", \"top\", and follows the Matplotlib convention for rectangular axis.", "For example, for the bottom axis (the left and right is relative to the direction of the increasing coordinate),", "The text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis.", "Parameter", "left", "bottom", "right", "top", "ticklabels location", "left", "right", "right", "left", "axislabel location", "left", "right", "right", "left", "ticklabels angle", "90", "0", "-90", "180", "axislabel angle", "180", "0", "0", "180", "ticklabel va", "center", "baseline", "center", "baseline", "axislabel va", "center", "top", "center", "bottom", "ticklabel ha", "right", "center", "right", "center", "axislabel ha", "right", "center", "right", "center", "Ticks are by default direct opposite side of the ticklabels. To make ticks to the same side of the ticklabels,", "The following attributes can be customized (use the set_xxx methods):", "AttributeCopier()", "AxisArtist(axes, helper[, offset, ...])", "An artist which draws axis (a line along which the n-th axes coord is constant) line, ticks, ticklabels, and axis label.", "AxisLabel(*args[, axis_direction, axis])", "Axis Label.", "GridlinesCollection(*args[, which, axis])", "LabelBase(*args, **kwargs)", "A base class for AxisLabel and TickLabels.", "TickLabels(*[, axis_direction])", "Tick Labels.", "Ticks(ticksize[, tick_out, axis])", "Ticks are derived from Line2D, and note that ticks themselves are markers."]}, {"name": "axisartist.axis_artist.AttributeCopier", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.attributecopier", "type": "axisartist", "text": ["Bases: object", "Return the underlying artist that actually defines some properties (e.g., color) of this artist."]}, {"name": "axisartist.axis_artist.AttributeCopier.get_attribute_from_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.attributecopier#mpl_toolkits.axisartist.axis_artist.AttributeCopier.get_attribute_from_ref_artist", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.AttributeCopier.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.attributecopier#mpl_toolkits.axisartist.axis_artist.AttributeCopier.get_ref_artist", "type": "axisartist", "text": ["Return the underlying artist that actually defines some properties (e.g., color) of this artist."]}, {"name": "axisartist.axis_artist.AxisArtist", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist", "type": "axisartist", "text": ["Bases: matplotlib.artist.Artist", "An artist which draws axis (a line along which the n-th axes coord is constant) line, ticks, ticklabels, and axis label.", "Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses.", "Return the current axisline style.", "Return axis artist helper instance.", "Like Artist.get_window_extent, but includes any clipping.", "renderer that will be used to draw the figures (i.e. fig.canvas.get_renderer())", "The enclosing bounding box (in figure pixel coordinates).", "Return the Transform instance used by this artist.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "axis_direction", "unknown", "axislabel_direction", "{\"+\", \"-\"}", "axisline_style", "str or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "in_layout", "bool", "label", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "ticklabel_direction", "{\"+\", \"-\"}", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float", "Adjust the direction, text angle, text alignment of ticklabels, labels following the matplotlib convention for the rectangle axes.", "The axis_direction must be one of [left, right, bottom, top].", "property", "left", "bottom", "right", "top", "ticklabels location", "\"-\"", "\"+\"", "\"+\"", "\"-\"", "axislabel location", "\"-\"", "\"+\"", "\"+\"", "\"-\"", "ticklabels angle", "90", "0", "-90", "180", "ticklabel va", "center", "baseline", "center", "baseline", "ticklabel ha", "right", "center", "right", "center", "axislabel angle", "180", "0", "0", "180", "axislabel va", "center", "top", "center", "bottom", "axislabel ha", "right", "center", "right", "center", "Note that the direction \"+\" and \"-\" are relative to the direction of the increasing coordinate. Also, the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis.", "Adjust the direction of the axislabel.", "Note that the label_directions '+' and '-' are relative to the direction of the increasing coordinate.", "Set the axisline style.", "The new style is completely defined by the passed attributes. Existing style attributes are forgotten.", "The line style, e.g. '->', optionally followed by a comma-separated list of attributes. Alternatively, the attributes can be provided as keywords.", "If None this returns a string containing the available styles.", "The following two commands are equal: >>> set_axisline_style(\"->,size=1.5\") >>> set_axisline_style(\"->\", size=1.5)", "Set a label that will be displayed in the legend.", "s will be converted to a string by calling str.", "Adjust the direction of the ticklabel.", "Note that the label_directions '+' and '-' are relative to the direction of the increasing coordinate.", "Toggle visibility of ticks, ticklabels, and (axis) label. To turn all off,", "To turn all off but ticks on", "To turn all on but (axis) label off"]}, {"name": "axisartist.axis_artist.AxisArtist.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.draw", "type": "axisartist", "text": ["Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses."]}, {"name": "axisartist.axis_artist.AxisArtist.get_axisline_style()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_axisline_style", "type": "axisartist", "text": ["Return the current axisline style."]}, {"name": "axisartist.axis_artist.AxisArtist.get_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_helper", "type": "axisartist", "text": ["Return axis artist helper instance."]}, {"name": "axisartist.axis_artist.AxisArtist.get_tightbbox()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_tightbbox", "type": "axisartist", "text": ["Like Artist.get_window_extent, but includes any clipping.", "renderer that will be used to draw the figures (i.e. fig.canvas.get_renderer())", "The enclosing bounding box (in figure pixel coordinates)."]}, {"name": "axisartist.axis_artist.AxisArtist.get_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_transform", "type": "axisartist", "text": ["Return the Transform instance used by this artist."]}, {"name": "axisartist.axis_artist.AxisArtist.invert_ticklabel_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.invert_ticklabel_direction", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.AxisArtist.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set", "type": "axisartist", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "axis_direction", "unknown", "axislabel_direction", "{\"+\", \"-\"}", "axisline_style", "str or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "figure", "Figure", "gid", "str", "in_layout", "bool", "label", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "ticklabel_direction", "{\"+\", \"-\"}", "transform", "Transform", "url", "str", "visible", "bool", "zorder", "float"]}, {"name": "axisartist.axis_artist.AxisArtist.set_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_axis_direction", "type": "axisartist", "text": ["Adjust the direction, text angle, text alignment of ticklabels, labels following the matplotlib convention for the rectangle axes.", "The axis_direction must be one of [left, right, bottom, top].", "property", "left", "bottom", "right", "top", "ticklabels location", "\"-\"", "\"+\"", "\"+\"", "\"-\"", "axislabel location", "\"-\"", "\"+\"", "\"+\"", "\"-\"", "ticklabels angle", "90", "0", "-90", "180", "ticklabel va", "center", "baseline", "center", "baseline", "ticklabel ha", "right", "center", "right", "center", "axislabel angle", "180", "0", "0", "180", "axislabel va", "center", "top", "center", "bottom", "axislabel ha", "right", "center", "right", "center", "Note that the direction \"+\" and \"-\" are relative to the direction of the increasing coordinate. Also, the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis."]}, {"name": "axisartist.axis_artist.AxisArtist.set_axislabel_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_axislabel_direction", "type": "axisartist", "text": ["Adjust the direction of the axislabel.", "Note that the label_directions '+' and '-' are relative to the direction of the increasing coordinate."]}, {"name": "axisartist.axis_artist.AxisArtist.set_axisline_style()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_axisline_style", "type": "axisartist", "text": ["Set the axisline style.", "The new style is completely defined by the passed attributes. Existing style attributes are forgotten.", "The line style, e.g. '->', optionally followed by a comma-separated list of attributes. Alternatively, the attributes can be provided as keywords.", "If None this returns a string containing the available styles.", "The following two commands are equal: >>> set_axisline_style(\"->,size=1.5\") >>> set_axisline_style(\"->\", size=1.5)"]}, {"name": "axisartist.axis_artist.AxisArtist.set_label()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_label", "type": "axisartist", "text": ["Set a label that will be displayed in the legend.", "s will be converted to a string by calling str."]}, {"name": "axisartist.axis_artist.AxisArtist.set_ticklabel_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_ticklabel_direction", "type": "axisartist", "text": ["Adjust the direction of the ticklabel.", "Note that the label_directions '+' and '-' are relative to the direction of the increasing coordinate."]}, {"name": "axisartist.axis_artist.AxisArtist.toggle()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.toggle", "type": "axisartist", "text": ["Toggle visibility of ticks, ticklabels, and (axis) label. To turn all off,", "To turn all off but ticks on", "To turn all on but (axis) label off"]}, {"name": "axisartist.axis_artist.AxisArtist.ZORDER", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.ZORDER", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.AxisArtist.zorder", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.zorder", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.AxisLabel", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axis_artist.AttributeCopier, mpl_toolkits.axisartist.axis_artist.LabelBase", "Axis Label. Derived from Text. The position of the text is updated in the fly, so changing text position has no effect. Otherwise, the properties can be changed as a normal Text.", "To change the pad between ticklabels and axis label, use set_pad.", "Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses.", "Return the color of the text.", "Return the internal pad in points.", "See set_pad for more details.", "Return the underlying artist that actually defines some properties (e.g., color) of this artist.", "Return the text string.", "Return the Bbox bounding the text, in display units.", "In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.", "A renderer is needed to compute the bounding box. If the artist has already been drawn, the renderer is cached; thus, it is only necessary to pass this argument when calling get_window_extent before the first draw. In practice, it is usually easier to trigger a draw first (e.g. by saving the figure).", "The dpi value for computing the bbox, defaults to self.figure.dpi (not the renderer dpi); should be set e.g. if to match regions with a figure saved with a custom dpi value.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "axis_direction", "unknown", "backgroundcolor", "color", "bbox", "dict with properties for patches.FancyBboxPatch", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "default_alignment", "unknown", "default_angle", "unknown", "figure", "Figure", "fontfamily or family", "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}", "fontproperties or font or font_properties", "font_manager.FontProperties or str or pathlib.Path", "fontsize or size", "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}", "fontstretch or stretch", "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}", "fontstyle or style", "{'normal', 'italic', 'oblique'}", "fontvariant or variant", "{'normal', 'small-caps'}", "fontweight or weight", "{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}", "gid", "str", "horizontalalignment or ha", "{'center', 'right', 'left'}", "in_layout", "bool", "label", "object", "linespacing", "float (multiple of font size)", "math_fontfamily", "str", "multialignment or ma", "{'left', 'right', 'center'}", "pad", "unknown", "parse_math", "bool", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "(float, float)", "rasterized", "bool", "rotation", "float or {'vertical', 'horizontal'}", "rotation_mode", "{None, 'default', 'anchor'}", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "text", "object", "transform", "Transform", "transform_rotates_text", "bool", "url", "str", "usetex", "bool or None", "verticalalignment or va", "{'center', 'top', 'bottom', 'baseline', 'center_baseline'}", "visible", "bool", "wrap", "bool", "x", "float", "y", "float", "zorder", "float", "Adjust the text angle and text alignment of axis label according to the matplotlib convention.", "property", "left", "bottom", "right", "top", "axislabel angle", "180", "0", "0", "180", "axislabel va", "center", "top", "center", "bottom", "axislabel ha", "right", "center", "right", "center", "Note that the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis.", "Set the internal pad in points.", "The actual pad will be the sum of the internal pad and the external pad (the latter is set automatically by the AxisArtist)."]}, {"name": "axisartist.axis_artist.AxisLabel.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.draw", "type": "axisartist", "text": ["Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses."]}, {"name": "axisartist.axis_artist.AxisLabel.get_color()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_color", "type": "axisartist", "text": ["Return the color of the text."]}, {"name": "axisartist.axis_artist.AxisLabel.get_pad()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_pad", "type": "axisartist", "text": ["Return the internal pad in points.", "See set_pad for more details."]}, {"name": "axisartist.axis_artist.AxisLabel.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_ref_artist", "type": "axisartist", "text": ["Return the underlying artist that actually defines some properties (e.g., color) of this artist."]}, {"name": "axisartist.axis_artist.AxisLabel.get_text()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_text", "type": "axisartist", "text": ["Return the text string."]}, {"name": "axisartist.axis_artist.AxisLabel.get_window_extent()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_window_extent", "type": "axisartist", "text": ["Return the Bbox bounding the text, in display units.", "In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.", "A renderer is needed to compute the bounding box. If the artist has already been drawn, the renderer is cached; thus, it is only necessary to pass this argument when calling get_window_extent before the first draw. In practice, it is usually easier to trigger a draw first (e.g. by saving the figure).", "The dpi value for computing the bbox, defaults to self.figure.dpi (not the renderer dpi); should be set e.g. if to match regions with a figure saved with a custom dpi value."]}, {"name": "axisartist.axis_artist.AxisLabel.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set", "type": "axisartist", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "axis_direction", "unknown", "backgroundcolor", "color", "bbox", "dict with properties for patches.FancyBboxPatch", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "default_alignment", "unknown", "default_angle", "unknown", "figure", "Figure", "fontfamily or family", "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}", "fontproperties or font or font_properties", "font_manager.FontProperties or str or pathlib.Path", "fontsize or size", "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}", "fontstretch or stretch", "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}", "fontstyle or style", "{'normal', 'italic', 'oblique'}", "fontvariant or variant", "{'normal', 'small-caps'}", "fontweight or weight", "{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}", "gid", "str", "horizontalalignment or ha", "{'center', 'right', 'left'}", "in_layout", "bool", "label", "object", "linespacing", "float (multiple of font size)", "math_fontfamily", "str", "multialignment or ma", "{'left', 'right', 'center'}", "pad", "unknown", "parse_math", "bool", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "(float, float)", "rasterized", "bool", "rotation", "float or {'vertical', 'horizontal'}", "rotation_mode", "{None, 'default', 'anchor'}", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "text", "object", "transform", "Transform", "transform_rotates_text", "bool", "url", "str", "usetex", "bool or None", "verticalalignment or va", "{'center', 'top', 'bottom', 'baseline', 'center_baseline'}", "visible", "bool", "wrap", "bool", "x", "float", "y", "float", "zorder", "float"]}, {"name": "axisartist.axis_artist.AxisLabel.set_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_axis_direction", "type": "axisartist", "text": ["Adjust the text angle and text alignment of axis label according to the matplotlib convention.", "property", "left", "bottom", "right", "top", "axislabel angle", "180", "0", "0", "180", "axislabel va", "center", "top", "center", "bottom", "axislabel ha", "right", "center", "right", "center", "Note that the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis."]}, {"name": "axisartist.axis_artist.AxisLabel.set_default_alignment()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_default_alignment", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.AxisLabel.set_default_angle()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_default_angle", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.AxisLabel.set_pad()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_pad", "type": "axisartist", "text": ["Set the internal pad in points.", "The actual pad will be the sum of the internal pad and the external pad (the latter is set automatically by the AxisArtist)."]}, {"name": "axisartist.axis_artist.GridlinesCollection", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection", "type": "axisartist", "text": ["Bases: matplotlib.collections.LineCollection", "Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "array-like or scalar or None", "animated", "bool", "antialiased or aa or antialiaseds", "bool or list of bools", "array", "array-like or None", "axis", "unknown", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clim", "(vmin: float, vmax: float)", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "cmap", "Colormap or str or None", "color", "color or list of colors", "colors", "color or list of colors", "edgecolor or ec or edgecolors", "color or list of colors or 'face'", "facecolor or facecolors or fc", "color or list of colors", "figure", "Figure", "gid", "str", "grid_helper", "unknown", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or dashes or linestyles or ls", "str or tuple or list thereof", "linewidth or linewidths or lw", "float or list of floats", "norm", "Normalize or None", "offset_transform", "Transform", "offsets", "(N, 2) or (2,) array-like", "path_effects", "AbstractPathEffect", "paths", "unknown", "picker", "None or bool or float or callable", "pickradius", "float", "rasterized", "bool", "segments", "unknown", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "urls", "list of str or None", "verts", "unknown", "visible", "bool", "which", "unknown", "zorder", "float"]}, {"name": "axisartist.axis_artist.GridlinesCollection.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.draw", "type": "axisartist", "text": ["Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses."]}, {"name": "axisartist.axis_artist.GridlinesCollection.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set", "type": "axisartist", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "array-like or scalar or None", "animated", "bool", "antialiased or aa or antialiaseds", "bool or list of bools", "array", "array-like or None", "axis", "unknown", "capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "clim", "(vmin: float, vmax: float)", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "cmap", "Colormap or str or None", "color", "color or list of colors", "colors", "color or list of colors", "edgecolor or ec or edgecolors", "color or list of colors or 'face'", "facecolor or facecolors or fc", "color or list of colors", "figure", "Figure", "gid", "str", "grid_helper", "unknown", "hatch", "{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}", "in_layout", "bool", "joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "label", "object", "linestyle or dashes or linestyles or ls", "str or tuple or list thereof", "linewidth or linewidths or lw", "float or list of floats", "norm", "Normalize or None", "offset_transform", "Transform", "offsets", "(N, 2) or (2,) array-like", "path_effects", "AbstractPathEffect", "paths", "unknown", "picker", "None or bool or float or callable", "pickradius", "float", "rasterized", "bool", "segments", "unknown", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "transform", "Transform", "url", "str", "urls", "list of str or None", "verts", "unknown", "visible", "bool", "which", "unknown", "zorder", "float"]}, {"name": "axisartist.axis_artist.GridlinesCollection.set_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set_axis", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.GridlinesCollection.set_grid_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set_grid_helper", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.GridlinesCollection.set_which()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set_which", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.LabelBase", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase", "type": "axisartist", "text": ["Bases: matplotlib.text.Text", "A base class for AxisLabel and TickLabels. The position and angle of the text are calculated by to offset_ref_angle, text_ref_angle, and offset_radius attributes.", "Create a Text instance at x, y with string text.", "Valid keyword arguments are:", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "backgroundcolor", "color", "bbox", "dict with properties for patches.FancyBboxPatch", "clip_box", "unknown", "clip_on", "unknown", "clip_path", "unknown", "color or c", "color", "figure", "Figure", "fontfamily or family", "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}", "fontproperties or font or font_properties", "font_manager.FontProperties or str or pathlib.Path", "fontsize or size", "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}", "fontstretch or stretch", "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}", "fontstyle or style", "{'normal', 'italic', 'oblique'}", "fontvariant or variant", "{'normal', 'small-caps'}", "fontweight or weight", "{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}", "gid", "str", "horizontalalignment or ha", "{'center', 'right', 'left'}", "in_layout", "bool", "label", "object", "linespacing", "float (multiple of font size)", "math_fontfamily", "str", "multialignment or ma", "{'left', 'right', 'center'}", "parse_math", "bool", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "(float, float)", "rasterized", "bool", "rotation", "float or {'vertical', 'horizontal'}", "rotation_mode", "{None, 'default', 'anchor'}", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "text", "object", "transform", "Transform", "transform_rotates_text", "bool", "url", "str", "usetex", "bool or None", "verticalalignment or va", "{'center', 'top', 'bottom', 'baseline', 'center_baseline'}", "visible", "bool", "wrap", "bool", "x", "float", "y", "float", "zorder", "float", "Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses.", "Return the Bbox bounding the text, in display units.", "In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.", "A renderer is needed to compute the bounding box. If the artist has already been drawn, the renderer is cached; thus, it is only necessary to pass this argument when calling get_window_extent before the first draw. In practice, it is usually easier to trigger a draw first (e.g. by saving the figure).", "The dpi value for computing the bbox, defaults to self.figure.dpi (not the renderer dpi); should be set e.g. if to match regions with a figure saved with a custom dpi value.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "backgroundcolor", "color", "bbox", "dict with properties for patches.FancyBboxPatch", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "figure", "Figure", "fontfamily or family", "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}", "fontproperties or font or font_properties", "font_manager.FontProperties or str or pathlib.Path", "fontsize or size", "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}", "fontstretch or stretch", "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}", "fontstyle or style", "{'normal', 'italic', 'oblique'}", "fontvariant or variant", "{'normal', 'small-caps'}", "fontweight or weight", "{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}", "gid", "str", "horizontalalignment or ha", "{'center', 'right', 'left'}", "in_layout", "bool", "label", "object", "linespacing", "float (multiple of font size)", "math_fontfamily", "str", "multialignment or ma", "{'left', 'right', 'center'}", "parse_math", "bool", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "(float, float)", "rasterized", "bool", "rotation", "float or {'vertical', 'horizontal'}", "rotation_mode", "{None, 'default', 'anchor'}", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "text", "object", "transform", "Transform", "transform_rotates_text", "bool", "url", "str", "usetex", "bool or None", "verticalalignment or va", "{'center', 'top', 'bottom', 'baseline', 'center_baseline'}", "visible", "bool", "wrap", "bool", "x", "float", "y", "float", "zorder", "float"]}, {"name": "axisartist.axis_artist.LabelBase.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase#mpl_toolkits.axisartist.axis_artist.LabelBase.draw", "type": "axisartist", "text": ["Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses."]}, {"name": "axisartist.axis_artist.LabelBase.get_window_extent()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase#mpl_toolkits.axisartist.axis_artist.LabelBase.get_window_extent", "type": "axisartist", "text": ["Return the Bbox bounding the text, in display units.", "In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.", "A renderer is needed to compute the bounding box. If the artist has already been drawn, the renderer is cached; thus, it is only necessary to pass this argument when calling get_window_extent before the first draw. In practice, it is usually easier to trigger a draw first (e.g. by saving the figure).", "The dpi value for computing the bbox, defaults to self.figure.dpi (not the renderer dpi); should be set e.g. if to match regions with a figure saved with a custom dpi value."]}, {"name": "axisartist.axis_artist.LabelBase.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase#mpl_toolkits.axisartist.axis_artist.LabelBase.set", "type": "axisartist", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "backgroundcolor", "color", "bbox", "dict with properties for patches.FancyBboxPatch", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "figure", "Figure", "fontfamily or family", "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}", "fontproperties or font or font_properties", "font_manager.FontProperties or str or pathlib.Path", "fontsize or size", "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}", "fontstretch or stretch", "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}", "fontstyle or style", "{'normal', 'italic', 'oblique'}", "fontvariant or variant", "{'normal', 'small-caps'}", "fontweight or weight", "{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}", "gid", "str", "horizontalalignment or ha", "{'center', 'right', 'left'}", "in_layout", "bool", "label", "object", "linespacing", "float (multiple of font size)", "math_fontfamily", "str", "multialignment or ma", "{'left', 'right', 'center'}", "parse_math", "bool", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "(float, float)", "rasterized", "bool", "rotation", "float or {'vertical', 'horizontal'}", "rotation_mode", "{None, 'default', 'anchor'}", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "text", "object", "transform", "Transform", "transform_rotates_text", "bool", "url", "str", "usetex", "bool or None", "verticalalignment or va", "{'center', 'top', 'bottom', 'baseline', 'center_baseline'}", "visible", "bool", "wrap", "bool", "x", "float", "y", "float", "zorder", "float"]}, {"name": "axisartist.axis_artist.TickLabels", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axis_artist.AxisLabel", "Tick Labels. While derived from Text, this single artist draws all ticklabels. As in AxisLabel, the position of the text is updated in the fly, so changing text position has no effect. Otherwise, the properties can be changed as a normal Text. Unlike the ticklabels of the mainline matplotlib, properties of single ticklabel alone cannot modified.", "To change the pad between ticks and ticklabels, use set_pad.", "Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses.", "Return the underlying artist that actually defines some properties (e.g., color) of this artist.", "Return a list of (width, height, descent) tuples for ticklabels.", "Empty labels are left out.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "axis_direction", "unknown", "backgroundcolor", "color", "bbox", "dict with properties for patches.FancyBboxPatch", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "default_alignment", "unknown", "default_angle", "unknown", "figure", "Figure", "fontfamily or family", "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}", "fontproperties or font or font_properties", "font_manager.FontProperties or str or pathlib.Path", "fontsize or size", "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}", "fontstretch or stretch", "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}", "fontstyle or style", "{'normal', 'italic', 'oblique'}", "fontvariant or variant", "{'normal', 'small-caps'}", "fontweight or weight", "{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}", "gid", "str", "horizontalalignment or ha", "{'center', 'right', 'left'}", "in_layout", "bool", "label", "object", "linespacing", "float (multiple of font size)", "locs_angles_labels", "unknown", "math_fontfamily", "str", "multialignment or ma", "{'left', 'right', 'center'}", "pad", "unknown", "parse_math", "bool", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "(float, float)", "rasterized", "bool", "rotation", "float or {'vertical', 'horizontal'}", "rotation_mode", "{None, 'default', 'anchor'}", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "text", "object", "transform", "Transform", "transform_rotates_text", "bool", "url", "str", "usetex", "bool or None", "verticalalignment or va", "{'center', 'top', 'bottom', 'baseline', 'center_baseline'}", "visible", "bool", "wrap", "bool", "x", "float", "y", "float", "zorder", "float", "Adjust the text angle and text alignment of ticklabels according to the matplotlib convention.", "The label_direction must be one of [left, right, bottom, top].", "property", "left", "bottom", "right", "top", "ticklabels angle", "90", "0", "-90", "180", "ticklabel va", "center", "baseline", "center", "baseline", "ticklabel ha", "right", "center", "right", "center", "Note that the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis."]}, {"name": "axisartist.axis_artist.TickLabels.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.draw", "type": "axisartist", "text": ["Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses."]}, {"name": "axisartist.axis_artist.TickLabels.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.get_ref_artist", "type": "axisartist", "text": ["Return the underlying artist that actually defines some properties (e.g., color) of this artist."]}, {"name": "axisartist.axis_artist.TickLabels.get_texts_widths_heights_descents()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.get_texts_widths_heights_descents", "type": "axisartist", "text": ["Return a list of (width, height, descent) tuples for ticklabels.", "Empty labels are left out."]}, {"name": "axisartist.axis_artist.TickLabels.get_window_extents()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.get_window_extents", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.TickLabels.invert_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.invert_axis_direction", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.TickLabels.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.set", "type": "axisartist", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "axis_direction", "unknown", "backgroundcolor", "color", "bbox", "dict with properties for patches.FancyBboxPatch", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "color", "default_alignment", "unknown", "default_angle", "unknown", "figure", "Figure", "fontfamily or family", "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}", "fontproperties or font or font_properties", "font_manager.FontProperties or str or pathlib.Path", "fontsize or size", "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}", "fontstretch or stretch", "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}", "fontstyle or style", "{'normal', 'italic', 'oblique'}", "fontvariant or variant", "{'normal', 'small-caps'}", "fontweight or weight", "{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}", "gid", "str", "horizontalalignment or ha", "{'center', 'right', 'left'}", "in_layout", "bool", "label", "object", "linespacing", "float (multiple of font size)", "locs_angles_labels", "unknown", "math_fontfamily", "str", "multialignment or ma", "{'left', 'right', 'center'}", "pad", "unknown", "parse_math", "bool", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "(float, float)", "rasterized", "bool", "rotation", "float or {'vertical', 'horizontal'}", "rotation_mode", "{None, 'default', 'anchor'}", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "text", "object", "transform", "Transform", "transform_rotates_text", "bool", "url", "str", "usetex", "bool or None", "verticalalignment or va", "{'center', 'top', 'bottom', 'baseline', 'center_baseline'}", "visible", "bool", "wrap", "bool", "x", "float", "y", "float", "zorder", "float"]}, {"name": "axisartist.axis_artist.TickLabels.set_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.set_axis_direction", "type": "axisartist", "text": ["Adjust the text angle and text alignment of ticklabels according to the matplotlib convention.", "The label_direction must be one of [left, right, bottom, top].", "property", "left", "bottom", "right", "top", "ticklabels angle", "90", "0", "-90", "180", "ticklabel va", "center", "baseline", "center", "baseline", "ticklabel ha", "right", "center", "right", "center", "Note that the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis."]}, {"name": "axisartist.axis_artist.TickLabels.set_locs_angles_labels()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.set_locs_angles_labels", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.Ticks", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axis_artist.AttributeCopier, matplotlib.lines.Line2D", "Ticks are derived from Line2D, and note that ticks themselves are markers. Thus, you should use set_mec, set_mew, etc.", "To change the tick size (length), you need to use set_ticksize. To change the direction of the ticks (ticks are in opposite direction of ticklabels by default), use set_tick_out(False).", "Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses.", "Return the line color.", "See also set_color.", "Return the marker edge color.", "See also set_markeredgecolor.", "Return the marker edge width in points.", "See also set_markeredgewidth.", "Return the underlying artist that actually defines some properties (e.g., color) of this artist.", "Return whether ticks are drawn inside or outside the axes.", "Return length of the ticks in points.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "unknown", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "locs_angles", "unknown", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "tick_out", "unknown", "ticksize", "unknown", "transform", "Transform", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float", "Set the color of the line.", "Set whether ticks are drawn inside or outside the axes.", "Set length of the ticks in points."]}, {"name": "axisartist.axis_artist.Ticks.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.draw", "type": "axisartist", "text": ["Draw the Artist (and its children) using the given renderer.", "This has no effect if the artist is not visible (Artist.get_visible returns False).", "This method is overridden in the Artist subclasses."]}, {"name": "axisartist.axis_artist.Ticks.get_color()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_color", "type": "axisartist", "text": ["Return the line color.", "See also set_color."]}, {"name": "axisartist.axis_artist.Ticks.get_markeredgecolor()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_markeredgecolor", "type": "axisartist", "text": ["Return the marker edge color.", "See also set_markeredgecolor."]}, {"name": "axisartist.axis_artist.Ticks.get_markeredgewidth()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_markeredgewidth", "type": "axisartist", "text": ["Return the marker edge width in points.", "See also set_markeredgewidth."]}, {"name": "axisartist.axis_artist.Ticks.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_ref_artist", "type": "axisartist", "text": ["Return the underlying artist that actually defines some properties (e.g., color) of this artist."]}, {"name": "axisartist.axis_artist.Ticks.get_tick_out()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_tick_out", "type": "axisartist", "text": ["Return whether ticks are drawn inside or outside the axes."]}, {"name": "axisartist.axis_artist.Ticks.get_ticksize()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_ticksize", "type": "axisartist", "text": ["Return length of the ticks in points."]}, {"name": "axisartist.axis_artist.Ticks.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set", "type": "axisartist", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "animated", "bool", "antialiased or aa", "bool", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "color or c", "unknown", "dash_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "dash_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "dashes", "sequence of floats (on/off ink in points) or (None, None)", "data", "(2, N) array or two 1D arrays", "drawstyle or ds", "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'", "figure", "Figure", "fillstyle", "{'full', 'left', 'right', 'bottom', 'top', 'none'}", "gid", "str", "in_layout", "bool", "label", "object", "linestyle or ls", "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}", "linewidth or lw", "float", "locs_angles", "unknown", "marker", "marker style string, Path or MarkerStyle", "markeredgecolor or mec", "color", "markeredgewidth or mew", "float", "markerfacecolor or mfc", "color", "markerfacecoloralt or mfcalt", "color", "markersize or ms", "float", "markevery", "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]", "path_effects", "AbstractPathEffect", "picker", "float or callable[[Artist, Event], tuple[bool, dict]]", "pickradius", "float", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "solid_capstyle", "CapStyle or {'butt', 'projecting', 'round'}", "solid_joinstyle", "JoinStyle or {'miter', 'round', 'bevel'}", "tick_out", "unknown", "ticksize", "unknown", "transform", "Transform", "url", "str", "visible", "bool", "xdata", "1D array", "ydata", "1D array", "zorder", "float"]}, {"name": "axisartist.axis_artist.Ticks.set_color()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_color", "type": "axisartist", "text": ["Set the color of the line."]}, {"name": "axisartist.axis_artist.Ticks.set_locs_angles()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_locs_angles", "type": "axisartist", "text": []}, {"name": "axisartist.axis_artist.Ticks.set_tick_out()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_tick_out", "type": "axisartist", "text": ["Set whether ticks are drawn inside or outside the axes."]}, {"name": "axisartist.axis_artist.Ticks.set_ticksize()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_ticksize", "type": "axisartist", "text": ["Set length of the ticks in points."]}, {"name": "axisartist.axisline_style", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style", "type": "axisartist", "text": ["AxislineStyle(stylename, **kw)", "A container class which defines style classes for AxisArtists."]}, {"name": "axisartist.axisline_style.AxislineStyle", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle", "type": "axisartist", "text": ["Bases: matplotlib.patches._Style", "A container class which defines style classes for AxisArtists.", "An instance of any axisline style class is an callable object, whose call signature is", "When called, this should return an Artist with the following methods:", "Return the instance of the subclass with the given style name.", "Bases: mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow", "Size of the arrow as a fraction of the ticklabel size.", "alias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.FilledArrow", "Bases: mpl_toolkits.axisartist.axisline_style.AxislineStyle._Base", "A simple arrow.", "Size of the arrow as a fraction of the ticklabel size.", "alias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.SimpleArrow"]}, {"name": "axisartist.axisline_style.AxislineStyle.FilledArrow", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.FilledArrow", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow", "Size of the arrow as a fraction of the ticklabel size.", "alias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.FilledArrow"]}, {"name": "axisartist.axisline_style.AxislineStyle.FilledArrow.ArrowAxisClass", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.FilledArrow.ArrowAxisClass", "type": "axisartist", "text": ["alias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.FilledArrow"]}, {"name": "axisartist.axisline_style.AxislineStyle.SimpleArrow", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axisline_style.AxislineStyle._Base", "A simple arrow.", "Size of the arrow as a fraction of the ticklabel size.", "alias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.SimpleArrow"]}, {"name": "axisartist.axisline_style.AxislineStyle.SimpleArrow.ArrowAxisClass", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow.ArrowAxisClass", "type": "axisartist", "text": ["alias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.SimpleArrow"]}, {"name": "axisartist.axisline_style.AxislineStyle.SimpleArrow.new_line()", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow.new_line", "type": "axisartist", "text": []}, {"name": "axisartist.axislines", "path": "_as_gen/mpl_toolkits.axisartist.axislines", "type": "axisartist", "text": ["Axislines includes modified implementation of the Axes class. The biggest difference is that the artists responsible for drawing the axis spine, ticks, ticklabels and axis labels are separated out from Matplotlib's Axis class. Originally, this change was motivated to support curvilinear grid. Here are a few reasons that I came up with a new axes class:", "In the new axes class, xaxis and yaxis is set to not visible by default, and new set of artist (AxisArtist) are defined to draw axis line, ticks, ticklabels and axis label. Axes.axis attribute serves as a dictionary of these artists, i.e., ax.axis[\"left\"] is a AxisArtist instance responsible to draw left y-axis. The default Axes.axis contains \"bottom\", \"left\", \"top\" and \"right\".", "AxisArtist can be considered as a container artist and has following children artists which will draw ticks, labels, etc.", "Note that these are separate artists from matplotlib.axis.Axis, thus most tick-related functions in Matplotlib won't work. For example, color and markerwidth of the ax.axis[\"bottom\"].major_ticks will follow those of Axes.xaxis unless explicitly specified.", "In addition to AxisArtist, the Axes will have gridlines attribute, which obviously draws grid lines. The gridlines needs to be separated from the axis as some gridlines can never pass any axis.", "Axes(*args[, grid_helper])", "Build an Axes in a figure.", "AxesZero(*args[, grid_helper])", "Build an Axes in a figure.", "AxisArtistHelper()", "AxisArtistHelper should define following method with given APIs. Note that the first axes argument will be axes attribute of the caller artist.::.", "AxisArtistHelperRectlinear()", "GridHelperBase()", "GridHelperRectlinear(axes)"]}, {"name": "axisartist.axislines.Axes", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes", "type": "axisartist", "text": ["Bases: matplotlib.axes._axes.Axes", "Build an Axes in a figure.", "The Axes is built in the Figure fig.", "The Axes is built in the rectangle rect. rect is in Figure coordinates.", "The x or y axis is shared with the x or y axis in the input Axes.", "Whether the Axes frame is visible.", "Set a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.", "Other optional keyword arguments:", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "The new Axes object.", "Call self as a function.", "Convenience method to get or set some axis properties.", "Call signatures:", "The axis limits to be set. This can also be achieved using", "If a bool, turns axis lines and labels on or off. If a string, possible values are:", "Value", "Description", "'on'", "Turn on axis lines and labels. Same as True.", "'off'", "Turn off axis lines and labels. Same as False.", "'equal'", "Set equal scaling (i.e., make circles circular) by changing axis limits. This is the same as ax.set_aspect('equal', adjustable='datalim'). Explicit data limits may not be respected in this case.", "'scaled'", "Set equal scaling (i.e., make circles circular) by changing dimensions of the plot box. This is the same as ax.set_aspect('equal', adjustable='box', anchor='C'). Additionally, further autoscaling will be disabled.", "'tight'", "Set limits just large enough to show all data, then disable further autoscaling.", "'auto'", "Automatic scaling (fill plot box with data).", "'image'", "'scaled' with axis limits equal to data limits.", "'square'", "Square plot; similar to 'scaled', but initially forcing xmax-xmin == ymax-ymin.", "Whether observers are notified of the axis limit change. This option is passed on to set_xlim and set_ylim.", "The axis limits.", "See also", "Clear the Axes.", "Return a list of the child Artists of this Artist.", "Toggle the gridlines, and optionally set the properties of the lines.", "[Deprecated]", "Deprecated since version 3.4: ", "Create and return a new GridlineCollection instance.", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float"]}, {"name": "axisartist.axislines.Axes.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.axislines.Axes.cla()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.cla", "type": "axisartist", "text": ["Clear the Axes."]}, {"name": "axisartist.axislines.Axes.get_children()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.get_children", "type": "axisartist", "text": ["Return a list of the child Artists of this Artist."]}, {"name": "axisartist.axislines.Axes.get_grid_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.get_grid_helper", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.Axes.grid()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.grid", "type": "axisartist", "text": ["Toggle the gridlines, and optionally set the properties of the lines."]}, {"name": "axisartist.axislines.Axes.invalidate_grid_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.invalidate_grid_helper", "type": "axisartist", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axisartist.axislines.Axes.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.new_fixed_axis", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.Axes.new_floating_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.new_floating_axis", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.Axes.new_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.new_gridlines", "type": "axisartist", "text": ["Create and return a new GridlineCollection instance.", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\""]}, {"name": "axisartist.axislines.Axes.set()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.set", "type": "axisartist", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float"]}, {"name": "axisartist.axislines.Axes.toggle_axisline()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.toggle_axisline", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxesZero", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axeszero", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axislines.Axes", "Build an Axes in a figure.", "The Axes is built in the Figure fig.", "The Axes is built in the rectangle rect. rect is in Figure coordinates.", "The x or y axis is shared with the x or y axis in the input Axes.", "Whether the Axes frame is visible.", "Set a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.", "Other optional keyword arguments:", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float", "The new Axes object.", "Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float"]}, {"name": "axisartist.axislines.AxesZero.set()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axeszero#mpl_toolkits.axisartist.axislines.AxesZero.set", "type": "axisartist", "text": ["Set multiple properties at once.", "Supported properties are", "Property", "Description", "adjustable", "{'box', 'datalim'}", "agg_filter", "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array", "alpha", "scalar or None", "anchor", "(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}", "animated", "bool", "aspect", "{'auto', 'equal'} or float", "autoscale_on", "bool", "autoscalex_on", "bool", "autoscaley_on", "bool", "axes_locator", "Callable[[Axes, Renderer], Bbox]", "axisbelow", "bool or 'line'", "box_aspect", "float or None", "clip_box", "Bbox", "clip_on", "bool", "clip_path", "Patch or (Path, Transform) or None", "facecolor or fc", "color", "figure", "Figure", "frame_on", "bool", "gid", "str", "in_layout", "bool", "label", "object", "navigate", "bool", "navigate_mode", "unknown", "path_effects", "AbstractPathEffect", "picker", "None or bool or float or callable", "position", "[left, bottom, width, height] or Bbox", "prop_cycle", "unknown", "rasterization_zorder", "float or None", "rasterized", "bool", "sketch_params", "(scale: float, length: float, randomness: float)", "snap", "bool or None", "title", "str", "transform", "Transform", "url", "str", "visible", "bool", "xbound", "unknown", "xlabel", "str", "xlim", "(bottom: float, top: float)", "xmargin", "float greater than -0.5", "xscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "xticklabels", "unknown", "xticks", "unknown", "ybound", "unknown", "ylabel", "str", "ylim", "(bottom: float, top: float)", "ymargin", "float greater than -0.5", "yscale", "{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase", "yticklabels", "unknown", "yticks", "unknown", "zorder", "float"]}, {"name": "axisartist.axislines.AxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper", "type": "axisartist", "text": ["Bases: object", "AxisArtistHelper should define following method with given APIs. Note that the first axes argument will be axes attribute of the caller artist.:", "Bases: mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base", "Helper class for a fixed (in the axes coordinate) axis.", "nth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x axis, nth_coord = 1 -> y axis", "Return the label reference position in transAxes.", "get_label_transform() returns a transform of (transAxes+offset)", "Bases: mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base"]}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base", "Helper class for a fixed (in the axes coordinate) axis.", "nth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x axis, nth_coord = 1 -> y axis", "Return the label reference position in transAxes.", "get_label_transform() returns a transform of (transAxes+offset)"]}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_pos_angle()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_pos_angle", "type": "axisartist", "text": ["Return the label reference position in transAxes.", "get_label_transform() returns a transform of (transAxes+offset)"]}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_transform", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_line", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_line_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_line_transform", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_nth_coord()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_nth_coord", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_tick_transform", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxisArtistHelper.Floating", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base"]}, {"name": "axisartist.axislines.AxisArtistHelper.Floating.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating.get_line", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxisArtistHelper.Floating.get_nth_coord()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating.get_nth_coord", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear", "type": "axisartist", "text": ["Bases: object", "Bases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed", "nth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x axis, nth_coord = 1 -> y axis", "tick_loc, tick_angle, tick_label", "Bases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating", "Return the label reference position in transAxes.", "get_label_transform() returns a transform of (transAxes+offset)", "tick_loc, tick_angle, tick_label"]}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Fixed", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Fixed", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed", "nth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x axis, nth_coord = 1 -> y axis", "tick_loc, tick_angle, tick_label"]}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Fixed.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Fixed.get_tick_iterators", "type": "axisartist", "text": ["tick_loc, tick_angle, tick_label"]}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating", "Return the label reference position in transAxes.", "get_label_transform() returns a transform of (transAxes+offset)", "tick_loc, tick_angle, tick_label"]}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_pos_angle()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_pos_angle", "type": "axisartist", "text": ["Return the label reference position in transAxes.", "get_label_transform() returns a transform of (transAxes+offset)"]}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_transform", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line_transform", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_iterators", "type": "axisartist", "text": ["tick_loc, tick_angle, tick_label"]}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_transform", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.GridHelperBase", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase", "type": "axisartist", "text": ["Bases: object", "Return list of grid lines as a list of paths (list of points).", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"", "[Deprecated]", "Deprecated since version 3.4: ", "Create and return a new GridlineCollection instance.", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"", "[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axisartist.axislines.GridHelperBase.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.get_gridlines", "type": "axisartist", "text": ["Return list of grid lines as a list of paths (list of points).", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\""]}, {"name": "axisartist.axislines.GridHelperBase.invalidate()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.invalidate", "type": "axisartist", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axisartist.axislines.GridHelperBase.new_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.new_gridlines", "type": "axisartist", "text": ["Create and return a new GridlineCollection instance.", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\""]}, {"name": "axisartist.axislines.GridHelperBase.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.update_lim", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.GridHelperBase.valid()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.valid", "type": "axisartist", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "axisartist.axislines.GridHelperRectlinear", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axislines.GridHelperBase", "Return list of gridline coordinates in data coordinates.", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\""]}, {"name": "axisartist.axislines.GridHelperRectlinear.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear#mpl_toolkits.axisartist.axislines.GridHelperRectlinear.get_gridlines", "type": "axisartist", "text": ["Return list of gridline coordinates in data coordinates.", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\""]}, {"name": "axisartist.axislines.GridHelperRectlinear.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear#mpl_toolkits.axisartist.axislines.GridHelperRectlinear.new_fixed_axis", "type": "axisartist", "text": []}, {"name": "axisartist.axislines.GridHelperRectlinear.new_floating_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear#mpl_toolkits.axisartist.axislines.GridHelperRectlinear.new_floating_axis", "type": "axisartist", "text": []}, {"name": "axisartist.clip_path", "path": "_as_gen/mpl_toolkits.axisartist.clip_path", "type": "axisartist", "text": ["atan2(dy, dx)", "clip(xlines, ylines, x0[, clip, xdir, ydir])", "clip_line_to_rect(xline, yline, bbox)"]}, {"name": "axisartist.clip_path.atan2", "path": "_as_gen/mpl_toolkits.axisartist.clip_path.atan2", "type": "axisartist", "text": []}, {"name": "axisartist.clip_path.clip", "path": "_as_gen/mpl_toolkits.axisartist.clip_path.clip", "type": "axisartist", "text": []}, {"name": "axisartist.clip_path.clip_line_to_rect", "path": "_as_gen/mpl_toolkits.axisartist.clip_path.clip_line_to_rect", "type": "axisartist", "text": []}, {"name": "axisartist.floating_axes", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes", "type": "axisartist", "text": ["An experimental support for curvilinear grid.", "ExtremeFinderFixed(extremes)", "This subclass always returns the same bounding box.", "FixedAxisArtistHelper(grid_helper, side[, ...])", "nth_coord = along which coordinate value varies.", "FloatingAxes", "alias of mpl_toolkits.axisartist.floating_axes.FloatingAxesHostAxes", "FloatingAxesBase(*args, **kwargs)", "FloatingAxisArtistHelper(grid_helper, ...[, ...])", "nth_coord = along which coordinate value varies.", "GridHelperCurveLinear(aux_trans, extremes[, ...])", "aux_trans : a transform from the source (curved) coordinate to target (rectilinear) coordinate.", "floatingaxes_class_factory(axes_class)"]}, {"name": "axisartist.floating_axes.ExtremeFinderFixed", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.extremefinderfixed", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple", "This subclass always returns the same bounding box.", "The bounding box that this helper always returns.", "Compute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2).", "The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes.", "The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling.", "As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions."]}, {"name": "axisartist.floating_axes.ExtremeFinderFixed.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.extremefinderfixed#mpl_toolkits.axisartist.floating_axes.ExtremeFinderFixed.__call__", "type": "axisartist", "text": ["Compute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2).", "The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes.", "The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling.", "As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions."]}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper", "nth_coord = 0 -> x axis, nth_coord = 1 -> y axis", "tick_loc, tick_angle, tick_label, (optionally) tick_label"]}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper#mpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper.get_line", "type": "axisartist", "text": []}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper#mpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper.get_tick_iterators", "type": "axisartist", "text": ["tick_loc, tick_angle, tick_label, (optionally) tick_label"]}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper#mpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper.update_lim", "type": "axisartist", "text": []}, {"name": "axisartist.floating_axes.FloatingAxes", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxes", "type": "axisartist", "text": ["alias of mpl_toolkits.axisartist.floating_axes.FloatingAxesHostAxes"]}, {"name": "axisartist.floating_axes.floatingaxes_class_factory", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxes_class_factory", "type": "axisartist", "text": []}, {"name": "axisartist.floating_axes.FloatingAxesBase", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxesbase", "type": "axisartist", "text": ["Bases: object", "mpl_toolkits.axisartist.floating_axes features"]}, {"name": "axisartist.floating_axes.FloatingAxesBase.adjust_axes_lim()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxesbase#mpl_toolkits.axisartist.floating_axes.FloatingAxesBase.adjust_axes_lim", "type": "axisartist", "text": []}, {"name": "axisartist.floating_axes.FloatingAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxesbase#mpl_toolkits.axisartist.floating_axes.FloatingAxesBase.cla", "type": "axisartist", "text": []}, {"name": "axisartist.floating_axes.FloatingAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxisartisthelper", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper", "nth_coord = 0 -> x axis, nth_coord = 1 -> y axis"]}, {"name": "axisartist.floating_axes.GridHelperCurveLinear", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear", "aux_trans : a transform from the source (curved) coordinate to target (rectilinear) coordinate. An instance of MPL's Transform (inverse transform should be defined) or a tuple of two callable objects which defines the transform and its inverse. The callables need take two arguments of array of source coordinates and should return two target coordinates.", "e.g., x2, y2 = trans(x1, y1)", "[Deprecated] Return (N, 2) array of (x, y) coordinate of the boundary.", "Deprecated since version 3.5.", "Return v=0, nth=1.", "Return list of grid lines as a list of paths (list of points).", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\"", "mpl_toolkits.axisartist.floating_axes features"]}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.get_boundary()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.get_boundary", "type": "axisartist", "text": ["[Deprecated] Return (N, 2) array of (x, y) coordinate of the boundary.", "Deprecated since version 3.5."]}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.get_data_boundary()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.get_data_boundary", "type": "axisartist", "text": ["Return v=0, nth=1."]}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.get_gridlines", "type": "axisartist", "text": ["Return list of grid lines as a list of paths (list of points).", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\""]}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.new_fixed_axis", "type": "axisartist", "text": []}, {"name": "axisartist.grid_finder", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder", "type": "axisartist", "text": ["DictFormatter(format_dict[, formatter])", "format_dict : dictionary for format strings to be used.", "ExtremeFinderSimple(nx, ny)", "A helper class to figure out the range of grid lines that need to be drawn.", "FixedLocator(locs)", "FormatterPrettyPrint([useMathText])", "GridFinder(transform[, extreme_finder, ...])", "transform : transform from the image coordinate (which will be the transData of the axes to the world coordinate.", "MaxNLocator([nbins, steps, trim, integer, ...])"]}, {"name": "axisartist.grid_finder.DictFormatter", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.dictformatter", "type": "axisartist", "text": ["Bases: object", "format_dict : dictionary for format strings to be used. formatter : fall-back formatter", "factor is ignored if value is found in the dictionary", "mpl_toolkits.axisartist.floating_axes features"]}, {"name": "axisartist.grid_finder.DictFormatter.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.dictformatter#mpl_toolkits.axisartist.grid_finder.DictFormatter.__call__", "type": "axisartist", "text": ["factor is ignored if value is found in the dictionary"]}, {"name": "axisartist.grid_finder.ExtremeFinderSimple", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.extremefindersimple", "type": "axisartist", "text": ["Bases: object", "A helper class to figure out the range of grid lines that need to be drawn.", "The number of samples in each direction.", "Compute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2).", "The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes.", "The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling.", "As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions.", "axis_direction demo", "Curvilinear grid demo", "Demo CurveLinear Grid2", "floating_axis demo", "Simple Axis Pad"]}, {"name": "axisartist.grid_finder.ExtremeFinderSimple.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.extremefindersimple#mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple.__call__", "type": "axisartist", "text": ["Compute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2).", "The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes.", "The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling.", "As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions."]}, {"name": "axisartist.grid_finder.FixedLocator", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.fixedlocator", "type": "axisartist", "text": ["Bases: object", "Call self as a function.", "mpl_toolkits.axisartist.floating_axes features"]}, {"name": "axisartist.grid_finder.FixedLocator.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.fixedlocator#mpl_toolkits.axisartist.grid_finder.FixedLocator.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.grid_finder.FormatterPrettyPrint", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.formatterprettyprint", "type": "axisartist", "text": ["Bases: object", "Call self as a function."]}, {"name": "axisartist.grid_finder.FormatterPrettyPrint.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.formatterprettyprint#mpl_toolkits.axisartist.grid_finder.FormatterPrettyPrint.__call__", "type": "axisartist", "text": ["Call self as a function."]}, {"name": "axisartist.grid_finder.GridFinder", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder", "type": "axisartist", "text": ["Bases: object", "transform : transform from the image coordinate (which will be the transData of the axes to the world coordinate.", "or transform = (transform_xy, inv_transform_xy)", "locator1, locator2 : grid locator for 1st and 2nd axis.", "rough number of grids in each direction."]}, {"name": "axisartist.grid_finder.GridFinder.get_grid_info()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.get_grid_info", "type": "axisartist", "text": ["rough number of grids in each direction."]}, {"name": "axisartist.grid_finder.GridFinder.get_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.get_transform", "type": "axisartist", "text": []}, {"name": "axisartist.grid_finder.GridFinder.inv_transform_xy()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.inv_transform_xy", "type": "axisartist", "text": []}, {"name": "axisartist.grid_finder.GridFinder.set_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.set_transform", "type": "axisartist", "text": []}, {"name": "axisartist.grid_finder.GridFinder.transform_xy()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.transform_xy", "type": "axisartist", "text": []}, {"name": "axisartist.grid_finder.GridFinder.update()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.update", "type": "axisartist", "text": []}, {"name": "axisartist.grid_finder.GridFinder.update_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.update_transform", "type": "axisartist", "text": []}, {"name": "axisartist.grid_finder.MaxNLocator", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.maxnlocator", "type": "axisartist", "text": ["Bases: matplotlib.ticker.MaxNLocator", "Maximum number of intervals; one less than max number of ticks. If the string 'auto', the number of bins will be automatically determined based on the length of the axis.", "Sequence of nice numbers starting with 1 and ending with 10; e.g., [1, 2, 4, 5, 10], where the values are acceptable tick multiples. i.e. for the example, 20, 40, 60 would be an acceptable set of ticks, as would 0.4, 0.6, 0.8, because they are multiples of 2. However, 30, 60, 90 would not be allowed because 3 does not appear in the list of steps.", "If True, ticks will take only integer values, provided at least min_n_ticks integers are found within the view limits.", "If True, autoscaling will result in a range symmetric about zero.", "Remove edge ticks -- useful for stacked or ganged plots where the upper tick of one axes overlaps with the lower tick of the axes above it, primarily when rcParams[\"axes.autolimit_mode\"] (default: 'data') is 'round_numbers'. If prune=='lower', the smallest tick will be removed. If prune == 'upper', the largest tick will be removed. If prune == 'both', the largest and smallest ticks will be removed. If prune is None, no ticks will be removed.", "Relax nbins and integer constraints if necessary to obtain this minimum number of ticks.", "Return the locations of the ticks.", "axis_direction demo", "Demo CurveLinear Grid2", "mpl_toolkits.axisartist.floating_axes features", "Simple Axis Pad"]}, {"name": "axisartist.grid_finder.MaxNLocator.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.maxnlocator#mpl_toolkits.axisartist.grid_finder.MaxNLocator.__call__", "type": "axisartist", "text": ["Return the locations of the ticks."]}, {"name": "axisartist.grid_helper_curvelinear", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear", "type": "axisartist", "text": ["An experimental support for curvilinear grid.", "FixedAxisArtistHelper(grid_helper, side[, ...])", "Helper class for a fixed axis.", "FloatingAxisArtistHelper(grid_helper, ...[, ...])", "nth_coord = along which coordinate value varies.", "GridHelperCurveLinear(aux_trans[, ...])", "aux_trans : a transform from the source (curved) coordinate to target (rectilinear) coordinate."]}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed", "Helper class for a fixed axis.", "nth_coord = 0 -> x axis, nth_coord = 1 -> y axis", "[Deprecated]", "Deprecated since version 3.5: ", "tick_loc, tick_angle, tick_label"]}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.change_tick_coord()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.change_tick_coord", "type": "axisartist", "text": ["[Deprecated]", "Deprecated since version 3.5: "]}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_iterators", "type": "axisartist", "text": ["tick_loc, tick_angle, tick_label"]}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_transform", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.update_lim", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating", "nth_coord = 0 -> x axis, nth_coord = 1 -> y axis", "tick_loc, tick_angle, tick_label, (optionally) tick_label"]}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_pos_angle()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_pos_angle", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_transform", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line_transform", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_iterators", "type": "axisartist", "text": ["tick_loc, tick_angle, tick_label, (optionally) tick_label"]}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_transform", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.set_extremes()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.set_extremes", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.update_lim", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear", "type": "axisartist", "text": ["Bases: mpl_toolkits.axisartist.axislines.GridHelperBase", "aux_trans : a transform from the source (curved) coordinate to target (rectilinear) coordinate. An instance of MPL's Transform (inverse transform should be defined) or a tuple of two callable objects which defines the transform and its inverse. The callables need take two arguments of array of source coordinates and should return two target coordinates.", "e.g., x2, y2 = trans(x1, y1)", "Return list of grid lines as a list of paths (list of points).", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\""]}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_gridlines", "type": "axisartist", "text": ["Return list of grid lines as a list of paths (list of points).", "which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\""]}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_tick_iterator()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_tick_iterator", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_fixed_axis", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_floating_axis()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_floating_axis", "type": "axisartist", "text": []}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.update_grid_finder()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.update_grid_finder", "type": "axisartist", "text": []}, {"name": "axisartist.parasite_axes", "path": "_as_gen/mpl_toolkits.axisartist.parasite_axes", "type": "axisartist", "text": []}, {"name": "backend_agg", "path": "backend_agg_api", "type": "backend_agg", "text": ["An Anti-Grain Geometry (AGG) backend.", "Features that are implemented:", "Still TODO:", "alias of matplotlib.backends.backend_agg.FigureCanvasAgg", "Bases: matplotlib.backend_bases.FigureCanvasBase", "Get the image as a memoryview to the renderer's buffer.", "draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure.", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "Write the figure to a JPEG file.", "The file to write to.", "Additional keyword arguments that are passed to PIL.Image.Image.save when saving the figure.", "Write the figure to a JPEG file.", "The file to write to.", "Additional keyword arguments that are passed to PIL.Image.Image.save when saving the figure.", "Write the figure to a PNG file.", "The file to write to.", "Metadata in the PNG file as key-value pairs of bytes or latin-1 encodable strings. According to the PNG specification, keys must be shorter than 79 chars.", "The PNG specification defines some common keywords that may be used as appropriate:", "Other keywords may be invented for other purposes.", "If 'Software' is not given, an autogenerated value for Matplotlib will be used. This can be removed by setting it to None.", "For more details see the PNG specification.", "Keyword arguments passed to PIL.Image.Image.save.", "If the 'pnginfo' key is present, it completely overrides metadata, including the default 'Software' key.", "Get the image as ARGB bytes.", "draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure.", "Get the image as RGB bytes.", "draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure.", "Bases: matplotlib.backend_bases.RendererBase", "The renderer handles all the drawing primitives using a graphics context instance that controls the colors/styles", "Draw mathtext using matplotlib.mathtext.", "Draw a Path instance using the given affine transform.", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Return the canvas width and height in display coords.", "[Deprecated]", "Deprecated since version 3.4: ", "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop.", "Return whether image composition by Matplotlib should be skipped.", "Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return not rcParams[\"image.composite_image\"].", "Return whether arbitrary affine transformations in draw_image() are supported (True for most vector backends).", "Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float", "Restore the saved region. If bbox (instance of BboxBase, or its extents) is given, only the region specified by the bbox will be restored. xy (a pair of floats) optionally specifies the new position (the LLC of the original region, not the LLC of the bbox) where the region will be restored.", "Start filtering. It simply create a new canvas (the old one is saved).", "Save the plot in the current canvas as a image and apply the post_processing function.", "# ny, nx, depth = image.shape # image (numpy array) has RGBA channels and has a depth of 4. ... # create a new_image (numpy array of 4 channels, size can be # different). The resulting image may have offsets from # lower-left corner of the original image return new_image, offset_x, offset_y", "The saved renderer is restored and the returned image from post_processing is plotted (using draw_image) on it.", "[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "backend_bases", "path": "backend_bases_api", "type": "backend_bases", "text": ["Abstract base classes define the primitives that renderers and graphics contexts must implement to serve as a Matplotlib backend.", "An abstract base class to handle drawing/rendering operations.", "The abstraction layer that separates the Figure from the backend specific details like a user interface drawing area.", "An abstract base class that provides color, line styles, etc.", "The base class for all of the Matplotlib event handling. Derived classes such as KeyEvent and MouseEvent store the meta data like keys and buttons pressed, x and y locations in pixel and Axes coordinates.", "The base class for the Show class of each interactive backend; the 'show' callable is then set to Show.__call__.", "The base class for the Toolbar class of each interactive backend.", "Bases: matplotlib.backend_bases.Event", "An event triggered by a figure being closed.", "Bases: matplotlib.backend_bases.Event", "An event triggered by a draw operation on the canvas.", "In most backends, callbacks subscribed to this event will be fired after the rendering is complete but before the screen is updated. Any extra artists drawn to the canvas's renderer will be reflected without an explicit call to blit.", "Warning", "Calling canvas.draw and canvas.blit in these callbacks may not be safe with all backends and may cause infinite recursion.", "A DrawEvent has a number of special attributes in addition to those defined by the parent Event class.", "The renderer for the draw event.", "Bases: object", "A Matplotlib event.", "The following attributes are defined and shown with their default values. Subclasses may define additional attributes.", "The event name.", "The backend-specific canvas instance generating the event.", "The GUI event that triggered the Matplotlib event.", "Bases: object", "The canvas the figure renders into.", "A high-level figure instance.", "Blit the canvas in bbox (default entire canvas).", "Callback processing for mouse button press events.", "Backend derived classes should call this function on any mouse button press. (x, y) are the canvas coords ((0, 0) is lower left). button and key are as defined in MouseEvent.", "This method will call all functions connected to the 'button_press_event' with a MouseEvent instance.", "Callback processing for mouse button release events.", "Backend derived classes should call this function on any mouse button release.", "This method will call all functions connected to the 'button_release_event' with a MouseEvent instance.", "The canvas coordinates where 0=left.", "The canvas coordinates where 0=bottom.", "The native UI event that generated the Matplotlib event.", "Pass a CloseEvent to all functions connected to close_event.", "The ratio of physical to logical pixels used for the canvas on screen.", "By default, this is 1, meaning physical and logical pixels are the same size. Subclasses that support High DPI screens may set this property to indicate that said ratio is different. All Matplotlib interaction, unless working directly with the canvas, remains in logical pixels.", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "Pass a DrawEvent to all functions connected to draw_event.", "Request a widget redraw once control returns to the GUI event loop.", "Even if multiple calls to draw_idle occur before control returns to the GUI event loop, the figure will only be rendered once.", "Backends may choose to override the method and implement their own strategy to prevent multiple renderings.", "Callback processing for the mouse cursor entering the canvas.", "Backend derived classes should call this function when entering canvas.", "The native UI event that generated the Matplotlib event.", "The coordinate location of the pointer when the canvas is entered.", "Flush the GUI events for the figure.", "Interactive backends need to reimplement this method.", "Return a string, which includes extension, suitable for use as a default filename.", "Return the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png').", "The returned string does not include a period. This method is overridden in backends that only support a single file type.", "Return dict of savefig file formats supported by this backend.", "Return a dict of savefig file formats supported by this backend, where the keys are a file type name, such as 'Joint Photographic Experts Group', and the values are a list of filename extensions used for that filetype, such as ['jpg', 'jpeg'].", "Return the figure width and height in integral points or pixels.", "When the figure is used on High DPI screens (and the backend supports it), the truncation to integers occurs after scaling by the device pixel ratio.", "Whether to return true physical pixels or logical pixels. Physical pixels may be used by backends that support HiDPI, but still configure the canvas using its actual size.", "The size of the figure, in points or pixels, depending on the backend.", "[Deprecated] Return the title text of the window containing the figure, or None if there is no window (e.g., a PS backend).", "Deprecated since version 3.4.", "Set the child Axes which is grabbing the mouse events.", "Usually called by the widgets themselves. It is an error to call this if the mouse is already grabbed by another axes.", "Return the topmost visible Axes containing the point xy.", "(x, y) pixel positions from left/bottom of the canvas.", "The topmost visible axes containing the point, or None if no axes.", "Return whether the renderer is in the process of saving to a file, rather than rendering for an on-screen buffer.", "Pass a KeyEvent to all functions connected to key_press_event.", "Pass a KeyEvent to all functions connected to key_release_event.", "Callback processing for the mouse cursor leaving the canvas.", "Backend derived classes should call this function when leaving canvas.", "The native UI event that generated the Matplotlib event.", "Callback processing for mouse movement events.", "Backend derived classes should call this function on any motion-notify-event.", "This method will call all functions connected to the 'motion_notify_event' with a MouseEvent instance.", "The canvas coordinates where 0=left.", "The canvas coordinates where 0=bottom.", "The native UI event that generated the Matplotlib event.", "Bind function func to event s.", "One of the following events ids:", "The callback function to be executed, which must have the signature:", "For the location events (button and key press/release), if the mouse is over the axes, the inaxes attribute of the event will be set to the Axes the event occurs is over, and additionally, the variables xdata and ydata attributes will be set to the mouse location in data coordinates. See KeyEvent and MouseEvent for more info.", "A connection id that can be used with FigureCanvasBase.mpl_disconnect.", "Disconnect the callback with id cid.", "Create a new backend-specific subclass of Timer.", "This is useful for getting periodic events through the backend's native event loop. Implemented only for backends with GUIs.", "Timer interval in milliseconds.", "Sequence of (func, args, kwargs) where func(*args, **kwargs) will be executed by the timer every interval.", "Callbacks which return False or 0 will be removed from the timer.", "Callback processing for pick events.", "This method will be called by artists who are picked and will fire off PickEvent callbacks registered listeners.", "Note that artists are not pickable by default (see Artist.set_picker).", "Render the figure to hardcopy. Set the figure patch face and edge colors. This is useful because some of the GUIs have a gray figure face color background and you'll probably want to override this on hardcopy.", "The file where the figure is saved.", "The dots per inch to save the figure in.", "The facecolor of the figure. If 'auto', use the current figure facecolor.", "The edgecolor of the figure. If 'auto', use the current figure edgecolor.", "Only currently applies to PostScript printing.", "Force a specific file format. If not given, the format is inferred from the filename extension, and if that fails from rcParams[\"savefig.format\"] (default: 'png').", "Bounding box in inches: only the given portion of the figure is saved. If 'tight', try to figure out the tight bbox of the figure.", "Amount of padding around the figure when bbox_inches is 'tight'.", "A list of extra artists that will be considered when the tight bbox is calculated.", "Use a non-default backend to render the file, e.g. to render a png file with the \"cairo\" backend rather than the default \"agg\", or a pdf file with the \"pgf\" backend rather than the default \"pdf\". Note that the default backend is normally sufficient. See The builtin backends for a list of valid backends for each file format. Custom backends can be referenced as \"module://...\".", "Release the mouse grab held by the Axes ax.", "Usually called by the widgets. It is ok to call this even if ax doesn't have the mouse grab currently.", "UNUSED: Set the canvas size in pixels.", "Certain backends may implement a similar method internally, but this is not a requirement of, nor is it used by, Matplotlib itself.", "Pass a ResizeEvent to all functions connected to resize_event.", "Callback processing for scroll events.", "Backend derived classes should call this function on any scroll wheel event. (x, y) are the canvas coords ((0, 0) is lower left). button and key are as defined in MouseEvent.", "This method will call all functions connected to the 'scroll_event' with a MouseEvent instance.", "Set the current cursor.", "This may have no effect if the backend does not display anything.", "If required by the backend, this method should trigger an update in the backend event loop after the cursor is set, as this method may be called e.g. before a long-running task during which the GUI is not updated.", "The cursor to display over the canvas. Note: some backends may change the cursor for the entire window.", "[Deprecated] Set the title text of the window containing the figure. Note that this has no effect if there is no window (e.g., a PS backend).", "Deprecated since version 3.4.", "Start a blocking event loop.", "Such an event loop is used by interactive functions, such as ginput and waitforbuttonpress, to wait for events.", "The event loop blocks until a callback function triggers stop_event_loop, or timeout is reached.", "If timeout is 0 or negative, never timeout.", "Only interactive backends need to reimplement this method and it relies on flush_events being properly implemented.", "Interactive backends should implement this in a more native way.", "Stop the current blocking event loop.", "Interactive backends need to reimplement this to match start_event_loop", "Instantiate an instance of FigureCanvasClass", "This is used for backend switching, e.g., to instantiate a FigureCanvasPS from a FigureCanvasGTK. Note, deep copying is not done, so any changes to one of the instances (e.g., setting figure size or line props), will be reflected in the other", "Bases: object", "A backend-independent abstraction of a figure container and controller.", "The figure manager is used by pyplot to interact with the window in a backend-independent way. It's an adapter for the real (GUI) framework that represents the visual figure on screen.", "GUI backends define from this class to translate common operations such as show or resize to the GUI-specific code. Non-GUI backends do not support these operations an can just use the base class.", "This following basic operations are accessible:", "Window operations", "Key and mouse button press handling", "The figure manager sets up default key and mouse button press handling by hooking up the key_press_handler to the matplotlib event system. This ensures the same shortcuts and mouse actions across backends.", "Other operations", "Subclasses will have additional attributes and functions to access additional functionality. This is of course backend-specific. For example, most GUI backends have window and toolbar attributes that give access to the native GUI widgets of the respective framework.", "The backend-specific canvas instance.", "The figure number.", "The default key handler cid, when using the toolmanager. To disable the default key press handling use:", "The default mouse button handler cid, when using the toolmanager. To disable the default button press handling use:", "[Deprecated] The default Matplotlib button actions for extra mouse buttons.", "Deprecated since version 3.4.", "Return the title text of the window containing the figure, or None if there is no window (e.g., a PS backend).", "[Deprecated] Implement the default Matplotlib key bindings defined at Navigation keyboard shortcuts.", "Deprecated since version 3.4.", "For GUI backends, resize the window (in physical pixels).", "Set the title text of the window containing the figure.", "This has no effect for non-GUI (e.g., PS) backends.", "For GUI backends, show the figure window and redraw. For non-GUI backends, raise an exception, unless running headless (i.e. on Linux with an unset DISPLAY); this exception is converted to a warning in Figure.show.", "Bases: object", "An abstract base class that provides color, line styles, etc.", "Copy properties from gc to self.", "Return the alpha value used for blending - not supported on all backends.", "Return whether the object should try to do antialiased rendering.", "Return the CapStyle.", "Return the clip path in the form (path, transform), where path is a Path instance, and transform is an affine transform to apply to the path before clipping.", "Return the clip rectangle as a Bbox instance.", "Return the dash style as an (offset, dash-list) pair.", "The dash list is a even-length list that gives the ink on, ink off in points. See p. 107 of to PostScript blue book for more info.", "Default value is (None, None).", "Return whether the value given by get_alpha() should be used to override any other alpha-channel values.", "Return the object identifier if one is set, None otherwise.", "Get the current hatch style.", "Get the hatch color.", "Get the hatch linewidth.", "Return a Path for the current hatch.", "Return the JoinStyle.", "Return the line width in points.", "Return a tuple of three or four floats from 0-1.", "Return the sketch parameters for the artist.", "A 3-tuple with the following elements:", "May return None if no sketch parameters were set.", "Return the snap setting, which can be:", "Return a url if one is set, None otherwise.", "Restore the graphics context from the stack - needed only for backends that save graphics contexts on a stack.", "Set the alpha value used for blending - not supported on all backends.", "If alpha=None (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, alpha will override them.", "Set whether object should be drawn with antialiased rendering.", "Set how to draw endpoints of lines.", "Set the clip path to a TransformedPath or None.", "Set the clip rectangle to a Bbox or None.", "Set the dash style for the gc.", "The offset (usually 0).", "The on-off sequence as points. None specifies a solid line.", "See p. 107 of to PostScript blue book for more info.", "Set the foreground color.", "If fg is known to be an (r, g, b, a) tuple, isRGBA can be set to True to improve performance.", "Set the id.", "Set the hatch style (for fills).", "Set the hatch color.", "Set how to draw connections between line segments.", "Set the linewidth in points.", "Set the sketch parameters.", "The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is None, or not provided, no sketch filter will be provided.", "The length of the wiggle along the line, in pixels.", "The scale factor by which the length is shrunken or expanded.", "Set the snap setting which may be:", "Set the url for links in compatible backends.", "Bases: matplotlib.backend_bases.LocationEvent", "A key event (key press, key release).", "A KeyEvent has a number of special attributes in addition to those defined by the parent Event and LocationEvent classes.", "Modifier keys will be prefixed to the pressed key and will be in the order \"ctrl\", \"alt\", \"super\". The exception to this rule is when the pressed key is itself a modifier key, therefore \"ctrl+alt\" and \"alt+control\" can both be valid key values.", "The key(s) pressed. Could be None, a single case sensitive Unicode character (\"g\", \"G\", \"#\", etc.), a special key (\"control\", \"shift\", \"f1\", \"up\", etc.) or a combination of the above (e.g., \"ctrl+alt+g\", \"ctrl+alt+G\").", "Bases: matplotlib.backend_bases.Event", "An event that has a screen location.", "A LocationEvent has a number of special attributes in addition to those defined by the parent Event class.", "Event location in pixels from bottom left of canvas.", "The Axes instance over which the mouse is, if any.", "Data coordinates of the mouse within inaxes, or None if the mouse is not over an Axes.", "Bases: enum.IntEnum", "An enumeration.", "Bases: matplotlib.backend_bases.LocationEvent", "A mouse event ('button_press_event', 'button_release_event', 'scroll_event', 'motion_notify_event').", "A MouseEvent has a number of special attributes in addition to those defined by the parent Event and LocationEvent classes.", "The button pressed. 'up' and 'down' are used for scroll events. Note that LEFT and RIGHT actually refer to the \"primary\" and \"secondary\" buttons, i.e. if the user inverts their left and right buttons (\"left-handed setting\") then the LEFT button will be the one physically on the right.", "The key pressed when the mouse event triggered, e.g. 'shift'. See KeyEvent.", "Warning", "This key is currently obtained from the last 'key_press_event' or 'key_release_event' that occurred within the canvas. Thus, if the last change of keyboard state occurred while the canvas did not have focus, this attribute will be wrong.", "The number of scroll steps (positive for 'up', negative for 'down'). This applies only to 'scroll_event' and defaults to 0 otherwise.", "Whether the event is a double-click. This applies only to 'button_press_event' and is False otherwise. In particular, it's not used in 'button_release_event'.", "Bases: object", "Base class for the navigation cursor, version 2.", "Backends must implement a canvas that handles connections for 'button_press_event' and 'button_release_event'. See FigureCanvasBase.mpl_connect() for more information.", "They must also define", "save the current figure", "draw the zoom to rect \"rubberband\" rectangle", "display message", "you can change the history back / forward buttons to indicate disabled / enabled state.", "and override __init__ to set up the toolbar -- without forgetting to call the base-class init. Typically, __init__ needs to set up toolbar buttons connected to the home, back, forward, pan, zoom, and save_figure methods and using standard icons in the \"images\" subdirectory of the data path.", "That's it, we'll do the rest!", "Move back up the view lim stack.", "For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them.", "Callback for dragging in pan/zoom mode.", "Callback for dragging in zoom mode.", "Draw a rectangle rubberband to indicate zoom limits.", "Note that it is not guaranteed that x0 <= x1 and y0 <= y1.", "Move forward in the view lim stack.", "For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them.", "Restore the original view.", "For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them.", "Toggle the pan/zoom tool.", "Pan with left button, zoom with right.", "Callback for mouse button press in pan/zoom mode.", "Callback for mouse button press in zoom to rect mode.", "Push the current view limits and position onto the stack.", "Callback for mouse button release in pan/zoom mode.", "Callback for mouse button release in zoom to rect mode.", "Remove the rubberband.", "Save the current figure.", "[Deprecated] Set the current cursor to one of the Cursors enums values.", "If required by the backend, this method should trigger an update in the backend event loop after the cursor is set, as this method may be called e.g. before a long-running task during which the GUI is not updated.", "Deprecated since version 3.5.", "Enable or disable the back/forward button.", "Display a message on toolbar or in status bar.", "Reset the axes stack.", "Toggle zoom to rect mode.", "Bases: Exception", "Raised when trying show a figure in a non-GUI backend.", "Bases: matplotlib.backend_bases.Event", "A pick event.", "This event is fired when the user picks a location on the canvas sufficiently close to an artist that has been made pickable with Artist.set_picker.", "A PickEvent has a number of special attributes in addition to those defined by the parent Event class.", "Bind a function on_pick() to pick events, that prints the coordinates of the picked data point:", "The mouse event that generated the pick.", "The picked artist. Note that artists are not pickable by default (see Artist.set_picker).", "Additional attributes may be present depending on the type of the picked object; e.g., a Line2D pick may define different extra attributes than a PatchCollection pick.", "Bases: object", "An abstract base class to handle drawing/rendering operations.", "The following methods must be implemented in the backend for full functionality (though just implementing draw_path() alone would give a highly capable backend):", "The following methods should be implemented in the backend for optimization reasons:", "Close a grouping element with label s.", "Only used by the SVG renderer.", "Draw a Gouraud-shaded triangle.", "The graphics context.", "Array of (x, y) points for the triangle.", "RGBA colors for each point of the triangle.", "An affine transform to apply to the points.", "Draw a series of Gouraud triangles.", "Array of N (x, y) points for the triangles.", "Array of N RGBA colors for each point of the triangles.", "An affine transform to apply to the points.", "Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).", "Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path.", "Draw a Path instance using the given affine transform.", "Draw a collection of paths selecting drawing properties from the lists facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a list of offsets to apply to each of the paths. The offsets in offsets are first transformed by offsetTrans before being applied.", "offset_position is unused now, but the argument is kept for backwards compatibility.", "This provides a fallback implementation of draw_path_collection() that makes multiple calls to draw_path(). Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods _iter_collection_raw_paths() and _iter_collection() are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of draw_path_collection() can be made globally.", "Fallback implementation of draw_quad_mesh() that generates paths and then calls draw_path_collection().", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Return whether y values increase from top to bottom.", "Note that this only affects drawing of texts and images.", "Return the canvas width and height in display coords.", "Get the factor by which to magnify images passed to draw_image(). Allows a backend to have images at a different resolution to other artists.", "Return the TexManager instance.", "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop.", "Return an instance of a GraphicsContextBase.", "Open a grouping element with label s and gid (if set) as id.", "Only used by the SVG renderer.", "Return whether image composition by Matplotlib should be skipped.", "Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return not rcParams[\"image.composite_image\"].", "Return whether arbitrary affine transformations in draw_image() are supported (True for most vector backends).", "Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float", "Switch to a temporary renderer for image filtering effects.", "Currently only supported by the agg renderer.", "Switch to the raster renderer.", "Used by MixedModeRenderer.", "Switch back to the original renderer. The contents of the temporary renderer is processed with the filter_func and is drawn on the original renderer as an image.", "Currently only supported by the agg renderer.", "Switch back to the vector renderer and draw the contents of the raster renderer as an image on the vector renderer.", "Used by MixedModeRenderer.", "Bases: matplotlib.backend_bases.Event", "An event triggered by a canvas resize.", "A ResizeEvent has a number of special attributes in addition to those defined by the parent Event class.", "Width of the canvas in pixels.", "Height of the canvas in pixels.", "Bases: matplotlib.backend_bases._Backend", "Simple base class to generate a show() function in backends.", "Subclass must override mainloop() method.", "Bases: object", "A base class for providing timer events, useful for things animations. Backends need to implement a few specific methods in order to use their own timing mechanisms so that the timer events are integrated into their event loops.", "Subclasses must override the following methods:", "Subclasses may additionally override the following methods:", "The time between timer events in milliseconds. Will be stored as timer.interval.", "List of (func, args, kwargs) tuples that will be called upon timer events. This list is accessible as timer.callbacks and can be manipulated directly, or the functions add_callback and remove_callback can be used.", "Register func to be called by timer when the event fires. Any additional arguments provided will be passed to func.", "This function returns func, which makes it possible to use it as a decorator.", "The time between timer events, in milliseconds.", "Remove func from list of callbacks.", "args and kwargs are optional and used to distinguish between copies of the same function registered to be called with different arguments. This behavior is deprecated. In the future, *args, **kwargs won't be considered anymore; to keep a specific callback removable by itself, pass it to add_callback as a functools.partial object.", "Whether this timer should stop after a single run.", "Start the timer object.", "Timer interval in milliseconds; overrides a previously set interval if provided.", "Stop the timer.", "Bases: object", "Base class for all tool containers, e.g. toolbars.", "The tools with which this ToolContainer wants to communicate.", "Add a tool to this container.", "The tool to add, see ToolManager.get_tool.", "The name of the group to add this tool to.", "The position within the group to place this tool.", "Add a toolitem to the container.", "This method must be implemented per backend.", "The callback associated with the button click event, must be exactly self.trigger_tool(name).", "Name of the tool to add, this gets used as the tool's ID and as the default label of the buttons.", "Name of the group that this tool belongs to.", "Position of the tool within its group, if -1 it goes at the end.", "Filename of the image for the button or None.", "Description of the tool, used for the tooltips.", "Remove a toolitem from the ToolContainer.", "This method must get implemented per backend.", "Called when ToolManager emits a tool_removed_event.", "Name of the tool to remove.", "Display a message on the toolbar.", "Message text.", "Toggle the toolitem without firing event.", "Id of the tool to toggle.", "Whether to set this tool as toggled or not.", "Trigger the tool.", "Name (id) of the tool triggered from within the container.", "The default Matplotlib button actions for extra mouse buttons.", "Parameters are as for key_press_handler, except that event is a MouseEvent.", "Return the registered default canvas for given file format. Handles deferred import of required backend.", "Implement the default Matplotlib key bindings for the canvas and toolbar described at Navigation keyboard shortcuts.", "A key press/release event.", "The backend-specific canvas instance. This parameter is kept for back-compatibility, but, if set, should always be equal to event.canvas.", "The navigation cursor toolbar. This parameter is kept for back-compatibility, but, if set, should always be equal to event.canvas.toolbar.", "Register a backend for saving to a given file format.", "File extension", "Backend for handling file output", "Description of the file type."]}, {"name": "backend_bases.button_press_handler()", "path": "backend_bases_api#matplotlib.backend_bases.button_press_handler", "type": "backend_bases", "text": ["The default Matplotlib button actions for extra mouse buttons.", "Parameters are as for key_press_handler, except that event is a MouseEvent."]}, {"name": "backend_bases.CloseEvent", "path": "backend_bases_api#matplotlib.backend_bases.CloseEvent", "type": "backend_bases", "text": ["Bases: matplotlib.backend_bases.Event", "An event triggered by a figure being closed."]}, {"name": "backend_bases.DrawEvent", "path": "backend_bases_api#matplotlib.backend_bases.DrawEvent", "type": "backend_bases", "text": ["Bases: matplotlib.backend_bases.Event", "An event triggered by a draw operation on the canvas.", "In most backends, callbacks subscribed to this event will be fired after the rendering is complete but before the screen is updated. Any extra artists drawn to the canvas's renderer will be reflected without an explicit call to blit.", "Warning", "Calling canvas.draw and canvas.blit in these callbacks may not be safe with all backends and may cause infinite recursion.", "A DrawEvent has a number of special attributes in addition to those defined by the parent Event class.", "The renderer for the draw event."]}, {"name": "backend_bases.Event", "path": "backend_bases_api#matplotlib.backend_bases.Event", "type": "backend_bases", "text": ["Bases: object", "A Matplotlib event.", "The following attributes are defined and shown with their default values. Subclasses may define additional attributes.", "The event name.", "The backend-specific canvas instance generating the event.", "The GUI event that triggered the Matplotlib event."]}, {"name": "backend_bases.FigureCanvasBase", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase", "type": "backend_bases", "text": ["Bases: object", "The canvas the figure renders into.", "A high-level figure instance.", "Blit the canvas in bbox (default entire canvas).", "Callback processing for mouse button press events.", "Backend derived classes should call this function on any mouse button press. (x, y) are the canvas coords ((0, 0) is lower left). button and key are as defined in MouseEvent.", "This method will call all functions connected to the 'button_press_event' with a MouseEvent instance.", "Callback processing for mouse button release events.", "Backend derived classes should call this function on any mouse button release.", "This method will call all functions connected to the 'button_release_event' with a MouseEvent instance.", "The canvas coordinates where 0=left.", "The canvas coordinates where 0=bottom.", "The native UI event that generated the Matplotlib event.", "Pass a CloseEvent to all functions connected to close_event.", "The ratio of physical to logical pixels used for the canvas on screen.", "By default, this is 1, meaning physical and logical pixels are the same size. Subclasses that support High DPI screens may set this property to indicate that said ratio is different. All Matplotlib interaction, unless working directly with the canvas, remains in logical pixels.", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "Pass a DrawEvent to all functions connected to draw_event.", "Request a widget redraw once control returns to the GUI event loop.", "Even if multiple calls to draw_idle occur before control returns to the GUI event loop, the figure will only be rendered once.", "Backends may choose to override the method and implement their own strategy to prevent multiple renderings.", "Callback processing for the mouse cursor entering the canvas.", "Backend derived classes should call this function when entering canvas.", "The native UI event that generated the Matplotlib event.", "The coordinate location of the pointer when the canvas is entered.", "Flush the GUI events for the figure.", "Interactive backends need to reimplement this method.", "Return a string, which includes extension, suitable for use as a default filename.", "Return the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png').", "The returned string does not include a period. This method is overridden in backends that only support a single file type.", "Return dict of savefig file formats supported by this backend.", "Return a dict of savefig file formats supported by this backend, where the keys are a file type name, such as 'Joint Photographic Experts Group', and the values are a list of filename extensions used for that filetype, such as ['jpg', 'jpeg'].", "Return the figure width and height in integral points or pixels.", "When the figure is used on High DPI screens (and the backend supports it), the truncation to integers occurs after scaling by the device pixel ratio.", "Whether to return true physical pixels or logical pixels. Physical pixels may be used by backends that support HiDPI, but still configure the canvas using its actual size.", "The size of the figure, in points or pixels, depending on the backend.", "[Deprecated] Return the title text of the window containing the figure, or None if there is no window (e.g., a PS backend).", "Deprecated since version 3.4.", "Set the child Axes which is grabbing the mouse events.", "Usually called by the widgets themselves. It is an error to call this if the mouse is already grabbed by another axes.", "Return the topmost visible Axes containing the point xy.", "(x, y) pixel positions from left/bottom of the canvas.", "The topmost visible axes containing the point, or None if no axes.", "Return whether the renderer is in the process of saving to a file, rather than rendering for an on-screen buffer.", "Pass a KeyEvent to all functions connected to key_press_event.", "Pass a KeyEvent to all functions connected to key_release_event.", "Callback processing for the mouse cursor leaving the canvas.", "Backend derived classes should call this function when leaving canvas.", "The native UI event that generated the Matplotlib event.", "Callback processing for mouse movement events.", "Backend derived classes should call this function on any motion-notify-event.", "This method will call all functions connected to the 'motion_notify_event' with a MouseEvent instance.", "The canvas coordinates where 0=left.", "The canvas coordinates where 0=bottom.", "The native UI event that generated the Matplotlib event.", "Bind function func to event s.", "One of the following events ids:", "The callback function to be executed, which must have the signature:", "For the location events (button and key press/release), if the mouse is over the axes, the inaxes attribute of the event will be set to the Axes the event occurs is over, and additionally, the variables xdata and ydata attributes will be set to the mouse location in data coordinates. See KeyEvent and MouseEvent for more info.", "A connection id that can be used with FigureCanvasBase.mpl_disconnect.", "Disconnect the callback with id cid.", "Create a new backend-specific subclass of Timer.", "This is useful for getting periodic events through the backend's native event loop. Implemented only for backends with GUIs.", "Timer interval in milliseconds.", "Sequence of (func, args, kwargs) where func(*args, **kwargs) will be executed by the timer every interval.", "Callbacks which return False or 0 will be removed from the timer.", "Callback processing for pick events.", "This method will be called by artists who are picked and will fire off PickEvent callbacks registered listeners.", "Note that artists are not pickable by default (see Artist.set_picker).", "Render the figure to hardcopy. Set the figure patch face and edge colors. This is useful because some of the GUIs have a gray figure face color background and you'll probably want to override this on hardcopy.", "The file where the figure is saved.", "The dots per inch to save the figure in.", "The facecolor of the figure. If 'auto', use the current figure facecolor.", "The edgecolor of the figure. If 'auto', use the current figure edgecolor.", "Only currently applies to PostScript printing.", "Force a specific file format. If not given, the format is inferred from the filename extension, and if that fails from rcParams[\"savefig.format\"] (default: 'png').", "Bounding box in inches: only the given portion of the figure is saved. If 'tight', try to figure out the tight bbox of the figure.", "Amount of padding around the figure when bbox_inches is 'tight'.", "A list of extra artists that will be considered when the tight bbox is calculated.", "Use a non-default backend to render the file, e.g. to render a png file with the \"cairo\" backend rather than the default \"agg\", or a pdf file with the \"pgf\" backend rather than the default \"pdf\". Note that the default backend is normally sufficient. See The builtin backends for a list of valid backends for each file format. Custom backends can be referenced as \"module://...\".", "Release the mouse grab held by the Axes ax.", "Usually called by the widgets. It is ok to call this even if ax doesn't have the mouse grab currently.", "UNUSED: Set the canvas size in pixels.", "Certain backends may implement a similar method internally, but this is not a requirement of, nor is it used by, Matplotlib itself.", "Pass a ResizeEvent to all functions connected to resize_event.", "Callback processing for scroll events.", "Backend derived classes should call this function on any scroll wheel event. (x, y) are the canvas coords ((0, 0) is lower left). button and key are as defined in MouseEvent.", "This method will call all functions connected to the 'scroll_event' with a MouseEvent instance.", "Set the current cursor.", "This may have no effect if the backend does not display anything.", "If required by the backend, this method should trigger an update in the backend event loop after the cursor is set, as this method may be called e.g. before a long-running task during which the GUI is not updated.", "The cursor to display over the canvas. Note: some backends may change the cursor for the entire window.", "[Deprecated] Set the title text of the window containing the figure. Note that this has no effect if there is no window (e.g., a PS backend).", "Deprecated since version 3.4.", "Start a blocking event loop.", "Such an event loop is used by interactive functions, such as ginput and waitforbuttonpress, to wait for events.", "The event loop blocks until a callback function triggers stop_event_loop, or timeout is reached.", "If timeout is 0 or negative, never timeout.", "Only interactive backends need to reimplement this method and it relies on flush_events being properly implemented.", "Interactive backends should implement this in a more native way.", "Stop the current blocking event loop.", "Interactive backends need to reimplement this to match start_event_loop", "Instantiate an instance of FigureCanvasClass", "This is used for backend switching, e.g., to instantiate a FigureCanvasPS from a FigureCanvasGTK. Note, deep copying is not done, so any changes to one of the instances (e.g., setting figure size or line props), will be reflected in the other"]}, {"name": "backend_bases.FigureCanvasBase.blit()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.blit", "type": "backend_bases", "text": ["Blit the canvas in bbox (default entire canvas)."]}, {"name": "backend_bases.FigureCanvasBase.button_press_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.button_press_event", "type": "backend_bases", "text": ["Callback processing for mouse button press events.", "Backend derived classes should call this function on any mouse button press. (x, y) are the canvas coords ((0, 0) is lower left). button and key are as defined in MouseEvent.", "This method will call all functions connected to the 'button_press_event' with a MouseEvent instance."]}, {"name": "backend_bases.FigureCanvasBase.button_release_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.button_release_event", "type": "backend_bases", "text": ["Callback processing for mouse button release events.", "Backend derived classes should call this function on any mouse button release.", "This method will call all functions connected to the 'button_release_event' with a MouseEvent instance.", "The canvas coordinates where 0=left.", "The canvas coordinates where 0=bottom.", "The native UI event that generated the Matplotlib event."]}, {"name": "backend_bases.FigureCanvasBase.close_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.close_event", "type": "backend_bases", "text": ["Pass a CloseEvent to all functions connected to close_event."]}, {"name": "backend_bases.FigureCanvasBase.draw()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.draw", "type": "backend_bases", "text": ["Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk."]}, {"name": "backend_bases.FigureCanvasBase.draw_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.draw_event", "type": "backend_bases", "text": ["Pass a DrawEvent to all functions connected to draw_event."]}, {"name": "backend_bases.FigureCanvasBase.draw_idle()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.draw_idle", "type": "backend_bases", "text": ["Request a widget redraw once control returns to the GUI event loop.", "Even if multiple calls to draw_idle occur before control returns to the GUI event loop, the figure will only be rendered once.", "Backends may choose to override the method and implement their own strategy to prevent multiple renderings."]}, {"name": "backend_bases.FigureCanvasBase.enter_notify_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.enter_notify_event", "type": "backend_bases", "text": ["Callback processing for the mouse cursor entering the canvas.", "Backend derived classes should call this function when entering canvas.", "The native UI event that generated the Matplotlib event.", "The coordinate location of the pointer when the canvas is entered."]}, {"name": "backend_bases.FigureCanvasBase.events", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.events", "type": "backend_bases", "text": []}, {"name": "backend_bases.FigureCanvasBase.filetypes", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.filetypes", "type": "backend_bases", "text": []}, {"name": "backend_bases.FigureCanvasBase.fixed_dpi", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.fixed_dpi", "type": "backend_bases", "text": []}, {"name": "backend_bases.FigureCanvasBase.flush_events()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.flush_events", "type": "backend_bases", "text": ["Flush the GUI events for the figure.", "Interactive backends need to reimplement this method."]}, {"name": "backend_bases.FigureCanvasBase.get_default_filename()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_default_filename", "type": "backend_bases", "text": ["Return a string, which includes extension, suitable for use as a default filename."]}, {"name": "backend_bases.FigureCanvasBase.get_default_filetype()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_default_filetype", "type": "backend_bases", "text": ["Return the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png').", "The returned string does not include a period. This method is overridden in backends that only support a single file type."]}, {"name": "backend_bases.FigureCanvasBase.get_supported_filetypes()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_supported_filetypes", "type": "backend_bases", "text": ["Return dict of savefig file formats supported by this backend."]}, {"name": "backend_bases.FigureCanvasBase.get_supported_filetypes_grouped()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_supported_filetypes_grouped", "type": "backend_bases", "text": ["Return a dict of savefig file formats supported by this backend, where the keys are a file type name, such as 'Joint Photographic Experts Group', and the values are a list of filename extensions used for that filetype, such as ['jpg', 'jpeg']."]}, {"name": "backend_bases.FigureCanvasBase.get_width_height()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_width_height", "type": "backend_bases", "text": ["Return the figure width and height in integral points or pixels.", "When the figure is used on High DPI screens (and the backend supports it), the truncation to integers occurs after scaling by the device pixel ratio.", "Whether to return true physical pixels or logical pixels. Physical pixels may be used by backends that support HiDPI, but still configure the canvas using its actual size.", "The size of the figure, in points or pixels, depending on the backend."]}, {"name": "backend_bases.FigureCanvasBase.get_window_title()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.get_window_title", "type": "backend_bases", "text": ["[Deprecated] Return the title text of the window containing the figure, or None if there is no window (e.g., a PS backend).", "Deprecated since version 3.4."]}, {"name": "backend_bases.FigureCanvasBase.grab_mouse()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.grab_mouse", "type": "backend_bases", "text": ["Set the child Axes which is grabbing the mouse events.", "Usually called by the widgets themselves. It is an error to call this if the mouse is already grabbed by another axes."]}, {"name": "backend_bases.FigureCanvasBase.inaxes()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.inaxes", "type": "backend_bases", "text": ["Return the topmost visible Axes containing the point xy.", "(x, y) pixel positions from left/bottom of the canvas.", "The topmost visible axes containing the point, or None if no axes."]}, {"name": "backend_bases.FigureCanvasBase.is_saving()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.is_saving", "type": "backend_bases", "text": ["Return whether the renderer is in the process of saving to a file, rather than rendering for an on-screen buffer."]}, {"name": "backend_bases.FigureCanvasBase.key_press_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.key_press_event", "type": "backend_bases", "text": ["Pass a KeyEvent to all functions connected to key_press_event."]}, {"name": "backend_bases.FigureCanvasBase.key_release_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.key_release_event", "type": "backend_bases", "text": ["Pass a KeyEvent to all functions connected to key_release_event."]}, {"name": "backend_bases.FigureCanvasBase.leave_notify_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.leave_notify_event", "type": "backend_bases", "text": ["Callback processing for the mouse cursor leaving the canvas.", "Backend derived classes should call this function when leaving canvas.", "The native UI event that generated the Matplotlib event."]}, {"name": "backend_bases.FigureCanvasBase.motion_notify_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.motion_notify_event", "type": "backend_bases", "text": ["Callback processing for mouse movement events.", "Backend derived classes should call this function on any motion-notify-event.", "This method will call all functions connected to the 'motion_notify_event' with a MouseEvent instance.", "The canvas coordinates where 0=left.", "The canvas coordinates where 0=bottom.", "The native UI event that generated the Matplotlib event."]}, {"name": "backend_bases.FigureCanvasBase.mpl_connect()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.mpl_connect", "type": "backend_bases", "text": ["Bind function func to event s.", "One of the following events ids:", "The callback function to be executed, which must have the signature:", "For the location events (button and key press/release), if the mouse is over the axes, the inaxes attribute of the event will be set to the Axes the event occurs is over, and additionally, the variables xdata and ydata attributes will be set to the mouse location in data coordinates. See KeyEvent and MouseEvent for more info.", "A connection id that can be used with FigureCanvasBase.mpl_disconnect."]}, {"name": "backend_bases.FigureCanvasBase.mpl_disconnect()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.mpl_disconnect", "type": "backend_bases", "text": ["Disconnect the callback with id cid."]}, {"name": "backend_bases.FigureCanvasBase.new_timer()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.new_timer", "type": "backend_bases", "text": ["Create a new backend-specific subclass of Timer.", "This is useful for getting periodic events through the backend's native event loop. Implemented only for backends with GUIs.", "Timer interval in milliseconds.", "Sequence of (func, args, kwargs) where func(*args, **kwargs) will be executed by the timer every interval.", "Callbacks which return False or 0 will be removed from the timer."]}, {"name": "backend_bases.FigureCanvasBase.pick()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.pick", "type": "backend_bases", "text": []}, {"name": "backend_bases.FigureCanvasBase.pick_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.pick_event", "type": "backend_bases", "text": ["Callback processing for pick events.", "This method will be called by artists who are picked and will fire off PickEvent callbacks registered listeners.", "Note that artists are not pickable by default (see Artist.set_picker)."]}, {"name": "backend_bases.FigureCanvasBase.print_figure()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.print_figure", "type": "backend_bases", "text": ["Render the figure to hardcopy. Set the figure patch face and edge colors. This is useful because some of the GUIs have a gray figure face color background and you'll probably want to override this on hardcopy.", "The file where the figure is saved.", "The dots per inch to save the figure in.", "The facecolor of the figure. If 'auto', use the current figure facecolor.", "The edgecolor of the figure. If 'auto', use the current figure edgecolor.", "Only currently applies to PostScript printing.", "Force a specific file format. If not given, the format is inferred from the filename extension, and if that fails from rcParams[\"savefig.format\"] (default: 'png').", "Bounding box in inches: only the given portion of the figure is saved. If 'tight', try to figure out the tight bbox of the figure.", "Amount of padding around the figure when bbox_inches is 'tight'.", "A list of extra artists that will be considered when the tight bbox is calculated.", "Use a non-default backend to render the file, e.g. to render a png file with the \"cairo\" backend rather than the default \"agg\", or a pdf file with the \"pgf\" backend rather than the default \"pdf\". Note that the default backend is normally sufficient. See The builtin backends for a list of valid backends for each file format. Custom backends can be referenced as \"module://...\"."]}, {"name": "backend_bases.FigureCanvasBase.release_mouse()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.release_mouse", "type": "backend_bases", "text": ["Release the mouse grab held by the Axes ax.", "Usually called by the widgets. It is ok to call this even if ax doesn't have the mouse grab currently."]}, {"name": "backend_bases.FigureCanvasBase.required_interactive_framework", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.required_interactive_framework", "type": "backend_bases", "text": []}, {"name": "backend_bases.FigureCanvasBase.resize()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.resize", "type": "backend_bases", "text": ["UNUSED: Set the canvas size in pixels.", "Certain backends may implement a similar method internally, but this is not a requirement of, nor is it used by, Matplotlib itself."]}, {"name": "backend_bases.FigureCanvasBase.resize_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.resize_event", "type": "backend_bases", "text": ["Pass a ResizeEvent to all functions connected to resize_event."]}, {"name": "backend_bases.FigureCanvasBase.scroll_event()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.scroll_event", "type": "backend_bases", "text": ["Callback processing for scroll events.", "Backend derived classes should call this function on any scroll wheel event. (x, y) are the canvas coords ((0, 0) is lower left). button and key are as defined in MouseEvent.", "This method will call all functions connected to the 'scroll_event' with a MouseEvent instance."]}, {"name": "backend_bases.FigureCanvasBase.set_cursor()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.set_cursor", "type": "backend_bases", "text": ["Set the current cursor.", "This may have no effect if the backend does not display anything.", "If required by the backend, this method should trigger an update in the backend event loop after the cursor is set, as this method may be called e.g. before a long-running task during which the GUI is not updated.", "The cursor to display over the canvas. Note: some backends may change the cursor for the entire window."]}, {"name": "backend_bases.FigureCanvasBase.set_window_title()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.set_window_title", "type": "backend_bases", "text": ["[Deprecated] Set the title text of the window containing the figure. Note that this has no effect if there is no window (e.g., a PS backend).", "Deprecated since version 3.4."]}, {"name": "backend_bases.FigureCanvasBase.start_event_loop()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.start_event_loop", "type": "backend_bases", "text": ["Start a blocking event loop.", "Such an event loop is used by interactive functions, such as ginput and waitforbuttonpress, to wait for events.", "The event loop blocks until a callback function triggers stop_event_loop, or timeout is reached.", "If timeout is 0 or negative, never timeout.", "Only interactive backends need to reimplement this method and it relies on flush_events being properly implemented.", "Interactive backends should implement this in a more native way."]}, {"name": "backend_bases.FigureCanvasBase.stop_event_loop()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.stop_event_loop", "type": "backend_bases", "text": ["Stop the current blocking event loop.", "Interactive backends need to reimplement this to match start_event_loop"]}, {"name": "backend_bases.FigureCanvasBase.supports_blit", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.supports_blit", "type": "backend_bases", "text": []}, {"name": "backend_bases.FigureCanvasBase.switch_backends()", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase.switch_backends", "type": "backend_bases", "text": ["Instantiate an instance of FigureCanvasClass", "This is used for backend switching, e.g., to instantiate a FigureCanvasPS from a FigureCanvasGTK. Note, deep copying is not done, so any changes to one of the instances (e.g., setting figure size or line props), will be reflected in the other"]}, {"name": "backend_bases.FigureManagerBase", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase", "type": "backend_bases", "text": ["Bases: object", "A backend-independent abstraction of a figure container and controller.", "The figure manager is used by pyplot to interact with the window in a backend-independent way. It's an adapter for the real (GUI) framework that represents the visual figure on screen.", "GUI backends define from this class to translate common operations such as show or resize to the GUI-specific code. Non-GUI backends do not support these operations an can just use the base class.", "This following basic operations are accessible:", "Window operations", "Key and mouse button press handling", "The figure manager sets up default key and mouse button press handling by hooking up the key_press_handler to the matplotlib event system. This ensures the same shortcuts and mouse actions across backends.", "Other operations", "Subclasses will have additional attributes and functions to access additional functionality. This is of course backend-specific. For example, most GUI backends have window and toolbar attributes that give access to the native GUI widgets of the respective framework.", "The backend-specific canvas instance.", "The figure number.", "The default key handler cid, when using the toolmanager. To disable the default key press handling use:", "The default mouse button handler cid, when using the toolmanager. To disable the default button press handling use:", "[Deprecated] The default Matplotlib button actions for extra mouse buttons.", "Deprecated since version 3.4.", "Return the title text of the window containing the figure, or None if there is no window (e.g., a PS backend).", "[Deprecated] Implement the default Matplotlib key bindings defined at Navigation keyboard shortcuts.", "Deprecated since version 3.4.", "For GUI backends, resize the window (in physical pixels).", "Set the title text of the window containing the figure.", "This has no effect for non-GUI (e.g., PS) backends.", "For GUI backends, show the figure window and redraw. For non-GUI backends, raise an exception, unless running headless (i.e. on Linux with an unset DISPLAY); this exception is converted to a warning in Figure.show."]}, {"name": "backend_bases.FigureManagerBase.button_press()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.button_press", "type": "backend_bases", "text": ["[Deprecated] The default Matplotlib button actions for extra mouse buttons.", "Deprecated since version 3.4."]}, {"name": "backend_bases.FigureManagerBase.destroy()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.destroy", "type": "backend_bases", "text": []}, {"name": "backend_bases.FigureManagerBase.full_screen_toggle()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.full_screen_toggle", "type": "backend_bases", "text": []}, {"name": "backend_bases.FigureManagerBase.get_window_title()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.get_window_title", "type": "backend_bases", "text": ["Return the title text of the window containing the figure, or None if there is no window (e.g., a PS backend)."]}, {"name": "backend_bases.FigureManagerBase.key_press()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.key_press", "type": "backend_bases", "text": ["[Deprecated] Implement the default Matplotlib key bindings defined at Navigation keyboard shortcuts.", "Deprecated since version 3.4."]}, {"name": "backend_bases.FigureManagerBase.resize()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.resize", "type": "backend_bases", "text": ["For GUI backends, resize the window (in physical pixels)."]}, {"name": "backend_bases.FigureManagerBase.set_window_title()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.set_window_title", "type": "backend_bases", "text": ["Set the title text of the window containing the figure.", "This has no effect for non-GUI (e.g., PS) backends."]}, {"name": "backend_bases.FigureManagerBase.show()", "path": "backend_bases_api#matplotlib.backend_bases.FigureManagerBase.show", "type": "backend_bases", "text": ["For GUI backends, show the figure window and redraw. For non-GUI backends, raise an exception, unless running headless (i.e. on Linux with an unset DISPLAY); this exception is converted to a warning in Figure.show."]}, {"name": "backend_bases.get_registered_canvas_class()", "path": "backend_bases_api#matplotlib.backend_bases.get_registered_canvas_class", "type": "backend_bases", "text": ["Return the registered default canvas for given file format. Handles deferred import of required backend."]}, {"name": "backend_bases.GraphicsContextBase", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase", "type": "backend_bases", "text": ["Bases: object", "An abstract base class that provides color, line styles, etc.", "Copy properties from gc to self.", "Return the alpha value used for blending - not supported on all backends.", "Return whether the object should try to do antialiased rendering.", "Return the CapStyle.", "Return the clip path in the form (path, transform), where path is a Path instance, and transform is an affine transform to apply to the path before clipping.", "Return the clip rectangle as a Bbox instance.", "Return the dash style as an (offset, dash-list) pair.", "The dash list is a even-length list that gives the ink on, ink off in points. See p. 107 of to PostScript blue book for more info.", "Default value is (None, None).", "Return whether the value given by get_alpha() should be used to override any other alpha-channel values.", "Return the object identifier if one is set, None otherwise.", "Get the current hatch style.", "Get the hatch color.", "Get the hatch linewidth.", "Return a Path for the current hatch.", "Return the JoinStyle.", "Return the line width in points.", "Return a tuple of three or four floats from 0-1.", "Return the sketch parameters for the artist.", "A 3-tuple with the following elements:", "May return None if no sketch parameters were set.", "Return the snap setting, which can be:", "Return a url if one is set, None otherwise.", "Restore the graphics context from the stack - needed only for backends that save graphics contexts on a stack.", "Set the alpha value used for blending - not supported on all backends.", "If alpha=None (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, alpha will override them.", "Set whether object should be drawn with antialiased rendering.", "Set how to draw endpoints of lines.", "Set the clip path to a TransformedPath or None.", "Set the clip rectangle to a Bbox or None.", "Set the dash style for the gc.", "The offset (usually 0).", "The on-off sequence as points. None specifies a solid line.", "See p. 107 of to PostScript blue book for more info.", "Set the foreground color.", "If fg is known to be an (r, g, b, a) tuple, isRGBA can be set to True to improve performance.", "Set the id.", "Set the hatch style (for fills).", "Set the hatch color.", "Set how to draw connections between line segments.", "Set the linewidth in points.", "Set the sketch parameters.", "The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is None, or not provided, no sketch filter will be provided.", "The length of the wiggle along the line, in pixels.", "The scale factor by which the length is shrunken or expanded.", "Set the snap setting which may be:", "Set the url for links in compatible backends."]}, {"name": "backend_bases.GraphicsContextBase.copy_properties()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.copy_properties", "type": "backend_bases", "text": ["Copy properties from gc to self."]}, {"name": "backend_bases.GraphicsContextBase.get_alpha()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_alpha", "type": "backend_bases", "text": ["Return the alpha value used for blending - not supported on all backends."]}, {"name": "backend_bases.GraphicsContextBase.get_antialiased()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_antialiased", "type": "backend_bases", "text": ["Return whether the object should try to do antialiased rendering."]}, {"name": "backend_bases.GraphicsContextBase.get_capstyle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_capstyle", "type": "backend_bases", "text": ["Return the CapStyle."]}, {"name": "backend_bases.GraphicsContextBase.get_clip_path()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_clip_path", "type": "backend_bases", "text": ["Return the clip path in the form (path, transform), where path is a Path instance, and transform is an affine transform to apply to the path before clipping."]}, {"name": "backend_bases.GraphicsContextBase.get_clip_rectangle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_clip_rectangle", "type": "backend_bases", "text": ["Return the clip rectangle as a Bbox instance."]}, {"name": "backend_bases.GraphicsContextBase.get_dashes()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_dashes", "type": "backend_bases", "text": ["Return the dash style as an (offset, dash-list) pair.", "The dash list is a even-length list that gives the ink on, ink off in points. See p. 107 of to PostScript blue book for more info.", "Default value is (None, None)."]}, {"name": "backend_bases.GraphicsContextBase.get_forced_alpha()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_forced_alpha", "type": "backend_bases", "text": ["Return whether the value given by get_alpha() should be used to override any other alpha-channel values."]}, {"name": "backend_bases.GraphicsContextBase.get_gid()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_gid", "type": "backend_bases", "text": ["Return the object identifier if one is set, None otherwise."]}, {"name": "backend_bases.GraphicsContextBase.get_hatch()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_hatch", "type": "backend_bases", "text": ["Get the current hatch style."]}, {"name": "backend_bases.GraphicsContextBase.get_hatch_color()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_hatch_color", "type": "backend_bases", "text": ["Get the hatch color."]}, {"name": "backend_bases.GraphicsContextBase.get_hatch_linewidth()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_hatch_linewidth", "type": "backend_bases", "text": ["Get the hatch linewidth."]}, {"name": "backend_bases.GraphicsContextBase.get_hatch_path()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_hatch_path", "type": "backend_bases", "text": ["Return a Path for the current hatch."]}, {"name": "backend_bases.GraphicsContextBase.get_joinstyle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_joinstyle", "type": "backend_bases", "text": ["Return the JoinStyle."]}, {"name": "backend_bases.GraphicsContextBase.get_linewidth()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_linewidth", "type": "backend_bases", "text": ["Return the line width in points."]}, {"name": "backend_bases.GraphicsContextBase.get_rgb()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_rgb", "type": "backend_bases", "text": ["Return a tuple of three or four floats from 0-1."]}, {"name": "backend_bases.GraphicsContextBase.get_sketch_params()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_sketch_params", "type": "backend_bases", "text": ["Return the sketch parameters for the artist.", "A 3-tuple with the following elements:", "May return None if no sketch parameters were set."]}, {"name": "backend_bases.GraphicsContextBase.get_snap()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_snap", "type": "backend_bases", "text": ["Return the snap setting, which can be:"]}, {"name": "backend_bases.GraphicsContextBase.get_url()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.get_url", "type": "backend_bases", "text": ["Return a url if one is set, None otherwise."]}, {"name": "backend_bases.GraphicsContextBase.restore()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.restore", "type": "backend_bases", "text": ["Restore the graphics context from the stack - needed only for backends that save graphics contexts on a stack."]}, {"name": "backend_bases.GraphicsContextBase.set_alpha()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_alpha", "type": "backend_bases", "text": ["Set the alpha value used for blending - not supported on all backends.", "If alpha=None (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, alpha will override them."]}, {"name": "backend_bases.GraphicsContextBase.set_antialiased()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_antialiased", "type": "backend_bases", "text": ["Set whether object should be drawn with antialiased rendering."]}, {"name": "backend_bases.GraphicsContextBase.set_capstyle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_capstyle", "type": "backend_bases", "text": ["Set how to draw endpoints of lines."]}, {"name": "backend_bases.GraphicsContextBase.set_clip_path()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_clip_path", "type": "backend_bases", "text": ["Set the clip path to a TransformedPath or None."]}, {"name": "backend_bases.GraphicsContextBase.set_clip_rectangle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_clip_rectangle", "type": "backend_bases", "text": ["Set the clip rectangle to a Bbox or None."]}, {"name": "backend_bases.GraphicsContextBase.set_dashes()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_dashes", "type": "backend_bases", "text": ["Set the dash style for the gc.", "The offset (usually 0).", "The on-off sequence as points. None specifies a solid line.", "See p. 107 of to PostScript blue book for more info."]}, {"name": "backend_bases.GraphicsContextBase.set_foreground()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_foreground", "type": "backend_bases", "text": ["Set the foreground color.", "If fg is known to be an (r, g, b, a) tuple, isRGBA can be set to True to improve performance."]}, {"name": "backend_bases.GraphicsContextBase.set_gid()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_gid", "type": "backend_bases", "text": ["Set the id."]}, {"name": "backend_bases.GraphicsContextBase.set_hatch()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_hatch", "type": "backend_bases", "text": ["Set the hatch style (for fills)."]}, {"name": "backend_bases.GraphicsContextBase.set_hatch_color()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_hatch_color", "type": "backend_bases", "text": ["Set the hatch color."]}, {"name": "backend_bases.GraphicsContextBase.set_joinstyle()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_joinstyle", "type": "backend_bases", "text": ["Set how to draw connections between line segments."]}, {"name": "backend_bases.GraphicsContextBase.set_linewidth()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_linewidth", "type": "backend_bases", "text": ["Set the linewidth in points."]}, {"name": "backend_bases.GraphicsContextBase.set_sketch_params()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_sketch_params", "type": "backend_bases", "text": ["Set the sketch parameters.", "The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is None, or not provided, no sketch filter will be provided.", "The length of the wiggle along the line, in pixels.", "The scale factor by which the length is shrunken or expanded."]}, {"name": "backend_bases.GraphicsContextBase.set_snap()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_snap", "type": "backend_bases", "text": ["Set the snap setting which may be:"]}, {"name": "backend_bases.GraphicsContextBase.set_url()", "path": "backend_bases_api#matplotlib.backend_bases.GraphicsContextBase.set_url", "type": "backend_bases", "text": ["Set the url for links in compatible backends."]}, {"name": "backend_bases.key_press_handler()", "path": "backend_bases_api#matplotlib.backend_bases.key_press_handler", "type": "backend_bases", "text": ["Implement the default Matplotlib key bindings for the canvas and toolbar described at Navigation keyboard shortcuts.", "A key press/release event.", "The backend-specific canvas instance. This parameter is kept for back-compatibility, but, if set, should always be equal to event.canvas.", "The navigation cursor toolbar. This parameter is kept for back-compatibility, but, if set, should always be equal to event.canvas.toolbar."]}, {"name": "backend_bases.KeyEvent", "path": "backend_bases_api#matplotlib.backend_bases.KeyEvent", "type": "backend_bases", "text": ["Bases: matplotlib.backend_bases.LocationEvent", "A key event (key press, key release).", "A KeyEvent has a number of special attributes in addition to those defined by the parent Event and LocationEvent classes.", "Modifier keys will be prefixed to the pressed key and will be in the order \"ctrl\", \"alt\", \"super\". The exception to this rule is when the pressed key is itself a modifier key, therefore \"ctrl+alt\" and \"alt+control\" can both be valid key values.", "The key(s) pressed. Could be None, a single case sensitive Unicode character (\"g\", \"G\", \"#\", etc.), a special key (\"control\", \"shift\", \"f1\", \"up\", etc.) or a combination of the above (e.g., \"ctrl+alt+g\", \"ctrl+alt+G\")."]}, {"name": "backend_bases.LocationEvent", "path": "backend_bases_api#matplotlib.backend_bases.LocationEvent", "type": "backend_bases", "text": ["Bases: matplotlib.backend_bases.Event", "An event that has a screen location.", "A LocationEvent has a number of special attributes in addition to those defined by the parent Event class.", "Event location in pixels from bottom left of canvas.", "The Axes instance over which the mouse is, if any.", "Data coordinates of the mouse within inaxes, or None if the mouse is not over an Axes."]}, {"name": "backend_bases.LocationEvent.lastevent", "path": "backend_bases_api#matplotlib.backend_bases.LocationEvent.lastevent", "type": "backend_bases", "text": []}, {"name": "backend_bases.MouseButton", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton", "type": "backend_bases", "text": ["Bases: enum.IntEnum", "An enumeration."]}, {"name": "backend_bases.MouseButton.BACK", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton.BACK", "type": "backend_bases", "text": []}, {"name": "backend_bases.MouseButton.FORWARD", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton.FORWARD", "type": "backend_bases", "text": []}, {"name": "backend_bases.MouseButton.LEFT", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton.LEFT", "type": "backend_bases", "text": []}, {"name": "backend_bases.MouseButton.MIDDLE", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton.MIDDLE", "type": "backend_bases", "text": []}, {"name": "backend_bases.MouseButton.RIGHT", "path": "backend_bases_api#matplotlib.backend_bases.MouseButton.RIGHT", "type": "backend_bases", "text": []}, {"name": "backend_bases.MouseEvent", "path": "backend_bases_api#matplotlib.backend_bases.MouseEvent", "type": "backend_bases", "text": ["Bases: matplotlib.backend_bases.LocationEvent", "A mouse event ('button_press_event', 'button_release_event', 'scroll_event', 'motion_notify_event').", "A MouseEvent has a number of special attributes in addition to those defined by the parent Event and LocationEvent classes.", "The button pressed. 'up' and 'down' are used for scroll events. Note that LEFT and RIGHT actually refer to the \"primary\" and \"secondary\" buttons, i.e. if the user inverts their left and right buttons (\"left-handed setting\") then the LEFT button will be the one physically on the right.", "The key pressed when the mouse event triggered, e.g. 'shift'. See KeyEvent.", "Warning", "This key is currently obtained from the last 'key_press_event' or 'key_release_event' that occurred within the canvas. Thus, if the last change of keyboard state occurred while the canvas did not have focus, this attribute will be wrong.", "The number of scroll steps (positive for 'up', negative for 'down'). This applies only to 'scroll_event' and defaults to 0 otherwise.", "Whether the event is a double-click. This applies only to 'button_press_event' and is False otherwise. In particular, it's not used in 'button_release_event'."]}, {"name": "backend_bases.NavigationToolbar2", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2", "type": "backend_bases", "text": ["Bases: object", "Base class for the navigation cursor, version 2.", "Backends must implement a canvas that handles connections for 'button_press_event' and 'button_release_event'. See FigureCanvasBase.mpl_connect() for more information.", "They must also define", "save the current figure", "draw the zoom to rect \"rubberband\" rectangle", "display message", "you can change the history back / forward buttons to indicate disabled / enabled state.", "and override __init__ to set up the toolbar -- without forgetting to call the base-class init. Typically, __init__ needs to set up toolbar buttons connected to the home, back, forward, pan, zoom, and save_figure methods and using standard icons in the \"images\" subdirectory of the data path.", "That's it, we'll do the rest!", "Move back up the view lim stack.", "For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them.", "Callback for dragging in pan/zoom mode.", "Callback for dragging in zoom mode.", "Draw a rectangle rubberband to indicate zoom limits.", "Note that it is not guaranteed that x0 <= x1 and y0 <= y1.", "Move forward in the view lim stack.", "For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them.", "Restore the original view.", "For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them.", "Toggle the pan/zoom tool.", "Pan with left button, zoom with right.", "Callback for mouse button press in pan/zoom mode.", "Callback for mouse button press in zoom to rect mode.", "Push the current view limits and position onto the stack.", "Callback for mouse button release in pan/zoom mode.", "Callback for mouse button release in zoom to rect mode.", "Remove the rubberband.", "Save the current figure.", "[Deprecated] Set the current cursor to one of the Cursors enums values.", "If required by the backend, this method should trigger an update in the backend event loop after the cursor is set, as this method may be called e.g. before a long-running task during which the GUI is not updated.", "Deprecated since version 3.5.", "Enable or disable the back/forward button.", "Display a message on toolbar or in status bar.", "Reset the axes stack.", "Toggle zoom to rect mode."]}, {"name": "backend_bases.NavigationToolbar2.back()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.back", "type": "backend_bases", "text": ["Move back up the view lim stack.", "For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them."]}, {"name": "backend_bases.NavigationToolbar2.configure_subplots()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.configure_subplots", "type": "backend_bases", "text": []}, {"name": "backend_bases.NavigationToolbar2.drag_pan()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.drag_pan", "type": "backend_bases", "text": ["Callback for dragging in pan/zoom mode."]}, {"name": "backend_bases.NavigationToolbar2.drag_zoom()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.drag_zoom", "type": "backend_bases", "text": ["Callback for dragging in zoom mode."]}, {"name": "backend_bases.NavigationToolbar2.draw_rubberband()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.draw_rubberband", "type": "backend_bases", "text": ["Draw a rectangle rubberband to indicate zoom limits.", "Note that it is not guaranteed that x0 <= x1 and y0 <= y1."]}, {"name": "backend_bases.NavigationToolbar2.forward()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.forward", "type": "backend_bases", "text": ["Move forward in the view lim stack.", "For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them."]}, {"name": "backend_bases.NavigationToolbar2.home()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.home", "type": "backend_bases", "text": ["Restore the original view.", "For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them."]}, {"name": "backend_bases.NavigationToolbar2.mouse_move()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.mouse_move", "type": "backend_bases", "text": []}, {"name": "backend_bases.NavigationToolbar2.pan()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.pan", "type": "backend_bases", "text": ["Toggle the pan/zoom tool.", "Pan with left button, zoom with right."]}, {"name": "backend_bases.NavigationToolbar2.press_pan()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.press_pan", "type": "backend_bases", "text": ["Callback for mouse button press in pan/zoom mode."]}, {"name": "backend_bases.NavigationToolbar2.press_zoom()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.press_zoom", "type": "backend_bases", "text": ["Callback for mouse button press in zoom to rect mode."]}, {"name": "backend_bases.NavigationToolbar2.push_current()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.push_current", "type": "backend_bases", "text": ["Push the current view limits and position onto the stack."]}, {"name": "backend_bases.NavigationToolbar2.release_pan()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.release_pan", "type": "backend_bases", "text": ["Callback for mouse button release in pan/zoom mode."]}, {"name": "backend_bases.NavigationToolbar2.release_zoom()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.release_zoom", "type": "backend_bases", "text": ["Callback for mouse button release in zoom to rect mode."]}, {"name": "backend_bases.NavigationToolbar2.remove_rubberband()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.remove_rubberband", "type": "backend_bases", "text": ["Remove the rubberband."]}, {"name": "backend_bases.NavigationToolbar2.save_figure()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.save_figure", "type": "backend_bases", "text": ["Save the current figure."]}, {"name": "backend_bases.NavigationToolbar2.set_cursor()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.set_cursor", "type": "backend_bases", "text": ["[Deprecated] Set the current cursor to one of the Cursors enums values.", "If required by the backend, this method should trigger an update in the backend event loop after the cursor is set, as this method may be called e.g. before a long-running task during which the GUI is not updated.", "Deprecated since version 3.5."]}, {"name": "backend_bases.NavigationToolbar2.set_history_buttons()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.set_history_buttons", "type": "backend_bases", "text": ["Enable or disable the back/forward button."]}, {"name": "backend_bases.NavigationToolbar2.set_message()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.set_message", "type": "backend_bases", "text": ["Display a message on toolbar or in status bar."]}, {"name": "backend_bases.NavigationToolbar2.toolitems", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.toolitems", "type": "backend_bases", "text": []}, {"name": "backend_bases.NavigationToolbar2.update()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.update", "type": "backend_bases", "text": ["Reset the axes stack."]}, {"name": "backend_bases.NavigationToolbar2.zoom()", "path": "backend_bases_api#matplotlib.backend_bases.NavigationToolbar2.zoom", "type": "backend_bases", "text": ["Toggle zoom to rect mode."]}, {"name": "backend_bases.NonGuiException", "path": "backend_bases_api#matplotlib.backend_bases.NonGuiException", "type": "backend_bases", "text": ["Bases: Exception", "Raised when trying show a figure in a non-GUI backend."]}, {"name": "backend_bases.PickEvent", "path": "backend_bases_api#matplotlib.backend_bases.PickEvent", "type": "backend_bases", "text": ["Bases: matplotlib.backend_bases.Event", "A pick event.", "This event is fired when the user picks a location on the canvas sufficiently close to an artist that has been made pickable with Artist.set_picker.", "A PickEvent has a number of special attributes in addition to those defined by the parent Event class.", "Bind a function on_pick() to pick events, that prints the coordinates of the picked data point:", "The mouse event that generated the pick.", "The picked artist. Note that artists are not pickable by default (see Artist.set_picker).", "Additional attributes may be present depending on the type of the picked object; e.g., a Line2D pick may define different extra attributes than a PatchCollection pick."]}, {"name": "backend_bases.register_backend()", "path": "backend_bases_api#matplotlib.backend_bases.register_backend", "type": "backend_bases", "text": ["Register a backend for saving to a given file format.", "File extension", "Backend for handling file output", "Description of the file type."]}, {"name": "backend_bases.RendererBase", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase", "type": "backend_bases", "text": ["Bases: object", "An abstract base class to handle drawing/rendering operations.", "The following methods must be implemented in the backend for full functionality (though just implementing draw_path() alone would give a highly capable backend):", "The following methods should be implemented in the backend for optimization reasons:", "Close a grouping element with label s.", "Only used by the SVG renderer.", "Draw a Gouraud-shaded triangle.", "The graphics context.", "Array of (x, y) points for the triangle.", "RGBA colors for each point of the triangle.", "An affine transform to apply to the points.", "Draw a series of Gouraud triangles.", "Array of N (x, y) points for the triangles.", "Array of N RGBA colors for each point of the triangles.", "An affine transform to apply to the points.", "Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).", "Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path.", "Draw a Path instance using the given affine transform.", "Draw a collection of paths selecting drawing properties from the lists facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a list of offsets to apply to each of the paths. The offsets in offsets are first transformed by offsetTrans before being applied.", "offset_position is unused now, but the argument is kept for backwards compatibility.", "This provides a fallback implementation of draw_path_collection() that makes multiple calls to draw_path(). Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods _iter_collection_raw_paths() and _iter_collection() are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of draw_path_collection() can be made globally.", "Fallback implementation of draw_quad_mesh() that generates paths and then calls draw_path_collection().", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Return whether y values increase from top to bottom.", "Note that this only affects drawing of texts and images.", "Return the canvas width and height in display coords.", "Get the factor by which to magnify images passed to draw_image(). Allows a backend to have images at a different resolution to other artists.", "Return the TexManager instance.", "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop.", "Return an instance of a GraphicsContextBase.", "Open a grouping element with label s and gid (if set) as id.", "Only used by the SVG renderer.", "Return whether image composition by Matplotlib should be skipped.", "Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return not rcParams[\"image.composite_image\"].", "Return whether arbitrary affine transformations in draw_image() are supported (True for most vector backends).", "Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float", "Switch to a temporary renderer for image filtering effects.", "Currently only supported by the agg renderer.", "Switch to the raster renderer.", "Used by MixedModeRenderer.", "Switch back to the original renderer. The contents of the temporary renderer is processed with the filter_func and is drawn on the original renderer as an image.", "Currently only supported by the agg renderer.", "Switch back to the vector renderer and draw the contents of the raster renderer as an image on the vector renderer.", "Used by MixedModeRenderer."]}, {"name": "backend_bases.RendererBase.close_group()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.close_group", "type": "backend_bases", "text": ["Close a grouping element with label s.", "Only used by the SVG renderer."]}, {"name": "backend_bases.RendererBase.draw_gouraud_triangle()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_gouraud_triangle", "type": "backend_bases", "text": ["Draw a Gouraud-shaded triangle.", "The graphics context.", "Array of (x, y) points for the triangle.", "RGBA colors for each point of the triangle.", "An affine transform to apply to the points."]}, {"name": "backend_bases.RendererBase.draw_gouraud_triangles()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_gouraud_triangles", "type": "backend_bases", "text": ["Draw a series of Gouraud triangles.", "Array of N (x, y) points for the triangles.", "Array of N RGBA colors for each point of the triangles.", "An affine transform to apply to the points."]}, {"name": "backend_bases.RendererBase.draw_image()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_image", "type": "backend_bases", "text": ["Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform)."]}, {"name": "backend_bases.RendererBase.draw_markers()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_markers", "type": "backend_bases", "text": ["Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path."]}, {"name": "backend_bases.RendererBase.draw_path()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_path", "type": "backend_bases", "text": ["Draw a Path instance using the given affine transform."]}, {"name": "backend_bases.RendererBase.draw_path_collection()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_path_collection", "type": "backend_bases", "text": ["Draw a collection of paths selecting drawing properties from the lists facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a list of offsets to apply to each of the paths. The offsets in offsets are first transformed by offsetTrans before being applied.", "offset_position is unused now, but the argument is kept for backwards compatibility.", "This provides a fallback implementation of draw_path_collection() that makes multiple calls to draw_path(). Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods _iter_collection_raw_paths() and _iter_collection() are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of draw_path_collection() can be made globally."]}, {"name": "backend_bases.RendererBase.draw_quad_mesh()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_quad_mesh", "type": "backend_bases", "text": ["Fallback implementation of draw_quad_mesh() that generates paths and then calls draw_path_collection()."]}, {"name": "backend_bases.RendererBase.draw_tex()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_tex", "type": "backend_bases", "text": []}, {"name": "backend_bases.RendererBase.draw_text()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.draw_text", "type": "backend_bases", "text": ["Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text."]}, {"name": "backend_bases.RendererBase.flipy()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.flipy", "type": "backend_bases", "text": ["Return whether y values increase from top to bottom.", "Note that this only affects drawing of texts and images."]}, {"name": "backend_bases.RendererBase.get_canvas_width_height()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.get_canvas_width_height", "type": "backend_bases", "text": ["Return the canvas width and height in display coords."]}, {"name": "backend_bases.RendererBase.get_image_magnification()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.get_image_magnification", "type": "backend_bases", "text": ["Get the factor by which to magnify images passed to draw_image(). Allows a backend to have images at a different resolution to other artists."]}, {"name": "backend_bases.RendererBase.get_texmanager()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.get_texmanager", "type": "backend_bases", "text": ["Return the TexManager instance."]}, {"name": "backend_bases.RendererBase.get_text_width_height_descent()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.get_text_width_height_descent", "type": "backend_bases", "text": ["Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop."]}, {"name": "backend_bases.RendererBase.new_gc()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.new_gc", "type": "backend_bases", "text": ["Return an instance of a GraphicsContextBase."]}, {"name": "backend_bases.RendererBase.open_group()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.open_group", "type": "backend_bases", "text": ["Open a grouping element with label s and gid (if set) as id.", "Only used by the SVG renderer."]}, {"name": "backend_bases.RendererBase.option_image_nocomposite()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.option_image_nocomposite", "type": "backend_bases", "text": ["Return whether image composition by Matplotlib should be skipped.", "Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return not rcParams[\"image.composite_image\"]."]}, {"name": "backend_bases.RendererBase.option_scale_image()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.option_scale_image", "type": "backend_bases", "text": ["Return whether arbitrary affine transformations in draw_image() are supported (True for most vector backends)."]}, {"name": "backend_bases.RendererBase.points_to_pixels()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.points_to_pixels", "type": "backend_bases", "text": ["Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float"]}, {"name": "backend_bases.RendererBase.start_filter()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.start_filter", "type": "backend_bases", "text": ["Switch to a temporary renderer for image filtering effects.", "Currently only supported by the agg renderer."]}, {"name": "backend_bases.RendererBase.start_rasterizing()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.start_rasterizing", "type": "backend_bases", "text": ["Switch to the raster renderer.", "Used by MixedModeRenderer."]}, {"name": "backend_bases.RendererBase.stop_filter()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.stop_filter", "type": "backend_bases", "text": ["Switch back to the original renderer. The contents of the temporary renderer is processed with the filter_func and is drawn on the original renderer as an image.", "Currently only supported by the agg renderer."]}, {"name": "backend_bases.RendererBase.stop_rasterizing()", "path": "backend_bases_api#matplotlib.backend_bases.RendererBase.stop_rasterizing", "type": "backend_bases", "text": ["Switch back to the vector renderer and draw the contents of the raster renderer as an image on the vector renderer.", "Used by MixedModeRenderer."]}, {"name": "backend_bases.ResizeEvent", "path": "backend_bases_api#matplotlib.backend_bases.ResizeEvent", "type": "backend_bases", "text": ["Bases: matplotlib.backend_bases.Event", "An event triggered by a canvas resize.", "A ResizeEvent has a number of special attributes in addition to those defined by the parent Event class.", "Width of the canvas in pixels.", "Height of the canvas in pixels."]}, {"name": "backend_bases.ShowBase", "path": "backend_bases_api#matplotlib.backend_bases.ShowBase", "type": "backend_bases", "text": ["Bases: matplotlib.backend_bases._Backend", "Simple base class to generate a show() function in backends.", "Subclass must override mainloop() method."]}, {"name": "backend_bases.TimerBase", "path": "backend_bases_api#matplotlib.backend_bases.TimerBase", "type": "backend_bases", "text": ["Bases: object", "A base class for providing timer events, useful for things animations. Backends need to implement a few specific methods in order to use their own timing mechanisms so that the timer events are integrated into their event loops.", "Subclasses must override the following methods:", "Subclasses may additionally override the following methods:", "The time between timer events in milliseconds. Will be stored as timer.interval.", "List of (func, args, kwargs) tuples that will be called upon timer events. This list is accessible as timer.callbacks and can be manipulated directly, or the functions add_callback and remove_callback can be used.", "Register func to be called by timer when the event fires. Any additional arguments provided will be passed to func.", "This function returns func, which makes it possible to use it as a decorator.", "The time between timer events, in milliseconds.", "Remove func from list of callbacks.", "args and kwargs are optional and used to distinguish between copies of the same function registered to be called with different arguments. This behavior is deprecated. In the future, *args, **kwargs won't be considered anymore; to keep a specific callback removable by itself, pass it to add_callback as a functools.partial object.", "Whether this timer should stop after a single run.", "Start the timer object.", "Timer interval in milliseconds; overrides a previously set interval if provided.", "Stop the timer."]}, {"name": "backend_bases.TimerBase.add_callback()", "path": "backend_bases_api#matplotlib.backend_bases.TimerBase.add_callback", "type": "backend_bases", "text": ["Register func to be called by timer when the event fires. Any additional arguments provided will be passed to func.", "This function returns func, which makes it possible to use it as a decorator."]}, {"name": "backend_bases.TimerBase.remove_callback()", "path": "backend_bases_api#matplotlib.backend_bases.TimerBase.remove_callback", "type": "backend_bases", "text": ["Remove func from list of callbacks.", "args and kwargs are optional and used to distinguish between copies of the same function registered to be called with different arguments. This behavior is deprecated. In the future, *args, **kwargs won't be considered anymore; to keep a specific callback removable by itself, pass it to add_callback as a functools.partial object."]}, {"name": "backend_bases.TimerBase.start()", "path": "backend_bases_api#matplotlib.backend_bases.TimerBase.start", "type": "backend_bases", "text": ["Start the timer object.", "Timer interval in milliseconds; overrides a previously set interval if provided."]}, {"name": "backend_bases.TimerBase.stop()", "path": "backend_bases_api#matplotlib.backend_bases.TimerBase.stop", "type": "backend_bases", "text": ["Stop the timer."]}, {"name": "backend_bases.ToolContainerBase", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase", "type": "backend_bases", "text": ["Bases: object", "Base class for all tool containers, e.g. toolbars.", "The tools with which this ToolContainer wants to communicate.", "Add a tool to this container.", "The tool to add, see ToolManager.get_tool.", "The name of the group to add this tool to.", "The position within the group to place this tool.", "Add a toolitem to the container.", "This method must be implemented per backend.", "The callback associated with the button click event, must be exactly self.trigger_tool(name).", "Name of the tool to add, this gets used as the tool's ID and as the default label of the buttons.", "Name of the group that this tool belongs to.", "Position of the tool within its group, if -1 it goes at the end.", "Filename of the image for the button or None.", "Description of the tool, used for the tooltips.", "Remove a toolitem from the ToolContainer.", "This method must get implemented per backend.", "Called when ToolManager emits a tool_removed_event.", "Name of the tool to remove.", "Display a message on the toolbar.", "Message text.", "Toggle the toolitem without firing event.", "Id of the tool to toggle.", "Whether to set this tool as toggled or not.", "Trigger the tool.", "Name (id) of the tool triggered from within the container."]}, {"name": "backend_bases.ToolContainerBase.add_tool()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.add_tool", "type": "backend_bases", "text": ["Add a tool to this container.", "The tool to add, see ToolManager.get_tool.", "The name of the group to add this tool to.", "The position within the group to place this tool."]}, {"name": "backend_bases.ToolContainerBase.add_toolitem()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.add_toolitem", "type": "backend_bases", "text": ["Add a toolitem to the container.", "This method must be implemented per backend.", "The callback associated with the button click event, must be exactly self.trigger_tool(name).", "Name of the tool to add, this gets used as the tool's ID and as the default label of the buttons.", "Name of the group that this tool belongs to.", "Position of the tool within its group, if -1 it goes at the end.", "Filename of the image for the button or None.", "Description of the tool, used for the tooltips."]}, {"name": "backend_bases.ToolContainerBase.remove_toolitem()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.remove_toolitem", "type": "backend_bases", "text": ["Remove a toolitem from the ToolContainer.", "This method must get implemented per backend.", "Called when ToolManager emits a tool_removed_event.", "Name of the tool to remove."]}, {"name": "backend_bases.ToolContainerBase.set_message()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.set_message", "type": "backend_bases", "text": ["Display a message on the toolbar.", "Message text."]}, {"name": "backend_bases.ToolContainerBase.toggle_toolitem()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.toggle_toolitem", "type": "backend_bases", "text": ["Toggle the toolitem without firing event.", "Id of the tool to toggle.", "Whether to set this tool as toggled or not."]}, {"name": "backend_bases.ToolContainerBase.trigger_tool()", "path": "backend_bases_api#matplotlib.backend_bases.ToolContainerBase.trigger_tool", "type": "backend_bases", "text": ["Trigger the tool.", "Name (id) of the tool triggered from within the container."]}, {"name": "backend_cairo", "path": "backend_cairo_api", "type": "backend_cairo", "text": ["Steve Chaplin and others", "This backend depends on cairocffi or pycairo.", "alias of matplotlib.backends.backend_cairo.FigureCanvasCairo", "Bases: matplotlib.backend_bases.FigureCanvasBase", "Bases: matplotlib.backend_bases.GraphicsContextBase", "Return a tuple of three or four floats from 0-1.", "Restore the graphics context from the stack - needed only for backends that save graphics contexts on a stack.", "Set the alpha value used for blending - not supported on all backends.", "If alpha=None (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, alpha will override them.", "Set whether object should be drawn with antialiased rendering.", "Set how to draw endpoints of lines.", "Set the clip path to a TransformedPath or None.", "Set the clip rectangle to a Bbox or None.", "Set the dash style for the gc.", "The offset (usually 0).", "The on-off sequence as points. None specifies a solid line.", "See p. 107 of to PostScript blue book for more info.", "Set the foreground color.", "If fg is known to be an (r, g, b, a) tuple, isRGBA can be set to True to improve performance.", "Set how to draw connections between line segments.", "Set the linewidth in points.", "Bases: matplotlib.backend_bases.RendererBase", "Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).", "Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path.", "Draw a Path instance using the given affine transform.", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Return the canvas width and height in display coords.", "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop.", "Return an instance of a GraphicsContextBase.", "Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float"]}, {"name": "backend_gtk3agg, backend_gtk3cairo", "path": "backend_gtk3_api", "type": "backend_gtk3agg, backend_gtk3cairo", "text": ["NOTE These backends are not documented here, to avoid adding a dependency to building the docs."]}, {"name": "backend_gtk4agg, backend_gtk4cairo", "path": "backend_gtk4_api", "type": "backend_gtk4agg, backend_gtk4cairo", "text": ["NOTE These backends are not documented here, to avoid adding a dependency to building the docs."]}, {"name": "backend_managers", "path": "backend_managers_api", "type": "backend_managers", "text": ["Bases: object", "Event for tool manipulation (add/remove).", "Bases: object", "Manager for actions triggered by user interactions (key press, toolbar clicks, ...) on a Figure.", "Figure that holds the canvas.", "LockDraw object to know if the canvas key_press_event is locked.", "LockDraw object to know if the message is available to write.", "Currently toggled tools.", "Add tool to ToolManager.", "If successful, adds a new event tool_trigger_{name} where {name} is the name of the tool; the event is fired every time the tool is triggered.", "Name of the tool, treated as the ID, has to be unique.", "Reference to find the class of the Tool to added.", "See also", "The base class for tools.", "args and kwargs get passed directly to the tools constructor.", "Canvas managed by FigureManager.", "Figure that holds the canvas.", "Return the tool object with the given name.", "For convenience, this passes tool objects through.", "Name of the tool, or the tool itself.", "Whether a warning should be emitted it no tool with the given name exists.", "The tool or None if no tool with the given name exists.", "Return the keymap associated with the specified tool.", "Name of the Tool.", "List of keys associated with the tool.", "Emit a ToolManagerMessageEvent.", "Remove tool named name.", "Name of the tool.", "Bind the given figure to the tools.", "Force tools to update figure.", "Connect event with string s to func.", "The name of the event. The following events are recognized:", "For every tool added a new event is created", "Callback function for the toolmanager event with signature:", "The callback id for the connection. This can be used in toolmanager_disconnect.", "Disconnect callback id cid.", "Example usage:", "A dict mapping tool name -> controlled tool.", "Trigger a tool and emit the tool_trigger_{name} event.", "Name of the tool.", "Object that wishes to trigger the tool.", "Original Canvas event or None.", "Extra data to pass to the tool when triggering.", "Set the keymap to associate with the specified tool.", "Name of the Tool.", "Keys to associate with the tool.", "Bases: object", "Event carrying messages from toolmanager.", "Messages usually get displayed to the user by the toolbar.", "Bases: matplotlib.backend_managers.ToolEvent", "Event to inform that a tool has been triggered."]}, {"name": "backend_managers.ToolEvent", "path": "backend_managers_api#matplotlib.backend_managers.ToolEvent", "type": "backend_managers", "text": ["Bases: object", "Event for tool manipulation (add/remove)."]}, {"name": "backend_managers.ToolManager", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager", "type": "backend_managers", "text": ["Bases: object", "Manager for actions triggered by user interactions (key press, toolbar clicks, ...) on a Figure.", "Figure that holds the canvas.", "LockDraw object to know if the canvas key_press_event is locked.", "LockDraw object to know if the message is available to write.", "Currently toggled tools.", "Add tool to ToolManager.", "If successful, adds a new event tool_trigger_{name} where {name} is the name of the tool; the event is fired every time the tool is triggered.", "Name of the tool, treated as the ID, has to be unique.", "Reference to find the class of the Tool to added.", "See also", "The base class for tools.", "args and kwargs get passed directly to the tools constructor.", "Canvas managed by FigureManager.", "Figure that holds the canvas.", "Return the tool object with the given name.", "For convenience, this passes tool objects through.", "Name of the tool, or the tool itself.", "Whether a warning should be emitted it no tool with the given name exists.", "The tool or None if no tool with the given name exists.", "Return the keymap associated with the specified tool.", "Name of the Tool.", "List of keys associated with the tool.", "Emit a ToolManagerMessageEvent.", "Remove tool named name.", "Name of the tool.", "Bind the given figure to the tools.", "Force tools to update figure.", "Connect event with string s to func.", "The name of the event. The following events are recognized:", "For every tool added a new event is created", "Callback function for the toolmanager event with signature:", "The callback id for the connection. This can be used in toolmanager_disconnect.", "Disconnect callback id cid.", "Example usage:", "A dict mapping tool name -> controlled tool.", "Trigger a tool and emit the tool_trigger_{name} event.", "Name of the tool.", "Object that wishes to trigger the tool.", "Original Canvas event or None.", "Extra data to pass to the tool when triggering.", "Set the keymap to associate with the specified tool.", "Name of the Tool.", "Keys to associate with the tool."]}, {"name": "backend_managers.ToolManager.add_tool()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.add_tool", "type": "backend_managers", "text": ["Add tool to ToolManager.", "If successful, adds a new event tool_trigger_{name} where {name} is the name of the tool; the event is fired every time the tool is triggered.", "Name of the tool, treated as the ID, has to be unique.", "Reference to find the class of the Tool to added.", "See also", "The base class for tools.", "args and kwargs get passed directly to the tools constructor."]}, {"name": "backend_managers.ToolManager.get_tool()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.get_tool", "type": "backend_managers", "text": ["Return the tool object with the given name.", "For convenience, this passes tool objects through.", "Name of the tool, or the tool itself.", "Whether a warning should be emitted it no tool with the given name exists.", "The tool or None if no tool with the given name exists."]}, {"name": "backend_managers.ToolManager.get_tool_keymap()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.get_tool_keymap", "type": "backend_managers", "text": ["Return the keymap associated with the specified tool.", "Name of the Tool.", "List of keys associated with the tool."]}, {"name": "backend_managers.ToolManager.message_event()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.message_event", "type": "backend_managers", "text": ["Emit a ToolManagerMessageEvent."]}, {"name": "backend_managers.ToolManager.remove_tool()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.remove_tool", "type": "backend_managers", "text": ["Remove tool named name.", "Name of the tool."]}, {"name": "backend_managers.ToolManager.set_figure()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.set_figure", "type": "backend_managers", "text": ["Bind the given figure to the tools.", "Force tools to update figure."]}, {"name": "backend_managers.ToolManager.toolmanager_connect()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.toolmanager_connect", "type": "backend_managers", "text": ["Connect event with string s to func.", "The name of the event. The following events are recognized:", "For every tool added a new event is created", "Callback function for the toolmanager event with signature:", "The callback id for the connection. This can be used in toolmanager_disconnect."]}, {"name": "backend_managers.ToolManager.toolmanager_disconnect()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.toolmanager_disconnect", "type": "backend_managers", "text": ["Disconnect callback id cid.", "Example usage:"]}, {"name": "backend_managers.ToolManager.trigger_tool()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.trigger_tool", "type": "backend_managers", "text": ["Trigger a tool and emit the tool_trigger_{name} event.", "Name of the tool.", "Object that wishes to trigger the tool.", "Original Canvas event or None.", "Extra data to pass to the tool when triggering."]}, {"name": "backend_managers.ToolManager.update_keymap()", "path": "backend_managers_api#matplotlib.backend_managers.ToolManager.update_keymap", "type": "backend_managers", "text": ["Set the keymap to associate with the specified tool.", "Name of the Tool.", "Keys to associate with the tool."]}, {"name": "backend_managers.ToolManagerMessageEvent", "path": "backend_managers_api#matplotlib.backend_managers.ToolManagerMessageEvent", "type": "backend_managers", "text": ["Bases: object", "Event carrying messages from toolmanager.", "Messages usually get displayed to the user by the toolbar."]}, {"name": "backend_managers.ToolTriggerEvent", "path": "backend_managers_api#matplotlib.backend_managers.ToolTriggerEvent", "type": "backend_managers", "text": ["Bases: matplotlib.backend_managers.ToolEvent", "Event to inform that a tool has been triggered."]}, {"name": "backend_mixed", "path": "backend_mixed_api", "type": "backend_mixed", "text": ["Bases: object", "A helper class to implement a renderer that switches between vector and raster drawing. An example may be a PDF writer, where most things are drawn with PDF vector commands, but some very complex objects, such as quad meshes, are rasterised and then output as images.", "The figure instance.", "The width of the canvas in logical units", "The height of the canvas in logical units", "The dpi of the canvas", "An instance of a subclass of RendererBase that will be used for the vector drawing.", "The renderer class to use for the raster drawing. If not provided, this will use the Agg backend (which is currently the only viable option anyway.)", "Enter \"raster\" mode. All subsequent drawing commands (until stop_rasterizing is called) will be drawn with the raster backend.", "Exit \"raster\" mode. All of the drawing that was done since the last start_rasterizing call will be copied to the vector backend by calling draw_image."]}, {"name": "backend_nbagg", "path": "backend_nbagg_api", "type": "backend_nbagg", "text": ["Interactive figures in the IPython notebook.", "Bases: object", "Manages the Comm connection between IPython and the browser (client).", "Comms are 2 way, with the CommSocket being able to publish a message via the send_json method, and handle a message with on_message. On the JS side figure.send_message and figure.ws.onmessage do the sending and receiving respectively.", "alias of matplotlib.backends.backend_nbagg.FigureCanvasNbAgg", "Bases: matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore", "alias of matplotlib.backends.backend_nbagg.FigureManagerNbAgg", "Bases: matplotlib.backends.backend_webagg_core.FigureManagerWebAgg", "alias of matplotlib.backends.backend_nbagg.NavigationIPy", "Clear up any closed Comms.", "A special method to re-show the figure in the notebook.", "For GUI backends, show the figure window and redraw. For non-GUI backends, raise an exception, unless running headless (i.e. on Linux with an unset DISPLAY); this exception is converted to a warning in Figure.show.", "Bases: matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg", "Return a string showing the figure and connection status for the backend.", "This is intended as a diagnostic tool, and not for general use.", "Create a new figure manager instance for the given figure.", "Show all figures.", "show blocks by calling mainloop if block is True, or if it is None and we are neither in IPython's %pylab mode, nor in interactive mode."]}, {"name": "backend_pdf", "path": "backend_pdf_api", "type": "backend_pdf", "text": ["A PDF Matplotlib backend.", "Author: Jouni K Sepp\u00e4nen <jks@iki.fi> and others.", "alias of matplotlib.backends.backend_pdf.FigureCanvasPdf", "Bases: matplotlib.backend_bases.FigureCanvasBase", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "Return the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png').", "The returned string does not include a period. This method is overridden in backends that only support a single file type.", "Bases: matplotlib.backend_bases.GraphicsContextBase", "Set clip rectangle. Calls pop() and push().", "Copy properties of other into self.", "Copy properties of other into self and return PDF commands needed to transform self into other.", "Predicate: does the path need to be filled?", "An optional argument can be used to specify an alternative _fillcolor, as needed by RendererPdf.draw_markers.", "Make sure every pushed graphics state is popped.", "Return the appropriate pdf operator to cause the path to be stroked, filled, or both.", "Predicate: does the path need to be stroked (its outline drawn)? This tests for the various conditions that disable stroking the path, in which case it would presumably be filled.", "Bases: object", "PDF name object.", "Bases: matplotlib.backends.backend_pdf.Operator, enum.Enum", "An enumeration.", "Return the PDF operator to paint a path.", "Fill the path with the fill color.", "Stroke the outline of the path with the line color.", "Bases: object", "PDF operator object.", "Bases: object", "PDF file object.", "Output target; if a string, a file will be opened for writing.", "Information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary'), e.g.: {'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}.", "The standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator', 'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been predefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed by setting them to None.", "Add a Gouraud triangle shading.", "Triangle vertices, shape (n, 3, 2) where n = number of triangles, 3 = vertices, 2 = x, y.", "Vertex colors, shape (n, 3, 1) or (n, 3, 4) as with points, but last dimension is either (gray,) or (r, g, b, alpha).", "Return name of an ExtGState that sets alpha to the given value.", "Flush all buffers and free all resources.", "Given a dvi font object, return a name suitable for Op.selectfont. This registers the font information in self.dviFontInfo if not yet registered.", "Embed the TTF font from the named file into the document.", "Write out the various deferred objects and the pdf end matter.", "Select a font based on fontprop and return a name suitable for Op.selectfont. If fontprop is a string, it will be interpreted as the filename of the font.", "Return name of an image XObject representing the given image.", "Return name of a marker XObject representing the given path.", "Reserve an ID for an indirect object.", "The name is used for debugging in case we forget to print out the object with writeObject.", "Write out the info dictionary, checking it for good form", "Write out the PDF trailer.", "Write out the xref table.", "Bases: object", "A multi-page PDF file.", "In reality PdfPages is a thin wrapper around PdfFile, in order to avoid confusion when using savefig and forgetting the format argument.", "Create a new PdfPages object.", "Plots using PdfPages.savefig will be written to a file at this location. The file is opened at once and any older file with the same name is overwritten.", "If set to False, then empty pdf files will be deleted automatically when closed.", "Information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary'), e.g.: {'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}.", "The standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator', 'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been predefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed by setting them to None.", "Add a new text note to the page to be saved next. The optional positionRect specifies the position of the new note on the page. It is outside the page per default to make sure it is invisible on printouts.", "Finalize this object, making the underlying file a complete PDF file.", "Return the current number of pages in the multipage pdf file.", "Return a modifiable information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary').", "Save a Figure to this file as a new page.", "Any other keyword arguments are passed to savefig.", "The figure, or index of the figure, that is saved to the file.", "Bases: object", "PDF reference object.", "Use PdfFile.reserveObject() to create References.", "Bases: matplotlib.backends._backend_pdf_ps.RendererPDFPSBase", "Draw a Gouraud-shaded triangle.", "The graphics context.", "Array of (x, y) points for the triangle.", "RGBA colors for each point of the triangle.", "An affine transform to apply to the points.", "Draw a series of Gouraud triangles.", "Array of N (x, y) points for the triangles.", "Array of N RGBA colors for each point of the triangles.", "An affine transform to apply to the points.", "Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).", "Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path.", "Draw a Path instance using the given affine transform.", "Draw a collection of paths selecting drawing properties from the lists facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a list of offsets to apply to each of the paths. The offsets in offsets are first transformed by offsetTrans before being applied.", "offset_position is unused now, but the argument is kept for backwards compatibility.", "This provides a fallback implementation of draw_path_collection() that makes multiple calls to draw_path(). Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods _iter_collection_raw_paths() and _iter_collection() are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of draw_path_collection() can be made globally.", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Get the factor by which to magnify images passed to draw_image(). Allows a backend to have images at a different resolution to other artists.", "Return an instance of a GraphicsContextBase.", "Bases: object", "PDF stream object.", "This has no pdfRepr method. Instead, call begin(), then output the contents of the stream by calling write(), and finally call end().", "Object id of the stream.", "An unused Reference object for the length of the stream; None means to use a memory buffer so the length can be inlined.", "The underlying object to write the stream to.", "Extra key-value pairs to include in the stream header.", "If the data is already png encoded, the decode parameters.", "Finalize stream.", "Write some data on the stream.", "Bases: object", "Store verbatim PDF command content for later inclusion in the stream.", "Make one string from sequence of strings, with whitespace in between.", "The whitespace is chosen to form lines of at most linelen characters, if possible.", "Map Python objects to PDF syntax."]}, {"name": "backend_pgf", "path": "backend_pgf_api", "type": "backend_pgf", "text": ["alias of matplotlib.backends.backend_pgf.FigureCanvasPgf", "Bases: matplotlib.backend_bases.FigureCanvasBase", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "Return the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png').", "The returned string does not include a period. This method is overridden in backends that only support a single file type.", "Use LaTeX to compile a pgf generated figure to pdf.", "Output pgf macros for drawing the figure so it can be included and rendered in latex documents.", "Use LaTeX to compile a pgf figure to pdf and convert it to png.", "Bases: Exception", "Bases: object", "The LatexManager opens an instance of the LaTeX application for determining the metrics of text elements. The LaTeX environment can be modified by setting fonts and/or a custom preamble in rcParams.", "Get the width, total height, and descent (in TeX points) for a text typeset by the current LaTeX environment.", "Bases: object", "A multi-page PDF file using the pgf backend", "Create a new PdfPages object.", "Plots using PdfPages.savefig will be written to a file at this location. Any older file with the same name is overwritten.", "If set to False, then empty pdf files will be deleted automatically when closed.", "Information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary'), e.g.: {'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}.", "The standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator', 'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been predefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed by setting them to None.", "Note that some versions of LaTeX engines may ignore the 'Producer' key and set it to themselves.", "Finalize this object, running LaTeX in a temporary directory and moving the final pdf file to filename.", "Return the current number of pages in the multipage pdf file.", "Save a Figure to this file as a new page.", "Any other keyword arguments are passed to savefig.", "The figure, or index of the figure, that is saved to the file.", "Bases: matplotlib.backend_bases.RendererBase", "Create a new PGF renderer that translates any drawing instruction into text commands to be interpreted in a latex pgfpicture environment.", "Matplotlib figure to initialize height, width and dpi from.", "File handle for the output of the drawing commands.", "Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).", "Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path.", "Draw a Path instance using the given affine transform.", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Return whether y values increase from top to bottom.", "Note that this only affects drawing of texts and images.", "Return the canvas width and height in display coords.", "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop.", "Return whether image composition by Matplotlib should be skipped.", "Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return not rcParams[\"image.composite_image\"].", "Return whether arbitrary affine transformations in draw_image() are supported (True for most vector backends).", "Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float", "Bases: object", "[Deprecated]", "Deprecated since version 3.4: ", "[Deprecated]", "Deprecated since version 3.4: ", "[Deprecated]", "Deprecated since version 3.4: ", "Do some necessary and/or useful substitutions for texts to be included in LaTeX documents.", "This distinguishes text-mode and math-mode by replacing the math separator $ with \\(\\displaystyle %s\\). Escaped math separators (\\$) are ignored.", "The following characters are escaped in text segments: _^$%", "Build fontspec preamble from rc.", "Get LaTeX preamble from rc.", "Return a function that converts a pdf file to a png file."]}, {"name": "backend_ps", "path": "backend_ps_api", "type": "backend_ps", "text": ["A PostScript backend, which can produce both PostScript .ps and .eps.", "alias of matplotlib.backends.backend_ps.FigureCanvasPS", "Bases: matplotlib.backend_bases.FigureCanvasBase", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "Return the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png').", "The returned string does not include a period. This method is overridden in backends that only support a single file type.", "Bases: matplotlib.backend_bases.GraphicsContextBase", "[Deprecated]", "Deprecated since version 3.4: ", "Return the CapStyle.", "Return the JoinStyle.", "Bases: object", "Bases: matplotlib.backends._backend_pdf_ps.RendererPDFPSBase", "The renderer handles all the drawing primitives using a graphics context instance that controls the colors/styles.", "Draw a Gouraud-shaded triangle.", "The graphics context.", "Array of (x, y) points for the triangle.", "RGBA colors for each point of the triangle.", "An affine transform to apply to the points.", "Draw a series of Gouraud triangles.", "Array of N (x, y) points for the triangles.", "Array of N RGBA colors for each point of the triangles.", "An affine transform to apply to the points.", "Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).", "Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path.", "Draw the math text using matplotlib.mathtext.", "Draw a Path instance using the given affine transform.", "Draw a collection of paths selecting drawing properties from the lists facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a list of offsets to apply to each of the paths. The offsets in offsets are first transformed by offsetTrans before being applied.", "offset_position is unused now, but the argument is kept for backwards compatibility.", "This provides a fallback implementation of draw_path_collection() that makes multiple calls to draw_path(). Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods _iter_collection_raw_paths() and _iter_collection() are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of draw_path_collection() can be made globally.", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Get the factor by which to magnify images passed to draw_image. Allows a backend to have images at a different resolution to other artists.", "When we want to use the LaTeX backend with postscript, we write PSFrag tags to a temporary postscript file, each one marking a position for LaTeX to render some text. convert_psfrags generates a LaTeX document containing the commands to convert those tags to text. LaTeX/dvips produces the postscript file that includes the actual text.", "Return a postscript header string for the given bbox lbrt=(l, b, r, t). Optionally, return rotate command.", "Use ghostscript's pswrite or epswrite device to distill a file. This yields smaller files without illegal encapsulated postscript operators. The output is low-level, converting text to outlines.", "Convert the postscript to encapsulated postscript. The bbox of the eps file will be replaced with the given bbox argument. If None, original bbox will be used.", "Quote dangerous characters of S for use in a PostScript string constant.", "Use ghostscript's ps2pdf and xpdf's/poppler's pdftops to distill a file. This yields smaller files without illegal encapsulated postscript operators. This distiller is preferred, generating high-level postscript output that treats text as text."]}, {"name": "backend_qtagg, backend_qtcairo", "path": "backend_qt_api", "type": "backend_qtagg, backend_qtcairo", "text": ["NOTE These backends are not documented here, to avoid adding a dependency to building the docs."]}, {"name": "backend_svg", "path": "backend_svg_api", "type": "backend_svg", "text": ["alias of matplotlib.backends.backend_svg.FigureCanvasSVG", "Bases: matplotlib.backend_bases.FigureCanvasBase", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "Return the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png').", "The returned string does not include a period. This method is overridden in backends that only support a single file type.", "Output target; if a string, a file will be opened for writing.", "Metadata in the SVG file defined as key-value pairs of strings, datetimes, or lists of strings, e.g., {'Creator': 'My software',\n'Contributor': ['Me', 'My Friend'], 'Title': 'Awesome'}.", "The standard keys and their value types are:", "Values have been predefined for 'Creator', 'Date', 'Format', and 'Type'. They can be removed by setting them to None.", "Information is encoded as Dublin Core Metadata.", "Bases: matplotlib.backend_bases.RendererBase", "Close a grouping element with label s.", "Only used by the SVG renderer.", "Draw a Gouraud-shaded triangle.", "The graphics context.", "Array of (x, y) points for the triangle.", "RGBA colors for each point of the triangle.", "An affine transform to apply to the points.", "Draw a series of Gouraud triangles.", "Array of N (x, y) points for the triangles.", "Array of N RGBA colors for each point of the triangles.", "An affine transform to apply to the points.", "Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).", "Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path.", "Draw a Path instance using the given affine transform.", "Draw a collection of paths selecting drawing properties from the lists facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a list of offsets to apply to each of the paths. The offsets in offsets are first transformed by offsetTrans before being applied.", "offset_position is unused now, but the argument is kept for backwards compatibility.", "This provides a fallback implementation of draw_path_collection() that makes multiple calls to draw_path(). Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods _iter_collection_raw_paths() and _iter_collection() are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of draw_path_collection() can be made globally.", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Return whether y values increase from top to bottom.", "Note that this only affects drawing of texts and images.", "Return the canvas width and height in display coords.", "Get the factor by which to magnify images passed to draw_image(). Allows a backend to have images at a different resolution to other artists.", "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop.", "Open a grouping element with label s and gid (if set) as id.", "Only used by the SVG renderer.", "Return whether image composition by Matplotlib should be skipped.", "Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return not rcParams[\"image.composite_image\"].", "Return whether arbitrary affine transformations in draw_image() are supported (True for most vector backends).", "Bases: object", "Close open elements, up to (and including) the element identified by the given identifier.", "Element identifier, as returned by the start() method.", "Add a comment to the output stream.", "Comment text.", "Add character data to the output stream.", "Character data.", "Add an entire element. This is the same as calling start(), data(), and end() in sequence. The text argument can be omitted.", "Close the current element (opened by the most recent call to start()).", "Element tag. If given, the tag must match the start tag. If omitted, the current element is closed.", "Flush the output stream.", "Open a new element. Attributes can be given as keyword arguments, or as a string/string dictionary. The method returns an opaque identifier that can be passed to the close() method, to close all open elements up to and including this one.", "Element tag.", "Attribute dictionary. Alternatively, attributes can be given as keyword arguments.", "Create a short string representation of a float, which is %f formatting with trailing zeros and the decimal point removed."]}, {"name": "backend_template", "path": "backend_template_api", "type": "backend_template", "text": ["A fully functional, do-nothing backend intended as a template for backend writers. It is fully functional in that you can select it as a backend e.g. with", "and your program will (should!) run without error, though no output is produced. This provides a starting point for backend writers; you can selectively implement drawing methods (draw_path, draw_image, etc.) and slowly see your figure come to life instead having to have a full blown implementation before getting any results.", "Copy this file to a directory outside of the Matplotlib source tree, somewhere where Python can import it (by adding the directory to your sys.path or by packaging it as a normal Python package); if the backend is importable as import my.backend you can then select it using", "If your backend implements support for saving figures (i.e. has a print_xyz method), you can register it as the default handler for a given file type:", "alias of matplotlib.backends.backend_template.FigureCanvasTemplate", "Bases: matplotlib.backend_bases.FigureCanvasBase", "The canvas the figure renders into. Calls the draw and print fig methods, creates the renderers, etc.", "Note: GUI templates will want to connect events for button presses, mouse movements and key presses to functions that call the base class methods button_press_event, button_release_event, motion_notify_event, key_press_event, and key_release_event. See the implementations of the interactive backends for examples.", "A high-level Figure instance", "Draw the figure using the renderer.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "Return the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png').", "The returned string does not include a period. This method is overridden in backends that only support a single file type.", "Write out format foo.", "This method is normally called via Figure.savefig and FigureCanvasBase.print_figure, which take care of setting the figure facecolor, edgecolor, and dpi to the desired output values, and will restore them to the original values. Therefore, print_foo does not need to handle these settings.", "alias of matplotlib.backends.backend_template.FigureManagerTemplate", "Bases: matplotlib.backend_bases.FigureManagerBase", "Helper class for pyplot mode, wraps everything up into a neat bundle.", "For non-interactive backends, the base class is sufficient.", "Bases: matplotlib.backend_bases.GraphicsContextBase", "The graphics context provides the color, line styles, etc... See the cairo and postscript backends for examples of mapping the graphics context attributes (cap styles, join styles, line widths, colors) to a particular backend. In cairo this is done by wrapping a cairo.Context object and forwarding the appropriate calls to it using a dictionary mapping styles to gdk constants. In Postscript, all the work is done by the renderer, mapping line styles to postscript calls.", "If it's more appropriate to do the mapping at the renderer level (as in the postscript backend), you don't need to override any of the GC methods. If it's more appropriate to wrap an instance (as in the cairo backend) and do the mapping here, you'll need to override several of the setter methods.", "The base GraphicsContext stores colors as a RGB tuple on the unit interval, e.g., (0.5, 0.0, 1.0). You may need to map this to colors appropriate for your backend.", "Bases: matplotlib.backend_bases.RendererBase", "The renderer handles drawing/rendering operations.", "This is a minimal do-nothing class that can be used to get started when writing a new backend. Refer to backend_bases.RendererBase for documentation of the methods.", "Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).", "Draw a Path instance using the given affine transform.", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Return whether y values increase from top to bottom.", "Note that this only affects drawing of texts and images.", "Return the canvas width and height in display coords.", "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop.", "Return an instance of a GraphicsContextBase.", "Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float", "For image backends - is not required. For GUI backends - this should be overridden if drawing should be done in interactive python mode.", "Create a new figure manager instance.", "Create a new figure manager instance for the given figure.", "For image backends - is not required. For GUI backends - show() is usually the last line of a pyplot script and tells the backend that it is time to draw. In interactive mode, this should do nothing."]}, {"name": "backend_tkagg, backend_tkcairo", "path": "backend_tk_api", "type": "backend_tkagg, backend_tkcairo", "text": ["alias of matplotlib.backends.backend_tkagg.FigureCanvasTkAgg", "Bases: matplotlib.backends.backend_agg.FigureCanvasAgg, matplotlib.backends._backend_tk.FigureCanvasTk", "Blit the canvas in bbox (default entire canvas).", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "alias of matplotlib.backends.backend_tkcairo.FigureCanvasTkCairo", "Bases: matplotlib.backends.backend_cairo.FigureCanvasCairo, matplotlib.backends._backend_tk.FigureCanvasTk", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk."]}, {"name": "backend_tools", "path": "backend_tools_api", "type": "backend_tools", "text": ["Abstract base classes define the primitives for Tools. These tools are used by matplotlib.backend_managers.ToolManager", "Simple stateless tool", "Tool that has two states, only one Toggle tool can be active at any given time for the same matplotlib.backend_managers.ToolManager", "Bases: matplotlib.backend_tools.ToolToggleBase", "Base Tool to toggle between linear and logarithmic.", "Disable the toggle tool.", "trigger call this method when toggled is True.", "This can happen in different circumstances.", "Enable the toggle tool.", "trigger calls this method when toggled is False.", "Calls enable or disable based on toggled value.", "Bases: matplotlib.backend_tools.ToolBase", "Base tool for the configuration of subplots.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "Bases: enum.IntEnum", "Backend-independent cursor types.", "Bases: matplotlib.backend_tools.ToolBase", "Draw and remove a rubberband.", "Draw rubberband.", "This method must get implemented per backend.", "Remove rubberband.", "This method should get implemented per backend.", "Call draw_rubberband or remove_rubberband based on data.", "Bases: matplotlib.backend_tools.ToolBase", "Base tool for figure saving.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "Bases: matplotlib.backend_tools.ToolBase", "Change to the current cursor while inaxes.", "This tool, keeps track of all ToolToggleBase derived tools, and calls set_cursor when a tool gets triggered.", "[Deprecated] Set the cursor.", "Deprecated since version 3.5.", "Bases: matplotlib.backend_tools.ViewsPositionsBase", "Move back up the view limits stack.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "Bases: object", "Base tool class.", "A base tool, only implements trigger method or no method at all. The tool is instantiated by matplotlib.backend_managers.ToolManager.", "The canvas of the figure affected by this tool, or None.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Destroy the tool.", "This method is called by ToolManager.remove_tool.", "The Figure affected by this tool, or None.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "The tool id (str, must be unique among tools of a tool manager).", "The ToolManager that controls this tool.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data.", "alias of matplotlib.backend_tools.ToolCopyToClipboardBase", "Bases: matplotlib.backend_tools.ToolBase", "Tool to copy the figure to the clipboard.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data.", "Bases: matplotlib.backend_tools.ToolBase", "Send message with the current pointer position.", "This tool runs in the background reporting the position of the cursor.", "Call matplotlib.backend_managers.ToolManager.message_event.", "Bases: matplotlib.backend_tools.ViewsPositionsBase", "Move forward in the view lim stack.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "Bases: matplotlib.backend_tools.ToolToggleBase", "Tool to toggle full screen.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Disable the toggle tool.", "trigger call this method when toggled is True.", "This can happen in different circumstances.", "Enable the toggle tool.", "trigger calls this method when toggled is False.", "Bases: matplotlib.backend_tools.ToolBase", "Tool to toggle the major grids of the figure.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data.", "Bases: matplotlib.backend_tools.ToolBase", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Convert a shortcut string from the notation used in rc config to the standard notation for displaying shortcuts, e.g. 'ctrl+a' -> 'Ctrl+A'.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "Bases: matplotlib.backend_tools.ViewsPositionsBase", "Restore the original view limits.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "Bases: matplotlib.backend_tools.ToolBase", "Tool to toggle the major and minor grids of the figure.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data.", "Bases: matplotlib.backend_tools.ZoomPanBase", "Pan axes with left mouse, zoom with right.", "Cursor to use when the tool is active.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "Attribute to group 'radio' like tools (mutually exclusive).", "str that identifies the group or None if not belonging to a group.", "Bases: matplotlib.backend_tools.ToolBase", "Tool to call the figure manager destroy method.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data.", "Bases: matplotlib.backend_tools.ToolBase", "Tool to call the figure manager destroy method.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data.", "alias of matplotlib.backend_tools.SetCursorBase", "Bases: matplotlib.backend_tools.ToolBase", "Toggleable tool.", "Every time it is triggered, it switches between enable and disable.", "Variable length argument to be used by the Tool.", "toggled if present and True, sets the initial state of the Tool Arbitrary keyword arguments to be consumed by the Tool", "Cursor to use when the tool is active.", "Default of toggled state.", "Disable the toggle tool.", "trigger call this method when toggled is True.", "This can happen in different circumstances.", "Enable the toggle tool.", "trigger calls this method when toggled is False.", "Attribute to group 'radio' like tools (mutually exclusive).", "str that identifies the group or None if not belonging to a group.", "State of the toggled tool.", "Calls enable or disable based on toggled value.", "Bases: matplotlib.backend_tools.ToolBase", "Auxiliary Tool to handle changes in views and positions.", "Runs in the background and should get used by all the tools that need to access the figure's history of views and positions, e.g.", "Add the current figure to the stack of views and positions.", "Back one step in the stack of views and positions.", "Reset the axes stack.", "Forward one step in the stack of views and positions.", "Recall the first view and position from the stack.", "Push the current view limits and position onto their respective stacks.", "Make sure that self.home_views has an entry for all axes present in the figure.", "Update the view limits and position for each axes from the current stack position. If any axes are present in the figure that aren't in the current stack position, use the home view limits for those axes and don't update any positions.", "Bases: matplotlib.backend_tools.AxisScaleBase", "Tool to toggle between linear and logarithmic scales on the X axis.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Bases: matplotlib.backend_tools.AxisScaleBase", "Tool to toggle between linear and logarithmic scales on the Y axis.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Bases: matplotlib.backend_tools.ZoomPanBase", "A Tool for zooming using a rectangle selector.", "Cursor to use when the tool is active.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "Attribute to group 'radio' like tools (mutually exclusive).", "str that identifies the group or None if not belonging to a group.", "Bases: matplotlib.backend_tools.ToolBase", "Base class for ToolHome, ToolBack and ToolForward.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data.", "Bases: matplotlib.backend_tools.ToolToggleBase", "Base class for ToolZoom and ToolPan.", "Release the canvas and disconnect press/release events.", "Connect press/release events and lock the canvas.", "Calls enable or disable based on toggled value.", "Add multiple tools to the container.", "backend_bases.ToolContainerBase object that will get the tools added.", "List in the form [[group1, [tool1, tool2 ...]], [group2, [...]]] where the tools [tool1, tool2, ...] will display in group1. See add_tool for details.", "Add multiple tools to a ToolManager.", "Manager to which the tools are added.", "The tools to add in a {name: tool} dict, see add_tool for more info.", "alias of matplotlib.backend_tools.Cursors", "Default tools in the toolbar", "Default tools"]}, {"name": "backend_tools.add_tools_to_container()", "path": "backend_tools_api#matplotlib.backend_tools.add_tools_to_container", "type": "backend_tools", "text": ["Add multiple tools to the container.", "backend_bases.ToolContainerBase object that will get the tools added.", "List in the form [[group1, [tool1, tool2 ...]], [group2, [...]]] where the tools [tool1, tool2, ...] will display in group1. See add_tool for details."]}, {"name": "backend_tools.add_tools_to_manager()", "path": "backend_tools_api#matplotlib.backend_tools.add_tools_to_manager", "type": "backend_tools", "text": ["Add multiple tools to a ToolManager.", "Manager to which the tools are added.", "The tools to add in a {name: tool} dict, see add_tool for more info."]}, {"name": "backend_tools.AxisScaleBase", "path": "backend_tools_api#matplotlib.backend_tools.AxisScaleBase", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolToggleBase", "Base Tool to toggle between linear and logarithmic.", "Disable the toggle tool.", "trigger call this method when toggled is True.", "This can happen in different circumstances.", "Enable the toggle tool.", "trigger calls this method when toggled is False.", "Calls enable or disable based on toggled value."]}, {"name": "backend_tools.AxisScaleBase.disable()", "path": "backend_tools_api#matplotlib.backend_tools.AxisScaleBase.disable", "type": "backend_tools", "text": ["Disable the toggle tool.", "trigger call this method when toggled is True.", "This can happen in different circumstances."]}, {"name": "backend_tools.AxisScaleBase.enable()", "path": "backend_tools_api#matplotlib.backend_tools.AxisScaleBase.enable", "type": "backend_tools", "text": ["Enable the toggle tool.", "trigger calls this method when toggled is False."]}, {"name": "backend_tools.AxisScaleBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.AxisScaleBase.trigger", "type": "backend_tools", "text": ["Calls enable or disable based on toggled value."]}, {"name": "backend_tools.ConfigureSubplotsBase", "path": "backend_tools_api#matplotlib.backend_tools.ConfigureSubplotsBase", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Base tool for the configuration of subplots.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ConfigureSubplotsBase.description", "path": "backend_tools_api#matplotlib.backend_tools.ConfigureSubplotsBase.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ConfigureSubplotsBase.image", "path": "backend_tools_api#matplotlib.backend_tools.ConfigureSubplotsBase.image", "type": "backend_tools", "text": ["Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.cursors", "path": "backend_tools_api#matplotlib.backend_tools.cursors", "type": "backend_tools", "text": ["alias of matplotlib.backend_tools.Cursors"]}, {"name": "backend_tools.Cursors", "path": "backend_tools_api#matplotlib.backend_tools.Cursors", "type": "backend_tools", "text": ["Bases: enum.IntEnum", "Backend-independent cursor types."]}, {"name": "backend_tools.Cursors.HAND", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.HAND", "type": "backend_tools", "text": []}, {"name": "backend_tools.Cursors.MOVE", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.MOVE", "type": "backend_tools", "text": []}, {"name": "backend_tools.Cursors.POINTER", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.POINTER", "type": "backend_tools", "text": []}, {"name": "backend_tools.Cursors.RESIZE_HORIZONTAL", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.RESIZE_HORIZONTAL", "type": "backend_tools", "text": []}, {"name": "backend_tools.Cursors.RESIZE_VERTICAL", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.RESIZE_VERTICAL", "type": "backend_tools", "text": []}, {"name": "backend_tools.Cursors.SELECT_REGION", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.SELECT_REGION", "type": "backend_tools", "text": []}, {"name": "backend_tools.Cursors.WAIT", "path": "backend_tools_api#matplotlib.backend_tools.Cursors.WAIT", "type": "backend_tools", "text": []}, {"name": "backend_tools.default_toolbar_tools", "path": "backend_tools_api#matplotlib.backend_tools.default_toolbar_tools", "type": "backend_tools", "text": ["Default tools in the toolbar"]}, {"name": "backend_tools.default_tools", "path": "backend_tools_api#matplotlib.backend_tools.default_tools", "type": "backend_tools", "text": ["Default tools"]}, {"name": "backend_tools.RubberbandBase", "path": "backend_tools_api#matplotlib.backend_tools.RubberbandBase", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Draw and remove a rubberband.", "Draw rubberband.", "This method must get implemented per backend.", "Remove rubberband.", "This method should get implemented per backend.", "Call draw_rubberband or remove_rubberband based on data."]}, {"name": "backend_tools.RubberbandBase.draw_rubberband()", "path": "backend_tools_api#matplotlib.backend_tools.RubberbandBase.draw_rubberband", "type": "backend_tools", "text": ["Draw rubberband.", "This method must get implemented per backend."]}, {"name": "backend_tools.RubberbandBase.remove_rubberband()", "path": "backend_tools_api#matplotlib.backend_tools.RubberbandBase.remove_rubberband", "type": "backend_tools", "text": ["Remove rubberband.", "This method should get implemented per backend."]}, {"name": "backend_tools.RubberbandBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.RubberbandBase.trigger", "type": "backend_tools", "text": ["Call draw_rubberband or remove_rubberband based on data."]}, {"name": "backend_tools.SaveFigureBase", "path": "backend_tools_api#matplotlib.backend_tools.SaveFigureBase", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Base tool for figure saving.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.SaveFigureBase.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.SaveFigureBase.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.SaveFigureBase.description", "path": "backend_tools_api#matplotlib.backend_tools.SaveFigureBase.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.SaveFigureBase.image", "path": "backend_tools_api#matplotlib.backend_tools.SaveFigureBase.image", "type": "backend_tools", "text": ["Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.SetCursorBase", "path": "backend_tools_api#matplotlib.backend_tools.SetCursorBase", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Change to the current cursor while inaxes.", "This tool, keeps track of all ToolToggleBase derived tools, and calls set_cursor when a tool gets triggered.", "[Deprecated] Set the cursor.", "Deprecated since version 3.5."]}, {"name": "backend_tools.SetCursorBase.set_cursor()", "path": "backend_tools_api#matplotlib.backend_tools.SetCursorBase.set_cursor", "type": "backend_tools", "text": ["[Deprecated] Set the cursor.", "Deprecated since version 3.5."]}, {"name": "backend_tools.SetCursorBase.set_figure()", "path": "backend_tools_api#matplotlib.backend_tools.SetCursorBase.set_figure", "type": "backend_tools", "text": []}, {"name": "backend_tools.ToolBack", "path": "backend_tools_api#matplotlib.backend_tools.ToolBack", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ViewsPositionsBase", "Move back up the view limits stack.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolBack.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolBack.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolBack.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolBack.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolBack.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolBack.image", "type": "backend_tools", "text": ["Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolBase", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase", "type": "backend_tools", "text": ["Bases: object", "Base tool class.", "A base tool, only implements trigger method or no method at all. The tool is instantiated by matplotlib.backend_managers.ToolManager.", "The canvas of the figure affected by this tool, or None.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Destroy the tool.", "This method is called by ToolManager.remove_tool.", "The Figure affected by this tool, or None.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "The tool id (str, must be unique among tools of a tool manager).", "The ToolManager that controls this tool.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolBase.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolBase.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolBase.destroy()", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.destroy", "type": "backend_tools", "text": ["Destroy the tool.", "This method is called by ToolManager.remove_tool."]}, {"name": "backend_tools.ToolBase.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.image", "type": "backend_tools", "text": ["Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolBase.set_figure()", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.set_figure", "type": "backend_tools", "text": []}, {"name": "backend_tools.ToolBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolBase.trigger", "type": "backend_tools", "text": ["Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolCopyToClipboard", "path": "backend_tools_api#matplotlib.backend_tools.ToolCopyToClipboard", "type": "backend_tools", "text": ["alias of matplotlib.backend_tools.ToolCopyToClipboardBase"]}, {"name": "backend_tools.ToolCopyToClipboardBase", "path": "backend_tools_api#matplotlib.backend_tools.ToolCopyToClipboardBase", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Tool to copy the figure to the clipboard.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolCopyToClipboardBase.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolCopyToClipboardBase.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolCopyToClipboardBase.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolCopyToClipboardBase.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolCopyToClipboardBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolCopyToClipboardBase.trigger", "type": "backend_tools", "text": ["Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolCursorPosition", "path": "backend_tools_api#matplotlib.backend_tools.ToolCursorPosition", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Send message with the current pointer position.", "This tool runs in the background reporting the position of the cursor.", "Call matplotlib.backend_managers.ToolManager.message_event."]}, {"name": "backend_tools.ToolCursorPosition.send_message()", "path": "backend_tools_api#matplotlib.backend_tools.ToolCursorPosition.send_message", "type": "backend_tools", "text": ["Call matplotlib.backend_managers.ToolManager.message_event."]}, {"name": "backend_tools.ToolCursorPosition.set_figure()", "path": "backend_tools_api#matplotlib.backend_tools.ToolCursorPosition.set_figure", "type": "backend_tools", "text": []}, {"name": "backend_tools.ToolForward", "path": "backend_tools_api#matplotlib.backend_tools.ToolForward", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ViewsPositionsBase", "Move forward in the view lim stack.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolForward.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolForward.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolForward.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolForward.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolForward.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolForward.image", "type": "backend_tools", "text": ["Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolFullScreen", "path": "backend_tools_api#matplotlib.backend_tools.ToolFullScreen", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolToggleBase", "Tool to toggle full screen.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Disable the toggle tool.", "trigger call this method when toggled is True.", "This can happen in different circumstances.", "Enable the toggle tool.", "trigger calls this method when toggled is False."]}, {"name": "backend_tools.ToolFullScreen.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolFullScreen.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolFullScreen.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolFullScreen.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolFullScreen.disable()", "path": "backend_tools_api#matplotlib.backend_tools.ToolFullScreen.disable", "type": "backend_tools", "text": ["Disable the toggle tool.", "trigger call this method when toggled is True.", "This can happen in different circumstances."]}, {"name": "backend_tools.ToolFullScreen.enable()", "path": "backend_tools_api#matplotlib.backend_tools.ToolFullScreen.enable", "type": "backend_tools", "text": ["Enable the toggle tool.", "trigger calls this method when toggled is False."]}, {"name": "backend_tools.ToolGrid", "path": "backend_tools_api#matplotlib.backend_tools.ToolGrid", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Tool to toggle the major grids of the figure.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolGrid.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolGrid.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolGrid.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolGrid.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolGrid.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolGrid.trigger", "type": "backend_tools", "text": ["Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolHelpBase", "path": "backend_tools_api#matplotlib.backend_tools.ToolHelpBase", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Convert a shortcut string from the notation used in rc config to the standard notation for displaying shortcuts, e.g. 'ctrl+a' -> 'Ctrl+A'.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolHelpBase.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolHelpBase.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolHelpBase.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolHelpBase.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolHelpBase.format_shortcut()", "path": "backend_tools_api#matplotlib.backend_tools.ToolHelpBase.format_shortcut", "type": "backend_tools", "text": ["Convert a shortcut string from the notation used in rc config to the standard notation for displaying shortcuts, e.g. 'ctrl+a' -> 'Ctrl+A'."]}, {"name": "backend_tools.ToolHelpBase.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolHelpBase.image", "type": "backend_tools", "text": ["Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolHome", "path": "backend_tools_api#matplotlib.backend_tools.ToolHome", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ViewsPositionsBase", "Restore the original view limits.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolHome.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolHome.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolHome.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolHome.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolHome.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolHome.image", "type": "backend_tools", "text": ["Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolMinorGrid", "path": "backend_tools_api#matplotlib.backend_tools.ToolMinorGrid", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Tool to toggle the major and minor grids of the figure.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolMinorGrid.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolMinorGrid.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolMinorGrid.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolMinorGrid.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolMinorGrid.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolMinorGrid.trigger", "type": "backend_tools", "text": ["Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolPan", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ZoomPanBase", "Pan axes with left mouse, zoom with right.", "Cursor to use when the tool is active.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "Attribute to group 'radio' like tools (mutually exclusive).", "str that identifies the group or None if not belonging to a group."]}, {"name": "backend_tools.ToolPan.cursor", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan.cursor", "type": "backend_tools", "text": ["Cursor to use when the tool is active."]}, {"name": "backend_tools.ToolPan.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolPan.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolPan.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan.image", "type": "backend_tools", "text": ["Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolPan.radio_group", "path": "backend_tools_api#matplotlib.backend_tools.ToolPan.radio_group", "type": "backend_tools", "text": ["Attribute to group 'radio' like tools (mutually exclusive).", "str that identifies the group or None if not belonging to a group."]}, {"name": "backend_tools.ToolQuit", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuit", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Tool to call the figure manager destroy method.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolQuit.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuit.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolQuit.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuit.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolQuit.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuit.trigger", "type": "backend_tools", "text": ["Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolQuitAll", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuitAll", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Tool to call the figure manager destroy method.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolQuitAll.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuitAll.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolQuitAll.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuitAll.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolQuitAll.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolQuitAll.trigger", "type": "backend_tools", "text": ["Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ToolSetCursor", "path": "backend_tools_api#matplotlib.backend_tools.ToolSetCursor", "type": "backend_tools", "text": ["alias of matplotlib.backend_tools.SetCursorBase"]}, {"name": "backend_tools.ToolToggleBase", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Toggleable tool.", "Every time it is triggered, it switches between enable and disable.", "Variable length argument to be used by the Tool.", "toggled if present and True, sets the initial state of the Tool Arbitrary keyword arguments to be consumed by the Tool", "Cursor to use when the tool is active.", "Default of toggled state.", "Disable the toggle tool.", "trigger call this method when toggled is True.", "This can happen in different circumstances.", "Enable the toggle tool.", "trigger calls this method when toggled is False.", "Attribute to group 'radio' like tools (mutually exclusive).", "str that identifies the group or None if not belonging to a group.", "State of the toggled tool.", "Calls enable or disable based on toggled value."]}, {"name": "backend_tools.ToolToggleBase.cursor", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.cursor", "type": "backend_tools", "text": ["Cursor to use when the tool is active."]}, {"name": "backend_tools.ToolToggleBase.default_toggled", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.default_toggled", "type": "backend_tools", "text": ["Default of toggled state."]}, {"name": "backend_tools.ToolToggleBase.disable()", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.disable", "type": "backend_tools", "text": ["Disable the toggle tool.", "trigger call this method when toggled is True.", "This can happen in different circumstances."]}, {"name": "backend_tools.ToolToggleBase.enable()", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.enable", "type": "backend_tools", "text": ["Enable the toggle tool.", "trigger calls this method when toggled is False."]}, {"name": "backend_tools.ToolToggleBase.radio_group", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.radio_group", "type": "backend_tools", "text": ["Attribute to group 'radio' like tools (mutually exclusive).", "str that identifies the group or None if not belonging to a group."]}, {"name": "backend_tools.ToolToggleBase.set_figure()", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.set_figure", "type": "backend_tools", "text": []}, {"name": "backend_tools.ToolToggleBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ToolToggleBase.trigger", "type": "backend_tools", "text": ["Calls enable or disable based on toggled value."]}, {"name": "backend_tools.ToolViewsPositions", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Auxiliary Tool to handle changes in views and positions.", "Runs in the background and should get used by all the tools that need to access the figure's history of views and positions, e.g.", "Add the current figure to the stack of views and positions.", "Back one step in the stack of views and positions.", "Reset the axes stack.", "Forward one step in the stack of views and positions.", "Recall the first view and position from the stack.", "Push the current view limits and position onto their respective stacks.", "Make sure that self.home_views has an entry for all axes present in the figure.", "Update the view limits and position for each axes from the current stack position. If any axes are present in the figure that aren't in the current stack position, use the home view limits for those axes and don't update any positions."]}, {"name": "backend_tools.ToolViewsPositions.add_figure()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.add_figure", "type": "backend_tools", "text": ["Add the current figure to the stack of views and positions."]}, {"name": "backend_tools.ToolViewsPositions.back()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.back", "type": "backend_tools", "text": ["Back one step in the stack of views and positions."]}, {"name": "backend_tools.ToolViewsPositions.clear()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.clear", "type": "backend_tools", "text": ["Reset the axes stack."]}, {"name": "backend_tools.ToolViewsPositions.forward()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.forward", "type": "backend_tools", "text": ["Forward one step in the stack of views and positions."]}, {"name": "backend_tools.ToolViewsPositions.home()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.home", "type": "backend_tools", "text": ["Recall the first view and position from the stack."]}, {"name": "backend_tools.ToolViewsPositions.push_current()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.push_current", "type": "backend_tools", "text": ["Push the current view limits and position onto their respective stacks."]}, {"name": "backend_tools.ToolViewsPositions.update_home_views()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.update_home_views", "type": "backend_tools", "text": ["Make sure that self.home_views has an entry for all axes present in the figure."]}, {"name": "backend_tools.ToolViewsPositions.update_view()", "path": "backend_tools_api#matplotlib.backend_tools.ToolViewsPositions.update_view", "type": "backend_tools", "text": ["Update the view limits and position for each axes from the current stack position. If any axes are present in the figure that aren't in the current stack position, use the home view limits for those axes and don't update any positions."]}, {"name": "backend_tools.ToolXScale", "path": "backend_tools_api#matplotlib.backend_tools.ToolXScale", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.AxisScaleBase", "Tool to toggle between linear and logarithmic scales on the X axis.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolXScale.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolXScale.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolXScale.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolXScale.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolXScale.set_scale()", "path": "backend_tools_api#matplotlib.backend_tools.ToolXScale.set_scale", "type": "backend_tools", "text": []}, {"name": "backend_tools.ToolYScale", "path": "backend_tools_api#matplotlib.backend_tools.ToolYScale", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.AxisScaleBase", "Tool to toggle between linear and logarithmic scales on the Y axis.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolYScale.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolYScale.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolYScale.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolYScale.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolYScale.set_scale()", "path": "backend_tools_api#matplotlib.backend_tools.ToolYScale.set_scale", "type": "backend_tools", "text": []}, {"name": "backend_tools.ToolZoom", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ZoomPanBase", "A Tool for zooming using a rectangle selector.", "Cursor to use when the tool is active.", "Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas.", "Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar.", "Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button.", "Attribute to group 'radio' like tools (mutually exclusive).", "str that identifies the group or None if not belonging to a group."]}, {"name": "backend_tools.ToolZoom.cursor", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom.cursor", "type": "backend_tools", "text": ["Cursor to use when the tool is active."]}, {"name": "backend_tools.ToolZoom.default_keymap", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom.default_keymap", "type": "backend_tools", "text": ["Keymap to associate with this tool.", "list[str]: List of keys that will trigger this tool when a keypress event is emitted on self.figure.canvas."]}, {"name": "backend_tools.ToolZoom.description", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom.description", "type": "backend_tools", "text": ["Description of the Tool.", "str: Tooltip used if the Tool is included in a Toolbar."]}, {"name": "backend_tools.ToolZoom.image", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom.image", "type": "backend_tools", "text": ["Filename of the image.", "str: Filename of the image to use in a Toolbar. If None, the name is used as a label in the toolbar button."]}, {"name": "backend_tools.ToolZoom.radio_group", "path": "backend_tools_api#matplotlib.backend_tools.ToolZoom.radio_group", "type": "backend_tools", "text": ["Attribute to group 'radio' like tools (mutually exclusive).", "str that identifies the group or None if not belonging to a group."]}, {"name": "backend_tools.ViewsPositionsBase", "path": "backend_tools_api#matplotlib.backend_tools.ViewsPositionsBase", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolBase", "Base class for ToolHome, ToolBack and ToolForward.", "Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ViewsPositionsBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ViewsPositionsBase.trigger", "type": "backend_tools", "text": ["Called when this tool gets used.", "This method is called by ToolManager.trigger_tool.", "The canvas event that caused this tool to be called.", "Object that requested the tool to be triggered.", "Extra data."]}, {"name": "backend_tools.ZoomPanBase", "path": "backend_tools_api#matplotlib.backend_tools.ZoomPanBase", "type": "backend_tools", "text": ["Bases: matplotlib.backend_tools.ToolToggleBase", "Base class for ToolZoom and ToolPan.", "Release the canvas and disconnect press/release events.", "Connect press/release events and lock the canvas.", "Calls enable or disable based on toggled value."]}, {"name": "backend_tools.ZoomPanBase.disable()", "path": "backend_tools_api#matplotlib.backend_tools.ZoomPanBase.disable", "type": "backend_tools", "text": ["Release the canvas and disconnect press/release events."]}, {"name": "backend_tools.ZoomPanBase.enable()", "path": "backend_tools_api#matplotlib.backend_tools.ZoomPanBase.enable", "type": "backend_tools", "text": ["Connect press/release events and lock the canvas."]}, {"name": "backend_tools.ZoomPanBase.scroll_zoom()", "path": "backend_tools_api#matplotlib.backend_tools.ZoomPanBase.scroll_zoom", "type": "backend_tools", "text": []}, {"name": "backend_tools.ZoomPanBase.trigger()", "path": "backend_tools_api#matplotlib.backend_tools.ZoomPanBase.trigger", "type": "backend_tools", "text": ["Calls enable or disable based on toggled value."]}, {"name": "backend_webagg", "path": "backend_webagg_api", "type": "backend_webagg", "text": ["Displays Agg images in the browser, with interactivity", "alias of matplotlib.backends.backend_webagg.FigureCanvasWebAgg", "Bases: matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore", "Bases: threading.Thread", "This constructor should always be called with keyword arguments. Arguments are:", "group should be None; reserved for future extension when a ThreadGroup class is implemented.", "target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called.", "name is the thread name. By default, a unique name is constructed of the form \"Thread-N\" where N is a small decimal number.", "args is the argument tuple for the target invocation. Defaults to ().", "kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}.", "If a subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__()) before doing anything else to the thread.", "Method representing the thread's activity.", "You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.", "Bases: tornado.web.Application", "Bases: tornado.web.RequestHandler", "Bases: tornado.web.RequestHandler", "Bases: tornado.web.RequestHandler", "Bases: tornado.web.RequestHandler", "Bases: tornado.web.RequestHandler", "Bases: tornado.websocket.WebSocketHandler", "Invoked when the WebSocket is closed.", "If the connection was closed cleanly and a status code or reason phrase was supplied, these values will be available as the attributes self.close_code and self.close_reason.", "Changed in version 4.0: Added close_code and close_reason attributes.", "Handle incoming messages on the WebSocket", "This method must be overridden.", "Changed in version 4.5: on_message can be a coroutine.", "Invoked when a new WebSocket is opened.", "The arguments to open are extracted from the tornado.web.URLSpec regular expression, just like the arguments to tornado.web.RequestHandler.get.", "open may be a coroutine. on_message will not be called until open has returned.", "Changed in version 5.1: open may be a coroutine.", "Show all figures.", "show blocks by calling mainloop if block is True, or if it is None and we are neither in IPython's %pylab mode, nor in interactive mode."]}, {"name": "backend_wxagg, backend_wxcairo", "path": "backend_wx_api", "type": "backend_wxagg, backend_wxcairo", "text": ["NOTE These backends are not documented here, to avoid adding a dependency to building the docs."]}, {"name": "backends", "path": "index_backend_api", "type": "backends", "text": []}, {"name": "backends.backend_agg.FigureCanvas", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvas", "type": "backend_agg", "text": ["alias of matplotlib.backends.backend_agg.FigureCanvasAgg"]}, {"name": "backends.backend_agg.FigureCanvasAgg", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg", "type": "backend_agg", "text": ["Bases: matplotlib.backend_bases.FigureCanvasBase", "Get the image as a memoryview to the renderer's buffer.", "draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure.", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "Write the figure to a JPEG file.", "The file to write to.", "Additional keyword arguments that are passed to PIL.Image.Image.save when saving the figure.", "Write the figure to a JPEG file.", "The file to write to.", "Additional keyword arguments that are passed to PIL.Image.Image.save when saving the figure.", "Write the figure to a PNG file.", "The file to write to.", "Metadata in the PNG file as key-value pairs of bytes or latin-1 encodable strings. According to the PNG specification, keys must be shorter than 79 chars.", "The PNG specification defines some common keywords that may be used as appropriate:", "Other keywords may be invented for other purposes.", "If 'Software' is not given, an autogenerated value for Matplotlib will be used. This can be removed by setting it to None.", "For more details see the PNG specification.", "Keyword arguments passed to PIL.Image.Image.save.", "If the 'pnginfo' key is present, it completely overrides metadata, including the default 'Software' key.", "Get the image as ARGB bytes.", "draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure.", "Get the image as RGB bytes.", "draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure."]}, {"name": "backends.backend_agg.FigureCanvasAgg.buffer_rgba()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.buffer_rgba", "type": "backend_agg", "text": ["Get the image as a memoryview to the renderer's buffer.", "draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure."]}, {"name": "backends.backend_agg.FigureCanvasAgg.copy_from_bbox()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.copy_from_bbox", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.FigureCanvasAgg.draw()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "type": "backend_agg", "text": ["Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk."]}, {"name": "backends.backend_agg.FigureCanvasAgg.get_renderer()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.get_renderer", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.FigureCanvasAgg.print_jpeg()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpeg", "type": "backend_agg", "text": ["Write the figure to a JPEG file.", "The file to write to.", "Additional keyword arguments that are passed to PIL.Image.Image.save when saving the figure."]}, {"name": "backends.backend_agg.FigureCanvasAgg.print_jpg()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg", "type": "backend_agg", "text": ["Write the figure to a JPEG file.", "The file to write to.", "Additional keyword arguments that are passed to PIL.Image.Image.save when saving the figure."]}, {"name": "backends.backend_agg.FigureCanvasAgg.print_png()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_png", "type": "backend_agg", "text": ["Write the figure to a PNG file.", "The file to write to.", "Metadata in the PNG file as key-value pairs of bytes or latin-1 encodable strings. According to the PNG specification, keys must be shorter than 79 chars.", "The PNG specification defines some common keywords that may be used as appropriate:", "Other keywords may be invented for other purposes.", "If 'Software' is not given, an autogenerated value for Matplotlib will be used. This can be removed by setting it to None.", "For more details see the PNG specification.", "Keyword arguments passed to PIL.Image.Image.save.", "If the 'pnginfo' key is present, it completely overrides metadata, including the default 'Software' key."]}, {"name": "backends.backend_agg.FigureCanvasAgg.print_raw()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_raw", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.FigureCanvasAgg.print_rgba()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_rgba", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.FigureCanvasAgg.print_tif()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_tif", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.FigureCanvasAgg.print_tiff()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_tiff", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.FigureCanvasAgg.print_to_buffer()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.print_to_buffer", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.FigureCanvasAgg.restore_region()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.restore_region", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.FigureCanvasAgg.tostring_argb()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_argb", "type": "backend_agg", "text": ["Get the image as ARGB bytes.", "draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure."]}, {"name": "backends.backend_agg.FigureCanvasAgg.tostring_rgb()", "path": "backend_agg_api#matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "type": "backend_agg", "text": ["Get the image as RGB bytes.", "draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure."]}, {"name": "backends.backend_agg.get_hinting_flag()", "path": "backend_agg_api#matplotlib.backends.backend_agg.get_hinting_flag", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.RendererAgg", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg", "type": "backend_agg", "text": ["Bases: matplotlib.backend_bases.RendererBase", "The renderer handles all the drawing primitives using a graphics context instance that controls the colors/styles", "Draw mathtext using matplotlib.mathtext.", "Draw a Path instance using the given affine transform.", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Return the canvas width and height in display coords.", "[Deprecated]", "Deprecated since version 3.4: ", "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop.", "Return whether image composition by Matplotlib should be skipped.", "Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return not rcParams[\"image.composite_image\"].", "Return whether arbitrary affine transformations in draw_image() are supported (True for most vector backends).", "Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float", "Restore the saved region. If bbox (instance of BboxBase, or its extents) is given, only the region specified by the bbox will be restored. xy (a pair of floats) optionally specifies the new position (the LLC of the original region, not the LLC of the bbox) where the region will be restored.", "Start filtering. It simply create a new canvas (the old one is saved).", "Save the plot in the current canvas as a image and apply the post_processing function.", "# ny, nx, depth = image.shape # image (numpy array) has RGBA channels and has a depth of 4. ... # create a new_image (numpy array of 4 channels, size can be # different). The resulting image may have offsets from # lower-left corner of the original image return new_image, offset_x, offset_y", "The saved renderer is restored and the returned image from post_processing is plotted (using draw_image) on it.", "[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "backends.backend_agg.RendererAgg.buffer_rgba()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.buffer_rgba", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.RendererAgg.clear()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.clear", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.RendererAgg.draw_mathtext()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.draw_mathtext", "type": "backend_agg", "text": ["Draw mathtext using matplotlib.mathtext."]}, {"name": "backends.backend_agg.RendererAgg.draw_path()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.draw_path", "type": "backend_agg", "text": ["Draw a Path instance using the given affine transform."]}, {"name": "backends.backend_agg.RendererAgg.draw_tex()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.draw_tex", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.RendererAgg.draw_text()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.draw_text", "type": "backend_agg", "text": ["Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text."]}, {"name": "backends.backend_agg.RendererAgg.get_canvas_width_height()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.get_canvas_width_height", "type": "backend_agg", "text": ["Return the canvas width and height in display coords."]}, {"name": "backends.backend_agg.RendererAgg.get_content_extents()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.get_content_extents", "type": "backend_agg", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "backends.backend_agg.RendererAgg.get_text_width_height_descent()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.get_text_width_height_descent", "type": "backend_agg", "text": ["Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop."]}, {"name": "backends.backend_agg.RendererAgg.lock", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.lock", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.RendererAgg.option_image_nocomposite()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.option_image_nocomposite", "type": "backend_agg", "text": ["Return whether image composition by Matplotlib should be skipped.", "Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return not rcParams[\"image.composite_image\"]."]}, {"name": "backends.backend_agg.RendererAgg.option_scale_image()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.option_scale_image", "type": "backend_agg", "text": ["Return whether arbitrary affine transformations in draw_image() are supported (True for most vector backends)."]}, {"name": "backends.backend_agg.RendererAgg.points_to_pixels()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.points_to_pixels", "type": "backend_agg", "text": ["Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float"]}, {"name": "backends.backend_agg.RendererAgg.restore_region()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.restore_region", "type": "backend_agg", "text": ["Restore the saved region. If bbox (instance of BboxBase, or its extents) is given, only the region specified by the bbox will be restored. xy (a pair of floats) optionally specifies the new position (the LLC of the original region, not the LLC of the bbox) where the region will be restored."]}, {"name": "backends.backend_agg.RendererAgg.start_filter()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.start_filter", "type": "backend_agg", "text": ["Start filtering. It simply create a new canvas (the old one is saved)."]}, {"name": "backends.backend_agg.RendererAgg.stop_filter()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.stop_filter", "type": "backend_agg", "text": ["Save the plot in the current canvas as a image and apply the post_processing function.", "# ny, nx, depth = image.shape # image (numpy array) has RGBA channels and has a depth of 4. ... # create a new_image (numpy array of 4 channels, size can be # different). The resulting image may have offsets from # lower-left corner of the original image return new_image, offset_x, offset_y", "The saved renderer is restored and the returned image from post_processing is plotted (using draw_image) on it."]}, {"name": "backends.backend_agg.RendererAgg.tostring_argb()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.tostring_argb", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.RendererAgg.tostring_rgb()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.tostring_rgb", "type": "backend_agg", "text": []}, {"name": "backends.backend_agg.RendererAgg.tostring_rgba_minimized()", "path": "backend_agg_api#matplotlib.backends.backend_agg.RendererAgg.tostring_rgba_minimized", "type": "backend_agg", "text": ["[Deprecated]", "Deprecated since version 3.4: "]}, {"name": "backends.backend_cairo.FigureCanvas", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvas", "type": "backend_cairo", "text": ["alias of matplotlib.backends.backend_cairo.FigureCanvasCairo"]}, {"name": "backends.backend_cairo.FigureCanvasCairo", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo", "type": "backend_cairo", "text": ["Bases: matplotlib.backend_bases.FigureCanvasBase"]}, {"name": "backends.backend_cairo.FigureCanvasCairo.copy_from_bbox()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.copy_from_bbox", "type": "backend_cairo", "text": []}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_pdf()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_pdf", "type": "backend_cairo", "text": []}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_png()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_png", "type": "backend_cairo", "text": []}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_ps()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_ps", "type": "backend_cairo", "text": []}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_raw()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_raw", "type": "backend_cairo", "text": []}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_rgba()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_rgba", "type": "backend_cairo", "text": []}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_svg()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_svg", "type": "backend_cairo", "text": []}, {"name": "backends.backend_cairo.FigureCanvasCairo.print_svgz()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.print_svgz", "type": "backend_cairo", "text": []}, {"name": "backends.backend_cairo.FigureCanvasCairo.restore_region()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.FigureCanvasCairo.restore_region", "type": "backend_cairo", "text": []}, {"name": "backends.backend_cairo.GraphicsContextCairo", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo", "type": "backend_cairo", "text": ["Bases: matplotlib.backend_bases.GraphicsContextBase", "Return a tuple of three or four floats from 0-1.", "Restore the graphics context from the stack - needed only for backends that save graphics contexts on a stack.", "Set the alpha value used for blending - not supported on all backends.", "If alpha=None (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, alpha will override them.", "Set whether object should be drawn with antialiased rendering.", "Set how to draw endpoints of lines.", "Set the clip path to a TransformedPath or None.", "Set the clip rectangle to a Bbox or None.", "Set the dash style for the gc.", "The offset (usually 0).", "The on-off sequence as points. None specifies a solid line.", "See p. 107 of to PostScript blue book for more info.", "Set the foreground color.", "If fg is known to be an (r, g, b, a) tuple, isRGBA can be set to True to improve performance.", "Set how to draw connections between line segments.", "Set the linewidth in points."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.get_rgb()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.get_rgb", "type": "backend_cairo", "text": ["Return a tuple of three or four floats from 0-1."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.restore()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.restore", "type": "backend_cairo", "text": ["Restore the graphics context from the stack - needed only for backends that save graphics contexts on a stack."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_alpha()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_alpha", "type": "backend_cairo", "text": ["Set the alpha value used for blending - not supported on all backends.", "If alpha=None (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, alpha will override them."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_antialiased()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_antialiased", "type": "backend_cairo", "text": ["Set whether object should be drawn with antialiased rendering."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_capstyle()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle", "type": "backend_cairo", "text": ["Set how to draw endpoints of lines."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_clip_path()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_path", "type": "backend_cairo", "text": ["Set the clip path to a TransformedPath or None."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_clip_rectangle()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_rectangle", "type": "backend_cairo", "text": ["Set the clip rectangle to a Bbox or None."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_dashes()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes", "type": "backend_cairo", "text": ["Set the dash style for the gc.", "The offset (usually 0).", "The on-off sequence as points. None specifies a solid line.", "See p. 107 of to PostScript blue book for more info."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_foreground()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground", "type": "backend_cairo", "text": ["Set the foreground color.", "If fg is known to be an (r, g, b, a) tuple, isRGBA can be set to True to improve performance."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_joinstyle()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle", "type": "backend_cairo", "text": ["Set how to draw connections between line segments."]}, {"name": "backends.backend_cairo.GraphicsContextCairo.set_linewidth()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.GraphicsContextCairo.set_linewidth", "type": "backend_cairo", "text": ["Set the linewidth in points."]}, {"name": "backends.backend_cairo.RendererCairo", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo", "type": "backend_cairo", "text": ["Bases: matplotlib.backend_bases.RendererBase", "Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).", "Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path.", "Draw a Path instance using the given affine transform.", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Return the canvas width and height in display coords.", "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop.", "Return an instance of a GraphicsContextBase.", "Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float"]}, {"name": "backends.backend_cairo.RendererCairo.draw_image()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.draw_image", "type": "backend_cairo", "text": ["Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform)."]}, {"name": "backends.backend_cairo.RendererCairo.draw_markers()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.draw_markers", "type": "backend_cairo", "text": ["Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path."]}, {"name": "backends.backend_cairo.RendererCairo.draw_path()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.draw_path", "type": "backend_cairo", "text": ["Draw a Path instance using the given affine transform."]}, {"name": "backends.backend_cairo.RendererCairo.draw_text()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.draw_text", "type": "backend_cairo", "text": ["Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text."]}, {"name": "backends.backend_cairo.RendererCairo.get_canvas_width_height()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.get_canvas_width_height", "type": "backend_cairo", "text": ["Return the canvas width and height in display coords."]}, {"name": "backends.backend_cairo.RendererCairo.get_text_width_height_descent()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.get_text_width_height_descent", "type": "backend_cairo", "text": ["Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop."]}, {"name": "backends.backend_cairo.RendererCairo.new_gc()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.new_gc", "type": "backend_cairo", "text": ["Return an instance of a GraphicsContextBase."]}, {"name": "backends.backend_cairo.RendererCairo.points_to_pixels()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels", "type": "backend_cairo", "text": ["Convert points to display units.", "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:", "a float or a numpy array of float"]}, {"name": "backends.backend_cairo.RendererCairo.set_ctx_from_surface()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.set_ctx_from_surface", "type": "backend_cairo", "text": []}, {"name": "backends.backend_cairo.RendererCairo.set_width_height()", "path": "backend_cairo_api#matplotlib.backends.backend_cairo.RendererCairo.set_width_height", "type": "backend_cairo", "text": []}, {"name": "backends.backend_mixed.MixedModeRenderer", "path": "backend_mixed_api#matplotlib.backends.backend_mixed.MixedModeRenderer", "type": "backend_mixed", "text": ["Bases: object", "A helper class to implement a renderer that switches between vector and raster drawing. An example may be a PDF writer, where most things are drawn with PDF vector commands, but some very complex objects, such as quad meshes, are rasterised and then output as images.", "The figure instance.", "The width of the canvas in logical units", "The height of the canvas in logical units", "The dpi of the canvas", "An instance of a subclass of RendererBase that will be used for the vector drawing.", "The renderer class to use for the raster drawing. If not provided, this will use the Agg backend (which is currently the only viable option anyway.)", "Enter \"raster\" mode. All subsequent drawing commands (until stop_rasterizing is called) will be drawn with the raster backend.", "Exit \"raster\" mode. All of the drawing that was done since the last start_rasterizing call will be copied to the vector backend by calling draw_image."]}, {"name": "backends.backend_mixed.MixedModeRenderer.start_rasterizing()", "path": "backend_mixed_api#matplotlib.backends.backend_mixed.MixedModeRenderer.start_rasterizing", "type": "backend_mixed", "text": ["Enter \"raster\" mode. All subsequent drawing commands (until stop_rasterizing is called) will be drawn with the raster backend."]}, {"name": "backends.backend_mixed.MixedModeRenderer.stop_rasterizing()", "path": "backend_mixed_api#matplotlib.backends.backend_mixed.MixedModeRenderer.stop_rasterizing", "type": "backend_mixed", "text": ["Exit \"raster\" mode. All of the drawing that was done since the last start_rasterizing call will be copied to the vector backend by calling draw_image."]}, {"name": "backends.backend_nbagg.CommSocket", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket", "type": "backend_nbagg", "text": ["Bases: object", "Manages the Comm connection between IPython and the browser (client).", "Comms are 2 way, with the CommSocket being able to publish a message via the send_json method, and handle a message with on_message. On the JS side figure.send_message and figure.ws.onmessage do the sending and receiving respectively."]}, {"name": "backends.backend_nbagg.CommSocket.is_open()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket.is_open", "type": "backend_nbagg", "text": []}, {"name": "backends.backend_nbagg.CommSocket.on_close()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket.on_close", "type": "backend_nbagg", "text": []}, {"name": "backends.backend_nbagg.CommSocket.on_message()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket.on_message", "type": "backend_nbagg", "text": []}, {"name": "backends.backend_nbagg.CommSocket.send_binary()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket.send_binary", "type": "backend_nbagg", "text": []}, {"name": "backends.backend_nbagg.CommSocket.send_json()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.CommSocket.send_json", "type": "backend_nbagg", "text": []}, {"name": "backends.backend_nbagg.connection_info()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.connection_info", "type": "backend_nbagg", "text": ["Return a string showing the figure and connection status for the backend.", "This is intended as a diagnostic tool, and not for general use."]}, {"name": "backends.backend_nbagg.FigureCanvas", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureCanvas", "type": "backend_nbagg", "text": ["alias of matplotlib.backends.backend_nbagg.FigureCanvasNbAgg"]}, {"name": "backends.backend_nbagg.FigureCanvasNbAgg", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureCanvasNbAgg", "type": "backend_nbagg", "text": ["Bases: matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore"]}, {"name": "backends.backend_nbagg.FigureManager", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManager", "type": "backend_nbagg", "text": ["alias of matplotlib.backends.backend_nbagg.FigureManagerNbAgg"]}, {"name": "backends.backend_nbagg.FigureManagerNbAgg", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg", "type": "backend_nbagg", "text": ["Bases: matplotlib.backends.backend_webagg_core.FigureManagerWebAgg", "alias of matplotlib.backends.backend_nbagg.NavigationIPy", "Clear up any closed Comms.", "A special method to re-show the figure in the notebook.", "For GUI backends, show the figure window and redraw. For non-GUI backends, raise an exception, unless running headless (i.e. on Linux with an unset DISPLAY); this exception is converted to a warning in Figure.show."]}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.clearup_closed()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.clearup_closed", "type": "backend_nbagg", "text": ["Clear up any closed Comms."]}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.destroy()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.destroy", "type": "backend_nbagg", "text": []}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.display_js()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.display_js", "type": "backend_nbagg", "text": []}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.get_javascript()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.get_javascript", "type": "backend_nbagg", "text": []}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.remove_comm()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.remove_comm", "type": "backend_nbagg", "text": []}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.reshow()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.reshow", "type": "backend_nbagg", "text": ["A special method to re-show the figure in the notebook."]}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.show()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.show", "type": "backend_nbagg", "text": ["For GUI backends, show the figure window and redraw. For non-GUI backends, raise an exception, unless running headless (i.e. on Linux with an unset DISPLAY); this exception is converted to a warning in Figure.show."]}, {"name": "backends.backend_nbagg.FigureManagerNbAgg.ToolbarCls", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.FigureManagerNbAgg.ToolbarCls", "type": "backend_nbagg", "text": ["alias of matplotlib.backends.backend_nbagg.NavigationIPy"]}, {"name": "backends.backend_nbagg.NavigationIPy", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.NavigationIPy", "type": "backend_nbagg", "text": ["Bases: matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg"]}, {"name": "backends.backend_nbagg.NavigationIPy.toolitems", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.NavigationIPy.toolitems", "type": "backend_nbagg", "text": []}, {"name": "backends.backend_nbagg.new_figure_manager_given_figure()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.new_figure_manager_given_figure", "type": "backend_nbagg", "text": ["Create a new figure manager instance for the given figure."]}, {"name": "backends.backend_nbagg.show()", "path": "backend_nbagg_api#matplotlib.backends.backend_nbagg.show", "type": "backend_nbagg", "text": ["Show all figures.", "show blocks by calling mainloop if block is True, or if it is None and we are neither in IPython's %pylab mode, nor in interactive mode."]}, {"name": "backends.backend_pdf.FigureCanvas", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvas", "type": "backend_pdf", "text": ["alias of matplotlib.backends.backend_pdf.FigureCanvasPdf"]}, {"name": "backends.backend_pdf.FigureCanvasPdf", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf", "type": "backend_pdf", "text": ["Bases: matplotlib.backend_bases.FigureCanvasBase", "Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk.", "Return the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png').", "The returned string does not include a period. This method is overridden in backends that only support a single file type."]}, {"name": "backends.backend_pdf.FigureCanvasPdf.draw()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf.draw", "type": "backend_pdf", "text": ["Render the Figure.", "It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk."]}, {"name": "backends.backend_pdf.FigureCanvasPdf.filetypes", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf.filetypes", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.FigureCanvasPdf.fixed_dpi", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf.fixed_dpi", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.FigureCanvasPdf.get_default_filetype()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf.get_default_filetype", "type": "backend_pdf", "text": ["Return the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png').", "The returned string does not include a period. This method is overridden in backends that only support a single file type."]}, {"name": "backends.backend_pdf.FigureCanvasPdf.print_pdf()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.FigureCanvasPdf.print_pdf", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.fill()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.fill", "type": "backend_pdf", "text": ["Make one string from sequence of strings, with whitespace in between.", "The whitespace is chosen to form lines of at most linelen characters, if possible."]}, {"name": "backends.backend_pdf.GraphicsContextPdf", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf", "type": "backend_pdf", "text": ["Bases: matplotlib.backend_bases.GraphicsContextBase", "Set clip rectangle. Calls pop() and push().", "Copy properties of other into self.", "Copy properties of other into self and return PDF commands needed to transform self into other.", "Predicate: does the path need to be filled?", "An optional argument can be used to specify an alternative _fillcolor, as needed by RendererPdf.draw_markers.", "Make sure every pushed graphics state is popped.", "Return the appropriate pdf operator to cause the path to be stroked, filled, or both.", "Predicate: does the path need to be stroked (its outline drawn)? This tests for the various conditions that disable stroking the path, in which case it would presumably be filled."]}, {"name": "backends.backend_pdf.GraphicsContextPdf.alpha_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.alpha_cmd", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.capstyle_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.capstyle_cmd", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.capstyles", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.capstyles", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.clip_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.clip_cmd", "type": "backend_pdf", "text": ["Set clip rectangle. Calls pop() and push()."]}, {"name": "backends.backend_pdf.GraphicsContextPdf.commands", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.commands", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.copy_properties()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.copy_properties", "type": "backend_pdf", "text": ["Copy properties of other into self."]}, {"name": "backends.backend_pdf.GraphicsContextPdf.dash_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.dash_cmd", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.delta()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.delta", "type": "backend_pdf", "text": ["Copy properties of other into self and return PDF commands needed to transform self into other."]}, {"name": "backends.backend_pdf.GraphicsContextPdf.fill()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.fill", "type": "backend_pdf", "text": ["Predicate: does the path need to be filled?", "An optional argument can be used to specify an alternative _fillcolor, as needed by RendererPdf.draw_markers."]}, {"name": "backends.backend_pdf.GraphicsContextPdf.fillcolor_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.fillcolor_cmd", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.finalize()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.finalize", "type": "backend_pdf", "text": ["Make sure every pushed graphics state is popped."]}, {"name": "backends.backend_pdf.GraphicsContextPdf.hatch_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.hatch_cmd", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.joinstyle_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.joinstyle_cmd", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.joinstyles", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.joinstyles", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.linewidth_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.linewidth_cmd", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.paint()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.paint", "type": "backend_pdf", "text": ["Return the appropriate pdf operator to cause the path to be stroked, filled, or both."]}, {"name": "backends.backend_pdf.GraphicsContextPdf.pop()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.pop", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.push()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.push", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.rgb_cmd()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.rgb_cmd", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.GraphicsContextPdf.stroke()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.GraphicsContextPdf.stroke", "type": "backend_pdf", "text": ["Predicate: does the path need to be stroked (its outline drawn)? This tests for the various conditions that disable stroking the path, in which case it would presumably be filled."]}, {"name": "backends.backend_pdf.Name", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Name", "type": "backend_pdf", "text": ["Bases: object", "PDF name object."]}, {"name": "backends.backend_pdf.Name.hexify()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Name.hexify", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Name.name", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Name.name", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Name.pdfRepr()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Name.pdfRepr", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op", "type": "backend_pdf", "text": ["Bases: matplotlib.backends.backend_pdf.Operator, enum.Enum", "An enumeration.", "Return the PDF operator to paint a path.", "Fill the path with the fill color.", "Stroke the outline of the path with the line color."]}, {"name": "backends.backend_pdf.Op.begin_text", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.begin_text", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.clip", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.clip", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.close_fill_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.close_fill_stroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.close_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.close_stroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.closepath", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.closepath", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.concat_matrix", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.concat_matrix", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.curveto", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.curveto", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.end_text", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.end_text", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.endpath", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.endpath", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.fill", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.fill", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.fill_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.fill_stroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.grestore", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.grestore", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.gsave", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.gsave", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.lineto", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.lineto", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.moveto", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.moveto", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.op", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.op", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.paint_path()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.paint_path", "type": "backend_pdf", "text": ["Return the PDF operator to paint a path.", "Fill the path with the fill color.", "Stroke the outline of the path with the line color."]}, {"name": "backends.backend_pdf.Op.rectangle", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.rectangle", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.selectfont", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.selectfont", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setcolor_nonstroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setcolor_nonstroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setcolor_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setcolor_stroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setcolorspace_nonstroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setcolorspace_nonstroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setcolorspace_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setcolorspace_stroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setdash", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setdash", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setgray_nonstroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setgray_nonstroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setgray_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setgray_stroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setgstate", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setgstate", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setlinecap", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setlinecap", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setlinejoin", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setlinejoin", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setlinewidth", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setlinewidth", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setrgb_nonstroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setrgb_nonstroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.setrgb_stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.setrgb_stroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.shading", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.shading", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.show", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.show", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.showkern", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.showkern", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.stroke", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.stroke", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.textmatrix", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.textmatrix", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.textpos", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.textpos", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Op.use_xobject", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Op.use_xobject", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Operator", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Operator", "type": "backend_pdf", "text": ["Bases: object", "PDF operator object."]}, {"name": "backends.backend_pdf.Operator.op", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Operator.op", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Operator.pdfRepr()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Operator.pdfRepr", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile", "type": "backend_pdf", "text": ["Bases: object", "PDF file object.", "Output target; if a string, a file will be opened for writing.", "Information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary'), e.g.: {'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}.", "The standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator', 'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been predefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed by setting them to None.", "Add a Gouraud triangle shading.", "Triangle vertices, shape (n, 3, 2) where n = number of triangles, 3 = vertices, 2 = x, y.", "Vertex colors, shape (n, 3, 1) or (n, 3, 4) as with points, but last dimension is either (gray,) or (r, g, b, alpha).", "Return name of an ExtGState that sets alpha to the given value.", "Flush all buffers and free all resources.", "Given a dvi font object, return a name suitable for Op.selectfont. This registers the font information in self.dviFontInfo if not yet registered.", "Embed the TTF font from the named file into the document.", "Write out the various deferred objects and the pdf end matter.", "Select a font based on fontprop and return a name suitable for Op.selectfont. If fontprop is a string, it will be interpreted as the filename of the font.", "Return name of an image XObject representing the given image.", "Return name of a marker XObject representing the given path.", "Reserve an ID for an indirect object.", "The name is used for debugging in case we forget to print out the object with writeObject.", "Write out the info dictionary, checking it for good form", "Write out the PDF trailer.", "Write out the xref table."]}, {"name": "backends.backend_pdf.PdfFile.addGouraudTriangles()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles", "type": "backend_pdf", "text": ["Add a Gouraud triangle shading.", "Triangle vertices, shape (n, 3, 2) where n = number of triangles, 3 = vertices, 2 = x, y.", "Vertex colors, shape (n, 3, 1) or (n, 3, 4) as with points, but last dimension is either (gray,) or (r, g, b, alpha)."]}, {"name": "backends.backend_pdf.PdfFile.alphaState()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.alphaState", "type": "backend_pdf", "text": ["Return name of an ExtGState that sets alpha to the given value."]}, {"name": "backends.backend_pdf.PdfFile.beginStream()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.beginStream", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.close()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.close", "type": "backend_pdf", "text": ["Flush all buffers and free all resources."]}, {"name": "backends.backend_pdf.PdfFile.createType1Descriptor()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.createType1Descriptor", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.dviFontName()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.dviFontName", "type": "backend_pdf", "text": ["Given a dvi font object, return a name suitable for Op.selectfont. This registers the font information in self.dviFontInfo if not yet registered."]}, {"name": "backends.backend_pdf.PdfFile.embedTTF()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.embedTTF", "type": "backend_pdf", "text": ["Embed the TTF font from the named file into the document."]}, {"name": "backends.backend_pdf.PdfFile.endStream()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.endStream", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.finalize()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.finalize", "type": "backend_pdf", "text": ["Write out the various deferred objects and the pdf end matter."]}, {"name": "backends.backend_pdf.PdfFile.fontName()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.fontName", "type": "backend_pdf", "text": ["Select a font based on fontprop and return a name suitable for Op.selectfont. If fontprop is a string, it will be interpreted as the filename of the font."]}, {"name": "backends.backend_pdf.PdfFile.hatchPattern()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.hatchPattern", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.imageObject()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.imageObject", "type": "backend_pdf", "text": ["Return name of an image XObject representing the given image."]}, {"name": "backends.backend_pdf.PdfFile.markerObject()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.markerObject", "type": "backend_pdf", "text": ["Return name of a marker XObject representing the given path."]}, {"name": "backends.backend_pdf.PdfFile.newPage()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.newPage", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.newTextnote()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.newTextnote", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.output()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.output", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.pathCollectionObject()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.pathCollectionObject", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.pathOperations()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.pathOperations", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.recordXref()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.recordXref", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.reserveObject()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.reserveObject", "type": "backend_pdf", "text": ["Reserve an ID for an indirect object.", "The name is used for debugging in case we forget to print out the object with writeObject."]}, {"name": "backends.backend_pdf.PdfFile.write()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.write", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.writeExtGSTates()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writeExtGSTates", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.writeFonts()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writeFonts", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.writeGouraudTriangles()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writeGouraudTriangles", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.writeHatches()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writeHatches", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.writeImages()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writeImages", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.writeInfoDict()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writeInfoDict", "type": "backend_pdf", "text": ["Write out the info dictionary, checking it for good form"]}, {"name": "backends.backend_pdf.PdfFile.writeMarkers()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writeMarkers", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.writeObject()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writeObject", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.writePath()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writePath", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.writePathCollectionTemplates()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writePathCollectionTemplates", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfFile.writeTrailer()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writeTrailer", "type": "backend_pdf", "text": ["Write out the PDF trailer."]}, {"name": "backends.backend_pdf.PdfFile.writeXref()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfFile.writeXref", "type": "backend_pdf", "text": ["Write out the xref table."]}, {"name": "backends.backend_pdf.PdfPages", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfPages", "type": "backend_pdf", "text": ["Bases: object", "A multi-page PDF file.", "In reality PdfPages is a thin wrapper around PdfFile, in order to avoid confusion when using savefig and forgetting the format argument.", "Create a new PdfPages object.", "Plots using PdfPages.savefig will be written to a file at this location. The file is opened at once and any older file with the same name is overwritten.", "If set to False, then empty pdf files will be deleted automatically when closed.", "Information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary'), e.g.: {'Creator': 'My software', 'Author': 'Me', 'Title': 'Awesome'}.", "The standard keys are 'Title', 'Author', 'Subject', 'Keywords', 'Creator', 'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values have been predefined for 'Creator', 'Producer' and 'CreationDate'. They can be removed by setting them to None.", "Add a new text note to the page to be saved next. The optional positionRect specifies the position of the new note on the page. It is outside the page per default to make sure it is invisible on printouts.", "Finalize this object, making the underlying file a complete PDF file.", "Return the current number of pages in the multipage pdf file.", "Return a modifiable information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary').", "Save a Figure to this file as a new page.", "Any other keyword arguments are passed to savefig.", "The figure, or index of the figure, that is saved to the file."]}, {"name": "backends.backend_pdf.PdfPages.attach_note()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfPages.attach_note", "type": "backend_pdf", "text": ["Add a new text note to the page to be saved next. The optional positionRect specifies the position of the new note on the page. It is outside the page per default to make sure it is invisible on printouts."]}, {"name": "backends.backend_pdf.PdfPages.close()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfPages.close", "type": "backend_pdf", "text": ["Finalize this object, making the underlying file a complete PDF file."]}, {"name": "backends.backend_pdf.PdfPages.get_pagecount()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfPages.get_pagecount", "type": "backend_pdf", "text": ["Return the current number of pages in the multipage pdf file."]}, {"name": "backends.backend_pdf.PdfPages.infodict()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfPages.infodict", "type": "backend_pdf", "text": ["Return a modifiable information dictionary object (see PDF reference section 10.2.1 'Document Information Dictionary')."]}, {"name": "backends.backend_pdf.PdfPages.keep_empty", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfPages.keep_empty", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.PdfPages.savefig()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.PdfPages.savefig", "type": "backend_pdf", "text": ["Save a Figure to this file as a new page.", "Any other keyword arguments are passed to savefig.", "The figure, or index of the figure, that is saved to the file."]}, {"name": "backends.backend_pdf.pdfRepr()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.pdfRepr", "type": "backend_pdf", "text": ["Map Python objects to PDF syntax."]}, {"name": "backends.backend_pdf.Reference", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Reference", "type": "backend_pdf", "text": ["Bases: object", "PDF reference object.", "Use PdfFile.reserveObject() to create References."]}, {"name": "backends.backend_pdf.Reference.pdfRepr()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Reference.pdfRepr", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Reference.write()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Reference.write", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.RendererPdf", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf", "type": "backend_pdf", "text": ["Bases: matplotlib.backends._backend_pdf_ps.RendererPDFPSBase", "Draw a Gouraud-shaded triangle.", "The graphics context.", "Array of (x, y) points for the triangle.", "RGBA colors for each point of the triangle.", "An affine transform to apply to the points.", "Draw a series of Gouraud triangles.", "Array of N (x, y) points for the triangles.", "Array of N RGBA colors for each point of the triangles.", "An affine transform to apply to the points.", "Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).", "Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path.", "Draw a Path instance using the given affine transform.", "Draw a collection of paths selecting drawing properties from the lists facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a list of offsets to apply to each of the paths. The offsets in offsets are first transformed by offsetTrans before being applied.", "offset_position is unused now, but the argument is kept for backwards compatibility.", "This provides a fallback implementation of draw_path_collection() that makes multiple calls to draw_path(). Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods _iter_collection_raw_paths() and _iter_collection() are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of draw_path_collection() can be made globally.", "Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text.", "Get the factor by which to magnify images passed to draw_image(). Allows a backend to have images at a different resolution to other artists.", "Return an instance of a GraphicsContextBase."]}, {"name": "backends.backend_pdf.RendererPdf.check_gc()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.check_gc", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.RendererPdf.draw_gouraud_triangle()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle", "type": "backend_pdf", "text": ["Draw a Gouraud-shaded triangle.", "The graphics context.", "Array of (x, y) points for the triangle.", "RGBA colors for each point of the triangle.", "An affine transform to apply to the points."]}, {"name": "backends.backend_pdf.RendererPdf.draw_gouraud_triangles()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles", "type": "backend_pdf", "text": ["Draw a series of Gouraud triangles.", "Array of N (x, y) points for the triangles.", "Array of N RGBA colors for each point of the triangles.", "An affine transform to apply to the points."]}, {"name": "backends.backend_pdf.RendererPdf.draw_image()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.draw_image", "type": "backend_pdf", "text": ["Draw an RGBA image.", "A graphics context with clipping information.", "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.", "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.", "An array of RGBA pixels.", "If and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform)."]}, {"name": "backends.backend_pdf.RendererPdf.draw_markers()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.draw_markers", "type": "backend_pdf", "text": ["Draw a marker at each of path's vertices (excluding control points).", "This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.", "The graphics context.", "An affine transform applied to the marker.", "An affine transform applied to the path."]}, {"name": "backends.backend_pdf.RendererPdf.draw_mathtext()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.draw_mathtext", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.RendererPdf.draw_path()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.draw_path", "type": "backend_pdf", "text": ["Draw a Path instance using the given affine transform."]}, {"name": "backends.backend_pdf.RendererPdf.draw_path_collection()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection", "type": "backend_pdf", "text": ["Draw a collection of paths selecting drawing properties from the lists facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a list of offsets to apply to each of the paths. The offsets in offsets are first transformed by offsetTrans before being applied.", "offset_position is unused now, but the argument is kept for backwards compatibility.", "This provides a fallback implementation of draw_path_collection() that makes multiple calls to draw_path(). Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods _iter_collection_raw_paths() and _iter_collection() are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of draw_path_collection() can be made globally."]}, {"name": "backends.backend_pdf.RendererPdf.draw_tex()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.draw_tex", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.RendererPdf.draw_text()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.draw_text", "type": "backend_pdf", "text": ["Draw the text instance.", "The graphics context.", "The x location of the text in display coords.", "The y location of the text baseline in display coords.", "The text string.", "The font properties.", "The rotation angle in degrees anti-clockwise.", "The original text object to be rendered.", "Note for backend implementers:", "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:", "to if 1, and then the actual bounding box will be plotted along with your text."]}, {"name": "backends.backend_pdf.RendererPdf.encode_string()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.encode_string", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.RendererPdf.finalize()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.finalize", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.RendererPdf.get_image_magnification()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.get_image_magnification", "type": "backend_pdf", "text": ["Get the factor by which to magnify images passed to draw_image(). Allows a backend to have images at a different resolution to other artists."]}, {"name": "backends.backend_pdf.RendererPdf.new_gc()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.RendererPdf.new_gc", "type": "backend_pdf", "text": ["Return an instance of a GraphicsContextBase."]}, {"name": "backends.backend_pdf.Stream", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Stream", "type": "backend_pdf", "text": ["Bases: object", "PDF stream object.", "This has no pdfRepr method. Instead, call begin(), then output the contents of the stream by calling write(), and finally call end().", "Object id of the stream.", "An unused Reference object for the length of the stream; None means to use a memory buffer so the length can be inlined.", "The underlying object to write the stream to.", "Extra key-value pairs to include in the stream header.", "If the data is already png encoded, the decode parameters.", "Finalize stream.", "Write some data on the stream."]}, {"name": "backends.backend_pdf.Stream.compressobj", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Stream.compressobj", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Stream.end()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Stream.end", "type": "backend_pdf", "text": ["Finalize stream."]}, {"name": "backends.backend_pdf.Stream.extra", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Stream.extra", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Stream.file", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Stream.file", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Stream.id", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Stream.id", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Stream.len", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Stream.len", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Stream.pdfFile", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Stream.pdfFile", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Stream.pos", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Stream.pos", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pdf.Stream.write()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Stream.write", "type": "backend_pdf", "text": ["Write some data on the stream."]}, {"name": "backends.backend_pdf.Verbatim", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Verbatim", "type": "backend_pdf", "text": ["Bases: object", "Store verbatim PDF command content for later inclusion in the stream."]}, {"name": "backends.backend_pdf.Verbatim.pdfRepr()", "path": "backend_pdf_api#matplotlib.backends.backend_pdf.Verbatim.pdfRepr", "type": "backend_pdf", "text": []}, {"name": "backends.backend_pgf.common_texification()", "path": "backend_pgf_api#matplotlib.backends.backend_pgf.common_texificat