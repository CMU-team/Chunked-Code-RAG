[{"name": "Admin actions", "path": "ref/contrib/admin/actions", "type": "API", "text": ["The basic workflow of Django\u2019s admin is, in a nutshell, \u201cselect an object, then change it.\u201d This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious.", "In these cases, Django\u2019s admin lets you write and register \u201cactions\u201d \u2013 functions that get called with a list of objects selected on the change list page.", "If you look at any change list in the admin, you\u2019ll see this feature in action; Django ships with a \u201cdelete selected objects\u201d action available to all models. For example, here\u2019s the user module from Django\u2019s built-in django.contrib.auth app:", "Warning", "The \u201cdelete selected objects\u201d action uses QuerySet.delete() for efficiency reasons, which has an important caveat: your model\u2019s delete() method will not be called.", "If you wish to override this behavior, you can override ModelAdmin.delete_queryset() or write a custom action which does deletion in your preferred manner \u2013 for example, by calling Model.delete() for each of the selected items.", "For more background on bulk deletion, see the documentation on object deletion.", "Read on to find out how to add your own actions to this list.", "The easiest way to explain actions is by example, so let\u2019s dive in.", "A common use case for admin actions is the bulk updating of a model. Imagine a news application with an Article model:", "A common task we might perform with a model like this is to update an article\u2019s status from \u201cdraft\u201d to \u201cpublished\u201d. We could easily do this in the admin one article at a time, but if we wanted to bulk-publish a group of articles, it\u2019d be tedious. So, let\u2019s write an action that lets us change an article\u2019s status to \u201cpublished.\u201d", "First, we\u2019ll need to write a function that gets called when the action is triggered from the admin. Action functions are regular functions that take three arguments:", "Our publish-these-articles function won\u2019t need the ModelAdmin or the request object, but we will use the queryset:", "Note", "For the best performance, we\u2019re using the queryset\u2019s update method. Other types of actions might need to deal with each object individually; in these cases we\u2019d iterate over the queryset:", "That\u2019s actually all there is to writing an action! However, we\u2019ll take one more optional-but-useful step and give the action a \u201cnice\u201d title in the admin. By default, this action would appear in the action list as \u201cMake published\u201d \u2013 the function name, with underscores replaced by spaces. That\u2019s fine, but we can provide a better, more human-friendly name by using the action() decorator on the make_published function:", "Note", "This might look familiar; the admin\u2019s list_display option uses a similar technique with the display() decorator to provide human-readable descriptions for callback functions registered there, too.", "The description argument to the action() decorator is equivalent to setting the short_description attribute on the action function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.", "Next, we\u2019ll need to inform our ModelAdmin of the action. This works just like any other configuration option. So, the complete admin.py with the action and its registration would look like:", "That code will give us an admin change list that looks something like this:", "That\u2019s really all there is to it! If you\u2019re itching to write your own actions, you now know enough to get started. The rest of this document covers more advanced techniques.", "If there are foreseeable error conditions that may occur while running your action, you should gracefully inform the user of the problem. This means handling exceptions and using django.contrib.admin.ModelAdmin.message_user() to display a user friendly description of the problem in the response.", "There\u2019s a couple of extra options and possibilities you can exploit for more advanced options.", "The example above shows the make_published action defined as a function. That\u2019s perfectly fine, but it\u2019s not perfect from a code design point of view: since the action is tightly coupled to the Article object, it makes sense to hook the action to the ArticleAdmin object itself.", "You can do it like this:", "Notice first that we\u2019ve moved make_published into a method and renamed the modeladmin parameter to self, and second that we\u2019ve now put the string 'make_published' in actions instead of a direct function reference. This tells the ModelAdmin to look up the action as a method.", "Defining actions as methods gives the action more idiomatic access to the ModelAdmin itself, allowing the action to call any of the methods provided by the admin.", "For example, we can use self to flash a message to the user informing them that the action was successful:", "This make the action match what the admin itself does after successfully performing an action:", "By default, after an action is performed the user is redirected back to the original change list page. However, some actions, especially more complex ones, will need to return intermediate pages. For example, the built-in delete action asks for confirmation before deleting the selected objects.", "To provide an intermediary page, return an HttpResponse (or subclass) from your action. For example, you might write an export function that uses Django\u2019s serialization functions to dump some selected objects as JSON:", "Generally, something like the above isn\u2019t considered a great idea. Most of the time, the best practice will be to return an HttpResponseRedirect and redirect the user to a view you\u2019ve written, passing the list of selected objects in the GET query string. This allows you to provide complex interaction logic on the intermediary pages. For example, if you wanted to provide a more complete export function, you\u2019d want to let the user choose a format, and possibly a list of fields to include in the export. The best thing to do would be to write a small action that redirects to your custom export view:", "As you can see, the action is rather short; all the complex logic would belong in your export view. This would need to deal with objects of any type, hence the business with the ContentType.", "Writing this view is left as an exercise to the reader.", "Some actions are best if they\u2019re made available to any object in the admin site \u2013 the export action defined above would be a good candidate. You can make an action globally available using AdminSite.add_action(). For example:", "This makes the export_selected_objects action globally available as an action named \u201cexport_selected_objects\u201d. You can explicitly give the action a name \u2013 good if you later want to programmatically remove the action \u2013 by passing a second argument to AdminSite.add_action():", "Sometimes you need to disable certain actions \u2013 especially those registered site-wide \u2013 for particular objects. There\u2019s a few ways you can disable actions:", "If you need to disable a site-wide action you can call AdminSite.disable_action().", "For example, you can use this method to remove the built-in \u201cdelete selected objects\u201d action:", "Once you\u2019ve done the above, that action will no longer be available site-wide.", "If, however, you need to re-enable a globally-disabled action for one particular model, list it explicitly in your ModelAdmin.actions list:", "If you want no bulk actions available for a given ModelAdmin, set ModelAdmin.actions to None:", "This tells the ModelAdmin to not display or allow any actions, including any site-wide actions.", "Finally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding ModelAdmin.get_actions().", "This returns a dictionary of actions allowed. The keys are action names, and the values are (function, name, short_description) tuples.", "For example, if you only want users whose names begin with \u2018J\u2019 to be able to delete objects in bulk:", "Actions may limit their availability to users with specific permissions by wrapping the action function with the action() decorator and passing the permissions argument:", "The make_published() action will only be available to users that pass the ModelAdmin.has_change_permission() check.", "If permissions has more than one permission, the action will be available as long as the user passes at least one of the checks.", "Available values for permissions and the corresponding method checks are:", "You can specify any other value as long as you implement a corresponding has_<value>_permission(self, request) method on the ModelAdmin.", "For example:", "The permissions argument to the action() decorator is equivalent to setting the allowed_permissions attribute on the action function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.", "This decorator can be used for setting specific attributes on custom action functions that can be used with actions:", "This is equivalent to setting some attributes (with the original, longer names) on the function directly:", "Use of this decorator is not compulsory to make an action function, but it can be useful to use it without arguments as a marker in your source to identify the purpose of the function:", "In this case it will add no attributes to the function."]}, {"name": "admin.action()", "path": "ref/contrib/admin/actions#django.contrib.admin.action", "type": "django.contrib.admin", "text": ["This decorator can be used for setting specific attributes on custom action functions that can be used with actions:", "This is equivalent to setting some attributes (with the original, longer names) on the function directly:", "Use of this decorator is not compulsory to make an action function, but it can be useful to use it without arguments as a marker in your source to identify the purpose of the function:", "In this case it will add no attributes to the function."]}, {"name": "admin.AdminSite", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite", "type": "django.contrib.admin", "text": ["A Django administrative site is represented by an instance of django.contrib.admin.sites.AdminSite; by default, an instance of this class is created as django.contrib.admin.site and you can register your models and ModelAdmin instances with it.", "If you want to customize the default admin site, you can override it.", "When constructing an instance of an AdminSite, you can provide a unique instance name using the name argument to the constructor. This instance name is used to identify the instance, especially when reversing admin URLs. If no instance name is provided, a default instance name of admin will be used. See Customizing the AdminSite class for an example of customizing the AdminSite class."]}, {"name": "admin.AdminSite.add_action()", "path": "ref/contrib/admin/actions#django.contrib.admin.AdminSite.add_action", "type": "django.contrib.admin", "text": ["Some actions are best if they\u2019re made available to any object in the admin site \u2013 the export action defined above would be a good candidate. You can make an action globally available using AdminSite.add_action(). For example:", "This makes the export_selected_objects action globally available as an action named \u201cexport_selected_objects\u201d. You can explicitly give the action a name \u2013 good if you later want to programmatically remove the action \u2013 by passing a second argument to AdminSite.add_action():"]}, {"name": "admin.AdminSite.app_index_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.app_index_template", "type": "django.contrib.admin", "text": ["Path to a custom template that will be used by the admin site app index view."]}, {"name": "admin.AdminSite.disable_action()", "path": "ref/contrib/admin/actions#django.contrib.admin.AdminSite.disable_action", "type": "django.contrib.admin", "text": ["If you need to disable a site-wide action you can call AdminSite.disable_action().", "For example, you can use this method to remove the built-in \u201cdelete selected objects\u201d action:", "Once you\u2019ve done the above, that action will no longer be available site-wide.", "If, however, you need to re-enable a globally-disabled action for one particular model, list it explicitly in your ModelAdmin.actions list:"]}, {"name": "admin.AdminSite.each_context()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.each_context", "type": "django.contrib.admin", "text": ["Returns a dictionary of variables to put in the template context for every page in the admin site.", "Includes the following variables and values by default:", "available_apps: a list of applications from the application registry available for the current user. Each entry in the list is a dict representing an application with the following keys:", "Each model is a dict with the following keys:", "The model variable for each model was added."]}, {"name": "admin.AdminSite.empty_value_display", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.empty_value_display", "type": "django.contrib.admin", "text": ["The string to use for displaying empty values in the admin site\u2019s change list. Defaults to a dash. The value can also be overridden on a per ModelAdmin basis and on a custom field within a ModelAdmin by setting an empty_value_display attribute on the field. See ModelAdmin.empty_value_display for examples."]}, {"name": "admin.AdminSite.enable_nav_sidebar", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.enable_nav_sidebar", "type": "django.contrib.admin", "text": ["A boolean value that determines whether to show the navigation sidebar on larger screens. By default, it is set to True."]}, {"name": "admin.AdminSite.final_catch_all_view", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.final_catch_all_view", "type": "django.contrib.admin", "text": ["A boolean value that determines whether to add a final catch-all view to the admin that redirects unauthenticated users to the login page. By default, it is set to True.", "Warning", "Setting this to False is not recommended as the view protects against a potential model enumeration privacy issue."]}, {"name": "admin.AdminSite.has_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.has_permission", "type": "django.contrib.admin", "text": ["Returns True if the user for the given HttpRequest has permission to view at least one page in the admin site. Defaults to requiring both User.is_active and User.is_staff to be True."]}, {"name": "admin.AdminSite.index_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.index_template", "type": "django.contrib.admin", "text": ["Path to a custom template that will be used by the admin site main index view."]}, {"name": "admin.AdminSite.index_title", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.index_title", "type": "django.contrib.admin", "text": ["The text to put at the top of the admin index page (a string). By default, this is \u201cSite administration\u201d."]}, {"name": "admin.AdminSite.login_form", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.login_form", "type": "django.contrib.admin", "text": ["Subclass of AuthenticationForm that will be used by the admin site login view."]}, {"name": "admin.AdminSite.login_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.login_template", "type": "django.contrib.admin", "text": ["Path to a custom template that will be used by the admin site login view."]}, {"name": "admin.AdminSite.logout_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.logout_template", "type": "django.contrib.admin", "text": ["Path to a custom template that will be used by the admin site logout view."]}, {"name": "admin.AdminSite.password_change_done_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.password_change_done_template", "type": "django.contrib.admin", "text": ["Path to a custom template that will be used by the admin site password change done view."]}, {"name": "admin.AdminSite.password_change_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.password_change_template", "type": "django.contrib.admin", "text": ["Path to a custom template that will be used by the admin site password change view."]}, {"name": "admin.AdminSite.register()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.register", "type": "django.contrib.admin", "text": ["Registers the given model class (or iterable of classes) with the given admin_class. admin_class defaults to ModelAdmin (the default admin options). If keyword arguments are given \u2013 e.g. list_display \u2013 they\u2019ll be applied as options to the admin class.", "Raises ImproperlyConfigured if a model is abstract. and django.contrib.admin.sites.AlreadyRegistered if a model is already registered."]}, {"name": "admin.AdminSite.site_header", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.site_header", "type": "django.contrib.admin", "text": ["The text to put at the top of each admin page, as an <h1> (a string). By default, this is \u201cDjango administration\u201d."]}, {"name": "admin.AdminSite.site_title", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.site_title", "type": "django.contrib.admin", "text": ["The text to put at the end of each admin page\u2019s <title> (a string). By default, this is \u201cDjango site admin\u201d."]}, {"name": "admin.AdminSite.site_url", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.site_url", "type": "django.contrib.admin", "text": ["The URL for the \u201cView site\u201d link at the top of each admin page. By default, site_url is /. Set it to None to remove the link.", "For sites running on a subpath, the each_context() method checks if the current request has request.META['SCRIPT_NAME'] set and uses that value if site_url isn\u2019t set to something other than /."]}, {"name": "admin.AdminSite.unregister()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.unregister", "type": "django.contrib.admin", "text": ["Unregisters the given model class (or iterable of classes).", "Raises django.contrib.admin.sites.NotRegistered if a model isn\u2019t already registered."]}, {"name": "admin.apps.AdminConfig", "path": "ref/contrib/admin/index#django.contrib.admin.apps.AdminConfig", "type": "django.contrib.admin", "text": ["This is the default AppConfig class for the admin. It calls autodiscover() when Django starts."]}, {"name": "admin.apps.SimpleAdminConfig", "path": "ref/contrib/admin/index#django.contrib.admin.apps.SimpleAdminConfig", "type": "django.contrib.admin", "text": ["This class works like AdminConfig, except it doesn\u2019t call autodiscover().", "A dotted import path to the default admin site\u2019s class or to a callable that returns a site instance. Defaults to 'django.contrib.admin.sites.AdminSite'. See Overriding the default admin site for usage."]}, {"name": "admin.apps.SimpleAdminConfig.default_site", "path": "ref/contrib/admin/index#django.contrib.admin.apps.SimpleAdminConfig.default_site", "type": "django.contrib.admin", "text": ["A dotted import path to the default admin site\u2019s class or to a callable that returns a site instance. Defaults to 'django.contrib.admin.sites.AdminSite'. See Overriding the default admin site for usage."]}, {"name": "admin.autodiscover()", "path": "ref/contrib/admin/index#django.contrib.admin.autodiscover", "type": "django.contrib.admin", "text": ["This function attempts to import an admin module in each installed application. Such modules are expected to register models with the admin.", "Typically you won\u2019t need to call this function directly as AdminConfig calls it when Django starts."]}, {"name": "admin.display()", "path": "ref/contrib/admin/index#django.contrib.admin.display", "type": "django.contrib.admin", "text": ["This decorator can be used for setting specific attributes on custom display functions that can be used with list_display or readonly_fields:", "This is equivalent to setting some attributes (with the original, longer names) on the function directly:", "Also note that the empty_value decorator parameter maps to the empty_value_display attribute assigned directly to the function. It cannot be used in conjunction with boolean \u2013 they are mutually exclusive.", "Use of this decorator is not compulsory to make a display function, but it can be useful to use it without arguments as a marker in your source to identify the purpose of the function:", "In this case it will add no attributes to the function."]}, {"name": "admin.InlineModelAdmin", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin", "type": "django.contrib.admin", "text": []}, {"name": "admin.InlineModelAdmin.can_delete", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.can_delete", "type": "django.contrib.admin", "text": ["Specifies whether or not inline objects can be deleted in the inline. Defaults to True."]}, {"name": "admin.InlineModelAdmin.classes", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.classes", "type": "django.contrib.admin", "text": ["A list or tuple containing extra CSS classes to apply to the fieldset that is rendered for the inlines. Defaults to None. As with classes configured in fieldsets, inlines with a collapse class will be initially collapsed and their header will have a small \u201cshow\u201d link."]}, {"name": "admin.InlineModelAdmin.extra", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.extra", "type": "django.contrib.admin", "text": ["This controls the number of extra forms the formset will display in addition to the initial forms. Defaults to 3. See the formsets documentation for more information.", "For users with JavaScript-enabled browsers, an \u201cAdd another\u201d link is provided to enable any number of additional inlines to be added in addition to those provided as a result of the extra argument.", "The dynamic link will not appear if the number of currently displayed forms exceeds max_num, or if the user does not have JavaScript enabled.", "InlineModelAdmin.get_extra() also allows you to customize the number of extra forms."]}, {"name": "admin.InlineModelAdmin.fk_name", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.fk_name", "type": "django.contrib.admin", "text": ["The name of the foreign key on the model. In most cases this will be dealt with automatically, but fk_name must be specified explicitly if there are more than one foreign key to the same parent model."]}, {"name": "admin.InlineModelAdmin.form", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.form", "type": "django.contrib.admin", "text": ["The value for form defaults to ModelForm. This is what is passed through to inlineformset_factory() when creating the formset for this inline."]}, {"name": "admin.InlineModelAdmin.formset", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.formset", "type": "django.contrib.admin", "text": ["This defaults to BaseInlineFormSet. Using your own formset can give you many possibilities of customization. Inlines are built around model formsets."]}, {"name": "admin.InlineModelAdmin.get_extra()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_extra", "type": "django.contrib.admin", "text": ["Returns the number of extra inline forms to use. By default, returns the InlineModelAdmin.extra attribute.", "Override this method to programmatically determine the number of extra inline forms. For example, this may be based on the model instance (passed as the keyword argument obj):"]}, {"name": "admin.InlineModelAdmin.get_formset()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_formset", "type": "django.contrib.admin", "text": ["Returns a BaseInlineFormSet class for use in admin add/change views. obj is the parent object being edited or None when adding a new parent. See the example for ModelAdmin.get_formsets_with_inlines."]}, {"name": "admin.InlineModelAdmin.get_max_num()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_max_num", "type": "django.contrib.admin", "text": ["Returns the maximum number of extra inline forms to use. By default, returns the InlineModelAdmin.max_num attribute.", "Override this method to programmatically determine the maximum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument obj):"]}, {"name": "admin.InlineModelAdmin.get_min_num()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_min_num", "type": "django.contrib.admin", "text": ["Returns the minimum number of inline forms to use. By default, returns the InlineModelAdmin.min_num attribute.", "Override this method to programmatically determine the minimum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument obj)."]}, {"name": "admin.InlineModelAdmin.has_add_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.has_add_permission", "type": "django.contrib.admin", "text": ["Should return True if adding an inline object is permitted, False otherwise. obj is the parent object being edited or None when adding a new parent."]}, {"name": "admin.InlineModelAdmin.has_change_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.has_change_permission", "type": "django.contrib.admin", "text": ["Should return True if editing an inline object is permitted, False otherwise. obj is the parent object being edited."]}, {"name": "admin.InlineModelAdmin.has_delete_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.has_delete_permission", "type": "django.contrib.admin", "text": ["Should return True if deleting an inline object is permitted, False otherwise. obj is the parent object being edited."]}, {"name": "admin.InlineModelAdmin.max_num", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.max_num", "type": "django.contrib.admin", "text": ["This controls the maximum number of forms to show in the inline. This doesn\u2019t directly correlate to the number of objects, but can if the value is small enough. See Limiting the number of editable objects for more information.", "InlineModelAdmin.get_max_num() also allows you to customize the maximum number of extra forms."]}, {"name": "admin.InlineModelAdmin.min_num", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.min_num", "type": "django.contrib.admin", "text": ["This controls the minimum number of forms to show in the inline. See modelformset_factory() for more information.", "InlineModelAdmin.get_min_num() also allows you to customize the minimum number of displayed forms."]}, {"name": "admin.InlineModelAdmin.model", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.model", "type": "django.contrib.admin", "text": ["The model which the inline is using. This is required."]}, {"name": "admin.InlineModelAdmin.raw_id_fields", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.raw_id_fields", "type": "django.contrib.admin", "text": ["By default, Django\u2019s admin uses a select-box interface (<select>) for fields that are ForeignKey. Sometimes you don\u2019t want to incur the overhead of having to select all the related instances to display in the drop-down.", "raw_id_fields is a list of fields you would like to change into an Input widget for either a ForeignKey or ManyToManyField:"]}, {"name": "admin.InlineModelAdmin.show_change_link", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.show_change_link", "type": "django.contrib.admin", "text": ["Specifies whether or not inline objects that can be changed in the admin have a link to the change form. Defaults to False."]}, {"name": "admin.InlineModelAdmin.template", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.template", "type": "django.contrib.admin", "text": ["The template used to render the inline on the page."]}, {"name": "admin.InlineModelAdmin.verbose_name", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.verbose_name", "type": "django.contrib.admin", "text": ["An override to the verbose_name from the model\u2019s inner Meta class."]}, {"name": "admin.InlineModelAdmin.verbose_name_plural", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.verbose_name_plural", "type": "django.contrib.admin", "text": ["An override to the verbose_name_plural from the model\u2019s inner Meta class. If this isn\u2019t given and the InlineModelAdmin.verbose_name is defined, Django will use InlineModelAdmin.verbose_name + 's'.", "The fallback to InlineModelAdmin.verbose_name was added."]}, {"name": "admin.ModelAdmin", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin", "type": "django.contrib.admin", "text": ["The ModelAdmin class is the representation of a model in the admin interface. Usually, these are stored in a file named admin.py in your application. Let\u2019s take a look at an example of the ModelAdmin:", "Do you need a ModelAdmin object at all?", "In the preceding example, the ModelAdmin class doesn\u2019t define any custom values (yet). As a result, the default admin interface will be provided. If you are happy with the default admin interface, you don\u2019t need to define a ModelAdmin object at all \u2013 you can register the model class without providing a ModelAdmin description. The preceding example could be simplified to:"]}, {"name": "admin.ModelAdmin.actions", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions", "type": "django.contrib.admin", "text": ["A list of actions to make available on the change list page. See Admin actions for details."]}, {"name": "admin.ModelAdmin.actions_on_bottom", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions_on_bottom", "type": "django.contrib.admin", "text": ["Controls where on the page the actions bar appears. By default, the admin changelist displays actions at the top of the page (actions_on_top = True;\nactions_on_bottom = False)."]}, {"name": "admin.ModelAdmin.actions_on_top", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions_on_top", "type": "django.contrib.admin", "text": []}, {"name": "admin.ModelAdmin.actions_selection_counter", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions_selection_counter", "type": "django.contrib.admin", "text": ["Controls whether a selection counter is displayed next to the action dropdown. By default, the admin changelist will display it (actions_selection_counter = True)."]}, {"name": "admin.ModelAdmin.add_form_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.add_form_template", "type": "django.contrib.admin", "text": ["Path to a custom template, used by add_view()."]}, {"name": "admin.ModelAdmin.add_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.add_view", "type": "django.contrib.admin", "text": ["Django view for the model instance addition page. See note below."]}, {"name": "admin.ModelAdmin.autocomplete_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.autocomplete_fields", "type": "django.contrib.admin", "text": ["autocomplete_fields is a list of ForeignKey and/or ManyToManyField fields you would like to change to Select2 autocomplete inputs.", "By default, the admin uses a select-box interface (<select>) for those fields. Sometimes you don\u2019t want to incur the overhead of selecting all the related instances to display in the dropdown.", "The Select2 input looks similar to the default input but comes with a search feature that loads the options asynchronously. This is faster and more user-friendly if the related model has many instances.", "You must define search_fields on the related object\u2019s ModelAdmin because the autocomplete search uses it.", "To avoid unauthorized data disclosure, users must have the view or change permission to the related object in order to use autocomplete.", "Ordering and pagination of the results are controlled by the related ModelAdmin\u2019s get_ordering() and get_paginator() methods.", "In the following example, ChoiceAdmin has an autocomplete field for the ForeignKey to the Question. The results are filtered by the question_text field and ordered by the date_created field:", "Performance considerations for large datasets", "Ordering using ModelAdmin.ordering may cause performance problems as sorting on a large queryset will be slow.", "Also, if your search fields include fields that aren\u2019t indexed by the database, you might encounter poor performance on extremely large tables.", "For those cases, it\u2019s a good idea to write your own ModelAdmin.get_search_results() implementation using a full-text indexed search.", "You may also want to change the Paginator on very large tables as the default paginator always performs a count() query. For example, you could override the default implementation of the Paginator.count property."]}, {"name": "admin.ModelAdmin.change_form_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.change_form_template", "type": "django.contrib.admin", "text": ["Path to a custom template, used by change_view()."]}, {"name": "admin.ModelAdmin.change_list_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.change_list_template", "type": "django.contrib.admin", "text": ["Path to a custom template, used by changelist_view()."]}, {"name": "admin.ModelAdmin.change_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.change_view", "type": "django.contrib.admin", "text": ["Django view for the model instance editing page. See note below."]}, {"name": "admin.ModelAdmin.changelist_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.changelist_view", "type": "django.contrib.admin", "text": ["Django view for the model instances change list/actions page. See note below."]}, {"name": "admin.ModelAdmin.date_hierarchy", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.date_hierarchy", "type": "django.contrib.admin", "text": ["Set date_hierarchy to the name of a DateField or DateTimeField in your model, and the change list page will include a date-based drilldown navigation by that field.", "Example:", "You can also specify a field on a related model using the __ lookup, for example:", "This will intelligently populate itself based on available data, e.g. if all the dates are in one month, it\u2019ll show the day-level drill-down only.", "Note", "date_hierarchy uses QuerySet.datetimes() internally. Please refer to its documentation for some caveats when time zone support is enabled (USE_TZ = True)."]}, {"name": "admin.ModelAdmin.delete_confirmation_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_confirmation_template", "type": "django.contrib.admin", "text": ["Path to a custom template, used by delete_view() for displaying a confirmation page when deleting one or more objects."]}, {"name": "admin.ModelAdmin.delete_model()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_model", "type": "django.contrib.admin", "text": ["The delete_model method is given the HttpRequest and a model instance. Overriding this method allows doing pre- or post-delete operations. Call super().delete_model() to delete the object using Model.delete()."]}, {"name": "admin.ModelAdmin.delete_queryset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_queryset", "type": "django.contrib.admin", "text": ["The delete_queryset() method is given the HttpRequest and a QuerySet of objects to be deleted. Override this method to customize the deletion process for the \u201cdelete selected objects\u201d action."]}, {"name": "admin.ModelAdmin.delete_selected_confirmation_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_selected_confirmation_template", "type": "django.contrib.admin", "text": ["Path to a custom template, used by the delete_selected action method for displaying a confirmation page when deleting one or more objects. See the actions documentation."]}, {"name": "admin.ModelAdmin.delete_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_view", "type": "django.contrib.admin", "text": ["Django view for the model instance(s) deletion confirmation page. See note below."]}, {"name": "admin.ModelAdmin.empty_value_display", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.empty_value_display", "type": "django.contrib.admin", "text": ["This attribute overrides the default display value for record\u2019s fields that are empty (None, empty string, etc.). The default value is - (a dash). For example:", "You can also override empty_value_display for all admin pages with AdminSite.empty_value_display, or for specific fields like this:", "The empty_value argument to the display() decorator is equivalent to setting the empty_value_display attribute on the display function directly in previous versions. Setting the attribute directly is still supported for backward compatibility."]}, {"name": "admin.ModelAdmin.exclude", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.exclude", "type": "django.contrib.admin", "text": ["This attribute, if given, should be a list of field names to exclude from the form.", "For example, let\u2019s consider the following model:", "If you want a form for the Author model that includes only the name and title fields, you would specify fields or exclude like this:", "Since the Author model only has three fields, name, title, and birth_date, the forms resulting from the above declarations will contain exactly the same fields."]}, {"name": "admin.ModelAdmin.fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fields", "type": "django.contrib.admin", "text": ["Use the fields option to make simple layout changes in the forms on the \u201cadd\u201d and \u201cchange\u201d pages such as showing only a subset of available fields, modifying their order, or grouping them into rows. For example, you could define a simpler version of the admin form for the django.contrib.flatpages.models.FlatPage model as follows:", "In the above example, only the fields url, title and content will be displayed, sequentially, in the form. fields can contain values defined in ModelAdmin.readonly_fields to be displayed as read-only.", "For more complex layout needs, see the fieldsets option.", "The fields option accepts the same types of values as list_display, except that callables aren\u2019t accepted. Names of model and model admin methods will only be used if they\u2019re listed in readonly_fields.", "To display multiple fields on the same line, wrap those fields in their own tuple. In this example, the url and title fields will display on the same line and the content field will be displayed below them on its own line:", "Note", "This fields option should not be confused with the fields dictionary key that is within the fieldsets option, as described in the next section.", "If neither fields nor fieldsets options are present, Django will default to displaying each field that isn\u2019t an AutoField and has editable=True, in a single fieldset, in the same order as the fields are defined in the model."]}, {"name": "admin.ModelAdmin.fieldsets", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fieldsets", "type": "django.contrib.admin", "text": ["Set fieldsets to control the layout of admin \u201cadd\u201d and \u201cchange\u201d pages.", "fieldsets is a list of two-tuples, in which each two-tuple represents a <fieldset> on the admin form page. (A <fieldset> is a \u201csection\u201d of the form.)", "The two-tuples are in the format (name, field_options), where name is a string representing the title of the fieldset and field_options is a dictionary of information about the fieldset, including a list of fields to be displayed in it.", "A full example, taken from the django.contrib.flatpages.models.FlatPage model:", "This results in an admin page that looks like:", "If neither fieldsets nor fields options are present, Django will default to displaying each field that isn\u2019t an AutoField and has editable=True, in a single fieldset, in the same order as the fields are defined in the model.", "The field_options dictionary can have the following keys:", "A tuple of field names to display in this fieldset. This key is required.", "Example:", "As with the fields option, to display multiple fields on the same line, wrap those fields in their own tuple. In this example, the first_name and last_name fields will display on the same line:", "fields can contain values defined in readonly_fields to be displayed as read-only.", "If you add the name of a callable to fields, the same rule applies as with the fields option: the callable must be listed in readonly_fields.", "A list or tuple containing extra CSS classes to apply to the fieldset.", "Example:", "Two useful classes defined by the default admin site stylesheet are collapse and wide. Fieldsets with the collapse style will be initially collapsed in the admin and replaced with a small \u201cclick to expand\u201d link. Fieldsets with the wide style will be given extra horizontal space.", "A string of optional extra text to be displayed at the top of each fieldset, under the heading of the fieldset. This string is not rendered for TabularInline due to its layout.", "Note that this value is not HTML-escaped when it\u2019s displayed in the admin interface. This lets you include HTML if you so desire. Alternatively you can use plain text and django.utils.html.escape() to escape any HTML special characters."]}, {"name": "admin.ModelAdmin.filter_horizontal", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.filter_horizontal", "type": "django.contrib.admin", "text": ["By default, a ManyToManyField is displayed in the admin site with a <select multiple>. However, multiple-select boxes can be difficult to use when selecting many items. Adding a ManyToManyField to this list will instead use a nifty unobtrusive JavaScript \u201cfilter\u201d interface that allows searching within the options. The unselected and selected options appear in two boxes side by side. See filter_vertical to use a vertical interface."]}, {"name": "admin.ModelAdmin.filter_vertical", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.filter_vertical", "type": "django.contrib.admin", "text": ["Same as filter_horizontal, but uses a vertical display of the filter interface with the box of unselected options appearing above the box of selected options."]}, {"name": "admin.ModelAdmin.form", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.form", "type": "django.contrib.admin", "text": ["By default a ModelForm is dynamically created for your model. It is used to create the form presented on both the add/change pages. You can easily provide your own ModelForm to override any default form behavior on the add/change pages. Alternatively, you can customize the default form rather than specifying an entirely new one by using the ModelAdmin.get_form() method.", "For an example see the section Adding custom validation to the admin.", "Note", "If you define the Meta.model attribute on a ModelForm, you must also define the Meta.fields attribute (or the Meta.exclude attribute). However, since the admin has its own way of defining fields, the Meta.fields attribute will be ignored.", "If the ModelForm is only going to be used for the admin, the easiest solution is to omit the Meta.model attribute, since ModelAdmin will provide the correct model to use. Alternatively, you can set fields = [] in the Meta class to satisfy the validation on the ModelForm.", "Note", "If your ModelForm and ModelAdmin both define an exclude option then ModelAdmin takes precedence:", "In the above example, the \u201cage\u201d field will be excluded but the \u201cname\u201d field will be included in the generated form."]}, {"name": "admin.ModelAdmin.formfield_for_choice_field()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_for_choice_field", "type": "django.contrib.admin", "text": ["Like the formfield_for_foreignkey and formfield_for_manytomany methods, the formfield_for_choice_field method can be overridden to change the default formfield for a field that has declared choices. For example, if the choices available to a superuser should be different than those available to regular staff, you could proceed as follows:", "Note", "Any choices attribute set on the formfield will be limited to the form field only. If the corresponding field on the model has choices set, the choices provided to the form must be a valid subset of those choices, otherwise the form submission will fail with a ValidationError when the model itself is validated before saving."]}, {"name": "admin.ModelAdmin.formfield_for_foreignkey()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_for_foreignkey", "type": "django.contrib.admin", "text": ["The formfield_for_foreignkey method on a ModelAdmin allows you to override the default formfield for a foreign keys field. For example, to return a subset of objects for this foreign key field based on the user:", "This uses the HttpRequest instance to filter the Car foreign key field to only display the cars owned by the User instance.", "For more complex filters, you can use ModelForm.__init__() method to filter based on an instance of your model (see Fields which handle relationships). For example:"]}, {"name": "admin.ModelAdmin.formfield_for_manytomany()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_for_manytomany", "type": "django.contrib.admin", "text": ["Like the formfield_for_foreignkey method, the formfield_for_manytomany method can be overridden to change the default formfield for a many to many field. For example, if an owner can own multiple cars and cars can belong to multiple owners \u2013 a many to many relationship \u2013 you could filter the Car foreign key field to only display the cars owned by the User:"]}, {"name": "admin.ModelAdmin.formfield_overrides", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_overrides", "type": "django.contrib.admin", "text": ["This provides a quick-and-dirty way to override some of the Field options for use in the admin. formfield_overrides is a dictionary mapping a field class to a dict of arguments to pass to the field at construction time.", "Since that\u2019s a bit abstract, let\u2019s look at a concrete example. The most common use of formfield_overrides is to add a custom widget for a certain type of field. So, imagine we\u2019ve written a RichTextEditorWidget that we\u2019d like to use for large text fields instead of the default <textarea>. Here\u2019s how we\u2019d do that:", "Note that the key in the dictionary is the actual field class, not a string. The value is another dictionary; these arguments will be passed to the form field\u2019s __init__() method. See The Forms API for details.", "Warning", "If you want to use a custom widget with a relation field (i.e. ForeignKey or ManyToManyField), make sure you haven\u2019t included that field\u2019s name in raw_id_fields, radio_fields, or autocomplete_fields.", "formfield_overrides won\u2019t let you change the widget on relation fields that have raw_id_fields, radio_fields, or autocomplete_fields set. That\u2019s because raw_id_fields, radio_fields, and autocomplete_fields imply custom widgets of their own."]}, {"name": "admin.ModelAdmin.get_actions()", "path": "ref/contrib/admin/actions#django.contrib.admin.ModelAdmin.get_actions", "type": "django.contrib.admin", "text": ["Finally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding ModelAdmin.get_actions().", "This returns a dictionary of actions allowed. The keys are action names, and the values are (function, name, short_description) tuples.", "For example, if you only want users whose names begin with \u2018J\u2019 to be able to delete objects in bulk:"]}, {"name": "admin.ModelAdmin.get_autocomplete_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_autocomplete_fields", "type": "django.contrib.admin", "text": ["The get_autocomplete_fields() method is given the HttpRequest and is expected to return a list or tuple of field names that will be displayed with an autocomplete widget as described above in the ModelAdmin.autocomplete_fields section."]}, {"name": "admin.ModelAdmin.get_changeform_initial_data()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changeform_initial_data", "type": "django.contrib.admin", "text": ["A hook for the initial data on admin change forms. By default, fields are given initial values from GET parameters. For instance, ?name=initial_value will set the name field\u2019s initial value to be initial_value.", "This method should return a dictionary in the form {'fieldname': 'fieldval'}:"]}, {"name": "admin.ModelAdmin.get_changelist()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changelist", "type": "django.contrib.admin", "text": ["Returns the Changelist class to be used for listing. By default, django.contrib.admin.views.main.ChangeList is used. By inheriting this class you can change the behavior of the listing."]}, {"name": "admin.ModelAdmin.get_changelist_form()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changelist_form", "type": "django.contrib.admin", "text": ["Returns a ModelForm class for use in the Formset on the changelist page. To use a custom form, for example:", "Note", "If you define the Meta.model attribute on a ModelForm, you must also define the Meta.fields attribute (or the Meta.exclude attribute). However, ModelAdmin ignores this value, overriding it with the ModelAdmin.list_editable attribute. The easiest solution is to omit the Meta.model attribute, since ModelAdmin will provide the correct model to use."]}, {"name": "admin.ModelAdmin.get_changelist_formset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changelist_formset", "type": "django.contrib.admin", "text": ["Returns a ModelFormSet class for use on the changelist page if list_editable is used. To use a custom formset, for example:"]}, {"name": "admin.ModelAdmin.get_deleted_objects()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_deleted_objects", "type": "django.contrib.admin", "text": ["A hook for customizing the deletion process of the delete_view() and the \u201cdelete selected\u201d action.", "The objs argument is a homogeneous iterable of objects (a QuerySet or a list of model instances) to be deleted, and request is the HttpRequest.", "This method must return a 4-tuple of (deleted_objects, model_count, perms_needed, protected).", "deleted_objects is a list of strings representing all the objects that will be deleted. If there are any related objects to be deleted, the list is nested and includes those related objects. The list is formatted in the template using the unordered_list filter.", "model_count is a dictionary mapping each model\u2019s verbose_name_plural to the number of objects that will be deleted.", "perms_needed is a set of verbose_names of the models that the user doesn\u2019t have permission to delete.", "protected is a list of strings representing of all the protected related objects that can\u2019t be deleted. The list is displayed in the template."]}, {"name": "admin.ModelAdmin.get_exclude()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_exclude", "type": "django.contrib.admin", "text": ["The get_exclude method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list of fields, as described in ModelAdmin.exclude."]}, {"name": "admin.ModelAdmin.get_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_fields", "type": "django.contrib.admin", "text": ["The get_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list of fields, as described above in the ModelAdmin.fields section."]}, {"name": "admin.ModelAdmin.get_fieldsets()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_fieldsets", "type": "django.contrib.admin", "text": ["The get_fieldsets method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list of two-tuples, in which each two-tuple represents a <fieldset> on the admin form page, as described above in the ModelAdmin.fieldsets section."]}, {"name": "admin.ModelAdmin.get_form()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_form", "type": "django.contrib.admin", "text": ["Returns a ModelForm class for use in the admin add and change views, see add_view() and change_view().", "The base implementation uses modelform_factory() to subclass form, modified by attributes such as fields and exclude. So, for example, if you wanted to offer additional fields to superusers, you could swap in a different base form like so:", "You may also return a custom ModelForm class directly."]}, {"name": "admin.ModelAdmin.get_formset_kwargs()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_formset_kwargs", "type": "django.contrib.admin", "text": ["A hook for customizing the keyword arguments passed to the constructor of a formset. For example, to pass request to formset forms:", "You can also used it to set initial for formset forms."]}, {"name": "admin.ModelAdmin.get_formsets_with_inlines()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_formsets_with_inlines", "type": "django.contrib.admin", "text": ["Yields (FormSet, InlineModelAdmin) pairs for use in admin add and change views.", "For example if you wanted to display a particular inline only in the change view, you could override get_formsets_with_inlines as follows:"]}, {"name": "admin.ModelAdmin.get_inline_instances()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_inline_instances", "type": "django.contrib.admin", "text": ["The get_inline_instances method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list or tuple of InlineModelAdmin objects, as described below in the InlineModelAdmin section. For example, the following would return inlines without the default filtering based on add, change, delete, and view permissions:", "If you override this method, make sure that the returned inlines are instances of the classes defined in inlines or you might encounter a \u201cBad Request\u201d error when adding related objects."]}, {"name": "admin.ModelAdmin.get_inlines()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_inlines", "type": "django.contrib.admin", "text": ["The get_inlines method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return an iterable of inlines. You can override this method to dynamically add inlines based on the request or model instance instead of specifying them in ModelAdmin.inlines."]}, {"name": "admin.ModelAdmin.get_list_display()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_display", "type": "django.contrib.admin", "text": ["The get_list_display method is given the HttpRequest and is expected to return a list or tuple of field names that will be displayed on the changelist view as described above in the ModelAdmin.list_display section."]}, {"name": "admin.ModelAdmin.get_list_display_links()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_display_links", "type": "django.contrib.admin", "text": ["The get_list_display_links method is given the HttpRequest and the list or tuple returned by ModelAdmin.get_list_display(). It is expected to return either None or a list or tuple of field names on the changelist that will be linked to the change view, as described in the ModelAdmin.list_display_links section."]}, {"name": "admin.ModelAdmin.get_list_filter()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_filter", "type": "django.contrib.admin", "text": ["The get_list_filter method is given the HttpRequest and is expected to return the same kind of sequence type as for the list_filter attribute."]}, {"name": "admin.ModelAdmin.get_list_select_related()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_select_related", "type": "django.contrib.admin", "text": ["The get_list_select_related method is given the HttpRequest and should return a boolean or list as ModelAdmin.list_select_related does."]}, {"name": "admin.ModelAdmin.get_ordering()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_ordering", "type": "django.contrib.admin", "text": ["The get_ordering method takes a request as parameter and is expected to return a list or tuple for ordering similar to the ordering attribute. For example:"]}, {"name": "admin.ModelAdmin.get_paginator()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_paginator", "type": "django.contrib.admin", "text": ["Returns an instance of the paginator to use for this view. By default, instantiates an instance of paginator."]}, {"name": "admin.ModelAdmin.get_prepopulated_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_prepopulated_fields", "type": "django.contrib.admin", "text": ["The get_prepopulated_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a dictionary, as described above in the ModelAdmin.prepopulated_fields section."]}, {"name": "admin.ModelAdmin.get_queryset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_queryset", "type": "django.contrib.admin", "text": ["The get_queryset method on a ModelAdmin returns a QuerySet of all model instances that can be edited by the admin site. One use case for overriding this method is to show objects owned by the logged-in user:"]}, {"name": "admin.ModelAdmin.get_readonly_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_readonly_fields", "type": "django.contrib.admin", "text": ["The get_readonly_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list or tuple of field names that will be displayed as read-only, as described above in the ModelAdmin.readonly_fields section."]}, {"name": "admin.ModelAdmin.get_search_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_search_fields", "type": "django.contrib.admin", "text": ["The get_search_fields method is given the HttpRequest and is expected to return the same kind of sequence type as for the search_fields attribute."]}, {"name": "admin.ModelAdmin.get_search_results()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_search_results", "type": "django.contrib.admin", "text": ["The get_search_results method modifies the list of objects displayed into those that match the provided search term. It accepts the request, a queryset that applies the current filters, and the user-provided search term. It returns a tuple containing a queryset modified to implement the search, and a boolean indicating if the results may contain duplicates.", "The default implementation searches the fields named in ModelAdmin.search_fields.", "This method may be overridden with your own custom search method. For example, you might wish to search by an integer field, or use an external tool such as Solr or Haystack. You must establish if the queryset changes implemented by your search method may introduce duplicates into the results, and return True in the second element of the return value.", "For example, to search by name and age, you could use:", "This implementation is more efficient than search_fields =\n('name', '=age') which results in a string comparison for the numeric field, for example ... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4') on PostgreSQL."]}, {"name": "admin.ModelAdmin.get_sortable_by()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_sortable_by", "type": "django.contrib.admin", "text": ["The get_sortable_by() method is passed the HttpRequest and is expected to return a collection (e.g. list, tuple, or set) of field names that will be sortable in the change list page.", "Its default implementation returns sortable_by if it\u2019s set, otherwise it defers to get_list_display().", "For example, to prevent one or more columns from being sortable:"]}, {"name": "admin.ModelAdmin.get_urls()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_urls", "type": "django.contrib.admin", "text": ["The get_urls method on a ModelAdmin returns the URLs to be used for that ModelAdmin in the same way as a URLconf. Therefore you can extend them as documented in URL dispatcher:", "If you want to use the admin layout, extend from admin/base_site.html:", "Note", "Notice that the custom patterns are included before the regular admin URLs: the admin URL patterns are very permissive and will match nearly anything, so you\u2019ll usually want to prepend your custom URLs to the built-in ones.", "In this example, my_view will be accessed at /admin/myapp/mymodel/my_view/ (assuming the admin URLs are included at /admin/.)", "However, the self.my_view function registered above suffers from two problems:", "Since this is usually not what you want, Django provides a convenience wrapper to check permissions and mark the view as non-cacheable. This wrapper is AdminSite.admin_view() (i.e. self.admin_site.admin_view inside a ModelAdmin instance); use it like so:", "Notice the wrapped view in the fifth line above:", "This wrapping will protect self.my_view from unauthorized access and will apply the django.views.decorators.cache.never_cache() decorator to make sure it is not cached if the cache middleware is active.", "If the page is cacheable, but you still want the permission check to be performed, you can pass a cacheable=True argument to AdminSite.admin_view():", "ModelAdmin views have model_admin attributes. Other AdminSite views have admin_site attributes."]}, {"name": "admin.ModelAdmin.has_add_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_add_permission", "type": "django.contrib.admin", "text": ["Should return True if adding an object is permitted, False otherwise."]}, {"name": "admin.ModelAdmin.has_change_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_change_permission", "type": "django.contrib.admin", "text": ["Should return True if editing obj is permitted, False otherwise. If obj is None, should return True or False to indicate whether editing of objects of this type is permitted in general (e.g., False will be interpreted as meaning that the current user is not permitted to edit any object of this type)."]}, {"name": "admin.ModelAdmin.has_delete_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_delete_permission", "type": "django.contrib.admin", "text": ["Should return True if deleting obj is permitted, False otherwise. If obj is None, should return True or False to indicate whether deleting objects of this type is permitted in general (e.g., False will be interpreted as meaning that the current user is not permitted to delete any object of this type)."]}, {"name": "admin.ModelAdmin.has_module_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_module_permission", "type": "django.contrib.admin", "text": ["Should return True if displaying the module on the admin index page and accessing the module\u2019s index page is permitted, False otherwise. Uses User.has_module_perms() by default. Overriding it does not restrict access to the view, add, change, or delete views, has_view_permission(), has_add_permission(), has_change_permission(), and has_delete_permission() should be used for that."]}, {"name": "admin.ModelAdmin.has_view_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_view_permission", "type": "django.contrib.admin", "text": ["Should return True if viewing obj is permitted, False otherwise. If obj is None, should return True or False to indicate whether viewing of objects of this type is permitted in general (e.g., False will be interpreted as meaning that the current user is not permitted to view any object of this type).", "The default implementation returns True if the user has either the \u201cchange\u201d or \u201cview\u201d permission."]}, {"name": "admin.ModelAdmin.history_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.history_view", "type": "django.contrib.admin", "text": ["Django view for the page that shows the modification history for a given model instance."]}, {"name": "admin.ModelAdmin.inlines", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.inlines", "type": "django.contrib.admin", "text": ["See InlineModelAdmin objects below as well as ModelAdmin.get_formsets_with_inlines()."]}, {"name": "admin.ModelAdmin.list_display", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display", "type": "django.contrib.admin", "text": ["Set list_display to control which fields are displayed on the change list page of the admin.", "Example:", "If you don\u2019t set list_display, the admin site will display a single column that displays the __str__() representation of each object.", "There are four types of values that can be used in list_display. All but the simplest may use the display() decorator is used to customize how the field is presented:", "The name of a model field. For example:", "A callable that accepts one argument, the model instance. For example:", "A string representing a ModelAdmin method that accepts one argument, the model instance. For example:", "A string representing a model attribute or method (without any required arguments). For example:", "A few special cases to note about list_display:", "If the string given is a method of the model, ModelAdmin or a callable, Django will HTML-escape the output by default. To escape user input and allow your own unescaped tags, use format_html().", "Here\u2019s a full example model:", "As some examples have already demonstrated, when using a callable, a model method, or a ModelAdmin method, you can customize the column\u2019s title by wrapping the callable with the display() decorator and passing the description argument.", "The description argument to the display() decorator is equivalent to setting the short_description attribute on the display function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.", "If the value of a field is None, an empty string, or an iterable without elements, Django will display - (a dash). You can override this with AdminSite.empty_value_display:", "You can also use ModelAdmin.empty_value_display:", "Or on a field level:", "The empty_value argument to the display() decorator is equivalent to setting the empty_value_display attribute on the display function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.", "If the string given is a method of the model, ModelAdmin or a callable that returns True, False, or None, Django will display a pretty \u201cyes\u201d, \u201cno\u201d, or \u201cunknown\u201d icon if you wrap the method with the display() decorator passing the boolean argument with the value set to True:", "The boolean argument to the display() decorator is equivalent to setting the boolean attribute on the display function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.", "The __str__() method is just as valid in list_display as any other model method, so it\u2019s perfectly OK to do this:", "Usually, elements of list_display that aren\u2019t actual database fields can\u2019t be used in sorting (because Django does all the sorting at the database level).", "However, if an element of list_display represents a certain database field, you can indicate this fact by using the display() decorator on the method, passing the ordering argument:", "The above will tell Django to order by the first_name field when trying to sort by colored_first_name in the admin.", "To indicate descending order with the ordering argument you can use a hyphen prefix on the field name. Using the above example, this would look like:", "The ordering argument supports query lookups to sort by values on related models. This example includes an \u201cauthor first name\u201d column in the list display and allows sorting it by first name:", "Query expressions may be used with the ordering argument:", "The ordering argument to the display() decorator is equivalent to setting the admin_order_field attribute on the display function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.", "Elements of list_display can also be properties:", "Note that @property must be above @display. If you\u2019re using the old way \u2013 setting the display-related attributes directly rather than using the display() decorator \u2013 be aware that the property() function and not the @property decorator must be used:", "Django will try to interpret every element of list_display in this order:", "For example if you have first_name as a model field and as a ModelAdmin attribute, the model field will be used."]}, {"name": "admin.ModelAdmin.list_display_links", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display_links", "type": "django.contrib.admin", "text": ["Use list_display_links to control if and which fields in list_display should be linked to the \u201cchange\u201d page for an object.", "By default, the change list page will link the first column \u2013 the first field specified in list_display \u2013 to the change page for each item. But list_display_links lets you change this:", "Set it to a list or tuple of fields (in the same format as list_display) whose columns you want converted to links.", "You can specify one or many fields. As long as the fields appear in list_display, Django doesn\u2019t care how many (or how few) fields are linked. The only requirement is that if you want to use list_display_links in this fashion, you must define list_display.", "In this example, the first_name and last_name fields will be linked on the change list page:", "In this example, the change list page grid will have no links:"]}, {"name": "admin.ModelAdmin.list_editable", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_editable", "type": "django.contrib.admin", "text": ["Set list_editable to a list of field names on the model which will allow editing on the change list page. That is, fields listed in list_editable will be displayed as form widgets on the change list page, allowing users to edit and save multiple rows at once.", "Note", "list_editable interacts with a couple of other options in particular ways; you should note the following rules:", "You\u2019ll get a validation error if either of these rules are broken."]}, {"name": "admin.ModelAdmin.list_filter", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter", "type": "django.contrib.admin", "text": ["Set list_filter to activate filters in the right sidebar of the change list page of the admin, as illustrated in the following screenshot:", "list_filter should be a list or tuple of elements, where each element should be of one of the following types:", "a field name, where the specified field should be either a BooleanField, CharField, DateField, DateTimeField, IntegerField, ForeignKey or ManyToManyField, for example:", "Field names in list_filter can also span relations using the __ lookup, for example:", "a class inheriting from django.contrib.admin.SimpleListFilter, which you need to provide the title and parameter_name attributes to and override the lookups and queryset methods, e.g.:", "Note", "As a convenience, the HttpRequest object is passed to the lookups and queryset methods, for example:", "Also as a convenience, the ModelAdmin object is passed to the lookups method, for example if you want to base the lookups on the available data:", "a tuple, where the first element is a field name and the second element is a class inheriting from django.contrib.admin.FieldListFilter, for example:", "You can limit the choices of a related model to the objects involved in that relation using RelatedOnlyFieldListFilter:", "Assuming author is a ForeignKey to a User model, this will limit the list_filter choices to the users who have written a book instead of listing all users.", "You can filter empty values using EmptyFieldListFilter, which can filter on both empty strings and nulls, depending on what the field allows to store:", "Note", "The FieldListFilter API is considered internal and might be changed.", "Note", "The GenericForeignKey field is not supported.", "List filter\u2019s typically appear only if the filter has more than one choice. A filter\u2019s has_output() method controls whether or not it appears.", "It is possible to specify a custom template for rendering a list filter:", "See the default template provided by Django (admin/filter.html) for a concrete example."]}, {"name": "admin.ModelAdmin.list_max_show_all", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_max_show_all", "type": "django.contrib.admin", "text": ["Set list_max_show_all to control how many items can appear on a \u201cShow all\u201d admin change list page. The admin will display a \u201cShow all\u201d link on the change list only if the total result count is less than or equal to this setting. By default, this is set to 200."]}, {"name": "admin.ModelAdmin.list_per_page", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_per_page", "type": "django.contrib.admin", "text": ["Set list_per_page to control how many items appear on each paginated admin change list page. By default, this is set to 100."]}, {"name": "admin.ModelAdmin.list_select_related", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_select_related", "type": "django.contrib.admin", "text": ["Set list_select_related to tell Django to use select_related() in retrieving the list of objects on the admin change list page. This can save you a bunch of database queries.", "The value should be either a boolean, a list or a tuple. Default is False.", "When value is True, select_related() will always be called. When value is set to False, Django will look at list_display and call select_related() if any ForeignKey is present.", "If you need more fine-grained control, use a tuple (or list) as value for list_select_related. Empty tuple will prevent Django from calling select_related at all. Any other tuple will be passed directly to select_related as parameters. For example:", "will call select_related('author', 'category').", "If you need to specify a dynamic value based on the request, you can implement a get_list_select_related() method.", "Note", "ModelAdmin ignores this attribute when select_related() was already called on the changelist\u2019s QuerySet."]}, {"name": "admin.ModelAdmin.lookup_allowed()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.lookup_allowed", "type": "django.contrib.admin", "text": ["The objects in the changelist page can be filtered with lookups from the URL\u2019s query string. This is how list_filter works, for example. The lookups are similar to what\u2019s used in QuerySet.filter() (e.g. user__email=user@example.com). Since the lookups in the query string can be manipulated by the user, they must be sanitized to prevent unauthorized data exposure.", "The lookup_allowed() method is given a lookup path from the query string (e.g. 'user__email') and the corresponding value (e.g. 'user@example.com'), and returns a boolean indicating whether filtering the changelist\u2019s QuerySet using the parameters is permitted. If lookup_allowed() returns False, DisallowedModelAdminLookup (subclass of SuspiciousOperation) is raised.", "By default, lookup_allowed() allows access to a model\u2019s local fields, field paths used in list_filter (but not paths from get_list_filter()), and lookups required for limit_choices_to to function correctly in raw_id_fields.", "Override this method to customize the lookups permitted for your ModelAdmin subclass."]}, {"name": "admin.ModelAdmin.message_user()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.message_user", "type": "django.contrib.admin", "text": ["Sends a message to the user using the django.contrib.messages backend. See the custom ModelAdmin example.", "Keyword arguments allow you to change the message level, add extra CSS tags, or fail silently if the contrib.messages framework is not installed. These keyword arguments match those for django.contrib.messages.add_message(), see that function\u2019s documentation for more details. One difference is that the level may be passed as a string label in addition to integer/constant."]}, {"name": "admin.ModelAdmin.object_history_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.object_history_template", "type": "django.contrib.admin", "text": ["Path to a custom template, used by history_view()."]}, {"name": "admin.ModelAdmin.ordering", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.ordering", "type": "django.contrib.admin", "text": ["Set ordering to specify how lists of objects should be ordered in the Django admin views. This should be a list or tuple in the same format as a model\u2019s ordering parameter.", "If this isn\u2019t provided, the Django admin will use the model\u2019s default ordering.", "If you need to specify a dynamic order (for example depending on user or language) you can implement a get_ordering() method.", "Performance considerations with ordering and sorting", "To ensure a deterministic ordering of results, the changelist adds pk to the ordering if it can\u2019t find a single or unique together set of fields that provide total ordering.", "For example, if the default ordering is by a non-unique name field, then the changelist is sorted by name and pk. This could perform poorly if you have a lot of rows and don\u2019t have an index on name and pk."]}, {"name": "admin.ModelAdmin.paginator", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.paginator", "type": "django.contrib.admin", "text": ["The paginator class to be used for pagination. By default, django.core.paginator.Paginator is used. If the custom paginator class doesn\u2019t have the same constructor interface as django.core.paginator.Paginator, you will also need to provide an implementation for ModelAdmin.get_paginator()."]}, {"name": "admin.ModelAdmin.popup_response_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.popup_response_template", "type": "django.contrib.admin", "text": ["Path to a custom template, used by response_add(), response_change(), and response_delete()."]}, {"name": "admin.ModelAdmin.prepopulated_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.prepopulated_fields", "type": "django.contrib.admin", "text": ["Set prepopulated_fields to a dictionary mapping field names to the fields it should prepopulate from:", "When set, the given fields will use a bit of JavaScript to populate from the fields assigned. The main use for this functionality is to automatically generate the value for SlugField fields from one or more other fields. The generated value is produced by concatenating the values of the source fields, and then by transforming that result into a valid slug (e.g. substituting dashes for spaces and lowercasing ASCII letters).", "Prepopulated fields aren\u2019t modified by JavaScript after a value has been saved. It\u2019s usually undesired that slugs change (which would cause an object\u2019s URL to change if the slug is used in it).", "prepopulated_fields doesn\u2019t accept DateTimeField, ForeignKey, OneToOneField, and ManyToManyField fields.", "In older versions, various English stop words are removed from generated values."]}, {"name": "admin.ModelAdmin.preserve_filters", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.preserve_filters", "type": "django.contrib.admin", "text": ["By default, applied filters are preserved on the list view after creating, editing, or deleting an object. You can have filters cleared by setting this attribute to False."]}, {"name": "admin.ModelAdmin.radio_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.radio_fields", "type": "django.contrib.admin", "text": ["By default, Django\u2019s admin uses a select-box interface (<select>) for fields that are ForeignKey or have choices set. If a field is present in radio_fields, Django will use a radio-button interface instead. Assuming group is a ForeignKey on the Person model:", "You have the choice of using HORIZONTAL or VERTICAL from the django.contrib.admin module.", "Don\u2019t include a field in radio_fields unless it\u2019s a ForeignKey or has choices set."]}, {"name": "admin.ModelAdmin.raw_id_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.raw_id_fields", "type": "django.contrib.admin", "text": ["By default, Django\u2019s admin uses a select-box interface (<select>) for fields that are ForeignKey. Sometimes you don\u2019t want to incur the overhead of having to select all the related instances to display in the drop-down.", "raw_id_fields is a list of fields you would like to change into an Input widget for either a ForeignKey or ManyToManyField:", "The raw_id_fields Input widget should contain a primary key if the field is a ForeignKey or a comma separated list of values if the field is a ManyToManyField. The raw_id_fields widget shows a magnifying glass button next to the field which allows users to search for and select a value:"]}, {"name": "admin.ModelAdmin.readonly_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.readonly_fields", "type": "django.contrib.admin", "text": ["By default the admin shows all fields as editable. Any fields in this option (which should be a list or tuple) will display its data as-is and non-editable; they are also excluded from the ModelForm used for creating and editing. Note that when specifying ModelAdmin.fields or ModelAdmin.fieldsets the read-only fields must be present to be shown (they are ignored otherwise).", "If readonly_fields is used without defining explicit ordering through ModelAdmin.fields or ModelAdmin.fieldsets they will be added last after all editable fields.", "A read-only field can not only display data from a model\u2019s field, it can also display the output of a model\u2019s method or a method of the ModelAdmin class itself. This is very similar to the way ModelAdmin.list_display behaves. This provides a way to use the admin interface to provide feedback on the status of the objects being edited, for example:"]}, {"name": "admin.ModelAdmin.response_add()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.response_add", "type": "django.contrib.admin", "text": ["Determines the HttpResponse for the add_view() stage.", "response_add is called after the admin form is submitted and just after the object and all the related instances have been created and saved. You can override it to change the default behavior after the object has been created."]}, {"name": "admin.ModelAdmin.response_change()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.response_change", "type": "django.contrib.admin", "text": ["Determines the HttpResponse for the change_view() stage.", "response_change is called after the admin form is submitted and just after the object and all the related instances have been saved. You can override it to change the default behavior after the object has been changed."]}, {"name": "admin.ModelAdmin.response_delete()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.response_delete", "type": "django.contrib.admin", "text": ["Determines the HttpResponse for the delete_view() stage.", "response_delete is called after the object has been deleted. You can override it to change the default behavior after the object has been deleted.", "obj_display is a string with the name of the deleted object.", "obj_id is the serialized identifier used to retrieve the object to be deleted."]}, {"name": "admin.ModelAdmin.save_as", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_as", "type": "django.contrib.admin", "text": ["Set save_as to enable a \u201csave as new\u201d feature on admin change forms.", "Normally, objects have three save options: \u201cSave\u201d, \u201cSave and continue editing\u201d, and \u201cSave and add another\u201d. If save_as is True, \u201cSave and add another\u201d will be replaced by a \u201cSave as new\u201d button that creates a new object (with a new ID) rather than updating the existing object.", "By default, save_as is set to False."]}, {"name": "admin.ModelAdmin.save_as_continue", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_as_continue", "type": "django.contrib.admin", "text": ["When save_as=True, the default redirect after saving the new object is to the change view for that object. If you set save_as_continue=False, the redirect will be to the changelist view.", "By default, save_as_continue is set to True."]}, {"name": "admin.ModelAdmin.save_formset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_formset", "type": "django.contrib.admin", "text": ["The save_formset method is given the HttpRequest, the parent ModelForm instance and a boolean value based on whether it is adding or changing the parent object.", "For example, to attach request.user to each changed formset model instance:", "See also Saving objects in the formset."]}, {"name": "admin.ModelAdmin.save_model()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_model", "type": "django.contrib.admin", "text": ["The save_model method is given the HttpRequest, a model instance, a ModelForm instance, and a boolean value based on whether it is adding or changing the object. Overriding this method allows doing pre- or post-save operations. Call super().save_model() to save the object using Model.save().", "For example to attach request.user to the object prior to saving:"]}, {"name": "admin.ModelAdmin.save_on_top", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_on_top", "type": "django.contrib.admin", "text": ["Set save_on_top to add save buttons across the top of your admin change forms.", "Normally, the save buttons appear only at the bottom of the forms. If you set save_on_top, the buttons will appear both on the top and the bottom.", "By default, save_on_top is set to False."]}, {"name": "admin.ModelAdmin.save_related()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_related", "type": "django.contrib.admin", "text": ["The save_related method is given the HttpRequest, the parent ModelForm instance, the list of inline formsets and a boolean value based on whether the parent is being added or changed. Here you can do any pre- or post-save operations for objects related to the parent. Note that at this point the parent object and its form have already been saved."]}, {"name": "admin.ModelAdmin.search_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_fields", "type": "django.contrib.admin", "text": ["Set search_fields to enable a search box on the admin change list page. This should be set to a list of field names that will be searched whenever somebody submits a search query in that text box.", "These fields should be some kind of text field, such as CharField or TextField. You can also perform a related lookup on a ForeignKey or ManyToManyField with the lookup API \u201cfollow\u201d notation:", "For example, if you have a blog entry with an author, the following definition would enable searching blog entries by the email address of the author:", "When somebody does a search in the admin search box, Django splits the search query into words and returns all objects that contain each of the words, case-insensitive (using the icontains lookup), where each word must be in at least one of search_fields. For example, if search_fields is set to ['first_name', 'last_name'] and a user searches for john lennon, Django will do the equivalent of this SQL WHERE clause:", "The search query can contain quoted phrases with spaces. For example, if a user searches for \"john winston\" or 'john winston', Django will do the equivalent of this SQL WHERE clause:", "If you don\u2019t want to use icontains as the lookup, you can use any lookup by appending it the field. For example, you could use exact by setting search_fields to ['first_name__exact'].", "Some (older) shortcuts for specifying a field lookup are also available. You can prefix a field in search_fields with the following characters and it\u2019s equivalent to adding __<lookup> to the field:", "If you need to customize search you can use ModelAdmin.get_search_results() to provide additional or alternate search behavior.", "Support for searching against quoted phrases with spaces was added."]}, {"name": "admin.ModelAdmin.search_help_text", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_help_text", "type": "django.contrib.admin", "text": ["Set search_help_text to specify a descriptive text for the search box which will be displayed below it."]}, {"name": "admin.ModelAdmin.show_full_result_count", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.show_full_result_count", "type": "django.contrib.admin", "text": ["Set show_full_result_count to control whether the full count of objects should be displayed on a filtered admin page (e.g. 99 results (103 total)). If this option is set to False, a text like 99 results (Show all) is displayed instead.", "The default of show_full_result_count=True generates a query to perform a full count on the table which can be expensive if the table contains a large number of rows."]}, {"name": "admin.ModelAdmin.sortable_by", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.sortable_by", "type": "django.contrib.admin", "text": ["By default, the change list page allows sorting by all model fields (and callables that use the ordering argument to the display() decorator or have the admin_order_field attribute) specified in list_display.", "If you want to disable sorting for some columns, set sortable_by to a collection (e.g. list, tuple, or set) of the subset of list_display that you want to be sortable. An empty collection disables sorting for all columns.", "If you need to specify this list dynamically, implement a get_sortable_by() method instead."]}, {"name": "admin.ModelAdmin.view_on_site", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.view_on_site", "type": "django.contrib.admin", "text": ["Set view_on_site to control whether or not to display the \u201cView on site\u201d link. This link should bring you to a URL where you can display the saved object.", "This value can be either a boolean flag or a callable. If True (the default), the object\u2019s get_absolute_url() method will be used to generate the url.", "If your model has a get_absolute_url() method but you don\u2019t want the \u201cView on site\u201d button to appear, you only need to set view_on_site to False:", "In case it is a callable, it accepts the model instance as a parameter. For example:"]}, {"name": "admin.models.LogEntry", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry", "type": "django.contrib.admin", "text": ["The LogEntry class tracks additions, changes, and deletions of objects done through the admin interface."]}, {"name": "admin.models.LogEntry.action_flag", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.action_flag", "type": "django.contrib.admin", "text": ["The type of action logged: ADDITION, CHANGE, DELETION.", "For example, to get a list of all additions done through the admin:"]}, {"name": "admin.models.LogEntry.action_time", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.action_time", "type": "django.contrib.admin", "text": ["The date and time of the action."]}, {"name": "admin.models.LogEntry.change_message", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.change_message", "type": "django.contrib.admin", "text": ["The detailed description of the modification. In the case of an edit, for example, the message contains a list of the edited fields. The Django admin site formats this content as a JSON structure, so that get_change_message() can recompose a message translated in the current user language. Custom code might set this as a plain string though. You are advised to use the get_change_message() method to retrieve this value instead of accessing it directly."]}, {"name": "admin.models.LogEntry.content_type", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.content_type", "type": "django.contrib.admin", "text": ["The ContentType of the modified object."]}, {"name": "admin.models.LogEntry.get_change_message()", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.get_change_message", "type": "django.contrib.admin", "text": ["Formats and translates change_message into the current user language. Messages created before Django 1.10 will always be displayed in the language in which they were logged."]}, {"name": "admin.models.LogEntry.get_edited_object()", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.get_edited_object", "type": "django.contrib.admin", "text": ["A shortcut that returns the referenced object."]}, {"name": "admin.models.LogEntry.object_id", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.object_id", "type": "django.contrib.admin", "text": ["The textual representation of the modified object\u2019s primary key."]}, {"name": "admin.models.LogEntry.object_repr", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.object_repr", "type": "django.contrib.admin", "text": ["The object`s repr() after the modification."]}, {"name": "admin.models.LogEntry.user", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.user", "type": "django.contrib.admin", "text": ["The user (an AUTH_USER_MODEL instance) who performed the action."]}, {"name": "admin.register()", "path": "ref/contrib/admin/index#django.contrib.admin.register", "type": "django.contrib.admin", "text": ["There is also a decorator for registering your ModelAdmin classes:", "It\u2019s given one or more model classes to register with the ModelAdmin. If you\u2019re using a custom AdminSite, pass it using the site keyword argument:", "You can\u2019t use this decorator if you have to reference your model admin class in its __init__() method, e.g. super(PersonAdmin, self).__init__(*args, **kwargs). You can use super().__init__(*args, **kwargs)."]}, {"name": "admin.StackedInline", "path": "ref/contrib/admin/index#django.contrib.admin.StackedInline", "type": "django.contrib.admin", "text": ["The admin interface has the ability to edit models on the same page as a parent model. These are called inlines. Suppose you have these two models:", "You can edit the books authored by an author on the author page. You add inlines to a model by specifying them in a ModelAdmin.inlines:", "Django provides two subclasses of InlineModelAdmin and they are:", "The difference between these two is merely the template used to render them."]}, {"name": "admin.TabularInline", "path": "ref/contrib/admin/index#django.contrib.admin.TabularInline", "type": "django.contrib.admin", "text": []}, {"name": "admin.views.decorators.staff_member_required()", "path": "ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required", "type": "django.contrib.admin", "text": ["This decorator is used on the admin views that require authorization. A view decorated with this function will have the following behavior:", "Example usage:"]}, {"name": "Advanced testing topics", "path": "topics/testing/advanced", "type": "Guides", "text": ["The RequestFactory shares the same API as the test client. However, instead of behaving like a browser, the RequestFactory provides a way to generate a request instance that can be used as the first argument to any view. This means you can test a view function the same way as you would test any other function \u2013 as a black box, with exactly known inputs, testing for specific outputs.", "The API for the RequestFactory is a slightly restricted subset of the test client API:", "The following is a unit test using the request factory:", "RequestFactory creates WSGI-like requests. If you want to create ASGI-like requests, including having a correct ASGI scope, you can instead use django.test.AsyncRequestFactory.", "This class is directly API-compatible with RequestFactory, with the only difference being that it returns ASGIRequest instances rather than WSGIRequest instances. All of its methods are still synchronous callables.", "In order to test class-based views outside of the request/response cycle you must ensure that they are configured correctly, by calling setup() after instantiation.", "For example, assuming the following class-based view:", "You may directly test the get_context_data() method by first instantiating the view, then passing a request to setup(), before proceeding with your test\u2019s code:", "The ALLOWED_HOSTS setting is validated when running tests. This allows the test client to differentiate between internal and external URLs.", "Projects that support multitenancy or otherwise alter business logic based on the request\u2019s host and use custom host names in tests must include those hosts in ALLOWED_HOSTS.", "The first option to do so is to add the hosts to your settings file. For example, the test suite for docs.djangoproject.com includes the following:", "and the settings file includes a list of the domains supported by the project:", "Another option is to add the required hosts to ALLOWED_HOSTS using override_settings() or modify_settings(). This option may be preferable in standalone apps that can\u2019t package their own settings file or for projects where the list of domains is not static (e.g., subdomains for multitenancy). For example, you could write a test for the domain http://otherserver/ as follows:", "Disabling ALLOWED_HOSTS checking (ALLOWED_HOSTS = ['*']) when running tests prevents the test client from raising a helpful error message if you follow a redirect to an external URL.", "If you\u2019re testing a multiple database configuration with primary/replica (referred to as master/slave by some databases) replication, this strategy of creating test databases poses a problem. When the test databases are created, there won\u2019t be any replication, and as a result, data created on the primary won\u2019t be seen on the replica.", "To compensate for this, Django allows you to define that a database is a test mirror. Consider the following (simplified) example database configuration:", "In this setup, we have two database servers: dbprimary, described by the database alias default, and dbreplica described by the alias replica. As you might expect, dbreplica has been configured by the database administrator as a read replica of dbprimary, so in normal activity, any write to default will appear on replica.", "If Django created two independent test databases, this would break any tests that expected replication to occur. However, the replica database has been configured as a test mirror (using the MIRROR test setting), indicating that under testing, replica should be treated as a mirror of default.", "When the test environment is configured, a test version of replica will not be created. Instead the connection to replica will be redirected to point at default. As a result, writes to default will appear on replica \u2013 but because they are actually the same database, not because there is data replication between the two databases.", "By default, Django will assume all databases depend on the default database and therefore always create the default database first. However, no guarantees are made on the creation order of any other databases in your test setup.", "If your database configuration requires a specific creation order, you can specify the dependencies that exist using the DEPENDENCIES test setting. Consider the following (simplified) example database configuration:", "Under this configuration, the diamonds database will be created first, as it is the only database alias without dependencies. The default and clubs alias will be created next (although the order of creation of this pair is not guaranteed), then hearts, and finally spades.", "If there are any circular dependencies in the DEPENDENCIES definition, an ImproperlyConfigured exception will be raised.", "Warning", "This attribute is a private API. It may be changed or removed without a deprecation period in the future, for instance to accommodate changes in application loading.", "It\u2019s used to optimize Django\u2019s own test suite, which contains hundreds of models but no relations between models in different applications.", "By default, available_apps is set to None. After each test, Django calls flush to reset the database state. This empties all tables and emits the post_migrate signal, which recreates one content type and four permissions for each model. This operation gets expensive proportionally to the number of models.", "Setting available_apps to a list of applications instructs Django to behave as if only the models from these applications were available. The behavior of TransactionTestCase changes as follows:", "Since the database isn\u2019t fully flushed, if a test creates instances of models not included in available_apps, they will leak and they may cause unrelated tests to fail. Be careful with tests that use sessions; the default session engine stores them in the database.", "Since post_migrate isn\u2019t emitted after flushing the database, its state after a TransactionTestCase isn\u2019t the same as after a TestCase: it\u2019s missing the rows created by listeners to post_migrate. Considering the order in which tests are executed, this isn\u2019t an issue, provided either all TransactionTestCase in a given test suite declare available_apps, or none of them.", "available_apps is mandatory in Django\u2019s own test suite.", "Setting reset_sequences = True on a TransactionTestCase will make sure sequences are always reset before the test run:", "Unless you are explicitly testing primary keys sequence numbers, it is recommended that you do not hard code primary key values in tests.", "Using reset_sequences = True will slow down the test, since the primary key reset is a relatively expensive database operation.", "If you have test classes that cannot be run in parallel (e.g. because they share a common resource), you can use django.test.testcases.SerializeMixin to run them sequentially. This mixin uses a filesystem lockfile.", "For example, you can use __file__ to determine that all test classes in the same file that inherit from SerializeMixin will run sequentially:", "If you are writing a reusable application you may want to use the Django test runner to run your own test suite and thus benefit from the Django testing infrastructure.", "A common practice is a tests directory next to the application code, with the following structure:", "Let\u2019s take a look inside a couple of those files:", "This is the script that you invoke to run the test suite. It sets up the Django environment, creates the test database and runs the tests.", "For the sake of clarity, this example contains only the bare minimum necessary to use the Django test runner. You may want to add command-line options for controlling verbosity, passing in specific test labels to run, etc.", "This file contains the Django settings required to run your app\u2019s tests.", "Again, this is a minimal example; your tests may require additional settings to run.", "Since the tests package is included in INSTALLED_APPS when running your tests, you can define test-only models in its models.py file.", "Clearly, unittest is not the only Python testing framework. While Django doesn\u2019t provide explicit support for alternative frameworks, it does provide a way to invoke tests constructed for an alternative framework as if they were normal Django tests.", "When you run ./manage.py test, Django looks at the TEST_RUNNER setting to determine what to do. By default, TEST_RUNNER points to 'django.test.runner.DiscoverRunner'. This class defines the default Django testing behavior. This behavior involves:", "If you define your own test runner class and point TEST_RUNNER at that class, Django will execute your test runner whenever you run ./manage.py test. In this way, it is possible to use any test framework that can be executed from Python code, or to modify the Django test execution process to satisfy whatever testing requirements you may have.", "A test runner is a class defining a run_tests() method. Django ships with a DiscoverRunner class that defines the default Django testing behavior. This class defines the run_tests() entry point, plus a selection of other methods that are used by run_tests() to set up, execute and tear down the test suite.", "DiscoverRunner will search for tests in any file matching pattern.", "top_level can be used to specify the directory containing your top-level Python modules. Usually Django can figure this out automatically, so it\u2019s not necessary to specify this option. If specified, it should generally be the directory containing your manage.py file.", "verbosity determines the amount of notification and debug information that will be printed to the console; 0 is no output, 1 is normal output, and 2 is verbose output.", "If interactive is True, the test suite has permission to ask the user for instructions when the test suite is executed. An example of this behavior would be asking for permission to delete an existing test database. If interactive is False, the test suite must be able to run without any manual intervention.", "If failfast is True, the test suite will stop running after the first test failure is detected.", "If keepdb is True, the test suite will use the existing database, or create one if necessary. If False, a new database will be created, prompting the user to remove the existing one, if present.", "If reverse is True, test cases will be executed in the opposite order. This could be useful to debug tests that aren\u2019t properly isolated and have side effects. Grouping by test class is preserved when using this option. This option can be used in conjunction with --shuffle to reverse the order for a particular random seed.", "debug_mode specifies what the DEBUG setting should be set to prior to running tests.", "parallel specifies the number of processes. If parallel is greater than 1, the test suite will run in parallel processes. If there are fewer test cases than configured processes, Django will reduce the number of processes accordingly. Each process gets its own database. This option requires the third-party tblib package to display tracebacks correctly.", "tags can be used to specify a set of tags for filtering tests. May be combined with exclude_tags.", "exclude_tags can be used to specify a set of tags for excluding tests. May be combined with tags.", "If debug_sql is True, failing test cases will output SQL queries logged to the django.db.backends logger as well as the traceback. If verbosity is 2, then queries in all tests are output.", "test_name_patterns can be used to specify a set of patterns for filtering test methods and classes by their names.", "If pdb is True, a debugger (pdb or ipdb) will be spawned at each test error or failure.", "If buffer is True, outputs from passing tests will be discarded.", "If enable_faulthandler is True, faulthandler will be enabled.", "If timing is True, test timings, including database setup and total run time, will be shown.", "If shuffle is an integer, test cases will be shuffled in a random order prior to execution, using the integer as a random seed. If shuffle is None, the seed will be generated randomly. In both cases, the seed will be logged and set to self.shuffle_seed prior to running tests. This option can be used to help detect tests that aren\u2019t properly isolated. Grouping by test class is preserved when using this option.", "logger can be used to pass a Python Logger object. If provided, the logger will be used to log messages instead of printing to the console. The logger object will respect its logging level rather than the verbosity.", "Django may, from time to time, extend the capabilities of the test runner by adding new arguments. The **kwargs declaration allows for this expansion. If you subclass DiscoverRunner or write your own test runner, ensure it accepts **kwargs.", "Your test runner may also define additional command-line options. Create or override an add_arguments(cls, parser) class method and add custom arguments by calling parser.add_argument() inside the method, so that the test command will be able to use those arguments.", "The enable_faulthandler and timing arguments were added.", "The logger and shuffle arguments were added.", "The class used to build the test suite. By default it is set to unittest.TestSuite. This can be overridden if you wish to implement different logic for collecting tests.", "This is the class of the low-level test runner which is used to execute the individual tests and format the results. By default it is set to unittest.TextTestRunner. Despite the unfortunate similarity in naming conventions, this is not the same type of class as DiscoverRunner, which covers a broader set of responsibilities. You can override this attribute to modify the way tests are run and reported.", "This is the class that loads tests, whether from TestCases or modules or otherwise and bundles them into test suites for the runner to execute. By default it is set to unittest.defaultTestLoader. You can override this attribute if your tests are going to be loaded in unusual ways.", "Run the test suite.", "test_labels allows you to specify which tests to run and supports several formats (see DiscoverRunner.build_suite() for a list of supported formats).", "Deprecated since version 4.0: extra_tests is a list of extra TestCase instances to add to the suite that is executed by the test runner. These extra tests are run in addition to those discovered in the modules listed in test_labels.", "This method should return the number of tests that failed.", "Override this class method to add custom arguments accepted by the test management command. See argparse.ArgumentParser.add_argument() for details about adding arguments to a parser.", "Sets up the test environment by calling setup_test_environment() and setting DEBUG to self.debug_mode (defaults to False).", "Constructs a test suite that matches the test labels provided.", "test_labels is a list of strings describing the tests to be run. A test label can take one of four forms:", "If test_labels has a value of None, the test runner will search for tests in all files below the current directory whose names match its pattern (see above).", "Deprecated since version 4.0: extra_tests is a list of extra TestCase instances to add to the suite that is executed by the test runner. These extra tests are run in addition to those discovered in the modules listed in test_labels.", "Returns a TestSuite instance ready to be run.", "Creates the test databases by calling setup_databases().", "Runs the system checks on the test databases.", "Runs the test suite.", "Returns the result produced by the running the test suite.", "Returns the keyword arguments to instantiate the DiscoverRunner.test_runner with.", "Destroys the test databases, restoring pre-test conditions by calling teardown_databases().", "Restores the pre-test environment.", "Computes and returns a return code based on a test suite, and the result from that test suite.", "If a logger is set, logs the message at the given integer logging level (e.g. logging.DEBUG, logging.INFO, or logging.WARNING). Otherwise, the message is printed to the console, respecting the current verbosity. For example, no message will be printed if the verbosity is 0, INFO and above will be printed if the verbosity is at least 1, and DEBUG will be printed if it is at least 2. The level defaults to logging.INFO.", "To assist in the creation of your own test runner, Django provides a number of utility methods in the django.test.utils module.", "Performs global pre-test setup, such as installing instrumentation for the template rendering system and setting up the dummy email outbox.", "If debug isn\u2019t None, the DEBUG setting is updated to its value.", "Performs global post-test teardown, such as removing instrumentation from the template system and restoring normal email services.", "Creates the test databases.", "Returns a data structure that provides enough detail to undo the changes that have been made. This data will be provided to the teardown_databases() function at the conclusion of testing.", "The aliases argument determines which DATABASES aliases test databases should be set up for. If it\u2019s not provided, it defaults to all of DATABASES aliases.", "The serialized_aliases argument determines what subset of aliases test databases should have their state serialized to allow usage of the serialized_rollback feature. If it\u2019s not provided, it defaults to aliases.", "The time_keeper kwarg was added, and all kwargs were made keyword-only.", "The serialized_aliases kwarg was added.", "Destroys the test databases, restoring pre-test conditions.", "old_config is a data structure defining the changes in the database configuration that need to be reversed. It\u2019s the return value of the setup_databases() method.", "The creation module of the database backend also provides some utilities that can be useful during testing.", "Creates a new test database and runs migrate against it.", "verbosity has the same behavior as in run_tests().", "autoclobber describes the behavior that will occur if a database with the same name as the test database is discovered:", "serialize determines if Django serializes the database into an in-memory JSON string before running tests (used to restore the database state between tests if you don\u2019t have transactions). You can set this to False to speed up creation time if you don\u2019t have any test classes with serialized_rollback=True.", "If you are using the default test runner, you can control this with the the SERIALIZE entry in the TEST dictionary.", "keepdb determines if the test run should use an existing database, or create a new one. If True, the existing database will be used, or created if not present. If False, a new database will be created, prompting the user to remove the existing one, if present.", "Returns the name of the test database that it created.", "create_test_db() has the side effect of modifying the value of NAME in DATABASES to match the name of the test database.", "Destroys the database whose name is the value of NAME in DATABASES, and sets NAME to the value of old_database_name.", "The verbosity argument has the same behavior as for DiscoverRunner.", "If the keepdb argument is True, then the connection to the database will be closed, but the database will not be destroyed.", "Code coverage describes how much source code has been tested. It shows which parts of your code are being exercised by tests and which are not. It\u2019s an important part of testing applications, so it\u2019s strongly recommended to check the coverage of your tests.", "Django can be easily integrated with coverage.py, a tool for measuring code coverage of Python programs. First, install coverage.py. Next, run the following from your project folder containing manage.py:", "This runs your tests and collects coverage data of the executed files in your project. You can see a report of this data by typing following command:", "Note that some Django code was executed while running tests, but it is not listed here because of the source flag passed to the previous command.", "For more options like annotated HTML listings detailing missed lines, see the coverage.py docs."]}, {"name": "Advanced tutorial: How to write reusable apps", "path": "intro/reusable-apps", "type": "Guides: Intro", "text": ["This advanced tutorial begins where Tutorial 7 left off. We\u2019ll be turning our web-poll into a standalone Python package you can reuse in new projects and share with other people.", "If you haven\u2019t recently completed Tutorials 1\u20137, we encourage you to review these so that your example project matches the one described below.", "It\u2019s a lot of work to design, build, test and maintain a web application. Many Python and Django projects share common problems. Wouldn\u2019t it be great if we could save some of this repeated work?", "Reusability is the way of life in Python. The Python Package Index (PyPI) has a vast range of packages you can use in your own Python programs. Check out Django Packages for existing reusable apps you could incorporate in your project. Django itself is also a normal Python package. This means that you can take existing Python packages or Django apps and compose them into your own web project. You only need to write the parts that make your project unique.", "Let\u2019s say you were starting a new project that needed a polls app like the one we\u2019ve been working on. How do you make this app reusable? Luckily, you\u2019re well on the way already. In Tutorial 1, we saw how we could decouple polls from the project-level URLconf using an include. In this tutorial, we\u2019ll take further steps to make the app easy to use in new projects and ready to publish for others to install and use.", "Package? App?", "A Python package provides a way of grouping related Python code for easy reuse. A package contains one or more files of Python code (also known as \u201cmodules\u201d).", "A package can be imported with import foo.bar or from foo import\nbar. For a directory (like polls) to form a package, it must contain a special file __init__.py, even if this file is empty.", "A Django application is a Python package that is specifically intended for use in a Django project. An application may use common Django conventions, such as having models, tests, urls, and views submodules.", "Later on we use the term packaging to describe the process of making a Python package easy for others to install. It can be a little confusing, we know.", "After the previous tutorials, our project should look like this:", "You created mysite/templates in Tutorial 7, and polls/templates in Tutorial 3. Now perhaps it is clearer why we chose to have separate template directories for the project and application: everything that is part of the polls application is in polls. It makes the application self-contained and easier to drop into a new project.", "The polls directory could now be copied into a new Django project and immediately reused. It\u2019s not quite ready to be published though. For that, we need to package the app to make it easy for others to install.", "The current state of Python packaging is a bit muddled with various tools. For this tutorial, we\u2019re going to use setuptools to build our package. It\u2019s the recommended packaging tool (merged with the distribute fork). We\u2019ll also be using pip to install and uninstall it. You should install these two packages now. If you need help, you can refer to how to install Django with pip. You can install setuptools the same way.", "Python packaging refers to preparing your app in a specific format that can be easily installed and used. Django itself is packaged very much like this. For a small app like polls, this process isn\u2019t too difficult.", "First, create a parent directory for polls, outside of your Django project. Call this directory django-polls.", "Choosing a name for your app", "When choosing a name for your package, check resources like PyPI to avoid naming conflicts with existing packages. It\u2019s often useful to prepend django- to your module name when creating a package to distribute. This helps others looking for Django apps identify your app as Django specific.", "Application labels (that is, the final part of the dotted path to application packages) must be unique in INSTALLED_APPS. Avoid using the same label as any of the Django contrib packages, for example auth, admin, or messages.", "Create a file django-polls/README.rst with the following contents:", "Next we\u2019ll create pyproject.toml, setup.cfg, and setup.py files which detail how to build and install the app. A full explanation of these files is beyond the scope of this tutorial, but the setuptools documentation has a good explanation. Create the django-polls/pyproject.toml, django-polls/setup.cfg, and django-polls/setup.py files with the following contents:", "Only Python modules and packages are included in the package by default. To include additional files, we\u2019ll need to create a MANIFEST.in file. The setuptools docs referred to in the previous step discuss this file in more detail. To include the templates, the README.rst and our LICENSE file, create a file django-polls/MANIFEST.in with the following contents:", "It\u2019s optional, but recommended, to include detailed documentation with your app. Create an empty directory django-polls/docs for future documentation. Add an additional line to django-polls/MANIFEST.in:", "Note that the docs directory won\u2019t be included in your package unless you add some files to it. Many Django apps also provide their documentation online through sites like readthedocs.org.", "For more information on packaging, see Python\u2019s Tutorial on Packaging and Distributing Projects.", "Since we moved the polls directory out of the project, it\u2019s no longer working. We\u2019ll now fix this by installing our new django-polls package.", "Installing as a user library", "The following steps install django-polls as a user library. Per-user installs have a lot of advantages over installing the package system-wide, such as being usable on systems where you don\u2019t have administrator access as well as preventing the package from affecting system services and other users of the machine.", "Note that per-user installations can still affect the behavior of system tools that run as that user, so using a virtual environment is a more robust solution (see below).", "To install the package, use pip (you already installed it, right?):", "To uninstall the package, use pip:", "Now that we\u2019ve packaged and tested django-polls, it\u2019s ready to share with the world! If this wasn\u2019t just an example, you could now:", "Earlier, we installed the polls app as a user library. This has some disadvantages:", "Typically, these situations only arise once you\u2019re maintaining several Django projects. When they do, the best solution is to use venv. This tool allows you to maintain multiple isolated Python environments, each with its own copy of the libraries and package namespace."]}, {"name": "Aggregation", "path": "topics/db/aggregation", "type": "Guides", "text": ["The topic guide on Django\u2019s database-abstraction API described the way that you can use Django queries that create, retrieve, update and delete individual objects. However, sometimes you will need to retrieve values that are derived by summarizing or aggregating a collection of objects. This topic guide describes the ways that aggregate values can be generated and returned using Django queries.", "Throughout this guide, we\u2019ll refer to the following models. These models are used to track the inventory for a series of online bookstores:", "In a hurry? Here\u2019s how to do common aggregate queries, assuming the models above:", "Django provides two ways to generate aggregates. The first way is to generate summary values over an entire QuerySet. For example, say you wanted to calculate the average price of all books available for sale. Django\u2019s query syntax provides a means for describing the set of all books:", "What we need is a way to calculate summary values over the objects that belong to this QuerySet. This is done by appending an aggregate() clause onto the QuerySet:", "The all() is redundant in this example, so this could be simplified to:", "The argument to the aggregate() clause describes the aggregate value that we want to compute - in this case, the average of the price field on the Book model. A list of the aggregate functions that are available can be found in the QuerySet reference.", "aggregate() is a terminal clause for a QuerySet that, when invoked, returns a dictionary of name-value pairs. The name is an identifier for the aggregate value; the value is the computed aggregate. The name is automatically generated from the name of the field and the aggregate function. If you want to manually specify a name for the aggregate value, you can do so by providing that name when you specify the aggregate clause:", "If you want to generate more than one aggregate, you add another argument to the aggregate() clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query:", "The second way to generate summary values is to generate an independent summary for each object in a QuerySet. For example, if you are retrieving a list of books, you may want to know how many authors contributed to each book. Each Book has a many-to-many relationship with the Author; we want to summarize this relationship for each book in the QuerySet.", "Per-object summaries can be generated using the annotate() clause. When an annotate() clause is specified, each object in the QuerySet will be annotated with the specified values.", "The syntax for these annotations is identical to that used for the aggregate() clause. Each argument to annotate() describes an aggregate that is to be calculated. For example, to annotate books with the number of authors:", "As with aggregate(), the name for the annotation is automatically derived from the name of the aggregate function and the name of the field being aggregated. You can override this default name by providing an alias when you specify the annotation:", "Unlike aggregate(), annotate() is not a terminal clause. The output of the annotate() clause is a QuerySet; this QuerySet can be modified using any other QuerySet operation, including filter(), order_by(), or even additional calls to annotate().", "Combining multiple aggregations with annotate() will yield the wrong results because joins are used instead of subqueries:", "For most aggregates, there is no way to avoid this problem, however, the Count aggregate has a distinct parameter that may help:", "If in doubt, inspect the SQL query!", "In order to understand what happens in your query, consider inspecting the query property of your QuerySet.", "So far, we have dealt with aggregates over fields that belong to the model being queried. However, sometimes the value you want to aggregate will belong to a model that is related to the model you are querying.", "When specifying the field to be aggregated in an aggregate function, Django will allow you to use the same double underscore notation that is used when referring to related fields in filters. Django will then handle any table joins that are required to retrieve and aggregate the related value.", "For example, to find the price range of books offered in each store, you could use the annotation:", "This tells Django to retrieve the Store model, join (through the many-to-many relationship) with the Book model, and aggregate on the price field of the book model to produce a minimum and maximum value.", "The same rules apply to the aggregate() clause. If you wanted to know the lowest and highest price of any book that is available for sale in any of the stores, you could use the aggregate:", "Join chains can be as deep as you require. For example, to extract the age of the youngest author of any book available for sale, you could issue the query:", "In a way similar to Lookups that span relationships, aggregations and annotations on fields of models or models that are related to the one you are querying can include traversing \u201creverse\u201d relationships. The lowercase name of related models and double-underscores are used here too.", "For example, we can ask for all publishers, annotated with their respective total book stock counters (note how we use 'book' to specify the Publisher -> Book reverse foreign key hop):", "(Every Publisher in the resulting QuerySet will have an extra attribute called book__count.)", "We can also ask for the oldest book of any of those managed by every publisher:", "(The resulting dictionary will have a key called 'oldest_pubdate'. If no such alias were specified, it would be the rather long 'book__pubdate__min'.)", "This doesn\u2019t apply just to foreign keys. It also works with many-to-many relations. For example, we can ask for every author, annotated with the total number of pages considering all the books the author has (co-)authored (note how we use 'book' to specify the Author -> Book reverse many-to-many hop):", "(Every Author in the resulting QuerySet will have an extra attribute called total_pages. If no such alias were specified, it would be the rather long book__pages__sum.)", "Or ask for the average rating of all the books written by author(s) we have on file:", "(The resulting dictionary will have a key called 'average_rating'. If no such alias were specified, it would be the rather long 'book__rating__avg'.)", "Aggregates can also participate in filters. Any filter() (or exclude()) applied to normal model fields will have the effect of constraining the objects that are considered for aggregation.", "When used with an annotate() clause, a filter has the effect of constraining the objects for which an annotation is calculated. For example, you can generate an annotated list of all books that have a title starting with \u201cDjango\u201d using the query:", "When used with an aggregate() clause, a filter has the effect of constraining the objects over which the aggregate is calculated. For example, you can generate the average price of all books with a title that starts with \u201cDjango\u201d using the query:", "Annotated values can also be filtered. The alias for the annotation can be used in filter() and exclude() clauses in the same way as any other model field.", "For example, to generate a list of books that have more than one author, you can issue the query:", "This query generates an annotated result set, and then generates a filter based upon that annotation.", "If you need two annotations with two separate filters you can use the filter argument with any aggregate. For example, to generate a list of authors with a count of highly rated books:", "Each Author in the result set will have the num_books and highly_rated_books attributes. See also Conditional aggregation.", "Choosing between filter and QuerySet.filter()", "Avoid using the filter argument with a single annotation or aggregation. It\u2019s more efficient to use QuerySet.filter() to exclude rows. The aggregation filter argument is only useful when using two or more aggregations over the same relations with different conditionals.", "When developing a complex query that involves both annotate() and filter() clauses, pay particular attention to the order in which the clauses are applied to the QuerySet.", "When an annotate() clause is applied to a query, the annotation is computed over the state of the query up to the point where the annotation is requested. The practical implication of this is that filter() and annotate() are not commutative operations.", "Given:", "Here\u2019s an example with the Count aggregate:", "Both queries return a list of publishers that have at least one book with a rating exceeding 3.0, hence publisher C is excluded.", "In the first query, the annotation precedes the filter, so the filter has no effect on the annotation. distinct=True is required to avoid a query bug.", "The second query counts the number of books that have a rating exceeding 3.0 for each publisher. The filter precedes the annotation, so the filter constrains the objects considered when calculating the annotation.", "Here\u2019s another example with the Avg aggregate:", "The first query asks for the average rating of all a publisher\u2019s books for publisher\u2019s that have at least one book with a rating exceeding 3.0. The second query asks for the average of a publisher\u2019s book\u2019s ratings for only those ratings exceeding 3.0.", "It\u2019s difficult to intuit how the ORM will translate complex querysets into SQL queries so when in doubt, inspect the SQL with str(queryset.query) and write plenty of tests.", "Annotations can be used as a basis for ordering. When you define an order_by() clause, the aggregates you provide can reference any alias defined as part of an annotate() clause in the query.", "For example, to order a QuerySet of books by the number of authors that have contributed to the book, you could use the following query:", "Ordinarily, annotations are generated on a per-object basis - an annotated QuerySet will return one result for each object in the original QuerySet. However, when a values() clause is used to constrain the columns that are returned in the result set, the method for evaluating annotations is slightly different. Instead of returning an annotated result for each result in the original QuerySet, the original results are grouped according to the unique combinations of the fields specified in the values() clause. An annotation is then provided for each unique group; the annotation is computed over all members of the group.", "For example, consider an author query that attempts to find out the average rating of books written by each author:", "This will return one result for each author in the database, annotated with their average book rating.", "However, the result will be slightly different if you use a values() clause:", "In this example, the authors will be grouped by name, so you will only get an annotated result for each unique author name. This means if you have two authors with the same name, their results will be merged into a single result in the output of the query; the average will be computed as the average over the books written by both authors.", "As with the filter() clause, the order in which annotate() and values() clauses are applied to a query is significant. If the values() clause precedes the annotate(), the annotation will be computed using the grouping described by the values() clause.", "However, if the annotate() clause precedes the values() clause, the annotations will be generated over the entire query set. In this case, the values() clause only constrains the fields that are generated on output.", "For example, if we reverse the order of the values() and annotate() clause from our previous example:", "This will now yield one unique result for each author; however, only the author\u2019s name and the average_rating annotation will be returned in the output data.", "You should also note that average_rating has been explicitly included in the list of values to be returned. This is required because of the ordering of the values() and annotate() clause.", "If the values() clause precedes the annotate() clause, any annotations will be automatically added to the result set. However, if the values() clause is applied after the annotate() clause, you need to explicitly include the aggregate column.", "Fields that are mentioned in the order_by() part of a queryset are used when selecting the output data, even if they are not otherwise specified in the values() call. These extra fields are used to group \u201clike\u201d results together and they can make otherwise identical result rows appear to be separate. This shows up, particularly, when counting things.", "By way of example, suppose you have a model like this:", "If you want to count how many times each distinct data value appears in an ordered queryset, you might try this:", "\u2026which will group the Item objects by their common data values and then count the number of id values in each group. Except that it won\u2019t quite work. The ordering by name will also play a part in the grouping, so this query will group by distinct (data, name) pairs, which isn\u2019t what you want. Instead, you should construct this queryset:", "\u2026clearing any ordering in the query. You could also order by, say, data without any harmful effects, since that is already playing a role in the query.", "This behavior is the same as that noted in the queryset documentation for distinct() and the general rule is the same: normally you won\u2019t want extra columns playing a part in the result, so clear out the ordering, or at least make sure it\u2019s restricted only to those fields you also select in a values() call.", "Note", "You might reasonably ask why Django doesn\u2019t remove the extraneous columns for you. The main reason is consistency with distinct() and other places: Django never removes ordering constraints that you have specified (and we can\u2019t change those other methods\u2019 behavior, as that would violate our API stability policy).", "You can also generate an aggregate on the result of an annotation. When you define an aggregate() clause, the aggregates you provide can reference any alias defined as part of an annotate() clause in the query.", "For example, if you wanted to calculate the average number of authors per book you first annotate the set of books with the author count, then aggregate that author count, referencing the annotation field:"]}, {"name": "API Reference", "path": "ref/index", "type": "API", "text": []}, {"name": "Applications", "path": "ref/applications", "type": "API", "text": ["Django contains a registry of installed applications that stores configuration and provides introspection. It also maintains a list of available models.", "This registry is called apps and it\u2019s available in django.apps:", "The term project describes a Django web application. The project Python package is defined primarily by a settings module, but it usually contains other things. For example, when you run django-admin startproject mysite you\u2019ll get a mysite project directory that contains a mysite Python package with settings.py, urls.py, asgi.py and wsgi.py. The project package is often extended to include things like fixtures, CSS, and templates which aren\u2019t tied to a particular application.", "A project\u2019s root directory (the one that contains manage.py) is usually the container for all of a project\u2019s applications which aren\u2019t installed separately.", "The term application describes a Python package that provides some set of features. Applications may be reused in various projects.", "Applications include some combination of models, views, templates, template tags, static files, URLs, middleware, etc. They\u2019re generally wired into projects with the INSTALLED_APPS setting and optionally with other mechanisms such as URLconfs, the MIDDLEWARE setting, or template inheritance.", "It is important to understand that a Django application is a set of code that interacts with various parts of the framework. There\u2019s no such thing as an Application object. However, there\u2019s a few places where Django needs to interact with installed applications, mainly for configuration and also for introspection. That\u2019s why the application registry maintains metadata in an AppConfig instance for each installed application.", "There\u2019s no restriction that a project package can\u2019t also be considered an application and have models, etc. (which would require adding it to INSTALLED_APPS).", "To configure an application, create an apps.py module inside the application, then define a subclass of AppConfig there.", "When INSTALLED_APPS contains the dotted path to an application module, by default, if Django finds exactly one AppConfig subclass in the apps.py submodule, it uses that configuration for the application. This behavior may be disabled by setting AppConfig.default to False.", "If the apps.py module contains more than one AppConfig subclass, Django will look for a single one where AppConfig.default is True.", "If no AppConfig subclass is found, the base AppConfig class will be used.", "Alternatively, INSTALLED_APPS may contain the dotted path to a configuration class to specify it explicitly:", "If you\u2019re creating a pluggable app called \u201cRock \u2019n\u2019 roll\u201d, here\u2019s how you would provide a proper name for the admin:", "RockNRollConfig will be loaded automatically when INSTALLED_APPS contains 'rock_n_roll'. If you need to prevent this, set default to False in the class definition.", "You can provide several AppConfig subclasses with different behaviors. To tell Django which one to use by default, set default to True in its definition. If your users want to pick a non-default configuration, they must replace 'rock_n_roll' with the dotted path to that specific class in their INSTALLED_APPS setting.", "The AppConfig.name attribute tells Django which application this configuration applies to. You can define any other attribute documented in the AppConfig API reference.", "AppConfig subclasses may be defined anywhere. The apps.py convention merely allows Django to load them automatically when INSTALLED_APPS contains the path to an application module rather than the path to a configuration class.", "Note", "If your code imports the application registry in an application\u2019s __init__.py, the name apps will clash with the apps submodule. The best practice is to move that code to a submodule and import it. A workaround is to import the registry under a different name:", "In previous versions, a default_app_config variable in the application module was used to identify the default application configuration class.", "If you\u2019re using \u201cRock \u2019n\u2019 roll\u201d in a project called anthology, but you want it to show up as \u201cJazz Manouche\u201d instead, you can provide your own configuration:", "This example shows project-specific configuration classes located in a submodule called apps.py. This is a convention, not a requirement. AppConfig subclasses may be defined anywhere.", "In this situation, INSTALLED_APPS must contain the dotted path to the configuration class because it lives outside of an application and thus cannot be automatically detected.", "Application configuration objects store metadata for an application. Some attributes can be configured in AppConfig subclasses. Others are set by Django and read-only.", "Full Python path to the application, e.g. 'django.contrib.admin'.", "This attribute defines which application the configuration applies to. It must be set in all AppConfig subclasses.", "It must be unique across a Django project.", "Short name for the application, e.g. 'admin'", "This attribute allows relabeling an application when two applications have conflicting labels. It defaults to the last component of name. It should be a valid Python identifier.", "It must be unique across a Django project.", "Human-readable name for the application, e.g. \u201cAdministration\u201d.", "This attribute defaults to label.title().", "Filesystem path to the application directory, e.g. '/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'.", "In most cases, Django can automatically detect and set this, but you can also provide an explicit override as a class attribute on your AppConfig subclass. In a few situations this is required; for instance if the app package is a namespace package with multiple paths.", "Set this attribute to False to prevent Django from selecting a configuration class automatically. This is useful when apps.py defines only one AppConfig subclass but you don\u2019t want Django to use it by default.", "Set this attribute to True to tell Django to select a configuration class automatically. This is useful when apps.py defines more than one AppConfig subclass and you want Django to use one of them by default.", "By default, this attribute isn\u2019t set.", "The implicit primary key type to add to models within this app. You can use this to keep AutoField as the primary key type for third party applications.", "By default, this is the value of DEFAULT_AUTO_FIELD.", "Root module for the application, e.g. <module 'django.contrib.admin' from\n'django/contrib/admin/__init__.py'>.", "Module containing the models, e.g. <module 'django.contrib.admin.models'\nfrom 'django/contrib/admin/models.py'>.", "It may be None if the application doesn\u2019t contain a models module. Note that the database related signals such as pre_migrate and post_migrate are only emitted for applications that have a models module.", "Returns an iterable of Model classes for this application.", "Requires the app registry to be fully populated.", "Returns the Model with the given model_name. model_name is case-insensitive.", "Raises LookupError if no such model exists in this application.", "Requires the app registry to be fully populated unless the require_ready argument is set to False. require_ready behaves exactly as in apps.get_model().", "Subclasses can override this method to perform initialization tasks such as registering signals. It is called as soon as the registry is fully populated.", "Although you can\u2019t import models at the module-level where AppConfig classes are defined, you can import them in ready(), using either an import statement or get_model().", "If you\u2019re registering model signals, you can refer to the sender by its string label instead of using the model class itself.", "Example:", "Warning", "Although you can access model classes as described above, avoid interacting with the database in your ready() implementation. This includes model methods that execute queries (save(), delete(), manager methods etc.), and also raw SQL queries via django.db.connection. Your ready() method will run during startup of every management command. For example, even though the test database configuration is separate from the production settings, manage.py test would still execute some queries against your production database!", "Note", "In the usual initialization process, the ready method is only called once by Django. But in some corner cases, particularly in tests which are fiddling with installed applications, ready might be called more than once. In that case, either write idempotent methods, or put a flag on your AppConfig classes to prevent re-running code which should be executed exactly one time.", "Python packages without an __init__.py file are known as \u201cnamespace packages\u201d and may be spread across multiple directories at different locations on sys.path (see PEP 420).", "Django applications require a single base filesystem path where Django (depending on configuration) will search for templates, static assets, etc. Thus, namespace packages may only be Django applications if one of the following is true:", "If neither of these conditions is met, Django will raise ImproperlyConfigured.", "The application registry provides the following public API. Methods that aren\u2019t listed below are considered private and may change without notice.", "Boolean attribute that is set to True after the registry is fully populated and all AppConfig.ready() methods are called.", "Returns an iterable of AppConfig instances.", "Returns an AppConfig for the application with the given app_label. Raises LookupError if no such application exists.", "Checks whether an application with the given name exists in the registry. app_name is the full name of the app, e.g. 'django.contrib.admin'.", "Returns the Model with the given app_label and model_name. As a shortcut, this method also accepts a single argument in the form app_label.model_name. model_name is case-insensitive.", "Raises LookupError if no such application or model exists. Raises ValueError when called with a single argument that doesn\u2019t contain exactly one dot.", "Requires the app registry to be fully populated unless the require_ready argument is set to False.", "Setting require_ready to False allows looking up models while the app registry is being populated, specifically during the second phase where it imports models. Then get_model() has the same effect as importing the model. The main use case is to configure model classes with settings, such as AUTH_USER_MODEL.", "When require_ready is False, get_model() returns a model class that may not be fully functional (reverse accessors may be missing, for example) until the app registry is fully populated. For this reason, it\u2019s best to leave require_ready to the default value of True whenever possible.", "When Django starts, django.setup() is responsible for populating the application registry.", "Configures Django by:", "This function is called automatically:", "It must be called explicitly in other cases, for instance in plain Python scripts.", "The application registry is initialized in three stages. At each stage, Django processes all applications in the order of INSTALLED_APPS.", "First Django imports each item in INSTALLED_APPS.", "If it\u2019s an application configuration class, Django imports the root package of the application, defined by its name attribute. If it\u2019s a Python package, Django looks for an application configuration in an apps.py submodule, or else creates a default application configuration.", "At this stage, your code shouldn\u2019t import any models!", "In other words, your applications\u2019 root packages and the modules that define your application configuration classes shouldn\u2019t import any models, even indirectly.", "Strictly speaking, Django allows importing models once their application configuration is loaded. However, in order to avoid needless constraints on the order of INSTALLED_APPS, it\u2019s strongly recommended not import any models at this stage.", "Once this stage completes, APIs that operate on application configurations such as get_app_config() become usable.", "Then Django attempts to import the models submodule of each application, if there is one.", "You must define or import all models in your application\u2019s models.py or models/__init__.py. Otherwise, the application registry may not be fully populated at this point, which could cause the ORM to malfunction.", "Once this stage completes, APIs that operate on models such as get_model() become usable.", "Here are some common problems that you may encounter during initialization:", "AppRegistryNotReady: This happens when importing an application configuration or a models module triggers code that depends on the app registry.", "For example, gettext() uses the app registry to look up translation catalogs in applications. To translate at import time, you need gettext_lazy() instead. (Using gettext() would be a bug, because the translation would happen at import time, rather than at each request depending on the active language.)", "Executing database queries with the ORM at import time in models modules will also trigger this exception. The ORM cannot function properly until all models are available.", "This exception also happens if you forget to call django.setup() in a standalone Python script.", "ImportError: cannot import name ... This happens if the import sequence ends up in a loop.", "To eliminate such problems, you should minimize dependencies between your models modules and do as little work as possible at import time. To avoid executing code at import time, you can move it into a function and cache its results. The code will be executed when you first need its results. This concept is known as \u201clazy evaluation\u201d."]}, {"name": "apps.AppConfig", "path": "ref/applications#django.apps.AppConfig", "type": "django.apps", "text": ["Application configuration objects store metadata for an application. Some attributes can be configured in AppConfig subclasses. Others are set by Django and read-only."]}, {"name": "apps.AppConfig.default", "path": "ref/applications#django.apps.AppConfig.default", "type": "django.apps", "text": ["Set this attribute to False to prevent Django from selecting a configuration class automatically. This is useful when apps.py defines only one AppConfig subclass but you don\u2019t want Django to use it by default.", "Set this attribute to True to tell Django to select a configuration class automatically. This is useful when apps.py defines more than one AppConfig subclass and you want Django to use one of them by default.", "By default, this attribute isn\u2019t set."]}, {"name": "apps.AppConfig.default_auto_field", "path": "ref/applications#django.apps.AppConfig.default_auto_field", "type": "django.apps", "text": ["The implicit primary key type to add to models within this app. You can use this to keep AutoField as the primary key type for third party applications.", "By default, this is the value of DEFAULT_AUTO_FIELD."]}, {"name": "apps.AppConfig.get_model()", "path": "ref/applications#django.apps.AppConfig.get_model", "type": "django.apps", "text": ["Returns the Model with the given model_name. model_name is case-insensitive.", "Raises LookupError if no such model exists in this application.", "Requires the app registry to be fully populated unless the require_ready argument is set to False. require_ready behaves exactly as in apps.get_model()."]}, {"name": "apps.AppConfig.get_models()", "path": "ref/applications#django.apps.AppConfig.get_models", "type": "django.apps", "text": ["Returns an iterable of Model classes for this application.", "Requires the app registry to be fully populated."]}, {"name": "apps.AppConfig.label", "path": "ref/applications#django.apps.AppConfig.label", "type": "django.apps", "text": ["Short name for the application, e.g. 'admin'", "This attribute allows relabeling an application when two applications have conflicting labels. It defaults to the last component of name. It should be a valid Python identifier.", "It must be unique across a Django project."]}, {"name": "apps.AppConfig.models_module", "path": "ref/applications#django.apps.AppConfig.models_module", "type": "django.apps", "text": ["Module containing the models, e.g. <module 'django.contrib.admin.models'\nfrom 'django/contrib/admin/models.py'>.", "It may be None if the application doesn\u2019t contain a models module. Note that the database related signals such as pre_migrate and post_migrate are only emitted for applications that have a models module."]}, {"name": "apps.AppConfig.module", "path": "ref/applications#django.apps.AppConfig.module", "type": "django.apps", "text": ["Root module for the application, e.g. <module 'django.contrib.admin' from\n'django/contrib/admin/__init__.py'>."]}, {"name": "apps.AppConfig.name", "path": "ref/applications#django.apps.AppConfig.name", "type": "django.apps", "text": ["Full Python path to the application, e.g. 'django.contrib.admin'.", "This attribute defines which application the configuration applies to. It must be set in all AppConfig subclasses.", "It must be unique across a Django project."]}, {"name": "apps.AppConfig.path", "path": "ref/applications#django.apps.AppConfig.path", "type": "django.apps", "text": ["Filesystem path to the application directory, e.g. '/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'.", "In most cases, Django can automatically detect and set this, but you can also provide an explicit override as a class attribute on your AppConfig subclass. In a few situations this is required; for instance if the app package is a namespace package with multiple paths."]}, {"name": "apps.AppConfig.ready()", "path": "ref/applications#django.apps.AppConfig.ready", "type": "django.apps", "text": ["Subclasses can override this method to perform initialization tasks such as registering signals. It is called as soon as the registry is fully populated.", "Although you can\u2019t import models at the module-level where AppConfig classes are defined, you can import them in ready(), using either an import statement or get_model().", "If you\u2019re registering model signals, you can refer to the sender by its string label instead of using the model class itself.", "Example:", "Warning", "Although you can access model classes as described above, avoid interacting with the database in your ready() implementation. This includes model methods that execute queries (save(), delete(), manager methods etc.), and also raw SQL queries via django.db.connection. Your ready() method will run during startup of every management command. For example, even though the test database configuration is separate from the production settings, manage.py test would still execute some queries against your production database!", "Note", "In the usual initialization process, the ready method is only called once by Django. But in some corner cases, particularly in tests which are fiddling with installed applications, ready might be called more than once. In that case, either write idempotent methods, or put a flag on your AppConfig classes to prevent re-running code which should be executed exactly one time."]}, {"name": "apps.AppConfig.verbose_name", "path": "ref/applications#django.apps.AppConfig.verbose_name", "type": "django.apps", "text": ["Human-readable name for the application, e.g. \u201cAdministration\u201d.", "This attribute defaults to label.title()."]}, {"name": "apps.apps", "path": "ref/applications#django.apps.apps", "type": "django.apps", "text": ["The application registry provides the following public API. Methods that aren\u2019t listed below are considered private and may change without notice."]}, {"name": "apps.apps.get_app_config()", "path": "ref/applications#django.apps.apps.get_app_config", "type": "django.apps", "text": ["Returns an AppConfig for the application with the given app_label. Raises LookupError if no such application exists."]}, {"name": "apps.apps.get_app_configs()", "path": "ref/applications#django.apps.apps.get_app_configs", "type": "django.apps", "text": ["Returns an iterable of AppConfig instances."]}, {"name": "apps.apps.get_model()", "path": "ref/applications#django.apps.apps.get_model", "type": "django.apps", "text": ["Returns the Model with the given app_label and model_name. As a shortcut, this method also accepts a single argument in the form app_label.model_name. model_name is case-insensitive.", "Raises LookupError if no such application or model exists. Raises ValueError when called with a single argument that doesn\u2019t contain exactly one dot.", "Requires the app registry to be fully populated unless the require_ready argument is set to False.", "Setting require_ready to False allows looking up models while the app registry is being populated, specifically during the second phase where it imports models. Then get_model() has the same effect as importing the model. The main use case is to configure model classes with settings, such as AUTH_USER_MODEL.", "When require_ready is False, get_model() returns a model class that may not be fully functional (reverse accessors may be missing, for example) until the app registry is fully populated. For this reason, it\u2019s best to leave require_ready to the default value of True whenever possible."]}, {"name": "apps.apps.is_installed()", "path": "ref/applications#django.apps.apps.is_installed", "type": "django.apps", "text": ["Checks whether an application with the given name exists in the registry. app_name is the full name of the app, e.g. 'django.contrib.admin'."]}, {"name": "apps.apps.ready", "path": "ref/applications#django.apps.apps.ready", "type": "django.apps", "text": ["Boolean attribute that is set to True after the registry is fully populated and all AppConfig.ready() methods are called."]}, {"name": "Asynchronous support", "path": "topics/async", "type": "Guides", "text": ["Django has support for writing asynchronous (\u201casync\u201d) views, along with an entirely async-enabled request stack if you are running under ASGI. Async views will still work under WSGI, but with performance penalties, and without the ability to have efficient long-running requests.", "We\u2019re still working on async support for the ORM and other parts of Django. You can expect to see this in future releases. For now, you can use the sync_to_async() adapter to interact with the sync parts of Django. There is also a whole range of async-native Python libraries that you can integrate with.", "Any view can be declared async by making the callable part of it return a coroutine - commonly, this is done using async def. For a function-based view, this means declaring the whole view using async def. For a class-based view, this means making its __call__() method an async def (not its __init__() or as_view()).", "Note", "Django uses asyncio.iscoroutinefunction to test if your view is asynchronous or not. If you implement your own method of returning a coroutine, ensure you set the _is_coroutine attribute of the view to asyncio.coroutines._is_coroutine so this function returns True.", "Under a WSGI server, async views will run in their own, one-off event loop. This means you can use async features, like concurrent async HTTP requests, without any issues, but you will not get the benefits of an async stack.", "The main benefits are the ability to service hundreds of connections without using Python threads. This allows you to use slow streaming, long-polling, and other exciting response types.", "If you want to use these, you will need to deploy Django using ASGI instead.", "Warning", "You will only get the benefits of a fully-asynchronous request stack if you have no synchronous middleware loaded into your site. If there is a piece of synchronous middleware, then Django must use a thread per request to safely emulate a synchronous environment for it.", "Middleware can be built to support both sync and async contexts. Some of Django\u2019s middleware is built like this, but not all. To see what middleware Django has to adapt, you can turn on debug logging for the django.request logger and look for log messages about \u201cSynchronous middleware \u2026 adapted\u201d.", "In both ASGI and WSGI mode, you can still safely use asynchronous support to run code concurrently rather than serially. This is especially handy when dealing with external APIs or data stores.", "If you want to call a part of Django that is still synchronous, like the ORM, you will need to wrap it in a sync_to_async() call. For example:", "You may find it easier to move any ORM code into its own function and call that entire function using sync_to_async(). For example:", "If you accidentally try to call a part of Django that is still synchronous-only from an async view, you will trigger Django\u2019s asynchronous safety protection to protect your data from corruption.", "When running in a mode that does not match the view (e.g. an async view under WSGI, or a traditional sync view under ASGI), Django must emulate the other call style to allow your code to run. This context-switch causes a small performance penalty of around a millisecond.", "This is also true of middleware. Django will attempt to minimize the number of context-switches between sync and async. If you have an ASGI server, but all your middleware and views are synchronous, it will switch just once, before it enters the middleware stack.", "However, if you put synchronous middleware between an ASGI server and an asynchronous view, it will have to switch into sync mode for the middleware and then back to async mode for the view. Django will also hold the sync thread open for middleware exception propagation. This may not be noticeable at first, but adding this penalty of one thread per request can remove any async performance advantage.", "You should do your own performance testing to see what effect ASGI versus WSGI has on your code. In some cases, there may be a performance increase even for a purely synchronous codebase under ASGI because the request-handling code is still all running asynchronously. In general you will only want to enable ASGI mode if you have asynchronous code in your project.", "Certain key parts of Django are not able to operate safely in an async environment, as they have global state that is not coroutine-aware. These parts of Django are classified as \u201casync-unsafe\u201d, and are protected from execution in an async environment. The ORM is the main example, but there are other parts that are also protected in this way.", "If you try to run any of these parts from a thread where there is a running event loop, you will get a SynchronousOnlyOperation error. Note that you don\u2019t have to be inside an async function directly to have this error occur. If you have called a sync function directly from an async function, without using sync_to_async() or similar, then it can also occur. This is because your code is still running in a thread with an active event loop, even though it may not be declared as async code.", "If you encounter this error, you should fix your code to not call the offending code from an async context. Instead, write your code that talks to async-unsafe functions in its own, sync function, and call that using asgiref.sync.sync_to_async() (or any other way of running sync code in its own thread).", "The async context can be imposed upon you by the environment in which you are running your Django code. For example, Jupyter notebooks and IPython interactive shells both transparently provide an active event loop so that it is easier to interact with asynchronous APIs.", "If you\u2019re using an IPython shell, you can disable this event loop by running:", "as a command at the IPython prompt. This will allow you to run synchronous code without generating SynchronousOnlyOperation errors; however, you also won\u2019t be able to await asynchronous APIs. To turn the event loop back on, run:", "If you\u2019re in an environment other than IPython (or you can\u2019t turn off autoawait in IPython for some reason), you are certain there is no chance of your code being run concurrently, and you absolutely need to run your sync code from an async context, then you can disable the warning by setting the DJANGO_ALLOW_ASYNC_UNSAFE environment variable to any value.", "Warning", "If you enable this option and there is concurrent access to the async-unsafe parts of Django, you may suffer data loss or corruption. Be very careful and do not use this in production environments.", "If you need to do this from within Python, do that with os.environ:", "It is necessary to adapt the calling style when calling sync code from an async context, or vice-versa. For this there are two adapter functions, from the asgiref.sync module: async_to_sync() and sync_to_async(). They are used to transition between the calling styles while preserving compatibility.", "These adapter functions are widely used in Django. The asgiref package itself is part of the Django project, and it is automatically installed as a dependency when you install Django with pip.", "Takes an async function and returns a sync function that wraps it. Can be used as either a direct wrapper or a decorator:", "The async function is run in the event loop for the current thread, if one is present. If there is no current event loop, a new event loop is spun up specifically for the single async invocation and shut down again once it completes. In either situation, the async function will execute on a different thread to the calling code.", "Threadlocals and contextvars values are preserved across the boundary in both directions.", "async_to_sync() is essentially a more powerful version of the asyncio.run() function in Python\u2019s standard library. As well as ensuring threadlocals work, it also enables the thread_sensitive mode of sync_to_async() when that wrapper is used below it.", "Takes a sync function and returns an async function that wraps it. Can be used as either a direct wrapper or a decorator:", "Threadlocals and contextvars values are preserved across the boundary in both directions.", "Sync functions tend to be written assuming they all run in the main thread, so sync_to_async() has two threading modes:", "Warning", "asgiref version 3.3.0 changed the default value of the thread_sensitive parameter to True. This is a safer default, and in many cases interacting with Django the correct value, but be sure to evaluate uses of sync_to_async() if updating asgiref from a prior version.", "Thread-sensitive mode is quite special, and does a lot of work to run all functions in the same thread. Note, though, that it relies on usage of async_to_sync() above it in the stack to correctly run things on the main thread. If you use asyncio.run() or similar, it will fall back to running thread-sensitive functions in a single, shared thread, but this will not be the main thread.", "The reason this is needed in Django is that many libraries, specifically database adapters, require that they are accessed in the same thread that they were created in. Also a lot of existing Django code assumes it all runs in the same thread, e.g. middleware adding things to a request for later use in views.", "Rather than introduce potential compatibility issues with this code, we instead opted to add this mode so that all existing Django sync code runs in the same thread and thus is fully compatible with async mode. Note that sync code will always be in a different thread to any async code that is calling it, so you should avoid passing raw database handles or other thread-sensitive references around."]}, {"name": "auth.authenticate()", "path": "topics/auth/default#django.contrib.auth.authenticate", "type": "django.contrib.auth", "text": ["Use authenticate() to verify a set of credentials. It takes credentials as keyword arguments, username and password for the default case, checks them against each authentication backend, and returns a User object if the credentials are valid for a backend. If the credentials aren\u2019t valid for any backend or if a backend raises PermissionDenied, it returns None. For example:", "request is an optional HttpRequest which is passed on the authenticate() method of the authentication backends.", "Note", "This is a low level way to authenticate a set of credentials; for example, it\u2019s used by the RemoteUserMiddleware. Unless you are writing your own authentication system, you probably won\u2019t use this. Rather if you\u2019re looking for a way to login a user, use the LoginView."]}, {"name": "auth.backends.AllowAllUsersModelBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.AllowAllUsersModelBackend", "type": "django.contrib.auth", "text": ["Same as ModelBackend except that it doesn\u2019t reject inactive users because user_can_authenticate() always returns True.", "When using this backend, you\u2019ll likely want to customize the AuthenticationForm used by the LoginView by overriding the confirm_login_allowed() method as it rejects inactive users."]}, {"name": "auth.backends.AllowAllUsersRemoteUserBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.AllowAllUsersRemoteUserBackend", "type": "django.contrib.auth", "text": ["Same as RemoteUserBackend except that it doesn\u2019t reject inactive users because user_can_authenticate always returns True."]}, {"name": "auth.backends.BaseBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend", "type": "django.contrib.auth", "text": ["A base class that provides default implementations for all required methods. By default, it will reject any user and provide no permissions.", "Returns an empty set.", "Returns an empty set.", "Uses get_user_permissions() and get_group_permissions() to get the set of permission strings the user_obj has.", "Uses get_all_permissions() to check if user_obj has the permission string perm."]}, {"name": "auth.backends.BaseBackend.get_all_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.get_all_permissions", "type": "django.contrib.auth", "text": ["Uses get_user_permissions() and get_group_permissions() to get the set of permission strings the user_obj has."]}, {"name": "auth.backends.BaseBackend.get_group_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.get_group_permissions", "type": "django.contrib.auth", "text": ["Returns an empty set."]}, {"name": "auth.backends.BaseBackend.get_user_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.get_user_permissions", "type": "django.contrib.auth", "text": ["Returns an empty set."]}, {"name": "auth.backends.BaseBackend.has_perm()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.has_perm", "type": "django.contrib.auth", "text": ["Uses get_all_permissions() to check if user_obj has the permission string perm."]}, {"name": "auth.backends.ModelBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend", "type": "django.contrib.auth", "text": ["This is the default authentication backend used by Django. It authenticates using credentials consisting of a user identifier and password. For Django\u2019s default user model, the user identifier is the username, for custom user models it is the field specified by USERNAME_FIELD (see Customizing Users and authentication).", "It also handles the default permissions model as defined for User and PermissionsMixin.", "has_perm(), get_all_permissions(), get_user_permissions(), and get_group_permissions() allow an object to be passed as a parameter for object-specific permissions, but this backend does not implement them other than returning an empty set of permissions if obj is not None.", "with_perm() also allows an object to be passed as a parameter, but unlike others methods it returns an empty queryset if obj is not None.", "Tries to authenticate username with password by calling User.check_password. If no username is provided, it tries to fetch a username from kwargs using the key CustomUser.USERNAME_FIELD. Returns an authenticated user or None.", "request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend).", "Returns the set of permission strings the user_obj has from their own user permissions. Returns an empty set if is_anonymous or is_active is False.", "Returns the set of permission strings the user_obj has from the permissions of the groups they belong. Returns an empty set if is_anonymous or is_active is False.", "Returns the set of permission strings the user_obj has, including both user permissions and group permissions. Returns an empty set if is_anonymous or is_active is False.", "Uses get_all_permissions() to check if user_obj has the permission string perm. Returns False if the user is not is_active.", "Returns whether the user_obj has any permissions on the app app_label.", "Returns whether the user is allowed to authenticate. To match the behavior of AuthenticationForm which prohibits inactive users from logging in, this method returns False for users with is_active=False. Custom user models that don\u2019t have an is_active field are allowed.", "Returns all active users who have the permission perm either in the form of \"<app label>.<permission codename>\" or a Permission instance. Returns an empty queryset if no users who have the perm found.", "If is_active is True (default), returns only active users, or if False, returns only inactive users. Use None to return all users irrespective of active state.", "If include_superusers is True (default), the result will include superusers."]}, {"name": "auth.backends.ModelBackend.authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.authenticate", "type": "django.contrib.auth", "text": ["Tries to authenticate username with password by calling User.check_password. If no username is provided, it tries to fetch a username from kwargs using the key CustomUser.USERNAME_FIELD. Returns an authenticated user or None.", "request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend)."]}, {"name": "auth.backends.ModelBackend.get_all_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.get_all_permissions", "type": "django.contrib.auth", "text": ["Returns the set of permission strings the user_obj has, including both user permissions and group permissions. Returns an empty set if is_anonymous or is_active is False."]}, {"name": "auth.backends.ModelBackend.get_group_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.get_group_permissions", "type": "django.contrib.auth", "text": ["Returns the set of permission strings the user_obj has from the permissions of the groups they belong. Returns an empty set if is_anonymous or is_active is False."]}, {"name": "auth.backends.ModelBackend.get_user_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.get_user_permissions", "type": "django.contrib.auth", "text": ["Returns the set of permission strings the user_obj has from their own user permissions. Returns an empty set if is_anonymous or is_active is False."]}, {"name": "auth.backends.ModelBackend.has_module_perms()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.has_module_perms", "type": "django.contrib.auth", "text": ["Returns whether the user_obj has any permissions on the app app_label."]}, {"name": "auth.backends.ModelBackend.has_perm()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.has_perm", "type": "django.contrib.auth", "text": ["Uses get_all_permissions() to check if user_obj has the permission string perm. Returns False if the user is not is_active."]}, {"name": "auth.backends.ModelBackend.user_can_authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.user_can_authenticate", "type": "django.contrib.auth", "text": ["Returns whether the user is allowed to authenticate. To match the behavior of AuthenticationForm which prohibits inactive users from logging in, this method returns False for users with is_active=False. Custom user models that don\u2019t have an is_active field are allowed."]}, {"name": "auth.backends.ModelBackend.with_perm()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.with_perm", "type": "django.contrib.auth", "text": ["Returns all active users who have the permission perm either in the form of \"<app label>.<permission codename>\" or a Permission instance. Returns an empty queryset if no users who have the perm found.", "If is_active is True (default), returns only active users, or if False, returns only inactive users. Use None to return all users irrespective of active state.", "If include_superusers is True (default), the result will include superusers."]}, {"name": "auth.backends.RemoteUserBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend", "type": "django.contrib.auth", "text": ["Use this backend to take advantage of external-to-Django-handled authentication. It authenticates using usernames passed in request.META['REMOTE_USER']. See the Authenticating against REMOTE_USER documentation.", "If you need more control, you can create your own authentication backend that inherits from this class and override these attributes or methods:", "True or False. Determines whether or not a user object is created if not already in the database Defaults to True.", "The username passed as remote_user is considered trusted. This method returns the user object with the given username, creating a new user object if create_unknown_user is True.", "Returns None if create_unknown_user is False and a User object with the given username is not found in the database.", "request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend).", "Performs any cleaning on the username (e.g. stripping LDAP DN information) prior to using it to get or create a user object. Returns the cleaned username.", "Configures a newly created user. This method is called immediately after a new user is created, and can be used to perform custom setup actions, such as setting the user\u2019s groups based on attributes in an LDAP directory. Returns the user object.", "request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend).", "Returns whether the user is allowed to authenticate. This method returns False for users with is_active=False. Custom user models that don\u2019t have an is_active field are allowed."]}, {"name": "auth.backends.RemoteUserBackend.authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.authenticate", "type": "django.contrib.auth", "text": ["The username passed as remote_user is considered trusted. This method returns the user object with the given username, creating a new user object if create_unknown_user is True.", "Returns None if create_unknown_user is False and a User object with the given username is not found in the database.", "request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend)."]}, {"name": "auth.backends.RemoteUserBackend.clean_username()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.clean_username", "type": "django.contrib.auth", "text": ["Performs any cleaning on the username (e.g. stripping LDAP DN information) prior to using it to get or create a user object. Returns the cleaned username."]}, {"name": "auth.backends.RemoteUserBackend.configure_user()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.configure_user", "type": "django.contrib.auth", "text": ["Configures a newly created user. This method is called immediately after a new user is created, and can be used to perform custom setup actions, such as setting the user\u2019s groups based on attributes in an LDAP directory. Returns the user object.", "request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend)."]}, {"name": "auth.backends.RemoteUserBackend.create_unknown_user", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user", "type": "django.contrib.auth", "text": ["True or False. Determines whether or not a user object is created if not already in the database Defaults to True."]}, {"name": "auth.backends.RemoteUserBackend.user_can_authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.user_can_authenticate", "type": "django.contrib.auth", "text": ["Returns whether the user is allowed to authenticate. This method returns False for users with is_active=False. Custom user models that don\u2019t have an is_active field are allowed."]}, {"name": "auth.context_processors.auth()", "path": "ref/templates/api#django.contrib.auth.context_processors.auth", "type": "django.contrib.auth", "text": []}, {"name": "auth.decorators.login_required()", "path": "topics/auth/default#django.contrib.auth.decorators.login_required", "type": "django.contrib.auth", "text": ["As a shortcut, you can use the convenient login_required() decorator:", "login_required() does the following:", "By default, the path that the user should be redirected to upon successful authentication is stored in a query string parameter called \"next\". If you would prefer to use a different name for this parameter, login_required() takes an optional redirect_field_name parameter:", "Note that if you provide a value to redirect_field_name, you will most likely need to customize your login template as well, since the template context variable which stores the redirect path will use the value of redirect_field_name as its key rather than \"next\" (the default).", "login_required() also takes an optional login_url parameter. Example:", "Note that if you don\u2019t specify the login_url parameter, you\u2019ll need to ensure that the settings.LOGIN_URL and your login view are properly associated. For example, using the defaults, add the following lines to your URLconf:", "The settings.LOGIN_URL also accepts view function names and named URL patterns. This allows you to freely remap your login view within your URLconf without having to update the setting."]}, {"name": "auth.decorators.permission_required()", "path": "topics/auth/default#django.contrib.auth.decorators.permission_required", "type": "django.contrib.auth", "text": ["It\u2019s a relatively common task to check whether a user has a particular permission. For that reason, Django provides a shortcut for that case: the permission_required() decorator.:", "Just like the has_perm() method, permission names take the form \"<app label>.<permission codename>\" (i.e. polls.add_choice for a permission on a model in the polls application).", "The decorator may also take an iterable of permissions, in which case the user must have all of the permissions in order to access the view.", "Note that permission_required() also takes an optional login_url parameter:", "As in the login_required() decorator, login_url defaults to settings.LOGIN_URL.", "If the raise_exception parameter is given, the decorator will raise PermissionDenied, prompting the 403 (HTTP Forbidden) view instead of redirecting to the login page.", "If you want to use raise_exception but also give your users a chance to login first, you can add the login_required() decorator:", "This also avoids a redirect loop when LoginView\u2019s redirect_authenticated_user=True and the logged-in user doesn\u2019t have all of the required permissions."]}, {"name": "auth.decorators.user_passes_test()", "path": "topics/auth/default#django.contrib.auth.decorators.user_passes_test", "type": "django.contrib.auth", "text": ["As a shortcut, you can use the convenient user_passes_test decorator which performs a redirect when the callable returns False:", "user_passes_test() takes a required argument: a callable that takes a User object and returns True if the user is allowed to view the page. Note that user_passes_test() does not automatically check that the User is not anonymous.", "user_passes_test() takes two optional arguments:", "For example:"]}, {"name": "auth.forms.AdminPasswordChangeForm", "path": "topics/auth/default#django.contrib.auth.forms.AdminPasswordChangeForm", "type": "django.contrib.auth", "text": ["A form used in the admin interface to change a user\u2019s password.", "Takes the user as the first positional argument."]}, {"name": "auth.forms.AuthenticationForm", "path": "topics/auth/default#django.contrib.auth.forms.AuthenticationForm", "type": "django.contrib.auth", "text": ["A form for logging a user in.", "Takes request as its first positional argument, which is stored on the form instance for use by sub-classes.", "By default, AuthenticationForm rejects users whose is_active flag is set to False. You may override this behavior with a custom policy to determine which users can log in. Do this with a custom form that subclasses AuthenticationForm and overrides the confirm_login_allowed() method. This method should raise a ValidationError if the given user may not log in.", "For example, to allow all users to log in regardless of \u201cactive\u201d status:", "(In this case, you\u2019ll also need to use an authentication backend that allows inactive users, such as AllowAllUsersModelBackend.)", "Or to allow only some active users to log in:"]}, {"name": "auth.forms.AuthenticationForm.confirm_login_allowed()", "path": "topics/auth/default#django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed", "type": "django.contrib.auth", "text": ["By default, AuthenticationForm rejects users whose is_active flag is set to False. You may override this behavior with a custom policy to determine which users can log in. Do this with a custom form that subclasses AuthenticationForm and overrides the confirm_login_allowed() method. This method should raise a ValidationError if the given user may not log in.", "For example, to allow all users to log in regardless of \u201cactive\u201d status:", "(In this case, you\u2019ll also need to use an authentication backend that allows inactive users, such as AllowAllUsersModelBackend.)", "Or to allow only some active users to log in:"]}, {"name": "auth.forms.PasswordChangeForm", "path": "topics/auth/default#django.contrib.auth.forms.PasswordChangeForm", "type": "django.contrib.auth", "text": ["A form for allowing a user to change their password."]}, {"name": "auth.forms.PasswordResetForm", "path": "topics/auth/default#django.contrib.auth.forms.PasswordResetForm", "type": "django.contrib.auth", "text": ["A form for generating and emailing a one-time use link to reset a user\u2019s password.", "Uses the arguments to send an EmailMultiAlternatives. Can be overridden to customize how the email is sent to the user.", "By default, save() populates the context with the same variables that PasswordResetView passes to its email context."]}, {"name": "auth.forms.PasswordResetForm.send_mail()", "path": "topics/auth/default#django.contrib.auth.forms.PasswordResetForm.send_mail", "type": "django.contrib.auth", "text": ["Uses the arguments to send an EmailMultiAlternatives. Can be overridden to customize how the email is sent to the user.", "By default, save() populates the context with the same variables that PasswordResetView passes to its email context."]}, {"name": "auth.forms.SetPasswordForm", "path": "topics/auth/default#django.contrib.auth.forms.SetPasswordForm", "type": "django.contrib.auth", "text": ["A form that lets a user change their password without entering the old password."]}, {"name": "auth.forms.UserChangeForm", "path": "topics/auth/default#django.contrib.auth.forms.UserChangeForm", "type": "django.contrib.auth", "text": ["A form used in the admin interface to change a user\u2019s information and permissions."]}, {"name": "auth.forms.UserCreationForm", "path": "topics/auth/default#django.contrib.auth.forms.UserCreationForm", "type": "django.contrib.auth", "text": ["A ModelForm for creating a new user.", "It has three fields: username (from the user model), password1, and password2. It verifies that password1 and password2 match, validates the password using validate_password(), and sets the user\u2019s password using set_password()."]}, {"name": "auth.get_user()", "path": "ref/contrib/auth#django.contrib.auth.get_user", "type": "django.contrib.auth", "text": ["Returns the user model instance associated with the given request\u2019s session.", "It checks if the authentication backend stored in the session is present in AUTHENTICATION_BACKENDS. If so, it uses the backend\u2019s get_user() method to retrieve the user model instance and then verifies the session by calling the user model\u2019s get_session_auth_hash() method.", "Returns an instance of AnonymousUser if the authentication backend stored in the session is no longer in AUTHENTICATION_BACKENDS, if a user isn\u2019t returned by the backend\u2019s get_user() method, or if the session auth hash doesn\u2019t validate."]}, {"name": "auth.get_user_model()", "path": "topics/auth/customizing#django.contrib.auth.get_user_model", "type": "django.contrib.auth", "text": ["Instead of referring to User directly, you should reference the user model using django.contrib.auth.get_user_model(). This method will return the currently active user model \u2013 the custom user model if one is specified, or User otherwise.", "When you define a foreign key or many-to-many relations to the user model, you should specify the custom model using the AUTH_USER_MODEL setting. For example:", "When connecting to signals sent by the user model, you should specify the custom model using the AUTH_USER_MODEL setting. For example:", "Generally speaking, it\u2019s easiest to refer to the user model with the AUTH_USER_MODEL setting in code that\u2019s executed at import time, however, it\u2019s also possible to call get_user_model() while Django is importing models, so you could use models.ForeignKey(get_user_model(), ...).", "If your app is tested with multiple user models, using @override_settings(AUTH_USER_MODEL=...) for example, and you cache the result of get_user_model() in a module-level variable, you may need to listen to the setting_changed signal to clear the cache. For example:"]}, {"name": "auth.hashers.check_password()", "path": "topics/auth/passwords#django.contrib.auth.hashers.check_password", "type": "django.contrib.auth", "text": ["If you\u2019d like to manually authenticate a user by comparing a plain-text password to the hashed password in the database, use the convenience function check_password(). It takes two arguments: the plain-text password to check, and the full value of a user\u2019s password field in the database to check against, and returns True if they match, False otherwise."]}, {"name": "auth.hashers.is_password_usable()", "path": "topics/auth/passwords#django.contrib.auth.hashers.is_password_usable", "type": "django.contrib.auth", "text": ["Returns False if the password is a result of User.set_unusable_password()."]}, {"name": "auth.hashers.make_password()", "path": "topics/auth/passwords#django.contrib.auth.hashers.make_password", "type": "django.contrib.auth", "text": ["Creates a hashed password in the format used by this application. It takes one mandatory argument: the password in plain-text (string or bytes). Optionally, you can provide a salt and a hashing algorithm to use, if you don\u2019t want to use the defaults (first entry of PASSWORD_HASHERS setting). See Included hashers for the algorithm name of each hasher. If the password argument is None, an unusable password is returned (one that will never be accepted by check_password())."]}, {"name": "auth.is_active", "path": "topics/auth/customizing#django.contrib.auth.is_active", "type": "django.contrib.auth", "text": ["Returns True if the user account is currently active."]}, {"name": "auth.is_staff", "path": "topics/auth/customizing#django.contrib.auth.is_staff", "type": "django.contrib.auth", "text": ["Returns True if the user is allowed to have access to the admin site."]}, {"name": "auth.login()", "path": "topics/auth/default#django.contrib.auth.login", "type": "django.contrib.auth", "text": ["To log a user in, from a view, use login(). It takes an HttpRequest object and a User object. login() saves the user\u2019s ID in the session, using Django\u2019s session framework.", "Note that any data set during the anonymous session is retained in the session after a user logs in.", "This example shows how you might use both authenticate() and login():"]}, {"name": "auth.logout()", "path": "topics/auth/default#django.contrib.auth.logout", "type": "django.contrib.auth", "text": ["To log out a user who has been logged in via django.contrib.auth.login(), use django.contrib.auth.logout() within your view. It takes an HttpRequest object and has no return value. Example:", "Note that logout() doesn\u2019t throw any errors if the user wasn\u2019t logged in.", "When you call logout(), the session data for the current request is completely cleaned out. All existing data is removed. This is to prevent another person from using the same web browser to log in and have access to the previous user\u2019s session data. If you want to put anything into the session that will be available to the user immediately after logging out, do that after calling django.contrib.auth.logout()."]}, {"name": "auth.middleware.AuthenticationMiddleware", "path": "ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware", "type": "django.contrib.auth", "text": []}, {"name": "auth.middleware.PersistentRemoteUserMiddleware", "path": "ref/middleware#django.contrib.auth.middleware.PersistentRemoteUserMiddleware", "type": "django.contrib.auth", "text": []}, {"name": "auth.middleware.RemoteUserMiddleware", "path": "ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware", "type": "django.contrib.auth", "text": []}, {"name": "auth.mixins.AccessMixin", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin", "type": "django.contrib.auth", "text": ["Default return value for get_login_url(). Defaults to None in which case get_login_url() falls back to settings.LOGIN_URL.", "Default return value for get_permission_denied_message(). Defaults to an empty string.", "Default return value for get_redirect_field_name(). Defaults to \"next\".", "If this attribute is set to True, a PermissionDenied exception is raised when the conditions are not met. When False (the default), anonymous users are redirected to the login page.", "Returns the URL that users who don\u2019t pass the test will be redirected to. Returns login_url if set, or settings.LOGIN_URL otherwise.", "When raise_exception is True, this method can be used to control the error message passed to the error handler for display to the user. Returns the permission_denied_message attribute by default.", "Returns the name of the query parameter that will contain the URL the user should be redirected to after a successful login. If you set this to None, a query parameter won\u2019t be added. Returns the redirect_field_name attribute by default.", "Depending on the value of raise_exception, the method either raises a PermissionDenied exception or redirects the user to the login_url, optionally including the redirect_field_name if it is set."]}, {"name": "auth.mixins.AccessMixin.get_login_url()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.get_login_url", "type": "django.contrib.auth", "text": ["Returns the URL that users who don\u2019t pass the test will be redirected to. Returns login_url if set, or settings.LOGIN_URL otherwise."]}, {"name": "auth.mixins.AccessMixin.get_permission_denied_message()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.get_permission_denied_message", "type": "django.contrib.auth", "text": ["When raise_exception is True, this method can be used to control the error message passed to the error handler for display to the user. Returns the permission_denied_message attribute by default."]}, {"name": "auth.mixins.AccessMixin.get_redirect_field_name()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.get_redirect_field_name", "type": "django.contrib.auth", "text": ["Returns the name of the query parameter that will contain the URL the user should be redirected to after a successful login. If you set this to None, a query parameter won\u2019t be added. Returns the redirect_field_name attribute by default."]}, {"name": "auth.mixins.AccessMixin.handle_no_permission()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.handle_no_permission", "type": "django.contrib.auth", "text": ["Depending on the value of raise_exception, the method either raises a PermissionDenied exception or redirects the user to the login_url, optionally including the redirect_field_name if it is set."]}, {"name": "auth.mixins.AccessMixin.login_url", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.login_url", "type": "django.contrib.auth", "text": ["Default return value for get_login_url(). Defaults to None in which case get_login_url() falls back to settings.LOGIN_URL."]}, {"name": "auth.mixins.AccessMixin.permission_denied_message", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.permission_denied_message", "type": "django.contrib.auth", "text": ["Default return value for get_permission_denied_message(). Defaults to an empty string."]}, {"name": "auth.mixins.AccessMixin.raise_exception", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.raise_exception", "type": "django.contrib.auth", "text": ["If this attribute is set to True, a PermissionDenied exception is raised when the conditions are not met. When False (the default), anonymous users are redirected to the login page."]}, {"name": "auth.mixins.AccessMixin.redirect_field_name", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.redirect_field_name", "type": "django.contrib.auth", "text": ["Default return value for get_redirect_field_name(). Defaults to \"next\"."]}, {"name": "auth.mixins.LoginRequiredMixin", "path": "topics/auth/default#django.contrib.auth.mixins.LoginRequiredMixin", "type": "django.contrib.auth", "text": ["If a view is using this mixin, all requests by non-authenticated users will be redirected to the login page or shown an HTTP 403 Forbidden error, depending on the raise_exception parameter.", "You can set any of the parameters of AccessMixin to customize the handling of unauthorized users:"]}, {"name": "auth.mixins.PermissionRequiredMixin", "path": "topics/auth/default#django.contrib.auth.mixins.PermissionRequiredMixin", "type": "django.contrib.auth", "text": ["This mixin, just like the permission_required decorator, checks whether the user accessing a view has all given permissions. You should specify the permission (or an iterable of permissions) using the permission_required parameter:", "You can set any of the parameters of AccessMixin to customize the handling of unauthorized users.", "You may also override these methods:", "Returns an iterable of permission names used by the mixin. Defaults to the permission_required attribute, converted to a tuple if necessary.", "Returns a boolean denoting whether the current user has permission to execute the decorated view. By default, this returns the result of calling has_perms() with the list of permissions returned by get_permission_required()."]}, {"name": "auth.mixins.PermissionRequiredMixin.get_permission_required()", "path": "topics/auth/default#django.contrib.auth.mixins.PermissionRequiredMixin.get_permission_required", "type": "django.contrib.auth", "text": ["Returns an iterable of permission names used by the mixin. Defaults to the permission_required attribute, converted to a tuple if necessary."]}, {"name": "auth.mixins.PermissionRequiredMixin.has_permission()", "path": "topics/auth/default#django.contrib.auth.mixins.PermissionRequiredMixin.has_permission", "type": "django.contrib.auth", "text": ["Returns a boolean denoting whether the current user has permission to execute the decorated view. By default, this returns the result of calling has_perms() with the list of permissions returned by get_permission_required()."]}, {"name": "auth.mixins.UserPassesTestMixin", "path": "topics/auth/default#django.contrib.auth.mixins.UserPassesTestMixin", "type": "django.contrib.auth", "text": ["When using class-based views, you can use the UserPassesTestMixin to do this.", "You have to override the test_func() method of the class to provide the test that is performed. Furthermore, you can set any of the parameters of AccessMixin to customize the handling of unauthorized users:", "You can also override the get_test_func() method to have the mixin use a differently named function for its checks (instead of test_func()).", "Stacking UserPassesTestMixin", "Due to the way UserPassesTestMixin is implemented, you cannot stack them in your inheritance list. The following does NOT work:", "If TestMixin1 would call super() and take that result into account, TestMixin1 wouldn\u2019t work standalone anymore."]}, {"name": "auth.mixins.UserPassesTestMixin.get_test_func()", "path": "topics/auth/default#django.contrib.auth.mixins.UserPassesTestMixin.get_test_func", "type": "django.contrib.auth", "text": ["You can also override the get_test_func() method to have the mixin use a differently named function for its checks (instead of test_func())."]}, {"name": "auth.mixins.UserPassesTestMixin.test_func()", "path": "topics/auth/default#django.contrib.auth.mixins.UserPassesTestMixin.test_func", "type": "django.contrib.auth", "text": ["You have to override the test_func() method of the class to provide the test that is performed. Furthermore, you can set any of the parameters of AccessMixin to customize the handling of unauthorized users:"]}, {"name": "auth.models.AbstractBaseUser", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser", "type": "django.contrib.auth", "text": ["Returns the value of the field nominated by USERNAME_FIELD.", "Normalizes the username by calling normalize_username(). If you override this method, be sure to call super() to retain the normalization.", "Returns the name of the email field specified by the EMAIL_FIELD attribute. Defaults to 'email' if EMAIL_FIELD isn\u2019t specified.", "Applies NFKC Unicode normalization to usernames so that visually identical characters with different Unicode code points are considered identical.", "Read-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn\u2019t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance.", "Read-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute.", "Sets the user\u2019s password to the given raw string, taking care of the password hashing. Doesn\u2019t save the AbstractBaseUser object.", "When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used.", "Returns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)", "Marks the user as having no password set. This isn\u2019t the same as having a blank string for a password. check_password() for this user will never return True. Doesn\u2019t save the AbstractBaseUser object.", "You may need this if authentication for your application takes place against an existing external source such as an LDAP directory.", "Returns False if set_unusable_password() has been called for this user.", "Returns an HMAC of the password field. Used for Session invalidation on password change."]}, {"name": "auth.models.AbstractBaseUser.check_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.check_password", "type": "django.contrib.auth", "text": ["Returns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)"]}, {"name": "auth.models.AbstractBaseUser.clean()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.clean", "type": "django.contrib.auth", "text": ["Normalizes the username by calling normalize_username(). If you override this method, be sure to call super() to retain the normalization."]}, {"name": "auth.models.AbstractBaseUser.get_session_auth_hash()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash", "type": "django.contrib.auth", "text": ["Returns an HMAC of the password field. Used for Session invalidation on password change."]}, {"name": "auth.models.AbstractBaseUser.get_username()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_username", "type": "django.contrib.auth", "text": ["Returns the value of the field nominated by USERNAME_FIELD."]}, {"name": "auth.models.AbstractBaseUser.has_usable_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.has_usable_password", "type": "django.contrib.auth", "text": ["Returns False if set_unusable_password() has been called for this user."]}, {"name": "auth.models.AbstractBaseUser.is_anonymous", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.is_anonymous", "type": "django.contrib.auth", "text": ["Read-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute."]}, {"name": "auth.models.AbstractBaseUser.is_authenticated", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.is_authenticated", "type": "django.contrib.auth", "text": ["Read-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn\u2019t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance."]}, {"name": "auth.models.AbstractBaseUser.set_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.set_password", "type": "django.contrib.auth", "text": ["Sets the user\u2019s password to the given raw string, taking care of the password hashing. Doesn\u2019t save the AbstractBaseUser object.", "When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used."]}, {"name": "auth.models.AbstractBaseUser.set_unusable_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.set_unusable_password", "type": "django.contrib.auth", "text": ["Marks the user as having no password set. This isn\u2019t the same as having a blank string for a password. check_password() for this user will never return True. Doesn\u2019t save the AbstractBaseUser object.", "You may need this if authentication for your application takes place against an existing external source such as an LDAP directory."]}, {"name": "auth.models.AbstractUser", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractUser", "type": "django.contrib.auth", "text": ["Normalizes the email by calling BaseUserManager.normalize_email(). If you override this method, be sure to call super() to retain the normalization."]}, {"name": "auth.models.AbstractUser.clean()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractUser.clean", "type": "django.contrib.auth", "text": ["Normalizes the email by calling BaseUserManager.normalize_email(). If you override this method, be sure to call super() to retain the normalization."]}, {"name": "auth.models.AnonymousUser", "path": "ref/contrib/auth#django.contrib.auth.models.AnonymousUser", "type": "django.contrib.auth", "text": ["django.contrib.auth.models.AnonymousUser is a class that implements the django.contrib.auth.models.User interface, with these differences:"]}, {"name": "auth.models.BaseUserManager", "path": "topics/auth/customizing#django.contrib.auth.models.BaseUserManager", "type": "django.contrib.auth", "text": ["Normalizes email addresses by lowercasing the domain portion of the email address.", "Retrieves a user instance using the contents of the field nominated by USERNAME_FIELD.", "Returns a random password with the given length and given string of allowed characters. Note that the default value of allowed_chars doesn\u2019t contain letters that can cause user confusion, including:"]}, {"name": "auth.models.BaseUserManager.get_by_natural_key()", "path": "topics/auth/customizing#django.contrib.auth.models.BaseUserManager.get_by_natural_key", "type": "django.contrib.auth", "text": ["Retrieves a user instance using the contents of the field nominated by USERNAME_FIELD."]}, {"name": "auth.models.BaseUserManager.make_random_password()", "path": "topics/auth/customizing#django.contrib.auth.models.BaseUserManager.make_random_password", "type": "django.contrib.auth", "text": ["Returns a random password with the given length and given string of allowed characters. Note that the default value of allowed_chars doesn\u2019t contain letters that can cause user confusion, including:"]}, {"name": "auth.models.CustomUser", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser", "type": "django.contrib.auth", "text": ["A string describing the name of the field on the user model that is used as the unique identifier. This will usually be a username of some kind, but it can also be an email address, or any other unique identifier. The field must be unique (i.e., have unique=True set in its definition), unless you use a custom authentication backend that can support non-unique usernames.", "In the following example, the field identifier is used as the identifying field:", "A string describing the name of the email field on the User model. This value is returned by get_email_field_name().", "A list of the field names that will be prompted for when creating a user via the createsuperuser management command. The user will be prompted to supply a value for each of these fields. It must include any field for which blank is False or undefined and may include additional fields you want prompted for when a user is created interactively. REQUIRED_FIELDS has no effect in other parts of Django, like creating a user in the admin.", "For example, here is the partial definition for a user model that defines two required fields - a date of birth and height:", "Note", "REQUIRED_FIELDS must contain all required fields on your user model, but should not contain the USERNAME_FIELD or password as these fields will always be prompted for.", "A boolean attribute that indicates whether the user is considered \u201cactive\u201d. This attribute is provided as an attribute on AbstractBaseUser defaulting to True. How you choose to implement it will depend on the details of your chosen auth backends. See the documentation of the is_active attribute on the built-in\nuser model for details.", "Optional. A longer formal identifier for the user such as their full name. If implemented, this appears alongside the username in an object\u2019s history in django.contrib.admin.", "Optional. A short, informal identifier for the user such as their first name. If implemented, this replaces the username in the greeting to the user in the header of django.contrib.admin.", "Importing AbstractBaseUser", "AbstractBaseUser and BaseUserManager are importable from django.contrib.auth.base_user so that they can be imported without including django.contrib.auth in INSTALLED_APPS."]}, {"name": "auth.models.CustomUser.EMAIL_FIELD", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.EMAIL_FIELD", "type": "django.contrib.auth", "text": ["A string describing the name of the email field on the User model. This value is returned by get_email_field_name()."]}, {"name": "auth.models.CustomUser.get_full_name()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.get_full_name", "type": "django.contrib.auth", "text": ["Optional. A longer formal identifier for the user such as their full name. If implemented, this appears alongside the username in an object\u2019s history in django.contrib.admin."]}, {"name": "auth.models.CustomUser.get_short_name()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.get_short_name", "type": "django.contrib.auth", "text": ["Optional. A short, informal identifier for the user such as their first name. If implemented, this replaces the username in the greeting to the user in the header of django.contrib.admin."]}, {"name": "auth.models.CustomUser.is_active", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.is_active", "type": "django.contrib.auth", "text": ["A boolean attribute that indicates whether the user is considered \u201cactive\u201d. This attribute is provided as an attribute on AbstractBaseUser defaulting to True. How you choose to implement it will depend on the details of your chosen auth backends. See the documentation of the is_active attribute on the built-in\nuser model for details."]}, {"name": "auth.models.CustomUser.REQUIRED_FIELDS", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS", "type": "django.contrib.auth", "text": ["A list of the field names that will be prompted for when creating a user via the createsuperuser management command. The user will be prompted to supply a value for each of these fields. It must include any field for which blank is False or undefined and may include additional fields you want prompted for when a user is created interactively. REQUIRED_FIELDS has no effect in other parts of Django, like creating a user in the admin.", "For example, here is the partial definition for a user model that defines two required fields - a date of birth and height:", "Note", "REQUIRED_FIELDS must contain all required fields on your user model, but should not contain the USERNAME_FIELD or password as these fields will always be prompted for."]}, {"name": "auth.models.CustomUser.USERNAME_FIELD", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.USERNAME_FIELD", "type": "django.contrib.auth", "text": ["A string describing the name of the field on the user model that is used as the unique identifier. This will usually be a username of some kind, but it can also be an email address, or any other unique identifier. The field must be unique (i.e., have unique=True set in its definition), unless you use a custom authentication backend that can support non-unique usernames.", "In the following example, the field identifier is used as the identifying field:"]}, {"name": "auth.models.CustomUserManager", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUserManager", "type": "django.contrib.auth", "text": ["The prototype of create_user() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_user should be defined as:", "The prototype of create_superuser() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_superuser should be defined as:"]}, {"name": "auth.models.CustomUserManager.create_superuser()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUserManager.create_superuser", "type": "django.contrib.auth", "text": ["The prototype of create_superuser() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_superuser should be defined as:"]}, {"name": "auth.models.CustomUserManager.create_user()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUserManager.create_user", "type": "django.contrib.auth", "text": ["The prototype of create_user() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_user should be defined as:"]}, {"name": "auth.models.Group", "path": "ref/contrib/auth#django.contrib.auth.models.Group", "type": "django.contrib.auth", "text": []}, {"name": "auth.models.Group.name", "path": "ref/contrib/auth#django.contrib.auth.models.Group.name", "type": "django.contrib.auth", "text": ["Required. 150 characters or fewer. Any characters are permitted. Example: 'Awesome Users'."]}, {"name": "auth.models.Group.permissions", "path": "ref/contrib/auth#django.contrib.auth.models.Group.permissions", "type": "django.contrib.auth", "text": ["Many-to-many field to Permission:"]}, {"name": "auth.models.Permission", "path": "ref/contrib/auth#django.contrib.auth.models.Permission", "type": "django.contrib.auth", "text": []}, {"name": "auth.models.Permission.codename", "path": "ref/contrib/auth#django.contrib.auth.models.Permission.codename", "type": "django.contrib.auth", "text": ["Required. 100 characters or fewer. Example: 'can_vote'."]}, {"name": "auth.models.Permission.content_type", "path": "ref/contrib/auth#django.contrib.auth.models.Permission.content_type", "type": "django.contrib.auth", "text": ["Required. A reference to the django_content_type database table, which contains a record for each installed model."]}, {"name": "auth.models.Permission.name", "path": "ref/contrib/auth#django.contrib.auth.models.Permission.name", "type": "django.contrib.auth", "text": ["Required. 255 characters or fewer. Example: 'Can vote'."]}, {"name": "auth.models.PermissionsMixin", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin", "type": "django.contrib.auth", "text": ["Boolean. Designates that this user has all permissions without explicitly assigning them.", "Returns a set of permission strings that the user has directly.", "If obj is passed in, only returns the user permissions for this specific object.", "Returns a set of permission strings that the user has, through their groups.", "If obj is passed in, only returns the group permissions for this specific object.", "Returns a set of permission strings that the user has, both through group and user permissions.", "If obj is passed in, only returns the permissions for this specific object.", "Returns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\" (see permissions). If User.is_active and is_superuser are both True, this method always returns True.", "If obj is passed in, this method won\u2019t check for a permission for the model, but for this specific object.", "Returns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If User.is_active and is_superuser are both True, this method always returns True.", "If obj is passed in, this method won\u2019t check for permissions for the model, but for the specific object.", "Returns True if the user has any permissions in the given package (the Django app label). If User.is_active and is_superuser are both True, this method always returns True."]}, {"name": "auth.models.PermissionsMixin.get_all_permissions()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.get_all_permissions", "type": "django.contrib.auth", "text": ["Returns a set of permission strings that the user has, both through group and user permissions.", "If obj is passed in, only returns the permissions for this specific object."]}, {"name": "auth.models.PermissionsMixin.get_group_permissions()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.get_group_permissions", "type": "django.contrib.auth", "text": ["Returns a set of permission strings that the user has, through their groups.", "If obj is passed in, only returns the group permissions for this specific object."]}, {"name": "auth.models.PermissionsMixin.get_user_permissions()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.get_user_permissions", "type": "django.contrib.auth", "text": ["Returns a set of permission strings that the user has directly.", "If obj is passed in, only returns the user permissions for this specific object."]}, {"name": "auth.models.PermissionsMixin.has_module_perms()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.has_module_perms", "type": "django.contrib.auth", "text": ["Returns True if the user has any permissions in the given package (the Django app label). If User.is_active and is_superuser are both True, this method always returns True."]}, {"name": "auth.models.PermissionsMixin.has_perm()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.has_perm", "type": "django.contrib.auth", "text": ["Returns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\" (see permissions). If User.is_active and is_superuser are both True, this method always returns True.", "If obj is passed in, this method won\u2019t check for a permission for the model, but for this specific object."]}, {"name": "auth.models.PermissionsMixin.has_perms()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.has_perms", "type": "django.contrib.auth", "text": ["Returns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If User.is_active and is_superuser are both True, this method always returns True.", "If obj is passed in, this method won\u2019t check for permissions for the model, but for the specific object."]}, {"name": "auth.models.PermissionsMixin.is_superuser", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.is_superuser", "type": "django.contrib.auth", "text": ["Boolean. Designates that this user has all permissions without explicitly assigning them."]}, {"name": "auth.models.User", "path": "ref/contrib/auth#django.contrib.auth.models.User", "type": "django.contrib.auth", "text": []}, {"name": "auth.models.User.check_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.check_password", "type": "django.contrib.auth", "text": ["Returns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)"]}, {"name": "auth.models.User.date_joined", "path": "ref/contrib/auth#django.contrib.auth.models.User.date_joined", "type": "django.contrib.auth", "text": ["A datetime designating when the account was created. Is set to the current date/time by default when the account is created."]}, {"name": "auth.models.User.email", "path": "ref/contrib/auth#django.contrib.auth.models.User.email", "type": "django.contrib.auth", "text": ["Optional (blank=True). Email address."]}, {"name": "auth.models.User.email_user()", "path": "ref/contrib/auth#django.contrib.auth.models.User.email_user", "type": "django.contrib.auth", "text": ["Sends an email to the user. If from_email is None, Django uses the DEFAULT_FROM_EMAIL. Any **kwargs are passed to the underlying send_mail() call."]}, {"name": "auth.models.User.first_name", "path": "ref/contrib/auth#django.contrib.auth.models.User.first_name", "type": "django.contrib.auth", "text": ["Optional (blank=True). 150 characters or fewer."]}, {"name": "auth.models.User.get_all_permissions()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_all_permissions", "type": "django.contrib.auth", "text": ["Returns a set of permission strings that the user has, both through group and user permissions.", "If obj is passed in, only returns the permissions for this specific object."]}, {"name": "auth.models.User.get_full_name()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_full_name", "type": "django.contrib.auth", "text": ["Returns the first_name plus the last_name, with a space in between."]}, {"name": "auth.models.User.get_group_permissions()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_group_permissions", "type": "django.contrib.auth", "text": ["Returns a set of permission strings that the user has, through their groups.", "If obj is passed in, only returns the group permissions for this specific object."]}, {"name": "auth.models.User.get_short_name()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_short_name", "type": "django.contrib.auth", "text": ["Returns the first_name."]}, {"name": "auth.models.User.get_user_permissions()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_user_permissions", "type": "django.contrib.auth", "text": ["Returns a set of permission strings that the user has directly.", "If obj is passed in, only returns the user permissions for this specific object."]}, {"name": "auth.models.User.get_username()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_username", "type": "django.contrib.auth", "text": ["Returns the username for the user. Since the User model can be swapped out, you should use this method instead of referencing the username attribute directly."]}, {"name": "auth.models.User.groups", "path": "ref/contrib/auth#django.contrib.auth.models.User.groups", "type": "django.contrib.auth", "text": ["Many-to-many relationship to Group"]}, {"name": "auth.models.User.has_module_perms()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_module_perms", "type": "django.contrib.auth", "text": ["Returns True if the user has any permissions in the given package (the Django app label). If the user is inactive, this method will always return False. For an active superuser, this method will always return True."]}, {"name": "auth.models.User.has_perm()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_perm", "type": "django.contrib.auth", "text": ["Returns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\". (see documentation on permissions). If the user is inactive, this method will always return False. For an active superuser, this method will always return True.", "If obj is passed in, this method won\u2019t check for a permission for the model, but for this specific object."]}, {"name": "auth.models.User.has_perms()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_perms", "type": "django.contrib.auth", "text": ["Returns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If the user is inactive, this method will always return False. For an active superuser, this method will always return True.", "If obj is passed in, this method won\u2019t check for permissions for the model, but for the specific object."]}, {"name": "auth.models.User.has_usable_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_usable_password", "type": "django.contrib.auth", "text": ["Returns False if set_unusable_password() has been called for this user."]}, {"name": "auth.models.User.is_active", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_active", "type": "django.contrib.auth", "text": ["Boolean. Designates whether this user account should be considered active. We recommend that you set this flag to False instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won\u2019t break.", "This doesn\u2019t necessarily control whether or not the user can log in. Authentication backends aren\u2019t required to check for the is_active flag but the default backend (ModelBackend) and the RemoteUserBackend do. You can use AllowAllUsersModelBackend or AllowAllUsersRemoteUserBackend if you want to allow inactive users to login. In this case, you\u2019ll also want to customize the AuthenticationForm used by the LoginView as it rejects inactive users. Be aware that the permission-checking methods such as has_perm() and the authentication in the Django admin all return False for inactive users."]}, {"name": "auth.models.User.is_anonymous", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_anonymous", "type": "django.contrib.auth", "text": ["Read-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute."]}, {"name": "auth.models.User.is_authenticated", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_authenticated", "type": "django.contrib.auth", "text": ["Read-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn\u2019t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance."]}, {"name": "auth.models.User.is_staff", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_staff", "type": "django.contrib.auth", "text": ["Boolean. Designates whether this user can access the admin site."]}, {"name": "auth.models.User.is_superuser", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_superuser", "type": "django.contrib.auth", "text": ["Boolean. Designates that this user has all permissions without explicitly assigning them."]}, {"name": "auth.models.User.last_login", "path": "ref/contrib/auth#django.contrib.auth.models.User.last_login", "type": "django.contrib.auth", "text": ["A datetime of the user\u2019s last login."]}, {"name": "auth.models.User.last_name", "path": "ref/contrib/auth#django.contrib.auth.models.User.last_name", "type": "django.contrib.auth", "text": ["Optional (blank=True). 150 characters or fewer."]}, {"name": "auth.models.User.password", "path": "ref/contrib/auth#django.contrib.auth.models.User.password", "type": "django.contrib.auth", "text": ["Required. A hash of, and metadata about, the password. (Django doesn\u2019t store the raw password.) Raw passwords can be arbitrarily long and can contain any character. See the password documentation."]}, {"name": "auth.models.User.set_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.set_password", "type": "django.contrib.auth", "text": ["Sets the user\u2019s password to the given raw string, taking care of the password hashing. Doesn\u2019t save the User object.", "When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used."]}, {"name": "auth.models.User.set_unusable_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.set_unusable_password", "type": "django.contrib.auth", "text": ["Marks the user as having no password set. This isn\u2019t the same as having a blank string for a password. check_password() for this user will never return True. Doesn\u2019t save the User object.", "You may need this if authentication for your application takes place against an existing external source such as an LDAP directory."]}, {"name": "auth.models.User.user_permissions", "path": "ref/contrib/auth#django.contrib.auth.models.User.user_permissions", "type": "django.contrib.auth", "text": ["Many-to-many relationship to Permission"]}, {"name": "auth.models.User.username", "path": "ref/contrib/auth#django.contrib.auth.models.User.username", "type": "django.contrib.auth", "text": ["Required. 150 characters or fewer. Usernames may contain alphanumeric, _, @, +, . and - characters.", "The max_length should be sufficient for many use cases. If you need a longer length, please use a custom user model. If you use MySQL with the utf8mb4 encoding (recommended for proper Unicode support), specify at most max_length=191 because MySQL can only create unique indexes with 191 characters in that case by default."]}, {"name": "auth.models.UserManager", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager", "type": "django.contrib.auth", "text": ["The User model has a custom manager that has the following helper methods (in addition to the methods provided by BaseUserManager):", "Creates, saves and returns a User.", "The username and password are set as given. The domain portion of email is automatically converted to lowercase, and the returned User object will have is_active set to True.", "If no password is provided, set_unusable_password() will be called.", "The extra_fields keyword arguments are passed through to the User\u2019s __init__ method to allow setting arbitrary fields on a custom user model.", "See Creating users for example usage.", "Same as create_user(), but sets is_staff and is_superuser to True.", "Returns users that have the given permission perm either in the \"<app label>.<permission codename>\" format or as a Permission instance. Returns an empty queryset if no users who have the perm found.", "If is_active is True (default), returns only active users, or if False, returns only inactive users. Use None to return all users irrespective of active state.", "If include_superusers is True (default), the result will include superusers.", "If backend is passed in and it\u2019s defined in AUTHENTICATION_BACKENDS, then this method will use it. Otherwise, it will use the backend in AUTHENTICATION_BACKENDS, if there is only one, or raise an exception."]}, {"name": "auth.models.UserManager.create_superuser()", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager.create_superuser", "type": "django.contrib.auth", "text": ["Same as create_user(), but sets is_staff and is_superuser to True."]}, {"name": "auth.models.UserManager.create_user()", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager.create_user", "type": "django.contrib.auth", "text": ["Creates, saves and returns a User.", "The username and password are set as given. The domain portion of email is automatically converted to lowercase, and the returned User object will have is_active set to True.", "If no password is provided, set_unusable_password() will be called.", "The extra_fields keyword arguments are passed through to the User\u2019s __init__ method to allow setting arbitrary fields on a custom user model.", "See Creating users for example usage."]}, {"name": "auth.models.UserManager.with_perm()", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager.with_perm", "type": "django.contrib.auth", "text": ["Returns users that have the given permission perm either in the \"<app label>.<permission codename>\" format or as a Permission instance. Returns an empty queryset if no users who have the perm found.", "If is_active is True (default), returns only active users, or if False, returns only inactive users. Use None to return all users irrespective of active state.", "If include_superusers is True (default), the result will include superusers.", "If backend is passed in and it\u2019s defined in AUTHENTICATION_BACKENDS, then this method will use it. Otherwise, it will use the backend in AUTHENTICATION_BACKENDS, if there is only one, or raise an exception."]}, {"name": "auth.password_validation.CommonPasswordValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.CommonPasswordValidator", "type": "django.contrib.auth", "text": ["Validates whether the password is not a common password. This converts the password to lowercase (to do a case-insensitive comparison) and checks it against a list of 20,000 common password created by Royce Williams.", "The password_list_path can be set to the path of a custom file of common passwords. This file should contain one lowercase password per line and may be plain text or gzipped."]}, {"name": "auth.password_validation.get_password_validators()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.get_password_validators", "type": "django.contrib.auth", "text": ["Returns a set of validator objects based on the validator_config parameter. By default, all functions use the validators defined in AUTH_PASSWORD_VALIDATORS, but by calling this function with an alternate set of validators and then passing the result into the password_validators parameter of the other functions, your custom set of validators will be used instead. This is useful when you have a typical set of validators to use for most scenarios, but also have a special situation that requires a custom set. If you always use the same set of validators, there is no need to use this function, as the configuration from AUTH_PASSWORD_VALIDATORS is used by default.", "The structure of validator_config is identical to the structure of AUTH_PASSWORD_VALIDATORS. The return value of this function can be passed into the password_validators parameter of the functions listed above."]}, {"name": "auth.password_validation.MinimumLengthValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.MinimumLengthValidator", "type": "django.contrib.auth", "text": ["Validates whether the password meets a minimum length. The minimum length can be customized with the min_length parameter."]}, {"name": "auth.password_validation.NumericPasswordValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.NumericPasswordValidator", "type": "django.contrib.auth", "text": ["Validates whether the password is not entirely numeric."]}, {"name": "auth.password_validation.password_changed()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.password_changed", "type": "django.contrib.auth", "text": ["Informs all validators that the password has been changed. This can be used by validators such as one that prevents password reuse. This should be called once the password has been successfully changed.", "For subclasses of AbstractBaseUser, the password field will be marked as \u201cdirty\u201d when calling set_password() which triggers a call to password_changed() after the user is saved."]}, {"name": "auth.password_validation.password_validators_help_text_html()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.password_validators_help_text_html", "type": "django.contrib.auth", "text": ["Returns an HTML string with all help texts in an <ul>. This is helpful when adding password validation to forms, as you can pass the output directly to the help_text parameter of a form field."]}, {"name": "auth.password_validation.password_validators_help_texts()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.password_validators_help_texts", "type": "django.contrib.auth", "text": ["Returns a list of the help texts of all validators. These explain the password requirements to the user."]}, {"name": "auth.password_validation.UserAttributeSimilarityValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.UserAttributeSimilarityValidator", "type": "django.contrib.auth", "text": ["Validates whether the password is sufficiently different from certain attributes of the user.", "The user_attributes parameter should be an iterable of names of user attributes to compare to. If this argument is not provided, the default is used: 'username', 'first_name', 'last_name', 'email'. Attributes that don\u2019t exist are ignored.", "The minimum similarity of a rejected password can be set on a scale of 0 to 1 with the max_similarity parameter. A setting of 0 rejects all passwords, whereas a setting of 1 rejects only passwords that are identical to an attribute\u2019s value."]}, {"name": "auth.password_validation.validate_password()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.validate_password", "type": "django.contrib.auth", "text": ["Validates a password. If all validators find the password valid, returns None. If one or more validators reject the password, raises a ValidationError with all the error messages from the validators.", "The user object is optional: if it\u2019s not provided, some validators may not be able to perform any validation and will accept any password."]}, {"name": "auth.signals.user_logged_in()", "path": "ref/contrib/auth#django.contrib.auth.signals.user_logged_in", "type": "django.contrib.auth", "text": ["Sent when a user logs in successfully.", "Arguments sent with this signal:"]}, {"name": "auth.signals.user_logged_out()", "path": "ref/contrib/auth#django.contrib.auth.signals.user_logged_out", "type": "django.contrib.auth", "text": ["Sent when the logout method is called."]}, {"name": "auth.signals.user_login_failed()", "path": "ref/contrib/auth#django.contrib.auth.signals.user_login_failed", "type": "django.contrib.auth", "text": ["Sent when the user failed to login successfully"]}, {"name": "auth.update_session_auth_hash()", "path": "topics/auth/default#django.contrib.auth.update_session_auth_hash", "type": "django.contrib.auth", "text": ["This function takes the current request and the updated user object from which the new session hash will be derived and updates the session hash appropriately. It also rotates the session key so that a stolen session cookie will be invalidated.", "Example usage:"]}, {"name": "auth.validators.ASCIIUsernameValidator", "path": "ref/contrib/auth#django.contrib.auth.validators.ASCIIUsernameValidator", "type": "django.contrib.auth", "text": ["A field validator allowing only ASCII letters and numbers, in addition to @, ., +, -, and _."]}, {"name": "auth.validators.UnicodeUsernameValidator", "path": "ref/contrib/auth#django.contrib.auth.validators.UnicodeUsernameValidator", "type": "django.contrib.auth", "text": ["A field validator allowing Unicode characters, in addition to @, ., +, -, and _. The default validator for User.username."]}, {"name": "auth.views.LoginView", "path": "topics/auth/default#django.contrib.auth.views.LoginView", "type": "django.contrib.auth", "text": ["URL name: login", "See the URL documentation for details on using named URL patterns.", "Methods and Attributes", "The name of a template to display for the view used to log the user in. Defaults to registration/login.html.", "The URL to redirect to after login. Defaults to LOGIN_REDIRECT_URL.", "The name of a GET field containing the URL to redirect to after login. Defaults to next. Overrides the get_default_redirect_url() URL if the given GET parameter is passed.", "A callable (typically a form class) to use for authentication. Defaults to AuthenticationForm.", "A dictionary of context data that will be added to the default context data passed to the template.", "A boolean that controls whether or not authenticated users accessing the login page will be redirected as if they had just successfully logged in. Defaults to False.", "Warning", "If you enable redirect_authenticated_user, other websites will be able to determine if their visitors are authenticated on your site by requesting redirect URLs to image files on your website. To avoid this \u201csocial media fingerprinting\u201d information leakage, host all images and your favicon on a separate domain.", "Enabling redirect_authenticated_user can also result in a redirect loop when using the permission_required() decorator unless the raise_exception parameter is used.", "A set of hosts, in addition to request.get_host(), that are safe for redirecting after login. Defaults to an empty set.", "Returns the URL to redirect to after login. The default implementation resolves and returns next_page if set, or LOGIN_REDIRECT_URL otherwise.", "Here\u2019s what LoginView does:", "It\u2019s your responsibility to provide the html for the login template , called registration/login.html by default. This template gets passed four template context variables:", "If you\u2019d prefer not to call the template registration/login.html, you can pass the template_name parameter via the extra arguments to the as_view method in your URLconf. For example, this URLconf line would use myapp/login.html instead:", "You can also specify the name of the GET field which contains the URL to redirect to after login using redirect_field_name. By default, the field is called next.", "Here\u2019s a sample registration/login.html template you can use as a starting point. It assumes you have a base.html template that defines a content block:", "If you have customized authentication (see Customizing Authentication) you can use a custom authentication form by setting the authentication_form attribute. This form must accept a request keyword argument in its __init__() method and provide a get_user() method which returns the authenticated user object (this method is only ever called after successful form validation)."]}, {"name": "auth.views.LoginView.authentication_form", "path": "topics/auth/default#django.contrib.auth.views.LoginView.authentication_form", "type": "django.contrib.auth", "text": ["A callable (typically a form class) to use for authentication. Defaults to AuthenticationForm."]}, {"name": "auth.views.LoginView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.LoginView.extra_context", "type": "django.contrib.auth", "text": ["A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.LoginView.get_default_redirect_url()", "path": "topics/auth/default#django.contrib.auth.views.LoginView.get_default_redirect_url", "type": "django.contrib.auth", "text": ["Returns the URL to redirect to after login. The default implementation resolves and returns next_page if set, or LOGIN_REDIRECT_URL otherwise."]}, {"name": "auth.views.LoginView.next_page", "path": "topics/auth/default#django.contrib.auth.views.LoginView.next_page", "type": "django.contrib.auth", "text": ["The URL to redirect to after login. Defaults to LOGIN_REDIRECT_URL."]}, {"name": "auth.views.LoginView.redirect_authenticated_user", "path": "topics/auth/default#django.contrib.auth.views.LoginView.redirect_authenticated_user", "type": "django.contrib.auth", "text": ["A boolean that controls whether or not authenticated users accessing the login page will be redirected as if they had just successfully logged in. Defaults to False.", "Warning", "If you enable redirect_authenticated_user, other websites will be able to determine if their visitors are authenticated on your site by requesting redirect URLs to image files on your website. To avoid this \u201csocial media fingerprinting\u201d information leakage, host all images and your favicon on a separate domain.", "Enabling redirect_authenticated_user can also result in a redirect loop when using the permission_required() decorator unless the raise_exception parameter is used."]}, {"name": "auth.views.LoginView.redirect_field_name", "path": "topics/auth/default#django.contrib.auth.views.LoginView.redirect_field_name", "type": "django.contrib.auth", "text": ["The name of a GET field containing the URL to redirect to after login. Defaults to next. Overrides the get_default_redirect_url() URL if the given GET parameter is passed."]}, {"name": "auth.views.LoginView.success_url_allowed_hosts", "path": "topics/auth/default#django.contrib.auth.views.LoginView.success_url_allowed_hosts", "type": "django.contrib.auth", "text": ["A set of hosts, in addition to request.get_host(), that are safe for redirecting after login. Defaults to an empty set."]}, {"name": "auth.views.LoginView.template_name", "path": "topics/auth/default#django.contrib.auth.views.LoginView.template_name", "type": "django.contrib.auth", "text": ["The name of a template to display for the view used to log the user in. Defaults to registration/login.html."]}, {"name": "auth.views.logout_then_login()", "path": "topics/auth/default#django.contrib.auth.views.logout_then_login", "type": "django.contrib.auth", "text": ["Logs a user out, then redirects to the login page.", "URL name: No default URL provided", "Optional arguments:"]}, {"name": "auth.views.LogoutView", "path": "topics/auth/default#django.contrib.auth.views.LogoutView", "type": "django.contrib.auth", "text": ["Logs a user out.", "URL name: logout", "Attributes:", "The URL to redirect to after logout. Defaults to LOGOUT_REDIRECT_URL.", "The full name of a template to display after logging the user out. Defaults to registration/logged_out.html.", "The name of a GET field containing the URL to redirect to after log out. Defaults to 'next'. Overrides the next_page URL if the given GET parameter is passed.", "A dictionary of context data that will be added to the default context data passed to the template.", "A set of hosts, in addition to request.get_host(), that are safe for redirecting after logout. Defaults to an empty set.", "Template context:"]}, {"name": "auth.views.LogoutView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.extra_context", "type": "django.contrib.auth", "text": ["A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.LogoutView.next_page", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.next_page", "type": "django.contrib.auth", "text": ["The URL to redirect to after logout. Defaults to LOGOUT_REDIRECT_URL."]}, {"name": "auth.views.LogoutView.redirect_field_name", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.redirect_field_name", "type": "django.contrib.auth", "text": ["The name of a GET field containing the URL to redirect to after log out. Defaults to 'next'. Overrides the next_page URL if the given GET parameter is passed."]}, {"name": "auth.views.LogoutView.success_url_allowed_hosts", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.success_url_allowed_hosts", "type": "django.contrib.auth", "text": ["A set of hosts, in addition to request.get_host(), that are safe for redirecting after logout. Defaults to an empty set."]}, {"name": "auth.views.LogoutView.template_name", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.template_name", "type": "django.contrib.auth", "text": ["The full name of a template to display after logging the user out. Defaults to registration/logged_out.html."]}, {"name": "auth.views.PasswordChangeDoneView", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeDoneView", "type": "django.contrib.auth", "text": ["URL name: password_change_done", "The page shown after a user has changed their password.", "Attributes:", "The full name of a template to use. Defaults to registration/password_change_done.html if not supplied.", "A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.PasswordChangeDoneView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeDoneView.extra_context", "type": "django.contrib.auth", "text": ["A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.PasswordChangeDoneView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeDoneView.template_name", "type": "django.contrib.auth", "text": ["The full name of a template to use. Defaults to registration/password_change_done.html if not supplied."]}, {"name": "auth.views.PasswordChangeView", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView", "type": "django.contrib.auth", "text": ["URL name: password_change", "Allows a user to change their password.", "Attributes:", "The URL to redirect to after a successful password change. Defaults to 'password_change_done'.", "A custom \u201cchange password\u201d form which must accept a user keyword argument. The form is responsible for actually changing the user\u2019s password. Defaults to PasswordChangeForm.", "A dictionary of context data that will be added to the default context data passed to the template.", "Template context:"]}, {"name": "auth.views.PasswordChangeView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView.extra_context", "type": "django.contrib.auth", "text": ["A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.PasswordChangeView.form_class", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView.form_class", "type": "django.contrib.auth", "text": ["A custom \u201cchange password\u201d form which must accept a user keyword argument. The form is responsible for actually changing the user\u2019s password. Defaults to PasswordChangeForm."]}, {"name": "auth.views.PasswordChangeView.success_url", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView.success_url", "type": "django.contrib.auth", "text": ["The URL to redirect to after a successful password change. Defaults to 'password_change_done'."]}, {"name": "auth.views.PasswordResetCompleteView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetCompleteView", "type": "django.contrib.auth", "text": ["URL name: password_reset_complete", "Presents a view which informs the user that the password has been successfully changed.", "Attributes:", "The full name of a template to display the view. Defaults to registration/password_reset_complete.html.", "A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.PasswordResetCompleteView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetCompleteView.extra_context", "type": "django.contrib.auth", "text": ["A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.PasswordResetCompleteView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetCompleteView.template_name", "type": "django.contrib.auth", "text": ["The full name of a template to display the view. Defaults to registration/password_reset_complete.html."]}, {"name": "auth.views.PasswordResetConfirmView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView", "type": "django.contrib.auth", "text": ["URL name: password_reset_confirm", "Presents a form for entering a new password.", "Keyword arguments from the URL:", "Attributes:", "The full name of a template to display the confirm password view. Default value is registration/password_reset_confirm.html.", "Instance of the class to check the password. This will default to default_token_generator, it\u2019s an instance of django.contrib.auth.tokens.PasswordResetTokenGenerator.", "A boolean indicating if the user should be automatically authenticated after a successful password reset. Defaults to False.", "A dotted path to the authentication backend to use when authenticating a user if post_reset_login is True. Required only if you have multiple AUTHENTICATION_BACKENDS configured. Defaults to None.", "Form that will be used to set the password. Defaults to SetPasswordForm.", "URL to redirect after the password reset done. Defaults to 'password_reset_complete'.", "A dictionary of context data that will be added to the default context data passed to the template.", "Token parameter displayed as a component of password reset URLs. Defaults to 'set-password'.", "Template context:"]}, {"name": "auth.views.PasswordResetConfirmView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.extra_context", "type": "django.contrib.auth", "text": ["A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.PasswordResetConfirmView.form_class", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.form_class", "type": "django.contrib.auth", "text": ["Form that will be used to set the password. Defaults to SetPasswordForm."]}, {"name": "auth.views.PasswordResetConfirmView.post_reset_login", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.post_reset_login", "type": "django.contrib.auth", "text": ["A boolean indicating if the user should be automatically authenticated after a successful password reset. Defaults to False."]}, {"name": "auth.views.PasswordResetConfirmView.post_reset_login_backend", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.post_reset_login_backend", "type": "django.contrib.auth", "text": ["A dotted path to the authentication backend to use when authenticating a user if post_reset_login is True. Required only if you have multiple AUTHENTICATION_BACKENDS configured. Defaults to None."]}, {"name": "auth.views.PasswordResetConfirmView.reset_url_token", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.reset_url_token", "type": "django.contrib.auth", "text": ["Token parameter displayed as a component of password reset URLs. Defaults to 'set-password'."]}, {"name": "auth.views.PasswordResetConfirmView.success_url", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.success_url", "type": "django.contrib.auth", "text": ["URL to redirect after the password reset done. Defaults to 'password_reset_complete'."]}, {"name": "auth.views.PasswordResetConfirmView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.template_name", "type": "django.contrib.auth", "text": ["The full name of a template to display the confirm password view. Default value is registration/password_reset_confirm.html."]}, {"name": "auth.views.PasswordResetConfirmView.token_generator", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.token_generator", "type": "django.contrib.auth", "text": ["Instance of the class to check the password. This will default to default_token_generator, it\u2019s an instance of django.contrib.auth.tokens.PasswordResetTokenGenerator."]}, {"name": "auth.views.PasswordResetDoneView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetDoneView", "type": "django.contrib.auth", "text": ["URL name: password_reset_done", "The page shown after a user has been emailed a link to reset their password. This view is called by default if the PasswordResetView doesn\u2019t have an explicit success_url URL set.", "Note", "If the email address provided does not exist in the system, the user is inactive, or has an unusable password, the user will still be redirected to this view but no email will be sent.", "Attributes:", "The full name of a template to use. Defaults to registration/password_reset_done.html if not supplied.", "A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.PasswordResetDoneView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetDoneView.extra_context", "type": "django.contrib.auth", "text": ["A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.PasswordResetDoneView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetDoneView.template_name", "type": "django.contrib.auth", "text": ["The full name of a template to use. Defaults to registration/password_reset_done.html if not supplied."]}, {"name": "auth.views.PasswordResetView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView", "type": "django.contrib.auth", "text": ["URL name: password_reset", "Allows a user to reset their password by generating a one-time use link that can be used to reset the password, and sending that link to the user\u2019s registered email address.", "If the email address provided does not exist in the system, this view won\u2019t send an email, but the user won\u2019t receive any error message either. This prevents information leaking to potential attackers. If you want to provide an error message in this case, you can subclass PasswordResetForm and use the form_class attribute.", "Note", "Be aware that sending an email costs extra time, hence you may be vulnerable to an email address enumeration timing attack due to a difference between the duration of a reset request for an existing email address and the duration of a reset request for a nonexistent email address. To reduce the overhead, you can use a 3rd party package that allows to send emails asynchronously, e.g. django-mailer.", "Users flagged with an unusable password (see set_unusable_password() aren\u2019t allowed to request a password reset to prevent misuse when using an external authentication source like LDAP. Note that they won\u2019t receive any error message since this would expose their account\u2019s existence but no mail will be sent either.", "Attributes:", "The full name of a template to use for displaying the password reset form. Defaults to registration/password_reset_form.html if not supplied.", "Form that will be used to get the email of the user to reset the password for. Defaults to PasswordResetForm.", "The full name of a template to use for generating the email with the reset password link. Defaults to registration/password_reset_email.html if not supplied.", "The full name of a template to use for the subject of the email with the reset password link. Defaults to registration/password_reset_subject.txt if not supplied.", "Instance of the class to check the one time link. This will default to default_token_generator, it\u2019s an instance of django.contrib.auth.tokens.PasswordResetTokenGenerator.", "The URL to redirect to after a successful password reset request. Defaults to 'password_reset_done'.", "A valid email address. By default Django uses the DEFAULT_FROM_EMAIL.", "A dictionary of context data that will be added to the default context data passed to the template.", "The full name of a template to use for generating a text/html multipart email with the password reset link. By default, HTML email is not sent.", "A dictionary of context data that will be available in the email template. It can be used to override default template context values listed below e.g. domain.", "Template context:", "Email template context:", "Sample registration/password_reset_email.html (email body template):", "The same template context is used for subject template. Subject must be single line plain text string."]}, {"name": "auth.views.PasswordResetView.email_template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.email_template_name", "type": "django.contrib.auth", "text": ["The full name of a template to use for generating the email with the reset password link. Defaults to registration/password_reset_email.html if not supplied."]}, {"name": "auth.views.PasswordResetView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.extra_context", "type": "django.contrib.auth", "text": ["A dictionary of context data that will be added to the default context data passed to the template."]}, {"name": "auth.views.PasswordResetView.extra_email_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.extra_email_context", "type": "django.contrib.auth", "text": ["A dictionary of context data that will be available in the email template. It can be used to override default template context values listed below e.g. domain."]}, {"name": "auth.views.PasswordResetView.form_class", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.form_class", "type": "django.contrib.auth", "text": ["Form that will be used to get the email of the user to reset the password for. Defaults to PasswordResetForm."]}, {"name": "auth.views.PasswordResetView.from_email", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.from_email", "type": "django.contrib.auth", "text": ["A valid email address. By default Django uses the DEFAULT_FROM_EMAIL."]}, {"name": "auth.views.PasswordResetView.html_email_template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.html_email_template_name", "type": "django.contrib.auth", "text": ["The full name of a template to use for generating a text/html multipart email with the password reset link. By default, HTML email is not sent."]}, {"name": "auth.views.PasswordResetView.subject_template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.subject_template_name", "type": "django.contrib.auth", "text": ["The full name of a template to use for the subject of the email with the reset password link. Defaults to registration/password_reset_subject.txt if not supplied."]}, {"name": "auth.views.PasswordResetView.success_url", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.success_url", "type": "django.contrib.auth", "text": ["The URL to redirect to after a successful password reset request. Defaults to 'password_reset_done'."]}, {"name": "auth.views.PasswordResetView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.template_name", "type": "django.contrib.auth", "text": ["The full name of a template to use for displaying the password reset form. Defaults to registration/password_reset_form.html if not supplied."]}, {"name": "auth.views.PasswordResetView.token_generator", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.token_generator", "type": "django.contrib.auth", "text": ["Instance of the class to check the one time link. This will default to default_token_generator, it\u2019s an instance of django.contrib.auth.tokens.PasswordResetTokenGenerator."]}, {"name": "auth.views.redirect_to_login()", "path": "topics/auth/default#django.contrib.auth.views.redirect_to_login", "type": "django.contrib.auth", "text": ["Redirects to the login page, and then back to another URL after a successful login.", "Required arguments:", "Optional arguments:"]}, {"name": "Base views", "path": "ref/class-based-views/base", "type": "API", "text": ["The following three classes provide much of the functionality needed to create Django views. You may think of them as parent views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins and Generic class-based views.", "Many of Django\u2019s built-in class-based views inherit from other class-based views or various mixins. Because this inheritance chain is very important, the ancestor classes are documented under the section title of Ancestors (MRO). MRO is an acronym for Method Resolution Order.", "The master class-based base view. All other class-based views inherit from this base class. It isn\u2019t strictly a generic view and thus can also be imported from django.views.", "Method Flowchart", "Example views.py:", "Example urls.py:", "Attributes", "The list of HTTP method names that this view will accept.", "Default:", "Methods", "Returns a callable view that takes a request and returns a response:", "The returned view has view_class and view_initkwargs attributes.", "When the view is called during the request/response cycle, the setup() method assigns the HttpRequest to the view\u2019s request attribute, and any positional and/or keyword arguments captured from the URL pattern to the args and kwargs attributes, respectively. Then dispatch() is called.", "Performs key view initialization prior to dispatch().", "If overriding this method, you must call super().", "The view part of the view \u2013 the method that accepts a request argument plus arguments, and returns an HTTP response.", "The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a GET will be delegated to get(), a POST to post(), and so on.", "By default, a HEAD request will be delegated to get(). If you need to handle HEAD requests in a different way than GET, you can override the head() method. See Supporting other HTTP methods for an example.", "If the view was called with an HTTP method it doesn\u2019t support, this method is called instead.", "The default implementation returns HttpResponseNotAllowed with a list of allowed methods in plain text.", "Handles responding to requests for the OPTIONS HTTP verb. Returns a response with the Allow header containing a list of the view\u2019s allowed HTTP method names.", "Renders a given template, with the context containing parameters captured in the URL.", "Ancestors (MRO)", "This view inherits methods and attributes from the following views:", "Method Flowchart", "Example views.py:", "Example urls.py:", "Context", "Redirects to a given URL.", "The given URL may contain dictionary-style string formatting, which will be interpolated against the parameters captured in the URL. Because keyword interpolation is always done (even if no arguments are passed in), any \"%\" characters in the URL must be written as \"%%\" so that Python will convert them to a single percent sign on output.", "If the given URL is None, Django will return an HttpResponseGone (410).", "Ancestors (MRO)", "This view inherits methods and attributes from the following view:", "Method Flowchart", "Example views.py:", "Example urls.py:", "Attributes", "The URL to redirect to, as a string. Or None to raise a 410 (Gone) HTTP error.", "The name of the URL pattern to redirect to. Reversing will be done using the same args and kwargs as are passed in for this view.", "Whether the redirect should be permanent. The only difference here is the HTTP status code returned. If True, then the redirect will use status code 301. If False, then the redirect will use status code 302. By default, permanent is False.", "Whether to pass along the GET query string to the new location. If True, then the query string is appended to the URL. If False, then the query string is discarded. By default, query_string is False.", "Methods", "Constructs the target URL for redirection.", "The args and kwargs arguments are positional and/or keyword arguments captured from the URL pattern, respectively.", "The default implementation uses url as a starting string and performs expansion of % named parameters in that string using the named groups captured in the URL.", "If url is not set, get_redirect_url() tries to reverse the pattern_name using what was captured in the URL (both named and unnamed groups are used).", "If requested by query_string, it will also append the query string to the generated URL. Subclasses may implement any behavior they wish, as long as the method returns a redirect-ready URL string."]}, {"name": "Built-in class-based generic views", "path": "topics/class-based-views/generic-display", "type": "Guides", "text": ["Writing web applications can be monotonous, because we repeat certain patterns again and again. Django tries to take away some of that monotony at the model and template layers, but web developers also experience this boredom at the view level.", "Django\u2019s generic views were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code.", "We can recognize certain common tasks, like displaying a list of objects, and write code that displays a list of any object. Then the model in question can be passed as an extra argument to the URLconf.", "Django ships with generic views to do the following:", "Taken together, these views provide interfaces to perform the most common tasks developers encounter.", "There\u2019s no question that using generic views can speed up development substantially. In most projects, however, there comes a moment when the generic views no longer suffice. Indeed, the most common question asked by new Django developers is how to make generic views handle a wider array of situations.", "This is one of the reasons generic views were redesigned for the 1.3 release - previously, they were view functions with a bewildering array of options; now, rather than passing in a large amount of configuration in the URLconf, the recommended way to extend generic views is to subclass them, and override their attributes or methods.", "That said, generic views will have a limit. If you find you\u2019re struggling to implement your view as a subclass of a generic view, then you may find it more effective to write just the code you need, using your own class-based or functional views.", "More examples of generic views are available in some third party applications, or you could write your own as needed.", "TemplateView certainly is useful, but Django\u2019s generic views really shine when it comes to presenting views of your database content. Because it\u2019s such a common task, Django comes with a handful of built-in generic views to help generate list and detail views of objects.", "Let\u2019s start by looking at some examples of showing a list of objects or an individual object.", "We\u2019ll be using these models:", "Now we need to define a view:", "Finally hook that view into your urls:", "That\u2019s all the Python code we need to write. We still need to write a template, however. We could explicitly tell the view which template to use by adding a template_name attribute to the view, but in the absence of an explicit template Django will infer one from the object\u2019s name. In this case, the inferred template will be \"books/publisher_list.html\" \u2013 the \u201cbooks\u201d part comes from the name of the app that defines the model, while the \u201cpublisher\u201d bit is the lowercased version of the model\u2019s name.", "Note", "Thus, when (for example) the APP_DIRS option of a DjangoTemplates backend is set to True in TEMPLATES, a template location could be: /path/to/project/books/templates/books/publisher_list.html", "This template will be rendered against a context containing a variable called object_list that contains all the publisher objects. A template might look like this:", "That\u2019s really all there is to it. All the cool features of generic views come from changing the attributes set on the generic view. The generic views reference documents all the generic views and their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views.", "You might have noticed that our sample publisher list template stores all the publishers in a variable named object_list. While this works just fine, it isn\u2019t all that \u201cfriendly\u201d to template authors: they have to \u201cjust know\u201d that they\u2019re dealing with publishers here.", "Well, if you\u2019re dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the lowercased version of the model class\u2019 name. This is provided in addition to the default object_list entry, but contains exactly the same data, i.e. publisher_list.", "If this still isn\u2019t a good match, you can manually set the name of the context variable. The context_object_name attribute on a generic view specifies the context variable to use:", "Providing a useful context_object_name is always a good idea. Your coworkers who design templates will thank you.", "Often you need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The DetailView generic view provides the publisher to the context, but how do we get additional information in that template?", "The answer is to subclass DetailView and provide your own implementation of the get_context_data method. The default implementation adds the object being displayed to the template, but you can override it to send more:", "Note", "Generally, get_context_data will merge the context data of all parent classes with those of the current class. To preserve this behavior in your own classes where you want to alter the context, you should be sure to call get_context_data on the super class. When no two classes try to define the same key, this will give the expected results. However if any class attempts to override a key after parent classes have set it (after the call to super), any children of that class will also need to explicitly set it after super if they want to be sure to override all parents. If you\u2019re having trouble, review the method resolution order of your view.", "Another consideration is that the context data from class-based generic views will override data provided by context processors; see get_context_data() for an example.", "Now let\u2019s take a closer look at the model argument we\u2019ve been using all along. The model argument, which specifies the database model that the view will operate upon, is available on all the generic views that operate on a single object or a collection of objects. However, the model argument is not the only way to specify the objects that the view will operate upon \u2013 you can also specify the list of objects using the queryset argument:", "Specifying model = Publisher is shorthand for saying queryset =\nPublisher.objects.all(). However, by using queryset to define a filtered list of objects you can be more specific about the objects that will be visible in the view (see Making queries for more information about QuerySet objects, and see the class-based views reference for the complete details).", "To pick an example, we might want to order a list of books by publication date, with the most recent first:", "That\u2019s a pretty minimal example, but it illustrates the idea nicely. You\u2019ll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique:", "Notice that along with a filtered queryset, we\u2019re also using a custom template name. If we didn\u2019t, the generic view would use the same template as the \u201cvanilla\u201d object list, which might not be what we want.", "Also notice that this isn\u2019t a very elegant way of doing publisher-specific books. If we want to add another publisher page, we\u2019d need another handful of lines in the URLconf, and more than a few publishers would get unreasonable. We\u2019ll deal with this problem in the next section.", "Note", "If you get a 404 when requesting /books/acme/, check to ensure you actually have a Publisher with the name \u2018ACME Publishing\u2019. Generic views have an allow_empty parameter for this case. See the class-based-views reference for more details.", "Another common need is to filter down the objects given in a list page by some key in the URL. Earlier we hard-coded the publisher\u2019s name in the URLconf, but what if we wanted to write a view that displayed all the books by some arbitrary publisher?", "Handily, the ListView has a get_queryset() method we can override. By default, it returns the value of the queryset attribute, but we can use it to add more logic.", "The key part to making this work is that when class-based views are called, various useful things are stored on self; as well as the request (self.request) this includes the positional (self.args) and name-based (self.kwargs) arguments captured according to the URLconf.", "Here, we have a URLconf with a single captured group:", "Next, we\u2019ll write the PublisherBookListView view itself:", "Using get_queryset to add logic to the queryset selection is as convenient as it is powerful. For instance, if we wanted, we could use self.request.user to filter using the current user, or other more complex logic.", "We can also add the publisher into the context at the same time, so we can use it in the template:", "The last common pattern we\u2019ll look at involves doing some extra work before or after calling the generic view.", "Imagine we had a last_accessed field on our Author model that we were using to keep track of the last time anybody looked at that author:", "The generic DetailView class wouldn\u2019t know anything about this field, but once again we could write a custom view to keep that field updated.", "First, we\u2019d need to add an author detail bit in the URLconf to point to a custom view:", "Then we\u2019d write our new view \u2013 get_object is the method that retrieves the object \u2013 so we override it and wrap the call:", "Note", "The URLconf here uses the named group pk - this name is the default name that DetailView uses to find the value of the primary key used to filter the queryset.", "If you want to call the group something else, you can set pk_url_kwarg on the view."]}, {"name": "Built-in class-based views API", "path": "ref/class-based-views/index", "type": "API", "text": ["Class-based views API reference. For introductory material, see the Class-based views topic guide.", "Each request served by a class-based view has an independent state; therefore, it is safe to store state variables on the instance (i.e., self.foo = 3 is a thread-safe operation).", "A class-based view is deployed into a URL pattern using the as_view() classmethod:", "Thread safety with view arguments", "Arguments passed to a view are shared between every instance of a view. This means that you shouldn\u2019t use a list, dictionary, or any other mutable object as an argument to a view. If you do and the shared object is modified, the actions of one user visiting your view could have an effect on subsequent users visiting the same view.", "Arguments passed into as_view() will be assigned onto the instance that is used to service a request. Using the previous example, this means that every request on MyView is able to use self.size. Arguments must correspond to attributes that already exist on the class (return True on a hasattr check).", "Base class-based views can be thought of as parent views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins which extend what base views can do.", "Django\u2019s generic views are built off of those base views, and were developed as a shortcut for common usage patterns such as displaying the details of an object. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to repeat yourself.", "Most generic views require the queryset key, which is a QuerySet instance; see Making queries for more information about QuerySet objects."]}, {"name": "Built-in template tags and filters", "path": "ref/templates/builtins", "type": "API", "text": ["This document describes Django\u2019s built-in template tags and filters. It is recommended that you use the automatic documentation, if available, as this will also include documentation for any custom tags or filters installed.", "Controls the current auto-escaping behavior. This tag takes either on or off as an argument and that determines whether auto-escaping is in effect inside the block. The block is closed with an endautoescape ending tag.", "When auto-escaping is in effect, all variable content has HTML escaping applied to it before placing the result into the output (but after any filters have been applied). This is equivalent to manually applying the escape filter to each variable.", "The only exceptions are variables that are already marked as \u201csafe\u201d from escaping, either by the code that populated the variable, or because it has had the safe or escape filters applied.", "Sample usage:", "Defines a block that can be overridden by child templates. See Template inheritance for more information.", "Ignores everything between {% comment %} and {% endcomment %}. An optional note may be inserted in the first tag. For example, this is useful when commenting out code for documenting why the code was disabled.", "Sample usage:", "comment tags cannot be nested.", "This tag is used for CSRF protection, as described in the documentation for Cross Site Request Forgeries.", "Produces one of its arguments each time this tag is encountered. The first argument is produced on the first encounter, the second argument on the second encounter, and so forth. Once all arguments are exhausted, the tag cycles to the first argument and produces it again.", "This tag is particularly useful in a loop:", "The first iteration produces HTML that refers to class row1, the second to row2, the third to row1 again, and so on for each iteration of the loop.", "You can use variables, too. For example, if you have two template variables, rowvalue1 and rowvalue2, you can alternate between their values like this:", "Variables included in the cycle will be escaped. You can disable auto-escaping with:", "You can mix variables and strings:", "In some cases you might want to refer to the current value of a cycle without advancing to the next value. To do this, give the {% cycle %} tag a name, using \u201cas\u201d, like this:", "From then on, you can insert the current value of the cycle wherever you\u2019d like in your template by referencing the cycle name as a context variable. If you want to move the cycle to the next value independently of the original cycle tag, you can use another cycle tag and specify the name of the variable. So, the following template:", "would output:", "You can use any number of values in a cycle tag, separated by spaces. Values enclosed in single quotes (') or double quotes (\") are treated as string literals, while values without quotes are treated as template variables.", "By default, when you use the as keyword with the cycle tag, the usage of {% cycle %} that initiates the cycle will itself produce the first value in the cycle. This could be a problem if you want to use the value in a nested loop or an included template. If you only want to declare the cycle but not produce the first value, you can add a silent keyword as the last keyword in the tag. For example:", "This will output a list of <tr> elements with class alternating between row1 and row2. The subtemplate will have access to rowcolors in its context and the value will match the class of the <tr> that encloses it. If the silent keyword were to be omitted, row1 and row2 would be emitted as normal text, outside the <tr> element.", "When the silent keyword is used on a cycle definition, the silence automatically applies to all subsequent uses of that specific cycle tag. The following template would output nothing, even though the second call to {% cycle %} doesn\u2019t specify silent:", "You can use the resetcycle tag to make a {% cycle %} tag restart from its first value when it\u2019s next encountered.", "Outputs a whole load of debugging information, including the current context and imported modules.", "Signals that this template extends a parent template.", "This tag can be used in two ways:", "See Template inheritance for more information.", "Normally the template name is relative to the template loader\u2019s root directory. A string argument may also be a relative path starting with ./ or ../. For example, assume the following directory structure:", "In template.html, the following paths would be valid:", "Filters the contents of the block through one or more filters. Multiple filters can be specified with pipes and filters can have arguments, just as in variable syntax.", "Note that the block includes all the text between the filter and endfilter tags.", "Sample usage:", "Note", "The escape and safe filters are not acceptable arguments. Instead, use the autoescape tag to manage autoescaping for blocks of template code.", "Outputs the first argument variable that is not \u201cfalse\u201d (i.e. exists, is not empty, is not a false boolean value, and is not a zero numeric value). Outputs nothing if all the passed variables are \u201cfalse\u201d.", "Sample usage:", "This is equivalent to:", "You can also use a literal string as a fallback value in case all passed variables are False:", "This tag auto-escapes variable values. You can disable auto-escaping with:", "Or if only some variables should be escaped, you can use:", "You can use the syntax {% firstof var1 var2 var3 as value %} to store the output inside a variable.", "Loops over each item in an array, making the item available in a context variable. For example, to display a list of athletes provided in athlete_list:", "You can loop over a list in reverse by using {% for obj in list reversed %}.", "If you need to loop over a list of lists, you can unpack the values in each sublist into individual variables. For example, if your context contains a list of (x,y) coordinates called points, you could use the following to output the list of points:", "This can also be useful if you need to access the items in a dictionary. For example, if your context contained a dictionary data, the following would display the keys and values of the dictionary:", "Keep in mind that for the dot operator, dictionary key lookup takes precedence over method lookup. Therefore if the data dictionary contains a key named 'items', data.items will return data['items'] instead of data.items(). Avoid adding keys that are named like dictionary methods if you want to use those methods in a template (items, values, keys, etc.). Read more about the lookup order of the dot operator in the documentation of template variables.", "The for loop sets a number of variables available within the loop:", "The for tag can take an optional {% empty %} clause whose text is displayed if the given array is empty or could not be found:", "The above is equivalent to \u2013 but shorter, cleaner, and possibly faster than \u2013 the following:", "The {% if %} tag evaluates a variable, and if that variable is \u201ctrue\u201d (i.e. exists, is not empty, and is not a false boolean value) the contents of the block are output:", "In the above, if athlete_list is not empty, the number of athletes will be displayed by the {{ athlete_list|length }} variable.", "As you can see, the if tag may take one or several {% elif %} clauses, as well as an {% else %} clause that will be displayed if all previous conditions fail. These clauses are optional.", "if tags may use and, or or not to test a number of variables or to negate a given variable:", "Use of both and and or clauses within the same tag is allowed, with and having higher precedence than or e.g.:", "will be interpreted like:", "Use of actual parentheses in the if tag is invalid syntax. If you need them to indicate precedence, you should use nested if tags.", "if tags may also use the operators ==, !=, <, >, <=, >=, in, not in, is, and is not which work as follows:", "Equality. Example:", "Inequality. Example:", "Less than. Example:", "Greater than. Example:", "Less than or equal to. Example:", "Greater than or equal to. Example:", "Contained within. This operator is supported by many Python containers to test whether the given value is in the container. The following are some examples of how x in y will be interpreted:", "Not contained within. This is the negation of the in operator.", "Object identity. Tests if two values are the same object. Example:", "Negated object identity. Tests if two values are not the same object. This is the negation of the is operator. Example:", "You can also use filters in the if expression. For example:", "All of the above can be combined to form complex expressions. For such expressions, it can be important to know how the operators are grouped when the expression is evaluated - that is, the precedence rules. The precedence of the operators, from lowest to highest, is as follows:", "(This follows Python exactly). So, for example, the following complex if tag:", "\u2026will be interpreted as:", "If you need different precedence, you will need to use nested if tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules.", "The comparison operators cannot be \u2018chained\u2019 like in Python or in mathematical notation. For example, instead of using:", "you should use:", "Check if a value has changed from the last iteration of a loop.", "The {% ifchanged %} block tag is used within a loop. It has two possible uses.", "Checks its own rendered contents against its previous state and only displays the content if it has changed. For example, this displays a list of days, only displaying the month if it changes:", "If given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed:", "The ifchanged tag can also take an optional {% else %} clause that will be displayed if the value has not changed:", "Loads a template and renders it with the current context. This is a way of \u201cincluding\u201d other templates within a template.", "The template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes.", "This example includes the contents of the template \"foo/bar.html\":", "Normally the template name is relative to the template loader\u2019s root directory. A string argument may also be a relative path starting with ./ or ../ as described in the extends tag.", "This example includes the contents of the template whose name is contained in the variable template_name:", "The variable may also be any object with a render() method that accepts a context. This allows you to reference a compiled Template in your context.", "Additionally, the variable may be an iterable of template names, in which case the first that can be loaded will be used, as per select_template().", "An included template is rendered within the context of the template that includes it. This example produces the output \"Hello, John!\":", "Template:", "The name_snippet.html template:", "You can pass additional context to the template using keyword arguments:", "If you want to render the context only with the variables provided (or even no variables at all), use the only option. No other variables are available to the included template:", "Note", "The include tag should be considered as an implementation of \u201crender this subtemplate and include the HTML\u201d, not as \u201cparse this subtemplate and include its contents as if it were part of the parent\u201d. This means that there is no shared state between included templates \u2013 each include is a completely independent rendering process.", "Blocks are evaluated before they are included. This means that a template that includes blocks from another will contain blocks that have already been evaluated and rendered - not blocks that can be overridden by, for example, an extending template.", "Loads a custom template tag set.", "For example, the following template would load all the tags and filters registered in somelibrary and otherlibrary located in package package:", "You can also selectively load individual filters or tags from a library, using the from argument. In this example, the template tags/filters named foo and bar will be loaded from somelibrary:", "See Custom tag and filter libraries for more information.", "Displays random \u201clorem ipsum\u201d Latin text. This is useful for providing sample data in templates.", "Usage:", "The {% lorem %} tag can be used with zero, one, two or three arguments. The arguments are:", "Examples:", "Displays the current date and/or time, using a format according to the given string. Such string can contain format specifiers characters as described in the date filter section.", "Example:", "Note that you can backslash-escape a format string if you want to use the \u201craw\u201d value. In this example, both \u201co\u201d and \u201cf\u201d are backslash-escaped, because otherwise each is a format string that displays the year and the time, respectively:", "This would display as \u201cIt is the 4th of September\u201d.", "Note", "The format passed can also be one of the predefined ones DATE_FORMAT, DATETIME_FORMAT, SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT. The predefined formats may vary depending on the current locale and if Format localization is enabled, e.g.:", "You can also use the syntax {% now \"Y\" as current_year %} to store the output (as a string) inside a variable. This is useful if you want to use {% now %} inside a template tag like blocktranslate for example:", "Regroups a list of alike objects by a common attribute.", "This complex tag is best illustrated by way of an example: say that cities is a list of cities represented by dictionaries containing \"name\", \"population\", and \"country\" keys:", "\u2026and you\u2019d like to display a hierarchical list that is ordered by country, like this:", "You can use the {% regroup %} tag to group the list of cities by country. The following snippet of template code would accomplish this:", "Let\u2019s walk through this example. {% regroup %} takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we\u2019re regrouping the cities list by the country attribute and calling the result country_list.", "{% regroup %} produces a list (in this case, country_list) of group objects. Group objects are instances of namedtuple() with two fields:", "Because {% regroup %} produces namedtuple() objects, you can also write the previous example as:", "Note that {% regroup %} does not order its input! Our example relies on the fact that the cities list was ordered by country in the first place. If the cities list did not order its members by country, the regrouping would naively display more than one group for a single country. For example, say the cities list was set to this (note that the countries are not grouped together):", "With this input for cities, the example {% regroup %} template code above would result in the following output:", "The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it.", "Another solution is to sort the data in the template using the dictsort filter, if your data is in a list of dictionaries:", "Any valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the \u201ccountry\u201d field is a foreign key to a class with an attribute \u201cdescription,\u201d you could use:", "Or, if country is a field with choices, it will have a get_FOO_display() method available as an attribute, allowing you to group on the display string rather than the choices key:", "{{ country.grouper }} will now display the value fields from the choices set rather than the keys.", "Resets a previous cycle so that it restarts from its first item at its next encounter. Without arguments, {% resetcycle %} will reset the last {% cycle %} defined in the template.", "Example usage:", "This example would return this HTML:", "Notice how the first block ends with class=\"odd\" and the new one starts with class=\"odd\". Without the {% resetcycle %} tag, the second block would start with class=\"even\".", "You can also reset named cycle tags:", "In this example, we have both the alternating odd/even rows and a \u201cmajor\u201d row every fifth row. Only the five-row cycle is reset when a category changes.", "Removes whitespace between HTML tags. This includes tab characters and newlines.", "Example usage:", "This example would return this HTML:", "Only space between tags is removed \u2013 not space between tags and text. In this example, the space around Hello won\u2019t be stripped:", "Outputs one of the syntax characters used to compose template tags.", "The template system has no concept of \u201cescaping\u201d individual characters. However, you can use the {% templatetag %} tag to display one of the template tag character combinations.", "The argument tells which template bit to output:", "Sample usage:", "See also the verbatim tag for another way of including these characters.", "Returns an absolute path reference (a URL without the domain name) matching a given view and optional parameters. Any special characters in the resulting path will be encoded using iri_to_uri().", "This is a way to output links without violating the DRY principle by having to hard-code URLs in your templates:", "The first argument is a URL pattern name. It can be a quoted literal or any other context variable. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax:", "Do not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present.", "For example, suppose you have a view, app_views.client, whose URLconf takes a client ID (here, client() is a method inside the views file app_views.py). The URLconf line might look like this:", "If this app\u2019s URLconf is included into the project\u2019s URLconf under a path such as this:", "\u2026then, in a template, you can create a link to this view like this:", "The template tag will output the string /clients/client/123/.", "Note that if the URL you\u2019re reversing doesn\u2019t exist, you\u2019ll get an NoReverseMatch exception raised, which will cause your site to display an error page.", "If you\u2019d like to retrieve a URL without displaying it, you can use a slightly different call:", "The scope of the variable created by the as var syntax is the {% block %} in which the {% url %} tag appears.", "This {% url ... as var %} syntax will not cause an error if the view is missing. In practice you\u2019ll use this to link to views that are optional:", "If you\u2019d like to retrieve a namespaced URL, specify the fully qualified name:", "This will follow the normal namespaced URL resolution strategy, including using any hints provided by the context as to the current application.", "Warning", "Don\u2019t forget to put quotes around the URL pattern name, otherwise the value will be interpreted as a context variable!", "Stops the template engine from rendering the contents of this block tag.", "A common use is to allow a JavaScript template layer that collides with Django\u2019s syntax. For example:", "You can also designate a specific closing tag, allowing the use of {% endverbatim %} as part of the unrendered contents:", "For creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant.", "For example:", "If this_value is 175, max_value is 200, and max_width is 100, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88).", "In some cases you might want to capture the result of widthratio in a variable. It can be useful, for instance, in a blocktranslate like this:", "Caches a complex variable under a simpler name. This is useful when accessing an \u201cexpensive\u201d method (e.g., one that hits the database) multiple times.", "For example:", "The populated variable (in the example above, total) is only available between the {% with %} and {% endwith %} tags.", "You can assign more than one context variable:", "Note", "The previous more verbose format is still supported: {% with business.employees.count as total %}", "Adds the argument to the value.", "For example:", "If value is 4, then the output will be 6.", "This filter will first try to coerce both values to integers. If this fails, it\u2019ll attempt to add the values together anyway. This will work on some data types (strings, list, etc.) and fail on others. If it fails, the result will be an empty string.", "For example, if we have:", "and first is [1, 2, 3] and second is [4, 5, 6], then the output will be [1, 2, 3, 4, 5, 6].", "Warning", "Strings that can be coerced to integers will be summed, not concatenated, as in the first example above.", "Adds slashes before quotes. Useful for escaping strings in CSV, for example.", "For example:", "If value is \"I'm using Django\", the output will be \"I\\'m using Django\".", "Capitalizes the first character of the value. If the first character is not a letter, this filter has no effect.", "For example:", "If value is \"django\", the output will be \"Django\".", "Centers the value in a field of a given width.", "For example:", "If value is \"Django\", the output will be \"\u00a0\u00a0\u00a0\u00a0 Django\u00a0\u00a0\u00a0 \".", "Removes all values of arg from the given string.", "For example:", "If value is \"String with spaces\", the output will be \"Stringwithspaces\".", "Formats a date according to the given format.", "Uses a similar format to PHP\u2019s date() function with some differences.", "Note", "These format characters are not used in Django outside of templates. They were designed to be compatible with PHP to ease transitioning for designers.", "Available format strings:", "For example:", "If value is a datetime object (e.g., the result of datetime.datetime.now()), the output will be the string 'Wed 09 Jan 2008'.", "The format passed can be one of the predefined ones DATE_FORMAT, DATETIME_FORMAT, SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT, or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale.", "Assuming that USE_L10N is True and LANGUAGE_CODE is, for example, \"es\", then for:", "the output would be the string \"09/01/2008\" (the \"SHORT_DATE_FORMAT\" format specifier for the es locale as shipped with Django is \"d/m/Y\").", "When used without a format string, the DATE_FORMAT format specifier is used. Assuming the same settings as the previous example:", "outputs 9 de Enero de 2008 (the DATE_FORMAT format specifier for the es locale is r'j \\d\\e F \\d\\e Y'). Both \u201cd\u201d and \u201ce\u201d are backslash-escaped, because otherwise each is a format string that displays the day and the timezone name, respectively.", "You can combine date with the time filter to render a full representation of a datetime value. E.g.:", "If value evaluates to False, uses the given default. Otherwise, uses the value.", "For example:", "If value is \"\" (the empty string), the output will be nothing.", "If (and only if) value is None, uses the given default. Otherwise, uses the value.", "Note that if an empty string is given, the default value will not be used. Use the default filter if you want to fallback for empty strings.", "For example:", "If value is None, the output will be nothing.", "Takes a list of dictionaries and returns that list sorted by the key given in the argument.", "For example:", "If value is:", "then the output would be:", "You can also do more complicated things like:", "If books is:", "then the output would be:", "dictsort can also order a list of lists (or any other object implementing __getitem__()) by elements at specified index. For example:", "If value is:", "then the output would be:", "You must pass the index as an integer rather than a string. The following produce empty output:", "Takes a list of dictionaries and returns that list sorted in reverse order by the key given in the argument. This works exactly the same as the above filter, but the returned value will be in reverse order.", "Returns True if the value is divisible by the argument.", "For example:", "If value is 21, the output would be True.", "Escapes a string\u2019s HTML. Specifically, it makes these replacements:", "Applying escape to a variable that would normally have auto-escaping applied to the result will only result in one round of escaping being done. So it is safe to use this function even in auto-escaping environments. If you want multiple escaping passes to be applied, use the force_escape filter.", "For example, you can apply escape to fields when autoescape is off:", "Escapes characters for use in JavaScript strings. This does not make the string safe for use in HTML or JavaScript template literals, but does protect you from syntax errors when using templates to generate JavaScript/JSON.", "For example:", "If value is \"testing\\r\\njavascript 'string\\\" <b>escaping</b>\", the output will be \"testing\\\\u000D\\\\u000Ajavascript \\\\u0027string\\\\u0022 \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\".", "Formats the value like a \u2018human-readable\u2019 file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc.).", "For example:", "If value is 123456789, the output would be 117.7 MB.", "File sizes and SI units", "Strictly speaking, filesizeformat does not conform to the International System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes are calculated in powers of 1024 (which is the case here). Instead, Django uses traditional unit names (KB, MB, GB, etc.) corresponding to names that are more commonly used.", "Returns the first item in a list.", "For example:", "If value is the list ['a', 'b', 'c'], the output will be 'a'.", "When used without an argument, rounds a floating-point number to one decimal place \u2013 but only if there\u2019s a decimal part to be displayed. For example:", "If used with a numeric integer argument, floatformat rounds a number to that many decimal places. For example:", "Particularly useful is passing 0 (zero) as the argument which will round the float to the nearest integer.", "If the argument passed to floatformat is negative, it will round a number to that many decimal places \u2013 but only if there\u2019s a decimal part to be displayed. For example:", "If the argument passed to floatformat has the g suffix, it will force grouping by the THOUSAND_SEPARATOR for the active locale. For example, when the active locale is en (English):", "Output is always localized (independently of the {% localize off %} tag) unless the argument passed to floatformat has the u suffix, which will force disabling localization. For example, when the active locale is pl (Polish):", "Using floatformat with no argument is equivalent to using floatformat with an argument of -1.", "The g suffix to force grouping by thousand separators was added.", "floatformat template filter no longer depends on the USE_L10N setting and always returns localized output.", "The u suffix to force disabling localization was added.", "Applies HTML escaping to a string (see the escape filter for details). This filter is applied immediately and returns a new, escaped string. This is useful in the rare cases where you need multiple escaping or want to apply other filters to the escaped results. Normally, you want to use the escape filter.", "For example, if you want to catch the <p> HTML elements created by the linebreaks filter:", "Given a whole number, returns the requested digit, where 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer.", "For example:", "If value is 123456789, the output will be 8.", "Converts an IRI (Internationalized Resource Identifier) to a string that is suitable for including in a URL. This is necessary if you\u2019re trying to use strings containing non-ASCII characters in a URL.", "It\u2019s safe to use this filter on a string that has already gone through the urlencode filter.", "For example:", "If value is \"?test=1&me=2\", the output will be \"?test=1&amp;me=2\".", "Joins a list with a string, like Python\u2019s str.join(list)", "For example:", "If value is the list ['a', 'b', 'c'], the output will be the string \"a // b // c\".", "Safely outputs a Python object as JSON, wrapped in a <script> tag, ready for use with JavaScript.", "Argument: HTML \u201cid\u201d of the <script> tag.", "For example:", "If value is the dictionary {'hello': 'world'}, the output will be:", "The resulting data can be accessed in JavaScript like this:", "XSS attacks are mitigated by escaping the characters \u201c<\u201d, \u201c>\u201d and \u201c&\u201d. For example if value is {'hello': 'world</script>&amp;'}, the output is:", "This is compatible with a strict Content Security Policy that prohibits in-page script execution. It also maintains a clean separation between passive data and executable code.", "Returns the last item in a list.", "For example:", "If value is the list ['a', 'b', 'c', 'd'], the output will be the string \"d\".", "Returns the length of the value. This works for both strings and lists.", "For example:", "If value is ['a', 'b', 'c', 'd'] or \"abcd\", the output will be 4.", "The filter returns 0 for an undefined variable.", "Returns True if the value\u2019s length is the argument, or False otherwise.", "For example:", "If value is ['a', 'b', 'c', 'd'] or \"abcd\", the output will be True.", "Replaces line breaks in plain text with appropriate HTML; a single newline becomes an HTML line break (<br>) and a new line followed by a blank line becomes a paragraph break (</p>).", "For example:", "If value is Joel\\nis a slug, the output will be <p>Joel<br>is a\nslug</p>.", "Converts all newlines in a piece of plain text to HTML line breaks (<br>).", "For example:", "If value is Joel\\nis a slug, the output will be Joel<br>is a\nslug.", "Displays text with line numbers.", "For example:", "If value is:", "the output will be:", "Left-aligns the value in a field of a given width.", "Argument: field size", "For example:", "If value is Django, the output will be \"Django\u00a0\u00a0\u00a0 \".", "Converts a string into all lowercase.", "For example:", "If value is Totally LOVING this Album!, the output will be totally loving this album!.", "Returns the value turned into a list. For a string, it\u2019s a list of characters. For an integer, the argument is cast to a string before creating a list.", "For example:", "If value is the string \"Joel\", the output would be the list ['J', 'o', 'e', 'l']. If value is 123, the output will be the list ['1', '2', '3'].", "Converts a phone number (possibly containing letters) to its numerical equivalent.", "The input doesn\u2019t have to be a valid phone number. This will happily convert any string.", "For example:", "If value is 800-COLLECT, the output will be 800-2655328.", "Returns a plural suffix if the value is not 1, '1', or an object of length 1. By default, this suffix is 's'.", "Example:", "If num_messages is 1, the output will be You have 1 message. If num_messages is 2 the output will be You have 2 messages.", "For words that require a suffix other than 's', you can provide an alternate suffix as a parameter to the filter.", "Example:", "For words that don\u2019t pluralize by simple suffix, you can specify both a singular and plural suffix, separated by a comma.", "Example:", "Note", "Use blocktranslate to pluralize translated strings.", "A wrapper around pprint.pprint() \u2013 for debugging, really.", "Returns a random item from the given list.", "For example:", "If value is the list ['a', 'b', 'c', 'd'], the output could be \"b\".", "Right-aligns the value in a field of a given width.", "Argument: field size", "For example:", "If value is Django, the output will be \"\u00a0\u00a0\u00a0 Django\".", "Marks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect.", "Note", "If you are chaining filters, a filter applied after safe can make the contents unsafe again. For example, the following code prints the variable as is, unescaped:", "Applies the safe filter to each element of a sequence. Useful in conjunction with other filters that operate on sequences, such as join. For example:", "You couldn\u2019t use the safe filter directly in this case, as it would first convert the variable into a string, rather than working with the individual elements of the sequence.", "Returns a slice of the list.", "Uses the same syntax as Python\u2019s list slicing. See https://diveinto.org/python3/native-datatypes.html#slicinglists for an introduction.", "Example:", "If some_list is ['a', 'b', 'c'], the output will be ['a', 'b'].", "Converts to ASCII. Converts spaces to hyphens. Removes characters that aren\u2019t alphanumerics, underscores, or hyphens. Converts to lowercase. Also strips leading and trailing whitespace.", "For example:", "If value is \"Joel is a slug\", the output will be \"joel-is-a-slug\".", "Formats the variable according to the argument, a string formatting specifier. This specifier uses the printf-style String Formatting syntax, with the exception that the leading \u201c%\u201d is dropped.", "For example:", "If value is 10, the output will be 1.000000E+01.", "Makes all possible efforts to strip all [X]HTML tags.", "For example:", "If value is \"<b>Joel</b> <button>is</button> a <span>slug</span>\", the output will be \"Joel is a slug\".", "No safety guarantee", "Note that striptags doesn\u2019t give any guarantee about its output being HTML safe, particularly with non valid HTML input. So NEVER apply the safe filter to a striptags output. If you are looking for something more robust, you can use the bleach Python library, notably its clean method.", "Formats a time according to the given format.", "Given format can be the predefined one TIME_FORMAT, or a custom format, same as the date filter. Note that the predefined format is locale-dependent.", "For example:", "If value is equivalent to datetime.datetime.now(), the output will be the string \"01:23\".", "Note that you can backslash-escape a format string if you want to use the \u201craw\u201d value. In this example, both \u201ch\u201d and \u201cm\u201d are backslash-escaped, because otherwise each is a format string that displays the hour and the month, respectively:", "This would display as \u201c01h 23m\u201d.", "Another example:", "Assuming that USE_L10N is True and LANGUAGE_CODE is, for example, \"de\", then for:", "the output will be the string \"01:23\" (The \"TIME_FORMAT\" format specifier for the de locale as shipped with Django is \"H:i\").", "The time filter will only accept parameters in the format string that relate to the time of day, not the date. If you need to format a date value, use the date filter instead (or along with time if you need to render a full datetime value).", "There is one exception the above rule: When passed a datetime value with attached timezone information (a time-zone-aware datetime instance) the time filter will accept the timezone-related format specifiers 'e', 'O' , 'T' and 'Z'.", "When used without a format string, the TIME_FORMAT format specifier is used:", "is the same as:", "Formats a date as the time since that date (e.g., \u201c4 days, 6 hours\u201d).", "Takes an optional argument that is a variable containing the date to use as the comparison point (without the argument, the comparison point is now). For example, if blog_date is a date instance representing midnight on 1 June 2006, and comment_date is a date instance for 08:00 on 1 June 2006, then the following would return \u201c8 hours\u201d:", "Comparing offset-naive and offset-aware datetimes will return an empty string.", "Minutes is the smallest unit used, and \u201c0 minutes\u201d will be returned for any date that is in the future relative to the comparison point.", "Similar to timesince, except that it measures the time from now until the given date or datetime. For example, if today is 1 June 2006 and conference_date is a date instance holding 29 June 2006, then {{ conference_date|timeuntil }} will return \u201c4 weeks\u201d.", "Takes an optional argument that is a variable containing the date to use as the comparison point (instead of now). If from_date contains 22 June 2006, then the following will return \u201c1 week\u201d:", "Comparing offset-naive and offset-aware datetimes will return an empty string.", "Minutes is the smallest unit used, and \u201c0 minutes\u201d will be returned for any date that is in the past relative to the comparison point.", "Converts a string into titlecase by making words start with an uppercase character and the remaining characters lowercase. This tag makes no effort to keep \u201ctrivial words\u201d in lowercase.", "For example:", "If value is \"my FIRST post\", the output will be \"My First Post\".", "Truncates a string if it is longer than the specified number of characters. Truncated strings will end with a translatable ellipsis character (\u201c\u2026\u201d).", "Argument: Number of characters to truncate to", "For example:", "If value is \"Joel is a slug\", the output will be \"Joel i\u2026\".", "Similar to truncatechars, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point are closed immediately after the truncation.", "For example:", "If value is \"<p>Joel is a slug</p>\", the output will be \"<p>Joel i\u2026</p>\".", "Newlines in the HTML content will be preserved.", "Truncates a string after a certain number of words.", "Argument: Number of words to truncate after", "For example:", "If value is \"Joel is a slug\", the output will be \"Joel is \u2026\".", "Newlines within the string will be removed.", "Similar to truncatewords, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point, are closed immediately after the truncation.", "This is less efficient than truncatewords, so should only be used when it is being passed HTML text.", "For example:", "If value is \"<p>Joel is a slug</p>\", the output will be \"<p>Joel is \u2026</p>\".", "Newlines in the HTML content will be preserved.", "Recursively takes a self-nested list and returns an HTML unordered list \u2013 WITHOUT opening and closing <ul> tags.", "The list is assumed to be in the proper format. For example, if var contains ['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']], then {{ var|unordered_list }} would return:", "Converts a string into all uppercase.", "For example:", "If value is \"Joel is a slug\", the output will be \"JOEL IS A SLUG\".", "Escapes a value for use in a URL.", "For example:", "If value is \"https://www.example.org/foo?a=b&c=d\", the output will be \"https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\".", "An optional argument containing the characters which should not be escaped can be provided.", "If not provided, the \u2018/\u2019 character is assumed safe. An empty string can be provided when all characters should be escaped. For example:", "If value is \"https://www.example.org/\", the output will be \"https%3A%2F%2Fwww.example.org%2F\".", "Converts URLs and email addresses in text into clickable links.", "This template tag works on links prefixed with http://, https://, or www.. For example, https://goo.gl/aia1t will get converted but goo.gl/aia1t won\u2019t.", "It also supports domain-only links ending in one of the original top level domains (.com, .edu, .gov, .int, .mil, .net, and .org). For example, djangoproject.com gets converted.", "Links can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and urlize will still do the right thing.", "Links generated by urlize have a rel=\"nofollow\" attribute added to them.", "For example:", "If value is \"Check out www.djangoproject.com\", the output will be \"Check out <a href=\"http://www.djangoproject.com\"\nrel=\"nofollow\">www.djangoproject.com</a>\".", "In addition to web links, urlize also converts email addresses into mailto: links. If value is \"Send questions to foo@example.com\", the output will be \"Send questions to <a href=\"mailto:foo@example.com\">foo@example.com</a>\".", "The urlize filter also takes an optional parameter autoescape. If autoescape is True, the link text and URLs will be escaped using Django\u2019s built-in escape filter. The default value for autoescape is True.", "Note", "If urlize is applied to text that already contains HTML markup, or to email addresses that contain single quotes ('), things won\u2019t work as expected. Apply this filter only to plain text.", "Converts URLs and email addresses into clickable links just like urlize, but truncates URLs longer than the given character limit.", "Argument: Number of characters that link text should be truncated to, including the ellipsis that\u2019s added if truncation is necessary.", "For example:", "If value is \"Check out www.djangoproject.com\", the output would be 'Check out <a href=\"http://www.djangoproject.com\"\nrel=\"nofollow\">www.djangoproj\u2026</a>'.", "As with urlize, this filter should only be applied to plain text.", "Returns the number of words.", "For example:", "If value is \"Joel is a slug\", the output will be 4.", "Wraps words at specified line length.", "Argument: number of characters at which to wrap the text", "For example:", "If value is Joel is a slug, the output would be:", "Maps values for True, False, and (optionally) None, to the strings \u201cyes\u201d, \u201cno\u201d, \u201cmaybe\u201d, or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value:", "For example:", "Django provides template tags and filters to control each aspect of internationalization in templates. They allow for granular control of translations, formatting, and time zone conversions.", "This library allows specifying translatable text in templates. To enable it, set USE_I18N to True, then load it with {% load i18n %}.", "See Internationalization: in template code.", "This library provides control over the localization of values in templates. You only need to load the library using {% load l10n %}, but you\u2019ll often set USE_L10N to True so that localization is active by default.", "See Controlling localization in templates.", "This library provides control over time zone conversions in templates. Like l10n, you only need to load the library using {% load tz %}, but you\u2019ll usually also set USE_TZ to True so that conversion to local time happens by default.", "See Time zone aware output in templates.", "Django comes with a couple of other template-tag libraries that you have to enable explicitly in your INSTALLED_APPS setting and enable in your template with the {% load %} tag.", "A set of Django template filters useful for adding a \u201chuman touch\u201d to data. See django.contrib.humanize.", "To link to static files that are saved in STATIC_ROOT Django ships with a static template tag. If the django.contrib.staticfiles app is installed, the tag will serve files using url() method of the storage specified by STATICFILES_STORAGE. For example:", "It is also able to consume standard context variables, e.g. assuming a user_stylesheet variable is passed to the template:", "If you\u2019d like to retrieve a static URL without displaying it, you can use a slightly different call:", "Using Jinja2 templates?", "See Jinja2 for information on using the static tag with Jinja2.", "You should prefer the static template tag, but if you need more control over exactly where and how STATIC_URL is injected into the template, you can use the get_static_prefix template tag:", "There\u2019s also a second form you can use to avoid extra processing if you need the value multiple times:", "Similar to the get_static_prefix, get_media_prefix populates a template variable with the media prefix MEDIA_URL, e.g.:", "By storing the value in a data attribute, we ensure it\u2019s escaped appropriately if we want to use it in a JavaScript context."]}, {"name": "Built-in Views", "path": "ref/views", "type": "API", "text": ["Several of Django\u2019s built-in views are documented in Writing views as well as elsewhere in the documentation.", "There may be files other than your project\u2019s static assets that, for convenience, you\u2019d like to have Django serve for you in local development. The serve() view can be used to serve any directory you give it. (This view is not hardened for production use and should be used only as a development aid; you should serve these files in production using a real front-end web server).", "The most likely example is user-uploaded content in MEDIA_ROOT. django.contrib.staticfiles is intended for static assets and has no built-in handling for user-uploaded files, but you can have Django serve your MEDIA_ROOT by appending something like this to your URLconf:", "Note, the snippet assumes your MEDIA_URL has a value of 'media/'. This will call the serve() view, passing in the path from the URLconf and the (required) document_root parameter.", "Since it can become a bit cumbersome to define this URL pattern, Django ships with a small URL helper function static() that takes as parameters the prefix such as MEDIA_URL and a dotted path to a view, such as 'django.views.static.serve'. Any other function parameter will be transparently passed to the view.", "Django comes with a few views by default for handling HTTP errors. To override these with your own custom views, see Customizing error views.", "When you raise Http404 from within a view, Django loads a special view devoted to handling 404 errors. By default, it\u2019s the view django.views.defaults.page_not_found(), which either produces a \u201cNot Found\u201d message or loads and renders the template 404.html if you created it in your root template directory.", "The default 404 view will pass two variables to the template: request_path, which is the URL that resulted in the error, and exception, which is a useful representation of the exception that triggered the view (e.g. containing any message passed to a specific Http404 instance).", "Three things to note about 404 views:", "Similarly, Django executes special-case behavior in the case of runtime errors in view code. If a view results in an exception, Django will, by default, call the view django.views.defaults.server_error, which either produces a \u201cServer Error\u201d message or loads and renders the template 500.html if you created it in your root template directory.", "The default 500 view passes no variables to the 500.html template and is rendered with an empty Context to lessen the chance of additional errors.", "If DEBUG is set to True (in your settings module), then your 500 view will never be used, and the traceback will be displayed instead, with some debug information.", "In the same vein as the 404 and 500 views, Django has a view to handle 403 Forbidden errors. If a view results in a 403 exception then Django will, by default, call the view django.views.defaults.permission_denied.", "This view loads and renders the template 403.html in your root template directory, or if this file does not exist, instead serves the text \u201c403 Forbidden\u201d, as per RFC 7231#section-6.5.3 (the HTTP 1.1 Specification). The template context contains exception, which is the string representation of the exception that triggered the view.", "django.views.defaults.permission_denied is triggered by a PermissionDenied exception. To deny access in a view you can use code like this:", "When a SuspiciousOperation is raised in Django, it may be handled by a component of Django (for example resetting the session data). If not specifically handled, Django will consider the current request a \u2018bad request\u2019 instead of a server error.", "django.views.defaults.bad_request, is otherwise very similar to the server_error view, but returns with the status code 400 indicating that the error condition was the result of a client operation. By default, nothing related to the exception that triggered the view is passed to the template context, as the exception message might contain sensitive information like filesystem paths.", "bad_request views are also only used when DEBUG is False."]}, {"name": "Class-based views", "path": "topics/class-based-views/index", "type": "Guides", "text": ["A view is a callable which takes a request and returns a response. This can be more than just a function, and Django provides an example of some classes which can be used as views. These allow you to structure your views and reuse code by harnessing inheritance and mixins. There are also some generic views for tasks which we\u2019ll get to later, but you may want to design your own structure of reusable views which suits your use case. For full details, see the class-based views reference documentation.", "Django provides base view classes which will suit a wide range of applications. All views inherit from the View class, which handles linking the view into the URLs, HTTP method dispatching and other common features. RedirectView provides a HTTP redirect, and TemplateView extends the base class to make it also render a template.", "The most direct way to use generic views is to create them directly in your URLconf. If you\u2019re only changing a few attributes on a class-based view, you can pass them into the as_view() method call itself:", "Any arguments passed to as_view() will override attributes set on the class. In this example, we set template_name on the TemplateView. A similar overriding pattern can be used for the url attribute on RedirectView.", "The second, more powerful way to use generic views is to inherit from an existing view and override attributes (such as the template_name) or methods (such as get_context_data) in your subclass to provide new values or methods. Consider, for example, a view that just displays one template, about.html. Django has a generic view to do this - TemplateView - so we can subclass it, and override the template name:", "Then we need to add this new view into our URLconf. TemplateView is a class, not a function, so we point the URL to the as_view() class method instead, which provides a function-like entry to class-based views:", "For more information on how to use the built in generic views, consult the next topic on generic class-based views.", "Suppose somebody wants to access our book library over HTTP using the views as an API. The API client would connect every now and then and download book data for the books published since last visit. But if no new books appeared since then, it is a waste of CPU time and bandwidth to fetch the books from the database, render a full response and send it to the client. It might be preferable to ask the API when the most recent book was published.", "We map the URL to book list view in the URLconf:", "And the view:", "If the view is accessed from a GET request, an object list is returned in the response (using the book_list.html template). But if the client issues a HEAD request, the response has an empty body and the Last-Modified header indicates when the most recent book was published. Based on this information, the client may or may not download the full object list."]}, {"name": "Class-based views mixins", "path": "ref/class-based-views/mixins", "type": "API", "text": ["Class-based views API reference. For introductory material, see Using mixins with class-based views."]}, {"name": "Clickjacking Protection", "path": "ref/clickjacking", "type": "API", "text": ["The clickjacking middleware and decorators provide easy-to-use protection against clickjacking. This type of attack occurs when a malicious site tricks a user into clicking on a concealed element of another site which they have loaded in a hidden frame or iframe.", "Suppose an online store has a page where a logged in user can click \u201cBuy Now\u201d to purchase an item. A user has chosen to stay logged into the store all the time for convenience. An attacker site might create an \u201cI Like Ponies\u201d button on one of their own pages, and load the store\u2019s page in a transparent iframe such that the \u201cBuy Now\u201d button is invisibly overlaid on the \u201cI Like Ponies\u201d button. If the user visits the attacker\u2019s site, clicking \u201cI Like Ponies\u201d will cause an inadvertent click on the \u201cBuy Now\u201d button and an unknowing purchase of the item.", "Modern browsers honor the X-Frame-Options HTTP header that indicates whether or not a resource is allowed to load within a frame or iframe. If the response contains the header with a value of SAMEORIGIN then the browser will only load the resource in a frame if the request originated from the same site. If the header is set to DENY then the browser will block the resource from loading in a frame no matter which site made the request.", "Django provides a few ways to include this header in responses from your site:", "The X-Frame-Options HTTP header will only be set by the middleware or view decorators if it is not already present in the response.", "To set the same X-Frame-Options value for all responses in your site, put 'django.middleware.clickjacking.XFrameOptionsMiddleware' to MIDDLEWARE:", "This middleware is enabled in the settings file generated by startproject.", "By default, the middleware will set the X-Frame-Options header to DENY for every outgoing HttpResponse. If you want any other value for this header instead, set the X_FRAME_OPTIONS setting:", "When using the middleware there may be some views where you do not want the X-Frame-Options header set. For those cases, you can use a view decorator that tells the middleware not to set the header:", "Note", "If you want to submit a form or access a session cookie within a frame or iframe, you may need to modify the CSRF_COOKIE_SAMESITE or SESSION_COOKIE_SAMESITE settings.", "To set the X-Frame-Options header on a per view basis, Django provides these decorators:", "Note that you can use the decorators in conjunction with the middleware. Use of a decorator overrides the middleware.", "The X-Frame-Options header will only protect against clickjacking in a modern browser. Older browsers will quietly ignore the header and need other clickjacking prevention techniques.", "A complete list of browsers supporting X-Frame-Options."]}, {"name": "Conditional Expressions", "path": "ref/models/conditional-expressions", "type": "API", "text": ["Conditional expressions let you use if \u2026 elif \u2026 else logic within filters, annotations, aggregations, and updates. A conditional expression evaluates a series of conditions for each row of a table and returns the matching result expression. Conditional expressions can also be combined and nested like other expressions.", "We\u2019ll be using the following model in the subsequent examples:", "A When() object is used to encapsulate a condition and its result for use in the conditional expression. Using a When() object is similar to using the filter() method. The condition can be specified using field lookups, Q objects, or Expression objects that have an output_field that is a BooleanField. The result is provided using the then keyword.", "Support for lookup expressions was added.", "Some examples:", "Keep in mind that each of these values can be an expression.", "Note", "Since the then keyword argument is reserved for the result of the When(), there is a potential conflict if a Model has a field named then. This can be resolved in two ways:", "Support for using the condition argument with lookups was added.", "A Case() expression is like the if \u2026 elif \u2026 else statement in Python. Each condition in the provided When() objects is evaluated in order, until one evaluates to a truthful value. The result expression from the matching When() object is returned.", "An example:", "Case() accepts any number of When() objects as individual arguments. Other options are provided using keyword arguments. If none of the conditions evaluate to TRUE, then the expression given with the default keyword argument is returned. If a default argument isn\u2019t provided, None is used.", "If we wanted to change our previous query to get the discount based on how long the Client has been with us, we could do so using lookups:", "Note", "Remember that the conditions are evaluated in order, so in the above example we get the correct result even though the second condition matches both Jane Doe and Jack Black. This works just like an if \u2026 elif \u2026 else statement in Python.", "Case() also works in a filter() clause. For example, to find gold clients that registered more than a month ago and platinum clients that registered more than a year ago:", "Conditional expressions can be used in annotations, aggregations, filters, lookups, and updates. They can also be combined and nested with other expressions. This allows you to make powerful conditional queries.", "Let\u2019s say we want to change the account_type for our clients to match their registration dates. We can do this using a conditional expression and the update() method:", "What if we want to find out how many clients there are for each account_type? We can use the filter argument of aggregate functions to achieve this:", "This aggregate produces a query with the SQL 2003 FILTER WHERE syntax on databases that support it:", "On other databases, this is emulated using a CASE statement:", "The two SQL statements are functionally equivalent but the more explicit FILTER may perform better.", "When a conditional expression returns a boolean value, it is possible to use it directly in filters. This means that it will not be added to the SELECT columns, but you can still use it to filter results:", "In SQL terms, that evaluates to:"]}, {"name": "Conditional View Processing", "path": "topics/conditional-view-processing", "type": "Guides", "text": ["HTTP clients can send a number of headers to tell the server about copies of a resource that they have already seen. This is commonly used when retrieving a web page (using an HTTP GET request) to avoid sending all the data for something the client has already retrieved. However, the same headers can be used for all HTTP methods (POST, PUT, DELETE, etc.).", "For each page (response) that Django sends back from a view, it might provide two HTTP headers: the ETag header and the Last-Modified header. These headers are optional on HTTP responses. They can be set by your view function, or you can rely on the ConditionalGetMiddleware middleware to set the ETag header.", "When the client next requests the same resource, it might send along a header such as either If-modified-since or If-unmodified-since, containing the date of the last modification time it was sent, or either If-match or If-none-match, containing the last ETag it was sent. If the current version of the page matches the ETag sent by the client, or if the resource has not been modified, a 304 status code can be sent back, instead of a full response, telling the client that nothing has changed. Depending on the header, if the page has been modified or does not match the ETag sent by the client, a 412 status code (Precondition Failed) may be returned.", "When you need more fine-grained control you may use per-view conditional processing functions.", "Sometimes (in fact, quite often) you can create functions to rapidly compute the ETag value or the last-modified time for a resource, without needing to do all the computations needed to construct the full view. Django can then use these functions to provide an \u201cearly bailout\u201d option for the view processing. Telling the client that the content has not been modified since the last request, perhaps.", "These two functions are passed as parameters to the django.views.decorators.http.condition decorator. This decorator uses the two functions (you only need to supply one, if you can\u2019t compute both quantities easily and quickly) to work out if the headers in the HTTP request match those on the resource. If they don\u2019t match, a new copy of the resource must be computed and your normal view is called.", "The condition decorator\u2019s signature looks like this:", "The two functions, to compute the ETag and the last modified time, will be passed the incoming request object and the same parameters, in the same order, as the view function they are helping to wrap. The function passed last_modified_func should return a standard datetime value specifying the last time the resource was modified, or None if the resource doesn\u2019t exist. The function passed to the etag decorator should return a string representing the ETag for the resource, or None if it doesn\u2019t exist.", "The decorator sets the ETag and Last-Modified headers on the response if they are not already set by the view and if the request\u2019s method is safe (GET or HEAD).", "Using this feature usefully is probably best explained with an example. Suppose you have this pair of models, representing a small blog system:", "If the front page, displaying the latest blog entries, only changes when you add a new blog entry, you can compute the last modified time very quickly. You need the latest published date for every entry associated with that blog. One way to do this would be:", "You can then use this function to provide early detection of an unchanged page for your front page view:", "Be careful with the order of decorators", "When condition() returns a conditional response, any decorators below it will be skipped and won\u2019t apply to the response. Therefore, any decorators that need to apply to both the regular view response and a conditional response must be above condition(). In particular, vary_on_cookie(), vary_on_headers(), and cache_control() should come first because RFC 7232 requires that the headers they set be present on 304 responses.", "As a general rule, if you can provide functions to compute both the ETag and the last modified time, you should do so. You don\u2019t know which headers any given HTTP client will send you, so be prepared to handle both. However, sometimes only one value is easy to compute and Django provides decorators that handle only ETag or only last-modified computations.", "The django.views.decorators.http.etag and django.views.decorators.http.last_modified decorators are passed the same type of functions as the condition decorator. Their signatures are:", "We could write the earlier example, which only uses a last-modified function, using one of these decorators:", "\u2026or:", "It might look nicer to some people to try and chain the etag and last_modified decorators if you want to test both preconditions. However, this would lead to incorrect behavior.", "The first decorator doesn\u2019t know anything about the second and might answer that the response is not modified even if the second decorators would determine otherwise. The condition decorator uses both callback functions simultaneously to work out the right action to take.", "The condition decorator is useful for more than only GET and HEAD requests (HEAD requests are the same as GET in this situation). It can also be used to provide checking for POST, PUT and DELETE requests. In these situations, the idea isn\u2019t to return a \u201cnot modified\u201d response, but to tell the client that the resource they are trying to change has been altered in the meantime.", "For example, consider the following exchange between the client and server:", "The important thing this example shows is that the same functions can be used to compute the ETag and last modification values in all situations. In fact, you should use the same functions, so that the same values are returned every time.", "Validator headers with non-safe request methods", "The condition decorator only sets validator headers (ETag and Last-Modified) for safe HTTP methods, i.e. GET and HEAD. If you wish to return them in other cases, set them in your view. See RFC 7231#section-4.3.4 to learn about the distinction between setting a validator header in response to requests made with PUT versus POST.", "Django provides conditional GET handling via django.middleware.http.ConditionalGetMiddleware. While being suitable for many situations, the middleware has limitations for advanced usage:", "You should choose the most appropriate tool for your particular problem here. If you have a way to compute ETags and modification times quickly and if some view takes a while to generate the content, you should consider using the condition decorator described in this document. If everything already runs fairly quickly, stick to using the middleware and the amount of network traffic sent back to the clients will still be reduced if the view hasn\u2019t changed."]}, {"name": "conf.settings.configure()", "path": "topics/settings#django.conf.settings.configure", "type": "django.conf", "text": []}, {"name": "conf.urls.handler400", "path": "ref/urls#django.conf.urls.handler400", "type": "django.conf", "text": []}, {"name": "conf.urls.handler403", "path": "ref/urls#django.conf.urls.handler403", "type": "django.conf", "text": []}, {"name": "conf.urls.handler404", "path": "ref/urls#django.conf.urls.handler404", "type": "django.conf", "text": []}, {"name": "conf.urls.handler500", "path": "ref/urls#django.conf.urls.handler500", "type": "django.conf", "text": []}, {"name": "conf.urls.i18n.i18n_patterns()", "path": "topics/i18n/translation#django.conf.urls.i18n.i18n_patterns", "type": "django.conf", "text": []}, {"name": "conf.urls.static.static()", "path": "ref/urls#django.conf.urls.static.static", "type": "django.conf", "text": []}, {"name": "Constraints reference", "path": "ref/models/constraints", "type": "API", "text": ["The classes defined in this module create database constraints. They are added in the model Meta.constraints option.", "Referencing built-in constraints", "Constraints are defined in django.db.models.constraints, but for convenience they\u2019re imported into django.db.models. The standard convention is to use from django.db import models and refer to the constraints as models.<Foo>Constraint.", "Constraints in abstract base classes", "You must always specify a unique name for the constraint. As such, you cannot normally specify a constraint on an abstract base class, since the Meta.constraints option is inherited by subclasses, with exactly the same values for the attributes (including name) each time. To work around name collisions, part of the name may contain '%(app_label)s' and '%(class)s', which are replaced, respectively, by the lowercased app label and class name of the concrete model. For example CheckConstraint(check=Q(age__gte=18),\nname='%(app_label)s_%(class)s_is_adult').", "Validation of Constraints", "In general constraints are not checked during full_clean(), and do not raise ValidationErrors. Rather you\u2019ll get a database integrity error on save(). UniqueConstraints without a condition (i.e. non-partial unique constraints) and expressions (i.e. non-functional unique constraints) are different in this regard, in that they leverage the existing validate_unique() logic, and thus enable two-stage validation. In addition to IntegrityError on save(), ValidationError is also raised during model validation when the UniqueConstraint is violated.", "Creates a check constraint in the database.", "A Q object or boolean Expression that specifies the check you want the constraint to enforce.", "For example, CheckConstraint(check=Q(age__gte=18), name='age_gte_18') ensures the age field is never less than 18.", "The name of the constraint. You must always specify a unique name for the constraint.", "Creates a unique constraint in the database.", "Positional argument *expressions allows creating functional unique constraints on expressions and database functions.", "For example:", "creates a unique constraint on the lowercased value of the name field in descending order and the category field in the default ascending order.", "Functional unique constraints have the same database restrictions as Index.expressions.", "A list of field names that specifies the unique set of columns you want the constraint to enforce.", "For example, UniqueConstraint(fields=['room', 'date'],\nname='unique_booking') ensures each room can only be booked once for each date.", "The name of the constraint. You must always specify a unique name for the constraint.", "A Q object that specifies the condition you want the constraint to enforce.", "For example:", "ensures that each user only has one draft.", "These conditions have the same database restrictions as Index.condition.", "Set this parameter to create a deferrable unique constraint. Accepted values are Deferrable.DEFERRED or Deferrable.IMMEDIATE. For example:", "By default constraints are not deferred. A deferred constraint will not be enforced until the end of the transaction. An immediate constraint will be enforced immediately after every command.", "MySQL, MariaDB, and SQLite.", "Deferrable unique constraints are ignored on MySQL, MariaDB, and SQLite as neither supports them.", "Warning", "Deferred unique constraints may lead to a performance penalty.", "A list or tuple of the names of the fields to be included in the covering unique index as non-key columns. This allows index-only scans to be used for queries that select only included fields (include) and filter only by unique fields (fields).", "For example:", "will allow filtering on room and date, also selecting full_name, while fetching data only from the index.", "include is supported only on PostgreSQL.", "Non-key columns have the same database restrictions as Index.include.", "The names of the PostgreSQL operator classes to use for this unique index. If you require a custom operator class, you must provide one for each field in the index.", "For example:", "creates a unique index on username using varchar_pattern_ops.", "opclasses are ignored for databases besides PostgreSQL."]}, {"name": "contenttypes.admin.GenericInlineModelAdmin", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin", "type": "django.contrib.contenttypes", "text": ["The GenericInlineModelAdmin class inherits all properties from an InlineModelAdmin class. However, it adds a couple of its own for working with the generic relation:", "The name of the ContentType foreign key field on the model. Defaults to content_type.", "The name of the integer field that represents the ID of the related object. Defaults to object_id."]}, {"name": "contenttypes.admin.GenericInlineModelAdmin.ct_field", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin.ct_field", "type": "django.contrib.contenttypes", "text": ["The name of the ContentType foreign key field on the model. Defaults to content_type."]}, {"name": "contenttypes.admin.GenericInlineModelAdmin.ct_fk_field", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin.ct_fk_field", "type": "django.contrib.contenttypes", "text": ["The name of the integer field that represents the ID of the related object. Defaults to object_id."]}, {"name": "contenttypes.admin.GenericStackedInline", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericStackedInline", "type": "django.contrib.contenttypes", "text": ["Subclasses of GenericInlineModelAdmin with stacked and tabular layouts, respectively."]}, {"name": "contenttypes.admin.GenericTabularInline", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericTabularInline", "type": "django.contrib.contenttypes", "text": []}, {"name": "contenttypes.fields.GenericForeignKey", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey", "type": "django.contrib.contenttypes", "text": ["There are three parts to setting up a GenericForeignKey:", "If False, the field will be able to reference proxy models. Default is True. This mirrors the for_concrete_model argument to get_for_model()."]}, {"name": "contenttypes.fields.GenericForeignKey.for_concrete_model", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey.for_concrete_model", "type": "django.contrib.contenttypes", "text": ["If False, the field will be able to reference proxy models. Default is True. This mirrors the for_concrete_model argument to get_for_model()."]}, {"name": "contenttypes.fields.GenericRelation", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation", "type": "django.contrib.contenttypes", "text": ["The relation on the related object back to this object doesn\u2019t exist by default. Setting related_query_name creates a relation from the related object back to this one. This allows querying and filtering from the related object."]}, {"name": "contenttypes.fields.GenericRelation.related_query_name", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation.related_query_name", "type": "django.contrib.contenttypes", "text": ["The relation on the related object back to this object doesn\u2019t exist by default. Setting related_query_name creates a relation from the related object back to this one. This allows querying and filtering from the related object."]}, {"name": "contenttypes.forms.BaseGenericInlineFormSet", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.forms.BaseGenericInlineFormSet", "type": "django.contrib.contenttypes", "text": []}, {"name": "contenttypes.forms.generic_inlineformset_factory()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.forms.generic_inlineformset_factory", "type": "django.contrib.contenttypes", "text": ["Returns a GenericInlineFormSet using modelformset_factory().", "You must provide ct_field and fk_field if they are different from the defaults, content_type and object_id respectively. Other parameters are similar to those documented in modelformset_factory() and inlineformset_factory().", "The for_concrete_model argument corresponds to the for_concrete_model argument on GenericForeignKey.", "The absolute_max and can_delete_extra arguments were added."]}, {"name": "contenttypes.models.ContentType", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType", "type": "django.contrib.contenttypes", "text": ["Each instance of ContentType has two fields which, taken together, uniquely describe an installed model:", "The name of the application the model is part of. This is taken from the app_label attribute of the model, and includes only the last part of the application\u2019s Python import path; django.contrib.contenttypes, for example, becomes an app_label of contenttypes.", "The name of the model class.", "Additionally, the following property is available:", "The human-readable name of the content type. This is taken from the verbose_name attribute of the model."]}, {"name": "contenttypes.models.ContentType.app_label", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.app_label", "type": "django.contrib.contenttypes", "text": ["The name of the application the model is part of. This is taken from the app_label attribute of the model, and includes only the last part of the application\u2019s Python import path; django.contrib.contenttypes, for example, becomes an app_label of contenttypes."]}, {"name": "contenttypes.models.ContentType.get_object_for_this_type()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.get_object_for_this_type", "type": "django.contrib.contenttypes", "text": ["Takes a set of valid lookup arguments for the model the ContentType represents, and does a get() lookup on that model, returning the corresponding object."]}, {"name": "contenttypes.models.ContentType.model", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.model", "type": "django.contrib.contenttypes", "text": ["The name of the model class."]}, {"name": "contenttypes.models.ContentType.model_class()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.model_class", "type": "django.contrib.contenttypes", "text": ["Returns the model class represented by this ContentType instance."]}, {"name": "contenttypes.models.ContentType.name", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.name", "type": "django.contrib.contenttypes", "text": ["The human-readable name of the content type. This is taken from the verbose_name attribute of the model."]}, {"name": "contenttypes.models.ContentTypeManager", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager", "type": "django.contrib.contenttypes", "text": ["ContentType also has a custom manager, ContentTypeManager, which adds the following methods:", "Clears an internal cache used by ContentType to keep track of models for which it has created ContentType instances. You probably won\u2019t ever need to call this method yourself; Django will call it automatically when it\u2019s needed.", "Lookup a ContentType by ID. Since this method uses the same shared cache as get_for_model(), it\u2019s preferred to use this method over the usual ContentType.objects.get(pk=id)", "Takes either a model class or an instance of a model, and returns the ContentType instance representing that model. for_concrete_model=False allows fetching the ContentType of a proxy model.", "Takes a variadic number of model classes, and returns a dictionary mapping the model classes to the ContentType instances representing them. for_concrete_models=False allows fetching the ContentType of proxy models.", "Returns the ContentType instance uniquely identified by the given application label and model name. The primary purpose of this method is to allow ContentType objects to be referenced via a natural key during deserialization."]}, {"name": "contenttypes.models.ContentTypeManager.clear_cache()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.clear_cache", "type": "django.contrib.contenttypes", "text": ["Clears an internal cache used by ContentType to keep track of models for which it has created ContentType instances. You probably won\u2019t ever need to call this method yourself; Django will call it automatically when it\u2019s needed."]}, {"name": "contenttypes.models.ContentTypeManager.get_by_natural_key()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_by_natural_key", "type": "django.contrib.contenttypes", "text": ["Returns the ContentType instance uniquely identified by the given application label and model name. The primary purpose of this method is to allow ContentType objects to be referenced via a natural key during deserialization."]}, {"name": "contenttypes.models.ContentTypeManager.get_for_id()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_id", "type": "django.contrib.contenttypes", "text": ["Lookup a ContentType by ID. Since this method uses the same shared cache as get_for_model(), it\u2019s preferred to use this method over the usual ContentType.objects.get(pk=id)"]}, {"name": "contenttypes.models.ContentTypeManager.get_for_model()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model", "type": "django.contrib.contenttypes", "text": ["Takes either a model class or an instance of a model, and returns the ContentType instance representing that model. for_concrete_model=False allows fetching the ContentType of a proxy model."]}, {"name": "contenttypes.models.ContentTypeManager.get_for_models()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_models", "type": "django.contrib.contenttypes", "text": ["Takes a variadic number of model classes, and returns a dictionary mapping the model classes to the ContentType instances representing them. for_concrete_models=False allows fetching the ContentType of proxy models."]}, {"name": "contrib packages", "path": "ref/contrib/index", "type": "API", "text": ["Django aims to follow Python\u2019s \u201cbatteries included\u201d philosophy. It ships with a variety of extra, optional tools that solve common web development problems.", "This code lives in django/contrib in the Django distribution. This document gives a rundown of the packages in contrib, along with any dependencies those packages have.", "Note", "For most of these add-ons \u2013 specifically, the add-ons that include either models or template tags \u2013 you\u2019ll need to add the package name (e.g., 'django.contrib.redirects') to your INSTALLED_APPS setting and re-run manage.py migrate.", "The automatic Django administrative interface. For more information, see Tutorial 2 and the admin documentation.", "Requires the auth and contenttypes contrib packages to be installed.", "Django\u2019s authentication framework.", "See User authentication in Django.", "A light framework for hooking into \u201ctypes\u201d of content, where each installed Django model is a separate content type.", "See the contenttypes documentation.", "A framework for managing \u201cflat\u201d HTML content in a database.", "See the flatpages documentation.", "Requires the sites contrib package to be installed as well.", "A world-class geospatial framework built on top of Django, that enables storage, manipulation and display of spatial data.", "See the GeoDjango documentation for more.", "A set of Django template filters useful for adding a \u201chuman touch\u201d to data.", "See the humanize documentation.", "A framework for storing and retrieving temporary cookie- or session-based messages", "See the messages documentation.", "A collection of PostgreSQL specific features.", "See the contrib.postgres documentation.", "A framework for managing redirects.", "See the redirects documentation.", "A framework for storing data in anonymous sessions.", "See the sessions documentation.", "A light framework that lets you operate multiple websites off of the same database and Django installation. It gives you hooks for associating objects to one or more sites.", "See the sites documentation.", "A framework for generating Google sitemap XML files.", "See the sitemaps documentation.", "A framework for generating syndication feeds, in RSS and Atom, quite easily.", "See the syndication documentation.", "If you have an idea for functionality to include in contrib, let us know! Code it up, and post it to the django-users mailing list."]}, {"name": "core.cache.cache", "path": "topics/cache#django.core.cache.cache", "type": "django.core", "text": ["As a shortcut, the default cache is available as django.core.cache.cache:", "This object is equivalent to caches['default']."]}, {"name": "core.cache.caches", "path": "topics/cache#django.core.cache.caches", "type": "django.core", "text": ["You can access the caches configured in the CACHES setting through a dict-like object: django.core.cache.caches. Repeated requests for the same alias in the same thread will return the same object.", "If the named key does not exist, InvalidCacheBackendError will be raised.", "To provide thread-safety, a different instance of the cache backend will be returned for each thread."]}, {"name": "core.cache.utils.make_template_fragment_key()", "path": "topics/cache#django.core.cache.utils.make_template_fragment_key", "type": "django.core", "text": []}, {"name": "core.caches.cache.add()", "path": "topics/cache#django.core.caches.cache.add", "type": "django.core", "text": []}, {"name": "core.caches.cache.clear()", "path": "topics/cache#django.core.caches.cache.clear", "type": "django.core", "text": []}, {"name": "core.caches.cache.close()", "path": "topics/cache#django.core.caches.cache.close", "type": "django.core", "text": []}, {"name": "core.caches.cache.decr()", "path": "topics/cache#django.core.caches.cache.decr", "type": "django.core", "text": []}, {"name": "core.caches.cache.delete()", "path": "topics/cache#django.core.caches.cache.delete", "type": "django.core", "text": []}, {"name": "core.caches.cache.delete_many()", "path": "topics/cache#django.core.caches.cache.delete_many", "type": "django.core", "text": []}, {"name": "core.caches.cache.get()", "path": "topics/cache#django.core.caches.cache.get", "type": "django.core", "text": []}, {"name": "core.caches.cache.get_many()", "path": "topics/cache#django.core.caches.cache.get_many", "type": "django.core", "text": []}, {"name": "core.caches.cache.get_or_set()", "path": "topics/cache#django.core.caches.cache.get_or_set", "type": "django.core", "text": []}, {"name": "core.caches.cache.incr()", "path": "topics/cache#django.core.caches.cache.incr", "type": "django.core", "text": []}, {"name": "core.caches.cache.set()", "path": "topics/cache#django.core.caches.cache.set", "type": "django.core", "text": []}, {"name": "core.caches.cache.set_many()", "path": "topics/cache#django.core.caches.cache.set_many", "type": "django.core", "text": []}, {"name": "core.caches.cache.touch()", "path": "topics/cache#django.core.caches.cache.touch", "type": "django.core", "text": []}, {"name": "core.checks.CheckMessage", "path": "ref/checks#django.core.checks.CheckMessage", "type": "django.core", "text": []}, {"name": "core.checks.Critical", "path": "ref/checks#django.core.checks.Critical", "type": "django.core", "text": []}, {"name": "core.checks.Debug", "path": "ref/checks#django.core.checks.Debug", "type": "django.core", "text": []}, {"name": "core.checks.Error", "path": "ref/checks#django.core.checks.Error", "type": "django.core", "text": []}, {"name": "core.checks.Info", "path": "ref/checks#django.core.checks.Info", "type": "django.core", "text": []}, {"name": "core.checks.register()", "path": "topics/checks#django.core.checks.register", "type": "django.core", "text": []}, {"name": "core.checks.Warning", "path": "ref/checks#django.core.checks.Warning", "type": "django.core", "text": []}, {"name": "core.exceptions.NON_FIELD_ERRORS", "path": "ref/exceptions#django.core.exceptions.NON_FIELD_ERRORS", "type": "django.core", "text": []}, {"name": "core.files.base.ContentFile", "path": "ref/files/file#django.core.files.base.ContentFile", "type": "django.core", "text": ["The ContentFile class inherits from File, but unlike File it operates on string content (bytes also supported), rather than an actual file. For example:"]}, {"name": "core.files.File", "path": "ref/files/file#django.core.files.File", "type": "django.core", "text": ["The File class is a thin wrapper around a Python file object with some Django-specific additions. Internally, Django uses this class when it needs to represent a file.", "File objects have the following attributes and methods:", "The name of the file including the relative path from MEDIA_ROOT.", "The size of the file in bytes.", "The underlying file object that this class wraps.", "Be careful with this attribute in subclasses.", "Some subclasses of File, including ContentFile and FieldFile, may replace this attribute with an object other than a Python file object. In these cases, this attribute may itself be a File subclass (and not necessarily the same subclass). Whenever possible, use the attributes and methods of the subclass itself rather than the those of the subclass\u2019s file attribute.", "The read/write mode for the file.", "Open or reopen the file (which also does File.seek(0)). The mode argument allows the same values as Python\u2019s built-in open().", "When reopening a file, mode will override whatever mode the file was originally opened with; None means to reopen with the original mode.", "It can be used as a context manager, e.g. with file.open() as f:.", "Iterate over the file yielding one line at a time.", "Iterate over the file yielding \u201cchunks\u201d of a given size. chunk_size defaults to 64 KB.", "This is especially useful with very large files since it allows them to be streamed off disk and avoids storing the whole file in memory.", "Returns True if the file is large enough to require multiple chunks to access all of its content give some chunk_size.", "Close the file.", "In addition to the listed methods, File exposes the following attributes and methods of its file object: encoding, fileno, flush, isatty, newlines, read, readinto, readline, readlines, seek, tell, truncate, write, writelines, readable(), writable(), and seekable()."]}, {"name": "core.files.File.__iter__()", "path": "ref/files/file#django.core.files.File.__iter__", "type": "django.core", "text": ["Iterate over the file yielding one line at a time."]}, {"name": "core.files.File.chunks()", "path": "ref/files/file#django.core.files.File.chunks", "type": "django.core", "text": ["Iterate over the file yielding \u201cchunks\u201d of a given size. chunk_size defaults to 64 KB.", "This is especially useful with very large files since it allows them to be streamed off disk and avoids storing the whole file in memory."]}, {"name": "core.files.File.close()", "path": "ref/files/file#django.core.files.File.close", "type": "django.core", "text": ["Close the file."]}, {"name": "core.files.File.delete()", "path": "ref/files/file#django.core.files.File.delete", "type": "django.core", "text": ["Removes the file from the model instance and deletes the underlying file. If save is True, the model\u2019s save() method will be called once the file is deleted."]}, {"name": "core.files.File.file", "path": "ref/files/file#django.core.files.File.file", "type": "django.core", "text": ["The underlying file object that this class wraps.", "Be careful with this attribute in subclasses.", "Some subclasses of File, including ContentFile and FieldFile, may replace this attribute with an object other than a Python file object. In these cases, this attribute may itself be a File subclass (and not necessarily the same subclass). Whenever possible, use the attributes and methods of the subclass itself rather than the those of the subclass\u2019s file attribute."]}, {"name": "core.files.File.mode", "path": "ref/files/file#django.core.files.File.mode", "type": "django.core", "text": ["The read/write mode for the file."]}, {"name": "core.files.File.multiple_chunks()", "path": "ref/files/file#django.core.files.File.multiple_chunks", "type": "django.core", "text": ["Returns True if the file is large enough to require multiple chunks to access all of its content give some chunk_size."]}, {"name": "core.files.File.name", "path": "ref/files/file#django.core.files.File.name", "type": "django.core", "text": ["The name of the file including the relative path from MEDIA_ROOT."]}, {"name": "core.files.File.open()", "path": "ref/files/file#django.core.files.File.open", "type": "django.core", "text": ["Open or reopen the file (which also does File.seek(0)). The mode argument allows the same values as Python\u2019s built-in open().", "When reopening a file, mode will override whatever mode the file was originally opened with; None means to reopen with the original mode.", "It can be used as a context manager, e.g. with file.open() as f:."]}, {"name": "core.files.File.save()", "path": "ref/files/file#django.core.files.File.save", "type": "django.core", "text": ["Saves a new file with the file name and contents provided. This will not replace the existing file, but will create a new file and update the object to point to it. If save is True, the model\u2019s save() method will be called once the file is saved. That is, these two lines:", "are equivalent to:", "Note that the content argument must be an instance of either File or of a subclass of File, such as ContentFile."]}, {"name": "core.files.File.size", "path": "ref/files/file#django.core.files.File.size", "type": "django.core", "text": ["The size of the file in bytes."]}, {"name": "core.files.images.ImageFile", "path": "ref/files/file#django.core.files.images.ImageFile", "type": "django.core", "text": ["Django provides a built-in class specifically for images. django.core.files.images.ImageFile inherits all the attributes and methods of File, and additionally provides the following:", "Width of the image in pixels.", "Height of the image in pixels."]}, {"name": "core.files.images.ImageFile.height", "path": "ref/files/file#django.core.files.images.ImageFile.height", "type": "django.core", "text": ["Height of the image in pixels."]}, {"name": "core.files.images.ImageFile.width", "path": "ref/files/file#django.core.files.images.ImageFile.width", "type": "django.core", "text": ["Width of the image in pixels."]}, {"name": "core.files.storage._open()", "path": "howto/custom-file-storage#django.core.files.storage._open", "type": "django.core", "text": []}, {"name": "core.files.storage._save()", "path": "howto/custom-file-storage#django.core.files.storage._save", "type": "django.core", "text": []}, {"name": "core.files.storage.DefaultStorage", "path": "ref/files/storage#django.core.files.storage.DefaultStorage", "type": "django.core", "text": ["DefaultStorage provides lazy access to the current default storage system as defined by DEFAULT_FILE_STORAGE. DefaultStorage uses get_storage_class() internally."]}, {"name": "core.files.storage.FileSystemStorage", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage", "type": "django.core", "text": ["The FileSystemStorage class implements basic file storage on a local filesystem. It inherits from Storage and provides implementations for all the public methods thereof.", "Absolute path to the directory that will hold the files. Defaults to the value of your MEDIA_ROOT setting.", "URL that serves the files stored at this location. Defaults to the value of your MEDIA_URL setting.", "The file system permissions that the file will receive when it is saved. Defaults to FILE_UPLOAD_PERMISSIONS.", "The file system permissions that the directory will receive when it is saved. Defaults to FILE_UPLOAD_DIRECTORY_PERMISSIONS.", "Note", "The FileSystemStorage.delete() method will not raise an exception if the given file name does not exist.", "Returns a datetime of the system\u2019s ctime, i.e. os.path.getctime(). On some systems (like Unix), this is the time of the last metadata change, and on others (like Windows), it\u2019s the creation time of the file."]}, {"name": "core.files.storage.FileSystemStorage.base_url", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.base_url", "type": "django.core", "text": ["URL that serves the files stored at this location. Defaults to the value of your MEDIA_URL setting."]}, {"name": "core.files.storage.FileSystemStorage.directory_permissions_mode", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.directory_permissions_mode", "type": "django.core", "text": ["The file system permissions that the directory will receive when it is saved. Defaults to FILE_UPLOAD_DIRECTORY_PERMISSIONS."]}, {"name": "core.files.storage.FileSystemStorage.file_permissions_mode", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.file_permissions_mode", "type": "django.core", "text": ["The file system permissions that the file will receive when it is saved. Defaults to FILE_UPLOAD_PERMISSIONS."]}, {"name": "core.files.storage.FileSystemStorage.get_created_time()", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.get_created_time", "type": "django.core", "text": ["Returns a datetime of the system\u2019s ctime, i.e. os.path.getctime(). On some systems (like Unix), this is the time of the last metadata change, and on others (like Windows), it\u2019s the creation time of the file."]}, {"name": "core.files.storage.FileSystemStorage.location", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.location", "type": "django.core", "text": ["Absolute path to the directory that will hold the files. Defaults to the value of your MEDIA_ROOT setting."]}, {"name": "core.files.storage.get_alternative_name()", "path": "howto/custom-file-storage#django.core.files.storage.get_alternative_name", "type": "django.core", "text": []}, {"name": "core.files.storage.get_available_name()", "path": "howto/custom-file-storage#django.core.files.storage.get_available_name", "type": "django.core", "text": []}, {"name": "core.files.storage.get_storage_class()", "path": "ref/files/storage#django.core.files.storage.get_storage_class", "type": "django.core", "text": ["Returns a class or module which implements the storage API.", "When called without the import_path parameter get_storage_class will return the current default storage system as defined by DEFAULT_FILE_STORAGE. If import_path is provided, get_storage_class will attempt to import the class or module from the given path and will return it if successful. An exception will be raised if the import is unsuccessful."]}, {"name": "core.files.storage.get_valid_name()", "path": "howto/custom-file-storage#django.core.files.storage.get_valid_name", "type": "django.core", "text": []}, {"name": "core.files.storage.Storage", "path": "ref/files/storage#django.core.files.storage.Storage", "type": "django.core", "text": ["The Storage class provides a standardized API for storing files, along with a set of default behaviors that all other storage systems can inherit or override as necessary.", "Note", "When methods return naive datetime objects, the effective timezone used will be the current value of os.environ['TZ']; note that this is usually set from Django\u2019s TIME_ZONE.", "Deletes the file referenced by name. If deletion is not supported on the target storage system this will raise NotImplementedError instead.", "Returns True if a file referenced by the given name already exists in the storage system, or False if the name is available for a new file.", "Returns a datetime of the last accessed time of the file. For storage systems unable to return the last accessed time this will raise NotImplementedError.", "If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone.", "Returns an alternative filename based on the file_root and file_ext parameters, an underscore plus a random 7 character alphanumeric string is appended to the filename before the extension.", "Returns a filename based on the name parameter that\u2019s free and available for new content to be written to on the target storage system.", "The length of the filename will not exceed max_length, if provided. If a free unique filename cannot be found, a SuspiciousFileOperation exception will be raised.", "If a file with name already exists, get_alternative_name() is called to obtain an alternative name.", "Returns a datetime of the creation time of the file. For storage systems unable to return the creation time this will raise NotImplementedError.", "If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone.", "Returns a datetime of the last modified time of the file. For storage systems unable to return the last modified time this will raise NotImplementedError.", "If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone.", "Returns a filename based on the name parameter that\u2019s suitable for use on the target storage system.", "Validates the filename by calling get_valid_name() and returns a filename to be passed to the save() method.", "The filename argument may include a path as returned by FileField.upload_to. In that case, the path won\u2019t be passed to get_valid_name() but will be prepended back to the resulting name.", "The default implementation uses os.path operations. Override this method if that\u2019s not appropriate for your storage.", "Lists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren\u2019t able to provide such a listing, this will raise a NotImplementedError instead.", "Opens the file given by name. Note that although the returned file is guaranteed to be a File object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned.", "The local filesystem path where the file can be opened using Python\u2019s standard open(). For storage systems that aren\u2019t accessible from the local filesystem, this will raise NotImplementedError instead.", "Saves a new file using the storage system, preferably with the name specified. If there already exists a file with this name name, the storage system may modify the filename as necessary to get a unique name. The actual name of the stored file will be returned.", "The max_length argument is passed along to get_available_name().", "The content argument must be an instance of django.core.files.File or a file-like object that can be wrapped in File.", "Returns the total size, in bytes, of the file referenced by name. For storage systems that aren\u2019t able to return the file size this will raise NotImplementedError instead.", "Returns the URL where the contents of the file referenced by name can be accessed. For storage systems that don\u2019t support access by URL this will raise NotImplementedError instead."]}, {"name": "core.files.storage.Storage.delete()", "path": "ref/files/storage#django.core.files.storage.Storage.delete", "type": "django.core", "text": ["Deletes the file referenced by name. If deletion is not supported on the target storage system this will raise NotImplementedError instead."]}, {"name": "core.files.storage.Storage.exists()", "path": "ref/files/storage#django.core.files.storage.Storage.exists", "type": "django.core", "text": ["Returns True if a file referenced by the given name already exists in the storage system, or False if the name is available for a new file."]}, {"name": "core.files.storage.Storage.generate_filename()", "path": "ref/files/storage#django.core.files.storage.Storage.generate_filename", "type": "django.core", "text": ["Validates the filename by calling get_valid_name() and returns a filename to be passed to the save() method.", "The filename argument may include a path as returned by FileField.upload_to. In that case, the path won\u2019t be passed to get_valid_name() but will be prepended back to the resulting name.", "The default implementation uses os.path operations. Override this method if that\u2019s not appropriate for your storage."]}, {"name": "core.files.storage.Storage.get_accessed_time()", "path": "ref/files/storage#django.core.files.storage.Storage.get_accessed_time", "type": "django.core", "text": ["Returns a datetime of the last accessed time of the file. For storage systems unable to return the last accessed time this will raise NotImplementedError.", "If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone."]}, {"name": "core.files.storage.Storage.get_alternative_name()", "path": "ref/files/storage#django.core.files.storage.Storage.get_alternative_name", "type": "django.core", "text": ["Returns an alternative filename based on the file_root and file_ext parameters, an underscore plus a random 7 character alphanumeric string is appended to the filename before the extension."]}, {"name": "core.files.storage.Storage.get_available_name()", "path": "ref/files/storage#django.core.files.storage.Storage.get_available_name", "type": "django.core", "text": ["Returns a filename based on the name parameter that\u2019s free and available for new content to be written to on the target storage system.", "The length of the filename will not exceed max_length, if provided. If a free unique filename cannot be found, a SuspiciousFileOperation exception will be raised.", "If a file with name already exists, get_alternative_name() is called to obtain an alternative name."]}, {"name": "core.files.storage.Storage.get_created_time()", "path": "ref/files/storage#django.core.files.storage.Storage.get_created_time", "type": "django.core", "text": ["Returns a datetime of the creation time of the file. For storage systems unable to return the creation time this will raise NotImplementedError.", "If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone."]}, {"name": "core.files.storage.Storage.get_modified_time()", "path": "ref/files/storage#django.core.files.storage.Storage.get_modified_time", "type": "django.core", "text": ["Returns a datetime of the last modified time of the file. For storage systems unable to return the last modified time this will raise NotImplementedError.", "If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone."]}, {"name": "core.files.storage.Storage.get_valid_name()", "path": "ref/files/storage#django.core.files.storage.Storage.get_valid_name", "type": "django.core", "text": ["Returns a filename based on the name parameter that\u2019s suitable for use on the target storage system."]}, {"name": "core.files.storage.Storage.listdir()", "path": "ref/files/storage#django.core.files.storage.Storage.listdir", "type": "django.core", "text": ["Lists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren\u2019t able to provide such a listing, this will raise a NotImplementedError instead."]}, {"name": "core.files.storage.Storage.open()", "path": "ref/files/storage#django.core.files.storage.Storage.open", "type": "django.core", "text": ["Opens the file given by name. Note that although the returned file is guaranteed to be a File object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned."]}, {"name": "core.files.storage.Storage.path()", "path": "ref/files/storage#django.core.files.storage.Storage.path", "type": "django.core", "text": ["The local filesystem path where the file can be opened using Python\u2019s standard open(). For storage systems that aren\u2019t accessible from the local filesystem, this will raise NotImplementedError instead."]}, {"name": "core.files.storage.Storage.save()", "path": "ref/files/storage#django.core.files.storage.Storage.save", "type": "django.core", "text": ["Saves a new file using the storage system, preferably with the name specified. If there already exists a file with this name name, the storage system may modify the filename as necessary to get a unique name. The actual name of the stored file will be returned.", "The max_length argument is passed along to get_available_name().", "The content argument must be an instance of django.core.files.File or a file-like object that can be wrapped in File."]}, {"name": "core.files.storage.Storage.size()", "path": "ref/files/storage#django.core.files.storage.Storage.size", "type": "django.core", "text": ["Returns the total size, in bytes, of the file referenced by name. For storage systems that aren\u2019t able to return the file size this will raise NotImplementedError instead."]}, {"name": "core.files.storage.Storage.url()", "path": "ref/files/storage#django.core.files.storage.Storage.url", "type": "django.core", "text": ["Returns the URL where the contents of the file referenced by name can be accessed. For storage systems that don\u2019t support access by URL this will raise NotImplementedError instead."]}, {"name": "core.files.uploadedfile.InMemoryUploadedFile", "path": "ref/files/uploads#django.core.files.uploadedfile.InMemoryUploadedFile", "type": "django.core", "text": ["A file uploaded into memory (i.e. stream-to-memory). This class is used by the MemoryFileUploadHandler."]}, {"name": "core.files.uploadedfile.TemporaryUploadedFile", "path": "ref/files/uploads#django.core.files.uploadedfile.TemporaryUploadedFile", "type": "django.core", "text": ["A file uploaded to a temporary location (i.e. stream-to-disk). This class is used by the TemporaryFileUploadHandler. In addition to the methods from UploadedFile, it has one additional method:"]}, {"name": "core.files.uploadedfile.TemporaryUploadedFile.temporary_file_path()", "path": "ref/files/uploads#django.core.files.uploadedfile.TemporaryUploadedFile.temporary_file_path", "type": "django.core", "text": ["Returns the full path to the temporary uploaded file."]}, {"name": "core.files.uploadedfile.UploadedFile", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile", "type": "django.core", "text": []}, {"name": "core.files.uploadedfile.UploadedFile.charset", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.charset", "type": "django.core", "text": ["For text/* content-types, the character set (i.e. utf8) supplied by the browser. Again, \u201ctrust but verify\u201d is the best policy here."]}, {"name": "core.files.uploadedfile.UploadedFile.chunks()", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.chunks", "type": "django.core", "text": ["A generator returning chunks of the file. If multiple_chunks() is True, you should use this method in a loop instead of read().", "In practice, it\u2019s often easiest to use chunks() all the time. Looping over chunks() instead of using read() ensures that large files don\u2019t overwhelm your system\u2019s memory."]}, {"name": "core.files.uploadedfile.UploadedFile.content_type", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.content_type", "type": "django.core", "text": ["The content-type header uploaded with the file (e.g. text/plain or application/pdf). Like any data supplied by the user, you shouldn\u2019t trust that the uploaded file is actually this type. You\u2019ll still need to validate that the file contains the content that the content-type header claims \u2013 \u201ctrust but verify.\u201d"]}, {"name": "core.files.uploadedfile.UploadedFile.content_type_extra", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.content_type_extra", "type": "django.core", "text": ["A dictionary containing extra parameters passed to the content-type header. This is typically provided by services, such as Google App Engine, that intercept and handle file uploads on your behalf. As a result your handler may not receive the uploaded file content, but instead a URL or other pointer to the file (see RFC 2388)."]}, {"name": "core.files.uploadedfile.UploadedFile.multiple_chunks()", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.multiple_chunks", "type": "django.core", "text": ["Returns True if the uploaded file is big enough to require reading in multiple chunks. By default this will be any file larger than 2.5 megabytes, but that\u2019s configurable; see below."]}, {"name": "core.files.uploadedfile.UploadedFile.name", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.name", "type": "django.core", "text": ["The name of the uploaded file (e.g. my_file.txt)."]}, {"name": "core.files.uploadedfile.UploadedFile.read()", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.read", "type": "django.core", "text": ["Read the entire uploaded data from the file. Be careful with this method: if the uploaded file is huge it can overwhelm your system if you try to read it into memory. You\u2019ll probably want to use chunks() instead; see below."]}, {"name": "core.files.uploadedfile.UploadedFile.size", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.size", "type": "django.core", "text": ["The size, in bytes, of the uploaded file."]}, {"name": "core.files.uploadhandler.FileUploadHandler", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler", "type": "django.core", "text": []}, {"name": "core.files.uploadhandler.FileUploadHandler.chunk_size", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.chunk_size", "type": "django.core", "text": ["Size, in bytes, of the \u201cchunks\u201d Django should store into memory and feed into the handler. That is, this attribute controls the size of chunks fed into FileUploadHandler.receive_data_chunk.", "For maximum performance the chunk sizes should be divisible by 4 and should not exceed 2 GB (231 bytes) in size. When there are multiple chunk sizes provided by multiple handlers, Django will use the smallest chunk size defined by any handler.", "The default is 64*210 bytes, or 64 KB."]}, {"name": "core.files.uploadhandler.FileUploadHandler.file_complete()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.file_complete", "type": "django.core", "text": ["Called when a file has finished uploading.", "The handler should return an UploadedFile object that will be stored in request.FILES. Handlers may also return None to indicate that the UploadedFile object should come from subsequent upload handlers."]}, {"name": "core.files.uploadhandler.FileUploadHandler.handle_raw_input()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.handle_raw_input", "type": "django.core", "text": ["Allows the handler to completely override the parsing of the raw HTTP input.", "input_data is a file-like object that supports read()-ing.", "META is the same object as request.META.", "content_length is the length of the data in input_data. Don\u2019t read more than content_length bytes from input_data.", "boundary is the MIME boundary for this request.", "encoding is the encoding of the request.", "Return None if you want upload handling to continue, or a tuple of (POST, FILES) if you want to return the new data structures suitable for the request directly."]}, {"name": "core.files.uploadhandler.FileUploadHandler.new_file()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.new_file", "type": "django.core", "text": ["Callback signaling that a new file upload is starting. This is called before any data has been fed to any upload handlers.", "field_name is a string name of the file <input> field.", "file_name is the filename provided by the browser.", "content_type is the MIME type provided by the browser \u2013 E.g. 'image/jpeg'.", "content_length is the length of the image given by the browser. Sometimes this won\u2019t be provided and will be None.", "charset is the character set (i.e. utf8) given by the browser. Like content_length, this sometimes won\u2019t be provided.", "content_type_extra is extra information about the file from the content-type header. See UploadedFile.content_type_extra.", "This method may raise a StopFutureHandlers exception to prevent future handlers from handling this file."]}, {"name": "core.files.uploadhandler.FileUploadHandler.receive_data_chunk()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.receive_data_chunk", "type": "django.core", "text": ["Receives a \u201cchunk\u201d of data from the file upload.", "raw_data is a bytestring containing the uploaded data.", "start is the position in the file where this raw_data chunk begins.", "The data you return will get fed into the subsequent upload handlers\u2019 receive_data_chunk methods. In this way, one handler can be a \u201cfilter\u201d for other handlers.", "Return None from receive_data_chunk to short-circuit remaining upload handlers from getting this chunk. This is useful if you\u2019re storing the uploaded data yourself and don\u2019t want future handlers to store a copy of the data.", "If you raise a StopUpload or a SkipFile exception, the upload will abort or the file will be completely skipped."]}, {"name": "core.files.uploadhandler.FileUploadHandler.upload_complete()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.upload_complete", "type": "django.core", "text": ["Callback signaling that the entire upload (all files) has completed."]}, {"name": "core.files.uploadhandler.FileUploadHandler.upload_interrupted()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.upload_interrupted", "type": "django.core", "text": ["Callback signaling that the upload was interrupted, e.g. when the user closed their browser during file upload."]}, {"name": "core.files.uploadhandler.MemoryFileUploadHandler", "path": "ref/files/uploads#django.core.files.uploadhandler.MemoryFileUploadHandler", "type": "django.core", "text": []}, {"name": "core.files.uploadhandler.TemporaryFileUploadHandler", "path": "ref/files/uploads#django.core.files.uploadhandler.TemporaryFileUploadHandler", "type": "django.core", "text": []}, {"name": "core.mail.backends.smtp.EmailBackend", "path": "topics/email#django.core.mail.backends.smtp.EmailBackend", "type": "django.core", "text": ["This is the default backend. Email will be sent through a SMTP server.", "The value for each argument is retrieved from the matching setting if the argument is None:", "The SMTP backend is the default configuration inherited by Django. If you want to specify it explicitly, put the following in your settings:", "If unspecified, the default timeout will be the one provided by socket.getdefaulttimeout(), which defaults to None (no timeout)."]}, {"name": "core.mail.django.core.mail.outbox", "path": "topics/testing/tools#django.core.mail.django.core.mail.outbox", "type": "django.core", "text": []}, {"name": "core.mail.EmailMessage", "path": "topics/email#django.core.mail.EmailMessage", "type": "django.core", "text": []}, {"name": "core.mail.get_connection()", "path": "topics/email#django.core.mail.get_connection", "type": "django.core", "text": []}, {"name": "core.mail.mail_admins()", "path": "topics/email#django.core.mail.mail_admins", "type": "django.core", "text": []}, {"name": "core.mail.mail_managers()", "path": "topics/email#django.core.mail.mail_managers", "type": "django.core", "text": []}, {"name": "core.mail.send_mail()", "path": "topics/email#django.core.mail.send_mail", "type": "django.core", "text": []}, {"name": "core.mail.send_mass_mail()", "path": "topics/email#django.core.mail.send_mass_mail", "type": "django.core", "text": []}, {"name": "core.management.AppCommand", "path": "howto/custom-management-commands#django.core.management.AppCommand", "type": "django.core", "text": []}, {"name": "core.management.AppCommand.handle_app_config()", "path": "howto/custom-management-commands#django.core.management.AppCommand.handle_app_config", "type": "django.core", "text": ["Perform the command\u2019s actions for app_config, which will be an AppConfig instance corresponding to an application label given on the command line."]}, {"name": "core.management.BaseCommand", "path": "howto/custom-management-commands#django.core.management.BaseCommand", "type": "django.core", "text": []}, {"name": "core.management.BaseCommand.add_arguments()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.add_arguments", "type": "django.core", "text": ["Entry point to add parser arguments to handle command line arguments passed to the command. Custom commands should override this method to add both positional and optional arguments accepted by the command. Calling super() is not needed when directly subclassing BaseCommand."]}, {"name": "core.management.BaseCommand.check()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.check", "type": "django.core", "text": ["Uses the system check framework to inspect the entire Django project for potential problems. Serious problems are raised as a CommandError; warnings are output to stderr; minor notifications are output to stdout.", "If app_configs and tags are both None, all system checks are performed. tags can be a list of check tags, like compatibility or models."]}, {"name": "core.management.BaseCommand.create_parser()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.create_parser", "type": "django.core", "text": ["Returns a CommandParser instance, which is an ArgumentParser subclass with a few customizations for Django.", "You can customize the instance by overriding this method and calling super() with kwargs of ArgumentParser parameters."]}, {"name": "core.management.BaseCommand.execute()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.execute", "type": "django.core", "text": ["Tries to execute this command, performing system checks if needed (as controlled by the requires_system_checks attribute). If the command raises a CommandError, it\u2019s intercepted and printed to stderr."]}, {"name": "core.management.BaseCommand.get_version()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.get_version", "type": "django.core", "text": ["Returns the Django version, which should be correct for all built-in Django commands. User-supplied commands can override this method to return their own version."]}, {"name": "core.management.BaseCommand.handle()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.handle", "type": "django.core", "text": ["The actual logic of the command. Subclasses must implement this method.", "It may return a string which will be printed to stdout (wrapped by BEGIN; and COMMIT; if output_transaction is True)."]}, {"name": "core.management.BaseCommand.help", "path": "howto/custom-management-commands#django.core.management.BaseCommand.help", "type": "django.core", "text": ["A short description of the command, which will be printed in the help message when the user runs the command python manage.py help <command>."]}, {"name": "core.management.BaseCommand.missing_args_message", "path": "howto/custom-management-commands#django.core.management.BaseCommand.missing_args_message", "type": "django.core", "text": ["If your command defines mandatory positional arguments, you can customize the message error returned in the case of missing arguments. The default is output by argparse (\u201ctoo few arguments\u201d)."]}, {"name": "core.management.BaseCommand.output_transaction", "path": "howto/custom-management-commands#django.core.management.BaseCommand.output_transaction", "type": "django.core", "text": ["A boolean indicating whether the command outputs SQL statements; if True, the output will automatically be wrapped with BEGIN; and COMMIT;. Default value is False."]}, {"name": "core.management.BaseCommand.requires_migrations_checks", "path": "howto/custom-management-commands#django.core.management.BaseCommand.requires_migrations_checks", "type": "django.core", "text": ["A boolean; if True, the command prints a warning if the set of migrations on disk don\u2019t match the migrations in the database. A warning doesn\u2019t prevent the command from executing. Default value is False."]}, {"name": "core.management.BaseCommand.requires_system_checks", "path": "howto/custom-management-commands#django.core.management.BaseCommand.requires_system_checks", "type": "django.core", "text": ["A list or tuple of tags, e.g. [Tags.staticfiles, Tags.models]. System checks registered in the chosen tags will be checked for errors prior to executing the command. The value '__all__' can be used to specify that all system checks should be performed. Default value is '__all__'.", "In older versions, the requires_system_checks attribute expects a boolean value instead of a list or tuple of tags."]}, {"name": "core.management.BaseCommand.style", "path": "howto/custom-management-commands#django.core.management.BaseCommand.style", "type": "django.core", "text": ["An instance attribute that helps create colored output when writing to stdout or stderr. For example:", "See Syntax coloring to learn how to modify the color palette and to see the available styles (use uppercased versions of the \u201croles\u201d described in that section).", "If you pass the --no-color option when running your command, all self.style() calls will return the original string uncolored."]}, {"name": "core.management.BaseCommand.suppressed_base_arguments", "path": "howto/custom-management-commands#django.core.management.BaseCommand.suppressed_base_arguments", "type": "django.core", "text": ["The default command options to suppress in the help output. This should be a set of option names (e.g. '--verbosity'). The default values for the suppressed options are still passed."]}, {"name": "core.management.call_command()", "path": "ref/django-admin#django.core.management.call_command", "type": "django.core", "text": []}, {"name": "core.management.LabelCommand", "path": "howto/custom-management-commands#django.core.management.LabelCommand", "type": "django.core", "text": []}, {"name": "core.management.LabelCommand.handle_label()", "path": "howto/custom-management-commands#django.core.management.LabelCommand.handle_label", "type": "django.core", "text": ["Perform the command\u2019s actions for label, which will be the string as given on the command line."]}, {"name": "core.management.LabelCommand.label", "path": "howto/custom-management-commands#django.core.management.LabelCommand.label", "type": "django.core", "text": ["A string describing the arbitrary arguments passed to the command. The string is used in the usage text and error messages of the command. Defaults to 'label'."]}, {"name": "core.paginator.Page", "path": "ref/paginator#django.core.paginator.Page", "type": "django.core", "text": ["A page acts like a sequence of Page.object_list when using len() or iterating it directly."]}, {"name": "core.paginator.Page.end_index()", "path": "ref/paginator#django.core.paginator.Page.end_index", "type": "django.core", "text": ["Returns the 1-based index of the last object on the page, relative to all of the objects in the paginator\u2019s list. For example, when paginating a list of 5 objects with 2 objects per page, the second page\u2019s end_index() would return 4."]}, {"name": "core.paginator.Page.has_next()", "path": "ref/paginator#django.core.paginator.Page.has_next", "type": "django.core", "text": ["Returns True if there\u2019s a next page."]}, {"name": "core.paginator.Page.has_other_pages()", "path": "ref/paginator#django.core.paginator.Page.has_other_pages", "type": "django.core", "text": ["Returns True if there\u2019s a next or previous page."]}, {"name": "core.paginator.Page.has_previous()", "path": "ref/paginator#django.core.paginator.Page.has_previous", "type": "django.core", "text": ["Returns True if there\u2019s a previous page."]}, {"name": "core.paginator.Page.next_page_number()", "path": "ref/paginator#django.core.paginator.Page.next_page_number", "type": "django.core", "text": ["Returns the next page number. Raises InvalidPage if next page doesn\u2019t exist."]}, {"name": "core.paginator.Page.number", "path": "ref/paginator#django.core.paginator.Page.number", "type": "django.core", "text": ["The 1-based page number for this page."]}, {"name": "core.paginator.Page.object_list", "path": "ref/paginator#django.core.paginator.Page.object_list", "type": "django.core", "text": ["The list of objects on this page."]}, {"name": "core.paginator.Page.paginator", "path": "ref/paginator#django.core.paginator.Page.paginator", "type": "django.core", "text": ["The associated Paginator object."]}, {"name": "core.paginator.Page.previous_page_number()", "path": "ref/paginator#django.core.paginator.Page.previous_page_number", "type": "django.core", "text": ["Returns the previous page number. Raises InvalidPage if previous page doesn\u2019t exist."]}, {"name": "core.paginator.Page.start_index()", "path": "ref/paginator#django.core.paginator.Page.start_index", "type": "django.core", "text": ["Returns the 1-based index of the first object on the page, relative to all of the objects in the paginator\u2019s list. For example, when paginating a list of 5 objects with 2 objects per page, the second page\u2019s start_index() would return 3."]}, {"name": "core.paginator.Paginator", "path": "ref/paginator#django.core.paginator.Paginator", "type": "django.core", "text": ["A paginator acts like a sequence of Page when using len() or iterating it directly."]}, {"name": "core.paginator.Paginator.allow_empty_first_page", "path": "ref/paginator#django.core.paginator.Paginator.allow_empty_first_page", "type": "django.core", "text": ["Optional. Whether or not the first page is allowed to be empty. If False and object_list is empty, then an EmptyPage error will be raised."]}, {"name": "core.paginator.Paginator.count", "path": "ref/paginator#django.core.paginator.Paginator.count", "type": "django.core", "text": ["The total number of objects, across all pages.", "Note", "When determining the number of objects contained in object_list, Paginator will first try calling object_list.count(). If object_list has no count() method, then Paginator will fall back to using len(object_list). This allows objects, such as QuerySet, to use a more efficient count() method when available."]}, {"name": "core.paginator.Paginator.ELLIPSIS", "path": "ref/paginator#django.core.paginator.Paginator.ELLIPSIS", "type": "django.core", "text": ["A translatable string used as a substitute for elided page numbers in the page range returned by get_elided_page_range(). Default is '\u2026'."]}, {"name": "core.paginator.Paginator.get_elided_page_range()", "path": "ref/paginator#django.core.paginator.Paginator.get_elided_page_range", "type": "django.core", "text": ["Returns a 1-based list of page numbers similar to Paginator.page_range, but may add an ellipsis to either or both sides of the current page number when Paginator.num_pages is large.", "The number of pages to include on each side of the current page number is determined by the on_each_side argument which defaults to 3.", "The number of pages to include at the beginning and end of page range is determined by the on_ends argument which defaults to 2.", "For example, with the default values for on_each_side and on_ends, if the current page is 10 and there are 50 pages, the page range will be [1, 2, '\u2026', 7, 8, 9, 10, 11, 12, 13, '\u2026', 49, 50]. This will result in pages 7, 8, and 9 to the left of and 11, 12, and 13 to the right of the current page as well as pages 1 and 2 at the start and 49 and 50 at the end.", "Raises InvalidPage if the given page number doesn\u2019t exist."]}, {"name": "core.paginator.Paginator.get_page()", "path": "ref/paginator#django.core.paginator.Paginator.get_page", "type": "django.core", "text": ["Returns a Page object with the given 1-based index, while also handling out of range and invalid page numbers.", "If the page isn\u2019t a number, it returns the first page. If the page number is negative or greater than the number of pages, it returns the last page.", "Raises an EmptyPage exception only if you specify Paginator(..., allow_empty_first_page=False) and the object_list is empty."]}, {"name": "core.paginator.Paginator.num_pages", "path": "ref/paginator#django.core.paginator.Paginator.num_pages", "type": "django.core", "text": ["The total number of pages."]}, {"name": "core.paginator.Paginator.object_list", "path": "ref/paginator#django.core.paginator.Paginator.object_list", "type": "django.core", "text": ["Required. A list, tuple, QuerySet, or other sliceable object with a count() or __len__() method. For consistent pagination, QuerySets should be ordered, e.g. with an order_by() clause or with a default ordering on the model.", "Performance issues paginating large QuerySets", "If you\u2019re using a QuerySet with a very large number of items, requesting high page numbers might be slow on some databases, because the resulting LIMIT/OFFSET query needs to count the number of OFFSET records which takes longer as the page number gets higher."]}, {"name": "core.paginator.Paginator.orphans", "path": "ref/paginator#django.core.paginator.Paginator.orphans", "type": "django.core", "text": ["Optional. Use this when you don\u2019t want to have a last page with very few items. If the last page would normally have a number of items less than or equal to orphans, then those items will be added to the previous page (which becomes the last page) instead of leaving the items on a page by themselves. For example, with 23 items, per_page=10, and orphans=3, there will be two pages; the first page with 10 items and the second (and last) page with 13 items. orphans defaults to zero, which means pages are never combined and the last page may have one item."]}, {"name": "core.paginator.Paginator.page()", "path": "ref/paginator#django.core.paginator.Paginator.page", "type": "django.core", "text": ["Returns a Page object with the given 1-based index. Raises PageNotAnInteger if the number cannot be converted to an integer by calling int(). Raises EmptyPage if the given page number doesn\u2019t exist."]}, {"name": "core.paginator.Paginator.page_range", "path": "ref/paginator#django.core.paginator.Paginator.page_range", "type": "django.core", "text": ["A 1-based range iterator of page numbers, e.g. yielding [1, 2, 3, 4]."]}, {"name": "core.paginator.Paginator.per_page", "path": "ref/paginator#django.core.paginator.Paginator.per_page", "type": "django.core", "text": ["Required. The maximum number of items to include on a page, not including orphans (see the orphans optional argument below)."]}, {"name": "core.serializers.get_serializer()", "path": "topics/serialization#django.core.serializers.get_serializer", "type": "django.core", "text": []}, {"name": "core.serializers.json.DjangoJSONEncoder", "path": "topics/serialization#django.core.serializers.json.DjangoJSONEncoder", "type": "django.core", "text": []}, {"name": "core.signals.got_request_exception", "path": "ref/signals#django.core.signals.got_request_exception", "type": "django.core", "text": []}, {"name": "core.signals.request_finished", "path": "ref/signals#django.core.signals.request_finished", "type": "django.core", "text": []}, {"name": "core.signals.request_started", "path": "ref/signals#django.core.signals.request_started", "type": "django.core", "text": []}, {"name": "core.signing.dumps()", "path": "topics/signing#django.core.signing.dumps", "type": "django.core", "text": ["Returns URL-safe, signed base64 compressed JSON string. Serialized object is signed using TimestampSigner."]}, {"name": "core.signing.loads()", "path": "topics/signing#django.core.signing.loads", "type": "django.core", "text": ["Reverse of dumps(), raises BadSignature if signature fails. Checks max_age (in seconds) if given."]}, {"name": "core.signing.Signer", "path": "topics/signing#django.core.signing.Signer", "type": "django.core", "text": ["Returns a signer which uses key to generate signatures and sep to separate values. sep cannot be in the URL safe base64 alphabet. This alphabet contains alphanumeric characters, hyphens, and underscores. algorithm must be an algorithm supported by hashlib, it defaults to 'sha256'."]}, {"name": "core.signing.TimestampSigner", "path": "topics/signing#django.core.signing.TimestampSigner", "type": "django.core", "text": ["Sign value and append current timestamp to it.", "Checks if value was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object.", "Encode, optionally compress, append current timestamp, and sign complex data structure (e.g. list, tuple, or dictionary).", "Checks if signed_obj was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object."]}, {"name": "core.signing.TimestampSigner.sign()", "path": "topics/signing#django.core.signing.TimestampSigner.sign", "type": "django.core", "text": ["Sign value and append current timestamp to it."]}, {"name": "core.signing.TimestampSigner.sign_object()", "path": "topics/signing#django.core.signing.TimestampSigner.sign_object", "type": "django.core", "text": ["Encode, optionally compress, append current timestamp, and sign complex data structure (e.g. list, tuple, or dictionary)."]}, {"name": "core.signing.TimestampSigner.unsign()", "path": "topics/signing#django.core.signing.TimestampSigner.unsign", "type": "django.core", "text": ["Checks if value was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object."]}, {"name": "core.signing.TimestampSigner.unsign_object()", "path": "topics/signing#django.core.signing.TimestampSigner.unsign_object", "type": "django.core", "text": ["Checks if signed_obj was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object."]}, {"name": "core.validators.DecimalValidator", "path": "ref/validators#django.core.validators.DecimalValidator", "type": "django.core", "text": ["Raises ValidationError with the following codes:"]}, {"name": "core.validators.EmailValidator", "path": "ref/validators#django.core.validators.EmailValidator", "type": "django.core", "text": ["The error message used by ValidationError if validation fails. Defaults to \"Enter a valid email address\".", "The error code used by ValidationError if validation fails. Defaults to \"invalid\".", "Allowlist of email domains. By default, a regular expression (the domain_regex attribute) is used to validate whatever appears after the @ sign. However, if that string appears in the allowlist, this validation is bypassed. If not provided, the default allowlist is ['localhost']. Other domains that don\u2019t contain a dot won\u2019t pass validation, so you\u2019d need to add them to the allowlist as necessary.", "Deprecated since version 3.2: The whitelist parameter is deprecated. Use allowlist instead. The undocumented domain_whitelist attribute is deprecated. Use domain_allowlist instead."]}, {"name": "core.validators.EmailValidator.allowlist", "path": "ref/validators#django.core.validators.EmailValidator.allowlist", "type": "django.core", "text": ["Allowlist of email domains. By default, a regular expression (the domain_regex attribute) is used to validate whatever appears after the @ sign. However, if that string appears in the allowlist, this validation is bypassed. If not provided, the default allowlist is ['localhost']. Other domains that don\u2019t contain a dot won\u2019t pass validation, so you\u2019d need to add them to the allowlist as necessary."]}, {"name": "core.validators.EmailValidator.code", "path": "ref/validators#django.core.validators.EmailValidator.code", "type": "django.core", "text": ["The error code used by ValidationError if validation fails. Defaults to \"invalid\"."]}, {"name": "core.validators.EmailValidator.message", "path": "ref/validators#django.core.validators.EmailValidator.message", "type": "django.core", "text": ["The error message used by ValidationError if validation fails. Defaults to \"Enter a valid email address\"."]}, {"name": "core.validators.FileExtensionValidator", "path": "ref/validators#django.core.validators.FileExtensionValidator", "type": "django.core", "text": ["Raises a ValidationError with a code of 'invalid_extension' if the extension of value.name (value is a File) isn\u2019t found in allowed_extensions. The extension is compared case-insensitively with allowed_extensions.", "Warning", "Don\u2019t rely on validation of the file extension to determine a file\u2019s type. Files can be renamed to have any extension no matter what data they contain."]}, {"name": "core.validators.int_list_validator()", "path": "ref/validators#django.core.validators.int_list_validator", "type": "django.core", "text": ["Returns a RegexValidator instance that ensures a string consists of integers separated by sep. It allows negative integers when allow_negative is True."]}, {"name": "core.validators.MaxLengthValidator", "path": "ref/validators#django.core.validators.MaxLengthValidator", "type": "django.core", "text": ["Raises a ValidationError with a code of 'max_length' if the length of value is greater than limit_value, which may be a callable."]}, {"name": "core.validators.MaxValueValidator", "path": "ref/validators#django.core.validators.MaxValueValidator", "type": "django.core", "text": ["Raises a ValidationError with a code of 'max_value' if value is greater than limit_value, which may be a callable."]}, {"name": "core.validators.MinLengthValidator", "path": "ref/validators#django.core.validators.MinLengthValidator", "type": "django.core", "text": ["Raises a ValidationError with a code of 'min_length' if the length of value is less than limit_value, which may be a callable."]}, {"name": "core.validators.MinValueValidator", "path": "ref/validators#django.core.validators.MinValueValidator", "type": "django.core", "text": ["Raises a ValidationError with a code of 'min_value' if value is less than limit_value, which may be a callable."]}, {"name": "core.validators.ProhibitNullCharactersValidator", "path": "ref/validators#django.core.validators.ProhibitNullCharactersValidator", "type": "django.core", "text": ["Raises a ValidationError if str(value) contains one or more nulls characters ('\\x00').", "The error message used by ValidationError if validation fails. Defaults to \"Null characters are not allowed.\".", "The error code used by ValidationError if validation fails. Defaults to \"null_characters_not_allowed\"."]}, {"name": "core.validators.ProhibitNullCharactersValidator.code", "path": "ref/validators#django.core.validators.ProhibitNullCharactersValidator.code", "type": "django.core", "text": ["The error code used by ValidationError if validation fails. Defaults to \"null_characters_not_allowed\"."]}, {"name": "core.validators.ProhibitNullCharactersValidator.message", "path": "ref/validators#django.core.validators.ProhibitNullCharactersValidator.message", "type": "django.core", "text": ["The error message used by ValidationError if validation fails. Defaults to \"Null characters are not allowed.\"."]}, {"name": "core.validators.RegexValidator", "path": "ref/validators#django.core.validators.RegexValidator", "type": "django.core", "text": ["A RegexValidator searches the provided value for a given regular expression with re.search(). By default, raises a ValidationError with message and code if a match is not found. Its behavior can be inverted by setting inverse_match to True, in which case the ValidationError is raised when a match is found.", "The regular expression pattern to search for within the provided value, using re.search(). This may be a string or a pre-compiled regular expression created with re.compile(). Defaults to the empty string, which will be found in every possible value.", "The error message used by ValidationError if validation fails. Defaults to \"Enter a valid value\".", "The error code used by ValidationError if validation fails. Defaults to \"invalid\".", "The match mode for regex. Defaults to False.", "The regex flags used when compiling the regular expression string regex. If regex is a pre-compiled regular expression, and flags is overridden, TypeError is raised. Defaults to 0."]}, {"name": "core.validators.RegexValidator.code", "path": "ref/validators#django.core.validators.RegexValidator.code", "type": "django.core", "text": ["The error code used by ValidationError if validation fails. Defaults to \"invalid\"."]}, {"name": "core.validators.RegexValidator.flags", "path": "ref/validators#django.core.validators.RegexValidator.flags", "type": "django.core", "text": ["The regex flags used when compiling the regular expression string regex. If regex is a pre-compiled regular expression, and flags is overridden, TypeError is raised. Defaults to 0."]}, {"name": "core.validators.RegexValidator.inverse_match", "path": "ref/validators#django.core.validators.RegexValidator.inverse_match", "type": "django.core", "text": ["The match mode for regex. Defaults to False."]}, {"name": "core.validators.RegexValidator.message", "path": "ref/validators#django.core.validators.RegexValidator.message", "type": "django.core", "text": ["The error message used by ValidationError if validation fails. Defaults to \"Enter a valid value\"."]}, {"name": "core.validators.RegexValidator.regex", "path": "ref/validators#django.core.validators.RegexValidator.regex", "type": "django.core", "text": ["The regular expression pattern to search for within the provided value, using re.search(). This may be a string or a pre-compiled regular expression created with re.compile(). Defaults to the empty string, which will be found in every possible value."]}, {"name": "core.validators.URLValidator", "path": "ref/validators#django.core.validators.URLValidator", "type": "django.core", "text": ["A RegexValidator subclass that ensures a value looks like a URL, and raises an error code of 'invalid' if it doesn\u2019t.", "Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 addresses (RFC 3986#section-3.2.2) and Unicode domains are both supported.", "In addition to the optional arguments of its parent RegexValidator class, URLValidator accepts an extra optional attribute:", "URL/URI scheme list to validate against. If not provided, the default list is ['http', 'https', 'ftp', 'ftps']. As a reference, the IANA website provides a full list of valid URI schemes."]}, {"name": "core.validators.URLValidator.schemes", "path": "ref/validators#django.core.validators.URLValidator.schemes", "type": "django.core", "text": ["URL/URI scheme list to validate against. If not provided, the default list is ['http', 'https', 'ftp', 'ftps']. As a reference, the IANA website provides a full list of valid URI schemes."]}, {"name": "core.validators.validate_comma_separated_integer_list", "path": "ref/validators#django.core.validators.validate_comma_separated_integer_list", "type": "django.core", "text": ["A RegexValidator instance that ensures a value is a comma-separated list of integers."]}, {"name": "core.validators.validate_email", "path": "ref/validators#django.core.validators.validate_email", "type": "django.core", "text": ["An EmailValidator instance without any customizations."]}, {"name": "core.validators.validate_image_file_extension", "path": "ref/validators#django.core.validators.validate_image_file_extension", "type": "django.core", "text": ["Uses Pillow to ensure that value.name (value is a File) has a valid image extension."]}, {"name": "core.validators.validate_ipv46_address", "path": "ref/validators#django.core.validators.validate_ipv46_address", "type": "django.core", "text": ["Uses both validate_ipv4_address and validate_ipv6_address to ensure a value is either a valid IPv4 or IPv6 address."]}, {"name": "core.validators.validate_ipv4_address", "path": "ref/validators#django.core.validators.validate_ipv4_address", "type": "django.core", "text": ["A RegexValidator instance that ensures a value looks like an IPv4 address."]}, {"name": "core.validators.validate_ipv6_address", "path": "ref/validators#django.core.validators.validate_ipv6_address", "type": "django.core", "text": ["Uses django.utils.ipv6 to check the validity of an IPv6 address."]}, {"name": "core.validators.validate_slug", "path": "ref/validators#django.core.validators.validate_slug", "type": "django.core", "text": ["A RegexValidator instance that ensures a value consists of only letters, numbers, underscores or hyphens."]}, {"name": "core.validators.validate_unicode_slug", "path": "ref/validators#django.core.validators.validate_unicode_slug", "type": "django.core", "text": ["A RegexValidator instance that ensures a value consists of only Unicode letters, numbers, underscores, or hyphens."]}, {"name": "Creating forms from models", "path": "topics/forms/modelforms", "type": "Guides", "text": ["If you\u2019re building a database-driven app, chances are you\u2019ll have forms that map closely to Django models. For instance, you might have a BlogComment model, and you want to create a form that lets people submit comments. In this case, it would be redundant to define the field types in your form, because you\u2019ve already defined the fields in your model.", "For this reason, Django provides a helper class that lets you create a Form class from a Django model.", "For example:", "The generated Form class will have a form field for every model field specified, in the order specified in the fields attribute.", "Each model field has a corresponding default form field. For example, a CharField on a model is represented as a CharField on a form. A model ManyToManyField is represented as a MultipleChoiceField. Here is the full list of conversions:", "As you might expect, the ForeignKey and ManyToManyField model field types are special cases:", "In addition, each generated form field has attributes set as follows:", "Finally, note that you can override the form field used for a given model field. See Overriding the default fields below.", "Consider this set of models:", "With these models, the ModelForm subclasses above would be roughly equivalent to this (the only difference being the save() method, which we\u2019ll discuss in a moment.):", "There are two main steps involved in validating a ModelForm:", "Just like normal form validation, model form validation is triggered implicitly when calling is_valid() or accessing the errors attribute and explicitly when calling full_clean(), although you will typically not use the latter method in practice.", "Model validation (Model.full_clean()) is triggered from within the form validation step, right after the form\u2019s clean() method is called.", "Warning", "The cleaning process modifies the model instance passed to the ModelForm constructor in various ways. For instance, any date fields on the model are converted into actual date objects. Failed validation may leave the underlying model instance in an inconsistent state and therefore it\u2019s not recommended to reuse it.", "You can override the clean() method on a model form to provide additional validation in the same way you can on a normal form.", "A model form instance attached to a model object will contain an instance attribute that gives its methods access to that specific model instance.", "Warning", "The ModelForm.clean() method sets a flag that makes the model validation step validate the uniqueness of model fields that are marked as unique, unique_together or unique_for_date|month|year.", "If you would like to override the clean() method and maintain this validation, you must call the parent class\u2019s clean() method.", "As part of the validation process, ModelForm will call the clean() method of each field on your model that has a corresponding field on your form. If you have excluded any model fields, validation will not be run on those fields. See the form validation documentation for more on how field cleaning and validation work.", "The model\u2019s clean() method will be called before any uniqueness checks are made. See Validating objects for more information on the model\u2019s clean() hook.", "Error messages defined at the form field level or at the form Meta level always take precedence over the error messages defined at the model field level.", "Error messages defined on model fields are only used when the ValidationError is raised during the model validation step and no corresponding error messages are defined at the form level.", "You can override the error messages from NON_FIELD_ERRORS raised by model validation by adding the NON_FIELD_ERRORS key to the error_messages dictionary of the ModelForm\u2019s inner Meta class:", "Every ModelForm also has a save() method. This method creates and saves a database object from the data bound to the form. A subclass of ModelForm can accept an existing model instance as the keyword argument instance; if this is supplied, save() will update that instance. If it\u2019s not supplied, save() will create a new instance of the specified model:", "Note that if the form hasn\u2019t been validated, calling save() will do so by checking form.errors. A ValueError will be raised if the data in the form doesn\u2019t validate \u2013 i.e., if form.errors evaluates to True.", "If an optional field doesn\u2019t appear in the form\u2019s data, the resulting model instance uses the model field default, if there is one, for that field. This behavior doesn\u2019t apply to fields that use CheckboxInput, CheckboxSelectMultiple, or SelectMultiple (or any custom widget whose value_omitted_from_data() method always returns False) since an unchecked checkbox and unselected <select multiple> don\u2019t appear in the data of an HTML form submission. Use a custom form field or widget if you\u2019re designing an API and want the default fallback behavior for a field that uses one of these widgets.", "This save() method accepts an optional commit keyword argument, which accepts either True or False. If you call save() with commit=False, then it will return an object that hasn\u2019t yet been saved to the database. In this case, it\u2019s up to you to call save() on the resulting model instance. This is useful if you want to do custom processing on the object before saving it, or if you want to use one of the specialized model saving options. commit is True by default.", "Another side effect of using commit=False is seen when your model has a many-to-many relation with another model. If your model has a many-to-many relation and you specify commit=False when you save a form, Django cannot immediately save the form data for the many-to-many relation. This is because it isn\u2019t possible to save many-to-many data for an instance until the instance exists in the database.", "To work around this problem, every time you save a form using commit=False, Django adds a save_m2m() method to your ModelForm subclass. After you\u2019ve manually saved the instance produced by the form, you can invoke save_m2m() to save the many-to-many form data. For example:", "Calling save_m2m() is only required if you use save(commit=False). When you use a save() on a form, all data \u2013 including many-to-many data \u2013 is saved without the need for any additional method calls. For example:", "Other than the save() and save_m2m() methods, a ModelForm works exactly the same way as any other forms form. For example, the is_valid() method is used to check for validity, the is_multipart() method is used to determine whether a form requires multipart file upload (and hence whether request.FILES must be passed to the form), etc. See Binding uploaded files to a form for more information.", "It is strongly recommended that you explicitly set all fields that should be edited in the form using the fields attribute. Failure to do so can easily lead to security problems when a form unexpectedly allows a user to set certain fields, especially when new fields are added to a model. Depending on how the form is rendered, the problem may not even be visible on the web page.", "The alternative approach would be to include all fields automatically, or remove only some. This fundamental approach is known to be much less secure and has led to serious exploits on major websites (e.g. GitHub).", "There are, however, two shortcuts available for cases where you can guarantee these security concerns do not apply to you:", "Set the fields attribute to the special value '__all__' to indicate that all fields in the model should be used. For example:", "Set the exclude attribute of the ModelForm\u2019s inner Meta class to a list of fields to be excluded from the form.", "For example:", "Since the Author model has the 3 fields name, title and birth_date, this will result in the fields name and birth_date being present on the form.", "If either of these are used, the order the fields appear in the form will be the order the fields are defined in the model, with ManyToManyField instances appearing last.", "In addition, Django applies the following rule: if you set editable=False on the model field, any form created from the model via ModelForm will not include that field.", "Note", "Any fields not included in a form by the above logic will not be set by the form\u2019s save() method. Also, if you manually add the excluded fields back to the form, they will not be initialized from the model instance.", "Django will prevent any attempt to save an incomplete model, so if the model does not allow the missing fields to be empty, and does not provide a default value for the missing fields, any attempt to save() a ModelForm with missing fields will fail. To avoid this failure, you must instantiate your model with initial values for the missing, but required fields:", "Alternatively, you can use save(commit=False) and manually set any extra required fields:", "See the section on saving forms for more details on using save(commit=False).", "The default field types, as described in the Field types table above, are sensible defaults. If you have a DateField in your model, chances are you\u2019d want that to be represented as a DateField in your form. But ModelForm gives you the flexibility of changing the form field for a given model.", "To specify a custom widget for a field, use the widgets attribute of the inner Meta class. This should be a dictionary mapping field names to widget classes or instances.", "For example, if you want the CharField for the name attribute of Author to be represented by a <textarea> instead of its default <input type=\"text\">, you can override the field\u2019s widget:", "The widgets dictionary accepts either widget instances (e.g., Textarea(...)) or classes (e.g., Textarea). Note that the widgets dictionary is ignored for a model field with a non-empty choices attribute. In this case, you must override the form field to use a different widget.", "Similarly, you can specify the labels, help_texts and error_messages attributes of the inner Meta class if you want to further customize a field.", "For example if you wanted to customize the wording of all user facing strings for the name field:", "You can also specify field_classes to customize the type of fields instantiated by the form.", "For example, if you wanted to use MySlugFormField for the slug field, you could do the following:", "Finally, if you want complete control over of a field \u2013 including its type, validators, required, etc. \u2013 you can do this by declaratively specifying fields like you would in a regular Form.", "If you want to specify a field\u2019s validators, you can do so by defining the field declaratively and setting its validators parameter:", "Note", "When you explicitly instantiate a form field like this, it is important to understand how ModelForm and regular Form are related.", "ModelForm is a regular Form which can automatically generate certain fields. The fields that are automatically generated depend on the content of the Meta class and on which fields have already been defined declaratively. Basically, ModelForm will only generate fields that are missing from the form, or in other words, fields that weren\u2019t defined declaratively.", "Fields defined declaratively are left as-is, therefore any customizations made to Meta attributes such as widgets, labels, help_texts, or error_messages are ignored; these only apply to fields that are generated automatically.", "Similarly, fields defined declaratively do not draw their attributes like max_length or required from the corresponding model. If you want to maintain the behavior specified in the model, you must set the relevant arguments explicitly when declaring the form field.", "For example, if the Article model looks like this:", "and you want to do some custom validation for headline, while keeping the blank and help_text values as specified, you might define ArticleForm like this:", "You must ensure that the type of the form field can be used to set the contents of the corresponding model field. When they are not compatible, you will get a ValueError as no implicit conversion takes place.", "See the form field documentation for more information on fields and their arguments.", "By default, the fields in a ModelForm will not localize their data. To enable localization for fields, you can use the localized_fields attribute on the Meta class.", "If localized_fields is set to the special value '__all__', all fields will be localized.", "As with basic forms, you can extend and reuse ModelForms by inheriting them. This is useful if you need to declare extra fields or extra methods on a parent class for use in a number of forms derived from models. For example, using the previous ArticleForm class:", "This creates a form that behaves identically to ArticleForm, except there\u2019s some extra validation and cleaning for the pub_date field.", "You can also subclass the parent\u2019s Meta inner class if you want to change the Meta.fields or Meta.exclude lists:", "This adds the extra method from the EnhancedArticleForm and modifies the original ArticleForm.Meta to remove one field.", "There are a couple of things to note, however.", "It\u2019s possible to declaratively remove a Field inherited from a parent class by setting the name to be None on the subclass.", "You can only use this technique to opt out from a field defined declaratively by a parent class; it won\u2019t prevent the ModelForm metaclass from generating a default field. To opt-out from default fields, see Selecting the fields to use.", "As with regular forms, it\u2019s possible to specify initial data for forms by specifying an initial parameter when instantiating the form. Initial values provided this way will override both initial values from the form field and values from an attached model instance. For example:", "You can create forms from a given model using the standalone function modelform_factory(), instead of using a class definition. This may be more convenient if you do not have many customizations to make:", "This can also be used to make modifications to existing forms, for example by specifying the widgets to be used for a given field:", "The fields to include can be specified using the fields and exclude keyword arguments, or the corresponding attributes on the ModelForm inner Meta class. Please see the ModelForm Selecting the fields to use documentation.", "\u2026 or enable localization for specific fields:", "Like regular formsets, Django provides a couple of enhanced formset classes to make working with Django models more convenient. Let\u2019s reuse the Author model from above:", "Using fields restricts the formset to use only the given fields. Alternatively, you can take an \u201copt-out\u201d approach, specifying which fields to exclude:", "This will create a formset that is capable of working with the data associated with the Author model. It works just like a regular formset:", "Note", "modelformset_factory() uses formset_factory() to generate formsets. This means that a model formset is an extension of a basic formset that knows how to interact with a particular model.", "Note", "When using multi-table inheritance, forms generated by a formset factory will contain a parent link field (by default <parent_model_name>_ptr) instead of an id field.", "By default, when you create a formset from a model, the formset will use a queryset that includes all objects in the model (e.g., Author.objects.all()). You can override this behavior by using the queryset argument:", "Alternatively, you can create a subclass that sets self.queryset in __init__:", "Then, pass your BaseAuthorFormSet class to the factory function:", "If you want to return a formset that doesn\u2019t include any pre-existing instances of the model, you can specify an empty QuerySet:", "By default, when you use modelformset_factory, a model form will be created using modelform_factory(). Often, it can be useful to specify a custom model form. For example, you can create a custom model form that has custom validation:", "Then, pass your model form to the factory function:", "It is not always necessary to define a custom model form. The modelformset_factory function has several arguments which are passed through to modelform_factory, which are described below.", "Using the widgets parameter, you can specify a dictionary of values to customize the ModelForm\u2019s widget class for a particular field. This works the same way as the widgets dictionary on the inner Meta class of a ModelForm works:", "Using the localized_fields parameter, you can enable localization for fields in the form.", "If localized_fields is set to the special value '__all__', all fields will be localized.", "As with regular formsets, it\u2019s possible to specify initial data for forms in the formset by specifying an initial parameter when instantiating the model formset class returned by modelformset_factory(). However, with model formsets, the initial values only apply to extra forms, those that aren\u2019t attached to an existing model instance. If the length of initial exceeds the number of extra forms, the excess initial data is ignored. If the extra forms with initial data aren\u2019t changed by the user, they won\u2019t be validated or saved.", "As with a ModelForm, you can save the data as a model object. This is done with the formset\u2019s save() method:", "The save() method returns the instances that have been saved to the database. If a given instance\u2019s data didn\u2019t change in the bound data, the instance won\u2019t be saved to the database and won\u2019t be included in the return value (instances, in the above example).", "When fields are missing from the form (for example because they have been excluded), these fields will not be set by the save() method. You can find more information about this restriction, which also holds for regular ModelForms, in Selecting the fields to use.", "Pass commit=False to return the unsaved model instances:", "This gives you the ability to attach data to the instances before saving them to the database. If your formset contains a ManyToManyField, you\u2019ll also need to call formset.save_m2m() to ensure the many-to-many relationships are saved properly.", "After calling save(), your model formset will have three new attributes containing the formset\u2019s changes:", "As with regular formsets, you can use the max_num and extra parameters to modelformset_factory() to limit the number of extra forms displayed.", "max_num does not prevent existing objects from being displayed:", "Also, extra=0 doesn\u2019t prevent creation of new model instances as you can add additional forms with JavaScript or send additional POST data. Formsets don\u2019t yet provide functionality for an \u201cedit only\u201d view that prevents creation of new instances.", "If the value of max_num is greater than the number of existing related objects, up to extra additional blank forms will be added to the formset, so long as the total number of forms does not exceed max_num:", "A max_num value of None (the default) puts a high limit on the number of forms displayed (1000). In practice this is equivalent to no limit.", "Model formsets are very similar to formsets. Let\u2019s say we want to present a formset to edit Author model instances:", "As you can see, the view logic of a model formset isn\u2019t drastically different than that of a \u201cnormal\u201d formset. The only difference is that we call formset.save() to save the data into the database. (This was described above, in Saving objects in the formset.)", "Just like with ModelForms, by default the clean() method of a ModelFormSet will validate that none of the items in the formset violate the unique constraints on your model (either unique, unique_together or unique_for_date|month|year). If you want to override the clean() method on a ModelFormSet and maintain this validation, you must call the parent class\u2019s clean method:", "Also note that by the time you reach this step, individual model instances have already been created for each Form. Modifying a value in form.cleaned_data is not sufficient to affect the saved value. If you wish to modify a value in ModelFormSet.clean() you must modify form.instance:", "As stated earlier, you can override the default queryset used by the model formset:", "Note that we pass the queryset argument in both the POST and GET cases in this example.", "There are three ways to render a formset in a Django template.", "First, you can let the formset do most of the work:", "Second, you can manually render the formset, but let the form deal with itself:", "When you manually render the forms yourself, be sure to render the management form as shown above. See the management form documentation.", "Third, you can manually render each field:", "If you opt to use this third method and you don\u2019t iterate over the fields with a {% for %} loop, you\u2019ll need to render the primary key field. For example, if you were rendering the name and age fields of a model:", "Notice how we need to explicitly render {{ form.id }}. This ensures that the model formset, in the POST case, will work correctly. (This example assumes a primary key named id. If you\u2019ve explicitly defined your own primary key that isn\u2019t called id, make sure it gets rendered.)", "Inline formsets is a small abstraction layer on top of model formsets. These simplify the case of working with related objects via a foreign key. Suppose you have these two models:", "If you want to create a formset that allows you to edit books belonging to a particular author, you could do this:", "BookFormSet\u2019s prefix is 'book_set' (<model name>_set ). If Book\u2019s ForeignKey to Author has a related_name, that\u2019s used instead.", "Note", "inlineformset_factory() uses modelformset_factory() and marks can_delete=True.", "See also", "Manually rendered can_delete and can_order.", "When overriding methods on InlineFormSet, you should subclass BaseInlineFormSet rather than BaseModelFormSet.", "For example, if you want to override clean():", "See also Overriding clean() on a ModelFormSet.", "Then when you create your inline formset, pass in the optional argument formset:", "If your model contains more than one foreign key to the same model, you\u2019ll need to resolve the ambiguity manually using fk_name. For example, consider the following model:", "To resolve this, you can use fk_name to inlineformset_factory():", "You may want to provide a view that allows a user to edit the related objects of a model. Here\u2019s how you can do that:", "Notice how we pass instance in both the POST and GET cases.", "inlineformset_factory uses modelformset_factory and passes most of its arguments to modelformset_factory. This means you can use the widgets parameter in much the same way as passing it to modelformset_factory. See Specifying widgets to use in the form with widgets above."]}, {"name": "Cross Site Request Forgery protection", "path": "ref/csrf", "type": "API", "text": ["The CSRF middleware and template tag provides easy-to-use protection against Cross Site Request Forgeries. This type of attack occurs when a malicious website contains a link, a form button or some JavaScript that is intended to perform some action on your website, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, \u2018login CSRF\u2019, where an attacking site tricks a user\u2019s browser into logging into a site with someone else\u2019s credentials, is also covered.", "The first defense against CSRF attacks is to ensure that GET requests (and other \u2018safe\u2019 methods, as defined by RFC 7231#section-4.2.1) are side effect free. Requests via \u2018unsafe\u2019 methods, such as POST, PUT, and DELETE, can then be protected by following the steps below.", "To take advantage of CSRF protection in your views, follow these steps:", "The CSRF middleware is activated by default in the MIDDLEWARE setting. If you override that setting, remember that 'django.middleware.csrf.CsrfViewMiddleware' should come before any view middleware that assume that CSRF attacks have been dealt with.", "If you disabled it, which is not recommended, you can use csrf_protect() on particular views you want to protect (see below).", "In any template that uses a POST form, use the csrf_token tag inside the <form> element if the form is for an internal URL, e.g.:", "This should not be done for POST forms that target external URLs, since that would cause the CSRF token to be leaked, leading to a vulnerability.", "While the above method can be used for AJAX POST requests, it has some inconveniences: you have to remember to pass the CSRF token in as POST data with every POST request. For this reason, there is an alternative method: on each XMLHttpRequest, set a custom X-CSRFToken header (as specified by the CSRF_HEADER_NAME setting) to the value of the CSRF token. This is often easier because many JavaScript frameworks provide hooks that allow headers to be set on every request.", "First, you must get the CSRF token. How to do that depends on whether or not the CSRF_USE_SESSIONS and CSRF_COOKIE_HTTPONLY settings are enabled.", "The recommended source for the token is the csrftoken cookie, which will be set if you\u2019ve enabled CSRF protection for your views as outlined above.", "The CSRF token cookie is named csrftoken by default, but you can control the cookie name via the CSRF_COOKIE_NAME setting.", "You can acquire the token like this:", "The above code could be simplified by using the JavaScript Cookie library to replace getCookie:", "Note", "The CSRF token is also present in the DOM, but only if explicitly included using csrf_token in a template. The cookie contains the canonical token; the CsrfViewMiddleware will prefer the cookie to the token in the DOM. Regardless, you\u2019re guaranteed to have the cookie if the token is present in the DOM, so you should use the cookie!", "Warning", "If your view is not rendering a template containing the csrf_token template tag, Django might not set the CSRF token cookie. This is common in cases where forms are dynamically added to the page. To address this case, Django provides a view decorator which forces setting of the cookie: ensure_csrf_cookie().", "If you activate CSRF_USE_SESSIONS or CSRF_COOKIE_HTTPONLY, you must include the CSRF token in your HTML and read the token from the DOM with JavaScript:", "Finally, you\u2019ll need to set the header on your AJAX request. Using the fetch() API:", "Django\u2019s Jinja2 template backend adds {{ csrf_input }} to the context of all templates which is equivalent to {% csrf_token %} in the Django template language. For example:", "Rather than adding CsrfViewMiddleware as a blanket protection, you can use the csrf_protect decorator, which has exactly the same functionality, on particular views that need the protection. It must be used both on views that insert the CSRF token in the output, and on those that accept the POST form data. (These are often the same view function, but not always).", "Use of the decorator by itself is not recommended, since if you forget to use it, you will have a security hole. The \u2018belt and braces\u2019 strategy of using both is fine, and will incur minimal overhead.", "Decorator that provides the protection of CsrfViewMiddleware to a view.", "Usage:", "If you are using class-based views, you can refer to Decorating class-based views.", "By default, a \u2018403 Forbidden\u2019 response is sent to the user if an incoming request fails the checks performed by CsrfViewMiddleware. This should usually only be seen when there is a genuine Cross Site Request Forgery, or when, due to a programming error, the CSRF token has not been included with a POST form.", "The error page, however, is not very friendly, so you may want to provide your own view for handling this condition. To do this, set the CSRF_FAILURE_VIEW setting.", "CSRF failures are logged as warnings to the django.security.csrf logger.", "The CSRF protection is based on the following things:", "A CSRF cookie that is based on a random secret value, which other sites will not have access to.", "This cookie is set by CsrfViewMiddleware. It is sent with every response that has called django.middleware.csrf.get_token() (the function used internally to retrieve the CSRF token), if it wasn\u2019t already set on the request.", "In order to protect against BREACH attacks, the token is not simply the secret; a random mask is prepended to the secret and used to scramble it.", "For security reasons, the value of the secret is changed each time a user logs in.", "A hidden form field with the name \u2018csrfmiddlewaretoken\u2019 present in all outgoing POST forms. The value of this field is, again, the value of the secret, with a mask which is both added to it and used to scramble it. The mask is regenerated on every call to get_token() so that the form field value is changed in every such response.", "This part is done by the template tag.", "For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or TRACE, a CSRF cookie must be present, and the \u2018csrfmiddlewaretoken\u2019 field must be present and correct. If it isn\u2019t, the user will get a 403 error.", "When validating the \u2018csrfmiddlewaretoken\u2019 field value, only the secret, not the full token, is compared with the secret in the cookie value. This allows the use of ever-changing tokens. While each request may use its own token, the secret remains common to all.", "This check is done by CsrfViewMiddleware.", "In addition, for HTTPS requests, if the Origin header isn\u2019t provided, CsrfViewMiddleware performs strict referer checking. This means that even if a subdomain can set or modify cookies on your domain, it can\u2019t force a user to post to your application since that request won\u2019t come from your own exact domain.", "This also addresses a man-in-the-middle attack that\u2019s possible under HTTPS when using a session independent secret, due to the fact that HTTP Set-Cookie headers are (unfortunately) accepted by clients even when they are talking to a site under HTTPS. (Referer checking is not done for HTTP requests because the presence of the Referer header isn\u2019t reliable enough under HTTP.)", "If the CSRF_COOKIE_DOMAIN setting is set, the referer is compared against it. You can allow cross-subdomain requests by including a leading dot. For example, CSRF_COOKIE_DOMAIN = '.example.com' will allow POST requests from www.example.com and api.example.com. If the setting is not set, then the referer must match the HTTP Host header.", "Expanding the accepted referers beyond the current host or cookie domain can be done with the CSRF_TRUSTED_ORIGINS setting.", "Origin checking was added, as described above.", "This ensures that only forms that have originated from trusted domains can be used to POST data back.", "It deliberately ignores GET requests (and other requests that are defined as \u2018safe\u2019 by RFC 7231#section-4.2.1). These requests ought never to have any potentially dangerous side effects, and so a CSRF attack with a GET request ought to be harmless. RFC 7231#section-4.2.1 defines POST, PUT, and DELETE as \u2018unsafe\u2019, and all other methods are also assumed to be unsafe, for maximum protection.", "The CSRF protection cannot protect against man-in-the-middle attacks, so use HTTPS with HTTP Strict Transport Security. It also assumes validation of the HOST header and that there aren\u2019t any cross-site scripting vulnerabilities on your site (because XSS vulnerabilities already let an attacker do anything a CSRF vulnerability allows and much worse).", "Removing the Referer header", "To avoid disclosing the referrer URL to third-party sites, you might want to disable the referer on your site\u2019s <a> tags. For example, you might use the <meta name=\"referrer\" content=\"no-referrer\"> tag or include the Referrer-Policy: no-referrer header. Due to the CSRF protection\u2019s strict referer checking on HTTPS requests, those techniques cause a CSRF failure on requests with \u2018unsafe\u2019 methods. Instead, use alternatives like <a rel=\"noreferrer\" ...>\" for links to third-party sites.", "If the csrf_token template tag is used by a template (or the get_token function is called some other way), CsrfViewMiddleware will add a cookie and a Vary: Cookie header to the response. This means that the middleware will play well with the cache middleware if it is used as instructed (UpdateCacheMiddleware goes before all other middleware).", "However, if you use cache decorators on individual views, the CSRF middleware will not yet have been able to set the Vary header or the CSRF cookie, and the response will be cached without either one. In this case, on any views that will require a CSRF token to be inserted you should use the django.views.decorators.csrf.csrf_protect() decorator first:", "If you are using class-based views, you can refer to Decorating class-based views.", "The CsrfViewMiddleware will usually be a big hindrance to testing view functions, due to the need for the CSRF token which must be sent with every POST request. For this reason, Django\u2019s HTTP client for tests has been modified to set a flag on requests which relaxes the middleware and the csrf_protect decorator so that they no longer rejects requests. In every other respect (e.g. sending cookies etc.), they behave the same.", "If, for some reason, you want the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks:", "Subdomains within a site will be able to set cookies on the client for the whole domain. By setting the cookie and using a corresponding token, subdomains will be able to circumvent the CSRF protection. The only way to avoid this is to ensure that subdomains are controlled by trusted users (or, are at least unable to set cookies). Note that even without CSRF, there are other vulnerabilities, such as session fixation, that make giving subdomains to untrusted parties a bad idea, and these vulnerabilities cannot easily be fixed with current browsers.", "Certain views can have unusual requirements that mean they don\u2019t fit the normal pattern envisaged here. A number of utilities can be useful in these situations. The scenarios they might be needed in are described in the following section.", "The examples below assume you are using function-based views. If you are working with class-based views, you can refer to Decorating class-based views.", "This decorator marks a view as being exempt from the protection ensured by the middleware. Example:", "Normally the csrf_token template tag will not work if CsrfViewMiddleware.process_view or an equivalent like csrf_protect has not run. The view decorator requires_csrf_token can be used to ensure the template tag does work. This decorator works similarly to csrf_protect, but never rejects an incoming request.", "Example:", "This decorator forces a view to send the CSRF cookie.", "Most views requires CSRF protection, but a few do not.", "Solution: rather than disabling the middleware and applying csrf_protect to all the views that need it, enable the middleware and use csrf_exempt().", "There are cases when CsrfViewMiddleware.process_view may not have run before your view is run - 404 and 500 handlers, for example - but you still need the CSRF token in a form.", "Solution: use requires_csrf_token()", "There may be some views that are unprotected and have been exempted by csrf_exempt, but still need to include the CSRF token.", "Solution: use csrf_exempt() followed by requires_csrf_token(). (i.e. requires_csrf_token should be the innermost decorator).", "A view needs CSRF protection under one set of conditions only, and mustn\u2019t have it for the rest of the time.", "Solution: use csrf_exempt() for the whole view function, and csrf_protect() for the path within it that needs protection. Example:", "A page makes a POST request via AJAX, and the page does not have an HTML form with a csrf_token that would cause the required CSRF cookie to be sent.", "Solution: use ensure_csrf_cookie() on the view that sends the page.", "Because it is possible for the developer to turn off the CsrfViewMiddleware, all relevant views in contrib apps use the csrf_protect decorator to ensure the security of these applications against CSRF. It is recommended that the developers of other reusable apps that want the same guarantees also use the csrf_protect decorator on their views.", "A number of settings can be used to control Django\u2019s CSRF behavior:", "No, this is by design. Without a man-in-the-middle attack, there is no way for an attacker to send a CSRF token cookie to a victim\u2019s browser, so a successful attack would need to obtain the victim\u2019s browser\u2019s cookie via XSS or similar, in which case an attacker usually doesn\u2019t need CSRF attacks.", "Some security audit tools flag this as a problem but as mentioned before, an attacker cannot steal a user\u2019s browser\u2019s CSRF cookie. \u201cStealing\u201d or modifying your own token using Firebug, Chrome dev tools, etc. isn\u2019t a vulnerability.", "No, this is by design. Not linking CSRF protection to a session allows using the protection on sites such as a pastebin that allow submissions from anonymous users which don\u2019t have a session.", "If you wish to store the CSRF token in the user\u2019s session, use the CSRF_USE_SESSIONS setting.", "For security reasons, CSRF tokens are rotated each time a user logs in. Any page with a form generated before a login will have an old, invalid CSRF token and need to be reloaded. This might happen if a user uses the back button after a login or if they log in a different browser tab."]}, {"name": "Cryptographic signing", "path": "topics/signing", "type": "Guides", "text": ["The golden rule of web application security is to never trust data from untrusted sources. Sometimes it can be useful to pass data through an untrusted medium. Cryptographically signed values can be passed through an untrusted channel safe in the knowledge that any tampering will be detected.", "Django provides both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in web applications.", "You may also find signing useful for the following:", "When you create a new Django project using startproject, the settings.py file is generated automatically and gets a random SECRET_KEY value. This value is the key to securing signed data \u2013 it is vital you keep this secure, or attackers could use it to generate their own signed values.", "Django\u2019s signing methods live in the django.core.signing module. To sign a value, first instantiate a Signer instance:", "The signature is appended to the end of the string, following the colon. You can retrieve the original value using the unsign method:", "If you pass a non-string value to sign, the value will be forced to string before being signed, and the unsign result will give you that string value:", "If you wish to protect a list, tuple, or dictionary you can do so using the sign_object() and unsign_object() methods:", "See Protecting complex data structures for more details.", "If the signature or value have been altered in any way, a django.core.signing.BadSignature exception will be raised:", "By default, the Signer class uses the SECRET_KEY setting to generate signatures. You can use a different secret by passing it to the Signer constructor:", "Returns a signer which uses key to generate signatures and sep to separate values. sep cannot be in the URL safe base64 alphabet. This alphabet contains alphanumeric characters, hyphens, and underscores. algorithm must be an algorithm supported by hashlib, it defaults to 'sha256'.", "The sign_object() and unsign_object() methods were added.", "If you do not wish for every occurrence of a particular string to have the same signature hash, you can use the optional salt argument to the Signer class. Using a salt will seed the signing hash function with both the salt and your SECRET_KEY:", "Using salt in this way puts the different signatures into different namespaces. A signature that comes from one namespace (a particular salt value) cannot be used to validate the same plaintext string in a different namespace that is using a different salt setting. The result is to prevent an attacker from using a signed string generated in one place in the code as input to another piece of code that is generating (and verifying) signatures using a different salt.", "Unlike your SECRET_KEY, your salt argument does not need to stay secret.", "The sign_object() and unsign_object() methods were added.", "TimestampSigner is a subclass of Signer that appends a signed timestamp to the value. This allows you to confirm that a signed value was created within a specified period of time:", "Sign value and append current timestamp to it.", "Checks if value was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object.", "Encode, optionally compress, append current timestamp, and sign complex data structure (e.g. list, tuple, or dictionary).", "Checks if signed_obj was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object.", "If you wish to protect a list, tuple or dictionary you can do so using the Signer.sign_object() and unsign_object() methods, or signing module\u2019s dumps() or loads() functions (which are shortcuts for TimestampSigner(salt='django.core.signing').sign_object()/unsign_object()). These use JSON serialization under the hood. JSON ensures that even if your SECRET_KEY is stolen an attacker will not be able to execute arbitrary commands by exploiting the pickle format:", "Because of the nature of JSON (there is no native distinction between lists and tuples) if you pass in a tuple, you will get a list from signing.loads(object):", "Returns URL-safe, signed base64 compressed JSON string. Serialized object is signed using TimestampSigner.", "Reverse of dumps(), raises BadSignature if signature fails. Checks max_age (in seconds) if given.", "The sign_object() and unsign_object() methods were added."]}, {"name": "Customizing authentication in Django", "path": "topics/auth/customizing", "type": "Guides", "text": ["The authentication that comes with Django is good enough for most common cases, but you may have needs not met by the out-of-the-box defaults. Customizing authentication in your projects requires understanding what points of the provided system are extensible or replaceable. This document provides details about how the auth system can be customized.", "Authentication backends provide an extensible system for when a username and password stored with the user model need to be authenticated against a different service than Django\u2019s default.", "You can give your models custom permissions that can be checked through Django\u2019s authorization system.", "You can extend the default User model, or substitute a completely customized model.", "There may be times you have the need to hook into another authentication source \u2013 that is, another source of usernames and passwords or authentication methods.", "For example, your company may already have an LDAP setup that stores a username and password for every employee. It\u2019d be a hassle for both the network administrator and the users themselves if users had separate accounts in LDAP and the Django-based applications.", "So, to handle situations like this, the Django authentication system lets you plug in other authentication sources. You can override Django\u2019s default database-based scheme, or you can use the default system in tandem with other systems.", "See the authentication backend reference for information on the authentication backends included with Django.", "Behind the scenes, Django maintains a list of \u201cauthentication backends\u201d that it checks for authentication. When somebody calls django.contrib.auth.authenticate() \u2013 as described in How to log a user in \u2013 Django tries authenticating across all of its authentication backends. If the first authentication method fails, Django tries the second one, and so on, until all backends have been attempted.", "The list of authentication backends to use is specified in the AUTHENTICATION_BACKENDS setting. This should be a list of Python path names that point to Python classes that know how to authenticate. These classes can be anywhere on your Python path.", "By default, AUTHENTICATION_BACKENDS is set to:", "That\u2019s the basic authentication backend that checks the Django users database and queries the built-in permissions. It does not provide protection against brute force attacks via any rate limiting mechanism. You may either implement your own rate limiting mechanism in a custom auth backend, or use the mechanisms provided by most web servers.", "The order of AUTHENTICATION_BACKENDS matters, so if the same username and password is valid in multiple backends, Django will stop processing at the first positive match.", "If a backend raises a PermissionDenied exception, authentication will immediately fail. Django won\u2019t check the backends that follow.", "Note", "Once a user has authenticated, Django stores which backend was used to authenticate the user in the user\u2019s session, and re-uses the same backend for the duration of that session whenever access to the currently authenticated user is needed. This effectively means that authentication sources are cached on a per-session basis, so if you change AUTHENTICATION_BACKENDS, you\u2019ll need to clear out session data if you need to force users to re-authenticate using different methods. A simple way to do that is to execute Session.objects.all().delete().", "An authentication backend is a class that implements two required methods: get_user(user_id) and authenticate(request, **credentials), as well as a set of optional permission related authorization methods.", "The get_user method takes a user_id \u2013 which could be a username, database ID or whatever, but has to be the primary key of your user object \u2013 and returns a user object or None.", "The authenticate method takes a request argument and credentials as keyword arguments. Most of the time, it\u2019ll look like this:", "But it could also authenticate a token, like so:", "Either way, authenticate() should check the credentials it gets and return a user object that matches those credentials if the credentials are valid. If they\u2019re not valid, it should return None.", "request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend).", "The Django admin is tightly coupled to the Django User object. The best way to deal with this is to create a Django User object for each user that exists for your backend (e.g., in your LDAP directory, your external SQL database, etc.) You can either write a script to do this in advance, or your authenticate method can do it the first time a user logs in.", "Here\u2019s an example backend that authenticates against a username and password variable defined in your settings.py file and creates a Django User object the first time a user authenticates:", "Custom auth backends can provide their own permissions.", "The user model and its manager will delegate permission lookup functions (get_user_permissions(), get_group_permissions(), get_all_permissions(), has_perm(), has_module_perms(), and with_perm()) to any authentication backend that implements these functions.", "The permissions given to the user will be the superset of all permissions returned by all backends. That is, Django grants a permission to a user that any one backend grants.", "If a backend raises a PermissionDenied exception in has_perm() or has_module_perms(), the authorization will immediately fail and Django won\u2019t check the backends that follow.", "A backend could implement permissions for the magic admin like this:", "This gives full permissions to the user granted access in the above example. Notice that in addition to the same arguments given to the associated django.contrib.auth.models.User functions, the backend auth functions all take the user object, which may be an anonymous user, as an argument.", "A full authorization implementation can be found in the ModelBackend class in django/contrib/auth/backends.py, which is the default backend and queries the auth_permission table most of the time.", "An anonymous user is one that is not authenticated i.e. they have provided no valid authentication details. However, that does not necessarily mean they are not authorized to do anything. At the most basic level, most websites authorize anonymous users to browse most of the site, and many allow anonymous posting of comments etc.", "Django\u2019s permission framework does not have a place to store permissions for anonymous users. However, the user object passed to an authentication backend may be an django.contrib.auth.models.AnonymousUser object, allowing the backend to specify custom authorization behavior for anonymous users. This is especially useful for the authors of re-usable apps, who can delegate all questions of authorization to the auth backend, rather than needing settings, for example, to control anonymous access.", "An inactive user is one that has its is_active field set to False. The ModelBackend and RemoteUserBackend authentication backends prohibits these users from authenticating. If a custom user model doesn\u2019t have an is_active field, all users will be allowed to authenticate.", "You can use AllowAllUsersModelBackend or AllowAllUsersRemoteUserBackend if you want to allow inactive users to authenticate.", "The support for anonymous users in the permission system allows for a scenario where anonymous users have permissions to do something while inactive authenticated users do not.", "Do not forget to test for the is_active attribute of the user in your own backend permission methods.", "Django\u2019s permission framework has a foundation for object permissions, though there is no implementation for it in the core. That means that checking for object permissions will always return False or an empty list (depending on the check performed). An authentication backend will receive the keyword parameters obj and user_obj for each object related authorization method and can return the object level permission as appropriate.", "To create custom permissions for a given model object, use the permissions model Meta attribute.", "This example Task model creates two custom permissions, i.e., actions users can or cannot do with Task instances, specific to your application:", "The only thing this does is create those extra permissions when you run manage.py migrate (the function that creates permissions is connected to the post_migrate signal). Your code is in charge of checking the value of these permissions when a user is trying to access the functionality provided by the application (changing the status of tasks or closing tasks.) Continuing the above example, the following checks if a user may close tasks:", "There are two ways to extend the default User model without substituting your own model. If the changes you need are purely behavioral, and don\u2019t require any change to what is stored in the database, you can create a proxy model based on User. This allows for any of the features offered by proxy models including default ordering, custom managers, or custom model methods.", "If you wish to store information related to User, you can use a OneToOneField to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user. For example you might create an Employee model:", "Assuming an existing Employee Fred Smith who has both a User and Employee model, you can access the related information using Django\u2019s standard related model conventions:", "To add a profile model\u2019s fields to the user page in the admin, define an InlineModelAdmin (for this example, we\u2019ll use a StackedInline) in your app\u2019s admin.py and add it to a UserAdmin class which is registered with the User class:", "These profile models are not special in any way - they are just Django models that happen to have a one-to-one link with a user model. As such, they aren\u2019t auto created when a user is created, but a django.db.models.signals.post_save could be used to create or update related models as appropriate.", "Using related models results in additional queries or joins to retrieve the related data. Depending on your needs, a custom user model that includes the related fields may be your better option, however, existing relations to the default user model within your project\u2019s apps may justify the extra database load.", "Some kinds of projects may have authentication requirements for which Django\u2019s built-in User model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username.", "Django allows you to override the default user model by providing a value for the AUTH_USER_MODEL setting that references a custom model:", "This dotted pair describes the label of the Django app (which must be in your INSTALLED_APPS), and the name of the Django model that you wish to use as your user model.", "If you\u2019re starting a new project, it\u2019s highly recommended to set up a custom user model, even if the default User model is sufficient for you. This model behaves identically to the default user model, but you\u2019ll be able to customize it in the future if the need arises:", "Don\u2019t forget to point AUTH_USER_MODEL to it. Do this before creating any migrations or running manage.py migrate for the first time.", "Also, register the model in the app\u2019s admin.py:", "Changing AUTH_USER_MODEL after you\u2019ve created database tables is significantly more difficult since it affects foreign keys and many-to-many relationships, for example.", "This change can\u2019t be done automatically and requires manually fixing your schema, moving your data from the old user table, and possibly manually reapplying some migrations. See #25313 for an outline of the steps.", "Due to limitations of Django\u2019s dynamic dependency feature for swappable models, the model referenced by AUTH_USER_MODEL must be created in the first migration of its app (usually called 0001_initial); otherwise, you\u2019ll have dependency issues.", "In addition, you may run into a CircularDependencyError when running your migrations as Django won\u2019t be able to automatically break the dependency loop due to the dynamic dependency. If you see this error, you should break the loop by moving the models depended on by your user model into a second migration. (You can try making two normal models that have a ForeignKey to each other and seeing how makemigrations resolves that circular dependency if you want to see how it\u2019s usually done.)", "Reusable apps shouldn\u2019t implement a custom user model. A project may use many apps, and two reusable apps that implemented a custom user model couldn\u2019t be used together. If you need to store per user information in your app, use a ForeignKey or OneToOneField to settings.AUTH_USER_MODEL as described below.", "If you reference User directly (for example, by referring to it in a foreign key), your code will not work in projects where the AUTH_USER_MODEL setting has been changed to a different user model.", "Instead of referring to User directly, you should reference the user model using django.contrib.auth.get_user_model(). This method will return the currently active user model \u2013 the custom user model if one is specified, or User otherwise.", "When you define a foreign key or many-to-many relations to the user model, you should specify the custom model using the AUTH_USER_MODEL setting. For example:", "When connecting to signals sent by the user model, you should specify the custom model using the AUTH_USER_MODEL setting. For example:", "Generally speaking, it\u2019s easiest to refer to the user model with the AUTH_USER_MODEL setting in code that\u2019s executed at import time, however, it\u2019s also possible to call get_user_model() while Django is importing models, so you could use models.ForeignKey(get_user_model(), ...).", "If your app is tested with multiple user models, using @override_settings(AUTH_USER_MODEL=...) for example, and you cache the result of get_user_model() in a module-level variable, you may need to listen to the setting_changed signal to clear the cache. For example:", "When you start your project with a custom user model, stop to consider if this is the right choice for your project.", "Keeping all user related information in one model removes the need for additional or more complex database queries to retrieve related models. On the other hand, it may be more suitable to store app-specific user information in a model that has a relation with your custom user model. That allows each app to specify its own user data requirements without potentially conflicting or breaking assumptions by other apps. It also means that you would keep your user model as simple as possible, focused on authentication, and following the minimum requirements Django expects custom user models to meet.", "If you use the default authentication backend, then your model must have a single unique field that can be used for identification purposes. This can be a username, an email address, or any other unique attribute. A non-unique username field is allowed if you use a custom authentication backend that can support it.", "The easiest way to construct a compliant custom user model is to inherit from AbstractBaseUser. AbstractBaseUser provides the core implementation of a user model, including hashed passwords and tokenized password resets. You must then provide some key implementation details:", "A string describing the name of the field on the user model that is used as the unique identifier. This will usually be a username of some kind, but it can also be an email address, or any other unique identifier. The field must be unique (i.e., have unique=True set in its definition), unless you use a custom authentication backend that can support non-unique usernames.", "In the following example, the field identifier is used as the identifying field:", "A string describing the name of the email field on the User model. This value is returned by get_email_field_name().", "A list of the field names that will be prompted for when creating a user via the createsuperuser management command. The user will be prompted to supply a value for each of these fields. It must include any field for which blank is False or undefined and may include additional fields you want prompted for when a user is created interactively. REQUIRED_FIELDS has no effect in other parts of Django, like creating a user in the admin.", "For example, here is the partial definition for a user model that defines two required fields - a date of birth and height:", "Note", "REQUIRED_FIELDS must contain all required fields on your user model, but should not contain the USERNAME_FIELD or password as these fields will always be prompted for.", "A boolean attribute that indicates whether the user is considered \u201cactive\u201d. This attribute is provided as an attribute on AbstractBaseUser defaulting to True. How you choose to implement it will depend on the details of your chosen auth backends. See the documentation of the is_active attribute on the built-in\nuser model for details.", "Optional. A longer formal identifier for the user such as their full name. If implemented, this appears alongside the username in an object\u2019s history in django.contrib.admin.", "Optional. A short, informal identifier for the user such as their first name. If implemented, this replaces the username in the greeting to the user in the header of django.contrib.admin.", "Importing AbstractBaseUser", "AbstractBaseUser and BaseUserManager are importable from django.contrib.auth.base_user so that they can be imported without including django.contrib.auth in INSTALLED_APPS.", "The following attributes and methods are available on any subclass of AbstractBaseUser:", "Returns the value of the field nominated by USERNAME_FIELD.", "Normalizes the username by calling normalize_username(). If you override this method, be sure to call super() to retain the normalization.", "Returns the name of the email field specified by the EMAIL_FIELD attribute. Defaults to 'email' if EMAIL_FIELD isn\u2019t specified.", "Applies NFKC Unicode normalization to usernames so that visually identical characters with different Unicode code points are considered identical.", "Read-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn\u2019t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance.", "Read-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute.", "Sets the user\u2019s password to the given raw string, taking care of the password hashing. Doesn\u2019t save the AbstractBaseUser object.", "When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used.", "Returns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)", "Marks the user as having no password set. This isn\u2019t the same as having a blank string for a password. check_password() for this user will never return True. Doesn\u2019t save the AbstractBaseUser object.", "You may need this if authentication for your application takes place against an existing external source such as an LDAP directory.", "Returns False if set_unusable_password() has been called for this user.", "Returns an HMAC of the password field. Used for Session invalidation on password change.", "AbstractUser subclasses AbstractBaseUser:", "Normalizes the email by calling BaseUserManager.normalize_email(). If you override this method, be sure to call super() to retain the normalization.", "You should also define a custom manager for your user model. If your user model defines username, email, is_staff, is_active, is_superuser, last_login, and date_joined fields the same as Django\u2019s default user, you can install Django\u2019s UserManager; however, if your user model defines different fields, you\u2019ll need to define a custom manager that extends BaseUserManager providing two additional methods:", "The prototype of create_user() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_user should be defined as:", "The prototype of create_superuser() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_superuser should be defined as:", "For a ForeignKey in USERNAME_FIELD or REQUIRED_FIELDS, these methods receive the value of the to_field (the primary_key by default) of an existing instance.", "BaseUserManager provides the following utility methods:", "Normalizes email addresses by lowercasing the domain portion of the email address.", "Retrieves a user instance using the contents of the field nominated by USERNAME_FIELD.", "Returns a random password with the given length and given string of allowed characters. Note that the default value of allowed_chars doesn\u2019t contain letters that can cause user confusion, including:", "If you\u2019re entirely happy with Django\u2019s User model, but you want to add some additional profile information, you could subclass django.contrib.auth.models.AbstractUser and add your custom profile fields, although we\u2019d recommend a separate model as described in the \u201cModel design considerations\u201d note of Specifying a custom user model. AbstractUser provides the full implementation of the default User as an abstract model.", "Django\u2019s built-in forms and views make certain assumptions about the user model that they are working with.", "The following forms are compatible with any subclass of AbstractBaseUser:", "The following forms make assumptions about the user model and can be used as-is if those assumptions are met:", "Finally, the following forms are tied to User and need to be rewritten or extended to work with a custom user model:", "If your custom user model is a subclass of AbstractUser, then you can extend these forms in this manner:", "If you want your custom user model to also work with the admin, your user model must define some additional attributes and methods. These methods allow the admin to control access of the user to admin content:", "Returns True if the user is allowed to have access to the admin site.", "Returns True if the user account is currently active.", "Returns True if the user has the named permission. If obj is provided, the permission needs to be checked against a specific object instance.", "Returns True if the user has permission to access models in the given app.", "You will also need to register your custom user model with the admin. If your custom user model extends django.contrib.auth.models.AbstractUser, you can use Django\u2019s existing django.contrib.auth.admin.UserAdmin class. However, if your user model extends AbstractBaseUser, you\u2019ll need to define a custom ModelAdmin class. It may be possible to subclass the default django.contrib.auth.admin.UserAdmin; however, you\u2019ll need to override any of the definitions that refer to fields on django.contrib.auth.models.AbstractUser that aren\u2019t on your custom user class.", "Note", "If you are using a custom ModelAdmin which is a subclass of django.contrib.auth.admin.UserAdmin, then you need to add your custom fields to fieldsets (for fields to be used in editing users) and to add_fieldsets (for fields to be used when creating a user). For example:", "See a full example for more details.", "To make it easy to include Django\u2019s permission framework into your own user class, Django provides PermissionsMixin. This is an abstract model you can include in the class hierarchy for your user model, giving you all the methods and database fields necessary to support Django\u2019s permission model.", "PermissionsMixin provides the following methods and attributes:", "Boolean. Designates that this user has all permissions without explicitly assigning them.", "Returns a set of permission strings that the user has directly.", "If obj is passed in, only returns the user permissions for this specific object.", "Returns a set of permission strings that the user has, through their groups.", "If obj is passed in, only returns the group permissions for this specific object.", "Returns a set of permission strings that the user has, both through group and user permissions.", "If obj is passed in, only returns the permissions for this specific object.", "Returns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\" (see permissions). If User.is_active and is_superuser are both True, this method always returns True.", "If obj is passed in, this method won\u2019t check for a permission for the model, but for this specific object.", "Returns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If User.is_active and is_superuser are both True, this method always returns True.", "If obj is passed in, this method won\u2019t check for permissions for the model, but for the specific object.", "Returns True if the user has any permissions in the given package (the Django app label). If User.is_active and is_superuser are both True, this method always returns True.", "PermissionsMixin and ModelBackend", "If you don\u2019t include the PermissionsMixin, you must ensure you don\u2019t invoke the permissions methods on ModelBackend. ModelBackend assumes that certain fields are available on your user model. If your user model doesn\u2019t provide those fields, you\u2019ll receive database errors when you check permissions.", "One limitation of custom user models is that installing a custom user model will break any proxy model extending User. Proxy models must be based on a concrete base class; by defining a custom user model, you remove the ability of Django to reliably identify the base class.", "If your project uses proxy models, you must either modify the proxy to extend the user model that\u2019s in use in your project, or merge your proxy\u2019s behavior into your User subclass.", "Here is an example of an admin-compliant custom user app. This user model uses an email address as the username, and has a required date of birth; it provides no permission checking beyond an admin flag on the user account. This model would be compatible with all the built-in auth forms and views, except for the user creation forms. This example illustrates how most of the components work together, but is not intended to be copied directly into projects for production use.", "This code would all live in a models.py file for a custom authentication app:", "Then, to register this custom user model with Django\u2019s admin, the following code would be required in the app\u2019s admin.py file:", "Finally, specify the custom model as the default user model for your project using the AUTH_USER_MODEL setting in your settings.py:", "In older versions, ReadOnlyPasswordHashField is not disabled by default and UserChangeForm.clean_password() is required to return the initial value, whatever the user provides."]}, {"name": "Database access optimization", "path": "topics/db/optimization", "type": "Guides", "text": ["Django\u2019s database layer provides various ways to help developers get the most out of their databases. This document gathers together links to the relevant documentation, and adds various tips, organized under a number of headings that outline the steps to take when attempting to optimize your database usage.", "As general programming practice, this goes without saying. Find out what queries you are doing and what they are costing you. Use QuerySet.explain() to understand how specific QuerySets are executed by your database. You may also want to use an external project like django-debug-toolbar, or a tool that monitors your database directly.", "Remember that you may be optimizing for speed or memory or both, depending on your requirements. Sometimes optimizing for one will be detrimental to the other, but sometimes they will help each other. Also, work that is done by the database process might not have the same cost (to you) as the same amount of work done in your Python process. It is up to you to decide what your priorities are, where the balance must lie, and profile all of these as required since this will depend on your application and server.", "With everything that follows, remember to profile after every change to ensure that the change is a benefit, and a big enough benefit given the decrease in readability of your code. All of the suggestions below come with the caveat that in your circumstances the general principle might not apply, or might even be reversed.", "\u2026including:", "We will assume you have done the things listed above. The rest of this document focuses on how to use Django in such a way that you are not doing unnecessary work. This document also does not address other optimization techniques that apply to all expensive operations, such as general purpose caching.", "Understanding QuerySets is vital to getting good performance with simple code. In particular:", "To avoid performance problems, it is important to understand:", "As well as caching of the whole QuerySet, there is caching of the result of attributes on ORM objects. In general, attributes that are not callable will be cached. For example, assuming the example blog models:", "But in general, callable attributes cause DB lookups every time:", "Be careful when reading template code - the template system does not allow use of parentheses, but will call callables automatically, hiding the above distinction.", "Be careful with your own custom properties - it is up to you to implement caching when required, for example using the cached_property decorator.", "To make use of the caching behavior of QuerySet, you may need to use the with template tag.", "When you have a lot of objects, the caching behavior of the QuerySet can cause a large amount of memory to be used. In this case, iterator() may help.", "QuerySet.explain() gives you detailed information about how the database executes a query, including indexes and joins that are used. These details may help you find queries that could be rewritten more efficiently, or identify indexes that could be added to improve performance.", "For instance:", "If these aren\u2019t enough to generate the SQL you need:", "A less portable but more powerful method is the RawSQL expression, which allows some SQL to be explicitly added to the query. If that still isn\u2019t powerful enough:", "Write your own custom SQL to retrieve data or populate models. Use django.db.connection.queries to find out what Django is writing for you and start from there.", "There are two reasons to use a column with unique or db_index when using get() to retrieve individual objects. First, the query will be quicker because of the underlying database index. Also, the query could run much slower if multiple objects match the lookup; having a unique constraint on the column guarantees this will never happen.", "So using the example blog models:", "will be quicker than:", "because id is indexed by the database and is guaranteed to be unique.", "Doing the following is potentially quite slow:", "First of all, headline is not indexed, which will make the underlying database fetch slower.", "Second, the lookup doesn\u2019t guarantee that only one object will be returned. If the query matches more than one object, it will retrieve and transfer all of them from the database. This penalty could be substantial if hundreds or thousands of records are returned. The penalty will be compounded if the database lives on a separate server, where network overhead and latency also play a factor.", "Hitting the database multiple times for different parts of a single \u2018set\u2019 of data that you will need all parts of is, in general, less efficient than retrieving it all in one query. This is particularly important if you have a query that is executed in a loop, and could therefore end up doing many database queries, when only one was needed. So:", "Understand select_related() and prefetch_related() thoroughly, and use them:", "When you only want a dict or list of values, and don\u2019t need ORM model objects, make appropriate usage of values(). These can be useful for replacing model objects in template code - as long as the dicts you supply have the same attributes as those used in the template, you are fine.", "Use defer() and only() if there are database columns you know that you won\u2019t need (or won\u2019t need in most cases) to avoid loading them. Note that if you do use them, the ORM will have to go and get them in a separate query, making this a pessimization if you use it inappropriately.", "Don\u2019t be too aggressive in deferring fields without profiling as the database has to read most of the non-text, non-VARCHAR data from the disk for a single row in the results, even if it ends up only using a few columns. The defer() and only() methods are most useful when you can avoid loading a lot of text data or for fields that might take a lot of processing to convert back to Python. As always, profile first, then optimize.", "\u2026if you only want to find out if obj is in the queryset, rather than if obj in queryset.", "\u2026if you only want the count, rather than doing len(queryset).", "\u2026if you only want to find out if at least one result exists, rather than if\nqueryset.", "But:", "If you are going to need other data from the QuerySet, evaluate it immediately.", "For example, assuming an Email model that has a subject attribute and a many-to-many relation to User, the following code is optimal:", "It is optimal because:", "In total, this code does either one or zero database queries. The only deliberate optimization performed is using the emails variable. Using QuerySet.exists() for the if or QuerySet.count() for the count would each cause additional queries.", "Rather than retrieve a load of objects, set some values, and save them individual, use a bulk SQL UPDATE statement, via QuerySet.update(). Similarly, do bulk deletes where possible.", "Note, however, that these bulk update methods cannot call the save() or delete() methods of individual instances, which means that any custom behavior you have added for these methods will not be executed, including anything driven from the normal database object signals.", "If you only need a foreign key value, use the foreign key value that is already on the object you\u2019ve got, rather than getting the whole related object and taking its primary key. i.e. do:", "instead of:", "Ordering is not free; each field to order by is an operation the database must perform. If a model has a default ordering (Meta.ordering) and you don\u2019t need it, remove it on a QuerySet by calling order_by() with no parameters.", "Adding an index to your database may help to improve ordering performance.", "Use bulk methods to reduce the number of SQL statements.", "When creating objects, where possible, use the bulk_create() method to reduce the number of SQL queries. For example:", "\u2026is preferable to:", "Note that there are a number of caveats to this method, so make sure it\u2019s appropriate for your use case.", "When updating objects, where possible, use the bulk_update() method to reduce the number of SQL queries. Given a list or queryset of objects:", "The following example:", "\u2026is preferable to:", "Note that there are a number of caveats to this method, so make sure it\u2019s appropriate for your use case.", "When inserting objects into ManyToManyFields, use add() with multiple objects to reduce the number of SQL queries. For example:", "\u2026is preferable to:", "\u2026where Bands and Artists have a many-to-many relationship.", "When inserting different pairs of objects into ManyToManyField or when the custom through table is defined, use bulk_create() method to reduce the number of SQL queries. For example:", "\u2026is preferable to:", "\u2026where Pizza and Topping have a many-to-many relationship. Note that there are a number of caveats to this method, so make sure it\u2019s appropriate for your use case.", "When removing objects from ManyToManyFields, use remove() with multiple objects to reduce the number of SQL queries. For example:", "\u2026is preferable to:", "\u2026where Bands and Artists have a many-to-many relationship.", "When removing different pairs of objects from ManyToManyFields, use delete() on a Q expression with multiple through model instances to reduce the number of SQL queries. For example:", "\u2026is preferable to:", "\u2026where Pizza and Topping have a many-to-many relationship."]}, {"name": "Database Functions", "path": "ref/models/database-functions", "type": "API", "text": ["The classes documented below provide a way for users to use functions provided by the underlying database as annotations, aggregations, or filters in Django. Functions are also expressions, so they can be used and combined with other expressions like aggregate functions.", "We\u2019ll be using the following model in examples of each function:", "We don\u2019t usually recommend allowing null=True for CharField since this allows the field to have two \u201cempty values\u201d, but it\u2019s important for the Coalesce example below.", "Forces the result type of expression to be the one from output_field.", "Usage example:", "Accepts a list of at least two field names or expressions and returns the first non-null value (note that an empty string is not considered a null value). Each argument must be of a similar type, so mixing text and numbers will result in a database error.", "Usage examples:", "Warning", "A Python value passed to Coalesce on MySQL may be converted to an incorrect type unless explicitly cast to the correct database type:", "Takes an expression and a collation name to query against.", "For example, to filter case-insensitively in SQLite:", "It can also be used when ordering, for example with PostgreSQL:", "Accepts a list of at least two field names or expressions and returns the greatest value. Each argument must be of a similar type, so mixing text and numbers will result in a database error.", "Usage example:", "annotated_comment.last_updated will be the most recent of blog.modified and comment.modified.", "Warning", "The behavior of Greatest when one or more expression may be null varies between databases:", "The PostgreSQL behavior can be emulated using Coalesce if you know a sensible minimum value to provide as a default.", "Takes a list of key-value pairs and returns a JSON object containing those pairs.", "Usage example:", "Accepts a list of at least two field names or expressions and returns the least value. Each argument must be of a similar type, so mixing text and numbers will result in a database error.", "Warning", "The behavior of Least when one or more expression may be null varies between databases:", "The PostgreSQL behavior can be emulated using Coalesce if you know a sensible maximum value to provide as a default.", "Accepts two expressions and returns None if they are equal, otherwise returns expression1.", "Caveats on Oracle", "Due to an Oracle convention, this function returns the empty string instead of None when the expressions are of type CharField.", "Passing Value(None) to expression1 is prohibited on Oracle since Oracle doesn\u2019t accept NULL as the first argument.", "We\u2019ll be using the following model in examples of each function:", "Extracts a component of a date as a number.", "Takes an expression representing a DateField, DateTimeField, TimeField, or DurationField and a lookup_name, and returns the part of the date referenced by lookup_name as an IntegerField. Django usually uses the databases\u2019 extract function, so you may use any lookup_name that your database supports. A tzinfo subclass, usually provided by zoneinfo, can be passed to extract a value in a specific timezone.", "Given the datetime 2015-06-15 23:30:01.000321+00:00, the built-in lookup_names return:", "If a different timezone like Australia/Melbourne is active in Django, then the datetime is converted to the timezone before the value is extracted. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be the same as above except for:", "week_day values", "The week_day lookup_type is calculated differently from most databases and from Python\u2019s standard functions. This function will return 1 for Sunday, 2 for Monday, through 7 for Saturday.", "The equivalent calculation in Python is:", "week values", "The week lookup_type is calculated based on ISO-8601, i.e., a week starts on a Monday. The first week of a year is the one that contains the year\u2019s first Thursday, i.e. the first week has the majority (four or more) of its days in the year. The value returned is in the range 1 to 52 or 53.", "Each lookup_name above has a corresponding Extract subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use ExtractYear(...) rather than Extract(..., lookup_name='year').", "Usage example:", "Returns the ISO-8601 week-numbering year.", "Returns the ISO-8601 week day with day 1 being Monday and day 7 being Sunday.", "These are logically equivalent to Extract('date_field', lookup_name). Each class is also a Transform registered on DateField and DateTimeField as __(lookup_name), e.g. __year.", "Since DateFields don\u2019t have a time component, only Extract subclasses that deal with date-parts can be used with DateField:", "In addition to the following, all extracts for DateField listed above may also be used on DateTimeFields .", "These are logically equivalent to Extract('datetime_field', lookup_name). Each class is also a Transform registered on DateTimeField as __(lookup_name), e.g. __minute.", "DateTimeField examples:", "When USE_TZ is True then datetimes are stored in the database in UTC. If a different timezone is active in Django, the datetime is converted to that timezone before the value is extracted. The example below converts to the Melbourne timezone (UTC +10:00), which changes the day, weekday, and hour values that are returned:", "Explicitly passing the timezone to the Extract function behaves in the same way, and takes priority over an active timezone:", "Returns the database server\u2019s current date and time when the query is executed, typically using the SQL CURRENT_TIMESTAMP.", "Usage example:", "PostgreSQL considerations", "On PostgreSQL, the SQL CURRENT_TIMESTAMP returns the time that the current transaction started. Therefore for cross-database compatibility, Now() uses STATEMENT_TIMESTAMP instead. If you need the transaction timestamp, use django.contrib.postgres.functions.TransactionNow.", "Truncates a date up to a significant component.", "When you only care if something happened in a particular year, hour, or day, but not the exact second, then Trunc (and its subclasses) can be useful to filter or aggregate your data. For example, you can use Trunc to calculate the number of sales per day.", "Trunc takes a single expression, representing a DateField, TimeField, or DateTimeField, a kind representing a date or time part, and an output_field that\u2019s either DateTimeField(), TimeField(), or DateField(). It returns a datetime, date, or time depending on output_field, with fields up to kind set to their minimum value. If output_field is omitted, it will default to the output_field of expression. A tzinfo subclass, usually provided by zoneinfo, can be passed to truncate a value in a specific timezone.", "Deprecated since version 4.0: The is_dst parameter indicates whether or not pytz should interpret nonexistent and ambiguous datetimes in daylight saving time. By default (when is_dst=None), pytz raises an exception for such datetimes.", "The is_dst parameter is deprecated and will be removed in Django 5.0.", "Given the datetime 2015-06-15 14:30:50.000321+00:00, the built-in kinds return:", "If a different timezone like Australia/Melbourne is active in Django, then the datetime is converted to the new timezone before the value is truncated. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be:", "The year has an offset of +11:00 because the result transitioned into daylight saving time.", "Each kind above has a corresponding Trunc subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use TruncYear(...) rather than Trunc(..., kind='year').", "The subclasses are all defined as transforms, but they aren\u2019t registered with any fields, because the lookup names are already reserved by the Extract subclasses.", "Usage example:", "Truncates to midnight on the Monday of the week.", "Deprecated since version 4.0: The is_dst parameter is deprecated and will be removed in Django 5.0.", "These are logically equivalent to Trunc('date_field', kind). They truncate all parts of the date up to kind which allows grouping or filtering dates with less precision. expression can have an output_field of either DateField or DateTimeField.", "Since DateFields don\u2019t have a time component, only Trunc subclasses that deal with date-parts can be used with DateField:", "The tzinfo parameter was added.", "TruncDate casts expression to a date rather than using the built-in SQL truncate function. It\u2019s also registered as a transform on DateTimeField as __date.", "The tzinfo parameter was added.", "TruncTime casts expression to a time rather than using the built-in SQL truncate function. It\u2019s also registered as a transform on DateTimeField as __time.", "Deprecated since version 4.0: The is_dst parameter is deprecated and will be removed in Django 5.0.", "These are logically equivalent to Trunc('datetime_field', kind). They truncate all parts of the date up to kind and allow grouping or filtering datetimes with less precision. expression must have an output_field of DateTimeField.", "Usage example:", "Deprecated since version 4.0: The is_dst parameter is deprecated and will be removed in Django 5.0.", "These are logically equivalent to Trunc('time_field', kind). They truncate all parts of the time up to kind which allows grouping or filtering times with less precision. expression can have an output_field of either TimeField or DateTimeField.", "Since TimeFields don\u2019t have a date component, only Trunc subclasses that deal with time-parts can be used with TimeField:", "We\u2019ll be using the following model in math function examples:", "Returns the absolute value of a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the arccosine of a numeric field or expression. The expression value must be within the range -1 to 1.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the arcsine of a numeric field or expression. The expression value must be in the range -1 to 1.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the arctangent of a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the arctangent of expression1 / expression2.", "Usage example:", "Returns the smallest integer greater than or equal to a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the cosine of a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the cotangent of a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Converts a numeric field or expression from radians to degrees.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the value of e (the natural logarithm base) raised to the power of a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the largest integer value not greater than a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the natural logarithm a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Accepts two numeric fields or expressions and returns the logarithm of the first to base of the second.", "Usage example:", "Accepts two numeric fields or expressions and returns the remainder of the first divided by the second (modulo operation).", "Usage example:", "Returns the value of the mathematical constant \u03c0.", "Accepts two numeric fields or expressions and returns the value of the first raised to the power of the second.", "Usage example:", "Converts a numeric field or expression from degrees to radians.", "Usage example:", "It can also be registered as a transform. For example:", "Returns a random value in the range 0.0 \u2264 x < 1.0.", "Rounds a numeric field or expression to precision (must be an integer) decimal places. By default, it rounds to the nearest integer. Whether half values are rounded up or down depends on the database.", "Usage example:", "It can also be registered as a transform. For example:", "The precision argument was added.", "Returns the sign (-1, 0, 1) of a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the sine of a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the square root of a nonnegative numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Returns the tangent of a numeric field or expression.", "Usage example:", "It can also be registered as a transform. For example:", "Accepts a numeric field or expression and returns the text representation of the expression as a single character. It works the same as Python\u2019s chr() function.", "Like Length, it can be registered as a transform on IntegerField. The default lookup name is chr.", "Usage example:", "Accepts a list of at least two text fields or expressions and returns the concatenated text. Each argument must be of a text or char type. If you want to concatenate a TextField() with a CharField(), then be sure to tell Django that the output_field should be a TextField(). Specifying an output_field is also required when concatenating a Value as in the example below.", "This function will never have a null result. On backends where a null argument results in the entire expression being null, Django will ensure that each null part is converted to an empty string first.", "Usage example:", "Returns the first length characters of the given text field or expression.", "Usage example:", "Accepts a single text field or expression and returns the number of characters the value has. If the expression is null, then the length will also be null.", "Usage example:", "It can also be registered as a transform. For example:", "Accepts a single text field or expression and returns the lowercase representation.", "It can also be registered as a transform as described in Length.", "Usage example:", "Returns the value of the given text field or expression padded on the left side with fill_text so that the resulting value is length characters long. The default fill_text is a space.", "Usage example:", "Similar to Trim, but removes only leading spaces.", "Accepts a single text field or expression and returns the MD5 hash of the string.", "It can also be registered as a transform as described in Length.", "Usage example:", "Accepts a single text field or expression and returns the Unicode code point value for the first character of that expression. It works similar to Python\u2019s ord() function, but an exception isn\u2019t raised if the expression is more than one character long.", "It can also be registered as a transform as described in Length. The default lookup name is ord.", "Usage example:", "Returns the value of the given text field or expression repeated number times.", "Usage example:", "Replaces all occurrences of text with replacement in expression. The default replacement text is the empty string. The arguments to the function are case-sensitive.", "Usage example:", "Accepts a single text field or expression and returns the characters of that expression in reverse order.", "It can also be registered as a transform as described in Length. The default lookup name is reverse.", "Usage example:", "Returns the last length characters of the given text field or expression.", "Usage example:", "Similar to LPad, but pads on the right side.", "Similar to Trim, but removes only trailing spaces.", "Accepts a single text field or expression and returns the particular hash of the string.", "They can also be registered as transforms as described in Length.", "Usage example:", "PostgreSQL", "The pgcrypto extension must be installed. You can use the CryptoExtension migration operation to install it.", "Oracle", "Oracle doesn\u2019t support the SHA224 function.", "Returns a positive integer corresponding to the 1-indexed position of the first occurrence of substring inside string, or 0 if substring is not found.", "Usage example:", "Warning", "In MySQL, a database table\u2019s collation determines whether string comparisons (such as the expression and substring of this function) are case-sensitive. Comparisons are case-insensitive by default.", "Returns a substring of length length from the field or expression starting at position pos. The position is 1-indexed, so the position must be greater than 0. If length is None, then the rest of the string will be returned.", "Usage example:", "Returns the value of the given text field or expression with leading and trailing spaces removed.", "Usage example:", "Accepts a single text field or expression and returns the uppercase representation.", "It can also be registered as a transform as described in Length.", "Usage example:", "There are a number of functions to use in a Window expression for computing the rank of elements or the Ntile of some rows.", "Calculates the cumulative distribution of a value within a window or partition. The cumulative distribution is defined as the number of rows preceding or peered with the current row divided by the total number of rows in the frame.", "Equivalent to Rank but does not have gaps.", "Returns the value evaluated at the row that\u2019s the first row of the window frame, or None if no such value exists.", "Calculates the value offset by offset, and if no row exists there, returns default.", "default must have the same type as the expression, however, this is only validated by the database and not in Python.", "MariaDB and default", "MariaDB doesn\u2019t support the default parameter.", "Comparable to FirstValue, it calculates the last value in a given frame clause.", "Calculates the leading value in a given frame. Both offset and default are evaluated with respect to the current row.", "default must have the same type as the expression, however, this is only validated by the database and not in Python.", "MariaDB and default", "MariaDB doesn\u2019t support the default parameter.", "Computes the row relative to the offset nth (must be a positive value) within the window. Returns None if no row exists.", "Some databases may handle a nonexistent nth-value differently. For example, Oracle returns an empty string rather than None for character-based expressions. Django doesn\u2019t do any conversions in these cases.", "Calculates a partition for each of the rows in the frame clause, distributing numbers as evenly as possible between 1 and num_buckets. If the rows don\u2019t divide evenly into a number of buckets, one or more buckets will be represented more frequently.", "Computes the percentile rank of the rows in the frame clause. This computation is equivalent to evaluating:", "The following table explains the calculation for the percentile rank of a row:", "Comparable to RowNumber, this function ranks rows in the window. The computed rank contains gaps. Use DenseRank to compute rank without gaps.", "Computes the row number according to the ordering of either the frame clause or the ordering of the whole query if there is no partitioning of the window frame."]}, {"name": "Database instrumentation", "path": "topics/db/instrumentation", "type": "Guides", "text": ["To help you understand and control the queries issued by your code, Django provides a hook for installing wrapper functions around the execution of database queries. For example, wrappers can count queries, measure query duration, log queries, or even prevent query execution (e.g. to make sure that no queries are issued while rendering a template with prefetched data).", "The wrappers are modeled after middleware \u2013 they are callables which take another callable as one of their arguments. They call that callable to invoke the (possibly wrapped) database query, and they can do what they want around that call. They are, however, created and installed by user code, and so don\u2019t need a separate factory like middleware do.", "Installing a wrapper is done in a context manager \u2013 so the wrappers are temporary and specific to some flow in your code.", "As mentioned above, an example of a wrapper is a query execution blocker. It could look like this:", "And it would be used in a view to block queries from the template like so:", "The parameters sent to the wrappers are:", "Using the parameters, a slightly more complex version of the blocker could include the connection name in the error message:", "For a more complete example, a query logger could look like this:", "To use this, you would create a logger object and install it as a wrapper:", "Returns a context manager which, when entered, installs a wrapper around database query executions, and when exited, removes the wrapper. The wrapper is installed on the thread-local connection object.", "wrapper is a callable taking five arguments. It is called for every query execution in the scope of the context manager, with arguments execute, sql, params, many, and context as described above. It\u2019s expected to call execute(sql, params, many, context) and return the return value of that call."]}, {"name": "Database migration operations", "path": "ref/contrib/postgres/operations", "type": "API", "text": ["All of these operations are available from the django.contrib.postgres.operations module.", "You can create a PostgreSQL extension in your database using a migration file. This example creates an hstore extension, but the same principles apply for other extensions.", "Set up the hstore extension in PostgreSQL before the first CreateModel or AddField operation that involves HStoreField by adding a migration with the HStoreExtension operation. For example:", "The operation skips adding the extension if it already exists.", "For most extensions, this requires a database user with superuser privileges. If the Django database user doesn\u2019t have the appropriate privileges, you\u2019ll have to create the extension outside of Django migrations with a user that has them. In that case, connect to your Django database and run the query CREATE EXTENSION IF NOT EXISTS hstore;.", "In older versions, the pre-existence of the extension isn\u2019t checked.", "An Operation subclass which installs a PostgreSQL extension. For common extensions, use one of the more specific subclasses below.", "This is a required argument. The name of the extension to be installed.", "Installs the bloom extension.", "Installs the btree_gin extension.", "Installs the btree_gist extension.", "Installs the citext extension.", "Installs the pgcrypto extension.", "Installs the hstore extension and also sets up the connection to interpret hstore data for possible use in subsequent migrations.", "Installs the pg_trgm extension.", "Installs the unaccent extension.", "If you need to filter or order a column using a particular collation that your operating system provides but PostgreSQL does not, you can manage collations in your database using a migration file. These collations can then be used with the db_collation parameter on CharField, TextField, and their subclasses.", "For example, to create a collation for German phone book ordering:", "Creates a collation with the given name, locale and provider.", "Set the deterministic parameter to False to create a non-deterministic collation, such as for case-insensitive filtering.", "Removes the collations named name.", "When reversed this is creating a collation with the provided locale, provider, and deterministic arguments. Therefore, locale is required to make this operation reversible.", "Restrictions", "Non-deterministic collations are supported only on PostgreSQL 12+.", "PostgreSQL supports the CONCURRENTLY option to CREATE INDEX and DROP INDEX statements to add and remove indexes without locking out writes. This option is useful for adding or removing an index in a live production database.", "Like AddIndex, but creates an index with the CONCURRENTLY option. This has a few caveats to be aware of when using this option, see the PostgreSQL documentation of building indexes concurrently.", "Like RemoveIndex, but removes the index with the CONCURRENTLY option. This has a few caveats to be aware of when using this option, see the PostgreSQL documentation.", "Note", "The CONCURRENTLY option is not supported inside a transaction (see non-atomic migration).", "PostgreSQL supports the NOT VALID option with the ADD CONSTRAINT statement to add check constraints without enforcing validation on existing rows. This option is useful if you want to skip the potentially lengthy scan of the table to verify that all existing rows satisfy the constraint.", "To validate check constraints created with the NOT VALID option at a later point of time, use the ValidateConstraint operation.", "See the PostgreSQL documentation for more details.", "Like AddConstraint, but avoids validating the constraint on existing rows.", "Scans through the table and validates the given check constraint on existing rows.", "Note", "AddConstraintNotValid and ValidateConstraint operations should be performed in two separate migrations. Performing both operations in the same atomic migration has the same effect as AddConstraint, whereas performing them in a single non-atomic migration, may leave your database in an inconsistent state if the ValidateConstraint operation fails."]}, {"name": "Database transactions", "path": "topics/db/transactions", "type": "Guides", "text": ["Django gives you a few ways to control how database transactions are managed.", "Django\u2019s default behavior is to run in autocommit mode. Each query is immediately committed to the database, unless a transaction is active. See below for details.", "Django uses transactions or savepoints automatically to guarantee the integrity of ORM operations that require multiple queries, especially delete() and update() queries.", "Django\u2019s TestCase class also wraps each test in a transaction for performance reasons.", "A common way to handle transactions on the web is to wrap each request in a transaction. Set ATOMIC_REQUESTS to True in the configuration of each database for which you want to enable this behavior.", "It works like this. Before calling a view function, Django starts a transaction. If the response is produced without problems, Django commits the transaction. If the view produces an exception, Django rolls back the transaction.", "You may perform subtransactions using savepoints in your view code, typically with the atomic() context manager. However, at the end of the view, either all or none of the changes will be committed.", "Warning", "While the simplicity of this transaction model is appealing, it also makes it inefficient when traffic increases. Opening a transaction for every view has some overhead. The impact on performance depends on the query patterns of your application and on how well your database handles locking.", "Per-request transactions and streaming responses", "When a view returns a StreamingHttpResponse, reading the contents of the response will often execute code to generate the content. Since the view has already returned, such code runs outside of the transaction.", "Generally speaking, it isn\u2019t advisable to write to the database while generating a streaming response, since there\u2019s no sensible way to handle errors after starting to send the response.", "In practice, this feature wraps every view function in the atomic() decorator described below.", "Note that only the execution of your view is enclosed in the transactions. Middleware runs outside of the transaction, and so does the rendering of template responses.", "When ATOMIC_REQUESTS is enabled, it\u2019s still possible to prevent views from running in a transaction.", "This decorator will negate the effect of ATOMIC_REQUESTS for a given view:", "It only works if it\u2019s applied to the view itself.", "Django provides a single API to control database transactions.", "Atomicity is the defining property of database transactions. atomic allows us to create a block of code within which the atomicity on the database is guaranteed. If the block of code is successfully completed, the changes are committed to the database. If there is an exception, the changes are rolled back.", "atomic blocks can be nested. In this case, when an inner block completes successfully, its effects can still be rolled back if an exception is raised in the outer block at a later point.", "It is sometimes useful to ensure an atomic block is always the outermost atomic block, ensuring that any database changes are committed when the block is exited without errors. This is known as durability and can be achieved by setting durable=True. If the atomic block is nested within another it raises a RuntimeError.", "atomic is usable both as a decorator:", "and as a context manager:", "Wrapping atomic in a try/except block allows for natural handling of integrity errors:", "In this example, even if generate_relationships() causes a database error by breaking an integrity constraint, you can execute queries in add_children(), and the changes from create_parent() are still there and bound to the same transaction. Note that any operations attempted in generate_relationships() will already have been rolled back safely when handle_exception() is called, so the exception handler can also operate on the database if necessary.", "Avoid catching exceptions inside atomic!", "When exiting an atomic block, Django looks at whether it\u2019s exited normally or with an exception to determine whether to commit or roll back. If you catch and handle exceptions inside an atomic block, you may hide from Django the fact that a problem has happened. This can result in unexpected behavior.", "This is mostly a concern for DatabaseError and its subclasses such as IntegrityError. After such an error, the transaction is broken and Django will perform a rollback at the end of the atomic block. If you attempt to run database queries before the rollback happens, Django will raise a TransactionManagementError. You may also encounter this behavior when an ORM-related signal handler raises an exception.", "The correct way to catch database errors is around an atomic block as shown above. If necessary, add an extra atomic block for this purpose. This pattern has another advantage: it delimits explicitly which operations will be rolled back if an exception occurs.", "If you catch exceptions raised by raw SQL queries, Django\u2019s behavior is unspecified and database-dependent.", "You may need to manually revert model state when rolling back a transaction.", "The values of a model\u2019s fields won\u2019t be reverted when a transaction rollback happens. This could lead to an inconsistent model state unless you manually restore the original field values.", "For example, given MyModel with an active field, this snippet ensures that the if obj.active check at the end uses the correct value if updating active to True fails in the transaction:", "In order to guarantee atomicity, atomic disables some APIs. Attempting to commit, roll back, or change the autocommit state of the database connection within an atomic block will raise an exception.", "atomic takes a using argument which should be the name of a database. If this argument isn\u2019t provided, Django uses the \"default\" database.", "Under the hood, Django\u2019s transaction management code:", "You can disable the creation of savepoints for inner blocks by setting the savepoint argument to False. If an exception occurs, Django will perform the rollback when exiting the first parent block with a savepoint if there is one, and the outermost block otherwise. Atomicity is still guaranteed by the outer transaction. This option should only be used if the overhead of savepoints is noticeable. It has the drawback of breaking the error handling described above.", "You may use atomic when autocommit is turned off. It will only use savepoints, even for the outermost block.", "Performance considerations", "Open transactions have a performance cost for your database server. To minimize this overhead, keep your transactions as short as possible. This is especially important if you\u2019re using atomic() in long-running processes, outside of Django\u2019s request / response cycle.", "Warning", "django.test.TestCase disables the durability check to allow testing durable atomic blocks in a transaction for performance reasons. Use django.test.TransactionTestCase for testing durability.", "The durable argument was added.", "In the SQL standards, each SQL query starts a transaction, unless one is already active. Such transactions must then be explicitly committed or rolled back.", "This isn\u2019t always convenient for application developers. To alleviate this problem, most databases provide an autocommit mode. When autocommit is turned on and no transaction is active, each SQL query gets wrapped in its own transaction. In other words, not only does each such query start a transaction, but the transaction also gets automatically committed or rolled back, depending on whether the query succeeded.", "PEP 249, the Python Database API Specification v2.0, requires autocommit to be initially turned off. Django overrides this default and turns autocommit on.", "To avoid this, you can deactivate the transaction management, but it isn\u2019t recommended.", "You can totally disable Django\u2019s transaction management for a given database by setting AUTOCOMMIT to False in its configuration. If you do this, Django won\u2019t enable autocommit, and won\u2019t perform any commits. You\u2019ll get the regular behavior of the underlying database library.", "This requires you to commit explicitly every transaction, even those started by Django or by third-party libraries. Thus, this is best used in situations where you want to run your own transaction-controlling middleware or do something really strange.", "Sometimes you need to perform an action related to the current database transaction, but only if the transaction successfully commits. Examples might include a Celery task, an email notification, or a cache invalidation.", "Django provides the on_commit() function to register callback functions that should be executed after a transaction is successfully committed:", "Pass any function (that takes no arguments) to on_commit():", "You can also wrap your function in a lambda:", "The function you pass in will be called immediately after a hypothetical database write made where on_commit() is called would be successfully committed.", "If you call on_commit() while there isn\u2019t an active transaction, the callback will be executed immediately.", "If that hypothetical database write is instead rolled back (typically when an unhandled exception is raised in an atomic() block), your function will be discarded and never called.", "Savepoints (i.e. nested atomic() blocks) are handled correctly. That is, an on_commit() callable registered after a savepoint (in a nested atomic() block) will be called after the outer transaction is committed, but not if a rollback to that savepoint or any previous savepoint occurred during the transaction:", "On the other hand, when a savepoint is rolled back (due to an exception being raised), the inner callable will not be called:", "On-commit functions for a given transaction are executed in the order they were registered.", "If one on-commit function within a given transaction raises an uncaught exception, no later registered functions in that same transaction will run. This is the same behavior as if you\u2019d executed the functions sequentially yourself without on_commit().", "Your callbacks are executed after a successful commit, so a failure in a callback will not cause the transaction to roll back. They are executed conditionally upon the success of the transaction, but they are not part of the transaction. For the intended use cases (mail notifications, Celery tasks, etc.), this should be fine. If it\u2019s not (if your follow-up action is so critical that its failure should mean the failure of the transaction itself), then you don\u2019t want to use the on_commit() hook. Instead, you may want two-phase commit such as the psycopg Two-Phase Commit protocol support and the optional Two-Phase Commit Extensions in the Python DB-API specification.", "Callbacks are not run until autocommit is restored on the connection following the commit (because otherwise any queries done in a callback would open an implicit transaction, preventing the connection from going back into autocommit mode).", "When in autocommit mode and outside of an atomic() block, the function will run immediately, not on commit.", "On-commit functions only work with autocommit mode and the atomic() (or ATOMIC_REQUESTS) transaction API. Calling on_commit() when autocommit is disabled and you are not within an atomic block will result in an error.", "Django\u2019s TestCase class wraps each test in a transaction and rolls back that transaction after each test, in order to provide test isolation. This means that no transaction is ever actually committed, thus your on_commit() callbacks will never be run.", "You can overcome this limitation by using TestCase.captureOnCommitCallbacks(). This captures your on_commit() callbacks in a list, allowing you to make assertions on them, or emulate the transaction committing by calling them.", "Another way to overcome the limitation is to use TransactionTestCase instead of TestCase. This will mean your transactions are committed, and the callbacks will run. However TransactionTestCase flushes the database between tests, which is significantly slower than TestCase\u2019s isolation.", "A rollback hook is harder to implement robustly than a commit hook, since a variety of things can cause an implicit rollback.", "For instance, if your database connection is dropped because your process was killed without a chance to shut down gracefully, your rollback hook will never run.", "But there is a solution: instead of doing something during the atomic block (transaction) and then undoing it if the transaction fails, use on_commit() to delay doing it in the first place until after the transaction succeeds. It\u2019s a lot easier to undo something you never did in the first place!", "Warning", "Always prefer atomic() if possible at all. It accounts for the idiosyncrasies of each database and prevents invalid operations.", "The low level APIs are only useful if you\u2019re implementing your own transaction management.", "Django provides an API in the django.db.transaction module to manage the autocommit state of each database connection.", "These functions take a using argument which should be the name of a database. If it isn\u2019t provided, Django uses the \"default\" database.", "Autocommit is initially turned on. If you turn it off, it\u2019s your responsibility to restore it.", "Once you turn autocommit off, you get the default behavior of your database adapter, and Django won\u2019t help you. Although that behavior is specified in PEP 249, implementations of adapters aren\u2019t always consistent with one another. Review the documentation of the adapter you\u2019re using carefully.", "You must ensure that no transaction is active, usually by issuing a commit() or a rollback(), before turning autocommit back on.", "Django will refuse to turn autocommit off when an atomic() block is active, because that would break atomicity.", "A transaction is an atomic set of database queries. Even if your program crashes, the database guarantees that either all the changes will be applied, or none of them.", "Django doesn\u2019t provide an API to start a transaction. The expected way to start a transaction is to disable autocommit with set_autocommit().", "Once you\u2019re in a transaction, you can choose either to apply the changes you\u2019ve performed until this point with commit(), or to cancel them with rollback(). These functions are defined in django.db.transaction.", "These functions take a using argument which should be the name of a database. If it isn\u2019t provided, Django uses the \"default\" database.", "Django will refuse to commit or to rollback when an atomic() block is active, because that would break atomicity.", "A savepoint is a marker within a transaction that enables you to roll back part of a transaction, rather than the full transaction. Savepoints are available with the SQLite, PostgreSQL, Oracle, and MySQL (when using the InnoDB storage engine) backends. Other backends provide the savepoint functions, but they\u2019re empty operations \u2013 they don\u2019t actually do anything.", "Savepoints aren\u2019t especially useful if you are using autocommit, the default behavior of Django. However, once you open a transaction with atomic(), you build up a series of database operations awaiting a commit or rollback. If you issue a rollback, the entire transaction is rolled back. Savepoints provide the ability to perform a fine-grained rollback, rather than the full rollback that would be performed by transaction.rollback().", "When the atomic() decorator is nested, it creates a savepoint to allow partial commit or rollback. You\u2019re strongly encouraged to use atomic() rather than the functions described below, but they\u2019re still part of the public API, and there\u2019s no plan to deprecate them.", "Each of these functions takes a using argument which should be the name of a database for which the behavior applies. If no using argument is provided then the \"default\" database is used.", "Savepoints are controlled by three functions in django.db.transaction:", "Creates a new savepoint. This marks a point in the transaction that is known to be in a \u201cgood\u201d state. Returns the savepoint ID (sid).", "Releases savepoint sid. The changes performed since the savepoint was created become part of the transaction.", "Rolls back the transaction to savepoint sid.", "These functions do nothing if savepoints aren\u2019t supported or if the database is in autocommit mode.", "In addition, there\u2019s a utility function:", "Resets the counter used to generate unique savepoint IDs.", "The following example demonstrates the use of savepoints:", "Savepoints may be used to recover from a database error by performing a partial rollback. If you\u2019re doing this inside an atomic() block, the entire block will still be rolled back, because it doesn\u2019t know you\u2019ve handled the situation at a lower level! To prevent this, you can control the rollback behavior with the following functions.", "Setting the rollback flag to True forces a rollback when exiting the innermost atomic block. This may be useful to trigger a rollback without raising an exception.", "Setting it to False prevents such a rollback. Before doing that, make sure you\u2019ve rolled back the transaction to a known-good savepoint within the current atomic block! Otherwise you\u2019re breaking atomicity and data corruption may occur.", "While SQLite supports savepoints, a flaw in the design of the sqlite3 module makes them hardly usable.", "When autocommit is enabled, savepoints don\u2019t make sense. When it\u2019s disabled, sqlite3 commits implicitly before savepoint statements. (In fact, it commits before any statement other than SELECT, INSERT, UPDATE, DELETE and REPLACE.) This bug has two consequences:", "If you\u2019re using MySQL, your tables may or may not support transactions; it depends on your MySQL version and the table types you\u2019re using. (By \u201ctable types,\u201d we mean something like \u201cInnoDB\u201d or \u201cMyISAM\u201d.) MySQL transaction peculiarities are outside the scope of this article, but the MySQL site has information on MySQL transactions.", "If your MySQL setup does not support transactions, then Django will always function in autocommit mode: statements will be executed and committed as soon as they\u2019re called. If your MySQL setup does support transactions, Django will handle transactions as explained in this document.", "Note", "This section is relevant only if you\u2019re implementing your own transaction management. This problem cannot occur in Django\u2019s default mode and atomic() handles it automatically.", "Inside a transaction, when a call to a PostgreSQL cursor raises an exception (typically IntegrityError), all subsequent SQL in the same transaction will fail with the error \u201ccurrent transaction is aborted, queries ignored until end of transaction block\u201d. While the basic use of save() is unlikely to raise an exception in PostgreSQL, there are more advanced usage patterns which might, such as saving objects with unique fields, saving using the force_insert/force_update flag, or invoking custom SQL.", "There are several ways to recover from this sort of error.", "The first option is to roll back the entire transaction. For example:", "Calling transaction.rollback() rolls back the entire transaction. Any uncommitted database operations will be lost. In this example, the changes made by a.save() would be lost, even though that operation raised no error itself.", "You can use savepoints to control the extent of a rollback. Before performing a database operation that could fail, you can set or update the savepoint; that way, if the operation fails, you can roll back the single offending operation, rather than the entire transaction. For example:", "In this example, a.save() will not be undone in the case where b.save() raises an exception."]}, {"name": "Databases", "path": "ref/databases", "type": "API", "text": ["Django officially supports the following databases:", "There are also a number of database backends provided by third parties.", "Django attempts to support as many features as possible on all database backends. However, not all database backends are alike, and we\u2019ve had to make design decisions on which features to support and which assumptions we can make safely.", "This file describes some of the features that might be relevant to Django usage. It is not intended as a replacement for server-specific documentation or reference manuals.", "Persistent connections avoid the overhead of re-establishing a connection to the database in each request. They\u2019re controlled by the CONN_MAX_AGE parameter which defines the maximum lifetime of a connection. It can be set independently for each database.", "The default value is 0, preserving the historical behavior of closing the database connection at the end of each request. To enable persistent connections, set CONN_MAX_AGE to a positive integer of seconds. For unlimited persistent connections, set it to None.", "Django opens a connection to the database when it first makes a database query. It keeps this connection open and reuses it in subsequent requests. Django closes the connection once it exceeds the maximum age defined by CONN_MAX_AGE or when it isn\u2019t usable any longer.", "In detail, Django automatically opens a connection to the database whenever it needs one and doesn\u2019t have one already \u2014 either because this is the first connection, or because the previous connection was closed.", "At the beginning of each request, Django closes the connection if it has reached its maximum age. If your database terminates idle connections after some time, you should set CONN_MAX_AGE to a lower value, so that Django doesn\u2019t attempt to use a connection that has been terminated by the database server. (This problem may only affect very low traffic sites.)", "At the end of each request, Django closes the connection if it has reached its maximum age or if it is in an unrecoverable error state. If any database errors have occurred while processing the requests, Django checks whether the connection still works, and closes it if it doesn\u2019t. Thus, database errors affect at most one request; if the connection becomes unusable, the next request gets a fresh connection.", "Since each thread maintains its own connection, your database must support at least as many simultaneous connections as you have worker threads.", "Sometimes a database won\u2019t be accessed by the majority of your views, for example because it\u2019s the database of an external system, or thanks to caching. In such cases, you should set CONN_MAX_AGE to a low value or even 0, because it doesn\u2019t make sense to maintain a connection that\u2019s unlikely to be reused. This will help keep the number of simultaneous connections to this database small.", "The development server creates a new thread for each request it handles, negating the effect of persistent connections. Don\u2019t enable them during development.", "When Django establishes a connection to the database, it sets up appropriate parameters, depending on the backend being used. If you enable persistent connections, this setup is no longer repeated every request. If you modify parameters such as the connection\u2019s isolation level or time zone, you should either restore Django\u2019s defaults at the end of each request, force an appropriate value at the beginning of each request, or disable persistent connections.", "Django assumes that all databases use UTF-8 encoding. Using other encodings may result in unexpected behavior such as \u201cvalue too long\u201d errors from your database for data that is valid in Django. See the database specific notes below for information on how to set up your database correctly.", "Django supports PostgreSQL 10 and higher. psycopg2 2.5.4 or higher is required, though the latest release is recommended.", "See HOST for details.", "To connect using a service name from the connection service file and a password from the password file, you must specify them in the OPTIONS part of your database configuration in DATABASES:", "Support for connecting by a service name, and specifying a password file was added.", "Django needs the following parameters for its database connections:", "If these parameters already have the correct values, Django won\u2019t set them for every new connection, which improves performance slightly. You can configure them directly in postgresql.conf or more conveniently per database user with ALTER ROLE.", "Django will work just fine without this optimization, but each new connection will do some additional queries to set these parameters.", "Like PostgreSQL itself, Django defaults to the READ COMMITTED isolation level. If you need a higher isolation level such as REPEATABLE READ or SERIALIZABLE, set it in the OPTIONS part of your database configuration in DATABASES:", "Note", "Under higher isolation levels, your application should be prepared to handle exceptions raised on serialization failures. This option is designed for advanced uses.", "When specifying db_index=True on your model fields, Django typically outputs a single CREATE INDEX statement. However, if the database type for the field is either varchar or text (e.g., used by CharField, FileField, and TextField), then Django will create an additional index that uses an appropriate PostgreSQL operator class for the column. The extra index is necessary to correctly perform lookups that use the LIKE operator in their SQL, as is done with the contains and startswith lookup types.", "If you need to add a PostgreSQL extension (like hstore, postgis, etc.) using a migration, use the CreateExtension operation.", "When using QuerySet.iterator(), Django opens a server-side cursor. By default, PostgreSQL assumes that only the first 10% of the results of cursor queries will be fetched. The query planner spends less time planning the query and starts returning results faster, but this could diminish performance if more than 10% of the results are retrieved. PostgreSQL\u2019s assumptions on the number of rows retrieved for a cursor query is controlled with the cursor_tuple_fraction option.", "Using a connection pooler in transaction pooling mode (e.g. PgBouncer) requires disabling server-side cursors for that connection.", "Server-side cursors are local to a connection and remain open at the end of a transaction when AUTOCOMMIT is True. A subsequent transaction may attempt to fetch more results from a server-side cursor. In transaction pooling mode, there\u2019s no guarantee that subsequent transactions will use the same connection. If a different connection is used, an error is raised when the transaction references the server-side cursor, because server-side cursors are only accessible in the connection in which they were created.", "One solution is to disable server-side cursors for a connection in DATABASES by setting DISABLE_SERVER_SIDE_CURSORS to True.", "To benefit from server-side cursors in transaction pooling mode, you could set up another connection to the database in order to perform queries that use server-side cursors. This connection needs to either be directly to the database or to a connection pooler in session pooling mode.", "Another option is to wrap each QuerySet using server-side cursors in an atomic() block, because it disables autocommit for the duration of the transaction. This way, the server-side cursor will only live for the duration of the transaction.", "Django uses PostgreSQL\u2019s SERIAL data type to store auto-incrementing primary keys. A SERIAL column is populated with values from a sequence that keeps track of the next available value. Manually assigning a value to an auto-incrementing field doesn\u2019t update the field\u2019s sequence, which might later cause a conflict. For example:", "If you need to specify such values, reset the sequence afterward to avoid reusing a value that\u2019s already in the table. The sqlsequencereset management command generates the SQL statements to do that.", "You can use the TEST['TEMPLATE'] setting to specify a template (e.g. 'template0') from which to create a test database.", "You can speed up test execution times by configuring PostgreSQL to be non-durable.", "Warning", "This is dangerous: it will make your database more susceptible to data loss or corruption in the case of a server crash or power loss. Only use this on a development machine where you can easily restore the entire contents of all databases in the cluster.", "Django supports MariaDB 10.2 and higher.", "To use MariaDB, use the MySQL backend, which is shared between the two. See the MySQL notes for more details.", "Django supports MySQL 5.7 and higher.", "Django\u2019s inspectdb feature uses the information_schema database, which contains detailed data on all database schemas.", "Django expects the database to support Unicode (UTF-8 encoding) and delegates to it the task of enforcing transactions and referential integrity. It is important to be aware of the fact that the two latter ones aren\u2019t actually enforced by MySQL when using the MyISAM storage engine, see the next section.", "MySQL has several storage engines. You can change the default storage engine in the server configuration.", "MySQL\u2019s default storage engine is InnoDB. This engine is fully transactional and supports foreign key references. It\u2019s the recommended choice. However, the InnoDB autoincrement counter is lost on a MySQL restart because it does not remember the AUTO_INCREMENT value, instead recreating it as \u201cmax(id)+1\u201d. This may result in an inadvertent reuse of AutoField values.", "The main drawbacks of MyISAM are that it doesn\u2019t support transactions or enforce foreign-key constraints.", "MySQL has a couple drivers that implement the Python Database API described in PEP 249:", "These drivers are thread-safe and provide connection pooling.", "In addition to a DB API driver, Django needs an adapter to access the database drivers from its ORM. Django provides an adapter for mysqlclient while MySQL Connector/Python includes its own.", "Django requires mysqlclient 1.4.0 or later.", "MySQL Connector/Python is available from the download page. The Django adapter is available in versions 1.1.X and later. It may not support the most recent releases of Django.", "If you plan on using Django\u2019s timezone support, use mysql_tzinfo_to_sql to load time zone tables into the MySQL database. This needs to be done just once for your MySQL server, not per database.", "You can create your database using the command-line tools and this SQL:", "This ensures all tables and columns will use UTF-8 by default.", "The collation setting for a column controls the order in which data is sorted as well as what strings compare as equal. You can specify the db_collation parameter to set the collation name of the column for CharField and TextField.", "The collation can also be set on a database-wide level and per-table. This is documented thoroughly in the MySQL documentation. In such cases, you must set the collation by directly manipulating the database settings or tables. Django doesn\u2019t provide an API to change them.", "By default, with a UTF-8 database, MySQL will use the utf8_general_ci collation. This results in all string equality comparisons being done in a case-insensitive manner. That is, \"Fred\" and \"freD\" are considered equal at the database level. If you have a unique constraint on a field, it would be illegal to try to insert both \"aa\" and \"AA\" into the same column, since they compare as equal (and, hence, non-unique) with the default collation. If you want case-sensitive comparisons on a particular column or table, change the column or table to use the utf8_bin collation.", "Please note that according to MySQL Unicode Character Sets, comparisons for the utf8_general_ci collation are faster, but slightly less correct, than comparisons for utf8_unicode_ci. If this is acceptable for your application, you should use utf8_general_ci because it is faster. If this is not acceptable (for example, if you require German dictionary order), use utf8_unicode_ci because it is more accurate.", "Warning", "Model formsets validate unique fields in a case-sensitive manner. Thus when using a case-insensitive collation, a formset with unique field values that differ only by case will pass validation, but upon calling save(), an IntegrityError will be raised.", "Support for setting a database collation for the field was added.", "Refer to the settings documentation.", "Connection settings are used in this order:", "In other words, if you set the name of the database in OPTIONS, this will take precedence over NAME, which would override anything in a MySQL option file.", "Here\u2019s a sample configuration which uses a MySQL option file:", "Several other MySQLdb connection options may be useful, such as ssl, init_command, and sql_mode.", "From MySQL 5.7 onward, the default value of the sql_mode option contains STRICT_TRANS_TABLES. That option escalates warnings into errors when data are truncated upon insertion, so Django highly recommends activating a strict mode for MySQL to prevent data loss (either STRICT_TRANS_TABLES or STRICT_ALL_TABLES).", "If you need to customize the SQL mode, you can set the sql_mode variable like other MySQL options: either in a config file or with the entry 'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\" in the OPTIONS part of your database configuration in DATABASES.", "When running concurrent loads, database transactions from different sessions (say, separate threads handling different requests) may interact with each other. These interactions are affected by each session\u2019s transaction isolation level. You can set a connection\u2019s isolation level with an 'isolation_level' entry in the OPTIONS part of your database configuration in DATABASES. Valid values for this entry are the four standard isolation levels:", "or None to use the server\u2019s configured isolation level. However, Django works best with and defaults to read committed rather than MySQL\u2019s default, repeatable read. Data loss is possible with repeatable read. In particular, you may see cases where get_or_create() will raise an IntegrityError but the object won\u2019t appear in a subsequent get() call.", "When Django generates the schema, it doesn\u2019t specify a storage engine, so tables will be created with whatever default storage engine your database server is configured for. The easiest solution is to set your database server\u2019s default storage engine to the desired engine.", "If you\u2019re using a hosting service and can\u2019t change your server\u2019s default storage engine, you have a couple of options.", "After the tables are created, execute an ALTER TABLE statement to convert a table to a new storage engine (such as InnoDB):", "This can be tedious if you have a lot of tables.", "Another option is to use the init_command option for MySQLdb prior to creating your tables:", "This sets the default storage engine upon connecting to the database. After your tables have been created, you should remove this option as it adds a query that is only needed during table creation to each database connection.", "There are known issues in even the latest versions of MySQL that can cause the case of a table name to be altered when certain SQL statements are executed under certain conditions. It is recommended that you use lowercase table names, if possible, to avoid any problems that might arise from this behavior. Django uses lowercase table names when it auto-generates table names from models, so this is mainly a consideration if you are overriding the table name via the db_table parameter.", "Both the Django ORM and MySQL (when using the InnoDB storage engine) support database savepoints.", "If you use the MyISAM storage engine please be aware of the fact that you will receive database-generated errors if you try to use the savepoint-related methods of the transactions API. The reason for this is that detecting the storage engine of a MySQL database/table is an expensive operation so it was decided it isn\u2019t worth to dynamically convert these methods in no-op\u2019s based in the results of such detection.", "Any fields that are stored with VARCHAR column types may have their max_length restricted to 255 characters if you are using unique=True for the field. This affects CharField, SlugField. See the MySQL documentation for more details.", "MySQL can index only the first N chars of a BLOB or TEXT column. Since TextField doesn\u2019t have a defined length, you can\u2019t mark it as unique=True. MySQL will report: \u201cBLOB/TEXT column \u2018<db_column>\u2019 used in key specification without a key length\u201d.", "MySQL can store fractional seconds, provided that the column definition includes a fractional indication (e.g. DATETIME(6)).", "Django will not upgrade existing columns to include fractional seconds if the database server supports it. If you want to enable them on an existing database, it\u2019s up to you to either manually update the column on the target database, by executing a command like:", "or using a RunSQL operation in a data migration.", "If you are using a legacy database that contains TIMESTAMP columns, you must set USE_TZ = False to avoid data corruption. inspectdb maps these columns to DateTimeField and if you enable timezone support, both MySQL and Django will attempt to convert the values from UTC to local time.", "MySQL and MariaDB do not support some options to the SELECT ... FOR UPDATE statement. If select_for_update() is used with an unsupported option, then a NotSupportedError is raised.", "When using select_for_update() on MySQL, make sure you filter a queryset against at least a set of fields contained in unique constraints or only against fields covered by indexes. Otherwise, an exclusive write lock will be acquired over the full table for the duration of the transaction.", "When performing a query on a string type, but with an integer value, MySQL will coerce the types of all values in the table to an integer before performing the comparison. If your table contains the values 'abc', 'def' and you query for WHERE mycolumn=0, both rows will match. Similarly, WHERE mycolumn=1 will match the value 'abc1'. Therefore, string type fields included in Django will always cast the value to a string before using it in a query.", "If you implement custom model fields that inherit from Field directly, are overriding get_prep_value(), or use RawSQL, extra(), or raw(), you should ensure that you perform appropriate typecasting.", "Django supports SQLite 3.9.0 and later.", "SQLite provides an excellent development alternative for applications that are predominantly read-only or require a smaller installation footprint. As with all database servers, though, there are some differences that are specific to SQLite that you should be aware of.", "For all SQLite versions, there is some slightly counter-intuitive behavior when attempting to match some types of strings. These are triggered when using the iexact or contains filters in Querysets. The behavior splits into two cases:", "1. For substring matching, all matches are done case-insensitively. That is a filter such as filter(name__contains=\"aa\") will match a name of \"Aabb\".", "2. For strings containing characters outside the ASCII range, all exact string matches are performed case-sensitively, even when the case-insensitive options are passed into the query. So the iexact filter will behave exactly the same as the exact filter in these cases.", "Some possible workarounds for this are documented at sqlite.org, but they aren\u2019t utilized by the default SQLite backend in Django, as incorporating them would be fairly difficult to do robustly. Thus, Django exposes the default SQLite behavior and you should be aware of this when doing case-insensitive or substring filtering.", "SQLite has no real decimal internal type. Decimal values are internally converted to the REAL data type (8-byte IEEE floating point number), as explained in the SQLite datatypes documentation, so they don\u2019t support correctly-rounded decimal floating point arithmetic.", "SQLite is meant to be a lightweight database, and thus can\u2019t support a high level of concurrency. OperationalError: database is locked errors indicate that your application is experiencing more concurrency than sqlite can handle in default configuration. This error means that one thread or process has an exclusive lock on the database connection and another thread timed out waiting for the lock the be released.", "Python\u2019s SQLite wrapper has a default timeout value that determines how long the second thread is allowed to wait on the lock before it times out and raises the OperationalError: database\nis locked error.", "If you\u2019re getting this error, you can solve it by:", "Increase the default timeout value by setting the timeout database option:", "This will make SQLite wait a bit longer before throwing \u201cdatabase is locked\u201d errors; it won\u2019t really do anything to solve them.", "SQLite does not support the SELECT ... FOR UPDATE syntax. Calling it will have no effect.", "For most backends, raw queries (Manager.raw() or cursor.execute()) can use the \u201cpyformat\u201d parameter style, where placeholders in the query are given as '%(name)s' and the parameters are passed as a dictionary rather than a list. SQLite does not support this.", "There are special considerations described in Isolation In SQLite when modifying a table while iterating over it using QuerySet.iterator(). If a row is added, changed, or deleted within the loop, then that row may or may not appear, or may appear twice, in subsequent results fetched from the iterator. Your code must handle this.", "To use JSONField on SQLite, you need to enable the JSON1 extension on Python\u2019s sqlite3 library. If the extension is not enabled on your installation, a system error (fields.E180) will be raised.", "To enable the JSON1 extension you can follow the instruction on the wiki page.", "Django supports Oracle Database Server versions 19c and higher. Version 7.0 or higher of the cx_Oracle Python driver is required.", "In order for the python manage.py migrate command to work, your Oracle database user must have privileges to run the following commands:", "To run a project\u2019s test suite, the user usually needs these additional privileges:", "While the RESOURCE role has the required CREATE TABLE, CREATE SEQUENCE, CREATE PROCEDURE, and CREATE TRIGGER privileges, and a user granted RESOURCE WITH ADMIN OPTION can grant RESOURCE, such a user cannot grant the individual privileges (e.g. CREATE TABLE), and thus RESOURCE WITH ADMIN OPTION is not usually sufficient for running tests.", "Some test suites also create views or materialized views; to run these, the user also needs CREATE VIEW WITH ADMIN OPTION and CREATE MATERIALIZED VIEW WITH ADMIN OPTION privileges. In particular, this is needed for Django\u2019s own test suite.", "All of these privileges are included in the DBA role, which is appropriate for use on a private developer\u2019s database.", "The Oracle database backend uses the SYS.DBMS_LOB and SYS.DBMS_RANDOM packages, so your user will require execute permissions on it. It\u2019s normally accessible to all users by default, but in case it is not, you\u2019ll need to grant permissions like so:", "To connect using the service name of your Oracle database, your settings.py file should look something like this:", "In this case, you should leave both HOST and PORT empty. However, if you don\u2019t use a tnsnames.ora file or a similar naming method and want to connect using the SID (\u201cxe\u201d in this example), then fill in both HOST and PORT like so:", "You should either supply both HOST and PORT, or leave both as empty strings. Django will use a different connect descriptor depending on that choice.", "A Full DSN or Easy Connect string can be used in NAME if both HOST and PORT are empty. This format is required when using RAC or pluggable databases without tnsnames.ora, for example.", "Example of an Easy Connect string:", "Example of a full DSN string:", "If you plan to run Django in a multithreaded environment (e.g. Apache using the default MPM module on any modern operating system), then you must set the threaded option of your Oracle database configuration to True:", "Failure to do this may result in crashes and other odd behavior.", "By default, the Oracle backend uses a RETURNING INTO clause to efficiently retrieve the value of an AutoField when inserting new rows. This behavior may result in a DatabaseError in certain unusual setups, such as when inserting into a remote table, or into a view with an INSTEAD OF trigger. The RETURNING INTO clause can be disabled by setting the use_returning_into option of the database configuration to False:", "In this case, the Oracle backend will use a separate SELECT query to retrieve AutoField values.", "Oracle imposes a name length limit of 30 characters. To accommodate this, the backend truncates database identifiers to fit, replacing the final four characters of the truncated name with a repeatable MD5 hash value. Additionally, the backend turns database identifiers to all-uppercase.", "To prevent these transformations (this is usually required only when dealing with legacy databases or accessing tables which belong to other users), use a quoted name as the value for db_table:", "Quoted names can also be used with Django\u2019s other supported database backends; except for Oracle, however, the quotes have no effect.", "When running migrate, an ORA-06552 error may be encountered if certain Oracle keywords are used as the name of a model field or the value of a db_column option. Django quotes all identifiers used in queries to prevent most such problems, but this error can still occur when an Oracle datatype is used as a column name. In particular, take care to avoid using the names date, timestamp, number or float as a field name.", "Django generally prefers to use the empty string ('') rather than NULL, but Oracle treats both identically. To get around this, the Oracle backend ignores an explicit null option on fields that have the empty string as a possible value and generates DDL as if null=True. When fetching from the database, it is assumed that a NULL value in one of these fields really means the empty string, and the data is silently converted to reflect this assumption.", "The Oracle backend stores TextFields as NCLOB columns. Oracle imposes some limitations on the usage of such LOB columns in general:", "Django comes with built-in database backends. You may subclass an existing database backends to modify its behavior, features, or configuration.", "Consider, for example, that you need to change a single database feature. First, you have to create a new directory with a base module in it. For example:", "The base.py module must contain a class named DatabaseWrapper that subclasses an existing engine from the django.db.backends module. Here\u2019s an example of subclassing the PostgreSQL engine to change a feature class allows_group_by_selected_pks_on_model:", "Finally, you must specify a DATABASE-ENGINE in your settings.py file:", "You can see the current list of database engines by looking in django/db/backends.", "In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:", "The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project."]}, {"name": "Date-based mixins", "path": "ref/class-based-views/mixins-date-based", "type": "API", "text": ["Note", "All the date formatting attributes in these mixins use strftime() format characters. Do not try to use the format characters from the now template tag as they are not compatible.", "A mixin that can be used to retrieve and provide parsing information for a year component of a date.", "Methods and Attributes", "The strftime() format to use when parsing the year. By default, this is '%Y'.", "Optional The value for the year, as a string. By default, set to None, which means the year will be determined using other means.", "Returns the strftime() format to use when parsing the year. Returns year_format by default.", "Returns the year for which this view will display data, as a string. Tries the following sources, in order:", "Raises a 404 if no valid year specification can be found.", "Returns a date object containing the first day of the year after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.", "Returns a date object containing the first day of the year before the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.", "A mixin that can be used to retrieve and provide parsing information for a month component of a date.", "Methods and Attributes", "The strftime() format to use when parsing the month. By default, this is '%b'.", "Optional The value for the month, as a string. By default, set to None, which means the month will be determined using other means.", "Returns the strftime() format to use when parsing the month. Returns month_format by default.", "Returns the month for which this view will display data, as a string. Tries the following sources, in order:", "Raises a 404 if no valid month specification can be found.", "Returns a date object containing the first day of the month after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.", "Returns a date object containing the first day of the month before the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.", "A mixin that can be used to retrieve and provide parsing information for a day component of a date.", "Methods and Attributes", "The strftime() format to use when parsing the day. By default, this is '%d'.", "Optional The value for the day, as a string. By default, set to None, which means the day will be determined using other means.", "Returns the strftime() format to use when parsing the day. Returns day_format by default.", "Returns the day for which this view will display data, as a string. Tries the following sources, in order:", "Raises a 404 if no valid day specification can be found.", "Returns a date object containing the next valid day after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.", "Returns a date object containing the previous valid day. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.", "A mixin that can be used to retrieve and provide parsing information for a week component of a date.", "Methods and Attributes", "The strftime() format to use when parsing the week. By default, this is '%U', which means the week starts on Sunday. Set it to '%W' or '%V' (ISO 8601 week) if your week starts on Monday.", "Support for the '%V' week format was added.", "Optional The value for the week, as a string. By default, set to None, which means the week will be determined using other means.", "Returns the strftime() format to use when parsing the week. Returns week_format by default.", "Returns the week for which this view will display data, as a string. Tries the following sources, in order:", "Raises a 404 if no valid week specification can be found.", "Returns a date object containing the first day of the week after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.", "Returns a date object containing the first day of the week before the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future.", "A mixin class providing common behavior for all date-based views.", "Methods and Attributes", "The name of the DateField or DateTimeField in the QuerySet\u2019s model that the date-based archive should use to determine the list of objects to display on the page.", "When time zone support is enabled and date_field is a DateTimeField, dates are assumed to be in the current time zone. Otherwise, the queryset could include objects from the previous or the next day in the end user\u2019s time zone.", "Warning", "In this situation, if you have implemented per-user time zone selection, the same URL may show a different set of objects, depending on the end user\u2019s time zone. To avoid this, you should use a DateField as the date_field attribute.", "A boolean specifying whether to include \u201cfuture\u201d objects on this page, where \u201cfuture\u201d means objects in which the field specified in date_field is greater than the current date/time. By default, this is False.", "Returns the name of the field that contains the date data that this view will operate on. Returns date_field by default.", "Determine whether to include \u201cfuture\u201d objects on this page, where \u201cfuture\u201d means objects in which the field specified in date_field is greater than the current date/time. Returns allow_future by default.", "A base class that provides common behavior for all date-based views. There won\u2019t normally be a reason to instantiate BaseDateListView; instantiate one of the subclasses instead.", "While this view (and its subclasses) are executing, self.object_list will contain the list of objects that the view is operating upon, and self.date_list will contain the list of dates for which data is available.", "Mixins", "Methods and Attributes", "A boolean specifying whether to display the page if no objects are available. If this is True and no objects are available, the view will display an empty page instead of raising a 404.", "This is identical to django.views.generic.list.MultipleObjectMixin.allow_empty, except for the default value, which is False.", "Optional A string defining the aggregation period for date_list. It must be one of 'year' (default), 'month', or 'day'.", "Returns a 3-tuple containing (date_list, object_list, extra_context).", "date_list is the list of dates for which data is available. object_list is the list of objects. extra_context is a dictionary of context data that will be added to any context data provided by the MultipleObjectMixin.", "Returns a queryset, filtered using the query arguments defined by lookup. Enforces any restrictions on the queryset, such as allow_empty and allow_future.", "Returns the aggregation period for date_list. Returns date_list_period by default.", "Returns the list of dates of type date_type for which queryset contains entries. For example, get_date_list(qs, 'year') will return the list of years for which qs has entries. If date_type isn\u2019t provided, the result of get_date_list_period() is used. date_type and ordering are passed to QuerySet.dates()."]}, {"name": "db.backends.base.DatabaseWrapper.execute_wrapper()", "path": "topics/db/instrumentation#django.db.backends.base.DatabaseWrapper.execute_wrapper", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.add_constraint()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_constraint", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.add_field()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_field", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.add_index()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_index", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_table()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_table", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_tablespace()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_tablespace", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_field()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_field", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_index_together()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_index_together", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_unique_together()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_unique_together", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.create_model()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.create_model", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.delete_model()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.delete_model", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.execute()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.execute", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.remove_constraint()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_constraint", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.remove_index()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_index", "type": "django.db.backends", "text": []}, {"name": "db.backends.base.schema.SchemaEditor.connection", "path": "ref/schema-editor#django.db.backends.base.schema.SchemaEditor.connection", "type": "django.db.backends", "text": []}, {"name": "db.backends.signals.connection_created", "path": "ref/signals#django.db.backends.signals.connection_created", "type": "django.db.backends", "text": []}, {"name": "db.connection.creation.create_test_db()", "path": "topics/testing/advanced#django.db.connection.creation.create_test_db", "type": "django.db.connection", "text": ["Creates a new test database and runs migrate against it.", "verbosity has the same behavior as in run_tests().", "autoclobber describes the behavior that will occur if a database with the same name as the test database is discovered:", "serialize determines if Django serializes the database into an in-memory JSON string before running tests (used to restore the database state between tests if you don\u2019t have transactions). You can set this to False to speed up creation time if you don\u2019t have any test classes with serialized_rollback=True.", "If you are using the default test runner, you can control this with the the SERIALIZE entry in the TEST dictionary.", "keepdb determines if the test run should use an existing database, or create a new one. If True, the existing database will be used, or created if not present. If False, a new database will be created, prompting the user to remove the existing one, if present.", "Returns the name of the test database that it created.", "create_test_db() has the side effect of modifying the value of NAME in DATABASES to match the name of the test database."]}, {"name": "db.connection.creation.destroy_test_db()", "path": "topics/testing/advanced#django.db.connection.creation.destroy_test_db", "type": "django.db.connection", "text": ["Destroys the database whose name is the value of NAME in DATABASES, and sets NAME to the value of old_database_name.", "The verbosity argument has the same behavior as for DiscoverRunner.", "If the keepdb argument is True, then the connection to the database will be closed, but the database will not be destroyed."]}, {"name": "db.migrations.Migration.initial", "path": "topics/migrations#django.db.migrations.Migration.initial", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.AddConstraint", "path": "ref/migration-operations#django.db.migrations.operations.AddConstraint", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.AddField", "path": "ref/migration-operations#django.db.migrations.operations.AddField", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.AddIndex", "path": "ref/migration-operations#django.db.migrations.operations.AddIndex", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.AlterField", "path": "ref/migration-operations#django.db.migrations.operations.AlterField", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.AlterIndexTogether", "path": "ref/migration-operations#django.db.migrations.operations.AlterIndexTogether", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.AlterModelManagers", "path": "ref/migration-operations#django.db.migrations.operations.AlterModelManagers", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.AlterModelOptions", "path": "ref/migration-operations#django.db.migrations.operations.AlterModelOptions", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.AlterModelTable", "path": "ref/migration-operations#django.db.migrations.operations.AlterModelTable", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.AlterOrderWithRespectTo", "path": "ref/migration-operations#django.db.migrations.operations.AlterOrderWithRespectTo", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.AlterUniqueTogether", "path": "ref/migration-operations#django.db.migrations.operations.AlterUniqueTogether", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.CreateModel", "path": "ref/migration-operations#django.db.migrations.operations.CreateModel", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.DeleteModel", "path": "ref/migration-operations#django.db.migrations.operations.DeleteModel", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.RemoveConstraint", "path": "ref/migration-operations#django.db.migrations.operations.RemoveConstraint", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.RemoveField", "path": "ref/migration-operations#django.db.migrations.operations.RemoveField", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.RemoveIndex", "path": "ref/migration-operations#django.db.migrations.operations.RemoveIndex", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.RenameField", "path": "ref/migration-operations#django.db.migrations.operations.RenameField", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.RenameModel", "path": "ref/migration-operations#django.db.migrations.operations.RenameModel", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.RunPython", "path": "ref/migration-operations#django.db.migrations.operations.RunPython", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.RunSQL", "path": "ref/migration-operations#django.db.migrations.operations.RunSQL", "type": "django.db.migrations", "text": []}, {"name": "db.migrations.operations.RunSQL.noop", "path": "ref/migration-operations#django.db.migrations.operations.RunSQL.noop", "type": "django.db.migrations", "text": ["Pass the RunSQL.noop attribute to sql or reverse_sql when you want the operation not to do anything in the given direction. This is especially useful in making the operation reversible."]}, {"name": "db.migrations.operations.SeparateDatabaseAndState", "path": "ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState", "type": "django.db.migrations", "text": []}, {"name": "db.models.Aggregate", "path": "ref/models/expressions#django.db.models.Aggregate", "type": "django.db.models", "text": ["A class attribute, as a format string, that describes the SQL that is generated for this aggregate. Defaults to '%(function)s(%(distinct)s%(expressions)s)'.", "A class attribute describing the aggregate function that will be generated. Specifically, the function will be interpolated as the function placeholder within template. Defaults to None.", "Defaults to True since most aggregate functions can be used as the source expression in Window.", "A class attribute determining whether or not this aggregate function allows passing a distinct keyword argument. If set to False (default), TypeError is raised if distinct=True is passed.", "Override empty_result_set_value to None since most aggregate functions result in NULL when applied to an empty result set."]}, {"name": "db.models.Aggregate.allow_distinct", "path": "ref/models/expressions#django.db.models.Aggregate.allow_distinct", "type": "django.db.models", "text": ["A class attribute determining whether or not this aggregate function allows passing a distinct keyword argument. If set to False (default), TypeError is raised if distinct=True is passed."]}, {"name": "db.models.Aggregate.empty_result_set_value", "path": "ref/models/expressions#django.db.models.Aggregate.empty_result_set_value", "type": "django.db.models", "text": ["Override empty_result_set_value to None since most aggregate functions result in NULL when applied to an empty result set."]}, {"name": "db.models.Aggregate.function", "path": "ref/models/expressions#django.db.models.Aggregate.function", "type": "django.db.models", "text": ["A class attribute describing the aggregate function that will be generated. Specifically, the function will be interpolated as the function placeholder within template. Defaults to None."]}, {"name": "db.models.Aggregate.template", "path": "ref/models/expressions#django.db.models.Aggregate.template", "type": "django.db.models", "text": ["A class attribute, as a format string, that describes the SQL that is generated for this aggregate. Defaults to '%(function)s(%(distinct)s%(expressions)s)'."]}, {"name": "db.models.Aggregate.window_compatible", "path": "ref/models/expressions#django.db.models.Aggregate.window_compatible", "type": "django.db.models", "text": ["Defaults to True since most aggregate functions can be used as the source expression in Window."]}, {"name": "db.models.as_sql()", "path": "ref/models/lookups#django.db.models.as_sql", "type": "django.db.models", "text": ["Generates the SQL fragment for the expression. Returns a tuple (sql, params), where sql is the SQL string, and params is the list or tuple of query parameters. The compiler is an SQLCompiler object, which has a compile() method that can be used to compile other expressions. The connection is the connection used to execute the query.", "Calling expression.as_sql() is usually incorrect - instead compiler.compile(expression) should be used. The compiler.compile() method will take care of calling vendor-specific methods of the expression.", "Custom keyword arguments may be defined on this method if it\u2019s likely that as_vendorname() methods or subclasses will need to supply data to override the generation of the SQL string. See Func.as_sql() for example usage."]}, {"name": "db.models.as_vendorname()", "path": "ref/models/lookups#django.db.models.as_vendorname", "type": "django.db.models", "text": ["Works like as_sql() method. When an expression is compiled by compiler.compile(), Django will first try to call as_vendorname(), where vendorname is the vendor name of the backend used for executing the query. The vendorname is one of postgresql, oracle, sqlite, or mysql for Django\u2019s built-in backends."]}, {"name": "db.models.AutoField", "path": "ref/models/fields#django.db.models.AutoField", "type": "django.db.models", "text": []}, {"name": "db.models.Avg", "path": "ref/models/querysets#django.db.models.Avg", "type": "django.db.models", "text": ["Returns the mean value of the given expression, which must be numeric unless you specify a different output_field.", "Has one optional argument:", "If distinct=True, Avg returns the mean value of unique values. This is the SQL equivalent of AVG(DISTINCT <field>). The default value is False."]}, {"name": "db.models.Avg.distinct", "path": "ref/models/querysets#django.db.models.Avg.distinct", "type": "django.db.models", "text": ["If distinct=True, Avg returns the mean value of unique values. This is the SQL equivalent of AVG(DISTINCT <field>). The default value is False."]}, {"name": "db.models.BigAutoField", "path": "ref/models/fields#django.db.models.BigAutoField", "type": "django.db.models", "text": []}, {"name": "db.models.BigIntegerField", "path": "ref/models/fields#django.db.models.BigIntegerField", "type": "django.db.models", "text": []}, {"name": "db.models.BinaryField", "path": "ref/models/fields#django.db.models.BinaryField", "type": "django.db.models", "text": []}, {"name": "db.models.BinaryField.max_length", "path": "ref/models/fields#django.db.models.BinaryField.max_length", "type": "django.db.models", "text": ["The maximum length (in bytes) of the field. The maximum length is enforced in Django\u2019s validation using MaxLengthValidator."]}, {"name": "db.models.BooleanField", "path": "ref/models/fields#django.db.models.BooleanField", "type": "django.db.models", "text": []}, {"name": "db.models.CASCADE", "path": "ref/models/fields#django.db.models.CASCADE", "type": "django.db.models", "text": ["Cascade deletes. Django emulates the behavior of the SQL constraint ON DELETE CASCADE and also deletes the object containing the ForeignKey.", "Model.delete() isn\u2019t called on related models, but the pre_delete and post_delete signals are sent for all deleted objects."]}, {"name": "db.models.CharField", "path": "ref/models/fields#django.db.models.CharField", "type": "django.db.models", "text": []}, {"name": "db.models.CharField.db_collation", "path": "ref/models/fields#django.db.models.CharField.db_collation", "type": "django.db.models", "text": ["Optional. The database collation name of the field.", "Note", "Collation names are not standardized. As such, this will not be portable across multiple database backends.", "Oracle", "Oracle supports collations only when the MAX_STRING_SIZE database initialization parameter is set to EXTENDED."]}, {"name": "db.models.CharField.max_length", "path": "ref/models/fields#django.db.models.CharField.max_length", "type": "django.db.models", "text": ["Required. The maximum length (in characters) of the field. The max_length is enforced at the database level and in Django\u2019s validation using MaxLengthValidator.", "Note", "If you are writing an application that must be portable to multiple database backends, you should be aware that there are restrictions on max_length for some backends. Refer to the database backend notes for details."]}, {"name": "db.models.CheckConstraint", "path": "ref/models/constraints#django.db.models.CheckConstraint", "type": "django.db.models", "text": ["Creates a check constraint in the database."]}, {"name": "db.models.CheckConstraint.check", "path": "ref/models/constraints#django.db.models.CheckConstraint.check", "type": "django.db.models", "text": []}, {"name": "db.models.CheckConstraint.name", "path": "ref/models/constraints#django.db.models.CheckConstraint.name", "type": "django.db.models", "text": []}, {"name": "db.models.Count", "path": "ref/models/querysets#django.db.models.Count", "type": "django.db.models", "text": ["Returns the number of objects that are related through the provided expression.", "Has one optional argument:", "If distinct=True, the count will only include unique instances. This is the SQL equivalent of COUNT(DISTINCT <field>). The default value is False.", "Note", "The default argument is not supported."]}, {"name": "db.models.Count.distinct", "path": "ref/models/querysets#django.db.models.Count.distinct", "type": "django.db.models", "text": ["If distinct=True, the count will only include unique instances. This is the SQL equivalent of COUNT(DISTINCT <field>). The default value is False."]}, {"name": "db.models.CursorWrapper.callproc()", "path": "topics/db/sql#django.db.models.CursorWrapper.callproc", "type": "django.db.models", "text": ["Calls a database stored procedure with the given name. A sequence (params) or dictionary (kparams) of input parameters may be provided. Most databases don\u2019t support kparams. Of Django\u2019s built-in backends, only Oracle supports it.", "For example, given this stored procedure in an Oracle database:", "This will call it:"]}, {"name": "db.models.DateField", "path": "ref/models/fields#django.db.models.DateField", "type": "django.db.models", "text": []}, {"name": "db.models.DateField.auto_now", "path": "ref/models/fields#django.db.models.DateField.auto_now", "type": "django.db.models", "text": ["Automatically set the field to now every time the object is saved. Useful for \u201clast-modified\u201d timestamps. Note that the current date is always used; it\u2019s not just a default value that you can override.", "The field is only automatically updated when calling Model.save(). The field isn\u2019t updated when making updates to other fields in other ways such as QuerySet.update(), though you can specify a custom value for the field in an update like that."]}, {"name": "db.models.DateField.auto_now_add", "path": "ref/models/fields#django.db.models.DateField.auto_now_add", "type": "django.db.models", "text": ["Automatically set the field to now when the object is first created. Useful for creation of timestamps. Note that the current date is always used; it\u2019s not just a default value that you can override. So even if you set a value for this field when creating the object, it will be ignored. If you want to be able to modify this field, set the following instead of auto_now_add=True:"]}, {"name": "db.models.DateTimeField", "path": "ref/models/fields#django.db.models.DateTimeField", "type": "django.db.models", "text": []}, {"name": "db.models.DecimalField", "path": "ref/models/fields#django.db.models.DecimalField", "type": "django.db.models", "text": []}, {"name": "db.models.DecimalField.decimal_places", "path": "ref/models/fields#django.db.models.DecimalField.decimal_places", "type": "django.db.models", "text": ["The number of decimal places to store with the number."]}, {"name": "db.models.DecimalField.max_digits", "path": "ref/models/fields#django.db.models.DecimalField.max_digits", "type": "django.db.models", "text": ["The maximum number of digits allowed in the number. Note that this number must be greater than or equal to decimal_places."]}, {"name": "db.models.DO_NOTHING", "path": "ref/models/fields#django.db.models.DO_NOTHING", "type": "django.db.models", "text": ["Take no action. If your database backend enforces referential integrity, this will cause an IntegrityError unless you manually add an SQL ON DELETE constraint to the database field."]}, {"name": "db.models.DurationField", "path": "ref/models/fields#django.db.models.DurationField", "type": "django.db.models", "text": []}, {"name": "db.models.EmailField", "path": "ref/models/fields#django.db.models.EmailField", "type": "django.db.models", "text": []}, {"name": "db.models.Exists", "path": "ref/models/expressions#django.db.models.Exists", "type": "django.db.models", "text": []}, {"name": "db.models.Expression", "path": "ref/models/expressions#django.db.models.Expression", "type": "django.db.models", "text": ["Tells Django that this expression contains an aggregate and that a GROUP BY clause needs to be added to the query.", "Tells Django that this expression contains a Window expression. It\u2019s used, for example, to disallow window function expressions in queries that modify data.", "Tells Django that this expression can be referenced in QuerySet.filter(). Defaults to True.", "Tells Django that this expression can be used as the source expression in Window. Defaults to False.", "Tells Django which value should be returned when the expression is used to apply a function over an empty result set. Defaults to NotImplemented which forces the expression to be computed on the database.", "Provides the chance to do any pre-processing or validation of the expression before it\u2019s added to the query. resolve_expression() must also be called on any nested expressions. A copy() of self should be returned with any necessary transformations.", "query is the backend query implementation.", "allow_joins is a boolean that allows or denies the use of joins in the query.", "reuse is a set of reusable joins for multi-join scenarios.", "summarize is a boolean that, when True, signals that the query being computed is a terminal aggregate query.", "for_save is a boolean that, when True, signals that the query being executed is performing a create or update.", "Returns an ordered list of inner expressions. For example:", "Takes a list of expressions and stores them such that get_source_expressions() can return them.", "Returns a clone (copy) of self, with any column aliases relabeled. Column aliases are renamed when subqueries are created. relabeled_clone() should also be called on any nested expressions and assigned to the clone.", "change_map is a dictionary mapping old aliases to new aliases.", "Example:", "A hook allowing the expression to coerce value into a more appropriate type.", "expression is the same as self.", "Responsible for returning the list of columns references by this expression. get_group_by_cols() should be called on any nested expressions. F() objects, in particular, hold a reference to a column. The alias parameter will be None unless the expression has been annotated and is used for grouping.", "Returns the expression ready to be sorted in ascending order.", "nulls_first and nulls_last define how null values are sorted. See Using F() to sort null values for example usage.", "Returns the expression ready to be sorted in descending order.", "nulls_first and nulls_last define how null values are sorted. See Using F() to sort null values for example usage.", "Returns self with any modifications required to reverse the sort order within an order_by call. As an example, an expression implementing NULLS LAST would change its value to be NULLS FIRST. Modifications are only required for expressions that implement sort order like OrderBy. This method is called when reverse() is called on a queryset."]}, {"name": "db.models.Expression.asc()", "path": "ref/models/expressions#django.db.models.Expression.asc", "type": "django.db.models", "text": ["Returns the expression ready to be sorted in ascending order.", "nulls_first and nulls_last define how null values are sorted. See Using F() to sort null values for example usage."]}, {"name": "db.models.Expression.contains_aggregate", "path": "ref/models/expressions#django.db.models.Expression.contains_aggregate", "type": "django.db.models", "text": ["Tells Django that this expression contains an aggregate and that a GROUP BY clause needs to be added to the query."]}, {"name": "db.models.Expression.contains_over_clause", "path": "ref/models/expressions#django.db.models.Expression.contains_over_clause", "type": "django.db.models", "text": ["Tells Django that this expression contains a Window expression. It\u2019s used, for example, to disallow window function expressions in queries that modify data."]}, {"name": "db.models.Expression.convert_value()", "path": "ref/models/expressions#django.db.models.Expression.convert_value", "type": "django.db.models", "text": ["A hook allowing the expression to coerce value into a more appropriate type.", "expression is the same as self."]}, {"name": "db.models.Expression.desc()", "path": "ref/models/expressions#django.db.models.Expression.desc", "type": "django.db.models", "text": ["Returns the expression ready to be sorted in descending order.", "nulls_first and nulls_last define how null values are sorted. See Using F() to sort null values for example usage."]}, {"name": "db.models.Expression.empty_result_set_value", "path": "ref/models/expressions#django.db.models.Expression.empty_result_set_value", "type": "django.db.models", "text": ["Tells Django which value should be returned when the expression is used to apply a function over an empty result set. Defaults to NotImplemented which forces the expression to be computed on the database."]}, {"name": "db.models.Expression.filterable", "path": "ref/models/expressions#django.db.models.Expression.filterable", "type": "django.db.models", "text": ["Tells Django that this expression can be referenced in QuerySet.filter(). Defaults to True."]}, {"name": "db.models.Expression.get_group_by_cols()", "path": "ref/models/expressions#django.db.models.Expression.get_group_by_cols", "type": "django.db.models", "text": ["Responsible for returning the list of columns references by this expression. get_group_by_cols() should be called on any nested expressions. F() objects, in particular, hold a reference to a column. The alias parameter will be None unless the expression has been annotated and is used for grouping."]}, {"name": "db.models.Expression.get_source_expressions()", "path": "ref/models/expressions#django.db.models.Expression.get_source_expressions", "type": "django.db.models", "text": ["Returns an ordered list of inner expressions. For example:"]}, {"name": "db.models.Expression.relabeled_clone()", "path": "ref/models/expressions#django.db.models.Expression.relabeled_clone", "type": "django.db.models", "text": ["Returns a clone (copy) of self, with any column aliases relabeled. Column aliases are renamed when subqueries are created. relabeled_clone() should also be called on any nested expressions and assigned to the clone.", "change_map is a dictionary mapping old aliases to new aliases.", "Example:"]}, {"name": "db.models.Expression.resolve_expression()", "path": "ref/models/expressions#django.db.models.Expression.resolve_expression", "type": "django.db.models", "text": ["Provides the chance to do any pre-processing or validation of the expression before it\u2019s added to the query. resolve_expression() must also be called on any nested expressions. A copy() of self should be returned with any necessary transformations.", "query is the backend query implementation.", "allow_joins is a boolean that allows or denies the use of joins in the query.", "reuse is a set of reusable joins for multi-join scenarios.", "summarize is a boolean that, when True, signals that the query being computed is a terminal aggregate query.", "for_save is a boolean that, when True, signals that the query being executed is performing a create or update."]}, {"name": "db.models.Expression.reverse_ordering()", "path": "ref/models/expressions#django.db.models.Expression.reverse_ordering", "type": "django.db.models", "text": ["Returns self with any modifications required to reverse the sort order within an order_by call. As an example, an expression implementing NULLS LAST would change its value to be NULLS FIRST. Modifications are only required for expressions that implement sort order like OrderBy. This method is called when reverse() is called on a queryset."]}, {"name": "db.models.Expression.set_source_expressions()", "path": "ref/models/expressions#django.db.models.Expression.set_source_expressions", "type": "django.db.models", "text": ["Takes a list of expressions and stores them such that get_source_expressions() can return them."]}, {"name": "db.models.Expression.window_compatible", "path": "ref/models/expressions#django.db.models.Expression.window_compatible", "type": "django.db.models", "text": ["Tells Django that this expression can be used as the source expression in Window. Defaults to False."]}, {"name": "db.models.expressions.Case", "path": "ref/models/conditional-expressions#django.db.models.expressions.Case", "type": "django.db.models", "text": []}, {"name": "db.models.expressions.RawSQL", "path": "ref/models/expressions#django.db.models.expressions.RawSQL", "type": "django.db.models", "text": []}, {"name": "db.models.expressions.RowRange", "path": "ref/models/expressions#django.db.models.expressions.RowRange", "type": "django.db.models", "text": ["This attribute is set to 'ROWS'."]}, {"name": "db.models.expressions.RowRange.frame_type", "path": "ref/models/expressions#django.db.models.expressions.RowRange.frame_type", "type": "django.db.models", "text": ["This attribute is set to 'ROWS'."]}, {"name": "db.models.expressions.ValueRange", "path": "ref/models/expressions#django.db.models.expressions.ValueRange", "type": "django.db.models", "text": ["This attribute is set to 'RANGE'.", "PostgreSQL has limited support for ValueRange and only supports use of the standard start and end points, such as CURRENT ROW and UNBOUNDED\nFOLLOWING."]}, {"name": "db.models.expressions.ValueRange.frame_type", "path": "ref/models/expressions#django.db.models.expressions.ValueRange.frame_type", "type": "django.db.models", "text": ["This attribute is set to 'RANGE'."]}, {"name": "db.models.expressions.When", "path": "ref/models/conditional-expressions#django.db.models.expressions.When", "type": "django.db.models", "text": []}, {"name": "db.models.expressions.Window", "path": "ref/models/expressions#django.db.models.expressions.Window", "type": "django.db.models", "text": ["Defaults to False. The SQL standard disallows referencing window functions in the WHERE clause and Django raises an exception when constructing a QuerySet that would do that.", "Defaults to %(expression)s OVER (%(window)s)'. If only the expression argument is provided, the window clause will be blank."]}, {"name": "db.models.expressions.Window.filterable", "path": "ref/models/expressions#django.db.models.expressions.Window.filterable", "type": "django.db.models", "text": ["Defaults to False. The SQL standard disallows referencing window functions in the WHERE clause and Django raises an exception when constructing a QuerySet that would do that."]}, {"name": "db.models.expressions.Window.template", "path": "ref/models/expressions#django.db.models.expressions.Window.template", "type": "django.db.models", "text": ["Defaults to %(expression)s OVER (%(window)s)'. If only the expression argument is provided, the window clause will be blank."]}, {"name": "db.models.ExpressionWrapper", "path": "ref/models/expressions#django.db.models.ExpressionWrapper", "type": "django.db.models", "text": []}, {"name": "db.models.F", "path": "ref/models/expressions#django.db.models.F", "type": "django.db.models", "text": []}, {"name": "db.models.Field", "path": "ref/models/fields#django.db.models.Field", "type": "django.db.models", "text": ["Field is an abstract class that represents a database table column. Django uses fields to create the database table (db_type()), to map Python types to database (get_prep_value()) and vice-versa (from_db_value()).", "A field is thus a fundamental piece in different Django APIs, notably, models and querysets.", "In models, a field is instantiated as a class attribute and represents a particular table column, see Models. It has attributes such as null and unique, and methods that Django uses to map the field value to database-specific values.", "A Field is a subclass of RegisterLookupMixin and thus both Transform and Lookup can be registered on it to be used in QuerySets (e.g. field_name__exact=\"foo\"). All built-in lookups are registered by default.", "All of Django\u2019s built-in fields, such as CharField, are particular implementations of Field. If you need a custom field, you can either subclass any of the built-in fields or write a Field from scratch. In either case, see How to create custom model fields.", "A verbose description of the field, e.g. for the django.contrib.admindocs application.", "The description can be of the form:", "where the arguments are interpolated from the field\u2019s __dict__.", "A class implementing the descriptor protocol that is instantiated and assigned to the model instance attribute. The constructor must accept a single argument, the Field instance. Overriding this class attribute allows for customizing the get and set behavior.", "To map a Field to a database-specific type, Django exposes several methods:", "Returns a string naming this field for backend specific purposes. By default, it returns the class name.", "See Emulating built-in field types for usage in custom fields.", "Returns the database column data type for the Field, taking into account the connection.", "See Custom database types for usage in custom fields.", "Returns the database column data type for fields such as ForeignKey and OneToOneField that point to the Field, taking into account the connection.", "See Custom database types for usage in custom fields.", "There are three main situations where Django needs to interact with the database backend and fields:", "When querying, get_db_prep_value() and get_prep_value() are used:", "value is the current value of the model\u2019s attribute, and the method should return data in a format that has been prepared for use as a parameter in a query.", "See Converting Python objects to query values for usage.", "Converts value to a backend-specific value. By default it returns value if prepared=True and get_prep_value() if is False.", "See Converting query values to database values for usage.", "When loading data, from_db_value() is used:", "Converts a value as returned by the database to a Python object. It is the reverse of get_prep_value().", "This method is not used for most built-in fields as the database backend already returns the correct Python type, or the backend itself does the conversion.", "expression is the same as self.", "See Converting values to Python objects for usage.", "Note", "For performance reasons, from_db_value is not implemented as a no-op on fields which do not require it (all Django fields). Consequently you may not call super in your definition.", "When saving, pre_save() and get_db_prep_save() are used:", "Same as the get_db_prep_value(), but called when the field value must be saved to the database. By default returns get_db_prep_value().", "Method called prior to get_db_prep_save() to prepare the value before being saved (e.g. for DateField.auto_now).", "model_instance is the instance this field belongs to and add is whether the instance is being saved to the database for the first time.", "It should return the value of the appropriate attribute from model_instance for this field. The attribute name is in self.attname (this is set up by Field).", "See Preprocessing values before saving for usage.", "Fields often receive their values as a different type, either from serialization or from forms.", "Converts the value into the correct Python object. It acts as the reverse of value_to_string(), and is also called in clean().", "See Converting values to Python objects for usage.", "Besides saving to the database, the field also needs to know how to serialize its value:", "Returns the field\u2019s value for the given model instance.", "This method is often used by value_to_string().", "Converts obj to a string. Used to serialize the value of the field.", "See Converting field data for serialization for usage.", "When using model forms, the Field needs to know which form field it should be represented by:", "Returns the default django.forms.Field of this field for ModelForm.", "By default, if both form_class and choices_form_class are None, it uses CharField. If the field has choices and choices_form_class isn\u2019t specified, it uses TypedChoiceField.", "See Specifying the form field for a model field for usage.", "Returns a 4-tuple with enough information to recreate the field:", "This method must be added to fields prior to 1.7 to migrate its data using Migrations."]}, {"name": "db.models.Field.auto_created", "path": "ref/models/fields#django.db.models.Field.auto_created", "type": "django.db.models", "text": ["Boolean flag that indicates if the field was automatically created, such as the OneToOneField used by model inheritance."]}, {"name": "db.models.Field.blank", "path": "ref/models/fields#django.db.models.Field.blank", "type": "django.db.models", "text": []}, {"name": "db.models.Field.choices", "path": "ref/models/fields#django.db.models.Field.choices", "type": "django.db.models", "text": []}, {"name": "db.models.Field.concrete", "path": "ref/models/fields#django.db.models.Field.concrete", "type": "django.db.models", "text": ["Boolean flag that indicates if the field has a database column associated with it."]}, {"name": "db.models.Field.db_column", "path": "ref/models/fields#django.db.models.Field.db_column", "type": "django.db.models", "text": []}, {"name": "db.models.Field.db_index", "path": "ref/models/fields#django.db.models.Field.db_index", "type": "django.db.models", "text": []}, {"name": "db.models.Field.db_tablespace", "path": "ref/models/fields#django.db.models.Field.db_tablespace", "type": "django.db.models", "text": []}, {"name": "db.models.Field.db_type()", "path": "ref/models/fields#django.db.models.Field.db_type", "type": "django.db.models", "text": ["Returns the database column data type for the Field, taking into account the connection.", "See Custom database types for usage in custom fields."]}, {"name": "db.models.Field.deconstruct()", "path": "ref/models/fields#django.db.models.Field.deconstruct", "type": "django.db.models", "text": ["Returns a 4-tuple with enough information to recreate the field:", "This method must be added to fields prior to 1.7 to migrate its data using Migrations."]}, {"name": "db.models.Field.default", "path": "ref/models/fields#django.db.models.Field.default", "type": "django.db.models", "text": []}, {"name": "db.models.Field.description", "path": "ref/models/fields#django.db.models.Field.description", "type": "django.db.models", "text": ["A verbose description of the field, e.g. for the django.contrib.admindocs application.", "The description can be of the form:", "where the arguments are interpolated from the field\u2019s __dict__."]}, {"name": "db.models.Field.descriptor_class", "path": "ref/models/fields#django.db.models.Field.descriptor_class", "type": "django.db.models", "text": ["A class implementing the descriptor protocol that is instantiated and assigned to the model instance attribute. The constructor must accept a single argument, the Field instance. Overriding this class attribute allows for customizing the get and set behavior."]}, {"name": "db.models.Field.editable", "path": "ref/models/fields#django.db.models.Field.editable", "type": "django.db.models", "text": []}, {"name": "db.models.Field.error_messages", "path": "ref/models/fields#django.db.models.Field.error_messages", "type": "django.db.models", "text": []}, {"name": "db.models.Field.formfield()", "path": "ref/models/fields#django.db.models.Field.formfield", "type": "django.db.models", "text": ["Returns the default django.forms.Field of this field for ModelForm.", "By default, if both form_class and choices_form_class are None, it uses CharField. If the field has choices and choices_form_class isn\u2019t specified, it uses TypedChoiceField.", "See Specifying the form field for a model field for usage."]}, {"name": "db.models.Field.from_db_value()", "path": "ref/models/fields#django.db.models.Field.from_db_value", "type": "django.db.models", "text": ["Converts a value as returned by the database to a Python object. It is the reverse of get_prep_value().", "This method is not used for most built-in fields as the database backend already returns the correct Python type, or the backend itself does the conversion.", "expression is the same as self.", "See Converting values to Python objects for usage.", "Note", "For performance reasons, from_db_value is not implemented as a no-op on fields which do not require it (all Django fields). Consequently you may not call super in your definition."]}, {"name": "db.models.Field.get_db_prep_save()", "path": "ref/models/fields#django.db.models.Field.get_db_prep_save", "type": "django.db.models", "text": ["Same as the get_db_prep_value(), but called when the field value must be saved to the database. By default returns get_db_prep_value()."]}, {"name": "db.models.Field.get_db_prep_value()", "path": "ref/models/fields#django.db.models.Field.get_db_prep_value", "type": "django.db.models", "text": ["Converts value to a backend-specific value. By default it returns value if prepared=True and get_prep_value() if is False.", "See Converting query values to database values for usage."]}, {"name": "db.models.Field.get_internal_type()", "path": "ref/models/fields#django.db.models.Field.get_internal_type", "type": "django.db.models", "text": ["Returns a string naming this field for backend specific purposes. By default, it returns the class name.", "See Emulating built-in field types for usage in custom fields."]}, {"name": "db.models.Field.get_prep_value()", "path": "ref/models/fields#django.db.models.Field.get_prep_value", "type": "django.db.models", "text": ["value is the current value of the model\u2019s attribute, and the method should return data in a format that has been prepared for use as a parameter in a query.", "See Converting Python objects to query values for usage."]}, {"name": "db.models.Field.help_text", "path": "ref/models/fields#django.db.models.Field.help_text", "type": "django.db.models", "text": []}, {"name": "db.models.Field.hidden", "path": "ref/models/fields#django.db.models.Field.hidden", "type": "django.db.models", "text": ["Boolean flag that indicates if a field is used to back another non-hidden field\u2019s functionality (e.g. the content_type and object_id fields that make up a GenericForeignKey). The hidden flag is used to distinguish what constitutes the public subset of fields on the model from all the fields on the model.", "Note", "Options.get_fields() excludes hidden fields by default. Pass in include_hidden=True to return hidden fields in the results."]}, {"name": "db.models.Field.is_relation", "path": "ref/models/fields#django.db.models.Field.is_relation", "type": "django.db.models", "text": ["Boolean flag that indicates if a field contains references to one or more other models for its functionality (e.g. ForeignKey, ManyToManyField, OneToOneField, etc.)."]}, {"name": "db.models.Field.many_to_many", "path": "ref/models/fields#django.db.models.Field.many_to_many", "type": "django.db.models", "text": ["Boolean flag that is True if the field has a many-to-many relation; False otherwise. The only field included with Django where this is True is ManyToManyField."]}, {"name": "db.models.Field.many_to_one", "path": "ref/models/fields#django.db.models.Field.many_to_one", "type": "django.db.models", "text": ["Boolean flag that is True if the field has a many-to-one relation, such as a ForeignKey; False otherwise."]}, {"name": "db.models.Field.model", "path": "ref/models/fields#django.db.models.Field.model", "type": "django.db.models", "text": ["Returns the model on which the field is defined. If a field is defined on a superclass of a model, model will refer to the superclass, not the class of the instance."]}, {"name": "db.models.Field.null", "path": "ref/models/fields#django.db.models.Field.null", "type": "django.db.models", "text": []}, {"name": "db.models.Field.one_to_many", "path": "ref/models/fields#django.db.models.Field.one_to_many", "type": "django.db.models", "text": ["Boolean flag that is True if the field has a one-to-many relation, such as a GenericRelation or the reverse of a ForeignKey; False otherwise."]}, {"name": "db.models.Field.one_to_one", "path": "ref/models/fields#django.db.models.Field.one_to_one", "type": "django.db.models", "text": ["Boolean flag that is True if the field has a one-to-one relation, such as a OneToOneField; False otherwise."]}, {"name": "db.models.Field.pre_save()", "path": "ref/models/fields#django.db.models.Field.pre_save", "type": "django.db.models", "text": ["Method called prior to get_db_prep_save() to prepare the value before being saved (e.g. for DateField.auto_now).", "model_instance is the instance this field belongs to and add is whether the instance is being saved to the database for the first time.", "It should return the value of the appropriate attribute from model_instance for this field. The attribute name is in self.attname (this is set up by Field).", "See Preprocessing values before saving for usage."]}, {"name": "db.models.Field.primary_key", "path": "ref/models/fields#django.db.models.Field.primary_key", "type": "django.db.models", "text": []}, {"name": "db.models.Field.rel_db_type()", "path": "ref/models/fields#django.db.models.Field.rel_db_type", "type": "django.db.models", "text": ["Returns the database column data type for fields such as ForeignKey and OneToOneField that point to the Field, taking into account the connection.", "See Custom database types for usage in custom fields."]}, {"name": "db.models.Field.related_model", "path": "ref/models/fields#django.db.models.Field.related_model", "type": "django.db.models", "text": ["Points to the model the field relates to. For example, Author in ForeignKey(Author, on_delete=models.CASCADE). The related_model for a GenericForeignKey is always None."]}, {"name": "db.models.Field.to_python()", "path": "ref/models/fields#django.db.models.Field.to_python", "type": "django.db.models", "text": ["Converts the value into the correct Python object. It acts as the reverse of value_to_string(), and is also called in clean().", "See Converting values to Python objects for usage."]}, {"name": "db.models.Field.unique", "path": "ref/models/fields#django.db.models.Field.unique", "type": "django.db.models", "text": []}, {"name": "db.models.Field.unique_for_date", "path": "ref/models/fields#django.db.models.Field.unique_for_date", "type": "django.db.models", "text": []}, {"name": "db.models.Field.unique_for_month", "path": "ref/models/fields#django.db.models.Field.unique_for_month", "type": "django.db.models", "text": []}, {"name": "db.models.Field.unique_for_year", "path": "ref/models/fields#django.db.models.Field.unique_for_year", "type": "django.db.models", "text": []}, {"name": "db.models.Field.validators", "path": "ref/models/fields#django.db.models.Field.validators", "type": "django.db.models", "text": []}, {"name": "db.models.Field.value_from_object()", "path": "ref/models/fields#django.db.models.Field.value_from_object", "type": "django.db.models", "text": ["Returns the field\u2019s value for the given model instance.", "This method is often used by value_to_string()."]}, {"name": "db.models.Field.value_to_string()", "path": "ref/models/fields#django.db.models.Field.value_to_string", "type": "django.db.models", "text": ["Converts obj to a string. Used to serialize the value of the field.", "See Converting field data for serialization for usage."]}, {"name": "db.models.Field.verbose_name", "path": "ref/models/fields#django.db.models.Field.verbose_name", "type": "django.db.models", "text": []}, {"name": "db.models.fields.files.FieldFile", "path": "ref/models/fields#django.db.models.fields.files.FieldFile", "type": "django.db.models", "text": []}, {"name": "db.models.fields.files.FieldFile.close()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.close", "type": "django.db.models", "text": []}, {"name": "db.models.fields.files.FieldFile.delete()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.delete", "type": "django.db.models", "text": []}, {"name": "db.models.fields.files.FieldFile.name", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.name", "type": "django.db.models", "text": []}, {"name": "db.models.fields.files.FieldFile.open()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.open", "type": "django.db.models", "text": []}, {"name": "db.models.fields.files.FieldFile.path", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.path", "type": "django.db.models", "text": []}, {"name": "db.models.fields.files.FieldFile.save()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.save", "type": "django.db.models", "text": []}, {"name": "db.models.fields.files.FieldFile.size", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.size", "type": "django.db.models", "text": []}, {"name": "db.models.fields.files.FieldFile.url", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.url", "type": "django.db.models", "text": []}, {"name": "db.models.fields.related.RelatedManager", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager", "type": "django.db.models", "text": ["A \u201crelated manager\u201d is a manager used in a one-to-many or many-to-many related context. This happens in two cases:", "The \u201cother side\u201d of a ForeignKey relation. That is:", "In the above example, the methods below will be available on the manager blog.entry_set.", "Both sides of a ManyToManyField relation:", "In this example, the methods below will be available both on topping.pizza_set and on pizza.toppings.", "Adds the specified model objects to the related object set.", "Example:", "In the example above, in the case of a ForeignKey relationship, QuerySet.update() is used to perform the update. This requires the objects to already be saved.", "You can use the bulk=False argument to instead have the related manager perform the update by calling e.save().", "Using add() with a many-to-many relationship, however, will not call any save() methods (the bulk argument doesn\u2019t exist), but rather create the relationships using QuerySet.bulk_create(). If you need to execute some custom logic when a relationship is created, listen to the m2m_changed signal, which will trigger pre_add and post_add actions.", "Using add() on a relation that already exists won\u2019t duplicate the relation, but it will still trigger signals.", "For many-to-many relationships add() accepts either model instances or field values, normally primary keys, as the *objs argument.", "Use the through_defaults argument to specify values for the new intermediate model instance(s), if needed. You can use callables as values in the through_defaults dictionary and they will be evaluated once before creating any intermediate instance(s).", "Creates a new object, saves it and puts it in the related object set. Returns the newly created object:", "This is equivalent to (but simpler than):", "Note that there\u2019s no need to specify the keyword argument of the model that defines the relationship. In the above example, we don\u2019t pass the parameter blog to create(). Django figures out that the new Entry object\u2019s blog field should be set to b.", "Use the through_defaults argument to specify values for the new intermediate model instance, if needed. You can use callables as values in the through_defaults dictionary.", "Removes the specified model objects from the related object set:", "Similar to add(), e.save() is called in the example above to perform the update. Using remove() with a many-to-many relationship, however, will delete the relationships using QuerySet.delete() which means no model save() methods are called; listen to the m2m_changed signal if you wish to execute custom code when a relationship is deleted.", "For many-to-many relationships remove() accepts either model instances or field values, normally primary keys, as the *objs argument.", "For ForeignKey objects, this method only exists if null=True. If the related field can\u2019t be set to None (NULL), then an object can\u2019t be removed from a relation without being added to another. In the above example, removing e from b.entry_set() is equivalent to doing e.blog = None, and because the blog ForeignKey doesn\u2019t have null=True, this is invalid.", "For ForeignKey objects, this method accepts a bulk argument to control how to perform the operation. If True (the default), QuerySet.update() is used. If bulk=False, the save() method of each individual model instance is called instead. This triggers the pre_save and post_save signals and comes at the expense of performance.", "For many-to-many relationships, the bulk keyword argument doesn\u2019t exist.", "Removes all objects from the related object set:", "Note this doesn\u2019t delete the related objects \u2013 it just disassociates them.", "Just like remove(), clear() is only available on ForeignKeys where null=True and it also accepts the bulk keyword argument.", "For many-to-many relationships, the bulk keyword argument doesn\u2019t exist.", "Replace the set of related objects:", "This method accepts a clear argument to control how to perform the operation. If False (the default), the elements missing from the new set are removed using remove() and only the new ones are added. If clear=True, the clear() method is called instead and the whole set is added at once.", "For ForeignKey objects, the bulk argument is passed on to add() and remove().", "For many-to-many relationships, the bulk keyword argument doesn\u2019t exist.", "Note that since set() is a compound operation, it is subject to race conditions. For instance, new objects may be added to the database in between the call to clear() and the call to add().", "For many-to-many relationships set() accepts a list of either model instances or field values, normally primary keys, as the objs argument.", "Use the through_defaults argument to specify values for the new intermediate model instance(s), if needed. You can use callables as values in the through_defaults dictionary and they will be evaluated once before creating any intermediate instance(s).", "Note", "Note that add(), create(), remove(), clear(), and set() all apply database changes immediately for all types of related fields. In other words, there is no need to call save() on either end of the relationship.", "If you use prefetch_related(), the add(), remove(), clear(), and set() methods clear the prefetched cache."]}, {"name": "db.models.fields.related.RelatedManager.add()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.add", "type": "django.db.models", "text": ["Adds the specified model objects to the related object set.", "Example:", "In the example above, in the case of a ForeignKey relationship, QuerySet.update() is used to perform the update. This requires the objects to already be saved.", "You can use the bulk=False argument to instead have the related manager perform the update by calling e.save().", "Using add() with a many-to-many relationship, however, will not call any save() methods (the bulk argument doesn\u2019t exist), but rather create the relationships using QuerySet.bulk_create(). If you need to execute some custom logic when a relationship is created, listen to the m2m_changed signal, which will trigger pre_add and post_add actions.", "Using add() on a relation that already exists won\u2019t duplicate the relation, but it will still trigger signals.", "For many-to-many relationships add() accepts either model instances or field values, normally primary keys, as the *objs argument.", "Use the through_defaults argument to specify values for the new intermediate model instance(s), if needed. You can use callables as values in the through_defaults dictionary and they will be evaluated once before creating any intermediate instance(s)."]}, {"name": "db.models.fields.related.RelatedManager.clear()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.clear", "type": "django.db.models", "text": ["Removes all objects from the related object set:", "Note this doesn\u2019t delete the related objects \u2013 it just disassociates them.", "Just like remove(), clear() is only available on ForeignKeys where null=True and it also accepts the bulk keyword argument.", "For many-to-many relationships, the bulk keyword argument doesn\u2019t exist."]}, {"name": "db.models.fields.related.RelatedManager.create()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.create", "type": "django.db.models", "text": ["Creates a new object, saves it and puts it in the related object set. Returns the newly created object:", "This is equivalent to (but simpler than):", "Note that there\u2019s no need to specify the keyword argument of the model that defines the relationship. In the above example, we don\u2019t pass the parameter blog to create(). Django figures out that the new Entry object\u2019s blog field should be set to b.", "Use the through_defaults argument to specify values for the new intermediate model instance, if needed. You can use callables as values in the through_defaults dictionary."]}, {"name": "db.models.fields.related.RelatedManager.remove()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.remove", "type": "django.db.models", "text": ["Removes the specified model objects from the related object set:", "Similar to add(), e.save() is called in the example above to perform the update. Using remove() with a many-to-many relationship, however, will delete the relationships using QuerySet.delete() which means no model save() methods are called; listen to the m2m_changed signal if you wish to execute custom code when a relationship is deleted.", "For many-to-many relationships remove() accepts either model instances or field values, normally primary keys, as the *objs argument.", "For ForeignKey objects, this method only exists if null=True. If the related field can\u2019t be set to None (NULL), then an object can\u2019t be removed from a relation without being added to another. In the above example, removing e from b.entry_set() is equivalent to doing e.blog = None, and because the blog ForeignKey doesn\u2019t have null=True, this is invalid.", "For ForeignKey objects, this method accepts a bulk argument to control how to perform the operation. If True (the default), QuerySet.update() is used. If bulk=False, the save() method of each individual model instance is called instead. This triggers the pre_save and post_save signals and comes at the expense of performance.", "For many-to-many relationships, the bulk keyword argument doesn\u2019t exist."]}, {"name": "db.models.fields.related.RelatedManager.set()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.set", "type": "django.db.models", "text": ["Replace the set of related objects:", "This method accepts a clear argument to control how to perform the operation. If False (the default), the elements missing from the new set are removed using remove() and only the new ones are added. If clear=True, the clear() method is called instead and the whole set is added at once.", "For ForeignKey objects, the bulk argument is passed on to add() and remove().", "For many-to-many relationships, the bulk keyword argument doesn\u2019t exist.", "Note that since set() is a compound operation, it is subject to race conditions. For instance, new objects may be added to the database in between the call to clear() and the call to add().", "For many-to-many relationships set() accepts a list of either model instances or field values, normally primary keys, as the objs argument.", "Use the through_defaults argument to specify values for the new intermediate model instance(s), if needed. You can use callables as values in the through_defaults dictionary and they will be evaluated once before creating any intermediate instance(s)."]}, {"name": "db.models.FileField", "path": "ref/models/fields#django.db.models.FileField", "type": "django.db.models", "text": []}, {"name": "db.models.FileField.storage", "path": "ref/models/fields#django.db.models.FileField.storage", "type": "django.db.models", "text": ["A storage object, or a callable which returns a storage object. This handles the storage and retrieval of your files. See Managing files for details on how to provide this object."]}, {"name": "db.models.FileField.upload_to", "path": "ref/models/fields#django.db.models.FileField.upload_to", "type": "django.db.models", "text": ["This attribute provides a way of setting the upload directory and file name, and can be set in two ways. In both cases, the value is passed to the Storage.save() method.", "If you specify a string value or a Path, it may contain strftime() formatting, which will be replaced by the date/time of the file upload (so that uploaded files don\u2019t fill up the given directory). For example:", "If you are using the default FileSystemStorage, the string value will be appended to your MEDIA_ROOT path to form the location on the local filesystem where uploaded files will be stored. If you are using a different storage, check that storage\u2019s documentation to see how it handles upload_to.", "upload_to may also be a callable, such as a function. This will be called to obtain the upload path, including the filename. This callable must accept two arguments and return a Unix-style path (with forward slashes) to be passed along to the storage system. The two arguments are:", "An instance of the model where the FileField is defined. More specifically, this is the particular instance where the current file is being attached.", "In most cases, this object will not have been saved to the database yet, so if it uses the default AutoField, it might not yet have a value for its primary key field.", "For example:"]}, {"name": "db.models.FilePathField", "path": "ref/models/fields#django.db.models.FilePathField", "type": "django.db.models", "text": []}, {"name": "db.models.FilePathField.allow_files", "path": "ref/models/fields#django.db.models.FilePathField.allow_files", "type": "django.db.models", "text": ["Optional. Either True or False. Default is True. Specifies whether files in the specified location should be included. Either this or allow_folders must be True."]}, {"name": "db.models.FilePathField.allow_folders", "path": "ref/models/fields#django.db.models.FilePathField.allow_folders", "type": "django.db.models", "text": ["Optional. Either True or False. Default is False. Specifies whether folders in the specified location should be included. Either this or allow_files must be True."]}, {"name": "db.models.FilePathField.match", "path": "ref/models/fields#django.db.models.FilePathField.match", "type": "django.db.models", "text": ["Optional. A regular expression, as a string, that FilePathField will use to filter filenames. Note that the regex will be applied to the base filename, not the full path. Example: \"foo.*\\.txt$\", which will match a file called foo23.txt but not bar.txt or foo23.png."]}, {"name": "db.models.FilePathField.path", "path": "ref/models/fields#django.db.models.FilePathField.path", "type": "django.db.models", "text": ["Required. The absolute filesystem path to a directory from which this FilePathField should get its choices. Example: \"/home/images\".", "path may also be a callable, such as a function to dynamically set the path at runtime. Example:"]}, {"name": "db.models.FilePathField.recursive", "path": "ref/models/fields#django.db.models.FilePathField.recursive", "type": "django.db.models", "text": ["Optional. Either True or False. Default is False. Specifies whether all subdirectories of path should be included"]}, {"name": "db.models.FilteredRelation", "path": "ref/models/querysets#django.db.models.FilteredRelation", "type": "django.db.models", "text": ["The name of the field on which you\u2019d like to filter the relation.", "A Q object to control the filtering."]}, {"name": "db.models.FilteredRelation.condition", "path": "ref/models/querysets#django.db.models.FilteredRelation.condition", "type": "django.db.models", "text": ["A Q object to control the filtering."]}, {"name": "db.models.FilteredRelation.relation_name", "path": "ref/models/querysets#django.db.models.FilteredRelation.relation_name", "type": "django.db.models", "text": ["The name of the field on which you\u2019d like to filter the relation."]}, {"name": "db.models.FloatField", "path": "ref/models/fields#django.db.models.FloatField", "type": "django.db.models", "text": []}, {"name": "db.models.ForeignKey", "path": "ref/models/fields#django.db.models.ForeignKey", "type": "django.db.models", "text": []}, {"name": "db.models.ForeignKey.db_constraint", "path": "ref/models/fields#django.db.models.ForeignKey.db_constraint", "type": "django.db.models", "text": ["Controls whether or not a constraint should be created in the database for this foreign key. The default is True, and that\u2019s almost certainly what you want; setting this to False can be very bad for data integrity. That said, here are some scenarios where you might want to do this:", "If this is set to False, accessing a related object that doesn\u2019t exist will raise its DoesNotExist exception."]}, {"name": "db.models.ForeignKey.limit_choices_to", "path": "ref/models/fields#django.db.models.ForeignKey.limit_choices_to", "type": "django.db.models", "text": ["Sets a limit to the available choices for this field when this field is rendered using a ModelForm or the admin (by default, all objects in the queryset are available to choose). Either a dictionary, a Q object, or a callable returning a dictionary or Q object can be used.", "For example:", "causes the corresponding field on the ModelForm to list only Users that have is_staff=True. This may be helpful in the Django admin.", "The callable form can be helpful, for instance, when used in conjunction with the Python datetime module to limit selections by date range. For example:", "If limit_choices_to is or returns a Q object, which is useful for complex queries, then it will only have an effect on the choices available in the admin when the field is not listed in raw_id_fields in the ModelAdmin for the model.", "Note", "If a callable is used for limit_choices_to, it will be invoked every time a new form is instantiated. It may also be invoked when a model is validated, for example by management commands or the admin. The admin constructs querysets to validate its form inputs in various edge cases multiple times, so there is a possibility your callable may be invoked several times."]}, {"name": "db.models.ForeignKey.on_delete", "path": "ref/models/fields#django.db.models.ForeignKey.on_delete", "type": "django.db.models", "text": ["When an object referenced by a ForeignKey is deleted, Django will emulate the behavior of the SQL constraint specified by the on_delete argument. For example, if you have a nullable ForeignKey and you want it to be set null when the referenced object is deleted:", "on_delete doesn\u2019t create an SQL constraint in the database. Support for database-level cascade options may be implemented later."]}, {"name": "db.models.ForeignKey.related_name", "path": "ref/models/fields#django.db.models.ForeignKey.related_name", "type": "django.db.models", "text": ["The name to use for the relation from the related object back to this one. It\u2019s also the default value for related_query_name (the name to use for the reverse filter name from the target model). See the related objects documentation for a full explanation and example. Note that you must set this value when defining relations on abstract models; and when you do so some special syntax is available.", "If you\u2019d prefer Django not to create a backwards relation, set related_name to '+' or end it with '+'. For example, this will ensure that the User model won\u2019t have a backwards relation to this model:"]}, {"name": "db.models.ForeignKey.related_query_name", "path": "ref/models/fields#django.db.models.ForeignKey.related_query_name", "type": "django.db.models", "text": ["The name to use for the reverse filter name from the target model. It defaults to the value of related_name or default_related_name if set, otherwise it defaults to the name of the model:", "Like related_name, related_query_name supports app label and class interpolation via some special syntax."]}, {"name": "db.models.ForeignKey.swappable", "path": "ref/models/fields#django.db.models.ForeignKey.swappable", "type": "django.db.models", "text": ["Controls the migration framework\u2019s reaction if this ForeignKey is pointing at a swappable model. If it is True - the default - then if the ForeignKey is pointing at a model which matches the current value of settings.AUTH_USER_MODEL (or another swappable model setting) the relationship will be stored in the migration using a reference to the setting, not to the model directly.", "You only want to override this to be False if you are sure your model should always point toward the swapped-in model - for example, if it is a profile model designed specifically for your custom user model.", "Setting it to False does not mean you can reference a swappable model even if it is swapped out - False means that the migrations made with this ForeignKey will always reference the exact model you specify (so it will fail hard if the user tries to run with a User model you don\u2019t support, for example).", "If in doubt, leave it to its default of True."]}, {"name": "db.models.ForeignKey.to_field", "path": "ref/models/fields#django.db.models.ForeignKey.to_field", "type": "django.db.models", "text": ["The field on the related object that the relation is to. By default, Django uses the primary key of the related object. If you reference a different field, that field must have unique=True."]}, {"name": "db.models.Func", "path": "ref/models/expressions#django.db.models.Func", "type": "django.db.models", "text": ["A class attribute describing the function that will be generated. Specifically, the function will be interpolated as the function placeholder within template. Defaults to None.", "A class attribute, as a format string, that describes the SQL that is generated for this function. Defaults to '%(function)s(%(expressions)s)'.", "If you\u2019re constructing SQL like strftime('%W', 'date') and need a literal % character in the query, quadruple it (%%%%) in the template attribute because the string is interpolated twice: once during the template interpolation in as_sql() and once in the SQL interpolation with the query parameters in the database cursor.", "A class attribute that denotes the character used to join the list of expressions together. Defaults to ', '.", "A class attribute that denotes the number of arguments the function accepts. If this attribute is set and the function is called with a different number of expressions, TypeError will be raised. Defaults to None.", "Generates the SQL fragment for the database function. Returns a tuple (sql, params), where sql is the SQL string, and params is the list or tuple of query parameters.", "The as_vendor() methods should use the function, template, arg_joiner, and any other **extra_context parameters to customize the SQL as needed. For example:", "To avoid an SQL injection vulnerability, extra_context must not contain untrusted user input as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them."]}, {"name": "db.models.Func.arg_joiner", "path": "ref/models/expressions#django.db.models.Func.arg_joiner", "type": "django.db.models", "text": ["A class attribute that denotes the character used to join the list of expressions together. Defaults to ', '."]}, {"name": "db.models.Func.arity", "path": "ref/models/expressions#django.db.models.Func.arity", "type": "django.db.models", "text": ["A class attribute that denotes the number of arguments the function accepts. If this attribute is set and the function is called with a different number of expressions, TypeError will be raised. Defaults to None."]}, {"name": "db.models.Func.as_sql()", "path": "ref/models/expressions#django.db.models.Func.as_sql", "type": "django.db.models", "text": ["Generates the SQL fragment for the database function. Returns a tuple (sql, params), where sql is the SQL string, and params is the list or tuple of query parameters.", "The as_vendor() methods should use the function, template, arg_joiner, and any other **extra_context parameters to customize the SQL as needed. For example:", "To avoid an SQL injection vulnerability, extra_context must not contain untrusted user input as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them."]}, {"name": "db.models.Func.function", "path": "ref/models/expressions#django.db.models.Func.function", "type": "django.db.models", "text": ["A class attribute describing the function that will be generated. Specifically, the function will be interpolated as the function placeholder within template. Defaults to None."]}, {"name": "db.models.Func.template", "path": "ref/models/expressions#django.db.models.Func.template", "type": "django.db.models", "text": ["A class attribute, as a format string, that describes the SQL that is generated for this function. Defaults to '%(function)s(%(expressions)s)'.", "If you\u2019re constructing SQL like strftime('%W', 'date') and need a literal % character in the query, quadruple it (%%%%) in the template attribute because the string is interpolated twice: once during the template interpolation in as_sql() and once in the SQL interpolation with the query parameters in the database cursor."]}, {"name": "db.models.functions.Abs", "path": "ref/models/database-functions#django.db.models.functions.Abs", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ACos", "path": "ref/models/database-functions#django.db.models.functions.ACos", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ASin", "path": "ref/models/database-functions#django.db.models.functions.ASin", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ATan", "path": "ref/models/database-functions#django.db.models.functions.ATan", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ATan2", "path": "ref/models/database-functions#django.db.models.functions.ATan2", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Cast", "path": "ref/models/database-functions#django.db.models.functions.Cast", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Ceil", "path": "ref/models/database-functions#django.db.models.functions.Ceil", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Chr", "path": "ref/models/database-functions#django.db.models.functions.Chr", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Coalesce", "path": "ref/models/database-functions#django.db.models.functions.Coalesce", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Collate", "path": "ref/models/database-functions#django.db.models.functions.Collate", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Concat", "path": "ref/models/database-functions#django.db.models.functions.Concat", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Cos", "path": "ref/models/database-functions#django.db.models.functions.Cos", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Cot", "path": "ref/models/database-functions#django.db.models.functions.Cot", "type": "django.db.models", "text": []}, {"name": "db.models.functions.CumeDist", "path": "ref/models/database-functions#django.db.models.functions.CumeDist", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Degrees", "path": "ref/models/database-functions#django.db.models.functions.Degrees", "type": "django.db.models", "text": []}, {"name": "db.models.functions.DenseRank", "path": "ref/models/database-functions#django.db.models.functions.DenseRank", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Exp", "path": "ref/models/database-functions#django.db.models.functions.Exp", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Extract", "path": "ref/models/database-functions#django.db.models.functions.Extract", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ExtractDay", "path": "ref/models/database-functions#django.db.models.functions.ExtractDay", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ExtractHour", "path": "ref/models/database-functions#django.db.models.functions.ExtractHour", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ExtractIsoWeekDay", "path": "ref/models/database-functions#django.db.models.functions.ExtractIsoWeekDay", "type": "django.db.models", "text": ["Returns the ISO-8601 week day with day 1 being Monday and day 7 being Sunday."]}, {"name": "db.models.functions.ExtractIsoYear", "path": "ref/models/database-functions#django.db.models.functions.ExtractIsoYear", "type": "django.db.models", "text": ["Returns the ISO-8601 week-numbering year."]}, {"name": "db.models.functions.ExtractMinute", "path": "ref/models/database-functions#django.db.models.functions.ExtractMinute", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ExtractMonth", "path": "ref/models/database-functions#django.db.models.functions.ExtractMonth", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ExtractQuarter", "path": "ref/models/database-functions#django.db.models.functions.ExtractQuarter", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ExtractSecond", "path": "ref/models/database-functions#django.db.models.functions.ExtractSecond", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ExtractWeek", "path": "ref/models/database-functions#django.db.models.functions.ExtractWeek", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ExtractWeekDay", "path": "ref/models/database-functions#django.db.models.functions.ExtractWeekDay", "type": "django.db.models", "text": []}, {"name": "db.models.functions.ExtractYear", "path": "ref/models/database-functions#django.db.models.functions.ExtractYear", "type": "django.db.models", "text": []}, {"name": "db.models.functions.FirstValue", "path": "ref/models/database-functions#django.db.models.functions.FirstValue", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Floor", "path": "ref/models/database-functions#django.db.models.functions.Floor", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Greatest", "path": "ref/models/database-functions#django.db.models.functions.Greatest", "type": "django.db.models", "text": []}, {"name": "db.models.functions.JSONObject", "path": "ref/models/database-functions#django.db.models.functions.JSONObject", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Lag", "path": "ref/models/database-functions#django.db.models.functions.Lag", "type": "django.db.models", "text": []}, {"name": "db.models.functions.LastValue", "path": "ref/models/database-functions#django.db.models.functions.LastValue", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Lead", "path": "ref/models/database-functions#django.db.models.functions.Lead", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Least", "path": "ref/models/database-functions#django.db.models.functions.Least", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Left", "path": "ref/models/database-functions#django.db.models.functions.Left", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Length", "path": "ref/models/database-functions#django.db.models.functions.Length", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Ln", "path": "ref/models/database-functions#django.db.models.functions.Ln", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Log", "path": "ref/models/database-functions#django.db.models.functions.Log", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Lower", "path": "ref/models/database-functions#django.db.models.functions.Lower", "type": "django.db.models", "text": []}, {"name": "db.models.functions.LPad", "path": "ref/models/database-functions#django.db.models.functions.LPad", "type": "django.db.models", "text": []}, {"name": "db.models.functions.LTrim", "path": "ref/models/database-functions#django.db.models.functions.LTrim", "type": "django.db.models", "text": []}, {"name": "db.models.functions.MD5", "path": "ref/models/database-functions#django.db.models.functions.MD5", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Mod", "path": "ref/models/database-functions#django.db.models.functions.Mod", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Now", "path": "ref/models/database-functions#django.db.models.functions.Now", "type": "django.db.models", "text": []}, {"name": "db.models.functions.NthValue", "path": "ref/models/database-functions#django.db.models.functions.NthValue", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Ntile", "path": "ref/models/database-functions#django.db.models.functions.Ntile", "type": "django.db.models", "text": []}, {"name": "db.models.functions.NullIf", "path": "ref/models/database-functions#django.db.models.functions.NullIf", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Ord", "path": "ref/models/database-functions#django.db.models.functions.Ord", "type": "django.db.models", "text": []}, {"name": "db.models.functions.PercentRank", "path": "ref/models/database-functions#django.db.models.functions.PercentRank", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Pi", "path": "ref/models/database-functions#django.db.models.functions.Pi", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Power", "path": "ref/models/database-functions#django.db.models.functions.Power", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Radians", "path": "ref/models/database-functions#django.db.models.functions.Radians", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Random", "path": "ref/models/database-functions#django.db.models.functions.Random", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Rank", "path": "ref/models/database-functions#django.db.models.functions.Rank", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Repeat", "path": "ref/models/database-functions#django.db.models.functions.Repeat", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Replace", "path": "ref/models/database-functions#django.db.models.functions.Replace", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Reverse", "path": "ref/models/database-functions#django.db.models.functions.Reverse", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Right", "path": "ref/models/database-functions#django.db.models.functions.Right", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Round", "path": "ref/models/database-functions#django.db.models.functions.Round", "type": "django.db.models", "text": []}, {"name": "db.models.functions.RowNumber", "path": "ref/models/database-functions#django.db.models.functions.RowNumber", "type": "django.db.models", "text": []}, {"name": "db.models.functions.RPad", "path": "ref/models/database-functions#django.db.models.functions.RPad", "type": "django.db.models", "text": []}, {"name": "db.models.functions.RTrim", "path": "ref/models/database-functions#django.db.models.functions.RTrim", "type": "django.db.models", "text": []}, {"name": "db.models.functions.SHA1", "path": "ref/models/database-functions#django.db.models.functions.SHA1", "type": "django.db.models", "text": []}, {"name": "db.models.functions.SHA224", "path": "ref/models/database-functions#django.db.models.functions.SHA224", "type": "django.db.models", "text": []}, {"name": "db.models.functions.SHA256", "path": "ref/models/database-functions#django.db.models.functions.SHA256", "type": "django.db.models", "text": []}, {"name": "db.models.functions.SHA384", "path": "ref/models/database-functions#django.db.models.functions.SHA384", "type": "django.db.models", "text": []}, {"name": "db.models.functions.SHA512", "path": "ref/models/database-functions#django.db.models.functions.SHA512", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Sign", "path": "ref/models/database-functions#django.db.models.functions.Sign", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Sin", "path": "ref/models/database-functions#django.db.models.functions.Sin", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Sqrt", "path": "ref/models/database-functions#django.db.models.functions.Sqrt", "type": "django.db.models", "text": []}, {"name": "db.models.functions.StrIndex", "path": "ref/models/database-functions#django.db.models.functions.StrIndex", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Substr", "path": "ref/models/database-functions#django.db.models.functions.Substr", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Tan", "path": "ref/models/database-functions#django.db.models.functions.Tan", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Trim", "path": "ref/models/database-functions#django.db.models.functions.Trim", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Trunc", "path": "ref/models/database-functions#django.db.models.functions.Trunc", "type": "django.db.models", "text": []}, {"name": "db.models.functions.TruncDate", "path": "ref/models/database-functions#django.db.models.functions.TruncDate", "type": "django.db.models", "text": ["The tzinfo parameter was added."]}, {"name": "db.models.functions.TruncDay", "path": "ref/models/database-functions#django.db.models.functions.TruncDay", "type": "django.db.models", "text": []}, {"name": "db.models.functions.TruncHour", "path": "ref/models/database-functions#django.db.models.functions.TruncHour", "type": "django.db.models", "text": []}, {"name": "db.models.functions.TruncMinute", "path": "ref/models/database-functions#django.db.models.functions.TruncMinute", "type": "django.db.models", "text": []}, {"name": "db.models.functions.TruncMonth", "path": "ref/models/database-functions#django.db.models.functions.TruncMonth", "type": "django.db.models", "text": []}, {"name": "db.models.functions.TruncQuarter", "path": "ref/models/database-functions#django.db.models.functions.TruncQuarter", "type": "django.db.models", "text": []}, {"name": "db.models.functions.TruncSecond", "path": "ref/models/database-functions#django.db.models.functions.TruncSecond", "type": "django.db.models", "text": []}, {"name": "db.models.functions.TruncTime", "path": "ref/models/database-functions#django.db.models.functions.TruncTime", "type": "django.db.models", "text": ["The tzinfo parameter was added."]}, {"name": "db.models.functions.TruncWeek", "path": "ref/models/database-functions#django.db.models.functions.TruncWeek", "type": "django.db.models", "text": ["Truncates to midnight on the Monday of the week."]}, {"name": "db.models.functions.TruncYear", "path": "ref/models/database-functions#django.db.models.functions.TruncYear", "type": "django.db.models", "text": []}, {"name": "db.models.functions.Upper", "path": "ref/models/database-functions#django.db.models.functions.Upper", "type": "django.db.models", "text": []}, {"name": "db.models.GenericIPAddressField", "path": "ref/models/fields#django.db.models.GenericIPAddressField", "type": "django.db.models", "text": []}, {"name": "db.models.GenericIPAddressField.protocol", "path": "ref/models/fields#django.db.models.GenericIPAddressField.protocol", "type": "django.db.models", "text": ["Limits valid inputs to the specified protocol. Accepted values are 'both' (default), 'IPv4' or 'IPv6'. Matching is case insensitive."]}, {"name": "db.models.GenericIPAddressField.unpack_ipv4", "path": "ref/models/fields#django.db.models.GenericIPAddressField.unpack_ipv4", "type": "django.db.models", "text": ["Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'."]}, {"name": "db.models.get_lookup()", "path": "ref/models/lookups#django.db.models.get_lookup", "type": "django.db.models", "text": ["Must return the lookup named lookup_name. For instance, by returning self.output_field.get_lookup(lookup_name)."]}, {"name": "db.models.get_transform()", "path": "ref/models/lookups#django.db.models.get_transform", "type": "django.db.models", "text": ["Must return the lookup named transform_name. For instance, by returning self.output_field.get_transform(transform_name)."]}, {"name": "db.models.ImageField", "path": "ref/models/fields#django.db.models.ImageField", "type": "django.db.models", "text": []}, {"name": "db.models.ImageField.height_field", "path": "ref/models/fields#django.db.models.ImageField.height_field", "type": "django.db.models", "text": ["Name of a model field which will be auto-populated with the height of the image each time the model instance is saved."]}, {"name": "db.models.ImageField.width_field", "path": "ref/models/fields#django.db.models.ImageField.width_field", "type": "django.db.models", "text": ["Name of a model field which will be auto-populated with the width of the image each time the model instance is saved."]}, {"name": "db.models.Index", "path": "ref/models/indexes#django.db.models.Index", "type": "django.db.models", "text": ["Creates an index (B-Tree) in the database."]}, {"name": "db.models.Index.condition", "path": "ref/models/indexes#django.db.models.Index.condition", "type": "django.db.models", "text": []}, {"name": "db.models.Index.db_tablespace", "path": "ref/models/indexes#django.db.models.Index.db_tablespace", "type": "django.db.models", "text": []}, {"name": "db.models.Index.expressions", "path": "ref/models/indexes#django.db.models.Index.expressions", "type": "django.db.models", "text": []}, {"name": "db.models.Index.fields", "path": "ref/models/indexes#django.db.models.Index.fields", "type": "django.db.models", "text": []}, {"name": "db.models.Index.include", "path": "ref/models/indexes#django.db.models.Index.include", "type": "django.db.models", "text": []}, {"name": "db.models.Index.name", "path": "ref/models/indexes#django.db.models.Index.name", "type": "django.db.models", "text": []}, {"name": "db.models.Index.opclasses", "path": "ref/models/indexes#django.db.models.Index.opclasses", "type": "django.db.models", "text": []}, {"name": "db.models.IntegerField", "path": "ref/models/fields#django.db.models.IntegerField", "type": "django.db.models", "text": []}, {"name": "db.models.JSONField", "path": "ref/models/fields#django.db.models.JSONField", "type": "django.db.models", "text": []}, {"name": "db.models.JSONField.decoder", "path": "ref/models/fields#django.db.models.JSONField.decoder", "type": "django.db.models", "text": ["An optional json.JSONDecoder subclass to deserialize the value retrieved from the database. The value will be in the format chosen by the custom encoder (most often a string). Your deserialization may need to account for the fact that you can\u2019t be certain of the input type. For example, you run the risk of returning a datetime that was actually a string that just happened to be in the same format chosen for datetimes.", "Defaults to json.JSONDecoder."]}, {"name": "db.models.JSONField.encoder", "path": "ref/models/fields#django.db.models.JSONField.encoder", "type": "django.db.models", "text": ["An optional json.JSONEncoder subclass to serialize data types not supported by the standard JSON serializer (e.g. datetime.datetime or UUID). For example, you can use the DjangoJSONEncoder class.", "Defaults to json.JSONEncoder."]}, {"name": "db.models.Lookup", "path": "ref/models/lookups#django.db.models.Lookup", "type": "django.db.models", "text": ["A Lookup is a generic class to implement lookups. A lookup is a query expression with a left-hand side, lhs; a right-hand side, rhs; and a lookup_name that is used to produce a boolean comparison between lhs and rhs such as lhs in rhs or lhs > rhs.", "The primary notation to use a lookup in an expression is <lhs>__<lookup_name>=<rhs>. Lookups can also be used directly in QuerySet filters:", "\u2026or annotations:", "The left-hand side - what is being looked up. The object typically follows the Query Expression API. It may also be a plain value.", "The right-hand side - what lhs is being compared against. It can be a plain value, or something that compiles into SQL, typically an F() object or a QuerySet.", "The name of this lookup, used to identify it on parsing query expressions. It cannot contain the string \"__\".", "Returns a tuple (lhs_string, lhs_params), as returned by compiler.compile(lhs). This method can be overridden to tune how the lhs is processed.", "compiler is an SQLCompiler object, to be used like compiler.compile(lhs) for compiling lhs. The connection can be used for compiling vendor specific SQL. If lhs is not None, use it as the processed lhs instead of self.lhs.", "Behaves the same way as process_lhs(), for the right-hand side.", "Support for using lookups in QuerySet annotations, aggregations, and directly in filters was added."]}, {"name": "db.models.Lookup.lhs", "path": "ref/models/lookups#django.db.models.Lookup.lhs", "type": "django.db.models", "text": ["The left-hand side - what is being looked up. The object typically follows the Query Expression API. It may also be a plain value."]}, {"name": "db.models.Lookup.lookup_name", "path": "ref/models/lookups#django.db.models.Lookup.lookup_name", "type": "django.db.models", "text": ["The name of this lookup, used to identify it on parsing query expressions. It cannot contain the string \"__\"."]}, {"name": "db.models.Lookup.process_lhs()", "path": "ref/models/lookups#django.db.models.Lookup.process_lhs", "type": "django.db.models", "text": ["Returns a tuple (lhs_string, lhs_params), as returned by compiler.compile(lhs). This method can be overridden to tune how the lhs is processed.", "compiler is an SQLCompiler object, to be used like compiler.compile(lhs) for compiling lhs. The connection can be used for compiling vendor specific SQL. If lhs is not None, use it as the processed lhs instead of self.lhs."]}, {"name": "db.models.Lookup.process_rhs()", "path": "ref/models/lookups#django.db.models.Lookup.process_rhs", "type": "django.db.models", "text": ["Behaves the same way as process_lhs(), for the right-hand side."]}, {"name": "db.models.Lookup.rhs", "path": "ref/models/lookups#django.db.models.Lookup.rhs", "type": "django.db.models", "text": ["The right-hand side - what lhs is being compared against. It can be a plain value, or something that compiles into SQL, typically an F() object or a QuerySet."]}, {"name": "db.models.lookups.RegisterLookupMixin", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin", "type": "django.db.models", "text": ["A mixin that implements the lookup API on a class.", "Registers a new lookup in the class. For example DateField.register_lookup(YearExact) will register YearExact lookup on DateField. It overrides a lookup that already exists with the same name. lookup_name will be used for this lookup if provided, otherwise lookup.lookup_name will be used.", "Returns the Lookup named lookup_name registered in the class. The default implementation looks recursively on all parent classes and checks if any has a registered lookup named lookup_name, returning the first match.", "Returns a dictionary of each lookup name registered in the class mapped to the Lookup class.", "Returns a Transform named transform_name. The default implementation looks recursively on all parent classes to check if any has the registered transform named transform_name, returning the first match."]}, {"name": "db.models.lookups.RegisterLookupMixin.get_lookup()", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin.get_lookup", "type": "django.db.models", "text": ["Returns the Lookup named lookup_name registered in the class. The default implementation looks recursively on all parent classes and checks if any has a registered lookup named lookup_name, returning the first match."]}, {"name": "db.models.lookups.RegisterLookupMixin.get_lookups()", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin.get_lookups", "type": "django.db.models", "text": ["Returns a dictionary of each lookup name registered in the class mapped to the Lookup class."]}, {"name": "db.models.lookups.RegisterLookupMixin.get_transform()", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin.get_transform", "type": "django.db.models", "text": ["Returns a Transform named transform_name. The default implementation looks recursively on all parent classes to check if any has the registered transform named transform_name, returning the first match."]}, {"name": "db.models.Manager", "path": "topics/db/managers#django.db.models.Manager", "type": "django.db.models", "text": []}, {"name": "db.models.Manager.raw()", "path": "topics/db/sql#django.db.models.Manager.raw", "type": "django.db.models", "text": []}, {"name": "db.models.ManyToManyField", "path": "ref/models/fields#django.db.models.ManyToManyField", "type": "django.db.models", "text": []}, {"name": "db.models.ManyToManyField.db_constraint", "path": "ref/models/fields#django.db.models.ManyToManyField.db_constraint", "type": "django.db.models", "text": ["Controls whether or not constraints should be created in the database for the foreign keys in the intermediary table. The default is True, and that\u2019s almost certainly what you want; setting this to False can be very bad for data integrity. That said, here are some scenarios where you might want to do this:", "It is an error to pass both db_constraint and through."]}, {"name": "db.models.ManyToManyField.db_table", "path": "ref/models/fields#django.db.models.ManyToManyField.db_table", "type": "django.db.models", "text": ["The name of the table to create for storing the many-to-many data. If this is not provided, Django will assume a default name based upon the names of: the table for the model defining the relationship and the name of the field itself."]}, {"name": "db.models.ManyToManyField.limit_choices_to", "path": "ref/models/fields#django.db.models.ManyToManyField.limit_choices_to", "type": "django.db.models", "text": ["Same as ForeignKey.limit_choices_to."]}, {"name": "db.models.ManyToManyField.related_name", "path": "ref/models/fields#django.db.models.ManyToManyField.related_name", "type": "django.db.models", "text": ["Same as ForeignKey.related_name."]}, {"name": "db.models.ManyToManyField.related_query_name", "path": "ref/models/fields#django.db.models.ManyToManyField.related_query_name", "type": "django.db.models", "text": ["Same as ForeignKey.related_query_name."]}, {"name": "db.models.ManyToManyField.swappable", "path": "ref/models/fields#django.db.models.ManyToManyField.swappable", "type": "django.db.models", "text": ["Controls the migration framework\u2019s reaction if this ManyToManyField is pointing at a swappable model. If it is True - the default - then if the ManyToManyField is pointing at a model which matches the current value of settings.AUTH_USER_MODEL (or another swappable model setting) the relationship will be stored in the migration using a reference to the setting, not to the model directly.", "You only want to override this to be False if you are sure your model should always point toward the swapped-in model - for example, if it is a profile model designed specifically for your custom user model.", "If in doubt, leave it to its default of True."]}, {"name": "db.models.ManyToManyField.symmetrical", "path": "ref/models/fields#django.db.models.ManyToManyField.symmetrical", "type": "django.db.models", "text": ["Only used in the definition of ManyToManyFields on self. Consider the following model:", "When Django processes this model, it identifies that it has a ManyToManyField on itself, and as a result, it doesn\u2019t add a person_set attribute to the Person class. Instead, the ManyToManyField is assumed to be symmetrical \u2013 that is, if I am your friend, then you are my friend.", "If you do not want symmetry in many-to-many relationships with self, set symmetrical to False. This will force Django to add the descriptor for the reverse relationship, allowing ManyToManyField relationships to be non-symmetrical."]}, {"name": "db.models.ManyToManyField.through", "path": "ref/models/fields#django.db.models.ManyToManyField.through", "type": "django.db.models", "text": ["Django will automatically generate a table to manage many-to-many relationships. However, if you want to manually specify the intermediary table, you can use the through option to specify the Django model that represents the intermediate table that you want to use.", "The most common use for this option is when you want to associate extra data with a many-to-many relationship.", "Note", "If you don\u2019t want multiple associations between the same instances, add a UniqueConstraint including the from and to fields. Django\u2019s automatically generated many-to-many tables include such a constraint.", "Note", "Recursive relationships using an intermediary model can\u2019t determine the reverse accessors names, as they would be the same. You need to set a related_name to at least one of them. If you\u2019d prefer Django not to create a backwards relation, set related_name to '+'.", "If you don\u2019t specify an explicit through model, there is still an implicit through model class you can use to directly access the table created to hold the association. It has three fields to link the models.", "If the source and target models differ, the following fields are generated:", "If the ManyToManyField points from and to the same model, the following fields are generated:", "This class can be used to query associated records for a given model instance like a normal model:"]}, {"name": "db.models.ManyToManyField.through_fields", "path": "ref/models/fields#django.db.models.ManyToManyField.through_fields", "type": "django.db.models", "text": ["Only used when a custom intermediary model is specified. Django will normally determine which fields of the intermediary model to use in order to establish a many-to-many relationship automatically. However, consider the following models:", "Membership has two foreign keys to Person (person and inviter), which makes the relationship ambiguous and Django can\u2019t know which one to use. In this case, you must explicitly specify which foreign keys Django should use using through_fields, as in the example above.", "through_fields accepts a 2-tuple ('field1', 'field2'), where field1 is the name of the foreign key to the model the ManyToManyField is defined on (group in this case), and field2 the name of the foreign key to the target model (person in this case).", "When you have more than one foreign key on an intermediary model to any (or even both) of the models participating in a many-to-many relationship, you must specify through_fields. This also applies to recursive relationships when an intermediary model is used and there are more than two foreign keys to the model, or you want to explicitly specify which two Django should use."]}, {"name": "db.models.Max", "path": "ref/models/querysets#django.db.models.Max", "type": "django.db.models", "text": ["Returns the maximum value of the given expression."]}, {"name": "db.models.Min", "path": "ref/models/querysets#django.db.models.Min", "type": "django.db.models", "text": ["Returns the minimum value of the given expression."]}, {"name": "db.models.Model", "path": "ref/models/instances#django.db.models.Model", "type": "django.db.models", "text": []}, {"name": "db.models.Model.__eq__()", "path": "ref/models/instances#django.db.models.Model.__eq__", "type": "django.db.models", "text": []}, {"name": "db.models.Model.__hash__()", "path": "ref/models/instances#django.db.models.Model.__hash__", "type": "django.db.models", "text": []}, {"name": "db.models.Model.__str__()", "path": "ref/models/instances#django.db.models.Model.__str__", "type": "django.db.models", "text": []}, {"name": "db.models.Model._base_manager", "path": "topics/db/managers#django.db.models.Model._base_manager", "type": "django.db.models", "text": []}, {"name": "db.models.Model._default_manager", "path": "topics/db/managers#django.db.models.Model._default_manager", "type": "django.db.models", "text": []}, {"name": "db.models.Model._state", "path": "ref/models/instances#django.db.models.Model._state", "type": "django.db.models", "text": ["The _state attribute refers to a ModelState object that tracks the lifecycle of the model instance.", "The ModelState object has two attributes: adding, a flag which is True if the model has not been saved to the database yet, and db, a string referring to the database alias the instance was loaded from or saved to.", "Newly instantiated instances have adding=True and db=None, since they are yet to be saved. Instances fetched from a QuerySet will have adding=False and db set to the alias of the associated database."]}, {"name": "db.models.Model.clean()", "path": "ref/models/instances#django.db.models.Model.clean", "type": "django.db.models", "text": []}, {"name": "db.models.Model.clean_fields()", "path": "ref/models/instances#django.db.models.Model.clean_fields", "type": "django.db.models", "text": []}, {"name": "db.models.Model.delete()", "path": "ref/models/instances#django.db.models.Model.delete", "type": "django.db.models", "text": []}, {"name": "db.models.Model.full_clean()", "path": "ref/models/instances#django.db.models.Model.full_clean", "type": "django.db.models", "text": []}, {"name": "db.models.Model.get_absolute_url()", "path": "ref/models/instances#django.db.models.Model.get_absolute_url", "type": "django.db.models", "text": []}, {"name": "db.models.Model.get_deferred_fields()", "path": "ref/models/instances#django.db.models.Model.get_deferred_fields", "type": "django.db.models", "text": []}, {"name": "db.models.Model.get_FOO_display()", "path": "ref/models/instances#django.db.models.Model.get_FOO_display", "type": "django.db.models", "text": []}, {"name": "db.models.Model.get_next_by_FOO()", "path": "ref/models/instances#django.db.models.Model.get_next_by_FOO", "type": "django.db.models", "text": []}, {"name": "db.models.Model.get_previous_by_FOO()", "path": "ref/models/instances#django.db.models.Model.get_previous_by_FOO", "type": "django.db.models", "text": []}, {"name": "db.models.Model.objects", "path": "ref/models/class#django.db.models.Model.objects", "type": "django.db.models", "text": ["Each non-abstract Model class must have a Manager instance added to it. Django ensures that in your model class you have at least a default Manager specified. If you don\u2019t add your own Manager, Django will add an attribute objects containing default Manager instance. If you add your own Manager instance attribute, the default one does not appear. Consider the following example:", "For more details on model managers see Managers and Retrieving objects."]}, {"name": "db.models.Model.pk", "path": "ref/models/instances#django.db.models.Model.pk", "type": "django.db.models", "text": []}, {"name": "db.models.Model.refresh_from_db()", "path": "ref/models/instances#django.db.models.Model.refresh_from_db", "type": "django.db.models", "text": []}, {"name": "db.models.Model.save()", "path": "ref/models/instances#django.db.models.Model.save", "type": "django.db.models", "text": []}, {"name": "db.models.Model.validate_unique()", "path": "ref/models/instances#django.db.models.Model.validate_unique", "type": "django.db.models", "text": []}, {"name": "db.models.OneToOneField", "path": "ref/models/fields#django.db.models.OneToOneField", "type": "django.db.models", "text": []}, {"name": "db.models.OneToOneField.parent_link", "path": "ref/models/fields#django.db.models.OneToOneField.parent_link", "type": "django.db.models", "text": ["When True and used in a model which inherits from another concrete model, indicates that this field should be used as the link back to the parent class, rather than the extra OneToOneField which would normally be implicitly created by subclassing."]}, {"name": "db.models.Options.abstract", "path": "ref/models/options#django.db.models.Options.abstract", "type": "django.db.models", "text": ["If abstract = True, this model will be an abstract base class."]}, {"name": "db.models.Options.app_label", "path": "ref/models/options#django.db.models.Options.app_label", "type": "django.db.models", "text": ["If a model is defined outside of an application in INSTALLED_APPS, it must declare which app it belongs to:", "If you want to represent a model with the format app_label.object_name or app_label.model_name you can use model._meta.label or model._meta.label_lower respectively."]}, {"name": "db.models.Options.base_manager_name", "path": "ref/models/options#django.db.models.Options.base_manager_name", "type": "django.db.models", "text": ["The attribute name of the manager, for example, 'objects', to use for the model\u2019s _base_manager."]}, {"name": "db.models.Options.constraints", "path": "ref/models/options#django.db.models.Options.constraints", "type": "django.db.models", "text": ["A list of constraints that you want to define on the model:"]}, {"name": "db.models.Options.db_table", "path": "ref/models/options#django.db.models.Options.db_table", "type": "django.db.models", "text": ["The name of the database table to use for the model:"]}, {"name": "db.models.Options.db_tablespace", "path": "ref/models/options#django.db.models.Options.db_tablespace", "type": "django.db.models", "text": ["The name of the database tablespace to use for this model. The default is the project\u2019s DEFAULT_TABLESPACE setting, if set. If the backend doesn\u2019t support tablespaces, this option is ignored."]}, {"name": "db.models.Options.default_manager_name", "path": "ref/models/options#django.db.models.Options.default_manager_name", "type": "django.db.models", "text": ["The name of the manager to use for the model\u2019s _default_manager."]}, {"name": "db.models.Options.default_permissions", "path": "ref/models/options#django.db.models.Options.default_permissions", "type": "django.db.models", "text": ["Defaults to ('add', 'change', 'delete', 'view'). You may customize this list, for example, by setting this to an empty list if your app doesn\u2019t require any of the default permissions. It must be specified on the model before the model is created by migrate in order to prevent any omitted permissions from being created."]}, {"name": "db.models.Options.default_related_name", "path": "ref/models/options#django.db.models.Options.default_related_name", "type": "django.db.models", "text": ["The name that will be used by default for the relation from a related object back to this one. The default is <model_name>_set.", "This option also sets related_query_name.", "As the reverse name for a field should be unique, be careful if you intend to subclass your model. To work around name collisions, part of the name should contain '%(app_label)s' and '%(model_name)s', which are replaced respectively by the name of the application the model is in, and the name of the model, both lowercased. See the paragraph on related names for abstract models."]}, {"name": "db.models.Options.get_latest_by", "path": "ref/models/options#django.db.models.Options.get_latest_by", "type": "django.db.models", "text": ["The name of a field or a list of field names in the model, typically DateField, DateTimeField, or IntegerField. This specifies the default field(s) to use in your model Manager\u2019s latest() and earliest() methods.", "Example:", "See the latest() docs for more."]}, {"name": "db.models.Options.index_together", "path": "ref/models/options#django.db.models.Options.index_together", "type": "django.db.models", "text": ["Use the indexes option instead.", "The newer indexes option provides more functionality than index_together. index_together may be deprecated in the future.", "Sets of field names that, taken together, are indexed:", "This list of fields will be indexed together (i.e. the appropriate CREATE INDEX statement will be issued.)", "For convenience, index_together can be a single list when dealing with a single set of fields:"]}, {"name": "db.models.Options.indexes", "path": "ref/models/options#django.db.models.Options.indexes", "type": "django.db.models", "text": ["A list of indexes that you want to define on the model:"]}, {"name": "db.models.Options.label", "path": "ref/models/options#django.db.models.Options.label", "type": "django.db.models", "text": ["Representation of the object, returns app_label.object_name, e.g. 'polls.Question'."]}, {"name": "db.models.Options.label_lower", "path": "ref/models/options#django.db.models.Options.label_lower", "type": "django.db.models", "text": ["Representation of the model, returns app_label.model_name, e.g. 'polls.question'."]}, {"name": "db.models.Options.managed", "path": "ref/models/options#django.db.models.Options.managed", "type": "django.db.models", "text": ["Defaults to True, meaning Django will create the appropriate database tables in migrate or as part of migrations and remove them as part of a flush management command. That is, Django manages the database tables\u2019 lifecycles.", "If False, no database table creation, modification, or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the only difference when managed=False. All other aspects of model handling are exactly the same as normal. This includes", "If a model with managed=False contains a ManyToManyField that points to another unmanaged model, then the intermediate table for the many-to-many join will also not be created. However, the intermediary table between one managed and one unmanaged model will be created.", "If you need to change this default behavior, create the intermediary table as an explicit model (with managed set as needed) and use the ManyToManyField.through attribute to make the relation use your custom model.", "For tests involving models with managed=False, it\u2019s up to you to ensure the correct tables are created as part of the test setup.", "If you\u2019re interested in changing the Python-level behavior of a model class, you could use managed=False and create a copy of an existing model. However, there\u2019s a better approach for that situation: Proxy models."]}, {"name": "db.models.options.Options", "path": "ref/models/meta#django.db.models.options.Options", "type": "django.db.models", "text": []}, {"name": "db.models.options.Options.get_field()", "path": "ref/models/meta#django.db.models.options.Options.get_field", "type": "django.db.models", "text": ["Returns the field instance given a name of a field.", "field_name can be the name of a field on the model, a field on an abstract or inherited model, or a field defined on another model that points to the model. In the latter case, the field_name will be (in order of preference) the related_query_name set by the user, the related_name set by the user, or the name automatically generated by Django.", "Hidden fields cannot be retrieved by name.", "If a field with the given name is not found a FieldDoesNotExist exception will be raised."]}, {"name": "db.models.options.Options.get_fields()", "path": "ref/models/meta#django.db.models.options.Options.get_fields", "type": "django.db.models", "text": ["Returns a tuple of fields associated with a model. get_fields() accepts two parameters that can be used to control which fields are returned:"]}, {"name": "db.models.Options.order_with_respect_to", "path": "ref/models/options#django.db.models.Options.order_with_respect_to", "type": "django.db.models", "text": ["Makes this object orderable with respect to the given field, usually a ForeignKey. This can be used to make related objects orderable with respect to a parent object. For example, if an Answer relates to a Question object, and a question has more than one answer, and the order of answers matters, you\u2019d do this:", "When order_with_respect_to is set, two additional methods are provided to retrieve and to set the order of the related objects: get_RELATED_order() and set_RELATED_order(), where RELATED is the lowercased model name. For example, assuming that a Question object has multiple related Answer objects, the list returned contains the primary keys of the related Answer objects:", "The order of a Question object\u2019s related Answer objects can be set by passing in a list of Answer primary keys:", "The related objects also get two methods, get_next_in_order() and get_previous_in_order(), which can be used to access those objects in their proper order. Assuming the Answer objects are ordered by id:"]}, {"name": "db.models.Options.ordering", "path": "ref/models/options#django.db.models.Options.ordering", "type": "django.db.models", "text": ["The default ordering for the object, for use when obtaining lists of objects:", "This is a tuple or list of strings and/or query expressions. Each string is a field name with an optional \u201c-\u201d prefix, which indicates descending order. Fields without a leading \u201c-\u201d will be ordered ascending. Use the string \u201c?\u201d to order randomly.", "For example, to order by a pub_date field ascending, use this:", "To order by pub_date descending, use this:", "To order by pub_date descending, then by author ascending, use this:", "You can also use query expressions. To order by author ascending and make null values sort last, use this:"]}, {"name": "db.models.Options.permissions", "path": "ref/models/options#django.db.models.Options.permissions", "type": "django.db.models", "text": ["Extra permissions to enter into the permissions table when creating this object. Add, change, delete, and view permissions are automatically created for each model. This example specifies an extra permission, can_deliver_pizzas:", "This is a list or tuple of 2-tuples in the format (permission_code,\nhuman_readable_permission_name)."]}, {"name": "db.models.Options.proxy", "path": "ref/models/options#django.db.models.Options.proxy", "type": "django.db.models", "text": ["If proxy = True, a model which subclasses another model will be treated as a proxy model."]}, {"name": "db.models.Options.required_db_features", "path": "ref/models/options#django.db.models.Options.required_db_features", "type": "django.db.models", "text": ["List of database features that the current connection should have so that the model is considered during the migration phase. For example, if you set this list to ['gis_enabled'], the model will only be synchronized on GIS-enabled databases. It\u2019s also useful to skip some models when testing with several database backends. Avoid relations between models that may or may not be created as the ORM doesn\u2019t handle this."]}, {"name": "db.models.Options.required_db_vendor", "path": "ref/models/options#django.db.models.Options.required_db_vendor", "type": "django.db.models", "text": ["Name of a supported database vendor that this model is specific to. Current built-in vendor names are: sqlite, postgresql, mysql, oracle. If this attribute is not empty and the current connection vendor doesn\u2019t match it, the model will not be synchronized."]}, {"name": "db.models.Options.select_on_save", "path": "ref/models/options#django.db.models.Options.select_on_save", "type": "django.db.models", "text": ["Determines if Django will use the pre-1.6 django.db.models.Model.save() algorithm. The old algorithm uses SELECT to determine if there is an existing row to be updated. The new algorithm tries an UPDATE directly. In some rare cases the UPDATE of an existing row isn\u2019t visible to Django. An example is the PostgreSQL ON UPDATE trigger which returns NULL. In such cases the new algorithm will end up doing an INSERT even when a row exists in the database.", "Usually there is no need to set this attribute. The default is False.", "See django.db.models.Model.save() for more about the old and new saving algorithm."]}, {"name": "db.models.Options.unique_together", "path": "ref/models/options#django.db.models.Options.unique_together", "type": "django.db.models", "text": ["Use UniqueConstraint with the constraints option instead.", "UniqueConstraint provides more functionality than unique_together. unique_together may be deprecated in the future.", "Sets of field names that, taken together, must be unique:", "This is a list of lists that must be unique when considered together. It\u2019s used in the Django admin and is enforced at the database level (i.e., the appropriate UNIQUE statements are included in the CREATE TABLE statement).", "For convenience, unique_together can be a single list when dealing with a single set of fields:", "A ManyToManyField cannot be included in unique_together. (It\u2019s not clear what that would even mean!) If you need to validate uniqueness related to a ManyToManyField, try using a signal or an explicit through model.", "The ValidationError raised during model validation when the constraint is violated has the unique_together error code."]}, {"name": "db.models.Options.verbose_name", "path": "ref/models/options#django.db.models.Options.verbose_name", "type": "django.db.models", "text": ["A human-readable name for the object, singular:", "If this isn\u2019t given, Django will use a munged version of the class name: CamelCase becomes camel case."]}, {"name": "db.models.Options.verbose_name_plural", "path": "ref/models/options#django.db.models.Options.verbose_name_plural", "type": "django.db.models", "text": ["The plural name for the object:", "If this isn\u2019t given, Django will use verbose_name + \"s\"."]}, {"name": "db.models.OuterRef", "path": "ref/models/expressions#django.db.models.OuterRef", "type": "django.db.models", "text": []}, {"name": "db.models.output_field", "path": "ref/models/lookups#django.db.models.output_field", "type": "django.db.models", "text": ["Defines the type of class returned by the get_lookup() method. It must be a Field instance."]}, {"name": "db.models.PositiveBigIntegerField", "path": "ref/models/fields#django.db.models.PositiveBigIntegerField", "type": "django.db.models", "text": []}, {"name": "db.models.PositiveIntegerField", "path": "ref/models/fields#django.db.models.PositiveIntegerField", "type": "django.db.models", "text": []}, {"name": "db.models.PositiveSmallIntegerField", "path": "ref/models/fields#django.db.models.PositiveSmallIntegerField", "type": "django.db.models", "text": []}, {"name": "db.models.Prefetch", "path": "ref/models/querysets#django.db.models.Prefetch", "type": "django.db.models", "text": []}, {"name": "db.models.prefetch_related_objects()", "path": "ref/models/querysets#django.db.models.prefetch_related_objects", "type": "django.db.models", "text": []}, {"name": "db.models.PROTECT", "path": "ref/models/fields#django.db.models.PROTECT", "type": "django.db.models", "text": ["Prevent deletion of the referenced object by raising ProtectedError, a subclass of django.db.IntegrityError."]}, {"name": "db.models.Q", "path": "ref/models/querysets#django.db.models.Q", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet", "path": "ref/models/querysets#django.db.models.query.QuerySet", "type": "django.db.models", "text": ["Usually when you\u2019ll interact with a QuerySet you\u2019ll use it by chaining filters. To make this work, most QuerySet methods return new querysets. These methods are covered in detail later in this section.", "The QuerySet class has two public attributes you can use for introspection:", "True if the QuerySet is ordered \u2014 i.e. has an order_by() clause or a default ordering on the model. False otherwise.", "The database that will be used if this query is executed now.", "Note", "The query parameter to QuerySet exists so that specialized query subclasses can reconstruct internal query state. The value of the parameter is an opaque representation of that query state and is not part of a public API."]}, {"name": "db.models.query.QuerySet.aggregate()", "path": "ref/models/querysets#django.db.models.query.QuerySet.aggregate", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.alias()", "path": "ref/models/querysets#django.db.models.query.QuerySet.alias", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.all()", "path": "ref/models/querysets#django.db.models.query.QuerySet.all", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.annotate()", "path": "ref/models/querysets#django.db.models.query.QuerySet.annotate", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.bulk_create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.bulk_create", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.bulk_update()", "path": "ref/models/querysets#django.db.models.query.QuerySet.bulk_update", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.contains()", "path": "ref/models/querysets#django.db.models.query.QuerySet.contains", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.count()", "path": "ref/models/querysets#django.db.models.query.QuerySet.count", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.create", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.dates()", "path": "ref/models/querysets#django.db.models.query.QuerySet.dates", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.datetimes()", "path": "ref/models/querysets#django.db.models.query.QuerySet.datetimes", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.db", "path": "ref/models/querysets#django.db.models.query.QuerySet.db", "type": "django.db.models", "text": ["The database that will be used if this query is executed now."]}, {"name": "db.models.query.QuerySet.defer()", "path": "ref/models/querysets#django.db.models.query.QuerySet.defer", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.delete()", "path": "ref/models/querysets#django.db.models.query.QuerySet.delete", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.difference()", "path": "ref/models/querysets#django.db.models.query.QuerySet.difference", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.distinct()", "path": "ref/models/querysets#django.db.models.query.QuerySet.distinct", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.earliest()", "path": "ref/models/querysets#django.db.models.query.QuerySet.earliest", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.exclude()", "path": "ref/models/querysets#django.db.models.query.QuerySet.exclude", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.exists()", "path": "ref/models/querysets#django.db.models.query.QuerySet.exists", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.explain()", "path": "ref/models/querysets#django.db.models.query.QuerySet.explain", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.extra()", "path": "ref/models/querysets#django.db.models.query.QuerySet.extra", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.filter()", "path": "ref/models/querysets#django.db.models.query.QuerySet.filter", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.first()", "path": "ref/models/querysets#django.db.models.query.QuerySet.first", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.get()", "path": "ref/models/querysets#django.db.models.query.QuerySet.get", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.get_or_create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.get_or_create", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.in_bulk()", "path": "ref/models/querysets#django.db.models.query.QuerySet.in_bulk", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.intersection()", "path": "ref/models/querysets#django.db.models.query.QuerySet.intersection", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.iterator()", "path": "ref/models/querysets#django.db.models.query.QuerySet.iterator", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.last()", "path": "ref/models/querysets#django.db.models.query.QuerySet.last", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.latest()", "path": "ref/models/querysets#django.db.models.query.QuerySet.latest", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.none()", "path": "ref/models/querysets#django.db.models.query.QuerySet.none", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.only()", "path": "ref/models/querysets#django.db.models.query.QuerySet.only", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.order_by()", "path": "ref/models/querysets#django.db.models.query.QuerySet.order_by", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.ordered", "path": "ref/models/querysets#django.db.models.query.QuerySet.ordered", "type": "django.db.models", "text": ["True if the QuerySet is ordered \u2014 i.e. has an order_by() clause or a default ordering on the model. False otherwise."]}, {"name": "db.models.query.QuerySet.prefetch_related()", "path": "ref/models/querysets#django.db.models.query.QuerySet.prefetch_related", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.raw()", "path": "ref/models/querysets#django.db.models.query.QuerySet.raw", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.reverse()", "path": "ref/models/querysets#django.db.models.query.QuerySet.reverse", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.select_for_update()", "path": "ref/models/querysets#django.db.models.query.QuerySet.select_for_update", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.select_related()", "path": "ref/models/querysets#django.db.models.query.QuerySet.select_related", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.union()", "path": "ref/models/querysets#django.db.models.query.QuerySet.union", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.update()", "path": "ref/models/querysets#django.db.models.query.QuerySet.update", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.update_or_create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.update_or_create", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.using()", "path": "ref/models/querysets#django.db.models.query.QuerySet.using", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.values()", "path": "ref/models/querysets#django.db.models.query.QuerySet.values", "type": "django.db.models", "text": []}, {"name": "db.models.query.QuerySet.values_list()", "path": "ref/models/querysets#django.db.models.query.QuerySet.values_list", "type": "django.db.models", "text": []}, {"name": "db.models.RESTRICT", "path": "ref/models/fields#django.db.models.RESTRICT", "type": "django.db.models", "text": ["Prevent deletion of the referenced object by raising RestrictedError (a subclass of django.db.IntegrityError). Unlike PROTECT, deletion of the referenced object is allowed if it also references a different object that is being deleted in the same operation, but via a CASCADE relationship.", "Consider this set of models:", "Artist can be deleted even if that implies deleting an Album which is referenced by a Song, because Song also references Artist itself through a cascading relationship. For example:"]}, {"name": "db.models.SET()", "path": "ref/models/fields#django.db.models.SET", "type": "django.db.models", "text": ["Set the ForeignKey to the value passed to SET(), or if a callable is passed in, the result of calling it. In most cases, passing a callable will be necessary to avoid executing queries at the time your models.py is imported:"]}, {"name": "db.models.SET_DEFAULT", "path": "ref/models/fields#django.db.models.SET_DEFAULT", "type": "django.db.models", "text": ["Set the ForeignKey to its default value; a default for the ForeignKey must be set."]}, {"name": "db.models.SET_NULL", "path": "ref/models/fields#django.db.models.SET_NULL", "type": "django.db.models", "text": ["Set the ForeignKey null; this is only possible if null is True."]}, {"name": "db.models.signals.class_prepared", "path": "ref/signals#django.db.models.signals.class_prepared", "type": "django.db.models", "text": []}, {"name": "db.models.signals.m2m_changed", "path": "ref/signals#django.db.models.signals.m2m_changed", "type": "django.db.models", "text": []}, {"name": "db.models.signals.post_delete", "path": "ref/signals#django.db.models.signals.post_delete", "type": "django.db.models", "text": []}, {"name": "db.models.signals.post_init", "path": "ref/signals#django.db.models.signals.post_init", "type": "django.db.models", "text": []}, {"name": "db.models.signals.post_migrate", "path": "ref/signals#django.db.models.signals.post_migrate", "type": "django.db.models", "text": []}, {"name": "db.models.signals.post_save", "path": "ref/signals#django.db.models.signals.post_save", "type": "django.db.models", "text": []}, {"name": "db.models.signals.pre_delete", "path": "ref/signals#django.db.models.signals.pre_delete", "type": "django.db.models", "text": []}, {"name": "db.models.signals.pre_init", "path": "ref/signals#django.db.models.signals.pre_init", "type": "django.db.models", "text": []}, {"name": "db.models.signals.pre_migrate", "path": "ref/signals#django.db.models.signals.pre_migrate", "type": "django.db.models", "text": []}, {"name": "db.models.signals.pre_save", "path": "ref/signals#django.db.models.signals.pre_save", "type": "django.db.models", "text": []}, {"name": "db.models.SlugField", "path": "ref/models/fields#django.db.models.SlugField", "type": "django.db.models", "text": []}, {"name": "db.models.SlugField.allow_unicode", "path": "ref/models/fields#django.db.models.SlugField.allow_unicode", "type": "django.db.models", "text": ["If True, the field accepts Unicode letters in addition to ASCII letters. Defaults to False."]}, {"name": "db.models.SmallAutoField", "path": "ref/models/fields#django.db.models.SmallAutoField", "type": "django.db.models", "text": []}, {"name": "db.models.SmallIntegerField", "path": "ref/models/fields#django.db.models.SmallIntegerField", "type": "django.db.models", "text": []}, {"name": "db.models.StdDev", "path": "ref/models/querysets#django.db.models.StdDev", "type": "django.db.models", "text": ["Returns the standard deviation of the data in the provided expression.", "Has one optional argument:", "By default, StdDev returns the population standard deviation. However, if sample=True, the return value will be the sample standard deviation."]}, {"name": "db.models.StdDev.sample", "path": "ref/models/querysets#django.db.models.StdDev.sample", "type": "django.db.models", "text": ["By default, StdDev returns the population standard deviation. However, if sample=True, the return value will be the sample standard deviation."]}, {"name": "db.models.Subquery", "path": "ref/models/expressions#django.db.models.Subquery", "type": "django.db.models", "text": []}, {"name": "db.models.Sum", "path": "ref/models/querysets#django.db.models.Sum", "type": "django.db.models", "text": ["Computes the sum of all values of the given expression.", "Has one optional argument:", "If distinct=True, Sum returns the sum of unique values. This is the SQL equivalent of SUM(DISTINCT <field>). The default value is False."]}, {"name": "db.models.Sum.distinct", "path": "ref/models/querysets#django.db.models.Sum.distinct", "type": "django.db.models", "text": ["If distinct=True, Sum returns the sum of unique values. This is the SQL equivalent of SUM(DISTINCT <field>). The default value is False."]}, {"name": "db.models.TextField", "path": "ref/models/fields#django.db.models.TextField", "type": "django.db.models", "text": []}, {"name": "db.models.TextField.db_collation", "path": "ref/models/fields#django.db.models.TextField.db_collation", "type": "django.db.models", "text": ["The database collation name of the field.", "Note", "Collation names are not standardized. As such, this will not be portable across multiple database backends.", "Oracle", "Oracle does not support collations for a TextField."]}, {"name": "db.models.TimeField", "path": "ref/models/fields#django.db.models.TimeField", "type": "django.db.models", "text": []}, {"name": "db.models.Transform", "path": "ref/models/lookups#django.db.models.Transform", "type": "django.db.models", "text": ["A Transform is a generic class to implement field transformations. A prominent example is __year that transforms a DateField into a IntegerField.", "The notation to use a Transform in a lookup expression is <expression>__<transformation> (e.g. date__year).", "This class follows the Query Expression API, which implies that you can use <expression>__<transform1>__<transform2>. It\u2019s a specialized Func() expression that only accepts one argument. It can also be used on the right hand side of a filter or directly as an annotation.", "A boolean indicating whether this transformation should apply to both lhs and rhs. Bilateral transformations will be applied to rhs in the same order as they appear in the lookup expression. By default it is set to False. For example usage, see How to write custom lookups.", "The left-hand side - what is being transformed. It must follow the Query Expression API.", "The name of the lookup, used for identifying it on parsing query expressions. It cannot contain the string \"__\".", "Defines the class this transformation outputs. It must be a Field instance. By default is the same as its lhs.output_field."]}, {"name": "db.models.Transform.bilateral", "path": "ref/models/lookups#django.db.models.Transform.bilateral", "type": "django.db.models", "text": ["A boolean indicating whether this transformation should apply to both lhs and rhs. Bilateral transformations will be applied to rhs in the same order as they appear in the lookup expression. By default it is set to False. For example usage, see How to write custom lookups."]}, {"name": "db.models.Transform.lhs", "path": "ref/models/lookups#django.db.models.Transform.lhs", "type": "django.db.models", "text": ["The left-hand side - what is being transformed. It must follow the Query Expression API."]}, {"name": "db.models.Transform.lookup_name", "path": "ref/models/lookups#django.db.models.Transform.lookup_name", "type": "django.db.models", "text": ["The name of the lookup, used for identifying it on parsing query expressions. It cannot contain the string \"__\"."]}, {"name": "db.models.Transform.output_field", "path": "ref/models/lookups#django.db.models.Transform.output_field", "type": "django.db.models", "text": ["Defines the class this transformation outputs. It must be a Field instance. By default is the same as its lhs.output_field."]}, {"name": "db.models.UniqueConstraint", "path": "ref/models/constraints#django.db.models.UniqueConstraint", "type": "django.db.models", "text": ["Creates a unique constraint in the database."]}, {"name": "db.models.UniqueConstraint.condition", "path": "ref/models/constraints#django.db.models.UniqueConstraint.condition", "type": "django.db.models", "text": []}, {"name": "db.models.UniqueConstraint.deferrable", "path": "ref/models/constraints#django.db.models.UniqueConstraint.deferrable", "type": "django.db.models", "text": []}, {"name": "db.models.UniqueConstraint.expressions", "path": "ref/models/constraints#django.db.models.UniqueConstraint.expressions", "type": "django.db.models", "text": []}, {"name": "db.models.UniqueConstraint.fields", "path": "ref/models/constraints#django.db.models.UniqueConstraint.fields", "type": "django.db.models", "text": []}, {"name": "db.models.UniqueConstraint.include", "path": "ref/models/constraints#django.db.models.UniqueConstraint.include", "type": "django.db.models", "text": []}, {"name": "db.models.UniqueConstraint.name", "path": "ref/models/constraints#django.db.models.UniqueConstraint.name", "type": "django.db.models", "text": []}, {"name": "db.models.UniqueConstraint.opclasses", "path": "ref/models/constraints#django.db.models.UniqueConstraint.opclasses", "type": "django.db.models", "text": []}, {"name": "db.models.URLField", "path": "ref/models/fields#django.db.models.URLField", "type": "django.db.models", "text": []}, {"name": "db.models.UUIDField", "path": "ref/models/fields#django.db.models.UUIDField", "type": "django.db.models", "text": []}, {"name": "db.models.Value", "path": "ref/models/expressions#django.db.models.Value", "type": "django.db.models", "text": []}, {"name": "db.models.Variance", "path": "ref/models/querysets#django.db.models.Variance", "type": "django.db.models", "text": ["Returns the variance of the data in the provided expression.", "Has one optional argument:", "By default, Variance returns the population variance. However, if sample=True, the return value will be the sample variance."]}, {"name": "db.models.Variance.sample", "path": "ref/models/querysets#django.db.models.Variance.sample", "type": "django.db.models", "text": ["By default, Variance returns the population variance. However, if sample=True, the return value will be the sample variance."]}, {"name": "db.transaction.atomic()", "path": "topics/db/transactions#django.db.transaction.atomic", "type": "django.db.transaction", "text": ["Atomicity is the defining property of database transactions. atomic allows us to create a block of code within which the atomicity on the database is guaranteed. If the block of code is successfully completed, the changes are committed to the database. If there is an exception, the changes are rolled back.", "atomic blocks can be nested. In this case, when an inner block completes successfully, its effects can still be rolled back if an exception is raised in the outer block at a later point.", "It is sometimes useful to ensure an atomic block is always the outermost atomic block, ensuring that any database changes are committed when the block is exited without errors. This is known as durability and can be achieved by setting durable=True. If the atomic block is nested within another it raises a RuntimeError.", "atomic is usable both as a decorator:", "and as a context manager:", "Wrapping atomic in a try/except block allows for natural handling of integrity errors:", "In this example, even if generate_relationships() causes a database error by breaking an integrity constraint, you can execute queries in add_children(), and the changes from create_parent() are still there and bound to the same transaction. Note that any operations attempted in generate_relationships() will already have been rolled back safely when handle_exception() is called, so the exception handler can also operate on the database if necessary.", "Avoid catching exceptions inside atomic!", "When exiting an atomic block, Django looks at whether it\u2019s exited normally or with an exception to determine whether to commit or roll back. If you catch and handle exceptions inside an atomic block, you may hide from Django the fact that a problem has happened. This can result in unexpected behavior.", "This is mostly a concern for DatabaseError and its subclasses such as IntegrityError. After such an error, the transaction is broken and Django will perform a rollback at the end of the atomic block. If you attempt to run database queries before the rollback happens, Django will raise a TransactionManagementError. You may also encounter this behavior when an ORM-related signal handler raises an exception.", "The correct way to catch database errors is around an atomic block as shown above. If necessary, add an extra atomic block for this purpose. This pattern has another advantage: it delimits explicitly which operations will be rolled back if an exception occurs.", "If you catch exceptions raised by raw SQL queries, Django\u2019s behavior is unspecified and database-dependent.", "You may need to manually revert model state when rolling back a transaction.", "The values of a model\u2019s fields won\u2019t be reverted when a transaction rollback happens. This could lead to an inconsistent model state unless you manually restore the original field values.", "For example, given MyModel with an active field, this snippet ensures that the if obj.active check at the end uses the correct value if updating active to True fails in the transaction:", "In order to guarantee atomicity, atomic disables some APIs. Attempting to commit, roll back, or change the autocommit state of the database connection within an atomic block will raise an exception.", "atomic takes a using argument which should be the name of a database. If this argument isn\u2019t provided, Django uses the \"default\" database.", "Under the hood, Django\u2019s transaction management code:", "You can disable the creation of savepoints for inner blocks by setting the savepoint argument to False. If an exception occurs, Django will perform the rollback when exiting the first parent block with a savepoint if there is one, and the outermost block otherwise. Atomicity is still guaranteed by the outer transaction. This option should only be used if the overhead of savepoints is noticeable. It has the drawback of breaking the error handling described above.", "You may use atomic when autocommit is turned off. It will only use savepoints, even for the outermost block."]}, {"name": "db.transaction.clean_savepoints()", "path": "topics/db/transactions#django.db.transaction.clean_savepoints", "type": "django.db.transaction", "text": ["Resets the counter used to generate unique savepoint IDs."]}, {"name": "db.transaction.commit()", "path": "topics/db/transactions#django.db.transaction.commit", "type": "django.db.transaction", "text": []}, {"name": "db.transaction.get_autocommit()", "path": "topics/db/transactions#django.db.transaction.get_autocommit", "type": "django.db.transaction", "text": []}, {"name": "db.transaction.get_rollback()", "path": "topics/db/transactions#django.db.transaction.get_rollback", "type": "django.db.transaction", "text": []}, {"name": "db.transaction.non_atomic_requests()", "path": "topics/db/transactions#django.db.transaction.non_atomic_requests", "type": "django.db.transaction", "text": ["This decorator will negate the effect of ATOMIC_REQUESTS for a given view:", "It only works if it\u2019s applied to the view itself."]}, {"name": "db.transaction.on_commit()", "path": "topics/db/transactions#django.db.transaction.on_commit", "type": "django.db.transaction", "text": []}, {"name": "db.transaction.rollback()", "path": "topics/db/transactions#django.db.transaction.rollback", "type": "django.db.transaction", "text": []}, {"name": "db.transaction.savepoint()", "path": "topics/db/transactions#django.db.transaction.savepoint", "type": "django.db.transaction", "text": ["Creates a new savepoint. This marks a point in the transaction that is known to be in a \u201cgood\u201d state. Returns the savepoint ID (sid)."]}, {"name": "db.transaction.savepoint_commit()", "path": "topics/db/transactions#django.db.transaction.savepoint_commit", "type": "django.db.transaction", "text": ["Releases savepoint sid. The changes performed since the savepoint was created become part of the transaction."]}, {"name": "db.transaction.savepoint_rollback()", "path": "topics/db/transactions#django.db.transaction.savepoint_rollback", "type": "django.db.transaction", "text": ["Rolls back the transaction to savepoint sid."]}, {"name": "db.transaction.set_autocommit()", "path": "topics/db/transactions#django.db.transaction.set_autocommit", "type": "django.db.transaction", "text": []}, {"name": "db.transaction.set_rollback()", "path": "topics/db/transactions#django.db.transaction.set_rollback", "type": "django.db.transaction", "text": []}, {"name": "Deploying GeoDjango", "path": "ref/contrib/gis/deployment", "type": "API", "text": ["Basically, the deployment of a GeoDjango application is not different from the deployment of a normal Django application. Please consult Django\u2019s deployment documentation.", "Warning", "GeoDjango uses the GDAL geospatial library which is not thread safe at this time. Thus, it is highly recommended to not use threading when deploying \u2013 in other words, use an appropriate configuration of Apache.", "For example, when configuring your application with mod_wsgi, set the WSGIDaemonProcess attribute threads to 1, unless Apache may crash when running your GeoDjango application. Increase the number of processes instead."]}, {"name": "Deployment checklist", "path": "howto/deployment/checklist", "type": "Guides: How-tos", "text": ["The internet is a hostile environment. Before deploying your Django project, you should take some time to review your settings, with security, performance, and operations in mind.", "Django includes many security features. Some are built-in and always enabled. Others are optional because they aren\u2019t always appropriate, or because they\u2019re inconvenient for development. For example, forcing HTTPS may not be suitable for all websites, and it\u2019s impractical for local development.", "Performance optimizations are another category of trade-offs with convenience. For instance, caching is useful in production, less so for local development. Error reporting needs are also widely different.", "The following checklist includes settings that:", "Many of these settings are sensitive and should be treated as confidential. If you\u2019re releasing the source code for your project, a common practice is to publish suitable settings for development, and to use a private settings module for production.", "Some of the checks described below can be automated using the check\n--deploy option. Be sure to run it against your production settings file as described in the option\u2019s documentation.", "The secret key must be a large random value and it must be kept secret.", "Make sure that the key used in production isn\u2019t used anywhere else and avoid committing it to source control. This reduces the number of vectors from which an attacker may acquire the key.", "Instead of hardcoding the secret key in your settings module, consider loading it from an environment variable:", "or from a file:", "You must never enable debug in production.", "You\u2019re certainly developing your project with DEBUG = True, since this enables handy features like full tracebacks in your browser.", "For a production environment, though, this is a really bad idea, because it leaks lots of information about your project: excerpts of your source code, local variables, settings, libraries used, etc.", "When DEBUG = False, Django doesn\u2019t work at all without a suitable value for ALLOWED_HOSTS.", "This setting is required to protect your site against some CSRF attacks. If you use a wildcard, you must perform your own validation of the Host HTTP header, or otherwise ensure that you aren\u2019t vulnerable to this category of attacks.", "You should also configure the web server that sits in front of Django to validate the host. It should respond with a static error page or ignore requests for incorrect hosts instead of forwarding the request to Django. This way you\u2019ll avoid spurious errors in your Django logs (or emails if you have error reporting configured that way). For example, on nginx you might set up a default server to return \u201c444 No Response\u201d on an unrecognized host:", "If you\u2019re using a cache, connection parameters may be different in development and in production. Django defaults to per-process local-memory caching which may not be desirable.", "Cache servers often have weak authentication. Make sure they only accept connections from your application servers.", "Database connection parameters are probably different in development and in production.", "Database passwords are very sensitive. You should protect them exactly like SECRET_KEY.", "For maximum security, make sure database servers only accept connections from your application servers.", "If you haven\u2019t set up backups for your database, do it right now!", "If your site sends emails, these values need to be set correctly.", "By default, Django sends email from webmaster@localhost and root@localhost. However, some mail providers reject email from these addresses. To use different sender addresses, modify the DEFAULT_FROM_EMAIL and SERVER_EMAIL settings.", "Static files are automatically served by the development server. In production, you must define a STATIC_ROOT directory where collectstatic will copy them.", "See How to manage static files (e.g. images, JavaScript, CSS) for more information.", "Media files are uploaded by your users. They\u2019re untrusted! Make sure your web server never attempts to interpret them. For instance, if a user uploads a .php file, the web server shouldn\u2019t execute it.", "Now is a good time to check your backup strategy for these files.", "Any website which allows users to log in should enforce site-wide HTTPS to avoid transmitting access tokens in clear. In Django, access tokens include the login/password, the session cookie, and password reset tokens. (You can\u2019t do much to protect password reset tokens if you\u2019re sending them by email.)", "Protecting sensitive areas such as the user account or the admin isn\u2019t sufficient, because the same session cookie is used for HTTP and HTTPS. Your web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS requests to Django.", "Once you\u2019ve set up HTTPS, enable the following settings.", "Set this to True to avoid transmitting the CSRF cookie over HTTP accidentally.", "Set this to True to avoid transmitting the session cookie over HTTP accidentally.", "Setting DEBUG = False disables several features that are only useful in development. In addition, you can tune the following settings.", "Consider using cached sessions to improve performance.", "If using database-backed sessions, regularly clear old sessions to avoid storing unnecessary data.", "Enabling persistent database connections can result in a nice speed-up when connecting to the database accounts for a significant part of the request processing time.", "This helps a lot on virtualized hosts with limited network performance.", "Enabling the cached template loader often improves performance drastically, as it avoids compiling each template every time it needs to be rendered. See the template loaders docs for more information.", "By the time you push your code to production, it\u2019s hopefully robust, but you can\u2019t rule out unexpected errors. Thankfully, Django can capture errors and notify you accordingly.", "Review your logging configuration before putting your website in production, and check that it works as expected as soon as you have received some traffic.", "See Logging for details on logging.", "ADMINS will be notified of 500 errors by email.", "MANAGERS will be notified of 404 errors. IGNORABLE_404_URLS can help filter out spurious reports.", "See How to manage error reporting for details on error reporting by email.", "Error reporting by email doesn\u2019t scale very well", "Consider using an error monitoring system such as Sentry before your inbox is flooded by reports. Sentry can also aggregate logs.", "Django includes default views and templates for several HTTP error codes. You may want to override the default templates by creating the following templates in your root template directory: 404.html, 500.html, 403.html, and 400.html. The default error views that use these templates should suffice for 99% of web applications, but you can customize them as well."]}, {"name": "dispatch.receiver()", "path": "topics/signals#django.dispatch.receiver", "type": "django.dispatch", "text": []}, {"name": "dispatch.Signal", "path": "topics/signals#django.dispatch.Signal", "type": "django.dispatch", "text": []}, {"name": "dispatch.Signal.connect()", "path": "topics/signals#django.dispatch.Signal.connect", "type": "django.dispatch", "text": []}, {"name": "dispatch.Signal.disconnect()", "path": "topics/signals#django.dispatch.Signal.disconnect", "type": "django.dispatch", "text": []}, {"name": "dispatch.Signal.send()", "path": "topics/signals#django.dispatch.Signal.send", "type": "django.dispatch", "text": []}, {"name": "dispatch.Signal.send_robust()", "path": "topics/signals#django.dispatch.Signal.send_robust", "type": "django.dispatch", "text": []}, {"name": "Django at a glance", "path": "intro/overview", "type": "Guides: Intro", "text": ["Because Django was developed in a fast-paced newsroom environment, it was designed to make common web development tasks fast and easy. Here\u2019s an informal overview of how to write a database-driven web app with Django.", "The goal of this document is to give you enough technical specifics to understand how Django works, but this isn\u2019t intended to be a tutorial or reference \u2013 but we\u2019ve got both! When you\u2019re ready to start a project, you can start with the tutorial or dive right into more detailed documentation.", "Although you can use Django without a database, it comes with an object-relational mapper in which you describe your database layout in Python code.", "The data-model syntax offers many rich ways of representing your models \u2013 so far, it\u2019s been solving many years\u2019 worth of database-schema problems. Here\u2019s a quick example:", "Next, run the Django command-line utilities to create the database tables automatically:", "The makemigrations command looks at all your available models and creates migrations for whichever tables don\u2019t already exist. migrate runs the migrations and creates tables in your database, as well as optionally providing much richer schema control.", "With that, you\u2019ve got a free, and rich, Python API to access your data. The API is created on the fly, no code generation necessary:", "Once your models are defined, Django can automatically create a professional, production ready administrative interface \u2013 a website that lets authenticated users add, change and delete objects. The only step required is to register your model in the admin site:", "The philosophy here is that your site is edited by a staff, or a client, or maybe just you \u2013 and you don\u2019t want to have to deal with creating backend interfaces only to manage content.", "One typical workflow in creating Django apps is to create models and get the admin sites up and running as fast as possible, so your staff (or clients) can start populating data. Then, develop the way data is presented to the public.", "A clean, elegant URL scheme is an important detail in a high-quality web application. Django encourages beautiful URL design and doesn\u2019t put any cruft in URLs, like .php or .asp.", "To design URLs for an app, you create a Python module called a URLconf. A table of contents for your app, it contains a mapping between URL patterns and Python callback functions. URLconfs also serve to decouple URLs from Python code.", "Here\u2019s what a URLconf might look like for the Reporter/Article example above:", "The code above maps URL paths to Python callback functions (\u201cviews\u201d). The path strings use parameter tags to \u201ccapture\u201d values from the URLs. When a user requests a page, Django runs through each path, in order, and stops at the first one that matches the requested URL. (If none of them matches, Django calls a special-case 404 view.) This is blazingly fast, because the paths are compiled into regular expressions at load time.", "Once one of the URL patterns matches, Django calls the given view, which is a Python function. Each view gets passed a request object \u2013 which contains request metadata \u2013 and the values captured in the pattern.", "For example, if a user requested the URL \u201c/articles/2005/05/39323/\u201d, Django would call the function news.views.article_detail(request,\nyear=2005, month=5, pk=39323).", "Each view is responsible for doing one of two things: Returning an HttpResponse object containing the content for the requested page, or raising an exception such as Http404. The rest is up to you.", "Generally, a view retrieves data according to the parameters, loads a template and renders the template with the retrieved data. Here\u2019s an example view for year_archive from above:", "This example uses Django\u2019s template system, which has several powerful features but strives to stay simple enough for non-programmers to use.", "The code above loads the news/year_archive.html template.", "Django has a template search path, which allows you to minimize redundancy among templates. In your Django settings, you specify a list of directories to check for templates with DIRS. If a template doesn\u2019t exist in the first directory, it checks the second, and so on.", "Let\u2019s say the news/year_archive.html template was found. Here\u2019s what that might look like:", "Variables are surrounded by double-curly braces. {{ article.headline }} means \u201cOutput the value of the article\u2019s headline attribute.\u201d But dots aren\u2019t used only for attribute lookup. They also can do dictionary-key lookup, index lookup and function calls.", "Note {{ article.pub_date|date:\"F j, Y\" }} uses a Unix-style \u201cpipe\u201d (the \u201c|\u201d character). This is called a template filter, and it\u2019s a way to filter the value of a variable. In this case, the date filter formats a Python datetime object in the given format (as found in PHP\u2019s date function).", "You can chain together as many filters as you\u2019d like. You can write custom template filters. You can write custom template tags, which run custom Python code behind the scenes.", "Finally, Django uses the concept of \u201ctemplate inheritance\u201d. That\u2019s what the {% extends \"base.html\" %} does. It means \u201cFirst load the template called \u2018base\u2019, which has defined a bunch of blocks, and fill the blocks with the following blocks.\u201d In short, that lets you dramatically cut down on redundancy in templates: each template has to define only what\u2019s unique to that template.", "Here\u2019s what the \u201cbase.html\u201d template, including the use of static files, might look like:", "Simplistically, it defines the look-and-feel of the site (with the site\u2019s logo), and provides \u201choles\u201d for child templates to fill. This means that a site redesign can be done by changing a single file \u2013 the base template.", "It also lets you create multiple versions of a site, with different base templates, while reusing child templates. Django\u2019s creators have used this technique to create strikingly different mobile versions of sites by only creating a new base template.", "Note that you don\u2019t have to use Django\u2019s template system if you prefer another system. While Django\u2019s template system is particularly well-integrated with Django\u2019s model layer, nothing forces you to use it. For that matter, you don\u2019t have to use Django\u2019s database API, either. You can use another database abstraction layer, you can read XML files, you can read files off disk, or anything you want. Each piece of Django \u2013 models, views, templates \u2013 is decoupled from the next.", "This has been only a quick overview of Django\u2019s functionality. Some more useful features:", "The next steps are for you to download Django, read the tutorial and join the community. Thanks for your interest!"]}, {"name": "Django Exceptions", "path": "ref/exceptions", "type": "API", "text": ["Django raises some of its own exceptions as well as standard Python exceptions.", "Django core exception classes are defined in django.core.exceptions.", "This exception is raised when attempting to use models before the app loading process, which initializes the ORM, is complete.", "The base class for Model.DoesNotExist exceptions. A try/except for ObjectDoesNotExist will catch DoesNotExist exceptions for all models.", "See get().", "EmptyResultSet may be raised during query generation if a query won\u2019t return any results. Most Django projects won\u2019t encounter this exception, but it might be useful for implementing custom lookups and expressions.", "The FieldDoesNotExist exception is raised by a model\u2019s _meta.get_field() method when the requested field does not exist on the model or on the model\u2019s parents.", "The base class for Model.MultipleObjectsReturned exceptions. A try/except for MultipleObjectsReturned will catch MultipleObjectsReturned exceptions for all models.", "See get().", "The SuspiciousOperation exception is raised when a user has performed an operation that should be considered suspicious from a security perspective, such as tampering with a session cookie. Subclasses of SuspiciousOperation include:", "If a SuspiciousOperation exception reaches the ASGI/WSGI handler level it is logged at the Error level and results in a HttpResponseBadRequest. See the logging documentation for more information.", "The PermissionDenied exception is raised when a user does not have permission to perform the action requested.", "The ViewDoesNotExist exception is raised by django.urls when a requested view does not exist.", "The MiddlewareNotUsed exception is raised when a middleware is not used in the server configuration.", "The ImproperlyConfigured exception is raised when Django is somehow improperly configured \u2013 for example, if a value in settings.py is incorrect or unparseable.", "The FieldError exception is raised when there is a problem with a model field. This can happen for several reasons:", "The ValidationError exception is raised when data fails form or model field validation. For more information about validation, see Form and Field Validation, Model Field Validation and the Validator Reference.", "ValidationErrors that don\u2019t belong to a particular field in a form or model are classified as NON_FIELD_ERRORS. This constant is used as a key in dictionaries that otherwise map fields to their respective list of errors.", "The BadRequest exception is raised when the request cannot be processed due to a client error. If a BadRequest exception reaches the ASGI/WSGI handler level it results in a HttpResponseBadRequest.", "The RequestAborted exception is raised when an HTTP body being read in by the handler is cut off midstream and the client connection closes, or when the client does not send data and hits a timeout where the server closes the connection.", "It is internal to the HTTP handler modules and you are unlikely to see it elsewhere. If you are modifying HTTP handling code, you should raise this when you encounter an aborted request to make sure the socket is closed cleanly.", "The SynchronousOnlyOperation exception is raised when code that is only allowed in synchronous Python code is called from an asynchronous context (a thread with a running asynchronous event loop). These parts of Django are generally heavily reliant on thread-safety to function and don\u2019t work correctly under coroutines sharing the same thread.", "If you are trying to call code that is synchronous-only from an asynchronous thread, then create a synchronous thread and call it in that. You can accomplish this is with asgiref.sync.sync_to_async().", "URL Resolver exceptions are defined in django.urls.", "The Resolver404 exception is raised by resolve() if the path passed to resolve() doesn\u2019t map to a view. It\u2019s a subclass of django.http.Http404.", "The NoReverseMatch exception is raised by django.urls when a matching URL in your URLconf cannot be identified based on the parameters supplied.", "Database exceptions may be imported from django.db.", "Django wraps the standard database exceptions so that your Django code has a guaranteed common implementation of these classes.", "The Django wrappers for database exceptions behave exactly the same as the underlying database exceptions. See PEP 249, the Python Database API Specification v2.0, for further information.", "As per PEP 3134, a __cause__ attribute is set with the original (underlying) database exception, allowing access to any additional information provided.", "Raised to prevent deletion of referenced objects when using django.db.models.PROTECT. models.ProtectedError is a subclass of IntegrityError.", "Raised to prevent deletion of referenced objects when using django.db.models.RESTRICT. models.RestrictedError is a subclass of IntegrityError.", "HTTP exceptions may be imported from django.http.", "UnreadablePostError is raised when a user cancels an upload.", "Sessions exceptions are defined in django.contrib.sessions.exceptions.", "SessionInterrupted is raised when a session is destroyed in a concurrent request. It\u2019s a subclass of BadRequest.", "Transaction exceptions are defined in django.db.transaction.", "TransactionManagementError is raised for any and all problems related to database transactions.", "Exceptions provided by the django.test package.", "RedirectCycleError is raised when the test client detects a loop or an overly long chain of redirects.", "Django raises built-in Python exceptions when appropriate as well. See the Python documentation for further information on the Built-in Exceptions."]}, {"name": "Django settings", "path": "topics/settings", "type": "Guides", "text": ["A Django settings file contains all the configuration of your Django installation. This document explains how settings work and which settings are available.", "A settings file is just a Python module with module-level variables.", "Here are a couple of example settings:", "Note", "If you set DEBUG to False, you also need to properly set the ALLOWED_HOSTS setting.", "Because a settings file is a Python module, the following apply:", "It can assign settings dynamically using normal Python syntax. For example:", "When you use Django, you have to tell it which settings you\u2019re using. Do this by using an environment variable, DJANGO_SETTINGS_MODULE.", "The value of DJANGO_SETTINGS_MODULE should be in Python path syntax, e.g. mysite.settings. Note that the settings module should be on the Python import search path.", "When using django-admin, you can either set the environment variable once, or explicitly pass in the settings module each time you run the utility.", "Example (Unix Bash shell):", "Example (Windows shell):", "Use the --settings command-line argument to specify the settings manually:", "In your live server environment, you\u2019ll need to tell your WSGI application what settings file to use. Do that with os.environ:", "Read the Django mod_wsgi documentation for more information and other common elements to a Django WSGI application.", "A Django settings file doesn\u2019t have to define any settings if it doesn\u2019t need to. Each setting has a sensible default value. These defaults live in the module django/conf/global_settings.py.", "Here\u2019s the algorithm Django uses in compiling settings:", "Note that a settings file should not import from global_settings, because that\u2019s redundant.", "The command python manage.py diffsettings displays differences between the current settings file and Django\u2019s default settings.", "For more, see the diffsettings documentation.", "In your Django apps, use settings by importing the object django.conf.settings. Example:", "Note that django.conf.settings isn\u2019t a module \u2013 it\u2019s an object. So importing individual settings is not possible:", "Also note that your code should not import from either global_settings or your own settings file. django.conf.settings abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings.", "You shouldn\u2019t alter settings in your applications at runtime. For example, don\u2019t do this in a view:", "The only place you should assign to settings is in a settings file.", "Because a settings file contains sensitive information, such as the database password, you should make every attempt to limit access to it. For example, change its file permissions so that only you and your web server\u2019s user can read it. This is especially important in a shared-hosting environment.", "For a full list of available settings, see the settings reference.", "There\u2019s nothing stopping you from creating your own settings, for your own Django apps, but follow these guidelines:", "For settings that are sequences, Django itself uses lists, but this is only a convention.", "In some cases, you might want to bypass the DJANGO_SETTINGS_MODULE environment variable. For example, if you\u2019re using the template system by itself, you likely don\u2019t want to have to set up an environment variable pointing to a settings module.", "In these cases, you can configure Django\u2019s settings manually. Do this by calling:", "Example:", "Pass configure() as many keyword arguments as you\u2019d like, with each keyword argument representing a setting and its value. Each argument name should be all uppercase, with the same name as the settings described above. If a particular setting is not passed to configure() and is needed at some later point, Django will use the default setting value.", "Configuring Django in this fashion is mostly necessary \u2013 and, indeed, recommended \u2013 when you\u2019re using a piece of the framework inside a larger application.", "Consequently, when configured via settings.configure(), Django will not make any modifications to the process environment variables (see the documentation of TIME_ZONE for why this would normally occur). It\u2019s assumed that you\u2019re already in full control of your environment in these cases.", "If you\u2019d like default values to come from somewhere other than django.conf.global_settings, you can pass in a module or class that provides the default settings as the default_settings argument (or as the first positional argument) in the call to configure().", "In this example, default settings are taken from myapp_defaults, and the DEBUG setting is set to True, regardless of its value in myapp_defaults:", "The following example, which uses myapp_defaults as a positional argument, is equivalent:", "Normally, you will not need to override the defaults in this fashion. The Django defaults are sufficiently tame that you can safely use them. Be aware that if you do pass in a new default module, it entirely replaces the Django defaults, so you must specify a value for every possible setting that might be used in that code you are importing. Check in django.conf.settings.global_settings for the full list.", "If you\u2019re not setting the DJANGO_SETTINGS_MODULE environment variable, you must call configure() at some point before using any code that reads settings.", "If you don\u2019t set DJANGO_SETTINGS_MODULE and don\u2019t call configure(), Django will raise an ImportError exception the first time a setting is accessed.", "If you set DJANGO_SETTINGS_MODULE, access settings values somehow, then call configure(), Django will raise a RuntimeError indicating that settings have already been configured. There is a property for this purpose:", "For example:", "Also, it\u2019s an error to call configure() more than once, or to call configure() after any setting has been accessed.", "It boils down to this: Use exactly one of either configure() or DJANGO_SETTINGS_MODULE. Not both, and not neither.", "If you\u2019re using components of Django \u201cstandalone\u201d \u2013 for example, writing a Python script which loads some Django templates and renders them, or uses the ORM to fetch some data \u2013 there\u2019s one more step you\u2019ll need in addition to configuring settings.", "After you\u2019ve either set DJANGO_SETTINGS_MODULE or called configure(), you\u2019ll need to call django.setup() to load your settings and populate Django\u2019s application registry. For example:", "Note that calling django.setup() is only necessary if your code is truly standalone. When invoked by your web server, or through django-admin, Django will handle this for you.", "django.setup() may only be called once.", "Therefore, avoid putting reusable application logic in standalone scripts so that you have to import from the script elsewhere in your application. If you can\u2019t avoid that, put the call to django.setup() inside an if block:", "See also"]}, {"name": "Django shortcut functions", "path": "topics/http/shortcuts", "type": "Guides", "text": ["The package django.shortcuts collects helper functions and classes that \u201cspan\u201d multiple levels of MVC. In other words, these functions/classes introduce controlled coupling for convenience\u2019s sake.", "Combines a given template with a given context dictionary and returns an HttpResponse object with that rendered text.", "Django does not provide a shortcut function which returns a TemplateResponse because the constructor of TemplateResponse offers the same level of convenience as render().", "The following example renders the template myapp/index.html with the MIME type application/xhtml+xml:", "This example is equivalent to:", "Returns an HttpResponseRedirect to the appropriate URL for the arguments passed.", "The arguments could be:", "By default issues a temporary redirect; pass permanent=True to issue a permanent redirect.", "You can use the redirect() function in a number of ways.", "By passing some object; that object\u2019s get_absolute_url() method will be called to figure out the redirect URL:", "By passing the name of a view and optionally some positional or keyword arguments; the URL will be reverse resolved using the reverse() method:", "By passing a hardcoded URL to redirect to:", "This also works with full URLs:", "By default, redirect() returns a temporary redirect. All of the above forms accept a permanent argument; if set to True a permanent redirect will be returned:", "Calls get() on a given model manager, but it raises Http404 instead of the model\u2019s DoesNotExist exception.", "The following example gets the object with the primary key of 1 from MyModel:", "This example is equivalent to:", "The most common use case is to pass a Model, as shown above. However, you can also pass a QuerySet instance:", "The above example is a bit contrived since it\u2019s equivalent to doing:", "but it can be useful if you are passed the queryset variable from somewhere else.", "Finally, you can also use a Manager. This is useful for example if you have a custom manager:", "You can also use related managers:", "Note: As with get(), a MultipleObjectsReturned exception will be raised if more than one object is found.", "Returns the result of filter() on a given model manager cast to a list, raising Http404 if the resulting list is empty.", "The following example gets all published objects from MyModel:", "This example is equivalent to:"]}, {"name": "Django Utils", "path": "ref/utils", "type": "API", "text": ["This document covers all stable modules in django.utils. Most of the modules in django.utils are designed for internal use and only the following parts can be considered stable and thus backwards compatible as per the internal release deprecation policy.", "This module contains helper functions for controlling HTTP caching. It does so by managing the Vary header of responses. It includes functions to patch the header of response objects directly and decorators that change functions to do that header-patching themselves.", "For information on the Vary header, see RFC 7231#section-7.1.4.", "Essentially, the Vary HTTP header defines which headers a cache should take into account when building its cache key. Requests with the same path but different header content for headers named in Vary need to get different cache keys to prevent delivery of wrong content.", "For example, internationalization middleware would need to distinguish caches by the Accept-language header.", "This function patches the Cache-Control header by adding all keyword arguments to it. The transformation is as follows:", "Returns the max-age from the response Cache-Control header as an integer (or None if it wasn\u2019t found or wasn\u2019t an integer).", "Adds some useful headers to the given HttpResponse object:", "Each header is only added if it isn\u2019t already set.", "cache_timeout is in seconds. The CACHE_MIDDLEWARE_SECONDS setting is used by default.", "Adds a Cache-Control: max-age=0, no-cache, no-store, must-revalidate,\nprivate header to a response to indicate that a page should never be cached.", "Adds (or updates) the Vary header in the given HttpResponse object. newheaders is a list of header names that should be in Vary. If headers contains an asterisk, then Vary header will consist of a single asterisk '*', according to RFC 7231#section-7.1.4. Otherwise, existing headers in Vary aren\u2019t removed.", "Returns a cache key based on the request path. It can be used in the request phase because it pulls the list of headers to take into account from the global path registry and uses those to build a cache key to check against.", "If there is no headerlist stored, the page needs to be rebuilt, so this function returns None.", "Learns what headers to take into account for some request path from the response object. It stores those headers in a global path registry so that later access to that path will know what headers to take into account without building the response object itself. The headers are named in the Vary header of the response, but we want to prevent response generation.", "The list of headers to use for cache key generation is stored in the same cache as the pages themselves. If the cache ages some data out of the cache, this means that we have to build the response once to get at the Vary header and so at the list of headers to use for the cache key.", "The functions defined in this module share the following properties:", "Parses a string and returns a datetime.date.", "Parses a string and returns a datetime.time.", "UTC offsets aren\u2019t supported; if value describes one, the result is None.", "Parses a string and returns a datetime.datetime.", "UTC offsets are supported; if value describes one, the result\u2019s tzinfo attribute is a datetime.timezone instance.", "Parses a string and returns a datetime.timedelta.", "Expects data in the format \"DD HH:MM:SS.uuuuuu\", \"DD HH:MM:SS,uuuuuu\", or as specified by ISO 8601 (e.g. P4DT1H15M20S which is equivalent to 4 1:15:20) or PostgreSQL\u2019s day-time interval format (e.g. 3 days 04:05:06).", "Converts a function decorator into a method decorator. It can be used to decorate methods or classes; in the latter case, name is the name of the method to be decorated and is required.", "decorator may also be a list or tuple of functions. They are wrapped in reverse order so that the call order is the order in which the functions appear in the list/tuple.", "See decorating class based views for example usage.", "Given a middleware class, returns a view decorator. This lets you use middleware functionality on a per-view basis. The middleware is created with no params passed.", "It assumes middleware that\u2019s compatible with the old style of Django 1.9 and earlier (having methods like process_request(), process_exception(), and process_response()).", "Like decorator_from_middleware, but returns a function that accepts the arguments to be passed to the middleware_class. For example, the cache_page() decorator is created from the CacheMiddleware like this:", "Marks a middleware as synchronous-only. (The default in Django, but this allows you to future-proof if the default ever changes in a future release.)", "Marks a middleware as asynchronous-only. Django will wrap it in an asynchronous event loop when it is called from the WSGI request path.", "Marks a middleware as sync and async compatible, this allows to avoid converting requests. You must implement detection of the current request type to use this decorator. See asynchronous middleware documentation for details.", "Returns a str object representing arbitrary object s. Treats bytestrings using the encoding codec.", "If strings_only is True, don\u2019t convert (some) non-string-like objects.", "Determine if the object instance is of a protected type.", "Objects of protected types are preserved as-is when passed to force_str(strings_only=True).", "Similar to smart_str(), except that lazy instances are resolved to strings, rather than kept as lazy objects.", "If strings_only is True, don\u2019t convert (some) non-string-like objects.", "Returns a bytestring version of arbitrary object s, encoded as specified in encoding.", "If strings_only is True, don\u2019t convert (some) non-string-like objects.", "Similar to smart_bytes, except that lazy instances are resolved to bytestrings, rather than kept as lazy objects.", "If strings_only is True, don\u2019t convert (some) non-string-like objects.", "Convert an Internationalized Resource Identifier (IRI) portion to a URI portion that is suitable for inclusion in a URL.", "This is the algorithm from section 3.1 of RFC 3987#section-3.1, slightly simplified since the input is assumed to be a string rather than an arbitrary byte stream.", "Takes an IRI (string or UTF-8 bytes) and returns a string containing the encoded result.", "Converts a Uniform Resource Identifier into an Internationalized Resource Identifier.", "This is an algorithm from section 3.2 of RFC 3987#section-3.2.", "Takes a URI in ASCII bytes and returns a string containing the encoded result.", "Convert a file system path to a URI portion that is suitable for inclusion in a URL. The path is assumed to be either UTF-8 bytes, string, or a Path.", "This method will encode certain characters that would normally be recognized as special characters for URIs. Note that this method does not encode the \u2018 character, as it is a valid character within URIs. See encodeURIComponent() JavaScript function for more details.", "Returns an ASCII string containing the encoded result.", "Escapes the unsafe characters from the path portion of a Uniform Resource Identifier (URI).", "Sample usage:", "For simplifying the selection of a generator use feedgenerator.DefaultFeed which is currently Rss201rev2Feed", "For definitions of the different versions of RSS, see: https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss", "Creates a TagURI.", "See https://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28/howto-atom-id", "Base class for all syndication feeds. Subclasses should provide write().", "Initialize the feed with the given dictionary of metadata, which applies to the entire feed.", "Any extra keyword arguments you pass to __init__ will be stored in self.feed.", "All parameters should be strings, except categories, which should be a sequence of strings.", "Adds an item to the feed. All args are expected to be strings except pubdate and updateddate, which are datetime.datetime objects, and enclosures, which is a list of Enclosure instances.", "Return extra attributes to place on the root (i.e. feed/channel) element. Called from write().", "Add elements in the root (i.e. feed/channel) element. Called from write().", "Return extra attributes to place on each item (i.e. item/entry) element.", "Add elements on each item (i.e. item/entry) element.", "Outputs the feed in the given encoding to outfile, which is a file-like object. Subclasses should override this.", "Returns the feed in the given encoding as a string.", "Returns the latest pubdate or updateddate for all items in the feed. If no items have either of these attributes this returns the current UTC date/time.", "Represents an RSS enclosure", "Spec: https://cyber.harvard.edu/rss/rss.html", "Spec: http://backend.userland.com/rss091", "Spec: RFC 4287", "The @cached_property decorator caches the result of a method with a single self argument as a property. The cached result will persist as long as the instance does, so if the instance is passed around and the function subsequently invoked, the cached result will be returned.", "Consider a typical case, where a view might need to call a model\u2019s method to perform some computation, before placing the model instance into the context, where the template might invoke the method once more:", "And in the template you would have:", "Here, friends() will be called twice. Since the instance person in the view and the template are the same, decorating the friends() method with @cached_property can avoid that:", "Note that as the method is now a property, in Python code it will need to be accessed appropriately:", "The cached value can be treated like an ordinary attribute of the instance:", "Because of the way the descriptor protocol works, using del (or delattr) on a cached_property that hasn\u2019t been accessed raises AttributeError.", "As well as offering potential performance advantages, @cached_property can ensure that an attribute\u2019s value does not change unexpectedly over the life of an instance. This could occur with a method whose computation is based on datetime.now(), or if a change were saved to the database by some other process in the brief interval between subsequent invocations of a method on the same instance.", "You can make cached properties of methods. For example, if you had an expensive get_friends() method and wanted to allow calling it without retrieving the cached value, you could write:", "While person.get_friends() will recompute the friends on each call, the value of the cached property will persist until you delete it as described above:", "Similar to @classmethod, the @classproperty decorator converts the result of a method with a single cls argument into a property that can be accessed directly from the class.", "Django offers many utility functions (particularly in django.utils) that take a string as their first argument and do something to that string. These functions are used by template filters as well as directly in other code.", "If you write your own similar functions and deal with translations, you\u2019ll face the problem of what to do when the first argument is a lazy translation object. You don\u2019t want to convert it to a string immediately, because you might be using this function outside of a view (and hence the current thread\u2019s locale setting will not be correct).", "For cases like this, use the django.utils.functional.keep_lazy() decorator. It modifies the function so that if it\u2019s called with a lazy translation as one of its arguments, the function evaluation is delayed until it needs to be converted to a string.", "For example:", "The keep_lazy() decorator takes a number of extra arguments (*args) specifying the type(s) that the original function can return. A common use case is to have functions that return text. For these, you can pass the str type to keep_lazy (or use the keep_lazy_text() decorator described in the next section).", "Using this decorator means you can write your function and assume that the input is a proper string, then add support for lazy translation objects at the end.", "A shortcut for keep_lazy(str)(func).", "If you have a function that returns text and you want to be able to take lazy arguments while delaying their evaluation, you can use this decorator:", "Usually you should build up HTML using Django\u2019s templates to make use of its autoescape mechanism, using the utilities in django.utils.safestring where appropriate. This module provides some additional low level utilities for escaping HTML.", "Returns the given text with ampersands, quotes and angle brackets encoded for use in HTML. The input is first coerced to a string and the output has mark_safe() applied.", "Similar to escape(), except that it doesn\u2019t operate on pre-escaped strings, so it will not double escape.", "This is similar to str.format(), except that it is appropriate for building up HTML fragments. All args and kwargs are passed through conditional_escape() before being passed to str.format().", "For the case of building up small HTML fragments, this function is to be preferred over string interpolation using % or str.format() directly, because it applies escaping to all arguments - just like the template system applies escaping by default.", "So, instead of writing:", "You should instead use:", "This has the advantage that you don\u2019t need to apply escape() to each argument and risk a bug and an XSS vulnerability if you forget one.", "Note that although this function uses str.format() to do the interpolation, some of the formatting options provided by str.format() (e.g. number formatting) will not work, since all arguments are passed through conditional_escape() which (ultimately) calls force_str() on the values.", "A wrapper of format_html(), for the common case of a group of arguments that need to be formatted using the same format string, and then joined using sep. sep is also passed through conditional_escape().", "args_generator should be an iterator that returns the sequence of args that will be passed to format_html(). For example:", "Tries to remove anything that looks like an HTML tag from the string, that is anything contained within <>.", "Absolutely NO guarantee is provided about the resulting string being HTML safe. So NEVER mark safe the result of a strip_tag call without escaping it first, for example with escape().", "For example:", "If value is \"<b>Joel</b> <button>is</button> a <span>slug</span>\" the return value will be \"Joel is a slug\".", "If you are looking for a more robust solution, take a look at the bleach Python library.", "The __html__() method on a class helps non-Django templates detect classes whose output doesn\u2019t require HTML escaping.", "This decorator defines the __html__() method on the decorated class by wrapping __str__() in mark_safe(). Ensure the __str__() method does indeed return text that doesn\u2019t require HTML escaping.", "A version of Python\u2019s urllib.parse.urlencode() function that can operate on MultiValueDict and non-string values.", "Formats the time to match the RFC 1123#section-5.2.14 date format as specified by HTTP RFC 7231#section-7.1.1.1.", "Accepts a floating point number expressed in seconds since the epoch in UTC\u2013such as that outputted by time.time(). If set to None, defaults to the current time.", "Outputs a string in the format Wdy, DD Mon YYYY HH:MM:SS GMT.", "Converts a base 36 string to an integer.", "Converts a positive integer to a base 36 string.", "Encodes a bytestring to a base64 string for use in URLs, stripping any trailing equal signs.", "Decodes a base64 encoded string, adding back any trailing equal signs that might have been stripped.", "Functions for working with Python modules.", "Imports a dotted module path and returns the attribute/class designated by the last name in the path. Raises ImportError if the import failed. For example:", "is equivalent to:", "Functions and classes for working with \u201csafe strings\u201d: strings that can be displayed safely without further escaping in HTML. Marking something as a \u201csafe string\u201d means that the producer of the string has already turned characters that should not be interpreted by the HTML engine (e.g. \u2018<\u2019) into the appropriate entities.", "A str subclass that has been specifically marked as \u201csafe\u201d (requires no further escaping) for HTML output purposes.", "Explicitly mark a string as safe for (HTML) output purposes. The returned object can be used everywhere a string is appropriate.", "Can be called multiple times on a single string.", "Can also be used as a decorator.", "For building up fragments of HTML, you should normally be using django.utils.html.format_html() instead.", "String marked safe will become unsafe again if modified. For example:", "A version of str.format() for when format_string, args, and/or kwargs contain lazy objects. The first argument is the string to be formatted. For example:", "This example allows translators to translate part of the URL. If \u201cperson\u201d is translated to \u201cpersona\u201d, the regular expression will match persona/(?P<pk>\\d+)/$, e.g. persona/5/.", "Converts a string to a URL slug by:", "For example:", "If you want to allow Unicode characters, pass allow_unicode=True. For example:", "In older versions, leading and trailing dashes and underscores are not removed.", "tzinfo instance that represents UTC.", "Returns a tzinfo instance that represents a time zone with a fixed offset from UTC.", "offset is a datetime.timedelta or an integer number of minutes. Use positive values for time zones east of UTC and negative values for west of UTC.", "Returns a tzinfo instance that represents the default time zone.", "Returns the name of the default time zone.", "Returns a tzinfo instance that represents the current time zone.", "Returns the name of the current time zone.", "Sets the current time zone. The timezone argument must be an instance of a tzinfo subclass or a time zone name.", "Unsets the current time zone.", "This is a Python context manager that sets the current time zone on entry with activate(), and restores the previously active time zone on exit. If the timezone argument is None, the current time zone is unset on entry with deactivate() instead.", "override is also usable as a function decorator.", "Converts an aware datetime to a different time zone, by default the current time zone.", "When value is omitted, it defaults to now().", "This function doesn\u2019t work on naive datetimes; use make_aware() instead.", "Uses localtime() to convert an aware datetime to a date() in a different time zone, by default the current time zone.", "When value is omitted, it defaults to now().", "This function doesn\u2019t work on naive datetimes.", "Returns a datetime that represents the current point in time. Exactly what\u2019s returned depends on the value of USE_TZ:", "Returns True if value is aware, False if it is naive. This function assumes that value is a datetime.", "Returns True if value is naive, False if it is aware. This function assumes that value is a datetime.", "Returns an aware datetime that represents the same point in time as value in timezone, value being a naive datetime. If timezone is set to None, it defaults to the current time zone.", "Deprecated since version 4.0: When using pytz, the pytz.AmbiguousTimeError exception is raised if you try to make value aware during a DST transition where the same time occurs twice (when reverting from DST). Setting is_dst to True or False will avoid the exception by choosing if the time is pre-transition or post-transition respectively.", "When using pytz, the pytz.NonExistentTimeError exception is raised if you try to make value aware during a DST transition such that the time never occurred. For example, if the 2:00 hour is skipped during a DST transition, trying to make 2:30 aware in that time zone will raise an exception. To avoid that you can use is_dst to specify how make_aware() should interpret such a nonexistent time. If is_dst=True then the above time would be interpreted as 2:30 DST time (equivalent to 1:30 local time). Conversely, if is_dst=False the time would be interpreted as 2:30 standard time (equivalent to 3:30 local time).", "The is_dst parameter has no effect when using non-pytz timezone implementations.", "The is_dst parameter is deprecated and will be removed in Django 5.0.", "Returns a naive datetime that represents in timezone the same point in time as value, value being an aware datetime. If timezone is set to None, it defaults to the current time zone.", "For a complete discussion on the usage of the following see the translation documentation.", "Translates message and returns it as a string.", "Translates message given the context and returns it as a string.", "For more information, see Contextual markers.", "Same as the non-lazy versions above, but using lazy execution.", "See lazy translations documentation.", "Marks strings for translation but doesn\u2019t translate them now. This can be used to store strings in global variables that should stay in the base language (because they might be used externally) and will be translated later.", "Translates singular and plural and returns the appropriate string based on number.", "Translates singular and plural and returns the appropriate string based on number and the context.", "Same as the non-lazy versions above, but using lazy execution.", "See lazy translations documentation.", "Fetches the translation object for a given language and activates it as the current translation object for the current thread.", "Deactivates the currently active translation object so that further _ calls will resolve against the default translation object, again.", "Makes the active translation object a NullTranslations() instance. This is useful when we want delayed translations to appear as the original string for some reason.", "A Python context manager that uses django.utils.translation.activate() to fetch the translation object for a given language, activates it as the translation object for the current thread and reactivates the previous active language on exit. Optionally, it can deactivate the temporary translation on exit with django.utils.translation.deactivate() if the deactivate argument is True. If you pass None as the language argument, a NullTranslations() instance is activated within the context.", "override is also usable as a function decorator.", "Checks whether there is a global language file for the given language code (e.g. \u2018fr\u2019, \u2018pt_BR\u2019). This is used to decide whether a user-provided language is available.", "Returns the currently selected language code. Returns None if translations are temporarily deactivated (by deactivate_all() or when None is passed to override()).", "Returns selected language\u2019s BiDi layout:", "Analyzes the request to find what language the user wants the system to show. Only languages listed in settings.LANGUAGES are taken into account. If the user requests a sublanguage where we have a main language, we send out the main language.", "If check_path is True, the function first checks the requested URL for whether its path begins with a language code listed in the LANGUAGES setting.", "Returns lang_code if it\u2019s in the LANGUAGES setting, possibly selecting a more generic variant. For example, 'es' is returned if lang_code is 'es-ar' and 'es' is in LANGUAGES but 'es-ar' isn\u2019t.", "If strict is False (the default), a country-specific variant may be returned when neither the language code nor its generic variant is found. For example, if only 'es-co' is in LANGUAGES, that\u2019s returned for lang_codes like 'es' and 'es-ar'. Those matches aren\u2019t returned if strict=True.", "Raises LookupError if nothing is found.", "Turns a language name (en-us) into a locale name (en_US).", "Turns a Django template into something that is understood by xgettext. It does so by translating the Django translation tags into standard gettext function invocations."]}, {"name": "django-admin and manage.py", "path": "ref/django-admin", "type": "API", "text": ["django-admin is Django\u2019s command-line utility for administrative tasks. This document outlines all it can do.", "In addition, manage.py is automatically created in each Django project. It does the same thing as django-admin but also sets the DJANGO_SETTINGS_MODULE environment variable so that it points to your project\u2019s settings.py file.", "The django-admin script should be on your system path if you installed Django via pip. If it\u2019s not in your path, ensure you have your virtual environment activated.", "Generally, when working on a single Django project, it\u2019s easier to use manage.py than django-admin. If you need to switch between multiple Django settings files, use django-admin with DJANGO_SETTINGS_MODULE or the --settings command line option.", "The command-line examples throughout this document use django-admin to be consistent, but any example can use manage.py or python -m django just as well.", "command should be one of the commands listed in this document. options, which is optional, should be zero or more of the options available for the given command.", "Run django-admin help to display usage information and a list of the commands provided by each application.", "Run django-admin help --commands to display a list of all available commands.", "Run django-admin help <command> to display a description of the given command and a list of its available options.", "Many commands take a list of \u201capp names.\u201d An \u201capp name\u201d is the basename of the package containing your models. For example, if your INSTALLED_APPS contains the string 'mysite.blog', the app name is blog.", "Run django-admin version to display the current Django version.", "The output follows the schema described in PEP 440:", "Use --verbosity, where it is supported, to specify the amount of notification and debug information that django-admin prints to the console.", "Uses the system check framework to inspect the entire Django project for common problems.", "By default, all apps will be checked. You can check a subset of apps by providing a list of app labels as arguments:", "The system check framework performs many different types of checks that are categorized with tags. You can use these tags to restrict the checks performed to just those in a particular category. For example, to perform only models and compatibility checks, run:", "Specifies the database to run checks requiring database access:", "By default, these checks will not be run.", "Lists all available tags.", "Activates some additional checks that are only relevant in a deployment setting.", "You can use this option in your local development environment, but since your local development settings module may not have many of your production settings, you will probably want to point the check command at a different settings module, either by setting the DJANGO_SETTINGS_MODULE environment variable, or by passing the --settings option:", "Or you could run it directly on a production or staging deployment to verify that the correct settings are in use (omitting --settings). You could even make it part of your integration test suite.", "Specifies the message level that will cause the command to exit with a non-zero status. Default is ERROR.", "Compiles .po files created by makemessages to .mo files for use with the built-in gettext support. See Internationalization and localization.", "Specifies the locale(s) to process. If not provided, all locales are processed.", "Specifies the locale(s) to exclude from processing. If not provided, no locales are excluded.", "Includes fuzzy translations into compiled files.", "Example usage:", "Ignores directories matching the given glob-style pattern. Use multiple times to ignore more.", "Example usage:", "Creates the cache tables for use with the database cache backend using the information from your settings file. See Django\u2019s cache framework for more information.", "Specifies the database in which the cache table(s) will be created. Defaults to default.", "Prints the SQL that would be run without actually running it, so you can customize it or use the migrations framework.", "Runs the command-line client for the database engine specified in your ENGINE setting, with the connection parameters specified in your USER, PASSWORD, etc., settings.", "This command assumes the programs are on your PATH so that a call to the program name (psql, mysql, sqlite3, sqlplus) will find the program in the right place. There\u2019s no way to specify the location of the program manually.", "Specifies the database onto which to open a shell. Defaults to default.", "Any arguments following a -- divider will be passed on to the underlying command-line client. For example, with PostgreSQL you can use the psql command\u2019s -c flag to execute a raw SQL query directly:", "On MySQL/MariaDB, you can do this with the mysql command\u2019s -e flag:", "Note", "Be aware that not all options set in the OPTIONS part of your database configuration in DATABASES are passed to the command-line client, e.g. 'isolation_level'.", "Displays differences between the current settings file and Django\u2019s default settings (or another settings file specified by --default).", "Settings that don\u2019t appear in the defaults are followed by \"###\". For example, the default settings don\u2019t define ROOT_URLCONF, so ROOT_URLCONF is followed by \"###\" in the output of diffsettings.", "Displays all settings, even if they have Django\u2019s default value. Such settings are prefixed by \"###\".", "The settings module to compare the current settings against. Leave empty to compare against Django\u2019s default settings.", "Specifies the output format. Available values are hash and unified. hash is the default mode that displays the output that\u2019s described above. unified displays the output similar to diff -u. Default settings are prefixed with a minus sign, followed by the changed setting prefixed with a plus sign.", "Outputs to standard output all data in the database associated with the named application(s).", "If no application name is provided, all installed applications will be dumped.", "The output of dumpdata can be used as input for loaddata.", "Note that dumpdata uses the default manager on the model for selecting the records to dump. If you\u2019re using a custom manager as the default manager and it filters some of the available records, not all of the objects will be dumped.", "Uses Django\u2019s base manager, dumping records which might otherwise be filtered or modified by a custom manager.", "Specifies the serialization format of the output. Defaults to JSON. Supported formats are listed in Serialization formats.", "Specifies the number of indentation spaces to use in the output. Defaults to None which displays all data on single line.", "Prevents specific applications or models (specified in the form of app_label.ModelName) from being dumped. If you specify a model name, then only that model will be excluded, rather than the entire application. You can also mix application names and model names.", "If you want to exclude multiple applications, pass --exclude more than once:", "Specifies the database from which data will be dumped. Defaults to default.", "Uses the natural_key() model method to serialize any foreign key and many-to-many relationship to objects of the type that defines the method. If you\u2019re dumping contrib.auth Permission objects or contrib.contenttypes ContentType objects, you should probably use this flag. See the natural keys documentation for more details on this and the next option.", "Omits the primary key in the serialized data of this object since it can be calculated during deserialization.", "Outputs only the objects specified by a comma separated list of primary keys. This is only available when dumping one model. By default, all the records of the model are output.", "Specifies a file to write the serialized data to. By default, the data goes to standard output.", "When this option is set and --verbosity is greater than 0 (the default), a progress bar is shown in the terminal.", "The output file can be compressed with one of the bz2, gz, lzma, or xz formats by ending the filename with the corresponding extension. For example, to output the data as a compressed JSON file:", "Removes all data from the database and re-executes any post-synchronization handlers. The table of which migrations have been applied is not cleared.", "If you would rather start from an empty database and re-run all migrations, you should drop and recreate the database and then run migrate instead.", "Suppresses all user prompts.", "Specifies the database to flush. Defaults to default.", "Introspects the database tables in the database pointed-to by the NAME setting and outputs a Django model module (a models.py file) to standard output.", "You may choose what tables or views to inspect by passing their names as arguments. If no arguments are provided, models are created for views only if the --include-views option is used. Models for partition tables are created on PostgreSQL if the --include-partitions option is used.", "Use this if you have a legacy database with which you\u2019d like to use Django. The script will inspect the database and create a model for each table within it.", "As you might expect, the created models will have an attribute for every field in the table. Note that inspectdb has a few special cases in its field-name output:", "This feature is meant as a shortcut, not as definitive model generation. After you run it, you\u2019ll want to look over the generated models yourself to make customizations. In particular, you\u2019ll need to rearrange models\u2019 order, so that models that refer to other models are ordered properly.", "Django doesn\u2019t create database defaults when a default is specified on a model field. Similarly, database defaults aren\u2019t translated to model field defaults or detected in any fashion by inspectdb.", "By default, inspectdb creates unmanaged models. That is, managed = False in the model\u2019s Meta class tells Django not to manage each table\u2019s creation, modification, and deletion. If you do want to allow Django to manage the table\u2019s lifecycle, you\u2019ll need to change the managed option to True (or remove it because True is its default value).", "Specifies the database to introspect. Defaults to default.", "If this option is provided, models are also created for partitions.", "Only support for PostgreSQL is implemented.", "If this option is provided, models are also created for database views.", "Searches for and loads the contents of the named fixture into the database.", "Specifies the database into which the data will be loaded. Defaults to default.", "Ignores fields and models that may have been removed since the fixture was originally generated.", "Specifies a single app to look for fixtures in rather than looking in all apps.", "Specifies the serialization format (e.g., json or xml) for fixtures read from stdin.", "Excludes loading the fixtures from the given applications and/or models (in the form of app_label or app_label.ModelName). Use the option multiple times to exclude more than one app or model.", "A fixture is a collection of files that contain the serialized contents of the database. Each fixture has a unique name, and the files that comprise the fixture can be distributed over multiple directories, in multiple applications.", "Django will search in three locations for fixtures:", "Django will load any and all fixtures it finds in these locations that match the provided fixture names.", "If the named fixture has a file extension, only fixtures of that type will be loaded. For example:", "would only load JSON fixtures called mydata. The fixture extension must correspond to the registered name of a serializer (e.g., json or xml).", "If you omit the extensions, Django will search all available fixture types for a matching fixture. For example:", "would look for any fixture of any fixture type called mydata. If a fixture directory contained mydata.json, that fixture would be loaded as a JSON fixture.", "The fixtures that are named can include directory components. These directories will be included in the search path. For example:", "would search <app_label>/fixtures/foo/bar/mydata.json for each installed application, <dirname>/foo/bar/mydata.json for each directory in FIXTURE_DIRS, and the literal path foo/bar/mydata.json.", "When fixture files are processed, the data is saved to the database as is. Model defined save() methods are not called, and any pre_save or post_save signals will be called with raw=True since the instance only contains attributes that are local to the model. You may, for example, want to disable handlers that access related fields that aren\u2019t present during fixture loading and would otherwise raise an exception:", "You could also write a decorator to encapsulate this logic:", "Just be aware that this logic will disable the signals whenever fixtures are deserialized, not just during loaddata.", "Note that the order in which fixture files are processed is undefined. However, all fixture data is installed as a single transaction, so data in one fixture can reference data in another fixture. If the database backend supports row-level constraints, these constraints will be checked at the end of the transaction.", "The dumpdata command can be used to generate input for loaddata.", "Fixtures may be compressed in zip, gz, bz2, lzma, or xz format. For example:", "would look for any of mydata.json, mydata.json.zip, mydata.json.gz, mydata.json.bz2, mydata.json.lzma, or mydata.json.xz. The first file contained within a compressed archive is used.", "Note that if two fixtures with the same name but different fixture type are discovered (for example, if mydata.json and mydata.xml.gz were found in the same fixture directory), fixture installation will be aborted, and any data installed in the call to loaddata will be removed from the database.", "MySQL with MyISAM and fixtures", "The MyISAM storage engine of MySQL doesn\u2019t support transactions or constraints, so if you use MyISAM, you won\u2019t get validation of fixture data, or a rollback if multiple transaction files are found.", "Support for XZ archives (.xz) and LZMA archives (.lzma) was added.", "If you\u2019re in a multi-database setup, you might have fixture data that you want to load onto one database, but not onto another. In this situation, you can add a database identifier into the names of your fixtures.", "For example, if your DATABASES setting has a \u2018master\u2019 database defined, name the fixture mydata.master.json or mydata.master.json.gz and the fixture will only be loaded when you specify you want to load data into the master database.", "You can use a dash as the fixture name to load input from sys.stdin. For example:", "When reading from stdin, the --format option is required to specify the serialization format of the input (e.g., json or xml).", "Loading from stdin is useful with standard input and output redirections. For example:", "Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the Django tree) or locale (for project and application) directory. After making changes to the messages files you need to compile them with compilemessages for use with the builtin gettext support. See the i18n documentation for details.", "This command doesn\u2019t require configured settings. However, when settings aren\u2019t configured, the command can\u2019t ignore the MEDIA_ROOT and STATIC_ROOT directories or include LOCALE_PATHS.", "Updates the message files for all available languages.", "Specifies a list of file extensions to examine (default: html, txt, py or js if --domain is js).", "Example usage:", "Separate multiple extensions with commas or use -e or --extension multiple times:", "Specifies the locale(s) to process.", "Specifies the locale(s) to exclude from processing. If not provided, no locales are excluded.", "Example usage:", "Specifies the domain of the messages files. Supported options are:", "Follows symlinks to directories when looking for new translation strings.", "Example usage:", "Ignores files or directories matching the given glob-style pattern. Use multiple times to ignore more.", "These patterns are used by default: 'CVS', '.*', '*~', '*.pyc'.", "Example usage:", "Disables the default values of --ignore.", "Disables breaking long message lines into several lines in language files.", "Suppresses writing \u2018#: filename:line\u2019 comment lines in language files. Using this option makes it harder for technically skilled translators to understand each message\u2019s context.", "Controls #: filename:line comment lines in language files. If the option is:", "Requires gettext 0.19 or newer.", "Prevents deleting the temporary .pot files generated before creating the .po file. This is useful for debugging errors which may prevent the final language files from being created.", "See also", "See Customizing the makemessages command for instructions on how to customize the keywords that makemessages passes to xgettext.", "Creates new migrations based on the changes detected to your models. Migrations, their relationship with apps and more are covered in depth in the migrations documentation.", "Providing one or more app names as arguments will limit the migrations created to the app(s) specified and any dependencies needed (the table at the other end of a ForeignKey, for example).", "To add migrations to an app that doesn\u2019t have a migrations directory, run makemigrations with the app\u2019s app_label.", "Suppresses all user prompts. If a suppressed prompt cannot be resolved automatically, the command will exit with error code 3.", "Outputs an empty migration for the specified apps, for manual editing. This is for advanced users and should not be used unless you are familiar with the migration format, migration operations, and the dependencies between your migrations.", "Shows what migrations would be made without actually writing any migrations files to disk. Using this option along with --verbosity 3 will also show the complete migrations files that would be written.", "Enables fixing of migration conflicts.", "Allows naming the generated migration(s) instead of using a generated name. The name must be a valid Python identifier.", "Generate migration files without Django version and timestamp header.", "Makes makemigrations exit with a non-zero status when model changes without migrations are detected.", "Support for calling makemigrations without an active database connection was added. In that case, check for a consistent migration history is skipped.", "Synchronizes the database state with the current set of models and migrations. Migrations, their relationship with apps and more are covered in depth in the migrations documentation.", "The behavior of this command changes depending on the arguments provided:", "Warning", "When unapplying migrations, all dependent migrations will also be unapplied, regardless of <app_label>. You can use --plan to check which migrations will be unapplied.", "Specifies the database to migrate. Defaults to default.", "Marks the migrations up to the target one (following the rules above) as applied, but without actually running the SQL to change your database schema.", "This is intended for advanced users to manipulate the current migration state directly if they\u2019re manually applying changes; be warned that using --fake runs the risk of putting the migration state table into a state where manual recovery will be needed to make migrations run correctly.", "Allows Django to skip an app\u2019s initial migration if all database tables with the names of all models created by all CreateModel operations in that migration already exist. This option is intended for use when first running migrations against a database that preexisted the use of migrations. This option does not, however, check for matching database schema beyond matching table names and so is only safe to use if you are confident that your existing schema matches what is recorded in your initial migration.", "Shows the migration operations that will be performed for the given migrate command.", "Allows creating tables for apps without migrations. While this isn\u2019t recommended, the migrations framework is sometimes too slow on large projects with hundreds of models.", "Suppresses all user prompts. An example prompt is asking about removing stale content types.", "Makes migrate exit with a non-zero status when unapplied migrations are detected.", "Starts a lightweight development web server on the local machine. By default, the server runs on port 8000 on the IP address 127.0.0.1. You can pass in an IP address and port number explicitly.", "If you run this script as a user with normal privileges (recommended), you might not have access to start a port on a low port number. Low port numbers are reserved for the superuser (root).", "This server uses the WSGI application object specified by the WSGI_APPLICATION setting.", "DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through security audits or performance tests. (And that\u2019s how it\u2019s gonna stay. We\u2019re in the business of making web frameworks, not web servers, so improving this server to be able to handle a production environment is outside the scope of Django.)", "The development server automatically reloads Python code for each request, as needed. You don\u2019t need to restart the server for code changes to take effect. However, some actions like adding files don\u2019t trigger a restart, so you\u2019ll have to restart the server in these cases.", "If you\u2019re using Linux or MacOS and install both pywatchman and the Watchman service, kernel signals will be used to autoreload the server (rather than polling file modification timestamps each second). This offers better performance on large projects, reduced response time after code changes, more robust change detection, and a reduction in power usage. Django supports pywatchman 1.2.0 and higher.", "Large directories with many files may cause performance issues", "When using Watchman with a project that includes large non-Python directories like node_modules, it\u2019s advisable to ignore this directory for optimal performance. See the watchman documentation for information on how to do this.", "Watchman timeout", "The default timeout of Watchman client is 5 seconds. You can change it by setting the DJANGO_WATCHMAN_TIMEOUT environment variable.", "When you start the server, and each time you change Python code while the server is running, the system check framework will check your entire Django project for some common errors (see the check command). If any errors are found, they will be printed to standard output. You can use the --skip-checks option to skip running system checks.", "You can run as many concurrent servers as you want, as long as they\u2019re on separate ports by executing django-admin runserver more than once.", "Note that the default IP address, 127.0.0.1, is not accessible from other machines on your network. To make your development server viewable to other machines on the network, use its own IP address (e.g. 192.168.2.1) or 0.0.0.0 or :: (with IPv6 enabled).", "You can provide an IPv6 address surrounded by brackets (e.g. [200a::1]:8000). This will automatically enable IPv6 support.", "A hostname containing ASCII-only characters can also be used.", "If the staticfiles contrib app is enabled (default in new projects) the runserver command will be overridden with its own runserver command.", "Logging of each request and response of the server is sent to the django.server logger.", "Disables the auto-reloader. This means any Python code changes you make while the server is running will not take effect if the particular Python modules have already been loaded into memory.", "Disables use of threading in the development server. The server is multithreaded by default.", "Uses IPv6 for the development server. This changes the default IP address from 127.0.0.1 to ::1.", "Support for the --skip-checks option was added.", "Port 8000 on IP address 127.0.0.1:", "Port 8000 on IP address 1.2.3.4:", "Port 7000 on IP address 127.0.0.1:", "Port 7000 on IP address 1.2.3.4:", "Port 8000 on IPv6 address ::1:", "Port 7000 on IPv6 address ::1:", "Port 7000 on IPv6 address 2001:0db8:1234:5678::9:", "Port 8000 on IPv4 address of host localhost:", "Port 8000 on IPv6 address of host localhost:", "By default, the development server doesn\u2019t serve any static files for your site (such as CSS files, images, things under MEDIA_URL and so forth). If you want to configure Django to serve static media, read How to manage static files (e.g. images, JavaScript, CSS).", "Sends a test email (to confirm email sending through Django is working) to the recipient(s) specified. For example:", "There are a couple of options, and you may use any combination of them together:", "Mails the email addresses specified in MANAGERS using mail_managers().", "Mails the email addresses specified in ADMINS using mail_admins().", "Starts the Python interactive interpreter.", "Specifies the shell to use. By default, Django will use IPython or bpython if either is installed. If both are installed, specify which one you want like so:", "IPython:", "bpython:", "If you have a \u201crich\u201d shell installed but want to force use of the \u201cplain\u201d Python interpreter, use python as the interface name, like so:", "Disables reading the startup script for the \u201cplain\u201d Python interpreter. By default, the script pointed to by the PYTHONSTARTUP environment variable or the ~/.pythonrc.py script is read.", "Lets you pass a command as a string to execute it as Django, like so:", "You can also pass code in on standard input to execute it. For example:", "On Windows, the REPL is output due to implementation limits of select.select() on that platform.", "Shows all migrations in a project. You can choose from one of two formats:", "Lists all of the apps Django knows about, the migrations available for each app, and whether or not each migration is applied (marked by an [X] next to the migration name). For a --verbosity of 2 and above, the applied datetimes are also shown.", "Apps without migrations are also listed, but have (no migrations) printed under them.", "This is the default output format.", "Shows the migration plan Django will follow to apply migrations. Like --list, applied migrations are marked by an [X]. For a --verbosity of 2 and above, all dependencies of a migration will also be shown.", "app_labels arguments limit the output, however, dependencies of provided apps may also be included.", "Specifies the database to examine. Defaults to default.", "Prints the SQL statements that would be executed for the flush command.", "Specifies the database for which to print the SQL. Defaults to default.", "Prints the SQL for the named migration. This requires an active database connection, which it will use to resolve constraint names; this means you must generate the SQL against a copy of the database you wish to later apply it on.", "Note that sqlmigrate doesn\u2019t colorize its output.", "Generates the SQL for unapplying the migration. By default, the SQL created is for running the migration in the forwards direction.", "Specifies the database for which to generate the SQL. Defaults to default.", "Prints the SQL statements for resetting sequences for the given app name(s).", "Sequences are indexes used by some database engines to track the next available number for automatically incremented fields.", "Use this command to generate SQL which will fix cases where a sequence is out of sync with its automatically incremented field data.", "Specifies the database for which to print the SQL. Defaults to default.", "Squashes the migrations for app_label up to and including migration_name down into fewer migrations, if possible. The resulting squashed migrations can live alongside the unsquashed ones safely. For more information, please read Squashing migrations.", "When start_migration_name is given, Django will only include migrations starting from and including this migration. This helps to mitigate the squashing limitation of RunPython and django.db.migrations.operations.RunSQL migration operations.", "Disables the optimizer when generating a squashed migration. By default, Django will try to optimize the operations in your migrations to reduce the size of the resulting file. Use this option if this process is failing or creating incorrect migrations, though please also file a Django bug report about the behavior, as optimization is meant to be safe.", "Suppresses all user prompts.", "Sets the name of the squashed migration. When omitted, the name is based on the first and last migration, with _squashed_ in between.", "Generate squashed migration file without Django version and timestamp header.", "Creates a Django app directory structure for the given app name in the current directory or the given destination.", "By default, the new directory contains a models.py file and other app template files. If only the app name is given, the app directory will be created in the current working directory.", "If the optional destination is provided, Django will use that existing directory rather than creating a new one. You can use \u2018.\u2019 to denote the current working directory.", "For example:", "Provides the path to a directory with a custom app template file, or a path to an uncompressed archive (.tar) or a compressed archive (.tar.gz, .tar.bz2, .tar.xz, .tar.lzma, .tgz, .tbz2, .txz, .tlz, .zip) containing the app template files.", "For example, this would look for an app template in the given directory when creating the myapp app:", "Django will also accept URLs (http, https, ftp) to compressed archives with the app template files, downloading and extracting them on the fly.", "For example, taking advantage of GitHub\u2019s feature to expose repositories as zip files, you can use a URL like:", "Specifies which file extensions in the app template should be rendered with the template engine. Defaults to py.", "Specifies which files in the app template (in addition to those matching --extension) should be rendered with the template engine. Defaults to an empty list.", "Specifies which directories in the app template should be excluded, in addition to .git and __pycache__. If this option is not provided, directories named __pycache__ or starting with . will be excluded.", "The template context used for all matching files is:", "Warning", "When the app template files are rendered with the Django template engine (by default all *.py files), Django will also replace all stray template variables contained. For example, if one of the Python files contains a docstring explaining a particular feature related to template rendering, it might result in an incorrect example.", "To work around this problem, you can use the templatetag template tag to \u201cescape\u201d the various parts of the template syntax.", "In addition, to allow Python template files that contain Django template language syntax while also preventing packaging systems from trying to byte-compile invalid *.py files, template files ending with .py-tpl will be renamed to .py.", "Creates a Django project directory structure for the given project name in the current directory or the given destination.", "By default, the new directory contains manage.py and a project package (containing a settings.py and other files).", "If only the project name is given, both the project directory and project package will be named <projectname> and the project directory will be created in the current working directory.", "If the optional destination is provided, Django will use that existing directory as the project directory, and create manage.py and the project package within it. Use \u2018.\u2019 to denote the current working directory.", "For example:", "Specifies a directory, file path, or URL of a custom project template. See the startapp --template documentation for examples and usage.", "Specifies which file extensions in the project template should be rendered with the template engine. Defaults to py.", "Specifies which files in the project template (in addition to those matching --extension) should be rendered with the template engine. Defaults to an empty list.", "Specifies which directories in the project template should be excluded, in addition to .git and __pycache__. If this option is not provided, directories named __pycache__ or starting with . will be excluded.", "The template context used is:", "Please also see the rendering warning as mentioned for startapp.", "Runs tests for all installed apps. See Testing in Django for more information.", "Stops running tests and reports the failure immediately after a test fails.", "Controls the test runner class that is used to execute tests. This value overrides the value provided by the TEST_RUNNER setting.", "Suppresses all user prompts. A typical prompt is a warning about deleting an existing test database.", "The test command receives options on behalf of the specified --testrunner. These are the options of the default test runner: DiscoverRunner.", "Preserves the test database between test runs. This has the advantage of skipping both the create and destroy actions which can greatly decrease the time to run tests, especially those in a large test suite. If the test database does not exist, it will be created on the first run and then preserved for each subsequent run. Unless the MIGRATE test setting is False, any unapplied migrations will also be applied to the test database before running the test suite.", "Randomizes the order of tests before running them. This can help detect tests that aren\u2019t properly isolated. The test order generated by this option is a deterministic function of the integer seed given. When no seed is passed, a seed is chosen randomly and printed to the console. To repeat a particular test order, pass a seed. The test orders generated by this option preserve Django\u2019s guarantees on test order. They also keep tests grouped by test case class.", "The shuffled orderings also have a special consistency property useful when narrowing down isolation issues. Namely, for a given seed and when running a subset of tests, the new order will be the original shuffling restricted to the smaller set. Similarly, when adding tests while keeping the seed the same, the order of the original tests will be the same in the new order.", "Sorts test cases in the opposite execution order. This may help in debugging the side effects of tests that aren\u2019t properly isolated. Grouping by test class is preserved when using this option. This can be used in conjunction with --shuffle to reverse the order for a particular seed.", "Sets the DEBUG setting to True prior to running tests. This may help troubleshoot test failures.", "Enables SQL logging for failing tests. If --verbosity is 2, then queries in passing tests are also output.", "Runs tests in separate parallel processes. Since modern processors have multiple cores, this allows running tests significantly faster.", "Using --parallel without a value, or with the value auto, runs one test process per core according to multiprocessing.cpu_count(). You can override this by passing the desired number of processes, e.g. --parallel 4, or by setting the DJANGO_TEST_PROCESSES environment variable.", "Django distributes test cases \u2014 unittest.TestCase subclasses \u2014 to subprocesses. If there are fewer test cases than configured processes, Django will reduce the number of processes accordingly.", "Each process gets its own database. You must ensure that different test cases don\u2019t access the same resources. For instance, test cases that touch the filesystem should create a temporary directory for their own use.", "Note", "If you have test classes that cannot be run in parallel, you can use SerializeMixin to run them sequentially. See Enforce running test classes sequentially.", "This option requires the third-party tblib package to display tracebacks correctly:", "This feature isn\u2019t available on Windows. It doesn\u2019t work with the Oracle database backend either.", "If you want to use pdb while debugging tests, you must disable parallel execution (--parallel=1). You\u2019ll see something like bdb.BdbQuit if you don\u2019t.", "Warning", "When test parallelization is enabled and a test fails, Django may be unable to display the exception traceback. This can make debugging difficult. If you encounter this problem, run the affected test without parallelization to see the traceback of the failure.", "This is a known limitation. It arises from the need to serialize objects in order to exchange them between processes. See What can be pickled and unpickled? for details.", "Support for the value auto was added.", "Runs only tests marked with the specified tags. May be specified multiple times and combined with test --exclude-tag.", "Tests that fail to load are always considered matching.", "In older versions, tests that failed to load did not match tags.", "Excludes tests marked with the specified tags. May be specified multiple times and combined with test --tag.", "Runs test methods and classes matching test name patterns, in the same way as unittest's -k option. Can be specified multiple times.", "Spawns a pdb debugger at each test error or failure. If you have it installed, ipdb is used instead.", "Discards output (stdout and stderr) for passing tests, in the same way as unittest's --buffer option.", "Django automatically calls faulthandler.enable() when starting the tests, which allows it to print a traceback if the interpreter crashes. Pass --no-faulthandler to disable this behavior.", "Outputs timings, including database setup and total run time.", "Runs a Django development server (as in runserver) using data from the given fixture(s).", "For example, this command:", "\u2026would perform the following steps:", "This is useful in a number of ways:", "Note that this server does not automatically detect changes to your Python source code (as runserver does). It does, however, detect changes to templates.", "Specifies a different port, or IP address and port, from the default of 127.0.0.1:8000. This value follows exactly the same format and serves exactly the same function as the argument to the runserver command.", "Examples:", "To run the test server on port 7000 with fixture1 and fixture2:", "(The above statements are equivalent. We include both of them to demonstrate that it doesn\u2019t matter whether the options come before or after the fixture arguments.)", "To run on 1.2.3.4:7000 with a test fixture:", "Suppresses all user prompts. A typical prompt is a warning about deleting an existing test database.", "Some commands are only available when the django.contrib application that implements them has been enabled. This section describes them grouped by their application.", "This command is only available if Django\u2019s authentication system (django.contrib.auth) is installed.", "Allows changing a user\u2019s password. It prompts you to enter a new password twice for the given user. If the entries are identical, this immediately becomes the new password. If you do not supply a user, the command will attempt to change the password whose username matches the current user.", "Specifies the database to query for the user. Defaults to default.", "Example usage:", "This command is only available if Django\u2019s authentication system (django.contrib.auth) is installed.", "Creates a superuser account (a user who has all permissions). This is useful if you need to create an initial superuser account or if you need to programmatically generate superuser accounts for your site(s).", "When run interactively, this command will prompt for a password for the new superuser account. When run non-interactively, you can provide a password by setting the DJANGO_SUPERUSER_PASSWORD environment variable. Otherwise, no password will be set, and the superuser account will not be able to log in until a password has been manually set for it.", "In non-interactive mode, the USERNAME_FIELD and required fields (listed in REQUIRED_FIELDS) fall back to DJANGO_SUPERUSER_<uppercase_field_name> environment variables, unless they are overridden by a command line argument. For example, to provide an email field, you can use DJANGO_SUPERUSER_EMAIL environment variable.", "Suppresses all user prompts. If a suppressed prompt cannot be resolved automatically, the command will exit with error code 1.", "The username and email address for the new account can be supplied by using the --username and --email arguments on the command line. If either of those is not supplied, createsuperuser will prompt for it when running interactively.", "Specifies the database into which the superuser object will be saved.", "You can subclass the management command and override get_input_data() if you want to customize data input and validation. Consult the source code for details on the existing implementation and the method\u2019s parameters. For example, it could be useful if you have a ForeignKey in REQUIRED_FIELDS and want to allow creating an instance instead of entering the primary key of an existing instance.", "This command is only available if Django\u2019s contenttypes app (django.contrib.contenttypes) is installed.", "Deletes stale content types (from deleted models) in your database. Any objects that depend on the deleted content types will also be deleted. A list of deleted objects will be displayed before you confirm it\u2019s okay to proceed with the deletion.", "Specifies the database to use. Defaults to default.", "Deletes stale content types including ones from previously installed apps that have been removed from INSTALLED_APPS. Defaults to False.", "This command is only available if GeoDjango (django.contrib.gis) is installed.", "Please refer to its description in the GeoDjango documentation.", "Can be run as a cron job or directly to clean out expired sessions.", "This command is only available if the Sitemaps framework (django.contrib.sitemaps) is installed.", "Please refer to its description in the Sitemaps documentation.", "This command is only available if the static files application (django.contrib.staticfiles) is installed.", "Please refer to its description in the staticfiles documentation.", "This command is only available if the static files application (django.contrib.staticfiles) is installed.", "Please refer to its description in the staticfiles documentation.", "Although some commands may allow their own custom options, every command allows for the following options by default:", "Adds the given filesystem path to the Python import search path. If this isn\u2019t provided, django-admin will use the PYTHONPATH environment variable.", "This option is unnecessary in manage.py, because it takes care of setting the Python path for you.", "Example usage:", "Specifies the settings module to use. The settings module should be in Python package syntax, e.g. mysite.settings. If this isn\u2019t provided, django-admin will use the DJANGO_SETTINGS_MODULE environment variable.", "This option is unnecessary in manage.py, because it uses settings.py from the current project by default.", "Example usage:", "Displays a full stack trace when a CommandError is raised. By default, django-admin will show an error message when a CommandError occurs and a full stack trace for any other exception.", "This option is ignored by runserver.", "Example usage:", "Specifies the amount of notification and debug information that a command should print to the console.", "This option is ignored by runserver.", "Example usage:", "Disables colorized command output. Some commands format their output to be colorized. For example, errors will be printed to the console in red and SQL statements will be syntax highlighted.", "Example usage:", "Forces colorization of the command output if it would otherwise be disabled as discussed in Syntax coloring. For example, you may want to pipe colored output to another command.", "Skips running system checks prior to running the command. This option is only available if the requires_system_checks command attribute is not an empty list or tuple.", "Example usage:", "The django-admin / manage.py commands will use pretty color-coded output if your terminal supports ANSI-colored output. It won\u2019t use the color codes if you\u2019re piping the command\u2019s output to another program unless the --force-color option is used.", "On Windows 10, the Windows Terminal application, VS Code, and PowerShell (where virtual terminal processing is enabled) allow colored output, and are supported by default.", "Under Windows, the legacy cmd.exe native console doesn\u2019t support ANSI escape sequences so by default there is no color output. In this case either of two third-party libraries are needed:", "Install colorama, a Python package that translates ANSI color codes into Windows API calls. Django commands will detect its presence and will make use of its services to color output just like on Unix-based platforms. colorama can be installed via pip:", "Other modern terminal environments on Windows, that support terminal colors, but which are not automatically detected as supported by Django, may \u201cfake\u201d the installation of ANSICON by setting the appropriate environmental variable, ANSICON=\"on\".", "Updated support for syntax coloring on Windows.", "The colors used for syntax highlighting can be customized. Django ships with three color palettes:", "You select a palette by setting a DJANGO_COLORS environment variable to specify the palette you want to use. For example, to specify the light palette under a Unix or OS/X BASH shell, you would run the following at a command prompt:", "You can also customize the colors that are used. Django specifies a number of roles in which color is used:", "Each of these roles can be assigned a specific foreground and background color, from the following list:", "Each of these colors can then be modified by using the following display options:", "A color specification follows one of the following patterns:", "where role is the name of a valid color role, fg is the foreground color, bg is the background color and each option is one of the color modifying options. Multiple color specifications are then separated by a semicolon. For example:", "would specify that errors be displayed using blinking yellow on blue, and notices displayed using magenta. All other color roles would be left uncolored.", "Colors can also be specified by extending a base palette. If you put a palette name in a color specification, all the colors implied by that palette will be loaded. So:", "would specify the use of all the colors in the light color palette, except for the colors for errors and notices which would be overridden as specified.", "If you use the Bash shell, consider installing the Django bash completion script, which lives in extras/django_bash_completion in the Django source distribution. It enables tab-completion of django-admin and manage.py commands, so you can, for instance\u2026", "See How to create custom django-admin commands for how to add customized actions.", "To call a management command from code use call_command.", "Examples:", "Note that command options that take no arguments are passed as keywords with True or False, as you can see with the interactive option above.", "Named arguments can be passed by using either one of the following syntaxes:", "Some command options have different names when using call_command() instead of django-admin or manage.py. For example, django-admin\ncreatesuperuser --no-input translates to call_command('createsuperuser',\ninteractive=False). To find what keyword argument name to use for call_command(), check the command\u2019s source code for the dest argument passed to parser.add_argument().", "Command options which take multiple options are passed a list:", "The return value of the call_command() function is the same as the return value of the handle() method of the command.", "Note that you can redirect standard output and error streams as all commands support the stdout and stderr options. For example, you could write:"]}, {"name": "django.contrib.auth", "path": "ref/contrib/auth", "type": "API", "text": ["This document provides API reference material for the components of Django\u2019s authentication system. For more details on the usage of these components or how to customize authentication and authorization see the authentication topic guide.", "User objects have the following fields:", "Required. 150 characters or fewer. Usernames may contain alphanumeric, _, @, +, . and - characters.", "The max_length should be sufficient for many use cases. If you need a longer length, please use a custom user model. If you use MySQL with the utf8mb4 encoding (recommended for proper Unicode support), specify at most max_length=191 because MySQL can only create unique indexes with 191 characters in that case by default.", "Optional (blank=True). 150 characters or fewer.", "Optional (blank=True). 150 characters or fewer.", "Optional (blank=True). Email address.", "Required. A hash of, and metadata about, the password. (Django doesn\u2019t store the raw password.) Raw passwords can be arbitrarily long and can contain any character. See the password documentation.", "Many-to-many relationship to Group", "Many-to-many relationship to Permission", "Boolean. Designates whether this user can access the admin site.", "Boolean. Designates whether this user account should be considered active. We recommend that you set this flag to False instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won\u2019t break.", "This doesn\u2019t necessarily control whether or not the user can log in. Authentication backends aren\u2019t required to check for the is_active flag but the default backend (ModelBackend) and the RemoteUserBackend do. You can use AllowAllUsersModelBackend or AllowAllUsersRemoteUserBackend if you want to allow inactive users to login. In this case, you\u2019ll also want to customize the AuthenticationForm used by the LoginView as it rejects inactive users. Be aware that the permission-checking methods such as has_perm() and the authentication in the Django admin all return False for inactive users.", "Boolean. Designates that this user has all permissions without explicitly assigning them.", "A datetime of the user\u2019s last login.", "A datetime designating when the account was created. Is set to the current date/time by default when the account is created.", "Read-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn\u2019t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance.", "Read-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute.", "Returns the username for the user. Since the User model can be swapped out, you should use this method instead of referencing the username attribute directly.", "Returns the first_name plus the last_name, with a space in between.", "Returns the first_name.", "Sets the user\u2019s password to the given raw string, taking care of the password hashing. Doesn\u2019t save the User object.", "When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used.", "Returns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)", "Marks the user as having no password set. This isn\u2019t the same as having a blank string for a password. check_password() for this user will never return True. Doesn\u2019t save the User object.", "You may need this if authentication for your application takes place against an existing external source such as an LDAP directory.", "Returns False if set_unusable_password() has been called for this user.", "Returns a set of permission strings that the user has directly.", "If obj is passed in, only returns the user permissions for this specific object.", "Returns a set of permission strings that the user has, through their groups.", "If obj is passed in, only returns the group permissions for this specific object.", "Returns a set of permission strings that the user has, both through group and user permissions.", "If obj is passed in, only returns the permissions for this specific object.", "Returns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\". (see documentation on permissions). If the user is inactive, this method will always return False. For an active superuser, this method will always return True.", "If obj is passed in, this method won\u2019t check for a permission for the model, but for this specific object.", "Returns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If the user is inactive, this method will always return False. For an active superuser, this method will always return True.", "If obj is passed in, this method won\u2019t check for permissions for the model, but for the specific object.", "Returns True if the user has any permissions in the given package (the Django app label). If the user is inactive, this method will always return False. For an active superuser, this method will always return True.", "Sends an email to the user. If from_email is None, Django uses the DEFAULT_FROM_EMAIL. Any **kwargs are passed to the underlying send_mail() call.", "The User model has a custom manager that has the following helper methods (in addition to the methods provided by BaseUserManager):", "Creates, saves and returns a User.", "The username and password are set as given. The domain portion of email is automatically converted to lowercase, and the returned User object will have is_active set to True.", "If no password is provided, set_unusable_password() will be called.", "The extra_fields keyword arguments are passed through to the User\u2019s __init__ method to allow setting arbitrary fields on a custom user model.", "See Creating users for example usage.", "Same as create_user(), but sets is_staff and is_superuser to True.", "Returns users that have the given permission perm either in the \"<app label>.<permission codename>\" format or as a Permission instance. Returns an empty queryset if no users who have the perm found.", "If is_active is True (default), returns only active users, or if False, returns only inactive users. Use None to return all users irrespective of active state.", "If include_superusers is True (default), the result will include superusers.", "If backend is passed in and it\u2019s defined in AUTHENTICATION_BACKENDS, then this method will use it. Otherwise, it will use the backend in AUTHENTICATION_BACKENDS, if there is only one, or raise an exception.", "django.contrib.auth.models.AnonymousUser is a class that implements the django.contrib.auth.models.User interface, with these differences:", "In practice, you probably won\u2019t need to use AnonymousUser objects on your own, but they\u2019re used by web requests, as explained in the next section.", "Permission objects have the following fields:", "Required. 255 characters or fewer. Example: 'Can vote'.", "Required. A reference to the django_content_type database table, which contains a record for each installed model.", "Required. 100 characters or fewer. Example: 'can_vote'.", "Permission objects have the standard data-access methods like any other Django model.", "Group objects have the following fields:", "Required. 150 characters or fewer. Any characters are permitted. Example: 'Awesome Users'.", "Many-to-many field to Permission:", "A field validator allowing only ASCII letters and numbers, in addition to @, ., +, -, and _.", "A field validator allowing Unicode characters, in addition to @, ., +, -, and _. The default validator for User.username.", "The auth framework uses the following signals that can be used for notification when a user logs in or out.", "Sent when a user logs in successfully.", "Arguments sent with this signal:", "Sent when the logout method is called.", "Sent when the user failed to login successfully", "This section details the authentication backends that come with Django. For information on how to use them and how to write your own authentication backends, see the Other authentication sources section of the User authentication guide.", "The following backends are available in django.contrib.auth.backends:", "A base class that provides default implementations for all required methods. By default, it will reject any user and provide no permissions.", "Returns an empty set.", "Returns an empty set.", "Uses get_user_permissions() and get_group_permissions() to get the set of permission strings the user_obj has.", "Uses get_all_permissions() to check if user_obj has the permission string perm.", "This is the default authentication backend used by Django. It authenticates using credentials consisting of a user identifier and password. For Django\u2019s default user model, the user identifier is the username, for custom user models it is the field specified by USERNAME_FIELD (see Customizing Users and authentication).", "It also handles the default permissions model as defined for User and PermissionsMixin.", "has_perm(), get_all_permissions(), get_user_permissions(), and get_group_permissions() allow an object to be passed as a parameter for object-specific permissions, but this backend does not implement them other than returning an empty set of permissions if obj is not None.", "with_perm() also allows an object to be passed as a parameter, but unlike others methods it returns an empty queryset if obj is not None.", "Tries to authenticate username with password by calling User.check_password. If no username is provided, it tries to fetch a username from kwargs using the key CustomUser.USERNAME_FIELD. Returns an authenticated user or None.", "request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend).", "Returns the set of permission strings the user_obj has from their own user permissions. Returns an empty set if is_anonymous or is_active is False.", "Returns the set of permission strings the user_obj has from the permissions of the groups they belong. Returns an empty set if is_anonymous or is_active is False.", "Returns the set of permission strings the user_obj has, including both user permissions and group permissions. Returns an empty set if is_anonymous or is_active is False.", "Uses get_all_permissions() to check if user_obj has the permission string perm. Returns False if the user is not is_active.", "Returns whether the user_obj has any permissions on the app app_label.", "Returns whether the user is allowed to authenticate. To match the behavior of AuthenticationForm which prohibits inactive users from logging in, this method returns False for users with is_active=False. Custom user models that don\u2019t have an is_active field are allowed.", "Returns all active users who have the permission perm either in the form of \"<app label>.<permission codename>\" or a Permission instance. Returns an empty queryset if no users who have the perm found.", "If is_active is True (default), returns only active users, or if False, returns only inactive users. Use None to return all users irrespective of active state.", "If include_superusers is True (default), the result will include superusers.", "Same as ModelBackend except that it doesn\u2019t reject inactive users because user_can_authenticate() always returns True.", "When using this backend, you\u2019ll likely want to customize the AuthenticationForm used by the LoginView by overriding the confirm_login_allowed() method as it rejects inactive users.", "Use this backend to take advantage of external-to-Django-handled authentication. It authenticates using usernames passed in request.META['REMOTE_USER']. See the Authenticating against REMOTE_USER documentation.", "If you need more control, you can create your own authentication backend that inherits from this class and override these attributes or methods:", "True or False. Determines whether or not a user object is created if not already in the database Defaults to True.", "The username passed as remote_user is considered trusted. This method returns the user object with the given username, creating a new user object if create_unknown_user is True.", "Returns None if create_unknown_user is False and a User object with the given username is not found in the database.", "request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend).", "Performs any cleaning on the username (e.g. stripping LDAP DN information) prior to using it to get or create a user object. Returns the cleaned username.", "Configures a newly created user. This method is called immediately after a new user is created, and can be used to perform custom setup actions, such as setting the user\u2019s groups based on attributes in an LDAP directory. Returns the user object.", "request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend).", "Returns whether the user is allowed to authenticate. This method returns False for users with is_active=False. Custom user models that don\u2019t have an is_active field are allowed.", "Same as RemoteUserBackend except that it doesn\u2019t reject inactive users because user_can_authenticate always returns True.", "Returns the user model instance associated with the given request\u2019s session.", "It checks if the authentication backend stored in the session is present in AUTHENTICATION_BACKENDS. If so, it uses the backend\u2019s get_user() method to retrieve the user model instance and then verifies the session by calling the user model\u2019s get_session_auth_hash() method.", "Returns an instance of AnonymousUser if the authentication backend stored in the session is no longer in AUTHENTICATION_BACKENDS, if a user isn\u2019t returned by the backend\u2019s get_user() method, or if the session auth hash doesn\u2019t validate."]}, {"name": "django.contrib.humanize", "path": "ref/contrib/humanize", "type": "API", "text": ["A set of Django template filters useful for adding a \u201chuman touch\u201d to data.", "To activate these filters, add 'django.contrib.humanize' to your INSTALLED_APPS setting. Once you\u2019ve done that, use {% load humanize %} in a template, and you\u2019ll have access to the following filters.", "For numbers 1-9, returns the number spelled out. Otherwise, returns the number. This follows Associated Press style.", "Examples:", "You can pass in either an integer or a string representation of an integer.", "Converts an integer or float (or a string representation of either) to a string containing commas every three digits.", "Examples:", "Format localization will be respected if enabled, e.g. with the 'de' language:", "Converts a large integer (or a string representation of an integer) to a friendly text representation. Translates 1.0 as a singular phrase and all other numeric values as plural, this may be incorrect for some languages. Works best for numbers over 1 million.", "Examples:", "Values up to 10^100 (Googol) are supported.", "Format localization will be respected if enabled, e.g. with the 'de' language:", "For dates that are the current day or within one day, return \u201ctoday\u201d, \u201ctomorrow\u201d or \u201cyesterday\u201d, as appropriate. Otherwise, format the date using the passed in format string.", "Argument: Date formatting string as described in the date tag.", "Examples (when \u2018today\u2019 is 17 Feb 2007):", "For datetime values, returns a string representing how many seconds, minutes or hours ago it was \u2013 falling back to the timesince format if the value is more than a day old. In case the datetime value is in the future the return value will automatically use an appropriate phrase.", "Examples (when \u2018now\u2019 is 17 Feb 2007 16:30:00):", "Converts an integer to its ordinal as a string.", "Examples:", "You can pass in either an integer or a string representation of an integer."]}, {"name": "django.contrib.postgres", "path": "ref/contrib/postgres/index", "type": "API", "text": ["PostgreSQL has a number of features which are not shared by the other databases Django supports. This optional module contains model fields and form fields for a number of PostgreSQL specific data types.", "Note", "Django is, and will continue to be, a database-agnostic web framework. We would encourage those writing reusable applications for the Django community to write database-agnostic code where practical. However, we recognize that real world projects written using Django need not be database-agnostic. In fact, once a project reaches a given size changing the underlying data store is already a significant challenge and is likely to require changing the code base in some ways to handle differences between the data stores.", "Django provides support for a number of data types which will only work with PostgreSQL. There is no fundamental reason why (for example) a contrib.mysql module does not exist, except that PostgreSQL has the richest feature set of the supported databases so its users have the most to gain."]}, {"name": "django.urls functions for use in URLconfs", "path": "ref/urls", "type": "API", "text": ["Returns an element for inclusion in urlpatterns. For example:", "The route argument should be a string or gettext_lazy() (see Translating URL patterns) that contains a URL pattern. The string may contain angle brackets (like <username> above) to capture part of the URL and send it as a keyword argument to the view. The angle brackets may include a converter specification (like the int part of <int:section>) which limits the characters matched and may also change the type of the variable passed to the view. For example, <int:section> matches a string of decimal digits and converts the value to an int. See How Django processes a request for more details.", "The view argument is a view function or the result of as_view() for class-based views. It can also be an django.urls.include().", "The kwargs argument allows you to pass additional arguments to the view function or method. See Passing extra options to view functions for an example.", "See Naming URL patterns for why the name argument is useful.", "Returns an element for inclusion in urlpatterns. For example:", "The route argument should be a string or gettext_lazy() (see Translating URL patterns) that contains a regular expression compatible with Python\u2019s re module. Strings typically use raw string syntax (r'') so that they can contain sequences like \\d without the need to escape the backslash with another backslash. When a match is made, captured groups from the regular expression are passed to the view \u2013 as named arguments if the groups are named, and as positional arguments otherwise. The values are passed as strings, without any type conversion.", "The view, kwargs and name arguments are the same as for path().", "A function that takes a full Python import path to another URLconf module that should be \u201cincluded\u201d in this place. Optionally, the application namespace and instance namespace where the entries will be included into can also be specified.", "Usually, the application namespace should be specified by the included module. If an application namespace is set, the namespace argument can be used to set a different instance namespace.", "include() also accepts as an argument either an iterable that returns URL patterns or a 2-tuple containing such iterable plus the names of the application namespaces.", "See Including other URLconfs and URL namespaces and included URLconfs.", "The function for registering a converter for use in path() routes.", "The converter argument is a converter class, and type_name is the converter name to use in path patterns. See Registering custom path converters for an example.", "Helper function to return a URL pattern for serving files in debug mode:", "A callable, or a string representing the full Python import path to the view that should be called if the HTTP client has sent a request that caused an error condition and a response with a status code of 400.", "By default, this is django.views.defaults.bad_request(). If you implement a custom view, be sure it accepts request and exception arguments and returns an HttpResponseBadRequest.", "A callable, or a string representing the full Python import path to the view that should be called if the user doesn\u2019t have the permissions required to access a resource.", "By default, this is django.views.defaults.permission_denied(). If you implement a custom view, be sure it accepts request and exception arguments and returns an HttpResponseForbidden.", "A callable, or a string representing the full Python import path to the view that should be called if none of the URL patterns match.", "By default, this is django.views.defaults.page_not_found(). If you implement a custom view, be sure it accepts request and exception arguments and returns an HttpResponseNotFound.", "A callable, or a string representing the full Python import path to the view that should be called in case of server errors. Server errors happen when you have runtime errors in view code.", "By default, this is django.views.defaults.server_error(). If you implement a custom view, be sure it accepts a request argument and returns an HttpResponseServerError."]}, {"name": "django.urls utility functions", "path": "ref/urlresolvers", "type": "API", "text": ["If you need to use something similar to the url template tag in your code, Django provides the following function:", "viewname can be a URL pattern name or the callable view object. For example, given the following url:", "you can use any of the following to reverse the URL:", "If the URL accepts arguments, you may pass them in args. For example:", "You can also pass kwargs instead of args. For example:", "args and kwargs cannot be passed to reverse() at the same time.", "If no match can be made, reverse() raises a NoReverseMatch exception.", "The reverse() function can reverse a large variety of regular expression patterns for URLs, but not every possible one. The main restriction at the moment is that the pattern cannot contain alternative choices using the vertical bar (\"|\") character. You can quite happily use such patterns for matching against incoming URLs and sending them off to views, but you cannot reverse such patterns.", "The current_app argument allows you to provide a hint to the resolver indicating the application to which the currently executing view belongs. This current_app argument is used as a hint to resolve application namespaces into URLs on specific application instances, according to the namespaced URL resolution strategy.", "The urlconf argument is the URLconf module containing the URL patterns to use for reversing. By default, the root URLconf for the current thread is used.", "Note", "The string returned by reverse() is already urlquoted. For example:", "Applying further encoding (such as urllib.parse.quote()) to the output of reverse() may produce undesirable results.", "A lazily evaluated version of reverse().", "It is useful for when you need to use a URL reversal before your project\u2019s URLConf is loaded. Some common cases where this function is necessary are:", "The resolve() function can be used for resolving URL paths to the corresponding view functions. It has the following signature:", "path is the URL path you want to resolve. As with reverse(), you don\u2019t need to worry about the urlconf parameter. The function returns a ResolverMatch object that allows you to access various metadata about the resolved URL.", "If the URL does not resolve, the function raises a Resolver404 exception (a subclass of Http404) .", "The view function that would be used to serve the URL", "The arguments that would be passed to the view function, as parsed from the URL.", "The keyword arguments that would be passed to the view function, as parsed from the URL.", "The name of the URL pattern that matches the URL.", "The route of the matching URL pattern.", "For example, if path('users/<id>/', ...) is the matching pattern, route will contain 'users/<id>/'.", "The list of URL patterns tried before the URL either matched one or exhausted available patterns.", "The application namespace for the URL pattern that matches the URL.", "The list of individual namespace components in the full application namespace for the URL pattern that matches the URL. For example, if the app_name is 'foo:bar', then app_names will be ['foo', 'bar'].", "The instance namespace for the URL pattern that matches the URL.", "The list of individual namespace components in the full instance namespace for the URL pattern that matches the URL. i.e., if the namespace is foo:bar, then namespaces will be ['foo', 'bar'].", "The name of the view that matches the URL, including the namespace if there is one.", "A ResolverMatch object can then be interrogated to provide information about the URL pattern that matches a URL:", "A ResolverMatch object can also be assigned to a triple:", "One possible use of resolve() would be to test whether a view would raise a Http404 error before redirecting to it:", "Normally, you should always use reverse() to define URLs within your application. However, if your application constructs part of the URL hierarchy itself, you may occasionally need to generate URLs. In that case, you need to be able to find the base URL of the Django project within its web server (normally, reverse() takes care of this for you). In that case, you can call get_script_prefix(), which will return the script prefix portion of the URL for your Django project. If your Django project is at the root of its web server, this is always \"/\"."]}, {"name": "Django\u2019s cache framework", "path": "topics/cache", "type": "Guides", "text": ["A fundamental trade-off in dynamic websites is, well, they\u2019re dynamic. Each time a user requests a page, the web server makes all sorts of calculations \u2013 from database queries to template rendering to business logic \u2013 to create the page that your site\u2019s visitor sees. This is a lot more expensive, from a processing-overhead perspective, than your standard read-a-file-off-the-filesystem server arrangement.", "For most web applications, this overhead isn\u2019t a big deal. Most web applications aren\u2019t washingtonpost.com or slashdot.org; they\u2019re small- to medium-sized sites with so-so traffic. But for medium- to high-traffic sites, it\u2019s essential to cut as much overhead as possible.", "That\u2019s where caching comes in.", "To cache something is to save the result of an expensive calculation so that you don\u2019t have to perform the calculation next time. Here\u2019s some pseudocode explaining how this would work for a dynamically generated web page:", "Django comes with a robust cache system that lets you save dynamic pages so they don\u2019t have to be calculated for each request. For convenience, Django offers different levels of cache granularity: You can cache the output of specific views, you can cache only the pieces that are difficult to produce, or you can cache your entire site.", "Django also works well with \u201cdownstream\u201d caches, such as Squid and browser-based caches. These are the types of caches that you don\u2019t directly control but to which you can provide hints (via HTTP headers) about which parts of your site should be cached, and how.", "See also", "The Cache Framework design philosophy explains a few of the design decisions of the framework.", "The cache system requires a small amount of setup. Namely, you have to tell it where your cached data should live \u2013 whether in a database, on the filesystem or directly in memory. This is an important decision that affects your cache\u2019s performance; yes, some cache types are faster than others.", "Your cache preference goes in the CACHES setting in your settings file. Here\u2019s an explanation of all available values for CACHES.", "Memcached is an entirely memory-based cache server, originally developed to handle high loads at LiveJournal.com and subsequently open-sourced by Danga Interactive. It is used by sites such as Facebook and Wikipedia to reduce database access and dramatically increase site performance.", "Memcached runs as a daemon and is allotted a specified amount of RAM. All it does is provide a fast interface for adding, retrieving and deleting data in the cache. All data is stored directly in memory, so there\u2019s no overhead of database or filesystem usage.", "After installing Memcached itself, you\u2019ll need to install a Memcached binding. There are several Python Memcached bindings available; the two supported by Django are pylibmc and pymemcache.", "To use Memcached with Django:", "In this example, Memcached is running on localhost (127.0.0.1) port 11211, using the pymemcache binding:", "In this example, Memcached is available through a local Unix socket file /tmp/memcached.sock using the pymemcache binding:", "One excellent feature of Memcached is its ability to share a cache over multiple servers. This means you can run Memcached daemons on multiple machines, and the program will treat the group of machines as a single cache, without the need to duplicate cache values on each machine. To take advantage of this feature, include all server addresses in LOCATION, either as a semicolon or comma delimited string, or as a list.", "In this example, the cache is shared over Memcached instances running on IP address 172.19.26.240 and 172.19.26.242, both on port 11211:", "In the following example, the cache is shared over Memcached instances running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port 11212), and 172.19.26.244 (port 11213):", "A final point about Memcached is that memory-based caching has a disadvantage: because the cached data is stored in memory, the data will be lost if your server crashes. Clearly, memory isn\u2019t intended for permanent data storage, so don\u2019t rely on memory-based caching as your only data storage. Without a doubt, none of the Django caching backends should be used for permanent storage \u2013 they\u2019re all intended to be solutions for caching, not storage \u2013 but we point this out here because memory-based caching is particularly temporary.", "The PyMemcacheCache backend was added.", "Deprecated since version 3.2: The MemcachedCache backend is deprecated as python-memcached has some problems and seems to be unmaintained. Use PyMemcacheCache or PyLibMCCache instead.", "Redis is an in-memory database that can be used for caching. To begin you\u2019ll need a Redis server running either locally or on a remote machine.", "After setting up the Redis server, you\u2019ll need to install Python bindings for Redis. redis-py is the binding supported natively by Django. Installing the additional hiredis-py package is also recommended.", "To use Redis as your cache backend with Django:", "For example, if Redis is running on localhost (127.0.0.1) port 6379:", "Often Redis servers are protected with authentication. In order to supply a username and password, add them in the LOCATION along with the URL:", "If you have multiple Redis servers set up in the replication mode, you can specify the servers either as a semicolon or comma delimited string, or as a list. While using multiple servers, write operations are performed on the first server (leader). Read operations are performed on the other servers (replicas) chosen at random:", "Django can store its cached data in your database. This works best if you\u2019ve got a fast, well-indexed database server.", "To use a database table as your cache backend:", "In this example, the cache table\u2019s name is my_cache_table:", "Unlike other cache backends, the database cache does not support automatic culling of expired entries at the database level. Instead, expired cache entries are culled each time add(), set(), or touch() is called.", "Before using the database cache, you must create the cache table with this command:", "This creates a table in your database that is in the proper format that Django\u2019s database-cache system expects. The name of the table is taken from LOCATION.", "If you are using multiple database caches, createcachetable creates one table for each cache.", "If you are using multiple databases, createcachetable observes the allow_migrate() method of your database routers (see below).", "Like migrate, createcachetable won\u2019t touch an existing table. It will only create missing tables.", "To print the SQL that would be run, rather than run it, use the createcachetable --dry-run option.", "If you use database caching with multiple databases, you\u2019ll also need to set up routing instructions for your database cache table. For the purposes of routing, the database cache table appears as a model named CacheEntry, in an application named django_cache. This model won\u2019t appear in the models cache, but the model details can be used for routing purposes.", "For example, the following router would direct all cache read operations to cache_replica, and all write operations to cache_primary. The cache table will only be synchronized onto cache_primary:", "If you don\u2019t specify routing directions for the database cache model, the cache backend will use the default database.", "And if you don\u2019t use the database cache backend, you don\u2019t need to worry about providing routing instructions for the database cache model.", "The file-based backend serializes and stores each cache value as a separate file. To use this backend set BACKEND to \"django.core.cache.backends.filebased.FileBasedCache\" and LOCATION to a suitable directory. For example, to store cached data in /var/tmp/django_cache, use this setting:", "If you\u2019re on Windows, put the drive letter at the beginning of the path, like this:", "The directory path should be absolute \u2013 that is, it should start at the root of your filesystem. It doesn\u2019t matter whether you put a slash at the end of the setting.", "Make sure the directory pointed-to by this setting either exists and is readable and writable, or that it can be created by the system user under which your web server runs. Continuing the above example, if your server runs as the user apache, make sure the directory /var/tmp/django_cache exists and is readable and writable by the user apache, or that it can be created by the user apache.", "Warning", "When the cache LOCATION is contained within MEDIA_ROOT, STATIC_ROOT, or STATICFILES_FINDERS, sensitive data may be exposed.", "An attacker who gains access to the cache file can not only falsify HTML content, which your site will trust, but also remotely execute arbitrary code, as the data is serialized using pickle.", "This is the default cache if another is not specified in your settings file. If you want the speed advantages of in-memory caching but don\u2019t have the capability of running Memcached, consider the local-memory cache backend. This cache is per-process (see below) and thread-safe. To use it, set BACKEND to \"django.core.cache.backends.locmem.LocMemCache\". For example:", "The cache LOCATION is used to identify individual memory stores. If you only have one locmem cache, you can omit the LOCATION; however, if you have more than one local memory cache, you will need to assign a name to at least one of them in order to keep them separate.", "The cache uses a least-recently-used (LRU) culling strategy.", "Note that each process will have its own private cache instance, which means no cross-process caching is possible. This also means the local memory cache isn\u2019t particularly memory-efficient, so it\u2019s probably not a good choice for production environments. It\u2019s nice for development.", "Finally, Django comes with a \u201cdummy\u201d cache that doesn\u2019t actually cache \u2013 it just implements the cache interface without doing anything.", "This is useful if you have a production site that uses heavy-duty caching in various places but a development/test environment where you don\u2019t want to cache and don\u2019t want to have to change your code to special-case the latter. To activate dummy caching, set BACKEND like so:", "While Django includes support for a number of cache backends out-of-the-box, sometimes you might want to use a customized cache backend. To use an external cache backend with Django, use the Python import path as the BACKEND of the CACHES setting, like so:", "If you\u2019re building your own backend, you can use the standard cache backends as reference implementations. You\u2019ll find the code in the django/core/cache/backends/ directory of the Django source.", "Note: Without a really compelling reason, such as a host that doesn\u2019t support them, you should stick to the cache backends included with Django. They\u2019ve been well-tested and are well-documented.", "Each cache backend can be given additional arguments to control caching behavior. These arguments are provided as additional keys in the CACHES setting. Valid arguments are as follows:", "OPTIONS: Any options that should be passed to the cache backend. The list of valid options will vary with each backend, and cache backends backed by a third-party library will pass their options directly to the underlying cache library.", "Cache backends that implement their own culling strategy (i.e., the locmem, filesystem and database backends) will honor the following options:", "CULL_FREQUENCY: The fraction of entries that are culled when MAX_ENTRIES is reached. The actual ratio is 1 / CULL_FREQUENCY, so set CULL_FREQUENCY to 2 to cull half the entries when MAX_ENTRIES is reached. This argument should be an integer and defaults to 3.", "A value of 0 for CULL_FREQUENCY means that the entire cache will be dumped when MAX_ENTRIES is reached. On some backends (database in particular) this makes culling much faster at the expense of more cache misses.", "The Memcached and Redis backends pass the contents of OPTIONS as keyword arguments to the client constructors, allowing for more advanced control of client behavior. For example usage, see below.", "KEY_PREFIX: A string that will be automatically included (prepended by default) to all cache keys used by the Django server.", "See the cache documentation for more information.", "VERSION: The default version number for cache keys generated by the Django server.", "See the cache documentation for more information.", "KEY_FUNCTION A string containing a dotted path to a function that defines how to compose a prefix, version and key into a final cache key.", "See the cache documentation for more information.", "In this example, a filesystem backend is being configured with a timeout of 60 seconds, and a maximum capacity of 1000 items:", "Here\u2019s an example configuration for a pylibmc based backend that enables the binary protocol, SASL authentication, and the ketama behavior mode:", "Here\u2019s an example configuration for a pymemcache based backend that enables client pooling (which may improve performance by keeping clients connected), treats memcache/network errors as cache misses, and sets the TCP_NODELAY flag on the connection\u2019s socket:", "Here\u2019s an example configuration for a redis based backend that selects database 10 (by default Redis ships with 16 logical databases), specifies a parser class (redis.connection.HiredisParser will be used by default if the hiredis-py package is installed), and sets a custom connection pool class (redis.ConnectionPool is used by default):", "Once the cache is set up, the simplest way to use caching is to cache your entire site. You\u2019ll need to add 'django.middleware.cache.UpdateCacheMiddleware' and 'django.middleware.cache.FetchFromCacheMiddleware' to your MIDDLEWARE setting, as in this example:", "Note", "No, that\u2019s not a typo: the \u201cupdate\u201d middleware must be first in the list, and the \u201cfetch\u201d middleware must be last. The details are a bit obscure, but see Order of MIDDLEWARE below if you\u2019d like the full story.", "Then, add the following required settings to your Django settings file:", "FetchFromCacheMiddleware caches GET and HEAD responses with status 200, where the request and response headers allow. Responses to requests for the same URL with different query parameters are considered to be unique pages and are cached separately. This middleware expects that a HEAD request is answered with the same response headers as the corresponding GET request; in which case it can return a cached GET response for HEAD request.", "Additionally, UpdateCacheMiddleware automatically sets a few headers in each HttpResponse which affect downstream caches:", "See Middleware for more on middleware.", "If a view sets its own cache expiry time (i.e. it has a max-age section in its Cache-Control header) then the page will be cached until the expiry time, rather than CACHE_MIDDLEWARE_SECONDS. Using the decorators in django.views.decorators.cache you can easily set a view\u2019s expiry time (using the cache_control() decorator) or disable caching for a view (using the never_cache() decorator). See the using other headers section for more on these decorators.", "If USE_I18N is set to True then the generated cache key will include the name of the active language \u2013 see also How Django discovers language preference). This allows you to easily cache multilingual sites without having to create the cache key yourself.", "Cache keys also include the current time zone when USE_TZ is set to True.", "A more granular way to use the caching framework is by caching the output of individual views. django.views.decorators.cache defines a cache_page decorator that will automatically cache the view\u2019s response for you:", "cache_page takes a single argument: the cache timeout, in seconds. In the above example, the result of the my_view() view will be cached for 15 minutes. (Note that we\u2019ve written it as 60 * 15 for the purpose of readability. 60 * 15 will be evaluated to 900 \u2013 that is, 15 minutes multiplied by 60 seconds per minute.)", "The cache timeout set by cache_page takes precedence over the max-age directive from the Cache-Control header.", "The per-view cache, like the per-site cache, is keyed off of the URL. If multiple URLs point at the same view, each URL will be cached separately. Continuing the my_view example, if your URLconf looks like this:", "then requests to /foo/1/ and /foo/23/ will be cached separately, as you may expect. But once a particular URL (e.g., /foo/23/) has been requested, subsequent requests to that URL will use the cache.", "cache_page can also take an optional keyword argument, cache, which directs the decorator to use a specific cache (from your CACHES setting) when caching view results. By default, the default cache will be used, but you can specify any cache you want:", "You can also override the cache prefix on a per-view basis. cache_page takes an optional keyword argument, key_prefix, which works in the same way as the CACHE_MIDDLEWARE_KEY_PREFIX setting for the middleware. It can be used like this:", "The key_prefix and cache arguments may be specified together. The key_prefix argument and the KEY_PREFIX specified under CACHES will be concatenated.", "Additionally, cache_page automatically sets Cache-Control and Expires headers in the response which affect downstream caches.", "The examples in the previous section have hard-coded the fact that the view is cached, because cache_page alters the my_view function in place. This approach couples your view to the cache system, which is not ideal for several reasons. For instance, you might want to reuse the view functions on another, cache-less site, or you might want to distribute the views to people who might want to use them without being cached. The solution to these problems is to specify the per-view cache in the URLconf rather than next to the view functions themselves.", "You can do so by wrapping the view function with cache_page when you refer to it in the URLconf. Here\u2019s the old URLconf from earlier:", "Here\u2019s the same thing, with my_view wrapped in cache_page:", "If you\u2019re after even more control, you can also cache template fragments using the cache template tag. To give your template access to this tag, put {% load cache %} near the top of your template.", "The {% cache %} template tag caches the contents of the block for a given amount of time. It takes at least two arguments: the cache timeout, in seconds, and the name to give the cache fragment. The fragment is cached forever if timeout is None. The name will be taken as is, do not use a variable. For example:", "Sometimes you might want to cache multiple copies of a fragment depending on some dynamic data that appears inside the fragment. For example, you might want a separate cached copy of the sidebar used in the previous example for every user of your site. Do this by passing one or more additional arguments, which may be variables with or without filters, to the {% cache %} template tag to uniquely identify the cache fragment:", "If USE_I18N is set to True the per-site middleware cache will respect the active language. For the cache template tag you could use one of the translation-specific variables available in templates to achieve the same result:", "The cache timeout can be a template variable, as long as the template variable resolves to an integer value. For example, if the template variable my_timeout is set to the value 600, then the following two examples are equivalent:", "This feature is useful in avoiding repetition in templates. You can set the timeout in a variable, in one place, and reuse that value.", "By default, the cache tag will try to use the cache called \u201ctemplate_fragments\u201d. If no such cache exists, it will fall back to using the default cache. You may select an alternate cache backend to use with the using keyword argument, which must be the last argument to the tag.", "It is considered an error to specify a cache name that is not configured.", "If you want to obtain the cache key used for a cached fragment, you can use make_template_fragment_key. fragment_name is the same as second argument to the cache template tag; vary_on is a list of all additional arguments passed to the tag. This function can be useful for invalidating or overwriting a cached item, for example:", "Sometimes, caching an entire rendered page doesn\u2019t gain you very much and is, in fact, inconvenient overkill.", "Perhaps, for instance, your site includes a view whose results depend on several expensive queries, the results of which change at different intervals. In this case, it would not be ideal to use the full-page caching that the per-site or per-view cache strategies offer, because you wouldn\u2019t want to cache the entire result (since some of the data changes often), but you\u2019d still want to cache the results that rarely change.", "For cases like this, Django exposes a low-level cache API. You can use this API to store objects in the cache with any level of granularity you like. You can cache any Python object that can be pickled safely: strings, dictionaries, lists of model objects, and so forth. (Most common Python objects can be pickled; refer to the Python documentation for more information about pickling.)", "You can access the caches configured in the CACHES setting through a dict-like object: django.core.cache.caches. Repeated requests for the same alias in the same thread will return the same object.", "If the named key does not exist, InvalidCacheBackendError will be raised.", "To provide thread-safety, a different instance of the cache backend will be returned for each thread.", "As a shortcut, the default cache is available as django.core.cache.cache:", "This object is equivalent to caches['default'].", "The basic interface is:", "key should be a str, and value can be any picklable Python object.", "The timeout argument is optional and defaults to the timeout argument of the appropriate backend in the CACHES setting (explained above). It\u2019s the number of seconds the value should be stored in the cache. Passing in None for timeout will cache the value forever. A timeout of 0 won\u2019t cache the value.", "If the object doesn\u2019t exist in the cache, cache.get() returns None:", "If you need to determine whether the object exists in the cache and you have stored a literal value None, use a sentinel object as the default:", "MemcachedCache", "Due to a python-memcached limitation, it\u2019s not possible to distinguish between stored None value and a cache miss signified by a return value of None on the deprecated MemcachedCache backend.", "cache.get() can take a default argument. This specifies which value to return if the object doesn\u2019t exist in the cache:", "To add a key only if it doesn\u2019t already exist, use the add() method. It takes the same parameters as set(), but it will not attempt to update the cache if the key specified is already present:", "If you need to know whether add() stored a value in the cache, you can check the return value. It will return True if the value was stored, False otherwise.", "If you want to get a key\u2019s value or set a value if the key isn\u2019t in the cache, there is the get_or_set() method. It takes the same parameters as get() but the default is set as the new cache value for that key, rather than returned:", "You can also pass any callable as a default value:", "There\u2019s also a get_many() interface that only hits the cache once. get_many() returns a dictionary with all the keys you asked for that actually exist in the cache (and haven\u2019t expired):", "To set multiple values more efficiently, use set_many() to pass a dictionary of key-value pairs:", "Like cache.set(), set_many() takes an optional timeout parameter.", "On supported backends (memcached), set_many() returns a list of keys that failed to be inserted.", "You can delete keys explicitly with delete() to clear the cache for a particular object:", "delete() returns True if the key was successfully deleted, False otherwise.", "If you want to clear a bunch of keys at once, delete_many() can take a list of keys to be cleared:", "Finally, if you want to delete all the keys in the cache, use cache.clear(). Be careful with this; clear() will remove everything from the cache, not just the keys set by your application.", "cache.touch() sets a new expiration for a key. For example, to update a key to expire 10 seconds from now:", "Like other methods, the timeout argument is optional and defaults to the TIMEOUT option of the appropriate backend in the CACHES setting.", "touch() returns True if the key was successfully touched, False otherwise.", "You can also increment or decrement a key that already exists using the incr() or decr() methods, respectively. By default, the existing cache value will be incremented or decremented by 1. Other increment/decrement values can be specified by providing an argument to the increment/decrement call. A ValueError will be raised if you attempt to increment or decrement a nonexistent cache key.:", "Note", "incr()/decr() methods are not guaranteed to be atomic. On those backends that support atomic increment/decrement (most notably, the memcached backend), increment and decrement operations will be atomic. However, if the backend doesn\u2019t natively provide an increment/decrement operation, it will be implemented using a two-step retrieve/update.", "You can close the connection to your cache with close() if implemented by the cache backend.", "Note", "For caches that don\u2019t implement close methods it is a no-op.", "Note", "The async variants of base methods are prefixed with a, e.g. cache.aadd() or cache.adelete_many(). See Asynchronous support for more details.", "The async variants of methods were added to the BaseCache.", "If you are sharing a cache instance between servers, or between your production and development environments, it\u2019s possible for data cached by one server to be used by another server. If the format of cached data is different between servers, this can lead to some very hard to diagnose problems.", "To prevent this, Django provides the ability to prefix all cache keys used by a server. When a particular cache key is saved or retrieved, Django will automatically prefix the cache key with the value of the KEY_PREFIX cache setting.", "By ensuring each Django instance has a different KEY_PREFIX, you can ensure that there will be no collisions in cache values.", "When you change running code that uses cached values, you may need to purge any existing cached values. The easiest way to do this is to flush the entire cache, but this can lead to the loss of cache values that are still valid and useful.", "Django provides a better way to target individual cache values. Django\u2019s cache framework has a system-wide version identifier, specified using the VERSION cache setting. The value of this setting is automatically combined with the cache prefix and the user-provided cache key to obtain the final cache key.", "By default, any key request will automatically include the site default cache key version. However, the primitive cache functions all include a version argument, so you can specify a particular cache key version to set or get. For example:", "The version of a specific key can be incremented and decremented using the incr_version() and decr_version() methods. This enables specific keys to be bumped to a new version, leaving other keys unaffected. Continuing our previous example:", "As described in the previous two sections, the cache key provided by a user is not used verbatim \u2013 it is combined with the cache prefix and key version to provide a final cache key. By default, the three parts are joined using colons to produce a final string:", "If you want to combine the parts in different ways, or apply other processing to the final key (e.g., taking a hash digest of the key parts), you can provide a custom key function.", "The KEY_FUNCTION cache setting specifies a dotted-path to a function matching the prototype of make_key() above. If provided, this custom key function will be used instead of the default key combining function.", "Memcached, the most commonly-used production cache backend, does not allow cache keys longer than 250 characters or containing whitespace or control characters, and using such keys will cause an exception. To encourage cache-portable code and minimize unpleasant surprises, the other built-in cache backends issue a warning (django.core.cache.backends.base.CacheKeyWarning) if a key is used that would cause an error on memcached.", "If you are using a production backend that can accept a wider range of keys (a custom backend, or one of the non-memcached built-in backends), and want to use this wider range without warnings, you can silence CacheKeyWarning with this code in the management module of one of your INSTALLED_APPS:", "If you want to instead provide custom key validation logic for one of the built-in backends, you can subclass it, override just the validate_key method, and follow the instructions for using a custom cache backend. For instance, to do this for the locmem backend, put this code in a module:", "\u2026and use the dotted Python path to this class in the BACKEND portion of your CACHES setting.", "Django has developing support for asynchronous cache backends, but does not yet support asynchronous caching. It will be coming in a future release.", "django.core.cache.backends.base.BaseCache has async variants of all base methods. By convention, the asynchronous versions of all methods are prefixed with a. By default, the arguments for both variants are the same:", "So far, this document has focused on caching your own data. But another type of caching is relevant to web development, too: caching performed by \u201cdownstream\u201d caches. These are systems that cache pages for users even before the request reaches your website.", "Here are a few examples of downstream caches:", "Downstream caching is a nice efficiency boost, but there\u2019s a danger to it: Many web pages\u2019 contents differ based on authentication and a host of other variables, and cache systems that blindly save pages based purely on URLs could expose incorrect or sensitive data to subsequent visitors to those pages.", "For example, if you operate a web email system, then the contents of the \u201cinbox\u201d page depend on which user is logged in. If an ISP blindly cached your site, then the first user who logged in through that ISP would have their user-specific inbox page cached for subsequent visitors to the site. That\u2019s not cool.", "Fortunately, HTTP provides a solution to this problem. A number of HTTP headers exist to instruct downstream caches to differ their cache contents depending on designated variables, and to tell caching mechanisms not to cache particular pages. We\u2019ll look at some of these headers in the sections that follow.", "The Vary header defines which request headers a cache mechanism should take into account when building its cache key. For example, if the contents of a web page depend on a user\u2019s language preference, the page is said to \u201cvary on language.\u201d", "By default, Django\u2019s cache system creates its cache keys using the requested fully-qualified URL \u2013 e.g., \"https://www.example.com/stories/2005/?order_by=author\". This means every request to that URL will use the same cached version, regardless of user-agent differences such as cookies or language preferences. However, if this page produces different content based on some difference in request headers \u2013 such as a cookie, or a language, or a user-agent \u2013 you\u2019ll need to use the Vary header to tell caching mechanisms that the page output depends on those things.", "To do this in Django, use the convenient django.views.decorators.vary.vary_on_headers() view decorator, like so:", "In this case, a caching mechanism (such as Django\u2019s own cache middleware) will cache a separate version of the page for each unique user-agent.", "The advantage to using the vary_on_headers decorator rather than manually setting the Vary header (using something like response.headers['Vary'] =\n'user-agent') is that the decorator adds to the Vary header (which may already exist), rather than setting it from scratch and potentially overriding anything that was already in there.", "You can pass multiple headers to vary_on_headers():", "This tells downstream caches to vary on both, which means each combination of user-agent and cookie will get its own cache value. For example, a request with the user-agent Mozilla and the cookie value foo=bar will be considered different from a request with the user-agent Mozilla and the cookie value foo=ham.", "Because varying on cookie is so common, there\u2019s a django.views.decorators.vary.vary_on_cookie() decorator. These two views are equivalent:", "The headers you pass to vary_on_headers are not case sensitive; \"User-Agent\" is the same thing as \"user-agent\".", "You can also use a helper function, django.utils.cache.patch_vary_headers(), directly. This function sets, or adds to, the Vary header. For example:", "patch_vary_headers takes an HttpResponse instance as its first argument and a list/tuple of case-insensitive header names as its second argument.", "For more on Vary headers, see the official Vary spec.", "Other problems with caching are the privacy of data and the question of where data should be stored in a cascade of caches.", "A user usually faces two kinds of caches: their own browser cache (a private cache) and their provider\u2019s cache (a public cache). A public cache is used by multiple users and controlled by someone else. This poses problems with sensitive data\u2013you don\u2019t want, say, your bank account number stored in a public cache. So web applications need a way to tell caches which data is private and which is public.", "The solution is to indicate a page\u2019s cache should be \u201cprivate.\u201d To do this in Django, use the cache_control() view decorator. Example:", "This decorator takes care of sending out the appropriate HTTP header behind the scenes.", "Note that the cache control settings \u201cprivate\u201d and \u201cpublic\u201d are mutually exclusive. The decorator ensures that the \u201cpublic\u201d directive is removed if \u201cprivate\u201d should be set (and vice versa). An example use of the two directives would be a blog site that offers both private and public entries. Public entries may be cached on any shared cache. The following code uses patch_cache_control(), the manual way to modify the cache control header (it is internally called by the cache_control() decorator):", "You can control downstream caches in other ways as well (see RFC 7234 for details on HTTP caching). For example, even if you don\u2019t use Django\u2019s server-side cache framework, you can still tell clients to cache a view for a certain amount of time with the max-age directive:", "(If you do use the caching middleware, it already sets the max-age with the value of the CACHE_MIDDLEWARE_SECONDS setting. In that case, the custom max_age from the cache_control() decorator will take precedence, and the header values will be merged correctly.)", "Any valid Cache-Control response directive is valid in cache_control(). Here are some more examples:", "The full list of known directives can be found in the IANA registry (note that not all of them apply to responses).", "If you want to use headers to disable caching altogether, never_cache() is a view decorator that adds headers to ensure the response won\u2019t be cached by browsers or other caches. Example:", "If you use caching middleware, it\u2019s important to put each half in the right place within the MIDDLEWARE setting. That\u2019s because the cache middleware needs to know which headers by which to vary the cache storage. Middleware always adds something to the Vary response header when it can.", "UpdateCacheMiddleware runs during the response phase, where middleware is run in reverse order, so an item at the top of the list runs last during the response phase. Thus, you need to make sure that UpdateCacheMiddleware appears before any other middleware that might add something to the Vary header. The following middleware modules do so:", "FetchFromCacheMiddleware, on the other hand, runs during the request phase, where middleware is applied first-to-last, so an item at the top of the list runs first during the request phase. The FetchFromCacheMiddleware also needs to run after other middleware updates the Vary header, so FetchFromCacheMiddleware must be after any item that does so."]}, {"name": "Editing mixins", "path": "ref/class-based-views/mixins-editing", "type": "API", "text": ["The following mixins are used to construct Django\u2019s editing views:", "Note", "Examples of how these are combined into editing views can be found at the documentation on Generic editing views.", "A mixin class that provides facilities for creating and displaying forms.", "Mixins", "Methods and Attributes", "A dictionary containing initial data for the form.", "The form class to instantiate.", "The URL to redirect to when the form is successfully processed.", "The prefix for the generated form.", "Retrieve initial data for the form. By default, returns a copy of initial.", "Retrieve the form class to instantiate. By default form_class.", "Instantiate an instance of form_class using get_form_kwargs(). If form_class isn\u2019t provided get_form_class() will be used.", "Build the keyword arguments required to instantiate the form.", "The initial argument is set to get_initial(). If the request is a POST or PUT, the request data (request.POST and request.FILES) will also be provided.", "Determine the prefix for the generated form. Returns prefix by default.", "Determine the URL to redirect to when the form is successfully validated. Returns success_url by default.", "Redirects to get_success_url().", "Renders a response, providing the invalid form as context.", "Calls get_form() and adds the result to the context data with the name \u2018form\u2019.", "A form mixin that works on ModelForms, rather than a standalone form.", "Since this is a subclass of SingleObjectMixin, instances of this mixin have access to the model and queryset attributes, describing the type of object that the ModelForm is manipulating.", "If you specify both the fields and form_class attributes, an ImproperlyConfigured exception will be raised.", "Mixins", "Methods and Attributes", "A model class. Can be explicitly provided, otherwise will be determined by examining self.object or queryset.", "A list of names of fields. This is interpreted the same way as the Meta.fields attribute of ModelForm.", "This is a required attribute if you are generating the form class automatically (e.g. using model). Omitting this attribute will result in an ImproperlyConfigured exception.", "The URL to redirect to when the form is successfully processed.", "success_url may contain dictionary string formatting, which will be interpolated against the object\u2019s field attributes. For example, you could use success_url=\"/polls/{slug}/\" to redirect to a URL composed out of the slug field on a model.", "Retrieve the form class to instantiate. If form_class is provided, that class will be used. Otherwise, a ModelForm will be instantiated using the model associated with the queryset, or with the model, depending on which attribute is provided.", "Add the current instance (self.object) to the standard get_form_kwargs().", "Determine the URL to redirect to when the form is successfully validated. Returns django.views.generic.edit.ModelFormMixin.success_url if it is provided; otherwise, attempts to use the get_absolute_url() of the object.", "Saves the form instance, sets the current object for the view, and redirects to get_success_url().", "Renders a response, providing the invalid form as context.", "A mixin that provides basic HTTP GET and POST workflow.", "Note", "This is named \u2018ProcessFormView\u2019 and inherits directly from django.views.generic.base.View, but breaks if used independently, so it is more of a mixin.", "Extends", "Methods and Attributes", "Renders a response using a context created with get_context_data().", "Constructs a form, checks the form for validity, and handles it accordingly.", "The PUT action is also handled and passes all parameters through to post().", "Enables handling of the DELETE HTTP action.", "Methods and Attributes", "The url to redirect to when the nominated object has been successfully deleted.", "success_url may contain dictionary string formatting, which will be interpolated against the object\u2019s field attributes. For example, you could use success_url=\"/parent/{parent_id}/\" to redirect to a URL composed out of the parent_id field on a model.", "Retrieves the target object and calls its delete() method, then redirects to the success URL.", "Returns the url to redirect to when the nominated object has been successfully deleted. Returns success_url by default."]}, {"name": "Examples of model relationship API usage", "path": "topics/db/examples/index", "type": "Guides", "text": []}, {"name": "External packages", "path": "topics/external-packages", "type": "Guides", "text": ["Django ships with a variety of extra, optional tools that solve common problems (contrib.*). For easier maintenance and to trim the size of the codebase, a few of those applications have been moved out to separate projects.", "django-localflavor is a collection of utilities for particular countries and cultures.", "django-contrib-comments can be used to attach comments to any model, so you can use it for comments on blog entries, photos, book chapters, or anything else. Most users will be better served with a custom solution, or a hosted product like Disqus.", "django-formtools is a collection of assorted utilities to work with forms."]}, {"name": "File handling", "path": "ref/files/index", "type": "API", "text": []}, {"name": "File storage API", "path": "ref/files/storage", "type": "API", "text": ["Django provides two convenient ways to access the current storage class:", "DefaultStorage provides lazy access to the current default storage system as defined by DEFAULT_FILE_STORAGE. DefaultStorage uses get_storage_class() internally.", "Returns a class or module which implements the storage API.", "When called without the import_path parameter get_storage_class will return the current default storage system as defined by DEFAULT_FILE_STORAGE. If import_path is provided, get_storage_class will attempt to import the class or module from the given path and will return it if successful. An exception will be raised if the import is unsuccessful.", "The FileSystemStorage class implements basic file storage on a local filesystem. It inherits from Storage and provides implementations for all the public methods thereof.", "Absolute path to the directory that will hold the files. Defaults to the value of your MEDIA_ROOT setting.", "URL that serves the files stored at this location. Defaults to the value of your MEDIA_URL setting.", "The file system permissions that the file will receive when it is saved. Defaults to FILE_UPLOAD_PERMISSIONS.", "The file system permissions that the directory will receive when it is saved. Defaults to FILE_UPLOAD_DIRECTORY_PERMISSIONS.", "Note", "The FileSystemStorage.delete() method will not raise an exception if the given file name does not exist.", "Returns a datetime of the system\u2019s ctime, i.e. os.path.getctime(). On some systems (like Unix), this is the time of the last metadata change, and on others (like Windows), it\u2019s the creation time of the file.", "The Storage class provides a standardized API for storing files, along with a set of default behaviors that all other storage systems can inherit or override as necessary.", "Note", "When methods return naive datetime objects, the effective timezone used will be the current value of os.environ['TZ']; note that this is usually set from Django\u2019s TIME_ZONE.", "Deletes the file referenced by name. If deletion is not supported on the target storage system this will raise NotImplementedError instead.", "Returns True if a file referenced by the given name already exists in the storage system, or False if the name is available for a new file.", "Returns a datetime of the last accessed time of the file. For storage systems unable to return the last accessed time this will raise NotImplementedError.", "If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone.", "Returns an alternative filename based on the file_root and file_ext parameters, an underscore plus a random 7 character alphanumeric string is appended to the filename before the extension.", "Returns a filename based on the name parameter that\u2019s free and available for new content to be written to on the target storage system.", "The length of the filename will not exceed max_length, if provided. If a free unique filename cannot be found, a SuspiciousFileOperation exception will be raised.", "If a file with name already exists, get_alternative_name() is called to obtain an alternative name.", "Returns a datetime of the creation time of the file. For storage systems unable to return the creation time this will raise NotImplementedError.", "If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone.", "Returns a datetime of the last modified time of the file. For storage systems unable to return the last modified time this will raise NotImplementedError.", "If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone.", "Returns a filename based on the name parameter that\u2019s suitable for use on the target storage system.", "Validates the filename by calling get_valid_name() and returns a filename to be passed to the save() method.", "The filename argument may include a path as returned by FileField.upload_to. In that case, the path won\u2019t be passed to get_valid_name() but will be prepended back to the resulting name.", "The default implementation uses os.path operations. Override this method if that\u2019s not appropriate for your storage.", "Lists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren\u2019t able to provide such a listing, this will raise a NotImplementedError instead.", "Opens the file given by name. Note that although the returned file is guaranteed to be a File object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned.", "The local filesystem path where the file can be opened using Python\u2019s standard open(). For storage systems that aren\u2019t accessible from the local filesystem, this will raise NotImplementedError instead.", "Saves a new file using the storage system, preferably with the name specified. If there already exists a file with this name name, the storage system may modify the filename as necessary to get a unique name. The actual name of the stored file will be returned.", "The max_length argument is passed along to get_available_name().", "The content argument must be an instance of django.core.files.File or a file-like object that can be wrapped in File.", "Returns the total size, in bytes, of the file referenced by name. For storage systems that aren\u2019t able to return the file size this will raise NotImplementedError instead.", "Returns the URL where the contents of the file referenced by name can be accessed. For storage systems that don\u2019t support access by URL this will raise NotImplementedError instead."]}, {"name": "File Uploads", "path": "topics/http/file-uploads", "type": "Guides", "text": ["When Django handles a file upload, the file data ends up placed in request.FILES (for more on the request object see the documentation for request and response objects). This document explains how files are stored on disk and in memory, and how to customize the default behavior.", "Warning", "There are security risks if you are accepting uploaded content from untrusted users! See the security guide\u2019s topic on User-uploaded content for mitigation details.", "Consider a form containing a FileField:", "A view handling this form will receive the file data in request.FILES, which is a dictionary containing a key for each FileField (or ImageField, or other FileField subclass) in the form. So the data from the above form would be accessible as request.FILES['file'].", "Note that request.FILES will only contain data if the request method was POST, at least one file field was actually posted, and the <form> that posted the request has the attribute enctype=\"multipart/form-data\". Otherwise, request.FILES will be empty.", "Most of the time, you\u2019ll pass the file data from request into the form as described in Binding uploaded files to a form. This would look something like:", "Notice that we have to pass request.FILES into the form\u2019s constructor; this is how file data gets bound into a form.", "Here\u2019s a common way you might handle an uploaded file:", "Looping over UploadedFile.chunks() instead of using read() ensures that large files don\u2019t overwhelm your system\u2019s memory.", "There are a few other methods and attributes available on UploadedFile objects; see UploadedFile for a complete reference.", "If you\u2019re saving a file on a Model with a FileField, using a ModelForm makes this process much easier. The file object will be saved to the location specified by the upload_to argument of the corresponding FileField when calling form.save():", "If you are constructing an object manually, you can assign the file object from request.FILES to the file field in the model:", "If you want to upload multiple files using one form field, set the multiple HTML attribute of field\u2019s widget:", "Then override the post method of your FormView subclass to handle multiple file uploads:", "When a user uploads a file, Django passes off the file data to an upload handler \u2013 a small class that handles file data as it gets uploaded. Upload handlers are initially defined in the FILE_UPLOAD_HANDLERS setting, which defaults to:", "Together MemoryFileUploadHandler and TemporaryFileUploadHandler provide Django\u2019s default file upload behavior of reading small files into memory and large ones onto disk.", "You can write custom handlers that customize how Django handles files. You could, for example, use custom handlers to enforce user-level quotas, compress data on the fly, render progress bars, and even send data to another storage location directly without storing it locally. See Writing custom upload handlers for details on how you can customize or completely replace upload behavior.", "Before you save uploaded files, the data needs to be stored somewhere.", "By default, if an uploaded file is smaller than 2.5 megabytes, Django will hold the entire contents of the upload in memory. This means that saving the file involves only a read from memory and a write to disk and thus is very fast.", "However, if an uploaded file is too large, Django will write the uploaded file to a temporary file stored in your system\u2019s temporary directory. On a Unix-like platform this means you can expect Django to generate a file called something like /tmp/tmpzfp6I6.upload. If an upload is large enough, you can watch this file grow in size as Django streams the data onto disk.", "These specifics \u2013 2.5 megabytes; /tmp; etc. \u2013 are \u201creasonable defaults\u201d which can be customized as described in the next section.", "There are a few settings which control Django\u2019s file upload behavior. See File Upload Settings for details.", "Sometimes particular views require different upload behavior. In these cases, you can override upload handlers on a per-request basis by modifying request.upload_handlers. By default, this list will contain the upload handlers given by FILE_UPLOAD_HANDLERS, but you can modify the list as you would any other list.", "For instance, suppose you\u2019ve written a ProgressBarUploadHandler that provides feedback on upload progress to some sort of AJAX widget. You\u2019d add this handler to your upload handlers like this:", "You\u2019d probably want to use list.insert() in this case (instead of append()) because a progress bar handler would need to run before any other handlers. Remember, the upload handlers are processed in order.", "If you want to replace the upload handlers completely, you can assign a new list:", "Note", "You can only modify upload handlers before accessing request.POST or request.FILES \u2013 it doesn\u2019t make sense to change upload handlers after upload handling has already started. If you try to modify request.upload_handlers after reading from request.POST or request.FILES Django will throw an error.", "Thus, you should always modify uploading handlers as early in your view as possible.", "Also, request.POST is accessed by CsrfViewMiddleware which is enabled by default. This means you will need to use csrf_exempt() on your view to allow you to change the upload handlers. You will then need to use csrf_protect() on the function that actually processes the request. Note that this means that the handlers may start receiving the file upload before the CSRF checks have been done. Example code:", "If you are using a class-based view, you will need to use csrf_exempt() on its dispatch() method and csrf_protect() on the method that actually processes the request. Example code:"]}, {"name": "flatpages.middleware.FlatpageFallbackMiddleware", "path": "ref/contrib/flatpages#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware", "type": "django.contrib.flatpages", "text": ["Each time any Django application raises a 404 error, this middleware checks the flatpages database for the requested URL as a last resort. Specifically, it checks for a flatpage with the given URL with a site ID that corresponds to the SITE_ID setting.", "If it finds a match, it follows this algorithm:", "The middleware will only add a trailing slash and redirect (by looking at the APPEND_SLASH setting) if the resulting URL refers to a valid flatpage. Redirects are permanent (301 status code).", "If it doesn\u2019t find a match, the request continues to be processed as usual.", "The middleware only gets activated for 404s \u2013 not for 500s or responses of any other status code."]}, {"name": "flatpages.models.FlatPage", "path": "ref/contrib/flatpages#django.contrib.flatpages.models.FlatPage", "type": "django.contrib.flatpages", "text": ["Flatpages are represented by a standard Django model, which lives in django/contrib/flatpages/models.py. You can access flatpage objects via the Django database API."]}, {"name": "flatpages.sitemaps.FlatPageSitemap", "path": "ref/contrib/flatpages#django.contrib.flatpages.sitemaps.FlatPageSitemap", "type": "django.contrib.flatpages", "text": ["The sitemaps.FlatPageSitemap class looks at all publicly visible flatpages defined for the current SITE_ID (see the sites documentation) and creates an entry in the sitemap. These entries include only the location attribute \u2013 not lastmod, changefreq or priority."]}, {"name": "Form and field validation", "path": "ref/forms/validation", "type": "API", "text": ["Form validation happens when the data is cleaned. If you want to customize this process, there are various places to make changes, each one serving a different purpose. Three types of cleaning methods are run during form processing. These are normally executed when you call the is_valid() method on a form. There are other things that can also trigger cleaning and validation (accessing the errors attribute or calling full_clean() directly), but normally they won\u2019t be needed.", "In general, any cleaning method can raise ValidationError if there is a problem with the data it is processing, passing the relevant information to the ValidationError constructor. See below for the best practice in raising ValidationError. If no ValidationError is raised, the method should return the cleaned (normalized) data as a Python object.", "Most validation can be done using validators - helpers that can be reused. Validators are functions (or callables) that take a single argument and raise ValidationError on invalid input. Validators are run after the field\u2019s to_python and validate methods have been called.", "Validation of a form is split into several steps, which can be customized or overridden:", "The clean_<fieldname>() method is called on a form subclass \u2013 where <fieldname> is replaced with the name of the form field attribute. This method does any cleaning that is specific to that particular attribute, unrelated to the type of field that it is. This method is not passed any parameters. You will need to look up the value of the field in self.cleaned_data and remember that it will be a Python object at this point, not the original string submitted in the form (it will be in cleaned_data because the general field clean() method, above, has already cleaned the data once).", "For example, if you wanted to validate that the contents of a CharField called serialnumber was unique, clean_serialnumber() would be the right place to do this. You don\u2019t need a specific field (it\u2019s a CharField), but you want a formfield-specific piece of validation and, possibly, cleaning/normalizing the data.", "The return value of this method replaces the existing value in cleaned_data, so it must be the field\u2019s value from cleaned_data (even if this method didn\u2019t change it) or a new cleaned value.", "The form subclass\u2019s clean() method can perform validation that requires access to multiple form fields. This is where you might put in checks such as \u201cif field A is supplied, field B must contain a valid email address\u201d. This method can return a completely different dictionary if it wishes, which will be used as the cleaned_data.", "Since the field validation methods have been run by the time clean() is called, you also have access to the form\u2019s errors attribute which contains all the errors raised by cleaning of individual fields.", "Note that any errors raised by your Form.clean() override will not be associated with any field in particular. They go into a special \u201cfield\u201d (called __all__), which you can access via the non_field_errors() method if you need to. If you want to attach errors to a specific field in the form, you need to call add_error().", "Also note that there are special considerations when overriding the clean() method of a ModelForm subclass. (see the ModelForm documentation for more information)", "These methods are run in the order given above, one field at a time. That is, for each field in the form (in the order they are declared in the form definition), the Field.clean() method (or its override) is run, then clean_<fieldname>(). Finally, once those two methods are run for every field, the Form.clean() method, or its override, is executed whether or not the previous methods have raised errors.", "Examples of each of these methods are provided below.", "As mentioned, any of these methods can raise a ValidationError. For any field, if the Field.clean() method raises a ValidationError, any field-specific cleaning method is not called. However, the cleaning methods for all remaining fields are still executed.", "In order to make error messages flexible and easy to override, consider the following guidelines:", "Provide a descriptive error code to the constructor:", "Don\u2019t coerce variables into the message; use placeholders and the params argument of the constructor:", "Use mapping keys instead of positional formatting. This enables putting the variables in any order or omitting them altogether when rewriting the message:", "Wrap the message with gettext to enable translation:", "Putting it all together:", "Following these guidelines is particularly necessary if you write reusable forms, form fields, and model fields.", "While not recommended, if you are at the end of the validation chain (i.e. your form clean() method) and you know you will never need to override your error message you can still opt for the less verbose:", "The Form.errors.as_data() and Form.errors.as_json() methods greatly benefit from fully featured ValidationErrors (with a code name and a params dictionary).", "If you detect multiple errors during a cleaning method and wish to signal all of them to the form submitter, it is possible to pass a list of errors to the ValidationError constructor.", "As above, it is recommended to pass a list of ValidationError instances with codes and params but a list of strings will also work:", "The previous sections explained how validation works in general for forms. Since it can sometimes be easier to put things into place by seeing each feature in use, here are a series of small examples that use each of the previous features.", "Django\u2019s form (and model) fields support use of utility functions and classes known as validators. A validator is a callable object or function that takes a value and returns nothing if the value is valid or raises a ValidationError if not. These can be passed to a field\u2019s constructor, via the field\u2019s validators argument, or defined on the Field class itself with the default_validators attribute.", "Validators can be used to validate values inside the field, let\u2019s have a look at Django\u2019s SlugField:", "As you can see, SlugField is a CharField with a customized validator that validates that submitted text obeys to some character rules. This can also be done on field definition so:", "is equivalent to:", "Common cases such as validating against an email or a regular expression can be handled using existing validator classes available in Django. For example, validators.validate_slug is an instance of a RegexValidator constructed with the first argument being the pattern: ^[-a-zA-Z0-9_]+$. See the section on writing validators to see a list of what is already available and for an example of how to write a validator.", "Let\u2019s first create a custom form field that validates its input is a string containing comma-separated email addresses. The full class looks like this:", "Every form that uses this field will have these methods run before anything else can be done with the field\u2019s data. This is cleaning that is specific to this type of field, regardless of how it is subsequently used.", "Let\u2019s create a ContactForm to demonstrate how you\u2019d use this field:", "Use MultiEmailField like any other form field. When the is_valid() method is called on the form, the MultiEmailField.clean() method will be run as part of the cleaning process and it will, in turn, call the custom to_python() and validate() methods.", "Continuing on from the previous example, suppose that in our ContactForm, we want to make sure that the recipients field always contains the address \"fred@example.com\". This is validation that is specific to our form, so we don\u2019t want to put it into the general MultiEmailField class. Instead, we write a cleaning method that operates on the recipients field, like so:", "Suppose we add another requirement to our contact form: if the cc_myself field is True, the subject must contain the word \"help\". We are performing validation on more than one field at a time, so the form\u2019s clean() method is a good spot to do this. Notice that we are talking about the clean() method on the form here, whereas earlier we were writing a clean() method on a field. It\u2019s important to keep the field and form difference clear when working out where to validate things. Fields are single data points, forms are a collection of fields.", "By the time the form\u2019s clean() method is called, all the individual field clean methods will have been run (the previous two sections), so self.cleaned_data will be populated with any data that has survived so far. So you also need to remember to allow for the fact that the fields you are wanting to validate might not have survived the initial individual field checks.", "There are two ways to report any errors from this step. Probably the most common method is to display the error at the top of the form. To create such an error, you can raise a ValidationError from the clean() method. For example:", "In this code, if the validation error is raised, the form will display an error message at the top of the form (normally) describing the problem. Such errors are non-field errors, which are displayed in the template with {{ form.non_field_errors }}.", "The call to super().clean() in the example code ensures that any validation logic in parent classes is maintained. If your form inherits another that doesn\u2019t return a cleaned_data dictionary in its clean() method (doing so is optional), then don\u2019t assign cleaned_data to the result of the super() call and use self.cleaned_data instead:", "The second approach for reporting validation errors might involve assigning the error message to one of the fields. In this case, let\u2019s assign an error message to both the \u201csubject\u201d and \u201ccc_myself\u201d rows in the form display. Be careful when doing this in practice, since it can lead to confusing form output. We\u2019re showing what is possible here and leaving it up to you and your designers to work out what works effectively in your particular situation. Our new code (replacing the previous sample) looks like this:", "The second argument of add_error() can be a string, or preferably an instance of ValidationError. See Raising ValidationError for more details. Note that add_error() automatically removes the field from cleaned_data."]}, {"name": "Form Assets (the Media class)", "path": "topics/forms/media", "type": "Guides", "text": ["Rendering an attractive and easy-to-use web form requires more than just HTML - it also requires CSS stylesheets, and if you want to use fancy widgets, you may also need to include some JavaScript on each page. The exact combination of CSS and JavaScript that is required for any given page will depend upon the widgets that are in use on that page.", "This is where asset definitions come in. Django allows you to associate different files \u2013 like stylesheets and scripts \u2013 with the forms and widgets that require those assets. For example, if you want to use a calendar to render DateFields, you can define a custom Calendar widget. This widget can then be associated with the CSS and JavaScript that is required to render the calendar. When the Calendar widget is used on a form, Django is able to identify the CSS and JavaScript files that are required, and provide the list of file names in a form suitable for inclusion on your web page.", "Assets and Django Admin", "The Django Admin application defines a number of customized widgets for calendars, filtered selections, and so on. These widgets define asset requirements, and the Django Admin uses the custom widgets in place of the Django defaults. The Admin templates will only include those files that are required to render the widgets on any given page.", "If you like the widgets that the Django Admin application uses, feel free to use them in your own application! They\u2019re all stored in django.contrib.admin.widgets.", "Which JavaScript toolkit?", "Many JavaScript toolkits exist, and many of them include widgets (such as calendar widgets) that can be used to enhance your application. Django has deliberately avoided blessing any one JavaScript toolkit. Each toolkit has its own relative strengths and weaknesses - use whichever toolkit suits your requirements. Django is able to integrate with any JavaScript toolkit.", "The easiest way to define assets is as a static definition. Using this method, the declaration is an inner Media class. The properties of the inner class define the requirements.", "Here\u2019s an example:", "This code defines a CalendarWidget, which will be based on TextInput. Every time the CalendarWidget is used on a form, that form will be directed to include the CSS file pretty.css, and the JavaScript files animations.js and actions.js.", "This static definition is converted at runtime into a widget property named media. The list of assets for a CalendarWidget instance can be retrieved through this property:", "Here\u2019s a list of all possible Media options. There are no required options.", "A dictionary describing the CSS files required for various forms of output media.", "The values in the dictionary should be a tuple/list of file names. See the section on paths for details of how to specify paths to these files.", "The keys in the dictionary are the output media types. These are the same types accepted by CSS files in media declarations: \u2018all\u2019, \u2018aural\u2019, \u2018braille\u2019, \u2018embossed\u2019, \u2018handheld\u2019, \u2018print\u2019, \u2018projection\u2019, \u2018screen\u2019, \u2018tty\u2019 and \u2018tv\u2019. If you need to have different stylesheets for different media types, provide a list of CSS files for each output medium. The following example would provide two CSS options \u2013 one for the screen, and one for print:", "If a group of CSS files are appropriate for multiple output media types, the dictionary key can be a comma separated list of output media types. In the following example, TV\u2019s and projectors will have the same media requirements:", "If this last CSS definition were to be rendered, it would become the following HTML:", "A tuple describing the required JavaScript files. See the section on paths for details of how to specify paths to these files.", "A boolean defining inheritance behavior for Media declarations.", "By default, any object using a static Media definition will inherit all the assets associated with the parent widget. This occurs regardless of how the parent defines its own requirements. For example, if we were to extend our basic Calendar widget from the example above:", "The FancyCalendar widget inherits all the assets from its parent widget. If you don\u2019t want Media to be inherited in this way, add an extend=False declaration to the Media declaration:", "If you require even more control over inheritance, define your assets using a dynamic property. Dynamic properties give you complete control over which files are inherited, and which are not.", "If you need to perform some more sophisticated manipulation of asset requirements, you can define the media property directly. This is done by defining a widget property that returns an instance of forms.Media. The constructor for forms.Media accepts css and js keyword arguments in the same format as that used in a static media definition.", "For example, the static definition for our Calendar Widget could also be defined in a dynamic fashion:", "See the section on Media objects for more details on how to construct return values for dynamic media properties.", "Paths used to specify assets can be either relative or absolute. If a path starts with /, http:// or https://, it will be interpreted as an absolute path, and left as-is. All other paths will be prepended with the value of the appropriate prefix. If the django.contrib.staticfiles app is installed, it will be used to serve assets.", "Whether or not you use django.contrib.staticfiles, the STATIC_URL and STATIC_ROOT settings are required to render a complete web page.", "To find the appropriate prefix to use, Django will check if the STATIC_URL setting is not None and automatically fall back to using MEDIA_URL. For example, if the MEDIA_URL for your site was 'http://uploads.example.com/' and STATIC_URL was None:", "But if STATIC_URL is 'http://static.example.com/':", "Or if staticfiles is configured using the ManifestStaticFilesStorage:", "When you interrogate the media attribute of a widget or form, the value that is returned is a forms.Media object. As we have already seen, the string representation of a Media object is the HTML required to include the relevant files in the <head> block of your HTML page.", "However, Media objects have some other interesting properties.", "If you only want files of a particular type, you can use the subscript operator to filter out a medium of interest. For example:", "When you use the subscript operator, the value that is returned is a new Media object \u2013 but one that only contains the media of interest.", "Media objects can also be added together. When two Media objects are added, the resulting Media object contains the union of the assets specified by both:", "The order in which assets are inserted into the DOM is often important. For example, you may have a script that depends on jQuery. Therefore, combining Media objects attempts to preserve the relative order in which assets are defined in each Media class.", "For example:", "Combining Media objects with assets in a conflicting order results in a MediaOrderConflictWarning.", "Widgets aren\u2019t the only objects that can have media definitions \u2013 forms can also define media. The rules for media definitions on forms are the same as the rules for widgets: declarations can be static or dynamic; path and inheritance rules for those declarations are exactly the same.", "Regardless of whether you define a media declaration, all Form objects have a media property. The default value for this property is the result of adding the media definitions for all widgets that are part of the form:", "If you want to associate additional assets with a form \u2013 for example, CSS for form layout \u2013 add a Media declaration to the form:"]}, {"name": "Form fields", "path": "ref/forms/fields", "type": "API", "text": ["When you create a Form class, the most important part is defining the fields of the form. Each field has custom validation logic, along with a few other hooks.", "Although the primary way you\u2019ll use Field classes is in Form classes, you can also instantiate them and use them directly to get a better idea of how they work. Each Field instance has a clean() method, which takes a single argument and either raises a django.core.exceptions.ValidationError exception or returns the clean value:", "Each Field class constructor takes at least these arguments. Some Field classes take additional, field-specific arguments, but the following should always be accepted:", "By default, each Field class assumes the value is required, so if you pass an empty value \u2013 either None or the empty string (\"\") \u2013 then clean() will raise a ValidationError exception:", "To specify that a field is not required, pass required=False to the Field constructor:", "If a Field has required=False and you pass clean() an empty value, then clean() will return a normalized empty value rather than raising ValidationError. For CharField, this will return empty_value which defaults to an empty string. For other Field classes, it might be None. (This varies from field to field.)", "Widgets of required form fields have the required HTML attribute. Set the Form.use_required_attribute attribute to False to disable it. The required attribute isn\u2019t included on forms of formsets because the browser validation may not be correct when adding and deleting formsets.", "The label argument lets you specify the \u201chuman-friendly\u201d label for this field. This is used when the Field is displayed in a Form.", "As explained in \u201cOutputting forms as HTML\u201d above, the default label for a Field is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Specify label if that default behavior doesn\u2019t result in an adequate label.", "Here\u2019s a full example Form that implements label for two of its fields. We\u2019ve specified auto_id=False to simplify the output:", "The label_suffix argument lets you override the form\u2019s label_suffix on a per-field basis:", "The initial argument lets you specify the initial value to use when rendering this Field in an unbound Form.", "To specify dynamic initial data, see the Form.initial parameter.", "The use-case for this is when you want to display an \u201cempty\u201d form in which a field is initialized to a particular value. For example:", "You may be thinking, why not just pass a dictionary of the initial values as data when displaying the form? Well, if you do that, you\u2019ll trigger validation, and the HTML output will include any validation errors:", "This is why initial values are only displayed for unbound forms. For bound forms, the HTML output will use the bound data.", "Also note that initial values are not used as \u201cfallback\u201d data in validation if a particular field\u2019s value is not given. initial values are only intended for initial form display:", "Instead of a constant, you can also pass any callable:", "The callable will be evaluated only when the unbound form is displayed, not when it is defined.", "The widget argument lets you specify a Widget class to use when rendering this Field. See Widgets for more information.", "The help_text argument lets you specify descriptive text for this Field. If you provide help_text, it will be displayed next to the Field when the Field is rendered by one of the convenience Form methods (e.g., as_ul()).", "Like the model field\u2019s help_text, this value isn\u2019t HTML-escaped in automatically-generated forms.", "Here\u2019s a full example Form that implements help_text for two of its fields. We\u2019ve specified auto_id=False to simplify the output:", "The error_messages argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override. For example, here is the default error message:", "And here is a custom error message:", "In the built-in Field classes section below, each Field defines the error message keys it uses.", "The validators argument lets you provide a list of validation functions for this field.", "See the validators documentation for more information.", "The localize argument enables the localization of form data input, as well as the rendered output.", "See the format localization documentation for more information.", "The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won\u2019t be editable by users. Even if a user tampers with the field\u2019s value submitted to the server, it will be ignored in favor of the value from the form\u2019s initial data.", "The has_changed() method is used to determine if the field value has changed from the initial value. Returns True or False.", "See the Form.has_changed() documentation for more information.", "Naturally, the forms library comes with a set of Field classes that represent common validation needs. This section documents each built-in field.", "For each field, we describe the default widget used if you don\u2019t specify widget. We also specify the value returned when you provide an empty value (see the section on required above to understand what that means).", "Note", "Since all Field subclasses have required=True by default, the validation condition here is important. If you want to include a boolean in your form that can be either True or False (e.g. a checked or unchecked checkbox), you must remember to pass in required=False when creating the BooleanField.", "Has four optional arguments for validation:", "If provided, these arguments ensure that the string is at most or at least the given length.", "If True (default), the value will be stripped of leading and trailing whitespace.", "The value to use to represent \u201cempty\u201d. Defaults to an empty string.", "The invalid_choice error message may contain %(value)s, which will be replaced with the selected choice.", "Takes one extra argument:", "Either an iterable of 2-tuples to use as choices for this field, enumeration choices, or a callable that returns such an iterable. This argument accepts the same formats as the choices argument to a model field. See the model field reference documentation on choices for more details. If the argument is a callable, it is evaluated each time the field\u2019s form is initialized, in addition to during rendering. Defaults to an empty list.", "Takes one optional argument:", "A list of formats used to attempt to convert a string to a valid datetime.date object.", "If no input_formats argument is provided, the default input formats are taken from DATE_INPUT_FORMATS if USE_L10N is False, or from the active locale format DATE_INPUT_FORMATS key if localization is enabled. See also format localization.", "Takes one optional argument:", "A list of formats used to attempt to convert a string to a valid datetime.datetime object, in addition to ISO 8601 formats.", "The field always accepts strings in ISO 8601 formatted dates or similar recognized by parse_datetime(). Some examples are:", "If no input_formats argument is provided, the default input formats are taken from DATETIME_INPUT_FORMATS and DATE_INPUT_FORMATS if USE_L10N is False, or from the active locale format DATETIME_INPUT_FORMATS and DATE_INPUT_FORMATS keys if localization is enabled. See also format localization.", "The max_value and min_value error messages may contain %(limit_value)s, which will be substituted by the appropriate limit. Similarly, the max_digits, max_decimal_places and max_whole_digits error messages may contain %(max)s.", "Takes four optional arguments:", "These control the range of values permitted in the field, and should be given as decimal.Decimal values.", "The maximum number of digits (those before the decimal point plus those after the decimal point, with leading zeros stripped) permitted in the value.", "The maximum number of decimal places permitted.", "Accepts any format understood by parse_duration().", "Has three optional arguments max_length, min_length, and empty_value which work just as they do for CharField.", "Has two optional arguments for validation, max_length and allow_empty_file. If provided, these ensure that the file name is at most the given length, and that validation will succeed even if the file content is empty.", "To learn more about the UploadedFile object, see the file uploads documentation.", "When you use a FileField in a form, you must also remember to bind the file data to the form.", "The max_length error refers to the length of the filename. In the error message for that key, %(max)d will be replaced with the maximum filename length and %(length)d will be replaced with the current filename length.", "The field allows choosing from files inside a certain directory. It takes five extra arguments; only path is required:", "The absolute path to the directory whose contents you want listed. This directory must exist.", "If False (the default) only the direct contents of path will be offered as choices. If True, the directory will be descended into recursively and all descendants will be listed as choices.", "A regular expression pattern; only files with names matching this expression will be allowed as choices.", "Optional. Either True or False. Default is True. Specifies whether files in the specified location should be included. Either this or allow_folders must be True.", "Optional. Either True or False. Default is False. Specifies whether folders in the specified location should be included. Either this or allow_files must be True.", "Takes two optional arguments for validation, max_value and min_value. These control the range of values permitted in the field.", "A field containing either an IPv4 or an IPv6 address.", "The IPv6 address normalization follows RFC 4291#section-2.2 section 2.2, including using the IPv4 format suggested in paragraph 3 of that section, like ::ffff:192.0.2.0. For example, 2001:0::0:01 would be normalized to 2001::1, and ::ffff:0a0a:0a0a to ::ffff:10.10.10.10. All characters are converted to lowercase.", "Takes two optional arguments:", "Limits valid inputs to the specified protocol. Accepted values are both (default), IPv4 or IPv6. Matching is case insensitive.", "Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'.", "Using an ImageField requires that Pillow is installed with support for the image formats you use. If you encounter a corrupt image error when you upload an image, it usually means that Pillow doesn\u2019t understand its format. To fix this, install the appropriate library and reinstall Pillow.", "When you use an ImageField on a form, you must also remember to bind the file data to the form.", "After the field has been cleaned and validated, the UploadedFile object will have an additional image attribute containing the Pillow Image instance used to check if the file was a valid image. Pillow closes the underlying file descriptor after verifying an image, so while non-image data attributes, such as format, height, and width, are available, methods that access the underlying image data, such as getdata() or getpixel(), cannot be used without reopening the file. For example:", "Additionally, UploadedFile.content_type will be updated with the image\u2019s content type if Pillow can determine it, otherwise it will be set to None.", "The max_value and min_value error messages may contain %(limit_value)s, which will be substituted by the appropriate limit.", "Takes two optional arguments for validation:", "These control the range of values permitted in the field.", "A field which accepts JSON encoded data for a JSONField.", "Takes two optional arguments:", "A json.JSONEncoder subclass to serialize data types not supported by the standard JSON serializer (e.g. datetime.datetime or UUID). For example, you can use the DjangoJSONEncoder class.", "Defaults to json.JSONEncoder.", "A json.JSONDecoder subclass to deserialize the input. Your deserialization may need to account for the fact that you can\u2019t be certain of the input type. For example, you run the risk of returning a datetime that was actually a string that just happened to be in the same format chosen for datetimes.", "The decoder can be used to validate the input. If json.JSONDecodeError is raised during the deserialization, a ValidationError will be raised.", "Defaults to json.JSONDecoder.", "Note", "If you use a ModelForm, the encoder and decoder from JSONField will be used.", "User friendly forms", "JSONField is not particularly user friendly in most cases. However, it is a useful way to format data from a client-side widget for submission to the server.", "The invalid_choice error message may contain %(value)s, which will be replaced with the selected choice.", "Takes one extra required argument, choices, as for ChoiceField.", "NullBooleanField may be used with widgets such as Select or RadioSelect by providing the widget choices:", "Takes one required argument:", "A regular expression specified either as a string or a compiled regular expression object.", "Also takes max_length, min_length, strip, and empty_value which work just as they do for CharField.", "Defaults to False. If enabled, stripping will be applied before the regex validation.", "This field is intended for use in representing a model SlugField in forms.", "Takes two optional parameters:", "A boolean instructing the field to accept Unicode letters in addition to ASCII letters. Defaults to False.", "The value to use to represent \u201cempty\u201d. Defaults to an empty string.", "Takes one optional argument:", "A list of formats used to attempt to convert a string to a valid datetime.time object.", "If no input_formats argument is provided, the default input formats are taken from TIME_INPUT_FORMATS if USE_L10N is False, or from the active locale format TIME_INPUT_FORMATS key if localization is enabled. See also format localization.", "Just like a ChoiceField, except TypedChoiceField takes two extra arguments, coerce and empty_value.", "Takes extra arguments:", "A function that takes one argument and returns a coerced value. Examples include the built-in int, float, bool and other types. Defaults to an identity function. Note that coercion happens after input validation, so it is possible to coerce to a value not present in choices.", "The value to use to represent \u201cempty.\u201d Defaults to the empty string; None is another common choice here. Note that this value will not be coerced by the function given in the coerce argument, so choose it accordingly.", "Just like a MultipleChoiceField, except TypedMultipleChoiceField takes two extra arguments, coerce and empty_value.", "The invalid_choice error message may contain %(value)s, which will be replaced with the selected choice.", "Takes two extra arguments, coerce and empty_value, as for TypedChoiceField.", "Has three optional arguments max_length, min_length, and empty_value which work just as they do for CharField.", "This field will accept any string format accepted as the hex argument to the UUID constructor.", "Takes one extra required argument:", "The list of fields that should be used to validate the field\u2019s value (in the order in which they are provided).", "Aggregates the logic of multiple fields that together produce a single value.", "This field is abstract and must be subclassed. In contrast with the single-value fields, subclasses of MultiValueField must not implement clean() but instead - implement compress().", "Takes one extra required argument:", "A tuple of fields whose values are cleaned and subsequently combined into a single value. Each value of the field is cleaned by the corresponding field in fields \u2013 the first value is cleaned by the first field, the second value is cleaned by the second field, etc. Once all fields are cleaned, the list of clean values is combined into a single value by compress().", "Also takes some optional arguments:", "Defaults to True, in which case a required validation error will be raised if no value is supplied for any field.", "When set to False, the Field.required attribute can be set to False for individual fields to make them optional. If no value is supplied for a required field, an incomplete validation error will be raised.", "A default incomplete error message can be defined on the MultiValueField subclass, or different messages can be defined on each individual field. For example:", "Must be a subclass of django.forms.MultiWidget. Default value is TextInput, which probably is not very useful in this case.", "Takes a list of valid values and returns a \u201ccompressed\u201d version of those values \u2013 in a single value. For example, SplitDateTimeField is a subclass which combines a time field and a date field into a datetime object.", "This method must be implemented in the subclasses.", "Takes two optional arguments:", "A list of formats used to attempt to convert a string to a valid datetime.date object.", "If no input_date_formats argument is provided, the default input formats for DateField are used.", "A list of formats used to attempt to convert a string to a valid datetime.time object.", "If no input_time_formats argument is provided, the default input formats for TimeField are used.", "Two fields are available for representing relationships between models: ModelChoiceField and ModelMultipleChoiceField. Both of these fields require a single queryset parameter that is used to create the choices for the field. Upon form validation, these fields will place either one model object (in the case of ModelChoiceField) or multiple model objects (in the case of ModelMultipleChoiceField) into the cleaned_data dictionary of the form.", "For more complex uses, you can specify queryset=None when declaring the form field and then populate the queryset in the form\u2019s __init__() method:", "Both ModelChoiceField and ModelMultipleChoiceField have an iterator attribute which specifies the class used to iterate over the queryset when generating choices. See Iterating relationship choices for details.", "The invalid_choice error message may contain %(value)s, which will be replaced with the selected choice.", "Allows the selection of a single model object, suitable for representing a foreign key. Note that the default widget for ModelChoiceField becomes impractical when the number of entries increases. You should avoid using it for more than 100 items.", "A single argument is required:", "A QuerySet of model objects from which the choices for the field are derived and which is used to validate the user\u2019s selection. It\u2019s evaluated when the form is rendered.", "ModelChoiceField also takes two optional arguments:", "By default the <select> widget used by ModelChoiceField will have an empty choice at the top of the list. You can change the text of this label (which is \"---------\" by default) with the empty_label attribute, or you can disable the empty label entirely by setting empty_label to None:", "Note that if a ModelChoiceField is required and has a default initial value, no empty choice is created (regardless of the value of empty_label).", "This optional argument is used to specify the field to use as the value of the choices in the field\u2019s widget. Be sure it\u2019s a unique field for the model, otherwise the selected value could match more than one object. By default it is set to None, in which case the primary key of each object will be used. For example:", "would yield:", "and:", "would yield:", "ModelChoiceField also has the attribute:", "The iterator class used to generate field choices from queryset. By default, ModelChoiceIterator.", "The __str__() method of the model will be called to generate string representations of the objects for use in the field\u2019s choices. To provide customized representations, subclass ModelChoiceField and override label_from_instance. This method will receive a model object and should return a string suitable for representing it. For example:", "Support for containing %(value)s in the invalid_choice error message was added.", "The invalid_choice message may contain %(value)s and the invalid_pk_value message may contain %(pk)s, which will be substituted by the appropriate values.", "Allows the selection of one or more model objects, suitable for representing a many-to-many relation. As with ModelChoiceField, you can use label_from_instance to customize the object representations.", "A single argument is required:", "Same as ModelChoiceField.queryset.", "Takes one optional argument:", "Same as ModelChoiceField.to_field_name.", "ModelMultipleChoiceField also has the attribute:", "Same as ModelChoiceField.iterator.", "By default, ModelChoiceField and ModelMultipleChoiceField use ModelChoiceIterator to generate their field choices.", "When iterated, ModelChoiceIterator yields 2-tuple choices containing ModelChoiceIteratorValue instances as the first value element in each choice. ModelChoiceIteratorValue wraps the choice value while maintaining a reference to the source model instance that can be used in custom widget implementations, for example, to add data-* attributes to <option> elements.", "For example, consider the following models:", "You can use a Select widget subclass to include the value of Topping.price as the HTML attribute data-price for each <option> element:", "This will render the Pizza.topping select as:", "For more advanced usage you may subclass ModelChoiceIterator in order to customize the yielded 2-tuple choices.", "The default class assigned to the iterator attribute of ModelChoiceField and ModelMultipleChoiceField. An iterable that yields 2-tuple choices from the queryset.", "A single argument is required:", "The instance of ModelChoiceField or ModelMultipleChoiceField to iterate and yield choices.", "ModelChoiceIterator has the following method:", "Yields 2-tuple choices, in the (value, label) format used by ChoiceField.choices. The first value element is a ModelChoiceIteratorValue instance.", "Two arguments are required:", "The value of the choice. This value is used to render the value attribute of an HTML <option> element.", "The model instance from the queryset. The instance can be accessed in custom ChoiceWidget.create_option() implementations to adjust the rendered HTML.", "ModelChoiceIteratorValue has the following method:", "Return value as a string to be rendered in HTML.", "If the built-in Field classes don\u2019t meet your needs, you can create custom Field classes. To do this, create a subclass of django.forms.Field. Its only requirements are that it implement a clean() method and that its __init__() method accept the core arguments mentioned above (required, label, initial, widget, help_text).", "You can also customize how a field will be accessed by overriding get_bound_field()."]}, {"name": "Form handling with class-based views", "path": "topics/class-based-views/generic-editing", "type": "Guides", "text": ["Form processing generally has 3 paths:", "Implementing this yourself often results in a lot of repeated boilerplate code (see Using a form in a view). To help avoid this, Django provides a collection of generic class-based views for form processing.", "Given a contact form:", "The view can be constructed using a FormView:", "Notes:", "Generic views really shine when working with models. These generic views will automatically create a ModelForm, so long as they can work out which model class to use:", "Model form views provide a form_valid() implementation that saves the model automatically. You can override this if you have any special requirements; see below for examples.", "You don\u2019t even need to provide a success_url for CreateView or UpdateView - they will use get_absolute_url() on the model object if available.", "If you want to use a custom ModelForm (for instance to add extra validation), set form_class on your view.", "Note", "When specifying a custom form class, you must still specify the model, even though the form_class may be a ModelForm.", "First we need to add get_absolute_url() to our Author class:", "Then we can use CreateView and friends to do the actual work. Notice how we\u2019re just configuring the generic class-based views here; we don\u2019t have to write any logic ourselves:", "Note", "We have to use reverse_lazy() instead of reverse(), as the urls are not loaded when the file is imported.", "The fields attribute works the same way as the fields attribute on the inner Meta class on ModelForm. Unless you define the form class in another way, the attribute is required and the view will raise an ImproperlyConfigured exception if it\u2019s not.", "If you specify both the fields and form_class attributes, an ImproperlyConfigured exception will be raised.", "Finally, we hook these new views into the URLconf:", "Note", "These views inherit SingleObjectTemplateResponseMixin which uses template_name_suffix to construct the template_name based on the model.", "In this example:", "If you wish to have separate templates for CreateView and UpdateView, you can set either template_name or template_name_suffix on your view class.", "To track the user that created an object using a CreateView, you can use a custom ModelForm to do this. First, add the foreign key relation to the model:", "In the view, ensure that you don\u2019t include created_by in the list of fields to edit, and override form_valid() to add the user:", "LoginRequiredMixin prevents users who aren\u2019t logged in from accessing the form. If you omit that, you\u2019ll need to handle unauthorized users in form_valid().", "Here is an example showing how you might go about implementing a form that works with an API-based workflow as well as \u2018normal\u2019 form POSTs:"]}, {"name": "Format localization", "path": "topics/i18n/formatting", "type": "Guides", "text": ["Django\u2019s formatting system is capable of displaying dates, times and numbers in templates using the format specified for the current locale. It also handles localized input in forms.", "When it\u2019s enabled, two users accessing the same content may see dates, times and numbers formatted in different ways, depending on the formats for their current locale.", "The formatting system is disabled by default. To enable it, it\u2019s necessary to set USE_L10N = True in your settings file.", "Note", "To enable number formatting with thousand separators, it is necessary to set USE_THOUSAND_SEPARATOR = True in your settings file. Alternatively, you could use intcomma to format numbers in your template.", "Note", "There is a related USE_I18N setting that controls if Django should activate translation. See Translation for more details.", "When formatting is enabled, Django can use localized formats when parsing dates, times and numbers in forms. That means it tries different formats for different locales when guessing the format used by the user when inputting data on forms.", "Note", "Django uses different formats for displaying data to those it uses for parsing data. Most notably, the formats for parsing dates can\u2019t use the %a (abbreviated weekday name), %A (full weekday name), %b (abbreviated month name), %B (full month name), or %p (AM/PM).", "To enable a form field to localize input and output data use its localize argument:", "When you have enabled formatting with USE_L10N, Django will try to use a locale specific format whenever it outputs a value in a template.", "However, it may not always be appropriate to use localized values \u2013 for example, if you\u2019re outputting JavaScript or XML that is designed to be machine-readable, you will always want unlocalized values. You may also want to use localization in selected templates, rather than using localization everywhere.", "To allow for fine control over the use of localization, Django provides the l10n template library that contains the following tags and filters.", "Enables or disables localization of template variables in the contained block.", "This tag allows a more fine grained control of localization than USE_L10N.", "To activate or deactivate localization for a template block, use:", "Note", "The value of USE_L10N isn\u2019t respected inside of a {% localize %} block.", "See localize and unlocalize for template filters that will do the same job on a per-variable basis.", "Forces localization of a single value.", "For example:", "To disable localization on a single value, use unlocalize. To control localization over a large section of a template, use the localize template tag.", "Forces a single value to be printed without localization.", "For example:", "To force localization of a single value, use localize. To control localization over a large section of a template, use the localize template tag.", "Returns a string representation for unlocalized numbers (int, float, or Decimal).", "Django provides format definitions for many locales, but sometimes you might want to create your own, because a format file doesn\u2019t exist for your locale, or because you want to overwrite some of the values.", "To use custom formats, specify the path where you\u2019ll place format files first. To do that, set your FORMAT_MODULE_PATH setting to the package where format files will exist, for instance:", "Files are not placed directly in this directory, but in a directory named as the locale, and must be named formats.py. Be careful not to put sensitive information in these files as values inside can be exposed if you pass the string to django.utils.formats.get_format() (used by the date template filter).", "To customize the English formats, a structure like this would be needed:", "where formats.py contains custom format definitions. For example:", "to use a non-breaking space (Unicode 00A0) as a thousand separator, instead of the default for English, a comma.", "Some locales use context-sensitive formats for numbers, which Django\u2019s localization system cannot handle automatically.", "The Swiss number formatting depends on the type of number that is being formatted. For monetary values, a comma is used as the thousand separator and a decimal point for the decimal separator. For all other numbers, a comma is used as decimal separator and a space as thousand separator. The locale format provided by Django uses the generic separators, a comma for decimal and a space for thousand separators."]}, {"name": "Forms", "path": "ref/forms/index", "type": "API", "text": ["Detailed form API reference. For introductory material, see the Working with forms topic guide."]}, {"name": "forms.BooleanField", "path": "ref/forms/fields#django.forms.BooleanField", "type": "django.forms", "text": ["Note", "Since all Field subclasses have required=True by default, the validation condition here is important. If you want to include a boolean in your form that can be either True or False (e.g. a checked or unchecked checkbox), you must remember to pass in required=False when creating the BooleanField."]}, {"name": "forms.BoundField", "path": "ref/forms/api#django.forms.BoundField", "type": "django.forms", "text": ["Used to display HTML or access attributes for a single field of a Form instance.", "The __str__() method of this object displays the HTML for this field."]}, {"name": "forms.BoundField.as_hidden()", "path": "ref/forms/api#django.forms.BoundField.as_hidden", "type": "django.forms", "text": ["Returns a string of HTML for representing this as an <input type=\"hidden\">.", "**kwargs are passed to as_widget().", "This method is primarily used internally. You should use a widget instead."]}, {"name": "forms.BoundField.as_widget()", "path": "ref/forms/api#django.forms.BoundField.as_widget", "type": "django.forms", "text": ["Renders the field by rendering the passed widget, adding any HTML attributes passed as attrs. If no widget is specified, then the field\u2019s default widget will be used.", "only_initial is used by Django internals and should not be set explicitly."]}, {"name": "forms.BoundField.auto_id", "path": "ref/forms/api#django.forms.BoundField.auto_id", "type": "django.forms", "text": ["The HTML ID attribute for this BoundField. Returns an empty string if Form.auto_id is False."]}, {"name": "forms.BoundField.css_classes()", "path": "ref/forms/api#django.forms.BoundField.css_classes", "type": "django.forms", "text": ["When you use Django\u2019s rendering shortcuts, CSS classes are used to indicate required form fields or fields that contain errors. If you\u2019re manually rendering a form, you can access these CSS classes using the css_classes method:", "If you want to provide some additional classes in addition to the error and required classes that may be required, you can provide those classes as an argument:"]}, {"name": "forms.BoundField.data", "path": "ref/forms/api#django.forms.BoundField.data", "type": "django.forms", "text": ["This property returns the data for this BoundField extracted by the widget\u2019s value_from_datadict() method, or None if it wasn\u2019t given:"]}, {"name": "forms.BoundField.errors", "path": "ref/forms/api#django.forms.BoundField.errors", "type": "django.forms", "text": ["A list-like object that is displayed as an HTML <ul class=\"errorlist\"> when printed:"]}, {"name": "forms.BoundField.field", "path": "ref/forms/api#django.forms.BoundField.field", "type": "django.forms", "text": ["The form Field instance from the form class that this BoundField wraps."]}, {"name": "forms.BoundField.form", "path": "ref/forms/api#django.forms.BoundField.form", "type": "django.forms", "text": ["The Form instance this BoundField is bound to."]}, {"name": "forms.BoundField.help_text", "path": "ref/forms/api#django.forms.BoundField.help_text", "type": "django.forms", "text": ["The help_text of the field."]}, {"name": "forms.BoundField.html_name", "path": "ref/forms/api#django.forms.BoundField.html_name", "type": "django.forms", "text": ["The name that will be used in the widget\u2019s HTML name attribute. It takes the form prefix into account."]}, {"name": "forms.BoundField.id_for_label", "path": "ref/forms/api#django.forms.BoundField.id_for_label", "type": "django.forms", "text": ["Use this property to render the ID of this field. For example, if you are manually constructing a <label> in your template (despite the fact that label_tag() will do this for you):", "By default, this will be the field\u2019s name prefixed by id_ (\u201cid_my_field\u201d for the example above). You may modify the ID by setting attrs on the field\u2019s widget. For example, declaring a field like this:", "and using the template above, would render something like:"]}, {"name": "forms.BoundField.initial", "path": "ref/forms/api#django.forms.BoundField.initial", "type": "django.forms", "text": ["Use BoundField.initial to retrieve initial data for a form field. It retrieves the data from Form.initial if present, otherwise trying Field.initial. Callable values are evaluated. See Initial form values for more examples.", "BoundField.initial caches its return value, which is useful especially when dealing with callables whose return values can change (e.g. datetime.now or uuid.uuid4):", "Using BoundField.initial is recommended over get_initial_for_field()."]}, {"name": "forms.BoundField.is_hidden", "path": "ref/forms/api#django.forms.BoundField.is_hidden", "type": "django.forms", "text": ["Returns True if this BoundField\u2019s widget is hidden."]}, {"name": "forms.BoundField.label", "path": "ref/forms/api#django.forms.BoundField.label", "type": "django.forms", "text": ["The label of the field. This is used in label_tag()."]}, {"name": "forms.BoundField.label_tag()", "path": "ref/forms/api#django.forms.BoundField.label_tag", "type": "django.forms", "text": ["Renders a label tag for the form field using the template specified by Form.template_name_label.", "The available context is:", "Tip", "In your template field is the instance of the BoundField. Therefore field.field accesses BoundField.field being the field you declare, e.g. forms.CharField.", "To separately render the label tag of a form field, you can call its label_tag() method:", "If you\u2019d like to customize the rendering this can be achieved by overriding the Form.template_name_label attribute or more generally by overriding the default template, see also Overriding built-in form templates.", "The label is now rendered using the template engine."]}, {"name": "forms.BoundField.name", "path": "ref/forms/api#django.forms.BoundField.name", "type": "django.forms", "text": ["The name of this field in the form:"]}, {"name": "forms.BoundField.value()", "path": "ref/forms/api#django.forms.BoundField.value", "type": "django.forms", "text": ["Use this method to render the raw value of this field as it would be rendered by a Widget:"]}, {"name": "forms.BoundField.widget_type", "path": "ref/forms/api#django.forms.BoundField.widget_type", "type": "django.forms", "text": ["Returns the lowercased class name of the wrapped field\u2019s widget, with any trailing input or widget removed. This may be used when building forms where the layout is dependent upon the widget type. For example:"]}, {"name": "forms.CharField", "path": "ref/forms/fields#django.forms.CharField", "type": "django.forms", "text": ["Has four optional arguments for validation:", "If provided, these arguments ensure that the string is at most or at least the given length.", "If True (default), the value will be stripped of leading and trailing whitespace.", "The value to use to represent \u201cempty\u201d. Defaults to an empty string."]}, {"name": "forms.CharField.empty_value", "path": "ref/forms/fields#django.forms.CharField.empty_value", "type": "django.forms", "text": ["The value to use to represent \u201cempty\u201d. Defaults to an empty string."]}, {"name": "forms.CharField.max_length", "path": "ref/forms/fields#django.forms.CharField.max_length", "type": "django.forms", "text": []}, {"name": "forms.CharField.min_length", "path": "ref/forms/fields#django.forms.CharField.min_length", "type": "django.forms", "text": ["If provided, these arguments ensure that the string is at most or at least the given length."]}, {"name": "forms.CharField.strip", "path": "ref/forms/fields#django.forms.CharField.strip", "type": "django.forms", "text": ["If True (default), the value will be stripped of leading and trailing whitespace."]}, {"name": "forms.CheckboxInput", "path": "ref/forms/widgets#django.forms.CheckboxInput", "type": "django.forms", "text": ["Takes one optional argument:", "A callable that takes the value of the CheckboxInput and returns True if the checkbox should be checked for that value."]}, {"name": "forms.CheckboxInput.check_test", "path": "ref/forms/widgets#django.forms.CheckboxInput.check_test", "type": "django.forms", "text": ["A callable that takes the value of the CheckboxInput and returns True if the checkbox should be checked for that value."]}, {"name": "forms.CheckboxSelectMultiple", "path": "ref/forms/widgets#django.forms.CheckboxSelectMultiple", "type": "django.forms", "text": ["Similar to SelectMultiple, but rendered as a list of checkboxes:", "The outer <div> container receives the id attribute of the widget, if defined, or BoundField.auto_id otherwise.", "So they are announced more concisely by screen readers, checkboxes were changed to render in <div> tags."]}, {"name": "forms.ChoiceField", "path": "ref/forms/fields#django.forms.ChoiceField", "type": "django.forms", "text": ["The invalid_choice error message may contain %(value)s, which will be replaced with the selected choice.", "Takes one extra argument:", "Either an iterable of 2-tuples to use as choices for this field, enumeration choices, or a callable that returns such an iterable. This argument accepts the same formats as the choices argument to a model field. See the model field reference documentation on choices for more details. If the argument is a callable, it is evaluated each time the field\u2019s form is initialized, in addition to during rendering. Defaults to an empty list."]}, {"name": "forms.ChoiceField.choices", "path": "ref/forms/fields#django.forms.ChoiceField.choices", "type": "django.forms", "text": ["Either an iterable of 2-tuples to use as choices for this field, enumeration choices, or a callable that returns such an iterable. This argument accepts the same formats as the choices argument to a model field. See the model field reference documentation on choices for more details. If the argument is a callable, it is evaluated each time the field\u2019s form is initialized, in addition to during rendering. Defaults to an empty list."]}, {"name": "forms.ClearableFileInput", "path": "ref/forms/widgets#django.forms.ClearableFileInput", "type": "django.forms", "text": []}, {"name": "forms.ComboField", "path": "ref/forms/fields#django.forms.ComboField", "type": "django.forms", "text": ["Takes one extra required argument:", "The list of fields that should be used to validate the field\u2019s value (in the order in which they are provided)."]}, {"name": "forms.ComboField.fields", "path": "ref/forms/fields#django.forms.ComboField.fields", "type": "django.forms", "text": ["The list of fields that should be used to validate the field\u2019s value (in the order in which they are provided)."]}, {"name": "forms.DateField", "path": "ref/forms/fields#django.forms.DateField", "type": "django.forms", "text": ["Takes one optional argument:", "A list of formats used to attempt to convert a string to a valid datetime.date object.", "If no input_formats argument is provided, the default input formats are taken from DATE_INPUT_FORMATS if USE_L10N is False, or from the active locale format DATE_INPUT_FORMATS key if localization is enabled. See also format localization."]}, {"name": "forms.DateField.input_formats", "path": "ref/forms/fields#django.forms.DateField.input_formats", "type": "django.forms", "text": ["A list of formats used to attempt to convert a string to a valid datetime.date object."]}, {"name": "forms.DateInput", "path": "ref/forms/widgets#django.forms.DateInput", "type": "django.forms", "text": ["Takes same arguments as TextInput, with one more optional argument:", "The format in which this field\u2019s initial value will be displayed.", "If no format argument is provided, the default format is the first format found in DATE_INPUT_FORMATS and respects Format localization."]}, {"name": "forms.DateInput.format", "path": "ref/forms/widgets#django.forms.DateInput.format", "type": "django.forms", "text": ["The format in which this field\u2019s initial value will be displayed."]}, {"name": "forms.DateTimeField", "path": "ref/forms/fields#django.forms.DateTimeField", "type": "django.forms", "text": ["Takes one optional argument:", "A list of formats used to attempt to convert a string to a valid datetime.datetime object, in addition to ISO 8601 formats.", "The field always accepts strings in ISO 8601 formatted dates or similar recognized by parse_datetime(). Some examples are:", "If no input_formats argument is provided, the default input formats are taken from DATETIME_INPUT_FORMATS and DATE_INPUT_FORMATS if USE_L10N is False, or from the active locale format DATETIME_INPUT_FORMATS and DATE_INPUT_FORMATS keys if localization is enabled. See also format localization."]}, {"name": "forms.DateTimeField.input_formats", "path": "ref/forms/fields#django.forms.DateTimeField.input_formats", "type": "django.forms", "text": ["A list of formats used to attempt to convert a string to a valid datetime.datetime object, in addition to ISO 8601 formats."]}, {"name": "forms.DateTimeInput", "path": "ref/forms/widgets#django.forms.DateTimeInput", "type": "django.forms", "text": ["Takes same arguments as TextInput, with one more optional argument:", "The format in which this field\u2019s initial value will be displayed.", "If no format argument is provided, the default format is the first format found in DATETIME_INPUT_FORMATS and respects Format localization.", "By default, the microseconds part of the time value is always set to 0. If microseconds are required, use a subclass with the supports_microseconds attribute set to True."]}, {"name": "forms.DateTimeInput.format", "path": "ref/forms/widgets#django.forms.DateTimeInput.format", "type": "django.forms", "text": ["The format in which this field\u2019s initial value will be displayed."]}, {"name": "forms.DecimalField", "path": "ref/forms/fields#django.forms.DecimalField", "type": "django.forms", "text": ["The max_value and min_value error messages may contain %(limit_value)s, which will be substituted by the appropriate limit. Similarly, the max_digits, max_decimal_places and max_whole_digits error messages may contain %(max)s.", "Takes four optional arguments:", "These control the range of values permitted in the field, and should be given as decimal.Decimal values.", "The maximum number of digits (those before the decimal point plus those after the decimal point, with leading zeros stripped) permitted in the value.", "The maximum number of decimal places permitted."]}, {"name": "forms.DecimalField.decimal_places", "path": "ref/forms/fields#django.forms.DecimalField.decimal_places", "type": "django.forms", "text": ["The maximum number of decimal places permitted."]}, {"name": "forms.DecimalField.max_digits", "path": "ref/forms/fields#django.forms.DecimalField.max_digits", "type": "django.forms", "text": ["The maximum number of digits (those before the decimal point plus those after the decimal point, with leading zeros stripped) permitted in the value."]}, {"name": "forms.DecimalField.max_value", "path": "ref/forms/fields#django.forms.DecimalField.max_value", "type": "django.forms", "text": []}, {"name": "forms.DecimalField.min_value", "path": "ref/forms/fields#django.forms.DecimalField.min_value", "type": "django.forms", "text": ["These control the range of values permitted in the field, and should be given as decimal.Decimal values."]}, {"name": "forms.DurationField", "path": "ref/forms/fields#django.forms.DurationField", "type": "django.forms", "text": ["Accepts any format understood by parse_duration()."]}, {"name": "forms.EmailField", "path": "ref/forms/fields#django.forms.EmailField", "type": "django.forms", "text": ["Has three optional arguments max_length, min_length, and empty_value which work just as they do for CharField."]}, {"name": "forms.EmailInput", "path": "ref/forms/widgets#django.forms.EmailInput", "type": "django.forms", "text": []}, {"name": "forms.ErrorList", "path": "ref/forms/api#django.forms.ErrorList", "type": "django.forms", "text": ["By default, forms use django.forms.utils.ErrorList to format validation errors. ErrorList is a list like object where initlist is the list of errors. In addition this class has the following attributes and methods.", "The CSS classes to be used when rendering the error list. Any provided classes are added to the default errorlist class.", "Specifies the renderer to use for ErrorList. Defaults to None which means to use the default renderer specified by the FORM_RENDERER setting.", "The name of the template used when calling __str__ or render(). By default this is 'django/forms/errors/list/default.html' which is a proxy for the 'ul.html' template.", "The name of the template used when calling as_text(). By default this is 'django/forms/errors/list/text.html'. This template renders the errors as a list of bullet points.", "The name of the template used when calling as_ul(). By default this is 'django/forms/errors/list/ul.html'. This template renders the errors in <li> tags with a wrapping <ul> with the CSS classes as defined by error_class.", "Return context for rendering of errors in a template.", "The available context is:", "The render method is called by __str__ as well as by the as_ul() method.", "All arguments are optional and will default to:", "Renders the error list using the template defined by template_name_text.", "Renders the error list using the template defined by template_name_ul.", "If you\u2019d like to customize the rendering of errors this can be achieved by overriding the template_name attribute or more generally by overriding the default template, see also Overriding built-in form templates."]}, {"name": "forms.ErrorList.as_text()", "path": "ref/forms/api#django.forms.ErrorList.as_text", "type": "django.forms", "text": ["Renders the error list using the template defined by template_name_text."]}, {"name": "forms.ErrorList.as_ul()", "path": "ref/forms/api#django.forms.ErrorList.as_ul", "type": "django.forms", "text": ["Renders the error list using the template defined by template_name_ul."]}, {"name": "forms.ErrorList.error_class", "path": "ref/forms/api#django.forms.ErrorList.error_class", "type": "django.forms", "text": ["The CSS classes to be used when rendering the error list. Any provided classes are added to the default errorlist class."]}, {"name": "forms.ErrorList.get_context()", "path": "ref/forms/api#django.forms.ErrorList.get_context", "type": "django.forms", "text": ["Return context for rendering of errors in a template.", "The available context is:"]}, {"name": "forms.ErrorList.render()", "path": "ref/forms/api#django.forms.ErrorList.render", "type": "django.forms", "text": ["The render method is called by __str__ as well as by the as_ul() method.", "All arguments are optional and will default to:"]}, {"name": "forms.ErrorList.renderer", "path": "ref/forms/api#django.forms.ErrorList.renderer", "type": "django.forms", "text": ["Specifies the renderer to use for ErrorList. Defaults to None which means to use the default renderer specified by the FORM_RENDERER setting."]}, {"name": "forms.ErrorList.template_name", "path": "ref/forms/api#django.forms.ErrorList.template_name", "type": "django.forms", "text": ["The name of the template used when calling __str__ or render(). By default this is 'django/forms/errors/list/default.html' which is a proxy for the 'ul.html' template."]}, {"name": "forms.ErrorList.template_name_text", "path": "ref/forms/api#django.forms.ErrorList.template_name_text", "type": "django.forms", "text": ["The name of the template used when calling as_text(). By default this is 'django/forms/errors/list/text.html'. This template renders the errors as a list of bullet points."]}, {"name": "forms.ErrorList.template_name_ul", "path": "ref/forms/api#django.forms.ErrorList.template_name_ul", "type": "django.forms", "text": ["The name of the template used when calling as_ul(). By default this is 'django/forms/errors/list/ul.html'. This template renders the errors in <li> tags with a wrapping <ul> with the CSS classes as defined by error_class."]}, {"name": "forms.Field", "path": "ref/forms/fields#django.forms.Field", "type": "django.forms", "text": []}, {"name": "forms.Field.clean()", "path": "ref/forms/fields#django.forms.Field.clean", "type": "django.forms", "text": []}, {"name": "forms.Field.disabled", "path": "ref/forms/fields#django.forms.Field.disabled", "type": "django.forms", "text": []}, {"name": "forms.Field.error_messages", "path": "ref/forms/fields#django.forms.Field.error_messages", "type": "django.forms", "text": []}, {"name": "forms.Field.get_bound_field()", "path": "ref/forms/api#django.forms.Field.get_bound_field", "type": "django.forms", "text": ["Takes an instance of Form and the name of the field. The return value will be used when accessing the field in a template. Most likely it will be an instance of a subclass of BoundField."]}, {"name": "forms.Field.has_changed()", "path": "ref/forms/fields#django.forms.Field.has_changed", "type": "django.forms", "text": []}, {"name": "forms.Field.help_text", "path": "ref/forms/fields#django.forms.Field.help_text", "type": "django.forms", "text": []}, {"name": "forms.Field.initial", "path": "ref/forms/fields#django.forms.Field.initial", "type": "django.forms", "text": []}, {"name": "forms.Field.label", "path": "ref/forms/fields#django.forms.Field.label", "type": "django.forms", "text": []}, {"name": "forms.Field.label_suffix", "path": "ref/forms/fields#django.forms.Field.label_suffix", "type": "django.forms", "text": []}, {"name": "forms.Field.localize", "path": "ref/forms/fields#django.forms.Field.localize", "type": "django.forms", "text": []}, {"name": "forms.Field.required", "path": "ref/forms/fields#django.forms.Field.required", "type": "django.forms", "text": []}, {"name": "forms.Field.validators", "path": "ref/forms/fields#django.forms.Field.validators", "type": "django.forms", "text": []}, {"name": "forms.Field.widget", "path": "ref/forms/fields#django.forms.Field.widget", "type": "django.forms", "text": []}, {"name": "forms.FileField", "path": "ref/forms/fields#django.forms.FileField", "type": "django.forms", "text": ["Has two optional arguments for validation, max_length and allow_empty_file. If provided, these ensure that the file name is at most the given length, and that validation will succeed even if the file content is empty.", "To learn more about the UploadedFile object, see the file uploads documentation.", "When you use a FileField in a form, you must also remember to bind the file data to the form.", "The max_length error refers to the length of the filename. In the error message for that key, %(max)d will be replaced with the maximum filename length and %(length)d will be replaced with the current filename length."]}, {"name": "forms.FileInput", "path": "ref/forms/widgets#django.forms.FileInput", "type": "django.forms", "text": []}, {"name": "forms.FilePathField", "path": "ref/forms/fields#django.forms.FilePathField", "type": "django.forms", "text": ["The field allows choosing from files inside a certain directory. It takes five extra arguments; only path is required:", "The absolute path to the directory whose contents you want listed. This directory must exist.", "If False (the default) only the direct contents of path will be offered as choices. If True, the directory will be descended into recursively and all descendants will be listed as choices.", "A regular expression pattern; only files with names matching this expression will be allowed as choices.", "Optional. Either True or False. Default is True. Specifies whether files in the specified location should be included. Either this or allow_folders must be True.", "Optional. Either True or False. Default is False. Specifies whether folders in the specified location should be included. Either this or allow_files must be True."]}, {"name": "forms.FilePathField.allow_files", "path": "ref/forms/fields#django.forms.FilePathField.allow_files", "type": "django.forms", "text": ["Optional. Either True or False. Default is True. Specifies whether files in the specified location should be included. Either this or allow_folders must be True."]}, {"name": "forms.FilePathField.allow_folders", "path": "ref/forms/fields#django.forms.FilePathField.allow_folders", "type": "django.forms", "text": ["Optional. Either True or False. Default is False. Specifies whether folders in the specified location should be included. Either this or allow_files must be True."]}, {"name": "forms.FilePathField.match", "path": "ref/forms/fields#django.forms.FilePathField.match", "type": "django.forms", "text": ["A regular expression pattern; only files with names matching this expression will be allowed as choices."]}, {"name": "forms.FilePathField.path", "path": "ref/forms/fields#django.forms.FilePathField.path", "type": "django.forms", "text": ["The absolute path to the directory whose contents you want listed. This directory must exist."]}, {"name": "forms.FilePathField.recursive", "path": "ref/forms/fields#django.forms.FilePathField.recursive", "type": "django.forms", "text": ["If False (the default) only the direct contents of path will be offered as choices. If True, the directory will be descended into recursively and all descendants will be listed as choices."]}, {"name": "forms.FloatField", "path": "ref/forms/fields#django.forms.FloatField", "type": "django.forms", "text": ["Takes two optional arguments for validation, max_value and min_value. These control the range of values permitted in the field."]}, {"name": "forms.Form", "path": "ref/forms/api#django.forms.Form", "type": "django.forms", "text": []}, {"name": "forms.Form.add_error()", "path": "ref/forms/api#django.forms.Form.add_error", "type": "django.forms", "text": []}, {"name": "forms.Form.as_p()", "path": "ref/forms/api#django.forms.Form.as_p", "type": "django.forms", "text": []}, {"name": "forms.Form.as_table()", "path": "ref/forms/api#django.forms.Form.as_table", "type": "django.forms", "text": []}, {"name": "forms.Form.as_ul()", "path": "ref/forms/api#django.forms.Form.as_ul", "type": "django.forms", "text": []}, {"name": "forms.Form.auto_id", "path": "ref/forms/api#django.forms.Form.auto_id", "type": "django.forms", "text": []}, {"name": "forms.Form.changed_data", "path": "ref/forms/api#django.forms.Form.changed_data", "type": "django.forms", "text": []}, {"name": "forms.Form.clean()", "path": "ref/forms/api#django.forms.Form.clean", "type": "django.forms", "text": []}, {"name": "forms.Form.cleaned_data", "path": "ref/forms/api#django.forms.Form.cleaned_data", "type": "django.forms", "text": []}, {"name": "forms.Form.default_renderer", "path": "ref/forms/api#django.forms.Form.default_renderer", "type": "django.forms", "text": []}, {"name": "forms.Form.error_css_class", "path": "ref/forms/api#django.forms.Form.error_css_class", "type": "django.forms", "text": []}, {"name": "forms.Form.errors", "path": "ref/forms/api#django.forms.Form.errors", "type": "django.forms", "text": []}, {"name": "forms.Form.errors.as_data()", "path": "ref/forms/api#django.forms.Form.errors.as_data", "type": "django.forms", "text": []}, {"name": "forms.Form.errors.as_json()", "path": "ref/forms/api#django.forms.Form.errors.as_json", "type": "django.forms", "text": []}, {"name": "forms.Form.errors.get_json_data()", "path": "ref/forms/api#django.forms.Form.errors.get_json_data", "type": "django.forms", "text": []}, {"name": "forms.Form.field_order", "path": "ref/forms/api#django.forms.Form.field_order", "type": "django.forms", "text": []}, {"name": "forms.Form.fields", "path": "ref/forms/api#django.forms.Form.fields", "type": "django.forms", "text": []}, {"name": "forms.Form.get_context()", "path": "ref/forms/api#django.forms.Form.get_context", "type": "django.forms", "text": []}, {"name": "forms.Form.get_initial_for_field()", "path": "ref/forms/api#django.forms.Form.get_initial_for_field", "type": "django.forms", "text": []}, {"name": "forms.Form.has_changed()", "path": "ref/forms/api#django.forms.Form.has_changed", "type": "django.forms", "text": []}, {"name": "forms.Form.has_error()", "path": "ref/forms/api#django.forms.Form.has_error", "type": "django.forms", "text": []}, {"name": "forms.Form.initial", "path": "ref/forms/api#django.forms.Form.initial", "type": "django.forms", "text": []}, {"name": "forms.Form.is_bound", "path": "ref/forms/api#django.forms.Form.is_bound", "type": "django.forms", "text": []}, {"name": "forms.Form.is_multipart()", "path": "ref/forms/api#django.forms.Form.is_multipart", "type": "django.forms", "text": []}, {"name": "forms.Form.is_valid()", "path": "ref/forms/api#django.forms.Form.is_valid", "type": "django.forms", "text": []}, {"name": "forms.Form.label_suffix", "path": "ref/forms/api#django.forms.Form.label_suffix", "type": "django.forms", "text": []}, {"name": "forms.Form.non_field_errors()", "path": "ref/forms/api#django.forms.Form.non_field_errors", "type": "django.forms", "text": []}, {"name": "forms.Form.order_fields()", "path": "ref/forms/api#django.forms.Form.order_fields", "type": "django.forms", "text": []}, {"name": "forms.Form.prefix", "path": "ref/forms/api#django.forms.Form.prefix", "type": "django.forms", "text": []}, {"name": "forms.Form.render()", "path": "ref/forms/api#django.forms.Form.render", "type": "django.forms", "text": []}, {"name": "forms.Form.required_css_class", "path": "ref/forms/api#django.forms.Form.required_css_class", "type": "django.forms", "text": []}, {"name": "forms.Form.template_name", "path": "ref/forms/api#django.forms.Form.template_name", "type": "django.forms", "text": []}, {"name": "forms.Form.template_name_label", "path": "ref/forms/api#django.forms.Form.template_name_label", "type": "django.forms", "text": []}, {"name": "forms.Form.use_required_attribute", "path": "ref/forms/api#django.forms.Form.use_required_attribute", "type": "django.forms", "text": []}, {"name": "forms.formsets.BaseFormSet", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet", "type": "django.forms", "text": []}, {"name": "forms.formsets.BaseFormSet.as_p()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.as_p", "type": "django.forms", "text": ["Renders the formset with the template_name_p template."]}, {"name": "forms.formsets.BaseFormSet.as_table()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.as_table", "type": "django.forms", "text": ["Renders the formset with the template_name_table template."]}, {"name": "forms.formsets.BaseFormSet.as_ul()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.as_ul", "type": "django.forms", "text": ["Renders the formset with the template_name_ul template."]}, {"name": "forms.formsets.BaseFormSet.can_delete", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.can_delete", "type": "django.forms", "text": []}, {"name": "forms.formsets.BaseFormSet.can_delete_extra", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.can_delete_extra", "type": "django.forms", "text": []}, {"name": "forms.formsets.BaseFormSet.can_order", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.can_order", "type": "django.forms", "text": []}, {"name": "forms.formsets.BaseFormSet.deletion_widget", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.deletion_widget", "type": "django.forms", "text": []}, {"name": "forms.formsets.BaseFormSet.get_context()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.get_context", "type": "django.forms", "text": ["Returns the context for rendering a formset in a template.", "The available context is:"]}, {"name": "forms.formsets.BaseFormSet.get_deletion_widget()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.get_deletion_widget", "type": "django.forms", "text": []}, {"name": "forms.formsets.BaseFormSet.get_ordering_widget()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.get_ordering_widget", "type": "django.forms", "text": []}, {"name": "forms.formsets.BaseFormSet.ordering_widget", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.ordering_widget", "type": "django.forms", "text": []}, {"name": "forms.formsets.BaseFormSet.render()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.render", "type": "django.forms", "text": ["The render method is called by __str__ as well as the as_p(), as_ul(), and as_table() methods. All arguments are optional and will default to:"]}, {"name": "forms.formsets.BaseFormSet.renderer", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.renderer", "type": "django.forms", "text": ["Specifies the renderer to use for the formset. Defaults to the renderer specified by the FORM_RENDERER setting."]}, {"name": "forms.formsets.BaseFormSet.template_name", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.template_name", "type": "django.forms", "text": ["The name of the template used when calling __str__ or render(). This template renders the formset\u2019s management form and then each form in the formset as per the template defined by the form\u2019s template_name. This is a proxy of as_table by default."]}, {"name": "forms.formsets.BaseFormSet.template_name_p", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.template_name_p", "type": "django.forms", "text": ["The name of the template used when calling as_p(). By default this is 'django/forms/formsets/p.html'. This template renders the formset\u2019s management form and then each form in the formset as per the form\u2019s as_p() method."]}, {"name": "forms.formsets.BaseFormSet.template_name_table", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.template_name_table", "type": "django.forms", "text": ["The name of the template used when calling as_table(). By default this is 'django/forms/formsets/table.html'. This template renders the formset\u2019s management form and then each form in the formset as per the form\u2019s as_table() method."]}, {"name": "forms.formsets.BaseFormSet.template_name_ul", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.template_name_ul", "type": "django.forms", "text": ["The name of the template used when calling as_ul(). By default this is 'django/forms/formsets/ul.html'. This template renders the formset\u2019s management form and then each form in the formset as per the form\u2019s as_ul() method."]}, {"name": "forms.formsets.BaseFormSet.total_error_count()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.total_error_count", "type": "django.forms", "text": []}, {"name": "forms.formsets.formset_factory()", "path": "ref/forms/formsets#django.forms.formsets.formset_factory", "type": "django.forms", "text": ["Returns a FormSet class for the given form class.", "See formsets for example usage.", "The absolute_max and can_delete_extra arguments were added.", "The renderer argument was added."]}, {"name": "forms.GenericIPAddressField", "path": "ref/forms/fields#django.forms.GenericIPAddressField", "type": "django.forms", "text": ["A field containing either an IPv4 or an IPv6 address.", "The IPv6 address normalization follows RFC 4291#section-2.2 section 2.2, including using the IPv4 format suggested in paragraph 3 of that section, like ::ffff:192.0.2.0. For example, 2001:0::0:01 would be normalized to 2001::1, and ::ffff:0a0a:0a0a to ::ffff:10.10.10.10. All characters are converted to lowercase.", "Takes two optional arguments:", "Limits valid inputs to the specified protocol. Accepted values are both (default), IPv4 or IPv6. Matching is case insensitive.", "Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'."]}, {"name": "forms.GenericIPAddressField.protocol", "path": "ref/forms/fields#django.forms.GenericIPAddressField.protocol", "type": "django.forms", "text": ["Limits valid inputs to the specified protocol. Accepted values are both (default), IPv4 or IPv6. Matching is case insensitive."]}, {"name": "forms.GenericIPAddressField.unpack_ipv4", "path": "ref/forms/fields#django.forms.GenericIPAddressField.unpack_ipv4", "type": "django.forms", "text": ["Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'."]}, {"name": "forms.HiddenInput", "path": "ref/forms/widgets#django.forms.HiddenInput", "type": "django.forms", "text": ["Note that there also is a MultipleHiddenInput widget that encapsulates a set of hidden input elements."]}, {"name": "forms.ImageField", "path": "ref/forms/fields#django.forms.ImageField", "type": "django.forms", "text": ["Using an ImageField requires that Pillow is installed with support for the image formats you use. If you encounter a corrupt image error when you upload an image, it usually means that Pillow doesn\u2019t understand its format. To fix this, install the appropriate library and reinstall Pillow.", "When you use an ImageField on a form, you must also remember to bind the file data to the form.", "After the field has been cleaned and validated, the UploadedFile object will have an additional image attribute containing the Pillow Image instance used to check if the file was a valid image. Pillow closes the underlying file descriptor after verifying an image, so while non-image data attributes, such as format, height, and width, are available, methods that access the underlying image data, such as getdata() or getpixel(), cannot be used without reopening the file. For example:", "Additionally, UploadedFile.content_type will be updated with the image\u2019s content type if Pillow can determine it, otherwise it will be set to None."]}, {"name": "forms.IntegerField", "path": "ref/forms/fields#django.forms.IntegerField", "type": "django.forms", "text": ["The max_value and min_value error messages may contain %(limit_value)s, which will be substituted by the appropriate limit.", "Takes two optional arguments for validation:", "These control the range of values permitted in the field."]}, {"name": "forms.IntegerField.max_value", "path": "ref/forms/fields#django.forms.IntegerField.max_value", "type": "django.forms", "text": []}, {"name": "forms.IntegerField.min_value", "path": "ref/forms/fields#django.forms.IntegerField.min_value", "type": "django.forms", "text": ["These control the range of values permitted in the field."]}, {"name": "forms.JSONField", "path": "ref/forms/fields#django.forms.JSONField", "type": "django.forms", "text": ["A field which accepts JSON encoded data for a JSONField.", "Takes two optional arguments:", "A json.JSONEncoder subclass to serialize data types not supported by the standard JSON serializer (e.g. datetime.datetime or UUID). For example, you can use the DjangoJSONEncoder class.", "Defaults to json.JSONEncoder.", "A json.JSONDecoder subclass to deserialize the input. Your deserialization may need to account for the fact that you can\u2019t be certain of the input type. For example, you run the risk of returning a datetime that was actually a string that just happened to be in the same format chosen for datetimes.", "The decoder can be used to validate the input. If json.JSONDecodeError is raised during the deserialization, a ValidationError will be raised.", "Defaults to json.JSONDecoder.", "Note", "If you use a ModelForm, the encoder and decoder from JSONField will be used.", "User friendly forms", "JSONField is not particularly user friendly in most cases. However, it is a useful way to format data from a client-side widget for submission to the server."]}, {"name": "forms.JSONField.decoder", "path": "ref/forms/fields#django.forms.JSONField.decoder", "type": "django.forms", "text": ["A json.JSONDecoder subclass to deserialize the input. Your deserialization may need to account for the fact that you can\u2019t be certain of the input type. For example, you run the risk of returning a datetime that was actually a string that just happened to be in the same format chosen for datetimes.", "The decoder can be used to validate the input. If json.JSONDecodeError is raised during the deserialization, a ValidationError will be raised.", "Defaults to json.JSONDecoder."]}, {"name": "forms.JSONField.encoder", "path": "ref/forms/fields#django.forms.JSONField.encoder", "type": "django.forms", "text": ["A json.JSONEncoder subclass to serialize data types not supported by the standard JSON serializer (e.g. datetime.datetime or UUID). For example, you can use the DjangoJSONEncoder class.", "Defaults to json.JSONEncoder."]}, {"name": "forms.ModelChoiceField", "path": "ref/forms/fields#django.forms.ModelChoiceField", "type": "django.forms", "text": ["The invalid_choice error message may contain %(value)s, which will be replaced with the selected choice.", "Allows the selection of a single model object, suitable for representing a foreign key. Note that the default widget for ModelChoiceField becomes impractical when the number of entries increases. You should avoid using it for more than 100 items.", "A single argument is required:", "A QuerySet of model objects from which the choices for the field are derived and which is used to validate the user\u2019s selection. It\u2019s evaluated when the form is rendered.", "ModelChoiceField also takes two optional arguments:", "By default the <select> widget used by ModelChoiceField will have an empty choice at the top of the list. You can change the text of this label (which is \"---------\" by default) with the empty_label attribute, or you can disable the empty label entirely by setting empty_label to None:", "Note that if a ModelChoiceField is required and has a default initial value, no empty choice is created (regardless of the value of empty_label).", "This optional argument is used to specify the field to use as the value of the choices in the field\u2019s widget. Be sure it\u2019s a unique field for the model, otherwise the selected value could match more than one object. By default it is set to None, in which case the primary key of each object will be used. For example:", "would yield:", "and:", "would yield:", "ModelChoiceField also has the attribute:", "The iterator class used to generate field choices from queryset. By default, ModelChoiceIterator.", "The __str__() method of the model will be called to generate string representations of the objects for use in the field\u2019s choices. To provide customized representations, subclass ModelChoiceField and override label_from_instance. This method will receive a model object and should return a string suitable for representing it. For example:", "Support for containing %(value)s in the invalid_choice error message was added."]}, {"name": "forms.ModelChoiceField.empty_label", "path": "ref/forms/fields#django.forms.ModelChoiceField.empty_label", "type": "django.forms", "text": ["By default the <select> widget used by ModelChoiceField will have an empty choice at the top of the list. You can change the text of this label (which is \"---------\" by default) with the empty_label attribute, or you can disable the empty label entirely by setting empty_label to None:", "Note that if a ModelChoiceField is required and has a default initial value, no empty choice is created (regardless of the value of empty_label)."]}, {"name": "forms.ModelChoiceField.iterator", "path": "ref/forms/fields#django.forms.ModelChoiceField.iterator", "type": "django.forms", "text": ["The iterator class used to generate field choices from queryset. By default, ModelChoiceIterator."]}, {"name": "forms.ModelChoiceField.queryset", "path": "ref/forms/fields#django.forms.ModelChoiceField.queryset", "type": "django.forms", "text": ["A QuerySet of model objects from which the choices for the field are derived and which is used to validate the user\u2019s selection. It\u2019s evaluated when the form is rendered."]}, {"name": "forms.ModelChoiceField.to_field_name", "path": "ref/forms/fields#django.forms.ModelChoiceField.to_field_name", "type": "django.forms", "text": ["This optional argument is used to specify the field to use as the value of the choices in the field\u2019s widget. Be sure it\u2019s a unique field for the model, otherwise the selected value could match more than one object. By default it is set to None, in which case the primary key of each object will be used. For example:", "would yield:", "and:", "would yield:"]}, {"name": "forms.ModelChoiceIterator", "path": "ref/forms/fields#django.forms.ModelChoiceIterator", "type": "django.forms", "text": ["The default class assigned to the iterator attribute of ModelChoiceField and ModelMultipleChoiceField. An iterable that yields 2-tuple choices from the queryset.", "A single argument is required:", "The instance of ModelChoiceField or ModelMultipleChoiceField to iterate and yield choices.", "ModelChoiceIterator has the following method:", "Yields 2-tuple choices, in the (value, label) format used by ChoiceField.choices. The first value element is a ModelChoiceIteratorValue instance."]}, {"name": "forms.ModelChoiceIterator.__iter__()", "path": "ref/forms/fields#django.forms.ModelChoiceIterator.__iter__", "type": "django.forms", "text": ["Yields 2-tuple choices, in the (value, label) format used by ChoiceField.choices. The first value element is a ModelChoiceIteratorValue instance."]}, {"name": "forms.ModelChoiceIterator.field", "path": "ref/forms/fields#django.forms.ModelChoiceIterator.field", "type": "django.forms", "text": ["The instance of ModelChoiceField or ModelMultipleChoiceField to iterate and yield choices."]}, {"name": "forms.ModelChoiceIteratorValue", "path": "ref/forms/fields#django.forms.ModelChoiceIteratorValue", "type": "django.forms", "text": ["Two arguments are required:", "The value of the choice. This value is used to render the value attribute of an HTML <option> element.", "The model instance from the queryset. The instance can be accessed in custom ChoiceWidget.create_option() implementations to adjust the rendered HTML.", "ModelChoiceIteratorValue has the following method:", "Return value as a string to be rendered in HTML."]}, {"name": "forms.ModelChoiceIteratorValue.__str__()", "path": "ref/forms/fields#django.forms.ModelChoiceIteratorValue.__str__", "type": "django.forms", "text": ["Return value as a string to be rendered in HTML."]}, {"name": "forms.ModelChoiceIteratorValue.instance", "path": "ref/forms/fields#django.forms.ModelChoiceIteratorValue.instance", "type": "django.forms", "text": ["The model instance from the queryset. The instance can be accessed in custom ChoiceWidget.create_option() implementations to adjust the rendered HTML."]}, {"name": "forms.ModelChoiceIteratorValue.value", "path": "ref/forms/fields#django.forms.ModelChoiceIteratorValue.value", "type": "django.forms", "text": ["The value of the choice. This value is used to render the value attribute of an HTML <option> element."]}, {"name": "forms.ModelForm", "path": "topics/forms/modelforms#django.forms.ModelForm", "type": "django.forms", "text": []}, {"name": "forms.ModelMultipleChoiceField", "path": "ref/forms/fields#django.forms.ModelMultipleChoiceField", "type": "django.forms", "text": ["The invalid_choice message may contain %(value)s and the invalid_pk_value message may contain %(pk)s, which will be substituted by the appropriate values.", "Allows the selection of one or more model objects, suitable for representing a many-to-many relation. As with ModelChoiceField, you can use label_from_instance to customize the object representations.", "A single argument is required:", "Same as ModelChoiceField.queryset.", "Takes one optional argument:", "Same as ModelChoiceField.to_field_name.", "ModelMultipleChoiceField also has the attribute:", "Same as ModelChoiceField.iterator."]}, {"name": "forms.ModelMultipleChoiceField.iterator", "path": "ref/forms/fields#django.forms.ModelMultipleChoiceField.iterator", "type": "django.forms", "text": ["Same as ModelChoiceField.iterator."]}, {"name": "forms.ModelMultipleChoiceField.queryset", "path": "ref/forms/fields#django.forms.ModelMultipleChoiceField.queryset", "type": "django.forms", "text": ["Same as ModelChoiceField.queryset."]}, {"name": "forms.ModelMultipleChoiceField.to_field_name", "path": "ref/forms/fields#django.forms.ModelMultipleChoiceField.to_field_name", "type": "django.forms", "text": ["Same as ModelChoiceField.to_field_name."]}, {"name": "forms.models.BaseInlineFormSet", "path": "topics/forms/modelforms#django.forms.models.BaseInlineFormSet", "type": "django.forms", "text": []}, {"name": "forms.models.BaseModelFormSet", "path": "topics/forms/modelforms#django.forms.models.BaseModelFormSet", "type": "django.forms", "text": []}, {"name": "forms.models.BaseModelFormSet.changed_objects", "path": "topics/forms/modelforms#django.forms.models.BaseModelFormSet.changed_objects", "type": "django.forms", "text": []}, {"name": "forms.models.BaseModelFormSet.deleted_objects", "path": "topics/forms/modelforms#django.forms.models.BaseModelFormSet.deleted_objects", "type": "django.forms", "text": []}, {"name": "forms.models.BaseModelFormSet.new_objects", "path": "topics/forms/modelforms#django.forms.models.BaseModelFormSet.new_objects", "type": "django.forms", "text": []}, {"name": "forms.models.inlineformset_factory()", "path": "ref/forms/models#django.forms.models.inlineformset_factory", "type": "django.forms", "text": ["Returns an InlineFormSet using modelformset_factory() with defaults of formset=BaseInlineFormSet, can_delete=True, and extra=3.", "If your model has more than one ForeignKey to the parent_model, you must specify a fk_name.", "See Inline formsets for example usage.", "The absolute_max and can_delete_extra arguments were added.", "The renderer argument was added."]}, {"name": "forms.models.modelform_factory()", "path": "ref/forms/models#django.forms.models.modelform_factory", "type": "django.forms", "text": ["Returns a ModelForm class for the given model. You can optionally pass a form argument to use as a starting point for constructing the ModelForm.", "fields is an optional list of field names. If provided, only the named fields will be included in the returned fields.", "exclude is an optional list of field names. If provided, the named fields will be excluded from the returned fields, even if they are listed in the fields argument.", "formfield_callback is a callable that takes a model field and returns a form field.", "widgets is a dictionary of model field names mapped to a widget.", "localized_fields is a list of names of fields which should be localized.", "labels is a dictionary of model field names mapped to a label.", "help_texts is a dictionary of model field names mapped to a help text.", "error_messages is a dictionary of model field names mapped to a dictionary of error messages.", "field_classes is a dictionary of model field names mapped to a form field class.", "See ModelForm factory function for example usage.", "You must provide the list of fields explicitly, either via keyword arguments fields or exclude, or the corresponding attributes on the form\u2019s inner Meta class. See Selecting the fields to use for more information. Omitting any definition of the fields to use will result in an ImproperlyConfigured exception."]}, {"name": "forms.models.modelformset_factory()", "path": "ref/forms/models#django.forms.models.modelformset_factory", "type": "django.forms", "text": ["Returns a FormSet class for the given model class.", "Arguments model, form, fields, exclude, formfield_callback, widgets, localized_fields, labels, help_texts, error_messages, and field_classes are all passed through to modelform_factory().", "Arguments formset, extra, can_delete, can_order, max_num, validate_max, min_num, validate_min, absolute_max, can_delete_extra, and renderer are passed through to formset_factory(). See formsets for details.", "See Model formsets for example usage.", "The absolute_max and can_delete_extra arguments were added.", "The renderer argument was added."]}, {"name": "forms.MultipleChoiceField", "path": "ref/forms/fields#django.forms.MultipleChoiceField", "type": "django.forms", "text": ["The invalid_choice error message may contain %(value)s, which will be replaced with the selected choice.", "Takes one extra required argument, choices, as for ChoiceField."]}, {"name": "forms.MultipleHiddenInput", "path": "ref/forms/widgets#django.forms.MultipleHiddenInput", "type": "django.forms", "text": ["A widget that handles multiple hidden widgets for fields that have a list of values."]}, {"name": "forms.MultiValueField", "path": "ref/forms/fields#django.forms.MultiValueField", "type": "django.forms", "text": ["Aggregates the logic of multiple fields that together produce a single value.", "This field is abstract and must be subclassed. In contrast with the single-value fields, subclasses of MultiValueField must not implement clean() but instead - implement compress().", "Takes one extra required argument:", "A tuple of fields whose values are cleaned and subsequently combined into a single value. Each value of the field is cleaned by the corresponding field in fields \u2013 the first value is cleaned by the first field, the second value is cleaned by the second field, etc. Once all fields are cleaned, the list of clean values is combined into a single value by compress().", "Also takes some optional arguments:", "Defaults to True, in which case a required validation error will be raised if no value is supplied for any field.", "When set to False, the Field.required attribute can be set to False for individual fields to make them optional. If no value is supplied for a required field, an incomplete validation error will be raised.", "A default incomplete error message can be defined on the MultiValueField subclass, or different messages can be defined on each individual field. For example:", "Must be a subclass of django.forms.MultiWidget. Default value is TextInput, which probably is not very useful in this case.", "Takes a list of valid values and returns a \u201ccompressed\u201d version of those values \u2013 in a single value. For example, SplitDateTimeField is a subclass which combines a time field and a date field into a datetime object.", "This method must be implemented in the subclasses."]}, {"name": "forms.MultiValueField.compress()", "path": "ref/forms/fields#django.forms.MultiValueField.compress", "type": "django.forms", "text": ["Takes a list of valid values and returns a \u201ccompressed\u201d version of those values \u2013 in a single value. For example, SplitDateTimeField is a subclass which combines a time field and a date field into a datetime object.", "This method must be implemented in the subclasses."]}, {"name": "forms.MultiValueField.fields", "path": "ref/forms/fields#django.forms.MultiValueField.fields", "type": "django.forms", "text": ["A tuple of fields whose values are cleaned and subsequently combined into a single value. Each value of the field is cleaned by the corresponding field in fields \u2013 the first value is cleaned by the first field, the second value is cleaned by the second field, etc. Once all fields are cleaned, the list of clean values is combined into a single value by compress()."]}, {"name": "forms.MultiValueField.require_all_fields", "path": "ref/forms/fields#django.forms.MultiValueField.require_all_fields", "type": "django.forms", "text": ["Defaults to True, in which case a required validation error will be raised if no value is supplied for any field.", "When set to False, the Field.required attribute can be set to False for individual fields to make them optional. If no value is supplied for a required field, an incomplete validation error will be raised.", "A default incomplete error message can be defined on the MultiValueField subclass, or different messages can be defined on each individual field. For example:"]}, {"name": "forms.MultiValueField.widget", "path": "ref/forms/fields#django.forms.MultiValueField.widget", "type": "django.forms", "text": ["Must be a subclass of django.forms.MultiWidget. Default value is TextInput, which probably is not very useful in this case."]}, {"name": "forms.MultiWidget", "path": "ref/forms/widgets#django.forms.MultiWidget", "type": "django.forms", "text": ["A widget that is composed of multiple widgets. MultiWidget works hand in hand with the MultiValueField.", "MultiWidget has one required argument:", "An iterable containing the widgets needed. For example:", "You may provide a dictionary in order to specify custom suffixes for the name attribute on each subwidget. In this case, for each (key, widget) pair, the key will be appended to the name of the widget in order to generate the attribute value. You may provide the empty string ('') for a single key, in order to suppress the suffix for one widget. For example:", "And one required method:", "This method takes a single \u201ccompressed\u201d value from the field and returns a list of \u201cdecompressed\u201d values. The input value can be assumed valid, but not necessarily non-empty.", "This method must be implemented by the subclass, and since the value may be empty, the implementation must be defensive.", "The rationale behind \u201cdecompression\u201d is that it is necessary to \u201csplit\u201d the combined value of the form field into the values for each widget.", "An example of this is how SplitDateTimeWidget turns a datetime value into a list with date and time split into two separate values:", "Tip", "Note that MultiValueField has a complementary method compress() with the opposite responsibility - to combine cleaned values of all member fields into one.", "It provides some custom context:", "In addition to the 'widget' key described in Widget.get_context(), MultiWidget adds a widget['subwidgets'] key.", "These can be looped over in the widget template:", "Here\u2019s an example widget which subclasses MultiWidget to display a date with the day, month, and year in different select boxes. This widget is intended to be used with a DateField rather than a MultiValueField, thus we have implemented value_from_datadict():", "The constructor creates several Select widgets in a list. The super() method uses this list to set up the widget.", "The required method decompress() breaks up a datetime.date value into the day, month, and year values corresponding to each widget. If an invalid date was selected, such as the non-existent 30th February, the DateField passes this method a string instead, so that needs parsing. The final return handles when value is None, meaning we don\u2019t have any defaults for our subwidgets.", "The default implementation of value_from_datadict() returns a list of values corresponding to each Widget. This is appropriate when using a MultiWidget with a MultiValueField. But since we want to use this widget with a DateField, which takes a single value, we have overridden this method. The implementation here combines the data from the subwidgets into a string in the format that DateField expects."]}, {"name": "forms.MultiWidget.decompress()", "path": "ref/forms/widgets#django.forms.MultiWidget.decompress", "type": "django.forms", "text": ["This method takes a single \u201ccompressed\u201d value from the field and returns a list of \u201cdecompressed\u201d values. The input value can be assumed valid, but not necessarily non-empty.", "This method must be implemented by the subclass, and since the value may be empty, the implementation must be defensive.", "The rationale behind \u201cdecompression\u201d is that it is necessary to \u201csplit\u201d the combined value of the form field into the values for each widget.", "An example of this is how SplitDateTimeWidget turns a datetime value into a list with date and time split into two separate values:", "Tip", "Note that MultiValueField has a complementary method compress() with the opposite responsibility - to combine cleaned values of all member fields into one."]}, {"name": "forms.MultiWidget.get_context()", "path": "ref/forms/widgets#django.forms.MultiWidget.get_context", "type": "django.forms", "text": ["In addition to the 'widget' key described in Widget.get_context(), MultiWidget adds a widget['subwidgets'] key.", "These can be looped over in the widget template:"]}, {"name": "forms.MultiWidget.widgets", "path": "ref/forms/widgets#django.forms.MultiWidget.widgets", "type": "django.forms", "text": ["An iterable containing the widgets needed. For example:", "You may provide a dictionary in order to specify custom suffixes for the name attribute on each subwidget. In this case, for each (key, widget) pair, the key will be appended to the name of the widget in order to generate the attribute value. You may provide the empty string ('') for a single key, in order to suppress the suffix for one widget. For example:"]}, {"name": "forms.NullBooleanField", "path": "ref/forms/fields#django.forms.NullBooleanField", "type": "django.forms", "text": ["NullBooleanField may be used with widgets such as Select or RadioSelect by providing the widget choices:"]}, {"name": "forms.NullBooleanSelect", "path": "ref/forms/widgets#django.forms.NullBooleanSelect", "type": "django.forms", "text": ["Select widget with options \u2018Unknown\u2019, \u2018Yes\u2019 and \u2018No\u2019"]}, {"name": "forms.NumberInput", "path": "ref/forms/widgets#django.forms.NumberInput", "type": "django.forms", "text": ["Beware that not all browsers support entering localized numbers in number input types. Django itself avoids using them for fields having their localize property set to True."]}, {"name": "forms.PasswordInput", "path": "ref/forms/widgets#django.forms.PasswordInput", "type": "django.forms", "text": ["Takes one optional argument:", "Determines whether the widget will have a value filled in when the form is re-displayed after a validation error (default is False)."]}, {"name": "forms.PasswordInput.render_value", "path": "ref/forms/widgets#django.forms.PasswordInput.render_value", "type": "django.forms", "text": ["Determines whether the widget will have a value filled in when the form is re-displayed after a validation error (default is False)."]}, {"name": "forms.RadioSelect", "path": "ref/forms/widgets#django.forms.RadioSelect", "type": "djang