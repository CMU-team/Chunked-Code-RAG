[{"name": "Admin actions", "path": "ref/contrib/admin/actions", "type": "API", "text": "Admin actions The basic workflow of Django\u2019s admin is, in a nutshell, \u201cselect an object, then change it.\u201d This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious. In these cases, Django\u2019s admin lets you write and register \u201cactions\u201d \u2013 functions that get called with a list of objects selected on the change list page. If you look at any change list in the admin, you\u2019ll see this feature in action; Django ships with a \u201cdelete selected objects\u201d action available to all models. For example, here\u2019s the user module from Django\u2019s built-in django.contrib.auth app:   Warning The \u201cdelete selected objects\u201d action uses QuerySet.delete() for efficiency reasons, which has an important caveat: your model\u2019s delete() method will not be called. If you wish to override this behavior, you can override ModelAdmin.delete_queryset() or write a custom action which does deletion in your preferred manner \u2013 for example, by calling Model.delete() for each of the selected items. For more background on bulk deletion, see the documentation on object deletion.  Read on to find out how to add your own actions to this list. Writing actions The easiest way to explain actions is by example, so let\u2019s dive in. A common use case for admin actions is the bulk updating of a model. Imagine a news application with an Article model: from django.db import models\n\nSTATUS_CHOICES = [\n    ('d', 'Draft'),\n    ('p', 'Published'),\n    ('w', 'Withdrawn'),\n]\n\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n    body = models.TextField()\n    status = models.CharField(max_length=1, choices=STATUS_CHOICES)\n\n    def __str__(self):\n        return self.title\n A common task we might perform with a model like this is to update an article\u2019s status from \u201cdraft\u201d to \u201cpublished\u201d. We could easily do this in the admin one article at a time, but if we wanted to bulk-publish a group of articles, it\u2019d be tedious. So, let\u2019s write an action that lets us change an article\u2019s status to \u201cpublished.\u201d Writing action functions First, we\u2019ll need to write a function that gets called when the action is triggered from the admin. Action functions are regular functions that take three arguments:  The current ModelAdmin\n An HttpRequest representing the current request, A QuerySet containing the set of objects selected by the user.  Our publish-these-articles function won\u2019t need the ModelAdmin or the request object, but we will use the queryset: def make_published(modeladmin, request, queryset):\n    queryset.update(status='p')\n  Note For the best performance, we\u2019re using the queryset\u2019s update method. Other types of actions might need to deal with each object individually; in these cases we\u2019d iterate over the queryset: for obj in queryset:\n    do_something_with(obj)\n  That\u2019s actually all there is to writing an action! However, we\u2019ll take one more optional-but-useful step and give the action a \u201cnice\u201d title in the admin. By default, this action would appear in the action list as \u201cMake published\u201d \u2013 the function name, with underscores replaced by spaces. That\u2019s fine, but we can provide a better, more human-friendly name by using the action() decorator on the make_published function: from django.contrib import admin\n\n...\n\n@admin.action(description='Mark selected stories as published')\ndef make_published(modeladmin, request, queryset):\n    queryset.update(status='p')\n  Note This might look familiar; the admin\u2019s list_display option uses a similar technique with the display() decorator to provide human-readable descriptions for callback functions registered there, too.   Changed in Django 3.2: The description argument to the action() decorator is equivalent to setting the short_description attribute on the action function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.  Adding actions to the ModelAdmin\n Next, we\u2019ll need to inform our ModelAdmin of the action. This works just like any other configuration option. So, the complete admin.py with the action and its registration would look like: from django.contrib import admin\nfrom myapp.models import Article\n\n@admin.action(description='Mark selected stories as published')\ndef make_published(modeladmin, request, queryset):\n    queryset.update(status='p')\n\nclass ArticleAdmin(admin.ModelAdmin):\n    list_display = ['title', 'status']\n    ordering = ['title']\n    actions = [make_published]\n\nadmin.site.register(Article, ArticleAdmin)\n That code will give us an admin change list that looks something like this:  That\u2019s really all there is to it! If you\u2019re itching to write your own actions, you now know enough to get started. The rest of this document covers more advanced techniques. Handling errors in actions If there are foreseeable error conditions that may occur while running your action, you should gracefully inform the user of the problem. This means handling exceptions and using django.contrib.admin.ModelAdmin.message_user() to display a user friendly description of the problem in the response. Advanced action techniques There\u2019s a couple of extra options and possibilities you can exploit for more advanced options. Actions as ModelAdmin methods The example above shows the make_published action defined as a function. That\u2019s perfectly fine, but it\u2019s not perfect from a code design point of view: since the action is tightly coupled to the Article object, it makes sense to hook the action to the ArticleAdmin object itself. You can do it like this: class ArticleAdmin(admin.ModelAdmin):\n    ...\n\n    actions = ['make_published']\n\n    @admin.action(description='Mark selected stories as published')\n    def make_published(self, request, queryset):\n        queryset.update(status='p')\n Notice first that we\u2019ve moved make_published into a method and renamed the modeladmin parameter to self, and second that we\u2019ve now put the string 'make_published' in actions instead of a direct function reference. This tells the ModelAdmin to look up the action as a method. Defining actions as methods gives the action more idiomatic access to the ModelAdmin itself, allowing the action to call any of the methods provided by the admin. For example, we can use self to flash a message to the user informing them that the action was successful: from django.contrib import messages\nfrom django.utils.translation import ngettext\n\nclass ArticleAdmin(admin.ModelAdmin):\n    ...\n\n    def make_published(self, request, queryset):\n        updated = queryset.update(status='p')\n        self.message_user(request, ngettext(\n            '%d story was successfully marked as published.',\n            '%d stories were successfully marked as published.',\n            updated,\n        ) % updated, messages.SUCCESS)\n This make the action match what the admin itself does after successfully performing an action:  Actions that provide intermediate pages By default, after an action is performed the user is redirected back to the original change list page. However, some actions, especially more complex ones, will need to return intermediate pages. For example, the built-in delete action asks for confirmation before deleting the selected objects. To provide an intermediary page, return an HttpResponse (or subclass) from your action. For example, you might write an export function that uses Django\u2019s serialization functions to dump some selected objects as JSON: from django.core import serializers\nfrom django.http import HttpResponse\n\ndef export_as_json(modeladmin, request, queryset):\n    response = HttpResponse(content_type=\"application/json\")\n    serializers.serialize(\"json\", queryset, stream=response)\n    return response\n Generally, something like the above isn\u2019t considered a great idea. Most of the time, the best practice will be to return an HttpResponseRedirect and redirect the user to a view you\u2019ve written, passing the list of selected objects in the GET query string. This allows you to provide complex interaction logic on the intermediary pages. For example, if you wanted to provide a more complete export function, you\u2019d want to let the user choose a format, and possibly a list of fields to include in the export. The best thing to do would be to write a small action that redirects to your custom export view: from django.contrib.contenttypes.models import ContentType\nfrom django.http import HttpResponseRedirect\n\ndef export_selected_objects(modeladmin, request, queryset):\n    selected = queryset.values_list('pk', flat=True)\n    ct = ContentType.objects.get_for_model(queryset.model)\n    return HttpResponseRedirect('/export/?ct=%s&ids=%s' % (\n        ct.pk,\n        ','.join(str(pk) for pk in selected),\n    ))\n As you can see, the action is rather short; all the complex logic would belong in your export view. This would need to deal with objects of any type, hence the business with the ContentType. Writing this view is left as an exercise to the reader. Making actions available site-wide  \nAdminSite.add_action(action, name=None)  \nSome actions are best if they\u2019re made available to any object in the admin site \u2013 the export action defined above would be a good candidate. You can make an action globally available using AdminSite.add_action(). For example: from django.contrib import admin\n\nadmin.site.add_action(export_selected_objects)\n This makes the export_selected_objects action globally available as an action named \u201cexport_selected_objects\u201d. You can explicitly give the action a name \u2013 good if you later want to programmatically remove the action \u2013 by passing a second argument to AdminSite.add_action(): admin.site.add_action(export_selected_objects, 'export_selected')\n \n Disabling actions Sometimes you need to disable certain actions \u2013 especially those registered site-wide \u2013 for particular objects. There\u2019s a few ways you can disable actions: Disabling a site-wide action  \nAdminSite.disable_action(name)  \nIf you need to disable a site-wide action you can call AdminSite.disable_action(). For example, you can use this method to remove the built-in \u201cdelete selected objects\u201d action: admin.site.disable_action('delete_selected')\n Once you\u2019ve done the above, that action will no longer be available site-wide. If, however, you need to re-enable a globally-disabled action for one particular model, list it explicitly in your ModelAdmin.actions list: # Globally disable delete selected\nadmin.site.disable_action('delete_selected')\n\n# This ModelAdmin will not have delete_selected available\nclass SomeModelAdmin(admin.ModelAdmin):\n    actions = ['some_other_action']\n    ...\n\n# This one will\nclass AnotherModelAdmin(admin.ModelAdmin):\n    actions = ['delete_selected', 'a_third_action']\n    ...\n \n Disabling all actions for a particular ModelAdmin\n If you want no bulk actions available for a given ModelAdmin, set ModelAdmin.actions to None: class MyModelAdmin(admin.ModelAdmin):\n    actions = None\n This tells the ModelAdmin to not display or allow any actions, including any site-wide actions. Conditionally enabling or disabling actions  \nModelAdmin.get_actions(request)  \nFinally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding ModelAdmin.get_actions(). This returns a dictionary of actions allowed. The keys are action names, and the values are (function, name, short_description) tuples. For example, if you only want users whose names begin with \u2018J\u2019 to be able to delete objects in bulk: class MyModelAdmin(admin.ModelAdmin):\n    ...\n\n    def get_actions(self, request):\n        actions = super().get_actions(request)\n        if request.user.username[0].upper() != 'J':\n            if 'delete_selected' in actions:\n                del actions['delete_selected']\n        return actions\n \n Setting permissions for actions Actions may limit their availability to users with specific permissions by wrapping the action function with the action() decorator and passing the permissions argument: @admin.action(permissions=['change'])\ndef make_published(modeladmin, request, queryset):\n    queryset.update(status='p')\n The make_published() action will only be available to users that pass the ModelAdmin.has_change_permission() check. If permissions has more than one permission, the action will be available as long as the user passes at least one of the checks. Available values for permissions and the corresponding method checks are:  \n'add': ModelAdmin.has_add_permission()\n \n'change': ModelAdmin.has_change_permission()\n \n'delete': ModelAdmin.has_delete_permission()\n \n'view': ModelAdmin.has_view_permission()\n  You can specify any other value as long as you implement a corresponding has_<value>_permission(self, request) method on the ModelAdmin. For example: from django.contrib import admin\nfrom django.contrib.auth import get_permission_codename\n\nclass ArticleAdmin(admin.ModelAdmin):\n    actions = ['make_published']\n\n    @admin.action(permissions=['publish'])\n    def make_published(self, request, queryset):\n        queryset.update(status='p')\n\n    def has_publish_permission(self, request):\n        \"\"\"Does the user have the publish permission?\"\"\"\n        opts = self.opts\n        codename = get_permission_codename('publish', opts)\n        return request.user.has_perm('%s.%s' % (opts.app_label, codename))\n  Changed in Django 3.2: The permissions argument to the action() decorator is equivalent to setting the allowed_permissions attribute on the action function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.  The action decorator  \naction(*, permissions=None, description=None)  \n New in Django 3.2.  This decorator can be used for setting specific attributes on custom action functions that can be used with actions: @admin.action(\n    permissions=['publish'],\n    description='Mark selected stories as published',\n)\ndef make_published(self, request, queryset):\n    queryset.update(status='p')\n This is equivalent to setting some attributes (with the original, longer names) on the function directly: def make_published(self, request, queryset):\n    queryset.update(status='p')\nmake_published.allowed_permissions = ['publish']\nmake_published.short_description = 'Mark selected stories as published'\n Use of this decorator is not compulsory to make an action function, but it can be useful to use it without arguments as a marker in your source to identify the purpose of the function: @admin.action\ndef make_inactive(self, request, queryset):\n    queryset.update(is_active=False)\n In this case it will add no attributes to the function. \n\n"}, {"name": "admin.action()", "path": "ref/contrib/admin/actions#django.contrib.admin.action", "type": "django.contrib.admin", "text": " \naction(*, permissions=None, description=None)  \n New in Django 3.2.  This decorator can be used for setting specific attributes on custom action functions that can be used with actions: @admin.action(\n    permissions=['publish'],\n    description='Mark selected stories as published',\n)\ndef make_published(self, request, queryset):\n    queryset.update(status='p')\n This is equivalent to setting some attributes (with the original, longer names) on the function directly: def make_published(self, request, queryset):\n    queryset.update(status='p')\nmake_published.allowed_permissions = ['publish']\nmake_published.short_description = 'Mark selected stories as published'\n Use of this decorator is not compulsory to make an action function, but it can be useful to use it without arguments as a marker in your source to identify the purpose of the function: @admin.action\ndef make_inactive(self, request, queryset):\n    queryset.update(is_active=False)\n In this case it will add no attributes to the function. \n"}, {"name": "admin.AdminSite", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite", "type": "django.contrib.admin", "text": " \nclass AdminSite(name='admin')  \nA Django administrative site is represented by an instance of django.contrib.admin.sites.AdminSite; by default, an instance of this class is created as django.contrib.admin.site and you can register your models and ModelAdmin instances with it. If you want to customize the default admin site, you can override it. When constructing an instance of an AdminSite, you can provide a unique instance name using the name argument to the constructor. This instance name is used to identify the instance, especially when reversing admin URLs. If no instance name is provided, a default instance name of admin will be used. See Customizing the AdminSite class for an example of customizing the AdminSite class. \n"}, {"name": "admin.AdminSite.add_action()", "path": "ref/contrib/admin/actions#django.contrib.admin.AdminSite.add_action", "type": "django.contrib.admin", "text": " \nAdminSite.add_action(action, name=None)  \nSome actions are best if they\u2019re made available to any object in the admin site \u2013 the export action defined above would be a good candidate. You can make an action globally available using AdminSite.add_action(). For example: from django.contrib import admin\n\nadmin.site.add_action(export_selected_objects)\n This makes the export_selected_objects action globally available as an action named \u201cexport_selected_objects\u201d. You can explicitly give the action a name \u2013 good if you later want to programmatically remove the action \u2013 by passing a second argument to AdminSite.add_action(): admin.site.add_action(export_selected_objects, 'export_selected')\n \n"}, {"name": "admin.AdminSite.app_index_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.app_index_template", "type": "django.contrib.admin", "text": " \nAdminSite.app_index_template  \nPath to a custom template that will be used by the admin site app index view. \n"}, {"name": "admin.AdminSite.disable_action()", "path": "ref/contrib/admin/actions#django.contrib.admin.AdminSite.disable_action", "type": "django.contrib.admin", "text": " \nAdminSite.disable_action(name)  \nIf you need to disable a site-wide action you can call AdminSite.disable_action(). For example, you can use this method to remove the built-in \u201cdelete selected objects\u201d action: admin.site.disable_action('delete_selected')\n Once you\u2019ve done the above, that action will no longer be available site-wide. If, however, you need to re-enable a globally-disabled action for one particular model, list it explicitly in your ModelAdmin.actions list: # Globally disable delete selected\nadmin.site.disable_action('delete_selected')\n\n# This ModelAdmin will not have delete_selected available\nclass SomeModelAdmin(admin.ModelAdmin):\n    actions = ['some_other_action']\n    ...\n\n# This one will\nclass AnotherModelAdmin(admin.ModelAdmin):\n    actions = ['delete_selected', 'a_third_action']\n    ...\n \n"}, {"name": "admin.AdminSite.each_context()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.each_context", "type": "django.contrib.admin", "text": " \nAdminSite.each_context(request)  \nReturns a dictionary of variables to put in the template context for every page in the admin site. Includes the following variables and values by default:  \nsite_header: AdminSite.site_header  \nsite_title: AdminSite.site_title  \nsite_url: AdminSite.site_url  \nhas_permission: AdminSite.has_permission()  \navailable_apps: a list of applications from the application registry available for the current user. Each entry in the list is a dict representing an application with the following keys:  \napp_label: the application label \napp_url: the URL of the application index in the admin \nhas_module_perms: a boolean indicating if displaying and accessing of the module\u2019s index page is permitted for the current user \nmodels: a list of the models available in the application  Each model is a dict with the following keys:  \nmodel: the model class \nobject_name: class name of the model \nname: plural name of the model \nperms: a dict tracking add, change, delete, and view permissions \nadmin_url: admin changelist URL for the model \nadd_url: admin URL to add a new model instance     Changed in Django 4.0: The model variable for each model was added.  \n"}, {"name": "admin.AdminSite.empty_value_display", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.empty_value_display", "type": "django.contrib.admin", "text": " \nAdminSite.empty_value_display  \nThe string to use for displaying empty values in the admin site\u2019s change list. Defaults to a dash. The value can also be overridden on a per ModelAdmin basis and on a custom field within a ModelAdmin by setting an empty_value_display attribute on the field. See ModelAdmin.empty_value_display for examples. \n"}, {"name": "admin.AdminSite.enable_nav_sidebar", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.enable_nav_sidebar", "type": "django.contrib.admin", "text": " \nAdminSite.enable_nav_sidebar  \nA boolean value that determines whether to show the navigation sidebar on larger screens. By default, it is set to True. \n"}, {"name": "admin.AdminSite.final_catch_all_view", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.final_catch_all_view", "type": "django.contrib.admin", "text": " \nAdminSite.final_catch_all_view  \n New in Django 3.2.  A boolean value that determines whether to add a final catch-all view to the admin that redirects unauthenticated users to the login page. By default, it is set to True.  Warning Setting this to False is not recommended as the view protects against a potential model enumeration privacy issue.  \n"}, {"name": "admin.AdminSite.has_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.has_permission", "type": "django.contrib.admin", "text": " \nAdminSite.has_permission(request)  \nReturns True if the user for the given HttpRequest has permission to view at least one page in the admin site. Defaults to requiring both User.is_active and User.is_staff to be True. \n"}, {"name": "admin.AdminSite.index_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.index_template", "type": "django.contrib.admin", "text": " \nAdminSite.index_template  \nPath to a custom template that will be used by the admin site main index view. \n"}, {"name": "admin.AdminSite.index_title", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.index_title", "type": "django.contrib.admin", "text": " \nAdminSite.index_title  \nThe text to put at the top of the admin index page (a string). By default, this is \u201cSite administration\u201d. \n"}, {"name": "admin.AdminSite.login_form", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.login_form", "type": "django.contrib.admin", "text": " \nAdminSite.login_form  \nSubclass of AuthenticationForm that will be used by the admin site login view. \n"}, {"name": "admin.AdminSite.login_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.login_template", "type": "django.contrib.admin", "text": " \nAdminSite.login_template  \nPath to a custom template that will be used by the admin site login view. \n"}, {"name": "admin.AdminSite.logout_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.logout_template", "type": "django.contrib.admin", "text": " \nAdminSite.logout_template  \nPath to a custom template that will be used by the admin site logout view. \n"}, {"name": "admin.AdminSite.password_change_done_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.password_change_done_template", "type": "django.contrib.admin", "text": " \nAdminSite.password_change_done_template  \nPath to a custom template that will be used by the admin site password change done view. \n"}, {"name": "admin.AdminSite.password_change_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.password_change_template", "type": "django.contrib.admin", "text": " \nAdminSite.password_change_template  \nPath to a custom template that will be used by the admin site password change view. \n"}, {"name": "admin.AdminSite.register()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.register", "type": "django.contrib.admin", "text": " \nAdminSite.register(model_or_iterable, admin_class=None, **options)  \nRegisters the given model class (or iterable of classes) with the given admin_class. admin_class defaults to ModelAdmin (the default admin options). If keyword arguments are given \u2013 e.g. list_display \u2013 they\u2019ll be applied as options to the admin class. Raises ImproperlyConfigured if a model is abstract. and django.contrib.admin.sites.AlreadyRegistered if a model is already registered. \n"}, {"name": "admin.AdminSite.site_header", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.site_header", "type": "django.contrib.admin", "text": " \nAdminSite.site_header  \nThe text to put at the top of each admin page, as an <h1> (a string). By default, this is \u201cDjango administration\u201d. \n"}, {"name": "admin.AdminSite.site_title", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.site_title", "type": "django.contrib.admin", "text": " \nAdminSite.site_title  \nThe text to put at the end of each admin page\u2019s <title> (a string). By default, this is \u201cDjango site admin\u201d. \n"}, {"name": "admin.AdminSite.site_url", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.site_url", "type": "django.contrib.admin", "text": " \nAdminSite.site_url  \nThe URL for the \u201cView site\u201d link at the top of each admin page. By default, site_url is /. Set it to None to remove the link. For sites running on a subpath, the each_context() method checks if the current request has request.META['SCRIPT_NAME'] set and uses that value if site_url isn\u2019t set to something other than /. \n"}, {"name": "admin.AdminSite.unregister()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.unregister", "type": "django.contrib.admin", "text": " \nAdminSite.unregister(model_or_iterable)  \nUnregisters the given model class (or iterable of classes). Raises django.contrib.admin.sites.NotRegistered if a model isn\u2019t already registered. \n"}, {"name": "admin.apps.AdminConfig", "path": "ref/contrib/admin/index#django.contrib.admin.apps.AdminConfig", "type": "django.contrib.admin", "text": " \nclass apps.AdminConfig  \nThis is the default AppConfig class for the admin. It calls autodiscover() when Django starts. \n"}, {"name": "admin.apps.SimpleAdminConfig", "path": "ref/contrib/admin/index#django.contrib.admin.apps.SimpleAdminConfig", "type": "django.contrib.admin", "text": " \nclass apps.SimpleAdminConfig  \nThis class works like AdminConfig, except it doesn\u2019t call autodiscover().  \ndefault_site  \nA dotted import path to the default admin site\u2019s class or to a callable that returns a site instance. Defaults to 'django.contrib.admin.sites.AdminSite'. See Overriding the default admin site for usage. \n \n"}, {"name": "admin.apps.SimpleAdminConfig.default_site", "path": "ref/contrib/admin/index#django.contrib.admin.apps.SimpleAdminConfig.default_site", "type": "django.contrib.admin", "text": " \ndefault_site  \nA dotted import path to the default admin site\u2019s class or to a callable that returns a site instance. Defaults to 'django.contrib.admin.sites.AdminSite'. See Overriding the default admin site for usage. \n"}, {"name": "admin.autodiscover()", "path": "ref/contrib/admin/index#django.contrib.admin.autodiscover", "type": "django.contrib.admin", "text": " \nautodiscover()  \nThis function attempts to import an admin module in each installed application. Such modules are expected to register models with the admin. Typically you won\u2019t need to call this function directly as AdminConfig calls it when Django starts. \n"}, {"name": "admin.display()", "path": "ref/contrib/admin/index#django.contrib.admin.display", "type": "django.contrib.admin", "text": " \ndisplay(*, boolean=None, ordering=None, description=None, empty_value=None)  \n New in Django 3.2.  This decorator can be used for setting specific attributes on custom display functions that can be used with list_display or readonly_fields: @admin.display(\n    boolean=True,\n    ordering='-publish_date',\n    description='Is Published?',\n)\ndef is_published(self, obj):\n    return obj.publish_date is not None\n This is equivalent to setting some attributes (with the original, longer names) on the function directly: def is_published(self, obj):\n    return obj.publish_date is not None\nis_published.boolean = True\nis_published.admin_order_field = '-publish_date'\nis_published.short_description = 'Is Published?'\n Also note that the empty_value decorator parameter maps to the empty_value_display attribute assigned directly to the function. It cannot be used in conjunction with boolean \u2013 they are mutually exclusive. Use of this decorator is not compulsory to make a display function, but it can be useful to use it without arguments as a marker in your source to identify the purpose of the function: @admin.display\ndef published_year(self, obj):\n    return obj.publish_date.year\n In this case it will add no attributes to the function. \n"}, {"name": "admin.InlineModelAdmin", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin", "type": "django.contrib.admin", "text": " \nclass InlineModelAdmin \n"}, {"name": "admin.InlineModelAdmin.can_delete", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.can_delete", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.can_delete  \nSpecifies whether or not inline objects can be deleted in the inline. Defaults to True. \n"}, {"name": "admin.InlineModelAdmin.classes", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.classes", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.classes  \nA list or tuple containing extra CSS classes to apply to the fieldset that is rendered for the inlines. Defaults to None. As with classes configured in fieldsets, inlines with a collapse class will be initially collapsed and their header will have a small \u201cshow\u201d link. \n"}, {"name": "admin.InlineModelAdmin.extra", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.extra", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.extra  \nThis controls the number of extra forms the formset will display in addition to the initial forms. Defaults to 3. See the formsets documentation for more information. For users with JavaScript-enabled browsers, an \u201cAdd another\u201d link is provided to enable any number of additional inlines to be added in addition to those provided as a result of the extra argument. The dynamic link will not appear if the number of currently displayed forms exceeds max_num, or if the user does not have JavaScript enabled. InlineModelAdmin.get_extra() also allows you to customize the number of extra forms. \n"}, {"name": "admin.InlineModelAdmin.fk_name", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.fk_name", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.fk_name  \nThe name of the foreign key on the model. In most cases this will be dealt with automatically, but fk_name must be specified explicitly if there are more than one foreign key to the same parent model. \n"}, {"name": "admin.InlineModelAdmin.form", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.form", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.form  \nThe value for form defaults to ModelForm. This is what is passed through to inlineformset_factory() when creating the formset for this inline. \n"}, {"name": "admin.InlineModelAdmin.formset", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.formset", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.formset  \nThis defaults to BaseInlineFormSet. Using your own formset can give you many possibilities of customization. Inlines are built around model formsets. \n"}, {"name": "admin.InlineModelAdmin.get_extra()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_extra", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.get_extra(request, obj=None, **kwargs)  \nReturns the number of extra inline forms to use. By default, returns the InlineModelAdmin.extra attribute. Override this method to programmatically determine the number of extra inline forms. For example, this may be based on the model instance (passed as the keyword argument obj): class BinaryTreeAdmin(admin.TabularInline):\n    model = BinaryTree\n\n    def get_extra(self, request, obj=None, **kwargs):\n        extra = 2\n        if obj:\n            return extra - obj.binarytree_set.count()\n        return extra\n \n"}, {"name": "admin.InlineModelAdmin.get_formset()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_formset", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.get_formset(request, obj=None, **kwargs)  \nReturns a BaseInlineFormSet class for use in admin add/change views. obj is the parent object being edited or None when adding a new parent. See the example for ModelAdmin.get_formsets_with_inlines. \n"}, {"name": "admin.InlineModelAdmin.get_max_num()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_max_num", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.get_max_num(request, obj=None, **kwargs)  \nReturns the maximum number of extra inline forms to use. By default, returns the InlineModelAdmin.max_num attribute. Override this method to programmatically determine the maximum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument obj): class BinaryTreeAdmin(admin.TabularInline):\n    model = BinaryTree\n\n    def get_max_num(self, request, obj=None, **kwargs):\n        max_num = 10\n        if obj and obj.parent:\n            return max_num - 5\n        return max_num\n \n"}, {"name": "admin.InlineModelAdmin.get_min_num()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_min_num", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.get_min_num(request, obj=None, **kwargs)  \nReturns the minimum number of inline forms to use. By default, returns the InlineModelAdmin.min_num attribute. Override this method to programmatically determine the minimum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument obj). \n"}, {"name": "admin.InlineModelAdmin.has_add_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.has_add_permission", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.has_add_permission(request, obj)  \nShould return True if adding an inline object is permitted, False otherwise. obj is the parent object being edited or None when adding a new parent. \n"}, {"name": "admin.InlineModelAdmin.has_change_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.has_change_permission", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.has_change_permission(request, obj=None)  \nShould return True if editing an inline object is permitted, False otherwise. obj is the parent object being edited. \n"}, {"name": "admin.InlineModelAdmin.has_delete_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.has_delete_permission", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.has_delete_permission(request, obj=None)  \nShould return True if deleting an inline object is permitted, False otherwise. obj is the parent object being edited. \n"}, {"name": "admin.InlineModelAdmin.max_num", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.max_num", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.max_num  \nThis controls the maximum number of forms to show in the inline. This doesn\u2019t directly correlate to the number of objects, but can if the value is small enough. See Limiting the number of editable objects for more information. InlineModelAdmin.get_max_num() also allows you to customize the maximum number of extra forms. \n"}, {"name": "admin.InlineModelAdmin.min_num", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.min_num", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.min_num  \nThis controls the minimum number of forms to show in the inline. See modelformset_factory() for more information. InlineModelAdmin.get_min_num() also allows you to customize the minimum number of displayed forms. \n"}, {"name": "admin.InlineModelAdmin.model", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.model", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.model  \nThe model which the inline is using. This is required. \n"}, {"name": "admin.InlineModelAdmin.raw_id_fields", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.raw_id_fields", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.raw_id_fields  \nBy default, Django\u2019s admin uses a select-box interface (<select>) for fields that are ForeignKey. Sometimes you don\u2019t want to incur the overhead of having to select all the related instances to display in the drop-down. raw_id_fields is a list of fields you would like to change into an Input widget for either a ForeignKey or ManyToManyField: class BookInline(admin.TabularInline):\n    model = Book\n    raw_id_fields = (\"pages\",)\n \n"}, {"name": "admin.InlineModelAdmin.show_change_link", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.show_change_link", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.show_change_link  \nSpecifies whether or not inline objects that can be changed in the admin have a link to the change form. Defaults to False. \n"}, {"name": "admin.InlineModelAdmin.template", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.template", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.template  \nThe template used to render the inline on the page. \n"}, {"name": "admin.InlineModelAdmin.verbose_name", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.verbose_name", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.verbose_name  \nAn override to the verbose_name from the model\u2019s inner Meta class. \n"}, {"name": "admin.InlineModelAdmin.verbose_name_plural", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.verbose_name_plural", "type": "django.contrib.admin", "text": " \nInlineModelAdmin.verbose_name_plural  \nAn override to the verbose_name_plural from the model\u2019s inner Meta class. If this isn\u2019t given and the InlineModelAdmin.verbose_name is defined, Django will use InlineModelAdmin.verbose_name + 's'.  Changed in Django 4.0: The fallback to InlineModelAdmin.verbose_name was added.  \n"}, {"name": "admin.ModelAdmin", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin", "type": "django.contrib.admin", "text": " \nclass ModelAdmin  \nThe ModelAdmin class is the representation of a model in the admin interface. Usually, these are stored in a file named admin.py in your application. Let\u2019s take a look at an example of the ModelAdmin: from django.contrib import admin\nfrom myapp.models import Author\n\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\nadmin.site.register(Author, AuthorAdmin)\n  Do you need a ModelAdmin object at all? In the preceding example, the ModelAdmin class doesn\u2019t define any custom values (yet). As a result, the default admin interface will be provided. If you are happy with the default admin interface, you don\u2019t need to define a ModelAdmin object at all \u2013 you can register the model class without providing a ModelAdmin description. The preceding example could be simplified to: from django.contrib import admin\nfrom myapp.models import Author\n\nadmin.site.register(Author)\n  \n"}, {"name": "admin.ModelAdmin.actions", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions", "type": "django.contrib.admin", "text": " \nModelAdmin.actions  \nA list of actions to make available on the change list page. See Admin actions for details. \n"}, {"name": "admin.ModelAdmin.actions_on_bottom", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions_on_bottom", "type": "django.contrib.admin", "text": " \nModelAdmin.actions_on_bottom  \nControls where on the page the actions bar appears. By default, the admin changelist displays actions at the top of the page (actions_on_top = True;\nactions_on_bottom = False). \n"}, {"name": "admin.ModelAdmin.actions_on_top", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions_on_top", "type": "django.contrib.admin", "text": " \nModelAdmin.actions_on_top \n"}, {"name": "admin.ModelAdmin.actions_selection_counter", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions_selection_counter", "type": "django.contrib.admin", "text": " \nModelAdmin.actions_selection_counter  \nControls whether a selection counter is displayed next to the action dropdown. By default, the admin changelist will display it (actions_selection_counter = True). \n"}, {"name": "admin.ModelAdmin.add_form_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.add_form_template", "type": "django.contrib.admin", "text": " \nModelAdmin.add_form_template  \nPath to a custom template, used by add_view(). \n"}, {"name": "admin.ModelAdmin.add_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.add_view", "type": "django.contrib.admin", "text": " \nModelAdmin.add_view(request, form_url='', extra_context=None)  \nDjango view for the model instance addition page. See note below. \n"}, {"name": "admin.ModelAdmin.autocomplete_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.autocomplete_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.autocomplete_fields  \nautocomplete_fields is a list of ForeignKey and/or ManyToManyField fields you would like to change to Select2 autocomplete inputs. By default, the admin uses a select-box interface (<select>) for those fields. Sometimes you don\u2019t want to incur the overhead of selecting all the related instances to display in the dropdown. The Select2 input looks similar to the default input but comes with a search feature that loads the options asynchronously. This is faster and more user-friendly if the related model has many instances. You must define search_fields on the related object\u2019s ModelAdmin because the autocomplete search uses it. To avoid unauthorized data disclosure, users must have the view or change permission to the related object in order to use autocomplete. Ordering and pagination of the results are controlled by the related ModelAdmin\u2019s get_ordering() and get_paginator() methods. In the following example, ChoiceAdmin has an autocomplete field for the ForeignKey to the Question. The results are filtered by the question_text field and ordered by the date_created field: class QuestionAdmin(admin.ModelAdmin):\n    ordering = ['date_created']\n    search_fields = ['question_text']\n\nclass ChoiceAdmin(admin.ModelAdmin):\n    autocomplete_fields = ['question']\n  Performance considerations for large datasets Ordering using ModelAdmin.ordering may cause performance problems as sorting on a large queryset will be slow. Also, if your search fields include fields that aren\u2019t indexed by the database, you might encounter poor performance on extremely large tables. For those cases, it\u2019s a good idea to write your own ModelAdmin.get_search_results() implementation using a full-text indexed search. You may also want to change the Paginator on very large tables as the default paginator always performs a count() query. For example, you could override the default implementation of the Paginator.count property.  \n"}, {"name": "admin.ModelAdmin.change_form_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.change_form_template", "type": "django.contrib.admin", "text": " \nModelAdmin.change_form_template  \nPath to a custom template, used by change_view(). \n"}, {"name": "admin.ModelAdmin.change_list_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.change_list_template", "type": "django.contrib.admin", "text": " \nModelAdmin.change_list_template  \nPath to a custom template, used by changelist_view(). \n"}, {"name": "admin.ModelAdmin.change_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.change_view", "type": "django.contrib.admin", "text": " \nModelAdmin.change_view(request, object_id, form_url='', extra_context=None)  \nDjango view for the model instance editing page. See note below. \n"}, {"name": "admin.ModelAdmin.changelist_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.changelist_view", "type": "django.contrib.admin", "text": " \nModelAdmin.changelist_view(request, extra_context=None)  \nDjango view for the model instances change list/actions page. See note below. \n"}, {"name": "admin.ModelAdmin.date_hierarchy", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.date_hierarchy", "type": "django.contrib.admin", "text": " \nModelAdmin.date_hierarchy  \nSet date_hierarchy to the name of a DateField or DateTimeField in your model, and the change list page will include a date-based drilldown navigation by that field. Example: date_hierarchy = 'pub_date'\n You can also specify a field on a related model using the __ lookup, for example: date_hierarchy = 'author__pub_date'\n This will intelligently populate itself based on available data, e.g. if all the dates are in one month, it\u2019ll show the day-level drill-down only.  Note date_hierarchy uses QuerySet.datetimes() internally. Please refer to its documentation for some caveats when time zone support is enabled (USE_TZ = True).  \n"}, {"name": "admin.ModelAdmin.delete_confirmation_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_confirmation_template", "type": "django.contrib.admin", "text": " \nModelAdmin.delete_confirmation_template  \nPath to a custom template, used by delete_view() for displaying a confirmation page when deleting one or more objects. \n"}, {"name": "admin.ModelAdmin.delete_model()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_model", "type": "django.contrib.admin", "text": " \nModelAdmin.delete_model(request, obj)  \nThe delete_model method is given the HttpRequest and a model instance. Overriding this method allows doing pre- or post-delete operations. Call super().delete_model() to delete the object using Model.delete(). \n"}, {"name": "admin.ModelAdmin.delete_queryset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_queryset", "type": "django.contrib.admin", "text": " \nModelAdmin.delete_queryset(request, queryset)  \nThe delete_queryset() method is given the HttpRequest and a QuerySet of objects to be deleted. Override this method to customize the deletion process for the \u201cdelete selected objects\u201d action. \n"}, {"name": "admin.ModelAdmin.delete_selected_confirmation_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_selected_confirmation_template", "type": "django.contrib.admin", "text": " \nModelAdmin.delete_selected_confirmation_template  \nPath to a custom template, used by the delete_selected action method for displaying a confirmation page when deleting one or more objects. See the actions documentation. \n"}, {"name": "admin.ModelAdmin.delete_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_view", "type": "django.contrib.admin", "text": " \nModelAdmin.delete_view(request, object_id, extra_context=None)  \nDjango view for the model instance(s) deletion confirmation page. See note below. \n"}, {"name": "admin.ModelAdmin.empty_value_display", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.empty_value_display", "type": "django.contrib.admin", "text": " \nModelAdmin.empty_value_display  \nThis attribute overrides the default display value for record\u2019s fields that are empty (None, empty string, etc.). The default value is - (a dash). For example: from django.contrib import admin\n\nclass AuthorAdmin(admin.ModelAdmin):\n    empty_value_display = '-empty-'\n You can also override empty_value_display for all admin pages with AdminSite.empty_value_display, or for specific fields like this: from django.contrib import admin\n\nclass AuthorAdmin(admin.ModelAdmin):\n    fields = ('name', 'title', 'view_birth_date')\n\n    @admin.display(empty_value='???')\n    def view_birth_date(self, obj):\n        return obj.birth_date\n  Changed in Django 3.2: The empty_value argument to the display() decorator is equivalent to setting the empty_value_display attribute on the display function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.  \n"}, {"name": "admin.ModelAdmin.exclude", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.exclude", "type": "django.contrib.admin", "text": " \nModelAdmin.exclude  \nThis attribute, if given, should be a list of field names to exclude from the form. For example, let\u2019s consider the following model: from django.db import models\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    title = models.CharField(max_length=3)\n    birth_date = models.DateField(blank=True, null=True)\n If you want a form for the Author model that includes only the name and title fields, you would specify fields or exclude like this: from django.contrib import admin\n\nclass AuthorAdmin(admin.ModelAdmin):\n    fields = ('name', 'title')\n\nclass AuthorAdmin(admin.ModelAdmin):\n    exclude = ('birth_date',)\n Since the Author model only has three fields, name, title, and birth_date, the forms resulting from the above declarations will contain exactly the same fields. \n"}, {"name": "admin.ModelAdmin.fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fields", "type": "django.contrib.admin", "text": " \nModelAdmin.fields  \nUse the fields option to make simple layout changes in the forms on the \u201cadd\u201d and \u201cchange\u201d pages such as showing only a subset of available fields, modifying their order, or grouping them into rows. For example, you could define a simpler version of the admin form for the django.contrib.flatpages.models.FlatPage model as follows: class FlatPageAdmin(admin.ModelAdmin):\n    fields = ('url', 'title', 'content')\n In the above example, only the fields url, title and content will be displayed, sequentially, in the form. fields can contain values defined in ModelAdmin.readonly_fields to be displayed as read-only. For more complex layout needs, see the fieldsets option. The fields option accepts the same types of values as list_display, except that callables aren\u2019t accepted. Names of model and model admin methods will only be used if they\u2019re listed in readonly_fields. To display multiple fields on the same line, wrap those fields in their own tuple. In this example, the url and title fields will display on the same line and the content field will be displayed below them on its own line: class FlatPageAdmin(admin.ModelAdmin):\n    fields = (('url', 'title'), 'content')\n  Note This fields option should not be confused with the fields dictionary key that is within the fieldsets option, as described in the next section.  If neither fields nor fieldsets options are present, Django will default to displaying each field that isn\u2019t an AutoField and has editable=True, in a single fieldset, in the same order as the fields are defined in the model. \n"}, {"name": "admin.ModelAdmin.fieldsets", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fieldsets", "type": "django.contrib.admin", "text": " \nModelAdmin.fieldsets  \nSet fieldsets to control the layout of admin \u201cadd\u201d and \u201cchange\u201d pages. fieldsets is a list of two-tuples, in which each two-tuple represents a <fieldset> on the admin form page. (A <fieldset> is a \u201csection\u201d of the form.) The two-tuples are in the format (name, field_options), where name is a string representing the title of the fieldset and field_options is a dictionary of information about the fieldset, including a list of fields to be displayed in it. A full example, taken from the django.contrib.flatpages.models.FlatPage model: from django.contrib import admin\n\nclass FlatPageAdmin(admin.ModelAdmin):\n    fieldsets = (\n        (None, {\n            'fields': ('url', 'title', 'content', 'sites')\n        }),\n        ('Advanced options', {\n            'classes': ('collapse',),\n            'fields': ('registration_required', 'template_name'),\n        }),\n    )\n This results in an admin page that looks like:  If neither fieldsets nor fields options are present, Django will default to displaying each field that isn\u2019t an AutoField and has editable=True, in a single fieldset, in the same order as the fields are defined in the model. The field_options dictionary can have the following keys:  \n \nfields  \nA tuple of field names to display in this fieldset. This key is required. Example: {\n'fields': ('first_name', 'last_name', 'address', 'city', 'state'),\n}\n As with the fields option, to display multiple fields on the same line, wrap those fields in their own tuple. In this example, the first_name and last_name fields will display on the same line: {\n'fields': (('first_name', 'last_name'), 'address', 'city', 'state'),\n}\n fields can contain values defined in readonly_fields to be displayed as read-only. If you add the name of a callable to fields, the same rule applies as with the fields option: the callable must be listed in readonly_fields.    \n \nclasses  \nA list or tuple containing extra CSS classes to apply to the fieldset. Example: {\n'classes': ('wide', 'extrapretty'),\n}\n Two useful classes defined by the default admin site stylesheet are collapse and wide. Fieldsets with the collapse style will be initially collapsed in the admin and replaced with a small \u201cclick to expand\u201d link. Fieldsets with the wide style will be given extra horizontal space.    \n \ndescription  \nA string of optional extra text to be displayed at the top of each fieldset, under the heading of the fieldset. This string is not rendered for TabularInline due to its layout. Note that this value is not HTML-escaped when it\u2019s displayed in the admin interface. This lets you include HTML if you so desire. Alternatively you can use plain text and django.utils.html.escape() to escape any HTML special characters.     \n"}, {"name": "admin.ModelAdmin.filter_horizontal", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.filter_horizontal", "type": "django.contrib.admin", "text": " \nModelAdmin.filter_horizontal  \nBy default, a ManyToManyField is displayed in the admin site with a <select multiple>. However, multiple-select boxes can be difficult to use when selecting many items. Adding a ManyToManyField to this list will instead use a nifty unobtrusive JavaScript \u201cfilter\u201d interface that allows searching within the options. The unselected and selected options appear in two boxes side by side. See filter_vertical to use a vertical interface. \n"}, {"name": "admin.ModelAdmin.filter_vertical", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.filter_vertical", "type": "django.contrib.admin", "text": " \nModelAdmin.filter_vertical  \nSame as filter_horizontal, but uses a vertical display of the filter interface with the box of unselected options appearing above the box of selected options. \n"}, {"name": "admin.ModelAdmin.form", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.form", "type": "django.contrib.admin", "text": " \nModelAdmin.form  \nBy default a ModelForm is dynamically created for your model. It is used to create the form presented on both the add/change pages. You can easily provide your own ModelForm to override any default form behavior on the add/change pages. Alternatively, you can customize the default form rather than specifying an entirely new one by using the ModelAdmin.get_form() method. For an example see the section Adding custom validation to the admin.  Note If you define the Meta.model attribute on a ModelForm, you must also define the Meta.fields attribute (or the Meta.exclude attribute). However, since the admin has its own way of defining fields, the Meta.fields attribute will be ignored. If the ModelForm is only going to be used for the admin, the easiest solution is to omit the Meta.model attribute, since ModelAdmin will provide the correct model to use. Alternatively, you can set fields = [] in the Meta class to satisfy the validation on the ModelForm.   Note If your ModelForm and ModelAdmin both define an exclude option then ModelAdmin takes precedence: from django import forms\nfrom django.contrib import admin\nfrom myapp.models import Person\n\nclass PersonForm(forms.ModelForm):\n\n    class Meta:\n        model = Person\n        exclude = ['name']\n\nclass PersonAdmin(admin.ModelAdmin):\n    exclude = ['age']\n    form = PersonForm\n In the above example, the \u201cage\u201d field will be excluded but the \u201cname\u201d field will be included in the generated form.  \n"}, {"name": "admin.ModelAdmin.formfield_for_choice_field()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_for_choice_field", "type": "django.contrib.admin", "text": " \nModelAdmin.formfield_for_choice_field(db_field, request, **kwargs)  \nLike the formfield_for_foreignkey and formfield_for_manytomany methods, the formfield_for_choice_field method can be overridden to change the default formfield for a field that has declared choices. For example, if the choices available to a superuser should be different than those available to regular staff, you could proceed as follows: class MyModelAdmin(admin.ModelAdmin):\n    def formfield_for_choice_field(self, db_field, request, **kwargs):\n        if db_field.name == \"status\":\n            kwargs['choices'] = (\n                ('accepted', 'Accepted'),\n                ('denied', 'Denied'),\n            )\n            if request.user.is_superuser:\n                kwargs['choices'] += (('ready', 'Ready for deployment'),)\n        return super().formfield_for_choice_field(db_field, request, **kwargs)\n  Note Any choices attribute set on the formfield will be limited to the form field only. If the corresponding field on the model has choices set, the choices provided to the form must be a valid subset of those choices, otherwise the form submission will fail with a ValidationError when the model itself is validated before saving.  \n"}, {"name": "admin.ModelAdmin.formfield_for_foreignkey()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_for_foreignkey", "type": "django.contrib.admin", "text": " \nModelAdmin.formfield_for_foreignkey(db_field, request, **kwargs)  \nThe formfield_for_foreignkey method on a ModelAdmin allows you to override the default formfield for a foreign keys field. For example, to return a subset of objects for this foreign key field based on the user: class MyModelAdmin(admin.ModelAdmin):\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == \"car\":\n            kwargs[\"queryset\"] = Car.objects.filter(owner=request.user)\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n This uses the HttpRequest instance to filter the Car foreign key field to only display the cars owned by the User instance. For more complex filters, you can use ModelForm.__init__() method to filter based on an instance of your model (see Fields which handle relationships). For example: class CountryAdminForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields['capital'].queryset = self.instance.cities.all()\n\nclass CountryAdmin(admin.ModelAdmin):\n    form = CountryAdminForm\n \n"}, {"name": "admin.ModelAdmin.formfield_for_manytomany()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_for_manytomany", "type": "django.contrib.admin", "text": " \nModelAdmin.formfield_for_manytomany(db_field, request, **kwargs)  \nLike the formfield_for_foreignkey method, the formfield_for_manytomany method can be overridden to change the default formfield for a many to many field. For example, if an owner can own multiple cars and cars can belong to multiple owners \u2013 a many to many relationship \u2013 you could filter the Car foreign key field to only display the cars owned by the User: class MyModelAdmin(admin.ModelAdmin):\n    def formfield_for_manytomany(self, db_field, request, **kwargs):\n        if db_field.name == \"cars\":\n            kwargs[\"queryset\"] = Car.objects.filter(owner=request.user)\n        return super().formfield_for_manytomany(db_field, request, **kwargs)\n \n"}, {"name": "admin.ModelAdmin.formfield_overrides", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_overrides", "type": "django.contrib.admin", "text": " \nModelAdmin.formfield_overrides  \nThis provides a quick-and-dirty way to override some of the Field options for use in the admin. formfield_overrides is a dictionary mapping a field class to a dict of arguments to pass to the field at construction time. Since that\u2019s a bit abstract, let\u2019s look at a concrete example. The most common use of formfield_overrides is to add a custom widget for a certain type of field. So, imagine we\u2019ve written a RichTextEditorWidget that we\u2019d like to use for large text fields instead of the default <textarea>. Here\u2019s how we\u2019d do that: from django.contrib import admin\nfrom django.db import models\n\n# Import our custom widget and our model from where they're defined\nfrom myapp.models import MyModel\nfrom myapp.widgets import RichTextEditorWidget\n\nclass MyModelAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.TextField: {'widget': RichTextEditorWidget},\n    }\n Note that the key in the dictionary is the actual field class, not a string. The value is another dictionary; these arguments will be passed to the form field\u2019s __init__() method. See The Forms API for details.  Warning If you want to use a custom widget with a relation field (i.e. ForeignKey or ManyToManyField), make sure you haven\u2019t included that field\u2019s name in raw_id_fields, radio_fields, or autocomplete_fields. formfield_overrides won\u2019t let you change the widget on relation fields that have raw_id_fields, radio_fields, or autocomplete_fields set. That\u2019s because raw_id_fields, radio_fields, and autocomplete_fields imply custom widgets of their own.  \n"}, {"name": "admin.ModelAdmin.get_actions()", "path": "ref/contrib/admin/actions#django.contrib.admin.ModelAdmin.get_actions", "type": "django.contrib.admin", "text": " \nModelAdmin.get_actions(request)  \nFinally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding ModelAdmin.get_actions(). This returns a dictionary of actions allowed. The keys are action names, and the values are (function, name, short_description) tuples. For example, if you only want users whose names begin with \u2018J\u2019 to be able to delete objects in bulk: class MyModelAdmin(admin.ModelAdmin):\n    ...\n\n    def get_actions(self, request):\n        actions = super().get_actions(request)\n        if request.user.username[0].upper() != 'J':\n            if 'delete_selected' in actions:\n                del actions['delete_selected']\n        return actions\n \n"}, {"name": "admin.ModelAdmin.get_autocomplete_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_autocomplete_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.get_autocomplete_fields(request)  \nThe get_autocomplete_fields() method is given the HttpRequest and is expected to return a list or tuple of field names that will be displayed with an autocomplete widget as described above in the ModelAdmin.autocomplete_fields section. \n"}, {"name": "admin.ModelAdmin.get_changeform_initial_data()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changeform_initial_data", "type": "django.contrib.admin", "text": " \nModelAdmin.get_changeform_initial_data(request)  \nA hook for the initial data on admin change forms. By default, fields are given initial values from GET parameters. For instance, ?name=initial_value will set the name field\u2019s initial value to be initial_value. This method should return a dictionary in the form {'fieldname': 'fieldval'}: def get_changeform_initial_data(self, request):\n    return {'name': 'custom_initial_value'}\n \n"}, {"name": "admin.ModelAdmin.get_changelist()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changelist", "type": "django.contrib.admin", "text": " \nModelAdmin.get_changelist(request, **kwargs)  \nReturns the Changelist class to be used for listing. By default, django.contrib.admin.views.main.ChangeList is used. By inheriting this class you can change the behavior of the listing. \n"}, {"name": "admin.ModelAdmin.get_changelist_form()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changelist_form", "type": "django.contrib.admin", "text": " \nModelAdmin.get_changelist_form(request, **kwargs)  \nReturns a ModelForm class for use in the Formset on the changelist page. To use a custom form, for example: from django import forms\n\nclass MyForm(forms.ModelForm):\n    pass\n\nclass MyModelAdmin(admin.ModelAdmin):\n    def get_changelist_form(self, request, **kwargs):\n        return MyForm\n  Note If you define the Meta.model attribute on a ModelForm, you must also define the Meta.fields attribute (or the Meta.exclude attribute). However, ModelAdmin ignores this value, overriding it with the ModelAdmin.list_editable attribute. The easiest solution is to omit the Meta.model attribute, since ModelAdmin will provide the correct model to use.  \n"}, {"name": "admin.ModelAdmin.get_changelist_formset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changelist_formset", "type": "django.contrib.admin", "text": " \nModelAdmin.get_changelist_formset(request, **kwargs)  \nReturns a ModelFormSet class for use on the changelist page if list_editable is used. To use a custom formset, for example: from django.forms import BaseModelFormSet\n\nclass MyAdminFormSet(BaseModelFormSet):\n    pass\n\nclass MyModelAdmin(admin.ModelAdmin):\n    def get_changelist_formset(self, request, **kwargs):\n        kwargs['formset'] = MyAdminFormSet\n        return super().get_changelist_formset(request, **kwargs)\n \n"}, {"name": "admin.ModelAdmin.get_deleted_objects()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_deleted_objects", "type": "django.contrib.admin", "text": " \nModelAdmin.get_deleted_objects(objs, request)  \nA hook for customizing the deletion process of the delete_view() and the \u201cdelete selected\u201d action. The objs argument is a homogeneous iterable of objects (a QuerySet or a list of model instances) to be deleted, and request is the HttpRequest. This method must return a 4-tuple of (deleted_objects, model_count, perms_needed, protected). deleted_objects is a list of strings representing all the objects that will be deleted. If there are any related objects to be deleted, the list is nested and includes those related objects. The list is formatted in the template using the unordered_list filter. model_count is a dictionary mapping each model\u2019s verbose_name_plural to the number of objects that will be deleted. perms_needed is a set of verbose_names of the models that the user doesn\u2019t have permission to delete. protected is a list of strings representing of all the protected related objects that can\u2019t be deleted. The list is displayed in the template. \n"}, {"name": "admin.ModelAdmin.get_exclude()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_exclude", "type": "django.contrib.admin", "text": " \nModelAdmin.get_exclude(request, obj=None)  \nThe get_exclude method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list of fields, as described in ModelAdmin.exclude. \n"}, {"name": "admin.ModelAdmin.get_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.get_fields(request, obj=None)  \nThe get_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list of fields, as described above in the ModelAdmin.fields section. \n"}, {"name": "admin.ModelAdmin.get_fieldsets()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_fieldsets", "type": "django.contrib.admin", "text": " \nModelAdmin.get_fieldsets(request, obj=None)  \nThe get_fieldsets method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list of two-tuples, in which each two-tuple represents a <fieldset> on the admin form page, as described above in the ModelAdmin.fieldsets section. \n"}, {"name": "admin.ModelAdmin.get_form()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_form", "type": "django.contrib.admin", "text": " \nModelAdmin.get_form(request, obj=None, **kwargs)  \nReturns a ModelForm class for use in the admin add and change views, see add_view() and change_view(). The base implementation uses modelform_factory() to subclass form, modified by attributes such as fields and exclude. So, for example, if you wanted to offer additional fields to superusers, you could swap in a different base form like so: class MyModelAdmin(admin.ModelAdmin):\n    def get_form(self, request, obj=None, **kwargs):\n        if request.user.is_superuser:\n            kwargs['form'] = MySuperuserForm\n        return super().get_form(request, obj, **kwargs)\n You may also return a custom ModelForm class directly. \n"}, {"name": "admin.ModelAdmin.get_formset_kwargs()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_formset_kwargs", "type": "django.contrib.admin", "text": " \nModelAdmin.get_formset_kwargs(request, obj, inline, prefix)  \n New in Django 4.0.  A hook for customizing the keyword arguments passed to the constructor of a formset. For example, to pass request to formset forms: class MyModelAdmin(admin.ModelAdmin):\n    def get_formset_kwargs(self, request, obj, inline, prefix):\n        return {\n            **super().get_formset_kwargs(request, obj, inline, prefix),\n            'form_kwargs': {'request': request},\n        }\n You can also used it to set initial for formset forms. \n"}, {"name": "admin.ModelAdmin.get_formsets_with_inlines()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_formsets_with_inlines", "type": "django.contrib.admin", "text": " \nModelAdmin.get_formsets_with_inlines(request, obj=None)  \nYields (FormSet, InlineModelAdmin) pairs for use in admin add and change views. For example if you wanted to display a particular inline only in the change view, you could override get_formsets_with_inlines as follows: class MyModelAdmin(admin.ModelAdmin):\n    inlines = [MyInline, SomeOtherInline]\n\n    def get_formsets_with_inlines(self, request, obj=None):\n        for inline in self.get_inline_instances(request, obj):\n            # hide MyInline in the add view\n            if not isinstance(inline, MyInline) or obj is not None:\n                yield inline.get_formset(request, obj), inline\n \n"}, {"name": "admin.ModelAdmin.get_inline_instances()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_inline_instances", "type": "django.contrib.admin", "text": " \nModelAdmin.get_inline_instances(request, obj=None)  \nThe get_inline_instances method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list or tuple of InlineModelAdmin objects, as described below in the InlineModelAdmin section. For example, the following would return inlines without the default filtering based on add, change, delete, and view permissions: class MyModelAdmin(admin.ModelAdmin):\n    inlines = (MyInline,)\n\n    def get_inline_instances(self, request, obj=None):\n        return [inline(self.model, self.admin_site) for inline in self.inlines]\n If you override this method, make sure that the returned inlines are instances of the classes defined in inlines or you might encounter a \u201cBad Request\u201d error when adding related objects. \n"}, {"name": "admin.ModelAdmin.get_inlines()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_inlines", "type": "django.contrib.admin", "text": " \nModelAdmin.get_inlines(request, obj)  \nThe get_inlines method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return an iterable of inlines. You can override this method to dynamically add inlines based on the request or model instance instead of specifying them in ModelAdmin.inlines. \n"}, {"name": "admin.ModelAdmin.get_list_display()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_display", "type": "django.contrib.admin", "text": " \nModelAdmin.get_list_display(request)  \nThe get_list_display method is given the HttpRequest and is expected to return a list or tuple of field names that will be displayed on the changelist view as described above in the ModelAdmin.list_display section. \n"}, {"name": "admin.ModelAdmin.get_list_display_links()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_display_links", "type": "django.contrib.admin", "text": " \nModelAdmin.get_list_display_links(request, list_display)  \nThe get_list_display_links method is given the HttpRequest and the list or tuple returned by ModelAdmin.get_list_display(). It is expected to return either None or a list or tuple of field names on the changelist that will be linked to the change view, as described in the ModelAdmin.list_display_links section. \n"}, {"name": "admin.ModelAdmin.get_list_filter()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_filter", "type": "django.contrib.admin", "text": " \nModelAdmin.get_list_filter(request)  \nThe get_list_filter method is given the HttpRequest and is expected to return the same kind of sequence type as for the list_filter attribute. \n"}, {"name": "admin.ModelAdmin.get_list_select_related()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_select_related", "type": "django.contrib.admin", "text": " \nModelAdmin.get_list_select_related(request)  \nThe get_list_select_related method is given the HttpRequest and should return a boolean or list as ModelAdmin.list_select_related does. \n"}, {"name": "admin.ModelAdmin.get_ordering()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_ordering", "type": "django.contrib.admin", "text": " \nModelAdmin.get_ordering(request)  \nThe get_ordering method takes a request as parameter and is expected to return a list or tuple for ordering similar to the ordering attribute. For example: class PersonAdmin(admin.ModelAdmin):\n\n    def get_ordering(self, request):\n        if request.user.is_superuser:\n            return ['name', 'rank']\n        else:\n            return ['name']\n \n"}, {"name": "admin.ModelAdmin.get_paginator()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_paginator", "type": "django.contrib.admin", "text": " \nModelAdmin.get_paginator(request, queryset, per_page, orphans=0, allow_empty_first_page=True)  \nReturns an instance of the paginator to use for this view. By default, instantiates an instance of paginator. \n"}, {"name": "admin.ModelAdmin.get_prepopulated_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_prepopulated_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.get_prepopulated_fields(request, obj=None)  \nThe get_prepopulated_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a dictionary, as described above in the ModelAdmin.prepopulated_fields section. \n"}, {"name": "admin.ModelAdmin.get_queryset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_queryset", "type": "django.contrib.admin", "text": " \nModelAdmin.get_queryset(request)  \nThe get_queryset method on a ModelAdmin returns a QuerySet of all model instances that can be edited by the admin site. One use case for overriding this method is to show objects owned by the logged-in user: class MyModelAdmin(admin.ModelAdmin):\n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n        if request.user.is_superuser:\n            return qs\n        return qs.filter(author=request.user)\n \n"}, {"name": "admin.ModelAdmin.get_readonly_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_readonly_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.get_readonly_fields(request, obj=None)  \nThe get_readonly_fields method is given the HttpRequest and the obj being edited (or None on an add form) and is expected to return a list or tuple of field names that will be displayed as read-only, as described above in the ModelAdmin.readonly_fields section. \n"}, {"name": "admin.ModelAdmin.get_search_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_search_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.get_search_fields(request)  \nThe get_search_fields method is given the HttpRequest and is expected to return the same kind of sequence type as for the search_fields attribute. \n"}, {"name": "admin.ModelAdmin.get_search_results()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_search_results", "type": "django.contrib.admin", "text": " \nModelAdmin.get_search_results(request, queryset, search_term)  \nThe get_search_results method modifies the list of objects displayed into those that match the provided search term. It accepts the request, a queryset that applies the current filters, and the user-provided search term. It returns a tuple containing a queryset modified to implement the search, and a boolean indicating if the results may contain duplicates. The default implementation searches the fields named in ModelAdmin.search_fields. This method may be overridden with your own custom search method. For example, you might wish to search by an integer field, or use an external tool such as Solr or Haystack. You must establish if the queryset changes implemented by your search method may introduce duplicates into the results, and return True in the second element of the return value. For example, to search by name and age, you could use: class PersonAdmin(admin.ModelAdmin):\n    list_display = ('name', 'age')\n    search_fields = ('name',)\n\n    def get_search_results(self, request, queryset, search_term):\n        queryset, may_have_duplicates = super().get_search_results(\n            request, queryset, search_term,\n        )\n        try:\n            search_term_as_int = int(search_term)\n        except ValueError:\n            pass\n        else:\n            queryset |= self.model.objects.filter(age=search_term_as_int)\n        return queryset, may_have_duplicates\n This implementation is more efficient than search_fields =\n('name', '=age') which results in a string comparison for the numeric field, for example ... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4') on PostgreSQL. \n"}, {"name": "admin.ModelAdmin.get_sortable_by()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_sortable_by", "type": "django.contrib.admin", "text": " \nModelAdmin.get_sortable_by(request)  \nThe get_sortable_by() method is passed the HttpRequest and is expected to return a collection (e.g. list, tuple, or set) of field names that will be sortable in the change list page. Its default implementation returns sortable_by if it\u2019s set, otherwise it defers to get_list_display(). For example, to prevent one or more columns from being sortable: class PersonAdmin(admin.ModelAdmin):\n\n    def get_sortable_by(self, request):\n        return {*self.get_list_display(request)} - {'rank'}\n \n"}, {"name": "admin.ModelAdmin.get_urls()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_urls", "type": "django.contrib.admin", "text": " \nModelAdmin.get_urls()  \nThe get_urls method on a ModelAdmin returns the URLs to be used for that ModelAdmin in the same way as a URLconf. Therefore you can extend them as documented in URL dispatcher: from django.contrib import admin\nfrom django.template.response import TemplateResponse\nfrom django.urls import path\n\nclass MyModelAdmin(admin.ModelAdmin):\n    def get_urls(self):\n        urls = super().get_urls()\n        my_urls = [\n            path('my_view/', self.my_view),\n        ]\n        return my_urls + urls\n\n    def my_view(self, request):\n        # ...\n        context = dict(\n           # Include common variables for rendering the admin template.\n           self.admin_site.each_context(request),\n           # Anything else you want in the context...\n           key=value,\n        )\n        return TemplateResponse(request, \"sometemplate.html\", context)\n If you want to use the admin layout, extend from admin/base_site.html: {% extends \"admin/base_site.html\" %}\n{% block content %}\n...\n{% endblock %}\n  Note Notice that the custom patterns are included before the regular admin URLs: the admin URL patterns are very permissive and will match nearly anything, so you\u2019ll usually want to prepend your custom URLs to the built-in ones. In this example, my_view will be accessed at /admin/myapp/mymodel/my_view/ (assuming the admin URLs are included at /admin/.)  However, the self.my_view function registered above suffers from two problems:  It will not perform any permission checks, so it will be accessible to the general public. It will not provide any header details to prevent caching. This means if the page retrieves data from the database, and caching middleware is active, the page could show outdated information.  Since this is usually not what you want, Django provides a convenience wrapper to check permissions and mark the view as non-cacheable. This wrapper is AdminSite.admin_view() (i.e. self.admin_site.admin_view inside a ModelAdmin instance); use it like so: class MyModelAdmin(admin.ModelAdmin):\n    def get_urls(self):\n        urls = super().get_urls()\n        my_urls = [\n            path('my_view/', self.admin_site.admin_view(self.my_view))\n        ]\n        return my_urls + urls\n Notice the wrapped view in the fifth line above: path('my_view/', self.admin_site.admin_view(self.my_view))\n This wrapping will protect self.my_view from unauthorized access and will apply the django.views.decorators.cache.never_cache() decorator to make sure it is not cached if the cache middleware is active. If the page is cacheable, but you still want the permission check to be performed, you can pass a cacheable=True argument to AdminSite.admin_view(): path('my_view/', self.admin_site.admin_view(self.my_view, cacheable=True))\n ModelAdmin views have model_admin attributes. Other AdminSite views have admin_site attributes. \n"}, {"name": "admin.ModelAdmin.has_add_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_add_permission", "type": "django.contrib.admin", "text": " \nModelAdmin.has_add_permission(request)  \nShould return True if adding an object is permitted, False otherwise. \n"}, {"name": "admin.ModelAdmin.has_change_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_change_permission", "type": "django.contrib.admin", "text": " \nModelAdmin.has_change_permission(request, obj=None)  \nShould return True if editing obj is permitted, False otherwise. If obj is None, should return True or False to indicate whether editing of objects of this type is permitted in general (e.g., False will be interpreted as meaning that the current user is not permitted to edit any object of this type). \n"}, {"name": "admin.ModelAdmin.has_delete_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_delete_permission", "type": "django.contrib.admin", "text": " \nModelAdmin.has_delete_permission(request, obj=None)  \nShould return True if deleting obj is permitted, False otherwise. If obj is None, should return True or False to indicate whether deleting objects of this type is permitted in general (e.g., False will be interpreted as meaning that the current user is not permitted to delete any object of this type). \n"}, {"name": "admin.ModelAdmin.has_module_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_module_permission", "type": "django.contrib.admin", "text": " \nModelAdmin.has_module_permission(request)  \nShould return True if displaying the module on the admin index page and accessing the module\u2019s index page is permitted, False otherwise. Uses User.has_module_perms() by default. Overriding it does not restrict access to the view, add, change, or delete views, has_view_permission(), has_add_permission(), has_change_permission(), and has_delete_permission() should be used for that. \n"}, {"name": "admin.ModelAdmin.has_view_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_view_permission", "type": "django.contrib.admin", "text": " \nModelAdmin.has_view_permission(request, obj=None)  \nShould return True if viewing obj is permitted, False otherwise. If obj is None, should return True or False to indicate whether viewing of objects of this type is permitted in general (e.g., False will be interpreted as meaning that the current user is not permitted to view any object of this type). The default implementation returns True if the user has either the \u201cchange\u201d or \u201cview\u201d permission. \n"}, {"name": "admin.ModelAdmin.history_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.history_view", "type": "django.contrib.admin", "text": " \nModelAdmin.history_view(request, object_id, extra_context=None)  \nDjango view for the page that shows the modification history for a given model instance. \n"}, {"name": "admin.ModelAdmin.inlines", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.inlines", "type": "django.contrib.admin", "text": " \nModelAdmin.inlines  \nSee InlineModelAdmin objects below as well as ModelAdmin.get_formsets_with_inlines(). \n"}, {"name": "admin.ModelAdmin.list_display", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display", "type": "django.contrib.admin", "text": " \nModelAdmin.list_display  \nSet list_display to control which fields are displayed on the change list page of the admin. Example: list_display = ('first_name', 'last_name')\n If you don\u2019t set list_display, the admin site will display a single column that displays the __str__() representation of each object. There are four types of values that can be used in list_display. All but the simplest may use the display() decorator is used to customize how the field is presented:  \nThe name of a model field. For example: class PersonAdmin(admin.ModelAdmin):\n    list_display = ('first_name', 'last_name')\n  \nA callable that accepts one argument, the model instance. For example: @admin.display(description='Name')\ndef upper_case_name(obj):\n    return (\"%s %s\" % (obj.first_name, obj.last_name)).upper()\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = (upper_case_name,)\n  \nA string representing a ModelAdmin method that accepts one argument, the model instance. For example: class PersonAdmin(admin.ModelAdmin):\n    list_display = ('upper_case_name',)\n\n    @admin.display(description='Name')\n    def upper_case_name(self, obj):\n        return (\"%s %s\" % (obj.first_name, obj.last_name)).upper()\n  \nA string representing a model attribute or method (without any required arguments). For example: from django.contrib import admin\nfrom django.db import models\n\nclass Person(models.Model):\n    name = models.CharField(max_length=50)\n    birthday = models.DateField()\n\n    @admin.display(description='Birth decade')\n    def decade_born_in(self):\n        return '%d\u2019s' % (self.birthday.year // 10 * 10)\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = ('name', 'decade_born_in')\n   A few special cases to note about list_display:  If the field is a ForeignKey, Django will display the __str__() of the related object.  \nManyToManyField fields aren\u2019t supported, because that would entail executing a separate SQL statement for each row in the table. If you want to do this nonetheless, give your model a custom method, and add that method\u2019s name to list_display. (See below for more on custom methods in list_display.)  If the field is a BooleanField, Django will display a pretty \u201cyes\u201d, \u201cno\u201d, or \u201cunknown\u201d icon instead of True, False, or None.  \nIf the string given is a method of the model, ModelAdmin or a callable, Django will HTML-escape the output by default. To escape user input and allow your own unescaped tags, use format_html(). Here\u2019s a full example model: from django.contrib import admin\nfrom django.db import models\nfrom django.utils.html import format_html\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    color_code = models.CharField(max_length=6)\n\n    @admin.display\n    def colored_name(self):\n        return format_html(\n            '<span style=\"color: #{};\">{} {}</span>',\n            self.color_code,\n            self.first_name,\n            self.last_name,\n        )\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = ('first_name', 'last_name', 'colored_name')\n  \nAs some examples have already demonstrated, when using a callable, a model method, or a ModelAdmin method, you can customize the column\u2019s title by wrapping the callable with the display() decorator and passing the description argument.  Changed in Django 3.2: The description argument to the display() decorator is equivalent to setting the short_description attribute on the display function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.   \nIf the value of a field is None, an empty string, or an iterable without elements, Django will display - (a dash). You can override this with AdminSite.empty_value_display: from django.contrib import admin\n\nadmin.site.empty_value_display = '(None)'\n You can also use ModelAdmin.empty_value_display: class PersonAdmin(admin.ModelAdmin):\n    empty_value_display = 'unknown'\n Or on a field level: class PersonAdmin(admin.ModelAdmin):\n    list_display = ('name', 'birth_date_view')\n\n    @admin.display(empty_value='unknown')\n    def birth_date_view(self, obj):\n         return obj.birth_date\n  Changed in Django 3.2: The empty_value argument to the display() decorator is equivalent to setting the empty_value_display attribute on the display function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.   \nIf the string given is a method of the model, ModelAdmin or a callable that returns True, False, or None, Django will display a pretty \u201cyes\u201d, \u201cno\u201d, or \u201cunknown\u201d icon if you wrap the method with the display() decorator passing the boolean argument with the value set to True: from django.contrib import admin\nfrom django.db import models\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    birthday = models.DateField()\n\n    @admin.display(boolean=True)\n    def born_in_fifties(self):\n        return 1950 <= self.birthday.year < 1960\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = ('name', 'born_in_fifties')\n  Changed in Django 3.2: The boolean argument to the display() decorator is equivalent to setting the boolean attribute on the display function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.   \nThe __str__() method is just as valid in list_display as any other model method, so it\u2019s perfectly OK to do this: list_display = ('__str__', 'some_other_field')\n  \nUsually, elements of list_display that aren\u2019t actual database fields can\u2019t be used in sorting (because Django does all the sorting at the database level). However, if an element of list_display represents a certain database field, you can indicate this fact by using the display() decorator on the method, passing the ordering argument: from django.contrib import admin\nfrom django.db import models\nfrom django.utils.html import format_html\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    color_code = models.CharField(max_length=6)\n\n    @admin.display(ordering='first_name')\n    def colored_first_name(self):\n        return format_html(\n            '<span style=\"color: #{};\">{}</span>',\n            self.color_code,\n            self.first_name,\n        )\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = ('first_name', 'colored_first_name')\n The above will tell Django to order by the first_name field when trying to sort by colored_first_name in the admin. To indicate descending order with the ordering argument you can use a hyphen prefix on the field name. Using the above example, this would look like: @admin.display(ordering='-first_name')\n The ordering argument supports query lookups to sort by values on related models. This example includes an \u201cauthor first name\u201d column in the list display and allows sorting it by first name: class Blog(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.ForeignKey(Person, on_delete=models.CASCADE)\n\nclass BlogAdmin(admin.ModelAdmin):\n    list_display = ('title', 'author', 'author_first_name')\n\n    @admin.display(ordering='author__first_name')\n    def author_first_name(self, obj):\n        return obj.author.first_name\n Query expressions may be used with the ordering argument: from django.db.models import Value\nfrom django.db.models.functions import Concat\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n\n    @admin.display(ordering=Concat('first_name', Value(' '), 'last_name'))\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n  Changed in Django 3.2: The ordering argument to the display() decorator is equivalent to setting the admin_order_field attribute on the display function directly in previous versions. Setting the attribute directly is still supported for backward compatibility.   \nElements of list_display can also be properties: class Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n\n    @property\n    @admin.display(\n        ordering='last_name',\n        description='Full name of the person',\n    )\n    def full_name(self):\n        return self.first_name + ' ' + self.last_name\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = ('full_name',)\n Note that @property must be above @display. If you\u2019re using the old way \u2013 setting the display-related attributes directly rather than using the display() decorator \u2013 be aware that the property() function and not the @property decorator must be used: def my_property(self):\n    return self.first_name + ' ' + self.last_name\nmy_property.short_description = \"Full name of the person\"\nmy_property.admin_order_field = 'last_name'\n\nfull_name = property(my_property)\n  The field names in list_display will also appear as CSS classes in the HTML output, in the form of column-<field_name> on each <th> element. This can be used to set column widths in a CSS file for example.  \nDjango will try to interpret every element of list_display in this order:  A field of the model. A callable. A string representing a ModelAdmin attribute. A string representing a model attribute.  For example if you have first_name as a model field and as a ModelAdmin attribute, the model field will be used.   \n"}, {"name": "admin.ModelAdmin.list_display_links", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display_links", "type": "django.contrib.admin", "text": " \nModelAdmin.list_display_links  \nUse list_display_links to control if and which fields in list_display should be linked to the \u201cchange\u201d page for an object. By default, the change list page will link the first column \u2013 the first field specified in list_display \u2013 to the change page for each item. But list_display_links lets you change this:  Set it to None to get no links at all.  \nSet it to a list or tuple of fields (in the same format as list_display) whose columns you want converted to links. You can specify one or many fields. As long as the fields appear in list_display, Django doesn\u2019t care how many (or how few) fields are linked. The only requirement is that if you want to use list_display_links in this fashion, you must define list_display.   In this example, the first_name and last_name fields will be linked on the change list page: class PersonAdmin(admin.ModelAdmin):\n    list_display = ('first_name', 'last_name', 'birthday')\n    list_display_links = ('first_name', 'last_name')\n In this example, the change list page grid will have no links: class AuditEntryAdmin(admin.ModelAdmin):\n    list_display = ('timestamp', 'message')\n    list_display_links = None\n \n"}, {"name": "admin.ModelAdmin.list_editable", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_editable", "type": "django.contrib.admin", "text": " \nModelAdmin.list_editable  \nSet list_editable to a list of field names on the model which will allow editing on the change list page. That is, fields listed in list_editable will be displayed as form widgets on the change list page, allowing users to edit and save multiple rows at once.  Note list_editable interacts with a couple of other options in particular ways; you should note the following rules:  Any field in list_editable must also be in list_display. You can\u2019t edit a field that\u2019s not displayed! The same field can\u2019t be listed in both list_editable and list_display_links \u2013 a field can\u2019t be both a form and a link.  You\u2019ll get a validation error if either of these rules are broken.  \n"}, {"name": "admin.ModelAdmin.list_filter", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter", "type": "django.contrib.admin", "text": " \nModelAdmin.list_filter  \nSet list_filter to activate filters in the right sidebar of the change list page of the admin, as illustrated in the following screenshot:  list_filter should be a list or tuple of elements, where each element should be of one of the following types:  \na field name, where the specified field should be either a BooleanField, CharField, DateField, DateTimeField, IntegerField, ForeignKey or ManyToManyField, for example: class PersonAdmin(admin.ModelAdmin):\n    list_filter = ('is_staff', 'company')\n Field names in list_filter can also span relations using the __ lookup, for example: class PersonAdmin(admin.UserAdmin):\n    list_filter = ('company__name',)\n  \na class inheriting from django.contrib.admin.SimpleListFilter, which you need to provide the title and parameter_name attributes to and override the lookups and queryset methods, e.g.: from datetime import date\n\nfrom django.contrib import admin\nfrom django.utils.translation import gettext_lazy as _\n\nclass DecadeBornListFilter(admin.SimpleListFilter):\n    # Human-readable title which will be displayed in the\n    # right admin sidebar just above the filter options.\n    title = _('decade born')\n\n    # Parameter for the filter that will be used in the URL query.\n    parameter_name = 'decade'\n\n    def lookups(self, request, model_admin):\n        \"\"\"\n        Returns a list of tuples. The first element in each\n        tuple is the coded value for the option that will\n        appear in the URL query. The second element is the\n        human-readable name for the option that will appear\n        in the right sidebar.\n        \"\"\"\n        return (\n            ('80s', _('in the eighties')),\n            ('90s', _('in the nineties')),\n        )\n\n    def queryset(self, request, queryset):\n        \"\"\"\n        Returns the filtered queryset based on the value\n        provided in the query string and retrievable via\n        `self.value()`.\n        \"\"\"\n        # Compare the requested value (either '80s' or '90s')\n        # to decide how to filter the queryset.\n        if self.value() == '80s':\n            return queryset.filter(birthday__gte=date(1980, 1, 1),\n                                    birthday__lte=date(1989, 12, 31))\n        if self.value() == '90s':\n            return queryset.filter(birthday__gte=date(1990, 1, 1),\n                                    birthday__lte=date(1999, 12, 31))\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_filter = (DecadeBornListFilter,)\n  Note As a convenience, the HttpRequest object is passed to the lookups and queryset methods, for example: class AuthDecadeBornListFilter(DecadeBornListFilter):\n\n    def lookups(self, request, model_admin):\n        if request.user.is_superuser:\n            return super().lookups(request, model_admin)\n\n    def queryset(self, request, queryset):\n        if request.user.is_superuser:\n            return super().queryset(request, queryset)\n Also as a convenience, the ModelAdmin object is passed to the lookups method, for example if you want to base the lookups on the available data: class AdvancedDecadeBornListFilter(DecadeBornListFilter):\n\n    def lookups(self, request, model_admin):\n        \"\"\"\n        Only show the lookups if there actually is\n        anyone born in the corresponding decades.\n        \"\"\"\n        qs = model_admin.get_queryset(request)\n        if qs.filter(birthday__gte=date(1980, 1, 1),\n                      birthday__lte=date(1989, 12, 31)).exists():\n            yield ('80s', _('in the eighties'))\n        if qs.filter(birthday__gte=date(1990, 1, 1),\n                      birthday__lte=date(1999, 12, 31)).exists():\n            yield ('90s', _('in the nineties'))\n   \na tuple, where the first element is a field name and the second element is a class inheriting from django.contrib.admin.FieldListFilter, for example: class PersonAdmin(admin.ModelAdmin):\n    list_filter = (\n        ('is_staff', admin.BooleanFieldListFilter),\n    )\n You can limit the choices of a related model to the objects involved in that relation using RelatedOnlyFieldListFilter: class BookAdmin(admin.ModelAdmin):\n    list_filter = (\n        ('author', admin.RelatedOnlyFieldListFilter),\n    )\n Assuming author is a ForeignKey to a User model, this will limit the list_filter choices to the users who have written a book instead of listing all users. You can filter empty values using EmptyFieldListFilter, which can filter on both empty strings and nulls, depending on what the field allows to store: class BookAdmin(admin.ModelAdmin):\n    list_filter = (\n        ('title', admin.EmptyFieldListFilter),\n    )\n  Note The FieldListFilter API is considered internal and might be changed.   Note The GenericForeignKey field is not supported.    List filter\u2019s typically appear only if the filter has more than one choice. A filter\u2019s has_output() method controls whether or not it appears. It is possible to specify a custom template for rendering a list filter: class FilterWithCustomTemplate(admin.SimpleListFilter):\n    template = \"custom_template.html\"\n See the default template provided by Django (admin/filter.html) for a concrete example. \n"}, {"name": "admin.ModelAdmin.list_max_show_all", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_max_show_all", "type": "django.contrib.admin", "text": " \nModelAdmin.list_max_show_all  \nSet list_max_show_all to control how many items can appear on a \u201cShow all\u201d admin change list page. The admin will display a \u201cShow all\u201d link on the change list only if the total result count is less than or equal to this setting. By default, this is set to 200. \n"}, {"name": "admin.ModelAdmin.list_per_page", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_per_page", "type": "django.contrib.admin", "text": " \nModelAdmin.list_per_page  \nSet list_per_page to control how many items appear on each paginated admin change list page. By default, this is set to 100. \n"}, {"name": "admin.ModelAdmin.list_select_related", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_select_related", "type": "django.contrib.admin", "text": " \nModelAdmin.list_select_related  \nSet list_select_related to tell Django to use select_related() in retrieving the list of objects on the admin change list page. This can save you a bunch of database queries. The value should be either a boolean, a list or a tuple. Default is False. When value is True, select_related() will always be called. When value is set to False, Django will look at list_display and call select_related() if any ForeignKey is present. If you need more fine-grained control, use a tuple (or list) as value for list_select_related. Empty tuple will prevent Django from calling select_related at all. Any other tuple will be passed directly to select_related as parameters. For example: class ArticleAdmin(admin.ModelAdmin):\n    list_select_related = ('author', 'category')\n will call select_related('author', 'category'). If you need to specify a dynamic value based on the request, you can implement a get_list_select_related() method.  Note ModelAdmin ignores this attribute when select_related() was already called on the changelist\u2019s QuerySet.  \n"}, {"name": "admin.ModelAdmin.lookup_allowed()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.lookup_allowed", "type": "django.contrib.admin", "text": " \nModelAdmin.lookup_allowed(lookup, value)  \nThe objects in the changelist page can be filtered with lookups from the URL\u2019s query string. This is how list_filter works, for example. The lookups are similar to what\u2019s used in QuerySet.filter() (e.g. user__email=user@example.com). Since the lookups in the query string can be manipulated by the user, they must be sanitized to prevent unauthorized data exposure. The lookup_allowed() method is given a lookup path from the query string (e.g. 'user__email') and the corresponding value (e.g. 'user@example.com'), and returns a boolean indicating whether filtering the changelist\u2019s QuerySet using the parameters is permitted. If lookup_allowed() returns False, DisallowedModelAdminLookup (subclass of SuspiciousOperation) is raised. By default, lookup_allowed() allows access to a model\u2019s local fields, field paths used in list_filter (but not paths from get_list_filter()), and lookups required for limit_choices_to to function correctly in raw_id_fields. Override this method to customize the lookups permitted for your ModelAdmin subclass. \n"}, {"name": "admin.ModelAdmin.message_user()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.message_user", "type": "django.contrib.admin", "text": " \nModelAdmin.message_user(request, message, level=messages.INFO, extra_tags='', fail_silently=False)  \nSends a message to the user using the django.contrib.messages backend. See the custom ModelAdmin example. Keyword arguments allow you to change the message level, add extra CSS tags, or fail silently if the contrib.messages framework is not installed. These keyword arguments match those for django.contrib.messages.add_message(), see that function\u2019s documentation for more details. One difference is that the level may be passed as a string label in addition to integer/constant. \n"}, {"name": "admin.ModelAdmin.object_history_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.object_history_template", "type": "django.contrib.admin", "text": " \nModelAdmin.object_history_template  \nPath to a custom template, used by history_view(). \n"}, {"name": "admin.ModelAdmin.ordering", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.ordering", "type": "django.contrib.admin", "text": " \nModelAdmin.ordering  \nSet ordering to specify how lists of objects should be ordered in the Django admin views. This should be a list or tuple in the same format as a model\u2019s ordering parameter. If this isn\u2019t provided, the Django admin will use the model\u2019s default ordering. If you need to specify a dynamic order (for example depending on user or language) you can implement a get_ordering() method.  Performance considerations with ordering and sorting To ensure a deterministic ordering of results, the changelist adds pk to the ordering if it can\u2019t find a single or unique together set of fields that provide total ordering. For example, if the default ordering is by a non-unique name field, then the changelist is sorted by name and pk. This could perform poorly if you have a lot of rows and don\u2019t have an index on name and pk.  \n"}, {"name": "admin.ModelAdmin.paginator", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.paginator", "type": "django.contrib.admin", "text": " \nModelAdmin.paginator  \nThe paginator class to be used for pagination. By default, django.core.paginator.Paginator is used. If the custom paginator class doesn\u2019t have the same constructor interface as django.core.paginator.Paginator, you will also need to provide an implementation for ModelAdmin.get_paginator(). \n"}, {"name": "admin.ModelAdmin.popup_response_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.popup_response_template", "type": "django.contrib.admin", "text": " \nModelAdmin.popup_response_template  \nPath to a custom template, used by response_add(), response_change(), and response_delete(). \n"}, {"name": "admin.ModelAdmin.prepopulated_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.prepopulated_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.prepopulated_fields  \nSet prepopulated_fields to a dictionary mapping field names to the fields it should prepopulate from: class ArticleAdmin(admin.ModelAdmin):\n    prepopulated_fields = {\"slug\": (\"title\",)}\n When set, the given fields will use a bit of JavaScript to populate from the fields assigned. The main use for this functionality is to automatically generate the value for SlugField fields from one or more other fields. The generated value is produced by concatenating the values of the source fields, and then by transforming that result into a valid slug (e.g. substituting dashes for spaces and lowercasing ASCII letters). Prepopulated fields aren\u2019t modified by JavaScript after a value has been saved. It\u2019s usually undesired that slugs change (which would cause an object\u2019s URL to change if the slug is used in it). prepopulated_fields doesn\u2019t accept DateTimeField, ForeignKey, OneToOneField, and ManyToManyField fields.  Changed in Django 3.2: In older versions, various English stop words are removed from generated values.  \n"}, {"name": "admin.ModelAdmin.preserve_filters", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.preserve_filters", "type": "django.contrib.admin", "text": " \nModelAdmin.preserve_filters  \nBy default, applied filters are preserved on the list view after creating, editing, or deleting an object. You can have filters cleared by setting this attribute to False. \n"}, {"name": "admin.ModelAdmin.radio_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.radio_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.radio_fields  \nBy default, Django\u2019s admin uses a select-box interface (<select>) for fields that are ForeignKey or have choices set. If a field is present in radio_fields, Django will use a radio-button interface instead. Assuming group is a ForeignKey on the Person model: class PersonAdmin(admin.ModelAdmin):\n    radio_fields = {\"group\": admin.VERTICAL}\n You have the choice of using HORIZONTAL or VERTICAL from the django.contrib.admin module. Don\u2019t include a field in radio_fields unless it\u2019s a ForeignKey or has choices set. \n"}, {"name": "admin.ModelAdmin.raw_id_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.raw_id_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.raw_id_fields  \nBy default, Django\u2019s admin uses a select-box interface (<select>) for fields that are ForeignKey. Sometimes you don\u2019t want to incur the overhead of having to select all the related instances to display in the drop-down. raw_id_fields is a list of fields you would like to change into an Input widget for either a ForeignKey or ManyToManyField: class ArticleAdmin(admin.ModelAdmin):\n    raw_id_fields = (\"newspaper\",)\n The raw_id_fields Input widget should contain a primary key if the field is a ForeignKey or a comma separated list of values if the field is a ManyToManyField. The raw_id_fields widget shows a magnifying glass button next to the field which allows users to search for and select a value:  \n"}, {"name": "admin.ModelAdmin.readonly_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.readonly_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.readonly_fields  \nBy default the admin shows all fields as editable. Any fields in this option (which should be a list or tuple) will display its data as-is and non-editable; they are also excluded from the ModelForm used for creating and editing. Note that when specifying ModelAdmin.fields or ModelAdmin.fieldsets the read-only fields must be present to be shown (they are ignored otherwise). If readonly_fields is used without defining explicit ordering through ModelAdmin.fields or ModelAdmin.fieldsets they will be added last after all editable fields. A read-only field can not only display data from a model\u2019s field, it can also display the output of a model\u2019s method or a method of the ModelAdmin class itself. This is very similar to the way ModelAdmin.list_display behaves. This provides a way to use the admin interface to provide feedback on the status of the objects being edited, for example: from django.contrib import admin\nfrom django.utils.html import format_html_join\nfrom django.utils.safestring import mark_safe\n\nclass PersonAdmin(admin.ModelAdmin):\n    readonly_fields = ('address_report',)\n\n    # description functions like a model field's verbose_name\n    @admin.display(description='Address')\n    def address_report(self, instance):\n        # assuming get_full_address() returns a list of strings\n        # for each line of the address and you want to separate each\n        # line by a linebreak\n        return format_html_join(\n            mark_safe('<br>'),\n            '{}',\n            ((line,) for line in instance.get_full_address()),\n        ) or mark_safe(\"<span class='errors'>I can't determine this address.</span>\")\n \n"}, {"name": "admin.ModelAdmin.response_add()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.response_add", "type": "django.contrib.admin", "text": " \nModelAdmin.response_add(request, obj, post_url_continue=None)  \nDetermines the HttpResponse for the add_view() stage. response_add is called after the admin form is submitted and just after the object and all the related instances have been created and saved. You can override it to change the default behavior after the object has been created. \n"}, {"name": "admin.ModelAdmin.response_change()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.response_change", "type": "django.contrib.admin", "text": " \nModelAdmin.response_change(request, obj)  \nDetermines the HttpResponse for the change_view() stage. response_change is called after the admin form is submitted and just after the object and all the related instances have been saved. You can override it to change the default behavior after the object has been changed. \n"}, {"name": "admin.ModelAdmin.response_delete()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.response_delete", "type": "django.contrib.admin", "text": " \nModelAdmin.response_delete(request, obj_display, obj_id)  \nDetermines the HttpResponse for the delete_view() stage. response_delete is called after the object has been deleted. You can override it to change the default behavior after the object has been deleted. obj_display is a string with the name of the deleted object. obj_id is the serialized identifier used to retrieve the object to be deleted. \n"}, {"name": "admin.ModelAdmin.save_as", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_as", "type": "django.contrib.admin", "text": " \nModelAdmin.save_as  \nSet save_as to enable a \u201csave as new\u201d feature on admin change forms. Normally, objects have three save options: \u201cSave\u201d, \u201cSave and continue editing\u201d, and \u201cSave and add another\u201d. If save_as is True, \u201cSave and add another\u201d will be replaced by a \u201cSave as new\u201d button that creates a new object (with a new ID) rather than updating the existing object. By default, save_as is set to False. \n"}, {"name": "admin.ModelAdmin.save_as_continue", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_as_continue", "type": "django.contrib.admin", "text": " \nModelAdmin.save_as_continue  \nWhen save_as=True, the default redirect after saving the new object is to the change view for that object. If you set save_as_continue=False, the redirect will be to the changelist view. By default, save_as_continue is set to True. \n"}, {"name": "admin.ModelAdmin.save_formset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_formset", "type": "django.contrib.admin", "text": " \nModelAdmin.save_formset(request, form, formset, change)  \nThe save_formset method is given the HttpRequest, the parent ModelForm instance and a boolean value based on whether it is adding or changing the parent object. For example, to attach request.user to each changed formset model instance: class ArticleAdmin(admin.ModelAdmin):\n    def save_formset(self, request, form, formset, change):\n        instances = formset.save(commit=False)\n        for obj in formset.deleted_objects:\n            obj.delete()\n        for instance in instances:\n            instance.user = request.user\n            instance.save()\n        formset.save_m2m()\n See also Saving objects in the formset. \n"}, {"name": "admin.ModelAdmin.save_model()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_model", "type": "django.contrib.admin", "text": " \nModelAdmin.save_model(request, obj, form, change)  \nThe save_model method is given the HttpRequest, a model instance, a ModelForm instance, and a boolean value based on whether it is adding or changing the object. Overriding this method allows doing pre- or post-save operations. Call super().save_model() to save the object using Model.save(). For example to attach request.user to the object prior to saving: from django.contrib import admin\n\nclass ArticleAdmin(admin.ModelAdmin):\n    def save_model(self, request, obj, form, change):\n        obj.user = request.user\n        super().save_model(request, obj, form, change)\n \n"}, {"name": "admin.ModelAdmin.save_on_top", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_on_top", "type": "django.contrib.admin", "text": " \nModelAdmin.save_on_top  \nSet save_on_top to add save buttons across the top of your admin change forms. Normally, the save buttons appear only at the bottom of the forms. If you set save_on_top, the buttons will appear both on the top and the bottom. By default, save_on_top is set to False. \n"}, {"name": "admin.ModelAdmin.save_related()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_related", "type": "django.contrib.admin", "text": " \nModelAdmin.save_related(request, form, formsets, change)  \nThe save_related method is given the HttpRequest, the parent ModelForm instance, the list of inline formsets and a boolean value based on whether the parent is being added or changed. Here you can do any pre- or post-save operations for objects related to the parent. Note that at this point the parent object and its form have already been saved. \n"}, {"name": "admin.ModelAdmin.search_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_fields", "type": "django.contrib.admin", "text": " \nModelAdmin.search_fields  \nSet search_fields to enable a search box on the admin change list page. This should be set to a list of field names that will be searched whenever somebody submits a search query in that text box. These fields should be some kind of text field, such as CharField or TextField. You can also perform a related lookup on a ForeignKey or ManyToManyField with the lookup API \u201cfollow\u201d notation: search_fields = ['foreign_key__related_fieldname']\n For example, if you have a blog entry with an author, the following definition would enable searching blog entries by the email address of the author: search_fields = ['user__email']\n When somebody does a search in the admin search box, Django splits the search query into words and returns all objects that contain each of the words, case-insensitive (using the icontains lookup), where each word must be in at least one of search_fields. For example, if search_fields is set to ['first_name', 'last_name'] and a user searches for john lennon, Django will do the equivalent of this SQL WHERE clause: WHERE (first_name ILIKE '%john%' OR last_name ILIKE '%john%')\nAND (first_name ILIKE '%lennon%' OR last_name ILIKE '%lennon%')\n The search query can contain quoted phrases with spaces. For example, if a user searches for \"john winston\" or 'john winston', Django will do the equivalent of this SQL WHERE clause: WHERE (first_name ILIKE '%john winston%' OR last_name ILIKE '%john winston%')\n If you don\u2019t want to use icontains as the lookup, you can use any lookup by appending it the field. For example, you could use exact by setting search_fields to ['first_name__exact']. Some (older) shortcuts for specifying a field lookup are also available. You can prefix a field in search_fields with the following characters and it\u2019s equivalent to adding __<lookup> to the field:   \nPrefix Lookup   \n^ startswith  \n= iexact  \n@ search  \nNone icontains   If you need to customize search you can use ModelAdmin.get_search_results() to provide additional or alternate search behavior.  Changed in Django 3.2: Support for searching against quoted phrases with spaces was added.  \n"}, {"name": "admin.ModelAdmin.search_help_text", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_help_text", "type": "django.contrib.admin", "text": " \nModelAdmin.search_help_text  \n New in Django 4.0.  Set search_help_text to specify a descriptive text for the search box which will be displayed below it. \n"}, {"name": "admin.ModelAdmin.show_full_result_count", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.show_full_result_count", "type": "django.contrib.admin", "text": " \nModelAdmin.show_full_result_count  \nSet show_full_result_count to control whether the full count of objects should be displayed on a filtered admin page (e.g. 99 results (103 total)). If this option is set to False, a text like 99 results (Show all) is displayed instead. The default of show_full_result_count=True generates a query to perform a full count on the table which can be expensive if the table contains a large number of rows. \n"}, {"name": "admin.ModelAdmin.sortable_by", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.sortable_by", "type": "django.contrib.admin", "text": " \nModelAdmin.sortable_by  \nBy default, the change list page allows sorting by all model fields (and callables that use the ordering argument to the display() decorator or have the admin_order_field attribute) specified in list_display. If you want to disable sorting for some columns, set sortable_by to a collection (e.g. list, tuple, or set) of the subset of list_display that you want to be sortable. An empty collection disables sorting for all columns. If you need to specify this list dynamically, implement a get_sortable_by() method instead. \n"}, {"name": "admin.ModelAdmin.view_on_site", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.view_on_site", "type": "django.contrib.admin", "text": " \nModelAdmin.view_on_site  \nSet view_on_site to control whether or not to display the \u201cView on site\u201d link. This link should bring you to a URL where you can display the saved object. This value can be either a boolean flag or a callable. If True (the default), the object\u2019s get_absolute_url() method will be used to generate the url. If your model has a get_absolute_url() method but you don\u2019t want the \u201cView on site\u201d button to appear, you only need to set view_on_site to False: from django.contrib import admin\n\nclass PersonAdmin(admin.ModelAdmin):\n    view_on_site = False\n In case it is a callable, it accepts the model instance as a parameter. For example: from django.contrib import admin\nfrom django.urls import reverse\n\nclass PersonAdmin(admin.ModelAdmin):\n    def view_on_site(self, obj):\n        url = reverse('person-detail', kwargs={'slug': obj.slug})\n        return 'https://example.com' + url\n \n"}, {"name": "admin.models.LogEntry", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry", "type": "django.contrib.admin", "text": " \nclass models.LogEntry  \nThe LogEntry class tracks additions, changes, and deletions of objects done through the admin interface. \n"}, {"name": "admin.models.LogEntry.action_flag", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.action_flag", "type": "django.contrib.admin", "text": " \nLogEntry.action_flag  \nThe type of action logged: ADDITION, CHANGE, DELETION. For example, to get a list of all additions done through the admin: from django.contrib.admin.models import ADDITION, LogEntry\n\nLogEntry.objects.filter(action_flag=ADDITION)\n \n"}, {"name": "admin.models.LogEntry.action_time", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.action_time", "type": "django.contrib.admin", "text": " \nLogEntry.action_time  \nThe date and time of the action. \n"}, {"name": "admin.models.LogEntry.change_message", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.change_message", "type": "django.contrib.admin", "text": " \nLogEntry.change_message  \nThe detailed description of the modification. In the case of an edit, for example, the message contains a list of the edited fields. The Django admin site formats this content as a JSON structure, so that get_change_message() can recompose a message translated in the current user language. Custom code might set this as a plain string though. You are advised to use the get_change_message() method to retrieve this value instead of accessing it directly. \n"}, {"name": "admin.models.LogEntry.content_type", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.content_type", "type": "django.contrib.admin", "text": " \nLogEntry.content_type  \nThe ContentType of the modified object. \n"}, {"name": "admin.models.LogEntry.get_change_message()", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.get_change_message", "type": "django.contrib.admin", "text": " \nLogEntry.get_change_message()  \nFormats and translates change_message into the current user language. Messages created before Django 1.10 will always be displayed in the language in which they were logged. \n"}, {"name": "admin.models.LogEntry.get_edited_object()", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.get_edited_object", "type": "django.contrib.admin", "text": " \nLogEntry.get_edited_object()  \nA shortcut that returns the referenced object. \n"}, {"name": "admin.models.LogEntry.object_id", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.object_id", "type": "django.contrib.admin", "text": " \nLogEntry.object_id  \nThe textual representation of the modified object\u2019s primary key. \n"}, {"name": "admin.models.LogEntry.object_repr", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.object_repr", "type": "django.contrib.admin", "text": " \nLogEntry.object_repr  \nThe object`s repr() after the modification. \n"}, {"name": "admin.models.LogEntry.user", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.user", "type": "django.contrib.admin", "text": " \nLogEntry.user  \nThe user (an AUTH_USER_MODEL instance) who performed the action. \n"}, {"name": "admin.register()", "path": "ref/contrib/admin/index#django.contrib.admin.register", "type": "django.contrib.admin", "text": " \nregister(*models, site=django.contrib.admin.sites.site)  \nThere is also a decorator for registering your ModelAdmin classes: from django.contrib import admin\nfrom .models import Author\n\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\n It\u2019s given one or more model classes to register with the ModelAdmin. If you\u2019re using a custom AdminSite, pass it using the site keyword argument: from django.contrib import admin\nfrom .models import Author, Editor, Reader\nfrom myproject.admin_site import custom_admin_site\n\n@admin.register(Author, Reader, Editor, site=custom_admin_site)\nclass PersonAdmin(admin.ModelAdmin):\n    pass\n You can\u2019t use this decorator if you have to reference your model admin class in its __init__() method, e.g. super(PersonAdmin, self).__init__(*args, **kwargs). You can use super().__init__(*args, **kwargs). \n"}, {"name": "admin.StackedInline", "path": "ref/contrib/admin/index#django.contrib.admin.StackedInline", "type": "django.contrib.admin", "text": " \nclass StackedInline  \nThe admin interface has the ability to edit models on the same page as a parent model. These are called inlines. Suppose you have these two models: from django.db import models\n\nclass Author(models.Model):\n   name = models.CharField(max_length=100)\n\nclass Book(models.Model):\n   author = models.ForeignKey(Author, on_delete=models.CASCADE)\n   title = models.CharField(max_length=100)\n You can edit the books authored by an author on the author page. You add inlines to a model by specifying them in a ModelAdmin.inlines: from django.contrib import admin\n\nclass BookInline(admin.TabularInline):\n    model = Book\n\nclass AuthorAdmin(admin.ModelAdmin):\n    inlines = [\n        BookInline,\n    ]\n Django provides two subclasses of InlineModelAdmin and they are:  TabularInline StackedInline  The difference between these two is merely the template used to render them. \n"}, {"name": "admin.TabularInline", "path": "ref/contrib/admin/index#django.contrib.admin.TabularInline", "type": "django.contrib.admin", "text": " \nclass TabularInline \n"}, {"name": "admin.views.decorators.staff_member_required()", "path": "ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required", "type": "django.contrib.admin", "text": " \nstaff_member_required(redirect_field_name='next', login_url='admin:login')  \nThis decorator is used on the admin views that require authorization. A view decorated with this function will have the following behavior:  If the user is logged in, is a staff member (User.is_staff=True), and is active (User.is_active=True), execute the view normally. Otherwise, the request will be redirected to the URL specified by the login_url parameter, with the originally requested path in a query string variable specified by redirect_field_name. For example: /admin/login/?next=/admin/polls/question/3/.  Example usage: from django.contrib.admin.views.decorators import staff_member_required\n\n@staff_member_required\ndef my_view(request):\n    ...\n \n"}, {"name": "Advanced testing topics", "path": "topics/testing/advanced", "type": "Guides", "text": "Advanced testing topics The request factory  \nclass RequestFactory \n The RequestFactory shares the same API as the test client. However, instead of behaving like a browser, the RequestFactory provides a way to generate a request instance that can be used as the first argument to any view. This means you can test a view function the same way as you would test any other function \u2013 as a black box, with exactly known inputs, testing for specific outputs. The API for the RequestFactory is a slightly restricted subset of the test client API:  It only has access to the HTTP methods get(), post(), put(), delete(), head(), options(), and trace(). These methods accept all the same arguments except for follow. Since this is just a factory for producing requests, it\u2019s up to you to handle the response. It does not support middleware. Session and authentication attributes must be supplied by the test itself if required for the view to function properly.  Example The following is a unit test using the request factory: from django.contrib.auth.models import AnonymousUser, User\nfrom django.test import RequestFactory, TestCase\n\nfrom .views import MyView, my_view\n\nclass SimpleTest(TestCase):\n    def setUp(self):\n        # Every test needs access to the request factory.\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(\n            username='jacob', email='jacob@\u2026', password='top_secret')\n\n    def test_details(self):\n        # Create an instance of a GET request.\n        request = self.factory.get('/customer/details')\n\n        # Recall that middleware are not supported. You can simulate a\n        # logged-in user by setting request.user manually.\n        request.user = self.user\n\n        # Or you can simulate an anonymous user by setting request.user to\n        # an AnonymousUser instance.\n        request.user = AnonymousUser()\n\n        # Test my_view() as if it were deployed at /customer/details\n        response = my_view(request)\n        # Use this syntax for class-based views.\n        response = MyView.as_view()(request)\n        self.assertEqual(response.status_code, 200)\n AsyncRequestFactory RequestFactory creates WSGI-like requests. If you want to create ASGI-like requests, including having a correct ASGI scope, you can instead use django.test.AsyncRequestFactory. This class is directly API-compatible with RequestFactory, with the only difference being that it returns ASGIRequest instances rather than WSGIRequest instances. All of its methods are still synchronous callables. Testing class-based views In order to test class-based views outside of the request/response cycle you must ensure that they are configured correctly, by calling setup() after instantiation. For example, assuming the following class-based view:  views.py from django.views.generic import TemplateView\n\n\nclass HomeView(TemplateView):\n    template_name = 'myapp/home.html'\n\n    def get_context_data(self, **kwargs):\n        kwargs['environment'] = 'Production'\n        return super().get_context_data(**kwargs)\n  You may directly test the get_context_data() method by first instantiating the view, then passing a request to setup(), before proceeding with your test\u2019s code:  tests.py from django.test import RequestFactory, TestCase\nfrom .views import HomeView\n\n\nclass HomePageTest(TestCase):\n    def test_environment_set_in_context(self):\n        request = RequestFactory().get('/')\n        view = HomeView()\n        view.setup(request)\n\n        context = view.get_context_data()\n        self.assertIn('environment', context)\n  Tests and multiple host names The ALLOWED_HOSTS setting is validated when running tests. This allows the test client to differentiate between internal and external URLs. Projects that support multitenancy or otherwise alter business logic based on the request\u2019s host and use custom host names in tests must include those hosts in ALLOWED_HOSTS. The first option to do so is to add the hosts to your settings file. For example, the test suite for docs.djangoproject.com includes the following: from django.test import TestCase\n\nclass SearchFormTestCase(TestCase):\n    def test_empty_get(self):\n        response = self.client.get('/en/dev/search/', HTTP_HOST='docs.djangoproject.dev:8000')\n        self.assertEqual(response.status_code, 200)\n and the settings file includes a list of the domains supported by the project: ALLOWED_HOSTS = [\n    'www.djangoproject.dev',\n    'docs.djangoproject.dev',\n    ...\n]\n Another option is to add the required hosts to ALLOWED_HOSTS using override_settings() or modify_settings(). This option may be preferable in standalone apps that can\u2019t package their own settings file or for projects where the list of domains is not static (e.g., subdomains for multitenancy). For example, you could write a test for the domain http://otherserver/ as follows: from django.test import TestCase, override_settings\n\nclass MultiDomainTestCase(TestCase):\n    @override_settings(ALLOWED_HOSTS=['otherserver'])\n    def test_other_domain(self):\n        response = self.client.get('http://otherserver/foo/bar/')\n Disabling ALLOWED_HOSTS checking (ALLOWED_HOSTS = ['*']) when running tests prevents the test client from raising a helpful error message if you follow a redirect to an external URL. Tests and multiple databases Testing primary/replica configurations If you\u2019re testing a multiple database configuration with primary/replica (referred to as master/slave by some databases) replication, this strategy of creating test databases poses a problem. When the test databases are created, there won\u2019t be any replication, and as a result, data created on the primary won\u2019t be seen on the replica. To compensate for this, Django allows you to define that a database is a test mirror. Consider the following (simplified) example database configuration: DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'myproject',\n        'HOST': 'dbprimary',\n         # ... plus some other settings\n    },\n    'replica': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'myproject',\n        'HOST': 'dbreplica',\n        'TEST': {\n            'MIRROR': 'default',\n        },\n        # ... plus some other settings\n    }\n}\n In this setup, we have two database servers: dbprimary, described by the database alias default, and dbreplica described by the alias replica. As you might expect, dbreplica has been configured by the database administrator as a read replica of dbprimary, so in normal activity, any write to default will appear on replica. If Django created two independent test databases, this would break any tests that expected replication to occur. However, the replica database has been configured as a test mirror (using the MIRROR test setting), indicating that under testing, replica should be treated as a mirror of default. When the test environment is configured, a test version of replica will not be created. Instead the connection to replica will be redirected to point at default. As a result, writes to default will appear on replica \u2013 but because they are actually the same database, not because there is data replication between the two databases. Controlling creation order for test databases By default, Django will assume all databases depend on the default database and therefore always create the default database first. However, no guarantees are made on the creation order of any other databases in your test setup. If your database configuration requires a specific creation order, you can specify the dependencies that exist using the DEPENDENCIES test setting. Consider the following (simplified) example database configuration: DATABASES = {\n    'default': {\n        # ... db settings\n        'TEST': {\n            'DEPENDENCIES': ['diamonds'],\n        },\n    },\n    'diamonds': {\n        # ... db settings\n        'TEST': {\n            'DEPENDENCIES': [],\n        },\n    },\n    'clubs': {\n        # ... db settings\n        'TEST': {\n            'DEPENDENCIES': ['diamonds'],\n        },\n    },\n    'spades': {\n        # ... db settings\n        'TEST': {\n            'DEPENDENCIES': ['diamonds', 'hearts'],\n        },\n    },\n    'hearts': {\n        # ... db settings\n        'TEST': {\n            'DEPENDENCIES': ['diamonds', 'clubs'],\n        },\n    }\n}\n Under this configuration, the diamonds database will be created first, as it is the only database alias without dependencies. The default and clubs alias will be created next (although the order of creation of this pair is not guaranteed), then hearts, and finally spades. If there are any circular dependencies in the DEPENDENCIES definition, an ImproperlyConfigured exception will be raised. Advanced features of TransactionTestCase\n  \nTransactionTestCase.available_apps  \n Warning This attribute is a private API. It may be changed or removed without a deprecation period in the future, for instance to accommodate changes in application loading. It\u2019s used to optimize Django\u2019s own test suite, which contains hundreds of models but no relations between models in different applications.  By default, available_apps is set to None. After each test, Django calls flush to reset the database state. This empties all tables and emits the post_migrate signal, which recreates one content type and four permissions for each model. This operation gets expensive proportionally to the number of models. Setting available_apps to a list of applications instructs Django to behave as if only the models from these applications were available. The behavior of TransactionTestCase changes as follows:  \npost_migrate is fired before each test to create the content types and permissions for each model in available apps, in case they\u2019re missing. After each test, Django empties only tables corresponding to models in available apps. However, at the database level, truncation may cascade to related models in unavailable apps. Furthermore post_migrate isn\u2019t fired; it will be fired by the next TransactionTestCase, after the correct set of applications is selected.  Since the database isn\u2019t fully flushed, if a test creates instances of models not included in available_apps, they will leak and they may cause unrelated tests to fail. Be careful with tests that use sessions; the default session engine stores them in the database. Since post_migrate isn\u2019t emitted after flushing the database, its state after a TransactionTestCase isn\u2019t the same as after a TestCase: it\u2019s missing the rows created by listeners to post_migrate. Considering the order in which tests are executed, this isn\u2019t an issue, provided either all TransactionTestCase in a given test suite declare available_apps, or none of them. available_apps is mandatory in Django\u2019s own test suite. \n  \nTransactionTestCase.reset_sequences  \nSetting reset_sequences = True on a TransactionTestCase will make sure sequences are always reset before the test run: class TestsThatDependsOnPrimaryKeySequences(TransactionTestCase):\n    reset_sequences = True\n\n    def test_animal_pk(self):\n        lion = Animal.objects.create(name=\"lion\", sound=\"roar\")\n        # lion.pk is guaranteed to always be 1\n        self.assertEqual(lion.pk, 1)\n Unless you are explicitly testing primary keys sequence numbers, it is recommended that you do not hard code primary key values in tests. Using reset_sequences = True will slow down the test, since the primary key reset is a relatively expensive database operation. \n Enforce running test classes sequentially If you have test classes that cannot be run in parallel (e.g. because they share a common resource), you can use django.test.testcases.SerializeMixin to run them sequentially. This mixin uses a filesystem lockfile. For example, you can use __file__ to determine that all test classes in the same file that inherit from SerializeMixin will run sequentially: import os\n\nfrom django.test import TestCase\nfrom django.test.testcases import SerializeMixin\n\nclass ImageTestCaseMixin(SerializeMixin):\n    lockfile = __file__\n\n    def setUp(self):\n        self.filename = os.path.join(temp_storage_dir, 'my_file.png')\n        self.file = create_file(self.filename)\n\nclass RemoveImageTests(ImageTestCaseMixin, TestCase):\n    def test_remove_image(self):\n        os.remove(self.filename)\n        self.assertFalse(os.path.exists(self.filename))\n\nclass ResizeImageTests(ImageTestCaseMixin, TestCase):\n    def test_resize_image(self):\n        resize_image(self.file, (48, 48))\n        self.assertEqual(get_image_size(self.file), (48, 48))\n Using the Django test runner to test reusable applications If you are writing a reusable application you may want to use the Django test runner to run your own test suite and thus benefit from the Django testing infrastructure. A common practice is a tests directory next to the application code, with the following structure: runtests.py\npolls/\n    __init__.py\n    models.py\n    ...\ntests/\n    __init__.py\n    models.py\n    test_settings.py\n    tests.py\n Let\u2019s take a look inside a couple of those files:  runtests.py #!/usr/bin/env python\nimport os\nimport sys\n\nimport django\nfrom django.conf import settings\nfrom django.test.utils import get_runner\n\nif __name__ == \"__main__\":\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_settings'\n    django.setup()\n    TestRunner = get_runner(settings)\n    test_runner = TestRunner()\n    failures = test_runner.run_tests([\"tests\"])\n    sys.exit(bool(failures))\n  This is the script that you invoke to run the test suite. It sets up the Django environment, creates the test database and runs the tests. For the sake of clarity, this example contains only the bare minimum necessary to use the Django test runner. You may want to add command-line options for controlling verbosity, passing in specific test labels to run, etc.  tests/test_settings.py SECRET_KEY = 'fake-key'\nINSTALLED_APPS = [\n    \"tests\",\n]\n  This file contains the Django settings required to run your app\u2019s tests. Again, this is a minimal example; your tests may require additional settings to run. Since the tests package is included in INSTALLED_APPS when running your tests, you can define test-only models in its models.py file. Using different testing frameworks Clearly, unittest is not the only Python testing framework. While Django doesn\u2019t provide explicit support for alternative frameworks, it does provide a way to invoke tests constructed for an alternative framework as if they were normal Django tests. When you run ./manage.py test, Django looks at the TEST_RUNNER setting to determine what to do. By default, TEST_RUNNER points to 'django.test.runner.DiscoverRunner'. This class defines the default Django testing behavior. This behavior involves:  Performing global pre-test setup. Looking for tests in any file below the current directory whose name matches the pattern test*.py. Creating the test databases. Running migrate to install models and initial data into the test databases. Running the system checks. Running the tests that were found. Destroying the test databases. Performing global post-test teardown.  If you define your own test runner class and point TEST_RUNNER at that class, Django will execute your test runner whenever you run ./manage.py test. In this way, it is possible to use any test framework that can be executed from Python code, or to modify the Django test execution process to satisfy whatever testing requirements you may have. Defining a test runner A test runner is a class defining a run_tests() method. Django ships with a DiscoverRunner class that defines the default Django testing behavior. This class defines the run_tests() entry point, plus a selection of other methods that are used by run_tests() to set up, execute and tear down the test suite.  \nclass DiscoverRunner(pattern='test*.py', top_level=None, verbosity=1, interactive=True, failfast=False, keepdb=False, reverse=False, debug_mode=False, debug_sql=False, parallel=0, tags=None, exclude_tags=None, test_name_patterns=None, pdb=False, buffer=False, enable_faulthandler=True, timing=True, shuffle=False, logger=None, **kwargs)  \nDiscoverRunner will search for tests in any file matching pattern. top_level can be used to specify the directory containing your top-level Python modules. Usually Django can figure this out automatically, so it\u2019s not necessary to specify this option. If specified, it should generally be the directory containing your manage.py file. verbosity determines the amount of notification and debug information that will be printed to the console; 0 is no output, 1 is normal output, and 2 is verbose output. If interactive is True, the test suite has permission to ask the user for instructions when the test suite is executed. An example of this behavior would be asking for permission to delete an existing test database. If interactive is False, the test suite must be able to run without any manual intervention. If failfast is True, the test suite will stop running after the first test failure is detected. If keepdb is True, the test suite will use the existing database, or create one if necessary. If False, a new database will be created, prompting the user to remove the existing one, if present. If reverse is True, test cases will be executed in the opposite order. This could be useful to debug tests that aren\u2019t properly isolated and have side effects. Grouping by test class is preserved when using this option. This option can be used in conjunction with --shuffle to reverse the order for a particular random seed. debug_mode specifies what the DEBUG setting should be set to prior to running tests. parallel specifies the number of processes. If parallel is greater than 1, the test suite will run in parallel processes. If there are fewer test cases than configured processes, Django will reduce the number of processes accordingly. Each process gets its own database. This option requires the third-party tblib package to display tracebacks correctly. tags can be used to specify a set of tags for filtering tests. May be combined with exclude_tags. exclude_tags can be used to specify a set of tags for excluding tests. May be combined with tags. If debug_sql is True, failing test cases will output SQL queries logged to the django.db.backends logger as well as the traceback. If verbosity is 2, then queries in all tests are output. test_name_patterns can be used to specify a set of patterns for filtering test methods and classes by their names. If pdb is True, a debugger (pdb or ipdb) will be spawned at each test error or failure. If buffer is True, outputs from passing tests will be discarded. If enable_faulthandler is True, faulthandler will be enabled. If timing is True, test timings, including database setup and total run time, will be shown. If shuffle is an integer, test cases will be shuffled in a random order prior to execution, using the integer as a random seed. If shuffle is None, the seed will be generated randomly. In both cases, the seed will be logged and set to self.shuffle_seed prior to running tests. This option can be used to help detect tests that aren\u2019t properly isolated. Grouping by test class is preserved when using this option. logger can be used to pass a Python Logger object. If provided, the logger will be used to log messages instead of printing to the console. The logger object will respect its logging level rather than the verbosity. Django may, from time to time, extend the capabilities of the test runner by adding new arguments. The **kwargs declaration allows for this expansion. If you subclass DiscoverRunner or write your own test runner, ensure it accepts **kwargs. Your test runner may also define additional command-line options. Create or override an add_arguments(cls, parser) class method and add custom arguments by calling parser.add_argument() inside the method, so that the test command will be able to use those arguments.  New in Django 3.2: The enable_faulthandler and timing arguments were added.   New in Django 4.0: The logger and shuffle arguments were added.  \n Attributes  \nDiscoverRunner.test_suite  \nThe class used to build the test suite. By default it is set to unittest.TestSuite. This can be overridden if you wish to implement different logic for collecting tests. \n  \nDiscoverRunner.test_runner  \nThis is the class of the low-level test runner which is used to execute the individual tests and format the results. By default it is set to unittest.TextTestRunner. Despite the unfortunate similarity in naming conventions, this is not the same type of class as DiscoverRunner, which covers a broader set of responsibilities. You can override this attribute to modify the way tests are run and reported. \n  \nDiscoverRunner.test_loader  \nThis is the class that loads tests, whether from TestCases or modules or otherwise and bundles them into test suites for the runner to execute. By default it is set to unittest.defaultTestLoader. You can override this attribute if your tests are going to be loaded in unusual ways. \n Methods  \nDiscoverRunner.run_tests(test_labels, **kwargs)  \nRun the test suite. test_labels allows you to specify which tests to run and supports several formats (see DiscoverRunner.build_suite() for a list of supported formats).  Deprecated since version 4.0: extra_tests is a list of extra TestCase instances to add to the suite that is executed by the test runner. These extra tests are run in addition to those discovered in the modules listed in test_labels.  This method should return the number of tests that failed. \n  \nclassmethod DiscoverRunner.add_arguments(parser)  \nOverride this class method to add custom arguments accepted by the test management command. See argparse.ArgumentParser.add_argument() for details about adding arguments to a parser. \n  \nDiscoverRunner.setup_test_environment(**kwargs)  \nSets up the test environment by calling setup_test_environment() and setting DEBUG to self.debug_mode (defaults to False). \n  \nDiscoverRunner.build_suite(test_labels=None, **kwargs)  \nConstructs a test suite that matches the test labels provided. test_labels is a list of strings describing the tests to be run. A test label can take one of four forms:  \npath.to.test_module.TestCase.test_method \u2013 Run a single test method in a test case. \npath.to.test_module.TestCase \u2013 Run all the test methods in a test case. \npath.to.module \u2013 Search for and run all tests in the named Python package or module. \npath/to/directory \u2013 Search for and run all tests below the named directory.  If test_labels has a value of None, the test runner will search for tests in all files below the current directory whose names match its pattern (see above).  Deprecated since version 4.0: extra_tests is a list of extra TestCase instances to add to the suite that is executed by the test runner. These extra tests are run in addition to those discovered in the modules listed in test_labels.  Returns a TestSuite instance ready to be run. \n  \nDiscoverRunner.setup_databases(**kwargs)  \nCreates the test databases by calling setup_databases(). \n  \nDiscoverRunner.run_checks(databases)  \nRuns the system checks on the test databases. \n  \nDiscoverRunner.run_suite(suite, **kwargs)  \nRuns the test suite. Returns the result produced by the running the test suite. \n  \nDiscoverRunner.get_test_runner_kwargs()  \nReturns the keyword arguments to instantiate the DiscoverRunner.test_runner with. \n  \nDiscoverRunner.teardown_databases(old_config, **kwargs)  \nDestroys the test databases, restoring pre-test conditions by calling teardown_databases(). \n  \nDiscoverRunner.teardown_test_environment(**kwargs)  \nRestores the pre-test environment. \n  \nDiscoverRunner.suite_result(suite, result, **kwargs)  \nComputes and returns a return code based on a test suite, and the result from that test suite. \n  \nDiscoverRunner.log(msg, level=None)  \n New in Django 4.0.  If a logger is set, logs the message at the given integer logging level (e.g. logging.DEBUG, logging.INFO, or logging.WARNING). Otherwise, the message is printed to the console, respecting the current verbosity. For example, no message will be printed if the verbosity is 0, INFO and above will be printed if the verbosity is at least 1, and DEBUG will be printed if it is at least 2. The level defaults to logging.INFO. \n Testing utilities django.test.utils To assist in the creation of your own test runner, Django provides a number of utility methods in the django.test.utils module.  \nsetup_test_environment(debug=None)  \nPerforms global pre-test setup, such as installing instrumentation for the template rendering system and setting up the dummy email outbox. If debug isn\u2019t None, the DEBUG setting is updated to its value. \n  \nteardown_test_environment()  \nPerforms global post-test teardown, such as removing instrumentation from the template system and restoring normal email services. \n  \nsetup_databases(verbosity, interactive, *, time_keeper=None, keepdb=False, debug_sql=False, parallel=0, aliases=None, serialized_aliases=None, **kwargs)  \nCreates the test databases. Returns a data structure that provides enough detail to undo the changes that have been made. This data will be provided to the teardown_databases() function at the conclusion of testing. The aliases argument determines which DATABASES aliases test databases should be set up for. If it\u2019s not provided, it defaults to all of DATABASES aliases. The serialized_aliases argument determines what subset of aliases test databases should have their state serialized to allow usage of the serialized_rollback feature. If it\u2019s not provided, it defaults to aliases.  Changed in Django 3.2: The time_keeper kwarg was added, and all kwargs were made keyword-only.   Changed in Django 4.0: The serialized_aliases kwarg was added.  \n  \nteardown_databases(old_config, parallel=0, keepdb=False)  \nDestroys the test databases, restoring pre-test conditions. old_config is a data structure defining the changes in the database configuration that need to be reversed. It\u2019s the return value of the setup_databases() method. \n django.db.connection.creation The creation module of the database backend also provides some utilities that can be useful during testing.  \ncreate_test_db(verbosity=1, autoclobber=False, serialize=True, keepdb=False)  \nCreates a new test database and runs migrate against it. verbosity has the same behavior as in run_tests(). autoclobber describes the behavior that will occur if a database with the same name as the test database is discovered:  If autoclobber is False, the user will be asked to approve destroying the existing database. sys.exit is called if the user does not approve. If autoclobber is True, the database will be destroyed without consulting the user.  serialize determines if Django serializes the database into an in-memory JSON string before running tests (used to restore the database state between tests if you don\u2019t have transactions). You can set this to False to speed up creation time if you don\u2019t have any test classes with serialized_rollback=True. If you are using the default test runner, you can control this with the the SERIALIZE entry in the TEST dictionary. keepdb determines if the test run should use an existing database, or create a new one. If True, the existing database will be used, or created if not present. If False, a new database will be created, prompting the user to remove the existing one, if present. Returns the name of the test database that it created. create_test_db() has the side effect of modifying the value of NAME in DATABASES to match the name of the test database. \n  \ndestroy_test_db(old_database_name, verbosity=1, keepdb=False)  \nDestroys the database whose name is the value of NAME in DATABASES, and sets NAME to the value of old_database_name. The verbosity argument has the same behavior as for DiscoverRunner. If the keepdb argument is True, then the connection to the database will be closed, but the database will not be destroyed. \n Integration with coverage.py\n Code coverage describes how much source code has been tested. It shows which parts of your code are being exercised by tests and which are not. It\u2019s an important part of testing applications, so it\u2019s strongly recommended to check the coverage of your tests. Django can be easily integrated with coverage.py, a tool for measuring code coverage of Python programs. First, install coverage.py. Next, run the following from your project folder containing manage.py: coverage run --source='.' manage.py test myapp\n This runs your tests and collects coverage data of the executed files in your project. You can see a report of this data by typing following command: coverage report\n Note that some Django code was executed while running tests, but it is not listed here because of the source flag passed to the previous command. For more options like annotated HTML listings detailing missed lines, see the coverage.py docs.\n"}, {"name": "Advanced tutorial: How to write reusable apps", "path": "intro/reusable-apps", "type": "Guides: Intro", "text": "Advanced tutorial: How to write reusable apps This advanced tutorial begins where Tutorial 7 left off. We\u2019ll be turning our web-poll into a standalone Python package you can reuse in new projects and share with other people. If you haven\u2019t recently completed Tutorials 1\u20137, we encourage you to review these so that your example project matches the one described below. Reusability matters It\u2019s a lot of work to design, build, test and maintain a web application. Many Python and Django projects share common problems. Wouldn\u2019t it be great if we could save some of this repeated work? Reusability is the way of life in Python. The Python Package Index (PyPI) has a vast range of packages you can use in your own Python programs. Check out Django Packages for existing reusable apps you could incorporate in your project. Django itself is also a normal Python package. This means that you can take existing Python packages or Django apps and compose them into your own web project. You only need to write the parts that make your project unique. Let\u2019s say you were starting a new project that needed a polls app like the one we\u2019ve been working on. How do you make this app reusable? Luckily, you\u2019re well on the way already. In Tutorial 1, we saw how we could decouple polls from the project-level URLconf using an include. In this tutorial, we\u2019ll take further steps to make the app easy to use in new projects and ready to publish for others to install and use.  Package? App? A Python package provides a way of grouping related Python code for easy reuse. A package contains one or more files of Python code (also known as \u201cmodules\u201d). A package can be imported with import foo.bar or from foo import\nbar. For a directory (like polls) to form a package, it must contain a special file __init__.py, even if this file is empty. A Django application is a Python package that is specifically intended for use in a Django project. An application may use common Django conventions, such as having models, tests, urls, and views submodules. Later on we use the term packaging to describe the process of making a Python package easy for others to install. It can be a little confusing, we know.  Your project and your reusable app After the previous tutorials, our project should look like this: mysite/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py\n    polls/\n        __init__.py\n        admin.py\n        apps.py\n        migrations/\n            __init__.py\n            0001_initial.py\n        models.py\n        static/\n            polls/\n                images/\n                    background.gif\n                style.css\n        templates/\n            polls/\n                detail.html\n                index.html\n                results.html\n        tests.py\n        urls.py\n        views.py\n    templates/\n        admin/\n            base_site.html\n You created mysite/templates in Tutorial 7, and polls/templates in Tutorial 3. Now perhaps it is clearer why we chose to have separate template directories for the project and application: everything that is part of the polls application is in polls. It makes the application self-contained and easier to drop into a new project. The polls directory could now be copied into a new Django project and immediately reused. It\u2019s not quite ready to be published though. For that, we need to package the app to make it easy for others to install. Installing some prerequisites The current state of Python packaging is a bit muddled with various tools. For this tutorial, we\u2019re going to use setuptools to build our package. It\u2019s the recommended packaging tool (merged with the distribute fork). We\u2019ll also be using pip to install and uninstall it. You should install these two packages now. If you need help, you can refer to how to install Django with pip. You can install setuptools the same way. Packaging your app Python packaging refers to preparing your app in a specific format that can be easily installed and used. Django itself is packaged very much like this. For a small app like polls, this process isn\u2019t too difficult.  \nFirst, create a parent directory for polls, outside of your Django project. Call this directory django-polls.  Choosing a name for your app When choosing a name for your package, check resources like PyPI to avoid naming conflicts with existing packages. It\u2019s often useful to prepend django- to your module name when creating a package to distribute. This helps others looking for Django apps identify your app as Django specific. Application labels (that is, the final part of the dotted path to application packages) must be unique in INSTALLED_APPS. Avoid using the same label as any of the Django contrib packages, for example auth, admin, or messages.   Move the polls directory into the django-polls directory.  \nCreate a file django-polls/README.rst with the following contents:  django-polls/README.rst =====\nPolls\n=====\n\nPolls is a Django app to conduct web-based polls. For each question,\nvisitors can choose between a fixed number of answers.\n\nDetailed documentation is in the \"docs\" directory.\n\nQuick start\n-----------\n\n1. Add \"polls\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'polls',\n    ]\n\n2. Include the polls URLconf in your project urls.py like this::\n\n    path('polls/', include('polls.urls')),\n\n3. Run ``python manage.py migrate`` to create the polls models.\n\n4. Start the development server and visit http://127.0.0.1:8000/admin/\n   to create a poll (you'll need the Admin app enabled).\n\n5. Visit http://127.0.0.1:8000/polls/ to participate in the poll.\n   Create a django-polls/LICENSE file. Choosing a license is beyond the scope of this tutorial, but suffice it to say that code released publicly without a license is useless. Django and many Django-compatible apps are distributed under the BSD license; however, you\u2019re free to pick your own license. Just be aware that your licensing choice will affect who is able to use your code.  \nNext we\u2019ll create pyproject.toml, setup.cfg, and setup.py files which detail how to build and install the app. A full explanation of these files is beyond the scope of this tutorial, but the setuptools documentation has a good explanation. Create the django-polls/pyproject.toml, django-polls/setup.cfg, and django-polls/setup.py files with the following contents:  django-polls/pyproject.toml [build-system]\nrequires = ['setuptools>=40.8.0', 'wheel']\nbuild-backend = 'setuptools.build_meta:__legacy__'\n   django-polls/setup.cfg [metadata]\nname = django-polls\nversion = 0.1\ndescription = A Django app to conduct web-based polls.\nlong_description = file: README.rst\nurl = https://www.example.com/\nauthor = Your Name\nauthor_email = yourname@example.com\nlicense = BSD-3-Clause  # Example license\nclassifiers =\n    Environment :: Web Environment\n    Framework :: Django\n    Framework :: Django :: X.Y  # Replace \"X.Y\" as appropriate\n    Intended Audience :: Developers\n    License :: OSI Approved :: BSD License\n    Operating System :: OS Independent\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Topic :: Internet :: WWW/HTTP\n    Topic :: Internet :: WWW/HTTP :: Dynamic Content\n\n[options]\ninclude_package_data = true\npackages = find:\npython_requires = >=3.8\ninstall_requires =\n    Django >= X.Y  # Replace \"X.Y\" as appropriate\n   django-polls/setup.py from setuptools import setup\n\nsetup()\n   \nOnly Python modules and packages are included in the package by default. To include additional files, we\u2019ll need to create a MANIFEST.in file. The setuptools docs referred to in the previous step discuss this file in more detail. To include the templates, the README.rst and our LICENSE file, create a file django-polls/MANIFEST.in with the following contents:  django-polls/MANIFEST.in include LICENSE\ninclude README.rst\nrecursive-include polls/static *\nrecursive-include polls/templates *\n   \nIt\u2019s optional, but recommended, to include detailed documentation with your app. Create an empty directory django-polls/docs for future documentation. Add an additional line to django-polls/MANIFEST.in: recursive-include docs *\n Note that the docs directory won\u2019t be included in your package unless you add some files to it. Many Django apps also provide their documentation online through sites like readthedocs.org.  Try building your package with python setup.py sdist (run from inside django-polls). This creates a directory called dist and builds your new package, django-polls-0.1.tar.gz.   For more information on packaging, see Python\u2019s Tutorial on Packaging and Distributing Projects. Using your own package Since we moved the polls directory out of the project, it\u2019s no longer working. We\u2019ll now fix this by installing our new django-polls package.  Installing as a user library The following steps install django-polls as a user library. Per-user installs have a lot of advantages over installing the package system-wide, such as being usable on systems where you don\u2019t have administrator access as well as preventing the package from affecting system services and other users of the machine. Note that per-user installations can still affect the behavior of system tools that run as that user, so using a virtual environment is a more robust solution (see below).   \nTo install the package, use pip (you already installed it, right?): python -m pip install --user django-polls/dist/django-polls-0.1.tar.gz\n  With luck, your Django project should now work correctly again. Run the server again to confirm this.  \nTo uninstall the package, use pip: python -m pip uninstall django-polls\n   Publishing your app Now that we\u2019ve packaged and tested django-polls, it\u2019s ready to share with the world! If this wasn\u2019t just an example, you could now:  Email the package to a friend. Upload the package on your website. Post the package on a public repository, such as the Python Package Index (PyPI). packaging.python.org has a good tutorial for doing this.  Installing Python packages with a virtual environment Earlier, we installed the polls app as a user library. This has some disadvantages:  Modifying the user libraries can affect other Python software on your system. You won\u2019t be able to run multiple versions of this package (or others with the same name).  Typically, these situations only arise once you\u2019re maintaining several Django projects. When they do, the best solution is to use venv. This tool allows you to maintain multiple isolated Python environments, each with its own copy of the libraries and package namespace.\n"}, {"name": "Aggregation", "path": "topics/db/aggregation", "type": "Guides", "text": "Aggregation The topic guide on Django\u2019s database-abstraction API described the way that you can use Django queries that create, retrieve, update and delete individual objects. However, sometimes you will need to retrieve values that are derived by summarizing or aggregating a collection of objects. This topic guide describes the ways that aggregate values can be generated and returned using Django queries. Throughout this guide, we\u2019ll refer to the following models. These models are used to track the inventory for a series of online bookstores: from django.db import models\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\nclass Publisher(models.Model):\n    name = models.CharField(max_length=300)\n\nclass Book(models.Model):\n    name = models.CharField(max_length=300)\n    pages = models.IntegerField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    rating = models.FloatField()\n    authors = models.ManyToManyField(Author)\n    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)\n    pubdate = models.DateField()\n\nclass Store(models.Model):\n    name = models.CharField(max_length=300)\n    books = models.ManyToManyField(Book)\n Cheat sheet In a hurry? Here\u2019s how to do common aggregate queries, assuming the models above: # Total number of books.\n>>> Book.objects.count()\n2452\n\n# Total number of books with publisher=BaloneyPress\n>>> Book.objects.filter(publisher__name='BaloneyPress').count()\n73\n\n# Average price across all books.\n>>> from django.db.models import Avg\n>>> Book.objects.all().aggregate(Avg('price'))\n{'price__avg': 34.35}\n\n# Max price across all books.\n>>> from django.db.models import Max\n>>> Book.objects.all().aggregate(Max('price'))\n{'price__max': Decimal('81.20')}\n\n# Difference between the highest priced book and the average price of all books.\n>>> from django.db.models import FloatField\n>>> Book.objects.aggregate(\n...     price_diff=Max('price', output_field=FloatField()) - Avg('price'))\n{'price_diff': 46.85}\n\n# All the following queries involve traversing the Book<->Publisher\n# foreign key relationship backwards.\n\n# Each publisher, each with a count of books as a \"num_books\" attribute.\n>>> from django.db.models import Count\n>>> pubs = Publisher.objects.annotate(num_books=Count('book'))\n>>> pubs\n<QuerySet [<Publisher: BaloneyPress>, <Publisher: SalamiPress>, ...]>\n>>> pubs[0].num_books\n73\n\n# Each publisher, with a separate count of books with a rating above and below 5\n>>> from django.db.models import Q\n>>> above_5 = Count('book', filter=Q(book__rating__gt=5))\n>>> below_5 = Count('book', filter=Q(book__rating__lte=5))\n>>> pubs = Publisher.objects.annotate(below_5=below_5).annotate(above_5=above_5)\n>>> pubs[0].above_5\n23\n>>> pubs[0].below_5\n12\n\n# The top 5 publishers, in order by number of books.\n>>> pubs = Publisher.objects.annotate(num_books=Count('book')).order_by('-num_books')[:5]\n>>> pubs[0].num_books\n1323\n Generating aggregates over a QuerySet\n Django provides two ways to generate aggregates. The first way is to generate summary values over an entire QuerySet. For example, say you wanted to calculate the average price of all books available for sale. Django\u2019s query syntax provides a means for describing the set of all books: >>> Book.objects.all()\n What we need is a way to calculate summary values over the objects that belong to this QuerySet. This is done by appending an aggregate() clause onto the QuerySet: >>> from django.db.models import Avg\n>>> Book.objects.all().aggregate(Avg('price'))\n{'price__avg': 34.35}\n The all() is redundant in this example, so this could be simplified to: >>> Book.objects.aggregate(Avg('price'))\n{'price__avg': 34.35}\n The argument to the aggregate() clause describes the aggregate value that we want to compute - in this case, the average of the price field on the Book model. A list of the aggregate functions that are available can be found in the QuerySet reference. aggregate() is a terminal clause for a QuerySet that, when invoked, returns a dictionary of name-value pairs. The name is an identifier for the aggregate value; the value is the computed aggregate. The name is automatically generated from the name of the field and the aggregate function. If you want to manually specify a name for the aggregate value, you can do so by providing that name when you specify the aggregate clause: >>> Book.objects.aggregate(average_price=Avg('price'))\n{'average_price': 34.35}\n If you want to generate more than one aggregate, you add another argument to the aggregate() clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query: >>> from django.db.models import Avg, Max, Min\n>>> Book.objects.aggregate(Avg('price'), Max('price'), Min('price'))\n{'price__avg': 34.35, 'price__max': Decimal('81.20'), 'price__min': Decimal('12.99')}\n Generating aggregates for each item in a QuerySet\n The second way to generate summary values is to generate an independent summary for each object in a QuerySet. For example, if you are retrieving a list of books, you may want to know how many authors contributed to each book. Each Book has a many-to-many relationship with the Author; we want to summarize this relationship for each book in the QuerySet. Per-object summaries can be generated using the annotate() clause. When an annotate() clause is specified, each object in the QuerySet will be annotated with the specified values. The syntax for these annotations is identical to that used for the aggregate() clause. Each argument to annotate() describes an aggregate that is to be calculated. For example, to annotate books with the number of authors: # Build an annotated queryset\n>>> from django.db.models import Count\n>>> q = Book.objects.annotate(Count('authors'))\n# Interrogate the first object in the queryset\n>>> q[0]\n<Book: The Definitive Guide to Django>\n>>> q[0].authors__count\n2\n# Interrogate the second object in the queryset\n>>> q[1]\n<Book: Practical Django Projects>\n>>> q[1].authors__count\n1\n As with aggregate(), the name for the annotation is automatically derived from the name of the aggregate function and the name of the field being aggregated. You can override this default name by providing an alias when you specify the annotation: >>> q = Book.objects.annotate(num_authors=Count('authors'))\n>>> q[0].num_authors\n2\n>>> q[1].num_authors\n1\n Unlike aggregate(), annotate() is not a terminal clause. The output of the annotate() clause is a QuerySet; this QuerySet can be modified using any other QuerySet operation, including filter(), order_by(), or even additional calls to annotate(). Combining multiple aggregations Combining multiple aggregations with annotate() will yield the wrong results because joins are used instead of subqueries: >>> book = Book.objects.first()\n>>> book.authors.count()\n2\n>>> book.store_set.count()\n3\n>>> q = Book.objects.annotate(Count('authors'), Count('store'))\n>>> q[0].authors__count\n6\n>>> q[0].store__count\n6\n For most aggregates, there is no way to avoid this problem, however, the Count aggregate has a distinct parameter that may help: >>> q = Book.objects.annotate(Count('authors', distinct=True), Count('store', distinct=True))\n>>> q[0].authors__count\n2\n>>> q[0].store__count\n3\n  If in doubt, inspect the SQL query! In order to understand what happens in your query, consider inspecting the query property of your QuerySet.  Joins and aggregates So far, we have dealt with aggregates over fields that belong to the model being queried. However, sometimes the value you want to aggregate will belong to a model that is related to the model you are querying. When specifying the field to be aggregated in an aggregate function, Django will allow you to use the same double underscore notation that is used when referring to related fields in filters. Django will then handle any table joins that are required to retrieve and aggregate the related value. For example, to find the price range of books offered in each store, you could use the annotation: >>> from django.db.models import Max, Min\n>>> Store.objects.annotate(min_price=Min('books__price'), max_price=Max('books__price'))\n This tells Django to retrieve the Store model, join (through the many-to-many relationship) with the Book model, and aggregate on the price field of the book model to produce a minimum and maximum value. The same rules apply to the aggregate() clause. If you wanted to know the lowest and highest price of any book that is available for sale in any of the stores, you could use the aggregate: >>> Store.objects.aggregate(min_price=Min('books__price'), max_price=Max('books__price'))\n Join chains can be as deep as you require. For example, to extract the age of the youngest author of any book available for sale, you could issue the query: >>> Store.objects.aggregate(youngest_age=Min('books__authors__age'))\n Following relationships backwards In a way similar to Lookups that span relationships, aggregations and annotations on fields of models or models that are related to the one you are querying can include traversing \u201creverse\u201d relationships. The lowercase name of related models and double-underscores are used here too. For example, we can ask for all publishers, annotated with their respective total book stock counters (note how we use 'book' to specify the Publisher -> Book reverse foreign key hop): >>> from django.db.models import Avg, Count, Min, Sum\n>>> Publisher.objects.annotate(Count('book'))\n (Every Publisher in the resulting QuerySet will have an extra attribute called book__count.) We can also ask for the oldest book of any of those managed by every publisher: >>> Publisher.objects.aggregate(oldest_pubdate=Min('book__pubdate'))\n (The resulting dictionary will have a key called 'oldest_pubdate'. If no such alias were specified, it would be the rather long 'book__pubdate__min'.) This doesn\u2019t apply just to foreign keys. It also works with many-to-many relations. For example, we can ask for every author, annotated with the total number of pages considering all the books the author has (co-)authored (note how we use 'book' to specify the Author -> Book reverse many-to-many hop): >>> Author.objects.annotate(total_pages=Sum('book__pages'))\n (Every Author in the resulting QuerySet will have an extra attribute called total_pages. If no such alias were specified, it would be the rather long book__pages__sum.) Or ask for the average rating of all the books written by author(s) we have on file: >>> Author.objects.aggregate(average_rating=Avg('book__rating'))\n (The resulting dictionary will have a key called 'average_rating'. If no such alias were specified, it would be the rather long 'book__rating__avg'.) Aggregations and other QuerySet clauses \nfilter() and exclude()\n Aggregates can also participate in filters. Any filter() (or exclude()) applied to normal model fields will have the effect of constraining the objects that are considered for aggregation. When used with an annotate() clause, a filter has the effect of constraining the objects for which an annotation is calculated. For example, you can generate an annotated list of all books that have a title starting with \u201cDjango\u201d using the query: >>> from django.db.models import Avg, Count\n>>> Book.objects.filter(name__startswith=\"Django\").annotate(num_authors=Count('authors'))\n When used with an aggregate() clause, a filter has the effect of constraining the objects over which the aggregate is calculated. For example, you can generate the average price of all books with a title that starts with \u201cDjango\u201d using the query: >>> Book.objects.filter(name__startswith=\"Django\").aggregate(Avg('price'))\n Filtering on annotations Annotated values can also be filtered. The alias for the annotation can be used in filter() and exclude() clauses in the same way as any other model field. For example, to generate a list of books that have more than one author, you can issue the query: >>> Book.objects.annotate(num_authors=Count('authors')).filter(num_authors__gt=1)\n This query generates an annotated result set, and then generates a filter based upon that annotation. If you need two annotations with two separate filters you can use the filter argument with any aggregate. For example, to generate a list of authors with a count of highly rated books: >>> highly_rated = Count('book', filter=Q(book__rating__gte=7))\n>>> Author.objects.annotate(num_books=Count('book'), highly_rated_books=highly_rated)\n Each Author in the result set will have the num_books and highly_rated_books attributes. See also Conditional aggregation.  Choosing between filter and QuerySet.filter() Avoid using the filter argument with a single annotation or aggregation. It\u2019s more efficient to use QuerySet.filter() to exclude rows. The aggregation filter argument is only useful when using two or more aggregations over the same relations with different conditionals.  Order of annotate() and filter() clauses When developing a complex query that involves both annotate() and filter() clauses, pay particular attention to the order in which the clauses are applied to the QuerySet. When an annotate() clause is applied to a query, the annotation is computed over the state of the query up to the point where the annotation is requested. The practical implication of this is that filter() and annotate() are not commutative operations. Given:  Publisher A has two books with ratings 4 and 5. Publisher B has two books with ratings 1 and 4. Publisher C has one book with rating 1.  Here\u2019s an example with the Count aggregate: >>> a, b = Publisher.objects.annotate(num_books=Count('book', distinct=True)).filter(book__rating__gt=3.0)\n>>> a, a.num_books\n(<Publisher: A>, 2)\n>>> b, b.num_books\n(<Publisher: B>, 2)\n\n>>> a, b = Publisher.objects.filter(book__rating__gt=3.0).annotate(num_books=Count('book'))\n>>> a, a.num_books\n(<Publisher: A>, 2)\n>>> b, b.num_books\n(<Publisher: B>, 1)\n Both queries return a list of publishers that have at least one book with a rating exceeding 3.0, hence publisher C is excluded. In the first query, the annotation precedes the filter, so the filter has no effect on the annotation. distinct=True is required to avoid a query bug. The second query counts the number of books that have a rating exceeding 3.0 for each publisher. The filter precedes the annotation, so the filter constrains the objects considered when calculating the annotation. Here\u2019s another example with the Avg aggregate: >>> a, b = Publisher.objects.annotate(avg_rating=Avg('book__rating')).filter(book__rating__gt=3.0)\n>>> a, a.avg_rating\n(<Publisher: A>, 4.5)  # (5+4)/2\n>>> b, b.avg_rating\n(<Publisher: B>, 2.5)  # (1+4)/2\n\n>>> a, b = Publisher.objects.filter(book__rating__gt=3.0).annotate(avg_rating=Avg('book__rating'))\n>>> a, a.avg_rating\n(<Publisher: A>, 4.5)  # (5+4)/2\n>>> b, b.avg_rating\n(<Publisher: B>, 4.0)  # 4/1 (book with rating 1 excluded)\n The first query asks for the average rating of all a publisher\u2019s books for publisher\u2019s that have at least one book with a rating exceeding 3.0. The second query asks for the average of a publisher\u2019s book\u2019s ratings for only those ratings exceeding 3.0. It\u2019s difficult to intuit how the ORM will translate complex querysets into SQL queries so when in doubt, inspect the SQL with str(queryset.query) and write plenty of tests. order_by() Annotations can be used as a basis for ordering. When you define an order_by() clause, the aggregates you provide can reference any alias defined as part of an annotate() clause in the query. For example, to order a QuerySet of books by the number of authors that have contributed to the book, you could use the following query: >>> Book.objects.annotate(num_authors=Count('authors')).order_by('num_authors')\n values() Ordinarily, annotations are generated on a per-object basis - an annotated QuerySet will return one result for each object in the original QuerySet. However, when a values() clause is used to constrain the columns that are returned in the result set, the method for evaluating annotations is slightly different. Instead of returning an annotated result for each result in the original QuerySet, the original results are grouped according to the unique combinations of the fields specified in the values() clause. An annotation is then provided for each unique group; the annotation is computed over all members of the group. For example, consider an author query that attempts to find out the average rating of books written by each author: >>> Author.objects.annotate(average_rating=Avg('book__rating'))\n This will return one result for each author in the database, annotated with their average book rating. However, the result will be slightly different if you use a values() clause: >>> Author.objects.values('name').annotate(average_rating=Avg('book__rating'))\n In this example, the authors will be grouped by name, so you will only get an annotated result for each unique author name. This means if you have two authors with the same name, their results will be merged into a single result in the output of the query; the average will be computed as the average over the books written by both authors. Order of annotate() and values() clauses As with the filter() clause, the order in which annotate() and values() clauses are applied to a query is significant. If the values() clause precedes the annotate(), the annotation will be computed using the grouping described by the values() clause. However, if the annotate() clause precedes the values() clause, the annotations will be generated over the entire query set. In this case, the values() clause only constrains the fields that are generated on output. For example, if we reverse the order of the values() and annotate() clause from our previous example: >>> Author.objects.annotate(average_rating=Avg('book__rating')).values('name', 'average_rating')\n This will now yield one unique result for each author; however, only the author\u2019s name and the average_rating annotation will be returned in the output data. You should also note that average_rating has been explicitly included in the list of values to be returned. This is required because of the ordering of the values() and annotate() clause. If the values() clause precedes the annotate() clause, any annotations will be automatically added to the result set. However, if the values() clause is applied after the annotate() clause, you need to explicitly include the aggregate column. Interaction with order_by()\n Fields that are mentioned in the order_by() part of a queryset are used when selecting the output data, even if they are not otherwise specified in the values() call. These extra fields are used to group \u201clike\u201d results together and they can make otherwise identical result rows appear to be separate. This shows up, particularly, when counting things. By way of example, suppose you have a model like this: from django.db import models\n\nclass Item(models.Model):\n    name = models.CharField(max_length=10)\n    data = models.IntegerField()\n If you want to count how many times each distinct data value appears in an ordered queryset, you might try this: items = Item.objects.order_by('name')\n# Warning: not quite correct!\nitems.values('data').annotate(Count('id'))\n \u2026which will group the Item objects by their common data values and then count the number of id values in each group. Except that it won\u2019t quite work. The ordering by name will also play a part in the grouping, so this query will group by distinct (data, name) pairs, which isn\u2019t what you want. Instead, you should construct this queryset: items.values('data').annotate(Count('id')).order_by()\n \u2026clearing any ordering in the query. You could also order by, say, data without any harmful effects, since that is already playing a role in the query. This behavior is the same as that noted in the queryset documentation for distinct() and the general rule is the same: normally you won\u2019t want extra columns playing a part in the result, so clear out the ordering, or at least make sure it\u2019s restricted only to those fields you also select in a values() call.  Note You might reasonably ask why Django doesn\u2019t remove the extraneous columns for you. The main reason is consistency with distinct() and other places: Django never removes ordering constraints that you have specified (and we can\u2019t change those other methods\u2019 behavior, as that would violate our API stability policy).  Aggregating annotations You can also generate an aggregate on the result of an annotation. When you define an aggregate() clause, the aggregates you provide can reference any alias defined as part of an annotate() clause in the query. For example, if you wanted to calculate the average number of authors per book you first annotate the set of books with the author count, then aggregate that author count, referencing the annotation field: >>> from django.db.models import Avg, Count\n>>> Book.objects.annotate(num_authors=Count('authors')).aggregate(Avg('num_authors'))\n{'num_authors__avg': 1.66}\n\n"}, {"name": "API Reference", "path": "ref/index", "type": "API", "text": "API Reference  Applications System check framework Built-in class-based views API Clickjacking Protection contrib packages Cross Site Request Forgery protection Databases django-admin and manage.py Running management commands from your code Django Exceptions File handling Forms Logging Middleware Migration Operations Models Paginator Request and response objects SchemaEditor Settings Signals Templates TemplateResponse and SimpleTemplateResponse Unicode data django.urls utility functions django.urls functions for use in URLconfs django.conf.urls functions for use in URLconfs Django Utils Validators Built-in Views \n"}, {"name": "Applications", "path": "ref/applications", "type": "API", "text": "Applications Django contains a registry of installed applications that stores configuration and provides introspection. It also maintains a list of available models. This registry is called apps and it\u2019s available in django.apps: >>> from django.apps import apps\n>>> apps.get_app_config('admin').verbose_name\n'Administration'\n Projects and applications The term project describes a Django web application. The project Python package is defined primarily by a settings module, but it usually contains other things. For example, when you run django-admin startproject mysite you\u2019ll get a mysite project directory that contains a mysite Python package with settings.py, urls.py, asgi.py and wsgi.py. The project package is often extended to include things like fixtures, CSS, and templates which aren\u2019t tied to a particular application. A project\u2019s root directory (the one that contains manage.py) is usually the container for all of a project\u2019s applications which aren\u2019t installed separately. The term application describes a Python package that provides some set of features. Applications may be reused in various projects. Applications include some combination of models, views, templates, template tags, static files, URLs, middleware, etc. They\u2019re generally wired into projects with the INSTALLED_APPS setting and optionally with other mechanisms such as URLconfs, the MIDDLEWARE setting, or template inheritance. It is important to understand that a Django application is a set of code that interacts with various parts of the framework. There\u2019s no such thing as an Application object. However, there\u2019s a few places where Django needs to interact with installed applications, mainly for configuration and also for introspection. That\u2019s why the application registry maintains metadata in an AppConfig instance for each installed application. There\u2019s no restriction that a project package can\u2019t also be considered an application and have models, etc. (which would require adding it to INSTALLED_APPS). Configuring applications To configure an application, create an apps.py module inside the application, then define a subclass of AppConfig there. When INSTALLED_APPS contains the dotted path to an application module, by default, if Django finds exactly one AppConfig subclass in the apps.py submodule, it uses that configuration for the application. This behavior may be disabled by setting AppConfig.default to False. If the apps.py module contains more than one AppConfig subclass, Django will look for a single one where AppConfig.default is True. If no AppConfig subclass is found, the base AppConfig class will be used. Alternatively, INSTALLED_APPS may contain the dotted path to a configuration class to specify it explicitly: INSTALLED_APPS = [\n    ...\n    'polls.apps.PollsAppConfig',\n    ...\n]\n For application authors If you\u2019re creating a pluggable app called \u201cRock \u2019n\u2019 roll\u201d, here\u2019s how you would provide a proper name for the admin: # rock_n_roll/apps.py\n\nfrom django.apps import AppConfig\n\nclass RockNRollConfig(AppConfig):\n    name = 'rock_n_roll'\n    verbose_name = \"Rock \u2019n\u2019 roll\"\n RockNRollConfig will be loaded automatically when INSTALLED_APPS contains 'rock_n_roll'. If you need to prevent this, set default to False in the class definition. You can provide several AppConfig subclasses with different behaviors. To tell Django which one to use by default, set default to True in its definition. If your users want to pick a non-default configuration, they must replace 'rock_n_roll' with the dotted path to that specific class in their INSTALLED_APPS setting. The AppConfig.name attribute tells Django which application this configuration applies to. You can define any other attribute documented in the AppConfig API reference. AppConfig subclasses may be defined anywhere. The apps.py convention merely allows Django to load them automatically when INSTALLED_APPS contains the path to an application module rather than the path to a configuration class.  Note If your code imports the application registry in an application\u2019s __init__.py, the name apps will clash with the apps submodule. The best practice is to move that code to a submodule and import it. A workaround is to import the registry under a different name: from django.apps import apps as django_apps\n   Changed in Django 3.2: In previous versions, a default_app_config variable in the application module was used to identify the default application configuration class.  For application users If you\u2019re using \u201cRock \u2019n\u2019 roll\u201d in a project called anthology, but you want it to show up as \u201cJazz Manouche\u201d instead, you can provide your own configuration: # anthology/apps.py\n\nfrom rock_n_roll.apps import RockNRollConfig\n\nclass JazzManoucheConfig(RockNRollConfig):\n    verbose_name = \"Jazz Manouche\"\n\n# anthology/settings.py\n\nINSTALLED_APPS = [\n    'anthology.apps.JazzManoucheConfig',\n    # ...\n]\n This example shows project-specific configuration classes located in a submodule called apps.py. This is a convention, not a requirement. AppConfig subclasses may be defined anywhere. In this situation, INSTALLED_APPS must contain the dotted path to the configuration class because it lives outside of an application and thus cannot be automatically detected. Application configuration  \nclass AppConfig  \nApplication configuration objects store metadata for an application. Some attributes can be configured in AppConfig subclasses. Others are set by Django and read-only. \n Configurable attributes  \nAppConfig.name  \nFull Python path to the application, e.g. 'django.contrib.admin'. This attribute defines which application the configuration applies to. It must be set in all AppConfig subclasses. It must be unique across a Django project. \n  \nAppConfig.label  \nShort name for the application, e.g. 'admin' This attribute allows relabeling an application when two applications have conflicting labels. It defaults to the last component of name. It should be a valid Python identifier. It must be unique across a Django project. \n  \nAppConfig.verbose_name  \nHuman-readable name for the application, e.g. \u201cAdministration\u201d. This attribute defaults to label.title(). \n  \nAppConfig.path  \nFilesystem path to the application directory, e.g. '/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'. In most cases, Django can automatically detect and set this, but you can also provide an explicit override as a class attribute on your AppConfig subclass. In a few situations this is required; for instance if the app package is a namespace package with multiple paths. \n  \nAppConfig.default  \n New in Django 3.2.  Set this attribute to False to prevent Django from selecting a configuration class automatically. This is useful when apps.py defines only one AppConfig subclass but you don\u2019t want Django to use it by default. Set this attribute to True to tell Django to select a configuration class automatically. This is useful when apps.py defines more than one AppConfig subclass and you want Django to use one of them by default. By default, this attribute isn\u2019t set. \n  \nAppConfig.default_auto_field  \n New in Django 3.2.  The implicit primary key type to add to models within this app. You can use this to keep AutoField as the primary key type for third party applications. By default, this is the value of DEFAULT_AUTO_FIELD. \n Read-only attributes  \nAppConfig.module  \nRoot module for the application, e.g. <module 'django.contrib.admin' from\n'django/contrib/admin/__init__.py'>. \n  \nAppConfig.models_module  \nModule containing the models, e.g. <module 'django.contrib.admin.models'\nfrom 'django/contrib/admin/models.py'>. It may be None if the application doesn\u2019t contain a models module. Note that the database related signals such as pre_migrate and post_migrate are only emitted for applications that have a models module. \n Methods  \nAppConfig.get_models()  \nReturns an iterable of Model classes for this application. Requires the app registry to be fully populated. \n  \nAppConfig.get_model(model_name, require_ready=True)  \nReturns the Model with the given model_name. model_name is case-insensitive. Raises LookupError if no such model exists in this application. Requires the app registry to be fully populated unless the require_ready argument is set to False. require_ready behaves exactly as in apps.get_model(). \n  \nAppConfig.ready()  \nSubclasses can override this method to perform initialization tasks such as registering signals. It is called as soon as the registry is fully populated. Although you can\u2019t import models at the module-level where AppConfig classes are defined, you can import them in ready(), using either an import statement or get_model(). If you\u2019re registering model signals, you can refer to the sender by its string label instead of using the model class itself. Example: from django.apps import AppConfig\nfrom django.db.models.signals import pre_save\n\n\nclass RockNRollConfig(AppConfig):\n    # ...\n\n    def ready(self):\n        # importing model classes\n        from .models import MyModel  # or...\n        MyModel = self.get_model('MyModel')\n\n        # registering signals with the model's string label\n        pre_save.connect(receiver, sender='app_label.MyModel')\n  Warning Although you can access model classes as described above, avoid interacting with the database in your ready() implementation. This includes model methods that execute queries (save(), delete(), manager methods etc.), and also raw SQL queries via django.db.connection. Your ready() method will run during startup of every management command. For example, even though the test database configuration is separate from the production settings, manage.py test would still execute some queries against your production database!   Note In the usual initialization process, the ready method is only called once by Django. But in some corner cases, particularly in tests which are fiddling with installed applications, ready might be called more than once. In that case, either write idempotent methods, or put a flag on your AppConfig classes to prevent re-running code which should be executed exactly one time.  \n Namespace packages as apps Python packages without an __init__.py file are known as \u201cnamespace packages\u201d and may be spread across multiple directories at different locations on sys.path (see PEP 420). Django applications require a single base filesystem path where Django (depending on configuration) will search for templates, static assets, etc. Thus, namespace packages may only be Django applications if one of the following is true:  The namespace package actually has only a single location (i.e. is not spread across more than one directory.) The AppConfig class used to configure the application has a path class attribute, which is the absolute directory path Django will use as the single base path for the application.  If neither of these conditions is met, Django will raise ImproperlyConfigured. Application registry  \napps  \nThe application registry provides the following public API. Methods that aren\u2019t listed below are considered private and may change without notice. \n  \napps.ready  \nBoolean attribute that is set to True after the registry is fully populated and all AppConfig.ready() methods are called. \n  \napps.get_app_configs()  \nReturns an iterable of AppConfig instances. \n  \napps.get_app_config(app_label)  \nReturns an AppConfig for the application with the given app_label. Raises LookupError if no such application exists. \n  \napps.is_installed(app_name)  \nChecks whether an application with the given name exists in the registry. app_name is the full name of the app, e.g. 'django.contrib.admin'. \n  \napps.get_model(app_label, model_name, require_ready=True)  \nReturns the Model with the given app_label and model_name. As a shortcut, this method also accepts a single argument in the form app_label.model_name. model_name is case-insensitive. Raises LookupError if no such application or model exists. Raises ValueError when called with a single argument that doesn\u2019t contain exactly one dot. Requires the app registry to be fully populated unless the require_ready argument is set to False. Setting require_ready to False allows looking up models while the app registry is being populated, specifically during the second phase where it imports models. Then get_model() has the same effect as importing the model. The main use case is to configure model classes with settings, such as AUTH_USER_MODEL. When require_ready is False, get_model() returns a model class that may not be fully functional (reverse accessors may be missing, for example) until the app registry is fully populated. For this reason, it\u2019s best to leave require_ready to the default value of True whenever possible. \n Initialization process How applications are loaded When Django starts, django.setup() is responsible for populating the application registry.  \nsetup(set_prefix=True) [source]\n \nConfigures Django by:  Loading the settings. Setting up logging. If set_prefix is True, setting the URL resolver script prefix to FORCE_SCRIPT_NAME if defined, or / otherwise. Initializing the application registry.  This function is called automatically:  When running an HTTP server via Django\u2019s WSGI support. When invoking a management command.  It must be called explicitly in other cases, for instance in plain Python scripts. \n The application registry is initialized in three stages. At each stage, Django processes all applications in the order of INSTALLED_APPS.  \nFirst Django imports each item in INSTALLED_APPS. If it\u2019s an application configuration class, Django imports the root package of the application, defined by its name attribute. If it\u2019s a Python package, Django looks for an application configuration in an apps.py submodule, or else creates a default application configuration. At this stage, your code shouldn\u2019t import any models! In other words, your applications\u2019 root packages and the modules that define your application configuration classes shouldn\u2019t import any models, even indirectly. Strictly speaking, Django allows importing models once their application configuration is loaded. However, in order to avoid needless constraints on the order of INSTALLED_APPS, it\u2019s strongly recommended not import any models at this stage. Once this stage completes, APIs that operate on application configurations such as get_app_config() become usable.  \nThen Django attempts to import the models submodule of each application, if there is one. You must define or import all models in your application\u2019s models.py or models/__init__.py. Otherwise, the application registry may not be fully populated at this point, which could cause the ORM to malfunction. Once this stage completes, APIs that operate on models such as get_model() become usable.  Finally Django runs the ready() method of each application configuration.   Troubleshooting Here are some common problems that you may encounter during initialization:  \nAppRegistryNotReady: This happens when importing an application configuration or a models module triggers code that depends on the app registry. For example, gettext() uses the app registry to look up translation catalogs in applications. To translate at import time, you need gettext_lazy() instead. (Using gettext() would be a bug, because the translation would happen at import time, rather than at each request depending on the active language.) Executing database queries with the ORM at import time in models modules will also trigger this exception. The ORM cannot function properly until all models are available. This exception also happens if you forget to call django.setup() in a standalone Python script.  \nImportError: cannot import name ... This happens if the import sequence ends up in a loop. To eliminate such problems, you should minimize dependencies between your models modules and do as little work as possible at import time. To avoid executing code at import time, you can move it into a function and cache its results. The code will be executed when you first need its results. This concept is known as \u201clazy evaluation\u201d.  \ndjango.contrib.admin automatically performs autodiscovery of admin modules in installed applications. To prevent it, change your INSTALLED_APPS to contain 'django.contrib.admin.apps.SimpleAdminConfig' instead of 'django.contrib.admin'.  \n"}, {"name": "apps.AppConfig", "path": "ref/applications#django.apps.AppConfig", "type": "django.apps", "text": " \nclass AppConfig  \nApplication configuration objects store metadata for an application. Some attributes can be configured in AppConfig subclasses. Others are set by Django and read-only. \n"}, {"name": "apps.AppConfig.default", "path": "ref/applications#django.apps.AppConfig.default", "type": "django.apps", "text": " \nAppConfig.default  \n New in Django 3.2.  Set this attribute to False to prevent Django from selecting a configuration class automatically. This is useful when apps.py defines only one AppConfig subclass but you don\u2019t want Django to use it by default. Set this attribute to True to tell Django to select a configuration class automatically. This is useful when apps.py defines more than one AppConfig subclass and you want Django to use one of them by default. By default, this attribute isn\u2019t set. \n"}, {"name": "apps.AppConfig.default_auto_field", "path": "ref/applications#django.apps.AppConfig.default_auto_field", "type": "django.apps", "text": " \nAppConfig.default_auto_field  \n New in Django 3.2.  The implicit primary key type to add to models within this app. You can use this to keep AutoField as the primary key type for third party applications. By default, this is the value of DEFAULT_AUTO_FIELD. \n"}, {"name": "apps.AppConfig.get_model()", "path": "ref/applications#django.apps.AppConfig.get_model", "type": "django.apps", "text": " \nAppConfig.get_model(model_name, require_ready=True)  \nReturns the Model with the given model_name. model_name is case-insensitive. Raises LookupError if no such model exists in this application. Requires the app registry to be fully populated unless the require_ready argument is set to False. require_ready behaves exactly as in apps.get_model(). \n"}, {"name": "apps.AppConfig.get_models()", "path": "ref/applications#django.apps.AppConfig.get_models", "type": "django.apps", "text": " \nAppConfig.get_models()  \nReturns an iterable of Model classes for this application. Requires the app registry to be fully populated. \n"}, {"name": "apps.AppConfig.label", "path": "ref/applications#django.apps.AppConfig.label", "type": "django.apps", "text": " \nAppConfig.label  \nShort name for the application, e.g. 'admin' This attribute allows relabeling an application when two applications have conflicting labels. It defaults to the last component of name. It should be a valid Python identifier. It must be unique across a Django project. \n"}, {"name": "apps.AppConfig.models_module", "path": "ref/applications#django.apps.AppConfig.models_module", "type": "django.apps", "text": " \nAppConfig.models_module  \nModule containing the models, e.g. <module 'django.contrib.admin.models'\nfrom 'django/contrib/admin/models.py'>. It may be None if the application doesn\u2019t contain a models module. Note that the database related signals such as pre_migrate and post_migrate are only emitted for applications that have a models module. \n"}, {"name": "apps.AppConfig.module", "path": "ref/applications#django.apps.AppConfig.module", "type": "django.apps", "text": " \nAppConfig.module  \nRoot module for the application, e.g. <module 'django.contrib.admin' from\n'django/contrib/admin/__init__.py'>. \n"}, {"name": "apps.AppConfig.name", "path": "ref/applications#django.apps.AppConfig.name", "type": "django.apps", "text": " \nAppConfig.name  \nFull Python path to the application, e.g. 'django.contrib.admin'. This attribute defines which application the configuration applies to. It must be set in all AppConfig subclasses. It must be unique across a Django project. \n"}, {"name": "apps.AppConfig.path", "path": "ref/applications#django.apps.AppConfig.path", "type": "django.apps", "text": " \nAppConfig.path  \nFilesystem path to the application directory, e.g. '/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'. In most cases, Django can automatically detect and set this, but you can also provide an explicit override as a class attribute on your AppConfig subclass. In a few situations this is required; for instance if the app package is a namespace package with multiple paths. \n"}, {"name": "apps.AppConfig.ready()", "path": "ref/applications#django.apps.AppConfig.ready", "type": "django.apps", "text": " \nAppConfig.ready()  \nSubclasses can override this method to perform initialization tasks such as registering signals. It is called as soon as the registry is fully populated. Although you can\u2019t import models at the module-level where AppConfig classes are defined, you can import them in ready(), using either an import statement or get_model(). If you\u2019re registering model signals, you can refer to the sender by its string label instead of using the model class itself. Example: from django.apps import AppConfig\nfrom django.db.models.signals import pre_save\n\n\nclass RockNRollConfig(AppConfig):\n    # ...\n\n    def ready(self):\n        # importing model classes\n        from .models import MyModel  # or...\n        MyModel = self.get_model('MyModel')\n\n        # registering signals with the model's string label\n        pre_save.connect(receiver, sender='app_label.MyModel')\n  Warning Although you can access model classes as described above, avoid interacting with the database in your ready() implementation. This includes model methods that execute queries (save(), delete(), manager methods etc.), and also raw SQL queries via django.db.connection. Your ready() method will run during startup of every management command. For example, even though the test database configuration is separate from the production settings, manage.py test would still execute some queries against your production database!   Note In the usual initialization process, the ready method is only called once by Django. But in some corner cases, particularly in tests which are fiddling with installed applications, ready might be called more than once. In that case, either write idempotent methods, or put a flag on your AppConfig classes to prevent re-running code which should be executed exactly one time.  \n"}, {"name": "apps.AppConfig.verbose_name", "path": "ref/applications#django.apps.AppConfig.verbose_name", "type": "django.apps", "text": " \nAppConfig.verbose_name  \nHuman-readable name for the application, e.g. \u201cAdministration\u201d. This attribute defaults to label.title(). \n"}, {"name": "apps.apps", "path": "ref/applications#django.apps.apps", "type": "django.apps", "text": " \napps  \nThe application registry provides the following public API. Methods that aren\u2019t listed below are considered private and may change without notice. \n"}, {"name": "apps.apps.get_app_config()", "path": "ref/applications#django.apps.apps.get_app_config", "type": "django.apps", "text": " \napps.get_app_config(app_label)  \nReturns an AppConfig for the application with the given app_label. Raises LookupError if no such application exists. \n"}, {"name": "apps.apps.get_app_configs()", "path": "ref/applications#django.apps.apps.get_app_configs", "type": "django.apps", "text": " \napps.get_app_configs()  \nReturns an iterable of AppConfig instances. \n"}, {"name": "apps.apps.get_model()", "path": "ref/applications#django.apps.apps.get_model", "type": "django.apps", "text": " \napps.get_model(app_label, model_name, require_ready=True)  \nReturns the Model with the given app_label and model_name. As a shortcut, this method also accepts a single argument in the form app_label.model_name. model_name is case-insensitive. Raises LookupError if no such application or model exists. Raises ValueError when called with a single argument that doesn\u2019t contain exactly one dot. Requires the app registry to be fully populated unless the require_ready argument is set to False. Setting require_ready to False allows looking up models while the app registry is being populated, specifically during the second phase where it imports models. Then get_model() has the same effect as importing the model. The main use case is to configure model classes with settings, such as AUTH_USER_MODEL. When require_ready is False, get_model() returns a model class that may not be fully functional (reverse accessors may be missing, for example) until the app registry is fully populated. For this reason, it\u2019s best to leave require_ready to the default value of True whenever possible. \n"}, {"name": "apps.apps.is_installed()", "path": "ref/applications#django.apps.apps.is_installed", "type": "django.apps", "text": " \napps.is_installed(app_name)  \nChecks whether an application with the given name exists in the registry. app_name is the full name of the app, e.g. 'django.contrib.admin'. \n"}, {"name": "apps.apps.ready", "path": "ref/applications#django.apps.apps.ready", "type": "django.apps", "text": " \napps.ready  \nBoolean attribute that is set to True after the registry is fully populated and all AppConfig.ready() methods are called. \n"}, {"name": "Asynchronous support", "path": "topics/async", "type": "Guides", "text": "Asynchronous support Django has support for writing asynchronous (\u201casync\u201d) views, along with an entirely async-enabled request stack if you are running under ASGI. Async views will still work under WSGI, but with performance penalties, and without the ability to have efficient long-running requests. We\u2019re still working on async support for the ORM and other parts of Django. You can expect to see this in future releases. For now, you can use the sync_to_async() adapter to interact with the sync parts of Django. There is also a whole range of async-native Python libraries that you can integrate with. Async views Any view can be declared async by making the callable part of it return a coroutine - commonly, this is done using async def. For a function-based view, this means declaring the whole view using async def. For a class-based view, this means making its __call__() method an async def (not its __init__() or as_view()).  Note Django uses asyncio.iscoroutinefunction to test if your view is asynchronous or not. If you implement your own method of returning a coroutine, ensure you set the _is_coroutine attribute of the view to asyncio.coroutines._is_coroutine so this function returns True.  Under a WSGI server, async views will run in their own, one-off event loop. This means you can use async features, like concurrent async HTTP requests, without any issues, but you will not get the benefits of an async stack. The main benefits are the ability to service hundreds of connections without using Python threads. This allows you to use slow streaming, long-polling, and other exciting response types. If you want to use these, you will need to deploy Django using ASGI instead.  Warning You will only get the benefits of a fully-asynchronous request stack if you have no synchronous middleware loaded into your site. If there is a piece of synchronous middleware, then Django must use a thread per request to safely emulate a synchronous environment for it. Middleware can be built to support both sync and async contexts. Some of Django\u2019s middleware is built like this, but not all. To see what middleware Django has to adapt, you can turn on debug logging for the django.request logger and look for log messages about \u201cSynchronous middleware \u2026 adapted\u201d.  In both ASGI and WSGI mode, you can still safely use asynchronous support to run code concurrently rather than serially. This is especially handy when dealing with external APIs or data stores. If you want to call a part of Django that is still synchronous, like the ORM, you will need to wrap it in a sync_to_async() call. For example: from asgiref.sync import sync_to_async\n\nresults = await sync_to_async(Blog.objects.get, thread_sensitive=True)(pk=123)\n You may find it easier to move any ORM code into its own function and call that entire function using sync_to_async(). For example: from asgiref.sync import sync_to_async\n\ndef _get_blog(pk):\n    return Blog.objects.select_related('author').get(pk=pk)\n\nget_blog = sync_to_async(_get_blog, thread_sensitive=True)\n If you accidentally try to call a part of Django that is still synchronous-only from an async view, you will trigger Django\u2019s asynchronous safety protection to protect your data from corruption. Performance When running in a mode that does not match the view (e.g. an async view under WSGI, or a traditional sync view under ASGI), Django must emulate the other call style to allow your code to run. This context-switch causes a small performance penalty of around a millisecond. This is also true of middleware. Django will attempt to minimize the number of context-switches between sync and async. If you have an ASGI server, but all your middleware and views are synchronous, it will switch just once, before it enters the middleware stack. However, if you put synchronous middleware between an ASGI server and an asynchronous view, it will have to switch into sync mode for the middleware and then back to async mode for the view. Django will also hold the sync thread open for middleware exception propagation. This may not be noticeable at first, but adding this penalty of one thread per request can remove any async performance advantage. You should do your own performance testing to see what effect ASGI versus WSGI has on your code. In some cases, there may be a performance increase even for a purely synchronous codebase under ASGI because the request-handling code is still all running asynchronously. In general you will only want to enable ASGI mode if you have asynchronous code in your project. Async safety  \nDJANGO_ALLOW_ASYNC_UNSAFE \n Certain key parts of Django are not able to operate safely in an async environment, as they have global state that is not coroutine-aware. These parts of Django are classified as \u201casync-unsafe\u201d, and are protected from execution in an async environment. The ORM is the main example, but there are other parts that are also protected in this way. If you try to run any of these parts from a thread where there is a running event loop, you will get a SynchronousOnlyOperation error. Note that you don\u2019t have to be inside an async function directly to have this error occur. If you have called a sync function directly from an async function, without using sync_to_async() or similar, then it can also occur. This is because your code is still running in a thread with an active event loop, even though it may not be declared as async code. If you encounter this error, you should fix your code to not call the offending code from an async context. Instead, write your code that talks to async-unsafe functions in its own, sync function, and call that using asgiref.sync.sync_to_async() (or any other way of running sync code in its own thread). The async context can be imposed upon you by the environment in which you are running your Django code. For example, Jupyter notebooks and IPython interactive shells both transparently provide an active event loop so that it is easier to interact with asynchronous APIs. If you\u2019re using an IPython shell, you can disable this event loop by running: %autoawait off\n as a command at the IPython prompt. This will allow you to run synchronous code without generating SynchronousOnlyOperation errors; however, you also won\u2019t be able to await asynchronous APIs. To turn the event loop back on, run: %autoawait on\n If you\u2019re in an environment other than IPython (or you can\u2019t turn off autoawait in IPython for some reason), you are certain there is no chance of your code being run concurrently, and you absolutely need to run your sync code from an async context, then you can disable the warning by setting the DJANGO_ALLOW_ASYNC_UNSAFE environment variable to any value.  Warning If you enable this option and there is concurrent access to the async-unsafe parts of Django, you may suffer data loss or corruption. Be very careful and do not use this in production environments.  If you need to do this from within Python, do that with os.environ: import os\n\nos.environ[\"DJANGO_ALLOW_ASYNC_UNSAFE\"] = \"true\"\n Async adapter functions It is necessary to adapt the calling style when calling sync code from an async context, or vice-versa. For this there are two adapter functions, from the asgiref.sync module: async_to_sync() and sync_to_async(). They are used to transition between the calling styles while preserving compatibility. These adapter functions are widely used in Django. The asgiref package itself is part of the Django project, and it is automatically installed as a dependency when you install Django with pip. async_to_sync()  \nasync_to_sync(async_function, force_new_loop=False) \n Takes an async function and returns a sync function that wraps it. Can be used as either a direct wrapper or a decorator: from asgiref.sync import async_to_sync\n\nasync def get_data(...):\n    ...\n\nsync_get_data = async_to_sync(get_data)\n\n@async_to_sync\nasync def get_other_data(...):\n    ...\n The async function is run in the event loop for the current thread, if one is present. If there is no current event loop, a new event loop is spun up specifically for the single async invocation and shut down again once it completes. In either situation, the async function will execute on a different thread to the calling code. Threadlocals and contextvars values are preserved across the boundary in both directions. async_to_sync() is essentially a more powerful version of the asyncio.run() function in Python\u2019s standard library. As well as ensuring threadlocals work, it also enables the thread_sensitive mode of sync_to_async() when that wrapper is used below it. sync_to_async()  \nsync_to_async(sync_function, thread_sensitive=True) \n Takes a sync function and returns an async function that wraps it. Can be used as either a direct wrapper or a decorator: from asgiref.sync import sync_to_async\n\nasync_function = sync_to_async(sync_function, thread_sensitive=False)\nasync_function = sync_to_async(sensitive_sync_function, thread_sensitive=True)\n\n@sync_to_async\ndef sync_function(...):\n    ...\n Threadlocals and contextvars values are preserved across the boundary in both directions. Sync functions tend to be written assuming they all run in the main thread, so sync_to_async() has two threading modes:  \nthread_sensitive=True (the default): the sync function will run in the same thread as all other thread_sensitive functions. This will be the main thread, if the main thread is synchronous and you are using the async_to_sync() wrapper. \nthread_sensitive=False: the sync function will run in a brand new thread which is then closed once the invocation completes.   Warning asgiref version 3.3.0 changed the default value of the thread_sensitive parameter to True. This is a safer default, and in many cases interacting with Django the correct value, but be sure to evaluate uses of sync_to_async() if updating asgiref from a prior version.  Thread-sensitive mode is quite special, and does a lot of work to run all functions in the same thread. Note, though, that it relies on usage of async_to_sync() above it in the stack to correctly run things on the main thread. If you use asyncio.run() or similar, it will fall back to running thread-sensitive functions in a single, shared thread, but this will not be the main thread. The reason this is needed in Django is that many libraries, specifically database adapters, require that they are accessed in the same thread that they were created in. Also a lot of existing Django code assumes it all runs in the same thread, e.g. middleware adding things to a request for later use in views. Rather than introduce potential compatibility issues with this code, we instead opted to add this mode so that all existing Django sync code runs in the same thread and thus is fully compatible with async mode. Note that sync code will always be in a different thread to any async code that is calling it, so you should avoid passing raw database handles or other thread-sensitive references around.\n"}, {"name": "auth.authenticate()", "path": "topics/auth/default#django.contrib.auth.authenticate", "type": "django.contrib.auth", "text": " \nauthenticate(request=None, **credentials)  \nUse authenticate() to verify a set of credentials. It takes credentials as keyword arguments, username and password for the default case, checks them against each authentication backend, and returns a User object if the credentials are valid for a backend. If the credentials aren\u2019t valid for any backend or if a backend raises PermissionDenied, it returns None. For example: from django.contrib.auth import authenticate\nuser = authenticate(username='john', password='secret')\nif user is not None:\n    # A backend authenticated the credentials\nelse:\n    # No backend authenticated the credentials\n request is an optional HttpRequest which is passed on the authenticate() method of the authentication backends.  Note This is a low level way to authenticate a set of credentials; for example, it\u2019s used by the RemoteUserMiddleware. Unless you are writing your own authentication system, you probably won\u2019t use this. Rather if you\u2019re looking for a way to login a user, use the LoginView.  \n"}, {"name": "auth.backends.AllowAllUsersModelBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.AllowAllUsersModelBackend", "type": "django.contrib.auth", "text": " \nclass AllowAllUsersModelBackend  \nSame as ModelBackend except that it doesn\u2019t reject inactive users because user_can_authenticate() always returns True. When using this backend, you\u2019ll likely want to customize the AuthenticationForm used by the LoginView by overriding the confirm_login_allowed() method as it rejects inactive users. \n"}, {"name": "auth.backends.AllowAllUsersRemoteUserBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.AllowAllUsersRemoteUserBackend", "type": "django.contrib.auth", "text": " \nclass AllowAllUsersRemoteUserBackend  \nSame as RemoteUserBackend except that it doesn\u2019t reject inactive users because user_can_authenticate always returns True. \n"}, {"name": "auth.backends.BaseBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend", "type": "django.contrib.auth", "text": " \nclass BaseBackend  \nA base class that provides default implementations for all required methods. By default, it will reject any user and provide no permissions.  \nget_user_permissions(user_obj, obj=None)  \nReturns an empty set. \n  \nget_group_permissions(user_obj, obj=None)  \nReturns an empty set. \n  \nget_all_permissions(user_obj, obj=None)  \nUses get_user_permissions() and get_group_permissions() to get the set of permission strings the user_obj has. \n  \nhas_perm(user_obj, perm, obj=None)  \nUses get_all_permissions() to check if user_obj has the permission string perm. \n \n"}, {"name": "auth.backends.BaseBackend.get_all_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.get_all_permissions", "type": "django.contrib.auth", "text": " \nget_all_permissions(user_obj, obj=None)  \nUses get_user_permissions() and get_group_permissions() to get the set of permission strings the user_obj has. \n"}, {"name": "auth.backends.BaseBackend.get_group_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.get_group_permissions", "type": "django.contrib.auth", "text": " \nget_group_permissions(user_obj, obj=None)  \nReturns an empty set. \n"}, {"name": "auth.backends.BaseBackend.get_user_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.get_user_permissions", "type": "django.contrib.auth", "text": " \nget_user_permissions(user_obj, obj=None)  \nReturns an empty set. \n"}, {"name": "auth.backends.BaseBackend.has_perm()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.has_perm", "type": "django.contrib.auth", "text": " \nhas_perm(user_obj, perm, obj=None)  \nUses get_all_permissions() to check if user_obj has the permission string perm. \n"}, {"name": "auth.backends.ModelBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend", "type": "django.contrib.auth", "text": " \nclass ModelBackend  \nThis is the default authentication backend used by Django. It authenticates using credentials consisting of a user identifier and password. For Django\u2019s default user model, the user identifier is the username, for custom user models it is the field specified by USERNAME_FIELD (see Customizing Users and authentication). It also handles the default permissions model as defined for User and PermissionsMixin. has_perm(), get_all_permissions(), get_user_permissions(), and get_group_permissions() allow an object to be passed as a parameter for object-specific permissions, but this backend does not implement them other than returning an empty set of permissions if obj is not None. with_perm() also allows an object to be passed as a parameter, but unlike others methods it returns an empty queryset if obj is not None.  \nauthenticate(request, username=None, password=None, **kwargs)  \nTries to authenticate username with password by calling User.check_password. If no username is provided, it tries to fetch a username from kwargs using the key CustomUser.USERNAME_FIELD. Returns an authenticated user or None. request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend). \n  \nget_user_permissions(user_obj, obj=None)  \nReturns the set of permission strings the user_obj has from their own user permissions. Returns an empty set if is_anonymous or is_active is False. \n  \nget_group_permissions(user_obj, obj=None)  \nReturns the set of permission strings the user_obj has from the permissions of the groups they belong. Returns an empty set if is_anonymous or is_active is False. \n  \nget_all_permissions(user_obj, obj=None)  \nReturns the set of permission strings the user_obj has, including both user permissions and group permissions. Returns an empty set if is_anonymous or is_active is False. \n  \nhas_perm(user_obj, perm, obj=None)  \nUses get_all_permissions() to check if user_obj has the permission string perm. Returns False if the user is not is_active. \n  \nhas_module_perms(user_obj, app_label)  \nReturns whether the user_obj has any permissions on the app app_label. \n  \nuser_can_authenticate()  \nReturns whether the user is allowed to authenticate. To match the behavior of AuthenticationForm which prohibits inactive users from logging in, this method returns False for users with is_active=False. Custom user models that don\u2019t have an is_active field are allowed. \n  \nwith_perm(perm, is_active=True, include_superusers=True, obj=None)  \nReturns all active users who have the permission perm either in the form of \"<app label>.<permission codename>\" or a Permission instance. Returns an empty queryset if no users who have the perm found. If is_active is True (default), returns only active users, or if False, returns only inactive users. Use None to return all users irrespective of active state. If include_superusers is True (default), the result will include superusers. \n \n"}, {"name": "auth.backends.ModelBackend.authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.authenticate", "type": "django.contrib.auth", "text": " \nauthenticate(request, username=None, password=None, **kwargs)  \nTries to authenticate username with password by calling User.check_password. If no username is provided, it tries to fetch a username from kwargs using the key CustomUser.USERNAME_FIELD. Returns an authenticated user or None. request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend). \n"}, {"name": "auth.backends.ModelBackend.get_all_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.get_all_permissions", "type": "django.contrib.auth", "text": " \nget_all_permissions(user_obj, obj=None)  \nReturns the set of permission strings the user_obj has, including both user permissions and group permissions. Returns an empty set if is_anonymous or is_active is False. \n"}, {"name": "auth.backends.ModelBackend.get_group_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.get_group_permissions", "type": "django.contrib.auth", "text": " \nget_group_permissions(user_obj, obj=None)  \nReturns the set of permission strings the user_obj has from the permissions of the groups they belong. Returns an empty set if is_anonymous or is_active is False. \n"}, {"name": "auth.backends.ModelBackend.get_user_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.get_user_permissions", "type": "django.contrib.auth", "text": " \nget_user_permissions(user_obj, obj=None)  \nReturns the set of permission strings the user_obj has from their own user permissions. Returns an empty set if is_anonymous or is_active is False. \n"}, {"name": "auth.backends.ModelBackend.has_module_perms()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.has_module_perms", "type": "django.contrib.auth", "text": " \nhas_module_perms(user_obj, app_label)  \nReturns whether the user_obj has any permissions on the app app_label. \n"}, {"name": "auth.backends.ModelBackend.has_perm()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.has_perm", "type": "django.contrib.auth", "text": " \nhas_perm(user_obj, perm, obj=None)  \nUses get_all_permissions() to check if user_obj has the permission string perm. Returns False if the user is not is_active. \n"}, {"name": "auth.backends.ModelBackend.user_can_authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.user_can_authenticate", "type": "django.contrib.auth", "text": " \nuser_can_authenticate()  \nReturns whether the user is allowed to authenticate. To match the behavior of AuthenticationForm which prohibits inactive users from logging in, this method returns False for users with is_active=False. Custom user models that don\u2019t have an is_active field are allowed. \n"}, {"name": "auth.backends.ModelBackend.with_perm()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.with_perm", "type": "django.contrib.auth", "text": " \nwith_perm(perm, is_active=True, include_superusers=True, obj=None)  \nReturns all active users who have the permission perm either in the form of \"<app label>.<permission codename>\" or a Permission instance. Returns an empty queryset if no users who have the perm found. If is_active is True (default), returns only active users, or if False, returns only inactive users. Use None to return all users irrespective of active state. If include_superusers is True (default), the result will include superusers. \n"}, {"name": "auth.backends.RemoteUserBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend", "type": "django.contrib.auth", "text": " \nclass RemoteUserBackend  \nUse this backend to take advantage of external-to-Django-handled authentication. It authenticates using usernames passed in request.META['REMOTE_USER']. See the Authenticating against REMOTE_USER documentation. If you need more control, you can create your own authentication backend that inherits from this class and override these attributes or methods:  \ncreate_unknown_user  \nTrue or False. Determines whether or not a user object is created if not already in the database Defaults to True. \n  \nauthenticate(request, remote_user)  \nThe username passed as remote_user is considered trusted. This method returns the user object with the given username, creating a new user object if create_unknown_user is True. Returns None if create_unknown_user is False and a User object with the given username is not found in the database. request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend). \n  \nclean_username(username)  \nPerforms any cleaning on the username (e.g. stripping LDAP DN information) prior to using it to get or create a user object. Returns the cleaned username. \n  \nconfigure_user(request, user)  \nConfigures a newly created user. This method is called immediately after a new user is created, and can be used to perform custom setup actions, such as setting the user\u2019s groups based on attributes in an LDAP directory. Returns the user object. request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend). \n  \nuser_can_authenticate()  \nReturns whether the user is allowed to authenticate. This method returns False for users with is_active=False. Custom user models that don\u2019t have an is_active field are allowed. \n \n"}, {"name": "auth.backends.RemoteUserBackend.authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.authenticate", "type": "django.contrib.auth", "text": " \nauthenticate(request, remote_user)  \nThe username passed as remote_user is considered trusted. This method returns the user object with the given username, creating a new user object if create_unknown_user is True. Returns None if create_unknown_user is False and a User object with the given username is not found in the database. request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend). \n"}, {"name": "auth.backends.RemoteUserBackend.clean_username()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.clean_username", "type": "django.contrib.auth", "text": " \nclean_username(username)  \nPerforms any cleaning on the username (e.g. stripping LDAP DN information) prior to using it to get or create a user object. Returns the cleaned username. \n"}, {"name": "auth.backends.RemoteUserBackend.configure_user()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.configure_user", "type": "django.contrib.auth", "text": " \nconfigure_user(request, user)  \nConfigures a newly created user. This method is called immediately after a new user is created, and can be used to perform custom setup actions, such as setting the user\u2019s groups based on attributes in an LDAP directory. Returns the user object. request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend). \n"}, {"name": "auth.backends.RemoteUserBackend.create_unknown_user", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user", "type": "django.contrib.auth", "text": " \ncreate_unknown_user  \nTrue or False. Determines whether or not a user object is created if not already in the database Defaults to True. \n"}, {"name": "auth.backends.RemoteUserBackend.user_can_authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.user_can_authenticate", "type": "django.contrib.auth", "text": " \nuser_can_authenticate()  \nReturns whether the user is allowed to authenticate. This method returns False for users with is_active=False. Custom user models that don\u2019t have an is_active field are allowed. \n"}, {"name": "auth.context_processors.auth()", "path": "ref/templates/api#django.contrib.auth.context_processors.auth", "type": "django.contrib.auth", "text": " \nauth() \n"}, {"name": "auth.decorators.login_required()", "path": "topics/auth/default#django.contrib.auth.decorators.login_required", "type": "django.contrib.auth", "text": " \nlogin_required(redirect_field_name='next', login_url=None)  \nAs a shortcut, you can use the convenient login_required() decorator: from django.contrib.auth.decorators import login_required\n\n@login_required\ndef my_view(request):\n    ...\n login_required() does the following:  If the user isn\u2019t logged in, redirect to settings.LOGIN_URL, passing the current absolute path in the query string. Example: /accounts/login/?next=/polls/3/. If the user is logged in, execute the view normally. The view code is free to assume the user is logged in.  By default, the path that the user should be redirected to upon successful authentication is stored in a query string parameter called \"next\". If you would prefer to use a different name for this parameter, login_required() takes an optional redirect_field_name parameter: from django.contrib.auth.decorators import login_required\n\n@login_required(redirect_field_name='my_redirect_field')\ndef my_view(request):\n    ...\n Note that if you provide a value to redirect_field_name, you will most likely need to customize your login template as well, since the template context variable which stores the redirect path will use the value of redirect_field_name as its key rather than \"next\" (the default). login_required() also takes an optional login_url parameter. Example: from django.contrib.auth.decorators import login_required\n\n@login_required(login_url='/accounts/login/')\ndef my_view(request):\n    ...\n Note that if you don\u2019t specify the login_url parameter, you\u2019ll need to ensure that the settings.LOGIN_URL and your login view are properly associated. For example, using the defaults, add the following lines to your URLconf: from django.contrib.auth import views as auth_views\n\npath('accounts/login/', auth_views.LoginView.as_view()),\n The settings.LOGIN_URL also accepts view function names and named URL patterns. This allows you to freely remap your login view within your URLconf without having to update the setting. \n"}, {"name": "auth.decorators.permission_required()", "path": "topics/auth/default#django.contrib.auth.decorators.permission_required", "type": "django.contrib.auth", "text": " \npermission_required(perm, login_url=None, raise_exception=False)  \nIt\u2019s a relatively common task to check whether a user has a particular permission. For that reason, Django provides a shortcut for that case: the permission_required() decorator.: from django.contrib.auth.decorators import permission_required\n\n@permission_required('polls.add_choice')\ndef my_view(request):\n    ...\n Just like the has_perm() method, permission names take the form \"<app label>.<permission codename>\" (i.e. polls.add_choice for a permission on a model in the polls application). The decorator may also take an iterable of permissions, in which case the user must have all of the permissions in order to access the view. Note that permission_required() also takes an optional login_url parameter: from django.contrib.auth.decorators import permission_required\n\n@permission_required('polls.add_choice', login_url='/loginpage/')\ndef my_view(request):\n    ...\n As in the login_required() decorator, login_url defaults to settings.LOGIN_URL. If the raise_exception parameter is given, the decorator will raise PermissionDenied, prompting the 403 (HTTP Forbidden) view instead of redirecting to the login page. If you want to use raise_exception but also give your users a chance to login first, you can add the login_required() decorator: from django.contrib.auth.decorators import login_required, permission_required\n\n@login_required\n@permission_required('polls.add_choice', raise_exception=True)\ndef my_view(request):\n    ...\n This also avoids a redirect loop when LoginView\u2019s redirect_authenticated_user=True and the logged-in user doesn\u2019t have all of the required permissions. \n"}, {"name": "auth.decorators.user_passes_test()", "path": "topics/auth/default#django.contrib.auth.decorators.user_passes_test", "type": "django.contrib.auth", "text": " \nuser_passes_test(test_func, login_url=None, redirect_field_name='next')  \nAs a shortcut, you can use the convenient user_passes_test decorator which performs a redirect when the callable returns False: from django.contrib.auth.decorators import user_passes_test\n\ndef email_check(user):\n    return user.email.endswith('@example.com')\n\n@user_passes_test(email_check)\ndef my_view(request):\n    ...\n user_passes_test() takes a required argument: a callable that takes a User object and returns True if the user is allowed to view the page. Note that user_passes_test() does not automatically check that the User is not anonymous. user_passes_test() takes two optional arguments:  \nlogin_url  Lets you specify the URL that users who don\u2019t pass the test will be redirected to. It may be a login page and defaults to settings.LOGIN_URL if you don\u2019t specify one. \nredirect_field_name  Same as for login_required(). Setting it to None removes it from the URL, which you may want to do if you are redirecting users that don\u2019t pass the test to a non-login page where there\u2019s no \u201cnext page\u201d.  For example: @user_passes_test(email_check, login_url='/login/')\ndef my_view(request):\n    ...\n \n"}, {"name": "auth.forms.AdminPasswordChangeForm", "path": "topics/auth/default#django.contrib.auth.forms.AdminPasswordChangeForm", "type": "django.contrib.auth", "text": " \nclass AdminPasswordChangeForm  \nA form used in the admin interface to change a user\u2019s password. Takes the user as the first positional argument. \n"}, {"name": "auth.forms.AuthenticationForm", "path": "topics/auth/default#django.contrib.auth.forms.AuthenticationForm", "type": "django.contrib.auth", "text": " \nclass AuthenticationForm  \nA form for logging a user in. Takes request as its first positional argument, which is stored on the form instance for use by sub-classes.  \nconfirm_login_allowed(user)  \nBy default, AuthenticationForm rejects users whose is_active flag is set to False. You may override this behavior with a custom policy to determine which users can log in. Do this with a custom form that subclasses AuthenticationForm and overrides the confirm_login_allowed() method. This method should raise a ValidationError if the given user may not log in. For example, to allow all users to log in regardless of \u201cactive\u201d status: from django.contrib.auth.forms import AuthenticationForm\n\nclass AuthenticationFormWithInactiveUsersOkay(AuthenticationForm):\n    def confirm_login_allowed(self, user):\n        pass\n (In this case, you\u2019ll also need to use an authentication backend that allows inactive users, such as AllowAllUsersModelBackend.) Or to allow only some active users to log in: class PickyAuthenticationForm(AuthenticationForm):\n    def confirm_login_allowed(self, user):\n        if not user.is_active:\n            raise ValidationError(\n                _(\"This account is inactive.\"),\n                code='inactive',\n            )\n        if user.username.startswith('b'):\n            raise ValidationError(\n                _(\"Sorry, accounts starting with 'b' aren't welcome here.\"),\n                code='no_b_users',\n            )\n \n \n"}, {"name": "auth.forms.AuthenticationForm.confirm_login_allowed()", "path": "topics/auth/default#django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed", "type": "django.contrib.auth", "text": " \nconfirm_login_allowed(user)  \nBy default, AuthenticationForm rejects users whose is_active flag is set to False. You may override this behavior with a custom policy to determine which users can log in. Do this with a custom form that subclasses AuthenticationForm and overrides the confirm_login_allowed() method. This method should raise a ValidationError if the given user may not log in. For example, to allow all users to log in regardless of \u201cactive\u201d status: from django.contrib.auth.forms import AuthenticationForm\n\nclass AuthenticationFormWithInactiveUsersOkay(AuthenticationForm):\n    def confirm_login_allowed(self, user):\n        pass\n (In this case, you\u2019ll also need to use an authentication backend that allows inactive users, such as AllowAllUsersModelBackend.) Or to allow only some active users to log in: class PickyAuthenticationForm(AuthenticationForm):\n    def confirm_login_allowed(self, user):\n        if not user.is_active:\n            raise ValidationError(\n                _(\"This account is inactive.\"),\n                code='inactive',\n            )\n        if user.username.startswith('b'):\n            raise ValidationError(\n                _(\"Sorry, accounts starting with 'b' aren't welcome here.\"),\n                code='no_b_users',\n            )\n \n"}, {"name": "auth.forms.PasswordChangeForm", "path": "topics/auth/default#django.contrib.auth.forms.PasswordChangeForm", "type": "django.contrib.auth", "text": " \nclass PasswordChangeForm  \nA form for allowing a user to change their password. \n"}, {"name": "auth.forms.PasswordResetForm", "path": "topics/auth/default#django.contrib.auth.forms.PasswordResetForm", "type": "django.contrib.auth", "text": " \nclass PasswordResetForm  \nA form for generating and emailing a one-time use link to reset a user\u2019s password.  \nsend_mail(subject_template_name, email_template_name, context, from_email, to_email, html_email_template_name=None)  \nUses the arguments to send an EmailMultiAlternatives. Can be overridden to customize how the email is sent to the user.    \nParameters:\n\n \nsubject_template_name \u2013 the template for the subject. \nemail_template_name \u2013 the template for the email body. \ncontext \u2013 context passed to the subject_template, email_template, and html_email_template (if it is not None). \nfrom_email \u2013 the sender\u2019s email. \nto_email \u2013 the email of the requester. \nhtml_email_template_name \u2013 the template for the HTML body; defaults to None, in which case a plain text email is sent.     By default, save() populates the context with the same variables that PasswordResetView passes to its email context. \n \n"}, {"name": "auth.forms.PasswordResetForm.send_mail()", "path": "topics/auth/default#django.contrib.auth.forms.PasswordResetForm.send_mail", "type": "django.contrib.auth", "text": " \nsend_mail(subject_template_name, email_template_name, context, from_email, to_email, html_email_template_name=None)  \nUses the arguments to send an EmailMultiAlternatives. Can be overridden to customize how the email is sent to the user.    \nParameters:\n\n \nsubject_template_name \u2013 the template for the subject. \nemail_template_name \u2013 the template for the email body. \ncontext \u2013 context passed to the subject_template, email_template, and html_email_template (if it is not None). \nfrom_email \u2013 the sender\u2019s email. \nto_email \u2013 the email of the requester. \nhtml_email_template_name \u2013 the template for the HTML body; defaults to None, in which case a plain text email is sent.     By default, save() populates the context with the same variables that PasswordResetView passes to its email context. \n"}, {"name": "auth.forms.SetPasswordForm", "path": "topics/auth/default#django.contrib.auth.forms.SetPasswordForm", "type": "django.contrib.auth", "text": " \nclass SetPasswordForm  \nA form that lets a user change their password without entering the old password. \n"}, {"name": "auth.forms.UserChangeForm", "path": "topics/auth/default#django.contrib.auth.forms.UserChangeForm", "type": "django.contrib.auth", "text": " \nclass UserChangeForm  \nA form used in the admin interface to change a user\u2019s information and permissions. \n"}, {"name": "auth.forms.UserCreationForm", "path": "topics/auth/default#django.contrib.auth.forms.UserCreationForm", "type": "django.contrib.auth", "text": " \nclass UserCreationForm  \nA ModelForm for creating a new user. It has three fields: username (from the user model), password1, and password2. It verifies that password1 and password2 match, validates the password using validate_password(), and sets the user\u2019s password using set_password(). \n"}, {"name": "auth.get_user()", "path": "ref/contrib/auth#django.contrib.auth.get_user", "type": "django.contrib.auth", "text": " \nget_user(request)  \nReturns the user model instance associated with the given request\u2019s session. It checks if the authentication backend stored in the session is present in AUTHENTICATION_BACKENDS. If so, it uses the backend\u2019s get_user() method to retrieve the user model instance and then verifies the session by calling the user model\u2019s get_session_auth_hash() method. Returns an instance of AnonymousUser if the authentication backend stored in the session is no longer in AUTHENTICATION_BACKENDS, if a user isn\u2019t returned by the backend\u2019s get_user() method, or if the session auth hash doesn\u2019t validate. \n"}, {"name": "auth.get_user_model()", "path": "topics/auth/customizing#django.contrib.auth.get_user_model", "type": "django.contrib.auth", "text": " \nget_user_model()  \nInstead of referring to User directly, you should reference the user model using django.contrib.auth.get_user_model(). This method will return the currently active user model \u2013 the custom user model if one is specified, or User otherwise. When you define a foreign key or many-to-many relations to the user model, you should specify the custom model using the AUTH_USER_MODEL setting. For example: from django.conf import settings\nfrom django.db import models\n\nclass Article(models.Model):\n    author = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n    )\n When connecting to signals sent by the user model, you should specify the custom model using the AUTH_USER_MODEL setting. For example: from django.conf import settings\nfrom django.db.models.signals import post_save\n\ndef post_save_receiver(sender, instance, created, **kwargs):\n    pass\n\npost_save.connect(post_save_receiver, sender=settings.AUTH_USER_MODEL)\n Generally speaking, it\u2019s easiest to refer to the user model with the AUTH_USER_MODEL setting in code that\u2019s executed at import time, however, it\u2019s also possible to call get_user_model() while Django is importing models, so you could use models.ForeignKey(get_user_model(), ...). If your app is tested with multiple user models, using @override_settings(AUTH_USER_MODEL=...) for example, and you cache the result of get_user_model() in a module-level variable, you may need to listen to the setting_changed signal to clear the cache. For example: from django.apps import apps\nfrom django.contrib.auth import get_user_model\nfrom django.core.signals import setting_changed\nfrom django.dispatch import receiver\n\n@receiver(setting_changed)\ndef user_model_swapped(**kwargs):\n    if kwargs['setting'] == 'AUTH_USER_MODEL':\n        apps.clear_cache()\n        from myapp import some_module\n        some_module.UserModel = get_user_model()\n \n"}, {"name": "auth.hashers.check_password()", "path": "topics/auth/passwords#django.contrib.auth.hashers.check_password", "type": "django.contrib.auth", "text": " \ncheck_password(password, encoded)  \nIf you\u2019d like to manually authenticate a user by comparing a plain-text password to the hashed password in the database, use the convenience function check_password(). It takes two arguments: the plain-text password to check, and the full value of a user\u2019s password field in the database to check against, and returns True if they match, False otherwise. \n"}, {"name": "auth.hashers.is_password_usable()", "path": "topics/auth/passwords#django.contrib.auth.hashers.is_password_usable", "type": "django.contrib.auth", "text": " \nis_password_usable(encoded_password)  \nReturns False if the password is a result of User.set_unusable_password(). \n"}, {"name": "auth.hashers.make_password()", "path": "topics/auth/passwords#django.contrib.auth.hashers.make_password", "type": "django.contrib.auth", "text": " \nmake_password(password, salt=None, hasher='default')  \nCreates a hashed password in the format used by this application. It takes one mandatory argument: the password in plain-text (string or bytes). Optionally, you can provide a salt and a hashing algorithm to use, if you don\u2019t want to use the defaults (first entry of PASSWORD_HASHERS setting). See Included hashers for the algorithm name of each hasher. If the password argument is None, an unusable password is returned (one that will never be accepted by check_password()). \n"}, {"name": "auth.is_active", "path": "topics/auth/customizing#django.contrib.auth.is_active", "type": "django.contrib.auth", "text": " \nis_active  \nReturns True if the user account is currently active. \n"}, {"name": "auth.is_staff", "path": "topics/auth/customizing#django.contrib.auth.is_staff", "type": "django.contrib.auth", "text": " \nis_staff  \nReturns True if the user is allowed to have access to the admin site. \n"}, {"name": "auth.login()", "path": "topics/auth/default#django.contrib.auth.login", "type": "django.contrib.auth", "text": " \nlogin(request, user, backend=None)  \nTo log a user in, from a view, use login(). It takes an HttpRequest object and a User object. login() saves the user\u2019s ID in the session, using Django\u2019s session framework. Note that any data set during the anonymous session is retained in the session after a user logs in. This example shows how you might use both authenticate() and login(): from django.contrib.auth import authenticate, login\n\ndef my_view(request):\n    username = request.POST['username']\n    password = request.POST['password']\n    user = authenticate(request, username=username, password=password)\n    if user is not None:\n        login(request, user)\n        # Redirect to a success page.\n        ...\n    else:\n        # Return an 'invalid login' error message.\n        ...\n \n"}, {"name": "auth.logout()", "path": "topics/auth/default#django.contrib.auth.logout", "type": "django.contrib.auth", "text": " \nlogout(request)  \nTo log out a user who has been logged in via django.contrib.auth.login(), use django.contrib.auth.logout() within your view. It takes an HttpRequest object and has no return value. Example: from django.contrib.auth import logout\n\ndef logout_view(request):\n    logout(request)\n    # Redirect to a success page.\n Note that logout() doesn\u2019t throw any errors if the user wasn\u2019t logged in. When you call logout(), the session data for the current request is completely cleaned out. All existing data is removed. This is to prevent another person from using the same web browser to log in and have access to the previous user\u2019s session data. If you want to put anything into the session that will be available to the user immediately after logging out, do that after calling django.contrib.auth.logout(). \n"}, {"name": "auth.middleware.AuthenticationMiddleware", "path": "ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware", "type": "django.contrib.auth", "text": " \nclass AuthenticationMiddleware \n"}, {"name": "auth.middleware.PersistentRemoteUserMiddleware", "path": "ref/middleware#django.contrib.auth.middleware.PersistentRemoteUserMiddleware", "type": "django.contrib.auth", "text": " \nclass PersistentRemoteUserMiddleware \n"}, {"name": "auth.middleware.RemoteUserMiddleware", "path": "ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware", "type": "django.contrib.auth", "text": " \nclass RemoteUserMiddleware \n"}, {"name": "auth.mixins.AccessMixin", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin", "type": "django.contrib.auth", "text": " \nclass AccessMixin  \n \nlogin_url  \nDefault return value for get_login_url(). Defaults to None in which case get_login_url() falls back to settings.LOGIN_URL. \n  \npermission_denied_message  \nDefault return value for get_permission_denied_message(). Defaults to an empty string. \n  \nredirect_field_name  \nDefault return value for get_redirect_field_name(). Defaults to \"next\". \n  \nraise_exception  \nIf this attribute is set to True, a PermissionDenied exception is raised when the conditions are not met. When False (the default), anonymous users are redirected to the login page. \n  \nget_login_url()  \nReturns the URL that users who don\u2019t pass the test will be redirected to. Returns login_url if set, or settings.LOGIN_URL otherwise. \n  \nget_permission_denied_message()  \nWhen raise_exception is True, this method can be used to control the error message passed to the error handler for display to the user. Returns the permission_denied_message attribute by default. \n  \nget_redirect_field_name()  \nReturns the name of the query parameter that will contain the URL the user should be redirected to after a successful login. If you set this to None, a query parameter won\u2019t be added. Returns the redirect_field_name attribute by default. \n  \nhandle_no_permission()  \nDepending on the value of raise_exception, the method either raises a PermissionDenied exception or redirects the user to the login_url, optionally including the redirect_field_name if it is set. \n \n"}, {"name": "auth.mixins.AccessMixin.get_login_url()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.get_login_url", "type": "django.contrib.auth", "text": " \nget_login_url()  \nReturns the URL that users who don\u2019t pass the test will be redirected to. Returns login_url if set, or settings.LOGIN_URL otherwise. \n"}, {"name": "auth.mixins.AccessMixin.get_permission_denied_message()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.get_permission_denied_message", "type": "django.contrib.auth", "text": " \nget_permission_denied_message()  \nWhen raise_exception is True, this method can be used to control the error message passed to the error handler for display to the user. Returns the permission_denied_message attribute by default. \n"}, {"name": "auth.mixins.AccessMixin.get_redirect_field_name()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.get_redirect_field_name", "type": "django.contrib.auth", "text": " \nget_redirect_field_name()  \nReturns the name of the query parameter that will contain the URL the user should be redirected to after a successful login. If you set this to None, a query parameter won\u2019t be added. Returns the redirect_field_name attribute by default. \n"}, {"name": "auth.mixins.AccessMixin.handle_no_permission()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.handle_no_permission", "type": "django.contrib.auth", "text": " \nhandle_no_permission()  \nDepending on the value of raise_exception, the method either raises a PermissionDenied exception or redirects the user to the login_url, optionally including the redirect_field_name if it is set. \n"}, {"name": "auth.mixins.AccessMixin.login_url", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.login_url", "type": "django.contrib.auth", "text": " \nlogin_url  \nDefault return value for get_login_url(). Defaults to None in which case get_login_url() falls back to settings.LOGIN_URL. \n"}, {"name": "auth.mixins.AccessMixin.permission_denied_message", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.permission_denied_message", "type": "django.contrib.auth", "text": " \npermission_denied_message  \nDefault return value for get_permission_denied_message(). Defaults to an empty string. \n"}, {"name": "auth.mixins.AccessMixin.raise_exception", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.raise_exception", "type": "django.contrib.auth", "text": " \nraise_exception  \nIf this attribute is set to True, a PermissionDenied exception is raised when the conditions are not met. When False (the default), anonymous users are redirected to the login page. \n"}, {"name": "auth.mixins.AccessMixin.redirect_field_name", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.redirect_field_name", "type": "django.contrib.auth", "text": " \nredirect_field_name  \nDefault return value for get_redirect_field_name(). Defaults to \"next\". \n"}, {"name": "auth.mixins.LoginRequiredMixin", "path": "topics/auth/default#django.contrib.auth.mixins.LoginRequiredMixin", "type": "django.contrib.auth", "text": " \nclass LoginRequiredMixin  \nIf a view is using this mixin, all requests by non-authenticated users will be redirected to the login page or shown an HTTP 403 Forbidden error, depending on the raise_exception parameter. You can set any of the parameters of AccessMixin to customize the handling of unauthorized users: from django.contrib.auth.mixins import LoginRequiredMixin\n\nclass MyView(LoginRequiredMixin, View):\n    login_url = '/login/'\n    redirect_field_name = 'redirect_to'\n \n"}, {"name": "auth.mixins.PermissionRequiredMixin", "path": "topics/auth/default#django.contrib.auth.mixins.PermissionRequiredMixin", "type": "django.contrib.auth", "text": " \nclass PermissionRequiredMixin  \nThis mixin, just like the permission_required decorator, checks whether the user accessing a view has all given permissions. You should specify the permission (or an iterable of permissions) using the permission_required parameter: from django.contrib.auth.mixins import PermissionRequiredMixin\n\nclass MyView(PermissionRequiredMixin, View):\n    permission_required = 'polls.add_choice'\n    # Or multiple of permissions:\n    permission_required = ('polls.view_choice', 'polls.change_choice')\n You can set any of the parameters of AccessMixin to customize the handling of unauthorized users. You may also override these methods:  \nget_permission_required()  \nReturns an iterable of permission names used by the mixin. Defaults to the permission_required attribute, converted to a tuple if necessary. \n  \nhas_permission()  \nReturns a boolean denoting whether the current user has permission to execute the decorated view. By default, this returns the result of calling has_perms() with the list of permissions returned by get_permission_required(). \n \n"}, {"name": "auth.mixins.PermissionRequiredMixin.get_permission_required()", "path": "topics/auth/default#django.contrib.auth.mixins.PermissionRequiredMixin.get_permission_required", "type": "django.contrib.auth", "text": " \nget_permission_required()  \nReturns an iterable of permission names used by the mixin. Defaults to the permission_required attribute, converted to a tuple if necessary. \n"}, {"name": "auth.mixins.PermissionRequiredMixin.has_permission()", "path": "topics/auth/default#django.contrib.auth.mixins.PermissionRequiredMixin.has_permission", "type": "django.contrib.auth", "text": " \nhas_permission()  \nReturns a boolean denoting whether the current user has permission to execute the decorated view. By default, this returns the result of calling has_perms() with the list of permissions returned by get_permission_required(). \n"}, {"name": "auth.mixins.UserPassesTestMixin", "path": "topics/auth/default#django.contrib.auth.mixins.UserPassesTestMixin", "type": "django.contrib.auth", "text": " \nclass UserPassesTestMixin  \nWhen using class-based views, you can use the UserPassesTestMixin to do this.  \ntest_func()  \nYou have to override the test_func() method of the class to provide the test that is performed. Furthermore, you can set any of the parameters of AccessMixin to customize the handling of unauthorized users: from django.contrib.auth.mixins import UserPassesTestMixin\n\nclass MyView(UserPassesTestMixin, View):\n\n    def test_func(self):\n        return self.request.user.email.endswith('@example.com')\n \n  \nget_test_func()  \nYou can also override the get_test_func() method to have the mixin use a differently named function for its checks (instead of test_func()). \n  Stacking UserPassesTestMixin Due to the way UserPassesTestMixin is implemented, you cannot stack them in your inheritance list. The following does NOT work: class TestMixin1(UserPassesTestMixin):\n    def test_func(self):\n        return self.request.user.email.endswith('@example.com')\n\nclass TestMixin2(UserPassesTestMixin):\n    def test_func(self):\n        return self.request.user.username.startswith('django')\n\nclass MyView(TestMixin1, TestMixin2, View):\n    ...\n If TestMixin1 would call super() and take that result into account, TestMixin1 wouldn\u2019t work standalone anymore.  \n"}, {"name": "auth.mixins.UserPassesTestMixin.get_test_func()", "path": "topics/auth/default#django.contrib.auth.mixins.UserPassesTestMixin.get_test_func", "type": "django.contrib.auth", "text": " \nget_test_func()  \nYou can also override the get_test_func() method to have the mixin use a differently named function for its checks (instead of test_func()). \n"}, {"name": "auth.mixins.UserPassesTestMixin.test_func()", "path": "topics/auth/default#django.contrib.auth.mixins.UserPassesTestMixin.test_func", "type": "django.contrib.auth", "text": " \ntest_func()  \nYou have to override the test_func() method of the class to provide the test that is performed. Furthermore, you can set any of the parameters of AccessMixin to customize the handling of unauthorized users: from django.contrib.auth.mixins import UserPassesTestMixin\n\nclass MyView(UserPassesTestMixin, View):\n\n    def test_func(self):\n        return self.request.user.email.endswith('@example.com')\n \n"}, {"name": "auth.models.AbstractBaseUser", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser", "type": "django.contrib.auth", "text": " \nclass models.AbstractBaseUser  \n \nget_username()  \nReturns the value of the field nominated by USERNAME_FIELD. \n  \nclean()  \nNormalizes the username by calling normalize_username(). If you override this method, be sure to call super() to retain the normalization. \n  \nclassmethod get_email_field_name()  \nReturns the name of the email field specified by the EMAIL_FIELD attribute. Defaults to 'email' if EMAIL_FIELD isn\u2019t specified. \n  \nclassmethod normalize_username(username)  \nApplies NFKC Unicode normalization to usernames so that visually identical characters with different Unicode code points are considered identical. \n  \nis_authenticated  \nRead-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn\u2019t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance. \n  \nis_anonymous  \nRead-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute. \n  \nset_password(raw_password)  \nSets the user\u2019s password to the given raw string, taking care of the password hashing. Doesn\u2019t save the AbstractBaseUser object. When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used. \n  \ncheck_password(raw_password)  \nReturns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.) \n  \nset_unusable_password()  \nMarks the user as having no password set. This isn\u2019t the same as having a blank string for a password. check_password() for this user will never return True. Doesn\u2019t save the AbstractBaseUser object. You may need this if authentication for your application takes place against an existing external source such as an LDAP directory. \n  \nhas_usable_password()  \nReturns False if set_unusable_password() has been called for this user. \n  \nget_session_auth_hash()  \nReturns an HMAC of the password field. Used for Session invalidation on password change. \n \n"}, {"name": "auth.models.AbstractBaseUser.check_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.check_password", "type": "django.contrib.auth", "text": " \ncheck_password(raw_password)  \nReturns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.) \n"}, {"name": "auth.models.AbstractBaseUser.clean()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.clean", "type": "django.contrib.auth", "text": " \nclean()  \nNormalizes the username by calling normalize_username(). If you override this method, be sure to call super() to retain the normalization. \n"}, {"name": "auth.models.AbstractBaseUser.get_session_auth_hash()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash", "type": "django.contrib.auth", "text": " \nget_session_auth_hash()  \nReturns an HMAC of the password field. Used for Session invalidation on password change. \n"}, {"name": "auth.models.AbstractBaseUser.get_username()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_username", "type": "django.contrib.auth", "text": " \nget_username()  \nReturns the value of the field nominated by USERNAME_FIELD. \n"}, {"name": "auth.models.AbstractBaseUser.has_usable_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.has_usable_password", "type": "django.contrib.auth", "text": " \nhas_usable_password()  \nReturns False if set_unusable_password() has been called for this user. \n"}, {"name": "auth.models.AbstractBaseUser.is_anonymous", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.is_anonymous", "type": "django.contrib.auth", "text": " \nis_anonymous  \nRead-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute. \n"}, {"name": "auth.models.AbstractBaseUser.is_authenticated", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.is_authenticated", "type": "django.contrib.auth", "text": " \nis_authenticated  \nRead-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn\u2019t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance. \n"}, {"name": "auth.models.AbstractBaseUser.set_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.set_password", "type": "django.contrib.auth", "text": " \nset_password(raw_password)  \nSets the user\u2019s password to the given raw string, taking care of the password hashing. Doesn\u2019t save the AbstractBaseUser object. When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used. \n"}, {"name": "auth.models.AbstractBaseUser.set_unusable_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.set_unusable_password", "type": "django.contrib.auth", "text": " \nset_unusable_password()  \nMarks the user as having no password set. This isn\u2019t the same as having a blank string for a password. check_password() for this user will never return True. Doesn\u2019t save the AbstractBaseUser object. You may need this if authentication for your application takes place against an existing external source such as an LDAP directory. \n"}, {"name": "auth.models.AbstractUser", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractUser", "type": "django.contrib.auth", "text": " \nclass models.AbstractUser  \n \nclean()  \nNormalizes the email by calling BaseUserManager.normalize_email(). If you override this method, be sure to call super() to retain the normalization. \n \n"}, {"name": "auth.models.AbstractUser.clean()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractUser.clean", "type": "django.contrib.auth", "text": " \nclean()  \nNormalizes the email by calling BaseUserManager.normalize_email(). If you override this method, be sure to call super() to retain the normalization. \n"}, {"name": "auth.models.AnonymousUser", "path": "ref/contrib/auth#django.contrib.auth.models.AnonymousUser", "type": "django.contrib.auth", "text": " \nclass models.AnonymousUser  \ndjango.contrib.auth.models.AnonymousUser is a class that implements the django.contrib.auth.models.User interface, with these differences:  \nid is always None. \nusername is always the empty string. \nget_username() always returns the empty string. \nis_anonymous is True instead of False. \nis_authenticated is False instead of True. \nis_staff and is_superuser are always False. \nis_active is always False. \ngroups and user_permissions are always empty. \nset_password(), check_password(), save() and delete() raise NotImplementedError.  \n"}, {"name": "auth.models.BaseUserManager", "path": "topics/auth/customizing#django.contrib.auth.models.BaseUserManager", "type": "django.contrib.auth", "text": " \nclass models.BaseUserManager  \n \nclassmethod normalize_email(email)  \nNormalizes email addresses by lowercasing the domain portion of the email address. \n  \nget_by_natural_key(username)  \nRetrieves a user instance using the contents of the field nominated by USERNAME_FIELD. \n  \nmake_random_password(length=10, allowed_chars='abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789')  \nReturns a random password with the given length and given string of allowed characters. Note that the default value of allowed_chars doesn\u2019t contain letters that can cause user confusion, including:  \ni, l, I, and 1 (lowercase letter i, lowercase letter L, uppercase letter i, and the number one) \no, O, and 0 (lowercase letter o, uppercase letter o, and zero)  \n \n"}, {"name": "auth.models.BaseUserManager.get_by_natural_key()", "path": "topics/auth/customizing#django.contrib.auth.models.BaseUserManager.get_by_natural_key", "type": "django.contrib.auth", "text": " \nget_by_natural_key(username)  \nRetrieves a user instance using the contents of the field nominated by USERNAME_FIELD. \n"}, {"name": "auth.models.BaseUserManager.make_random_password()", "path": "topics/auth/customizing#django.contrib.auth.models.BaseUserManager.make_random_password", "type": "django.contrib.auth", "text": " \nmake_random_password(length=10, allowed_chars='abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789')  \nReturns a random password with the given length and given string of allowed characters. Note that the default value of allowed_chars doesn\u2019t contain letters that can cause user confusion, including:  \ni, l, I, and 1 (lowercase letter i, lowercase letter L, uppercase letter i, and the number one) \no, O, and 0 (lowercase letter o, uppercase letter o, and zero)  \n"}, {"name": "auth.models.CustomUser", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser", "type": "django.contrib.auth", "text": " \nclass models.CustomUser  \n \nUSERNAME_FIELD  \nA string describing the name of the field on the user model that is used as the unique identifier. This will usually be a username of some kind, but it can also be an email address, or any other unique identifier. The field must be unique (i.e., have unique=True set in its definition), unless you use a custom authentication backend that can support non-unique usernames. In the following example, the field identifier is used as the identifying field: class MyUser(AbstractBaseUser):\n    identifier = models.CharField(max_length=40, unique=True)\n    ...\n    USERNAME_FIELD = 'identifier'\n \n  \nEMAIL_FIELD  \nA string describing the name of the email field on the User model. This value is returned by get_email_field_name(). \n  \nREQUIRED_FIELDS  \nA list of the field names that will be prompted for when creating a user via the createsuperuser management command. The user will be prompted to supply a value for each of these fields. It must include any field for which blank is False or undefined and may include additional fields you want prompted for when a user is created interactively. REQUIRED_FIELDS has no effect in other parts of Django, like creating a user in the admin. For example, here is the partial definition for a user model that defines two required fields - a date of birth and height: class MyUser(AbstractBaseUser):\n    ...\n    date_of_birth = models.DateField()\n    height = models.FloatField()\n    ...\n    REQUIRED_FIELDS = ['date_of_birth', 'height']\n  Note REQUIRED_FIELDS must contain all required fields on your user model, but should not contain the USERNAME_FIELD or password as these fields will always be prompted for.  \n  \nis_active  \nA boolean attribute that indicates whether the user is considered \u201cactive\u201d. This attribute is provided as an attribute on AbstractBaseUser defaulting to True. How you choose to implement it will depend on the details of your chosen auth backends. See the documentation of the is_active attribute on the built-in\nuser model for details. \n  \nget_full_name()  \nOptional. A longer formal identifier for the user such as their full name. If implemented, this appears alongside the username in an object\u2019s history in django.contrib.admin. \n  \nget_short_name()  \nOptional. A short, informal identifier for the user such as their first name. If implemented, this replaces the username in the greeting to the user in the header of django.contrib.admin. \n  Importing AbstractBaseUser AbstractBaseUser and BaseUserManager are importable from django.contrib.auth.base_user so that they can be imported without including django.contrib.auth in INSTALLED_APPS.  \n"}, {"name": "auth.models.CustomUser.EMAIL_FIELD", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.EMAIL_FIELD", "type": "django.contrib.auth", "text": " \nEMAIL_FIELD  \nA string describing the name of the email field on the User model. This value is returned by get_email_field_name(). \n"}, {"name": "auth.models.CustomUser.get_full_name()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.get_full_name", "type": "django.contrib.auth", "text": " \nget_full_name()  \nOptional. A longer formal identifier for the user such as their full name. If implemented, this appears alongside the username in an object\u2019s history in django.contrib.admin. \n"}, {"name": "auth.models.CustomUser.get_short_name()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.get_short_name", "type": "django.contrib.auth", "text": " \nget_short_name()  \nOptional. A short, informal identifier for the user such as their first name. If implemented, this replaces the username in the greeting to the user in the header of django.contrib.admin. \n"}, {"name": "auth.models.CustomUser.is_active", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.is_active", "type": "django.contrib.auth", "text": " \nis_active  \nA boolean attribute that indicates whether the user is considered \u201cactive\u201d. This attribute is provided as an attribute on AbstractBaseUser defaulting to True. How you choose to implement it will depend on the details of your chosen auth backends. See the documentation of the is_active attribute on the built-in\nuser model for details. \n"}, {"name": "auth.models.CustomUser.REQUIRED_FIELDS", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS", "type": "django.contrib.auth", "text": " \nREQUIRED_FIELDS  \nA list of the field names that will be prompted for when creating a user via the createsuperuser management command. The user will be prompted to supply a value for each of these fields. It must include any field for which blank is False or undefined and may include additional fields you want prompted for when a user is created interactively. REQUIRED_FIELDS has no effect in other parts of Django, like creating a user in the admin. For example, here is the partial definition for a user model that defines two required fields - a date of birth and height: class MyUser(AbstractBaseUser):\n    ...\n    date_of_birth = models.DateField()\n    height = models.FloatField()\n    ...\n    REQUIRED_FIELDS = ['date_of_birth', 'height']\n  Note REQUIRED_FIELDS must contain all required fields on your user model, but should not contain the USERNAME_FIELD or password as these fields will always be prompted for.  \n"}, {"name": "auth.models.CustomUser.USERNAME_FIELD", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.USERNAME_FIELD", "type": "django.contrib.auth", "text": " \nUSERNAME_FIELD  \nA string describing the name of the field on the user model that is used as the unique identifier. This will usually be a username of some kind, but it can also be an email address, or any other unique identifier. The field must be unique (i.e., have unique=True set in its definition), unless you use a custom authentication backend that can support non-unique usernames. In the following example, the field identifier is used as the identifying field: class MyUser(AbstractBaseUser):\n    identifier = models.CharField(max_length=40, unique=True)\n    ...\n    USERNAME_FIELD = 'identifier'\n \n"}, {"name": "auth.models.CustomUserManager", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUserManager", "type": "django.contrib.auth", "text": " \nclass models.CustomUserManager  \n \ncreate_user(username_field, password=None, **other_fields)  \nThe prototype of create_user() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_user should be defined as: def create_user(self, email, date_of_birth, password=None):\n    # create user here\n    ...\n \n  \ncreate_superuser(username_field, password=None, **other_fields)  \nThe prototype of create_superuser() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_superuser should be defined as: def create_superuser(self, email, date_of_birth, password=None):\n    # create superuser here\n    ...\n \n \n"}, {"name": "auth.models.CustomUserManager.create_superuser()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUserManager.create_superuser", "type": "django.contrib.auth", "text": " \ncreate_superuser(username_field, password=None, **other_fields)  \nThe prototype of create_superuser() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_superuser should be defined as: def create_superuser(self, email, date_of_birth, password=None):\n    # create superuser here\n    ...\n \n"}, {"name": "auth.models.CustomUserManager.create_user()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUserManager.create_user", "type": "django.contrib.auth", "text": " \ncreate_user(username_field, password=None, **other_fields)  \nThe prototype of create_user() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_user should be defined as: def create_user(self, email, date_of_birth, password=None):\n    # create user here\n    ...\n \n"}, {"name": "auth.models.Group", "path": "ref/contrib/auth#django.contrib.auth.models.Group", "type": "django.contrib.auth", "text": " \nclass models.Group \n"}, {"name": "auth.models.Group.name", "path": "ref/contrib/auth#django.contrib.auth.models.Group.name", "type": "django.contrib.auth", "text": " \nname  \nRequired. 150 characters or fewer. Any characters are permitted. Example: 'Awesome Users'. \n"}, {"name": "auth.models.Group.permissions", "path": "ref/contrib/auth#django.contrib.auth.models.Group.permissions", "type": "django.contrib.auth", "text": " \npermissions  \nMany-to-many field to Permission: group.permissions.set([permission_list])\ngroup.permissions.add(permission, permission, ...)\ngroup.permissions.remove(permission, permission, ...)\ngroup.permissions.clear()\n \n"}, {"name": "auth.models.Permission", "path": "ref/contrib/auth#django.contrib.auth.models.Permission", "type": "django.contrib.auth", "text": " \nclass models.Permission \n"}, {"name": "auth.models.Permission.codename", "path": "ref/contrib/auth#django.contrib.auth.models.Permission.codename", "type": "django.contrib.auth", "text": " \ncodename  \nRequired. 100 characters or fewer. Example: 'can_vote'. \n"}, {"name": "auth.models.Permission.content_type", "path": "ref/contrib/auth#django.contrib.auth.models.Permission.content_type", "type": "django.contrib.auth", "text": " \ncontent_type  \nRequired. A reference to the django_content_type database table, which contains a record for each installed model. \n"}, {"name": "auth.models.Permission.name", "path": "ref/contrib/auth#django.contrib.auth.models.Permission.name", "type": "django.contrib.auth", "text": " \nname  \nRequired. 255 characters or fewer. Example: 'Can vote'. \n"}, {"name": "auth.models.PermissionsMixin", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin", "type": "django.contrib.auth", "text": " \nclass models.PermissionsMixin  \n \nis_superuser  \nBoolean. Designates that this user has all permissions without explicitly assigning them. \n  \nget_user_permissions(obj=None)  \nReturns a set of permission strings that the user has directly. If obj is passed in, only returns the user permissions for this specific object. \n  \nget_group_permissions(obj=None)  \nReturns a set of permission strings that the user has, through their groups. If obj is passed in, only returns the group permissions for this specific object. \n  \nget_all_permissions(obj=None)  \nReturns a set of permission strings that the user has, both through group and user permissions. If obj is passed in, only returns the permissions for this specific object. \n  \nhas_perm(perm, obj=None)  \nReturns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\" (see permissions). If User.is_active and is_superuser are both True, this method always returns True. If obj is passed in, this method won\u2019t check for a permission for the model, but for this specific object. \n  \nhas_perms(perm_list, obj=None)  \nReturns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If User.is_active and is_superuser are both True, this method always returns True. If obj is passed in, this method won\u2019t check for permissions for the model, but for the specific object. \n  \nhas_module_perms(package_name)  \nReturns True if the user has any permissions in the given package (the Django app label). If User.is_active and is_superuser are both True, this method always returns True. \n \n"}, {"name": "auth.models.PermissionsMixin.get_all_permissions()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.get_all_permissions", "type": "django.contrib.auth", "text": " \nget_all_permissions(obj=None)  \nReturns a set of permission strings that the user has, both through group and user permissions. If obj is passed in, only returns the permissions for this specific object. \n"}, {"name": "auth.models.PermissionsMixin.get_group_permissions()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.get_group_permissions", "type": "django.contrib.auth", "text": " \nget_group_permissions(obj=None)  \nReturns a set of permission strings that the user has, through their groups. If obj is passed in, only returns the group permissions for this specific object. \n"}, {"name": "auth.models.PermissionsMixin.get_user_permissions()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.get_user_permissions", "type": "django.contrib.auth", "text": " \nget_user_permissions(obj=None)  \nReturns a set of permission strings that the user has directly. If obj is passed in, only returns the user permissions for this specific object. \n"}, {"name": "auth.models.PermissionsMixin.has_module_perms()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.has_module_perms", "type": "django.contrib.auth", "text": " \nhas_module_perms(package_name)  \nReturns True if the user has any permissions in the given package (the Django app label). If User.is_active and is_superuser are both True, this method always returns True. \n"}, {"name": "auth.models.PermissionsMixin.has_perm()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.has_perm", "type": "django.contrib.auth", "text": " \nhas_perm(perm, obj=None)  \nReturns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\" (see permissions). If User.is_active and is_superuser are both True, this method always returns True. If obj is passed in, this method won\u2019t check for a permission for the model, but for this specific object. \n"}, {"name": "auth.models.PermissionsMixin.has_perms()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.has_perms", "type": "django.contrib.auth", "text": " \nhas_perms(perm_list, obj=None)  \nReturns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If User.is_active and is_superuser are both True, this method always returns True. If obj is passed in, this method won\u2019t check for permissions for the model, but for the specific object. \n"}, {"name": "auth.models.PermissionsMixin.is_superuser", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.is_superuser", "type": "django.contrib.auth", "text": " \nis_superuser  \nBoolean. Designates that this user has all permissions without explicitly assigning them. \n"}, {"name": "auth.models.User", "path": "ref/contrib/auth#django.contrib.auth.models.User", "type": "django.contrib.auth", "text": " \nclass models.User \n"}, {"name": "auth.models.User.check_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.check_password", "type": "django.contrib.auth", "text": " \ncheck_password(raw_password)  \nReturns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.) \n"}, {"name": "auth.models.User.date_joined", "path": "ref/contrib/auth#django.contrib.auth.models.User.date_joined", "type": "django.contrib.auth", "text": " \ndate_joined  \nA datetime designating when the account was created. Is set to the current date/time by default when the account is created. \n"}, {"name": "auth.models.User.email", "path": "ref/contrib/auth#django.contrib.auth.models.User.email", "type": "django.contrib.auth", "text": " \nemail  \nOptional (blank=True). Email address. \n"}, {"name": "auth.models.User.email_user()", "path": "ref/contrib/auth#django.contrib.auth.models.User.email_user", "type": "django.contrib.auth", "text": " \nemail_user(subject, message, from_email=None, **kwargs)  \nSends an email to the user. If from_email is None, Django uses the DEFAULT_FROM_EMAIL. Any **kwargs are passed to the underlying send_mail() call. \n"}, {"name": "auth.models.User.first_name", "path": "ref/contrib/auth#django.contrib.auth.models.User.first_name", "type": "django.contrib.auth", "text": " \nfirst_name  \nOptional (blank=True). 150 characters or fewer. \n"}, {"name": "auth.models.User.get_all_permissions()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_all_permissions", "type": "django.contrib.auth", "text": " \nget_all_permissions(obj=None)  \nReturns a set of permission strings that the user has, both through group and user permissions. If obj is passed in, only returns the permissions for this specific object. \n"}, {"name": "auth.models.User.get_full_name()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_full_name", "type": "django.contrib.auth", "text": " \nget_full_name()  \nReturns the first_name plus the last_name, with a space in between. \n"}, {"name": "auth.models.User.get_group_permissions()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_group_permissions", "type": "django.contrib.auth", "text": " \nget_group_permissions(obj=None)  \nReturns a set of permission strings that the user has, through their groups. If obj is passed in, only returns the group permissions for this specific object. \n"}, {"name": "auth.models.User.get_short_name()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_short_name", "type": "django.contrib.auth", "text": " \nget_short_name()  \nReturns the first_name. \n"}, {"name": "auth.models.User.get_user_permissions()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_user_permissions", "type": "django.contrib.auth", "text": " \nget_user_permissions(obj=None)  \nReturns a set of permission strings that the user has directly. If obj is passed in, only returns the user permissions for this specific object. \n"}, {"name": "auth.models.User.get_username()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_username", "type": "django.contrib.auth", "text": " \nget_username()  \nReturns the username for the user. Since the User model can be swapped out, you should use this method instead of referencing the username attribute directly. \n"}, {"name": "auth.models.User.groups", "path": "ref/contrib/auth#django.contrib.auth.models.User.groups", "type": "django.contrib.auth", "text": " \ngroups  \nMany-to-many relationship to Group \n"}, {"name": "auth.models.User.has_module_perms()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_module_perms", "type": "django.contrib.auth", "text": " \nhas_module_perms(package_name)  \nReturns True if the user has any permissions in the given package (the Django app label). If the user is inactive, this method will always return False. For an active superuser, this method will always return True. \n"}, {"name": "auth.models.User.has_perm()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_perm", "type": "django.contrib.auth", "text": " \nhas_perm(perm, obj=None)  \nReturns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\". (see documentation on permissions). If the user is inactive, this method will always return False. For an active superuser, this method will always return True. If obj is passed in, this method won\u2019t check for a permission for the model, but for this specific object. \n"}, {"name": "auth.models.User.has_perms()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_perms", "type": "django.contrib.auth", "text": " \nhas_perms(perm_list, obj=None)  \nReturns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If the user is inactive, this method will always return False. For an active superuser, this method will always return True. If obj is passed in, this method won\u2019t check for permissions for the model, but for the specific object. \n"}, {"name": "auth.models.User.has_usable_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_usable_password", "type": "django.contrib.auth", "text": " \nhas_usable_password()  \nReturns False if set_unusable_password() has been called for this user. \n"}, {"name": "auth.models.User.is_active", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_active", "type": "django.contrib.auth", "text": " \nis_active  \nBoolean. Designates whether this user account should be considered active. We recommend that you set this flag to False instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won\u2019t break. This doesn\u2019t necessarily control whether or not the user can log in. Authentication backends aren\u2019t required to check for the is_active flag but the default backend (ModelBackend) and the RemoteUserBackend do. You can use AllowAllUsersModelBackend or AllowAllUsersRemoteUserBackend if you want to allow inactive users to login. In this case, you\u2019ll also want to customize the AuthenticationForm used by the LoginView as it rejects inactive users. Be aware that the permission-checking methods such as has_perm() and the authentication in the Django admin all return False for inactive users. \n"}, {"name": "auth.models.User.is_anonymous", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_anonymous", "type": "django.contrib.auth", "text": " \nis_anonymous  \nRead-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute. \n"}, {"name": "auth.models.User.is_authenticated", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_authenticated", "type": "django.contrib.auth", "text": " \nis_authenticated  \nRead-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn\u2019t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance. \n"}, {"name": "auth.models.User.is_staff", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_staff", "type": "django.contrib.auth", "text": " \nis_staff  \nBoolean. Designates whether this user can access the admin site. \n"}, {"name": "auth.models.User.is_superuser", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_superuser", "type": "django.contrib.auth", "text": " \nis_superuser  \nBoolean. Designates that this user has all permissions without explicitly assigning them. \n"}, {"name": "auth.models.User.last_login", "path": "ref/contrib/auth#django.contrib.auth.models.User.last_login", "type": "django.contrib.auth", "text": " \nlast_login  \nA datetime of the user\u2019s last login. \n"}, {"name": "auth.models.User.last_name", "path": "ref/contrib/auth#django.contrib.auth.models.User.last_name", "type": "django.contrib.auth", "text": " \nlast_name  \nOptional (blank=True). 150 characters or fewer. \n"}, {"name": "auth.models.User.password", "path": "ref/contrib/auth#django.contrib.auth.models.User.password", "type": "django.contrib.auth", "text": " \npassword  \nRequired. A hash of, and metadata about, the password. (Django doesn\u2019t store the raw password.) Raw passwords can be arbitrarily long and can contain any character. See the password documentation. \n"}, {"name": "auth.models.User.set_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.set_password", "type": "django.contrib.auth", "text": " \nset_password(raw_password)  \nSets the user\u2019s password to the given raw string, taking care of the password hashing. Doesn\u2019t save the User object. When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used. \n"}, {"name": "auth.models.User.set_unusable_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.set_unusable_password", "type": "django.contrib.auth", "text": " \nset_unusable_password()  \nMarks the user as having no password set. This isn\u2019t the same as having a blank string for a password. check_password() for this user will never return True. Doesn\u2019t save the User object. You may need this if authentication for your application takes place against an existing external source such as an LDAP directory. \n"}, {"name": "auth.models.User.user_permissions", "path": "ref/contrib/auth#django.contrib.auth.models.User.user_permissions", "type": "django.contrib.auth", "text": " \nuser_permissions  \nMany-to-many relationship to Permission \n"}, {"name": "auth.models.User.username", "path": "ref/contrib/auth#django.contrib.auth.models.User.username", "type": "django.contrib.auth", "text": " \nusername  \nRequired. 150 characters or fewer. Usernames may contain alphanumeric, _, @, +, . and - characters. The max_length should be sufficient for many use cases. If you need a longer length, please use a custom user model. If you use MySQL with the utf8mb4 encoding (recommended for proper Unicode support), specify at most max_length=191 because MySQL can only create unique indexes with 191 characters in that case by default. \n"}, {"name": "auth.models.UserManager", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager", "type": "django.contrib.auth", "text": " \nclass models.UserManager  \nThe User model has a custom manager that has the following helper methods (in addition to the methods provided by BaseUserManager):  \ncreate_user(username, email=None, password=None, **extra_fields)  \nCreates, saves and returns a User. The username and password are set as given. The domain portion of email is automatically converted to lowercase, and the returned User object will have is_active set to True. If no password is provided, set_unusable_password() will be called. The extra_fields keyword arguments are passed through to the User\u2019s __init__ method to allow setting arbitrary fields on a custom user model. See Creating users for example usage. \n  \ncreate_superuser(username, email=None, password=None, **extra_fields)  \nSame as create_user(), but sets is_staff and is_superuser to True. \n  \nwith_perm(perm, is_active=True, include_superusers=True, backend=None, obj=None)  \nReturns users that have the given permission perm either in the \"<app label>.<permission codename>\" format or as a Permission instance. Returns an empty queryset if no users who have the perm found. If is_active is True (default), returns only active users, or if False, returns only inactive users. Use None to return all users irrespective of active state. If include_superusers is True (default), the result will include superusers. If backend is passed in and it\u2019s defined in AUTHENTICATION_BACKENDS, then this method will use it. Otherwise, it will use the backend in AUTHENTICATION_BACKENDS, if there is only one, or raise an exception. \n \n"}, {"name": "auth.models.UserManager.create_superuser()", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager.create_superuser", "type": "django.contrib.auth", "text": " \ncreate_superuser(username, email=None, password=None, **extra_fields)  \nSame as create_user(), but sets is_staff and is_superuser to True. \n"}, {"name": "auth.models.UserManager.create_user()", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager.create_user", "type": "django.contrib.auth", "text": " \ncreate_user(username, email=None, password=None, **extra_fields)  \nCreates, saves and returns a User. The username and password are set as given. The domain portion of email is automatically converted to lowercase, and the returned User object will have is_active set to True. If no password is provided, set_unusable_password() will be called. The extra_fields keyword arguments are passed through to the User\u2019s __init__ method to allow setting arbitrary fields on a custom user model. See Creating users for example usage. \n"}, {"name": "auth.models.UserManager.with_perm()", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager.with_perm", "type": "django.contrib.auth", "text": " \nwith_perm(perm, is_active=True, include_superusers=True, backend=None, obj=None)  \nReturns users that have the given permission perm either in the \"<app label>.<permission codename>\" format or as a Permission instance. Returns an empty queryset if no users who have the perm found. If is_active is True (default), returns only active users, or if False, returns only inactive users. Use None to return all users irrespective of active state. If include_superusers is True (default), the result will include superusers. If backend is passed in and it\u2019s defined in AUTHENTICATION_BACKENDS, then this method will use it. Otherwise, it will use the backend in AUTHENTICATION_BACKENDS, if there is only one, or raise an exception. \n"}, {"name": "auth.password_validation.CommonPasswordValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.CommonPasswordValidator", "type": "django.contrib.auth", "text": " \nclass CommonPasswordValidator(password_list_path=DEFAULT_PASSWORD_LIST_PATH)  \nValidates whether the password is not a common password. This converts the password to lowercase (to do a case-insensitive comparison) and checks it against a list of 20,000 common password created by Royce Williams. The password_list_path can be set to the path of a custom file of common passwords. This file should contain one lowercase password per line and may be plain text or gzipped. \n"}, {"name": "auth.password_validation.get_password_validators()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.get_password_validators", "type": "django.contrib.auth", "text": " \nget_password_validators(validator_config)  \nReturns a set of validator objects based on the validator_config parameter. By default, all functions use the validators defined in AUTH_PASSWORD_VALIDATORS, but by calling this function with an alternate set of validators and then passing the result into the password_validators parameter of the other functions, your custom set of validators will be used instead. This is useful when you have a typical set of validators to use for most scenarios, but also have a special situation that requires a custom set. If you always use the same set of validators, there is no need to use this function, as the configuration from AUTH_PASSWORD_VALIDATORS is used by default. The structure of validator_config is identical to the structure of AUTH_PASSWORD_VALIDATORS. The return value of this function can be passed into the password_validators parameter of the functions listed above. \n"}, {"name": "auth.password_validation.MinimumLengthValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.MinimumLengthValidator", "type": "django.contrib.auth", "text": " \nclass MinimumLengthValidator(min_length=8)  \nValidates whether the password meets a minimum length. The minimum length can be customized with the min_length parameter. \n"}, {"name": "auth.password_validation.NumericPasswordValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.NumericPasswordValidator", "type": "django.contrib.auth", "text": " \nclass NumericPasswordValidator  \nValidates whether the password is not entirely numeric. \n"}, {"name": "auth.password_validation.password_changed()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.password_changed", "type": "django.contrib.auth", "text": " \npassword_changed(password, user=None, password_validators=None)  \nInforms all validators that the password has been changed. This can be used by validators such as one that prevents password reuse. This should be called once the password has been successfully changed. For subclasses of AbstractBaseUser, the password field will be marked as \u201cdirty\u201d when calling set_password() which triggers a call to password_changed() after the user is saved. \n"}, {"name": "auth.password_validation.password_validators_help_text_html()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.password_validators_help_text_html", "type": "django.contrib.auth", "text": " \npassword_validators_help_text_html(password_validators=None)  \nReturns an HTML string with all help texts in an <ul>. This is helpful when adding password validation to forms, as you can pass the output directly to the help_text parameter of a form field. \n"}, {"name": "auth.password_validation.password_validators_help_texts()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.password_validators_help_texts", "type": "django.contrib.auth", "text": " \npassword_validators_help_texts(password_validators=None)  \nReturns a list of the help texts of all validators. These explain the password requirements to the user. \n"}, {"name": "auth.password_validation.UserAttributeSimilarityValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.UserAttributeSimilarityValidator", "type": "django.contrib.auth", "text": " \nclass UserAttributeSimilarityValidator(user_attributes=DEFAULT_USER_ATTRIBUTES, max_similarity=0.7)  \nValidates whether the password is sufficiently different from certain attributes of the user. The user_attributes parameter should be an iterable of names of user attributes to compare to. If this argument is not provided, the default is used: 'username', 'first_name', 'last_name', 'email'. Attributes that don\u2019t exist are ignored. The minimum similarity of a rejected password can be set on a scale of 0 to 1 with the max_similarity parameter. A setting of 0 rejects all passwords, whereas a setting of 1 rejects only passwords that are identical to an attribute\u2019s value. \n"}, {"name": "auth.password_validation.validate_password()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.validate_password", "type": "django.contrib.auth", "text": " \nvalidate_password(password, user=None, password_validators=None)  \nValidates a password. If all validators find the password valid, returns None. If one or more validators reject the password, raises a ValidationError with all the error messages from the validators. The user object is optional: if it\u2019s not provided, some validators may not be able to perform any validation and will accept any password. \n"}, {"name": "auth.signals.user_logged_in()", "path": "ref/contrib/auth#django.contrib.auth.signals.user_logged_in", "type": "django.contrib.auth", "text": " \nuser_logged_in()  \nSent when a user logs in successfully. Arguments sent with this signal:  \nsender  The class of the user that just logged in. \nrequest  The current HttpRequest instance. \nuser  The user instance that just logged in.  \n"}, {"name": "auth.signals.user_logged_out()", "path": "ref/contrib/auth#django.contrib.auth.signals.user_logged_out", "type": "django.contrib.auth", "text": " \nuser_logged_out()  \nSent when the logout method is called.  \nsender  As above: the class of the user that just logged out or None if the user was not authenticated. \nrequest  The current HttpRequest instance. \nuser  The user instance that just logged out or None if the user was not authenticated.  \n"}, {"name": "auth.signals.user_login_failed()", "path": "ref/contrib/auth#django.contrib.auth.signals.user_login_failed", "type": "django.contrib.auth", "text": " \nuser_login_failed()  \nSent when the user failed to login successfully  \nsender  The name of the module used for authentication. \ncredentials  A dictionary of keyword arguments containing the user credentials that were passed to authenticate() or your own custom authentication backend. Credentials matching a set of \u2018sensitive\u2019 patterns, (including password) will not be sent in the clear as part of the signal. \nrequest  The HttpRequest object, if one was provided to authenticate().  \n"}, {"name": "auth.update_session_auth_hash()", "path": "topics/auth/default#django.contrib.auth.update_session_auth_hash", "type": "django.contrib.auth", "text": " \nupdate_session_auth_hash(request, user)  \nThis function takes the current request and the updated user object from which the new session hash will be derived and updates the session hash appropriately. It also rotates the session key so that a stolen session cookie will be invalidated. Example usage: from django.contrib.auth import update_session_auth_hash\n\ndef password_change(request):\n    if request.method == 'POST':\n        form = PasswordChangeForm(user=request.user, data=request.POST)\n        if form.is_valid():\n            form.save()\n            update_session_auth_hash(request, form.user)\n    else:\n        ...\n \n"}, {"name": "auth.validators.ASCIIUsernameValidator", "path": "ref/contrib/auth#django.contrib.auth.validators.ASCIIUsernameValidator", "type": "django.contrib.auth", "text": " \nclass validators.ASCIIUsernameValidator  \nA field validator allowing only ASCII letters and numbers, in addition to @, ., +, -, and _. \n"}, {"name": "auth.validators.UnicodeUsernameValidator", "path": "ref/contrib/auth#django.contrib.auth.validators.UnicodeUsernameValidator", "type": "django.contrib.auth", "text": " \nclass validators.UnicodeUsernameValidator  \nA field validator allowing Unicode characters, in addition to @, ., +, -, and _. The default validator for User.username. \n"}, {"name": "auth.views.LoginView", "path": "topics/auth/default#django.contrib.auth.views.LoginView", "type": "django.contrib.auth", "text": " \nclass LoginView  \nURL name: login See the URL documentation for details on using named URL patterns. Methods and Attributes  \ntemplate_name  \nThe name of a template to display for the view used to log the user in. Defaults to registration/login.html. \n  \nnext_page  \n New in Django 4.0.  The URL to redirect to after login. Defaults to LOGIN_REDIRECT_URL. \n  \nredirect_field_name  \nThe name of a GET field containing the URL to redirect to after login. Defaults to next. Overrides the get_default_redirect_url() URL if the given GET parameter is passed. \n  \nauthentication_form  \nA callable (typically a form class) to use for authentication. Defaults to AuthenticationForm. \n  \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n  \nredirect_authenticated_user  \nA boolean that controls whether or not authenticated users accessing the login page will be redirected as if they had just successfully logged in. Defaults to False.  Warning If you enable redirect_authenticated_user, other websites will be able to determine if their visitors are authenticated on your site by requesting redirect URLs to image files on your website. To avoid this \u201csocial media fingerprinting\u201d information leakage, host all images and your favicon on a separate domain. Enabling redirect_authenticated_user can also result in a redirect loop when using the permission_required() decorator unless the raise_exception parameter is used.  \n  \nsuccess_url_allowed_hosts  \nA set of hosts, in addition to request.get_host(), that are safe for redirecting after login. Defaults to an empty set. \n  \nget_default_redirect_url()  \n New in Django 4.0.  Returns the URL to redirect to after login. The default implementation resolves and returns next_page if set, or LOGIN_REDIRECT_URL otherwise. \n Here\u2019s what LoginView does:  If called via GET, it displays a login form that POSTs to the same URL. More on this in a bit. If called via POST with user submitted credentials, it tries to log the user in. If login is successful, the view redirects to the URL specified in next. If next isn\u2019t provided, it redirects to settings.LOGIN_REDIRECT_URL (which defaults to /accounts/profile/). If login isn\u2019t successful, it redisplays the login form.  It\u2019s your responsibility to provide the html for the login template , called registration/login.html by default. This template gets passed four template context variables:  \nform: A Form object representing the AuthenticationForm. \nnext: The URL to redirect to after successful login. This may contain a query string, too. \nsite: The current Site, according to the SITE_ID setting. If you don\u2019t have the site framework installed, this will be set to an instance of RequestSite, which derives the site name and domain from the current HttpRequest. \nsite_name: An alias for site.name. If you don\u2019t have the site framework installed, this will be set to the value of request.META['SERVER_NAME']. For more on sites, see The \u201csites\u201d framework.  If you\u2019d prefer not to call the template registration/login.html, you can pass the template_name parameter via the extra arguments to the as_view method in your URLconf. For example, this URLconf line would use myapp/login.html instead: path('accounts/login/', auth_views.LoginView.as_view(template_name='myapp/login.html')),\n You can also specify the name of the GET field which contains the URL to redirect to after login using redirect_field_name. By default, the field is called next. Here\u2019s a sample registration/login.html template you can use as a starting point. It assumes you have a base.html template that defines a content block: {% extends \"base.html\" %}\n\n{% block content %}\n\n{% if form.errors %}\n<p>Your username and password didn't match. Please try again.</p>\n{% endif %}\n\n{% if next %}\n    {% if user.is_authenticated %}\n    <p>Your account doesn't have access to this page. To proceed,\n    please login with an account that has access.</p>\n    {% else %}\n    <p>Please login to see this page.</p>\n    {% endif %}\n{% endif %}\n\n<form method=\"post\" action=\"{% url 'login' %}\">\n{% csrf_token %}\n<table>\n<tr>\n    <td>{{ form.username.label_tag }}</td>\n    <td>{{ form.username }}</td>\n</tr>\n<tr>\n    <td>{{ form.password.label_tag }}</td>\n    <td>{{ form.password }}</td>\n</tr>\n</table>\n\n<input type=\"submit\" value=\"login\">\n<input type=\"hidden\" name=\"next\" value=\"{{ next }}\">\n</form>\n\n{# Assumes you set up the password_reset view in your URLconf #}\n<p><a href=\"{% url 'password_reset' %}\">Lost password?</a></p>\n\n{% endblock %}\n If you have customized authentication (see Customizing Authentication) you can use a custom authentication form by setting the authentication_form attribute. This form must accept a request keyword argument in its __init__() method and provide a get_user() method which returns the authenticated user object (this method is only ever called after successful form validation). \n"}, {"name": "auth.views.LoginView.authentication_form", "path": "topics/auth/default#django.contrib.auth.views.LoginView.authentication_form", "type": "django.contrib.auth", "text": " \nauthentication_form  \nA callable (typically a form class) to use for authentication. Defaults to AuthenticationForm. \n"}, {"name": "auth.views.LoginView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.LoginView.extra_context", "type": "django.contrib.auth", "text": " \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n"}, {"name": "auth.views.LoginView.get_default_redirect_url()", "path": "topics/auth/default#django.contrib.auth.views.LoginView.get_default_redirect_url", "type": "django.contrib.auth", "text": " \nget_default_redirect_url()  \n New in Django 4.0.  Returns the URL to redirect to after login. The default implementation resolves and returns next_page if set, or LOGIN_REDIRECT_URL otherwise. \n"}, {"name": "auth.views.LoginView.next_page", "path": "topics/auth/default#django.contrib.auth.views.LoginView.next_page", "type": "django.contrib.auth", "text": " \nnext_page  \n New in Django 4.0.  The URL to redirect to after login. Defaults to LOGIN_REDIRECT_URL. \n"}, {"name": "auth.views.LoginView.redirect_authenticated_user", "path": "topics/auth/default#django.contrib.auth.views.LoginView.redirect_authenticated_user", "type": "django.contrib.auth", "text": " \nredirect_authenticated_user  \nA boolean that controls whether or not authenticated users accessing the login page will be redirected as if they had just successfully logged in. Defaults to False.  Warning If you enable redirect_authenticated_user, other websites will be able to determine if their visitors are authenticated on your site by requesting redirect URLs to image files on your website. To avoid this \u201csocial media fingerprinting\u201d information leakage, host all images and your favicon on a separate domain. Enabling redirect_authenticated_user can also result in a redirect loop when using the permission_required() decorator unless the raise_exception parameter is used.  \n"}, {"name": "auth.views.LoginView.redirect_field_name", "path": "topics/auth/default#django.contrib.auth.views.LoginView.redirect_field_name", "type": "django.contrib.auth", "text": " \nredirect_field_name  \nThe name of a GET field containing the URL to redirect to after login. Defaults to next. Overrides the get_default_redirect_url() URL if the given GET parameter is passed. \n"}, {"name": "auth.views.LoginView.success_url_allowed_hosts", "path": "topics/auth/default#django.contrib.auth.views.LoginView.success_url_allowed_hosts", "type": "django.contrib.auth", "text": " \nsuccess_url_allowed_hosts  \nA set of hosts, in addition to request.get_host(), that are safe for redirecting after login. Defaults to an empty set. \n"}, {"name": "auth.views.LoginView.template_name", "path": "topics/auth/default#django.contrib.auth.views.LoginView.template_name", "type": "django.contrib.auth", "text": " \ntemplate_name  \nThe name of a template to display for the view used to log the user in. Defaults to registration/login.html. \n"}, {"name": "auth.views.logout_then_login()", "path": "topics/auth/default#django.contrib.auth.views.logout_then_login", "type": "django.contrib.auth", "text": " \nlogout_then_login(request, login_url=None)  \nLogs a user out, then redirects to the login page. URL name: No default URL provided Optional arguments:  \nlogin_url: The URL of the login page to redirect to. Defaults to settings.LOGIN_URL if not supplied.  \n"}, {"name": "auth.views.LogoutView", "path": "topics/auth/default#django.contrib.auth.views.LogoutView", "type": "django.contrib.auth", "text": " \nclass LogoutView  \nLogs a user out. URL name: logout Attributes:  \nnext_page  \nThe URL to redirect to after logout. Defaults to LOGOUT_REDIRECT_URL. \n  \ntemplate_name  \nThe full name of a template to display after logging the user out. Defaults to registration/logged_out.html. \n  \nredirect_field_name  \nThe name of a GET field containing the URL to redirect to after log out. Defaults to 'next'. Overrides the next_page URL if the given GET parameter is passed. \n  \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n  \nsuccess_url_allowed_hosts  \nA set of hosts, in addition to request.get_host(), that are safe for redirecting after logout. Defaults to an empty set. \n Template context:  \ntitle: The string \u201cLogged out\u201d, localized. \nsite: The current Site, according to the SITE_ID setting. If you don\u2019t have the site framework installed, this will be set to an instance of RequestSite, which derives the site name and domain from the current HttpRequest. \nsite_name: An alias for site.name. If you don\u2019t have the site framework installed, this will be set to the value of request.META['SERVER_NAME']. For more on sites, see The \u201csites\u201d framework.  \n"}, {"name": "auth.views.LogoutView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.extra_context", "type": "django.contrib.auth", "text": " \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n"}, {"name": "auth.views.LogoutView.next_page", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.next_page", "type": "django.contrib.auth", "text": " \nnext_page  \nThe URL to redirect to after logout. Defaults to LOGOUT_REDIRECT_URL. \n"}, {"name": "auth.views.LogoutView.redirect_field_name", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.redirect_field_name", "type": "django.contrib.auth", "text": " \nredirect_field_name  \nThe name of a GET field containing the URL to redirect to after log out. Defaults to 'next'. Overrides the next_page URL if the given GET parameter is passed. \n"}, {"name": "auth.views.LogoutView.success_url_allowed_hosts", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.success_url_allowed_hosts", "type": "django.contrib.auth", "text": " \nsuccess_url_allowed_hosts  \nA set of hosts, in addition to request.get_host(), that are safe for redirecting after logout. Defaults to an empty set. \n"}, {"name": "auth.views.LogoutView.template_name", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.template_name", "type": "django.contrib.auth", "text": " \ntemplate_name  \nThe full name of a template to display after logging the user out. Defaults to registration/logged_out.html. \n"}, {"name": "auth.views.PasswordChangeDoneView", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeDoneView", "type": "django.contrib.auth", "text": " \nclass PasswordChangeDoneView  \nURL name: password_change_done The page shown after a user has changed their password. Attributes:  \ntemplate_name  \nThe full name of a template to use. Defaults to registration/password_change_done.html if not supplied. \n  \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n \n"}, {"name": "auth.views.PasswordChangeDoneView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeDoneView.extra_context", "type": "django.contrib.auth", "text": " \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n"}, {"name": "auth.views.PasswordChangeDoneView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeDoneView.template_name", "type": "django.contrib.auth", "text": " \ntemplate_name  \nThe full name of a template to use. Defaults to registration/password_change_done.html if not supplied. \n"}, {"name": "auth.views.PasswordChangeView", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView", "type": "django.contrib.auth", "text": " \nclass PasswordChangeView  \nURL name: password_change Allows a user to change their password. Attributes:  \nsuccess_url  \nThe URL to redirect to after a successful password change. Defaults to 'password_change_done'. \n  \nform_class  \nA custom \u201cchange password\u201d form which must accept a user keyword argument. The form is responsible for actually changing the user\u2019s password. Defaults to PasswordChangeForm. \n  \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n Template context:  \nform: The password change form (see form_class above).  \n"}, {"name": "auth.views.PasswordChangeView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView.extra_context", "type": "django.contrib.auth", "text": " \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n"}, {"name": "auth.views.PasswordChangeView.form_class", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView.form_class", "type": "django.contrib.auth", "text": " \nform_class  \nA custom \u201cchange password\u201d form which must accept a user keyword argument. The form is responsible for actually changing the user\u2019s password. Defaults to PasswordChangeForm. \n"}, {"name": "auth.views.PasswordChangeView.success_url", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView.success_url", "type": "django.contrib.auth", "text": " \nsuccess_url  \nThe URL to redirect to after a successful password change. Defaults to 'password_change_done'. \n"}, {"name": "auth.views.PasswordResetCompleteView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetCompleteView", "type": "django.contrib.auth", "text": " \nclass PasswordResetCompleteView  \nURL name: password_reset_complete Presents a view which informs the user that the password has been successfully changed. Attributes:  \ntemplate_name  \nThe full name of a template to display the view. Defaults to registration/password_reset_complete.html. \n  \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n \n"}, {"name": "auth.views.PasswordResetCompleteView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetCompleteView.extra_context", "type": "django.contrib.auth", "text": " \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n"}, {"name": "auth.views.PasswordResetCompleteView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetCompleteView.template_name", "type": "django.contrib.auth", "text": " \ntemplate_name  \nThe full name of a template to display the view. Defaults to registration/password_reset_complete.html. \n"}, {"name": "auth.views.PasswordResetConfirmView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView", "type": "django.contrib.auth", "text": " \nclass PasswordResetConfirmView  \nURL name: password_reset_confirm Presents a form for entering a new password. Keyword arguments from the URL:  \nuidb64: The user\u2019s id encoded in base 64. \ntoken: Token to check that the password is valid.  Attributes:  \ntemplate_name  \nThe full name of a template to display the confirm password view. Default value is registration/password_reset_confirm.html. \n  \ntoken_generator  \nInstance of the class to check the password. This will default to default_token_generator, it\u2019s an instance of django.contrib.auth.tokens.PasswordResetTokenGenerator. \n  \npost_reset_login  \nA boolean indicating if the user should be automatically authenticated after a successful password reset. Defaults to False. \n  \npost_reset_login_backend  \nA dotted path to the authentication backend to use when authenticating a user if post_reset_login is True. Required only if you have multiple AUTHENTICATION_BACKENDS configured. Defaults to None. \n  \nform_class  \nForm that will be used to set the password. Defaults to SetPasswordForm. \n  \nsuccess_url  \nURL to redirect after the password reset done. Defaults to 'password_reset_complete'. \n  \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n  \nreset_url_token  \nToken parameter displayed as a component of password reset URLs. Defaults to 'set-password'. \n Template context:  \nform: The form (see form_class above) for setting the new user\u2019s password. \nvalidlink: Boolean, True if the link (combination of uidb64 and token) is valid or unused yet.  \n"}, {"name": "auth.views.PasswordResetConfirmView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.extra_context", "type": "django.contrib.auth", "text": " \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n"}, {"name": "auth.views.PasswordResetConfirmView.form_class", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.form_class", "type": "django.contrib.auth", "text": " \nform_class  \nForm that will be used to set the password. Defaults to SetPasswordForm. \n"}, {"name": "auth.views.PasswordResetConfirmView.post_reset_login", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.post_reset_login", "type": "django.contrib.auth", "text": " \npost_reset_login  \nA boolean indicating if the user should be automatically authenticated after a successful password reset. Defaults to False. \n"}, {"name": "auth.views.PasswordResetConfirmView.post_reset_login_backend", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.post_reset_login_backend", "type": "django.contrib.auth", "text": " \npost_reset_login_backend  \nA dotted path to the authentication backend to use when authenticating a user if post_reset_login is True. Required only if you have multiple AUTHENTICATION_BACKENDS configured. Defaults to None. \n"}, {"name": "auth.views.PasswordResetConfirmView.reset_url_token", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.reset_url_token", "type": "django.contrib.auth", "text": " \nreset_url_token  \nToken parameter displayed as a component of password reset URLs. Defaults to 'set-password'. \n"}, {"name": "auth.views.PasswordResetConfirmView.success_url", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.success_url", "type": "django.contrib.auth", "text": " \nsuccess_url  \nURL to redirect after the password reset done. Defaults to 'password_reset_complete'. \n"}, {"name": "auth.views.PasswordResetConfirmView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.template_name", "type": "django.contrib.auth", "text": " \ntemplate_name  \nThe full name of a template to display the confirm password view. Default value is registration/password_reset_confirm.html. \n"}, {"name": "auth.views.PasswordResetConfirmView.token_generator", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.token_generator", "type": "django.contrib.auth", "text": " \ntoken_generator  \nInstance of the class to check the password. This will default to default_token_generator, it\u2019s an instance of django.contrib.auth.tokens.PasswordResetTokenGenerator. \n"}, {"name": "auth.views.PasswordResetDoneView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetDoneView", "type": "django.contrib.auth", "text": " \nclass PasswordResetDoneView  \nURL name: password_reset_done The page shown after a user has been emailed a link to reset their password. This view is called by default if the PasswordResetView doesn\u2019t have an explicit success_url URL set.  Note If the email address provided does not exist in the system, the user is inactive, or has an unusable password, the user will still be redirected to this view but no email will be sent.  Attributes:  \ntemplate_name  \nThe full name of a template to use. Defaults to registration/password_reset_done.html if not supplied. \n  \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n \n"}, {"name": "auth.views.PasswordResetDoneView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetDoneView.extra_context", "type": "django.contrib.auth", "text": " \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n"}, {"name": "auth.views.PasswordResetDoneView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetDoneView.template_name", "type": "django.contrib.auth", "text": " \ntemplate_name  \nThe full name of a template to use. Defaults to registration/password_reset_done.html if not supplied. \n"}, {"name": "auth.views.PasswordResetView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView", "type": "django.contrib.auth", "text": " \nclass PasswordResetView  \nURL name: password_reset Allows a user to reset their password by generating a one-time use link that can be used to reset the password, and sending that link to the user\u2019s registered email address. If the email address provided does not exist in the system, this view won\u2019t send an email, but the user won\u2019t receive any error message either. This prevents information leaking to potential attackers. If you want to provide an error message in this case, you can subclass PasswordResetForm and use the form_class attribute.  Note Be aware that sending an email costs extra time, hence you may be vulnerable to an email address enumeration timing attack due to a difference between the duration of a reset request for an existing email address and the duration of a reset request for a nonexistent email address. To reduce the overhead, you can use a 3rd party package that allows to send emails asynchronously, e.g. django-mailer.  Users flagged with an unusable password (see set_unusable_password() aren\u2019t allowed to request a password reset to prevent misuse when using an external authentication source like LDAP. Note that they won\u2019t receive any error message since this would expose their account\u2019s existence but no mail will be sent either. Attributes:  \ntemplate_name  \nThe full name of a template to use for displaying the password reset form. Defaults to registration/password_reset_form.html if not supplied. \n  \nform_class  \nForm that will be used to get the email of the user to reset the password for. Defaults to PasswordResetForm. \n  \nemail_template_name  \nThe full name of a template to use for generating the email with the reset password link. Defaults to registration/password_reset_email.html if not supplied. \n  \nsubject_template_name  \nThe full name of a template to use for the subject of the email with the reset password link. Defaults to registration/password_reset_subject.txt if not supplied. \n  \ntoken_generator  \nInstance of the class to check the one time link. This will default to default_token_generator, it\u2019s an instance of django.contrib.auth.tokens.PasswordResetTokenGenerator. \n  \nsuccess_url  \nThe URL to redirect to after a successful password reset request. Defaults to 'password_reset_done'. \n  \nfrom_email  \nA valid email address. By default Django uses the DEFAULT_FROM_EMAIL. \n  \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n  \nhtml_email_template_name  \nThe full name of a template to use for generating a text/html multipart email with the password reset link. By default, HTML email is not sent. \n  \nextra_email_context  \nA dictionary of context data that will be available in the email template. It can be used to override default template context values listed below e.g. domain. \n Template context:  \nform: The form (see form_class above) for resetting the user\u2019s password.  Email template context:  \nemail: An alias for user.email\n \nuser: The current User, according to the email form field. Only active users are able to reset their passwords (User.is_active is True). \nsite_name: An alias for site.name. If you don\u2019t have the site framework installed, this will be set to the value of request.META['SERVER_NAME']. For more on sites, see The \u201csites\u201d framework. \ndomain: An alias for site.domain. If you don\u2019t have the site framework installed, this will be set to the value of request.get_host(). \nprotocol: http or https \nuid: The user\u2019s primary key encoded in base 64. \ntoken: Token to check that the reset link is valid.  Sample registration/password_reset_email.html (email body template): Someone asked for password reset for email {{ email }}. Follow the link below:\n{{ protocol}}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}\n The same template context is used for subject template. Subject must be single line plain text string. \n"}, {"name": "auth.views.PasswordResetView.email_template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.email_template_name", "type": "django.contrib.auth", "text": " \nemail_template_name  \nThe full name of a template to use for generating the email with the reset password link. Defaults to registration/password_reset_email.html if not supplied. \n"}, {"name": "auth.views.PasswordResetView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.extra_context", "type": "django.contrib.auth", "text": " \nextra_context  \nA dictionary of context data that will be added to the default context data passed to the template. \n"}, {"name": "auth.views.PasswordResetView.extra_email_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.extra_email_context", "type": "django.contrib.auth", "text": " \nextra_email_context  \nA dictionary of context data that will be available in the email template. It can be used to override default template context values listed below e.g. domain. \n"}, {"name": "auth.views.PasswordResetView.form_class", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.form_class", "type": "django.contrib.auth", "text": " \nform_class  \nForm that will be used to get the email of the user to reset the password for. Defaults to PasswordResetForm. \n"}, {"name": "auth.views.PasswordResetView.from_email", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.from_email", "type": "django.contrib.auth", "text": " \nfrom_email  \nA valid email address. By default Django uses the DEFAULT_FROM_EMAIL. \n"}, {"name": "auth.views.PasswordResetView.html_email_template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.html_email_template_name", "type": "django.contrib.auth", "text": " \nhtml_email_template_name  \nThe full name of a template to use for generating a text/html multipart email with the password reset link. By default, HTML email is not sent. \n"}, {"name": "auth.views.PasswordResetView.subject_template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.subject_template_name", "type": "django.contrib.auth", "text": " \nsubject_template_name  \nThe full name of a template to use for the subject of the email with the reset password link. Defaults to registration/password_reset_subject.txt if not supplied. \n"}, {"name": "auth.views.PasswordResetView.success_url", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.success_url", "type": "django.contrib.auth", "text": " \nsuccess_url  \nThe URL to redirect to after a successful password reset request. Defaults to 'password_reset_done'. \n"}, {"name": "auth.views.PasswordResetView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.template_name", "type": "django.contrib.auth", "text": " \ntemplate_name  \nThe full name of a template to use for displaying the password reset form. Defaults to registration/password_reset_form.html if not supplied. \n"}, {"name": "auth.views.PasswordResetView.token_generator", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.token_generator", "type": "django.contrib.auth", "text": " \ntoken_generator  \nInstance of the class to check the one time link. This will default to default_token_generator, it\u2019s an instance of django.contrib.auth.tokens.PasswordResetTokenGenerator. \n"}, {"name": "auth.views.redirect_to_login()", "path": "topics/auth/default#django.contrib.auth.views.redirect_to_login", "type": "django.contrib.auth", "text": " \nredirect_to_login(next, login_url=None, redirect_field_name='next')  \nRedirects to the login page, and then back to another URL after a successful login. Required arguments:  \nnext: The URL to redirect to after a successful login.  Optional arguments:  \nlogin_url: The URL of the login page to redirect to. Defaults to settings.LOGIN_URL if not supplied. \nredirect_field_name: The name of a GET field containing the URL to redirect to after log out. Overrides next if the given GET parameter is passed.  \n"}, {"name": "Base views", "path": "ref/class-based-views/base", "type": "API", "text": "Base views The following three classes provide much of the functionality needed to create Django views. You may think of them as parent views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins and Generic class-based views. Many of Django\u2019s built-in class-based views inherit from other class-based views or various mixins. Because this inheritance chain is very important, the ancestor classes are documented under the section title of Ancestors (MRO). MRO is an acronym for Method Resolution Order. View  \nclass django.views.generic.base.View  \nThe master class-based base view. All other class-based views inherit from this base class. It isn\u2019t strictly a generic view and thus can also be imported from django.views. Method Flowchart  setup() dispatch() http_method_not_allowed() options()  Example views.py: from django.http import HttpResponse\nfrom django.views import View\n\nclass MyView(View):\n\n    def get(self, request, *args, **kwargs):\n        return HttpResponse('Hello, World!')\n Example urls.py: from django.urls import path\n\nfrom myapp.views import MyView\n\nurlpatterns = [\n    path('mine/', MyView.as_view(), name='my-view'),\n]\n Attributes  \nhttp_method_names  \nThe list of HTTP method names that this view will accept. Default: ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']\n \n Methods  \nclassmethod as_view(**initkwargs)  \nReturns a callable view that takes a request and returns a response: response = MyView.as_view()(request)\n The returned view has view_class and view_initkwargs attributes. When the view is called during the request/response cycle, the setup() method assigns the HttpRequest to the view\u2019s request attribute, and any positional and/or keyword arguments captured from the URL pattern to the args and kwargs attributes, respectively. Then dispatch() is called. \n  \nsetup(request, *args, **kwargs)  \nPerforms key view initialization prior to dispatch(). If overriding this method, you must call super(). \n  \ndispatch(request, *args, **kwargs)  \nThe view part of the view \u2013 the method that accepts a request argument plus arguments, and returns an HTTP response. The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a GET will be delegated to get(), a POST to post(), and so on. By default, a HEAD request will be delegated to get(). If you need to handle HEAD requests in a different way than GET, you can override the head() method. See Supporting other HTTP methods for an example. \n  \nhttp_method_not_allowed(request, *args, **kwargs)  \nIf the view was called with an HTTP method it doesn\u2019t support, this method is called instead. The default implementation returns HttpResponseNotAllowed with a list of allowed methods in plain text. \n  \noptions(request, *args, **kwargs)  \nHandles responding to requests for the OPTIONS HTTP verb. Returns a response with the Allow header containing a list of the view\u2019s allowed HTTP method names. \n \n TemplateView  \nclass django.views.generic.base.TemplateView  \nRenders a given template, with the context containing parameters captured in the URL. Ancestors (MRO) This view inherits methods and attributes from the following views:  django.views.generic.base.TemplateResponseMixin django.views.generic.base.ContextMixin django.views.generic.base.View  Method Flowchart  setup() dispatch() http_method_not_allowed() get_context_data()  Example views.py: from django.views.generic.base import TemplateView\n\nfrom articles.models import Article\n\nclass HomePageView(TemplateView):\n\n    template_name = \"home.html\"\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['latest_articles'] = Article.objects.all()[:5]\n        return context\n Example urls.py: from django.urls import path\n\nfrom myapp.views import HomePageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n]\n Context  Populated (through ContextMixin) with the keyword arguments captured from the URL pattern that served the view. You can also add context using the extra_context keyword argument for as_view().  \n RedirectView  \nclass django.views.generic.base.RedirectView  \nRedirects to a given URL. The given URL may contain dictionary-style string formatting, which will be interpolated against the parameters captured in the URL. Because keyword interpolation is always done (even if no arguments are passed in), any \"%\" characters in the URL must be written as \"%%\" so that Python will convert them to a single percent sign on output. If the given URL is None, Django will return an HttpResponseGone (410). Ancestors (MRO) This view inherits methods and attributes from the following view:  django.views.generic.base.View  Method Flowchart  setup() dispatch() http_method_not_allowed() get_redirect_url()  Example views.py: from django.shortcuts import get_object_or_404\nfrom django.views.generic.base import RedirectView\n\nfrom articles.models import Article\n\nclass ArticleCounterRedirectView(RedirectView):\n\n    permanent = False\n    query_string = True\n    pattern_name = 'article-detail'\n\n    def get_redirect_url(self, *args, **kwargs):\n        article = get_object_or_404(Article, pk=kwargs['pk'])\n        article.update_counter()\n        return super().get_redirect_url(*args, **kwargs)\n Example urls.py: from django.urls import path\nfrom django.views.generic.base import RedirectView\n\nfrom article.views import ArticleCounterRedirectView, ArticleDetailView\n\nurlpatterns = [\n    path('counter/<int:pk>/', ArticleCounterRedirectView.as_view(), name='article-counter'),\n    path('details/<int:pk>/', ArticleDetailView.as_view(), name='article-detail'),\n    path('go-to-django/', RedirectView.as_view(url='https://www.djangoproject.com/'), name='go-to-django'),\n]\n Attributes  \nurl  \nThe URL to redirect to, as a string. Or None to raise a 410 (Gone) HTTP error. \n  \npattern_name  \nThe name of the URL pattern to redirect to. Reversing will be done using the same args and kwargs as are passed in for this view. \n  \npermanent  \nWhether the redirect should be permanent. The only difference here is the HTTP status code returned. If True, then the redirect will use status code 301. If False, then the redirect will use status code 302. By default, permanent is False. \n  \nquery_string  \nWhether to pass along the GET query string to the new location. If True, then the query string is appended to the URL. If False, then the query string is discarded. By default, query_string is False. \n Methods  \nget_redirect_url(*args, **kwargs)  \nConstructs the target URL for redirection. The args and kwargs arguments are positional and/or keyword arguments captured from the URL pattern, respectively. The default implementation uses url as a starting string and performs expansion of % named parameters in that string using the named groups captured in the URL. If url is not set, get_redirect_url() tries to reverse the pattern_name using what was captured in the URL (both named and unnamed groups are used). If requested by query_string, it will also append the query string to the generated URL. Subclasses may implement any behavior they wish, as long as the method returns a redirect-ready URL string. \n \n\n"}, {"name": "Built-in class-based generic views", "path": "topics/class-based-views/generic-display", "type": "Guides", "text": "Built-in class-based generic views Writing web applications can be monotonous, because we repeat certain patterns again and again. Django tries to take away some of that monotony at the model and template layers, but web developers also experience this boredom at the view level. Django\u2019s generic views were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code. We can recognize certain common tasks, like displaying a list of objects, and write code that displays a list of any object. Then the model in question can be passed as an extra argument to the URLconf. Django ships with generic views to do the following:  Display list and detail pages for a single object. If we were creating an application to manage conferences then a TalkListView and a RegisteredUserListView would be examples of list views. A single talk page is an example of what we call a \u201cdetail\u201d view. Present date-based objects in year/month/day archive pages, associated detail, and \u201clatest\u201d pages. Allow users to create, update, and delete objects \u2013 with or without authorization.  Taken together, these views provide interfaces to perform the most common tasks developers encounter. Extending generic views There\u2019s no question that using generic views can speed up development substantially. In most projects, however, there comes a moment when the generic views no longer suffice. Indeed, the most common question asked by new Django developers is how to make generic views handle a wider array of situations. This is one of the reasons generic views were redesigned for the 1.3 release - previously, they were view functions with a bewildering array of options; now, rather than passing in a large amount of configuration in the URLconf, the recommended way to extend generic views is to subclass them, and override their attributes or methods. That said, generic views will have a limit. If you find you\u2019re struggling to implement your view as a subclass of a generic view, then you may find it more effective to write just the code you need, using your own class-based or functional views. More examples of generic views are available in some third party applications, or you could write your own as needed. Generic views of objects TemplateView certainly is useful, but Django\u2019s generic views really shine when it comes to presenting views of your database content. Because it\u2019s such a common task, Django comes with a handful of built-in generic views to help generate list and detail views of objects. Let\u2019s start by looking at some examples of showing a list of objects or an individual object. We\u2019ll be using these models: # models.py\nfrom django.db import models\n\nclass Publisher(models.Model):\n    name = models.CharField(max_length=30)\n    address = models.CharField(max_length=50)\n    city = models.CharField(max_length=60)\n    state_province = models.CharField(max_length=30)\n    country = models.CharField(max_length=50)\n    website = models.URLField()\n\n    class Meta:\n        ordering = [\"-name\"]\n\n    def __str__(self):\n        return self.name\n\nclass Author(models.Model):\n    salutation = models.CharField(max_length=10)\n    name = models.CharField(max_length=200)\n    email = models.EmailField()\n    headshot = models.ImageField(upload_to='author_headshots')\n\n    def __str__(self):\n        return self.name\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    authors = models.ManyToManyField('Author')\n    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)\n    publication_date = models.DateField()\n Now we need to define a view: # views.py\nfrom django.views.generic import ListView\nfrom books.models import Publisher\n\nclass PublisherListView(ListView):\n    model = Publisher\n Finally hook that view into your urls: # urls.py\nfrom django.urls import path\nfrom books.views import PublisherListView\n\nurlpatterns = [\n    path('publishers/', PublisherListView.as_view()),\n]\n That\u2019s all the Python code we need to write. We still need to write a template, however. We could explicitly tell the view which template to use by adding a template_name attribute to the view, but in the absence of an explicit template Django will infer one from the object\u2019s name. In this case, the inferred template will be \"books/publisher_list.html\" \u2013 the \u201cbooks\u201d part comes from the name of the app that defines the model, while the \u201cpublisher\u201d bit is the lowercased version of the model\u2019s name.  Note Thus, when (for example) the APP_DIRS option of a DjangoTemplates backend is set to True in TEMPLATES, a template location could be: /path/to/project/books/templates/books/publisher_list.html  This template will be rendered against a context containing a variable called object_list that contains all the publisher objects. A template might look like this: {% extends \"base.html\" %}\n\n{% block content %}\n    <h2>Publishers</h2>\n    <ul>\n        {% for publisher in object_list %}\n            <li>{{ publisher.name }}</li>\n        {% endfor %}\n    </ul>\n{% endblock %}\n That\u2019s really all there is to it. All the cool features of generic views come from changing the attributes set on the generic view. The generic views reference documents all the generic views and their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views. Making \u201cfriendly\u201d template contexts You might have noticed that our sample publisher list template stores all the publishers in a variable named object_list. While this works just fine, it isn\u2019t all that \u201cfriendly\u201d to template authors: they have to \u201cjust know\u201d that they\u2019re dealing with publishers here. Well, if you\u2019re dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the lowercased version of the model class\u2019 name. This is provided in addition to the default object_list entry, but contains exactly the same data, i.e. publisher_list. If this still isn\u2019t a good match, you can manually set the name of the context variable. The context_object_name attribute on a generic view specifies the context variable to use: # views.py\nfrom django.views.generic import ListView\nfrom books.models import Publisher\n\nclass PublisherListView(ListView):\n    model = Publisher\n    context_object_name = 'my_favorite_publishers'\n Providing a useful context_object_name is always a good idea. Your coworkers who design templates will thank you. Adding extra context Often you need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The DetailView generic view provides the publisher to the context, but how do we get additional information in that template? The answer is to subclass DetailView and provide your own implementation of the get_context_data method. The default implementation adds the object being displayed to the template, but you can override it to send more: from django.views.generic import DetailView\nfrom books.models import Book, Publisher\n\nclass PublisherDetailView(DetailView):\n\n    model = Publisher\n\n    def get_context_data(self, **kwargs):\n        # Call the base implementation first to get a context\n        context = super().get_context_data(**kwargs)\n        # Add in a QuerySet of all the books\n        context['book_list'] = Book.objects.all()\n        return context\n  Note Generally, get_context_data will merge the context data of all parent classes with those of the current class. To preserve this behavior in your own classes where you want to alter the context, you should be sure to call get_context_data on the super class. When no two classes try to define the same key, this will give the expected results. However if any class attempts to override a key after parent classes have set it (after the call to super), any children of that class will also need to explicitly set it after super if they want to be sure to override all parents. If you\u2019re having trouble, review the method resolution order of your view. Another consideration is that the context data from class-based generic views will override data provided by context processors; see get_context_data() for an example.  Viewing subsets of objects Now let\u2019s take a closer look at the model argument we\u2019ve been using all along. The model argument, which specifies the database model that the view will operate upon, is available on all the generic views that operate on a single object or a collection of objects. However, the model argument is not the only way to specify the objects that the view will operate upon \u2013 you can also specify the list of objects using the queryset argument: from django.views.generic import DetailView\nfrom books.models import Publisher\n\nclass PublisherDetailView(DetailView):\n\n    context_object_name = 'publisher'\n    queryset = Publisher.objects.all()\n Specifying model = Publisher is shorthand for saying queryset =\nPublisher.objects.all(). However, by using queryset to define a filtered list of objects you can be more specific about the objects that will be visible in the view (see Making queries for more information about QuerySet objects, and see the class-based views reference for the complete details). To pick an example, we might want to order a list of books by publication date, with the most recent first: from django.views.generic import ListView\nfrom books.models import Book\n\nclass BookListView(ListView):\n    queryset = Book.objects.order_by('-publication_date')\n    context_object_name = 'book_list'\n That\u2019s a pretty minimal example, but it illustrates the idea nicely. You\u2019ll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique: from django.views.generic import ListView\nfrom books.models import Book\n\nclass AcmeBookListView(ListView):\n\n    context_object_name = 'book_list'\n    queryset = Book.objects.filter(publisher__name='ACME Publishing')\n    template_name = 'books/acme_list.html'\n Notice that along with a filtered queryset, we\u2019re also using a custom template name. If we didn\u2019t, the generic view would use the same template as the \u201cvanilla\u201d object list, which might not be what we want. Also notice that this isn\u2019t a very elegant way of doing publisher-specific books. If we want to add another publisher page, we\u2019d need another handful of lines in the URLconf, and more than a few publishers would get unreasonable. We\u2019ll deal with this problem in the next section.  Note If you get a 404 when requesting /books/acme/, check to ensure you actually have a Publisher with the name \u2018ACME Publishing\u2019. Generic views have an allow_empty parameter for this case. See the class-based-views reference for more details.  Dynamic filtering Another common need is to filter down the objects given in a list page by some key in the URL. Earlier we hard-coded the publisher\u2019s name in the URLconf, but what if we wanted to write a view that displayed all the books by some arbitrary publisher? Handily, the ListView has a get_queryset() method we can override. By default, it returns the value of the queryset attribute, but we can use it to add more logic. The key part to making this work is that when class-based views are called, various useful things are stored on self; as well as the request (self.request) this includes the positional (self.args) and name-based (self.kwargs) arguments captured according to the URLconf. Here, we have a URLconf with a single captured group: # urls.py\nfrom django.urls import path\nfrom books.views import PublisherBookListView\n\nurlpatterns = [\n    path('books/<publisher>/', PublisherBookListView.as_view()),\n]\n Next, we\u2019ll write the PublisherBookListView view itself: # views.py\nfrom django.shortcuts import get_object_or_404\nfrom django.views.generic import ListView\nfrom books.models import Book, Publisher\n\nclass PublisherBookListView(ListView):\n\n    template_name = 'books/books_by_publisher.html'\n\n    def get_queryset(self):\n        self.publisher = get_object_or_404(Publisher, name=self.kwargs['publisher'])\n        return Book.objects.filter(publisher=self.publisher)\n Using get_queryset to add logic to the queryset selection is as convenient as it is powerful. For instance, if we wanted, we could use self.request.user to filter using the current user, or other more complex logic. We can also add the publisher into the context at the same time, so we can use it in the template: # ...\n\ndef get_context_data(self, **kwargs):\n    # Call the base implementation first to get a context\n    context = super().get_context_data(**kwargs)\n    # Add in the publisher\n    context['publisher'] = self.publisher\n    return context\n Performing extra work The last common pattern we\u2019ll look at involves doing some extra work before or after calling the generic view. Imagine we had a last_accessed field on our Author model that we were using to keep track of the last time anybody looked at that author: # models.py\nfrom django.db import models\n\nclass Author(models.Model):\n    salutation = models.CharField(max_length=10)\n    name = models.CharField(max_length=200)\n    email = models.EmailField()\n    headshot = models.ImageField(upload_to='author_headshots')\n    last_accessed = models.DateTimeField()\n The generic DetailView class wouldn\u2019t know anything about this field, but once again we could write a custom view to keep that field updated. First, we\u2019d need to add an author detail bit in the URLconf to point to a custom view: from django.urls import path\nfrom books.views import AuthorDetailView\n\nurlpatterns = [\n    #...\n    path('authors/<int:pk>/', AuthorDetailView.as_view(), name='author-detail'),\n]\n Then we\u2019d write our new view \u2013 get_object is the method that retrieves the object \u2013 so we override it and wrap the call: from django.utils import timezone\nfrom django.views.generic import DetailView\nfrom books.models import Author\n\nclass AuthorDetailView(DetailView):\n\n    queryset = Author.objects.all()\n\n    def get_object(self):\n        obj = super().get_object()\n        # Record the last accessed date\n        obj.last_accessed = timezone.now()\n        obj.save()\n        return obj\n  Note The URLconf here uses the named group pk - this name is the default name that DetailView uses to find the value of the primary key used to filter the queryset. If you want to call the group something else, you can set pk_url_kwarg on the view. \n"}, {"name": "Built-in class-based views API", "path": "ref/class-based-views/index", "type": "API", "text": "Built-in class-based views API Class-based views API reference. For introductory material, see the Class-based views topic guide.  \nBase views View TemplateView RedirectView   \nGeneric display views DetailView ListView   \nGeneric editing views FormView CreateView UpdateView DeleteView   \nGeneric date views ArchiveIndexView YearArchiveView MonthArchiveView WeekArchiveView DayArchiveView TodayArchiveView DateDetailView   \nClass-based views mixins \nSimple mixins ContextMixin TemplateResponseMixin   \nSingle object mixins SingleObjectMixin SingleObjectTemplateResponseMixin   \nMultiple object mixins MultipleObjectMixin MultipleObjectTemplateResponseMixin   \nEditing mixins FormMixin ModelFormMixin ProcessFormView DeletionMixin   \nDate-based mixins YearMixin MonthMixin DayMixin WeekMixin DateMixin BaseDateListView     \nClass-based generic views - flattened index \nSimple generic views View TemplateView RedirectView   \nDetail Views DetailView   \nList Views ListView   \nEditing views FormView CreateView UpdateView DeleteView   \nDate-based views ArchiveIndexView YearArchiveView MonthArchiveView WeekArchiveView DayArchiveView TodayArchiveView DateDetailView      Specification Each request served by a class-based view has an independent state; therefore, it is safe to store state variables on the instance (i.e., self.foo = 3 is a thread-safe operation). A class-based view is deployed into a URL pattern using the as_view() classmethod: urlpatterns = [\n    path('view/', MyView.as_view(size=42)),\n]\n  Thread safety with view arguments Arguments passed to a view are shared between every instance of a view. This means that you shouldn\u2019t use a list, dictionary, or any other mutable object as an argument to a view. If you do and the shared object is modified, the actions of one user visiting your view could have an effect on subsequent users visiting the same view.  Arguments passed into as_view() will be assigned onto the instance that is used to service a request. Using the previous example, this means that every request on MyView is able to use self.size. Arguments must correspond to attributes that already exist on the class (return True on a hasattr check). Base vs Generic views Base class-based views can be thought of as parent views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins which extend what base views can do. Django\u2019s generic views are built off of those base views, and were developed as a shortcut for common usage patterns such as displaying the details of an object. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to repeat yourself. Most generic views require the queryset key, which is a QuerySet instance; see Making queries for more information about QuerySet objects.\n"}, {"name": "Built-in template tags and filters", "path": "ref/templates/builtins", "type": "API", "text": "Built-in template tags and filters This document describes Django\u2019s built-in template tags and filters. It is recommended that you use the automatic documentation, if available, as this will also include documentation for any custom tags or filters installed. Built-in tag reference autoescape Controls the current auto-escaping behavior. This tag takes either on or off as an argument and that determines whether auto-escaping is in effect inside the block. The block is closed with an endautoescape ending tag. When auto-escaping is in effect, all variable content has HTML escaping applied to it before placing the result into the output (but after any filters have been applied). This is equivalent to manually applying the escape filter to each variable. The only exceptions are variables that are already marked as \u201csafe\u201d from escaping, either by the code that populated the variable, or because it has had the safe or escape filters applied. Sample usage: {% autoescape on %}\n    {{ body }}\n{% endautoescape %}\n block Defines a block that can be overridden by child templates. See Template inheritance for more information. comment Ignores everything between {% comment %} and {% endcomment %}. An optional note may be inserted in the first tag. For example, this is useful when commenting out code for documenting why the code was disabled. Sample usage: <p>Rendered text with {{ pub_date|date:\"c\" }}</p>\n{% comment \"Optional note\" %}\n    <p>Commented out text with {{ create_date|date:\"c\" }}</p>\n{% endcomment %}\n comment tags cannot be nested. csrf_token This tag is used for CSRF protection, as described in the documentation for Cross Site Request Forgeries. cycle Produces one of its arguments each time this tag is encountered. The first argument is produced on the first encounter, the second argument on the second encounter, and so forth. Once all arguments are exhausted, the tag cycles to the first argument and produces it again. This tag is particularly useful in a loop: {% for o in some_list %}\n    <tr class=\"{% cycle 'row1' 'row2' %}\">\n        ...\n    </tr>\n{% endfor %}\n The first iteration produces HTML that refers to class row1, the second to row2, the third to row1 again, and so on for each iteration of the loop. You can use variables, too. For example, if you have two template variables, rowvalue1 and rowvalue2, you can alternate between their values like this: {% for o in some_list %}\n    <tr class=\"{% cycle rowvalue1 rowvalue2 %}\">\n        ...\n    </tr>\n{% endfor %}\n Variables included in the cycle will be escaped. You can disable auto-escaping with: {% for o in some_list %}\n    <tr class=\"{% autoescape off %}{% cycle rowvalue1 rowvalue2 %}{% endautoescape %}\">\n        ...\n    </tr>\n{% endfor %}\n You can mix variables and strings: {% for o in some_list %}\n    <tr class=\"{% cycle 'row1' rowvalue2 'row3' %}\">\n        ...\n    </tr>\n{% endfor %}\n In some cases you might want to refer to the current value of a cycle without advancing to the next value. To do this, give the {% cycle %} tag a name, using \u201cas\u201d, like this: {% cycle 'row1' 'row2' as rowcolors %}\n From then on, you can insert the current value of the cycle wherever you\u2019d like in your template by referencing the cycle name as a context variable. If you want to move the cycle to the next value independently of the original cycle tag, you can use another cycle tag and specify the name of the variable. So, the following template: <tr>\n    <td class=\"{% cycle 'row1' 'row2' as rowcolors %}\">...</td>\n    <td class=\"{{ rowcolors }}\">...</td>\n</tr>\n<tr>\n    <td class=\"{% cycle rowcolors %}\">...</td>\n    <td class=\"{{ rowcolors }}\">...</td>\n</tr>\n would output: <tr>\n    <td class=\"row1\">...</td>\n    <td class=\"row1\">...</td>\n</tr>\n<tr>\n    <td class=\"row2\">...</td>\n    <td class=\"row2\">...</td>\n</tr>\n You can use any number of values in a cycle tag, separated by spaces. Values enclosed in single quotes (') or double quotes (\") are treated as string literals, while values without quotes are treated as template variables. By default, when you use the as keyword with the cycle tag, the usage of {% cycle %} that initiates the cycle will itself produce the first value in the cycle. This could be a problem if you want to use the value in a nested loop or an included template. If you only want to declare the cycle but not produce the first value, you can add a silent keyword as the last keyword in the tag. For example: {% for obj in some_list %}\n    {% cycle 'row1' 'row2' as rowcolors silent %}\n    <tr class=\"{{ rowcolors }}\">{% include \"subtemplate.html\" %}</tr>\n{% endfor %}\n This will output a list of <tr> elements with class alternating between row1 and row2. The subtemplate will have access to rowcolors in its context and the value will match the class of the <tr> that encloses it. If the silent keyword were to be omitted, row1 and row2 would be emitted as normal text, outside the <tr> element. When the silent keyword is used on a cycle definition, the silence automatically applies to all subsequent uses of that specific cycle tag. The following template would output nothing, even though the second call to {% cycle %} doesn\u2019t specify silent: {% cycle 'row1' 'row2' as rowcolors silent %}\n{% cycle rowcolors %}\n You can use the resetcycle tag to make a {% cycle %} tag restart from its first value when it\u2019s next encountered. debug Outputs a whole load of debugging information, including the current context and imported modules. extends Signals that this template extends a parent template. This tag can be used in two ways:  \n{% extends \"base.html\" %} (with quotes) uses the literal value \"base.html\" as the name of the parent template to extend. \n{% extends variable %} uses the value of variable. If the variable evaluates to a string, Django will use that string as the name of the parent template. If the variable evaluates to a Template object, Django will use that object as the parent template.  See Template inheritance for more information. Normally the template name is relative to the template loader\u2019s root directory. A string argument may also be a relative path starting with ./ or ../. For example, assume the following directory structure: dir1/\n    template.html\n    base2.html\n    my/\n        base3.html\nbase1.html\n In template.html, the following paths would be valid: {% extends \"./base2.html\" %}\n{% extends \"../base1.html\" %}\n{% extends \"./my/base3.html\" %}\n filter Filters the contents of the block through one or more filters. Multiple filters can be specified with pipes and filters can have arguments, just as in variable syntax. Note that the block includes all the text between the filter and endfilter tags. Sample usage: {% filter force_escape|lower %}\n    This text will be HTML-escaped, and will appear in all lowercase.\n{% endfilter %}\n  Note The escape and safe filters are not acceptable arguments. Instead, use the autoescape tag to manage autoescaping for blocks of template code.  firstof Outputs the first argument variable that is not \u201cfalse\u201d (i.e. exists, is not empty, is not a false boolean value, and is not a zero numeric value). Outputs nothing if all the passed variables are \u201cfalse\u201d. Sample usage: {% firstof var1 var2 var3 %}\n This is equivalent to: {% if var1 %}\n    {{ var1 }}\n{% elif var2 %}\n    {{ var2 }}\n{% elif var3 %}\n    {{ var3 }}\n{% endif %}\n You can also use a literal string as a fallback value in case all passed variables are False: {% firstof var1 var2 var3 \"fallback value\" %}\n This tag auto-escapes variable values. You can disable auto-escaping with: {% autoescape off %}\n    {% firstof var1 var2 var3 \"<strong>fallback value</strong>\" %}\n{% endautoescape %}\n Or if only some variables should be escaped, you can use: {% firstof var1 var2|safe var3 \"<strong>fallback value</strong>\"|safe %}\n You can use the syntax {% firstof var1 var2 var3 as value %} to store the output inside a variable. for Loops over each item in an array, making the item available in a context variable. For example, to display a list of athletes provided in athlete_list: <ul>\n{% for athlete in athlete_list %}\n    <li>{{ athlete.name }}</li>\n{% endfor %}\n</ul>\n You can loop over a list in reverse by using {% for obj in list reversed %}. If you need to loop over a list of lists, you can unpack the values in each sublist into individual variables. For example, if your context contains a list of (x,y) coordinates called points, you could use the following to output the list of points: {% for x, y in points %}\n    There is a point at {{ x }},{{ y }}\n{% endfor %}\n This can also be useful if you need to access the items in a dictionary. For example, if your context contained a dictionary data, the following would display the keys and values of the dictionary: {% for key, value in data.items %}\n    {{ key }}: {{ value }}\n{% endfor %}\n Keep in mind that for the dot operator, dictionary key lookup takes precedence over method lookup. Therefore if the data dictionary contains a key named 'items', data.items will return data['items'] instead of data.items(). Avoid adding keys that are named like dictionary methods if you want to use those methods in a template (items, values, keys, etc.). Read more about the lookup order of the dot operator in the documentation of template variables. The for loop sets a number of variables available within the loop:   \nVariable Description   \nforloop.counter The current iteration of the loop (1-indexed)  \nforloop.counter0 The current iteration of the loop (0-indexed)  \nforloop.revcounter The number of iterations from the end of the loop (1-indexed)  \nforloop.revcounter0 The number of iterations from the end of the loop (0-indexed)  \nforloop.first True if this is the first time through the loop  \nforloop.last True if this is the last time through the loop  \nforloop.parentloop For nested loops, this is the loop surrounding the current one   \nfor \u2026 empty\n The for tag can take an optional {% empty %} clause whose text is displayed if the given array is empty or could not be found: <ul>\n{% for athlete in athlete_list %}\n    <li>{{ athlete.name }}</li>\n{% empty %}\n    <li>Sorry, no athletes in this list.</li>\n{% endfor %}\n</ul>\n The above is equivalent to \u2013 but shorter, cleaner, and possibly faster than \u2013 the following: <ul>\n  {% if athlete_list %}\n    {% for athlete in athlete_list %}\n      <li>{{ athlete.name }}</li>\n    {% endfor %}\n  {% else %}\n    <li>Sorry, no athletes in this list.</li>\n  {% endif %}\n</ul>\n if The {% if %} tag evaluates a variable, and if that variable is \u201ctrue\u201d (i.e. exists, is not empty, and is not a false boolean value) the contents of the block are output: {% if athlete_list %}\n    Number of athletes: {{ athlete_list|length }}\n{% elif athlete_in_locker_room_list %}\n    Athletes should be out of the locker room soon!\n{% else %}\n    No athletes.\n{% endif %}\n In the above, if athlete_list is not empty, the number of athletes will be displayed by the {{ athlete_list|length }} variable. As you can see, the if tag may take one or several {% elif %} clauses, as well as an {% else %} clause that will be displayed if all previous conditions fail. These clauses are optional. Boolean operators if tags may use and, or or not to test a number of variables or to negate a given variable: {% if athlete_list and coach_list %}\n    Both athletes and coaches are available.\n{% endif %}\n\n{% if not athlete_list %}\n    There are no athletes.\n{% endif %}\n\n{% if athlete_list or coach_list %}\n    There are some athletes or some coaches.\n{% endif %}\n\n{% if not athlete_list or coach_list %}\n    There are no athletes or there are some coaches.\n{% endif %}\n\n{% if athlete_list and not coach_list %}\n    There are some athletes and absolutely no coaches.\n{% endif %}\n Use of both and and or clauses within the same tag is allowed, with and having higher precedence than or e.g.: {% if athlete_list and coach_list or cheerleader_list %}\n will be interpreted like: if (athlete_list and coach_list) or cheerleader_list\n Use of actual parentheses in the if tag is invalid syntax. If you need them to indicate precedence, you should use nested if tags. if tags may also use the operators ==, !=, <, >, <=, >=, in, not in, is, and is not which work as follows: \n== operator Equality. Example: {% if somevar == \"x\" %}\n  This appears if variable somevar equals the string \"x\"\n{% endif %}\n \n!= operator Inequality. Example: {% if somevar != \"x\" %}\n  This appears if variable somevar does not equal the string \"x\",\n  or if somevar is not found in the context\n{% endif %}\n \n< operator Less than. Example: {% if somevar < 100 %}\n  This appears if variable somevar is less than 100.\n{% endif %}\n \n> operator Greater than. Example: {% if somevar > 0 %}\n  This appears if variable somevar is greater than 0.\n{% endif %}\n \n<= operator Less than or equal to. Example: {% if somevar <= 100 %}\n  This appears if variable somevar is less than 100 or equal to 100.\n{% endif %}\n \n>= operator Greater than or equal to. Example: {% if somevar >= 1 %}\n  This appears if variable somevar is greater than 1 or equal to 1.\n{% endif %}\n \nin operator Contained within. This operator is supported by many Python containers to test whether the given value is in the container. The following are some examples of how x in y will be interpreted: {% if \"bc\" in \"abcdef\" %}\n  This appears since \"bc\" is a substring of \"abcdef\"\n{% endif %}\n\n{% if \"hello\" in greetings %}\n  If greetings is a list or set, one element of which is the string\n  \"hello\", this will appear.\n{% endif %}\n\n{% if user in users %}\n  If users is a QuerySet, this will appear if user is an\n  instance that belongs to the QuerySet.\n{% endif %}\n \nnot in operator Not contained within. This is the negation of the in operator. \nis operator Object identity. Tests if two values are the same object. Example: {% if somevar is True %}\n  This appears if and only if somevar is True.\n{% endif %}\n\n{% if somevar is None %}\n  This appears if somevar is None, or if somevar is not found in the context.\n{% endif %}\n \nis not operator Negated object identity. Tests if two values are not the same object. This is the negation of the is operator. Example: {% if somevar is not True %}\n  This appears if somevar is not True, or if somevar is not found in the\n  context.\n{% endif %}\n\n{% if somevar is not None %}\n  This appears if and only if somevar is not None.\n{% endif %}\n Filters You can also use filters in the if expression. For example: {% if messages|length >= 100 %}\n   You have lots of messages today!\n{% endif %}\n Complex expressions All of the above can be combined to form complex expressions. For such expressions, it can be important to know how the operators are grouped when the expression is evaluated - that is, the precedence rules. The precedence of the operators, from lowest to highest, is as follows:  or and not in \n==, !=, <, >, <=, >=\n  (This follows Python exactly). So, for example, the following complex if tag: {% if a == b or c == d and e %}\n \u2026will be interpreted as: (a == b) or ((c == d) and e)\n If you need different precedence, you will need to use nested if tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules. The comparison operators cannot be \u2018chained\u2019 like in Python or in mathematical notation. For example, instead of using: {% if a > b > c %}  (WRONG)\n you should use: {% if a > b and b > c %}\n ifchanged Check if a value has changed from the last iteration of a loop. The {% ifchanged %} block tag is used within a loop. It has two possible uses.  \nChecks its own rendered contents against its previous state and only displays the content if it has changed. For example, this displays a list of days, only displaying the month if it changes: <h1>Archive for {{ year }}</h1>\n\n{% for date in days %}\n    {% ifchanged %}<h3>{{ date|date:\"F\" }}</h3>{% endifchanged %}\n    <a href=\"{{ date|date:\"M/d\"|lower }}/\">{{ date|date:\"j\" }}</a>\n{% endfor %}\n  \nIf given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed: {% for date in days %}\n    {% ifchanged date.date %} {{ date.date }} {% endifchanged %}\n    {% ifchanged date.hour date.date %}\n        {{ date.hour }}\n    {% endifchanged %}\n{% endfor %}\n   The ifchanged tag can also take an optional {% else %} clause that will be displayed if the value has not changed: {% for match in matches %}\n    <div style=\"background-color:\n        {% ifchanged match.ballot_id %}\n            {% cycle \"red\" \"blue\" %}\n        {% else %}\n            gray\n        {% endifchanged %}\n    \">{{ match }}</div>\n{% endfor %}\n include Loads a template and renders it with the current context. This is a way of \u201cincluding\u201d other templates within a template. The template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes. This example includes the contents of the template \"foo/bar.html\": {% include \"foo/bar.html\" %}\n Normally the template name is relative to the template loader\u2019s root directory. A string argument may also be a relative path starting with ./ or ../ as described in the extends tag. This example includes the contents of the template whose name is contained in the variable template_name: {% include template_name %}\n The variable may also be any object with a render() method that accepts a context. This allows you to reference a compiled Template in your context. Additionally, the variable may be an iterable of template names, in which case the first that can be loaded will be used, as per select_template(). An included template is rendered within the context of the template that includes it. This example produces the output \"Hello, John!\":  Context: variable person is set to \"John\" and variable greeting is set to \"Hello\".  \nTemplate: {% include \"name_snippet.html\" %}\n  \nThe name_snippet.html template: {{ greeting }}, {{ person|default:\"friend\" }}!\n   You can pass additional context to the template using keyword arguments: {% include \"name_snippet.html\" with person=\"Jane\" greeting=\"Hello\" %}\n If you want to render the context only with the variables provided (or even no variables at all), use the only option. No other variables are available to the included template: {% include \"name_snippet.html\" with greeting=\"Hi\" only %}\n  Note The include tag should be considered as an implementation of \u201crender this subtemplate and include the HTML\u201d, not as \u201cparse this subtemplate and include its contents as if it were part of the parent\u201d. This means that there is no shared state between included templates \u2013 each include is a completely independent rendering process. Blocks are evaluated before they are included. This means that a template that includes blocks from another will contain blocks that have already been evaluated and rendered - not blocks that can be overridden by, for example, an extending template.  load Loads a custom template tag set. For example, the following template would load all the tags and filters registered in somelibrary and otherlibrary located in package package: {% load somelibrary package.otherlibrary %}\n You can also selectively load individual filters or tags from a library, using the from argument. In this example, the template tags/filters named foo and bar will be loaded from somelibrary: {% load foo bar from somelibrary %}\n See Custom tag and filter libraries for more information. lorem Displays random \u201clorem ipsum\u201d Latin text. This is useful for providing sample data in templates. Usage: {% lorem [count] [method] [random] %}\n The {% lorem %} tag can be used with zero, one, two or three arguments. The arguments are:   \nArgument Description   \ncount A number (or variable) containing the number of paragraphs or words to generate (default is 1).  \nmethod Either w for words, p for HTML paragraphs or b for plain-text paragraph blocks (default is b).  \nrandom The word random, which if given, does not use the common paragraph (\u201cLorem ipsum dolor sit amet\u2026\u201d) when generating text.   Examples:  \n{% lorem %} will output the common \u201clorem ipsum\u201d paragraph. \n{% lorem 3 p %} will output the common \u201clorem ipsum\u201d paragraph and two random paragraphs each wrapped in HTML <p> tags. \n{% lorem 2 w random %} will output two random Latin words.  now Displays the current date and/or time, using a format according to the given string. Such string can contain format specifiers characters as described in the date filter section. Example: It is {% now \"jS F Y H:i\" %}\n Note that you can backslash-escape a format string if you want to use the \u201craw\u201d value. In this example, both \u201co\u201d and \u201cf\u201d are backslash-escaped, because otherwise each is a format string that displays the year and the time, respectively: It is the {% now \"jS \\o\\f F\" %}\n This would display as \u201cIt is the 4th of September\u201d.  Note The format passed can also be one of the predefined ones DATE_FORMAT, DATETIME_FORMAT, SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT. The predefined formats may vary depending on the current locale and if Format localization is enabled, e.g.: It is {% now \"SHORT_DATETIME_FORMAT\" %}\n  You can also use the syntax {% now \"Y\" as current_year %} to store the output (as a string) inside a variable. This is useful if you want to use {% now %} inside a template tag like blocktranslate for example: {% now \"Y\" as current_year %}\n{% blocktranslate %}Copyright {{ current_year }}{% endblocktranslate %}\n regroup Regroups a list of alike objects by a common attribute. This complex tag is best illustrated by way of an example: say that cities is a list of cities represented by dictionaries containing \"name\", \"population\", and \"country\" keys: cities = [\n    {'name': 'Mumbai', 'population': '19,000,000', 'country': 'India'},\n    {'name': 'Calcutta', 'population': '15,000,000', 'country': 'India'},\n    {'name': 'New York', 'population': '20,000,000', 'country': 'USA'},\n    {'name': 'Chicago', 'population': '7,000,000', 'country': 'USA'},\n    {'name': 'Tokyo', 'population': '33,000,000', 'country': 'Japan'},\n]\n \u2026and you\u2019d like to display a hierarchical list that is ordered by country, like this:  India Mumbai: 19,000,000 Calcutta: 15,000,000   USA New York: 20,000,000 Chicago: 7,000,000   Japan Tokyo: 33,000,000    You can use the {% regroup %} tag to group the list of cities by country. The following snippet of template code would accomplish this: {% regroup cities by country as country_list %}\n\n<ul>\n{% for country in country_list %}\n    <li>{{ country.grouper }}\n    <ul>\n        {% for city in country.list %}\n          <li>{{ city.name }}: {{ city.population }}</li>\n        {% endfor %}\n    </ul>\n    </li>\n{% endfor %}\n</ul>\n Let\u2019s walk through this example. {% regroup %} takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we\u2019re regrouping the cities list by the country attribute and calling the result country_list. {% regroup %} produces a list (in this case, country_list) of group objects. Group objects are instances of namedtuple() with two fields:  \ngrouper \u2013 the item that was grouped by (e.g., the string \u201cIndia\u201d or \u201cJapan\u201d). \nlist \u2013 a list of all items in this group (e.g., a list of all cities with country=\u2019India\u2019).  Because {% regroup %} produces namedtuple() objects, you can also write the previous example as: {% regroup cities by country as country_list %}\n\n<ul>\n{% for country, local_cities in country_list %}\n    <li>{{ country }}\n    <ul>\n        {% for city in local_cities %}\n          <li>{{ city.name }}: {{ city.population }}</li>\n        {% endfor %}\n    </ul>\n    </li>\n{% endfor %}\n</ul>\n Note that {% regroup %} does not order its input! Our example relies on the fact that the cities list was ordered by country in the first place. If the cities list did not order its members by country, the regrouping would naively display more than one group for a single country. For example, say the cities list was set to this (note that the countries are not grouped together): cities = [\n    {'name': 'Mumbai', 'population': '19,000,000', 'country': 'India'},\n    {'name': 'New York', 'population': '20,000,000', 'country': 'USA'},\n    {'name': 'Calcutta', 'population': '15,000,000', 'country': 'India'},\n    {'name': 'Chicago', 'population': '7,000,000', 'country': 'USA'},\n    {'name': 'Tokyo', 'population': '33,000,000', 'country': 'Japan'},\n]\n With this input for cities, the example {% regroup %} template code above would result in the following output:  India Mumbai: 19,000,000   USA New York: 20,000,000   India Calcutta: 15,000,000   USA Chicago: 7,000,000   Japan Tokyo: 33,000,000    The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it. Another solution is to sort the data in the template using the dictsort filter, if your data is in a list of dictionaries: {% regroup cities|dictsort:\"country\" by country as country_list %}\n Grouping on other properties Any valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the \u201ccountry\u201d field is a foreign key to a class with an attribute \u201cdescription,\u201d you could use: {% regroup cities by country.description as country_list %}\n Or, if country is a field with choices, it will have a get_FOO_display() method available as an attribute, allowing you to group on the display string rather than the choices key: {% regroup cities by get_country_display as country_list %}\n {{ country.grouper }} will now display the value fields from the choices set rather than the keys. resetcycle Resets a previous cycle so that it restarts from its first item at its next encounter. Without arguments, {% resetcycle %} will reset the last {% cycle %} defined in the template. Example usage: {% for coach in coach_list %}\n    <h1>{{ coach.name }}</h1>\n    {% for athlete in coach.athlete_set.all %}\n        <p class=\"{% cycle 'odd' 'even' %}\">{{ athlete.name }}</p>\n    {% endfor %}\n    {% resetcycle %}\n{% endfor %}\n This example would return this HTML: <h1>Jos\u00e9 Mourinho</h1>\n<p class=\"odd\">Thibaut Courtois</p>\n<p class=\"even\">John Terry</p>\n<p class=\"odd\">Eden Hazard</p>\n\n<h1>Carlo Ancelotti</h1>\n<p class=\"odd\">Manuel Neuer</p>\n<p class=\"even\">Thomas M\u00fcller</p>\n Notice how the first block ends with class=\"odd\" and the new one starts with class=\"odd\". Without the {% resetcycle %} tag, the second block would start with class=\"even\". You can also reset named cycle tags: {% for item in list %}\n    <p class=\"{% cycle 'odd' 'even' as stripe %} {% cycle 'major' 'minor' 'minor' 'minor' 'minor' as tick %}\">\n        {{ item.data }}\n    </p>\n    {% ifchanged item.category %}\n        <h1>{{ item.category }}</h1>\n        {% if not forloop.first %}{% resetcycle tick %}{% endif %}\n    {% endifchanged %}\n{% endfor %}\n In this example, we have both the alternating odd/even rows and a \u201cmajor\u201d row every fifth row. Only the five-row cycle is reset when a category changes. spaceless Removes whitespace between HTML tags. This includes tab characters and newlines. Example usage: {% spaceless %}\n    <p>\n        <a href=\"foo/\">Foo</a>\n    </p>\n{% endspaceless %}\n This example would return this HTML: <p><a href=\"foo/\">Foo</a></p>\n Only space between tags is removed \u2013 not space between tags and text. In this example, the space around Hello won\u2019t be stripped: {% spaceless %}\n    <strong>\n        Hello\n    </strong>\n{% endspaceless %}\n templatetag Outputs one of the syntax characters used to compose template tags. The template system has no concept of \u201cescaping\u201d individual characters. However, you can use the {% templatetag %} tag to display one of the template tag character combinations. The argument tells which template bit to output:   \nArgument Outputs   \nopenblock {%  \ncloseblock %}  \nopenvariable {{  \nclosevariable }}  \nopenbrace {  \nclosebrace }  \nopencomment {#  \nclosecomment #}   Sample usage: The {% templatetag openblock %} characters open a block.\n See also the verbatim tag for another way of including these characters. url Returns an absolute path reference (a URL without the domain name) matching a given view and optional parameters. Any special characters in the resulting path will be encoded using iri_to_uri(). This is a way to output links without violating the DRY principle by having to hard-code URLs in your templates: {% url 'some-url-name' v1 v2 %}\n The first argument is a URL pattern name. It can be a quoted literal or any other context variable. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax: {% url 'some-url-name' arg1=v1 arg2=v2 %}\n Do not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present. For example, suppose you have a view, app_views.client, whose URLconf takes a client ID (here, client() is a method inside the views file app_views.py). The URLconf line might look like this: path('client/<int:id>/', app_views.client, name='app-views-client')\n If this app\u2019s URLconf is included into the project\u2019s URLconf under a path such as this: path('clients/', include('project_name.app_name.urls'))\n \u2026then, in a template, you can create a link to this view like this: {% url 'app-views-client' client.id %}\n The template tag will output the string /clients/client/123/. Note that if the URL you\u2019re reversing doesn\u2019t exist, you\u2019ll get an NoReverseMatch exception raised, which will cause your site to display an error page. If you\u2019d like to retrieve a URL without displaying it, you can use a slightly different call: {% url 'some-url-name' arg arg2 as the_url %}\n\n<a href=\"{{ the_url }}\">I'm linking to {{ the_url }}</a>\n The scope of the variable created by the as var syntax is the {% block %} in which the {% url %} tag appears. This {% url ... as var %} syntax will not cause an error if the view is missing. In practice you\u2019ll use this to link to views that are optional: {% url 'some-url-name' as the_url %}\n{% if the_url %}\n  <a href=\"{{ the_url }}\">Link to optional stuff</a>\n{% endif %}\n If you\u2019d like to retrieve a namespaced URL, specify the fully qualified name: {% url 'myapp:view-name' %}\n This will follow the normal namespaced URL resolution strategy, including using any hints provided by the context as to the current application.  Warning Don\u2019t forget to put quotes around the URL pattern name, otherwise the value will be interpreted as a context variable!  verbatim Stops the template engine from rendering the contents of this block tag. A common use is to allow a JavaScript template layer that collides with Django\u2019s syntax. For example: {% verbatim %}\n    {{if dying}}Still alive.{{/if}}\n{% endverbatim %}\n You can also designate a specific closing tag, allowing the use of {% endverbatim %} as part of the unrendered contents: {% verbatim myblock %}\n    Avoid template rendering via the {% verbatim %}{% endverbatim %} block.\n{% endverbatim myblock %}\n widthratio For creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant. For example: <img src=\"bar.png\" alt=\"Bar\"\n     height=\"10\" width=\"{% widthratio this_value max_value max_width %}\">\n If this_value is 175, max_value is 200, and max_width is 100, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88). In some cases you might want to capture the result of widthratio in a variable. It can be useful, for instance, in a blocktranslate like this: {% widthratio this_value max_value max_width as width %}\n{% blocktranslate %}The width is: {{ width }}{% endblocktranslate %}\n with Caches a complex variable under a simpler name. This is useful when accessing an \u201cexpensive\u201d method (e.g., one that hits the database) multiple times. For example: {% with total=business.employees.count %}\n    {{ total }} employee{{ total|pluralize }}\n{% endwith %}\n The populated variable (in the example above, total) is only available between the {% with %} and {% endwith %} tags. You can assign more than one context variable: {% with alpha=1 beta=2 %}\n    ...\n{% endwith %}\n  Note The previous more verbose format is still supported: {% with business.employees.count as total %}  Built-in filter reference add Adds the argument to the value. For example: {{ value|add:\"2\" }}\n If value is 4, then the output will be 6. This filter will first try to coerce both values to integers. If this fails, it\u2019ll attempt to add the values together anyway. This will work on some data types (strings, list, etc.) and fail on others. If it fails, the result will be an empty string. For example, if we have: {{ first|add:second }}\n and first is [1, 2, 3] and second is [4, 5, 6], then the output will be [1, 2, 3, 4, 5, 6].  Warning Strings that can be coerced to integers will be summed, not concatenated, as in the first example above.  addslashes Adds slashes before quotes. Useful for escaping strings in CSV, for example. For example: {{ value|addslashes }}\n If value is \"I'm using Django\", the output will be \"I\\'m using Django\". capfirst Capitalizes the first character of the value. If the first character is not a letter, this filter has no effect. For example: {{ value|capfirst }}\n If value is \"django\", the output will be \"Django\". center Centers the value in a field of a given width. For example: \"{{ value|center:\"15\" }}\"\n If value is \"Django\", the output will be \"\u00a0\u00a0\u00a0\u00a0 Django\u00a0\u00a0\u00a0 \". cut Removes all values of arg from the given string. For example: {{ value|cut:\" \" }}\n If value is \"String with spaces\", the output will be \"Stringwithspaces\". date Formats a date according to the given format. Uses a similar format to PHP\u2019s date() function with some differences.  Note These format characters are not used in Django outside of templates. They were designed to be compatible with PHP to ease transitioning for designers.  Available format strings:   \nFormat character Description Example output   \nDay      \nd Day of the month, 2 digits with leading zeros. \n'01' to '31'\n  \nj Day of the month without leading zeros. \n'1' to '31'\n  \nD Day of the week, textual, 3 letters. 'Fri'  \nl Day of the week, textual, long. 'Friday'  \nS English ordinal suffix for day of the month, 2 characters. \n'st', 'nd', 'rd' or 'th'\n  \nw Day of the week, digits without leading zeros. \n'0' (Sunday) to '6' (Saturday)  \nz Day of the year. \n1 to 366\n  \nWeek      \nW ISO-8601 week number of year, with weeks starting on Monday. \n1, 53\n  \nMonth      \nm Month, 2 digits with leading zeros. \n'01' to '12'\n  \nn Month without leading zeros. \n'1' to '12'\n  \nM Month, textual, 3 letters. 'Jan'  \nb Month, textual, 3 letters, lowercase. 'jan'  \nE Month, locale specific alternative representation usually used for long date representation. \n'listopada' (for Polish locale, as opposed to 'Listopad')  \nF Month, textual, long. 'January'  \nN Month abbreviation in Associated Press style. Proprietary extension. \n'Jan.', 'Feb.', 'March', 'May'\n  \nt Number of days in the given month. \n28 to 31\n  \nYear      \ny Year, 2 digits with leading zeros. \n'00' to '99'\n  \nY Year, 4 digits with leading zeros. \n'0001', \u2026, '1999', \u2026, '9999'\n  \nL Boolean for whether it\u2019s a leap year. \nTrue or False\n  \no ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W) which uses leap weeks. See Y for the more common year format. '1999'  \nTime      \ng Hour, 12-hour format without leading zeros. \n'1' to '12'\n  \nG Hour, 24-hour format without leading zeros. \n'0' to '23'\n  \nh Hour, 12-hour format. \n'01' to '12'\n  \nH Hour, 24-hour format. \n'00' to '23'\n  \ni Minutes. \n'00' to '59'\n  \ns Seconds, 2 digits with leading zeros. \n'00' to '59'\n  \nu Microseconds. \n000000 to 999999\n  \na \n'a.m.' or 'p.m.' (Note that this is slightly different than PHP\u2019s output, because this includes periods to match Associated Press style.) 'a.m.'  \nA \n'AM' or 'PM'. 'AM'  \nf Time, in 12-hour hours and minutes, with minutes left off if they\u2019re zero. Proprietary extension. \n'1', '1:30'\n  \nP Time, in 12-hour hours, minutes and \u2018a.m.\u2019/\u2019p.m.\u2019, with minutes left off if they\u2019re zero and the special-case strings \u2018midnight\u2019 and \u2018noon\u2019 if appropriate. Proprietary extension. \n'1 a.m.', '1:30 p.m.', 'midnight', 'noon', '12:30 p.m.'\n  \nTimezone      \ne Timezone name. Could be in any format, or might return an empty string, depending on the datetime. \n'', 'GMT', '-500', 'US/Eastern', etc.  \nI Daylight saving time, whether it\u2019s in effect or not. \n'1' or '0'\n  \nO Difference to Greenwich time in hours. '+0200'  \nT Time zone of this machine. \n'EST', 'MDT'\n  \nZ Time zone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive. \n-43200 to 43200\n  \nDate/Time      \nc ISO 8601 format. (Note: unlike other formatters, such as \u201cZ\u201d, \u201cO\u201d or \u201cr\u201d, the \u201cc\u201d formatter will not add timezone offset if value is a naive datetime (see datetime.tzinfo). \n2008-01-02T10:30:00.000123+02:00, or 2008-01-02T10:30:00.000123 if the datetime is naive  \nr \nRFC 5322 formatted date. 'Thu, 21 Dec 2000 16:01:07 +0200'  \nU Seconds since the Unix Epoch (January 1 1970 00:00:00 UTC).     For example: {{ value|date:\"D d M Y\" }}\n If value is a datetime object (e.g., the result of datetime.datetime.now()), the output will be the string 'Wed 09 Jan 2008'. The format passed can be one of the predefined ones DATE_FORMAT, DATETIME_FORMAT, SHORT_DATE_FORMAT or SHORT_DATETIME_FORMAT, or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale. Assuming that USE_L10N is True and LANGUAGE_CODE is, for example, \"es\", then for: {{ value|date:\"SHORT_DATE_FORMAT\" }}\n the output would be the string \"09/01/2008\" (the \"SHORT_DATE_FORMAT\" format specifier for the es locale as shipped with Django is \"d/m/Y\"). When used without a format string, the DATE_FORMAT format specifier is used. Assuming the same settings as the previous example: {{ value|date }}\n outputs 9 de Enero de 2008 (the DATE_FORMAT format specifier for the es locale is r'j \\d\\e F \\d\\e Y'). Both \u201cd\u201d and \u201ce\u201d are backslash-escaped, because otherwise each is a format string that displays the day and the timezone name, respectively. You can combine date with the time filter to render a full representation of a datetime value. E.g.: {{ value|date:\"D d M Y\" }} {{ value|time:\"H:i\" }}\n default If value evaluates to False, uses the given default. Otherwise, uses the value. For example: {{ value|default:\"nothing\" }}\n If value is \"\" (the empty string), the output will be nothing. default_if_none If (and only if) value is None, uses the given default. Otherwise, uses the value. Note that if an empty string is given, the default value will not be used. Use the default filter if you want to fallback for empty strings. For example: {{ value|default_if_none:\"nothing\" }}\n If value is None, the output will be nothing. dictsort Takes a list of dictionaries and returns that list sorted by the key given in the argument. For example: {{ value|dictsort:\"name\" }}\n If value is: [\n    {'name': 'zed', 'age': 19},\n    {'name': 'amy', 'age': 22},\n    {'name': 'joe', 'age': 31},\n]\n then the output would be: [\n    {'name': 'amy', 'age': 22},\n    {'name': 'joe', 'age': 31},\n    {'name': 'zed', 'age': 19},\n]\n You can also do more complicated things like: {% for book in books|dictsort:\"author.age\" %}\n    * {{ book.title }} ({{ book.author.name }})\n{% endfor %}\n If books is: [\n    {'title': '1984', 'author': {'name': 'George', 'age': 45}},\n    {'title': 'Timequake', 'author': {'name': 'Kurt', 'age': 75}},\n    {'title': 'Alice', 'author': {'name': 'Lewis', 'age': 33}},\n]\n then the output would be: * Alice (Lewis)\n* 1984 (George)\n* Timequake (Kurt)\n dictsort can also order a list of lists (or any other object implementing __getitem__()) by elements at specified index. For example: {{ value|dictsort:0 }}\n If value is: [\n    ('a', '42'),\n    ('c', 'string'),\n    ('b', 'foo'),\n]\n then the output would be: [\n    ('a', '42'),\n    ('b', 'foo'),\n    ('c', 'string'),\n]\n You must pass the index as an integer rather than a string. The following produce empty output: {{ values|dictsort:\"0\" }}\n dictsortreversed Takes a list of dictionaries and returns that list sorted in reverse order by the key given in the argument. This works exactly the same as the above filter, but the returned value will be in reverse order. divisibleby Returns True if the value is divisible by the argument. For example: {{ value|divisibleby:\"3\" }}\n If value is 21, the output would be True. escape Escapes a string\u2019s HTML. Specifically, it makes these replacements:  \n< is converted to &lt;\n \n> is converted to &gt;\n \n' (single quote) is converted to &#x27;\n \n\" (double quote) is converted to &quot;\n \n& is converted to &amp;\n  Applying escape to a variable that would normally have auto-escaping applied to the result will only result in one round of escaping being done. So it is safe to use this function even in auto-escaping environments. If you want multiple escaping passes to be applied, use the force_escape filter. For example, you can apply escape to fields when autoescape is off: {% autoescape off %}\n    {{ title|escape }}\n{% endautoescape %}\n escapejs Escapes characters for use in JavaScript strings. This does not make the string safe for use in HTML or JavaScript template literals, but does protect you from syntax errors when using templates to generate JavaScript/JSON. For example: {{ value|escapejs }}\n If value is \"testing\\r\\njavascript 'string\\\" <b>escaping</b>\", the output will be \"testing\\\\u000D\\\\u000Ajavascript \\\\u0027string\\\\u0022 \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\". filesizeformat Formats the value like a \u2018human-readable\u2019 file size (i.e. '13 KB', '4.1 MB', '102 bytes', etc.). For example: {{ value|filesizeformat }}\n If value is 123456789, the output would be 117.7 MB.  File sizes and SI units Strictly speaking, filesizeformat does not conform to the International System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes are calculated in powers of 1024 (which is the case here). Instead, Django uses traditional unit names (KB, MB, GB, etc.) corresponding to names that are more commonly used.  first Returns the first item in a list. For example: {{ value|first }}\n If value is the list ['a', 'b', 'c'], the output will be 'a'. floatformat When used without an argument, rounds a floating-point number to one decimal place \u2013 but only if there\u2019s a decimal part to be displayed. For example:   \nvalue Template Output   \n34.23234 {{ value|floatformat }} 34.2  \n34.00000 {{ value|floatformat }} 34  \n34.26000 {{ value|floatformat }} 34.3   If used with a numeric integer argument, floatformat rounds a number to that many decimal places. For example:   \nvalue Template Output   \n34.23234 {{ value|floatformat:3 }} 34.232  \n34.00000 {{ value|floatformat:3 }} 34.000  \n34.26000 {{ value|floatformat:3 }} 34.260   Particularly useful is passing 0 (zero) as the argument which will round the float to the nearest integer.   \nvalue Template Output   \n34.23234 {{ value|floatformat:\"0\" }} 34  \n34.00000 {{ value|floatformat:\"0\" }} 34  \n39.56000 {{ value|floatformat:\"0\" }} 40   If the argument passed to floatformat is negative, it will round a number to that many decimal places \u2013 but only if there\u2019s a decimal part to be displayed. For example:   \nvalue Template Output   \n34.23234 {{ value|floatformat:\"-3\" }} 34.232  \n34.00000 {{ value|floatformat:\"-3\" }} 34  \n34.26000 {{ value|floatformat:\"-3\" }} 34.260   If the argument passed to floatformat has the g suffix, it will force grouping by the THOUSAND_SEPARATOR for the active locale. For example, when the active locale is en (English):   \nvalue Template Output   \n34232.34 {{ value|floatformat:\"2g\" }} 34,232.34  \n34232.06 {{ value|floatformat:\"g\" }} 34,232.1  \n34232.00 {{ value|floatformat:\"-3g\" }} 34,232   Output is always localized (independently of the {% localize off %} tag) unless the argument passed to floatformat has the u suffix, which will force disabling localization. For example, when the active locale is pl (Polish):   \nvalue Template Output   \n34.23234 {{ value|floatformat:\"3\" }} 34,232  \n34.23234 {{ value|floatformat:\"3u\" }} 34.232   Using floatformat with no argument is equivalent to using floatformat with an argument of -1.  Changed in Django 3.2: The g suffix to force grouping by thousand separators was added.   Changed in Django 4.0: floatformat template filter no longer depends on the USE_L10N setting and always returns localized output. The u suffix to force disabling localization was added.  force_escape Applies HTML escaping to a string (see the escape filter for details). This filter is applied immediately and returns a new, escaped string. This is useful in the rare cases where you need multiple escaping or want to apply other filters to the escaped results. Normally, you want to use the escape filter. For example, if you want to catch the <p> HTML elements created by the linebreaks filter: {% autoescape off %}\n    {{ body|linebreaks|force_escape }}\n{% endautoescape %}\n get_digit Given a whole number, returns the requested digit, where 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer. For example: {{ value|get_digit:\"2\" }}\n If value is 123456789, the output will be 8. iriencode Converts an IRI (Internationalized Resource Identifier) to a string that is suitable for including in a URL. This is necessary if you\u2019re trying to use strings containing non-ASCII characters in a URL. It\u2019s safe to use this filter on a string that has already gone through the urlencode filter. For example: {{ value|iriencode }}\n If value is \"?test=1&me=2\", the output will be \"?test=1&amp;me=2\". join Joins a list with a string, like Python\u2019s str.join(list) For example: {{ value|join:\" // \" }}\n If value is the list ['a', 'b', 'c'], the output will be the string \"a // b // c\". json_script Safely outputs a Python object as JSON, wrapped in a <script> tag, ready for use with JavaScript. Argument: HTML \u201cid\u201d of the <script> tag. For example: {{ value|json_script:\"hello-data\" }}\n If value is the dictionary {'hello': 'world'}, the output will be: <script id=\"hello-data\" type=\"application/json\">{\"hello\": \"world\"}</script>\n The resulting data can be accessed in JavaScript like this: const value = JSON.parse(document.getElementById('hello-data').textContent);\n XSS attacks are mitigated by escaping the characters \u201c<\u201d, \u201c>\u201d and \u201c&\u201d. For example if value is {'hello': 'world</script>&amp;'}, the output is: <script id=\"hello-data\" type=\"application/json\">{\"hello\": \"world\\\\u003C/script\\\\u003E\\\\u0026amp;\"}</script>\n This is compatible with a strict Content Security Policy that prohibits in-page script execution. It also maintains a clean separation between passive data and executable code. last Returns the last item in a list. For example: {{ value|last }}\n If value is the list ['a', 'b', 'c', 'd'], the output will be the string \"d\". length Returns the length of the value. This works for both strings and lists. For example: {{ value|length }}\n If value is ['a', 'b', 'c', 'd'] or \"abcd\", the output will be 4. The filter returns 0 for an undefined variable. length_is Returns True if the value\u2019s length is the argument, or False otherwise. For example: {{ value|length_is:\"4\" }}\n If value is ['a', 'b', 'c', 'd'] or \"abcd\", the output will be True. linebreaks Replaces line breaks in plain text with appropriate HTML; a single newline becomes an HTML line break (<br>) and a new line followed by a blank line becomes a paragraph break (</p>). For example: {{ value|linebreaks }}\n If value is Joel\\nis a slug, the output will be <p>Joel<br>is a\nslug</p>. linebreaksbr Converts all newlines in a piece of plain text to HTML line breaks (<br>). For example: {{ value|linebreaksbr }}\n If value is Joel\\nis a slug, the output will be Joel<br>is a\nslug. linenumbers Displays text with line numbers. For example: {{ value|linenumbers }}\n If value is: one\ntwo\nthree\n the output will be: 1. one\n2. two\n3. three\n ljust Left-aligns the value in a field of a given width. Argument: field size For example: \"{{ value|ljust:\"10\" }}\"\n If value is Django, the output will be \"Django\u00a0\u00a0\u00a0 \". lower Converts a string into all lowercase. For example: {{ value|lower }}\n If value is Totally LOVING this Album!, the output will be totally loving this album!. make_list Returns the value turned into a list. For a string, it\u2019s a list of characters. For an integer, the argument is cast to a string before creating a list. For example: {{ value|make_list }}\n If value is the string \"Joel\", the output would be the list ['J', 'o', 'e', 'l']. If value is 123, the output will be the list ['1', '2', '3']. phone2numeric Converts a phone number (possibly containing letters) to its numerical equivalent. The input doesn\u2019t have to be a valid phone number. This will happily convert any string. For example: {{ value|phone2numeric }}\n If value is 800-COLLECT, the output will be 800-2655328. pluralize Returns a plural suffix if the value is not 1, '1', or an object of length 1. By default, this suffix is 's'. Example: You have {{ num_messages }} message{{ num_messages|pluralize }}.\n If num_messages is 1, the output will be You have 1 message. If num_messages is 2 the output will be You have 2 messages. For words that require a suffix other than 's', you can provide an alternate suffix as a parameter to the filter. Example: You have {{ num_walruses }} walrus{{ num_walruses|pluralize:\"es\" }}.\n For words that don\u2019t pluralize by simple suffix, you can specify both a singular and plural suffix, separated by a comma. Example: You have {{ num_cherries }} cherr{{ num_cherries|pluralize:\"y,ies\" }}.\n  Note Use blocktranslate to pluralize translated strings.  pprint A wrapper around pprint.pprint() \u2013 for debugging, really. random Returns a random item from the given list. For example: {{ value|random }}\n If value is the list ['a', 'b', 'c', 'd'], the output could be \"b\". rjust Right-aligns the value in a field of a given width. Argument: field size For example: \"{{ value|rjust:\"10\" }}\"\n If value is Django, the output will be \"\u00a0\u00a0\u00a0 Django\". safe Marks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect.  Note If you are chaining filters, a filter applied after safe can make the contents unsafe again. For example, the following code prints the variable as is, unescaped: {{ var|safe|escape }}\n  safeseq Applies the safe filter to each element of a sequence. Useful in conjunction with other filters that operate on sequences, such as join. For example: {{ some_list|safeseq|join:\", \" }}\n You couldn\u2019t use the safe filter directly in this case, as it would first convert the variable into a string, rather than working with the individual elements of the sequence. slice Returns a slice of the list. Uses the same syntax as Python\u2019s list slicing. See https://diveinto.org/python3/native-datatypes.html#slicinglists for an introduction. Example: {{ some_list|slice:\":2\" }}\n If some_list is ['a', 'b', 'c'], the output will be ['a', 'b']. slugify Converts to ASCII. Converts spaces to hyphens. Removes characters that aren\u2019t alphanumerics, underscores, or hyphens. Converts to lowercase. Also strips leading and trailing whitespace. For example: {{ value|slugify }}\n If value is \"Joel is a slug\", the output will be \"joel-is-a-slug\". stringformat Formats the variable according to the argument, a string formatting specifier. This specifier uses the printf-style String Formatting syntax, with the exception that the leading \u201c%\u201d is dropped. For example: {{ value|stringformat:\"E\" }}\n If value is 10, the output will be 1.000000E+01. striptags Makes all possible efforts to strip all [X]HTML tags. For example: {{ value|striptags }}\n If value is \"<b>Joel</b> <button>is</button> a <span>slug</span>\", the output will be \"Joel is a slug\".  No safety guarantee Note that striptags doesn\u2019t give any guarantee about its output being HTML safe, particularly with non valid HTML input. So NEVER apply the safe filter to a striptags output. If you are looking for something more robust, you can use the bleach Python library, notably its clean method.  time Formats a time according to the given format. Given format can be the predefined one TIME_FORMAT, or a custom format, same as the date filter. Note that the predefined format is locale-dependent. For example: {{ value|time:\"H:i\" }}\n If value is equivalent to datetime.datetime.now(), the output will be the string \"01:23\". Note that you can backslash-escape a format string if you want to use the \u201craw\u201d value. In this example, both \u201ch\u201d and \u201cm\u201d are backslash-escaped, because otherwise each is a format string that displays the hour and the month, respectively: {% value|time:\"H\\h i\\m\" %}\n This would display as \u201c01h 23m\u201d. Another example: Assuming that USE_L10N is True and LANGUAGE_CODE is, for example, \"de\", then for: {{ value|time:\"TIME_FORMAT\" }}\n the output will be the string \"01:23\" (The \"TIME_FORMAT\" format specifier for the de locale as shipped with Django is \"H:i\"). The time filter will only accept parameters in the format string that relate to the time of day, not the date. If you need to format a date value, use the date filter instead (or along with time if you need to render a full datetime value). There is one exception the above rule: When passed a datetime value with attached timezone information (a time-zone-aware datetime instance) the time filter will accept the timezone-related format specifiers 'e', 'O' , 'T' and 'Z'. When used without a format string, the TIME_FORMAT format specifier is used: {{ value|time }}\n is the same as: {{ value|time:\"TIME_FORMAT\" }}\n timesince Formats a date as the time since that date (e.g., \u201c4 days, 6 hours\u201d). Takes an optional argument that is a variable containing the date to use as the comparison point (without the argument, the comparison point is now). For example, if blog_date is a date instance representing midnight on 1 June 2006, and comment_date is a date instance for 08:00 on 1 June 2006, then the following would return \u201c8 hours\u201d: {{ blog_date|timesince:comment_date }}\n Comparing offset-naive and offset-aware datetimes will return an empty string. Minutes is the smallest unit used, and \u201c0 minutes\u201d will be returned for any date that is in the future relative to the comparison point. timeuntil Similar to timesince, except that it measures the time from now until the given date or datetime. For example, if today is 1 June 2006 and conference_date is a date instance holding 29 June 2006, then {{ conference_date|timeuntil }} will return \u201c4 weeks\u201d. Takes an optional argument that is a variable containing the date to use as the comparison point (instead of now). If from_date contains 22 June 2006, then the following will return \u201c1 week\u201d: {{ conference_date|timeuntil:from_date }}\n Comparing offset-naive and offset-aware datetimes will return an empty string. Minutes is the smallest unit used, and \u201c0 minutes\u201d will be returned for any date that is in the past relative to the comparison point. title Converts a string into titlecase by making words start with an uppercase character and the remaining characters lowercase. This tag makes no effort to keep \u201ctrivial words\u201d in lowercase. For example: {{ value|title }}\n If value is \"my FIRST post\", the output will be \"My First Post\". truncatechars Truncates a string if it is longer than the specified number of characters. Truncated strings will end with a translatable ellipsis character (\u201c\u2026\u201d). Argument: Number of characters to truncate to For example: {{ value|truncatechars:7 }}\n If value is \"Joel is a slug\", the output will be \"Joel i\u2026\". truncatechars_html Similar to truncatechars, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point are closed immediately after the truncation. For example: {{ value|truncatechars_html:7 }}\n If value is \"<p>Joel is a slug</p>\", the output will be \"<p>Joel i\u2026</p>\". Newlines in the HTML content will be preserved. truncatewords Truncates a string after a certain number of words. Argument: Number of words to truncate after For example: {{ value|truncatewords:2 }}\n If value is \"Joel is a slug\", the output will be \"Joel is \u2026\". Newlines within the string will be removed. truncatewords_html Similar to truncatewords, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point, are closed immediately after the truncation. This is less efficient than truncatewords, so should only be used when it is being passed HTML text. For example: {{ value|truncatewords_html:2 }}\n If value is \"<p>Joel is a slug</p>\", the output will be \"<p>Joel is \u2026</p>\". Newlines in the HTML content will be preserved. unordered_list Recursively takes a self-nested list and returns an HTML unordered list \u2013 WITHOUT opening and closing <ul> tags. The list is assumed to be in the proper format. For example, if var contains ['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']], then {{ var|unordered_list }} would return: <li>States\n<ul>\n        <li>Kansas\n        <ul>\n                <li>Lawrence</li>\n                <li>Topeka</li>\n        </ul>\n        </li>\n        <li>Illinois</li>\n</ul>\n</li>\n upper Converts a string into all uppercase. For example: {{ value|upper }}\n If value is \"Joel is a slug\", the output will be \"JOEL IS A SLUG\". urlencode Escapes a value for use in a URL. For example: {{ value|urlencode }}\n If value is \"https://www.example.org/foo?a=b&c=d\", the output will be \"https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\". An optional argument containing the characters which should not be escaped can be provided. If not provided, the \u2018/\u2019 character is assumed safe. An empty string can be provided when all characters should be escaped. For example: {{ value|urlencode:\"\" }}\n If value is \"https://www.example.org/\", the output will be \"https%3A%2F%2Fwww.example.org%2F\". urlize Converts URLs and email addresses in text into clickable links. This template tag works on links prefixed with http://, https://, or www.. For example, https://goo.gl/aia1t will get converted but goo.gl/aia1t won\u2019t. It also supports domain-only links ending in one of the original top level domains (.com, .edu, .gov, .int, .mil, .net, and .org). For example, djangoproject.com gets converted. Links can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and urlize will still do the right thing. Links generated by urlize have a rel=\"nofollow\" attribute added to them. For example: {{ value|urlize }}\n If value is \"Check out www.djangoproject.com\", the output will be \"Check out <a href=\"http://www.djangoproject.com\"\nrel=\"nofollow\">www.djangoproject.com</a>\". In addition to web links, urlize also converts email addresses into mailto: links. If value is \"Send questions to foo@example.com\", the output will be \"Send questions to <a href=\"mailto:foo@example.com\">foo@example.com</a>\". The urlize filter also takes an optional parameter autoescape. If autoescape is True, the link text and URLs will be escaped using Django\u2019s built-in escape filter. The default value for autoescape is True.  Note If urlize is applied to text that already contains HTML markup, or to email addresses that contain single quotes ('), things won\u2019t work as expected. Apply this filter only to plain text.  urlizetrunc Converts URLs and email addresses into clickable links just like urlize, but truncates URLs longer than the given character limit. Argument: Number of characters that link text should be truncated to, including the ellipsis that\u2019s added if truncation is necessary. For example: {{ value|urlizetrunc:15 }}\n If value is \"Check out www.djangoproject.com\", the output would be 'Check out <a href=\"http://www.djangoproject.com\"\nrel=\"nofollow\">www.djangoproj\u2026</a>'. As with urlize, this filter should only be applied to plain text. wordcount Returns the number of words. For example: {{ value|wordcount }}\n If value is \"Joel is a slug\", the output will be 4. wordwrap Wraps words at specified line length. Argument: number of characters at which to wrap the text For example: {{ value|wordwrap:5 }}\n If value is Joel is a slug, the output would be: Joel\nis a\nslug\n yesno Maps values for True, False, and (optionally) None, to the strings \u201cyes\u201d, \u201cno\u201d, \u201cmaybe\u201d, or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value: For example: {{ value|yesno:\"yeah,no,maybe\" }}\n   \nValue Argument Outputs   \nTrue   yes  \nTrue \"yeah,no,maybe\" yeah  \nFalse \"yeah,no,maybe\" no  \nNone \"yeah,no,maybe\" maybe  \nNone \"yeah,no\" \nno (converts None to False if no mapping for None is given)   Internationalization tags and filters Django provides template tags and filters to control each aspect of internationalization in templates. They allow for granular control of translations, formatting, and time zone conversions. i18n This library allows specifying translatable text in templates. To enable it, set USE_I18N to True, then load it with {% load i18n %}. See Internationalization: in template code. l10n This library provides control over the localization of values in templates. You only need to load the library using {% load l10n %}, but you\u2019ll often set USE_L10N to True so that localization is active by default. See Controlling localization in templates. tz This library provides control over time zone conversions in templates. Like l10n, you only need to load the library using {% load tz %}, but you\u2019ll usually also set USE_TZ to True so that conversion to local time happens by default. See Time zone aware output in templates. Other tags and filters libraries Django comes with a couple of other template-tag libraries that you have to enable explicitly in your INSTALLED_APPS setting and enable in your template with the {% load %} tag. django.contrib.humanize A set of Django template filters useful for adding a \u201chuman touch\u201d to data. See django.contrib.humanize. static static To link to static files that are saved in STATIC_ROOT Django ships with a static template tag. If the django.contrib.staticfiles app is installed, the tag will serve files using url() method of the storage specified by STATICFILES_STORAGE. For example: {% load static %}\n<img src=\"{% static 'images/hi.jpg' %}\" alt=\"Hi!\">\n It is also able to consume standard context variables, e.g. assuming a user_stylesheet variable is passed to the template: {% load static %}\n<link rel=\"stylesheet\" href=\"{% static user_stylesheet %}\" type=\"text/css\" media=\"screen\">\n If you\u2019d like to retrieve a static URL without displaying it, you can use a slightly different call: {% load static %}\n{% static \"images/hi.jpg\" as myphoto %}\n<img src=\"{{ myphoto }}\">\n  Using Jinja2 templates? See Jinja2 for information on using the static tag with Jinja2.  get_static_prefix You should prefer the static template tag, but if you need more control over exactly where and how STATIC_URL is injected into the template, you can use the get_static_prefix template tag: {% load static %}\n<img src=\"{% get_static_prefix %}images/hi.jpg\" alt=\"Hi!\">\n There\u2019s also a second form you can use to avoid extra processing if you need the value multiple times: {% load static %}\n{% get_static_prefix as STATIC_PREFIX %}\n\n<img src=\"{{ STATIC_PREFIX }}images/hi.jpg\" alt=\"Hi!\">\n<img src=\"{{ STATIC_PREFIX }}images/hi2.jpg\" alt=\"Hello!\">\n get_media_prefix Similar to the get_static_prefix, get_media_prefix populates a template variable with the media prefix MEDIA_URL, e.g.: {% load static %}\n<body data-media-url=\"{% get_media_prefix %}\">\n By storing the value in a data attribute, we ensure it\u2019s escaped appropriately if we want to use it in a JavaScript context.\n"}, {"name": "Built-in Views", "path": "ref/views", "type": "API", "text": "Built-in Views Several of Django\u2019s built-in views are documented in Writing views as well as elsewhere in the documentation. Serving files in development  \nstatic.serve(request, path, document_root, show_indexes=False) \n There may be files other than your project\u2019s static assets that, for convenience, you\u2019d like to have Django serve for you in local development. The serve() view can be used to serve any directory you give it. (This view is not hardened for production use and should be used only as a development aid; you should serve these files in production using a real front-end web server). The most likely example is user-uploaded content in MEDIA_ROOT. django.contrib.staticfiles is intended for static assets and has no built-in handling for user-uploaded files, but you can have Django serve your MEDIA_ROOT by appending something like this to your URLconf: from django.conf import settings\nfrom django.urls import re_path\nfrom django.views.static import serve\n\n# ... the rest of your URLconf goes here ...\n\nif settings.DEBUG:\n    urlpatterns += [\n        re_path(r'^media/(?P<path>.*)$', serve, {\n            'document_root': settings.MEDIA_ROOT,\n        }),\n    ]\n Note, the snippet assumes your MEDIA_URL has a value of 'media/'. This will call the serve() view, passing in the path from the URLconf and the (required) document_root parameter. Since it can become a bit cumbersome to define this URL pattern, Django ships with a small URL helper function static() that takes as parameters the prefix such as MEDIA_URL and a dotted path to a view, such as 'django.views.static.serve'. Any other function parameter will be transparently passed to the view. Error views Django comes with a few views by default for handling HTTP errors. To override these with your own custom views, see Customizing error views. The 404 (page not found) view  \ndefaults.page_not_found(request, exception, template_name='404.html') \n When you raise Http404 from within a view, Django loads a special view devoted to handling 404 errors. By default, it\u2019s the view django.views.defaults.page_not_found(), which either produces a \u201cNot Found\u201d message or loads and renders the template 404.html if you created it in your root template directory. The default 404 view will pass two variables to the template: request_path, which is the URL that resulted in the error, and exception, which is a useful representation of the exception that triggered the view (e.g. containing any message passed to a specific Http404 instance). Three things to note about 404 views:  The 404 view is also called if Django doesn\u2019t find a match after checking every regular expression in the URLconf. The 404 view is passed a RequestContext and will have access to variables supplied by your template context processors (e.g. MEDIA_URL). If DEBUG is set to True (in your settings module), then your 404 view will never be used, and your URLconf will be displayed instead, with some debug information.  The 500 (server error) view  \ndefaults.server_error(request, template_name='500.html') \n Similarly, Django executes special-case behavior in the case of runtime errors in view code. If a view results in an exception, Django will, by default, call the view django.views.defaults.server_error, which either produces a \u201cServer Error\u201d message or loads and renders the template 500.html if you created it in your root template directory. The default 500 view passes no variables to the 500.html template and is rendered with an empty Context to lessen the chance of additional errors. If DEBUG is set to True (in your settings module), then your 500 view will never be used, and the traceback will be displayed instead, with some debug information. The 403 (HTTP Forbidden) view  \ndefaults.permission_denied(request, exception, template_name='403.html') \n In the same vein as the 404 and 500 views, Django has a view to handle 403 Forbidden errors. If a view results in a 403 exception then Django will, by default, call the view django.views.defaults.permission_denied. This view loads and renders the template 403.html in your root template directory, or if this file does not exist, instead serves the text \u201c403 Forbidden\u201d, as per RFC 7231#section-6.5.3 (the HTTP 1.1 Specification). The template context contains exception, which is the string representation of the exception that triggered the view. django.views.defaults.permission_denied is triggered by a PermissionDenied exception. To deny access in a view you can use code like this: from django.core.exceptions import PermissionDenied\n\ndef edit(request, pk):\n    if not request.user.is_staff:\n        raise PermissionDenied\n    # ...\n The 400 (bad request) view  \ndefaults.bad_request(request, exception, template_name='400.html') \n When a SuspiciousOperation is raised in Django, it may be handled by a component of Django (for example resetting the session data). If not specifically handled, Django will consider the current request a \u2018bad request\u2019 instead of a server error. django.views.defaults.bad_request, is otherwise very similar to the server_error view, but returns with the status code 400 indicating that the error condition was the result of a client operation. By default, nothing related to the exception that triggered the view is passed to the template context, as the exception message might contain sensitive information like filesystem paths. bad_request views are also only used when DEBUG is False.\n"}, {"name": "Class-based views", "path": "topics/class-based-views/index", "type": "Guides", "text": "Class-based views A view is a callable which takes a request and returns a response. This can be more than just a function, and Django provides an example of some classes which can be used as views. These allow you to structure your views and reuse code by harnessing inheritance and mixins. There are also some generic views for tasks which we\u2019ll get to later, but you may want to design your own structure of reusable views which suits your use case. For full details, see the class-based views reference documentation.  Introduction to class-based views Built-in class-based generic views Form handling with class-based views Using mixins with class-based views  Basic examples Django provides base view classes which will suit a wide range of applications. All views inherit from the View class, which handles linking the view into the URLs, HTTP method dispatching and other common features. RedirectView provides a HTTP redirect, and TemplateView extends the base class to make it also render a template. Usage in your URLconf The most direct way to use generic views is to create them directly in your URLconf. If you\u2019re only changing a few attributes on a class-based view, you can pass them into the as_view() method call itself: from django.urls import path\nfrom django.views.generic import TemplateView\n\nurlpatterns = [\n    path('about/', TemplateView.as_view(template_name=\"about.html\")),\n]\n Any arguments passed to as_view() will override attributes set on the class. In this example, we set template_name on the TemplateView. A similar overriding pattern can be used for the url attribute on RedirectView. Subclassing generic views The second, more powerful way to use generic views is to inherit from an existing view and override attributes (such as the template_name) or methods (such as get_context_data) in your subclass to provide new values or methods. Consider, for example, a view that just displays one template, about.html. Django has a generic view to do this - TemplateView - so we can subclass it, and override the template name: # some_app/views.py\nfrom django.views.generic import TemplateView\n\nclass AboutView(TemplateView):\n    template_name = \"about.html\"\n Then we need to add this new view into our URLconf. TemplateView is a class, not a function, so we point the URL to the as_view() class method instead, which provides a function-like entry to class-based views: # urls.py\nfrom django.urls import path\nfrom some_app.views import AboutView\n\nurlpatterns = [\n    path('about/', AboutView.as_view()),\n]\n For more information on how to use the built in generic views, consult the next topic on generic class-based views. Supporting other HTTP methods Suppose somebody wants to access our book library over HTTP using the views as an API. The API client would connect every now and then and download book data for the books published since last visit. But if no new books appeared since then, it is a waste of CPU time and bandwidth to fetch the books from the database, render a full response and send it to the client. It might be preferable to ask the API when the most recent book was published. We map the URL to book list view in the URLconf: from django.urls import path\nfrom books.views import BookListView\n\nurlpatterns = [\n    path('books/', BookListView.as_view()),\n]\n And the view: from django.http import HttpResponse\nfrom django.views.generic import ListView\nfrom books.models import Book\n\nclass BookListView(ListView):\n    model = Book\n\n    def head(self, *args, **kwargs):\n        last_book = self.get_queryset().latest('publication_date')\n        response = HttpResponse(\n            # RFC 1123 date format.\n            headers={'Last-Modified': last_book.publication_date.strftime('%a, %d %b %Y %H:%M:%S GMT')},\n        )\n        return response\n If the view is accessed from a GET request, an object list is returned in the response (using the book_list.html template). But if the client issues a HEAD request, the response has an empty body and the Last-Modified header indicates when the most recent book was published. Based on this information, the client may or may not download the full object list.\n"}, {"name": "Class-based views mixins", "path": "ref/class-based-views/mixins", "type": "API", "text": "Class-based views mixins Class-based views API reference. For introductory material, see Using mixins with class-based views.  Simple mixins Single object mixins Multiple object mixins Editing mixins Date-based mixins \n"}, {"name": "Clickjacking Protection", "path": "ref/clickjacking", "type": "API", "text": "Clickjacking Protection The clickjacking middleware and decorators provide easy-to-use protection against clickjacking. This type of attack occurs when a malicious site tricks a user into clicking on a concealed element of another site which they have loaded in a hidden frame or iframe. An example of clickjacking Suppose an online store has a page where a logged in user can click \u201cBuy Now\u201d to purchase an item. A user has chosen to stay logged into the store all the time for convenience. An attacker site might create an \u201cI Like Ponies\u201d button on one of their own pages, and load the store\u2019s page in a transparent iframe such that the \u201cBuy Now\u201d button is invisibly overlaid on the \u201cI Like Ponies\u201d button. If the user visits the attacker\u2019s site, clicking \u201cI Like Ponies\u201d will cause an inadvertent click on the \u201cBuy Now\u201d button and an unknowing purchase of the item. Preventing clickjacking Modern browsers honor the X-Frame-Options HTTP header that indicates whether or not a resource is allowed to load within a frame or iframe. If the response contains the header with a value of SAMEORIGIN then the browser will only load the resource in a frame if the request originated from the same site. If the header is set to DENY then the browser will block the resource from loading in a frame no matter which site made the request. Django provides a few ways to include this header in responses from your site:  A middleware that sets the header in all responses. A set of view decorators that can be used to override the middleware or to only set the header for certain views.  The X-Frame-Options HTTP header will only be set by the middleware or view decorators if it is not already present in the response. How to use it Setting X-Frame-Options for all responses To set the same X-Frame-Options value for all responses in your site, put 'django.middleware.clickjacking.XFrameOptionsMiddleware' to MIDDLEWARE: MIDDLEWARE = [\n    ...\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    ...\n]\n This middleware is enabled in the settings file generated by startproject. By default, the middleware will set the X-Frame-Options header to DENY for every outgoing HttpResponse. If you want any other value for this header instead, set the X_FRAME_OPTIONS setting: X_FRAME_OPTIONS = 'SAMEORIGIN'\n When using the middleware there may be some views where you do not want the X-Frame-Options header set. For those cases, you can use a view decorator that tells the middleware not to set the header: from django.http import HttpResponse\nfrom django.views.decorators.clickjacking import xframe_options_exempt\n\n@xframe_options_exempt\ndef ok_to_load_in_a_frame(request):\n    return HttpResponse(\"This page is safe to load in a frame on any site.\")\n  Note If you want to submit a form or access a session cookie within a frame or iframe, you may need to modify the CSRF_COOKIE_SAMESITE or SESSION_COOKIE_SAMESITE settings.  Setting X-Frame-Options per view To set the X-Frame-Options header on a per view basis, Django provides these decorators: from django.http import HttpResponse\nfrom django.views.decorators.clickjacking import xframe_options_deny\nfrom django.views.decorators.clickjacking import xframe_options_sameorigin\n\n@xframe_options_deny\ndef view_one(request):\n    return HttpResponse(\"I won't display in any frame!\")\n\n@xframe_options_sameorigin\ndef view_two(request):\n    return HttpResponse(\"Display in a frame if it's from the same origin as me.\")\n Note that you can use the decorators in conjunction with the middleware. Use of a decorator overrides the middleware. Limitations The X-Frame-Options header will only protect against clickjacking in a modern browser. Older browsers will quietly ignore the header and need other clickjacking prevention techniques. Browsers that support X-Frame-Options\n  Internet Explorer 8+ Edge Firefox 3.6.9+ Opera 10.5+ Safari 4+ Chrome 4.1+  See also A complete list of browsers supporting X-Frame-Options.\n"}, {"name": "Conditional Expressions", "path": "ref/models/conditional-expressions", "type": "API", "text": "Conditional Expressions Conditional expressions let you use if \u2026 elif \u2026 else logic within filters, annotations, aggregations, and updates. A conditional expression evaluates a series of conditions for each row of a table and returns the matching result expression. Conditional expressions can also be combined and nested like other expressions. The conditional expression classes We\u2019ll be using the following model in the subsequent examples: from django.db import models\n\nclass Client(models.Model):\n    REGULAR = 'R'\n    GOLD = 'G'\n    PLATINUM = 'P'\n    ACCOUNT_TYPE_CHOICES = [\n        (REGULAR, 'Regular'),\n        (GOLD, 'Gold'),\n        (PLATINUM, 'Platinum'),\n    ]\n    name = models.CharField(max_length=50)\n    registered_on = models.DateField()\n    account_type = models.CharField(\n        max_length=1,\n        choices=ACCOUNT_TYPE_CHOICES,\n        default=REGULAR,\n    )\n When  \nclass When(condition=None, then=None, **lookups) \n A When() object is used to encapsulate a condition and its result for use in the conditional expression. Using a When() object is similar to using the filter() method. The condition can be specified using field lookups, Q objects, or Expression objects that have an output_field that is a BooleanField. The result is provided using the then keyword.  Changed in Django 4.0: Support for lookup expressions was added.  Some examples: >>> from django.db.models import F, Q, When\n>>> # String arguments refer to fields; the following two examples are equivalent:\n>>> When(account_type=Client.GOLD, then='name')\n>>> When(account_type=Client.GOLD, then=F('name'))\n>>> # You can use field lookups in the condition\n>>> from datetime import date\n>>> When(registered_on__gt=date(2014, 1, 1),\n...      registered_on__lt=date(2015, 1, 1),\n...      then='account_type')\n>>> # Complex conditions can be created using Q objects\n>>> When(Q(name__startswith=\"John\") | Q(name__startswith=\"Paul\"),\n...      then='name')\n>>> # Condition can be created using boolean expressions.\n>>> from django.db.models import Exists, OuterRef\n>>> non_unique_account_type = Client.objects.filter(\n...     account_type=OuterRef('account_type'),\n... ).exclude(pk=OuterRef('pk')).values('pk')\n>>> When(Exists(non_unique_account_type), then=Value('non unique'))\n>>> # Condition can be created using lookup expressions.\n>>> from django.db.models.lookups import GreaterThan, LessThan\n>>> When(\n...     GreaterThan(F('registered_on'), date(2014, 1, 1)) &\n...     LessThan(F('registered_on'), date(2015, 1, 1)),\n...     then='account_type',\n... )\n Keep in mind that each of these values can be an expression.  Note Since the then keyword argument is reserved for the result of the When(), there is a potential conflict if a Model has a field named then. This can be resolved in two ways: >>> When(then__exact=0, then=1)\n>>> When(Q(then=0), then=1)\n   Changed in Django 3.2: Support for using the condition argument with lookups was added.  Case  \nclass Case(*cases, **extra) \n A Case() expression is like the if \u2026 elif \u2026 else statement in Python. Each condition in the provided When() objects is evaluated in order, until one evaluates to a truthful value. The result expression from the matching When() object is returned. An example: >>>\n>>> from datetime import date, timedelta\n>>> from django.db.models import Case, Value, When\n>>> Client.objects.create(\n...     name='Jane Doe',\n...     account_type=Client.REGULAR,\n...     registered_on=date.today() - timedelta(days=36))\n>>> Client.objects.create(\n...     name='James Smith',\n...     account_type=Client.GOLD,\n...     registered_on=date.today() - timedelta(days=5))\n>>> Client.objects.create(\n...     name='Jack Black',\n...     account_type=Client.PLATINUM,\n...     registered_on=date.today() - timedelta(days=10 * 365))\n>>> # Get the discount for each Client based on the account type\n>>> Client.objects.annotate(\n...     discount=Case(\n...         When(account_type=Client.GOLD, then=Value('5%')),\n...         When(account_type=Client.PLATINUM, then=Value('10%')),\n...         default=Value('0%'),\n...     ),\n... ).values_list('name', 'discount')\n<QuerySet [('Jane Doe', '0%'), ('James Smith', '5%'), ('Jack Black', '10%')]>\n Case() accepts any number of When() objects as individual arguments. Other options are provided using keyword arguments. If none of the conditions evaluate to TRUE, then the expression given with the default keyword argument is returned. If a default argument isn\u2019t provided, None is used. If we wanted to change our previous query to get the discount based on how long the Client has been with us, we could do so using lookups: >>> a_month_ago = date.today() - timedelta(days=30)\n>>> a_year_ago = date.today() - timedelta(days=365)\n>>> # Get the discount for each Client based on the registration date\n>>> Client.objects.annotate(\n...     discount=Case(\n...         When(registered_on__lte=a_year_ago, then=Value('10%')),\n...         When(registered_on__lte=a_month_ago, then=Value('5%')),\n...         default=Value('0%'),\n...     )\n... ).values_list('name', 'discount')\n<QuerySet [('Jane Doe', '5%'), ('James Smith', '0%'), ('Jack Black', '10%')]>\n  Note Remember that the conditions are evaluated in order, so in the above example we get the correct result even though the second condition matches both Jane Doe and Jack Black. This works just like an if \u2026 elif \u2026 else statement in Python.  Case() also works in a filter() clause. For example, to find gold clients that registered more than a month ago and platinum clients that registered more than a year ago: >>> a_month_ago = date.today() - timedelta(days=30)\n>>> a_year_ago = date.today() - timedelta(days=365)\n>>> Client.objects.filter(\n...     registered_on__lte=Case(\n...         When(account_type=Client.GOLD, then=a_month_ago),\n...         When(account_type=Client.PLATINUM, then=a_year_ago),\n...     ),\n... ).values_list('name', 'account_type')\n<QuerySet [('Jack Black', 'P')]>\n Advanced queries Conditional expressions can be used in annotations, aggregations, filters, lookups, and updates. They can also be combined and nested with other expressions. This allows you to make powerful conditional queries. Conditional update Let\u2019s say we want to change the account_type for our clients to match their registration dates. We can do this using a conditional expression and the update() method: >>> a_month_ago = date.today() - timedelta(days=30)\n>>> a_year_ago = date.today() - timedelta(days=365)\n>>> # Update the account_type for each Client from the registration date\n>>> Client.objects.update(\n...     account_type=Case(\n...         When(registered_on__lte=a_year_ago,\n...              then=Value(Client.PLATINUM)),\n...         When(registered_on__lte=a_month_ago,\n...              then=Value(Client.GOLD)),\n...         default=Value(Client.REGULAR)\n...     ),\n... )\n>>> Client.objects.values_list('name', 'account_type')\n<QuerySet [('Jane Doe', 'G'), ('James Smith', 'R'), ('Jack Black', 'P')]>\n Conditional aggregation What if we want to find out how many clients there are for each account_type? We can use the filter argument of aggregate functions to achieve this: >>> # Create some more Clients first so we can have something to count\n>>> Client.objects.create(\n...     name='Jean Grey',\n...     account_type=Client.REGULAR,\n...     registered_on=date.today())\n>>> Client.objects.create(\n...     name='James Bond',\n...     account_type=Client.PLATINUM,\n...     registered_on=date.today())\n>>> Client.objects.create(\n...     name='Jane Porter',\n...     account_type=Client.PLATINUM,\n...     registered_on=date.today())\n>>> # Get counts for each value of account_type\n>>> from django.db.models import Count\n>>> Client.objects.aggregate(\n...     regular=Count('pk', filter=Q(account_type=Client.REGULAR)),\n...     gold=Count('pk', filter=Q(account_type=Client.GOLD)),\n...     platinum=Count('pk', filter=Q(account_type=Client.PLATINUM)),\n... )\n{'regular': 2, 'gold': 1, 'platinum': 3}\n This aggregate produces a query with the SQL 2003 FILTER WHERE syntax on databases that support it: SELECT count('id') FILTER (WHERE account_type=1) as regular,\n       count('id') FILTER (WHERE account_type=2) as gold,\n       count('id') FILTER (WHERE account_type=3) as platinum\nFROM clients;\n On other databases, this is emulated using a CASE statement: SELECT count(CASE WHEN account_type=1 THEN id ELSE null) as regular,\n       count(CASE WHEN account_type=2 THEN id ELSE null) as gold,\n       count(CASE WHEN account_type=3 THEN id ELSE null) as platinum\nFROM clients;\n The two SQL statements are functionally equivalent but the more explicit FILTER may perform better. Conditional filter When a conditional expression returns a boolean value, it is possible to use it directly in filters. This means that it will not be added to the SELECT columns, but you can still use it to filter results: >>> non_unique_account_type = Client.objects.filter(\n...     account_type=OuterRef('account_type'),\n... ).exclude(pk=OuterRef('pk')).values('pk')\n>>> Client.objects.filter(~Exists(non_unique_account_type))\n In SQL terms, that evaluates to: SELECT ...\nFROM client c0\nWHERE NOT EXISTS (\n  SELECT c1.id\n  FROM client c1\n  WHERE c1.account_type = c0.account_type AND NOT c1.id = c0.id\n)\n\n"}, {"name": "Conditional View Processing", "path": "topics/conditional-view-processing", "type": "Guides", "text": "Conditional View Processing HTTP clients can send a number of headers to tell the server about copies of a resource that they have already seen. This is commonly used when retrieving a web page (using an HTTP GET request) to avoid sending all the data for something the client has already retrieved. However, the same headers can be used for all HTTP methods (POST, PUT, DELETE, etc.). For each page (response) that Django sends back from a view, it might provide two HTTP headers: the ETag header and the Last-Modified header. These headers are optional on HTTP responses. They can be set by your view function, or you can rely on the ConditionalGetMiddleware middleware to set the ETag header. When the client next requests the same resource, it might send along a header such as either If-modified-since or If-unmodified-since, containing the date of the last modification time it was sent, or either If-match or If-none-match, containing the last ETag it was sent. If the current version of the page matches the ETag sent by the client, or if the resource has not been modified, a 304 status code can be sent back, instead of a full response, telling the client that nothing has changed. Depending on the header, if the page has been modified or does not match the ETag sent by the client, a 412 status code (Precondition Failed) may be returned. When you need more fine-grained control you may use per-view conditional processing functions. The condition decorator Sometimes (in fact, quite often) you can create functions to rapidly compute the ETag value or the last-modified time for a resource, without needing to do all the computations needed to construct the full view. Django can then use these functions to provide an \u201cearly bailout\u201d option for the view processing. Telling the client that the content has not been modified since the last request, perhaps. These two functions are passed as parameters to the django.views.decorators.http.condition decorator. This decorator uses the two functions (you only need to supply one, if you can\u2019t compute both quantities easily and quickly) to work out if the headers in the HTTP request match those on the resource. If they don\u2019t match, a new copy of the resource must be computed and your normal view is called. The condition decorator\u2019s signature looks like this: condition(etag_func=None, last_modified_func=None)\n The two functions, to compute the ETag and the last modified time, will be passed the incoming request object and the same parameters, in the same order, as the view function they are helping to wrap. The function passed last_modified_func should return a standard datetime value specifying the last time the resource was modified, or None if the resource doesn\u2019t exist. The function passed to the etag decorator should return a string representing the ETag for the resource, or None if it doesn\u2019t exist. The decorator sets the ETag and Last-Modified headers on the response if they are not already set by the view and if the request\u2019s method is safe (GET or HEAD). Using this feature usefully is probably best explained with an example. Suppose you have this pair of models, representing a small blog system: import datetime\nfrom django.db import models\n\nclass Blog(models.Model):\n    ...\n\nclass Entry(models.Model):\n    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)\n    published = models.DateTimeField(default=datetime.datetime.now)\n    ...\n If the front page, displaying the latest blog entries, only changes when you add a new blog entry, you can compute the last modified time very quickly. You need the latest published date for every entry associated with that blog. One way to do this would be: def latest_entry(request, blog_id):\n    return Entry.objects.filter(blog=blog_id).latest(\"published\").published\n You can then use this function to provide early detection of an unchanged page for your front page view: from django.views.decorators.http import condition\n\n@condition(last_modified_func=latest_entry)\ndef front_page(request, blog_id):\n    ...\n  Be careful with the order of decorators When condition() returns a conditional response, any decorators below it will be skipped and won\u2019t apply to the response. Therefore, any decorators that need to apply to both the regular view response and a conditional response must be above condition(). In particular, vary_on_cookie(), vary_on_headers(), and cache_control() should come first because RFC 7232 requires that the headers they set be present on 304 responses.  Shortcuts for only computing one value As a general rule, if you can provide functions to compute both the ETag and the last modified time, you should do so. You don\u2019t know which headers any given HTTP client will send you, so be prepared to handle both. However, sometimes only one value is easy to compute and Django provides decorators that handle only ETag or only last-modified computations. The django.views.decorators.http.etag and django.views.decorators.http.last_modified decorators are passed the same type of functions as the condition decorator. Their signatures are: etag(etag_func)\nlast_modified(last_modified_func)\n We could write the earlier example, which only uses a last-modified function, using one of these decorators: @last_modified(latest_entry)\ndef front_page(request, blog_id):\n    ...\n \u2026or: def front_page(request, blog_id):\n    ...\nfront_page = last_modified(latest_entry)(front_page)\n Use condition when testing both conditions It might look nicer to some people to try and chain the etag and last_modified decorators if you want to test both preconditions. However, this would lead to incorrect behavior. # Bad code. Don't do this!\n@etag(etag_func)\n@last_modified(last_modified_func)\ndef my_view(request):\n    # ...\n\n# End of bad code.\n The first decorator doesn\u2019t know anything about the second and might answer that the response is not modified even if the second decorators would determine otherwise. The condition decorator uses both callback functions simultaneously to work out the right action to take. Using the decorators with other HTTP methods The condition decorator is useful for more than only GET and HEAD requests (HEAD requests are the same as GET in this situation). It can also be used to provide checking for POST, PUT and DELETE requests. In these situations, the idea isn\u2019t to return a \u201cnot modified\u201d response, but to tell the client that the resource they are trying to change has been altered in the meantime. For example, consider the following exchange between the client and server:  Client requests /foo/. Server responds with some content with an ETag of \"abcd1234\". Client sends an HTTP PUT request to /foo/ to update the resource. It also sends an If-Match: \"abcd1234\" header to specify the version it is trying to update. Server checks to see if the resource has changed, by computing the ETag the same way it does for a GET request (using the same function). If the resource has changed, it will return a 412 status code, meaning \u201cprecondition failed\u201d. Client sends a GET request to /foo/, after receiving a 412 response, to retrieve an updated version of the content before updating it.  The important thing this example shows is that the same functions can be used to compute the ETag and last modification values in all situations. In fact, you should use the same functions, so that the same values are returned every time.  Validator headers with non-safe request methods The condition decorator only sets validator headers (ETag and Last-Modified) for safe HTTP methods, i.e. GET and HEAD. If you wish to return them in other cases, set them in your view. See RFC 7231#section-4.3.4 to learn about the distinction between setting a validator header in response to requests made with PUT versus POST.  Comparison with middleware conditional processing Django provides conditional GET handling via django.middleware.http.ConditionalGetMiddleware. While being suitable for many situations, the middleware has limitations for advanced usage:  It\u2019s applied globally to all views in your project. It doesn\u2019t save you from generating the response, which may be expensive. It\u2019s only appropriate for HTTP GET requests.  You should choose the most appropriate tool for your particular problem here. If you have a way to compute ETags and modification times quickly and if some view takes a while to generate the content, you should consider using the condition decorator described in this document. If everything already runs fairly quickly, stick to using the middleware and the amount of network traffic sent back to the clients will still be reduced if the view hasn\u2019t changed.\n"}, {"name": "conf.settings.configure()", "path": "topics/settings#django.conf.settings.configure", "type": "django.conf", "text": " \ndjango.conf.settings.configure(default_settings, **settings) \n"}, {"name": "conf.urls.handler400", "path": "ref/urls#django.conf.urls.handler400", "type": "django.conf", "text": " \nhandler400 \n"}, {"name": "conf.urls.handler403", "path": "ref/urls#django.conf.urls.handler403", "type": "django.conf", "text": " \nhandler403 \n"}, {"name": "conf.urls.handler404", "path": "ref/urls#django.conf.urls.handler404", "type": "django.conf", "text": " \nhandler404 \n"}, {"name": "conf.urls.handler500", "path": "ref/urls#django.conf.urls.handler500", "type": "django.conf", "text": " \nhandler500 \n"}, {"name": "conf.urls.i18n.i18n_patterns()", "path": "topics/i18n/translation#django.conf.urls.i18n.i18n_patterns", "type": "django.conf", "text": " \ni18n_patterns(*urls, prefix_default_language=True) \n"}, {"name": "conf.urls.static.static()", "path": "ref/urls#django.conf.urls.static.static", "type": "django.conf", "text": " \nstatic.static(prefix, view=django.views.static.serve, **kwargs) \n"}, {"name": "Constraints reference", "path": "ref/models/constraints", "type": "API", "text": "Constraints reference The classes defined in this module create database constraints. They are added in the model Meta.constraints option.  Referencing built-in constraints Constraints are defined in django.db.models.constraints, but for convenience they\u2019re imported into django.db.models. The standard convention is to use from django.db import models and refer to the constraints as models.<Foo>Constraint.   Constraints in abstract base classes You must always specify a unique name for the constraint. As such, you cannot normally specify a constraint on an abstract base class, since the Meta.constraints option is inherited by subclasses, with exactly the same values for the attributes (including name) each time. To work around name collisions, part of the name may contain '%(app_label)s' and '%(class)s', which are replaced, respectively, by the lowercased app label and class name of the concrete model. For example CheckConstraint(check=Q(age__gte=18),\nname='%(app_label)s_%(class)s_is_adult').   Validation of Constraints In general constraints are not checked during full_clean(), and do not raise ValidationErrors. Rather you\u2019ll get a database integrity error on save(). UniqueConstraints without a condition (i.e. non-partial unique constraints) and expressions (i.e. non-functional unique constraints) are different in this regard, in that they leverage the existing validate_unique() logic, and thus enable two-stage validation. In addition to IntegrityError on save(), ValidationError is also raised during model validation when the UniqueConstraint is violated.  CheckConstraint  \nclass CheckConstraint(*, check, name)  \nCreates a check constraint in the database. \n check  \nCheckConstraint.check \n A Q object or boolean Expression that specifies the check you want the constraint to enforce. For example, CheckConstraint(check=Q(age__gte=18), name='age_gte_18') ensures the age field is never less than 18. name  \nCheckConstraint.name \n The name of the constraint. You must always specify a unique name for the constraint. UniqueConstraint  \nclass UniqueConstraint(*expressions, fields=(), name=None, condition=None, deferrable=None, include=None, opclasses=())  \nCreates a unique constraint in the database. \n expressions  \nUniqueConstraint.expressions \n  New in Django 4.0.  Positional argument *expressions allows creating functional unique constraints on expressions and database functions. For example: UniqueConstraint(Lower('name').desc(), 'category', name='unique_lower_name_category')\n creates a unique constraint on the lowercased value of the name field in descending order and the category field in the default ascending order. Functional unique constraints have the same database restrictions as Index.expressions. fields  \nUniqueConstraint.fields \n A list of field names that specifies the unique set of columns you want the constraint to enforce. For example, UniqueConstraint(fields=['room', 'date'],\nname='unique_booking') ensures each room can only be booked once for each date. name  \nUniqueConstraint.name \n The name of the constraint. You must always specify a unique name for the constraint. condition  \nUniqueConstraint.condition \n A Q object that specifies the condition you want the constraint to enforce. For example: UniqueConstraint(fields=['user'], condition=Q(status='DRAFT'), name='unique_draft_user')\n ensures that each user only has one draft. These conditions have the same database restrictions as Index.condition. deferrable  \nUniqueConstraint.deferrable \n Set this parameter to create a deferrable unique constraint. Accepted values are Deferrable.DEFERRED or Deferrable.IMMEDIATE. For example: from django.db.models import Deferrable, UniqueConstraint\n\nUniqueConstraint(\n    name='unique_order',\n    fields=['order'],\n    deferrable=Deferrable.DEFERRED,\n)\n By default constraints are not deferred. A deferred constraint will not be enforced until the end of the transaction. An immediate constraint will be enforced immediately after every command.  MySQL, MariaDB, and SQLite. Deferrable unique constraints are ignored on MySQL, MariaDB, and SQLite as neither supports them.   Warning Deferred unique constraints may lead to a performance penalty.  include  \nUniqueConstraint.include \n  New in Django 3.2.  A list or tuple of the names of the fields to be included in the covering unique index as non-key columns. This allows index-only scans to be used for queries that select only included fields (include) and filter only by unique fields (fields). For example: UniqueConstraint(name='unique_booking', fields=['room', 'date'], include=['full_name'])\n will allow filtering on room and date, also selecting full_name, while fetching data only from the index. include is supported only on PostgreSQL. Non-key columns have the same database restrictions as Index.include. opclasses  \nUniqueConstraint.opclasses \n  New in Django 3.2.  The names of the PostgreSQL operator classes to use for this unique index. If you require a custom operator class, you must provide one for each field in the index. For example: UniqueConstraint(name='unique_username', fields=['username'], opclasses=['varchar_pattern_ops'])\n creates a unique index on username using varchar_pattern_ops. opclasses are ignored for databases besides PostgreSQL.\n"}, {"name": "contenttypes.admin.GenericInlineModelAdmin", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin", "type": "django.contrib.contenttypes", "text": " \nclass GenericInlineModelAdmin  \nThe GenericInlineModelAdmin class inherits all properties from an InlineModelAdmin class. However, it adds a couple of its own for working with the generic relation:  \nct_field  \nThe name of the ContentType foreign key field on the model. Defaults to content_type. \n  \nct_fk_field  \nThe name of the integer field that represents the ID of the related object. Defaults to object_id. \n \n"}, {"name": "contenttypes.admin.GenericInlineModelAdmin.ct_field", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin.ct_field", "type": "django.contrib.contenttypes", "text": " \nct_field  \nThe name of the ContentType foreign key field on the model. Defaults to content_type. \n"}, {"name": "contenttypes.admin.GenericInlineModelAdmin.ct_fk_field", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin.ct_fk_field", "type": "django.contrib.contenttypes", "text": " \nct_fk_field  \nThe name of the integer field that represents the ID of the related object. Defaults to object_id. \n"}, {"name": "contenttypes.admin.GenericStackedInline", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericStackedInline", "type": "django.contrib.contenttypes", "text": " \nclass GenericStackedInline  \nSubclasses of GenericInlineModelAdmin with stacked and tabular layouts, respectively. \n"}, {"name": "contenttypes.admin.GenericTabularInline", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericTabularInline", "type": "django.contrib.contenttypes", "text": " \nclass GenericTabularInline \n"}, {"name": "contenttypes.fields.GenericForeignKey", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey", "type": "django.contrib.contenttypes", "text": " \nclass GenericForeignKey  \nThere are three parts to setting up a GenericForeignKey:  Give your model a ForeignKey to ContentType. The usual name for this field is \u201ccontent_type\u201d. Give your model a field that can store primary key values from the models you\u2019ll be relating to. For most models, this means a PositiveIntegerField. The usual name for this field is \u201cobject_id\u201d. Give your model a GenericForeignKey, and pass it the names of the two fields described above. If these fields are named \u201ccontent_type\u201d and \u201cobject_id\u201d, you can omit this \u2013 those are the default field names GenericForeignKey will look for.   \nfor_concrete_model  \nIf False, the field will be able to reference proxy models. Default is True. This mirrors the for_concrete_model argument to get_for_model(). \n \n"}, {"name": "contenttypes.fields.GenericForeignKey.for_concrete_model", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey.for_concrete_model", "type": "django.contrib.contenttypes", "text": " \nfor_concrete_model  \nIf False, the field will be able to reference proxy models. Default is True. This mirrors the for_concrete_model argument to get_for_model(). \n"}, {"name": "contenttypes.fields.GenericRelation", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation", "type": "django.contrib.contenttypes", "text": " \nclass GenericRelation  \n \nrelated_query_name  \nThe relation on the related object back to this object doesn\u2019t exist by default. Setting related_query_name creates a relation from the related object back to this one. This allows querying and filtering from the related object. \n \n"}, {"name": "contenttypes.fields.GenericRelation.related_query_name", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation.related_query_name", "type": "django.contrib.contenttypes", "text": " \nrelated_query_name  \nThe relation on the related object back to this object doesn\u2019t exist by default. Setting related_query_name creates a relation from the related object back to this one. This allows querying and filtering from the related object. \n"}, {"name": "contenttypes.forms.BaseGenericInlineFormSet", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.forms.BaseGenericInlineFormSet", "type": "django.contrib.contenttypes", "text": " \nclass BaseGenericInlineFormSet \n"}, {"name": "contenttypes.forms.generic_inlineformset_factory()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.forms.generic_inlineformset_factory", "type": "django.contrib.contenttypes", "text": " \ngeneric_inlineformset_factory(model, form=ModelForm, formset=BaseGenericInlineFormSet, ct_field=\"content_type\", fk_field=\"object_id\", fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, validate_max=False, for_concrete_model=True, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True)  \nReturns a GenericInlineFormSet using modelformset_factory(). You must provide ct_field and fk_field if they are different from the defaults, content_type and object_id respectively. Other parameters are similar to those documented in modelformset_factory() and inlineformset_factory(). The for_concrete_model argument corresponds to the for_concrete_model argument on GenericForeignKey.  Changed in Django 3.2: The absolute_max and can_delete_extra arguments were added.  \n"}, {"name": "contenttypes.models.ContentType", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType", "type": "django.contrib.contenttypes", "text": " \nclass ContentType  \nEach instance of ContentType has two fields which, taken together, uniquely describe an installed model:  \napp_label  \nThe name of the application the model is part of. This is taken from the app_label attribute of the model, and includes only the last part of the application\u2019s Python import path; django.contrib.contenttypes, for example, becomes an app_label of contenttypes. \n  \nmodel  \nThe name of the model class. \n Additionally, the following property is available:  \nname  \nThe human-readable name of the content type. This is taken from the verbose_name attribute of the model. \n \n"}, {"name": "contenttypes.models.ContentType.app_label", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.app_label", "type": "django.contrib.contenttypes", "text": " \napp_label  \nThe name of the application the model is part of. This is taken from the app_label attribute of the model, and includes only the last part of the application\u2019s Python import path; django.contrib.contenttypes, for example, becomes an app_label of contenttypes. \n"}, {"name": "contenttypes.models.ContentType.get_object_for_this_type()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.get_object_for_this_type", "type": "django.contrib.contenttypes", "text": " \nContentType.get_object_for_this_type(**kwargs)  \nTakes a set of valid lookup arguments for the model the ContentType represents, and does a get() lookup on that model, returning the corresponding object. \n"}, {"name": "contenttypes.models.ContentType.model", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.model", "type": "django.contrib.contenttypes", "text": " \nmodel  \nThe name of the model class. \n"}, {"name": "contenttypes.models.ContentType.model_class()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.model_class", "type": "django.contrib.contenttypes", "text": " \nContentType.model_class()  \nReturns the model class represented by this ContentType instance. \n"}, {"name": "contenttypes.models.ContentType.name", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.name", "type": "django.contrib.contenttypes", "text": " \nname  \nThe human-readable name of the content type. This is taken from the verbose_name attribute of the model. \n"}, {"name": "contenttypes.models.ContentTypeManager", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager", "type": "django.contrib.contenttypes", "text": " \nclass ContentTypeManager  \nContentType also has a custom manager, ContentTypeManager, which adds the following methods:  \nclear_cache()  \nClears an internal cache used by ContentType to keep track of models for which it has created ContentType instances. You probably won\u2019t ever need to call this method yourself; Django will call it automatically when it\u2019s needed. \n  \nget_for_id(id)  \nLookup a ContentType by ID. Since this method uses the same shared cache as get_for_model(), it\u2019s preferred to use this method over the usual ContentType.objects.get(pk=id) \n  \nget_for_model(model, for_concrete_model=True)  \nTakes either a model class or an instance of a model, and returns the ContentType instance representing that model. for_concrete_model=False allows fetching the ContentType of a proxy model. \n  \nget_for_models(*models, for_concrete_models=True)  \nTakes a variadic number of model classes, and returns a dictionary mapping the model classes to the ContentType instances representing them. for_concrete_models=False allows fetching the ContentType of proxy models. \n  \nget_by_natural_key(app_label, model)  \nReturns the ContentType instance uniquely identified by the given application label and model name. The primary purpose of this method is to allow ContentType objects to be referenced via a natural key during deserialization. \n \n"}, {"name": "contenttypes.models.ContentTypeManager.clear_cache()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.clear_cache", "type": "django.contrib.contenttypes", "text": " \nclear_cache()  \nClears an internal cache used by ContentType to keep track of models for which it has created ContentType instances. You probably won\u2019t ever need to call this method yourself; Django will call it automatically when it\u2019s needed. \n"}, {"name": "contenttypes.models.ContentTypeManager.get_by_natural_key()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_by_natural_key", "type": "django.contrib.contenttypes", "text": " \nget_by_natural_key(app_label, model)  \nReturns the ContentType instance uniquely identified by the given application label and model name. The primary purpose of this method is to allow ContentType objects to be referenced via a natural key during deserialization. \n"}, {"name": "contenttypes.models.ContentTypeManager.get_for_id()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_id", "type": "django.contrib.contenttypes", "text": " \nget_for_id(id)  \nLookup a ContentType by ID. Since this method uses the same shared cache as get_for_model(), it\u2019s preferred to use this method over the usual ContentType.objects.get(pk=id) \n"}, {"name": "contenttypes.models.ContentTypeManager.get_for_model()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model", "type": "django.contrib.contenttypes", "text": " \nget_for_model(model, for_concrete_model=True)  \nTakes either a model class or an instance of a model, and returns the ContentType instance representing that model. for_concrete_model=False allows fetching the ContentType of a proxy model. \n"}, {"name": "contenttypes.models.ContentTypeManager.get_for_models()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_models", "type": "django.contrib.contenttypes", "text": " \nget_for_models(*models, for_concrete_models=True)  \nTakes a variadic number of model classes, and returns a dictionary mapping the model classes to the ContentType instances representing them. for_concrete_models=False allows fetching the ContentType of proxy models. \n"}, {"name": "contrib packages", "path": "ref/contrib/index", "type": "API", "text": "contrib packages Django aims to follow Python\u2019s \u201cbatteries included\u201d philosophy. It ships with a variety of extra, optional tools that solve common web development problems. This code lives in django/contrib in the Django distribution. This document gives a rundown of the packages in contrib, along with any dependencies those packages have.  Note For most of these add-ons \u2013 specifically, the add-ons that include either models or template tags \u2013 you\u2019ll need to add the package name (e.g., 'django.contrib.redirects') to your INSTALLED_APPS setting and re-run manage.py migrate.   The Django admin site django.contrib.auth The contenttypes framework The flatpages app GeoDjango django.contrib.humanize The messages framework django.contrib.postgres The redirects app The sitemap framework The \u201csites\u201d framework The staticfiles app The syndication feed framework  admin The automatic Django administrative interface. For more information, see Tutorial 2 and the admin documentation. Requires the auth and contenttypes contrib packages to be installed. auth Django\u2019s authentication framework. See User authentication in Django. contenttypes A light framework for hooking into \u201ctypes\u201d of content, where each installed Django model is a separate content type. See the contenttypes documentation. flatpages A framework for managing \u201cflat\u201d HTML content in a database. See the flatpages documentation. Requires the sites contrib package to be installed as well. gis A world-class geospatial framework built on top of Django, that enables storage, manipulation and display of spatial data. See the GeoDjango documentation for more. humanize A set of Django template filters useful for adding a \u201chuman touch\u201d to data. See the humanize documentation. messages A framework for storing and retrieving temporary cookie- or session-based messages See the messages documentation. postgres A collection of PostgreSQL specific features. See the contrib.postgres documentation. redirects A framework for managing redirects. See the redirects documentation. sessions A framework for storing data in anonymous sessions. See the sessions documentation. sites A light framework that lets you operate multiple websites off of the same database and Django installation. It gives you hooks for associating objects to one or more sites. See the sites documentation. sitemaps A framework for generating Google sitemap XML files. See the sitemaps documentation. syndication A framework for generating syndication feeds, in RSS and Atom, quite easily. See the syndication documentation. Other add-ons If you have an idea for functionality to include in contrib, let us know! Code it up, and post it to the django-users mailing list.\n"}, {"name": "core.cache.cache", "path": "topics/cache#django.core.cache.cache", "type": "django.core", "text": " \ndjango.core.cache.cache  \nAs a shortcut, the default cache is available as django.core.cache.cache: >>> from django.core.cache import cache\n This object is equivalent to caches['default']. \n"}, {"name": "core.cache.caches", "path": "topics/cache#django.core.cache.caches", "type": "django.core", "text": " \ndjango.core.cache.caches  \nYou can access the caches configured in the CACHES setting through a dict-like object: django.core.cache.caches. Repeated requests for the same alias in the same thread will return the same object. >>> from django.core.cache import caches\n>>> cache1 = caches['myalias']\n>>> cache2 = caches['myalias']\n>>> cache1 is cache2\nTrue\n If the named key does not exist, InvalidCacheBackendError will be raised. To provide thread-safety, a different instance of the cache backend will be returned for each thread. \n"}, {"name": "core.cache.utils.make_template_fragment_key()", "path": "topics/cache#django.core.cache.utils.make_template_fragment_key", "type": "django.core", "text": " \ndjango.core.cache.utils.make_template_fragment_key(fragment_name, vary_on=None) \n"}, {"name": "core.caches.cache.add()", "path": "topics/cache#django.core.caches.cache.add", "type": "django.core", "text": " \ncache.add(key, value, timeout=DEFAULT_TIMEOUT, version=None) \n"}, {"name": "core.caches.cache.clear()", "path": "topics/cache#django.core.caches.cache.clear", "type": "django.core", "text": " \ncache.clear() \n"}, {"name": "core.caches.cache.close()", "path": "topics/cache#django.core.caches.cache.close", "type": "django.core", "text": " \ncache.close() \n"}, {"name": "core.caches.cache.decr()", "path": "topics/cache#django.core.caches.cache.decr", "type": "django.core", "text": " \ncache.decr(key, delta=1, version=None) \n"}, {"name": "core.caches.cache.delete()", "path": "topics/cache#django.core.caches.cache.delete", "type": "django.core", "text": " \ncache.delete(key, version=None) \n"}, {"name": "core.caches.cache.delete_many()", "path": "topics/cache#django.core.caches.cache.delete_many", "type": "django.core", "text": " \ncache.delete_many(keys, version=None) \n"}, {"name": "core.caches.cache.get()", "path": "topics/cache#django.core.caches.cache.get", "type": "django.core", "text": " \ncache.get(key, default=None, version=None)  \n>>> cache.get('my_key')\n'hello, world!'\n \n"}, {"name": "core.caches.cache.get_many()", "path": "topics/cache#django.core.caches.cache.get_many", "type": "django.core", "text": " \ncache.get_many(keys, version=None) \n"}, {"name": "core.caches.cache.get_or_set()", "path": "topics/cache#django.core.caches.cache.get_or_set", "type": "django.core", "text": " \ncache.get_or_set(key, default, timeout=DEFAULT_TIMEOUT, version=None) \n"}, {"name": "core.caches.cache.incr()", "path": "topics/cache#django.core.caches.cache.incr", "type": "django.core", "text": " \ncache.incr(key, delta=1, version=None) \n"}, {"name": "core.caches.cache.set()", "path": "topics/cache#django.core.caches.cache.set", "type": "django.core", "text": " \ncache.set(key, value, timeout=DEFAULT_TIMEOUT, version=None)  \n>>> cache.set('my_key', 'hello, world!', 30)\n \n"}, {"name": "core.caches.cache.set_many()", "path": "topics/cache#django.core.caches.cache.set_many", "type": "django.core", "text": " \ncache.set_many(dict, timeout) \n"}, {"name": "core.caches.cache.touch()", "path": "topics/cache#django.core.caches.cache.touch", "type": "django.core", "text": " \ncache.touch(key, timeout=DEFAULT_TIMEOUT, version=None) \n"}, {"name": "core.checks.CheckMessage", "path": "ref/checks#django.core.checks.CheckMessage", "type": "django.core", "text": " \nclass CheckMessage(level, msg, hint=None, obj=None, id=None) \n"}, {"name": "core.checks.Critical", "path": "ref/checks#django.core.checks.Critical", "type": "django.core", "text": " \nclass Critical(msg, hint=None, obj=None, id=None) \n"}, {"name": "core.checks.Debug", "path": "ref/checks#django.core.checks.Debug", "type": "django.core", "text": " \nclass Debug(msg, hint=None, obj=None, id=None) \n"}, {"name": "core.checks.Error", "path": "ref/checks#django.core.checks.Error", "type": "django.core", "text": " \nclass Error(msg, hint=None, obj=None, id=None) \n"}, {"name": "core.checks.Info", "path": "ref/checks#django.core.checks.Info", "type": "django.core", "text": " \nclass Info(msg, hint=None, obj=None, id=None) \n"}, {"name": "core.checks.register()", "path": "topics/checks#django.core.checks.register", "type": "django.core", "text": " \nregister(*tags)(function) \n"}, {"name": "core.checks.Warning", "path": "ref/checks#django.core.checks.Warning", "type": "django.core", "text": " \nclass Warning(msg, hint=None obj=None, id=None) \n"}, {"name": "core.exceptions.NON_FIELD_ERRORS", "path": "ref/exceptions#django.core.exceptions.NON_FIELD_ERRORS", "type": "django.core", "text": " \nNON_FIELD_ERRORS \n"}, {"name": "core.files.base.ContentFile", "path": "ref/files/file#django.core.files.base.ContentFile", "type": "django.core", "text": " \nclass ContentFile(content, name=None) [source]\n \nThe ContentFile class inherits from File, but unlike File it operates on string content (bytes also supported), rather than an actual file. For example: from django.core.files.base import ContentFile\n\nf1 = ContentFile(\"esta frase est\u00e1 en espa\u00f1ol\")\nf2 = ContentFile(b\"these are bytes\")\n \n"}, {"name": "core.files.File", "path": "ref/files/file#django.core.files.File", "type": "django.core", "text": " \nclass File(file_object, name=None) [source]\n \nThe File class is a thin wrapper around a Python file object with some Django-specific additions. Internally, Django uses this class when it needs to represent a file. File objects have the following attributes and methods:  \nname  \nThe name of the file including the relative path from MEDIA_ROOT. \n  \nsize  \nThe size of the file in bytes. \n  \nfile  \nThe underlying file object that this class wraps.  Be careful with this attribute in subclasses. Some subclasses of File, including ContentFile and FieldFile, may replace this attribute with an object other than a Python file object. In these cases, this attribute may itself be a File subclass (and not necessarily the same subclass). Whenever possible, use the attributes and methods of the subclass itself rather than the those of the subclass\u2019s file attribute.  \n  \nmode  \nThe read/write mode for the file. \n  \nopen(mode=None) [source]\n \nOpen or reopen the file (which also does File.seek(0)). The mode argument allows the same values as Python\u2019s built-in open(). When reopening a file, mode will override whatever mode the file was originally opened with; None means to reopen with the original mode. It can be used as a context manager, e.g. with file.open() as f:. \n  \n__iter__() [source]\n \nIterate over the file yielding one line at a time. \n  \nchunks(chunk_size=None) [source]\n \nIterate over the file yielding \u201cchunks\u201d of a given size. chunk_size defaults to 64 KB. This is especially useful with very large files since it allows them to be streamed off disk and avoids storing the whole file in memory. \n  \nmultiple_chunks(chunk_size=None) [source]\n \nReturns True if the file is large enough to require multiple chunks to access all of its content give some chunk_size. \n  \nclose() [source]\n \nClose the file. \n In addition to the listed methods, File exposes the following attributes and methods of its file object: encoding, fileno, flush, isatty, newlines, read, readinto, readline, readlines, seek, tell, truncate, write, writelines, readable(), writable(), and seekable(). \n"}, {"name": "core.files.File.__iter__()", "path": "ref/files/file#django.core.files.File.__iter__", "type": "django.core", "text": " \n__iter__() [source]\n \nIterate over the file yielding one line at a time. \n"}, {"name": "core.files.File.chunks()", "path": "ref/files/file#django.core.files.File.chunks", "type": "django.core", "text": " \nchunks(chunk_size=None) [source]\n \nIterate over the file yielding \u201cchunks\u201d of a given size. chunk_size defaults to 64 KB. This is especially useful with very large files since it allows them to be streamed off disk and avoids storing the whole file in memory. \n"}, {"name": "core.files.File.close()", "path": "ref/files/file#django.core.files.File.close", "type": "django.core", "text": " \nclose() [source]\n \nClose the file. \n"}, {"name": "core.files.File.delete()", "path": "ref/files/file#django.core.files.File.delete", "type": "django.core", "text": " \nFile.delete(save=True)  \nRemoves the file from the model instance and deletes the underlying file. If save is True, the model\u2019s save() method will be called once the file is deleted. \n"}, {"name": "core.files.File.file", "path": "ref/files/file#django.core.files.File.file", "type": "django.core", "text": " \nfile  \nThe underlying file object that this class wraps.  Be careful with this attribute in subclasses. Some subclasses of File, including ContentFile and FieldFile, may replace this attribute with an object other than a Python file object. In these cases, this attribute may itself be a File subclass (and not necessarily the same subclass). Whenever possible, use the attributes and methods of the subclass itself rather than the those of the subclass\u2019s file attribute.  \n"}, {"name": "core.files.File.mode", "path": "ref/files/file#django.core.files.File.mode", "type": "django.core", "text": " \nmode  \nThe read/write mode for the file. \n"}, {"name": "core.files.File.multiple_chunks()", "path": "ref/files/file#django.core.files.File.multiple_chunks", "type": "django.core", "text": " \nmultiple_chunks(chunk_size=None) [source]\n \nReturns True if the file is large enough to require multiple chunks to access all of its content give some chunk_size. \n"}, {"name": "core.files.File.name", "path": "ref/files/file#django.core.files.File.name", "type": "django.core", "text": " \nname  \nThe name of the file including the relative path from MEDIA_ROOT. \n"}, {"name": "core.files.File.open()", "path": "ref/files/file#django.core.files.File.open", "type": "django.core", "text": " \nopen(mode=None) [source]\n \nOpen or reopen the file (which also does File.seek(0)). The mode argument allows the same values as Python\u2019s built-in open(). When reopening a file, mode will override whatever mode the file was originally opened with; None means to reopen with the original mode. It can be used as a context manager, e.g. with file.open() as f:. \n"}, {"name": "core.files.File.save()", "path": "ref/files/file#django.core.files.File.save", "type": "django.core", "text": " \nFile.save(name, content, save=True)  \nSaves a new file with the file name and contents provided. This will not replace the existing file, but will create a new file and update the object to point to it. If save is True, the model\u2019s save() method will be called once the file is saved. That is, these two lines: >>> car.photo.save('myphoto.jpg', content, save=False)\n>>> car.save()\n are equivalent to: >>> car.photo.save('myphoto.jpg', content, save=True)\n Note that the content argument must be an instance of either File or of a subclass of File, such as ContentFile. \n"}, {"name": "core.files.File.size", "path": "ref/files/file#django.core.files.File.size", "type": "django.core", "text": " \nsize  \nThe size of the file in bytes. \n"}, {"name": "core.files.images.ImageFile", "path": "ref/files/file#django.core.files.images.ImageFile", "type": "django.core", "text": " \nclass ImageFile(file_object, name=None) [source]\n \nDjango provides a built-in class specifically for images. django.core.files.images.ImageFile inherits all the attributes and methods of File, and additionally provides the following:  \nwidth  \nWidth of the image in pixels. \n  \nheight  \nHeight of the image in pixels. \n \n"}, {"name": "core.files.images.ImageFile.height", "path": "ref/files/file#django.core.files.images.ImageFile.height", "type": "django.core", "text": " \nheight  \nHeight of the image in pixels. \n"}, {"name": "core.files.images.ImageFile.width", "path": "ref/files/file#django.core.files.images.ImageFile.width", "type": "django.core", "text": " \nwidth  \nWidth of the image in pixels. \n"}, {"name": "core.files.storage._open()", "path": "howto/custom-file-storage#django.core.files.storage._open", "type": "django.core", "text": " \n_open(name, mode='rb') \n"}, {"name": "core.files.storage._save()", "path": "howto/custom-file-storage#django.core.files.storage._save", "type": "django.core", "text": " \n_save(name, content) \n"}, {"name": "core.files.storage.DefaultStorage", "path": "ref/files/storage#django.core.files.storage.DefaultStorage", "type": "django.core", "text": " \nclass DefaultStorage  \nDefaultStorage provides lazy access to the current default storage system as defined by DEFAULT_FILE_STORAGE. DefaultStorage uses get_storage_class() internally. \n"}, {"name": "core.files.storage.FileSystemStorage", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage", "type": "django.core", "text": " \nclass FileSystemStorage(location=None, base_url=None, file_permissions_mode=None, directory_permissions_mode=None)  \nThe FileSystemStorage class implements basic file storage on a local filesystem. It inherits from Storage and provides implementations for all the public methods thereof.  \nlocation  \nAbsolute path to the directory that will hold the files. Defaults to the value of your MEDIA_ROOT setting. \n  \nbase_url  \nURL that serves the files stored at this location. Defaults to the value of your MEDIA_URL setting. \n  \nfile_permissions_mode  \nThe file system permissions that the file will receive when it is saved. Defaults to FILE_UPLOAD_PERMISSIONS. \n  \ndirectory_permissions_mode  \nThe file system permissions that the directory will receive when it is saved. Defaults to FILE_UPLOAD_DIRECTORY_PERMISSIONS. \n  Note The FileSystemStorage.delete() method will not raise an exception if the given file name does not exist.   \nget_created_time(name)  \nReturns a datetime of the system\u2019s ctime, i.e. os.path.getctime(). On some systems (like Unix), this is the time of the last metadata change, and on others (like Windows), it\u2019s the creation time of the file. \n \n"}, {"name": "core.files.storage.FileSystemStorage.base_url", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.base_url", "type": "django.core", "text": " \nbase_url  \nURL that serves the files stored at this location. Defaults to the value of your MEDIA_URL setting. \n"}, {"name": "core.files.storage.FileSystemStorage.directory_permissions_mode", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.directory_permissions_mode", "type": "django.core", "text": " \ndirectory_permissions_mode  \nThe file system permissions that the directory will receive when it is saved. Defaults to FILE_UPLOAD_DIRECTORY_PERMISSIONS. \n"}, {"name": "core.files.storage.FileSystemStorage.file_permissions_mode", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.file_permissions_mode", "type": "django.core", "text": " \nfile_permissions_mode  \nThe file system permissions that the file will receive when it is saved. Defaults to FILE_UPLOAD_PERMISSIONS. \n"}, {"name": "core.files.storage.FileSystemStorage.get_created_time()", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.get_created_time", "type": "django.core", "text": " \nget_created_time(name)  \nReturns a datetime of the system\u2019s ctime, i.e. os.path.getctime(). On some systems (like Unix), this is the time of the last metadata change, and on others (like Windows), it\u2019s the creation time of the file. \n"}, {"name": "core.files.storage.FileSystemStorage.location", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.location", "type": "django.core", "text": " \nlocation  \nAbsolute path to the directory that will hold the files. Defaults to the value of your MEDIA_ROOT setting. \n"}, {"name": "core.files.storage.get_alternative_name()", "path": "howto/custom-file-storage#django.core.files.storage.get_alternative_name", "type": "django.core", "text": " \nget_alternative_name(file_root, file_ext) \n"}, {"name": "core.files.storage.get_available_name()", "path": "howto/custom-file-storage#django.core.files.storage.get_available_name", "type": "django.core", "text": " \nget_available_name(name, max_length=None) \n"}, {"name": "core.files.storage.get_storage_class()", "path": "ref/files/storage#django.core.files.storage.get_storage_class", "type": "django.core", "text": " \nget_storage_class(import_path=None)  \nReturns a class or module which implements the storage API. When called without the import_path parameter get_storage_class will return the current default storage system as defined by DEFAULT_FILE_STORAGE. If import_path is provided, get_storage_class will attempt to import the class or module from the given path and will return it if successful. An exception will be raised if the import is unsuccessful. \n"}, {"name": "core.files.storage.get_valid_name()", "path": "howto/custom-file-storage#django.core.files.storage.get_valid_name", "type": "django.core", "text": " \nget_valid_name(name) \n"}, {"name": "core.files.storage.Storage", "path": "ref/files/storage#django.core.files.storage.Storage", "type": "django.core", "text": " \nclass Storage  \nThe Storage class provides a standardized API for storing files, along with a set of default behaviors that all other storage systems can inherit or override as necessary.  Note When methods return naive datetime objects, the effective timezone used will be the current value of os.environ['TZ']; note that this is usually set from Django\u2019s TIME_ZONE.   \ndelete(name)  \nDeletes the file referenced by name. If deletion is not supported on the target storage system this will raise NotImplementedError instead. \n  \nexists(name)  \nReturns True if a file referenced by the given name already exists in the storage system, or False if the name is available for a new file. \n  \nget_accessed_time(name)  \nReturns a datetime of the last accessed time of the file. For storage systems unable to return the last accessed time this will raise NotImplementedError. If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone. \n  \nget_alternative_name(file_root, file_ext)  \nReturns an alternative filename based on the file_root and file_ext parameters, an underscore plus a random 7 character alphanumeric string is appended to the filename before the extension. \n  \nget_available_name(name, max_length=None)  \nReturns a filename based on the name parameter that\u2019s free and available for new content to be written to on the target storage system. The length of the filename will not exceed max_length, if provided. If a free unique filename cannot be found, a SuspiciousFileOperation exception will be raised. If a file with name already exists, get_alternative_name() is called to obtain an alternative name. \n  \nget_created_time(name)  \nReturns a datetime of the creation time of the file. For storage systems unable to return the creation time this will raise NotImplementedError. If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone. \n  \nget_modified_time(name)  \nReturns a datetime of the last modified time of the file. For storage systems unable to return the last modified time this will raise NotImplementedError. If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone. \n  \nget_valid_name(name)  \nReturns a filename based on the name parameter that\u2019s suitable for use on the target storage system. \n  \ngenerate_filename(filename)  \nValidates the filename by calling get_valid_name() and returns a filename to be passed to the save() method. The filename argument may include a path as returned by FileField.upload_to. In that case, the path won\u2019t be passed to get_valid_name() but will be prepended back to the resulting name. The default implementation uses os.path operations. Override this method if that\u2019s not appropriate for your storage. \n  \nlistdir(path)  \nLists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren\u2019t able to provide such a listing, this will raise a NotImplementedError instead. \n  \nopen(name, mode='rb')  \nOpens the file given by name. Note that although the returned file is guaranteed to be a File object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned. \n  \npath(name)  \nThe local filesystem path where the file can be opened using Python\u2019s standard open(). For storage systems that aren\u2019t accessible from the local filesystem, this will raise NotImplementedError instead. \n  \nsave(name, content, max_length=None)  \nSaves a new file using the storage system, preferably with the name specified. If there already exists a file with this name name, the storage system may modify the filename as necessary to get a unique name. The actual name of the stored file will be returned. The max_length argument is passed along to get_available_name(). The content argument must be an instance of django.core.files.File or a file-like object that can be wrapped in File. \n  \nsize(name)  \nReturns the total size, in bytes, of the file referenced by name. For storage systems that aren\u2019t able to return the file size this will raise NotImplementedError instead. \n  \nurl(name)  \nReturns the URL where the contents of the file referenced by name can be accessed. For storage systems that don\u2019t support access by URL this will raise NotImplementedError instead. \n \n"}, {"name": "core.files.storage.Storage.delete()", "path": "ref/files/storage#django.core.files.storage.Storage.delete", "type": "django.core", "text": " \ndelete(name)  \nDeletes the file referenced by name. If deletion is not supported on the target storage system this will raise NotImplementedError instead. \n"}, {"name": "core.files.storage.Storage.exists()", "path": "ref/files/storage#django.core.files.storage.Storage.exists", "type": "django.core", "text": " \nexists(name)  \nReturns True if a file referenced by the given name already exists in the storage system, or False if the name is available for a new file. \n"}, {"name": "core.files.storage.Storage.generate_filename()", "path": "ref/files/storage#django.core.files.storage.Storage.generate_filename", "type": "django.core", "text": " \ngenerate_filename(filename)  \nValidates the filename by calling get_valid_name() and returns a filename to be passed to the save() method. The filename argument may include a path as returned by FileField.upload_to. In that case, the path won\u2019t be passed to get_valid_name() but will be prepended back to the resulting name. The default implementation uses os.path operations. Override this method if that\u2019s not appropriate for your storage. \n"}, {"name": "core.files.storage.Storage.get_accessed_time()", "path": "ref/files/storage#django.core.files.storage.Storage.get_accessed_time", "type": "django.core", "text": " \nget_accessed_time(name)  \nReturns a datetime of the last accessed time of the file. For storage systems unable to return the last accessed time this will raise NotImplementedError. If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone. \n"}, {"name": "core.files.storage.Storage.get_alternative_name()", "path": "ref/files/storage#django.core.files.storage.Storage.get_alternative_name", "type": "django.core", "text": " \nget_alternative_name(file_root, file_ext)  \nReturns an alternative filename based on the file_root and file_ext parameters, an underscore plus a random 7 character alphanumeric string is appended to the filename before the extension. \n"}, {"name": "core.files.storage.Storage.get_available_name()", "path": "ref/files/storage#django.core.files.storage.Storage.get_available_name", "type": "django.core", "text": " \nget_available_name(name, max_length=None)  \nReturns a filename based on the name parameter that\u2019s free and available for new content to be written to on the target storage system. The length of the filename will not exceed max_length, if provided. If a free unique filename cannot be found, a SuspiciousFileOperation exception will be raised. If a file with name already exists, get_alternative_name() is called to obtain an alternative name. \n"}, {"name": "core.files.storage.Storage.get_created_time()", "path": "ref/files/storage#django.core.files.storage.Storage.get_created_time", "type": "django.core", "text": " \nget_created_time(name)  \nReturns a datetime of the creation time of the file. For storage systems unable to return the creation time this will raise NotImplementedError. If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone. \n"}, {"name": "core.files.storage.Storage.get_modified_time()", "path": "ref/files/storage#django.core.files.storage.Storage.get_modified_time", "type": "django.core", "text": " \nget_modified_time(name)  \nReturns a datetime of the last modified time of the file. For storage systems unable to return the last modified time this will raise NotImplementedError. If USE_TZ is True, returns an aware datetime, otherwise returns a naive datetime in the local timezone. \n"}, {"name": "core.files.storage.Storage.get_valid_name()", "path": "ref/files/storage#django.core.files.storage.Storage.get_valid_name", "type": "django.core", "text": " \nget_valid_name(name)  \nReturns a filename based on the name parameter that\u2019s suitable for use on the target storage system. \n"}, {"name": "core.files.storage.Storage.listdir()", "path": "ref/files/storage#django.core.files.storage.Storage.listdir", "type": "django.core", "text": " \nlistdir(path)  \nLists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren\u2019t able to provide such a listing, this will raise a NotImplementedError instead. \n"}, {"name": "core.files.storage.Storage.open()", "path": "ref/files/storage#django.core.files.storage.Storage.open", "type": "django.core", "text": " \nopen(name, mode='rb')  \nOpens the file given by name. Note that although the returned file is guaranteed to be a File object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned. \n"}, {"name": "core.files.storage.Storage.path()", "path": "ref/files/storage#django.core.files.storage.Storage.path", "type": "django.core", "text": " \npath(name)  \nThe local filesystem path where the file can be opened using Python\u2019s standard open(). For storage systems that aren\u2019t accessible from the local filesystem, this will raise NotImplementedError instead. \n"}, {"name": "core.files.storage.Storage.save()", "path": "ref/files/storage#django.core.files.storage.Storage.save", "type": "django.core", "text": " \nsave(name, content, max_length=None)  \nSaves a new file using the storage system, preferably with the name specified. If there already exists a file with this name name, the storage system may modify the filename as necessary to get a unique name. The actual name of the stored file will be returned. The max_length argument is passed along to get_available_name(). The content argument must be an instance of django.core.files.File or a file-like object that can be wrapped in File. \n"}, {"name": "core.files.storage.Storage.size()", "path": "ref/files/storage#django.core.files.storage.Storage.size", "type": "django.core", "text": " \nsize(name)  \nReturns the total size, in bytes, of the file referenced by name. For storage systems that aren\u2019t able to return the file size this will raise NotImplementedError instead. \n"}, {"name": "core.files.storage.Storage.url()", "path": "ref/files/storage#django.core.files.storage.Storage.url", "type": "django.core", "text": " \nurl(name)  \nReturns the URL where the contents of the file referenced by name can be accessed. For storage systems that don\u2019t support access by URL this will raise NotImplementedError instead. \n"}, {"name": "core.files.uploadedfile.InMemoryUploadedFile", "path": "ref/files/uploads#django.core.files.uploadedfile.InMemoryUploadedFile", "type": "django.core", "text": " \nclass InMemoryUploadedFile  \nA file uploaded into memory (i.e. stream-to-memory). This class is used by the MemoryFileUploadHandler. \n"}, {"name": "core.files.uploadedfile.TemporaryUploadedFile", "path": "ref/files/uploads#django.core.files.uploadedfile.TemporaryUploadedFile", "type": "django.core", "text": " \nclass TemporaryUploadedFile  \nA file uploaded to a temporary location (i.e. stream-to-disk). This class is used by the TemporaryFileUploadHandler. In addition to the methods from UploadedFile, it has one additional method: \n"}, {"name": "core.files.uploadedfile.TemporaryUploadedFile.temporary_file_path()", "path": "ref/files/uploads#django.core.files.uploadedfile.TemporaryUploadedFile.temporary_file_path", "type": "django.core", "text": " \nTemporaryUploadedFile.temporary_file_path()  \nReturns the full path to the temporary uploaded file. \n"}, {"name": "core.files.uploadedfile.UploadedFile", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile", "type": "django.core", "text": " \nclass UploadedFile \n"}, {"name": "core.files.uploadedfile.UploadedFile.charset", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.charset", "type": "django.core", "text": " \nUploadedFile.charset  \nFor text/* content-types, the character set (i.e. utf8) supplied by the browser. Again, \u201ctrust but verify\u201d is the best policy here. \n"}, {"name": "core.files.uploadedfile.UploadedFile.chunks()", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.chunks", "type": "django.core", "text": " \nUploadedFile.chunks(chunk_size=None)  \nA generator returning chunks of the file. If multiple_chunks() is True, you should use this method in a loop instead of read(). In practice, it\u2019s often easiest to use chunks() all the time. Looping over chunks() instead of using read() ensures that large files don\u2019t overwhelm your system\u2019s memory. \n"}, {"name": "core.files.uploadedfile.UploadedFile.content_type", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.content_type", "type": "django.core", "text": " \nUploadedFile.content_type  \nThe content-type header uploaded with the file (e.g. text/plain or application/pdf). Like any data supplied by the user, you shouldn\u2019t trust that the uploaded file is actually this type. You\u2019ll still need to validate that the file contains the content that the content-type header claims \u2013 \u201ctrust but verify.\u201d \n"}, {"name": "core.files.uploadedfile.UploadedFile.content_type_extra", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.content_type_extra", "type": "django.core", "text": " \nUploadedFile.content_type_extra  \nA dictionary containing extra parameters passed to the content-type header. This is typically provided by services, such as Google App Engine, that intercept and handle file uploads on your behalf. As a result your handler may not receive the uploaded file content, but instead a URL or other pointer to the file (see RFC 2388). \n"}, {"name": "core.files.uploadedfile.UploadedFile.multiple_chunks()", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.multiple_chunks", "type": "django.core", "text": " \nUploadedFile.multiple_chunks(chunk_size=None)  \nReturns True if the uploaded file is big enough to require reading in multiple chunks. By default this will be any file larger than 2.5 megabytes, but that\u2019s configurable; see below. \n"}, {"name": "core.files.uploadedfile.UploadedFile.name", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.name", "type": "django.core", "text": " \nUploadedFile.name  \nThe name of the uploaded file (e.g. my_file.txt). \n"}, {"name": "core.files.uploadedfile.UploadedFile.read()", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.read", "type": "django.core", "text": " \nUploadedFile.read()  \nRead the entire uploaded data from the file. Be careful with this method: if the uploaded file is huge it can overwhelm your system if you try to read it into memory. You\u2019ll probably want to use chunks() instead; see below. \n"}, {"name": "core.files.uploadedfile.UploadedFile.size", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.size", "type": "django.core", "text": " \nUploadedFile.size  \nThe size, in bytes, of the uploaded file. \n"}, {"name": "core.files.uploadhandler.FileUploadHandler", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler", "type": "django.core", "text": " \nclass FileUploadHandler \n"}, {"name": "core.files.uploadhandler.FileUploadHandler.chunk_size", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.chunk_size", "type": "django.core", "text": " \nFileUploadHandler.chunk_size  \nSize, in bytes, of the \u201cchunks\u201d Django should store into memory and feed into the handler. That is, this attribute controls the size of chunks fed into FileUploadHandler.receive_data_chunk. For maximum performance the chunk sizes should be divisible by 4 and should not exceed 2 GB (231 bytes) in size. When there are multiple chunk sizes provided by multiple handlers, Django will use the smallest chunk size defined by any handler. The default is 64*210 bytes, or 64 KB. \n"}, {"name": "core.files.uploadhandler.FileUploadHandler.file_complete()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.file_complete", "type": "django.core", "text": " \nFileUploadHandler.file_complete(file_size)  \nCalled when a file has finished uploading. The handler should return an UploadedFile object that will be stored in request.FILES. Handlers may also return None to indicate that the UploadedFile object should come from subsequent upload handlers. \n"}, {"name": "core.files.uploadhandler.FileUploadHandler.handle_raw_input()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.handle_raw_input", "type": "django.core", "text": " \nFileUploadHandler.handle_raw_input(input_data, META, content_length, boundary, encoding)  \nAllows the handler to completely override the parsing of the raw HTTP input. input_data is a file-like object that supports read()-ing. META is the same object as request.META. content_length is the length of the data in input_data. Don\u2019t read more than content_length bytes from input_data. boundary is the MIME boundary for this request. encoding is the encoding of the request. Return None if you want upload handling to continue, or a tuple of (POST, FILES) if you want to return the new data structures suitable for the request directly. \n"}, {"name": "core.files.uploadhandler.FileUploadHandler.new_file()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.new_file", "type": "django.core", "text": " \nFileUploadHandler.new_file(field_name, file_name, content_type, content_length, charset, content_type_extra)  \nCallback signaling that a new file upload is starting. This is called before any data has been fed to any upload handlers. field_name is a string name of the file <input> field. file_name is the filename provided by the browser. content_type is the MIME type provided by the browser \u2013 E.g. 'image/jpeg'. content_length is the length of the image given by the browser. Sometimes this won\u2019t be provided and will be None. charset is the character set (i.e. utf8) given by the browser. Like content_length, this sometimes won\u2019t be provided. content_type_extra is extra information about the file from the content-type header. See UploadedFile.content_type_extra. This method may raise a StopFutureHandlers exception to prevent future handlers from handling this file. \n"}, {"name": "core.files.uploadhandler.FileUploadHandler.receive_data_chunk()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.receive_data_chunk", "type": "django.core", "text": " \nFileUploadHandler.receive_data_chunk(raw_data, start)  \nReceives a \u201cchunk\u201d of data from the file upload. raw_data is a bytestring containing the uploaded data. start is the position in the file where this raw_data chunk begins. The data you return will get fed into the subsequent upload handlers\u2019 receive_data_chunk methods. In this way, one handler can be a \u201cfilter\u201d for other handlers. Return None from receive_data_chunk to short-circuit remaining upload handlers from getting this chunk. This is useful if you\u2019re storing the uploaded data yourself and don\u2019t want future handlers to store a copy of the data. If you raise a StopUpload or a SkipFile exception, the upload will abort or the file will be completely skipped. \n"}, {"name": "core.files.uploadhandler.FileUploadHandler.upload_complete()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.upload_complete", "type": "django.core", "text": " \nFileUploadHandler.upload_complete()  \nCallback signaling that the entire upload (all files) has completed. \n"}, {"name": "core.files.uploadhandler.FileUploadHandler.upload_interrupted()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.upload_interrupted", "type": "django.core", "text": " \nFileUploadHandler.upload_interrupted()  \n New in Django 3.2.  Callback signaling that the upload was interrupted, e.g. when the user closed their browser during file upload. \n"}, {"name": "core.files.uploadhandler.MemoryFileUploadHandler", "path": "ref/files/uploads#django.core.files.uploadhandler.MemoryFileUploadHandler", "type": "django.core", "text": " \nclass MemoryFileUploadHandler \n"}, {"name": "core.files.uploadhandler.TemporaryFileUploadHandler", "path": "ref/files/uploads#django.core.files.uploadhandler.TemporaryFileUploadHandler", "type": "django.core", "text": " \nclass TemporaryFileUploadHandler \n"}, {"name": "core.mail.backends.smtp.EmailBackend", "path": "topics/email#django.core.mail.backends.smtp.EmailBackend", "type": "django.core", "text": " \nclass backends.smtp.EmailBackend(host=None, port=None, username=None, password=None, use_tls=None, fail_silently=False, use_ssl=None, timeout=None, ssl_keyfile=None, ssl_certfile=None, **kwargs)  \nThis is the default backend. Email will be sent through a SMTP server. The value for each argument is retrieved from the matching setting if the argument is None:  \nhost: EMAIL_HOST\n \nport: EMAIL_PORT\n \nusername: EMAIL_HOST_USER\n \npassword: EMAIL_HOST_PASSWORD\n \nuse_tls: EMAIL_USE_TLS\n \nuse_ssl: EMAIL_USE_SSL\n \ntimeout: EMAIL_TIMEOUT\n \nssl_keyfile: EMAIL_SSL_KEYFILE\n \nssl_certfile: EMAIL_SSL_CERTFILE\n  The SMTP backend is the default configuration inherited by Django. If you want to specify it explicitly, put the following in your settings: EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n If unspecified, the default timeout will be the one provided by socket.getdefaulttimeout(), which defaults to None (no timeout). \n"}, {"name": "core.mail.django.core.mail.outbox", "path": "topics/testing/tools#django.core.mail.django.core.mail.outbox", "type": "django.core", "text": " \ndjango.core.mail.outbox \n"}, {"name": "core.mail.EmailMessage", "path": "topics/email#django.core.mail.EmailMessage", "type": "django.core", "text": " \nclass EmailMessage \n"}, {"name": "core.mail.get_connection()", "path": "topics/email#django.core.mail.get_connection", "type": "django.core", "text": " \nget_connection(backend=None, fail_silently=False, *args, **kwargs) \n"}, {"name": "core.mail.mail_admins()", "path": "topics/email#django.core.mail.mail_admins", "type": "django.core", "text": " \nmail_admins(subject, message, fail_silently=False, connection=None, html_message=None) \n"}, {"name": "core.mail.mail_managers()", "path": "topics/email#django.core.mail.mail_managers", "type": "django.core", "text": " \nmail_managers(subject, message, fail_silently=False, connection=None, html_message=None) \n"}, {"name": "core.mail.send_mail()", "path": "topics/email#django.core.mail.send_mail", "type": "django.core", "text": " \nsend_mail(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None, html_message=None) \n"}, {"name": "core.mail.send_mass_mail()", "path": "topics/email#django.core.mail.send_mass_mail", "type": "django.core", "text": " \nsend_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None) \n"}, {"name": "core.management.AppCommand", "path": "howto/custom-management-commands#django.core.management.AppCommand", "type": "django.core", "text": " \nclass AppCommand \n"}, {"name": "core.management.AppCommand.handle_app_config()", "path": "howto/custom-management-commands#django.core.management.AppCommand.handle_app_config", "type": "django.core", "text": " \nAppCommand.handle_app_config(app_config, **options)  \nPerform the command\u2019s actions for app_config, which will be an AppConfig instance corresponding to an application label given on the command line. \n"}, {"name": "core.management.BaseCommand", "path": "howto/custom-management-commands#django.core.management.BaseCommand", "type": "django.core", "text": " \nclass BaseCommand \n"}, {"name": "core.management.BaseCommand.add_arguments()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.add_arguments", "type": "django.core", "text": " \nBaseCommand.add_arguments(parser)  \nEntry point to add parser arguments to handle command line arguments passed to the command. Custom commands should override this method to add both positional and optional arguments accepted by the command. Calling super() is not needed when directly subclassing BaseCommand. \n"}, {"name": "core.management.BaseCommand.check()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.check", "type": "django.core", "text": " \nBaseCommand.check(app_configs=None, tags=None, display_num_errors=False)  \nUses the system check framework to inspect the entire Django project for potential problems. Serious problems are raised as a CommandError; warnings are output to stderr; minor notifications are output to stdout. If app_configs and tags are both None, all system checks are performed. tags can be a list of check tags, like compatibility or models. \n"}, {"name": "core.management.BaseCommand.create_parser()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.create_parser", "type": "django.core", "text": " \nBaseCommand.create_parser(prog_name, subcommand, **kwargs)  \nReturns a CommandParser instance, which is an ArgumentParser subclass with a few customizations for Django. You can customize the instance by overriding this method and calling super() with kwargs of ArgumentParser parameters. \n"}, {"name": "core.management.BaseCommand.execute()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.execute", "type": "django.core", "text": " \nBaseCommand.execute(*args, **options)  \nTries to execute this command, performing system checks if needed (as controlled by the requires_system_checks attribute). If the command raises a CommandError, it\u2019s intercepted and printed to stderr. \n"}, {"name": "core.management.BaseCommand.get_version()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.get_version", "type": "django.core", "text": " \nBaseCommand.get_version()  \nReturns the Django version, which should be correct for all built-in Django commands. User-supplied commands can override this method to return their own version. \n"}, {"name": "core.management.BaseCommand.handle()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.handle", "type": "django.core", "text": " \nBaseCommand.handle(*args, **options)  \nThe actual logic of the command. Subclasses must implement this method. It may return a string which will be printed to stdout (wrapped by BEGIN; and COMMIT; if output_transaction is True). \n"}, {"name": "core.management.BaseCommand.help", "path": "howto/custom-management-commands#django.core.management.BaseCommand.help", "type": "django.core", "text": " \nBaseCommand.help  \nA short description of the command, which will be printed in the help message when the user runs the command python manage.py help <command>. \n"}, {"name": "core.management.BaseCommand.missing_args_message", "path": "howto/custom-management-commands#django.core.management.BaseCommand.missing_args_message", "type": "django.core", "text": " \nBaseCommand.missing_args_message  \nIf your command defines mandatory positional arguments, you can customize the message error returned in the case of missing arguments. The default is output by argparse (\u201ctoo few arguments\u201d). \n"}, {"name": "core.management.BaseCommand.output_transaction", "path": "howto/custom-management-commands#django.core.management.BaseCommand.output_transaction", "type": "django.core", "text": " \nBaseCommand.output_transaction  \nA boolean indicating whether the command outputs SQL statements; if True, the output will automatically be wrapped with BEGIN; and COMMIT;. Default value is False. \n"}, {"name": "core.management.BaseCommand.requires_migrations_checks", "path": "howto/custom-management-commands#django.core.management.BaseCommand.requires_migrations_checks", "type": "django.core", "text": " \nBaseCommand.requires_migrations_checks  \nA boolean; if True, the command prints a warning if the set of migrations on disk don\u2019t match the migrations in the database. A warning doesn\u2019t prevent the command from executing. Default value is False. \n"}, {"name": "core.management.BaseCommand.requires_system_checks", "path": "howto/custom-management-commands#django.core.management.BaseCommand.requires_system_checks", "type": "django.core", "text": " \nBaseCommand.requires_system_checks  \nA list or tuple of tags, e.g. [Tags.staticfiles, Tags.models]. System checks registered in the chosen tags will be checked for errors prior to executing the command. The value '__all__' can be used to specify that all system checks should be performed. Default value is '__all__'.  Changed in Django 3.2: In older versions, the requires_system_checks attribute expects a boolean value instead of a list or tuple of tags.  \n"}, {"name": "core.management.BaseCommand.style", "path": "howto/custom-management-commands#django.core.management.BaseCommand.style", "type": "django.core", "text": " \nBaseCommand.style  \nAn instance attribute that helps create colored output when writing to stdout or stderr. For example: self.stdout.write(self.style.SUCCESS('...'))\n See Syntax coloring to learn how to modify the color palette and to see the available styles (use uppercased versions of the \u201croles\u201d described in that section). If you pass the --no-color option when running your command, all self.style() calls will return the original string uncolored. \n"}, {"name": "core.management.BaseCommand.suppressed_base_arguments", "path": "howto/custom-management-commands#django.core.management.BaseCommand.suppressed_base_arguments", "type": "django.core", "text": " \nBaseCommand.suppressed_base_arguments  \n New in Django 4.0.  The default command options to suppress in the help output. This should be a set of option names (e.g. '--verbosity'). The default values for the suppressed options are still passed. \n"}, {"name": "core.management.call_command()", "path": "ref/django-admin#django.core.management.call_command", "type": "django.core", "text": " \ndjango.core.management.call_command(name, *args, **options) \n"}, {"name": "core.management.LabelCommand", "path": "howto/custom-management-commands#django.core.management.LabelCommand", "type": "django.core", "text": " \nclass LabelCommand \n"}, {"name": "core.management.LabelCommand.handle_label()", "path": "howto/custom-management-commands#django.core.management.LabelCommand.handle_label", "type": "django.core", "text": " \nLabelCommand.handle_label(label, **options)  \nPerform the command\u2019s actions for label, which will be the string as given on the command line. \n"}, {"name": "core.management.LabelCommand.label", "path": "howto/custom-management-commands#django.core.management.LabelCommand.label", "type": "django.core", "text": " \nLabelCommand.label  \nA string describing the arbitrary arguments passed to the command. The string is used in the usage text and error messages of the command. Defaults to 'label'. \n"}, {"name": "core.paginator.Page", "path": "ref/paginator#django.core.paginator.Page", "type": "django.core", "text": " \nclass Page(object_list, number, paginator)  \nA page acts like a sequence of Page.object_list when using len() or iterating it directly. \n"}, {"name": "core.paginator.Page.end_index()", "path": "ref/paginator#django.core.paginator.Page.end_index", "type": "django.core", "text": " \nPage.end_index()  \nReturns the 1-based index of the last object on the page, relative to all of the objects in the paginator\u2019s list. For example, when paginating a list of 5 objects with 2 objects per page, the second page\u2019s end_index() would return 4. \n"}, {"name": "core.paginator.Page.has_next()", "path": "ref/paginator#django.core.paginator.Page.has_next", "type": "django.core", "text": " \nPage.has_next()  \nReturns True if there\u2019s a next page. \n"}, {"name": "core.paginator.Page.has_other_pages()", "path": "ref/paginator#django.core.paginator.Page.has_other_pages", "type": "django.core", "text": " \nPage.has_other_pages()  \nReturns True if there\u2019s a next or previous page. \n"}, {"name": "core.paginator.Page.has_previous()", "path": "ref/paginator#django.core.paginator.Page.has_previous", "type": "django.core", "text": " \nPage.has_previous()  \nReturns True if there\u2019s a previous page. \n"}, {"name": "core.paginator.Page.next_page_number()", "path": "ref/paginator#django.core.paginator.Page.next_page_number", "type": "django.core", "text": " \nPage.next_page_number()  \nReturns the next page number. Raises InvalidPage if next page doesn\u2019t exist. \n"}, {"name": "core.paginator.Page.number", "path": "ref/paginator#django.core.paginator.Page.number", "type": "django.core", "text": " \nPage.number  \nThe 1-based page number for this page. \n"}, {"name": "core.paginator.Page.object_list", "path": "ref/paginator#django.core.paginator.Page.object_list", "type": "django.core", "text": " \nPage.object_list  \nThe list of objects on this page. \n"}, {"name": "core.paginator.Page.paginator", "path": "ref/paginator#django.core.paginator.Page.paginator", "type": "django.core", "text": " \nPage.paginator  \nThe associated Paginator object. \n"}, {"name": "core.paginator.Page.previous_page_number()", "path": "ref/paginator#django.core.paginator.Page.previous_page_number", "type": "django.core", "text": " \nPage.previous_page_number()  \nReturns the previous page number. Raises InvalidPage if previous page doesn\u2019t exist. \n"}, {"name": "core.paginator.Page.start_index()", "path": "ref/paginator#django.core.paginator.Page.start_index", "type": "django.core", "text": " \nPage.start_index()  \nReturns the 1-based index of the first object on the page, relative to all of the objects in the paginator\u2019s list. For example, when paginating a list of 5 objects with 2 objects per page, the second page\u2019s start_index() would return 3. \n"}, {"name": "core.paginator.Paginator", "path": "ref/paginator#django.core.paginator.Paginator", "type": "django.core", "text": " \nclass Paginator(object_list, per_page, orphans=0, allow_empty_first_page=True)  \nA paginator acts like a sequence of Page when using len() or iterating it directly. \n"}, {"name": "core.paginator.Paginator.allow_empty_first_page", "path": "ref/paginator#django.core.paginator.Paginator.allow_empty_first_page", "type": "django.core", "text": " \nPaginator.allow_empty_first_page  \nOptional. Whether or not the first page is allowed to be empty. If False and object_list is empty, then an EmptyPage error will be raised. \n"}, {"name": "core.paginator.Paginator.count", "path": "ref/paginator#django.core.paginator.Paginator.count", "type": "django.core", "text": " \nPaginator.count  \nThe total number of objects, across all pages.  Note When determining the number of objects contained in object_list, Paginator will first try calling object_list.count(). If object_list has no count() method, then Paginator will fall back to using len(object_list). This allows objects, such as QuerySet, to use a more efficient count() method when available.  \n"}, {"name": "core.paginator.Paginator.ELLIPSIS", "path": "ref/paginator#django.core.paginator.Paginator.ELLIPSIS", "type": "django.core", "text": " \nPaginator.ELLIPSIS  \n New in Django 3.2.  A translatable string used as a substitute for elided page numbers in the page range returned by get_elided_page_range(). Default is '\u2026'. \n"}, {"name": "core.paginator.Paginator.get_elided_page_range()", "path": "ref/paginator#django.core.paginator.Paginator.get_elided_page_range", "type": "django.core", "text": " \nPaginator.get_elided_page_range(number, *, on_each_side=3, on_ends=2)  \n New in Django 3.2.  Returns a 1-based list of page numbers similar to Paginator.page_range, but may add an ellipsis to either or both sides of the current page number when Paginator.num_pages is large. The number of pages to include on each side of the current page number is determined by the on_each_side argument which defaults to 3. The number of pages to include at the beginning and end of page range is determined by the on_ends argument which defaults to 2. For example, with the default values for on_each_side and on_ends, if the current page is 10 and there are 50 pages, the page range will be [1, 2, '\u2026', 7, 8, 9, 10, 11, 12, 13, '\u2026', 49, 50]. This will result in pages 7, 8, and 9 to the left of and 11, 12, and 13 to the right of the current page as well as pages 1 and 2 at the start and 49 and 50 at the end. Raises InvalidPage if the given page number doesn\u2019t exist. \n"}, {"name": "core.paginator.Paginator.get_page()", "path": "ref/paginator#django.core.paginator.Paginator.get_page", "type": "django.core", "text": " \nPaginator.get_page(number)  \nReturns a Page object with the given 1-based index, while also handling out of range and invalid page numbers. If the page isn\u2019t a number, it returns the first page. If the page number is negative or greater than the number of pages, it returns the last page. Raises an EmptyPage exception only if you specify Paginator(..., allow_empty_first_page=False) and the object_list is empty. \n"}, {"name": "core.paginator.Paginator.num_pages", "path": "ref/paginator#django.core.paginator.Paginator.num_pages", "type": "django.core", "text": " \nPaginator.num_pages  \nThe total number of pages. \n"}, {"name": "core.paginator.Paginator.object_list", "path": "ref/paginator#django.core.paginator.Paginator.object_list", "type": "django.core", "text": " \nPaginator.object_list  \nRequired. A list, tuple, QuerySet, or other sliceable object with a count() or __len__() method. For consistent pagination, QuerySets should be ordered, e.g. with an order_by() clause or with a default ordering on the model.  Performance issues paginating large QuerySets If you\u2019re using a QuerySet with a very large number of items, requesting high page numbers might be slow on some databases, because the resulting LIMIT/OFFSET query needs to count the number of OFFSET records which takes longer as the page number gets higher.  \n"}, {"name": "core.paginator.Paginator.orphans", "path": "ref/paginator#django.core.paginator.Paginator.orphans", "type": "django.core", "text": " \nPaginator.orphans  \nOptional. Use this when you don\u2019t want to have a last page with very few items. If the last page would normally have a number of items less than or equal to orphans, then those items will be added to the previous page (which becomes the last page) instead of leaving the items on a page by themselves. For example, with 23 items, per_page=10, and orphans=3, there will be two pages; the first page with 10 items and the second (and last) page with 13 items. orphans defaults to zero, which means pages are never combined and the last page may have one item. \n"}, {"name": "core.paginator.Paginator.page()", "path": "ref/paginator#django.core.paginator.Paginator.page", "type": "django.core", "text": " \nPaginator.page(number)  \nReturns a Page object with the given 1-based index. Raises PageNotAnInteger if the number cannot be converted to an integer by calling int(). Raises EmptyPage if the given page number doesn\u2019t exist. \n"}, {"name": "core.paginator.Paginator.page_range", "path": "ref/paginator#django.core.paginator.Paginator.page_range", "type": "django.core", "text": " \nPaginator.page_range  \nA 1-based range iterator of page numbers, e.g. yielding [1, 2, 3, 4]. \n"}, {"name": "core.paginator.Paginator.per_page", "path": "ref/paginator#django.core.paginator.Paginator.per_page", "type": "django.core", "text": " \nPaginator.per_page  \nRequired. The maximum number of items to include on a page, not including orphans (see the orphans optional argument below). \n"}, {"name": "core.serializers.get_serializer()", "path": "topics/serialization#django.core.serializers.get_serializer", "type": "django.core", "text": " \ndjango.core.serializers.get_serializer(format) \n"}, {"name": "core.serializers.json.DjangoJSONEncoder", "path": "topics/serialization#django.core.serializers.json.DjangoJSONEncoder", "type": "django.core", "text": " \nclass django.core.serializers.json.DjangoJSONEncoder \n"}, {"name": "core.signals.got_request_exception", "path": "ref/signals#django.core.signals.got_request_exception", "type": "django.core", "text": " \ndjango.core.signals.got_request_exception \n"}, {"name": "core.signals.request_finished", "path": "ref/signals#django.core.signals.request_finished", "type": "django.core", "text": " \ndjango.core.signals.request_finished \n"}, {"name": "core.signals.request_started", "path": "ref/signals#django.core.signals.request_started", "type": "django.core", "text": " \ndjango.core.signals.request_started \n"}, {"name": "core.signing.dumps()", "path": "topics/signing#django.core.signing.dumps", "type": "django.core", "text": " \ndumps(obj, key=None, salt='django.core.signing', serializer=JSONSerializer, compress=False)  \nReturns URL-safe, signed base64 compressed JSON string. Serialized object is signed using TimestampSigner. \n"}, {"name": "core.signing.loads()", "path": "topics/signing#django.core.signing.loads", "type": "django.core", "text": " \nloads(string, key=None, salt='django.core.signing', serializer=JSONSerializer, max_age=None)  \nReverse of dumps(), raises BadSignature if signature fails. Checks max_age (in seconds) if given. \n"}, {"name": "core.signing.Signer", "path": "topics/signing#django.core.signing.Signer", "type": "django.core", "text": " \nclass Signer(key=None, sep=':', salt=None, algorithm=None)  \nReturns a signer which uses key to generate signatures and sep to separate values. sep cannot be in the URL safe base64 alphabet. This alphabet contains alphanumeric characters, hyphens, and underscores. algorithm must be an algorithm supported by hashlib, it defaults to 'sha256'. \n"}, {"name": "core.signing.TimestampSigner", "path": "topics/signing#django.core.signing.TimestampSigner", "type": "django.core", "text": " \nclass TimestampSigner(key=None, sep=':', salt=None, algorithm='sha256')  \n \nsign(value)  \nSign value and append current timestamp to it. \n  \nunsign(value, max_age=None)  \nChecks if value was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object. \n  \nsign_object(obj, serializer=JSONSerializer, compress=False)  \n New in Django 3.2.  Encode, optionally compress, append current timestamp, and sign complex data structure (e.g. list, tuple, or dictionary). \n  \nunsign_object(signed_obj, serializer=JSONSerializer, max_age=None)  \n New in Django 3.2.  Checks if signed_obj was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object. \n \n"}, {"name": "core.signing.TimestampSigner.sign()", "path": "topics/signing#django.core.signing.TimestampSigner.sign", "type": "django.core", "text": " \nsign(value)  \nSign value and append current timestamp to it. \n"}, {"name": "core.signing.TimestampSigner.sign_object()", "path": "topics/signing#django.core.signing.TimestampSigner.sign_object", "type": "django.core", "text": " \nsign_object(obj, serializer=JSONSerializer, compress=False)  \n New in Django 3.2.  Encode, optionally compress, append current timestamp, and sign complex data structure (e.g. list, tuple, or dictionary). \n"}, {"name": "core.signing.TimestampSigner.unsign()", "path": "topics/signing#django.core.signing.TimestampSigner.unsign", "type": "django.core", "text": " \nunsign(value, max_age=None)  \nChecks if value was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object. \n"}, {"name": "core.signing.TimestampSigner.unsign_object()", "path": "topics/signing#django.core.signing.TimestampSigner.unsign_object", "type": "django.core", "text": " \nunsign_object(signed_obj, serializer=JSONSerializer, max_age=None)  \n New in Django 3.2.  Checks if signed_obj was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object. \n"}, {"name": "core.validators.DecimalValidator", "path": "ref/validators#django.core.validators.DecimalValidator", "type": "django.core", "text": " \nclass DecimalValidator(max_digits, decimal_places)  \nRaises ValidationError with the following codes:  \n'max_digits' if the number of digits is larger than max_digits. \n'max_decimal_places' if the number of decimals is larger than decimal_places. \n'max_whole_digits' if the number of whole digits is larger than the difference between max_digits and decimal_places.  \n"}, {"name": "core.validators.EmailValidator", "path": "ref/validators#django.core.validators.EmailValidator", "type": "django.core", "text": " \nclass EmailValidator(message=None, code=None, allowlist=None)  \n   \nParameters:\n\n \nmessage \u2013 If not None, overrides message. \ncode \u2013 If not None, overrides code. \nallowlist \u2013 If not None, overrides allowlist.      \nmessage  \nThe error message used by ValidationError if validation fails. Defaults to \"Enter a valid email address\". \n  \ncode  \nThe error code used by ValidationError if validation fails. Defaults to \"invalid\". \n  \nallowlist  \nAllowlist of email domains. By default, a regular expression (the domain_regex attribute) is used to validate whatever appears after the @ sign. However, if that string appears in the allowlist, this validation is bypassed. If not provided, the default allowlist is ['localhost']. Other domains that don\u2019t contain a dot won\u2019t pass validation, so you\u2019d need to add them to the allowlist as necessary. \n  Deprecated since version 3.2: The whitelist parameter is deprecated. Use allowlist instead. The undocumented domain_whitelist attribute is deprecated. Use domain_allowlist instead.  \n"}, {"name": "core.validators.EmailValidator.allowlist", "path": "ref/validators#django.core.validators.EmailValidator.allowlist", "type": "django.core", "text": " \nallowlist  \nAllowlist of email domains. By default, a regular expression (the domain_regex attribute) is used to validate whatever appears after the @ sign. However, if that string appears in the allowlist, this validation is bypassed. If not provided, the default allowlist is ['localhost']. Other domains that don\u2019t contain a dot won\u2019t pass validation, so you\u2019d need to add them to the allowlist as necessary. \n"}, {"name": "core.validators.EmailValidator.code", "path": "ref/validators#django.core.validators.EmailValidator.code", "type": "django.core", "text": " \ncode  \nThe error code used by ValidationError if validation fails. Defaults to \"invalid\". \n"}, {"name": "core.validators.EmailValidator.message", "path": "ref/validators#django.core.validators.EmailValidator.message", "type": "django.core", "text": " \nmessage  \nThe error message used by ValidationError if validation fails. Defaults to \"Enter a valid email address\". \n"}, {"name": "core.validators.FileExtensionValidator", "path": "ref/validators#django.core.validators.FileExtensionValidator", "type": "django.core", "text": " \nclass FileExtensionValidator(allowed_extensions, message, code)  \nRaises a ValidationError with a code of 'invalid_extension' if the extension of value.name (value is a File) isn\u2019t found in allowed_extensions. The extension is compared case-insensitively with allowed_extensions.  Warning Don\u2019t rely on validation of the file extension to determine a file\u2019s type. Files can be renamed to have any extension no matter what data they contain.  \n"}, {"name": "core.validators.int_list_validator()", "path": "ref/validators#django.core.validators.int_list_validator", "type": "django.core", "text": " \nint_list_validator(sep=', ', message=None, code='invalid', allow_negative=False)  \nReturns a RegexValidator instance that ensures a string consists of integers separated by sep. It allows negative integers when allow_negative is True. \n"}, {"name": "core.validators.MaxLengthValidator", "path": "ref/validators#django.core.validators.MaxLengthValidator", "type": "django.core", "text": " \nclass MaxLengthValidator(limit_value, message=None)  \nRaises a ValidationError with a code of 'max_length' if the length of value is greater than limit_value, which may be a callable. \n"}, {"name": "core.validators.MaxValueValidator", "path": "ref/validators#django.core.validators.MaxValueValidator", "type": "django.core", "text": " \nclass MaxValueValidator(limit_value, message=None)  \nRaises a ValidationError with a code of 'max_value' if value is greater than limit_value, which may be a callable. \n"}, {"name": "core.validators.MinLengthValidator", "path": "ref/validators#django.core.validators.MinLengthValidator", "type": "django.core", "text": " \nclass MinLengthValidator(limit_value, message=None)  \nRaises a ValidationError with a code of 'min_length' if the length of value is less than limit_value, which may be a callable. \n"}, {"name": "core.validators.MinValueValidator", "path": "ref/validators#django.core.validators.MinValueValidator", "type": "django.core", "text": " \nclass MinValueValidator(limit_value, message=None)  \nRaises a ValidationError with a code of 'min_value' if value is less than limit_value, which may be a callable. \n"}, {"name": "core.validators.ProhibitNullCharactersValidator", "path": "ref/validators#django.core.validators.ProhibitNullCharactersValidator", "type": "django.core", "text": " \nclass ProhibitNullCharactersValidator(message=None, code=None)  \nRaises a ValidationError if str(value) contains one or more nulls characters ('\\x00').    \nParameters:\n\n \nmessage \u2013 If not None, overrides message. \ncode \u2013 If not None, overrides code.      \nmessage  \nThe error message used by ValidationError if validation fails. Defaults to \"Null characters are not allowed.\". \n  \ncode  \nThe error code used by ValidationError if validation fails. Defaults to \"null_characters_not_allowed\". \n \n"}, {"name": "core.validators.ProhibitNullCharactersValidator.code", "path": "ref/validators#django.core.validators.ProhibitNullCharactersValidator.code", "type": "django.core", "text": " \ncode  \nThe error code used by ValidationError if validation fails. Defaults to \"null_characters_not_allowed\". \n"}, {"name": "core.validators.ProhibitNullCharactersValidator.message", "path": "ref/validators#django.core.validators.ProhibitNullCharactersValidator.message", "type": "django.core", "text": " \nmessage  \nThe error message used by ValidationError if validation fails. Defaults to \"Null characters are not allowed.\". \n"}, {"name": "core.validators.RegexValidator", "path": "ref/validators#django.core.validators.RegexValidator", "type": "django.core", "text": " \nclass RegexValidator(regex=None, message=None, code=None, inverse_match=None, flags=0)  \n   \nParameters:\n\n \nregex \u2013 If not None, overrides regex. Can be a regular expression string or a pre-compiled regular expression. \nmessage \u2013 If not None, overrides message. \ncode \u2013 If not None, overrides code. \ninverse_match \u2013 If not None, overrides inverse_match. \nflags \u2013 If not None, overrides flags. In that case, regex must be a regular expression string, or TypeError is raised.     A RegexValidator searches the provided value for a given regular expression with re.search(). By default, raises a ValidationError with message and code if a match is not found. Its behavior can be inverted by setting inverse_match to True, in which case the ValidationError is raised when a match is found.  \nregex  \nThe regular expression pattern to search for within the provided value, using re.search(). This may be a string or a pre-compiled regular expression created with re.compile(). Defaults to the empty string, which will be found in every possible value. \n  \nmessage  \nThe error message used by ValidationError if validation fails. Defaults to \"Enter a valid value\". \n  \ncode  \nThe error code used by ValidationError if validation fails. Defaults to \"invalid\". \n  \ninverse_match  \nThe match mode for regex. Defaults to False. \n  \nflags  \nThe regex flags used when compiling the regular expression string regex. If regex is a pre-compiled regular expression, and flags is overridden, TypeError is raised. Defaults to 0. \n \n"}, {"name": "core.validators.RegexValidator.code", "path": "ref/validators#django.core.validators.RegexValidator.code", "type": "django.core", "text": " \ncode  \nThe error code used by ValidationError if validation fails. Defaults to \"invalid\". \n"}, {"name": "core.validators.RegexValidator.flags", "path": "ref/validators#django.core.validators.RegexValidator.flags", "type": "django.core", "text": " \nflags  \nThe regex flags used when compiling the regular expression string regex. If regex is a pre-compiled regular expression, and flags is overridden, TypeError is raised. Defaults to 0. \n"}, {"name": "core.validators.RegexValidator.inverse_match", "path": "ref/validators#django.core.validators.RegexValidator.inverse_match", "type": "django.core", "text": " \ninverse_match  \nThe match mode for regex. Defaults to False. \n"}, {"name": "core.validators.RegexValidator.message", "path": "ref/validators#django.core.validators.RegexValidator.message", "type": "django.core", "text": " \nmessage  \nThe error message used by ValidationError if validation fails. Defaults to \"Enter a valid value\". \n"}, {"name": "core.validators.RegexValidator.regex", "path": "ref/validators#django.core.validators.RegexValidator.regex", "type": "django.core", "text": " \nregex  \nThe regular expression pattern to search for within the provided value, using re.search(). This may be a string or a pre-compiled regular expression created with re.compile(). Defaults to the empty string, which will be found in every possible value. \n"}, {"name": "core.validators.URLValidator", "path": "ref/validators#django.core.validators.URLValidator", "type": "django.core", "text": " \nclass URLValidator(schemes=None, regex=None, message=None, code=None)  \nA RegexValidator subclass that ensures a value looks like a URL, and raises an error code of 'invalid' if it doesn\u2019t. Loopback addresses and reserved IP spaces are considered valid. Literal IPv6 addresses (RFC 3986#section-3.2.2) and Unicode domains are both supported. In addition to the optional arguments of its parent RegexValidator class, URLValidator accepts an extra optional attribute:  \nschemes  \nURL/URI scheme list to validate against. If not provided, the default list is ['http', 'https', 'ftp', 'ftps']. As a reference, the IANA website provides a full list of valid URI schemes. \n \n"}, {"name": "core.validators.URLValidator.schemes", "path": "ref/validators#django.core.validators.URLValidator.schemes", "type": "django.core", "text": " \nschemes  \nURL/URI scheme list to validate against. If not provided, the default list is ['http', 'https', 'ftp', 'ftps']. As a reference, the IANA website provides a full list of valid URI schemes. \n"}, {"name": "core.validators.validate_comma_separated_integer_list", "path": "ref/validators#django.core.validators.validate_comma_separated_integer_list", "type": "django.core", "text": " \nvalidate_comma_separated_integer_list  \nA RegexValidator instance that ensures a value is a comma-separated list of integers. \n"}, {"name": "core.validators.validate_email", "path": "ref/validators#django.core.validators.validate_email", "type": "django.core", "text": " \nvalidate_email  \nAn EmailValidator instance without any customizations. \n"}, {"name": "core.validators.validate_image_file_extension", "path": "ref/validators#django.core.validators.validate_image_file_extension", "type": "django.core", "text": " \nvalidate_image_file_extension  \nUses Pillow to ensure that value.name (value is a File) has a valid image extension. \n"}, {"name": "core.validators.validate_ipv46_address", "path": "ref/validators#django.core.validators.validate_ipv46_address", "type": "django.core", "text": " \nvalidate_ipv46_address  \nUses both validate_ipv4_address and validate_ipv6_address to ensure a value is either a valid IPv4 or IPv6 address. \n"}, {"name": "core.validators.validate_ipv4_address", "path": "ref/validators#django.core.validators.validate_ipv4_address", "type": "django.core", "text": " \nvalidate_ipv4_address  \nA RegexValidator instance that ensures a value looks like an IPv4 address. \n"}, {"name": "core.validators.validate_ipv6_address", "path": "ref/validators#django.core.validators.validate_ipv6_address", "type": "django.core", "text": " \nvalidate_ipv6_address  \nUses django.utils.ipv6 to check the validity of an IPv6 address. \n"}, {"name": "core.validators.validate_slug", "path": "ref/validators#django.core.validators.validate_slug", "type": "django.core", "text": " \nvalidate_slug  \nA RegexValidator instance that ensures a value consists of only letters, numbers, underscores or hyphens. \n"}, {"name": "core.validators.validate_unicode_slug", "path": "ref/validators#django.core.validators.validate_unicode_slug", "type": "django.core", "text": " \nvalidate_unicode_slug  \nA RegexValidator instance that ensures a value consists of only Unicode letters, numbers, underscores, or hyphens. \n"}, {"name": "Creating forms from models", "path": "topics/forms/modelforms", "type": "Guides", "text": "Creating forms from models ModelForm  \nclass ModelForm \n If you\u2019re building a database-driven app, chances are you\u2019ll have forms that map closely to Django models. For instance, you might have a BlogComment model, and you want to create a form that lets people submit comments. In this case, it would be redundant to define the field types in your form, because you\u2019ve already defined the fields in your model. For this reason, Django provides a helper class that lets you create a Form class from a Django model. For example: >>> from django.forms import ModelForm\n>>> from myapp.models import Article\n\n# Create the form class.\n>>> class ArticleForm(ModelForm):\n...     class Meta:\n...         model = Article\n...         fields = ['pub_date', 'headline', 'content', 'reporter']\n\n# Creating a form to add an article.\n>>> form = ArticleForm()\n\n# Creating a form to change an existing article.\n>>> article = Article.objects.get(pk=1)\n>>> form = ArticleForm(instance=article)\n Field types The generated Form class will have a form field for every model field specified, in the order specified in the fields attribute. Each model field has a corresponding default form field. For example, a CharField on a model is represented as a CharField on a form. A model ManyToManyField is represented as a MultipleChoiceField. Here is the full list of conversions:   \nModel field Form field   \nAutoField Not represented in the form  \nBigAutoField Not represented in the form  \nBigIntegerField \nIntegerField with min_value set to -9223372036854775808 and max_value set to 9223372036854775807.  \nBinaryField \nCharField, if editable is set to True on the model field, otherwise not represented in the form.  \nBooleanField \nBooleanField, or NullBooleanField if null=True.  \nCharField \nCharField with max_length set to the model field\u2019s max_length and empty_value set to None if null=True.  \nDateField DateField  \nDateTimeField DateTimeField  \nDecimalField DecimalField  \nDurationField DurationField  \nEmailField EmailField  \nFileField FileField  \nFilePathField FilePathField  \nFloatField FloatField  \nForeignKey \nModelChoiceField (see below)  \nImageField ImageField  \nIntegerField IntegerField  \nIPAddressField IPAddressField  \nGenericIPAddressField GenericIPAddressField  \nJSONField JSONField  \nManyToManyField \nModelMultipleChoiceField (see below)  \nPositiveBigIntegerField IntegerField  \nPositiveIntegerField IntegerField  \nPositiveSmallIntegerField IntegerField  \nSlugField SlugField  \nSmallAutoField Not represented in the form  \nSmallIntegerField IntegerField  \nTextField \nCharField with widget=forms.Textarea\n  \nTimeField TimeField  \nURLField URLField  \nUUIDField UUIDField   As you might expect, the ForeignKey and ManyToManyField model field types are special cases:  \nForeignKey is represented by django.forms.ModelChoiceField, which is a ChoiceField whose choices are a model QuerySet. \nManyToManyField is represented by django.forms.ModelMultipleChoiceField, which is a MultipleChoiceField whose choices are a model QuerySet.  In addition, each generated form field has attributes set as follows:  If the model field has blank=True, then required is set to False on the form field. Otherwise, required=True. The form field\u2019s label is set to the verbose_name of the model field, with the first character capitalized. The form field\u2019s help_text is set to the help_text of the model field. If the model field has choices set, then the form field\u2019s widget will be set to Select, with choices coming from the model field\u2019s choices. The choices will normally include the blank choice which is selected by default. If the field is required, this forces the user to make a selection. The blank choice will not be included if the model field has blank=False and an explicit default value (the default value will be initially selected instead).  Finally, note that you can override the form field used for a given model field. See Overriding the default fields below. A full example Consider this set of models: from django.db import models\nfrom django.forms import ModelForm\n\nTITLE_CHOICES = [\n    ('MR', 'Mr.'),\n    ('MRS', 'Mrs.'),\n    ('MS', 'Ms.'),\n]\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    title = models.CharField(max_length=3, choices=TITLE_CHOICES)\n    birth_date = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return self.name\n\nclass Book(models.Model):\n    name = models.CharField(max_length=100)\n    authors = models.ManyToManyField(Author)\n\nclass AuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        fields = ['name', 'title', 'birth_date']\n\nclass BookForm(ModelForm):\n    class Meta:\n        model = Book\n        fields = ['name', 'authors']\n With these models, the ModelForm subclasses above would be roughly equivalent to this (the only difference being the save() method, which we\u2019ll discuss in a moment.): from django import forms\n\nclass AuthorForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    title = forms.CharField(\n        max_length=3,\n        widget=forms.Select(choices=TITLE_CHOICES),\n    )\n    birth_date = forms.DateField(required=False)\n\nclass BookForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    authors = forms.ModelMultipleChoiceField(queryset=Author.objects.all())\n Validation on a ModelForm\n There are two main steps involved in validating a ModelForm:  Validating the form Validating the model instance  Just like normal form validation, model form validation is triggered implicitly when calling is_valid() or accessing the errors attribute and explicitly when calling full_clean(), although you will typically not use the latter method in practice. Model validation (Model.full_clean()) is triggered from within the form validation step, right after the form\u2019s clean() method is called.  Warning The cleaning process modifies the model instance passed to the ModelForm constructor in various ways. For instance, any date fields on the model are converted into actual date objects. Failed validation may leave the underlying model instance in an inconsistent state and therefore it\u2019s not recommended to reuse it.  Overriding the clean() method You can override the clean() method on a model form to provide additional validation in the same way you can on a normal form. A model form instance attached to a model object will contain an instance attribute that gives its methods access to that specific model instance.  Warning The ModelForm.clean() method sets a flag that makes the model validation step validate the uniqueness of model fields that are marked as unique, unique_together or unique_for_date|month|year. If you would like to override the clean() method and maintain this validation, you must call the parent class\u2019s clean() method.  Interaction with model validation As part of the validation process, ModelForm will call the clean() method of each field on your model that has a corresponding field on your form. If you have excluded any model fields, validation will not be run on those fields. See the form validation documentation for more on how field cleaning and validation work. The model\u2019s clean() method will be called before any uniqueness checks are made. See Validating objects for more information on the model\u2019s clean() hook. Considerations regarding model\u2019s error_messages\n Error messages defined at the form field level or at the form Meta level always take precedence over the error messages defined at the model field level. Error messages defined on model fields are only used when the ValidationError is raised during the model validation step and no corresponding error messages are defined at the form level. You can override the error messages from NON_FIELD_ERRORS raised by model validation by adding the NON_FIELD_ERRORS key to the error_messages dictionary of the ModelForm\u2019s inner Meta class: from django.core.exceptions import NON_FIELD_ERRORS\nfrom django.forms import ModelForm\n\nclass ArticleForm(ModelForm):\n    class Meta:\n        error_messages = {\n            NON_FIELD_ERRORS: {\n                'unique_together': \"%(model_name)s's %(field_labels)s are not unique.\",\n            }\n        }\n The save() method Every ModelForm also has a save() method. This method creates and saves a database object from the data bound to the form. A subclass of ModelForm can accept an existing model instance as the keyword argument instance; if this is supplied, save() will update that instance. If it\u2019s not supplied, save() will create a new instance of the specified model: >>> from myapp.models import Article\n>>> from myapp.forms import ArticleForm\n\n# Create a form instance from POST data.\n>>> f = ArticleForm(request.POST)\n\n# Save a new Article object from the form's data.\n>>> new_article = f.save()\n\n# Create a form to edit an existing Article, but use\n# POST data to populate the form.\n>>> a = Article.objects.get(pk=1)\n>>> f = ArticleForm(request.POST, instance=a)\n>>> f.save()\n Note that if the form hasn\u2019t been validated, calling save() will do so by checking form.errors. A ValueError will be raised if the data in the form doesn\u2019t validate \u2013 i.e., if form.errors evaluates to True. If an optional field doesn\u2019t appear in the form\u2019s data, the resulting model instance uses the model field default, if there is one, for that field. This behavior doesn\u2019t apply to fields that use CheckboxInput, CheckboxSelectMultiple, or SelectMultiple (or any custom widget whose value_omitted_from_data() method always returns False) since an unchecked checkbox and unselected <select multiple> don\u2019t appear in the data of an HTML form submission. Use a custom form field or widget if you\u2019re designing an API and want the default fallback behavior for a field that uses one of these widgets. This save() method accepts an optional commit keyword argument, which accepts either True or False. If you call save() with commit=False, then it will return an object that hasn\u2019t yet been saved to the database. In this case, it\u2019s up to you to call save() on the resulting model instance. This is useful if you want to do custom processing on the object before saving it, or if you want to use one of the specialized model saving options. commit is True by default. Another side effect of using commit=False is seen when your model has a many-to-many relation with another model. If your model has a many-to-many relation and you specify commit=False when you save a form, Django cannot immediately save the form data for the many-to-many relation. This is because it isn\u2019t possible to save many-to-many data for an instance until the instance exists in the database. To work around this problem, every time you save a form using commit=False, Django adds a save_m2m() method to your ModelForm subclass. After you\u2019ve manually saved the instance produced by the form, you can invoke save_m2m() to save the many-to-many form data. For example: # Create a form instance with POST data.\n>>> f = AuthorForm(request.POST)\n\n# Create, but don't save the new author instance.\n>>> new_author = f.save(commit=False)\n\n# Modify the author in some way.\n>>> new_author.some_field = 'some_value'\n\n# Save the new instance.\n>>> new_author.save()\n\n# Now, save the many-to-many data for the form.\n>>> f.save_m2m()\n Calling save_m2m() is only required if you use save(commit=False). When you use a save() on a form, all data \u2013 including many-to-many data \u2013 is saved without the need for any additional method calls. For example: # Create a form instance with POST data.\n>>> a = Author()\n>>> f = AuthorForm(request.POST, instance=a)\n\n# Create and save the new author instance. There's no need to do anything else.\n>>> new_author = f.save()\n Other than the save() and save_m2m() methods, a ModelForm works exactly the same way as any other forms form. For example, the is_valid() method is used to check for validity, the is_multipart() method is used to determine whether a form requires multipart file upload (and hence whether request.FILES must be passed to the form), etc. See Binding uploaded files to a form for more information. Selecting the fields to use It is strongly recommended that you explicitly set all fields that should be edited in the form using the fields attribute. Failure to do so can easily lead to security problems when a form unexpectedly allows a user to set certain fields, especially when new fields are added to a model. Depending on how the form is rendered, the problem may not even be visible on the web page. The alternative approach would be to include all fields automatically, or remove only some. This fundamental approach is known to be much less secure and has led to serious exploits on major websites (e.g. GitHub). There are, however, two shortcuts available for cases where you can guarantee these security concerns do not apply to you:  \nSet the fields attribute to the special value '__all__' to indicate that all fields in the model should be used. For example: from django.forms import ModelForm\n\nclass AuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        fields = '__all__'\n  \nSet the exclude attribute of the ModelForm\u2019s inner Meta class to a list of fields to be excluded from the form. For example: class PartialAuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        exclude = ['title']\n Since the Author model has the 3 fields name, title and birth_date, this will result in the fields name and birth_date being present on the form.   If either of these are used, the order the fields appear in the form will be the order the fields are defined in the model, with ManyToManyField instances appearing last. In addition, Django applies the following rule: if you set editable=False on the model field, any form created from the model via ModelForm will not include that field.  Note Any fields not included in a form by the above logic will not be set by the form\u2019s save() method. Also, if you manually add the excluded fields back to the form, they will not be initialized from the model instance. Django will prevent any attempt to save an incomplete model, so if the model does not allow the missing fields to be empty, and does not provide a default value for the missing fields, any attempt to save() a ModelForm with missing fields will fail. To avoid this failure, you must instantiate your model with initial values for the missing, but required fields: author = Author(title='Mr')\nform = PartialAuthorForm(request.POST, instance=author)\nform.save()\n Alternatively, you can use save(commit=False) and manually set any extra required fields: form = PartialAuthorForm(request.POST)\nauthor = form.save(commit=False)\nauthor.title = 'Mr'\nauthor.save()\n See the section on saving forms for more details on using save(commit=False).  Overriding the default fields The default field types, as described in the Field types table above, are sensible defaults. If you have a DateField in your model, chances are you\u2019d want that to be represented as a DateField in your form. But ModelForm gives you the flexibility of changing the form field for a given model. To specify a custom widget for a field, use the widgets attribute of the inner Meta class. This should be a dictionary mapping field names to widget classes or instances. For example, if you want the CharField for the name attribute of Author to be represented by a <textarea> instead of its default <input type=\"text\">, you can override the field\u2019s widget: from django.forms import ModelForm, Textarea\nfrom myapp.models import Author\n\nclass AuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        fields = ('name', 'title', 'birth_date')\n        widgets = {\n            'name': Textarea(attrs={'cols': 80, 'rows': 20}),\n        }\n The widgets dictionary accepts either widget instances (e.g., Textarea(...)) or classes (e.g., Textarea). Note that the widgets dictionary is ignored for a model field with a non-empty choices attribute. In this case, you must override the form field to use a different widget. Similarly, you can specify the labels, help_texts and error_messages attributes of the inner Meta class if you want to further customize a field. For example if you wanted to customize the wording of all user facing strings for the name field: from django.utils.translation import gettext_lazy as _\n\nclass AuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        fields = ('name', 'title', 'birth_date')\n        labels = {\n            'name': _('Writer'),\n        }\n        help_texts = {\n            'name': _('Some useful help text.'),\n        }\n        error_messages = {\n            'name': {\n                'max_length': _(\"This writer's name is too long.\"),\n            },\n        }\n You can also specify field_classes to customize the type of fields instantiated by the form. For example, if you wanted to use MySlugFormField for the slug field, you could do the following: from django.forms import ModelForm\nfrom myapp.models import Article\n\nclass ArticleForm(ModelForm):\n    class Meta:\n        model = Article\n        fields = ['pub_date', 'headline', 'content', 'reporter', 'slug']\n        field_classes = {\n            'slug': MySlugFormField,\n        }\n Finally, if you want complete control over of a field \u2013 including its type, validators, required, etc. \u2013 you can do this by declaratively specifying fields like you would in a regular Form. If you want to specify a field\u2019s validators, you can do so by defining the field declaratively and setting its validators parameter: from django.forms import CharField, ModelForm\nfrom myapp.models import Article\n\nclass ArticleForm(ModelForm):\n    slug = CharField(validators=[validate_slug])\n\n    class Meta:\n        model = Article\n        fields = ['pub_date', 'headline', 'content', 'reporter', 'slug']\n  Note When you explicitly instantiate a form field like this, it is important to understand how ModelForm and regular Form are related. ModelForm is a regular Form which can automatically generate certain fields. The fields that are automatically generated depend on the content of the Meta class and on which fields have already been defined declaratively. Basically, ModelForm will only generate fields that are missing from the form, or in other words, fields that weren\u2019t defined declaratively. Fields defined declaratively are left as-is, therefore any customizations made to Meta attributes such as widgets, labels, help_texts, or error_messages are ignored; these only apply to fields that are generated automatically. Similarly, fields defined declaratively do not draw their attributes like max_length or required from the corresponding model. If you want to maintain the behavior specified in the model, you must set the relevant arguments explicitly when declaring the form field. For example, if the Article model looks like this: class Article(models.Model):\n    headline = models.CharField(\n        max_length=200,\n        null=True,\n        blank=True,\n        help_text='Use puns liberally',\n    )\n    content = models.TextField()\n and you want to do some custom validation for headline, while keeping the blank and help_text values as specified, you might define ArticleForm like this: class ArticleForm(ModelForm):\n    headline = MyFormField(\n        max_length=200,\n        required=False,\n        help_text='Use puns liberally',\n    )\n\n    class Meta:\n        model = Article\n        fields = ['headline', 'content']\n You must ensure that the type of the form field can be used to set the contents of the corresponding model field. When they are not compatible, you will get a ValueError as no implicit conversion takes place. See the form field documentation for more information on fields and their arguments.  Enabling localization of fields By default, the fields in a ModelForm will not localize their data. To enable localization for fields, you can use the localized_fields attribute on the Meta class. >>> from django.forms import ModelForm\n>>> from myapp.models import Author\n>>> class AuthorForm(ModelForm):\n...     class Meta:\n...         model = Author\n...         localized_fields = ('birth_date',)\n If localized_fields is set to the special value '__all__', all fields will be localized. Form inheritance As with basic forms, you can extend and reuse ModelForms by inheriting them. This is useful if you need to declare extra fields or extra methods on a parent class for use in a number of forms derived from models. For example, using the previous ArticleForm class: >>> class EnhancedArticleForm(ArticleForm):\n...     def clean_pub_date(self):\n...         ...\n This creates a form that behaves identically to ArticleForm, except there\u2019s some extra validation and cleaning for the pub_date field. You can also subclass the parent\u2019s Meta inner class if you want to change the Meta.fields or Meta.exclude lists: >>> class RestrictedArticleForm(EnhancedArticleForm):\n...     class Meta(ArticleForm.Meta):\n...         exclude = ('body',)\n This adds the extra method from the EnhancedArticleForm and modifies the original ArticleForm.Meta to remove one field. There are a couple of things to note, however.  Normal Python name resolution rules apply. If you have multiple base classes that declare a Meta inner class, only the first one will be used. This means the child\u2019s Meta, if it exists, otherwise the Meta of the first parent, etc.  It\u2019s possible to inherit from both Form and ModelForm simultaneously, however, you must ensure that ModelForm appears first in the MRO. This is because these classes rely on different metaclasses and a class can only have one metaclass.  \nIt\u2019s possible to declaratively remove a Field inherited from a parent class by setting the name to be None on the subclass. You can only use this technique to opt out from a field defined declaratively by a parent class; it won\u2019t prevent the ModelForm metaclass from generating a default field. To opt-out from default fields, see Selecting the fields to use.   Providing initial values As with regular forms, it\u2019s possible to specify initial data for forms by specifying an initial parameter when instantiating the form. Initial values provided this way will override both initial values from the form field and values from an attached model instance. For example: >>> article = Article.objects.get(pk=1)\n>>> article.headline\n'My headline'\n>>> form = ArticleForm(initial={'headline': 'Initial headline'}, instance=article)\n>>> form['headline'].value()\n'Initial headline'\n ModelForm factory function You can create forms from a given model using the standalone function modelform_factory(), instead of using a class definition. This may be more convenient if you do not have many customizations to make: >>> from django.forms import modelform_factory\n>>> from myapp.models import Book\n>>> BookForm = modelform_factory(Book, fields=(\"author\", \"title\"))\n This can also be used to make modifications to existing forms, for example by specifying the widgets to be used for a given field: >>> from django.forms import Textarea\n>>> Form = modelform_factory(Book, form=BookForm,\n...                          widgets={\"title\": Textarea()})\n The fields to include can be specified using the fields and exclude keyword arguments, or the corresponding attributes on the ModelForm inner Meta class. Please see the ModelForm Selecting the fields to use documentation. \u2026 or enable localization for specific fields: >>> Form = modelform_factory(Author, form=AuthorForm, localized_fields=(\"birth_date\",))\n Model formsets  \nclass models.BaseModelFormSet \n Like regular formsets, Django provides a couple of enhanced formset classes to make working with Django models more convenient. Let\u2019s reuse the Author model from above: >>> from django.forms import modelformset_factory\n>>> from myapp.models import Author\n>>> AuthorFormSet = modelformset_factory(Author, fields=('name', 'title'))\n Using fields restricts the formset to use only the given fields. Alternatively, you can take an \u201copt-out\u201d approach, specifying which fields to exclude: >>> AuthorFormSet = modelformset_factory(Author, exclude=('birth_date',))\n This will create a formset that is capable of working with the data associated with the Author model. It works just like a regular formset: >>> formset = AuthorFormSet()\n>>> print(formset)\n<input type=\"hidden\" name=\"form-TOTAL_FORMS\" value=\"1\" id=\"id_form-TOTAL_FORMS\"><input type=\"hidden\" name=\"form-INITIAL_FORMS\" value=\"0\" id=\"id_form-INITIAL_FORMS\"><input type=\"hidden\" name=\"form-MIN_NUM_FORMS\" value=\"0\" id=\"id_form-MIN_NUM_FORMS\"><input type=\"hidden\" name=\"form-MAX_NUM_FORMS\" value=\"1000\" id=\"id_form-MAX_NUM_FORMS\">\n<tr><th><label for=\"id_form-0-name\">Name:</label></th><td><input id=\"id_form-0-name\" type=\"text\" name=\"form-0-name\" maxlength=\"100\"></td></tr>\n<tr><th><label for=\"id_form-0-title\">Title:</label></th><td><select name=\"form-0-title\" id=\"id_form-0-title\">\n<option value=\"\" selected>---------</option>\n<option value=\"MR\">Mr.</option>\n<option value=\"MRS\">Mrs.</option>\n<option value=\"MS\">Ms.</option>\n</select><input type=\"hidden\" name=\"form-0-id\" id=\"id_form-0-id\"></td></tr>\n  Note modelformset_factory() uses formset_factory() to generate formsets. This means that a model formset is an extension of a basic formset that knows how to interact with a particular model.   Note When using multi-table inheritance, forms generated by a formset factory will contain a parent link field (by default <parent_model_name>_ptr) instead of an id field.  Changing the queryset By default, when you create a formset from a model, the formset will use a queryset that includes all objects in the model (e.g., Author.objects.all()). You can override this behavior by using the queryset argument: >>> formset = AuthorFormSet(queryset=Author.objects.filter(name__startswith='O'))\n Alternatively, you can create a subclass that sets self.queryset in __init__: from django.forms import BaseModelFormSet\nfrom myapp.models import Author\n\nclass BaseAuthorFormSet(BaseModelFormSet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.queryset = Author.objects.filter(name__startswith='O')\n Then, pass your BaseAuthorFormSet class to the factory function: >>> AuthorFormSet = modelformset_factory(\n...     Author, fields=('name', 'title'), formset=BaseAuthorFormSet)\n If you want to return a formset that doesn\u2019t include any pre-existing instances of the model, you can specify an empty QuerySet: >>> AuthorFormSet(queryset=Author.objects.none())\n Changing the form By default, when you use modelformset_factory, a model form will be created using modelform_factory(). Often, it can be useful to specify a custom model form. For example, you can create a custom model form that has custom validation: class AuthorForm(forms.ModelForm):\n    class Meta:\n        model = Author\n        fields = ('name', 'title')\n\n    def clean_name(self):\n        # custom validation for the name field\n        ...\n Then, pass your model form to the factory function: AuthorFormSet = modelformset_factory(Author, form=AuthorForm)\n It is not always necessary to define a custom model form. The modelformset_factory function has several arguments which are passed through to modelform_factory, which are described below. Specifying widgets to use in the form with widgets\n Using the widgets parameter, you can specify a dictionary of values to customize the ModelForm\u2019s widget class for a particular field. This works the same way as the widgets dictionary on the inner Meta class of a ModelForm works: >>> AuthorFormSet = modelformset_factory(\n...     Author, fields=('name', 'title'),\n...     widgets={'name': Textarea(attrs={'cols': 80, 'rows': 20})})\n Enabling localization for fields with localized_fields\n Using the localized_fields parameter, you can enable localization for fields in the form. >>> AuthorFormSet = modelformset_factory(\n...     Author, fields=('name', 'title', 'birth_date'),\n...     localized_fields=('birth_date',))\n If localized_fields is set to the special value '__all__', all fields will be localized. Providing initial values As with regular formsets, it\u2019s possible to specify initial data for forms in the formset by specifying an initial parameter when instantiating the model formset class returned by modelformset_factory(). However, with model formsets, the initial values only apply to extra forms, those that aren\u2019t attached to an existing model instance. If the length of initial exceeds the number of extra forms, the excess initial data is ignored. If the extra forms with initial data aren\u2019t changed by the user, they won\u2019t be validated or saved. Saving objects in the formset As with a ModelForm, you can save the data as a model object. This is done with the formset\u2019s save() method: # Create a formset instance with POST data.\n>>> formset = AuthorFormSet(request.POST)\n\n# Assuming all is valid, save the data.\n>>> instances = formset.save()\n The save() method returns the instances that have been saved to the database. If a given instance\u2019s data didn\u2019t change in the bound data, the instance won\u2019t be saved to the database and won\u2019t be included in the return value (instances, in the above example). When fields are missing from the form (for example because they have been excluded), these fields will not be set by the save() method. You can find more information about this restriction, which also holds for regular ModelForms, in Selecting the fields to use. Pass commit=False to return the unsaved model instances: # don't save to the database\n>>> instances = formset.save(commit=False)\n>>> for instance in instances:\n...     # do something with instance\n...     instance.save()\n This gives you the ability to attach data to the instances before saving them to the database. If your formset contains a ManyToManyField, you\u2019ll also need to call formset.save_m2m() to ensure the many-to-many relationships are saved properly. After calling save(), your model formset will have three new attributes containing the formset\u2019s changes:  \nmodels.BaseModelFormSet.changed_objects \n  \nmodels.BaseModelFormSet.deleted_objects \n  \nmodels.BaseModelFormSet.new_objects \n Limiting the number of editable objects As with regular formsets, you can use the max_num and extra parameters to modelformset_factory() to limit the number of extra forms displayed. max_num does not prevent existing objects from being displayed: >>> Author.objects.order_by('name')\n<QuerySet [<Author: Charles Baudelaire>, <Author: Paul Verlaine>, <Author: Walt Whitman>]>\n\n>>> AuthorFormSet = modelformset_factory(Author, fields=('name',), max_num=1)\n>>> formset = AuthorFormSet(queryset=Author.objects.order_by('name'))\n>>> [x.name for x in formset.get_queryset()]\n['Charles Baudelaire', 'Paul Verlaine', 'Walt Whitman']\n Also, extra=0 doesn\u2019t prevent creation of new model instances as you can add additional forms with JavaScript or send additional POST data. Formsets don\u2019t yet provide functionality for an \u201cedit only\u201d view that prevents creation of new instances. If the value of max_num is greater than the number of existing related objects, up to extra additional blank forms will be added to the formset, so long as the total number of forms does not exceed max_num: >>> AuthorFormSet = modelformset_factory(Author, fields=('name',), max_num=4, extra=2)\n>>> formset = AuthorFormSet(queryset=Author.objects.order_by('name'))\n>>> for form in formset:\n...     print(form.as_table())\n<tr><th><label for=\"id_form-0-name\">Name:</label></th><td><input id=\"id_form-0-name\" type=\"text\" name=\"form-0-name\" value=\"Charles Baudelaire\" maxlength=\"100\"><input type=\"hidden\" name=\"form-0-id\" value=\"1\" id=\"id_form-0-id\"></td></tr>\n<tr><th><label for=\"id_form-1-name\">Name:</label></th><td><input id=\"id_form-1-name\" type=\"text\" name=\"form-1-name\" value=\"Paul Verlaine\" maxlength=\"100\"><input type=\"hidden\" name=\"form-1-id\" value=\"3\" id=\"id_form-1-id\"></td></tr>\n<tr><th><label for=\"id_form-2-name\">Name:</label></th><td><input id=\"id_form-2-name\" type=\"text\" name=\"form-2-name\" value=\"Walt Whitman\" maxlength=\"100\"><input type=\"hidden\" name=\"form-2-id\" value=\"2\" id=\"id_form-2-id\"></td></tr>\n<tr><th><label for=\"id_form-3-name\">Name:</label></th><td><input id=\"id_form-3-name\" type=\"text\" name=\"form-3-name\" maxlength=\"100\"><input type=\"hidden\" name=\"form-3-id\" id=\"id_form-3-id\"></td></tr>\n A max_num value of None (the default) puts a high limit on the number of forms displayed (1000). In practice this is equivalent to no limit. Using a model formset in a view Model formsets are very similar to formsets. Let\u2019s say we want to present a formset to edit Author model instances: from django.forms import modelformset_factory\nfrom django.shortcuts import render\nfrom myapp.models import Author\n\ndef manage_authors(request):\n    AuthorFormSet = modelformset_factory(Author, fields=('name', 'title'))\n    if request.method == 'POST':\n        formset = AuthorFormSet(request.POST, request.FILES)\n        if formset.is_valid():\n            formset.save()\n            # do something.\n    else:\n        formset = AuthorFormSet()\n    return render(request, 'manage_authors.html', {'formset': formset})\n As you can see, the view logic of a model formset isn\u2019t drastically different than that of a \u201cnormal\u201d formset. The only difference is that we call formset.save() to save the data into the database. (This was described above, in Saving objects in the formset.) Overriding clean() on a ModelFormSet\n Just like with ModelForms, by default the clean() method of a ModelFormSet will validate that none of the items in the formset violate the unique constraints on your model (either unique, unique_together or unique_for_date|month|year). If you want to override the clean() method on a ModelFormSet and maintain this validation, you must call the parent class\u2019s clean method: from django.forms import BaseModelFormSet\n\nclass MyModelFormSet(BaseModelFormSet):\n    def clean(self):\n        super().clean()\n        # example custom validation across forms in the formset\n        for form in self.forms:\n            # your custom formset validation\n            ...\n Also note that by the time you reach this step, individual model instances have already been created for each Form. Modifying a value in form.cleaned_data is not sufficient to affect the saved value. If you wish to modify a value in ModelFormSet.clean() you must modify form.instance: from django.forms import BaseModelFormSet\n\nclass MyModelFormSet(BaseModelFormSet):\n    def clean(self):\n        super().clean()\n\n        for form in self.forms:\n            name = form.cleaned_data['name'].upper()\n            form.cleaned_data['name'] = name\n            # update the instance value.\n            form.instance.name = name\n Using a custom queryset As stated earlier, you can override the default queryset used by the model formset: from django.forms import modelformset_factory\nfrom django.shortcuts import render\nfrom myapp.models import Author\n\ndef manage_authors(request):\n    AuthorFormSet = modelformset_factory(Author, fields=('name', 'title'))\n    if request.method == \"POST\":\n        formset = AuthorFormSet(\n            request.POST, request.FILES,\n            queryset=Author.objects.filter(name__startswith='O'),\n        )\n        if formset.is_valid():\n            formset.save()\n            # Do something.\n    else:\n        formset = AuthorFormSet(queryset=Author.objects.filter(name__startswith='O'))\n    return render(request, 'manage_authors.html', {'formset': formset})\n Note that we pass the queryset argument in both the POST and GET cases in this example. Using the formset in the template There are three ways to render a formset in a Django template. First, you can let the formset do most of the work: <form method=\"post\">\n    {{ formset }}\n</form>\n Second, you can manually render the formset, but let the form deal with itself: <form method=\"post\">\n    {{ formset.management_form }}\n    {% for form in formset %}\n        {{ form }}\n    {% endfor %}\n</form>\n When you manually render the forms yourself, be sure to render the management form as shown above. See the management form documentation. Third, you can manually render each field: <form method=\"post\">\n    {{ formset.management_form }}\n    {% for form in formset %}\n        {% for field in form %}\n            {{ field.label_tag }} {{ field }}\n        {% endfor %}\n    {% endfor %}\n</form>\n If you opt to use this third method and you don\u2019t iterate over the fields with a {% for %} loop, you\u2019ll need to render the primary key field. For example, if you were rendering the name and age fields of a model: <form method=\"post\">\n    {{ formset.management_form }}\n    {% for form in formset %}\n        {{ form.id }}\n        <ul>\n            <li>{{ form.name }}</li>\n            <li>{{ form.age }}</li>\n        </ul>\n    {% endfor %}\n</form>\n Notice how we need to explicitly render {{ form.id }}. This ensures that the model formset, in the POST case, will work correctly. (This example assumes a primary key named id. If you\u2019ve explicitly defined your own primary key that isn\u2019t called id, make sure it gets rendered.) Inline formsets  \nclass models.BaseInlineFormSet \n Inline formsets is a small abstraction layer on top of model formsets. These simplify the case of working with related objects via a foreign key. Suppose you have these two models: from django.db import models\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Book(models.Model):\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    title = models.CharField(max_length=100)\n If you want to create a formset that allows you to edit books belonging to a particular author, you could do this: >>> from django.forms import inlineformset_factory\n>>> BookFormSet = inlineformset_factory(Author, Book, fields=('title',))\n>>> author = Author.objects.get(name='Mike Royko')\n>>> formset = BookFormSet(instance=author)\n BookFormSet\u2019s prefix is 'book_set' (<model name>_set ). If Book\u2019s ForeignKey to Author has a related_name, that\u2019s used instead.  Note inlineformset_factory() uses modelformset_factory() and marks can_delete=True.   See also Manually rendered can_delete and can_order.  Overriding methods on an InlineFormSet\n When overriding methods on InlineFormSet, you should subclass BaseInlineFormSet rather than BaseModelFormSet. For example, if you want to override clean(): from django.forms import BaseInlineFormSet\n\nclass CustomInlineFormSet(BaseInlineFormSet):\n    def clean(self):\n        super().clean()\n        # example custom validation across forms in the formset\n        for form in self.forms:\n            # your custom formset validation\n            ...\n See also Overriding clean() on a ModelFormSet. Then when you create your inline formset, pass in the optional argument formset: >>> from django.forms import inlineformset_factory\n>>> BookFormSet = inlineformset_factory(Author, Book, fields=('title',),\n...     formset=CustomInlineFormSet)\n>>> author = Author.objects.get(name='Mike Royko')\n>>> formset = BookFormSet(instance=author)\n More than one foreign key to the same model If your model contains more than one foreign key to the same model, you\u2019ll need to resolve the ambiguity manually using fk_name. For example, consider the following model: class Friendship(models.Model):\n    from_friend = models.ForeignKey(\n        Friend,\n        on_delete=models.CASCADE,\n        related_name='from_friends',\n    )\n    to_friend = models.ForeignKey(\n        Friend,\n        on_delete=models.CASCADE,\n        related_name='friends',\n    )\n    length_in_months = models.IntegerField()\n To resolve this, you can use fk_name to inlineformset_factory(): >>> FriendshipFormSet = inlineformset_factory(Friend, Friendship, fk_name='from_friend',\n...     fields=('to_friend', 'length_in_months'))\n Using an inline formset in a view You may want to provide a view that allows a user to edit the related objects of a model. Here\u2019s how you can do that: def manage_books(request, author_id):\n    author = Author.objects.get(pk=author_id)\n    BookInlineFormSet = inlineformset_factory(Author, Book, fields=('title',))\n    if request.method == \"POST\":\n        formset = BookInlineFormSet(request.POST, request.FILES, instance=author)\n        if formset.is_valid():\n            formset.save()\n            # Do something. Should generally end with a redirect. For example:\n            return HttpResponseRedirect(author.get_absolute_url())\n    else:\n        formset = BookInlineFormSet(instance=author)\n    return render(request, 'manage_books.html', {'formset': formset})\n Notice how we pass instance in both the POST and GET cases. Specifying widgets to use in the inline form inlineformset_factory uses modelformset_factory and passes most of its arguments to modelformset_factory. This means you can use the widgets parameter in much the same way as passing it to modelformset_factory. See Specifying widgets to use in the form with widgets above.\n"}, {"name": "Cross Site Request Forgery protection", "path": "ref/csrf", "type": "API", "text": "Cross Site Request Forgery protection The CSRF middleware and template tag provides easy-to-use protection against Cross Site Request Forgeries. This type of attack occurs when a malicious website contains a link, a form button or some JavaScript that is intended to perform some action on your website, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, \u2018login CSRF\u2019, where an attacking site tricks a user\u2019s browser into logging into a site with someone else\u2019s credentials, is also covered. The first defense against CSRF attacks is to ensure that GET requests (and other \u2018safe\u2019 methods, as defined by RFC 7231#section-4.2.1) are side effect free. Requests via \u2018unsafe\u2019 methods, such as POST, PUT, and DELETE, can then be protected by following the steps below. How to use it To take advantage of CSRF protection in your views, follow these steps:  \nThe CSRF middleware is activated by default in the MIDDLEWARE setting. If you override that setting, remember that 'django.middleware.csrf.CsrfViewMiddleware' should come before any view middleware that assume that CSRF attacks have been dealt with. If you disabled it, which is not recommended, you can use csrf_protect() on particular views you want to protect (see below).  \nIn any template that uses a POST form, use the csrf_token tag inside the <form> element if the form is for an internal URL, e.g.: <form method=\"post\">{% csrf_token %}\n This should not be done for POST forms that target external URLs, since that would cause the CSRF token to be leaked, leading to a vulnerability.  In the corresponding view functions, ensure that RequestContext is used to render the response so that {% csrf_token %} will work properly. If you\u2019re using the render() function, generic views, or contrib apps, you are covered already since these all use RequestContext.   AJAX While the above method can be used for AJAX POST requests, it has some inconveniences: you have to remember to pass the CSRF token in as POST data with every POST request. For this reason, there is an alternative method: on each XMLHttpRequest, set a custom X-CSRFToken header (as specified by the CSRF_HEADER_NAME setting) to the value of the CSRF token. This is often easier because many JavaScript frameworks provide hooks that allow headers to be set on every request. First, you must get the CSRF token. How to do that depends on whether or not the CSRF_USE_SESSIONS and CSRF_COOKIE_HTTPONLY settings are enabled. Acquiring the token if CSRF_USE_SESSIONS and CSRF_COOKIE_HTTPONLY are False\n The recommended source for the token is the csrftoken cookie, which will be set if you\u2019ve enabled CSRF protection for your views as outlined above. The CSRF token cookie is named csrftoken by default, but you can control the cookie name via the CSRF_COOKIE_NAME setting. You can acquire the token like this: function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\nconst csrftoken = getCookie('csrftoken');\n The above code could be simplified by using the JavaScript Cookie library to replace getCookie: const csrftoken = Cookies.get('csrftoken');\n  Note The CSRF token is also present in the DOM, but only if explicitly included using csrf_token in a template. The cookie contains the canonical token; the CsrfViewMiddleware will prefer the cookie to the token in the DOM. Regardless, you\u2019re guaranteed to have the cookie if the token is present in the DOM, so you should use the cookie!   Warning If your view is not rendering a template containing the csrf_token template tag, Django might not set the CSRF token cookie. This is common in cases where forms are dynamically added to the page. To address this case, Django provides a view decorator which forces setting of the cookie: ensure_csrf_cookie().  Acquiring the token if CSRF_USE_SESSIONS or CSRF_COOKIE_HTTPONLY is True\n If you activate CSRF_USE_SESSIONS or CSRF_COOKIE_HTTPONLY, you must include the CSRF token in your HTML and read the token from the DOM with JavaScript: {% csrf_token %}\n<script>\nconst csrftoken = document.querySelector('[name=csrfmiddlewaretoken]').value;\n</script>\n Setting the token on the AJAX request Finally, you\u2019ll need to set the header on your AJAX request. Using the fetch() API: const request = new Request(\n    /* URL */,\n    {\n        method: 'POST',\n        headers: {'X-CSRFToken': csrftoken},\n        mode: 'same-origin' // Do not send CSRF token to another domain.\n    }\n);\nfetch(request).then(function(response) {\n    // ...\n});\n Using CSRF in Jinja2 templates Django\u2019s Jinja2 template backend adds {{ csrf_input }} to the context of all templates which is equivalent to {% csrf_token %} in the Django template language. For example: <form method=\"post\">{{ csrf_input }}\n The decorator method Rather than adding CsrfViewMiddleware as a blanket protection, you can use the csrf_protect decorator, which has exactly the same functionality, on particular views that need the protection. It must be used both on views that insert the CSRF token in the output, and on those that accept the POST form data. (These are often the same view function, but not always). Use of the decorator by itself is not recommended, since if you forget to use it, you will have a security hole. The \u2018belt and braces\u2019 strategy of using both is fine, and will incur minimal overhead.  \ncsrf_protect(view)  \nDecorator that provides the protection of CsrfViewMiddleware to a view. Usage: from django.shortcuts import render\nfrom django.views.decorators.csrf import csrf_protect\n\n@csrf_protect\ndef my_view(request):\n    c = {}\n    # ...\n    return render(request, \"a_template.html\", c)\n If you are using class-based views, you can refer to Decorating class-based views. \n Rejected requests By default, a \u2018403 Forbidden\u2019 response is sent to the user if an incoming request fails the checks performed by CsrfViewMiddleware. This should usually only be seen when there is a genuine Cross Site Request Forgery, or when, due to a programming error, the CSRF token has not been included with a POST form. The error page, however, is not very friendly, so you may want to provide your own view for handling this condition. To do this, set the CSRF_FAILURE_VIEW setting. CSRF failures are logged as warnings to the django.security.csrf logger. How it works The CSRF protection is based on the following things:  \nA CSRF cookie that is based on a random secret value, which other sites will not have access to. This cookie is set by CsrfViewMiddleware. It is sent with every response that has called django.middleware.csrf.get_token() (the function used internally to retrieve the CSRF token), if it wasn\u2019t already set on the request. In order to protect against BREACH attacks, the token is not simply the secret; a random mask is prepended to the secret and used to scramble it. For security reasons, the value of the secret is changed each time a user logs in.  \nA hidden form field with the name \u2018csrfmiddlewaretoken\u2019 present in all outgoing POST forms. The value of this field is, again, the value of the secret, with a mask which is both added to it and used to scramble it. The mask is regenerated on every call to get_token() so that the form field value is changed in every such response. This part is done by the template tag.  \nFor all incoming requests that are not using HTTP GET, HEAD, OPTIONS or TRACE, a CSRF cookie must be present, and the \u2018csrfmiddlewaretoken\u2019 field must be present and correct. If it isn\u2019t, the user will get a 403 error. When validating the \u2018csrfmiddlewaretoken\u2019 field value, only the secret, not the full token, is compared with the secret in the cookie value. This allows the use of ever-changing tokens. While each request may use its own token, the secret remains common to all. This check is done by CsrfViewMiddleware.  \nCsrfViewMiddleware verifies the Origin header, if provided by the browser, against the current host and the CSRF_TRUSTED_ORIGINS setting. This provides protection against cross-subdomain attacks.  \nIn addition, for HTTPS requests, if the Origin header isn\u2019t provided, CsrfViewMiddleware performs strict referer checking. This means that even if a subdomain can set or modify cookies on your domain, it can\u2019t force a user to post to your application since that request won\u2019t come from your own exact domain. This also addresses a man-in-the-middle attack that\u2019s possible under HTTPS when using a session independent secret, due to the fact that HTTP Set-Cookie headers are (unfortunately) accepted by clients even when they are talking to a site under HTTPS. (Referer checking is not done for HTTP requests because the presence of the Referer header isn\u2019t reliable enough under HTTP.) If the CSRF_COOKIE_DOMAIN setting is set, the referer is compared against it. You can allow cross-subdomain requests by including a leading dot. For example, CSRF_COOKIE_DOMAIN = '.example.com' will allow POST requests from www.example.com and api.example.com. If the setting is not set, then the referer must match the HTTP Host header. Expanding the accepted referers beyond the current host or cookie domain can be done with the CSRF_TRUSTED_ORIGINS setting.    New in Django 4.0: Origin checking was added, as described above.  This ensures that only forms that have originated from trusted domains can be used to POST data back. It deliberately ignores GET requests (and other requests that are defined as \u2018safe\u2019 by RFC 7231#section-4.2.1). These requests ought never to have any potentially dangerous side effects, and so a CSRF attack with a GET request ought to be harmless. RFC 7231#section-4.2.1 defines POST, PUT, and DELETE as \u2018unsafe\u2019, and all other methods are also assumed to be unsafe, for maximum protection. The CSRF protection cannot protect against man-in-the-middle attacks, so use HTTPS with HTTP Strict Transport Security. It also assumes validation of the HOST header and that there aren\u2019t any cross-site scripting vulnerabilities on your site (because XSS vulnerabilities already let an attacker do anything a CSRF vulnerability allows and much worse).  Removing the Referer header To avoid disclosing the referrer URL to third-party sites, you might want to disable the referer on your site\u2019s <a> tags. For example, you might use the <meta name=\"referrer\" content=\"no-referrer\"> tag or include the Referrer-Policy: no-referrer header. Due to the CSRF protection\u2019s strict referer checking on HTTPS requests, those techniques cause a CSRF failure on requests with \u2018unsafe\u2019 methods. Instead, use alternatives like <a rel=\"noreferrer\" ...>\" for links to third-party sites.  Caching If the csrf_token template tag is used by a template (or the get_token function is called some other way), CsrfViewMiddleware will add a cookie and a Vary: Cookie header to the response. This means that the middleware will play well with the cache middleware if it is used as instructed (UpdateCacheMiddleware goes before all other middleware). However, if you use cache decorators on individual views, the CSRF middleware will not yet have been able to set the Vary header or the CSRF cookie, and the response will be cached without either one. In this case, on any views that will require a CSRF token to be inserted you should use the django.views.decorators.csrf.csrf_protect() decorator first: from django.views.decorators.cache import cache_page\nfrom django.views.decorators.csrf import csrf_protect\n\n@cache_page(60 * 15)\n@csrf_protect\ndef my_view(request):\n    ...\n If you are using class-based views, you can refer to Decorating class-based views. Testing The CsrfViewMiddleware will usually be a big hindrance to testing view functions, due to the need for the CSRF token which must be sent with every POST request. For this reason, Django\u2019s HTTP client for tests has been modified to set a flag on requests which relaxes the middleware and the csrf_protect decorator so that they no longer rejects requests. In every other respect (e.g. sending cookies etc.), they behave the same. If, for some reason, you want the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks: >>> from django.test import Client\n>>> csrf_client = Client(enforce_csrf_checks=True)\n Limitations Subdomains within a site will be able to set cookies on the client for the whole domain. By setting the cookie and using a corresponding token, subdomains will be able to circumvent the CSRF protection. The only way to avoid this is to ensure that subdomains are controlled by trusted users (or, are at least unable to set cookies). Note that even without CSRF, there are other vulnerabilities, such as session fixation, that make giving subdomains to untrusted parties a bad idea, and these vulnerabilities cannot easily be fixed with current browsers. Edge cases Certain views can have unusual requirements that mean they don\u2019t fit the normal pattern envisaged here. A number of utilities can be useful in these situations. The scenarios they might be needed in are described in the following section. Utilities The examples below assume you are using function-based views. If you are working with class-based views, you can refer to Decorating class-based views.  \ncsrf_exempt(view)  \nThis decorator marks a view as being exempt from the protection ensured by the middleware. Example: from django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\ndef my_view(request):\n    return HttpResponse('Hello world')\n \n  \nrequires_csrf_token(view)  \nNormally the csrf_token template tag will not work if CsrfViewMiddleware.process_view or an equivalent like csrf_protect has not run. The view decorator requires_csrf_token can be used to ensure the template tag does work. This decorator works similarly to csrf_protect, but never rejects an incoming request. Example: from django.shortcuts import render\nfrom django.views.decorators.csrf import requires_csrf_token\n\n@requires_csrf_token\ndef my_view(request):\n    c = {}\n    # ...\n    return render(request, \"a_template.html\", c)\n \n  \nensure_csrf_cookie(view)  \nThis decorator forces a view to send the CSRF cookie. \n Scenarios CSRF protection should be disabled for just a few views Most views requires CSRF protection, but a few do not. Solution: rather than disabling the middleware and applying csrf_protect to all the views that need it, enable the middleware and use csrf_exempt(). CsrfViewMiddleware.process_view not used There are cases when CsrfViewMiddleware.process_view may not have run before your view is run - 404 and 500 handlers, for example - but you still need the CSRF token in a form. Solution: use requires_csrf_token() Unprotected view needs the CSRF token There may be some views that are unprotected and have been exempted by csrf_exempt, but still need to include the CSRF token. Solution: use csrf_exempt() followed by requires_csrf_token(). (i.e. requires_csrf_token should be the innermost decorator). View needs protection for one path A view needs CSRF protection under one set of conditions only, and mustn\u2019t have it for the rest of the time. Solution: use csrf_exempt() for the whole view function, and csrf_protect() for the path within it that needs protection. Example: from django.views.decorators.csrf import csrf_exempt, csrf_protect\n\n@csrf_exempt\ndef my_view(request):\n\n    @csrf_protect\n    def protected_path(request):\n        do_something()\n\n    if some_condition():\n       return protected_path(request)\n    else:\n       do_something_else()\n Page uses AJAX without any HTML form A page makes a POST request via AJAX, and the page does not have an HTML form with a csrf_token that would cause the required CSRF cookie to be sent. Solution: use ensure_csrf_cookie() on the view that sends the page. Contrib and reusable apps Because it is possible for the developer to turn off the CsrfViewMiddleware, all relevant views in contrib apps use the csrf_protect decorator to ensure the security of these applications against CSRF. It is recommended that the developers of other reusable apps that want the same guarantees also use the csrf_protect decorator on their views. Settings A number of settings can be used to control Django\u2019s CSRF behavior:  CSRF_COOKIE_AGE CSRF_COOKIE_DOMAIN CSRF_COOKIE_HTTPONLY CSRF_COOKIE_NAME CSRF_COOKIE_PATH CSRF_COOKIE_SAMESITE CSRF_COOKIE_SECURE CSRF_FAILURE_VIEW CSRF_HEADER_NAME CSRF_TRUSTED_ORIGINS CSRF_USE_SESSIONS  Frequently Asked Questions Is posting an arbitrary CSRF token pair (cookie and POST data) a vulnerability? No, this is by design. Without a man-in-the-middle attack, there is no way for an attacker to send a CSRF token cookie to a victim\u2019s browser, so a successful attack would need to obtain the victim\u2019s browser\u2019s cookie via XSS or similar, in which case an attacker usually doesn\u2019t need CSRF attacks. Some security audit tools flag this as a problem but as mentioned before, an attacker cannot steal a user\u2019s browser\u2019s CSRF cookie. \u201cStealing\u201d or modifying your own token using Firebug, Chrome dev tools, etc. isn\u2019t a vulnerability. Is it a problem that Django\u2019s CSRF protection isn\u2019t linked to a session by default? No, this is by design. Not linking CSRF protection to a session allows using the protection on sites such as a pastebin that allow submissions from anonymous users which don\u2019t have a session. If you wish to store the CSRF token in the user\u2019s session, use the CSRF_USE_SESSIONS setting. Why might a user encounter a CSRF validation failure after logging in? For security reasons, CSRF tokens are rotated each time a user logs in. Any page with a form generated before a login will have an old, invalid CSRF token and need to be reloaded. This might happen if a user uses the back button after a login or if they log in a different browser tab.\n"}, {"name": "Cryptographic signing", "path": "topics/signing", "type": "Guides", "text": "Cryptographic signing The golden rule of web application security is to never trust data from untrusted sources. Sometimes it can be useful to pass data through an untrusted medium. Cryptographically signed values can be passed through an untrusted channel safe in the knowledge that any tampering will be detected. Django provides both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in web applications. You may also find signing useful for the following:  Generating \u201crecover my account\u201d URLs for sending to users who have lost their password. Ensuring data stored in hidden form fields has not been tampered with. Generating one-time secret URLs for allowing temporary access to a protected resource, for example a downloadable file that a user has paid for.  Protecting the SECRET_KEY\n When you create a new Django project using startproject, the settings.py file is generated automatically and gets a random SECRET_KEY value. This value is the key to securing signed data \u2013 it is vital you keep this secure, or attackers could use it to generate their own signed values. Using the low-level API Django\u2019s signing methods live in the django.core.signing module. To sign a value, first instantiate a Signer instance: >>> from django.core.signing import Signer\n>>> signer = Signer()\n>>> value = signer.sign('My string')\n>>> value\n'My string:GdMGD6HNQ_qdgxYP8yBZAdAIV1w'\n The signature is appended to the end of the string, following the colon. You can retrieve the original value using the unsign method: >>> original = signer.unsign(value)\n>>> original\n'My string'\n If you pass a non-string value to sign, the value will be forced to string before being signed, and the unsign result will give you that string value: >>> signed = signer.sign(2.5)\n>>> original = signer.unsign(signed)\n>>> original\n'2.5'\n If you wish to protect a list, tuple, or dictionary you can do so using the sign_object() and unsign_object() methods: >>> signed_obj = signer.sign_object({'message': 'Hello!'})\n>>> signed_obj\n'eyJtZXNzYWdlIjoiSGVsbG8hIn0:Xdc-mOFDjs22KsQAqfVfi8PQSPdo3ckWJxPWwQOFhR4'\n>>> obj = signer.unsign_object(signed_obj)\n>>> obj\n{'message': 'Hello!'}\n See Protecting complex data structures for more details. If the signature or value have been altered in any way, a django.core.signing.BadSignature exception will be raised: >>> from django.core import signing\n>>> value += 'm'\n>>> try:\n...    original = signer.unsign(value)\n... except signing.BadSignature:\n...    print(\"Tampering detected!\")\n By default, the Signer class uses the SECRET_KEY setting to generate signatures. You can use a different secret by passing it to the Signer constructor: >>> signer = Signer('my-other-secret')\n>>> value = signer.sign('My string')\n>>> value\n'My string:EkfQJafvGyiofrdGnuthdxImIJw'\n  \nclass Signer(key=None, sep=':', salt=None, algorithm=None)  \nReturns a signer which uses key to generate signatures and sep to separate values. sep cannot be in the URL safe base64 alphabet. This alphabet contains alphanumeric characters, hyphens, and underscores. algorithm must be an algorithm supported by hashlib, it defaults to 'sha256'. \n  Changed in Django 3.2: The sign_object() and unsign_object() methods were added.  Using the salt argument If you do not wish for every occurrence of a particular string to have the same signature hash, you can use the optional salt argument to the Signer class. Using a salt will seed the signing hash function with both the salt and your SECRET_KEY: >>> signer = Signer()\n>>> signer.sign('My string')\n'My string:GdMGD6HNQ_qdgxYP8yBZAdAIV1w'\n>>> signer.sign_object({'message': 'Hello!'})\n'eyJtZXNzYWdlIjoiSGVsbG8hIn0:Xdc-mOFDjs22KsQAqfVfi8PQSPdo3ckWJxPWwQOFhR4'\n>>> signer = Signer(salt='extra')\n>>> signer.sign('My string')\n'My string:Ee7vGi-ING6n02gkcJ-QLHg6vFw'\n>>> signer.unsign('My string:Ee7vGi-ING6n02gkcJ-QLHg6vFw')\n'My string'\n>>> signer.sign_object({'message': 'Hello!'})\n'eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I'\n>>> signer.unsign_object('eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I')\n{'message': 'Hello!'}\n Using salt in this way puts the different signatures into different namespaces. A signature that comes from one namespace (a particular salt value) cannot be used to validate the same plaintext string in a different namespace that is using a different salt setting. The result is to prevent an attacker from using a signed string generated in one place in the code as input to another piece of code that is generating (and verifying) signatures using a different salt. Unlike your SECRET_KEY, your salt argument does not need to stay secret.  Changed in Django 3.2: The sign_object() and unsign_object() methods were added.  Verifying timestamped values TimestampSigner is a subclass of Signer that appends a signed timestamp to the value. This allows you to confirm that a signed value was created within a specified period of time: >>> from datetime import timedelta\n>>> from django.core.signing import TimestampSigner\n>>> signer = TimestampSigner()\n>>> value = signer.sign('hello')\n>>> value\n'hello:1NMg5H:oPVuCqlJWmChm1rA2lyTUtelC-c'\n>>> signer.unsign(value)\n'hello'\n>>> signer.unsign(value, max_age=10)\n...\nSignatureExpired: Signature age 15.5289158821 > 10 seconds\n>>> signer.unsign(value, max_age=20)\n'hello'\n>>> signer.unsign(value, max_age=timedelta(seconds=20))\n'hello'\n  \nclass TimestampSigner(key=None, sep=':', salt=None, algorithm='sha256')  \n \nsign(value)  \nSign value and append current timestamp to it. \n  \nunsign(value, max_age=None)  \nChecks if value was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object. \n  \nsign_object(obj, serializer=JSONSerializer, compress=False)  \n New in Django 3.2.  Encode, optionally compress, append current timestamp, and sign complex data structure (e.g. list, tuple, or dictionary). \n  \nunsign_object(signed_obj, serializer=JSONSerializer, max_age=None)  \n New in Django 3.2.  Checks if signed_obj was signed less than max_age seconds ago, otherwise raises SignatureExpired. The max_age parameter can accept an integer or a datetime.timedelta object. \n \n Protecting complex data structures If you wish to protect a list, tuple or dictionary you can do so using the Signer.sign_object() and unsign_object() methods, or signing module\u2019s dumps() or loads() functions (which are shortcuts for TimestampSigner(salt='django.core.signing').sign_object()/unsign_object()). These use JSON serialization under the hood. JSON ensures that even if your SECRET_KEY is stolen an attacker will not be able to execute arbitrary commands by exploiting the pickle format: >>> from django.core import signing\n>>> signer = signing.TimestampSigner()\n>>> value = signer.sign_object({'foo': 'bar'})\n>>> value\n'eyJmb28iOiJiYXIifQ:1kx6R3:D4qGKiptAqo5QW9iv4eNLc6xl4RwiFfes6oOcYhkYnc'\n>>> signer.unsign_object(value)\n{'foo': 'bar'}\n>>> value = signing.dumps({'foo': 'bar'})\n>>> value\n'eyJmb28iOiJiYXIifQ:1kx6Rf:LBB39RQmME-SRvilheUe5EmPYRbuDBgQp2tCAi7KGLk'\n>>> signing.loads(value)\n{'foo': 'bar'}\n Because of the nature of JSON (there is no native distinction between lists and tuples) if you pass in a tuple, you will get a list from signing.loads(object): >>> from django.core import signing\n>>> value = signing.dumps(('a','b','c'))\n>>> signing.loads(value)\n['a', 'b', 'c']\n  \ndumps(obj, key=None, salt='django.core.signing', serializer=JSONSerializer, compress=False)  \nReturns URL-safe, signed base64 compressed JSON string. Serialized object is signed using TimestampSigner. \n  \nloads(string, key=None, salt='django.core.signing', serializer=JSONSerializer, max_age=None)  \nReverse of dumps(), raises BadSignature if signature fails. Checks max_age (in seconds) if given. \n  Changed in Django 3.2: The sign_object() and unsign_object() methods were added. \n"}, {"name": "Customizing authentication in Django", "path": "topics/auth/customizing", "type": "Guides", "text": "Customizing authentication in Django The authentication that comes with Django is good enough for most common cases, but you may have needs not met by the out-of-the-box defaults. Customizing authentication in your projects requires understanding what points of the provided system are extensible or replaceable. This document provides details about how the auth system can be customized. Authentication backends provide an extensible system for when a username and password stored with the user model need to be authenticated against a different service than Django\u2019s default. You can give your models custom permissions that can be checked through Django\u2019s authorization system. You can extend the default User model, or substitute a completely customized model. Other authentication sources There may be times you have the need to hook into another authentication source \u2013 that is, another source of usernames and passwords or authentication methods. For example, your company may already have an LDAP setup that stores a username and password for every employee. It\u2019d be a hassle for both the network administrator and the users themselves if users had separate accounts in LDAP and the Django-based applications. So, to handle situations like this, the Django authentication system lets you plug in other authentication sources. You can override Django\u2019s default database-based scheme, or you can use the default system in tandem with other systems. See the authentication backend reference for information on the authentication backends included with Django. Specifying authentication backends Behind the scenes, Django maintains a list of \u201cauthentication backends\u201d that it checks for authentication. When somebody calls django.contrib.auth.authenticate() \u2013 as described in How to log a user in \u2013 Django tries authenticating across all of its authentication backends. If the first authentication method fails, Django tries the second one, and so on, until all backends have been attempted. The list of authentication backends to use is specified in the AUTHENTICATION_BACKENDS setting. This should be a list of Python path names that point to Python classes that know how to authenticate. These classes can be anywhere on your Python path. By default, AUTHENTICATION_BACKENDS is set to: ['django.contrib.auth.backends.ModelBackend']\n That\u2019s the basic authentication backend that checks the Django users database and queries the built-in permissions. It does not provide protection against brute force attacks via any rate limiting mechanism. You may either implement your own rate limiting mechanism in a custom auth backend, or use the mechanisms provided by most web servers. The order of AUTHENTICATION_BACKENDS matters, so if the same username and password is valid in multiple backends, Django will stop processing at the first positive match. If a backend raises a PermissionDenied exception, authentication will immediately fail. Django won\u2019t check the backends that follow.  Note Once a user has authenticated, Django stores which backend was used to authenticate the user in the user\u2019s session, and re-uses the same backend for the duration of that session whenever access to the currently authenticated user is needed. This effectively means that authentication sources are cached on a per-session basis, so if you change AUTHENTICATION_BACKENDS, you\u2019ll need to clear out session data if you need to force users to re-authenticate using different methods. A simple way to do that is to execute Session.objects.all().delete().  Writing an authentication backend An authentication backend is a class that implements two required methods: get_user(user_id) and authenticate(request, **credentials), as well as a set of optional permission related authorization methods. The get_user method takes a user_id \u2013 which could be a username, database ID or whatever, but has to be the primary key of your user object \u2013 and returns a user object or None. The authenticate method takes a request argument and credentials as keyword arguments. Most of the time, it\u2019ll look like this: from django.contrib.auth.backends import BaseBackend\n\nclass MyBackend(BaseBackend):\n    def authenticate(self, request, username=None, password=None):\n        # Check the username/password and return a user.\n        ...\n But it could also authenticate a token, like so: from django.contrib.auth.backends import BaseBackend\n\nclass MyBackend(BaseBackend):\n    def authenticate(self, request, token=None):\n        # Check the token and return a user.\n        ...\n Either way, authenticate() should check the credentials it gets and return a user object that matches those credentials if the credentials are valid. If they\u2019re not valid, it should return None. request is an HttpRequest and may be None if it wasn\u2019t provided to authenticate() (which passes it on to the backend). The Django admin is tightly coupled to the Django User object. The best way to deal with this is to create a Django User object for each user that exists for your backend (e.g., in your LDAP directory, your external SQL database, etc.) You can either write a script to do this in advance, or your authenticate method can do it the first time a user logs in. Here\u2019s an example backend that authenticates against a username and password variable defined in your settings.py file and creates a Django User object the first time a user authenticates: from django.conf import settings\nfrom django.contrib.auth.backends import BaseBackend\nfrom django.contrib.auth.hashers import check_password\nfrom django.contrib.auth.models import User\n\nclass SettingsBackend(BaseBackend):\n    \"\"\"\n    Authenticate against the settings ADMIN_LOGIN and ADMIN_PASSWORD.\n\n    Use the login name and a hash of the password. For example:\n\n    ADMIN_LOGIN = 'admin'\n    ADMIN_PASSWORD = 'pbkdf2_sha256$30000$Vo0VlMnkR4Bk$qEvtdyZRWTcOsCnI/oQ7fVOu1XAURIZYoOZ3iq8Dr4M='\n    \"\"\"\n\n    def authenticate(self, request, username=None, password=None):\n        login_valid = (settings.ADMIN_LOGIN == username)\n        pwd_valid = check_password(password, settings.ADMIN_PASSWORD)\n        if login_valid and pwd_valid:\n            try:\n                user = User.objects.get(username=username)\n            except User.DoesNotExist:\n                # Create a new user. There's no need to set a password\n                # because only the password from settings.py is checked.\n                user = User(username=username)\n                user.is_staff = True\n                user.is_superuser = True\n                user.save()\n            return user\n        return None\n\n    def get_user(self, user_id):\n        try:\n            return User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            return None\n Handling authorization in custom backends Custom auth backends can provide their own permissions. The user model and its manager will delegate permission lookup functions (get_user_permissions(), get_group_permissions(), get_all_permissions(), has_perm(), has_module_perms(), and with_perm()) to any authentication backend that implements these functions. The permissions given to the user will be the superset of all permissions returned by all backends. That is, Django grants a permission to a user that any one backend grants. If a backend raises a PermissionDenied exception in has_perm() or has_module_perms(), the authorization will immediately fail and Django won\u2019t check the backends that follow. A backend could implement permissions for the magic admin like this: from django.contrib.auth.backends import BaseBackend\n\nclass MagicAdminBackend(BaseBackend):\n    def has_perm(self, user_obj, perm, obj=None):\n        return user_obj.username == settings.ADMIN_LOGIN\n This gives full permissions to the user granted access in the above example. Notice that in addition to the same arguments given to the associated django.contrib.auth.models.User functions, the backend auth functions all take the user object, which may be an anonymous user, as an argument. A full authorization implementation can be found in the ModelBackend class in django/contrib/auth/backends.py, which is the default backend and queries the auth_permission table most of the time. Authorization for anonymous users An anonymous user is one that is not authenticated i.e. they have provided no valid authentication details. However, that does not necessarily mean they are not authorized to do anything. At the most basic level, most websites authorize anonymous users to browse most of the site, and many allow anonymous posting of comments etc. Django\u2019s permission framework does not have a place to store permissions for anonymous users. However, the user object passed to an authentication backend may be an django.contrib.auth.models.AnonymousUser object, allowing the backend to specify custom authorization behavior for anonymous users. This is especially useful for the authors of re-usable apps, who can delegate all questions of authorization to the auth backend, rather than needing settings, for example, to control anonymous access. Authorization for inactive users An inactive user is one that has its is_active field set to False. The ModelBackend and RemoteUserBackend authentication backends prohibits these users from authenticating. If a custom user model doesn\u2019t have an is_active field, all users will be allowed to authenticate. You can use AllowAllUsersModelBackend or AllowAllUsersRemoteUserBackend if you want to allow inactive users to authenticate. The support for anonymous users in the permission system allows for a scenario where anonymous users have permissions to do something while inactive authenticated users do not. Do not forget to test for the is_active attribute of the user in your own backend permission methods. Handling object permissions Django\u2019s permission framework has a foundation for object permissions, though there is no implementation for it in the core. That means that checking for object permissions will always return False or an empty list (depending on the check performed). An authentication backend will receive the keyword parameters obj and user_obj for each object related authorization method and can return the object level permission as appropriate. Custom permissions To create custom permissions for a given model object, use the permissions model Meta attribute. This example Task model creates two custom permissions, i.e., actions users can or cannot do with Task instances, specific to your application: class Task(models.Model):\n    ...\n    class Meta:\n        permissions = [\n            (\"change_task_status\", \"Can change the status of tasks\"),\n            (\"close_task\", \"Can remove a task by setting its status as closed\"),\n        ]\n The only thing this does is create those extra permissions when you run manage.py migrate (the function that creates permissions is connected to the post_migrate signal). Your code is in charge of checking the value of these permissions when a user is trying to access the functionality provided by the application (changing the status of tasks or closing tasks.) Continuing the above example, the following checks if a user may close tasks: user.has_perm('app.close_task')\n Extending the existing User model There are two ways to extend the default User model without substituting your own model. If the changes you need are purely behavioral, and don\u2019t require any change to what is stored in the database, you can create a proxy model based on User. This allows for any of the features offered by proxy models including default ordering, custom managers, or custom model methods. If you wish to store information related to User, you can use a OneToOneField to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user. For example you might create an Employee model: from django.contrib.auth.models import User\n\nclass Employee(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    department = models.CharField(max_length=100)\n Assuming an existing Employee Fred Smith who has both a User and Employee model, you can access the related information using Django\u2019s standard related model conventions: >>> u = User.objects.get(username='fsmith')\n>>> freds_department = u.employee.department\n To add a profile model\u2019s fields to the user page in the admin, define an InlineModelAdmin (for this example, we\u2019ll use a StackedInline) in your app\u2019s admin.py and add it to a UserAdmin class which is registered with the User class: from django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin as BaseUserAdmin\nfrom django.contrib.auth.models import User\n\nfrom my_user_profile_app.models import Employee\n\n# Define an inline admin descriptor for Employee model\n# which acts a bit like a singleton\nclass EmployeeInline(admin.StackedInline):\n    model = Employee\n    can_delete = False\n    verbose_name_plural = 'employee'\n\n# Define a new User admin\nclass UserAdmin(BaseUserAdmin):\n    inlines = (EmployeeInline,)\n\n# Re-register UserAdmin\nadmin.site.unregister(User)\nadmin.site.register(User, UserAdmin)\n These profile models are not special in any way - they are just Django models that happen to have a one-to-one link with a user model. As such, they aren\u2019t auto created when a user is created, but a django.db.models.signals.post_save could be used to create or update related models as appropriate. Using related models results in additional queries or joins to retrieve the related data. Depending on your needs, a custom user model that includes the related fields may be your better option, however, existing relations to the default user model within your project\u2019s apps may justify the extra database load. Substituting a custom User model Some kinds of projects may have authentication requirements for which Django\u2019s built-in User model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username. Django allows you to override the default user model by providing a value for the AUTH_USER_MODEL setting that references a custom model: AUTH_USER_MODEL = 'myapp.MyUser'\n This dotted pair describes the label of the Django app (which must be in your INSTALLED_APPS), and the name of the Django model that you wish to use as your user model. Using a custom user model when starting a project If you\u2019re starting a new project, it\u2019s highly recommended to set up a custom user model, even if the default User model is sufficient for you. This model behaves identically to the default user model, but you\u2019ll be able to customize it in the future if the need arises: from django.contrib.auth.models import AbstractUser\n\nclass User(AbstractUser):\n    pass\n Don\u2019t forget to point AUTH_USER_MODEL to it. Do this before creating any migrations or running manage.py migrate for the first time. Also, register the model in the app\u2019s admin.py: from django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin\nfrom .models import User\n\nadmin.site.register(User, UserAdmin)\n Changing to a custom user model mid-project Changing AUTH_USER_MODEL after you\u2019ve created database tables is significantly more difficult since it affects foreign keys and many-to-many relationships, for example. This change can\u2019t be done automatically and requires manually fixing your schema, moving your data from the old user table, and possibly manually reapplying some migrations. See #25313 for an outline of the steps. Due to limitations of Django\u2019s dynamic dependency feature for swappable models, the model referenced by AUTH_USER_MODEL must be created in the first migration of its app (usually called 0001_initial); otherwise, you\u2019ll have dependency issues. In addition, you may run into a CircularDependencyError when running your migrations as Django won\u2019t be able to automatically break the dependency loop due to the dynamic dependency. If you see this error, you should break the loop by moving the models depended on by your user model into a second migration. (You can try making two normal models that have a ForeignKey to each other and seeing how makemigrations resolves that circular dependency if you want to see how it\u2019s usually done.) Reusable apps and AUTH_USER_MODEL\n Reusable apps shouldn\u2019t implement a custom user model. A project may use many apps, and two reusable apps that implemented a custom user model couldn\u2019t be used together. If you need to store per user information in your app, use a ForeignKey or OneToOneField to settings.AUTH_USER_MODEL as described below. Referencing the User model If you reference User directly (for example, by referring to it in a foreign key), your code will not work in projects where the AUTH_USER_MODEL setting has been changed to a different user model.  \nget_user_model()  \nInstead of referring to User directly, you should reference the user model using django.contrib.auth.get_user_model(). This method will return the currently active user model \u2013 the custom user model if one is specified, or User otherwise. When you define a foreign key or many-to-many relations to the user model, you should specify the custom model using the AUTH_USER_MODEL setting. For example: from django.conf import settings\nfrom django.db import models\n\nclass Article(models.Model):\n    author = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n    )\n When connecting to signals sent by the user model, you should specify the custom model using the AUTH_USER_MODEL setting. For example: from django.conf import settings\nfrom django.db.models.signals import post_save\n\ndef post_save_receiver(sender, instance, created, **kwargs):\n    pass\n\npost_save.connect(post_save_receiver, sender=settings.AUTH_USER_MODEL)\n Generally speaking, it\u2019s easiest to refer to the user model with the AUTH_USER_MODEL setting in code that\u2019s executed at import time, however, it\u2019s also possible to call get_user_model() while Django is importing models, so you could use models.ForeignKey(get_user_model(), ...). If your app is tested with multiple user models, using @override_settings(AUTH_USER_MODEL=...) for example, and you cache the result of get_user_model() in a module-level variable, you may need to listen to the setting_changed signal to clear the cache. For example: from django.apps import apps\nfrom django.contrib.auth import get_user_model\nfrom django.core.signals import setting_changed\nfrom django.dispatch import receiver\n\n@receiver(setting_changed)\ndef user_model_swapped(**kwargs):\n    if kwargs['setting'] == 'AUTH_USER_MODEL':\n        apps.clear_cache()\n        from myapp import some_module\n        some_module.UserModel = get_user_model()\n \n Specifying a custom user model When you start your project with a custom user model, stop to consider if this is the right choice for your project. Keeping all user related information in one model removes the need for additional or more complex database queries to retrieve related models. On the other hand, it may be more suitable to store app-specific user information in a model that has a relation with your custom user model. That allows each app to specify its own user data requirements without potentially conflicting or breaking assumptions by other apps. It also means that you would keep your user model as simple as possible, focused on authentication, and following the minimum requirements Django expects custom user models to meet. If you use the default authentication backend, then your model must have a single unique field that can be used for identification purposes. This can be a username, an email address, or any other unique attribute. A non-unique username field is allowed if you use a custom authentication backend that can support it. The easiest way to construct a compliant custom user model is to inherit from AbstractBaseUser. AbstractBaseUser provides the core implementation of a user model, including hashed passwords and tokenized password resets. You must then provide some key implementation details:  \nclass models.CustomUser  \n \nUSERNAME_FIELD  \nA string describing the name of the field on the user model that is used as the unique identifier. This will usually be a username of some kind, but it can also be an email address, or any other unique identifier. The field must be unique (i.e., have unique=True set in its definition), unless you use a custom authentication backend that can support non-unique usernames. In the following example, the field identifier is used as the identifying field: class MyUser(AbstractBaseUser):\n    identifier = models.CharField(max_length=40, unique=True)\n    ...\n    USERNAME_FIELD = 'identifier'\n \n  \nEMAIL_FIELD  \nA string describing the name of the email field on the User model. This value is returned by get_email_field_name(). \n  \nREQUIRED_FIELDS  \nA list of the field names that will be prompted for when creating a user via the createsuperuser management command. The user will be prompted to supply a value for each of these fields. It must include any field for which blank is False or undefined and may include additional fields you want prompted for when a user is created interactively. REQUIRED_FIELDS has no effect in other parts of Django, like creating a user in the admin. For example, here is the partial definition for a user model that defines two required fields - a date of birth and height: class MyUser(AbstractBaseUser):\n    ...\n    date_of_birth = models.DateField()\n    height = models.FloatField()\n    ...\n    REQUIRED_FIELDS = ['date_of_birth', 'height']\n  Note REQUIRED_FIELDS must contain all required fields on your user model, but should not contain the USERNAME_FIELD or password as these fields will always be prompted for.  \n  \nis_active  \nA boolean attribute that indicates whether the user is considered \u201cactive\u201d. This attribute is provided as an attribute on AbstractBaseUser defaulting to True. How you choose to implement it will depend on the details of your chosen auth backends. See the documentation of the is_active attribute on the built-in\nuser model for details. \n  \nget_full_name()  \nOptional. A longer formal identifier for the user such as their full name. If implemented, this appears alongside the username in an object\u2019s history in django.contrib.admin. \n  \nget_short_name()  \nOptional. A short, informal identifier for the user such as their first name. If implemented, this replaces the username in the greeting to the user in the header of django.contrib.admin. \n  Importing AbstractBaseUser AbstractBaseUser and BaseUserManager are importable from django.contrib.auth.base_user so that they can be imported without including django.contrib.auth in INSTALLED_APPS.  \n The following attributes and methods are available on any subclass of AbstractBaseUser:  \nclass models.AbstractBaseUser  \n \nget_username()  \nReturns the value of the field nominated by USERNAME_FIELD. \n  \nclean()  \nNormalizes the username by calling normalize_username(). If you override this method, be sure to call super() to retain the normalization. \n  \nclassmethod get_email_field_name()  \nReturns the name of the email field specified by the EMAIL_FIELD attribute. Defaults to 'email' if EMAIL_FIELD isn\u2019t specified. \n  \nclassmethod normalize_username(username)  \nApplies NFKC Unicode normalization to usernames so that visually identical characters with different Unicode code points are considered identical. \n  \nis_authenticated  \nRead-only attribute which is always True (as opposed to AnonymousUser.is_authenticated which is always False). This is a way to tell if the user has been authenticated. This does not imply any permissions and doesn\u2019t check if the user is active or has a valid session. Even though normally you will check this attribute on request.user to find out whether it has been populated by the AuthenticationMiddleware (representing the currently logged-in user), you should know this attribute is True for any User instance. \n  \nis_anonymous  \nRead-only attribute which is always False. This is a way of differentiating User and AnonymousUser objects. Generally, you should prefer using is_authenticated to this attribute. \n  \nset_password(raw_password)  \nSets the user\u2019s password to the given raw string, taking care of the password hashing. Doesn\u2019t save the AbstractBaseUser object. When the raw_password is None, the password will be set to an unusable password, as if set_unusable_password() were used. \n  \ncheck_password(raw_password)  \nReturns True if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.) \n  \nset_unusable_password()  \nMarks the user as having no password set. This isn\u2019t the same as having a blank string for a password. check_password() for this user will never return True. Doesn\u2019t save the AbstractBaseUser object. You may need this if authentication for your application takes place against an existing external source such as an LDAP directory. \n  \nhas_usable_password()  \nReturns False if set_unusable_password() has been called for this user. \n  \nget_session_auth_hash()  \nReturns an HMAC of the password field. Used for Session invalidation on password change. \n \n AbstractUser subclasses AbstractBaseUser:  \nclass models.AbstractUser  \n \nclean()  \nNormalizes the email by calling BaseUserManager.normalize_email(). If you override this method, be sure to call super() to retain the normalization. \n \n Writing a manager for a custom user model You should also define a custom manager for your user model. If your user model defines username, email, is_staff, is_active, is_superuser, last_login, and date_joined fields the same as Django\u2019s default user, you can install Django\u2019s UserManager; however, if your user model defines different fields, you\u2019ll need to define a custom manager that extends BaseUserManager providing two additional methods:  \nclass models.CustomUserManager  \n \ncreate_user(username_field, password=None, **other_fields)  \nThe prototype of create_user() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_user should be defined as: def create_user(self, email, date_of_birth, password=None):\n    # create user here\n    ...\n \n  \ncreate_superuser(username_field, password=None, **other_fields)  \nThe prototype of create_superuser() should accept the username field, plus all required fields as arguments. For example, if your user model uses email as the username field, and has date_of_birth as a required field, then create_superuser should be defined as: def create_superuser(self, email, date_of_birth, password=None):\n    # create superuser here\n    ...\n \n \n For a ForeignKey in USERNAME_FIELD or REQUIRED_FIELDS, these methods receive the value of the to_field (the primary_key by default) of an existing instance. BaseUserManager provides the following utility methods:  \nclass models.BaseUserManager  \n \nclassmethod normalize_email(email)  \nNormalizes email addresses by lowercasing the domain portion of the email address. \n  \nget_by_natural_key(username)  \nRetrieves a user instance using the contents of the field nominated by USERNAME_FIELD. \n  \nmake_random_password(length=10, allowed_chars='abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789')  \nReturns a random password with the given length and given string of allowed characters. Note that the default value of allowed_chars doesn\u2019t contain letters that can cause user confusion, including:  \ni, l, I, and 1 (lowercase letter i, lowercase letter L, uppercase letter i, and the number one) \no, O, and 0 (lowercase letter o, uppercase letter o, and zero)  \n \n Extending Django\u2019s default User\n If you\u2019re entirely happy with Django\u2019s User model, but you want to add some additional profile information, you could subclass django.contrib.auth.models.AbstractUser and add your custom profile fields, although we\u2019d recommend a separate model as described in the \u201cModel design considerations\u201d note of Specifying a custom user model. AbstractUser provides the full implementation of the default User as an abstract model. Custom users and the built-in auth forms Django\u2019s built-in forms and views make certain assumptions about the user model that they are working with. The following forms are compatible with any subclass of AbstractBaseUser:  \nAuthenticationForm: Uses the username field specified by USERNAME_FIELD. SetPasswordForm PasswordChangeForm AdminPasswordChangeForm  The following forms make assumptions about the user model and can be used as-is if those assumptions are met:  \nPasswordResetForm: Assumes that the user model has a field that stores the user\u2019s email address with the name returned by get_email_field_name() (email by default) that can be used to identify the user and a boolean field named is_active to prevent password resets for inactive users.  Finally, the following forms are tied to User and need to be rewritten or extended to work with a custom user model:  UserCreationForm UserChangeForm  If your custom user model is a subclass of AbstractUser, then you can extend these forms in this manner: from django.contrib.auth.forms import UserCreationForm\nfrom myapp.models import CustomUser\n\nclass CustomUserCreationForm(UserCreationForm):\n\n    class Meta(UserCreationForm.Meta):\n        model = CustomUser\n        fields = UserCreationForm.Meta.fields + ('custom_field',)\n Custom users and django.contrib.admin\n If you want your custom user model to also work with the admin, your user model must define some additional attributes and methods. These methods allow the admin to control access of the user to admin content:  \nclass models.CustomUser \n  \nis_staff  \nReturns True if the user is allowed to have access to the admin site. \n  \nis_active  \nReturns True if the user account is currently active. \n  \nhas_perm(perm, obj=None):  \nReturns True if the user has the named permission. If obj is provided, the permission needs to be checked against a specific object instance. \n  \nhas_module_perms(app_label):  \nReturns True if the user has permission to access models in the given app. \n You will also need to register your custom user model with the admin. If your custom user model extends django.contrib.auth.models.AbstractUser, you can use Django\u2019s existing django.contrib.auth.admin.UserAdmin class. However, if your user model extends AbstractBaseUser, you\u2019ll need to define a custom ModelAdmin class. It may be possible to subclass the default django.contrib.auth.admin.UserAdmin; however, you\u2019ll need to override any of the definitions that refer to fields on django.contrib.auth.models.AbstractUser that aren\u2019t on your custom user class.  Note If you are using a custom ModelAdmin which is a subclass of django.contrib.auth.admin.UserAdmin, then you need to add your custom fields to fieldsets (for fields to be used in editing users) and to add_fieldsets (for fields to be used when creating a user). For example: from django.contrib.auth.admin import UserAdmin\n\nclass CustomUserAdmin(UserAdmin):\n    ...\n    fieldsets = UserAdmin.fieldsets + (\n        (None, {'fields': ('custom_field',)}),\n    )\n    add_fieldsets = UserAdmin.add_fieldsets + (\n        (None, {'fields': ('custom_field',)}),\n    )\n See a full example for more details.  Custom users and permissions To make it easy to include Django\u2019s permission framework into your own user class, Django provides PermissionsMixin. This is an abstract model you can include in the class hierarchy for your user model, giving you all the methods and database fields necessary to support Django\u2019s permission model. PermissionsMixin provides the following methods and attributes:  \nclass models.PermissionsMixin  \n \nis_superuser  \nBoolean. Designates that this user has all permissions without explicitly assigning them. \n  \nget_user_permissions(obj=None)  \nReturns a set of permission strings that the user has directly. If obj is passed in, only returns the user permissions for this specific object. \n  \nget_group_permissions(obj=None)  \nReturns a set of permission strings that the user has, through their groups. If obj is passed in, only returns the group permissions for this specific object. \n  \nget_all_permissions(obj=None)  \nReturns a set of permission strings that the user has, both through group and user permissions. If obj is passed in, only returns the permissions for this specific object. \n  \nhas_perm(perm, obj=None)  \nReturns True if the user has the specified permission, where perm is in the format \"<app label>.<permission codename>\" (see permissions). If User.is_active and is_superuser are both True, this method always returns True. If obj is passed in, this method won\u2019t check for a permission for the model, but for this specific object. \n  \nhas_perms(perm_list, obj=None)  \nReturns True if the user has each of the specified permissions, where each perm is in the format \"<app label>.<permission codename>\". If User.is_active and is_superuser are both True, this method always returns True. If obj is passed in, this method won\u2019t check for permissions for the model, but for the specific object. \n  \nhas_module_perms(package_name)  \nReturns True if the user has any permissions in the given package (the Django app label). If User.is_active and is_superuser are both True, this method always returns True. \n \n  PermissionsMixin and ModelBackend If you don\u2019t include the PermissionsMixin, you must ensure you don\u2019t invoke the permissions methods on ModelBackend. ModelBackend assumes that certain fields are available on your user model. If your user model doesn\u2019t provide those fields, you\u2019ll receive database errors when you check permissions.  Custom users and proxy models One limitation of custom user models is that installing a custom user model will break any proxy model extending User. Proxy models must be based on a concrete base class; by defining a custom user model, you remove the ability of Django to reliably identify the base class. If your project uses proxy models, you must either modify the proxy to extend the user model that\u2019s in use in your project, or merge your proxy\u2019s behavior into your User subclass. A full example Here is an example of an admin-compliant custom user app. This user model uses an email address as the username, and has a required date of birth; it provides no permission checking beyond an admin flag on the user account. This model would be compatible with all the built-in auth forms and views, except for the user creation forms. This example illustrates how most of the components work together, but is not intended to be copied directly into projects for production use. This code would all live in a models.py file for a custom authentication app: from django.db import models\nfrom django.contrib.auth.models import (\n    BaseUserManager, AbstractBaseUser\n)\n\n\nclass MyUserManager(BaseUserManager):\n    def create_user(self, email, date_of_birth, password=None):\n        \"\"\"\n        Creates and saves a User with the given email, date of\n        birth and password.\n        \"\"\"\n        if not email:\n            raise ValueError('Users must have an email address')\n\n        user = self.model(\n            email=self.normalize_email(email),\n            date_of_birth=date_of_birth,\n        )\n\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, date_of_birth, password=None):\n        \"\"\"\n        Creates and saves a superuser with the given email, date of\n        birth and password.\n        \"\"\"\n        user = self.create_user(\n            email,\n            password=password,\n            date_of_birth=date_of_birth,\n        )\n        user.is_admin = True\n        user.save(using=self._db)\n        return user\n\n\nclass MyUser(AbstractBaseUser):\n    email = models.EmailField(\n        verbose_name='email address',\n        max_length=255,\n        unique=True,\n    )\n    date_of_birth = models.DateField()\n    is_active = models.BooleanField(default=True)\n    is_admin = models.BooleanField(default=False)\n\n    objects = MyUserManager()\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['date_of_birth']\n\n    def __str__(self):\n        return self.email\n\n    def has_perm(self, perm, obj=None):\n        \"Does the user have a specific permission?\"\n        # Simplest possible answer: Yes, always\n        return True\n\n    def has_module_perms(self, app_label):\n        \"Does the user have permissions to view the app `app_label`?\"\n        # Simplest possible answer: Yes, always\n        return True\n\n    @property\n    def is_staff(self):\n        \"Is the user a member of staff?\"\n        # Simplest possible answer: All admins are staff\n        return self.is_admin\n Then, to register this custom user model with Django\u2019s admin, the following code would be required in the app\u2019s admin.py file: from django import forms\nfrom django.contrib import admin\nfrom django.contrib.auth.models import Group\nfrom django.contrib.auth.admin import UserAdmin as BaseUserAdmin\nfrom django.contrib.auth.forms import ReadOnlyPasswordHashField\nfrom django.core.exceptions import ValidationError\n\nfrom customauth.models import MyUser\n\n\nclass UserCreationForm(forms.ModelForm):\n    \"\"\"A form for creating new users. Includes all the required\n    fields, plus a repeated password.\"\"\"\n    password1 = forms.CharField(label='Password', widget=forms.PasswordInput)\n    password2 = forms.CharField(label='Password confirmation', widget=forms.PasswordInput)\n\n    class Meta:\n        model = MyUser\n        fields = ('email', 'date_of_birth')\n\n    def clean_password2(self):\n        # Check that the two password entries match\n        password1 = self.cleaned_data.get(\"password1\")\n        password2 = self.cleaned_data.get(\"password2\")\n        if password1 and password2 and password1 != password2:\n            raise ValidationError(\"Passwords don't match\")\n        return password2\n\n    def save(self, commit=True):\n        # Save the provided password in hashed format\n        user = super().save(commit=False)\n        user.set_password(self.cleaned_data[\"password1\"])\n        if commit:\n            user.save()\n        return user\n\n\nclass UserChangeForm(forms.ModelForm):\n    \"\"\"A form for updating users. Includes all the fields on\n    the user, but replaces the password field with admin's\n    disabled password hash display field.\n    \"\"\"\n    password = ReadOnlyPasswordHashField()\n\n    class Meta:\n        model = MyUser\n        fields = ('email', 'password', 'date_of_birth', 'is_active', 'is_admin')\n\n\nclass UserAdmin(BaseUserAdmin):\n    # The forms to add and change user instances\n    form = UserChangeForm\n    add_form = UserCreationForm\n\n    # The fields to be used in displaying the User model.\n    # These override the definitions on the base UserAdmin\n    # that reference specific fields on auth.User.\n    list_display = ('email', 'date_of_birth', 'is_admin')\n    list_filter = ('is_admin',)\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Personal info', {'fields': ('date_of_birth',)}),\n        ('Permissions', {'fields': ('is_admin',)}),\n    )\n    # add_fieldsets is not a standard ModelAdmin attribute. UserAdmin\n    # overrides get_fieldsets to use this attribute when creating a user.\n    add_fieldsets = (\n        (None, {\n            'classes': ('wide',),\n            'fields': ('email', 'date_of_birth', 'password1', 'password2'),\n        }),\n    )\n    search_fields = ('email',)\n    ordering = ('email',)\n    filter_horizontal = ()\n\n\n# Now register the new UserAdmin...\nadmin.site.register(MyUser, UserAdmin)\n# ... and, since we're not using Django's built-in permissions,\n# unregister the Group model from admin.\nadmin.site.unregister(Group)\n Finally, specify the custom model as the default user model for your project using the AUTH_USER_MODEL setting in your settings.py: AUTH_USER_MODEL = 'customauth.MyUser'\n  Changed in Django 3.2: In older versions, ReadOnlyPasswordHashField is not disabled by default and UserChangeForm.clean_password() is required to return the initial value, whatever the user provides. \n"}, {"name": "Database access optimization", "path": "topics/db/optimization", "type": "Guides", "text": "Database access optimization Django\u2019s database layer provides various ways to help developers get the most out of their databases. This document gathers together links to the relevant documentation, and adds various tips, organized under a number of headings that outline the steps to take when attempting to optimize your database usage. Profile first As general programming practice, this goes without saying. Find out what queries you are doing and what they are costing you. Use QuerySet.explain() to understand how specific QuerySets are executed by your database. You may also want to use an external project like django-debug-toolbar, or a tool that monitors your database directly. Remember that you may be optimizing for speed or memory or both, depending on your requirements. Sometimes optimizing for one will be detrimental to the other, but sometimes they will help each other. Also, work that is done by the database process might not have the same cost (to you) as the same amount of work done in your Python process. It is up to you to decide what your priorities are, where the balance must lie, and profile all of these as required since this will depend on your application and server. With everything that follows, remember to profile after every change to ensure that the change is a benefit, and a big enough benefit given the decrease in readability of your code. All of the suggestions below come with the caveat that in your circumstances the general principle might not apply, or might even be reversed. Use standard DB optimization techniques \u2026including:  \nIndexes. This is a number one priority, after you have determined from profiling what indexes should be added. Use Meta.indexes or Field.db_index to add these from Django. Consider adding indexes to fields that you frequently query using filter(), exclude(), order_by(), etc. as indexes may help to speed up lookups. Note that determining the best indexes is a complex database-dependent topic that will depend on your particular application. The overhead of maintaining an index may outweigh any gains in query speed.   Appropriate use of field types.  We will assume you have done the things listed above. The rest of this document focuses on how to use Django in such a way that you are not doing unnecessary work. This document also does not address other optimization techniques that apply to all expensive operations, such as general purpose caching. Understand QuerySets Understanding QuerySets is vital to getting good performance with simple code. In particular: Understand QuerySet evaluation To avoid performance problems, it is important to understand:  that QuerySets are lazy. when they are evaluated. how the data is held in memory.  Understand cached attributes As well as caching of the whole QuerySet, there is caching of the result of attributes on ORM objects. In general, attributes that are not callable will be cached. For example, assuming the example blog models: >>> entry = Entry.objects.get(id=1)\n>>> entry.blog   # Blog object is retrieved at this point\n>>> entry.blog   # cached version, no DB access\n But in general, callable attributes cause DB lookups every time: >>> entry = Entry.objects.get(id=1)\n>>> entry.authors.all()   # query performed\n>>> entry.authors.all()   # query performed again\n Be careful when reading template code - the template system does not allow use of parentheses, but will call callables automatically, hiding the above distinction. Be careful with your own custom properties - it is up to you to implement caching when required, for example using the cached_property decorator. Use the with template tag To make use of the caching behavior of QuerySet, you may need to use the with template tag. Use iterator()\n When you have a lot of objects, the caching behavior of the QuerySet can cause a large amount of memory to be used. In this case, iterator() may help. Use explain()\n QuerySet.explain() gives you detailed information about how the database executes a query, including indexes and joins that are used. These details may help you find queries that could be rewritten more efficiently, or identify indexes that could be added to improve performance. Do database work in the database rather than in Python For instance:  At the most basic level, use filter and exclude to do filtering in the database. Use F expressions to filter based on other fields within the same model. Use annotate to do aggregation in the database.  If these aren\u2019t enough to generate the SQL you need: Use RawSQL\n A less portable but more powerful method is the RawSQL expression, which allows some SQL to be explicitly added to the query. If that still isn\u2019t powerful enough: Use raw SQL Write your own custom SQL to retrieve data or populate models. Use django.db.connection.queries to find out what Django is writing for you and start from there. Retrieve individual objects using a unique, indexed column There are two reasons to use a column with unique or db_index when using get() to retrieve individual objects. First, the query will be quicker because of the underlying database index. Also, the query could run much slower if multiple objects match the lookup; having a unique constraint on the column guarantees this will never happen. So using the example blog models: >>> entry = Entry.objects.get(id=10)\n will be quicker than: >>> entry = Entry.objects.get(headline=\"News Item Title\")\n because id is indexed by the database and is guaranteed to be unique. Doing the following is potentially quite slow: >>> entry = Entry.objects.get(headline__startswith=\"News\")\n First of all, headline is not indexed, which will make the underlying database fetch slower. Second, the lookup doesn\u2019t guarantee that only one object will be returned. If the query matches more than one object, it will retrieve and transfer all of them from the database. This penalty could be substantial if hundreds or thousands of records are returned. The penalty will be compounded if the database lives on a separate server, where network overhead and latency also play a factor. Retrieve everything at once if you know you will need it Hitting the database multiple times for different parts of a single \u2018set\u2019 of data that you will need all parts of is, in general, less efficient than retrieving it all in one query. This is particularly important if you have a query that is executed in a loop, and could therefore end up doing many database queries, when only one was needed. So: Use QuerySet.select_related() and prefetch_related()\n Understand select_related() and prefetch_related() thoroughly, and use them:  in managers and default managers where appropriate. Be aware when your manager is and is not used; sometimes this is tricky so don\u2019t make assumptions. in view code or other layers, possibly making use of prefetch_related_objects() where needed.  Don\u2019t retrieve things you don\u2019t need Use QuerySet.values() and values_list()\n When you only want a dict or list of values, and don\u2019t need ORM model objects, make appropriate usage of values(). These can be useful for replacing model objects in template code - as long as the dicts you supply have the same attributes as those used in the template, you are fine. Use QuerySet.defer() and only()\n Use defer() and only() if there are database columns you know that you won\u2019t need (or won\u2019t need in most cases) to avoid loading them. Note that if you do use them, the ORM will have to go and get them in a separate query, making this a pessimization if you use it inappropriately. Don\u2019t be too aggressive in deferring fields without profiling as the database has to read most of the non-text, non-VARCHAR data from the disk for a single row in the results, even if it ends up only using a few columns. The defer() and only() methods are most useful when you can avoid loading a lot of text data or for fields that might take a lot of processing to convert back to Python. As always, profile first, then optimize. Use QuerySet.contains(obj)\n \u2026if you only want to find out if obj is in the queryset, rather than if obj in queryset. Use QuerySet.count()\n \u2026if you only want the count, rather than doing len(queryset). Use QuerySet.exists()\n \u2026if you only want to find out if at least one result exists, rather than if\nqueryset. But: Don\u2019t overuse count() and exists()\n If you are going to need other data from the QuerySet, evaluate it immediately. For example, assuming an Email model that has a subject attribute and a many-to-many relation to User, the following code is optimal: if display_emails:\n    emails = user.emails.all()\n    if emails:\n        print('You have', len(emails), 'emails:')\n        for email in emails:\n            print(email.subject)\n    else:\n        print('You do not have any emails.')\n It is optimal because:  Since QuerySets are lazy, this does no database queries if display_emails is False. Storing user.emails.all() in the emails variable allows its result cache to be re-used. The line if emails causes QuerySet.__bool__() to be called, which causes the user.emails.all() query to be run on the database. If there aren\u2019t any results, it will return False, otherwise True. The use of len(emails) calls QuerySet.__len__(), reusing the result cache. The for loop iterates over the already filled cache.  In total, this code does either one or zero database queries. The only deliberate optimization performed is using the emails variable. Using QuerySet.exists() for the if or QuerySet.count() for the count would each cause additional queries. Use QuerySet.update() and delete()\n Rather than retrieve a load of objects, set some values, and save them individual, use a bulk SQL UPDATE statement, via QuerySet.update(). Similarly, do bulk deletes where possible. Note, however, that these bulk update methods cannot call the save() or delete() methods of individual instances, which means that any custom behavior you have added for these methods will not be executed, including anything driven from the normal database object signals. Use foreign key values directly If you only need a foreign key value, use the foreign key value that is already on the object you\u2019ve got, rather than getting the whole related object and taking its primary key. i.e. do: entry.blog_id\n instead of: entry.blog.id\n Don\u2019t order results if you don\u2019t care Ordering is not free; each field to order by is an operation the database must perform. If a model has a default ordering (Meta.ordering) and you don\u2019t need it, remove it on a QuerySet by calling order_by() with no parameters. Adding an index to your database may help to improve ordering performance. Use bulk methods Use bulk methods to reduce the number of SQL statements. Create in bulk When creating objects, where possible, use the bulk_create() method to reduce the number of SQL queries. For example: Entry.objects.bulk_create([\n    Entry(headline='This is a test'),\n    Entry(headline='This is only a test'),\n])\n \u2026is preferable to: Entry.objects.create(headline='This is a test')\nEntry.objects.create(headline='This is only a test')\n Note that there are a number of caveats to this method, so make sure it\u2019s appropriate for your use case. Update in bulk When updating objects, where possible, use the bulk_update() method to reduce the number of SQL queries. Given a list or queryset of objects: entries = Entry.objects.bulk_create([\n    Entry(headline='This is a test'),\n    Entry(headline='This is only a test'),\n])\n The following example: entries[0].headline = 'This is not a test'\nentries[1].headline = 'This is no longer a test'\nEntry.objects.bulk_update(entries, ['headline'])\n \u2026is preferable to: entries[0].headline = 'This is not a test'\nentries[0].save()\nentries[1].headline = 'This is no longer a test'\nentries[1].save()\n Note that there are a number of caveats to this method, so make sure it\u2019s appropriate for your use case. Insert in bulk When inserting objects into ManyToManyFields, use add() with multiple objects to reduce the number of SQL queries. For example: my_band.members.add(me, my_friend)\n \u2026is preferable to: my_band.members.add(me)\nmy_band.members.add(my_friend)\n \u2026where Bands and Artists have a many-to-many relationship. When inserting different pairs of objects into ManyToManyField or when the custom through table is defined, use bulk_create() method to reduce the number of SQL queries. For example: PizzaToppingRelationship = Pizza.toppings.through\nPizzaToppingRelationship.objects.bulk_create([\n    PizzaToppingRelationship(pizza=my_pizza, topping=pepperoni),\n    PizzaToppingRelationship(pizza=your_pizza, topping=pepperoni),\n    PizzaToppingRelationship(pizza=your_pizza, topping=mushroom),\n], ignore_conflicts=True)\n \u2026is preferable to: my_pizza.toppings.add(pepperoni)\nyour_pizza.toppings.add(pepperoni, mushroom)\n \u2026where Pizza and Topping have a many-to-many relationship. Note that there are a number of caveats to this method, so make sure it\u2019s appropriate for your use case. Remove in bulk When removing objects from ManyToManyFields, use remove() with multiple objects to reduce the number of SQL queries. For example: my_band.members.remove(me, my_friend)\n \u2026is preferable to: my_band.members.remove(me)\nmy_band.members.remove(my_friend)\n \u2026where Bands and Artists have a many-to-many relationship. When removing different pairs of objects from ManyToManyFields, use delete() on a Q expression with multiple through model instances to reduce the number of SQL queries. For example: from django.db.models import Q\nPizzaToppingRelationship = Pizza.toppings.through\nPizzaToppingRelationship.objects.filter(\n    Q(pizza=my_pizza, topping=pepperoni) |\n    Q(pizza=your_pizza, topping=pepperoni) |\n    Q(pizza=your_pizza, topping=mushroom)\n).delete()\n \u2026is preferable to: my_pizza.toppings.remove(pepperoni)\nyour_pizza.toppings.remove(pepperoni, mushroom)\n \u2026where Pizza and Topping have a many-to-many relationship.\n"}, {"name": "Database Functions", "path": "ref/models/database-functions", "type": "API", "text": "Database Functions The classes documented below provide a way for users to use functions provided by the underlying database as annotations, aggregations, or filters in Django. Functions are also expressions, so they can be used and combined with other expressions like aggregate functions. We\u2019ll be using the following model in examples of each function: class Author(models.Model):\n    name = models.CharField(max_length=50)\n    age = models.PositiveIntegerField(null=True, blank=True)\n    alias = models.CharField(max_length=50, null=True, blank=True)\n    goes_by = models.CharField(max_length=50, null=True, blank=True)\n We don\u2019t usually recommend allowing null=True for CharField since this allows the field to have two \u201cempty values\u201d, but it\u2019s important for the Coalesce example below. Comparison and conversion functions Cast  \nclass Cast(expression, output_field) \n Forces the result type of expression to be the one from output_field. Usage example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Cast\n>>> Author.objects.create(age=25, name='Margaret Smith')\n>>> author = Author.objects.annotate(\n...    age_as_float=Cast('age', output_field=FloatField()),\n... ).get()\n>>> print(author.age_as_float)\n25.0\n Coalesce  \nclass Coalesce(*expressions, **extra) \n Accepts a list of at least two field names or expressions and returns the first non-null value (note that an empty string is not considered a null value). Each argument must be of a similar type, so mixing text and numbers will result in a database error. Usage examples: >>> # Get a screen name from least to most public\n>>> from django.db.models import Sum\n>>> from django.db.models.functions import Coalesce\n>>> Author.objects.create(name='Margaret Smith', goes_by='Maggie')\n>>> author = Author.objects.annotate(\n...    screen_name=Coalesce('alias', 'goes_by', 'name')).get()\n>>> print(author.screen_name)\nMaggie\n\n>>> # Prevent an aggregate Sum() from returning None\n>>> # The aggregate default argument uses Coalesce() under the hood.\n>>> aggregated = Author.objects.aggregate(\n...    combined_age=Sum('age'),\n...    combined_age_default=Sum('age', default=0),\n...    combined_age_coalesce=Coalesce(Sum('age'), 0),\n... )\n>>> print(aggregated['combined_age'])\nNone\n>>> print(aggregated['combined_age_default'])\n0\n>>> print(aggregated['combined_age_coalesce'])\n0\n  Warning A Python value passed to Coalesce on MySQL may be converted to an incorrect type unless explicitly cast to the correct database type: >>> from django.db.models import DateTimeField\n>>> from django.db.models.functions import Cast, Coalesce\n>>> from django.utils import timezone\n>>> now = timezone.now()\n>>> Coalesce('updated', Cast(now, DateTimeField()))\n  Collate  \nclass Collate(expression, collation) \n  New in Django 3.2.  Takes an expression and a collation name to query against. For example, to filter case-insensitively in SQLite: >>> Author.objects.filter(name=Collate(Value('john'), 'nocase'))\n<QuerySet [<Author: John>, <Author: john>]>\n It can also be used when ordering, for example with PostgreSQL: >>> Author.objects.order_by(Collate('name', 'et-x-icu'))\n<QuerySet [<Author: Ursula>, <Author: Veronika>, <Author: \u00dclle>]>\n Greatest  \nclass Greatest(*expressions, **extra) \n Accepts a list of at least two field names or expressions and returns the greatest value. Each argument must be of a similar type, so mixing text and numbers will result in a database error. Usage example: class Blog(models.Model):\n    body = models.TextField()\n    modified = models.DateTimeField(auto_now=True)\n\nclass Comment(models.Model):\n    body = models.TextField()\n    modified = models.DateTimeField(auto_now=True)\n    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)\n\n>>> from django.db.models.functions import Greatest\n>>> blog = Blog.objects.create(body='Greatest is the best.')\n>>> comment = Comment.objects.create(body='No, Least is better.', blog=blog)\n>>> comments = Comment.objects.annotate(last_updated=Greatest('modified', 'blog__modified'))\n>>> annotated_comment = comments.get()\n annotated_comment.last_updated will be the most recent of blog.modified and comment.modified.  Warning The behavior of Greatest when one or more expression may be null varies between databases:  PostgreSQL: Greatest will return the largest non-null expression, or null if all expressions are null. SQLite, Oracle, and MySQL: If any expression is null, Greatest will return null.  The PostgreSQL behavior can be emulated using Coalesce if you know a sensible minimum value to provide as a default.  JSONObject  \nclass JSONObject(**fields) \n  New in Django 3.2.  Takes a list of key-value pairs and returns a JSON object containing those pairs. Usage example: >>> from django.db.models import F\n>>> from django.db.models.functions import JSONObject, Lower\n>>> Author.objects.create(name='Margaret Smith', alias='msmith', age=25)\n>>> author = Author.objects.annotate(json_object=JSONObject(\n...     name=Lower('name'),\n...     alias='alias',\n...     age=F('age') * 2,\n... )).get()\n>>> author.json_object\n{'name': 'margaret smith', 'alias': 'msmith', 'age': 50}\n Least  \nclass Least(*expressions, **extra) \n Accepts a list of at least two field names or expressions and returns the least value. Each argument must be of a similar type, so mixing text and numbers will result in a database error.  Warning The behavior of Least when one or more expression may be null varies between databases:  PostgreSQL: Least will return the smallest non-null expression, or null if all expressions are null. SQLite, Oracle, and MySQL: If any expression is null, Least will return null.  The PostgreSQL behavior can be emulated using Coalesce if you know a sensible maximum value to provide as a default.  NullIf  \nclass NullIf(expression1, expression2) \n Accepts two expressions and returns None if they are equal, otherwise returns expression1.  Caveats on Oracle Due to an Oracle convention, this function returns the empty string instead of None when the expressions are of type CharField. Passing Value(None) to expression1 is prohibited on Oracle since Oracle doesn\u2019t accept NULL as the first argument.  Date functions We\u2019ll be using the following model in examples of each function: class Experiment(models.Model):\n    start_datetime = models.DateTimeField()\n    start_date = models.DateField(null=True, blank=True)\n    start_time = models.TimeField(null=True, blank=True)\n    end_datetime = models.DateTimeField(null=True, blank=True)\n    end_date = models.DateField(null=True, blank=True)\n    end_time = models.TimeField(null=True, blank=True)\n Extract  \nclass Extract(expression, lookup_name=None, tzinfo=None, **extra) \n Extracts a component of a date as a number. Takes an expression representing a DateField, DateTimeField, TimeField, or DurationField and a lookup_name, and returns the part of the date referenced by lookup_name as an IntegerField. Django usually uses the databases\u2019 extract function, so you may use any lookup_name that your database supports. A tzinfo subclass, usually provided by zoneinfo, can be passed to extract a value in a specific timezone. Given the datetime 2015-06-15 23:30:01.000321+00:00, the built-in lookup_names return:  \u201cyear\u201d: 2015 \u201ciso_year\u201d: 2015 \u201cquarter\u201d: 2 \u201cmonth\u201d: 6 \u201cday\u201d: 15 \u201cweek\u201d: 25 \u201cweek_day\u201d: 2 \u201ciso_week_day\u201d: 1 \u201chour\u201d: 23 \u201cminute\u201d: 30 \u201csecond\u201d: 1  If a different timezone like Australia/Melbourne is active in Django, then the datetime is converted to the timezone before the value is extracted. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be the same as above except for:  \u201cday\u201d: 16 \u201cweek_day\u201d: 3 \u201ciso_week_day\u201d: 2 \u201chour\u201d: 9   week_day values The week_day lookup_type is calculated differently from most databases and from Python\u2019s standard functions. This function will return 1 for Sunday, 2 for Monday, through 7 for Saturday. The equivalent calculation in Python is: >>> from datetime import datetime\n>>> dt = datetime(2015, 6, 15)\n>>> (dt.isoweekday() % 7) + 1\n2\n   week values The week lookup_type is calculated based on ISO-8601, i.e., a week starts on a Monday. The first week of a year is the one that contains the year\u2019s first Thursday, i.e. the first week has the majority (four or more) of its days in the year. The value returned is in the range 1 to 52 or 53.  Each lookup_name above has a corresponding Extract subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use ExtractYear(...) rather than Extract(..., lookup_name='year'). Usage example: >>> from datetime import datetime\n>>> from django.db.models.functions import Extract\n>>> start = datetime(2015, 6, 15)\n>>> end = datetime(2015, 7, 2)\n>>> Experiment.objects.create(\n...    start_datetime=start, start_date=start.date(),\n...    end_datetime=end, end_date=end.date())\n>>> # Add the experiment start year as a field in the QuerySet.\n>>> experiment = Experiment.objects.annotate(\n...    start_year=Extract('start_datetime', 'year')).get()\n>>> experiment.start_year\n2015\n>>> # How many experiments completed in the same year in which they started?\n>>> Experiment.objects.filter(\n...    start_datetime__year=Extract('end_datetime', 'year')).count()\n1\n \nDateField extracts  \nclass ExtractYear(expression, tzinfo=None, **extra)  \n \nlookup_name = 'year' \n \n  \nclass ExtractIsoYear(expression, tzinfo=None, **extra)  \nReturns the ISO-8601 week-numbering year.  \nlookup_name = 'iso_year' \n \n  \nclass ExtractMonth(expression, tzinfo=None, **extra)  \n \nlookup_name = 'month' \n \n  \nclass ExtractDay(expression, tzinfo=None, **extra)  \n \nlookup_name = 'day' \n \n  \nclass ExtractWeekDay(expression, tzinfo=None, **extra)  \n \nlookup_name = 'week_day' \n \n  \nclass ExtractIsoWeekDay(expression, tzinfo=None, **extra)  \nReturns the ISO-8601 week day with day 1 being Monday and day 7 being Sunday.  \nlookup_name = 'iso_week_day' \n \n  \nclass ExtractWeek(expression, tzinfo=None, **extra)  \n \nlookup_name = 'week' \n \n  \nclass ExtractQuarter(expression, tzinfo=None, **extra)  \n \nlookup_name = 'quarter' \n \n These are logically equivalent to Extract('date_field', lookup_name). Each class is also a Transform registered on DateField and DateTimeField as __(lookup_name), e.g. __year. Since DateFields don\u2019t have a time component, only Extract subclasses that deal with date-parts can be used with DateField: >>> from datetime import datetime\n>>> from django.utils import timezone\n>>> from django.db.models.functions import (\n...     ExtractDay, ExtractMonth, ExtractQuarter, ExtractWeek,\n...     ExtractIsoWeekDay, ExtractWeekDay, ExtractIsoYear, ExtractYear,\n... )\n>>> start_2015 = datetime(2015, 6, 15, 23, 30, 1, tzinfo=timezone.utc)\n>>> end_2015 = datetime(2015, 6, 16, 13, 11, 27, tzinfo=timezone.utc)\n>>> Experiment.objects.create(\n...    start_datetime=start_2015, start_date=start_2015.date(),\n...    end_datetime=end_2015, end_date=end_2015.date())\n>>> Experiment.objects.annotate(\n...     year=ExtractYear('start_date'),\n...     isoyear=ExtractIsoYear('start_date'),\n...     quarter=ExtractQuarter('start_date'),\n...     month=ExtractMonth('start_date'),\n...     week=ExtractWeek('start_date'),\n...     day=ExtractDay('start_date'),\n...     weekday=ExtractWeekDay('start_date'),\n...     isoweekday=ExtractIsoWeekDay('start_date'),\n... ).values(\n...     'year', 'isoyear', 'quarter', 'month', 'week', 'day', 'weekday',\n...     'isoweekday',\n... ).get(end_date__year=ExtractYear('start_date'))\n{'year': 2015, 'isoyear': 2015, 'quarter': 2, 'month': 6, 'week': 25,\n 'day': 15, 'weekday': 2, 'isoweekday': 1}\n \nDateTimeField extracts In addition to the following, all extracts for DateField listed above may also be used on DateTimeFields .  \nclass ExtractHour(expression, tzinfo=None, **extra)  \n \nlookup_name = 'hour' \n \n  \nclass ExtractMinute(expression, tzinfo=None, **extra)  \n \nlookup_name = 'minute' \n \n  \nclass ExtractSecond(expression, tzinfo=None, **extra)  \n \nlookup_name = 'second' \n \n These are logically equivalent to Extract('datetime_field', lookup_name). Each class is also a Transform registered on DateTimeField as __(lookup_name), e.g. __minute. DateTimeField examples: >>> from datetime import datetime\n>>> from django.utils import timezone\n>>> from django.db.models.functions import (\n...     ExtractDay, ExtractHour, ExtractMinute, ExtractMonth,\n...     ExtractQuarter, ExtractSecond, ExtractWeek, ExtractIsoWeekDay,\n...     ExtractWeekDay, ExtractIsoYear, ExtractYear,\n... )\n>>> start_2015 = datetime(2015, 6, 15, 23, 30, 1, tzinfo=timezone.utc)\n>>> end_2015 = datetime(2015, 6, 16, 13, 11, 27, tzinfo=timezone.utc)\n>>> Experiment.objects.create(\n...    start_datetime=start_2015, start_date=start_2015.date(),\n...    end_datetime=end_2015, end_date=end_2015.date())\n>>> Experiment.objects.annotate(\n...     year=ExtractYear('start_datetime'),\n...     isoyear=ExtractIsoYear('start_datetime'),\n...     quarter=ExtractQuarter('start_datetime'),\n...     month=ExtractMonth('start_datetime'),\n...     week=ExtractWeek('start_datetime'),\n...     day=ExtractDay('start_datetime'),\n...     weekday=ExtractWeekDay('start_datetime'),\n...     isoweekday=ExtractIsoWeekDay('start_datetime'),\n...     hour=ExtractHour('start_datetime'),\n...     minute=ExtractMinute('start_datetime'),\n...     second=ExtractSecond('start_datetime'),\n... ).values(\n...     'year', 'isoyear', 'month', 'week', 'day',\n...     'weekday', 'isoweekday', 'hour', 'minute', 'second',\n... ).get(end_datetime__year=ExtractYear('start_datetime'))\n{'year': 2015, 'isoyear': 2015, 'quarter': 2, 'month': 6, 'week': 25,\n 'day': 15, 'weekday': 2, 'isoweekday': 1, 'hour': 23, 'minute': 30,\n 'second': 1}\n When USE_TZ is True then datetimes are stored in the database in UTC. If a different timezone is active in Django, the datetime is converted to that timezone before the value is extracted. The example below converts to the Melbourne timezone (UTC +10:00), which changes the day, weekday, and hour values that are returned: >>> import zoneinfo\n>>> melb = zoneinfo.ZoneInfo('Australia/Melbourne')  # UTC+10:00\n>>> with timezone.override(melb):\n...    Experiment.objects.annotate(\n...        day=ExtractDay('start_datetime'),\n...        weekday=ExtractWeekDay('start_datetime'),\n...        isoweekday=ExtractIsoWeekDay('start_datetime'),\n...        hour=ExtractHour('start_datetime'),\n...    ).values('day', 'weekday', 'isoweekday', 'hour').get(\n...        end_datetime__year=ExtractYear('start_datetime'),\n...    )\n{'day': 16, 'weekday': 3, 'isoweekday': 2, 'hour': 9}\n Explicitly passing the timezone to the Extract function behaves in the same way, and takes priority over an active timezone: >>> import zoneinfo\n>>> melb = zoneinfo.ZoneInfo('Australia/Melbourne')\n>>> Experiment.objects.annotate(\n...     day=ExtractDay('start_datetime', tzinfo=melb),\n...     weekday=ExtractWeekDay('start_datetime', tzinfo=melb),\n...     isoweekday=ExtractIsoWeekDay('start_datetime', tzinfo=melb),\n...     hour=ExtractHour('start_datetime', tzinfo=melb),\n... ).values('day', 'weekday', 'isoweekday', 'hour').get(\n...     end_datetime__year=ExtractYear('start_datetime'),\n... )\n{'day': 16, 'weekday': 3, 'isoweekday': 2, 'hour': 9}\n Now  \nclass Now \n Returns the database server\u2019s current date and time when the query is executed, typically using the SQL CURRENT_TIMESTAMP. Usage example: >>> from django.db.models.functions import Now\n>>> Article.objects.filter(published__lte=Now())\n<QuerySet [<Article: How to Django>]>\n  PostgreSQL considerations On PostgreSQL, the SQL CURRENT_TIMESTAMP returns the time that the current transaction started. Therefore for cross-database compatibility, Now() uses STATEMENT_TIMESTAMP instead. If you need the transaction timestamp, use django.contrib.postgres.functions.TransactionNow.  Trunc  \nclass Trunc(expression, kind, output_field=None, tzinfo=None, is_dst=None, **extra) \n Truncates a date up to a significant component. When you only care if something happened in a particular year, hour, or day, but not the exact second, then Trunc (and its subclasses) can be useful to filter or aggregate your data. For example, you can use Trunc to calculate the number of sales per day. Trunc takes a single expression, representing a DateField, TimeField, or DateTimeField, a kind representing a date or time part, and an output_field that\u2019s either DateTimeField(), TimeField(), or DateField(). It returns a datetime, date, or time depending on output_field, with fields up to kind set to their minimum value. If output_field is omitted, it will default to the output_field of expression. A tzinfo subclass, usually provided by zoneinfo, can be passed to truncate a value in a specific timezone.  Deprecated since version 4.0: The is_dst parameter indicates whether or not pytz should interpret nonexistent and ambiguous datetimes in daylight saving time. By default (when is_dst=None), pytz raises an exception for such datetimes. The is_dst parameter is deprecated and will be removed in Django 5.0.  Given the datetime 2015-06-15 14:30:50.000321+00:00, the built-in kinds return:  \u201cyear\u201d: 2015-01-01 00:00:00+00:00 \u201cquarter\u201d: 2015-04-01 00:00:00+00:00 \u201cmonth\u201d: 2015-06-01 00:00:00+00:00 \u201cweek\u201d: 2015-06-15 00:00:00+00:00 \u201cday\u201d: 2015-06-15 00:00:00+00:00 \u201chour\u201d: 2015-06-15 14:00:00+00:00 \u201cminute\u201d: 2015-06-15 14:30:00+00:00 \u201csecond\u201d: 2015-06-15 14:30:50+00:00  If a different timezone like Australia/Melbourne is active in Django, then the datetime is converted to the new timezone before the value is truncated. The timezone offset for Melbourne in the example date above is +10:00. The values returned when this timezone is active will be:  \u201cyear\u201d: 2015-01-01 00:00:00+11:00 \u201cquarter\u201d: 2015-04-01 00:00:00+10:00 \u201cmonth\u201d: 2015-06-01 00:00:00+10:00 \u201cweek\u201d: 2015-06-16 00:00:00+10:00 \u201cday\u201d: 2015-06-16 00:00:00+10:00 \u201chour\u201d: 2015-06-16 00:00:00+10:00 \u201cminute\u201d: 2015-06-16 00:30:00+10:00 \u201csecond\u201d: 2015-06-16 00:30:50+10:00  The year has an offset of +11:00 because the result transitioned into daylight saving time. Each kind above has a corresponding Trunc subclass (listed below) that should typically be used instead of the more verbose equivalent, e.g. use TruncYear(...) rather than Trunc(..., kind='year'). The subclasses are all defined as transforms, but they aren\u2019t registered with any fields, because the lookup names are already reserved by the Extract subclasses. Usage example: >>> from datetime import datetime\n>>> from django.db.models import Count, DateTimeField\n>>> from django.db.models.functions import Trunc\n>>> Experiment.objects.create(start_datetime=datetime(2015, 6, 15, 14, 30, 50, 321))\n>>> Experiment.objects.create(start_datetime=datetime(2015, 6, 15, 14, 40, 2, 123))\n>>> Experiment.objects.create(start_datetime=datetime(2015, 12, 25, 10, 5, 27, 999))\n>>> experiments_per_day = Experiment.objects.annotate(\n...    start_day=Trunc('start_datetime', 'day', output_field=DateTimeField())\n... ).values('start_day').annotate(experiments=Count('id'))\n>>> for exp in experiments_per_day:\n...     print(exp['start_day'], exp['experiments'])\n...\n2015-06-15 00:00:00 2\n2015-12-25 00:00:00 1\n>>> experiments = Experiment.objects.annotate(\n...    start_day=Trunc('start_datetime', 'day', output_field=DateTimeField())\n... ).filter(start_day=datetime(2015, 6, 15))\n>>> for exp in experiments:\n...     print(exp.start_datetime)\n...\n2015-06-15 14:30:50.000321\n2015-06-15 14:40:02.000123\n \nDateField truncation  \nclass TruncYear(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'year' \n \n  \nclass TruncMonth(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'month' \n \n  \nclass TruncWeek(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \nTruncates to midnight on the Monday of the week.  \nkind = 'week' \n \n  \nclass TruncQuarter(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'quarter' \n \n  Deprecated since version 4.0: The is_dst parameter is deprecated and will be removed in Django 5.0.  These are logically equivalent to Trunc('date_field', kind). They truncate all parts of the date up to kind which allows grouping or filtering dates with less precision. expression can have an output_field of either DateField or DateTimeField. Since DateFields don\u2019t have a time component, only Trunc subclasses that deal with date-parts can be used with DateField: >>> from datetime import datetime\n>>> from django.db.models import Count\n>>> from django.db.models.functions import TruncMonth, TruncYear\n>>> from django.utils import timezone\n>>> start1 = datetime(2014, 6, 15, 14, 30, 50, 321, tzinfo=timezone.utc)\n>>> start2 = datetime(2015, 6, 15, 14, 40, 2, 123, tzinfo=timezone.utc)\n>>> start3 = datetime(2015, 12, 31, 17, 5, 27, 999, tzinfo=timezone.utc)\n>>> Experiment.objects.create(start_datetime=start1, start_date=start1.date())\n>>> Experiment.objects.create(start_datetime=start2, start_date=start2.date())\n>>> Experiment.objects.create(start_datetime=start3, start_date=start3.date())\n>>> experiments_per_year = Experiment.objects.annotate(\n...    year=TruncYear('start_date')).values('year').annotate(\n...    experiments=Count('id'))\n>>> for exp in experiments_per_year:\n...     print(exp['year'], exp['experiments'])\n...\n2014-01-01 1\n2015-01-01 2\n\n>>> import zoneinfo\n>>> melb = zoneinfo.ZoneInfo('Australia/Melbourne')\n>>> experiments_per_month = Experiment.objects.annotate(\n...    month=TruncMonth('start_datetime', tzinfo=melb)).values('month').annotate(\n...    experiments=Count('id'))\n>>> for exp in experiments_per_month:\n...     print(exp['month'], exp['experiments'])\n...\n2015-06-01 00:00:00+10:00 1\n2016-01-01 00:00:00+11:00 1\n2014-06-01 00:00:00+10:00 1\n \nDateTimeField truncation  \nclass TruncDate(expression, tzinfo=None, **extra)  \n \nlookup_name = 'date' \n  \noutput_field = DateField() \n  Changed in Django 3.2: The tzinfo parameter was added.  \n TruncDate casts expression to a date rather than using the built-in SQL truncate function. It\u2019s also registered as a transform on DateTimeField as __date.  \nclass TruncTime(expression, tzinfo=None, **extra)  \n \nlookup_name = 'time' \n  \noutput_field = TimeField() \n  Changed in Django 3.2: The tzinfo parameter was added.  \n TruncTime casts expression to a time rather than using the built-in SQL truncate function. It\u2019s also registered as a transform on DateTimeField as __time.  \nclass TruncDay(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'day' \n \n  \nclass TruncHour(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'hour' \n \n  \nclass TruncMinute(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'minute' \n \n  \nclass TruncSecond(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'second' \n \n  Deprecated since version 4.0: The is_dst parameter is deprecated and will be removed in Django 5.0.  These are logically equivalent to Trunc('datetime_field', kind). They truncate all parts of the date up to kind and allow grouping or filtering datetimes with less precision. expression must have an output_field of DateTimeField. Usage example: >>> from datetime import date, datetime\n>>> from django.db.models import Count\n>>> from django.db.models.functions import (\n...     TruncDate, TruncDay, TruncHour, TruncMinute, TruncSecond,\n... )\n>>> from django.utils import timezone\n>>> import zoneinfo\n>>> start1 = datetime(2014, 6, 15, 14, 30, 50, 321, tzinfo=timezone.utc)\n>>> Experiment.objects.create(start_datetime=start1, start_date=start1.date())\n>>> melb = zoneinfo.ZoneInfo('Australia/Melbourne')\n>>> Experiment.objects.annotate(\n...     date=TruncDate('start_datetime'),\n...     day=TruncDay('start_datetime', tzinfo=melb),\n...     hour=TruncHour('start_datetime', tzinfo=melb),\n...     minute=TruncMinute('start_datetime'),\n...     second=TruncSecond('start_datetime'),\n... ).values('date', 'day', 'hour', 'minute', 'second').get()\n{'date': datetime.date(2014, 6, 15),\n 'day': datetime.datetime(2014, 6, 16, 0, 0, tzinfo=zoneinfo.ZoneInfo('Australia/Melbourne')),\n 'hour': datetime.datetime(2014, 6, 16, 0, 0, tzinfo=zoneinfo.ZoneInfo('Australia/Melbourne')),\n 'minute': 'minute': datetime.datetime(2014, 6, 15, 14, 30, tzinfo=zoneinfo.ZoneInfo('UTC')),\n 'second': datetime.datetime(2014, 6, 15, 14, 30, 50, tzinfo=zoneinfo.ZoneInfo('UTC'))\n}\n \nTimeField truncation  \nclass TruncHour(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'hour' \n \n  \nclass TruncMinute(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'minute' \n \n  \nclass TruncSecond(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'second' \n \n  Deprecated since version 4.0: The is_dst parameter is deprecated and will be removed in Django 5.0.  These are logically equivalent to Trunc('time_field', kind). They truncate all parts of the time up to kind which allows grouping or filtering times with less precision. expression can have an output_field of either TimeField or DateTimeField. Since TimeFields don\u2019t have a date component, only Trunc subclasses that deal with time-parts can be used with TimeField: >>> from datetime import datetime\n>>> from django.db.models import Count, TimeField\n>>> from django.db.models.functions import TruncHour\n>>> from django.utils import timezone\n>>> start1 = datetime(2014, 6, 15, 14, 30, 50, 321, tzinfo=timezone.utc)\n>>> start2 = datetime(2014, 6, 15, 14, 40, 2, 123, tzinfo=timezone.utc)\n>>> start3 = datetime(2015, 12, 31, 17, 5, 27, 999, tzinfo=timezone.utc)\n>>> Experiment.objects.create(start_datetime=start1, start_time=start1.time())\n>>> Experiment.objects.create(start_datetime=start2, start_time=start2.time())\n>>> Experiment.objects.create(start_datetime=start3, start_time=start3.time())\n>>> experiments_per_hour = Experiment.objects.annotate(\n...    hour=TruncHour('start_datetime', output_field=TimeField()),\n... ).values('hour').annotate(experiments=Count('id'))\n>>> for exp in experiments_per_hour:\n...     print(exp['hour'], exp['experiments'])\n...\n14:00:00 2\n17:00:00 1\n\n>>> import zoneinfo\n>>> melb = zoneinfo.ZoneInfo('Australia/Melbourne')\n>>> experiments_per_hour = Experiment.objects.annotate(\n...    hour=TruncHour('start_datetime', tzinfo=melb),\n... ).values('hour').annotate(experiments=Count('id'))\n>>> for exp in experiments_per_hour:\n...     print(exp['hour'], exp['experiments'])\n...\n2014-06-16 00:00:00+10:00 2\n2016-01-01 04:00:00+11:00 1\n Math Functions We\u2019ll be using the following model in math function examples: class Vector(models.Model):\n    x = models.FloatField()\n    y = models.FloatField()\n Abs  \nclass Abs(expression, **extra) \n Returns the absolute value of a numeric field or expression. Usage example: >>> from django.db.models.functions import Abs\n>>> Vector.objects.create(x=-0.5, y=1.1)\n>>> vector = Vector.objects.annotate(x_abs=Abs('x'), y_abs=Abs('y')).get()\n>>> vector.x_abs, vector.y_abs\n(0.5, 1.1)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Abs\n>>> FloatField.register_lookup(Abs)\n>>> # Get vectors inside the unit cube\n>>> vectors = Vector.objects.filter(x__abs__lt=1, y__abs__lt=1)\n ACos  \nclass ACos(expression, **extra) \n Returns the arccosine of a numeric field or expression. The expression value must be within the range -1 to 1. Usage example: >>> from django.db.models.functions import ACos\n>>> Vector.objects.create(x=0.5, y=-0.9)\n>>> vector = Vector.objects.annotate(x_acos=ACos('x'), y_acos=ACos('y')).get()\n>>> vector.x_acos, vector.y_acos\n(1.0471975511965979, 2.6905658417935308)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import ACos\n>>> FloatField.register_lookup(ACos)\n>>> # Get vectors whose arccosine is less than 1\n>>> vectors = Vector.objects.filter(x__acos__lt=1, y__acos__lt=1)\n ASin  \nclass ASin(expression, **extra) \n Returns the arcsine of a numeric field or expression. The expression value must be in the range -1 to 1. Usage example: >>> from django.db.models.functions import ASin\n>>> Vector.objects.create(x=0, y=1)\n>>> vector = Vector.objects.annotate(x_asin=ASin('x'), y_asin=ASin('y')).get()\n>>> vector.x_asin, vector.y_asin\n(0.0, 1.5707963267948966)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import ASin\n>>> FloatField.register_lookup(ASin)\n>>> # Get vectors whose arcsine is less than 1\n>>> vectors = Vector.objects.filter(x__asin__lt=1, y__asin__lt=1)\n ATan  \nclass ATan(expression, **extra) \n Returns the arctangent of a numeric field or expression. Usage example: >>> from django.db.models.functions import ATan\n>>> Vector.objects.create(x=3.12, y=6.987)\n>>> vector = Vector.objects.annotate(x_atan=ATan('x'), y_atan=ATan('y')).get()\n>>> vector.x_atan, vector.y_atan\n(1.2606282660069106, 1.428638798133829)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import ATan\n>>> FloatField.register_lookup(ATan)\n>>> # Get vectors whose arctangent is less than 2\n>>> vectors = Vector.objects.filter(x__atan__lt=2, y__atan__lt=2)\n ATan2  \nclass ATan2(expression1, expression2, **extra) \n Returns the arctangent of expression1 / expression2. Usage example: >>> from django.db.models.functions import ATan2\n>>> Vector.objects.create(x=2.5, y=1.9)\n>>> vector = Vector.objects.annotate(atan2=ATan2('x', 'y')).get()\n>>> vector.atan2\n0.9209258773829491\n Ceil  \nclass Ceil(expression, **extra) \n Returns the smallest integer greater than or equal to a numeric field or expression. Usage example: >>> from django.db.models.functions import Ceil\n>>> Vector.objects.create(x=3.12, y=7.0)\n>>> vector = Vector.objects.annotate(x_ceil=Ceil('x'), y_ceil=Ceil('y')).get()\n>>> vector.x_ceil, vector.y_ceil\n(4.0, 7.0)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Ceil\n>>> FloatField.register_lookup(Ceil)\n>>> # Get vectors whose ceil is less than 10\n>>> vectors = Vector.objects.filter(x__ceil__lt=10, y__ceil__lt=10)\n Cos  \nclass Cos(expression, **extra) \n Returns the cosine of a numeric field or expression. Usage example: >>> from django.db.models.functions import Cos\n>>> Vector.objects.create(x=-8.0, y=3.1415926)\n>>> vector = Vector.objects.annotate(x_cos=Cos('x'), y_cos=Cos('y')).get()\n>>> vector.x_cos, vector.y_cos\n(-0.14550003380861354, -0.9999999999999986)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Cos\n>>> FloatField.register_lookup(Cos)\n>>> # Get vectors whose cosine is less than 0.5\n>>> vectors = Vector.objects.filter(x__cos__lt=0.5, y__cos__lt=0.5)\n Cot  \nclass Cot(expression, **extra) \n Returns the cotangent of a numeric field or expression. Usage example: >>> from django.db.models.functions import Cot\n>>> Vector.objects.create(x=12.0, y=1.0)\n>>> vector = Vector.objects.annotate(x_cot=Cot('x'), y_cot=Cot('y')).get()\n>>> vector.x_cot, vector.y_cot\n(-1.5726734063976826, 0.642092615934331)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Cot\n>>> FloatField.register_lookup(Cot)\n>>> # Get vectors whose cotangent is less than 1\n>>> vectors = Vector.objects.filter(x__cot__lt=1, y__cot__lt=1)\n Degrees  \nclass Degrees(expression, **extra) \n Converts a numeric field or expression from radians to degrees. Usage example: >>> from django.db.models.functions import Degrees\n>>> Vector.objects.create(x=-1.57, y=3.14)\n>>> vector = Vector.objects.annotate(x_d=Degrees('x'), y_d=Degrees('y')).get()\n>>> vector.x_d, vector.y_d\n(-89.95437383553924, 179.9087476710785)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Degrees\n>>> FloatField.register_lookup(Degrees)\n>>> # Get vectors whose degrees are less than 360\n>>> vectors = Vector.objects.filter(x__degrees__lt=360, y__degrees__lt=360)\n Exp  \nclass Exp(expression, **extra) \n Returns the value of e (the natural logarithm base) raised to the power of a numeric field or expression. Usage example: >>> from django.db.models.functions import Exp\n>>> Vector.objects.create(x=5.4, y=-2.0)\n>>> vector = Vector.objects.annotate(x_exp=Exp('x'), y_exp=Exp('y')).get()\n>>> vector.x_exp, vector.y_exp\n(221.40641620418717, 0.1353352832366127)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Exp\n>>> FloatField.register_lookup(Exp)\n>>> # Get vectors whose exp() is greater than 10\n>>> vectors = Vector.objects.filter(x__exp__gt=10, y__exp__gt=10)\n Floor  \nclass Floor(expression, **extra) \n Returns the largest integer value not greater than a numeric field or expression. Usage example: >>> from django.db.models.functions import Floor\n>>> Vector.objects.create(x=5.4, y=-2.3)\n>>> vector = Vector.objects.annotate(x_floor=Floor('x'), y_floor=Floor('y')).get()\n>>> vector.x_floor, vector.y_floor\n(5.0, -3.0)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Floor\n>>> FloatField.register_lookup(Floor)\n>>> # Get vectors whose floor() is greater than 10\n>>> vectors = Vector.objects.filter(x__floor__gt=10, y__floor__gt=10)\n Ln  \nclass Ln(expression, **extra) \n Returns the natural logarithm a numeric field or expression. Usage example: >>> from django.db.models.functions import Ln\n>>> Vector.objects.create(x=5.4, y=233.0)\n>>> vector = Vector.objects.annotate(x_ln=Ln('x'), y_ln=Ln('y')).get()\n>>> vector.x_ln, vector.y_ln\n(1.6863989535702288, 5.4510384535657)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Ln\n>>> FloatField.register_lookup(Ln)\n>>> # Get vectors whose value greater than e\n>>> vectors = Vector.objects.filter(x__ln__gt=1, y__ln__gt=1)\n Log  \nclass Log(expression1, expression2, **extra) \n Accepts two numeric fields or expressions and returns the logarithm of the first to base of the second. Usage example: >>> from django.db.models.functions import Log\n>>> Vector.objects.create(x=2.0, y=4.0)\n>>> vector = Vector.objects.annotate(log=Log('x', 'y')).get()\n>>> vector.log\n2.0\n Mod  \nclass Mod(expression1, expression2, **extra) \n Accepts two numeric fields or expressions and returns the remainder of the first divided by the second (modulo operation). Usage example: >>> from django.db.models.functions import Mod\n>>> Vector.objects.create(x=5.4, y=2.3)\n>>> vector = Vector.objects.annotate(mod=Mod('x', 'y')).get()\n>>> vector.mod\n0.8\n Pi  \nclass Pi(**extra) \n Returns the value of the mathematical constant \u03c0. Power  \nclass Power(expression1, expression2, **extra) \n Accepts two numeric fields or expressions and returns the value of the first raised to the power of the second. Usage example: >>> from django.db.models.functions import Power\n>>> Vector.objects.create(x=2, y=-2)\n>>> vector = Vector.objects.annotate(power=Power('x', 'y')).get()\n>>> vector.power\n0.25\n Radians  \nclass Radians(expression, **extra) \n Converts a numeric field or expression from degrees to radians. Usage example: >>> from django.db.models.functions import Radians\n>>> Vector.objects.create(x=-90, y=180)\n>>> vector = Vector.objects.annotate(x_r=Radians('x'), y_r=Radians('y')).get()\n>>> vector.x_r, vector.y_r\n(-1.5707963267948966, 3.141592653589793)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Radians\n>>> FloatField.register_lookup(Radians)\n>>> # Get vectors whose radians are less than 1\n>>> vectors = Vector.objects.filter(x__radians__lt=1, y__radians__lt=1)\n Random  \nclass Random(**extra) \n  New in Django 3.2.  Returns a random value in the range 0.0 \u2264 x < 1.0. Round  \nclass Round(expression, precision=0, **extra) \n Rounds a numeric field or expression to precision (must be an integer) decimal places. By default, it rounds to the nearest integer. Whether half values are rounded up or down depends on the database. Usage example: >>> from django.db.models.functions import Round\n>>> Vector.objects.create(x=5.4, y=-2.37)\n>>> vector = Vector.objects.annotate(x_r=Round('x'), y_r=Round('y', precision=1)).get()\n>>> vector.x_r, vector.y_r\n(5.0, -2.4)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Round\n>>> FloatField.register_lookup(Round)\n>>> # Get vectors whose round() is less than 20\n>>> vectors = Vector.objects.filter(x__round__lt=20, y__round__lt=20)\n  Changed in Django 4.0: The precision argument was added.  Sign  \nclass Sign(expression, **extra) \n Returns the sign (-1, 0, 1) of a numeric field or expression. Usage example: >>> from django.db.models.functions import Sign\n>>> Vector.objects.create(x=5.4, y=-2.3)\n>>> vector = Vector.objects.annotate(x_sign=Sign('x'), y_sign=Sign('y')).get()\n>>> vector.x_sign, vector.y_sign\n(1, -1)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Sign\n>>> FloatField.register_lookup(Sign)\n>>> # Get vectors whose signs of components are less than 0.\n>>> vectors = Vector.objects.filter(x__sign__lt=0, y__sign__lt=0)\n Sin  \nclass Sin(expression, **extra) \n Returns the sine of a numeric field or expression. Usage example: >>> from django.db.models.functions import Sin\n>>> Vector.objects.create(x=5.4, y=-2.3)\n>>> vector = Vector.objects.annotate(x_sin=Sin('x'), y_sin=Sin('y')).get()\n>>> vector.x_sin, vector.y_sin\n(-0.7727644875559871, -0.7457052121767203)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Sin\n>>> FloatField.register_lookup(Sin)\n>>> # Get vectors whose sin() is less than 0\n>>> vectors = Vector.objects.filter(x__sin__lt=0, y__sin__lt=0)\n Sqrt  \nclass Sqrt(expression, **extra) \n Returns the square root of a nonnegative numeric field or expression. Usage example: >>> from django.db.models.functions import Sqrt\n>>> Vector.objects.create(x=4.0, y=12.0)\n>>> vector = Vector.objects.annotate(x_sqrt=Sqrt('x'), y_sqrt=Sqrt('y')).get()\n>>> vector.x_sqrt, vector.y_sqrt\n(2.0, 3.46410)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Sqrt\n>>> FloatField.register_lookup(Sqrt)\n>>> # Get vectors whose sqrt() is less than 5\n>>> vectors = Vector.objects.filter(x__sqrt__lt=5, y__sqrt__lt=5)\n Tan  \nclass Tan(expression, **extra) \n Returns the tangent of a numeric field or expression. Usage example: >>> from django.db.models.functions import Tan\n>>> Vector.objects.create(x=0, y=12)\n>>> vector = Vector.objects.annotate(x_tan=Tan('x'), y_tan=Tan('y')).get()\n>>> vector.x_tan, vector.y_tan\n(0.0, -0.6358599286615808)\n It can also be registered as a transform. For example: >>> from django.db.models import FloatField\n>>> from django.db.models.functions import Tan\n>>> FloatField.register_lookup(Tan)\n>>> # Get vectors whose tangent is less than 0\n>>> vectors = Vector.objects.filter(x__tan__lt=0, y__tan__lt=0)\n Text functions Chr  \nclass Chr(expression, **extra) \n Accepts a numeric field or expression and returns the text representation of the expression as a single character. It works the same as Python\u2019s chr() function. Like Length, it can be registered as a transform on IntegerField. The default lookup name is chr. Usage example: >>> from django.db.models.functions import Chr\n>>> Author.objects.create(name='Margaret Smith')\n>>> author = Author.objects.filter(name__startswith=Chr(ord('M'))).get()\n>>> print(author.name)\nMargaret Smith\n Concat  \nclass Concat(*expressions, **extra) \n Accepts a list of at least two text fields or expressions and returns the concatenated text. Each argument must be of a text or char type. If you want to concatenate a TextField() with a CharField(), then be sure to tell Django that the output_field should be a TextField(). Specifying an output_field is also required when concatenating a Value as in the example below. This function will never have a null result. On backends where a null argument results in the entire expression being null, Django will ensure that each null part is converted to an empty string first. Usage example: >>> # Get the display name as \"name (goes_by)\"\n>>> from django.db.models import CharField, Value as V\n>>> from django.db.models.functions import Concat\n>>> Author.objects.create(name='Margaret Smith', goes_by='Maggie')\n>>> author = Author.objects.annotate(\n...     screen_name=Concat(\n...         'name', V(' ('), 'goes_by', V(')'),\n...         output_field=CharField()\n...     )\n... ).get()\n>>> print(author.screen_name)\nMargaret Smith (Maggie)\n Left  \nclass Left(expression, length, **extra) \n Returns the first length characters of the given text field or expression. Usage example: >>> from django.db.models.functions import Left\n>>> Author.objects.create(name='Margaret Smith')\n>>> author = Author.objects.annotate(first_initial=Left('name', 1)).get()\n>>> print(author.first_initial)\nM\n Length  \nclass Length(expression, **extra) \n Accepts a single text field or expression and returns the number of characters the value has. If the expression is null, then the length will also be null. Usage example: >>> # Get the length of the name and goes_by fields\n>>> from django.db.models.functions import Length\n>>> Author.objects.create(name='Margaret Smith')\n>>> author = Author.objects.annotate(\n...    name_length=Length('name'),\n...    goes_by_length=Length('goes_by')).get()\n>>> print(author.name_length, author.goes_by_length)\n(14, None)\n It can also be registered as a transform. For example: >>> from django.db.models import CharField\n>>> from django.db.models.functions import Length\n>>> CharField.register_lookup(Length)\n>>> # Get authors whose name is longer than 7 characters\n>>> authors = Author.objects.filter(name__length__gt=7)\n Lower  \nclass Lower(expression, **extra) \n Accepts a single text field or expression and returns the lowercase representation. It can also be registered as a transform as described in Length. Usage example: >>> from django.db.models.functions import Lower\n>>> Author.objects.create(name='Margaret Smith')\n>>> author = Author.objects.annotate(name_lower=Lower('name')).get()\n>>> print(author.name_lower)\nmargaret smith\n LPad  \nclass LPad(expression, length, fill_text=Value(' '), **extra) \n Returns the value of the given text field or expression padded on the left side with fill_text so that the resulting value is length characters long. The default fill_text is a space. Usage example: >>> from django.db.models import Value\n>>> from django.db.models.functions import LPad\n>>> Author.objects.create(name='John', alias='j')\n>>> Author.objects.update(name=LPad('name', 8, Value('abc')))\n1\n>>> print(Author.objects.get(alias='j').name)\nabcaJohn\n LTrim  \nclass LTrim(expression, **extra) \n Similar to Trim, but removes only leading spaces. MD5  \nclass MD5(expression, **extra) \n Accepts a single text field or expression and returns the MD5 hash of the string. It can also be registered as a transform as described in Length. Usage example: >>> from django.db.models.functions import MD5\n>>> Author.objects.create(name='Margaret Smith')\n>>> author = Author.objects.annotate(name_md5=MD5('name')).get()\n>>> print(author.name_md5)\n749fb689816b2db85f5b169c2055b247\n Ord  \nclass Ord(expression, **extra) \n Accepts a single text field or expression and returns the Unicode code point value for the first character of that expression. It works similar to Python\u2019s ord() function, but an exception isn\u2019t raised if the expression is more than one character long. It can also be registered as a transform as described in Length. The default lookup name is ord. Usage example: >>> from django.db.models.functions import Ord\n>>> Author.objects.create(name='Margaret Smith')\n>>> author = Author.objects.annotate(name_code_point=Ord('name')).get()\n>>> print(author.name_code_point)\n77\n Repeat  \nclass Repeat(expression, number, **extra) \n Returns the value of the given text field or expression repeated number times. Usage example: >>> from django.db.models.functions import Repeat\n>>> Author.objects.create(name='John', alias='j')\n>>> Author.objects.update(name=Repeat('name', 3))\n1\n>>> print(Author.objects.get(alias='j').name)\nJohnJohnJohn\n Replace  \nclass Replace(expression, text, replacement=Value(''), **extra) \n Replaces all occurrences of text with replacement in expression. The default replacement text is the empty string. The arguments to the function are case-sensitive. Usage example: >>> from django.db.models import Value\n>>> from django.db.models.functions import Replace\n>>> Author.objects.create(name='Margaret Johnson')\n>>> Author.objects.create(name='Margaret Smith')\n>>> Author.objects.update(name=Replace('name', Value('Margaret'), Value('Margareth')))\n2\n>>> Author.objects.values('name')\n<QuerySet [{'name': 'Margareth Johnson'}, {'name': 'Margareth Smith'}]>\n Reverse  \nclass Reverse(expression, **extra) \n Accepts a single text field or expression and returns the characters of that expression in reverse order. It can also be registered as a transform as described in Length. The default lookup name is reverse. Usage example: >>> from django.db.models.functions import Reverse\n>>> Author.objects.create(name='Margaret Smith')\n>>> author = Author.objects.annotate(backward=Reverse('name')).get()\n>>> print(author.backward)\nhtimS teragraM\n Right  \nclass Right(expression, length, **extra) \n Returns the last length characters of the given text field or expression. Usage example: >>> from django.db.models.functions import Right\n>>> Author.objects.create(name='Margaret Smith')\n>>> author = Author.objects.annotate(last_letter=Right('name', 1)).get()\n>>> print(author.last_letter)\nh\n RPad  \nclass RPad(expression, length, fill_text=Value(' '), **extra) \n Similar to LPad, but pads on the right side. RTrim  \nclass RTrim(expression, **extra) \n Similar to Trim, but removes only trailing spaces. \nSHA1, SHA224, SHA256, SHA384, and SHA512\n  \nclass SHA1(expression, **extra) \n  \nclass SHA224(expression, **extra) \n  \nclass SHA256(expression, **extra) \n  \nclass SHA384(expression, **extra) \n  \nclass SHA512(expression, **extra) \n Accepts a single text field or expression and returns the particular hash of the string. They can also be registered as transforms as described in Length. Usage example: >>> from django.db.models.functions import SHA1\n>>> Author.objects.create(name='Margaret Smith')\n>>> author = Author.objects.annotate(name_sha1=SHA1('name')).get()\n>>> print(author.name_sha1)\nb87efd8a6c991c390be5a68e8a7945a7851c7e5c\n  PostgreSQL The pgcrypto extension must be installed. You can use the CryptoExtension migration operation to install it.   Oracle Oracle doesn\u2019t support the SHA224 function.  StrIndex  \nclass StrIndex(string, substring, **extra) \n Returns a positive integer corresponding to the 1-indexed position of the first occurrence of substring inside string, or 0 if substring is not found. Usage example: >>> from django.db.models import Value as V\n>>> from django.db.models.functions import StrIndex\n>>> Author.objects.create(name='Margaret Smith')\n>>> Author.objects.create(name='Smith, Margaret')\n>>> Author.objects.create(name='Margaret Jackson')\n>>> Author.objects.filter(name='Margaret Jackson').annotate(\n...     smith_index=StrIndex('name', V('Smith'))\n... ).get().smith_index\n0\n>>> authors = Author.objects.annotate(\n...    smith_index=StrIndex('name', V('Smith'))\n... ).filter(smith_index__gt=0)\n<QuerySet [<Author: Margaret Smith>, <Author: Smith, Margaret>]>\n  Warning In MySQL, a database table\u2019s collation determines whether string comparisons (such as the expression and substring of this function) are case-sensitive. Comparisons are case-insensitive by default.  Substr  \nclass Substr(expression, pos, length=None, **extra) \n Returns a substring of length length from the field or expression starting at position pos. The position is 1-indexed, so the position must be greater than 0. If length is None, then the rest of the string will be returned. Usage example: >>> # Set the alias to the first 5 characters of the name as lowercase\n>>> from django.db.models.functions import Lower, Substr\n>>> Author.objects.create(name='Margaret Smith')\n>>> Author.objects.update(alias=Lower(Substr('name', 1, 5)))\n1\n>>> print(Author.objects.get(name='Margaret Smith').alias)\nmarga\n Trim  \nclass Trim(expression, **extra) \n Returns the value of the given text field or expression with leading and trailing spaces removed. Usage example: >>> from django.db.models.functions import Trim\n>>> Author.objects.create(name='  John  ', alias='j')\n>>> Author.objects.update(name=Trim('name'))\n1\n>>> print(Author.objects.get(alias='j').name)\nJohn\n Upper  \nclass Upper(expression, **extra) \n Accepts a single text field or expression and returns the uppercase representation. It can also be registered as a transform as described in Length. Usage example: >>> from django.db.models.functions import Upper\n>>> Author.objects.create(name='Margaret Smith')\n>>> author = Author.objects.annotate(name_upper=Upper('name')).get()\n>>> print(author.name_upper)\nMARGARET SMITH\n Window functions There are a number of functions to use in a Window expression for computing the rank of elements or the Ntile of some rows. CumeDist  \nclass CumeDist(*expressions, **extra) \n Calculates the cumulative distribution of a value within a window or partition. The cumulative distribution is defined as the number of rows preceding or peered with the current row divided by the total number of rows in the frame. DenseRank  \nclass DenseRank(*expressions, **extra) \n Equivalent to Rank but does not have gaps. FirstValue  \nclass FirstValue(expression, **extra) \n Returns the value evaluated at the row that\u2019s the first row of the window frame, or None if no such value exists. Lag  \nclass Lag(expression, offset=1, default=None, **extra) \n Calculates the value offset by offset, and if no row exists there, returns default. default must have the same type as the expression, however, this is only validated by the database and not in Python.  MariaDB and default MariaDB doesn\u2019t support the default parameter.  LastValue  \nclass LastValue(expression, **extra) \n Comparable to FirstValue, it calculates the last value in a given frame clause. Lead  \nclass Lead(expression, offset=1, default=None, **extra) \n Calculates the leading value in a given frame. Both offset and default are evaluated with respect to the current row. default must have the same type as the expression, however, this is only validated by the database and not in Python.  MariaDB and default MariaDB doesn\u2019t support the default parameter.  NthValue  \nclass NthValue(expression, nth=1, **extra) \n Computes the row relative to the offset nth (must be a positive value) within the window. Returns None if no row exists. Some databases may handle a nonexistent nth-value differently. For example, Oracle returns an empty string rather than None for character-based expressions. Django doesn\u2019t do any conversions in these cases. Ntile  \nclass Ntile(num_buckets=1, **extra) \n Calculates a partition for each of the rows in the frame clause, distributing numbers as evenly as possible between 1 and num_buckets. If the rows don\u2019t divide evenly into a number of buckets, one or more buckets will be represented more frequently. PercentRank  \nclass PercentRank(*expressions, **extra) \n Computes the percentile rank of the rows in the frame clause. This computation is equivalent to evaluating: (rank - 1) / (total rows - 1)\n The following table explains the calculation for the percentile rank of a row:   \nRow # Value Rank Calculation Percent Rank   \n1 15 1 (1-1)/(7-1) 0.0000  \n2 20 2 (2-1)/(7-1) 0.1666  \n3 20 2 (2-1)/(7-1) 0.1666  \n4 20 2 (2-1)/(7-1) 0.1666  \n5 30 5 (5-1)/(7-1) 0.6666  \n6 30 5 (5-1)/(7-1) 0.6666  \n7 40 7 (7-1)/(7-1) 1.0000   Rank  \nclass Rank(*expressions, **extra) \n Comparable to RowNumber, this function ranks rows in the window. The computed rank contains gaps. Use DenseRank to compute rank without gaps. RowNumber  \nclass RowNumber(*expressions, **extra) \n Computes the row number according to the ordering of either the frame clause or the ordering of the whole query if there is no partitioning of the window frame.\n"}, {"name": "Database instrumentation", "path": "topics/db/instrumentation", "type": "Guides", "text": "Database instrumentation To help you understand and control the queries issued by your code, Django provides a hook for installing wrapper functions around the execution of database queries. For example, wrappers can count queries, measure query duration, log queries, or even prevent query execution (e.g. to make sure that no queries are issued while rendering a template with prefetched data). The wrappers are modeled after middleware \u2013 they are callables which take another callable as one of their arguments. They call that callable to invoke the (possibly wrapped) database query, and they can do what they want around that call. They are, however, created and installed by user code, and so don\u2019t need a separate factory like middleware do. Installing a wrapper is done in a context manager \u2013 so the wrappers are temporary and specific to some flow in your code. As mentioned above, an example of a wrapper is a query execution blocker. It could look like this: def blocker(*args):\n    raise Exception('No database access allowed here.')\n And it would be used in a view to block queries from the template like so: from django.db import connection\nfrom django.shortcuts import render\n\ndef my_view(request):\n    context = {...}  # Code to generate context with all data.\n    template_name = ...\n    with connection.execute_wrapper(blocker):\n        return render(request, template_name, context)\n The parameters sent to the wrappers are:  \nexecute \u2013 a callable, which should be invoked with the rest of the parameters in order to execute the query. \nsql \u2013 a str, the SQL query to be sent to the database. \nparams \u2013 a list/tuple of parameter values for the SQL command, or a list/tuple of lists/tuples if the wrapped call is executemany(). \nmany \u2013 a bool indicating whether the ultimately invoked call is execute() or executemany() (and whether params is expected to be a sequence of values, or a sequence of sequences of values). \ncontext \u2013 a dictionary with further data about the context of invocation. This includes the connection and cursor.  Using the parameters, a slightly more complex version of the blocker could include the connection name in the error message: def blocker(execute, sql, params, many, context):\n    alias = context['connection'].alias\n    raise Exception(\"Access to database '{}' blocked here\".format(alias))\n For a more complete example, a query logger could look like this: import time\n\nclass QueryLogger:\n\n    def __init__(self):\n        self.queries = []\n\n    def __call__(self, execute, sql, params, many, context):\n        current_query = {'sql': sql, 'params': params, 'many': many}\n        start = time.monotonic()\n        try:\n            result = execute(sql, params, many, context)\n        except Exception as e:\n            current_query['status'] = 'error'\n            current_query['exception'] = e\n            raise\n        else:\n            current_query['status'] = 'ok'\n            return result\n        finally:\n            duration = time.monotonic() - start\n            current_query['duration'] = duration\n            self.queries.append(current_query)\n To use this, you would create a logger object and install it as a wrapper: from django.db import connection\n\nql = QueryLogger()\nwith connection.execute_wrapper(ql):\n    do_queries()\n# Now we can print the log.\nprint(ql.queries)\n connection.execute_wrapper()  \nexecute_wrapper(wrapper) \n Returns a context manager which, when entered, installs a wrapper around database query executions, and when exited, removes the wrapper. The wrapper is installed on the thread-local connection object. wrapper is a callable taking five arguments. It is called for every query execution in the scope of the context manager, with arguments execute, sql, params, many, and context as described above. It\u2019s expected to call execute(sql, params, many, context) and return the return value of that call.\n"}, {"name": "Database migration operations", "path": "ref/contrib/postgres/operations", "type": "API", "text": "Database migration operations All of these operations are available from the django.contrib.postgres.operations module. Creating extension using migrations You can create a PostgreSQL extension in your database using a migration file. This example creates an hstore extension, but the same principles apply for other extensions. Set up the hstore extension in PostgreSQL before the first CreateModel or AddField operation that involves HStoreField by adding a migration with the HStoreExtension operation. For example: from django.contrib.postgres.operations import HStoreExtension\n\nclass Migration(migrations.Migration):\n    ...\n\n    operations = [\n        HStoreExtension(),\n        ...\n    ]\n The operation skips adding the extension if it already exists. For most extensions, this requires a database user with superuser privileges. If the Django database user doesn\u2019t have the appropriate privileges, you\u2019ll have to create the extension outside of Django migrations with a user that has them. In that case, connect to your Django database and run the query CREATE EXTENSION IF NOT EXISTS hstore;.  Changed in Django 3.2: In older versions, the pre-existence of the extension isn\u2019t checked.  CreateExtension  \nclass CreateExtension(name)  \nAn Operation subclass which installs a PostgreSQL extension. For common extensions, use one of the more specific subclasses below.  \nname  \nThis is a required argument. The name of the extension to be installed. \n \n BloomExtension  \nclass BloomExtension  \nInstalls the bloom extension. \n BtreeGinExtension  \nclass BtreeGinExtension  \nInstalls the btree_gin extension. \n BtreeGistExtension  \nclass BtreeGistExtension  \nInstalls the btree_gist extension. \n CITextExtension  \nclass CITextExtension  \nInstalls the citext extension. \n CryptoExtension  \nclass CryptoExtension  \nInstalls the pgcrypto extension. \n HStoreExtension  \nclass HStoreExtension  \nInstalls the hstore extension and also sets up the connection to interpret hstore data for possible use in subsequent migrations. \n TrigramExtension  \nclass TrigramExtension  \nInstalls the pg_trgm extension. \n UnaccentExtension  \nclass UnaccentExtension  \nInstalls the unaccent extension. \n Managing collations using migrations  New in Django 3.2.  If you need to filter or order a column using a particular collation that your operating system provides but PostgreSQL does not, you can manage collations in your database using a migration file. These collations can then be used with the db_collation parameter on CharField, TextField, and their subclasses. For example, to create a collation for German phone book ordering: from django.contrib.postgres.operations import CreateCollation\n\nclass Migration(migrations.Migration):\n    ...\n\n    operations = [\n        CreateCollation(\n            'german_phonebook',\n            provider='icu',\n            locale='und-u-ks-level2',\n        ),\n        ...\n    ]\n  \nclass CreateCollation(name, locale, *, provider='libc', deterministic=True)  \nCreates a collation with the given name, locale and provider. Set the deterministic parameter to False to create a non-deterministic collation, such as for case-insensitive filtering. \n  \nclass RemoveCollation(name, locale, *, provider='libc', deterministic=True)  \nRemoves the collations named name. When reversed this is creating a collation with the provided locale, provider, and deterministic arguments. Therefore, locale is required to make this operation reversible. \n  Restrictions Non-deterministic collations are supported only on PostgreSQL 12+.  Concurrent index operations PostgreSQL supports the CONCURRENTLY option to CREATE INDEX and DROP INDEX statements to add and remove indexes without locking out writes. This option is useful for adding or removing an index in a live production database.  \nclass AddIndexConcurrently(model_name, index)  \nLike AddIndex, but creates an index with the CONCURRENTLY option. This has a few caveats to be aware of when using this option, see the PostgreSQL documentation of building indexes concurrently. \n  \nclass RemoveIndexConcurrently(model_name, name)  \nLike RemoveIndex, but removes the index with the CONCURRENTLY option. This has a few caveats to be aware of when using this option, see the PostgreSQL documentation. \n  Note The CONCURRENTLY option is not supported inside a transaction (see non-atomic migration).  Adding constraints without enforcing validation  New in Django 4.0.  PostgreSQL supports the NOT VALID option with the ADD CONSTRAINT statement to add check constraints without enforcing validation on existing rows. This option is useful if you want to skip the potentially lengthy scan of the table to verify that all existing rows satisfy the constraint. To validate check constraints created with the NOT VALID option at a later point of time, use the ValidateConstraint operation. See the PostgreSQL documentation for more details.  \nclass AddConstraintNotValid(model_name, constraint)  \nLike AddConstraint, but avoids validating the constraint on existing rows. \n  \nclass ValidateConstraint(model_name, name)  \nScans through the table and validates the given check constraint on existing rows. \n  Note AddConstraintNotValid and ValidateConstraint operations should be performed in two separate migrations. Performing both operations in the same atomic migration has the same effect as AddConstraint, whereas performing them in a single non-atomic migration, may leave your database in an inconsistent state if the ValidateConstraint operation fails. \n"}, {"name": "Database transactions", "path": "topics/db/transactions", "type": "Guides", "text": "Database transactions Django gives you a few ways to control how database transactions are managed. Managing database transactions Django\u2019s default transaction behavior Django\u2019s default behavior is to run in autocommit mode. Each query is immediately committed to the database, unless a transaction is active. See below for details. Django uses transactions or savepoints automatically to guarantee the integrity of ORM operations that require multiple queries, especially delete() and update() queries. Django\u2019s TestCase class also wraps each test in a transaction for performance reasons. Tying transactions to HTTP requests A common way to handle transactions on the web is to wrap each request in a transaction. Set ATOMIC_REQUESTS to True in the configuration of each database for which you want to enable this behavior. It works like this. Before calling a view function, Django starts a transaction. If the response is produced without problems, Django commits the transaction. If the view produces an exception, Django rolls back the transaction. You may perform subtransactions using savepoints in your view code, typically with the atomic() context manager. However, at the end of the view, either all or none of the changes will be committed.  Warning While the simplicity of this transaction model is appealing, it also makes it inefficient when traffic increases. Opening a transaction for every view has some overhead. The impact on performance depends on the query patterns of your application and on how well your database handles locking.   Per-request transactions and streaming responses When a view returns a StreamingHttpResponse, reading the contents of the response will often execute code to generate the content. Since the view has already returned, such code runs outside of the transaction. Generally speaking, it isn\u2019t advisable to write to the database while generating a streaming response, since there\u2019s no sensible way to handle errors after starting to send the response.  In practice, this feature wraps every view function in the atomic() decorator described below. Note that only the execution of your view is enclosed in the transactions. Middleware runs outside of the transaction, and so does the rendering of template responses. When ATOMIC_REQUESTS is enabled, it\u2019s still possible to prevent views from running in a transaction.  \nnon_atomic_requests(using=None)  \nThis decorator will negate the effect of ATOMIC_REQUESTS for a given view: from django.db import transaction\n\n@transaction.non_atomic_requests\ndef my_view(request):\n    do_stuff()\n\n@transaction.non_atomic_requests(using='other')\ndef my_other_view(request):\n    do_stuff_on_the_other_database()\n It only works if it\u2019s applied to the view itself. \n Controlling transactions explicitly Django provides a single API to control database transactions.  \natomic(using=None, savepoint=True, durable=False)  \nAtomicity is the defining property of database transactions. atomic allows us to create a block of code within which the atomicity on the database is guaranteed. If the block of code is successfully completed, the changes are committed to the database. If there is an exception, the changes are rolled back. atomic blocks can be nested. In this case, when an inner block completes successfully, its effects can still be rolled back if an exception is raised in the outer block at a later point. It is sometimes useful to ensure an atomic block is always the outermost atomic block, ensuring that any database changes are committed when the block is exited without errors. This is known as durability and can be achieved by setting durable=True. If the atomic block is nested within another it raises a RuntimeError. atomic is usable both as a decorator: from django.db import transaction\n\n@transaction.atomic\ndef viewfunc(request):\n    # This code executes inside a transaction.\n    do_stuff()\n and as a context manager: from django.db import transaction\n\ndef viewfunc(request):\n    # This code executes in autocommit mode (Django's default).\n    do_stuff()\n\n    with transaction.atomic():\n        # This code executes inside a transaction.\n        do_more_stuff()\n Wrapping atomic in a try/except block allows for natural handling of integrity errors: from django.db import IntegrityError, transaction\n\n@transaction.atomic\ndef viewfunc(request):\n    create_parent()\n\n    try:\n        with transaction.atomic():\n            generate_relationships()\n    except IntegrityError:\n        handle_exception()\n\n    add_children()\n In this example, even if generate_relationships() causes a database error by breaking an integrity constraint, you can execute queries in add_children(), and the changes from create_parent() are still there and bound to the same transaction. Note that any operations attempted in generate_relationships() will already have been rolled back safely when handle_exception() is called, so the exception handler can also operate on the database if necessary.  Avoid catching exceptions inside atomic! When exiting an atomic block, Django looks at whether it\u2019s exited normally or with an exception to determine whether to commit or roll back. If you catch and handle exceptions inside an atomic block, you may hide from Django the fact that a problem has happened. This can result in unexpected behavior. This is mostly a concern for DatabaseError and its subclasses such as IntegrityError. After such an error, the transaction is broken and Django will perform a rollback at the end of the atomic block. If you attempt to run database queries before the rollback happens, Django will raise a TransactionManagementError. You may also encounter this behavior when an ORM-related signal handler raises an exception. The correct way to catch database errors is around an atomic block as shown above. If necessary, add an extra atomic block for this purpose. This pattern has another advantage: it delimits explicitly which operations will be rolled back if an exception occurs. If you catch exceptions raised by raw SQL queries, Django\u2019s behavior is unspecified and database-dependent.   You may need to manually revert model state when rolling back a transaction. The values of a model\u2019s fields won\u2019t be reverted when a transaction rollback happens. This could lead to an inconsistent model state unless you manually restore the original field values. For example, given MyModel with an active field, this snippet ensures that the if obj.active check at the end uses the correct value if updating active to True fails in the transaction: from django.db import DatabaseError, transaction\n\nobj = MyModel(active=False)\nobj.active = True\ntry:\n    with transaction.atomic():\n        obj.save()\nexcept DatabaseError:\n    obj.active = False\n\nif obj.active:\n    ...\n  In order to guarantee atomicity, atomic disables some APIs. Attempting to commit, roll back, or change the autocommit state of the database connection within an atomic block will raise an exception. atomic takes a using argument which should be the name of a database. If this argument isn\u2019t provided, Django uses the \"default\" database. Under the hood, Django\u2019s transaction management code:  opens a transaction when entering the outermost atomic block; creates a savepoint when entering an inner atomic block; releases or rolls back to the savepoint when exiting an inner block; commits or rolls back the transaction when exiting the outermost block.  You can disable the creation of savepoints for inner blocks by setting the savepoint argument to False. If an exception occurs, Django will perform the rollback when exiting the first parent block with a savepoint if there is one, and the outermost block otherwise. Atomicity is still guaranteed by the outer transaction. This option should only be used if the overhead of savepoints is noticeable. It has the drawback of breaking the error handling described above. You may use atomic when autocommit is turned off. It will only use savepoints, even for the outermost block. \n  Performance considerations Open transactions have a performance cost for your database server. To minimize this overhead, keep your transactions as short as possible. This is especially important if you\u2019re using atomic() in long-running processes, outside of Django\u2019s request / response cycle.   Warning django.test.TestCase disables the durability check to allow testing durable atomic blocks in a transaction for performance reasons. Use django.test.TransactionTestCase for testing durability.   Changed in Django 3.2: The durable argument was added.  Autocommit Why Django uses autocommit In the SQL standards, each SQL query starts a transaction, unless one is already active. Such transactions must then be explicitly committed or rolled back. This isn\u2019t always convenient for application developers. To alleviate this problem, most databases provide an autocommit mode. When autocommit is turned on and no transaction is active, each SQL query gets wrapped in its own transaction. In other words, not only does each such query start a transaction, but the transaction also gets automatically committed or rolled back, depending on whether the query succeeded. PEP 249, the Python Database API Specification v2.0, requires autocommit to be initially turned off. Django overrides this default and turns autocommit on. To avoid this, you can deactivate the transaction management, but it isn\u2019t recommended. Deactivating transaction management You can totally disable Django\u2019s transaction management for a given database by setting AUTOCOMMIT to False in its configuration. If you do this, Django won\u2019t enable autocommit, and won\u2019t perform any commits. You\u2019ll get the regular behavior of the underlying database library. This requires you to commit explicitly every transaction, even those started by Django or by third-party libraries. Thus, this is best used in situations where you want to run your own transaction-controlling middleware or do something really strange. Performing actions after commit Sometimes you need to perform an action related to the current database transaction, but only if the transaction successfully commits. Examples might include a Celery task, an email notification, or a cache invalidation. Django provides the on_commit() function to register callback functions that should be executed after a transaction is successfully committed:  \non_commit(func, using=None) \n Pass any function (that takes no arguments) to on_commit(): from django.db import transaction\n\ndef do_something():\n    pass  # send a mail, invalidate a cache, fire off a Celery task, etc.\n\ntransaction.on_commit(do_something)\n You can also wrap your function in a lambda: transaction.on_commit(lambda: some_celery_task.delay('arg1'))\n The function you pass in will be called immediately after a hypothetical database write made where on_commit() is called would be successfully committed. If you call on_commit() while there isn\u2019t an active transaction, the callback will be executed immediately. If that hypothetical database write is instead rolled back (typically when an unhandled exception is raised in an atomic() block), your function will be discarded and never called. Savepoints Savepoints (i.e. nested atomic() blocks) are handled correctly. That is, an on_commit() callable registered after a savepoint (in a nested atomic() block) will be called after the outer transaction is committed, but not if a rollback to that savepoint or any previous savepoint occurred during the transaction: with transaction.atomic():  # Outer atomic, start a new transaction\n    transaction.on_commit(foo)\n\n    with transaction.atomic():  # Inner atomic block, create a savepoint\n        transaction.on_commit(bar)\n\n# foo() and then bar() will be called when leaving the outermost block\n On the other hand, when a savepoint is rolled back (due to an exception being raised), the inner callable will not be called: with transaction.atomic():  # Outer atomic, start a new transaction\n    transaction.on_commit(foo)\n\n    try:\n        with transaction.atomic():  # Inner atomic block, create a savepoint\n            transaction.on_commit(bar)\n            raise SomeError()  # Raising an exception - abort the savepoint\n    except SomeError:\n        pass\n\n# foo() will be called, but not bar()\n Order of execution On-commit functions for a given transaction are executed in the order they were registered. Exception handling If one on-commit function within a given transaction raises an uncaught exception, no later registered functions in that same transaction will run. This is the same behavior as if you\u2019d executed the functions sequentially yourself without on_commit(). Timing of execution Your callbacks are executed after a successful commit, so a failure in a callback will not cause the transaction to roll back. They are executed conditionally upon the success of the transaction, but they are not part of the transaction. For the intended use cases (mail notifications, Celery tasks, etc.), this should be fine. If it\u2019s not (if your follow-up action is so critical that its failure should mean the failure of the transaction itself), then you don\u2019t want to use the on_commit() hook. Instead, you may want two-phase commit such as the psycopg Two-Phase Commit protocol support and the optional Two-Phase Commit Extensions in the Python DB-API specification. Callbacks are not run until autocommit is restored on the connection following the commit (because otherwise any queries done in a callback would open an implicit transaction, preventing the connection from going back into autocommit mode). When in autocommit mode and outside of an atomic() block, the function will run immediately, not on commit. On-commit functions only work with autocommit mode and the atomic() (or ATOMIC_REQUESTS) transaction API. Calling on_commit() when autocommit is disabled and you are not within an atomic block will result in an error. Use in tests Django\u2019s TestCase class wraps each test in a transaction and rolls back that transaction after each test, in order to provide test isolation. This means that no transaction is ever actually committed, thus your on_commit() callbacks will never be run. You can overcome this limitation by using TestCase.captureOnCommitCallbacks(). This captures your on_commit() callbacks in a list, allowing you to make assertions on them, or emulate the transaction committing by calling them. Another way to overcome the limitation is to use TransactionTestCase instead of TestCase. This will mean your transactions are committed, and the callbacks will run. However TransactionTestCase flushes the database between tests, which is significantly slower than TestCase\u2019s isolation. Why no rollback hook? A rollback hook is harder to implement robustly than a commit hook, since a variety of things can cause an implicit rollback. For instance, if your database connection is dropped because your process was killed without a chance to shut down gracefully, your rollback hook will never run. But there is a solution: instead of doing something during the atomic block (transaction) and then undoing it if the transaction fails, use on_commit() to delay doing it in the first place until after the transaction succeeds. It\u2019s a lot easier to undo something you never did in the first place! Low-level APIs  Warning Always prefer atomic() if possible at all. It accounts for the idiosyncrasies of each database and prevents invalid operations. The low level APIs are only useful if you\u2019re implementing your own transaction management.  Autocommit Django provides an API in the django.db.transaction module to manage the autocommit state of each database connection.  \nget_autocommit(using=None) \n  \nset_autocommit(autocommit, using=None) \n These functions take a using argument which should be the name of a database. If it isn\u2019t provided, Django uses the \"default\" database. Autocommit is initially turned on. If you turn it off, it\u2019s your responsibility to restore it. Once you turn autocommit off, you get the default behavior of your database adapter, and Django won\u2019t help you. Although that behavior is specified in PEP 249, implementations of adapters aren\u2019t always consistent with one another. Review the documentation of the adapter you\u2019re using carefully. You must ensure that no transaction is active, usually by issuing a commit() or a rollback(), before turning autocommit back on. Django will refuse to turn autocommit off when an atomic() block is active, because that would break atomicity. Transactions A transaction is an atomic set of database queries. Even if your program crashes, the database guarantees that either all the changes will be applied, or none of them. Django doesn\u2019t provide an API to start a transaction. The expected way to start a transaction is to disable autocommit with set_autocommit(). Once you\u2019re in a transaction, you can choose either to apply the changes you\u2019ve performed until this point with commit(), or to cancel them with rollback(). These functions are defined in django.db.transaction.  \ncommit(using=None) \n  \nrollback(using=None) \n These functions take a using argument which should be the name of a database. If it isn\u2019t provided, Django uses the \"default\" database. Django will refuse to commit or to rollback when an atomic() block is active, because that would break atomicity. Savepoints A savepoint is a marker within a transaction that enables you to roll back part of a transaction, rather than the full transaction. Savepoints are available with the SQLite, PostgreSQL, Oracle, and MySQL (when using the InnoDB storage engine) backends. Other backends provide the savepoint functions, but they\u2019re empty operations \u2013 they don\u2019t actually do anything. Savepoints aren\u2019t especially useful if you are using autocommit, the default behavior of Django. However, once you open a transaction with atomic(), you build up a series of database operations awaiting a commit or rollback. If you issue a rollback, the entire transaction is rolled back. Savepoints provide the ability to perform a fine-grained rollback, rather than the full rollback that would be performed by transaction.rollback(). When the atomic() decorator is nested, it creates a savepoint to allow partial commit or rollback. You\u2019re strongly encouraged to use atomic() rather than the functions described below, but they\u2019re still part of the public API, and there\u2019s no plan to deprecate them. Each of these functions takes a using argument which should be the name of a database for which the behavior applies. If no using argument is provided then the \"default\" database is used. Savepoints are controlled by three functions in django.db.transaction:  \nsavepoint(using=None)  \nCreates a new savepoint. This marks a point in the transaction that is known to be in a \u201cgood\u201d state. Returns the savepoint ID (sid). \n  \nsavepoint_commit(sid, using=None)  \nReleases savepoint sid. The changes performed since the savepoint was created become part of the transaction. \n  \nsavepoint_rollback(sid, using=None)  \nRolls back the transaction to savepoint sid. \n These functions do nothing if savepoints aren\u2019t supported or if the database is in autocommit mode. In addition, there\u2019s a utility function:  \nclean_savepoints(using=None)  \nResets the counter used to generate unique savepoint IDs. \n The following example demonstrates the use of savepoints: from django.db import transaction\n\n# open a transaction\n@transaction.atomic\ndef viewfunc(request):\n\n    a.save()\n    # transaction now contains a.save()\n\n    sid = transaction.savepoint()\n\n    b.save()\n    # transaction now contains a.save() and b.save()\n\n    if want_to_keep_b:\n        transaction.savepoint_commit(sid)\n        # open transaction still contains a.save() and b.save()\n    else:\n        transaction.savepoint_rollback(sid)\n        # open transaction now contains only a.save()\n Savepoints may be used to recover from a database error by performing a partial rollback. If you\u2019re doing this inside an atomic() block, the entire block will still be rolled back, because it doesn\u2019t know you\u2019ve handled the situation at a lower level! To prevent this, you can control the rollback behavior with the following functions.  \nget_rollback(using=None) \n  \nset_rollback(rollback, using=None) \n Setting the rollback flag to True forces a rollback when exiting the innermost atomic block. This may be useful to trigger a rollback without raising an exception. Setting it to False prevents such a rollback. Before doing that, make sure you\u2019ve rolled back the transaction to a known-good savepoint within the current atomic block! Otherwise you\u2019re breaking atomicity and data corruption may occur. Database-specific notes Savepoints in SQLite While SQLite supports savepoints, a flaw in the design of the sqlite3 module makes them hardly usable. When autocommit is enabled, savepoints don\u2019t make sense. When it\u2019s disabled, sqlite3 commits implicitly before savepoint statements. (In fact, it commits before any statement other than SELECT, INSERT, UPDATE, DELETE and REPLACE.) This bug has two consequences:  The low level APIs for savepoints are only usable inside a transaction ie. inside an atomic() block. It\u2019s impossible to use atomic() when autocommit is turned off.  Transactions in MySQL If you\u2019re using MySQL, your tables may or may not support transactions; it depends on your MySQL version and the table types you\u2019re using. (By \u201ctable types,\u201d we mean something like \u201cInnoDB\u201d or \u201cMyISAM\u201d.) MySQL transaction peculiarities are outside the scope of this article, but the MySQL site has information on MySQL transactions. If your MySQL setup does not support transactions, then Django will always function in autocommit mode: statements will be executed and committed as soon as they\u2019re called. If your MySQL setup does support transactions, Django will handle transactions as explained in this document. Handling exceptions within PostgreSQL transactions  Note This section is relevant only if you\u2019re implementing your own transaction management. This problem cannot occur in Django\u2019s default mode and atomic() handles it automatically.  Inside a transaction, when a call to a PostgreSQL cursor raises an exception (typically IntegrityError), all subsequent SQL in the same transaction will fail with the error \u201ccurrent transaction is aborted, queries ignored until end of transaction block\u201d. While the basic use of save() is unlikely to raise an exception in PostgreSQL, there are more advanced usage patterns which might, such as saving objects with unique fields, saving using the force_insert/force_update flag, or invoking custom SQL. There are several ways to recover from this sort of error. Transaction rollback The first option is to roll back the entire transaction. For example: a.save() # Succeeds, but may be undone by transaction rollback\ntry:\n    b.save() # Could throw exception\nexcept IntegrityError:\n    transaction.rollback()\nc.save() # Succeeds, but a.save() may have been undone\n Calling transaction.rollback() rolls back the entire transaction. Any uncommitted database operations will be lost. In this example, the changes made by a.save() would be lost, even though that operation raised no error itself. Savepoint rollback You can use savepoints to control the extent of a rollback. Before performing a database operation that could fail, you can set or update the savepoint; that way, if the operation fails, you can roll back the single offending operation, rather than the entire transaction. For example: a.save() # Succeeds, and never undone by savepoint rollback\nsid = transaction.savepoint()\ntry:\n    b.save() # Could throw exception\n    transaction.savepoint_commit(sid)\nexcept IntegrityError:\n    transaction.savepoint_rollback(sid)\nc.save() # Succeeds, and a.save() is never undone\n In this example, a.save() will not be undone in the case where b.save() raises an exception.\n"}, {"name": "Databases", "path": "ref/databases", "type": "API", "text": "Databases Django officially supports the following databases:  PostgreSQL MariaDB MySQL Oracle SQLite  There are also a number of database backends provided by third parties. Django attempts to support as many features as possible on all database backends. However, not all database backends are alike, and we\u2019ve had to make design decisions on which features to support and which assumptions we can make safely. This file describes some of the features that might be relevant to Django usage. It is not intended as a replacement for server-specific documentation or reference manuals. General notes Persistent connections Persistent connections avoid the overhead of re-establishing a connection to the database in each request. They\u2019re controlled by the CONN_MAX_AGE parameter which defines the maximum lifetime of a connection. It can be set independently for each database. The default value is 0, preserving the historical behavior of closing the database connection at the end of each request. To enable persistent connections, set CONN_MAX_AGE to a positive integer of seconds. For unlimited persistent connections, set it to None. Connection management Django opens a connection to the database when it first makes a database query. It keeps this connection open and reuses it in subsequent requests. Django closes the connection once it exceeds the maximum age defined by CONN_MAX_AGE or when it isn\u2019t usable any longer. In detail, Django automatically opens a connection to the database whenever it needs one and doesn\u2019t have one already \u2014 either because this is the first connection, or because the previous connection was closed. At the beginning of each request, Django closes the connection if it has reached its maximum age. If your database terminates idle connections after some time, you should set CONN_MAX_AGE to a lower value, so that Django doesn\u2019t attempt to use a connection that has been terminated by the database server. (This problem may only affect very low traffic sites.) At the end of each request, Django closes the connection if it has reached its maximum age or if it is in an unrecoverable error state. If any database errors have occurred while processing the requests, Django checks whether the connection still works, and closes it if it doesn\u2019t. Thus, database errors affect at most one request; if the connection becomes unusable, the next request gets a fresh connection. Caveats Since each thread maintains its own connection, your database must support at least as many simultaneous connections as you have worker threads. Sometimes a database won\u2019t be accessed by the majority of your views, for example because it\u2019s the database of an external system, or thanks to caching. In such cases, you should set CONN_MAX_AGE to a low value or even 0, because it doesn\u2019t make sense to maintain a connection that\u2019s unlikely to be reused. This will help keep the number of simultaneous connections to this database small. The development server creates a new thread for each request it handles, negating the effect of persistent connections. Don\u2019t enable them during development. When Django establishes a connection to the database, it sets up appropriate parameters, depending on the backend being used. If you enable persistent connections, this setup is no longer repeated every request. If you modify parameters such as the connection\u2019s isolation level or time zone, you should either restore Django\u2019s defaults at the end of each request, force an appropriate value at the beginning of each request, or disable persistent connections. Encoding Django assumes that all databases use UTF-8 encoding. Using other encodings may result in unexpected behavior such as \u201cvalue too long\u201d errors from your database for data that is valid in Django. See the database specific notes below for information on how to set up your database correctly. PostgreSQL notes Django supports PostgreSQL 10 and higher. psycopg2 2.5.4 or higher is required, though the latest release is recommended. PostgreSQL connection settings See HOST for details. To connect using a service name from the connection service file and a password from the password file, you must specify them in the OPTIONS part of your database configuration in DATABASES:  settings.py DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'OPTIONS': {\n            'service': 'my_service',\n            'passfile': '.my_pgpass',\n        },\n    }\n}\n   .pg_service.conf [my_service]\nhost=localhost\nuser=USER\ndbname=NAME\nport=5432\n   .my_pgpass localhost:5432:NAME:USER:PASSWORD\n   Changed in Django 4.0: Support for connecting by a service name, and specifying a password file was added.  Optimizing PostgreSQL\u2019s configuration Django needs the following parameters for its database connections:  \nclient_encoding: 'UTF8', \ndefault_transaction_isolation: 'read committed' by default, or the value set in the connection options (see below), \n \ntimezone:  \n when USE_TZ is True, 'UTC' by default, or the TIME_ZONE value set for the connection, when USE_TZ is False, the value of the global TIME_ZONE setting.      If these parameters already have the correct values, Django won\u2019t set them for every new connection, which improves performance slightly. You can configure them directly in postgresql.conf or more conveniently per database user with ALTER ROLE. Django will work just fine without this optimization, but each new connection will do some additional queries to set these parameters. Isolation level Like PostgreSQL itself, Django defaults to the READ COMMITTED isolation level. If you need a higher isolation level such as REPEATABLE READ or SERIALIZABLE, set it in the OPTIONS part of your database configuration in DATABASES: import psycopg2.extensions\n\nDATABASES = {\n    # ...\n    'OPTIONS': {\n        'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,\n    },\n}\n  Note Under higher isolation levels, your application should be prepared to handle exceptions raised on serialization failures. This option is designed for advanced uses.  Indexes for varchar and text columns When specifying db_index=True on your model fields, Django typically outputs a single CREATE INDEX statement. However, if the database type for the field is either varchar or text (e.g., used by CharField, FileField, and TextField), then Django will create an additional index that uses an appropriate PostgreSQL operator class for the column. The extra index is necessary to correctly perform lookups that use the LIKE operator in their SQL, as is done with the contains and startswith lookup types. Migration operation for adding extensions If you need to add a PostgreSQL extension (like hstore, postgis, etc.) using a migration, use the CreateExtension operation. Server-side cursors When using QuerySet.iterator(), Django opens a server-side cursor. By default, PostgreSQL assumes that only the first 10% of the results of cursor queries will be fetched. The query planner spends less time planning the query and starts returning results faster, but this could diminish performance if more than 10% of the results are retrieved. PostgreSQL\u2019s assumptions on the number of rows retrieved for a cursor query is controlled with the cursor_tuple_fraction option. Transaction pooling and server-side cursors Using a connection pooler in transaction pooling mode (e.g. PgBouncer) requires disabling server-side cursors for that connection. Server-side cursors are local to a connection and remain open at the end of a transaction when AUTOCOMMIT is True. A subsequent transaction may attempt to fetch more results from a server-side cursor. In transaction pooling mode, there\u2019s no guarantee that subsequent transactions will use the same connection. If a different connection is used, an error is raised when the transaction references the server-side cursor, because server-side cursors are only accessible in the connection in which they were created. One solution is to disable server-side cursors for a connection in DATABASES by setting DISABLE_SERVER_SIDE_CURSORS to True. To benefit from server-side cursors in transaction pooling mode, you could set up another connection to the database in order to perform queries that use server-side cursors. This connection needs to either be directly to the database or to a connection pooler in session pooling mode. Another option is to wrap each QuerySet using server-side cursors in an atomic() block, because it disables autocommit for the duration of the transaction. This way, the server-side cursor will only live for the duration of the transaction. Manually-specifying values of auto-incrementing primary keys Django uses PostgreSQL\u2019s SERIAL data type to store auto-incrementing primary keys. A SERIAL column is populated with values from a sequence that keeps track of the next available value. Manually assigning a value to an auto-incrementing field doesn\u2019t update the field\u2019s sequence, which might later cause a conflict. For example: >>> from django.contrib.auth.models import User\n>>> User.objects.create(username='alice', pk=1)\n<User: alice>\n>>> # The sequence hasn't been updated; its next value is 1.\n>>> User.objects.create(username='bob')\n...\nIntegrityError: duplicate key value violates unique constraint\n\"auth_user_pkey\" DETAIL:  Key (id)=(1) already exists.\n If you need to specify such values, reset the sequence afterward to avoid reusing a value that\u2019s already in the table. The sqlsequencereset management command generates the SQL statements to do that. Test database templates You can use the TEST['TEMPLATE'] setting to specify a template (e.g. 'template0') from which to create a test database. Speeding up test execution with non-durable settings You can speed up test execution times by configuring PostgreSQL to be non-durable.  Warning This is dangerous: it will make your database more susceptible to data loss or corruption in the case of a server crash or power loss. Only use this on a development machine where you can easily restore the entire contents of all databases in the cluster.  MariaDB notes Django supports MariaDB 10.2 and higher. To use MariaDB, use the MySQL backend, which is shared between the two. See the MySQL notes for more details. MySQL notes Version support Django supports MySQL 5.7 and higher. Django\u2019s inspectdb feature uses the information_schema database, which contains detailed data on all database schemas. Django expects the database to support Unicode (UTF-8 encoding) and delegates to it the task of enforcing transactions and referential integrity. It is important to be aware of the fact that the two latter ones aren\u2019t actually enforced by MySQL when using the MyISAM storage engine, see the next section. Storage engines MySQL has several storage engines. You can change the default storage engine in the server configuration. MySQL\u2019s default storage engine is InnoDB. This engine is fully transactional and supports foreign key references. It\u2019s the recommended choice. However, the InnoDB autoincrement counter is lost on a MySQL restart because it does not remember the AUTO_INCREMENT value, instead recreating it as \u201cmax(id)+1\u201d. This may result in an inadvertent reuse of AutoField values. The main drawbacks of MyISAM are that it doesn\u2019t support transactions or enforce foreign-key constraints. MySQL DB API Drivers MySQL has a couple drivers that implement the Python Database API described in PEP 249:  \nmysqlclient is a native driver. It\u2019s the recommended choice. \nMySQL Connector/Python is a pure Python driver from Oracle that does not require the MySQL client library or any Python modules outside the standard library.  These drivers are thread-safe and provide connection pooling. In addition to a DB API driver, Django needs an adapter to access the database drivers from its ORM. Django provides an adapter for mysqlclient while MySQL Connector/Python includes its own. mysqlclient Django requires mysqlclient 1.4.0 or later. MySQL Connector/Python MySQL Connector/Python is available from the download page. The Django adapter is available in versions 1.1.X and later. It may not support the most recent releases of Django. Time zone definitions If you plan on using Django\u2019s timezone support, use mysql_tzinfo_to_sql to load time zone tables into the MySQL database. This needs to be done just once for your MySQL server, not per database. Creating your database You can create your database using the command-line tools and this SQL: CREATE DATABASE <dbname> CHARACTER SET utf8;\n This ensures all tables and columns will use UTF-8 by default. Collation settings The collation setting for a column controls the order in which data is sorted as well as what strings compare as equal. You can specify the db_collation parameter to set the collation name of the column for CharField and TextField. The collation can also be set on a database-wide level and per-table. This is documented thoroughly in the MySQL documentation. In such cases, you must set the collation by directly manipulating the database settings or tables. Django doesn\u2019t provide an API to change them. By default, with a UTF-8 database, MySQL will use the utf8_general_ci collation. This results in all string equality comparisons being done in a case-insensitive manner. That is, \"Fred\" and \"freD\" are considered equal at the database level. If you have a unique constraint on a field, it would be illegal to try to insert both \"aa\" and \"AA\" into the same column, since they compare as equal (and, hence, non-unique) with the default collation. If you want case-sensitive comparisons on a particular column or table, change the column or table to use the utf8_bin collation. Please note that according to MySQL Unicode Character Sets, comparisons for the utf8_general_ci collation are faster, but slightly less correct, than comparisons for utf8_unicode_ci. If this is acceptable for your application, you should use utf8_general_ci because it is faster. If this is not acceptable (for example, if you require German dictionary order), use utf8_unicode_ci because it is more accurate.  Warning Model formsets validate unique fields in a case-sensitive manner. Thus when using a case-insensitive collation, a formset with unique field values that differ only by case will pass validation, but upon calling save(), an IntegrityError will be raised.   Changed in Django 3.2: Support for setting a database collation for the field was added.  Connecting to the database Refer to the settings documentation. Connection settings are used in this order:  \nOPTIONS. \nNAME, USER, PASSWORD, HOST, PORT\n MySQL option files.  In other words, if you set the name of the database in OPTIONS, this will take precedence over NAME, which would override anything in a MySQL option file. Here\u2019s a sample configuration which uses a MySQL option file: # settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'OPTIONS': {\n            'read_default_file': '/path/to/my.cnf',\n        },\n    }\n}\n\n\n# my.cnf\n[client]\ndatabase = NAME\nuser = USER\npassword = PASSWORD\ndefault-character-set = utf8\n Several other MySQLdb connection options may be useful, such as ssl, init_command, and sql_mode. Setting sql_mode\n From MySQL 5.7 onward, the default value of the sql_mode option contains STRICT_TRANS_TABLES. That option escalates warnings into errors when data are truncated upon insertion, so Django highly recommends activating a strict mode for MySQL to prevent data loss (either STRICT_TRANS_TABLES or STRICT_ALL_TABLES). If you need to customize the SQL mode, you can set the sql_mode variable like other MySQL options: either in a config file or with the entry 'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\" in the OPTIONS part of your database configuration in DATABASES. Isolation level When running concurrent loads, database transactions from different sessions (say, separate threads handling different requests) may interact with each other. These interactions are affected by each session\u2019s transaction isolation level. You can set a connection\u2019s isolation level with an 'isolation_level' entry in the OPTIONS part of your database configuration in DATABASES. Valid values for this entry are the four standard isolation levels:  'read uncommitted' 'read committed' 'repeatable read' 'serializable'  or None to use the server\u2019s configured isolation level. However, Django works best with and defaults to read committed rather than MySQL\u2019s default, repeatable read. Data loss is possible with repeatable read. In particular, you may see cases where get_or_create() will raise an IntegrityError but the object won\u2019t appear in a subsequent get() call. Creating your tables When Django generates the schema, it doesn\u2019t specify a storage engine, so tables will be created with whatever default storage engine your database server is configured for. The easiest solution is to set your database server\u2019s default storage engine to the desired engine. If you\u2019re using a hosting service and can\u2019t change your server\u2019s default storage engine, you have a couple of options.  \nAfter the tables are created, execute an ALTER TABLE statement to convert a table to a new storage engine (such as InnoDB): ALTER TABLE <tablename> ENGINE=INNODB;\n This can be tedious if you have a lot of tables.  \nAnother option is to use the init_command option for MySQLdb prior to creating your tables: 'OPTIONS': {\n   'init_command': 'SET default_storage_engine=INNODB',\n}\n This sets the default storage engine upon connecting to the database. After your tables have been created, you should remove this option as it adds a query that is only needed during table creation to each database connection.   Table names There are known issues in even the latest versions of MySQL that can cause the case of a table name to be altered when certain SQL statements are executed under certain conditions. It is recommended that you use lowercase table names, if possible, to avoid any problems that might arise from this behavior. Django uses lowercase table names when it auto-generates table names from models, so this is mainly a consideration if you are overriding the table name via the db_table parameter. Savepoints Both the Django ORM and MySQL (when using the InnoDB storage engine) support database savepoints. If you use the MyISAM storage engine please be aware of the fact that you will receive database-generated errors if you try to use the savepoint-related methods of the transactions API. The reason for this is that detecting the storage engine of a MySQL database/table is an expensive operation so it was decided it isn\u2019t worth to dynamically convert these methods in no-op\u2019s based in the results of such detection. Notes on specific fields Character fields Any fields that are stored with VARCHAR column types may have their max_length restricted to 255 characters if you are using unique=True for the field. This affects CharField, SlugField. See the MySQL documentation for more details. \nTextField limitations MySQL can index only the first N chars of a BLOB or TEXT column. Since TextField doesn\u2019t have a defined length, you can\u2019t mark it as unique=True. MySQL will report: \u201cBLOB/TEXT column \u2018<db_column>\u2019 used in key specification without a key length\u201d. Fractional seconds support for Time and DateTime fields MySQL can store fractional seconds, provided that the column definition includes a fractional indication (e.g. DATETIME(6)). Django will not upgrade existing columns to include fractional seconds if the database server supports it. If you want to enable them on an existing database, it\u2019s up to you to either manually update the column on the target database, by executing a command like: ALTER TABLE `your_table` MODIFY `your_datetime_column` DATETIME(6)\n or using a RunSQL operation in a data migration. \nTIMESTAMP columns If you are using a legacy database that contains TIMESTAMP columns, you must set USE_TZ = False to avoid data corruption. inspectdb maps these columns to DateTimeField and if you enable timezone support, both MySQL and Django will attempt to convert the values from UTC to local time. Row locking with QuerySet.select_for_update()\n MySQL and MariaDB do not support some options to the SELECT ... FOR UPDATE statement. If select_for_update() is used with an unsupported option, then a NotSupportedError is raised.   \nOption MariaDB MySQL   \nSKIP LOCKED X (\u226510.6) X (\u22658.0.1)  \nNOWAIT X (\u226510.3) X (\u22658.0.1)  \nOF   X (\u22658.0.1)  \nNO KEY       When using select_for_update() on MySQL, make sure you filter a queryset against at least a set of fields contained in unique constraints or only against fields covered by indexes. Otherwise, an exclusive write lock will be acquired over the full table for the duration of the transaction. Automatic typecasting can cause unexpected results When performing a query on a string type, but with an integer value, MySQL will coerce the types of all values in the table to an integer before performing the comparison. If your table contains the values 'abc', 'def' and you query for WHERE mycolumn=0, both rows will match. Similarly, WHERE mycolumn=1 will match the value 'abc1'. Therefore, string type fields included in Django will always cast the value to a string before using it in a query. If you implement custom model fields that inherit from Field directly, are overriding get_prep_value(), or use RawSQL, extra(), or raw(), you should ensure that you perform appropriate typecasting. SQLite notes Django supports SQLite 3.9.0 and later. SQLite provides an excellent development alternative for applications that are predominantly read-only or require a smaller installation footprint. As with all database servers, though, there are some differences that are specific to SQLite that you should be aware of. Substring matching and case sensitivity For all SQLite versions, there is some slightly counter-intuitive behavior when attempting to match some types of strings. These are triggered when using the iexact or contains filters in Querysets. The behavior splits into two cases: 1. For substring matching, all matches are done case-insensitively. That is a filter such as filter(name__contains=\"aa\") will match a name of \"Aabb\". 2. For strings containing characters outside the ASCII range, all exact string matches are performed case-sensitively, even when the case-insensitive options are passed into the query. So the iexact filter will behave exactly the same as the exact filter in these cases. Some possible workarounds for this are documented at sqlite.org, but they aren\u2019t utilized by the default SQLite backend in Django, as incorporating them would be fairly difficult to do robustly. Thus, Django exposes the default SQLite behavior and you should be aware of this when doing case-insensitive or substring filtering. Decimal handling SQLite has no real decimal internal type. Decimal values are internally converted to the REAL data type (8-byte IEEE floating point number), as explained in the SQLite datatypes documentation, so they don\u2019t support correctly-rounded decimal floating point arithmetic. \u201cDatabase is locked\u201d errors SQLite is meant to be a lightweight database, and thus can\u2019t support a high level of concurrency. OperationalError: database is locked errors indicate that your application is experiencing more concurrency than sqlite can handle in default configuration. This error means that one thread or process has an exclusive lock on the database connection and another thread timed out waiting for the lock the be released. Python\u2019s SQLite wrapper has a default timeout value that determines how long the second thread is allowed to wait on the lock before it times out and raises the OperationalError: database\nis locked error. If you\u2019re getting this error, you can solve it by:  Switching to another database backend. At a certain point SQLite becomes too \u201clite\u201d for real-world applications, and these sorts of concurrency errors indicate you\u2019ve reached that point.  Rewriting your code to reduce concurrency and ensure that database transactions are short-lived.  \nIncrease the default timeout value by setting the timeout database option: 'OPTIONS': {\n    # ...\n    'timeout': 20,\n    # ...\n}\n This will make SQLite wait a bit longer before throwing \u201cdatabase is locked\u201d errors; it won\u2019t really do anything to solve them.   \nQuerySet.select_for_update() not supported SQLite does not support the SELECT ... FOR UPDATE syntax. Calling it will have no effect. \u201cpyformat\u201d parameter style in raw queries not supported For most backends, raw queries (Manager.raw() or cursor.execute()) can use the \u201cpyformat\u201d parameter style, where placeholders in the query are given as '%(name)s' and the parameters are passed as a dictionary rather than a list. SQLite does not support this. Isolation when using QuerySet.iterator()\n There are special considerations described in Isolation In SQLite when modifying a table while iterating over it using QuerySet.iterator(). If a row is added, changed, or deleted within the loop, then that row may or may not appear, or may appear twice, in subsequent results fetched from the iterator. Your code must handle this. Enabling JSON1 extension on SQLite To use JSONField on SQLite, you need to enable the JSON1 extension on Python\u2019s sqlite3 library. If the extension is not enabled on your installation, a system error (fields.E180) will be raised. To enable the JSON1 extension you can follow the instruction on the wiki page. Oracle notes Django supports Oracle Database Server versions 19c and higher. Version 7.0 or higher of the cx_Oracle Python driver is required. In order for the python manage.py migrate command to work, your Oracle database user must have privileges to run the following commands:  CREATE TABLE CREATE SEQUENCE CREATE PROCEDURE CREATE TRIGGER  To run a project\u2019s test suite, the user usually needs these additional privileges:  CREATE USER ALTER USER DROP USER CREATE TABLESPACE DROP TABLESPACE CREATE SESSION WITH ADMIN OPTION CREATE TABLE WITH ADMIN OPTION CREATE SEQUENCE WITH ADMIN OPTION CREATE PROCEDURE WITH ADMIN OPTION CREATE TRIGGER WITH ADMIN OPTION  While the RESOURCE role has the required CREATE TABLE, CREATE SEQUENCE, CREATE PROCEDURE, and CREATE TRIGGER privileges, and a user granted RESOURCE WITH ADMIN OPTION can grant RESOURCE, such a user cannot grant the individual privileges (e.g. CREATE TABLE), and thus RESOURCE WITH ADMIN OPTION is not usually sufficient for running tests. Some test suites also create views or materialized views; to run these, the user also needs CREATE VIEW WITH ADMIN OPTION and CREATE MATERIALIZED VIEW WITH ADMIN OPTION privileges. In particular, this is needed for Django\u2019s own test suite. All of these privileges are included in the DBA role, which is appropriate for use on a private developer\u2019s database. The Oracle database backend uses the SYS.DBMS_LOB and SYS.DBMS_RANDOM packages, so your user will require execute permissions on it. It\u2019s normally accessible to all users by default, but in case it is not, you\u2019ll need to grant permissions like so: GRANT EXECUTE ON SYS.DBMS_LOB TO user;\nGRANT EXECUTE ON SYS.DBMS_RANDOM TO user;\n Connecting to the database To connect using the service name of your Oracle database, your settings.py file should look something like this: DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.oracle',\n        'NAME': 'xe',\n        'USER': 'a_user',\n        'PASSWORD': 'a_password',\n        'HOST': '',\n        'PORT': '',\n    }\n}\n In this case, you should leave both HOST and PORT empty. However, if you don\u2019t use a tnsnames.ora file or a similar naming method and want to connect using the SID (\u201cxe\u201d in this example), then fill in both HOST and PORT like so: DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.oracle',\n        'NAME': 'xe',\n        'USER': 'a_user',\n        'PASSWORD': 'a_password',\n        'HOST': 'dbprod01ned.mycompany.com',\n        'PORT': '1540',\n    }\n}\n You should either supply both HOST and PORT, or leave both as empty strings. Django will use a different connect descriptor depending on that choice. Full DSN and Easy Connect A Full DSN or Easy Connect string can be used in NAME if both HOST and PORT are empty. This format is required when using RAC or pluggable databases without tnsnames.ora, for example. Example of an Easy Connect string: 'NAME': 'localhost:1521/orclpdb1',\n Example of a full DSN string: 'NAME': (\n    '(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521))'\n    '(CONNECT_DATA=(SERVICE_NAME=orclpdb1)))'\n),\n Threaded option If you plan to run Django in a multithreaded environment (e.g. Apache using the default MPM module on any modern operating system), then you must set the threaded option of your Oracle database configuration to True: 'OPTIONS': {\n    'threaded': True,\n},\n Failure to do this may result in crashes and other odd behavior. INSERT \u2026 RETURNING INTO By default, the Oracle backend uses a RETURNING INTO clause to efficiently retrieve the value of an AutoField when inserting new rows. This behavior may result in a DatabaseError in certain unusual setups, such as when inserting into a remote table, or into a view with an INSTEAD OF trigger. The RETURNING INTO clause can be disabled by setting the use_returning_into option of the database configuration to False: 'OPTIONS': {\n    'use_returning_into': False,\n},\n In this case, the Oracle backend will use a separate SELECT query to retrieve AutoField values. Naming issues Oracle imposes a name length limit of 30 characters. To accommodate this, the backend truncates database identifiers to fit, replacing the final four characters of the truncated name with a repeatable MD5 hash value. Additionally, the backend turns database identifiers to all-uppercase. To prevent these transformations (this is usually required only when dealing with legacy databases or accessing tables which belong to other users), use a quoted name as the value for db_table: class LegacyModel(models.Model):\n    class Meta:\n        db_table = '\"name_left_in_lowercase\"'\n\nclass ForeignModel(models.Model):\n    class Meta:\n        db_table = '\"OTHER_USER\".\"NAME_ONLY_SEEMS_OVER_30\"'\n Quoted names can also be used with Django\u2019s other supported database backends; except for Oracle, however, the quotes have no effect. When running migrate, an ORA-06552 error may be encountered if certain Oracle keywords are used as the name of a model field or the value of a db_column option. Django quotes all identifiers used in queries to prevent most such problems, but this error can still occur when an Oracle datatype is used as a column name. In particular, take care to avoid using the names date, timestamp, number or float as a field name. NULL and empty strings Django generally prefers to use the empty string ('') rather than NULL, but Oracle treats both identically. To get around this, the Oracle backend ignores an explicit null option on fields that have the empty string as a possible value and generates DDL as if null=True. When fetching from the database, it is assumed that a NULL value in one of these fields really means the empty string, and the data is silently converted to reflect this assumption. \nTextField limitations The Oracle backend stores TextFields as NCLOB columns. Oracle imposes some limitations on the usage of such LOB columns in general:  LOB columns may not be used as primary keys. LOB columns may not be used in indexes. LOB columns may not be used in a SELECT DISTINCT list. This means that attempting to use the QuerySet.distinct method on a model that includes TextField columns will result in an ORA-00932 error when run against Oracle. As a workaround, use the QuerySet.defer method in conjunction with distinct() to prevent TextField columns from being included in the SELECT DISTINCT list.  Subclassing the built-in database backends Django comes with built-in database backends. You may subclass an existing database backends to modify its behavior, features, or configuration. Consider, for example, that you need to change a single database feature. First, you have to create a new directory with a base module in it. For example: mysite/\n    ...\n    mydbengine/\n        __init__.py\n        base.py\n The base.py module must contain a class named DatabaseWrapper that subclasses an existing engine from the django.db.backends module. Here\u2019s an example of subclassing the PostgreSQL engine to change a feature class allows_group_by_selected_pks_on_model:  mysite/mydbengine/base.py from django.db.backends.postgresql import base, features\n\nclass DatabaseFeatures(features.DatabaseFeatures):\n    def allows_group_by_selected_pks_on_model(self, model):\n        return True\n\nclass DatabaseWrapper(base.DatabaseWrapper):\n    features_class = DatabaseFeatures\n  Finally, you must specify a DATABASE-ENGINE in your settings.py file: DATABASES = {\n    'default': {\n        'ENGINE': 'mydbengine',\n        ...\n    },\n}\n You can see the current list of database engines by looking in django/db/backends. Using a 3rd-party database backend In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:  CockroachDB Firebird Google Cloud Spanner Microsoft SQL Server  The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project.\n"}, {"name": "Date-based mixins", "path": "ref/class-based-views/mixins-date-based", "type": "API", "text": "Date-based mixins  Note All the date formatting attributes in these mixins use strftime() format characters. Do not try to use the format characters from the now template tag as they are not compatible.  YearMixin  \nclass YearMixin  \nA mixin that can be used to retrieve and provide parsing information for a year component of a date. Methods and Attributes  \nyear_format  \nThe strftime() format to use when parsing the year. By default, this is '%Y'. \n  \nyear  \nOptional The value for the year, as a string. By default, set to None, which means the year will be determined using other means. \n  \nget_year_format()  \nReturns the strftime() format to use when parsing the year. Returns year_format by default. \n  \nget_year()  \nReturns the year for which this view will display data, as a string. Tries the following sources, in order:  The value of the YearMixin.year attribute. The value of the year argument captured in the URL pattern. The value of the year GET query argument.  Raises a 404 if no valid year specification can be found. \n  \nget_next_year(date)  \nReturns a date object containing the first day of the year after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future. \n  \nget_previous_year(date)  \nReturns a date object containing the first day of the year before the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future. \n \n MonthMixin  \nclass MonthMixin  \nA mixin that can be used to retrieve and provide parsing information for a month component of a date. Methods and Attributes  \nmonth_format  \nThe strftime() format to use when parsing the month. By default, this is '%b'. \n  \nmonth  \nOptional The value for the month, as a string. By default, set to None, which means the month will be determined using other means. \n  \nget_month_format()  \nReturns the strftime() format to use when parsing the month. Returns month_format by default. \n  \nget_month()  \nReturns the month for which this view will display data, as a string. Tries the following sources, in order:  The value of the MonthMixin.month attribute. The value of the month argument captured in the URL pattern. The value of the month GET query argument.  Raises a 404 if no valid month specification can be found. \n  \nget_next_month(date)  \nReturns a date object containing the first day of the month after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future. \n  \nget_previous_month(date)  \nReturns a date object containing the first day of the month before the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future. \n \n DayMixin  \nclass DayMixin  \nA mixin that can be used to retrieve and provide parsing information for a day component of a date. Methods and Attributes  \nday_format  \nThe strftime() format to use when parsing the day. By default, this is '%d'. \n  \nday  \nOptional The value for the day, as a string. By default, set to None, which means the day will be determined using other means. \n  \nget_day_format()  \nReturns the strftime() format to use when parsing the day. Returns day_format by default. \n  \nget_day()  \nReturns the day for which this view will display data, as a string. Tries the following sources, in order:  The value of the DayMixin.day attribute. The value of the day argument captured in the URL pattern. The value of the day GET query argument.  Raises a 404 if no valid day specification can be found. \n  \nget_next_day(date)  \nReturns a date object containing the next valid day after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future. \n  \nget_previous_day(date)  \nReturns a date object containing the previous valid day. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future. \n \n WeekMixin  \nclass WeekMixin  \nA mixin that can be used to retrieve and provide parsing information for a week component of a date. Methods and Attributes  \nweek_format  \nThe strftime() format to use when parsing the week. By default, this is '%U', which means the week starts on Sunday. Set it to '%W' or '%V' (ISO 8601 week) if your week starts on Monday.  New in Django 3.2: Support for the '%V' week format was added.  \n  \nweek  \nOptional The value for the week, as a string. By default, set to None, which means the week will be determined using other means. \n  \nget_week_format()  \nReturns the strftime() format to use when parsing the week. Returns week_format by default. \n  \nget_week()  \nReturns the week for which this view will display data, as a string. Tries the following sources, in order:  The value of the WeekMixin.week attribute. The value of the week argument captured in the URL pattern The value of the week GET query argument.  Raises a 404 if no valid week specification can be found. \n  \nget_next_week(date)  \nReturns a date object containing the first day of the week after the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future. \n  \nget_prev_week(date)  \nReturns a date object containing the first day of the week before the date provided. This function can also return None or raise an Http404 exception, depending on the values of allow_empty and allow_future. \n \n DateMixin  \nclass DateMixin  \nA mixin class providing common behavior for all date-based views. Methods and Attributes  \ndate_field  \nThe name of the DateField or DateTimeField in the QuerySet\u2019s model that the date-based archive should use to determine the list of objects to display on the page. When time zone support is enabled and date_field is a DateTimeField, dates are assumed to be in the current time zone. Otherwise, the queryset could include objects from the previous or the next day in the end user\u2019s time zone.  Warning In this situation, if you have implemented per-user time zone selection, the same URL may show a different set of objects, depending on the end user\u2019s time zone. To avoid this, you should use a DateField as the date_field attribute.  \n  \nallow_future  \nA boolean specifying whether to include \u201cfuture\u201d objects on this page, where \u201cfuture\u201d means objects in which the field specified in date_field is greater than the current date/time. By default, this is False. \n  \nget_date_field()  \nReturns the name of the field that contains the date data that this view will operate on. Returns date_field by default. \n  \nget_allow_future()  \nDetermine whether to include \u201cfuture\u201d objects on this page, where \u201cfuture\u201d means objects in which the field specified in date_field is greater than the current date/time. Returns allow_future by default. \n \n BaseDateListView  \nclass BaseDateListView  \nA base class that provides common behavior for all date-based views. There won\u2019t normally be a reason to instantiate BaseDateListView; instantiate one of the subclasses instead. While this view (and its subclasses) are executing, self.object_list will contain the list of objects that the view is operating upon, and self.date_list will contain the list of dates for which data is available. Mixins  DateMixin MultipleObjectMixin  Methods and Attributes  \nallow_empty  \nA boolean specifying whether to display the page if no objects are available. If this is True and no objects are available, the view will display an empty page instead of raising a 404. This is identical to django.views.generic.list.MultipleObjectMixin.allow_empty, except for the default value, which is False. \n  \ndate_list_period  \nOptional A string defining the aggregation period for date_list. It must be one of 'year' (default), 'month', or 'day'. \n  \nget_dated_items()  \nReturns a 3-tuple containing (date_list, object_list, extra_context). date_list is the list of dates for which data is available. object_list is the list of objects. extra_context is a dictionary of context data that will be added to any context data provided by the MultipleObjectMixin. \n  \nget_dated_queryset(**lookup)  \nReturns a queryset, filtered using the query arguments defined by lookup. Enforces any restrictions on the queryset, such as allow_empty and allow_future. \n  \nget_date_list_period()  \nReturns the aggregation period for date_list. Returns date_list_period by default. \n  \nget_date_list(queryset, date_type=None, ordering='ASC')  \nReturns the list of dates of type date_type for which queryset contains entries. For example, get_date_list(qs, 'year') will return the list of years for which qs has entries. If date_type isn\u2019t provided, the result of get_date_list_period() is used. date_type and ordering are passed to QuerySet.dates(). \n \n\n"}, {"name": "db.backends.base.DatabaseWrapper.execute_wrapper()", "path": "topics/db/instrumentation#django.db.backends.base.DatabaseWrapper.execute_wrapper", "type": "django.db.backends", "text": " \nexecute_wrapper(wrapper) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor", "type": "django.db.backends", "text": " \nclass BaseDatabaseSchemaEditor \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.add_constraint()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_constraint", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.add_constraint(model, constraint) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.add_field()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_field", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.add_field(model, field) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.add_index()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_index", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.add_index(model, index) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_table()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_table", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.alter_db_table(model, old_db_table, new_db_table) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_tablespace()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_tablespace", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.alter_db_tablespace(model, old_db_tablespace, new_db_tablespace) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_field()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_field", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.alter_field(model, old_field, new_field, strict=False) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_index_together()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_index_together", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.alter_index_together(model, old_index_together, new_index_together) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_unique_together()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_unique_together", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.alter_unique_together(model, old_unique_together, new_unique_together) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.create_model()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.create_model", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.create_model(model) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.delete_model()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.delete_model", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.delete_model(model) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.execute()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.execute", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.execute(sql, params=()) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.remove_constraint()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_constraint", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.remove_constraint(model, constraint) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.remove_field(model, field) \n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.remove_index()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_index", "type": "django.db.backends", "text": " \nBaseDatabaseSchemaEditor.remove_index(model, index) \n"}, {"name": "db.backends.base.schema.SchemaEditor.connection", "path": "ref/schema-editor#django.db.backends.base.schema.SchemaEditor.connection", "type": "django.db.backends", "text": " \nSchemaEditor.connection \n"}, {"name": "db.backends.signals.connection_created", "path": "ref/signals#django.db.backends.signals.connection_created", "type": "django.db.backends", "text": " \ndjango.db.backends.signals.connection_created \n"}, {"name": "db.connection.creation.create_test_db()", "path": "topics/testing/advanced#django.db.connection.creation.create_test_db", "type": "django.db.connection", "text": " \ncreate_test_db(verbosity=1, autoclobber=False, serialize=True, keepdb=False)  \nCreates a new test database and runs migrate against it. verbosity has the same behavior as in run_tests(). autoclobber describes the behavior that will occur if a database with the same name as the test database is discovered:  If autoclobber is False, the user will be asked to approve destroying the existing database. sys.exit is called if the user does not approve. If autoclobber is True, the database will be destroyed without consulting the user.  serialize determines if Django serializes the database into an in-memory JSON string before running tests (used to restore the database state between tests if you don\u2019t have transactions). You can set this to False to speed up creation time if you don\u2019t have any test classes with serialized_rollback=True. If you are using the default test runner, you can control this with the the SERIALIZE entry in the TEST dictionary. keepdb determines if the test run should use an existing database, or create a new one. If True, the existing database will be used, or created if not present. If False, a new database will be created, prompting the user to remove the existing one, if present. Returns the name of the test database that it created. create_test_db() has the side effect of modifying the value of NAME in DATABASES to match the name of the test database. \n"}, {"name": "db.connection.creation.destroy_test_db()", "path": "topics/testing/advanced#django.db.connection.creation.destroy_test_db", "type": "django.db.connection", "text": " \ndestroy_test_db(old_database_name, verbosity=1, keepdb=False)  \nDestroys the database whose name is the value of NAME in DATABASES, and sets NAME to the value of old_database_name. The verbosity argument has the same behavior as for DiscoverRunner. If the keepdb argument is True, then the connection to the database will be closed, but the database will not be destroyed. \n"}, {"name": "db.migrations.Migration.initial", "path": "topics/migrations#django.db.migrations.Migration.initial", "type": "django.db.migrations", "text": " \nMigration.initial \n"}, {"name": "db.migrations.operations.AddConstraint", "path": "ref/migration-operations#django.db.migrations.operations.AddConstraint", "type": "django.db.migrations", "text": " \nclass AddConstraint(model_name, constraint) \n"}, {"name": "db.migrations.operations.AddField", "path": "ref/migration-operations#django.db.migrations.operations.AddField", "type": "django.db.migrations", "text": " \nclass AddField(model_name, name, field, preserve_default=True) \n"}, {"name": "db.migrations.operations.AddIndex", "path": "ref/migration-operations#django.db.migrations.operations.AddIndex", "type": "django.db.migrations", "text": " \nclass AddIndex(model_name, index) \n"}, {"name": "db.migrations.operations.AlterField", "path": "ref/migration-operations#django.db.migrations.operations.AlterField", "type": "django.db.migrations", "text": " \nclass AlterField(model_name, name, field, preserve_default=True) \n"}, {"name": "db.migrations.operations.AlterIndexTogether", "path": "ref/migration-operations#django.db.migrations.operations.AlterIndexTogether", "type": "django.db.migrations", "text": " \nclass AlterIndexTogether(name, index_together) \n"}, {"name": "db.migrations.operations.AlterModelManagers", "path": "ref/migration-operations#django.db.migrations.operations.AlterModelManagers", "type": "django.db.migrations", "text": " \nclass AlterModelManagers(name, managers) \n"}, {"name": "db.migrations.operations.AlterModelOptions", "path": "ref/migration-operations#django.db.migrations.operations.AlterModelOptions", "type": "django.db.migrations", "text": " \nclass AlterModelOptions(name, options) \n"}, {"name": "db.migrations.operations.AlterModelTable", "path": "ref/migration-operations#django.db.migrations.operations.AlterModelTable", "type": "django.db.migrations", "text": " \nclass AlterModelTable(name, table) \n"}, {"name": "db.migrations.operations.AlterOrderWithRespectTo", "path": "ref/migration-operations#django.db.migrations.operations.AlterOrderWithRespectTo", "type": "django.db.migrations", "text": " \nclass AlterOrderWithRespectTo(name, order_with_respect_to) \n"}, {"name": "db.migrations.operations.AlterUniqueTogether", "path": "ref/migration-operations#django.db.migrations.operations.AlterUniqueTogether", "type": "django.db.migrations", "text": " \nclass AlterUniqueTogether(name, unique_together) \n"}, {"name": "db.migrations.operations.CreateModel", "path": "ref/migration-operations#django.db.migrations.operations.CreateModel", "type": "django.db.migrations", "text": " \nclass CreateModel(name, fields, options=None, bases=None, managers=None) \n"}, {"name": "db.migrations.operations.DeleteModel", "path": "ref/migration-operations#django.db.migrations.operations.DeleteModel", "type": "django.db.migrations", "text": " \nclass DeleteModel(name) \n"}, {"name": "db.migrations.operations.RemoveConstraint", "path": "ref/migration-operations#django.db.migrations.operations.RemoveConstraint", "type": "django.db.migrations", "text": " \nclass RemoveConstraint(model_name, name) \n"}, {"name": "db.migrations.operations.RemoveField", "path": "ref/migration-operations#django.db.migrations.operations.RemoveField", "type": "django.db.migrations", "text": " \nclass RemoveField(model_name, name) \n"}, {"name": "db.migrations.operations.RemoveIndex", "path": "ref/migration-operations#django.db.migrations.operations.RemoveIndex", "type": "django.db.migrations", "text": " \nclass RemoveIndex(model_name, name) \n"}, {"name": "db.migrations.operations.RenameField", "path": "ref/migration-operations#django.db.migrations.operations.RenameField", "type": "django.db.migrations", "text": " \nclass RenameField(model_name, old_name, new_name) \n"}, {"name": "db.migrations.operations.RenameModel", "path": "ref/migration-operations#django.db.migrations.operations.RenameModel", "type": "django.db.migrations", "text": " \nclass RenameModel(old_name, new_name) \n"}, {"name": "db.migrations.operations.RunPython", "path": "ref/migration-operations#django.db.migrations.operations.RunPython", "type": "django.db.migrations", "text": " \nclass RunPython(code, reverse_code=None, atomic=None, hints=None, elidable=False) \n"}, {"name": "db.migrations.operations.RunSQL", "path": "ref/migration-operations#django.db.migrations.operations.RunSQL", "type": "django.db.migrations", "text": " \nclass RunSQL(sql, reverse_sql=None, state_operations=None, hints=None, elidable=False) \n"}, {"name": "db.migrations.operations.RunSQL.noop", "path": "ref/migration-operations#django.db.migrations.operations.RunSQL.noop", "type": "django.db.migrations", "text": " \nRunSQL.noop  \nPass the RunSQL.noop attribute to sql or reverse_sql when you want the operation not to do anything in the given direction. This is especially useful in making the operation reversible. \n"}, {"name": "db.migrations.operations.SeparateDatabaseAndState", "path": "ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState", "type": "django.db.migrations", "text": " \nclass SeparateDatabaseAndState(database_operations=None, state_operations=None) \n"}, {"name": "db.models.Aggregate", "path": "ref/models/expressions#django.db.models.Aggregate", "type": "django.db.models", "text": " \nclass Aggregate(*expressions, output_field=None, distinct=False, filter=None, default=None, **extra)  \n \ntemplate  \nA class attribute, as a format string, that describes the SQL that is generated for this aggregate. Defaults to '%(function)s(%(distinct)s%(expressions)s)'. \n  \nfunction  \nA class attribute describing the aggregate function that will be generated. Specifically, the function will be interpolated as the function placeholder within template. Defaults to None. \n  \nwindow_compatible  \nDefaults to True since most aggregate functions can be used as the source expression in Window. \n  \nallow_distinct  \nA class attribute determining whether or not this aggregate function allows passing a distinct keyword argument. If set to False (default), TypeError is raised if distinct=True is passed. \n  \nempty_result_set_value  \n New in Django 4.0.  Override empty_result_set_value to None since most aggregate functions result in NULL when applied to an empty result set. \n \n"}, {"name": "db.models.Aggregate.allow_distinct", "path": "ref/models/expressions#django.db.models.Aggregate.allow_distinct", "type": "django.db.models", "text": " \nallow_distinct  \nA class attribute determining whether or not this aggregate function allows passing a distinct keyword argument. If set to False (default), TypeError is raised if distinct=True is passed. \n"}, {"name": "db.models.Aggregate.empty_result_set_value", "path": "ref/models/expressions#django.db.models.Aggregate.empty_result_set_value", "type": "django.db.models", "text": " \nempty_result_set_value  \n New in Django 4.0.  Override empty_result_set_value to None since most aggregate functions result in NULL when applied to an empty result set. \n"}, {"name": "db.models.Aggregate.function", "path": "ref/models/expressions#django.db.models.Aggregate.function", "type": "django.db.models", "text": " \nfunction  \nA class attribute describing the aggregate function that will be generated. Specifically, the function will be interpolated as the function placeholder within template. Defaults to None. \n"}, {"name": "db.models.Aggregate.template", "path": "ref/models/expressions#django.db.models.Aggregate.template", "type": "django.db.models", "text": " \ntemplate  \nA class attribute, as a format string, that describes the SQL that is generated for this aggregate. Defaults to '%(function)s(%(distinct)s%(expressions)s)'. \n"}, {"name": "db.models.Aggregate.window_compatible", "path": "ref/models/expressions#django.db.models.Aggregate.window_compatible", "type": "django.db.models", "text": " \nwindow_compatible  \nDefaults to True since most aggregate functions can be used as the source expression in Window. \n"}, {"name": "db.models.as_sql()", "path": "ref/models/lookups#django.db.models.as_sql", "type": "django.db.models", "text": " \nas_sql(compiler, connection)  \nGenerates the SQL fragment for the expression. Returns a tuple (sql, params), where sql is the SQL string, and params is the list or tuple of query parameters. The compiler is an SQLCompiler object, which has a compile() method that can be used to compile other expressions. The connection is the connection used to execute the query. Calling expression.as_sql() is usually incorrect - instead compiler.compile(expression) should be used. The compiler.compile() method will take care of calling vendor-specific methods of the expression. Custom keyword arguments may be defined on this method if it\u2019s likely that as_vendorname() methods or subclasses will need to supply data to override the generation of the SQL string. See Func.as_sql() for example usage. \n"}, {"name": "db.models.as_vendorname()", "path": "ref/models/lookups#django.db.models.as_vendorname", "type": "django.db.models", "text": " \nas_vendorname(compiler, connection)  \nWorks like as_sql() method. When an expression is compiled by compiler.compile(), Django will first try to call as_vendorname(), where vendorname is the vendor name of the backend used for executing the query. The vendorname is one of postgresql, oracle, sqlite, or mysql for Django\u2019s built-in backends. \n"}, {"name": "db.models.AutoField", "path": "ref/models/fields#django.db.models.AutoField", "type": "django.db.models", "text": " \nclass AutoField(**options) \n"}, {"name": "db.models.Avg", "path": "ref/models/querysets#django.db.models.Avg", "type": "django.db.models", "text": " \nclass Avg(expression, output_field=None, distinct=False, filter=None, default=None, **extra)  \nReturns the mean value of the given expression, which must be numeric unless you specify a different output_field.  Default alias: <field>__avg\n Return type: float if input is int, otherwise same as input field, or output_field if supplied  Has one optional argument:  \ndistinct  \nIf distinct=True, Avg returns the mean value of unique values. This is the SQL equivalent of AVG(DISTINCT <field>). The default value is False. \n \n"}, {"name": "db.models.Avg.distinct", "path": "ref/models/querysets#django.db.models.Avg.distinct", "type": "django.db.models", "text": " \ndistinct  \nIf distinct=True, Avg returns the mean value of unique values. This is the SQL equivalent of AVG(DISTINCT <field>). The default value is False. \n"}, {"name": "db.models.BigAutoField", "path": "ref/models/fields#django.db.models.BigAutoField", "type": "django.db.models", "text": " \nclass BigAutoField(**options) \n"}, {"name": "db.models.BigIntegerField", "path": "ref/models/fields#django.db.models.BigIntegerField", "type": "django.db.models", "text": " \nclass BigIntegerField(**options) \n"}, {"name": "db.models.BinaryField", "path": "ref/models/fields#django.db.models.BinaryField", "type": "django.db.models", "text": " \nclass BinaryField(max_length=None, **options) \n"}, {"name": "db.models.BinaryField.max_length", "path": "ref/models/fields#django.db.models.BinaryField.max_length", "type": "django.db.models", "text": " \nBinaryField.max_length  \nThe maximum length (in bytes) of the field. The maximum length is enforced in Django\u2019s validation using MaxLengthValidator. \n"}, {"name": "db.models.BooleanField", "path": "ref/models/fields#django.db.models.BooleanField", "type": "django.db.models", "text": " \nclass BooleanField(**options) \n"}, {"name": "db.models.CASCADE", "path": "ref/models/fields#django.db.models.CASCADE", "type": "django.db.models", "text": " \nCASCADE  \nCascade deletes. Django emulates the behavior of the SQL constraint ON DELETE CASCADE and also deletes the object containing the ForeignKey. Model.delete() isn\u2019t called on related models, but the pre_delete and post_delete signals are sent for all deleted objects. \n"}, {"name": "db.models.CharField", "path": "ref/models/fields#django.db.models.CharField", "type": "django.db.models", "text": " \nclass CharField(max_length=None, **options) \n"}, {"name": "db.models.CharField.db_collation", "path": "ref/models/fields#django.db.models.CharField.db_collation", "type": "django.db.models", "text": " \nCharField.db_collation  \n New in Django 3.2.  Optional. The database collation name of the field.  Note Collation names are not standardized. As such, this will not be portable across multiple database backends.   Oracle Oracle supports collations only when the MAX_STRING_SIZE database initialization parameter is set to EXTENDED.  \n"}, {"name": "db.models.CharField.max_length", "path": "ref/models/fields#django.db.models.CharField.max_length", "type": "django.db.models", "text": " \nCharField.max_length  \nRequired. The maximum length (in characters) of the field. The max_length is enforced at the database level and in Django\u2019s validation using MaxLengthValidator.  Note If you are writing an application that must be portable to multiple database backends, you should be aware that there are restrictions on max_length for some backends. Refer to the database backend notes for details.  \n"}, {"name": "db.models.CheckConstraint", "path": "ref/models/constraints#django.db.models.CheckConstraint", "type": "django.db.models", "text": " \nclass CheckConstraint(*, check, name)  \nCreates a check constraint in the database. \n"}, {"name": "db.models.CheckConstraint.check", "path": "ref/models/constraints#django.db.models.CheckConstraint.check", "type": "django.db.models", "text": " \nCheckConstraint.check \n"}, {"name": "db.models.CheckConstraint.name", "path": "ref/models/constraints#django.db.models.CheckConstraint.name", "type": "django.db.models", "text": " \nCheckConstraint.name \n"}, {"name": "db.models.Count", "path": "ref/models/querysets#django.db.models.Count", "type": "django.db.models", "text": " \nclass Count(expression, distinct=False, filter=None, **extra)  \nReturns the number of objects that are related through the provided expression.  Default alias: <field>__count\n Return type: int\n  Has one optional argument:  \ndistinct  \nIf distinct=True, the count will only include unique instances. This is the SQL equivalent of COUNT(DISTINCT <field>). The default value is False. \n  Note The default argument is not supported.  \n"}, {"name": "db.models.Count.distinct", "path": "ref/models/querysets#django.db.models.Count.distinct", "type": "django.db.models", "text": " \ndistinct  \nIf distinct=True, the count will only include unique instances. This is the SQL equivalent of COUNT(DISTINCT <field>). The default value is False. \n"}, {"name": "db.models.CursorWrapper.callproc()", "path": "topics/db/sql#django.db.models.CursorWrapper.callproc", "type": "django.db.models", "text": " \nCursorWrapper.callproc(procname, params=None, kparams=None)  \nCalls a database stored procedure with the given name. A sequence (params) or dictionary (kparams) of input parameters may be provided. Most databases don\u2019t support kparams. Of Django\u2019s built-in backends, only Oracle supports it. For example, given this stored procedure in an Oracle database: CREATE PROCEDURE \"TEST_PROCEDURE\"(v_i INTEGER, v_text NVARCHAR2(10)) AS\n    p_i INTEGER;\n    p_text NVARCHAR2(10);\nBEGIN\n    p_i := v_i;\n    p_text := v_text;\n    ...\nEND;\n This will call it: with connection.cursor() as cursor:\n    cursor.callproc('test_procedure', [1, 'test'])\n \n"}, {"name": "db.models.DateField", "path": "ref/models/fields#django.db.models.DateField", "type": "django.db.models", "text": " \nclass DateField(auto_now=False, auto_now_add=False, **options) \n"}, {"name": "db.models.DateField.auto_now", "path": "ref/models/fields#django.db.models.DateField.auto_now", "type": "django.db.models", "text": " \nDateField.auto_now  \nAutomatically set the field to now every time the object is saved. Useful for \u201clast-modified\u201d timestamps. Note that the current date is always used; it\u2019s not just a default value that you can override. The field is only automatically updated when calling Model.save(). The field isn\u2019t updated when making updates to other fields in other ways such as QuerySet.update(), though you can specify a custom value for the field in an update like that. \n"}, {"name": "db.models.DateField.auto_now_add", "path": "ref/models/fields#django.db.models.DateField.auto_now_add", "type": "django.db.models", "text": " \nDateField.auto_now_add  \nAutomatically set the field to now when the object is first created. Useful for creation of timestamps. Note that the current date is always used; it\u2019s not just a default value that you can override. So even if you set a value for this field when creating the object, it will be ignored. If you want to be able to modify this field, set the following instead of auto_now_add=True:  For DateField: default=date.today - from datetime.date.today()\n For DateTimeField: default=timezone.now - from django.utils.timezone.now()\n  \n"}, {"name": "db.models.DateTimeField", "path": "ref/models/fields#django.db.models.DateTimeField", "type": "django.db.models", "text": " \nclass DateTimeField(auto_now=False, auto_now_add=False, **options) \n"}, {"name": "db.models.DecimalField", "path": "ref/models/fields#django.db.models.DecimalField", "type": "django.db.models", "text": " \nclass DecimalField(max_digits=None, decimal_places=None, **options) \n"}, {"name": "db.models.DecimalField.decimal_places", "path": "ref/models/fields#django.db.models.DecimalField.decimal_places", "type": "django.db.models", "text": " \nDecimalField.decimal_places  \nThe number of decimal places to store with the number. \n"}, {"name": "db.models.DecimalField.max_digits", "path": "ref/models/fields#django.db.models.DecimalField.max_digits", "type": "django.db.models", "text": " \nDecimalField.max_digits  \nThe maximum number of digits allowed in the number. Note that this number must be greater than or equal to decimal_places. \n"}, {"name": "db.models.DO_NOTHING", "path": "ref/models/fields#django.db.models.DO_NOTHING", "type": "django.db.models", "text": " \nDO_NOTHING  \nTake no action. If your database backend enforces referential integrity, this will cause an IntegrityError unless you manually add an SQL ON DELETE constraint to the database field. \n"}, {"name": "db.models.DurationField", "path": "ref/models/fields#django.db.models.DurationField", "type": "django.db.models", "text": " \nclass DurationField(**options) \n"}, {"name": "db.models.EmailField", "path": "ref/models/fields#django.db.models.EmailField", "type": "django.db.models", "text": " \nclass EmailField(max_length=254, **options) \n"}, {"name": "db.models.Exists", "path": "ref/models/expressions#django.db.models.Exists", "type": "django.db.models", "text": " \nclass Exists(queryset) \n"}, {"name": "db.models.Expression", "path": "ref/models/expressions#django.db.models.Expression", "type": "django.db.models", "text": " \nclass Expression  \n \ncontains_aggregate  \nTells Django that this expression contains an aggregate and that a GROUP BY clause needs to be added to the query. \n  \ncontains_over_clause  \nTells Django that this expression contains a Window expression. It\u2019s used, for example, to disallow window function expressions in queries that modify data. \n  \nfilterable  \nTells Django that this expression can be referenced in QuerySet.filter(). Defaults to True. \n  \nwindow_compatible  \nTells Django that this expression can be used as the source expression in Window. Defaults to False. \n  \nempty_result_set_value  \n New in Django 4.0.  Tells Django which value should be returned when the expression is used to apply a function over an empty result set. Defaults to NotImplemented which forces the expression to be computed on the database. \n  \nresolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)  \nProvides the chance to do any pre-processing or validation of the expression before it\u2019s added to the query. resolve_expression() must also be called on any nested expressions. A copy() of self should be returned with any necessary transformations. query is the backend query implementation. allow_joins is a boolean that allows or denies the use of joins in the query. reuse is a set of reusable joins for multi-join scenarios. summarize is a boolean that, when True, signals that the query being computed is a terminal aggregate query. for_save is a boolean that, when True, signals that the query being executed is performing a create or update. \n  \nget_source_expressions()  \nReturns an ordered list of inner expressions. For example: >>> Sum(F('foo')).get_source_expressions()\n[F('foo')]\n \n  \nset_source_expressions(expressions)  \nTakes a list of expressions and stores them such that get_source_expressions() can return them. \n  \nrelabeled_clone(change_map)  \nReturns a clone (copy) of self, with any column aliases relabeled. Column aliases are renamed when subqueries are created. relabeled_clone() should also be called on any nested expressions and assigned to the clone. change_map is a dictionary mapping old aliases to new aliases. Example: def relabeled_clone(self, change_map):\n    clone = copy.copy(self)\n    clone.expression = self.expression.relabeled_clone(change_map)\n    return clone\n \n  \nconvert_value(value, expression, connection)  \nA hook allowing the expression to coerce value into a more appropriate type. expression is the same as self. \n  \nget_group_by_cols(alias=None)  \nResponsible for returning the list of columns references by this expression. get_group_by_cols() should be called on any nested expressions. F() objects, in particular, hold a reference to a column. The alias parameter will be None unless the expression has been annotated and is used for grouping. \n  \nasc(nulls_first=False, nulls_last=False)  \nReturns the expression ready to be sorted in ascending order. nulls_first and nulls_last define how null values are sorted. See Using F() to sort null values for example usage. \n  \ndesc(nulls_first=False, nulls_last=False)  \nReturns the expression ready to be sorted in descending order. nulls_first and nulls_last define how null values are sorted. See Using F() to sort null values for example usage. \n  \nreverse_ordering()  \nReturns self with any modifications required to reverse the sort order within an order_by call. As an example, an expression implementing NULLS LAST would change its value to be NULLS FIRST. Modifications are only required for expressions that implement sort order like OrderBy. This method is called when reverse() is called on a queryset. \n \n"}, {"name": "db.models.Expression.asc()", "path": "ref/models/expressions#django.db.models.Expression.asc", "type": "django.db.models", "text": " \nasc(nulls_first=False, nulls_last=False)  \nReturns the expression ready to be sorted in ascending order. nulls_first and nulls_last define how null values are sorted. See Using F() to sort null values for example usage. \n"}, {"name": "db.models.Expression.contains_aggregate", "path": "ref/models/expressions#django.db.models.Expression.contains_aggregate", "type": "django.db.models", "text": " \ncontains_aggregate  \nTells Django that this expression contains an aggregate and that a GROUP BY clause needs to be added to the query. \n"}, {"name": "db.models.Expression.contains_over_clause", "path": "ref/models/expressions#django.db.models.Expression.contains_over_clause", "type": "django.db.models", "text": " \ncontains_over_clause  \nTells Django that this expression contains a Window expression. It\u2019s used, for example, to disallow window function expressions in queries that modify data. \n"}, {"name": "db.models.Expression.convert_value()", "path": "ref/models/expressions#django.db.models.Expression.convert_value", "type": "django.db.models", "text": " \nconvert_value(value, expression, connection)  \nA hook allowing the expression to coerce value into a more appropriate type. expression is the same as self. \n"}, {"name": "db.models.Expression.desc()", "path": "ref/models/expressions#django.db.models.Expression.desc", "type": "django.db.models", "text": " \ndesc(nulls_first=False, nulls_last=False)  \nReturns the expression ready to be sorted in descending order. nulls_first and nulls_last define how null values are sorted. See Using F() to sort null values for example usage. \n"}, {"name": "db.models.Expression.empty_result_set_value", "path": "ref/models/expressions#django.db.models.Expression.empty_result_set_value", "type": "django.db.models", "text": " \nempty_result_set_value  \n New in Django 4.0.  Tells Django which value should be returned when the expression is used to apply a function over an empty result set. Defaults to NotImplemented which forces the expression to be computed on the database. \n"}, {"name": "db.models.Expression.filterable", "path": "ref/models/expressions#django.db.models.Expression.filterable", "type": "django.db.models", "text": " \nfilterable  \nTells Django that this expression can be referenced in QuerySet.filter(). Defaults to True. \n"}, {"name": "db.models.Expression.get_group_by_cols()", "path": "ref/models/expressions#django.db.models.Expression.get_group_by_cols", "type": "django.db.models", "text": " \nget_group_by_cols(alias=None)  \nResponsible for returning the list of columns references by this expression. get_group_by_cols() should be called on any nested expressions. F() objects, in particular, hold a reference to a column. The alias parameter will be None unless the expression has been annotated and is used for grouping. \n"}, {"name": "db.models.Expression.get_source_expressions()", "path": "ref/models/expressions#django.db.models.Expression.get_source_expressions", "type": "django.db.models", "text": " \nget_source_expressions()  \nReturns an ordered list of inner expressions. For example: >>> Sum(F('foo')).get_source_expressions()\n[F('foo')]\n \n"}, {"name": "db.models.Expression.relabeled_clone()", "path": "ref/models/expressions#django.db.models.Expression.relabeled_clone", "type": "django.db.models", "text": " \nrelabeled_clone(change_map)  \nReturns a clone (copy) of self, with any column aliases relabeled. Column aliases are renamed when subqueries are created. relabeled_clone() should also be called on any nested expressions and assigned to the clone. change_map is a dictionary mapping old aliases to new aliases. Example: def relabeled_clone(self, change_map):\n    clone = copy.copy(self)\n    clone.expression = self.expression.relabeled_clone(change_map)\n    return clone\n \n"}, {"name": "db.models.Expression.resolve_expression()", "path": "ref/models/expressions#django.db.models.Expression.resolve_expression", "type": "django.db.models", "text": " \nresolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)  \nProvides the chance to do any pre-processing or validation of the expression before it\u2019s added to the query. resolve_expression() must also be called on any nested expressions. A copy() of self should be returned with any necessary transformations. query is the backend query implementation. allow_joins is a boolean that allows or denies the use of joins in the query. reuse is a set of reusable joins for multi-join scenarios. summarize is a boolean that, when True, signals that the query being computed is a terminal aggregate query. for_save is a boolean that, when True, signals that the query being executed is performing a create or update. \n"}, {"name": "db.models.Expression.reverse_ordering()", "path": "ref/models/expressions#django.db.models.Expression.reverse_ordering", "type": "django.db.models", "text": " \nreverse_ordering()  \nReturns self with any modifications required to reverse the sort order within an order_by call. As an example, an expression implementing NULLS LAST would change its value to be NULLS FIRST. Modifications are only required for expressions that implement sort order like OrderBy. This method is called when reverse() is called on a queryset. \n"}, {"name": "db.models.Expression.set_source_expressions()", "path": "ref/models/expressions#django.db.models.Expression.set_source_expressions", "type": "django.db.models", "text": " \nset_source_expressions(expressions)  \nTakes a list of expressions and stores them such that get_source_expressions() can return them. \n"}, {"name": "db.models.Expression.window_compatible", "path": "ref/models/expressions#django.db.models.Expression.window_compatible", "type": "django.db.models", "text": " \nwindow_compatible  \nTells Django that this expression can be used as the source expression in Window. Defaults to False. \n"}, {"name": "db.models.expressions.Case", "path": "ref/models/conditional-expressions#django.db.models.expressions.Case", "type": "django.db.models", "text": " \nclass Case(*cases, **extra) \n"}, {"name": "db.models.expressions.RawSQL", "path": "ref/models/expressions#django.db.models.expressions.RawSQL", "type": "django.db.models", "text": " \nclass RawSQL(sql, params, output_field=None) \n"}, {"name": "db.models.expressions.RowRange", "path": "ref/models/expressions#django.db.models.expressions.RowRange", "type": "django.db.models", "text": " \nclass RowRange(start=None, end=None)  \n \nframe_type  \nThis attribute is set to 'ROWS'. \n \n"}, {"name": "db.models.expressions.RowRange.frame_type", "path": "ref/models/expressions#django.db.models.expressions.RowRange.frame_type", "type": "django.db.models", "text": " \nframe_type  \nThis attribute is set to 'ROWS'. \n"}, {"name": "db.models.expressions.ValueRange", "path": "ref/models/expressions#django.db.models.expressions.ValueRange", "type": "django.db.models", "text": " \nclass ValueRange(start=None, end=None)  \n \nframe_type  \nThis attribute is set to 'RANGE'. \n PostgreSQL has limited support for ValueRange and only supports use of the standard start and end points, such as CURRENT ROW and UNBOUNDED\nFOLLOWING. \n"}, {"name": "db.models.expressions.ValueRange.frame_type", "path": "ref/models/expressions#django.db.models.expressions.ValueRange.frame_type", "type": "django.db.models", "text": " \nframe_type  \nThis attribute is set to 'RANGE'. \n"}, {"name": "db.models.expressions.When", "path": "ref/models/conditional-expressions#django.db.models.expressions.When", "type": "django.db.models", "text": " \nclass When(condition=None, then=None, **lookups) \n"}, {"name": "db.models.expressions.Window", "path": "ref/models/expressions#django.db.models.expressions.Window", "type": "django.db.models", "text": " \nclass Window(expression, partition_by=None, order_by=None, frame=None, output_field=None)  \n \nfilterable  \nDefaults to False. The SQL standard disallows referencing window functions in the WHERE clause and Django raises an exception when constructing a QuerySet that would do that. \n  \ntemplate  \nDefaults to %(expression)s OVER (%(window)s)'. If only the expression argument is provided, the window clause will be blank. \n \n"}, {"name": "db.models.expressions.Window.filterable", "path": "ref/models/expressions#django.db.models.expressions.Window.filterable", "type": "django.db.models", "text": " \nfilterable  \nDefaults to False. The SQL standard disallows referencing window functions in the WHERE clause and Django raises an exception when constructing a QuerySet that would do that. \n"}, {"name": "db.models.expressions.Window.template", "path": "ref/models/expressions#django.db.models.expressions.Window.template", "type": "django.db.models", "text": " \ntemplate  \nDefaults to %(expression)s OVER (%(window)s)'. If only the expression argument is provided, the window clause will be blank. \n"}, {"name": "db.models.ExpressionWrapper", "path": "ref/models/expressions#django.db.models.ExpressionWrapper", "type": "django.db.models", "text": " \nclass ExpressionWrapper(expression, output_field) \n"}, {"name": "db.models.F", "path": "ref/models/expressions#django.db.models.F", "type": "django.db.models", "text": " \nclass F \n"}, {"name": "db.models.Field", "path": "ref/models/fields#django.db.models.Field", "type": "django.db.models", "text": " \nclass Field  \nField is an abstract class that represents a database table column. Django uses fields to create the database table (db_type()), to map Python types to database (get_prep_value()) and vice-versa (from_db_value()). A field is thus a fundamental piece in different Django APIs, notably, models and querysets. In models, a field is instantiated as a class attribute and represents a particular table column, see Models. It has attributes such as null and unique, and methods that Django uses to map the field value to database-specific values. A Field is a subclass of RegisterLookupMixin and thus both Transform and Lookup can be registered on it to be used in QuerySets (e.g. field_name__exact=\"foo\"). All built-in lookups are registered by default. All of Django\u2019s built-in fields, such as CharField, are particular implementations of Field. If you need a custom field, you can either subclass any of the built-in fields or write a Field from scratch. In either case, see How to create custom model fields.  \ndescription  \nA verbose description of the field, e.g. for the django.contrib.admindocs application. The description can be of the form: description = _(\"String (up to %(max_length)s)\")\n where the arguments are interpolated from the field\u2019s __dict__. \n  \ndescriptor_class  \nA class implementing the descriptor protocol that is instantiated and assigned to the model instance attribute. The constructor must accept a single argument, the Field instance. Overriding this class attribute allows for customizing the get and set behavior. \n To map a Field to a database-specific type, Django exposes several methods:  \nget_internal_type()  \nReturns a string naming this field for backend specific purposes. By default, it returns the class name. See Emulating built-in field types for usage in custom fields. \n  \ndb_type(connection)  \nReturns the database column data type for the Field, taking into account the connection. See Custom database types for usage in custom fields. \n  \nrel_db_type(connection)  \nReturns the database column data type for fields such as ForeignKey and OneToOneField that point to the Field, taking into account the connection. See Custom database types for usage in custom fields. \n There are three main situations where Django needs to interact with the database backend and fields:  when it queries the database (Python value -> database backend value) when it loads data from the database (database backend value -> Python value) when it saves to the database (Python value -> database backend value)  When querying, get_db_prep_value() and get_prep_value() are used:  \nget_prep_value(value)  \nvalue is the current value of the model\u2019s attribute, and the method should return data in a format that has been prepared for use as a parameter in a query. See Converting Python objects to query values for usage. \n  \nget_db_prep_value(value, connection, prepared=False)  \nConverts value to a backend-specific value. By default it returns value if prepared=True and get_prep_value() if is False. See Converting query values to database values for usage. \n When loading data, from_db_value() is used:  \nfrom_db_value(value, expression, connection)  \nConverts a value as returned by the database to a Python object. It is the reverse of get_prep_value(). This method is not used for most built-in fields as the database backend already returns the correct Python type, or the backend itself does the conversion. expression is the same as self. See Converting values to Python objects for usage.  Note For performance reasons, from_db_value is not implemented as a no-op on fields which do not require it (all Django fields). Consequently you may not call super in your definition.  \n When saving, pre_save() and get_db_prep_save() are used:  \nget_db_prep_save(value, connection)  \nSame as the get_db_prep_value(), but called when the field value must be saved to the database. By default returns get_db_prep_value(). \n  \npre_save(model_instance, add)  \nMethod called prior to get_db_prep_save() to prepare the value before being saved (e.g. for DateField.auto_now). model_instance is the instance this field belongs to and add is whether the instance is being saved to the database for the first time. It should return the value of the appropriate attribute from model_instance for this field. The attribute name is in self.attname (this is set up by Field). See Preprocessing values before saving for usage. \n Fields often receive their values as a different type, either from serialization or from forms.  \nto_python(value)  \nConverts the value into the correct Python object. It acts as the reverse of value_to_string(), and is also called in clean(). See Converting values to Python objects for usage. \n Besides saving to the database, the field also needs to know how to serialize its value:  \nvalue_from_object(obj)  \nReturns the field\u2019s value for the given model instance. This method is often used by value_to_string(). \n  \nvalue_to_string(obj)  \nConverts obj to a string. Used to serialize the value of the field. See Converting field data for serialization for usage. \n When using model forms, the Field needs to know which form field it should be represented by:  \nformfield(form_class=None, choices_form_class=None, **kwargs)  \nReturns the default django.forms.Field of this field for ModelForm. By default, if both form_class and choices_form_class are None, it uses CharField. If the field has choices and choices_form_class isn\u2019t specified, it uses TypedChoiceField. See Specifying the form field for a model field for usage. \n  \ndeconstruct()  \nReturns a 4-tuple with enough information to recreate the field:  The name of the field on the model. The import path of the field (e.g. \"django.db.models.IntegerField\"). This should be the most portable version, so less specific may be better. A list of positional arguments. A dict of keyword arguments.  This method must be added to fields prior to 1.7 to migrate its data using Migrations. \n \n"}, {"name": "db.models.Field.auto_created", "path": "ref/models/fields#django.db.models.Field.auto_created", "type": "django.db.models", "text": " \nField.auto_created  \nBoolean flag that indicates if the field was automatically created, such as the OneToOneField used by model inheritance. \n"}, {"name": "db.models.Field.blank", "path": "ref/models/fields#django.db.models.Field.blank", "type": "django.db.models", "text": " \nField.blank \n"}, {"name": "db.models.Field.choices", "path": "ref/models/fields#django.db.models.Field.choices", "type": "django.db.models", "text": " \nField.choices \n"}, {"name": "db.models.Field.concrete", "path": "ref/models/fields#django.db.models.Field.concrete", "type": "django.db.models", "text": " \nField.concrete  \nBoolean flag that indicates if the field has a database column associated with it. \n"}, {"name": "db.models.Field.db_column", "path": "ref/models/fields#django.db.models.Field.db_column", "type": "django.db.models", "text": " \nField.db_column \n"}, {"name": "db.models.Field.db_index", "path": "ref/models/fields#django.db.models.Field.db_index", "type": "django.db.models", "text": " \nField.db_index \n"}, {"name": "db.models.Field.db_tablespace", "path": "ref/models/fields#django.db.models.Field.db_tablespace", "type": "django.db.models", "text": " \nField.db_tablespace \n"}, {"name": "db.models.Field.db_type()", "path": "ref/models/fields#django.db.models.Field.db_type", "type": "django.db.models", "text": " \ndb_type(connection)  \nReturns the database column data type for the Field, taking into account the connection. See Custom database types for usage in custom fields. \n"}, {"name": "db.models.Field.deconstruct()", "path": "ref/models/fields#django.db.models.Field.deconstruct", "type": "django.db.models", "text": " \ndeconstruct()  \nReturns a 4-tuple with enough information to recreate the field:  The name of the field on the model. The import path of the field (e.g. \"django.db.models.IntegerField\"). This should be the most portable version, so less specific may be better. A list of positional arguments. A dict of keyword arguments.  This method must be added to fields prior to 1.7 to migrate its data using Migrations. \n"}, {"name": "db.models.Field.default", "path": "ref/models/fields#django.db.models.Field.default", "type": "django.db.models", "text": " \nField.default \n"}, {"name": "db.models.Field.description", "path": "ref/models/fields#django.db.models.Field.description", "type": "django.db.models", "text": " \ndescription  \nA verbose description of the field, e.g. for the django.contrib.admindocs application. The description can be of the form: description = _(\"String (up to %(max_length)s)\")\n where the arguments are interpolated from the field\u2019s __dict__. \n"}, {"name": "db.models.Field.descriptor_class", "path": "ref/models/fields#django.db.models.Field.descriptor_class", "type": "django.db.models", "text": " \ndescriptor_class  \nA class implementing the descriptor protocol that is instantiated and assigned to the model instance attribute. The constructor must accept a single argument, the Field instance. Overriding this class attribute allows for customizing the get and set behavior. \n"}, {"name": "db.models.Field.editable", "path": "ref/models/fields#django.db.models.Field.editable", "type": "django.db.models", "text": " \nField.editable \n"}, {"name": "db.models.Field.error_messages", "path": "ref/models/fields#django.db.models.Field.error_messages", "type": "django.db.models", "text": " \nField.error_messages \n"}, {"name": "db.models.Field.formfield()", "path": "ref/models/fields#django.db.models.Field.formfield", "type": "django.db.models", "text": " \nformfield(form_class=None, choices_form_class=None, **kwargs)  \nReturns the default django.forms.Field of this field for ModelForm. By default, if both form_class and choices_form_class are None, it uses CharField. If the field has choices and choices_form_class isn\u2019t specified, it uses TypedChoiceField. See Specifying the form field for a model field for usage. \n"}, {"name": "db.models.Field.from_db_value()", "path": "ref/models/fields#django.db.models.Field.from_db_value", "type": "django.db.models", "text": " \nfrom_db_value(value, expression, connection)  \nConverts a value as returned by the database to a Python object. It is the reverse of get_prep_value(). This method is not used for most built-in fields as the database backend already returns the correct Python type, or the backend itself does the conversion. expression is the same as self. See Converting values to Python objects for usage.  Note For performance reasons, from_db_value is not implemented as a no-op on fields which do not require it (all Django fields). Consequently you may not call super in your definition.  \n"}, {"name": "db.models.Field.get_db_prep_save()", "path": "ref/models/fields#django.db.models.Field.get_db_prep_save", "type": "django.db.models", "text": " \nget_db_prep_save(value, connection)  \nSame as the get_db_prep_value(), but called when the field value must be saved to the database. By default returns get_db_prep_value(). \n"}, {"name": "db.models.Field.get_db_prep_value()", "path": "ref/models/fields#django.db.models.Field.get_db_prep_value", "type": "django.db.models", "text": " \nget_db_prep_value(value, connection, prepared=False)  \nConverts value to a backend-specific value. By default it returns value if prepared=True and get_prep_value() if is False. See Converting query values to database values for usage. \n"}, {"name": "db.models.Field.get_internal_type()", "path": "ref/models/fields#django.db.models.Field.get_internal_type", "type": "django.db.models", "text": " \nget_internal_type()  \nReturns a string naming this field for backend specific purposes. By default, it returns the class name. See Emulating built-in field types for usage in custom fields. \n"}, {"name": "db.models.Field.get_prep_value()", "path": "ref/models/fields#django.db.models.Field.get_prep_value", "type": "django.db.models", "text": " \nget_prep_value(value)  \nvalue is the current value of the model\u2019s attribute, and the method should return data in a format that has been prepared for use as a parameter in a query. See Converting Python objects to query values for usage. \n"}, {"name": "db.models.Field.help_text", "path": "ref/models/fields#django.db.models.Field.help_text", "type": "django.db.models", "text": " \nField.help_text \n"}, {"name": "db.models.Field.hidden", "path": "ref/models/fields#django.db.models.Field.hidden", "type": "django.db.models", "text": " \nField.hidden  \nBoolean flag that indicates if a field is used to back another non-hidden field\u2019s functionality (e.g. the content_type and object_id fields that make up a GenericForeignKey). The hidden flag is used to distinguish what constitutes the public subset of fields on the model from all the fields on the model.  Note Options.get_fields() excludes hidden fields by default. Pass in include_hidden=True to return hidden fields in the results.  \n"}, {"name": "db.models.Field.is_relation", "path": "ref/models/fields#django.db.models.Field.is_relation", "type": "django.db.models", "text": " \nField.is_relation  \nBoolean flag that indicates if a field contains references to one or more other models for its functionality (e.g. ForeignKey, ManyToManyField, OneToOneField, etc.). \n"}, {"name": "db.models.Field.many_to_many", "path": "ref/models/fields#django.db.models.Field.many_to_many", "type": "django.db.models", "text": " \nField.many_to_many  \nBoolean flag that is True if the field has a many-to-many relation; False otherwise. The only field included with Django where this is True is ManyToManyField. \n"}, {"name": "db.models.Field.many_to_one", "path": "ref/models/fields#django.db.models.Field.many_to_one", "type": "django.db.models", "text": " \nField.many_to_one  \nBoolean flag that is True if the field has a many-to-one relation, such as a ForeignKey; False otherwise. \n"}, {"name": "db.models.Field.model", "path": "ref/models/fields#django.db.models.Field.model", "type": "django.db.models", "text": " \nField.model  \nReturns the model on which the field is defined. If a field is defined on a superclass of a model, model will refer to the superclass, not the class of the instance. \n"}, {"name": "db.models.Field.null", "path": "ref/models/fields#django.db.models.Field.null", "type": "django.db.models", "text": " \nField.null \n"}, {"name": "db.models.Field.one_to_many", "path": "ref/models/fields#django.db.models.Field.one_to_many", "type": "django.db.models", "text": " \nField.one_to_many  \nBoolean flag that is True if the field has a one-to-many relation, such as a GenericRelation or the reverse of a ForeignKey; False otherwise. \n"}, {"name": "db.models.Field.one_to_one", "path": "ref/models/fields#django.db.models.Field.one_to_one", "type": "django.db.models", "text": " \nField.one_to_one  \nBoolean flag that is True if the field has a one-to-one relation, such as a OneToOneField; False otherwise. \n"}, {"name": "db.models.Field.pre_save()", "path": "ref/models/fields#django.db.models.Field.pre_save", "type": "django.db.models", "text": " \npre_save(model_instance, add)  \nMethod called prior to get_db_prep_save() to prepare the value before being saved (e.g. for DateField.auto_now). model_instance is the instance this field belongs to and add is whether the instance is being saved to the database for the first time. It should return the value of the appropriate attribute from model_instance for this field. The attribute name is in self.attname (this is set up by Field). See Preprocessing values before saving for usage. \n"}, {"name": "db.models.Field.primary_key", "path": "ref/models/fields#django.db.models.Field.primary_key", "type": "django.db.models", "text": " \nField.primary_key \n"}, {"name": "db.models.Field.rel_db_type()", "path": "ref/models/fields#django.db.models.Field.rel_db_type", "type": "django.db.models", "text": " \nrel_db_type(connection)  \nReturns the database column data type for fields such as ForeignKey and OneToOneField that point to the Field, taking into account the connection. See Custom database types for usage in custom fields. \n"}, {"name": "db.models.Field.related_model", "path": "ref/models/fields#django.db.models.Field.related_model", "type": "django.db.models", "text": " \nField.related_model  \nPoints to the model the field relates to. For example, Author in ForeignKey(Author, on_delete=models.CASCADE). The related_model for a GenericForeignKey is always None. \n"}, {"name": "db.models.Field.to_python()", "path": "ref/models/fields#django.db.models.Field.to_python", "type": "django.db.models", "text": " \nto_python(value)  \nConverts the value into the correct Python object. It acts as the reverse of value_to_string(), and is also called in clean(). See Converting values to Python objects for usage. \n"}, {"name": "db.models.Field.unique", "path": "ref/models/fields#django.db.models.Field.unique", "type": "django.db.models", "text": " \nField.unique \n"}, {"name": "db.models.Field.unique_for_date", "path": "ref/models/fields#django.db.models.Field.unique_for_date", "type": "django.db.models", "text": " \nField.unique_for_date \n"}, {"name": "db.models.Field.unique_for_month", "path": "ref/models/fields#django.db.models.Field.unique_for_month", "type": "django.db.models", "text": " \nField.unique_for_month \n"}, {"name": "db.models.Field.unique_for_year", "path": "ref/models/fields#django.db.models.Field.unique_for_year", "type": "django.db.models", "text": " \nField.unique_for_year \n"}, {"name": "db.models.Field.validators", "path": "ref/models/fields#django.db.models.Field.validators", "type": "django.db.models", "text": " \nField.validators \n"}, {"name": "db.models.Field.value_from_object()", "path": "ref/models/fields#django.db.models.Field.value_from_object", "type": "django.db.models", "text": " \nvalue_from_object(obj)  \nReturns the field\u2019s value for the given model instance. This method is often used by value_to_string(). \n"}, {"name": "db.models.Field.value_to_string()", "path": "ref/models/fields#django.db.models.Field.value_to_string", "type": "django.db.models", "text": " \nvalue_to_string(obj)  \nConverts obj to a string. Used to serialize the value of the field. See Converting field data for serialization for usage. \n"}, {"name": "db.models.Field.verbose_name", "path": "ref/models/fields#django.db.models.Field.verbose_name", "type": "django.db.models", "text": " \nField.verbose_name \n"}, {"name": "db.models.fields.files.FieldFile", "path": "ref/models/fields#django.db.models.fields.files.FieldFile", "type": "django.db.models", "text": " \nclass FieldFile \n"}, {"name": "db.models.fields.files.FieldFile.close()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.close", "type": "django.db.models", "text": " \nFieldFile.close() \n"}, {"name": "db.models.fields.files.FieldFile.delete()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.delete", "type": "django.db.models", "text": " \nFieldFile.delete(save=True) \n"}, {"name": "db.models.fields.files.FieldFile.name", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.name", "type": "django.db.models", "text": " \nFieldFile.name \n"}, {"name": "db.models.fields.files.FieldFile.open()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.open", "type": "django.db.models", "text": " \nFieldFile.open(mode='rb') \n"}, {"name": "db.models.fields.files.FieldFile.path", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.path", "type": "django.db.models", "text": " \nFieldFile.path \n"}, {"name": "db.models.fields.files.FieldFile.save()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.save", "type": "django.db.models", "text": " \nFieldFile.save(name, content, save=True) \n"}, {"name": "db.models.fields.files.FieldFile.size", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.size", "type": "django.db.models", "text": " \nFieldFile.size \n"}, {"name": "db.models.fields.files.FieldFile.url", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.url", "type": "django.db.models", "text": " \nFieldFile.url \n"}, {"name": "db.models.fields.related.RelatedManager", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager", "type": "django.db.models", "text": " \nclass RelatedManager  \nA \u201crelated manager\u201d is a manager used in a one-to-many or many-to-many related context. This happens in two cases:  \nThe \u201cother side\u201d of a ForeignKey relation. That is: from django.db import models\n\nclass Blog(models.Model):\n    # ...\n    pass\n\nclass Entry(models.Model):\n    blog = models.ForeignKey(Blog, on_delete=models.CASCADE, null=True)\n In the above example, the methods below will be available on the manager blog.entry_set.  \nBoth sides of a ManyToManyField relation: class Topping(models.Model):\n    # ...\n    pass\n\nclass Pizza(models.Model):\n    toppings = models.ManyToManyField(Topping)\n In this example, the methods below will be available both on topping.pizza_set and on pizza.toppings.    \nadd(*objs, bulk=True, through_defaults=None)  \nAdds the specified model objects to the related object set. Example: >>> b = Blog.objects.get(id=1)\n>>> e = Entry.objects.get(id=234)\n>>> b.entry_set.add(e) # Associates Entry e with Blog b.\n In the example above, in the case of a ForeignKey relationship, QuerySet.update() is used to perform the update. This requires the objects to already be saved. You can use the bulk=False argument to instead have the related manager perform the update by calling e.save(). Using add() with a many-to-many relationship, however, will not call any save() methods (the bulk argument doesn\u2019t exist), but rather create the relationships using QuerySet.bulk_create(). If you need to execute some custom logic when a relationship is created, listen to the m2m_changed signal, which will trigger pre_add and post_add actions. Using add() on a relation that already exists won\u2019t duplicate the relation, but it will still trigger signals. For many-to-many relationships add() accepts either model instances or field values, normally primary keys, as the *objs argument. Use the through_defaults argument to specify values for the new intermediate model instance(s), if needed. You can use callables as values in the through_defaults dictionary and they will be evaluated once before creating any intermediate instance(s). \n  \ncreate(through_defaults=None, **kwargs)  \nCreates a new object, saves it and puts it in the related object set. Returns the newly created object: >>> b = Blog.objects.get(id=1)\n>>> e = b.entry_set.create(\n...     headline='Hello',\n...     body_text='Hi',\n...     pub_date=datetime.date(2005, 1, 1)\n... )\n\n# No need to call e.save() at this point -- it's already been saved.\n This is equivalent to (but simpler than): >>> b = Blog.objects.get(id=1)\n>>> e = Entry(\n...     blog=b,\n...     headline='Hello',\n...     body_text='Hi',\n...     pub_date=datetime.date(2005, 1, 1)\n... )\n>>> e.save(force_insert=True)\n Note that there\u2019s no need to specify the keyword argument of the model that defines the relationship. In the above example, we don\u2019t pass the parameter blog to create(). Django figures out that the new Entry object\u2019s blog field should be set to b. Use the through_defaults argument to specify values for the new intermediate model instance, if needed. You can use callables as values in the through_defaults dictionary. \n  \nremove(*objs, bulk=True)  \nRemoves the specified model objects from the related object set: >>> b = Blog.objects.get(id=1)\n>>> e = Entry.objects.get(id=234)\n>>> b.entry_set.remove(e) # Disassociates Entry e from Blog b.\n Similar to add(), e.save() is called in the example above to perform the update. Using remove() with a many-to-many relationship, however, will delete the relationships using QuerySet.delete() which means no model save() methods are called; listen to the m2m_changed signal if you wish to execute custom code when a relationship is deleted. For many-to-many relationships remove() accepts either model instances or field values, normally primary keys, as the *objs argument. For ForeignKey objects, this method only exists if null=True. If the related field can\u2019t be set to None (NULL), then an object can\u2019t be removed from a relation without being added to another. In the above example, removing e from b.entry_set() is equivalent to doing e.blog = None, and because the blog ForeignKey doesn\u2019t have null=True, this is invalid. For ForeignKey objects, this method accepts a bulk argument to control how to perform the operation. If True (the default), QuerySet.update() is used. If bulk=False, the save() method of each individual model instance is called instead. This triggers the pre_save and post_save signals and comes at the expense of performance. For many-to-many relationships, the bulk keyword argument doesn\u2019t exist. \n  \nclear(bulk=True)  \nRemoves all objects from the related object set: >>> b = Blog.objects.get(id=1)\n>>> b.entry_set.clear()\n Note this doesn\u2019t delete the related objects \u2013 it just disassociates them. Just like remove(), clear() is only available on ForeignKeys where null=True and it also accepts the bulk keyword argument. For many-to-many relationships, the bulk keyword argument doesn\u2019t exist. \n  \nset(objs, bulk=True, clear=False, through_defaults=None)  \nReplace the set of related objects: >>> new_list = [obj1, obj2, obj3]\n>>> e.related_set.set(new_list)\n This method accepts a clear argument to control how to perform the operation. If False (the default), the elements missing from the new set are removed using remove() and only the new ones are added. If clear=True, the clear() method is called instead and the whole set is added at once. For ForeignKey objects, the bulk argument is passed on to add() and remove(). For many-to-many relationships, the bulk keyword argument doesn\u2019t exist. Note that since set() is a compound operation, it is subject to race conditions. For instance, new objects may be added to the database in between the call to clear() and the call to add(). For many-to-many relationships set() accepts a list of either model instances or field values, normally primary keys, as the objs argument. Use the through_defaults argument to specify values for the new intermediate model instance(s), if needed. You can use callables as values in the through_defaults dictionary and they will be evaluated once before creating any intermediate instance(s). \n  Note Note that add(), create(), remove(), clear(), and set() all apply database changes immediately for all types of related fields. In other words, there is no need to call save() on either end of the relationship. If you use prefetch_related(), the add(), remove(), clear(), and set() methods clear the prefetched cache.  \n"}, {"name": "db.models.fields.related.RelatedManager.add()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.add", "type": "django.db.models", "text": " \nadd(*objs, bulk=True, through_defaults=None)  \nAdds the specified model objects to the related object set. Example: >>> b = Blog.objects.get(id=1)\n>>> e = Entry.objects.get(id=234)\n>>> b.entry_set.add(e) # Associates Entry e with Blog b.\n In the example above, in the case of a ForeignKey relationship, QuerySet.update() is used to perform the update. This requires the objects to already be saved. You can use the bulk=False argument to instead have the related manager perform the update by calling e.save(). Using add() with a many-to-many relationship, however, will not call any save() methods (the bulk argument doesn\u2019t exist), but rather create the relationships using QuerySet.bulk_create(). If you need to execute some custom logic when a relationship is created, listen to the m2m_changed signal, which will trigger pre_add and post_add actions. Using add() on a relation that already exists won\u2019t duplicate the relation, but it will still trigger signals. For many-to-many relationships add() accepts either model instances or field values, normally primary keys, as the *objs argument. Use the through_defaults argument to specify values for the new intermediate model instance(s), if needed. You can use callables as values in the through_defaults dictionary and they will be evaluated once before creating any intermediate instance(s). \n"}, {"name": "db.models.fields.related.RelatedManager.clear()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.clear", "type": "django.db.models", "text": " \nclear(bulk=True)  \nRemoves all objects from the related object set: >>> b = Blog.objects.get(id=1)\n>>> b.entry_set.clear()\n Note this doesn\u2019t delete the related objects \u2013 it just disassociates them. Just like remove(), clear() is only available on ForeignKeys where null=True and it also accepts the bulk keyword argument. For many-to-many relationships, the bulk keyword argument doesn\u2019t exist. \n"}, {"name": "db.models.fields.related.RelatedManager.create()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.create", "type": "django.db.models", "text": " \ncreate(through_defaults=None, **kwargs)  \nCreates a new object, saves it and puts it in the related object set. Returns the newly created object: >>> b = Blog.objects.get(id=1)\n>>> e = b.entry_set.create(\n...     headline='Hello',\n...     body_text='Hi',\n...     pub_date=datetime.date(2005, 1, 1)\n... )\n\n# No need to call e.save() at this point -- it's already been saved.\n This is equivalent to (but simpler than): >>> b = Blog.objects.get(id=1)\n>>> e = Entry(\n...     blog=b,\n...     headline='Hello',\n...     body_text='Hi',\n...     pub_date=datetime.date(2005, 1, 1)\n... )\n>>> e.save(force_insert=True)\n Note that there\u2019s no need to specify the keyword argument of the model that defines the relationship. In the above example, we don\u2019t pass the parameter blog to create(). Django figures out that the new Entry object\u2019s blog field should be set to b. Use the through_defaults argument to specify values for the new intermediate model instance, if needed. You can use callables as values in the through_defaults dictionary. \n"}, {"name": "db.models.fields.related.RelatedManager.remove()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.remove", "type": "django.db.models", "text": " \nremove(*objs, bulk=True)  \nRemoves the specified model objects from the related object set: >>> b = Blog.objects.get(id=1)\n>>> e = Entry.objects.get(id=234)\n>>> b.entry_set.remove(e) # Disassociates Entry e from Blog b.\n Similar to add(), e.save() is called in the example above to perform the update. Using remove() with a many-to-many relationship, however, will delete the relationships using QuerySet.delete() which means no model save() methods are called; listen to the m2m_changed signal if you wish to execute custom code when a relationship is deleted. For many-to-many relationships remove() accepts either model instances or field values, normally primary keys, as the *objs argument. For ForeignKey objects, this method only exists if null=True. If the related field can\u2019t be set to None (NULL), then an object can\u2019t be removed from a relation without being added to another. In the above example, removing e from b.entry_set() is equivalent to doing e.blog = None, and because the blog ForeignKey doesn\u2019t have null=True, this is invalid. For ForeignKey objects, this method accepts a bulk argument to control how to perform the operation. If True (the default), QuerySet.update() is used. If bulk=False, the save() method of each individual model instance is called instead. This triggers the pre_save and post_save signals and comes at the expense of performance. For many-to-many relationships, the bulk keyword argument doesn\u2019t exist. \n"}, {"name": "db.models.fields.related.RelatedManager.set()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.set", "type": "django.db.models", "text": " \nset(objs, bulk=True, clear=False, through_defaults=None)  \nReplace the set of related objects: >>> new_list = [obj1, obj2, obj3]\n>>> e.related_set.set(new_list)\n This method accepts a clear argument to control how to perform the operation. If False (the default), the elements missing from the new set are removed using remove() and only the new ones are added. If clear=True, the clear() method is called instead and the whole set is added at once. For ForeignKey objects, the bulk argument is passed on to add() and remove(). For many-to-many relationships, the bulk keyword argument doesn\u2019t exist. Note that since set() is a compound operation, it is subject to race conditions. For instance, new objects may be added to the database in between the call to clear() and the call to add(). For many-to-many relationships set() accepts a list of either model instances or field values, normally primary keys, as the objs argument. Use the through_defaults argument to specify values for the new intermediate model instance(s), if needed. You can use callables as values in the through_defaults dictionary and they will be evaluated once before creating any intermediate instance(s). \n"}, {"name": "db.models.FileField", "path": "ref/models/fields#django.db.models.FileField", "type": "django.db.models", "text": " \nclass FileField(upload_to=None, max_length=100, **options) \n"}, {"name": "db.models.FileField.storage", "path": "ref/models/fields#django.db.models.FileField.storage", "type": "django.db.models", "text": " \nFileField.storage  \nA storage object, or a callable which returns a storage object. This handles the storage and retrieval of your files. See Managing files for details on how to provide this object. \n"}, {"name": "db.models.FileField.upload_to", "path": "ref/models/fields#django.db.models.FileField.upload_to", "type": "django.db.models", "text": " \nFileField.upload_to  \nThis attribute provides a way of setting the upload directory and file name, and can be set in two ways. In both cases, the value is passed to the Storage.save() method. If you specify a string value or a Path, it may contain strftime() formatting, which will be replaced by the date/time of the file upload (so that uploaded files don\u2019t fill up the given directory). For example: class MyModel(models.Model):\n    # file will be uploaded to MEDIA_ROOT/uploads\n    upload = models.FileField(upload_to='uploads/')\n    # or...\n    # file will be saved to MEDIA_ROOT/uploads/2015/01/30\n    upload = models.FileField(upload_to='uploads/%Y/%m/%d/')\n If you are using the default FileSystemStorage, the string value will be appended to your MEDIA_ROOT path to form the location on the local filesystem where uploaded files will be stored. If you are using a different storage, check that storage\u2019s documentation to see how it handles upload_to. upload_to may also be a callable, such as a function. This will be called to obtain the upload path, including the filename. This callable must accept two arguments and return a Unix-style path (with forward slashes) to be passed along to the storage system. The two arguments are:   \nArgument Description   \ninstance \nAn instance of the model where the FileField is defined. More specifically, this is the particular instance where the current file is being attached. In most cases, this object will not have been saved to the database yet, so if it uses the default AutoField, it might not yet have a value for its primary key field.   \nfilename The filename that was originally given to the file. This may or may not be taken into account when determining the final destination path.   For example: def user_directory_path(instance, filename):\n    # file will be uploaded to MEDIA_ROOT/user_<id>/<filename>\n    return 'user_{0}/{1}'.format(instance.user.id, filename)\n\nclass MyModel(models.Model):\n    upload = models.FileField(upload_to=user_directory_path)\n \n"}, {"name": "db.models.FilePathField", "path": "ref/models/fields#django.db.models.FilePathField", "type": "django.db.models", "text": " \nclass FilePathField(path='', match=None, recursive=False, allow_files=True, allow_folders=False, max_length=100, **options) \n"}, {"name": "db.models.FilePathField.allow_files", "path": "ref/models/fields#django.db.models.FilePathField.allow_files", "type": "django.db.models", "text": " \nFilePathField.allow_files  \nOptional. Either True or False. Default is True. Specifies whether files in the specified location should be included. Either this or allow_folders must be True. \n"}, {"name": "db.models.FilePathField.allow_folders", "path": "ref/models/fields#django.db.models.FilePathField.allow_folders", "type": "django.db.models", "text": " \nFilePathField.allow_folders  \nOptional. Either True or False. Default is False. Specifies whether folders in the specified location should be included. Either this or allow_files must be True. \n"}, {"name": "db.models.FilePathField.match", "path": "ref/models/fields#django.db.models.FilePathField.match", "type": "django.db.models", "text": " \nFilePathField.match  \nOptional. A regular expression, as a string, that FilePathField will use to filter filenames. Note that the regex will be applied to the base filename, not the full path. Example: \"foo.*\\.txt$\", which will match a file called foo23.txt but not bar.txt or foo23.png. \n"}, {"name": "db.models.FilePathField.path", "path": "ref/models/fields#django.db.models.FilePathField.path", "type": "django.db.models", "text": " \nFilePathField.path  \nRequired. The absolute filesystem path to a directory from which this FilePathField should get its choices. Example: \"/home/images\". path may also be a callable, such as a function to dynamically set the path at runtime. Example: import os\nfrom django.conf import settings\nfrom django.db import models\n\ndef images_path():\n    return os.path.join(settings.LOCAL_FILE_DIR, 'images')\n\nclass MyModel(models.Model):\n    file = models.FilePathField(path=images_path)\n \n"}, {"name": "db.models.FilePathField.recursive", "path": "ref/models/fields#django.db.models.FilePathField.recursive", "type": "django.db.models", "text": " \nFilePathField.recursive  \nOptional. Either True or False. Default is False. Specifies whether all subdirectories of path should be included \n"}, {"name": "db.models.FilteredRelation", "path": "ref/models/querysets#django.db.models.FilteredRelation", "type": "django.db.models", "text": " \nclass FilteredRelation(relation_name, *, condition=Q())  \n \nrelation_name  \nThe name of the field on which you\u2019d like to filter the relation. \n  \ncondition  \nA Q object to control the filtering. \n \n"}, {"name": "db.models.FilteredRelation.condition", "path": "ref/models/querysets#django.db.models.FilteredRelation.condition", "type": "django.db.models", "text": " \ncondition  \nA Q object to control the filtering. \n"}, {"name": "db.models.FilteredRelation.relation_name", "path": "ref/models/querysets#django.db.models.FilteredRelation.relation_name", "type": "django.db.models", "text": " \nrelation_name  \nThe name of the field on which you\u2019d like to filter the relation. \n"}, {"name": "db.models.FloatField", "path": "ref/models/fields#django.db.models.FloatField", "type": "django.db.models", "text": " \nclass FloatField(**options) \n"}, {"name": "db.models.ForeignKey", "path": "ref/models/fields#django.db.models.ForeignKey", "type": "django.db.models", "text": " \nclass ForeignKey(to, on_delete, **options) \n"}, {"name": "db.models.ForeignKey.db_constraint", "path": "ref/models/fields#django.db.models.ForeignKey.db_constraint", "type": "django.db.models", "text": " \nForeignKey.db_constraint  \nControls whether or not a constraint should be created in the database for this foreign key. The default is True, and that\u2019s almost certainly what you want; setting this to False can be very bad for data integrity. That said, here are some scenarios where you might want to do this:  You have legacy data that is not valid. You\u2019re sharding your database.  If this is set to False, accessing a related object that doesn\u2019t exist will raise its DoesNotExist exception. \n"}, {"name": "db.models.ForeignKey.limit_choices_to", "path": "ref/models/fields#django.db.models.ForeignKey.limit_choices_to", "type": "django.db.models", "text": " \nForeignKey.limit_choices_to  \nSets a limit to the available choices for this field when this field is rendered using a ModelForm or the admin (by default, all objects in the queryset are available to choose). Either a dictionary, a Q object, or a callable returning a dictionary or Q object can be used. For example: staff_member = models.ForeignKey(\n    User,\n    on_delete=models.CASCADE,\n    limit_choices_to={'is_staff': True},\n)\n causes the corresponding field on the ModelForm to list only Users that have is_staff=True. This may be helpful in the Django admin. The callable form can be helpful, for instance, when used in conjunction with the Python datetime module to limit selections by date range. For example: def limit_pub_date_choices():\n    return {'pub_date__lte': datetime.date.today()}\n\nlimit_choices_to = limit_pub_date_choices\n If limit_choices_to is or returns a Q object, which is useful for complex queries, then it will only have an effect on the choices available in the admin when the field is not listed in raw_id_fields in the ModelAdmin for the model.  Note If a callable is used for limit_choices_to, it will be invoked every time a new form is instantiated. It may also be invoked when a model is validated, for example by management commands or the admin. The admin constructs querysets to validate its form inputs in various edge cases multiple times, so there is a possibility your callable may be invoked several times.  \n"}, {"name": "db.models.ForeignKey.on_delete", "path": "ref/models/fields#django.db.models.ForeignKey.on_delete", "type": "django.db.models", "text": " \nForeignKey.on_delete  \nWhen an object referenced by a ForeignKey is deleted, Django will emulate the behavior of the SQL constraint specified by the on_delete argument. For example, if you have a nullable ForeignKey and you want it to be set null when the referenced object is deleted: user = models.ForeignKey(\n    User,\n    models.SET_NULL,\n    blank=True,\n    null=True,\n)\n on_delete doesn\u2019t create an SQL constraint in the database. Support for database-level cascade options may be implemented later. \n"}, {"name": "db.models.ForeignKey.related_name", "path": "ref/models/fields#django.db.models.ForeignKey.related_name", "type": "django.db.models", "text": " \nForeignKey.related_name  \nThe name to use for the relation from the related object back to this one. It\u2019s also the default value for related_query_name (the name to use for the reverse filter name from the target model). See the related objects documentation for a full explanation and example. Note that you must set this value when defining relations on abstract models; and when you do so some special syntax is available. If you\u2019d prefer Django not to create a backwards relation, set related_name to '+' or end it with '+'. For example, this will ensure that the User model won\u2019t have a backwards relation to this model: user = models.ForeignKey(\n    User,\n    on_delete=models.CASCADE,\n    related_name='+',\n)\n \n"}, {"name": "db.models.ForeignKey.related_query_name", "path": "ref/models/fields#django.db.models.ForeignKey.related_query_name", "type": "django.db.models", "text": " \nForeignKey.related_query_name  \nThe name to use for the reverse filter name from the target model. It defaults to the value of related_name or default_related_name if set, otherwise it defaults to the name of the model: # Declare the ForeignKey with related_query_name\nclass Tag(models.Model):\n    article = models.ForeignKey(\n        Article,\n        on_delete=models.CASCADE,\n        related_name=\"tags\",\n        related_query_name=\"tag\",\n    )\n    name = models.CharField(max_length=255)\n\n# That's now the name of the reverse filter\nArticle.objects.filter(tag__name=\"important\")\n Like related_name, related_query_name supports app label and class interpolation via some special syntax. \n"}, {"name": "db.models.ForeignKey.swappable", "path": "ref/models/fields#django.db.models.ForeignKey.swappable", "type": "django.db.models", "text": " \nForeignKey.swappable  \nControls the migration framework\u2019s reaction if this ForeignKey is pointing at a swappable model. If it is True - the default - then if the ForeignKey is pointing at a model which matches the current value of settings.AUTH_USER_MODEL (or another swappable model setting) the relationship will be stored in the migration using a reference to the setting, not to the model directly. You only want to override this to be False if you are sure your model should always point toward the swapped-in model - for example, if it is a profile model designed specifically for your custom user model. Setting it to False does not mean you can reference a swappable model even if it is swapped out - False means that the migrations made with this ForeignKey will always reference the exact model you specify (so it will fail hard if the user tries to run with a User model you don\u2019t support, for example). If in doubt, leave it to its default of True. \n"}, {"name": "db.models.ForeignKey.to_field", "path": "ref/models/fields#django.db.models.ForeignKey.to_field", "type": "django.db.models", "text": " \nForeignKey.to_field  \nThe field on the related object that the relation is to. By default, Django uses the primary key of the related object. If you reference a different field, that field must have unique=True. \n"}, {"name": "db.models.Func", "path": "ref/models/expressions#django.db.models.Func", "type": "django.db.models", "text": " \nclass Func(*expressions, **extra)  \n \nfunction  \nA class attribute describing the function that will be generated. Specifically, the function will be interpolated as the function placeholder within template. Defaults to None. \n  \ntemplate  \nA class attribute, as a format string, that describes the SQL that is generated for this function. Defaults to '%(function)s(%(expressions)s)'. If you\u2019re constructing SQL like strftime('%W', 'date') and need a literal % character in the query, quadruple it (%%%%) in the template attribute because the string is interpolated twice: once during the template interpolation in as_sql() and once in the SQL interpolation with the query parameters in the database cursor. \n  \narg_joiner  \nA class attribute that denotes the character used to join the list of expressions together. Defaults to ', '. \n  \narity  \nA class attribute that denotes the number of arguments the function accepts. If this attribute is set and the function is called with a different number of expressions, TypeError will be raised. Defaults to None. \n  \nas_sql(compiler, connection, function=None, template=None, arg_joiner=None, **extra_context)  \nGenerates the SQL fragment for the database function. Returns a tuple (sql, params), where sql is the SQL string, and params is the list or tuple of query parameters. The as_vendor() methods should use the function, template, arg_joiner, and any other **extra_context parameters to customize the SQL as needed. For example:  django/db/models/functions.py class ConcatPair(Func):\n    ...\n    function = 'CONCAT'\n    ...\n\n    def as_mysql(self, compiler, connection, **extra_context):\n        return super().as_sql(\n            compiler, connection,\n            function='CONCAT_WS',\n            template=\"%(function)s('', %(expressions)s)\",\n            **extra_context\n        )\n  To avoid an SQL injection vulnerability, extra_context must not contain untrusted user input as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them. \n \n"}, {"name": "db.models.Func.arg_joiner", "path": "ref/models/expressions#django.db.models.Func.arg_joiner", "type": "django.db.models", "text": " \narg_joiner  \nA class attribute that denotes the character used to join the list of expressions together. Defaults to ', '. \n"}, {"name": "db.models.Func.arity", "path": "ref/models/expressions#django.db.models.Func.arity", "type": "django.db.models", "text": " \narity  \nA class attribute that denotes the number of arguments the function accepts. If this attribute is set and the function is called with a different number of expressions, TypeError will be raised. Defaults to None. \n"}, {"name": "db.models.Func.as_sql()", "path": "ref/models/expressions#django.db.models.Func.as_sql", "type": "django.db.models", "text": " \nas_sql(compiler, connection, function=None, template=None, arg_joiner=None, **extra_context)  \nGenerates the SQL fragment for the database function. Returns a tuple (sql, params), where sql is the SQL string, and params is the list or tuple of query parameters. The as_vendor() methods should use the function, template, arg_joiner, and any other **extra_context parameters to customize the SQL as needed. For example:  django/db/models/functions.py class ConcatPair(Func):\n    ...\n    function = 'CONCAT'\n    ...\n\n    def as_mysql(self, compiler, connection, **extra_context):\n        return super().as_sql(\n            compiler, connection,\n            function='CONCAT_WS',\n            template=\"%(function)s('', %(expressions)s)\",\n            **extra_context\n        )\n  To avoid an SQL injection vulnerability, extra_context must not contain untrusted user input as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them. \n"}, {"name": "db.models.Func.function", "path": "ref/models/expressions#django.db.models.Func.function", "type": "django.db.models", "text": " \nfunction  \nA class attribute describing the function that will be generated. Specifically, the function will be interpolated as the function placeholder within template. Defaults to None. \n"}, {"name": "db.models.Func.template", "path": "ref/models/expressions#django.db.models.Func.template", "type": "django.db.models", "text": " \ntemplate  \nA class attribute, as a format string, that describes the SQL that is generated for this function. Defaults to '%(function)s(%(expressions)s)'. If you\u2019re constructing SQL like strftime('%W', 'date') and need a literal % character in the query, quadruple it (%%%%) in the template attribute because the string is interpolated twice: once during the template interpolation in as_sql() and once in the SQL interpolation with the query parameters in the database cursor. \n"}, {"name": "db.models.functions.Abs", "path": "ref/models/database-functions#django.db.models.functions.Abs", "type": "django.db.models", "text": " \nclass Abs(expression, **extra) \n"}, {"name": "db.models.functions.ACos", "path": "ref/models/database-functions#django.db.models.functions.ACos", "type": "django.db.models", "text": " \nclass ACos(expression, **extra) \n"}, {"name": "db.models.functions.ASin", "path": "ref/models/database-functions#django.db.models.functions.ASin", "type": "django.db.models", "text": " \nclass ASin(expression, **extra) \n"}, {"name": "db.models.functions.ATan", "path": "ref/models/database-functions#django.db.models.functions.ATan", "type": "django.db.models", "text": " \nclass ATan(expression, **extra) \n"}, {"name": "db.models.functions.ATan2", "path": "ref/models/database-functions#django.db.models.functions.ATan2", "type": "django.db.models", "text": " \nclass ATan2(expression1, expression2, **extra) \n"}, {"name": "db.models.functions.Cast", "path": "ref/models/database-functions#django.db.models.functions.Cast", "type": "django.db.models", "text": " \nclass Cast(expression, output_field) \n"}, {"name": "db.models.functions.Ceil", "path": "ref/models/database-functions#django.db.models.functions.Ceil", "type": "django.db.models", "text": " \nclass Ceil(expression, **extra) \n"}, {"name": "db.models.functions.Chr", "path": "ref/models/database-functions#django.db.models.functions.Chr", "type": "django.db.models", "text": " \nclass Chr(expression, **extra) \n"}, {"name": "db.models.functions.Coalesce", "path": "ref/models/database-functions#django.db.models.functions.Coalesce", "type": "django.db.models", "text": " \nclass Coalesce(*expressions, **extra) \n"}, {"name": "db.models.functions.Collate", "path": "ref/models/database-functions#django.db.models.functions.Collate", "type": "django.db.models", "text": " \nclass Collate(expression, collation) \n"}, {"name": "db.models.functions.Concat", "path": "ref/models/database-functions#django.db.models.functions.Concat", "type": "django.db.models", "text": " \nclass Concat(*expressions, **extra) \n"}, {"name": "db.models.functions.Cos", "path": "ref/models/database-functions#django.db.models.functions.Cos", "type": "django.db.models", "text": " \nclass Cos(expression, **extra) \n"}, {"name": "db.models.functions.Cot", "path": "ref/models/database-functions#django.db.models.functions.Cot", "type": "django.db.models", "text": " \nclass Cot(expression, **extra) \n"}, {"name": "db.models.functions.CumeDist", "path": "ref/models/database-functions#django.db.models.functions.CumeDist", "type": "django.db.models", "text": " \nclass CumeDist(*expressions, **extra) \n"}, {"name": "db.models.functions.Degrees", "path": "ref/models/database-functions#django.db.models.functions.Degrees", "type": "django.db.models", "text": " \nclass Degrees(expression, **extra) \n"}, {"name": "db.models.functions.DenseRank", "path": "ref/models/database-functions#django.db.models.functions.DenseRank", "type": "django.db.models", "text": " \nclass DenseRank(*expressions, **extra) \n"}, {"name": "db.models.functions.Exp", "path": "ref/models/database-functions#django.db.models.functions.Exp", "type": "django.db.models", "text": " \nclass Exp(expression, **extra) \n"}, {"name": "db.models.functions.Extract", "path": "ref/models/database-functions#django.db.models.functions.Extract", "type": "django.db.models", "text": " \nclass Extract(expression, lookup_name=None, tzinfo=None, **extra) \n"}, {"name": "db.models.functions.ExtractDay", "path": "ref/models/database-functions#django.db.models.functions.ExtractDay", "type": "django.db.models", "text": " \nclass ExtractDay(expression, tzinfo=None, **extra)  \n \nlookup_name = 'day' \n \n"}, {"name": "db.models.functions.ExtractHour", "path": "ref/models/database-functions#django.db.models.functions.ExtractHour", "type": "django.db.models", "text": " \nclass ExtractHour(expression, tzinfo=None, **extra)  \n \nlookup_name = 'hour' \n \n"}, {"name": "db.models.functions.ExtractIsoWeekDay", "path": "ref/models/database-functions#django.db.models.functions.ExtractIsoWeekDay", "type": "django.db.models", "text": " \nclass ExtractIsoWeekDay(expression, tzinfo=None, **extra)  \nReturns the ISO-8601 week day with day 1 being Monday and day 7 being Sunday.  \nlookup_name = 'iso_week_day' \n \n"}, {"name": "db.models.functions.ExtractIsoYear", "path": "ref/models/database-functions#django.db.models.functions.ExtractIsoYear", "type": "django.db.models", "text": " \nclass ExtractIsoYear(expression, tzinfo=None, **extra)  \nReturns the ISO-8601 week-numbering year.  \nlookup_name = 'iso_year' \n \n"}, {"name": "db.models.functions.ExtractMinute", "path": "ref/models/database-functions#django.db.models.functions.ExtractMinute", "type": "django.db.models", "text": " \nclass ExtractMinute(expression, tzinfo=None, **extra)  \n \nlookup_name = 'minute' \n \n"}, {"name": "db.models.functions.ExtractMonth", "path": "ref/models/database-functions#django.db.models.functions.ExtractMonth", "type": "django.db.models", "text": " \nclass ExtractMonth(expression, tzinfo=None, **extra)  \n \nlookup_name = 'month' \n \n"}, {"name": "db.models.functions.ExtractQuarter", "path": "ref/models/database-functions#django.db.models.functions.ExtractQuarter", "type": "django.db.models", "text": " \nclass ExtractQuarter(expression, tzinfo=None, **extra)  \n \nlookup_name = 'quarter' \n \n"}, {"name": "db.models.functions.ExtractSecond", "path": "ref/models/database-functions#django.db.models.functions.ExtractSecond", "type": "django.db.models", "text": " \nclass ExtractSecond(expression, tzinfo=None, **extra)  \n \nlookup_name = 'second' \n \n"}, {"name": "db.models.functions.ExtractWeek", "path": "ref/models/database-functions#django.db.models.functions.ExtractWeek", "type": "django.db.models", "text": " \nclass ExtractWeek(expression, tzinfo=None, **extra)  \n \nlookup_name = 'week' \n \n"}, {"name": "db.models.functions.ExtractWeekDay", "path": "ref/models/database-functions#django.db.models.functions.ExtractWeekDay", "type": "django.db.models", "text": " \nclass ExtractWeekDay(expression, tzinfo=None, **extra)  \n \nlookup_name = 'week_day' \n \n"}, {"name": "db.models.functions.ExtractYear", "path": "ref/models/database-functions#django.db.models.functions.ExtractYear", "type": "django.db.models", "text": " \nclass ExtractYear(expression, tzinfo=None, **extra)  \n \nlookup_name = 'year' \n \n"}, {"name": "db.models.functions.FirstValue", "path": "ref/models/database-functions#django.db.models.functions.FirstValue", "type": "django.db.models", "text": " \nclass FirstValue(expression, **extra) \n"}, {"name": "db.models.functions.Floor", "path": "ref/models/database-functions#django.db.models.functions.Floor", "type": "django.db.models", "text": " \nclass Floor(expression, **extra) \n"}, {"name": "db.models.functions.Greatest", "path": "ref/models/database-functions#django.db.models.functions.Greatest", "type": "django.db.models", "text": " \nclass Greatest(*expressions, **extra) \n"}, {"name": "db.models.functions.JSONObject", "path": "ref/models/database-functions#django.db.models.functions.JSONObject", "type": "django.db.models", "text": " \nclass JSONObject(**fields) \n"}, {"name": "db.models.functions.Lag", "path": "ref/models/database-functions#django.db.models.functions.Lag", "type": "django.db.models", "text": " \nclass Lag(expression, offset=1, default=None, **extra) \n"}, {"name": "db.models.functions.LastValue", "path": "ref/models/database-functions#django.db.models.functions.LastValue", "type": "django.db.models", "text": " \nclass LastValue(expression, **extra) \n"}, {"name": "db.models.functions.Lead", "path": "ref/models/database-functions#django.db.models.functions.Lead", "type": "django.db.models", "text": " \nclass Lead(expression, offset=1, default=None, **extra) \n"}, {"name": "db.models.functions.Least", "path": "ref/models/database-functions#django.db.models.functions.Least", "type": "django.db.models", "text": " \nclass Least(*expressions, **extra) \n"}, {"name": "db.models.functions.Left", "path": "ref/models/database-functions#django.db.models.functions.Left", "type": "django.db.models", "text": " \nclass Left(expression, length, **extra) \n"}, {"name": "db.models.functions.Length", "path": "ref/models/database-functions#django.db.models.functions.Length", "type": "django.db.models", "text": " \nclass Length(expression, **extra) \n"}, {"name": "db.models.functions.Ln", "path": "ref/models/database-functions#django.db.models.functions.Ln", "type": "django.db.models", "text": " \nclass Ln(expression, **extra) \n"}, {"name": "db.models.functions.Log", "path": "ref/models/database-functions#django.db.models.functions.Log", "type": "django.db.models", "text": " \nclass Log(expression1, expression2, **extra) \n"}, {"name": "db.models.functions.Lower", "path": "ref/models/database-functions#django.db.models.functions.Lower", "type": "django.db.models", "text": " \nclass Lower(expression, **extra) \n"}, {"name": "db.models.functions.LPad", "path": "ref/models/database-functions#django.db.models.functions.LPad", "type": "django.db.models", "text": " \nclass LPad(expression, length, fill_text=Value(' '), **extra) \n"}, {"name": "db.models.functions.LTrim", "path": "ref/models/database-functions#django.db.models.functions.LTrim", "type": "django.db.models", "text": " \nclass LTrim(expression, **extra) \n"}, {"name": "db.models.functions.MD5", "path": "ref/models/database-functions#django.db.models.functions.MD5", "type": "django.db.models", "text": " \nclass MD5(expression, **extra) \n"}, {"name": "db.models.functions.Mod", "path": "ref/models/database-functions#django.db.models.functions.Mod", "type": "django.db.models", "text": " \nclass Mod(expression1, expression2, **extra) \n"}, {"name": "db.models.functions.Now", "path": "ref/models/database-functions#django.db.models.functions.Now", "type": "django.db.models", "text": " \nclass Now \n"}, {"name": "db.models.functions.NthValue", "path": "ref/models/database-functions#django.db.models.functions.NthValue", "type": "django.db.models", "text": " \nclass NthValue(expression, nth=1, **extra) \n"}, {"name": "db.models.functions.Ntile", "path": "ref/models/database-functions#django.db.models.functions.Ntile", "type": "django.db.models", "text": " \nclass Ntile(num_buckets=1, **extra) \n"}, {"name": "db.models.functions.NullIf", "path": "ref/models/database-functions#django.db.models.functions.NullIf", "type": "django.db.models", "text": " \nclass NullIf(expression1, expression2) \n"}, {"name": "db.models.functions.Ord", "path": "ref/models/database-functions#django.db.models.functions.Ord", "type": "django.db.models", "text": " \nclass Ord(expression, **extra) \n"}, {"name": "db.models.functions.PercentRank", "path": "ref/models/database-functions#django.db.models.functions.PercentRank", "type": "django.db.models", "text": " \nclass PercentRank(*expressions, **extra) \n"}, {"name": "db.models.functions.Pi", "path": "ref/models/database-functions#django.db.models.functions.Pi", "type": "django.db.models", "text": " \nclass Pi(**extra) \n"}, {"name": "db.models.functions.Power", "path": "ref/models/database-functions#django.db.models.functions.Power", "type": "django.db.models", "text": " \nclass Power(expression1, expression2, **extra) \n"}, {"name": "db.models.functions.Radians", "path": "ref/models/database-functions#django.db.models.functions.Radians", "type": "django.db.models", "text": " \nclass Radians(expression, **extra) \n"}, {"name": "db.models.functions.Random", "path": "ref/models/database-functions#django.db.models.functions.Random", "type": "django.db.models", "text": " \nclass Random(**extra) \n"}, {"name": "db.models.functions.Rank", "path": "ref/models/database-functions#django.db.models.functions.Rank", "type": "django.db.models", "text": " \nclass Rank(*expressions, **extra) \n"}, {"name": "db.models.functions.Repeat", "path": "ref/models/database-functions#django.db.models.functions.Repeat", "type": "django.db.models", "text": " \nclass Repeat(expression, number, **extra) \n"}, {"name": "db.models.functions.Replace", "path": "ref/models/database-functions#django.db.models.functions.Replace", "type": "django.db.models", "text": " \nclass Replace(expression, text, replacement=Value(''), **extra) \n"}, {"name": "db.models.functions.Reverse", "path": "ref/models/database-functions#django.db.models.functions.Reverse", "type": "django.db.models", "text": " \nclass Reverse(expression, **extra) \n"}, {"name": "db.models.functions.Right", "path": "ref/models/database-functions#django.db.models.functions.Right", "type": "django.db.models", "text": " \nclass Right(expression, length, **extra) \n"}, {"name": "db.models.functions.Round", "path": "ref/models/database-functions#django.db.models.functions.Round", "type": "django.db.models", "text": " \nclass Round(expression, precision=0, **extra) \n"}, {"name": "db.models.functions.RowNumber", "path": "ref/models/database-functions#django.db.models.functions.RowNumber", "type": "django.db.models", "text": " \nclass RowNumber(*expressions, **extra) \n"}, {"name": "db.models.functions.RPad", "path": "ref/models/database-functions#django.db.models.functions.RPad", "type": "django.db.models", "text": " \nclass RPad(expression, length, fill_text=Value(' '), **extra) \n"}, {"name": "db.models.functions.RTrim", "path": "ref/models/database-functions#django.db.models.functions.RTrim", "type": "django.db.models", "text": " \nclass RTrim(expression, **extra) \n"}, {"name": "db.models.functions.SHA1", "path": "ref/models/database-functions#django.db.models.functions.SHA1", "type": "django.db.models", "text": " \nclass SHA1(expression, **extra) \n"}, {"name": "db.models.functions.SHA224", "path": "ref/models/database-functions#django.db.models.functions.SHA224", "type": "django.db.models", "text": " \nclass SHA224(expression, **extra) \n"}, {"name": "db.models.functions.SHA256", "path": "ref/models/database-functions#django.db.models.functions.SHA256", "type": "django.db.models", "text": " \nclass SHA256(expression, **extra) \n"}, {"name": "db.models.functions.SHA384", "path": "ref/models/database-functions#django.db.models.functions.SHA384", "type": "django.db.models", "text": " \nclass SHA384(expression, **extra) \n"}, {"name": "db.models.functions.SHA512", "path": "ref/models/database-functions#django.db.models.functions.SHA512", "type": "django.db.models", "text": " \nclass SHA512(expression, **extra) \n"}, {"name": "db.models.functions.Sign", "path": "ref/models/database-functions#django.db.models.functions.Sign", "type": "django.db.models", "text": " \nclass Sign(expression, **extra) \n"}, {"name": "db.models.functions.Sin", "path": "ref/models/database-functions#django.db.models.functions.Sin", "type": "django.db.models", "text": " \nclass Sin(expression, **extra) \n"}, {"name": "db.models.functions.Sqrt", "path": "ref/models/database-functions#django.db.models.functions.Sqrt", "type": "django.db.models", "text": " \nclass Sqrt(expression, **extra) \n"}, {"name": "db.models.functions.StrIndex", "path": "ref/models/database-functions#django.db.models.functions.StrIndex", "type": "django.db.models", "text": " \nclass StrIndex(string, substring, **extra) \n"}, {"name": "db.models.functions.Substr", "path": "ref/models/database-functions#django.db.models.functions.Substr", "type": "django.db.models", "text": " \nclass Substr(expression, pos, length=None, **extra) \n"}, {"name": "db.models.functions.Tan", "path": "ref/models/database-functions#django.db.models.functions.Tan", "type": "django.db.models", "text": " \nclass Tan(expression, **extra) \n"}, {"name": "db.models.functions.Trim", "path": "ref/models/database-functions#django.db.models.functions.Trim", "type": "django.db.models", "text": " \nclass Trim(expression, **extra) \n"}, {"name": "db.models.functions.Trunc", "path": "ref/models/database-functions#django.db.models.functions.Trunc", "type": "django.db.models", "text": " \nclass Trunc(expression, kind, output_field=None, tzinfo=None, is_dst=None, **extra) \n"}, {"name": "db.models.functions.TruncDate", "path": "ref/models/database-functions#django.db.models.functions.TruncDate", "type": "django.db.models", "text": " \nclass TruncDate(expression, tzinfo=None, **extra)  \n \nlookup_name = 'date' \n  \noutput_field = DateField() \n  Changed in Django 3.2: The tzinfo parameter was added.  \n"}, {"name": "db.models.functions.TruncDay", "path": "ref/models/database-functions#django.db.models.functions.TruncDay", "type": "django.db.models", "text": " \nclass TruncDay(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'day' \n \n"}, {"name": "db.models.functions.TruncHour", "path": "ref/models/database-functions#django.db.models.functions.TruncHour", "type": "django.db.models", "text": " \nclass TruncHour(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'hour' \n \n"}, {"name": "db.models.functions.TruncMinute", "path": "ref/models/database-functions#django.db.models.functions.TruncMinute", "type": "django.db.models", "text": " \nclass TruncMinute(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'minute' \n \n"}, {"name": "db.models.functions.TruncMonth", "path": "ref/models/database-functions#django.db.models.functions.TruncMonth", "type": "django.db.models", "text": " \nclass TruncMonth(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'month' \n \n"}, {"name": "db.models.functions.TruncQuarter", "path": "ref/models/database-functions#django.db.models.functions.TruncQuarter", "type": "django.db.models", "text": " \nclass TruncQuarter(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'quarter' \n \n"}, {"name": "db.models.functions.TruncSecond", "path": "ref/models/database-functions#django.db.models.functions.TruncSecond", "type": "django.db.models", "text": " \nclass TruncSecond(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'second' \n \n"}, {"name": "db.models.functions.TruncTime", "path": "ref/models/database-functions#django.db.models.functions.TruncTime", "type": "django.db.models", "text": " \nclass TruncTime(expression, tzinfo=None, **extra)  \n \nlookup_name = 'time' \n  \noutput_field = TimeField() \n  Changed in Django 3.2: The tzinfo parameter was added.  \n"}, {"name": "db.models.functions.TruncWeek", "path": "ref/models/database-functions#django.db.models.functions.TruncWeek", "type": "django.db.models", "text": " \nclass TruncWeek(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \nTruncates to midnight on the Monday of the week.  \nkind = 'week' \n \n"}, {"name": "db.models.functions.TruncYear", "path": "ref/models/database-functions#django.db.models.functions.TruncYear", "type": "django.db.models", "text": " \nclass TruncYear(expression, output_field=None, tzinfo=None, is_dst=None, **extra)  \n \nkind = 'year' \n \n"}, {"name": "db.models.functions.Upper", "path": "ref/models/database-functions#django.db.models.functions.Upper", "type": "django.db.models", "text": " \nclass Upper(expression, **extra) \n"}, {"name": "db.models.GenericIPAddressField", "path": "ref/models/fields#django.db.models.GenericIPAddressField", "type": "django.db.models", "text": " \nclass GenericIPAddressField(protocol='both', unpack_ipv4=False, **options) \n"}, {"name": "db.models.GenericIPAddressField.protocol", "path": "ref/models/fields#django.db.models.GenericIPAddressField.protocol", "type": "django.db.models", "text": " \nGenericIPAddressField.protocol  \nLimits valid inputs to the specified protocol. Accepted values are 'both' (default), 'IPv4' or 'IPv6'. Matching is case insensitive. \n"}, {"name": "db.models.GenericIPAddressField.unpack_ipv4", "path": "ref/models/fields#django.db.models.GenericIPAddressField.unpack_ipv4", "type": "django.db.models", "text": " \nGenericIPAddressField.unpack_ipv4  \nUnpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'. \n"}, {"name": "db.models.get_lookup()", "path": "ref/models/lookups#django.db.models.get_lookup", "type": "django.db.models", "text": " \nget_lookup(lookup_name)  \nMust return the lookup named lookup_name. For instance, by returning self.output_field.get_lookup(lookup_name). \n"}, {"name": "db.models.get_transform()", "path": "ref/models/lookups#django.db.models.get_transform", "type": "django.db.models", "text": " \nget_transform(transform_name)  \nMust return the lookup named transform_name. For instance, by returning self.output_field.get_transform(transform_name). \n"}, {"name": "db.models.ImageField", "path": "ref/models/fields#django.db.models.ImageField", "type": "django.db.models", "text": " \nclass ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options) \n"}, {"name": "db.models.ImageField.height_field", "path": "ref/models/fields#django.db.models.ImageField.height_field", "type": "django.db.models", "text": " \nImageField.height_field  \nName of a model field which will be auto-populated with the height of the image each time the model instance is saved. \n"}, {"name": "db.models.ImageField.width_field", "path": "ref/models/fields#django.db.models.ImageField.width_field", "type": "django.db.models", "text": " \nImageField.width_field  \nName of a model field which will be auto-populated with the width of the image each time the model instance is saved. \n"}, {"name": "db.models.Index", "path": "ref/models/indexes#django.db.models.Index", "type": "django.db.models", "text": " \nclass Index(*expressions, fields=(), name=None, db_tablespace=None, opclasses=(), condition=None, include=None)  \nCreates an index (B-Tree) in the database. \n"}, {"name": "db.models.Index.condition", "path": "ref/models/indexes#django.db.models.Index.condition", "type": "django.db.models", "text": " \nIndex.condition \n"}, {"name": "db.models.Index.db_tablespace", "path": "ref/models/indexes#django.db.models.Index.db_tablespace", "type": "django.db.models", "text": " \nIndex.db_tablespace \n"}, {"name": "db.models.Index.expressions", "path": "ref/models/indexes#django.db.models.Index.expressions", "type": "django.db.models", "text": " \nIndex.expressions \n"}, {"name": "db.models.Index.fields", "path": "ref/models/indexes#django.db.models.Index.fields", "type": "django.db.models", "text": " \nIndex.fields \n"}, {"name": "db.models.Index.include", "path": "ref/models/indexes#django.db.models.Index.include", "type": "django.db.models", "text": " \nIndex.include \n"}, {"name": "db.models.Index.name", "path": "ref/models/indexes#django.db.models.Index.name", "type": "django.db.models", "text": " \nIndex.name \n"}, {"name": "db.models.Index.opclasses", "path": "ref/models/indexes#django.db.models.Index.opclasses", "type": "django.db.models", "text": " \nIndex.opclasses \n"}, {"name": "db.models.IntegerField", "path": "ref/models/fields#django.db.models.IntegerField", "type": "django.db.models", "text": " \nclass IntegerField(**options) \n"}, {"name": "db.models.JSONField", "path": "ref/models/fields#django.db.models.JSONField", "type": "django.db.models", "text": " \nclass JSONField(encoder=None, decoder=None, **options) \n"}, {"name": "db.models.JSONField.decoder", "path": "ref/models/fields#django.db.models.JSONField.decoder", "type": "django.db.models", "text": " \nJSONField.decoder  \nAn optional json.JSONDecoder subclass to deserialize the value retrieved from the database. The value will be in the format chosen by the custom encoder (most often a string). Your deserialization may need to account for the fact that you can\u2019t be certain of the input type. For example, you run the risk of returning a datetime that was actually a string that just happened to be in the same format chosen for datetimes. Defaults to json.JSONDecoder. \n"}, {"name": "db.models.JSONField.encoder", "path": "ref/models/fields#django.db.models.JSONField.encoder", "type": "django.db.models", "text": " \nJSONField.encoder  \nAn optional json.JSONEncoder subclass to serialize data types not supported by the standard JSON serializer (e.g. datetime.datetime or UUID). For example, you can use the DjangoJSONEncoder class. Defaults to json.JSONEncoder. \n"}, {"name": "db.models.Lookup", "path": "ref/models/lookups#django.db.models.Lookup", "type": "django.db.models", "text": " \nclass Lookup  \nA Lookup is a generic class to implement lookups. A lookup is a query expression with a left-hand side, lhs; a right-hand side, rhs; and a lookup_name that is used to produce a boolean comparison between lhs and rhs such as lhs in rhs or lhs > rhs. The primary notation to use a lookup in an expression is <lhs>__<lookup_name>=<rhs>. Lookups can also be used directly in QuerySet filters: Book.objects.filter(LessThan(F('word_count'), 7500))\n \u2026or annotations: Book.objects.annotate(is_short_story=LessThan(F('word_count'), 7500))\n  \nlhs  \nThe left-hand side - what is being looked up. The object typically follows the Query Expression API. It may also be a plain value. \n  \nrhs  \nThe right-hand side - what lhs is being compared against. It can be a plain value, or something that compiles into SQL, typically an F() object or a QuerySet. \n  \nlookup_name  \nThe name of this lookup, used to identify it on parsing query expressions. It cannot contain the string \"__\". \n  \nprocess_lhs(compiler, connection, lhs=None)  \nReturns a tuple (lhs_string, lhs_params), as returned by compiler.compile(lhs). This method can be overridden to tune how the lhs is processed. compiler is an SQLCompiler object, to be used like compiler.compile(lhs) for compiling lhs. The connection can be used for compiling vendor specific SQL. If lhs is not None, use it as the processed lhs instead of self.lhs. \n  \nprocess_rhs(compiler, connection)  \nBehaves the same way as process_lhs(), for the right-hand side. \n  Changed in Django 4.0: Support for using lookups in QuerySet annotations, aggregations, and directly in filters was added.  \n"}, {"name": "db.models.Lookup.lhs", "path": "ref/models/lookups#django.db.models.Lookup.lhs", "type": "django.db.models", "text": " \nlhs  \nThe left-hand side - what is being looked up. The object typically follows the Query Expression API. It may also be a plain value. \n"}, {"name": "db.models.Lookup.lookup_name", "path": "ref/models/lookups#django.db.models.Lookup.lookup_name", "type": "django.db.models", "text": " \nlookup_name  \nThe name of this lookup, used to identify it on parsing query expressions. It cannot contain the string \"__\". \n"}, {"name": "db.models.Lookup.process_lhs()", "path": "ref/models/lookups#django.db.models.Lookup.process_lhs", "type": "django.db.models", "text": " \nprocess_lhs(compiler, connection, lhs=None)  \nReturns a tuple (lhs_string, lhs_params), as returned by compiler.compile(lhs). This method can be overridden to tune how the lhs is processed. compiler is an SQLCompiler object, to be used like compiler.compile(lhs) for compiling lhs. The connection can be used for compiling vendor specific SQL. If lhs is not None, use it as the processed lhs instead of self.lhs. \n"}, {"name": "db.models.Lookup.process_rhs()", "path": "ref/models/lookups#django.db.models.Lookup.process_rhs", "type": "django.db.models", "text": " \nprocess_rhs(compiler, connection)  \nBehaves the same way as process_lhs(), for the right-hand side. \n"}, {"name": "db.models.Lookup.rhs", "path": "ref/models/lookups#django.db.models.Lookup.rhs", "type": "django.db.models", "text": " \nrhs  \nThe right-hand side - what lhs is being compared against. It can be a plain value, or something that compiles into SQL, typically an F() object or a QuerySet. \n"}, {"name": "db.models.lookups.RegisterLookupMixin", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin", "type": "django.db.models", "text": " \nclass lookups.RegisterLookupMixin  \nA mixin that implements the lookup API on a class.  \nclassmethod register_lookup(lookup, lookup_name=None)  \nRegisters a new lookup in the class. For example DateField.register_lookup(YearExact) will register YearExact lookup on DateField. It overrides a lookup that already exists with the same name. lookup_name will be used for this lookup if provided, otherwise lookup.lookup_name will be used. \n  \nget_lookup(lookup_name)  \nReturns the Lookup named lookup_name registered in the class. The default implementation looks recursively on all parent classes and checks if any has a registered lookup named lookup_name, returning the first match. \n  \nget_lookups()  \nReturns a dictionary of each lookup name registered in the class mapped to the Lookup class. \n  \nget_transform(transform_name)  \nReturns a Transform named transform_name. The default implementation looks recursively on all parent classes to check if any has the registered transform named transform_name, returning the first match. \n \n"}, {"name": "db.models.lookups.RegisterLookupMixin.get_lookup()", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin.get_lookup", "type": "django.db.models", "text": " \nget_lookup(lookup_name)  \nReturns the Lookup named lookup_name registered in the class. The default implementation looks recursively on all parent classes and checks if any has a registered lookup named lookup_name, returning the first match. \n"}, {"name": "db.models.lookups.RegisterLookupMixin.get_lookups()", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin.get_lookups", "type": "django.db.models", "text": " \nget_lookups()  \nReturns a dictionary of each lookup name registered in the class mapped to the Lookup class. \n"}, {"name": "db.models.lookups.RegisterLookupMixin.get_transform()", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin.get_transform", "type": "django.db.models", "text": " \nget_transform(transform_name)  \nReturns a Transform named transform_name. The default implementation looks recursively on all parent classes to check if any has the registered transform named transform_name, returning the first match. \n"}, {"name": "db.models.Manager", "path": "topics/db/managers#django.db.models.Manager", "type": "django.db.models", "text": " \nclass Manager \n"}, {"name": "db.models.Manager.raw()", "path": "topics/db/sql#django.db.models.Manager.raw", "type": "django.db.models", "text": " \nManager.raw(raw_query, params=(), translations=None) \n"}, {"name": "db.models.ManyToManyField", "path": "ref/models/fields#django.db.models.ManyToManyField", "type": "django.db.models", "text": " \nclass ManyToManyField(to, **options) \n"}, {"name": "db.models.ManyToManyField.db_constraint", "path": "ref/models/fields#django.db.models.ManyToManyField.db_constraint", "type": "django.db.models", "text": " \nManyToManyField.db_constraint  \nControls whether or not constraints should be created in the database for the foreign keys in the intermediary table. The default is True, and that\u2019s almost certainly what you want; setting this to False can be very bad for data integrity. That said, here are some scenarios where you might want to do this:  You have legacy data that is not valid. You\u2019re sharding your database.  It is an error to pass both db_constraint and through. \n"}, {"name": "db.models.ManyToManyField.db_table", "path": "ref/models/fields#django.db.models.ManyToManyField.db_table", "type": "django.db.models", "text": " \nManyToManyField.db_table  \nThe name of the table to create for storing the many-to-many data. If this is not provided, Django will assume a default name based upon the names of: the table for the model defining the relationship and the name of the field itself. \n"}, {"name": "db.models.ManyToManyField.limit_choices_to", "path": "ref/models/fields#django.db.models.ManyToManyField.limit_choices_to", "type": "django.db.models", "text": " \nManyToManyField.limit_choices_to  \nSame as ForeignKey.limit_choices_to. \n"}, {"name": "db.models.ManyToManyField.related_name", "path": "ref/models/fields#django.db.models.ManyToManyField.related_name", "type": "django.db.models", "text": " \nManyToManyField.related_name  \nSame as ForeignKey.related_name. \n"}, {"name": "db.models.ManyToManyField.related_query_name", "path": "ref/models/fields#django.db.models.ManyToManyField.related_query_name", "type": "django.db.models", "text": " \nManyToManyField.related_query_name  \nSame as ForeignKey.related_query_name. \n"}, {"name": "db.models.ManyToManyField.swappable", "path": "ref/models/fields#django.db.models.ManyToManyField.swappable", "type": "django.db.models", "text": " \nManyToManyField.swappable  \nControls the migration framework\u2019s reaction if this ManyToManyField is pointing at a swappable model. If it is True - the default - then if the ManyToManyField is pointing at a model which matches the current value of settings.AUTH_USER_MODEL (or another swappable model setting) the relationship will be stored in the migration using a reference to the setting, not to the model directly. You only want to override this to be False if you are sure your model should always point toward the swapped-in model - for example, if it is a profile model designed specifically for your custom user model. If in doubt, leave it to its default of True. \n"}, {"name": "db.models.ManyToManyField.symmetrical", "path": "ref/models/fields#django.db.models.ManyToManyField.symmetrical", "type": "django.db.models", "text": " \nManyToManyField.symmetrical  \nOnly used in the definition of ManyToManyFields on self. Consider the following model: from django.db import models\n\nclass Person(models.Model):\n    friends = models.ManyToManyField(\"self\")\n When Django processes this model, it identifies that it has a ManyToManyField on itself, and as a result, it doesn\u2019t add a person_set attribute to the Person class. Instead, the ManyToManyField is assumed to be symmetrical \u2013 that is, if I am your friend, then you are my friend. If you do not want symmetry in many-to-many relationships with self, set symmetrical to False. This will force Django to add the descriptor for the reverse relationship, allowing ManyToManyField relationships to be non-symmetrical. \n"}, {"name": "db.models.ManyToManyField.through", "path": "ref/models/fields#django.db.models.ManyToManyField.through", "type": "django.db.models", "text": " \nManyToManyField.through  \nDjango will automatically generate a table to manage many-to-many relationships. However, if you want to manually specify the intermediary table, you can use the through option to specify the Django model that represents the intermediate table that you want to use. The most common use for this option is when you want to associate extra data with a many-to-many relationship.  Note If you don\u2019t want multiple associations between the same instances, add a UniqueConstraint including the from and to fields. Django\u2019s automatically generated many-to-many tables include such a constraint.   Note Recursive relationships using an intermediary model can\u2019t determine the reverse accessors names, as they would be the same. You need to set a related_name to at least one of them. If you\u2019d prefer Django not to create a backwards relation, set related_name to '+'.  If you don\u2019t specify an explicit through model, there is still an implicit through model class you can use to directly access the table created to hold the association. It has three fields to link the models. If the source and target models differ, the following fields are generated:  \nid: the primary key of the relation. \n<containing_model>_id: the id of the model that declares the ManyToManyField. \n<other_model>_id: the id of the model that the ManyToManyField points to.  If the ManyToManyField points from and to the same model, the following fields are generated:  \nid: the primary key of the relation. \nfrom_<model>_id: the id of the instance which points at the model (i.e. the source instance). \nto_<model>_id: the id of the instance to which the relationship points (i.e. the target model instance).  This class can be used to query associated records for a given model instance like a normal model: Model.m2mfield.through.objects.all()\n \n"}, {"name": "db.models.ManyToManyField.through_fields", "path": "ref/models/fields#django.db.models.ManyToManyField.through_fields", "type": "django.db.models", "text": " \nManyToManyField.through_fields  \nOnly used when a custom intermediary model is specified. Django will normally determine which fields of the intermediary model to use in order to establish a many-to-many relationship automatically. However, consider the following models: from django.db import models\n\nclass Person(models.Model):\n    name = models.CharField(max_length=50)\n\nclass Group(models.Model):\n    name = models.CharField(max_length=128)\n    members = models.ManyToManyField(\n        Person,\n        through='Membership',\n        through_fields=('group', 'person'),\n    )\n\nclass Membership(models.Model):\n    group = models.ForeignKey(Group, on_delete=models.CASCADE)\n    person = models.ForeignKey(Person, on_delete=models.CASCADE)\n    inviter = models.ForeignKey(\n        Person,\n        on_delete=models.CASCADE,\n        related_name=\"membership_invites\",\n    )\n    invite_reason = models.CharField(max_length=64)\n Membership has two foreign keys to Person (person and inviter), which makes the relationship ambiguous and Django can\u2019t know which one to use. In this case, you must explicitly specify which foreign keys Django should use using through_fields, as in the example above. through_fields accepts a 2-tuple ('field1', 'field2'), where field1 is the name of the foreign key to the model the ManyToManyField is defined on (group in this case), and field2 the name of the foreign key to the target model (person in this case). When you have more than one foreign key on an intermediary model to any (or even both) of the models participating in a many-to-many relationship, you must specify through_fields. This also applies to recursive relationships when an intermediary model is used and there are more than two foreign keys to the model, or you want to explicitly specify which two Django should use. \n"}, {"name": "db.models.Max", "path": "ref/models/querysets#django.db.models.Max", "type": "django.db.models", "text": " \nclass Max(expression, output_field=None, filter=None, default=None, **extra)  \nReturns the maximum value of the given expression.  Default alias: <field>__max\n Return type: same as input field, or output_field if supplied  \n"}, {"name": "db.models.Min", "path": "ref/models/querysets#django.db.models.Min", "type": "django.db.models", "text": " \nclass Min(expression, output_field=None, filter=None, default=None, **extra)  \nReturns the minimum value of the given expression.  Default alias: <field>__min\n Return type: same as input field, or output_field if supplied  \n"}, {"name": "db.models.Model", "path": "ref/models/instances#django.db.models.Model", "type": "django.db.models", "text": " \nclass Model(**kwargs) \n"}, {"name": "db.models.Model.__eq__()", "path": "ref/models/instances#django.db.models.Model.__eq__", "type": "django.db.models", "text": " \nModel.__eq__() \n"}, {"name": "db.models.Model.__hash__()", "path": "ref/models/instances#django.db.models.Model.__hash__", "type": "django.db.models", "text": " \nModel.__hash__() \n"}, {"name": "db.models.Model.__str__()", "path": "ref/models/instances#django.db.models.Model.__str__", "type": "django.db.models", "text": " \nModel.__str__() \n"}, {"name": "db.models.Model._base_manager", "path": "topics/db/managers#django.db.models.Model._base_manager", "type": "django.db.models", "text": " \nModel._base_manager \n"}, {"name": "db.models.Model._default_manager", "path": "topics/db/managers#django.db.models.Model._default_manager", "type": "django.db.models", "text": " \nModel._default_manager \n"}, {"name": "db.models.Model._state", "path": "ref/models/instances#django.db.models.Model._state", "type": "django.db.models", "text": " \nModel._state  \nThe _state attribute refers to a ModelState object that tracks the lifecycle of the model instance. The ModelState object has two attributes: adding, a flag which is True if the model has not been saved to the database yet, and db, a string referring to the database alias the instance was loaded from or saved to. Newly instantiated instances have adding=True and db=None, since they are yet to be saved. Instances fetched from a QuerySet will have adding=False and db set to the alias of the associated database. \n"}, {"name": "db.models.Model.clean()", "path": "ref/models/instances#django.db.models.Model.clean", "type": "django.db.models", "text": " \nModel.clean() \n"}, {"name": "db.models.Model.clean_fields()", "path": "ref/models/instances#django.db.models.Model.clean_fields", "type": "django.db.models", "text": " \nModel.clean_fields(exclude=None) \n"}, {"name": "db.models.Model.delete()", "path": "ref/models/instances#django.db.models.Model.delete", "type": "django.db.models", "text": " \nModel.delete(using=DEFAULT_DB_ALIAS, keep_parents=False) \n"}, {"name": "db.models.Model.full_clean()", "path": "ref/models/instances#django.db.models.Model.full_clean", "type": "django.db.models", "text": " \nModel.full_clean(exclude=None, validate_unique=True) \n"}, {"name": "db.models.Model.get_absolute_url()", "path": "ref/models/instances#django.db.models.Model.get_absolute_url", "type": "django.db.models", "text": " \nModel.get_absolute_url() \n"}, {"name": "db.models.Model.get_deferred_fields()", "path": "ref/models/instances#django.db.models.Model.get_deferred_fields", "type": "django.db.models", "text": " \nModel.get_deferred_fields() \n"}, {"name": "db.models.Model.get_FOO_display()", "path": "ref/models/instances#django.db.models.Model.get_FOO_display", "type": "django.db.models", "text": " \nModel.get_FOO_display() \n"}, {"name": "db.models.Model.get_next_by_FOO()", "path": "ref/models/instances#django.db.models.Model.get_next_by_FOO", "type": "django.db.models", "text": " \nModel.get_next_by_FOO(**kwargs) \n"}, {"name": "db.models.Model.get_previous_by_FOO()", "path": "ref/models/instances#django.db.models.Model.get_previous_by_FOO", "type": "django.db.models", "text": " \nModel.get_previous_by_FOO(**kwargs) \n"}, {"name": "db.models.Model.objects", "path": "ref/models/class#django.db.models.Model.objects", "type": "django.db.models", "text": " \nModel.objects  \nEach non-abstract Model class must have a Manager instance added to it. Django ensures that in your model class you have at least a default Manager specified. If you don\u2019t add your own Manager, Django will add an attribute objects containing default Manager instance. If you add your own Manager instance attribute, the default one does not appear. Consider the following example: from django.db import models\n\nclass Person(models.Model):\n    # Add manager with another name\n    people = models.Manager()\n For more details on model managers see Managers and Retrieving objects. \n"}, {"name": "db.models.Model.pk", "path": "ref/models/instances#django.db.models.Model.pk", "type": "django.db.models", "text": " \nModel.pk \n"}, {"name": "db.models.Model.refresh_from_db()", "path": "ref/models/instances#django.db.models.Model.refresh_from_db", "type": "django.db.models", "text": " \nModel.refresh_from_db(using=None, fields=None) \n"}, {"name": "db.models.Model.save()", "path": "ref/models/instances#django.db.models.Model.save", "type": "django.db.models", "text": " \nModel.save(force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None) \n"}, {"name": "db.models.Model.validate_unique()", "path": "ref/models/instances#django.db.models.Model.validate_unique", "type": "django.db.models", "text": " \nModel.validate_unique(exclude=None) \n"}, {"name": "db.models.OneToOneField", "path": "ref/models/fields#django.db.models.OneToOneField", "type": "django.db.models", "text": " \nclass OneToOneField(to, on_delete, parent_link=False, **options) \n"}, {"name": "db.models.OneToOneField.parent_link", "path": "ref/models/fields#django.db.models.OneToOneField.parent_link", "type": "django.db.models", "text": " \nOneToOneField.parent_link  \nWhen True and used in a model which inherits from another concrete model, indicates that this field should be used as the link back to the parent class, rather than the extra OneToOneField which would normally be implicitly created by subclassing. \n"}, {"name": "db.models.Options.abstract", "path": "ref/models/options#django.db.models.Options.abstract", "type": "django.db.models", "text": " \nOptions.abstract  \nIf abstract = True, this model will be an abstract base class. \n"}, {"name": "db.models.Options.app_label", "path": "ref/models/options#django.db.models.Options.app_label", "type": "django.db.models", "text": " \nOptions.app_label  \nIf a model is defined outside of an application in INSTALLED_APPS, it must declare which app it belongs to: app_label = 'myapp'\n If you want to represent a model with the format app_label.object_name or app_label.model_name you can use model._meta.label or model._meta.label_lower respectively. \n"}, {"name": "db.models.Options.base_manager_name", "path": "ref/models/options#django.db.models.Options.base_manager_name", "type": "django.db.models", "text": " \nOptions.base_manager_name  \nThe attribute name of the manager, for example, 'objects', to use for the model\u2019s _base_manager. \n"}, {"name": "db.models.Options.constraints", "path": "ref/models/options#django.db.models.Options.constraints", "type": "django.db.models", "text": " \nOptions.constraints  \nA list of constraints that you want to define on the model: from django.db import models\n\nclass Customer(models.Model):\n    age = models.IntegerField()\n\n    class Meta:\n        constraints = [\n            models.CheckConstraint(check=models.Q(age__gte=18), name='age_gte_18'),\n        ]\n \n"}, {"name": "db.models.Options.db_table", "path": "ref/models/options#django.db.models.Options.db_table", "type": "django.db.models", "text": " \nOptions.db_table  \nThe name of the database table to use for the model: db_table = 'music_album'\n \n"}, {"name": "db.models.Options.db_tablespace", "path": "ref/models/options#django.db.models.Options.db_tablespace", "type": "django.db.models", "text": " \nOptions.db_tablespace  \nThe name of the database tablespace to use for this model. The default is the project\u2019s DEFAULT_TABLESPACE setting, if set. If the backend doesn\u2019t support tablespaces, this option is ignored. \n"}, {"name": "db.models.Options.default_manager_name", "path": "ref/models/options#django.db.models.Options.default_manager_name", "type": "django.db.models", "text": " \nOptions.default_manager_name  \nThe name of the manager to use for the model\u2019s _default_manager. \n"}, {"name": "db.models.Options.default_permissions", "path": "ref/models/options#django.db.models.Options.default_permissions", "type": "django.db.models", "text": " \nOptions.default_permissions  \nDefaults to ('add', 'change', 'delete', 'view'). You may customize this list, for example, by setting this to an empty list if your app doesn\u2019t require any of the default permissions. It must be specified on the model before the model is created by migrate in order to prevent any omitted permissions from being created. \n"}, {"name": "db.models.Options.default_related_name", "path": "ref/models/options#django.db.models.Options.default_related_name", "type": "django.db.models", "text": " \nOptions.default_related_name  \nThe name that will be used by default for the relation from a related object back to this one. The default is <model_name>_set. This option also sets related_query_name. As the reverse name for a field should be unique, be careful if you intend to subclass your model. To work around name collisions, part of the name should contain '%(app_label)s' and '%(model_name)s', which are replaced respectively by the name of the application the model is in, and the name of the model, both lowercased. See the paragraph on related names for abstract models. \n"}, {"name": "db.models.Options.get_latest_by", "path": "ref/models/options#django.db.models.Options.get_latest_by", "type": "django.db.models", "text": " \nOptions.get_latest_by  \nThe name of a field or a list of field names in the model, typically DateField, DateTimeField, or IntegerField. This specifies the default field(s) to use in your model Manager\u2019s latest() and earliest() methods. Example: # Latest by ascending order_date.\nget_latest_by = \"order_date\"\n\n# Latest by priority descending, order_date ascending.\nget_latest_by = ['-priority', 'order_date']\n See the latest() docs for more. \n"}, {"name": "db.models.Options.index_together", "path": "ref/models/options#django.db.models.Options.index_together", "type": "django.db.models", "text": " \nOptions.index_together  \n Use the indexes option instead. The newer indexes option provides more functionality than index_together. index_together may be deprecated in the future.  Sets of field names that, taken together, are indexed: index_together = [\n    [\"pub_date\", \"deadline\"],\n]\n This list of fields will be indexed together (i.e. the appropriate CREATE INDEX statement will be issued.) For convenience, index_together can be a single list when dealing with a single set of fields: index_together = [\"pub_date\", \"deadline\"]\n \n"}, {"name": "db.models.Options.indexes", "path": "ref/models/options#django.db.models.Options.indexes", "type": "django.db.models", "text": " \nOptions.indexes  \nA list of indexes that you want to define on the model: from django.db import models\n\nclass Customer(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n\n    class Meta:\n        indexes = [\n            models.Index(fields=['last_name', 'first_name']),\n            models.Index(fields=['first_name'], name='first_name_idx'),\n        ]\n \n"}, {"name": "db.models.Options.label", "path": "ref/models/options#django.db.models.Options.label", "type": "django.db.models", "text": " \nOptions.label  \nRepresentation of the object, returns app_label.object_name, e.g. 'polls.Question'. \n"}, {"name": "db.models.Options.label_lower", "path": "ref/models/options#django.db.models.Options.label_lower", "type": "django.db.models", "text": " \nOptions.label_lower  \nRepresentation of the model, returns app_label.model_name, e.g. 'polls.question'. \n"}, {"name": "db.models.Options.managed", "path": "ref/models/options#django.db.models.Options.managed", "type": "django.db.models", "text": " \nOptions.managed  \nDefaults to True, meaning Django will create the appropriate database tables in migrate or as part of migrations and remove them as part of a flush management command. That is, Django manages the database tables\u2019 lifecycles. If False, no database table creation, modification, or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the only difference when managed=False. All other aspects of model handling are exactly the same as normal. This includes  Adding an automatic primary key field to the model if you don\u2019t declare it. To avoid confusion for later code readers, it\u2019s recommended to specify all the columns from the database table you are modeling when using unmanaged models.  \nIf a model with managed=False contains a ManyToManyField that points to another unmanaged model, then the intermediate table for the many-to-many join will also not be created. However, the intermediary table between one managed and one unmanaged model will be created. If you need to change this default behavior, create the intermediary table as an explicit model (with managed set as needed) and use the ManyToManyField.through attribute to make the relation use your custom model.   For tests involving models with managed=False, it\u2019s up to you to ensure the correct tables are created as part of the test setup. If you\u2019re interested in changing the Python-level behavior of a model class, you could use managed=False and create a copy of an existing model. However, there\u2019s a better approach for that situation: Proxy models. \n"}, {"name": "db.models.options.Options", "path": "ref/models/meta#django.db.models.options.Options", "type": "django.db.models", "text": " \nclass Options \n"}, {"name": "db.models.options.Options.get_field()", "path": "ref/models/meta#django.db.models.options.Options.get_field", "type": "django.db.models", "text": " \nOptions.get_field(field_name)  \nReturns the field instance given a name of a field. field_name can be the name of a field on the model, a field on an abstract or inherited model, or a field defined on another model that points to the model. In the latter case, the field_name will be (in order of preference) the related_query_name set by the user, the related_name set by the user, or the name automatically generated by Django. Hidden fields cannot be retrieved by name. If a field with the given name is not found a FieldDoesNotExist exception will be raised. >>> from django.contrib.auth.models import User\n\n# A field on the model\n>>> User._meta.get_field('username')\n<django.db.models.fields.CharField: username>\n\n# A field from another model that has a relation with the current model\n>>> User._meta.get_field('logentry')\n<ManyToOneRel: admin.logentry>\n\n# A non existent field\n>>> User._meta.get_field('does_not_exist')\nTraceback (most recent call last):\n    ...\nFieldDoesNotExist: User has no field named 'does_not_exist'\n \n"}, {"name": "db.models.options.Options.get_fields()", "path": "ref/models/meta#django.db.models.options.Options.get_fields", "type": "django.db.models", "text": " \nOptions.get_fields(include_parents=True, include_hidden=False)  \nReturns a tuple of fields associated with a model. get_fields() accepts two parameters that can be used to control which fields are returned:  \ninclude_parents  \nTrue by default. Recursively includes fields defined on parent classes. If set to False, get_fields() will only search for fields declared directly on the current model. Fields from models that directly inherit from abstract models or proxy classes are considered to be local, not on the parent. \ninclude_hidden  \nFalse by default. If set to True, get_fields() will include fields that are used to back other field\u2019s functionality. This will also include any fields that have a related_name (such as ManyToManyField, or ForeignKey) that start with a \u201c+\u201d.  >>> from django.contrib.auth.models import User\n>>> User._meta.get_fields()\n(<ManyToOneRel: admin.logentry>,\n <django.db.models.fields.AutoField: id>,\n <django.db.models.fields.CharField: password>,\n <django.db.models.fields.DateTimeField: last_login>,\n <django.db.models.fields.BooleanField: is_superuser>,\n <django.db.models.fields.CharField: username>,\n <django.db.models.fields.CharField: first_name>,\n <django.db.models.fields.CharField: last_name>,\n <django.db.models.fields.EmailField: email>,\n <django.db.models.fields.BooleanField: is_staff>,\n <django.db.models.fields.BooleanField: is_active>,\n <django.db.models.fields.DateTimeField: date_joined>,\n <django.db.models.fields.related.ManyToManyField: groups>,\n <django.db.models.fields.related.ManyToManyField: user_permissions>)\n\n# Also include hidden fields.\n>>> User._meta.get_fields(include_hidden=True)\n(<ManyToOneRel: auth.user_groups>,\n <ManyToOneRel: auth.user_user_permissions>,\n <ManyToOneRel: admin.logentry>,\n <django.db.models.fields.AutoField: id>,\n <django.db.models.fields.CharField: password>,\n <django.db.models.fields.DateTimeField: last_login>,\n <django.db.models.fields.BooleanField: is_superuser>,\n <django.db.models.fields.CharField: username>,\n <django.db.models.fields.CharField: first_name>,\n <django.db.models.fields.CharField: last_name>,\n <django.db.models.fields.EmailField: email>,\n <django.db.models.fields.BooleanField: is_staff>,\n <django.db.models.fields.BooleanField: is_active>,\n <django.db.models.fields.DateTimeField: date_joined>,\n <django.db.models.fields.related.ManyToManyField: groups>,\n <django.db.models.fields.related.ManyToManyField: user_permissions>)\n \n"}, {"name": "db.models.Options.order_with_respect_to", "path": "ref/models/options#django.db.models.Options.order_with_respect_to", "type": "django.db.models", "text": " \nOptions.order_with_respect_to  \nMakes this object orderable with respect to the given field, usually a ForeignKey. This can be used to make related objects orderable with respect to a parent object. For example, if an Answer relates to a Question object, and a question has more than one answer, and the order of answers matters, you\u2019d do this: from django.db import models\n\nclass Question(models.Model):\n    text = models.TextField()\n    # ...\n\nclass Answer(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    # ...\n\n    class Meta:\n        order_with_respect_to = 'question'\n When order_with_respect_to is set, two additional methods are provided to retrieve and to set the order of the related objects: get_RELATED_order() and set_RELATED_order(), where RELATED is the lowercased model name. For example, assuming that a Question object has multiple related Answer objects, the list returned contains the primary keys of the related Answer objects: >>> question = Question.objects.get(id=1)\n>>> question.get_answer_order()\n[1, 2, 3]\n The order of a Question object\u2019s related Answer objects can be set by passing in a list of Answer primary keys: >>> question.set_answer_order([3, 1, 2])\n The related objects also get two methods, get_next_in_order() and get_previous_in_order(), which can be used to access those objects in their proper order. Assuming the Answer objects are ordered by id: >>> answer = Answer.objects.get(id=2)\n>>> answer.get_next_in_order()\n<Answer: 3>\n>>> answer.get_previous_in_order()\n<Answer: 1>\n \n"}, {"name": "db.models.Options.ordering", "path": "ref/models/options#django.db.models.Options.ordering", "type": "django.db.models", "text": " \nOptions.ordering  \nThe default ordering for the object, for use when obtaining lists of objects: ordering = ['-order_date']\n This is a tuple or list of strings and/or query expressions. Each string is a field name with an optional \u201c-\u201d prefix, which indicates descending order. Fields without a leading \u201c-\u201d will be ordered ascending. Use the string \u201c?\u201d to order randomly. For example, to order by a pub_date field ascending, use this: ordering = ['pub_date']\n To order by pub_date descending, use this: ordering = ['-pub_date']\n To order by pub_date descending, then by author ascending, use this: ordering = ['-pub_date', 'author']\n You can also use query expressions. To order by author ascending and make null values sort last, use this: from django.db.models import F\n\nordering = [F('author').asc(nulls_last=True)]\n \n"}, {"name": "db.models.Options.permissions", "path": "ref/models/options#django.db.models.Options.permissions", "type": "django.db.models", "text": " \nOptions.permissions  \nExtra permissions to enter into the permissions table when creating this object. Add, change, delete, and view permissions are automatically created for each model. This example specifies an extra permission, can_deliver_pizzas: permissions = [('can_deliver_pizzas', 'Can deliver pizzas')]\n This is a list or tuple of 2-tuples in the format (permission_code,\nhuman_readable_permission_name). \n"}, {"name": "db.models.Options.proxy", "path": "ref/models/options#django.db.models.Options.proxy", "type": "django.db.models", "text": " \nOptions.proxy  \nIf proxy = True, a model which subclasses another model will be treated as a proxy model. \n"}, {"name": "db.models.Options.required_db_features", "path": "ref/models/options#django.db.models.Options.required_db_features", "type": "django.db.models", "text": " \nOptions.required_db_features  \nList of database features that the current connection should have so that the model is considered during the migration phase. For example, if you set this list to ['gis_enabled'], the model will only be synchronized on GIS-enabled databases. It\u2019s also useful to skip some models when testing with several database backends. Avoid relations between models that may or may not be created as the ORM doesn\u2019t handle this. \n"}, {"name": "db.models.Options.required_db_vendor", "path": "ref/models/options#django.db.models.Options.required_db_vendor", "type": "django.db.models", "text": " \nOptions.required_db_vendor  \nName of a supported database vendor that this model is specific to. Current built-in vendor names are: sqlite, postgresql, mysql, oracle. If this attribute is not empty and the current connection vendor doesn\u2019t match it, the model will not be synchronized. \n"}, {"name": "db.models.Options.select_on_save", "path": "ref/models/options#django.db.models.Options.select_on_save", "type": "django.db.models", "text": " \nOptions.select_on_save  \nDetermines if Django will use the pre-1.6 django.db.models.Model.save() algorithm. The old algorithm uses SELECT to determine if there is an existing row to be updated. The new algorithm tries an UPDATE directly. In some rare cases the UPDATE of an existing row isn\u2019t visible to Django. An example is the PostgreSQL ON UPDATE trigger which returns NULL. In such cases the new algorithm will end up doing an INSERT even when a row exists in the database. Usually there is no need to set this attribute. The default is False. See django.db.models.Model.save() for more about the old and new saving algorithm. \n"}, {"name": "db.models.Options.unique_together", "path": "ref/models/options#django.db.models.Options.unique_together", "type": "django.db.models", "text": " \nOptions.unique_together  \n Use UniqueConstraint with the constraints option instead. UniqueConstraint provides more functionality than unique_together. unique_together may be deprecated in the future.  Sets of field names that, taken together, must be unique: unique_together = [['driver', 'restaurant']]\n This is a list of lists that must be unique when considered together. It\u2019s used in the Django admin and is enforced at the database level (i.e., the appropriate UNIQUE statements are included in the CREATE TABLE statement). For convenience, unique_together can be a single list when dealing with a single set of fields: unique_together = ['driver', 'restaurant']\n A ManyToManyField cannot be included in unique_together. (It\u2019s not clear what that would even mean!) If you need to validate uniqueness related to a ManyToManyField, try using a signal or an explicit through model. The ValidationError raised during model validation when the constraint is violated has the unique_together error code. \n"}, {"name": "db.models.Options.verbose_name", "path": "ref/models/options#django.db.models.Options.verbose_name", "type": "django.db.models", "text": " \nOptions.verbose_name  \nA human-readable name for the object, singular: verbose_name = \"pizza\"\n If this isn\u2019t given, Django will use a munged version of the class name: CamelCase becomes camel case. \n"}, {"name": "db.models.Options.verbose_name_plural", "path": "ref/models/options#django.db.models.Options.verbose_name_plural", "type": "django.db.models", "text": " \nOptions.verbose_name_plural  \nThe plural name for the object: verbose_name_plural = \"stories\"\n If this isn\u2019t given, Django will use verbose_name + \"s\". \n"}, {"name": "db.models.OuterRef", "path": "ref/models/expressions#django.db.models.OuterRef", "type": "django.db.models", "text": " \nclass OuterRef(field) \n"}, {"name": "db.models.output_field", "path": "ref/models/lookups#django.db.models.output_field", "type": "django.db.models", "text": " \noutput_field  \nDefines the type of class returned by the get_lookup() method. It must be a Field instance. \n"}, {"name": "db.models.PositiveBigIntegerField", "path": "ref/models/fields#django.db.models.PositiveBigIntegerField", "type": "django.db.models", "text": " \nclass PositiveBigIntegerField(**options) \n"}, {"name": "db.models.PositiveIntegerField", "path": "ref/models/fields#django.db.models.PositiveIntegerField", "type": "django.db.models", "text": " \nclass PositiveIntegerField(**options) \n"}, {"name": "db.models.PositiveSmallIntegerField", "path": "ref/models/fields#django.db.models.PositiveSmallIntegerField", "type": "django.db.models", "text": " \nclass PositiveSmallIntegerField(**options) \n"}, {"name": "db.models.Prefetch", "path": "ref/models/querysets#django.db.models.Prefetch", "type": "django.db.models", "text": " \nclass Prefetch(lookup, queryset=None, to_attr=None) \n"}, {"name": "db.models.prefetch_related_objects()", "path": "ref/models/querysets#django.db.models.prefetch_related_objects", "type": "django.db.models", "text": " \nprefetch_related_objects(model_instances, *related_lookups) \n"}, {"name": "db.models.PROTECT", "path": "ref/models/fields#django.db.models.PROTECT", "type": "django.db.models", "text": " \nPROTECT  \nPrevent deletion of the referenced object by raising ProtectedError, a subclass of django.db.IntegrityError. \n"}, {"name": "db.models.Q", "path": "ref/models/querysets#django.db.models.Q", "type": "django.db.models", "text": " \nclass Q \n"}, {"name": "db.models.query.QuerySet", "path": "ref/models/querysets#django.db.models.query.QuerySet", "type": "django.db.models", "text": " \nclass QuerySet(model=None, query=None, using=None, hints=None)  \nUsually when you\u2019ll interact with a QuerySet you\u2019ll use it by chaining filters. To make this work, most QuerySet methods return new querysets. These methods are covered in detail later in this section. The QuerySet class has two public attributes you can use for introspection:  \nordered  \nTrue if the QuerySet is ordered \u2014 i.e. has an order_by() clause or a default ordering on the model. False otherwise. \n  \ndb  \nThe database that will be used if this query is executed now. \n  Note The query parameter to QuerySet exists so that specialized query subclasses can reconstruct internal query state. The value of the parameter is an opaque representation of that query state and is not part of a public API.  \n"}, {"name": "db.models.query.QuerySet.aggregate()", "path": "ref/models/querysets#django.db.models.query.QuerySet.aggregate", "type": "django.db.models", "text": " \naggregate(*args, **kwargs) \n"}, {"name": "db.models.query.QuerySet.alias()", "path": "ref/models/querysets#django.db.models.query.QuerySet.alias", "type": "django.db.models", "text": " \nalias(*args, **kwargs) \n"}, {"name": "db.models.query.QuerySet.all()", "path": "ref/models/querysets#django.db.models.query.QuerySet.all", "type": "django.db.models", "text": " \nall() \n"}, {"name": "db.models.query.QuerySet.annotate()", "path": "ref/models/querysets#django.db.models.query.QuerySet.annotate", "type": "django.db.models", "text": " \nannotate(*args, **kwargs) \n"}, {"name": "db.models.query.QuerySet.bulk_create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.bulk_create", "type": "django.db.models", "text": " \nbulk_create(objs, batch_size=None, ignore_conflicts=False) \n"}, {"name": "db.models.query.QuerySet.bulk_update()", "path": "ref/models/querysets#django.db.models.query.QuerySet.bulk_update", "type": "django.db.models", "text": " \nbulk_update(objs, fields, batch_size=None) \n"}, {"name": "db.models.query.QuerySet.contains()", "path": "ref/models/querysets#django.db.models.query.QuerySet.contains", "type": "django.db.models", "text": " \ncontains(obj) \n"}, {"name": "db.models.query.QuerySet.count()", "path": "ref/models/querysets#django.db.models.query.QuerySet.count", "type": "django.db.models", "text": " \ncount() \n"}, {"name": "db.models.query.QuerySet.create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.create", "type": "django.db.models", "text": " \ncreate(**kwargs) \n"}, {"name": "db.models.query.QuerySet.dates()", "path": "ref/models/querysets#django.db.models.query.QuerySet.dates", "type": "django.db.models", "text": " \ndates(field, kind, order='ASC') \n"}, {"name": "db.models.query.QuerySet.datetimes()", "path": "ref/models/querysets#django.db.models.query.QuerySet.datetimes", "type": "django.db.models", "text": " \ndatetimes(field_name, kind, order='ASC', tzinfo=None, is_dst=None) \n"}, {"name": "db.models.query.QuerySet.db", "path": "ref/models/querysets#django.db.models.query.QuerySet.db", "type": "django.db.models", "text": " \ndb  \nThe database that will be used if this query is executed now. \n"}, {"name": "db.models.query.QuerySet.defer()", "path": "ref/models/querysets#django.db.models.query.QuerySet.defer", "type": "django.db.models", "text": " \ndefer(*fields) \n"}, {"name": "db.models.query.QuerySet.delete()", "path": "ref/models/querysets#django.db.models.query.QuerySet.delete", "type": "django.db.models", "text": " \ndelete() \n"}, {"name": "db.models.query.QuerySet.difference()", "path": "ref/models/querysets#django.db.models.query.QuerySet.difference", "type": "django.db.models", "text": " \ndifference(*other_qs) \n"}, {"name": "db.models.query.QuerySet.distinct()", "path": "ref/models/querysets#django.db.models.query.QuerySet.distinct", "type": "django.db.models", "text": " \ndistinct(*fields) \n"}, {"name": "db.models.query.QuerySet.earliest()", "path": "ref/models/querysets#django.db.models.query.QuerySet.earliest", "type": "django.db.models", "text": " \nearliest(*fields) \n"}, {"name": "db.models.query.QuerySet.exclude()", "path": "ref/models/querysets#django.db.models.query.QuerySet.exclude", "type": "django.db.models", "text": " \nexclude(*args, **kwargs) \n"}, {"name": "db.models.query.QuerySet.exists()", "path": "ref/models/querysets#django.db.models.query.QuerySet.exists", "type": "django.db.models", "text": " \nexists() \n"}, {"name": "db.models.query.QuerySet.explain()", "path": "ref/models/querysets#django.db.models.query.QuerySet.explain", "type": "django.db.models", "text": " \nexplain(format=None, **options) \n"}, {"name": "db.models.query.QuerySet.extra()", "path": "ref/models/querysets#django.db.models.query.QuerySet.extra", "type": "django.db.models", "text": " \nextra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None) \n"}, {"name": "db.models.query.QuerySet.filter()", "path": "ref/models/querysets#django.db.models.query.QuerySet.filter", "type": "django.db.models", "text": " \nfilter(*args, **kwargs) \n"}, {"name": "db.models.query.QuerySet.first()", "path": "ref/models/querysets#django.db.models.query.QuerySet.first", "type": "django.db.models", "text": " \nfirst() \n"}, {"name": "db.models.query.QuerySet.get()", "path": "ref/models/querysets#django.db.models.query.QuerySet.get", "type": "django.db.models", "text": " \nget(*args, **kwargs) \n"}, {"name": "db.models.query.QuerySet.get_or_create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.get_or_create", "type": "django.db.models", "text": " \nget_or_create(defaults=None, **kwargs) \n"}, {"name": "db.models.query.QuerySet.in_bulk()", "path": "ref/models/querysets#django.db.models.query.QuerySet.in_bulk", "type": "django.db.models", "text": " \nin_bulk(id_list=None, *, field_name='pk') \n"}, {"name": "db.models.query.QuerySet.intersection()", "path": "ref/models/querysets#django.db.models.query.QuerySet.intersection", "type": "django.db.models", "text": " \nintersection(*other_qs) \n"}, {"name": "db.models.query.QuerySet.iterator()", "path": "ref/models/querysets#django.db.models.query.QuerySet.iterator", "type": "django.db.models", "text": " \niterator(chunk_size=2000) \n"}, {"name": "db.models.query.QuerySet.last()", "path": "ref/models/querysets#django.db.models.query.QuerySet.last", "type": "django.db.models", "text": " \nlast() \n"}, {"name": "db.models.query.QuerySet.latest()", "path": "ref/models/querysets#django.db.models.query.QuerySet.latest", "type": "django.db.models", "text": " \nlatest(*fields) \n"}, {"name": "db.models.query.QuerySet.none()", "path": "ref/models/querysets#django.db.models.query.QuerySet.none", "type": "django.db.models", "text": " \nnone() \n"}, {"name": "db.models.query.QuerySet.only()", "path": "ref/models/querysets#django.db.models.query.QuerySet.only", "type": "django.db.models", "text": " \nonly(*fields) \n"}, {"name": "db.models.query.QuerySet.order_by()", "path": "ref/models/querysets#django.db.models.query.QuerySet.order_by", "type": "django.db.models", "text": " \norder_by(*fields) \n"}, {"name": "db.models.query.QuerySet.ordered", "path": "ref/models/querysets#django.db.models.query.QuerySet.ordered", "type": "django.db.models", "text": " \nordered  \nTrue if the QuerySet is ordered \u2014 i.e. has an order_by() clause or a default ordering on the model. False otherwise. \n"}, {"name": "db.models.query.QuerySet.prefetch_related()", "path": "ref/models/querysets#django.db.models.query.QuerySet.prefetch_related", "type": "django.db.models", "text": " \nprefetch_related(*lookups) \n"}, {"name": "db.models.query.QuerySet.raw()", "path": "ref/models/querysets#django.db.models.query.QuerySet.raw", "type": "django.db.models", "text": " \nraw(raw_query, params=(), translations=None, using=None) \n"}, {"name": "db.models.query.QuerySet.reverse()", "path": "ref/models/querysets#django.db.models.query.QuerySet.reverse", "type": "django.db.models", "text": " \nreverse() \n"}, {"name": "db.models.query.QuerySet.select_for_update()", "path": "ref/models/querysets#django.db.models.query.QuerySet.select_for_update", "type": "django.db.models", "text": " \nselect_for_update(nowait=False, skip_locked=False, of=(), no_key=False) \n"}, {"name": "db.models.query.QuerySet.select_related()", "path": "ref/models/querysets#django.db.models.query.QuerySet.select_related", "type": "django.db.models", "text": " \nselect_related(*fields) \n"}, {"name": "db.models.query.QuerySet.union()", "path": "ref/models/querysets#django.db.models.query.QuerySet.union", "type": "django.db.models", "text": " \nunion(*other_qs, all=False) \n"}, {"name": "db.models.query.QuerySet.update()", "path": "ref/models/querysets#django.db.models.query.QuerySet.update", "type": "django.db.models", "text": " \nupdate(**kwargs) \n"}, {"name": "db.models.query.QuerySet.update_or_create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.update_or_create", "type": "django.db.models", "text": " \nupdate_or_create(defaults=None, **kwargs) \n"}, {"name": "db.models.query.QuerySet.using()", "path": "ref/models/querysets#django.db.models.query.QuerySet.using", "type": "django.db.models", "text": " \nusing(alias) \n"}, {"name": "db.models.query.QuerySet.values()", "path": "ref/models/querysets#django.db.models.query.QuerySet.values", "type": "django.db.models", "text": " \nvalues(*fields, **expressions) \n"}, {"name": "db.models.query.QuerySet.values_list()", "path": "ref/models/querysets#django.db.models.query.QuerySet.values_list", "type": "django.db.models", "text": " \nvalues_list(*fields, flat=False, named=False) \n"}, {"name": "db.models.RESTRICT", "path": "ref/models/fields#django.db.models.RESTRICT", "type": "django.db.models", "text": " \nRESTRICT  \nPrevent deletion of the referenced object by raising RestrictedError (a subclass of django.db.IntegrityError). Unlike PROTECT, deletion of the referenced object is allowed if it also references a different object that is being deleted in the same operation, but via a CASCADE relationship. Consider this set of models: class Artist(models.Model):\n    name = models.CharField(max_length=10)\n\nclass Album(models.Model):\n    artist = models.ForeignKey(Artist, on_delete=models.CASCADE)\n\nclass Song(models.Model):\n    artist = models.ForeignKey(Artist, on_delete=models.CASCADE)\n    album = models.ForeignKey(Album, on_delete=models.RESTRICT)\n Artist can be deleted even if that implies deleting an Album which is referenced by a Song, because Song also references Artist itself through a cascading relationship. For example: >>> artist_one = Artist.objects.create(name='artist one')\n>>> artist_two = Artist.objects.create(name='artist two')\n>>> album_one = Album.objects.create(artist=artist_one)\n>>> album_two = Album.objects.create(artist=artist_two)\n>>> song_one = Song.objects.create(artist=artist_one, album=album_one)\n>>> song_two = Song.objects.create(artist=artist_one, album=album_two)\n>>> album_one.delete()\n# Raises RestrictedError.\n>>> artist_two.delete()\n# Raises RestrictedError.\n>>> artist_one.delete()\n(4, {'Song': 2, 'Album': 1, 'Artist': 1})\n \n"}, {"name": "db.models.SET()", "path": "ref/models/fields#django.db.models.SET", "type": "django.db.models", "text": " \nSET()  \nSet the ForeignKey to the value passed to SET(), or if a callable is passed in, the result of calling it. In most cases, passing a callable will be necessary to avoid executing queries at the time your models.py is imported: from django.conf import settings\nfrom django.contrib.auth import get_user_model\nfrom django.db import models\n\ndef get_sentinel_user():\n    return get_user_model().objects.get_or_create(username='deleted')[0]\n\nclass MyModel(models.Model):\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.SET(get_sentinel_user),\n    )\n \n"}, {"name": "db.models.SET_DEFAULT", "path": "ref/models/fields#django.db.models.SET_DEFAULT", "type": "django.db.models", "text": " \nSET_DEFAULT  \nSet the ForeignKey to its default value; a default for the ForeignKey must be set. \n"}, {"name": "db.models.SET_NULL", "path": "ref/models/fields#django.db.models.SET_NULL", "type": "django.db.models", "text": " \nSET_NULL  \nSet the ForeignKey null; this is only possible if null is True. \n"}, {"name": "db.models.signals.class_prepared", "path": "ref/signals#django.db.models.signals.class_prepared", "type": "django.db.models", "text": " \ndjango.db.models.signals.class_prepared \n"}, {"name": "db.models.signals.m2m_changed", "path": "ref/signals#django.db.models.signals.m2m_changed", "type": "django.db.models", "text": " \ndjango.db.models.signals.m2m_changed \n"}, {"name": "db.models.signals.post_delete", "path": "ref/signals#django.db.models.signals.post_delete", "type": "django.db.models", "text": " \ndjango.db.models.signals.post_delete \n"}, {"name": "db.models.signals.post_init", "path": "ref/signals#django.db.models.signals.post_init", "type": "django.db.models", "text": " \ndjango.db.models.signals.post_init \n"}, {"name": "db.models.signals.post_migrate", "path": "ref/signals#django.db.models.signals.post_migrate", "type": "django.db.models", "text": " \ndjango.db.models.signals.post_migrate \n"}, {"name": "db.models.signals.post_save", "path": "ref/signals#django.db.models.signals.post_save", "type": "django.db.models", "text": " \ndjango.db.models.signals.post_save \n"}, {"name": "db.models.signals.pre_delete", "path": "ref/signals#django.db.models.signals.pre_delete", "type": "django.db.models", "text": " \ndjango.db.models.signals.pre_delete \n"}, {"name": "db.models.signals.pre_init", "path": "ref/signals#django.db.models.signals.pre_init", "type": "django.db.models", "text": " \ndjango.db.models.signals.pre_init \n"}, {"name": "db.models.signals.pre_migrate", "path": "ref/signals#django.db.models.signals.pre_migrate", "type": "django.db.models", "text": " \ndjango.db.models.signals.pre_migrate \n"}, {"name": "db.models.signals.pre_save", "path": "ref/signals#django.db.models.signals.pre_save", "type": "django.db.models", "text": " \ndjango.db.models.signals.pre_save \n"}, {"name": "db.models.SlugField", "path": "ref/models/fields#django.db.models.SlugField", "type": "django.db.models", "text": " \nclass SlugField(max_length=50, **options) \n"}, {"name": "db.models.SlugField.allow_unicode", "path": "ref/models/fields#django.db.models.SlugField.allow_unicode", "type": "django.db.models", "text": " \nSlugField.allow_unicode  \nIf True, the field accepts Unicode letters in addition to ASCII letters. Defaults to False. \n"}, {"name": "db.models.SmallAutoField", "path": "ref/models/fields#django.db.models.SmallAutoField", "type": "django.db.models", "text": " \nclass SmallAutoField(**options) \n"}, {"name": "db.models.SmallIntegerField", "path": "ref/models/fields#django.db.models.SmallIntegerField", "type": "django.db.models", "text": " \nclass SmallIntegerField(**options) \n"}, {"name": "db.models.StdDev", "path": "ref/models/querysets#django.db.models.StdDev", "type": "django.db.models", "text": " \nclass StdDev(expression, output_field=None, sample=False, filter=None, default=None, **extra)  \nReturns the standard deviation of the data in the provided expression.  Default alias: <field>__stddev\n Return type: float if input is int, otherwise same as input field, or output_field if supplied  Has one optional argument:  \nsample  \nBy default, StdDev returns the population standard deviation. However, if sample=True, the return value will be the sample standard deviation. \n \n"}, {"name": "db.models.StdDev.sample", "path": "ref/models/querysets#django.db.models.StdDev.sample", "type": "django.db.models", "text": " \nsample  \nBy default, StdDev returns the population standard deviation. However, if sample=True, the return value will be the sample standard deviation. \n"}, {"name": "db.models.Subquery", "path": "ref/models/expressions#django.db.models.Subquery", "type": "django.db.models", "text": " \nclass Subquery(queryset, output_field=None) \n"}, {"name": "db.models.Sum", "path": "ref/models/querysets#django.db.models.Sum", "type": "django.db.models", "text": " \nclass Sum(expression, output_field=None, distinct=False, filter=None, default=None, **extra)  \nComputes the sum of all values of the given expression.  Default alias: <field>__sum\n Return type: same as input field, or output_field if supplied  Has one optional argument:  \ndistinct  \nIf distinct=True, Sum returns the sum of unique values. This is the SQL equivalent of SUM(DISTINCT <field>). The default value is False. \n \n"}, {"name": "db.models.Sum.distinct", "path": "ref/models/querysets#django.db.models.Sum.distinct", "type": "django.db.models", "text": " \ndistinct  \nIf distinct=True, Sum returns the sum of unique values. This is the SQL equivalent of SUM(DISTINCT <field>). The default value is False. \n"}, {"name": "db.models.TextField", "path": "ref/models/fields#django.db.models.TextField", "type": "django.db.models", "text": " \nclass TextField(**options) \n"}, {"name": "db.models.TextField.db_collation", "path": "ref/models/fields#django.db.models.TextField.db_collation", "type": "django.db.models", "text": " \nTextField.db_collation  \n New in Django 3.2.  The database collation name of the field.  Note Collation names are not standardized. As such, this will not be portable across multiple database backends.   Oracle Oracle does not support collations for a TextField.  \n"}, {"name": "db.models.TimeField", "path": "ref/models/fields#django.db.models.TimeField", "type": "django.db.models", "text": " \nclass TimeField(auto_now=False, auto_now_add=False, **options) \n"}, {"name": "db.models.Transform", "path": "ref/models/lookups#django.db.models.Transform", "type": "django.db.models", "text": " \nclass Transform  \nA Transform is a generic class to implement field transformations. A prominent example is __year that transforms a DateField into a IntegerField. The notation to use a Transform in a lookup expression is <expression>__<transformation> (e.g. date__year). This class follows the Query Expression API, which implies that you can use <expression>__<transform1>__<transform2>. It\u2019s a specialized Func() expression that only accepts one argument. It can also be used on the right hand side of a filter or directly as an annotation.  \nbilateral  \nA boolean indicating whether this transformation should apply to both lhs and rhs. Bilateral transformations will be applied to rhs in the same order as they appear in the lookup expression. By default it is set to False. For example usage, see How to write custom lookups. \n  \nlhs  \nThe left-hand side - what is being transformed. It must follow the Query Expression API. \n  \nlookup_name  \nThe name of the lookup, used for identifying it on parsing query expressions. It cannot contain the string \"__\". \n  \noutput_field  \nDefines the class this transformation outputs. It must be a Field instance. By default is the same as its lhs.output_field. \n \n"}, {"name": "db.models.Transform.bilateral", "path": "ref/models/lookups#django.db.models.Transform.bilateral", "type": "django.db.models", "text": " \nbilateral  \nA boolean indicating whether this transformation should apply to both lhs and rhs. Bilateral transformations will be applied to rhs in the same order as they appear in the lookup expression. By default it is set to False. For example usage, see How to write custom lookups. \n"}, {"name": "db.models.Transform.lhs", "path": "ref/models/lookups#django.db.models.Transform.lhs", "type": "django.db.models", "text": " \nlhs  \nThe left-hand side - what is being transformed. It must follow the Query Expression API. \n"}, {"name": "db.models.Transform.lookup_name", "path": "ref/models/lookups#django.db.models.Transform.lookup_name", "type": "django.db.models", "text": " \nlookup_name  \nThe name of the lookup, used for identifying it on parsing query expressions. It cannot contain the string \"__\". \n"}, {"name": "db.models.Transform.output_field", "path": "ref/models/lookups#django.db.models.Transform.output_field", "type": "django.db.models", "text": " \noutput_field  \nDefines the class this transformation outputs. It must be a Field instance. By default is the same as its lhs.output_field. \n"}, {"name": "db.models.UniqueConstraint", "path": "ref/models/constraints#django.db.models.UniqueConstraint", "type": "django.db.models", "text": " \nclass UniqueConstraint(*expressions, fields=(), name=None, condition=None, deferrable=None, include=None, opclasses=())  \nCreates a unique constraint in the database. \n"}, {"name": "db.models.UniqueConstraint.condition", "path": "ref/models/constraints#django.db.models.UniqueConstraint.condition", "type": "django.db.models", "text": " \nUniqueConstraint.condition \n"}, {"name": "db.models.UniqueConstraint.deferrable", "path": "ref/models/constraints#django.db.models.UniqueConstraint.deferrable", "type": "django.db.models", "text": " \nUniqueConstraint.deferrable \n"}, {"name": "db.models.UniqueConstraint.expressions", "path": "ref/models/constraints#django.db.models.UniqueConstraint.expressions", "type": "django.db.models", "text": " \nUniqueConstraint.expressions \n"}, {"name": "db.models.UniqueConstraint.fields", "path": "ref/models/constraints#django.db.models.UniqueConstraint.fields", "type": "django.db.models", "text": " \nUniqueConstraint.fields \n"}, {"name": "db.models.UniqueConstraint.include", "path": "ref/models/constraints#django.db.models.UniqueConstraint.include", "type": "django.db.models", "text": " \nUniqueConstraint.include \n"}, {"name": "db.models.UniqueConstraint.name", "path": "ref/models/constraints#django.db.models.UniqueConstraint.name", "type": "django.db.models", "text": " \nUniqueConstraint.name \n"}, {"name": "db.models.UniqueConstraint.opclasses", "path": "ref/models/constraints#django.db.models.UniqueConstraint.opclasses", "type": "django.db.models", "text": " \nUniqueConstraint.opclasses \n"}, {"name": "db.models.URLField", "path": "ref/models/fields#django.db.models.URLField", "type": "django.db.models", "text": " \nclass URLField(max_length=200, **options) \n"}, {"name": "db.models.UUIDField", "path": "ref/models/fields#django.db.models.UUIDField", "type": "django.db.models", "text": " \nclass UUIDField(**options) \n"}, {"name": "db.models.Value", "path": "ref/models/expressions#django.db.models.Value", "type": "django.db.models", "text": " \nclass Value(value, output_field=None) \n"}, {"name": "db.models.Variance", "path": "ref/models/querysets#django.db.models.Variance", "type": "django.db.models", "text": " \nclass Variance(expression, output_field=None, sample=False, filter=None, default=None, **extra)  \nReturns the variance of the data in the provided expression.  Default alias: <field>__variance\n Return type: float if input is int, otherwise same as input field, or output_field if supplied  Has one optional argument:  \nsample  \nBy default, Variance returns the population variance. However, if sample=True, the return value will be the sample variance. \n \n"}, {"name": "db.models.Variance.sample", "path": "ref/models/querysets#django.db.models.Variance.sample", "type": "django.db.models", "text": " \nsample  \nBy default, Variance returns the population variance. However, if sample=True, the return value will be the sample variance. \n"}, {"name": "db.transaction.atomic()", "path": "topics/db/transactions#django.db.transaction.atomic", "type": "django.db.transaction", "text": " \natomic(using=None, savepoint=True, durable=False)  \nAtomicity is the defining property of database transactions. atomic allows us to create a block of code within which the atomicity on the database is guaranteed. If the block of code is successfully completed, the changes are committed to the database. If there is an exception, the changes are rolled back. atomic blocks can be nested. In this case, when an inner block completes successfully, its effects can still be rolled back if an exception is raised in the outer block at a later point. It is sometimes useful to ensure an atomic block is always the outermost atomic block, ensuring that any database changes are committed when the block is exited without errors. This is known as durability and can be achieved by setting durable=True. If the atomic block is nested within another it raises a RuntimeError. atomic is usable both as a decorator: from django.db import transaction\n\n@transaction.atomic\ndef viewfunc(request):\n    # This code executes inside a transaction.\n    do_stuff()\n and as a context manager: from django.db import transaction\n\ndef viewfunc(request):\n    # This code executes in autocommit mode (Django's default).\n    do_stuff()\n\n    with transaction.atomic():\n        # This code executes inside a transaction.\n        do_more_stuff()\n Wrapping atomic in a try/except block allows for natural handling of integrity errors: from django.db import IntegrityError, transaction\n\n@transaction.atomic\ndef viewfunc(request):\n    create_parent()\n\n    try:\n        with transaction.atomic():\n            generate_relationships()\n    except IntegrityError:\n        handle_exception()\n\n    add_children()\n In this example, even if generate_relationships() causes a database error by breaking an integrity constraint, you can execute queries in add_children(), and the changes from create_parent() are still there and bound to the same transaction. Note that any operations attempted in generate_relationships() will already have been rolled back safely when handle_exception() is called, so the exception handler can also operate on the database if necessary.  Avoid catching exceptions inside atomic! When exiting an atomic block, Django looks at whether it\u2019s exited normally or with an exception to determine whether to commit or roll back. If you catch and handle exceptions inside an atomic block, you may hide from Django the fact that a problem has happened. This can result in unexpected behavior. This is mostly a concern for DatabaseError and its subclasses such as IntegrityError. After such an error, the transaction is broken and Django will perform a rollback at the end of the atomic block. If you attempt to run database queries before the rollback happens, Django will raise a TransactionManagementError. You may also encounter this behavior when an ORM-related signal handler raises an exception. The correct way to catch database errors is around an atomic block as shown above. If necessary, add an extra atomic block for this purpose. This pattern has another advantage: it delimits explicitly which operations will be rolled back if an exception occurs. If you catch exceptions raised by raw SQL queries, Django\u2019s behavior is unspecified and database-dependent.   You may need to manually revert model state when rolling back a transaction. The values of a model\u2019s fields won\u2019t be reverted when a transaction rollback happens. This could lead to an inconsistent model state unless you manually restore the original field values. For example, given MyModel with an active field, this snippet ensures that the if obj.active check at the end uses the correct value if updating active to True fails in the transaction: from django.db import DatabaseError, transaction\n\nobj = MyModel(active=False)\nobj.active = True\ntry:\n    with transaction.atomic():\n        obj.save()\nexcept DatabaseError:\n    obj.active = False\n\nif obj.active:\n    ...\n  In order to guarantee atomicity, atomic disables some APIs. Attempting to commit, roll back, or change the autocommit state of the database connection within an atomic block will raise an exception. atomic takes a using argument which should be the name of a database. If this argument isn\u2019t provided, Django uses the \"default\" database. Under the hood, Django\u2019s transaction management code:  opens a transaction when entering the outermost atomic block; creates a savepoint when entering an inner atomic block; releases or rolls back to the savepoint when exiting an inner block; commits or rolls back the transaction when exiting the outermost block.  You can disable the creation of savepoints for inner blocks by setting the savepoint argument to False. If an exception occurs, Django will perform the rollback when exiting the first parent block with a savepoint if there is one, and the outermost block otherwise. Atomicity is still guaranteed by the outer transaction. This option should only be used if the overhead of savepoints is noticeable. It has the drawback of breaking the error handling described above. You may use atomic when autocommit is turned off. It will only use savepoints, even for the outermost block. \n"}, {"name": "db.transaction.clean_savepoints()", "path": "topics/db/transactions#django.db.transaction.clean_savepoints", "type": "django.db.transaction", "text": " \nclean_savepoints(using=None)  \nResets the counter used to generate unique savepoint IDs. \n"}, {"name": "db.transaction.commit()", "path": "topics/db/transactions#django.db.transaction.commit", "type": "django.db.transaction", "text": " \ncommit(using=None) \n"}, {"name": "db.transaction.get_autocommit()", "path": "topics/db/transactions#django.db.transaction.get_autocommit", "type": "django.db.transaction", "text": " \nget_autocommit(using=None) \n"}, {"name": "db.transaction.get_rollback()", "path": "topics/db/transactions#django.db.transaction.get_rollback", "type": "django.db.transaction", "text": " \nget_rollback(using=None) \n"}, {"name": "db.transaction.non_atomic_requests()", "path": "topics/db/transactions#django.db.transaction.non_atomic_requests", "type": "django.db.transaction", "text": " \nnon_atomic_requests(using=None)  \nThis decorator will negate the effect of ATOMIC_REQUESTS for a given view: from django.db import transaction\n\n@transaction.non_atomic_requests\ndef my_view(request):\n    do_stuff()\n\n@transaction.non_atomic_requests(using='other')\ndef my_other_view(request):\n    do_stuff_on_the_other_database()\n It only works if it\u2019s applied to the view itself. \n"}, {"name": "db.transaction.on_commit()", "path": "topics/db/transactions#django.db.transaction.on_commit", "type": "django.db.transaction", "text": " \non_commit(func, using=None) \n"}, {"name": "db.transaction.rollback()", "path": "topics/db/transactions#django.db.transaction.rollback", "type": "django.db.transaction", "text": " \nrollback(using=None) \n"}, {"name": "db.transaction.savepoint()", "path": "topics/db/transactions#django.db.transaction.savepoint", "type": "django.db.transaction", "text": " \nsavepoint(using=None)  \nCreates a new savepoint. This marks a point in the transaction that is known to be in a \u201cgood\u201d state. Returns the savepoint ID (sid). \n"}, {"name": "db.transaction.savepoint_commit()", "path": "topics/db/transactions#django.db.transaction.savepoint_commit", "type": "django.db.transaction", "text": " \nsavepoint_commit(sid, using=None)  \nReleases savepoint sid. The changes performed since the savepoint was created become part of the transaction. \n"}, {"name": "db.transaction.savepoint_rollback()", "path": "topics/db/transactions#django.db.transaction.savepoint_rollback", "type": "django.db.transaction", "text": " \nsavepoint_rollback(sid, using=None)  \nRolls back the transaction to savepoint sid. \n"}, {"name": "db.transaction.set_autocommit()", "path": "topics/db/transactions#django.db.transaction.set_autocommit", "type": "django.db.transaction", "text": " \nset_autocommit(autocommit, using=None) \n"}, {"name": "db.transaction.set_rollback()", "path": "topics/db/transactions#django.db.transaction.set_rollback", "type": "django.db.transaction", "text": " \nset_rollback(rollback, using=None) \n"}, {"name": "Deploying GeoDjango", "path": "ref/contrib/gis/deployment", "type": "API", "text": "Deploying GeoDjango Basically, the deployment of a GeoDjango application is not different from the deployment of a normal Django application. Please consult Django\u2019s deployment documentation.  Warning GeoDjango uses the GDAL geospatial library which is not thread safe at this time. Thus, it is highly recommended to not use threading when deploying \u2013 in other words, use an appropriate configuration of Apache. For example, when configuring your application with mod_wsgi, set the WSGIDaemonProcess attribute threads to 1, unless Apache may crash when running your GeoDjango application. Increase the number of processes instead. \n"}, {"name": "Deployment checklist", "path": "howto/deployment/checklist", "type": "Guides: How-tos", "text": "Deployment checklist The internet is a hostile environment. Before deploying your Django project, you should take some time to review your settings, with security, performance, and operations in mind. Django includes many security features. Some are built-in and always enabled. Others are optional because they aren\u2019t always appropriate, or because they\u2019re inconvenient for development. For example, forcing HTTPS may not be suitable for all websites, and it\u2019s impractical for local development. Performance optimizations are another category of trade-offs with convenience. For instance, caching is useful in production, less so for local development. Error reporting needs are also widely different. The following checklist includes settings that:  must be set properly for Django to provide the expected level of security; are expected to be different in each environment; enable optional security features; enable performance optimizations; provide error reporting.  Many of these settings are sensitive and should be treated as confidential. If you\u2019re releasing the source code for your project, a common practice is to publish suitable settings for development, and to use a private settings module for production. Run manage.py check --deploy\n Some of the checks described below can be automated using the check\n--deploy option. Be sure to run it against your production settings file as described in the option\u2019s documentation. Critical settings SECRET_KEY The secret key must be a large random value and it must be kept secret. Make sure that the key used in production isn\u2019t used anywhere else and avoid committing it to source control. This reduces the number of vectors from which an attacker may acquire the key. Instead of hardcoding the secret key in your settings module, consider loading it from an environment variable: import os\nSECRET_KEY = os.environ['SECRET_KEY']\n or from a file: with open('/etc/secret_key.txt') as f:\n    SECRET_KEY = f.read().strip()\n DEBUG You must never enable debug in production. You\u2019re certainly developing your project with DEBUG = True, since this enables handy features like full tracebacks in your browser. For a production environment, though, this is a really bad idea, because it leaks lots of information about your project: excerpts of your source code, local variables, settings, libraries used, etc. Environment-specific settings ALLOWED_HOSTS When DEBUG = False, Django doesn\u2019t work at all without a suitable value for ALLOWED_HOSTS. This setting is required to protect your site against some CSRF attacks. If you use a wildcard, you must perform your own validation of the Host HTTP header, or otherwise ensure that you aren\u2019t vulnerable to this category of attacks. You should also configure the web server that sits in front of Django to validate the host. It should respond with a static error page or ignore requests for incorrect hosts instead of forwarding the request to Django. This way you\u2019ll avoid spurious errors in your Django logs (or emails if you have error reporting configured that way). For example, on nginx you might set up a default server to return \u201c444 No Response\u201d on an unrecognized host: server {\n    listen 80 default_server;\n    return 444;\n}\n CACHES If you\u2019re using a cache, connection parameters may be different in development and in production. Django defaults to per-process local-memory caching which may not be desirable. Cache servers often have weak authentication. Make sure they only accept connections from your application servers. DATABASES Database connection parameters are probably different in development and in production. Database passwords are very sensitive. You should protect them exactly like SECRET_KEY. For maximum security, make sure database servers only accept connections from your application servers. If you haven\u2019t set up backups for your database, do it right now! \nEMAIL_BACKEND and related settings If your site sends emails, these values need to be set correctly. By default, Django sends email from webmaster@localhost and root@localhost. However, some mail providers reject email from these addresses. To use different sender addresses, modify the DEFAULT_FROM_EMAIL and SERVER_EMAIL settings. \nSTATIC_ROOT and STATIC_URL\n Static files are automatically served by the development server. In production, you must define a STATIC_ROOT directory where collectstatic will copy them. See How to manage static files (e.g. images, JavaScript, CSS) for more information. \nMEDIA_ROOT and MEDIA_URL\n Media files are uploaded by your users. They\u2019re untrusted! Make sure your web server never attempts to interpret them. For instance, if a user uploads a .php file, the web server shouldn\u2019t execute it. Now is a good time to check your backup strategy for these files. HTTPS Any website which allows users to log in should enforce site-wide HTTPS to avoid transmitting access tokens in clear. In Django, access tokens include the login/password, the session cookie, and password reset tokens. (You can\u2019t do much to protect password reset tokens if you\u2019re sending them by email.) Protecting sensitive areas such as the user account or the admin isn\u2019t sufficient, because the same session cookie is used for HTTP and HTTPS. Your web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS requests to Django. Once you\u2019ve set up HTTPS, enable the following settings. CSRF_COOKIE_SECURE Set this to True to avoid transmitting the CSRF cookie over HTTP accidentally. SESSION_COOKIE_SECURE Set this to True to avoid transmitting the session cookie over HTTP accidentally. Performance optimizations Setting DEBUG = False disables several features that are only useful in development. In addition, you can tune the following settings. Sessions Consider using cached sessions to improve performance. If using database-backed sessions, regularly clear old sessions to avoid storing unnecessary data. CONN_MAX_AGE Enabling persistent database connections can result in a nice speed-up when connecting to the database accounts for a significant part of the request processing time. This helps a lot on virtualized hosts with limited network performance. TEMPLATES Enabling the cached template loader often improves performance drastically, as it avoids compiling each template every time it needs to be rendered. See the template loaders docs for more information. Error reporting By the time you push your code to production, it\u2019s hopefully robust, but you can\u2019t rule out unexpected errors. Thankfully, Django can capture errors and notify you accordingly. LOGGING Review your logging configuration before putting your website in production, and check that it works as expected as soon as you have received some traffic. See Logging for details on logging. \nADMINS and MANAGERS\n ADMINS will be notified of 500 errors by email. MANAGERS will be notified of 404 errors. IGNORABLE_404_URLS can help filter out spurious reports. See How to manage error reporting for details on error reporting by email.  Error reporting by email doesn\u2019t scale very well Consider using an error monitoring system such as Sentry before your inbox is flooded by reports. Sentry can also aggregate logs.  Customize the default error views Django includes default views and templates for several HTTP error codes. You may want to override the default templates by creating the following templates in your root template directory: 404.html, 500.html, 403.html, and 400.html. The default error views that use these templates should suffice for 99% of web applications, but you can customize them as well.\n"}, {"name": "dispatch.receiver()", "path": "topics/signals#django.dispatch.receiver", "type": "django.dispatch", "text": " \nreceiver(signal) [source]\n \n   \nParameters:\n\nsignal \u2013 A signal or a list of signals to connect a function to.   \n"}, {"name": "dispatch.Signal", "path": "topics/signals#django.dispatch.Signal", "type": "django.dispatch", "text": " \nclass Signal [source]\n\n"}, {"name": "dispatch.Signal.connect()", "path": "topics/signals#django.dispatch.Signal.connect", "type": "django.dispatch", "text": " \nSignal.connect(receiver, sender=None, weak=True, dispatch_uid=None) [source]\n \n   \nParameters:\n\n \nreceiver \u2013 The callback function which will be connected to this signal. See Receiver functions for more information. \nsender \u2013 Specifies a particular sender to receive signals from. See Connecting to signals sent by specific senders for more information. \nweak \u2013 Django stores signal handlers as weak references by default. Thus, if your receiver is a local function, it may be garbage collected. To prevent this, pass weak=False when you call the signal\u2019s connect() method. \ndispatch_uid \u2013 A unique identifier for a signal receiver in cases where duplicate signals may be sent. See Preventing duplicate signals for more information.     \n"}, {"name": "dispatch.Signal.disconnect()", "path": "topics/signals#django.dispatch.Signal.disconnect", "type": "django.dispatch", "text": " \nSignal.disconnect(receiver=None, sender=None, dispatch_uid=None) [source]\n\n"}, {"name": "dispatch.Signal.send()", "path": "topics/signals#django.dispatch.Signal.send", "type": "django.dispatch", "text": " \nSignal.send(sender, **kwargs) [source]\n\n"}, {"name": "dispatch.Signal.send_robust()", "path": "topics/signals#django.dispatch.Signal.send_robust", "type": "django.dispatch", "text": " \nSignal.send_robust(sender, **kwargs) [source]\n\n"}, {"name": "Django at a glance", "path": "intro/overview", "type": "Guides: Intro", "text": "Django at a glance Because Django was developed in a fast-paced newsroom environment, it was designed to make common web development tasks fast and easy. Here\u2019s an informal overview of how to write a database-driven web app with Django. The goal of this document is to give you enough technical specifics to understand how Django works, but this isn\u2019t intended to be a tutorial or reference \u2013 but we\u2019ve got both! When you\u2019re ready to start a project, you can start with the tutorial or dive right into more detailed documentation. Design your model Although you can use Django without a database, it comes with an object-relational mapper in which you describe your database layout in Python code. The data-model syntax offers many rich ways of representing your models \u2013 so far, it\u2019s been solving many years\u2019 worth of database-schema problems. Here\u2019s a quick example:  mysite/news/models.py from django.db import models\n\nclass Reporter(models.Model):\n    full_name = models.CharField(max_length=70)\n\n    def __str__(self):\n        return self.full_name\n\nclass Article(models.Model):\n    pub_date = models.DateField()\n    headline = models.CharField(max_length=200)\n    content = models.TextField()\n    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.headline\n  Install it Next, run the Django command-line utilities to create the database tables automatically: $ python manage.py makemigrations\n$ python manage.py migrate\n ...\\> py manage.py makemigrations\n...\\> py manage.py migrate\n The makemigrations command looks at all your available models and creates migrations for whichever tables don\u2019t already exist. migrate runs the migrations and creates tables in your database, as well as optionally providing much richer schema control. Enjoy the free API With that, you\u2019ve got a free, and rich, Python API to access your data. The API is created on the fly, no code generation necessary: # Import the models we created from our \"news\" app\n>>> from news.models import Article, Reporter\n\n# No reporters are in the system yet.\n>>> Reporter.objects.all()\n<QuerySet []>\n\n# Create a new Reporter.\n>>> r = Reporter(full_name='John Smith')\n\n# Save the object into the database. You have to call save() explicitly.\n>>> r.save()\n\n# Now it has an ID.\n>>> r.id\n1\n\n# Now the new reporter is in the database.\n>>> Reporter.objects.all()\n<QuerySet [<Reporter: John Smith>]>\n\n# Fields are represented as attributes on the Python object.\n>>> r.full_name\n'John Smith'\n\n# Django provides a rich database lookup API.\n>>> Reporter.objects.get(id=1)\n<Reporter: John Smith>\n>>> Reporter.objects.get(full_name__startswith='John')\n<Reporter: John Smith>\n>>> Reporter.objects.get(full_name__contains='mith')\n<Reporter: John Smith>\n>>> Reporter.objects.get(id=2)\nTraceback (most recent call last):\n    ...\nDoesNotExist: Reporter matching query does not exist.\n\n# Create an article.\n>>> from datetime import date\n>>> a = Article(pub_date=date.today(), headline='Django is cool',\n...     content='Yeah.', reporter=r)\n>>> a.save()\n\n# Now the article is in the database.\n>>> Article.objects.all()\n<QuerySet [<Article: Django is cool>]>\n\n# Article objects get API access to related Reporter objects.\n>>> r = a.reporter\n>>> r.full_name\n'John Smith'\n\n# And vice versa: Reporter objects get API access to Article objects.\n>>> r.article_set.all()\n<QuerySet [<Article: Django is cool>]>\n\n# The API follows relationships as far as you need, performing efficient\n# JOINs for you behind the scenes.\n# This finds all articles by a reporter whose name starts with \"John\".\n>>> Article.objects.filter(reporter__full_name__startswith='John')\n<QuerySet [<Article: Django is cool>]>\n\n# Change an object by altering its attributes and calling save().\n>>> r.full_name = 'Billy Goat'\n>>> r.save()\n\n# Delete an object with delete().\n>>> r.delete()\n A dynamic admin interface: it\u2019s not just scaffolding \u2013 it\u2019s the whole house Once your models are defined, Django can automatically create a professional, production ready administrative interface \u2013 a website that lets authenticated users add, change and delete objects. The only step required is to register your model in the admin site:  mysite/news/models.py from django.db import models\n\nclass Article(models.Model):\n    pub_date = models.DateField()\n    headline = models.CharField(max_length=200)\n    content = models.TextField()\n    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)\n   mysite/news/admin.py from django.contrib import admin\n\nfrom . import models\n\nadmin.site.register(models.Article)\n  The philosophy here is that your site is edited by a staff, or a client, or maybe just you \u2013 and you don\u2019t want to have to deal with creating backend interfaces only to manage content. One typical workflow in creating Django apps is to create models and get the admin sites up and running as fast as possible, so your staff (or clients) can start populating data. Then, develop the way data is presented to the public. Design your URLs A clean, elegant URL scheme is an important detail in a high-quality web application. Django encourages beautiful URL design and doesn\u2019t put any cruft in URLs, like .php or .asp. To design URLs for an app, you create a Python module called a URLconf. A table of contents for your app, it contains a mapping between URL patterns and Python callback functions. URLconfs also serve to decouple URLs from Python code. Here\u2019s what a URLconf might look like for the Reporter/Article example above:  mysite/news/urls.py from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('articles/<int:year>/', views.year_archive),\n    path('articles/<int:year>/<int:month>/', views.month_archive),\n    path('articles/<int:year>/<int:month>/<int:pk>/', views.article_detail),\n]\n  The code above maps URL paths to Python callback functions (\u201cviews\u201d). The path strings use parameter tags to \u201ccapture\u201d values from the URLs. When a user requests a page, Django runs through each path, in order, and stops at the first one that matches the requested URL. (If none of them matches, Django calls a special-case 404 view.) This is blazingly fast, because the paths are compiled into regular expressions at load time. Once one of the URL patterns matches, Django calls the given view, which is a Python function. Each view gets passed a request object \u2013 which contains request metadata \u2013 and the values captured in the pattern. For example, if a user requested the URL \u201c/articles/2005/05/39323/\u201d, Django would call the function news.views.article_detail(request,\nyear=2005, month=5, pk=39323). Write your views Each view is responsible for doing one of two things: Returning an HttpResponse object containing the content for the requested page, or raising an exception such as Http404. The rest is up to you. Generally, a view retrieves data according to the parameters, loads a template and renders the template with the retrieved data. Here\u2019s an example view for year_archive from above:  mysite/news/views.py from django.shortcuts import render\n\nfrom .models import Article\n\ndef year_archive(request, year):\n    a_list = Article.objects.filter(pub_date__year=year)\n    context = {'year': year, 'article_list': a_list}\n    return render(request, 'news/year_archive.html', context)\n  This example uses Django\u2019s template system, which has several powerful features but strives to stay simple enough for non-programmers to use. Design your templates The code above loads the news/year_archive.html template. Django has a template search path, which allows you to minimize redundancy among templates. In your Django settings, you specify a list of directories to check for templates with DIRS. If a template doesn\u2019t exist in the first directory, it checks the second, and so on. Let\u2019s say the news/year_archive.html template was found. Here\u2019s what that might look like:  mysite/news/templates/news/year_archive.html {% extends \"base.html\" %}\n\n{% block title %}Articles for {{ year }}{% endblock %}\n\n{% block content %}\n<h1>Articles for {{ year }}</h1>\n\n{% for article in article_list %}\n    <p>{{ article.headline }}</p>\n    <p>By {{ article.reporter.full_name }}</p>\n    <p>Published {{ article.pub_date|date:\"F j, Y\" }}</p>\n{% endfor %}\n{% endblock %}\n  Variables are surrounded by double-curly braces. {{ article.headline }} means \u201cOutput the value of the article\u2019s headline attribute.\u201d But dots aren\u2019t used only for attribute lookup. They also can do dictionary-key lookup, index lookup and function calls. Note {{ article.pub_date|date:\"F j, Y\" }} uses a Unix-style \u201cpipe\u201d (the \u201c|\u201d character). This is called a template filter, and it\u2019s a way to filter the value of a variable. In this case, the date filter formats a Python datetime object in the given format (as found in PHP\u2019s date function). You can chain together as many filters as you\u2019d like. You can write custom template filters. You can write custom template tags, which run custom Python code behind the scenes. Finally, Django uses the concept of \u201ctemplate inheritance\u201d. That\u2019s what the {% extends \"base.html\" %} does. It means \u201cFirst load the template called \u2018base\u2019, which has defined a bunch of blocks, and fill the blocks with the following blocks.\u201d In short, that lets you dramatically cut down on redundancy in templates: each template has to define only what\u2019s unique to that template. Here\u2019s what the \u201cbase.html\u201d template, including the use of static files, might look like:  mysite/templates/base.html {% load static %}\n<html>\n<head>\n    <title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n    <img src=\"{% static 'images/sitelogo.png' %}\" alt=\"Logo\">\n    {% block content %}{% endblock %}\n</body>\n</html>\n  Simplistically, it defines the look-and-feel of the site (with the site\u2019s logo), and provides \u201choles\u201d for child templates to fill. This means that a site redesign can be done by changing a single file \u2013 the base template. It also lets you create multiple versions of a site, with different base templates, while reusing child templates. Django\u2019s creators have used this technique to create strikingly different mobile versions of sites by only creating a new base template. Note that you don\u2019t have to use Django\u2019s template system if you prefer another system. While Django\u2019s template system is particularly well-integrated with Django\u2019s model layer, nothing forces you to use it. For that matter, you don\u2019t have to use Django\u2019s database API, either. You can use another database abstraction layer, you can read XML files, you can read files off disk, or anything you want. Each piece of Django \u2013 models, views, templates \u2013 is decoupled from the next. This is just the surface This has been only a quick overview of Django\u2019s functionality. Some more useful features:  A caching framework that integrates with memcached or other backends. A syndication framework that lets you create RSS and Atom feeds by writing a small Python class. More attractive automatically-generated admin features \u2013 this overview barely scratched the surface.  The next steps are for you to download Django, read the tutorial and join the community. Thanks for your interest!\n"}, {"name": "Django Exceptions", "path": "ref/exceptions", "type": "API", "text": "Django Exceptions Django raises some of its own exceptions as well as standard Python exceptions. Django Core Exceptions Django core exception classes are defined in django.core.exceptions. AppRegistryNotReady  \nexception AppRegistryNotReady [source]\n \nThis exception is raised when attempting to use models before the app loading process, which initializes the ORM, is complete. \n ObjectDoesNotExist  \nexception ObjectDoesNotExist [source]\n \nThe base class for Model.DoesNotExist exceptions. A try/except for ObjectDoesNotExist will catch DoesNotExist exceptions for all models. See get(). \n EmptyResultSet  \nexception EmptyResultSet [source]\n \nEmptyResultSet may be raised during query generation if a query won\u2019t return any results. Most Django projects won\u2019t encounter this exception, but it might be useful for implementing custom lookups and expressions. \n FieldDoesNotExist  \nexception FieldDoesNotExist [source]\n \nThe FieldDoesNotExist exception is raised by a model\u2019s _meta.get_field() method when the requested field does not 