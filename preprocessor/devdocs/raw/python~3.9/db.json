{"index":"<h1 id=\"library-index\">Python</h1> <p id=\"the-python-standard-library\">While <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/index.html#reference-index\"><span class=\"std std-ref\">The Python Language Reference</span></a> describes the exact syntax and semantics of the Python language, this library reference manual describes the standard library that is distributed with Python. It also describes some of the optional components that are commonly included in Python distributions.</p> <p>Python’s standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents listed below. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs.</p> <p>The Python installers for the Windows platform usually include the entire standard library and often also include many additional components. For Unix-like operating systems Python is normally provided as a collection of packages, so it may be necessary to use the packaging tools provided with the operating system to obtain some or all of the optional components.</p> <p>In addition to the standard library, there is a growing collection of several thousand components (from individual programs and modules to packages and entire application development frameworks), available from the <a class=\"reference external\" href=\"https://pypi.org\">Python Package Index</a>.</p>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://docs.python.org/3.9/library/intro.html\">Introduction</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"https://docs.python.org/3.9/library/intro.html#notes-on-availability\">Notes on availability</a></li> </ul> </li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"library/functions\">Built-in Functions</a></li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/constants\">Built-in Constants</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/constants#constants-added-by-the-site-module\">Constants added by the <code>site</code> module</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/stdtypes\">Built-in Types</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#truth-value-testing\">Truth Value Testing</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#boolean-operations-and-or-not\">Boolean Operations — <code>and</code>, <code>or</code>, <code>not</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#comparisons\">Comparisons</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#numeric-types-int-float-complex\">Numeric Types — <code>int</code>, <code>float</code>, <code>complex</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#iterator-types\">Iterator Types</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#sequence-types-list-tuple-range\">Sequence Types — <code>list</code>, <code>tuple</code>, <code>range</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#text-sequence-type-str\">Text Sequence Type — <code>str</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#binary-sequence-types-bytes-bytearray-memoryview\">Binary Sequence Types — <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#set-types-set-frozenset\">Set Types — <code>set</code>, <code>frozenset</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#mapping-types-dict\">Mapping Types — <code>dict</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#context-manager-types\">Context Manager Types</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#generic-alias-type\">Generic Alias Type</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#other-built-in-types\">Other Built-in Types</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stdtypes#special-attributes\">Special Attributes</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/exceptions\">Built-in Exceptions</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/exceptions#base-classes\">Base classes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/exceptions#concrete-exceptions\">Concrete exceptions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/exceptions#warnings\">Warnings</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/exceptions#exception-hierarchy\">Exception hierarchy</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/text\">Text Processing Services</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/string\"><code>string</code> — Common string operations</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/re\"><code>re</code> — Regular expression operations</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/difflib\"><code>difflib</code> — Helpers for computing deltas</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/textwrap\"><code>textwrap</code> — Text wrapping and filling</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/unicodedata\"><code>unicodedata</code> — Unicode Database</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stringprep\"><code>stringprep</code> — Internet String Preparation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/readline\"><code>readline</code> — GNU readline interface</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/rlcompleter\"><code>rlcompleter</code> — Completion function for GNU readline</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/binary\">Binary Data Services</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/struct\"><code>struct</code> — Interpret bytes as packed binary data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/codecs\"><code>codecs</code> — Codec registry and base classes</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/datatypes\">Data Types</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/datetime\"><code>datetime</code> — Basic date and time types</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/zoneinfo\"><code>zoneinfo</code> — IANA time zone support</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/calendar\"><code>calendar</code> — General calendar-related functions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/collections\"><code>collections</code> — Container datatypes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/collections.abc\"><code>collections.abc</code> — Abstract Base Classes for Containers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/heapq\"><code>heapq</code> — Heap queue algorithm</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/bisect\"><code>bisect</code> — Array bisection algorithm</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/array\"><code>array</code> — Efficient arrays of numeric values</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/weakref\"><code>weakref</code> — Weak references</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/types\"><code>types</code> — Dynamic type creation and names for built-in types</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/copy\"><code>copy</code> — Shallow and deep copy operations</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pprint\"><code>pprint</code> — Data pretty printer</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/reprlib\"><code>reprlib</code> — Alternate <code>repr()</code> implementation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/enum\"><code>enum</code> — Support for enumerations</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/graphlib\"><code>graphlib</code> — Functionality to operate with graph-like structures</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/numeric\">Numeric and Mathematical Modules</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/numbers\"><code>numbers</code> — Numeric abstract base classes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/math\"><code>math</code> — Mathematical functions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/cmath\"><code>cmath</code> — Mathematical functions for complex numbers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/decimal\"><code>decimal</code> — Decimal fixed point and floating point arithmetic</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/fractions\"><code>fractions</code> — Rational numbers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/random\"><code>random</code> — Generate pseudo-random numbers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/statistics\"><code>statistics</code> — Mathematical statistics functions</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/functional\">Functional Programming Modules</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/itertools\"><code>itertools</code> — Functions creating iterators for efficient looping</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/functools\"><code>functools</code> — Higher-order functions and operations on callable objects</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/operator\"><code>operator</code> — Standard operators as functions</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/filesys\">File and Directory Access</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pathlib\"><code>pathlib</code> — Object-oriented filesystem paths</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/os.path\"><code>os.path</code> — Common pathname manipulations</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/fileinput\"><code>fileinput</code> — Iterate over lines from multiple input streams</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/stat\"><code>stat</code> — Interpreting <code>stat()</code> results</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/filecmp\"><code>filecmp</code> — File and Directory Comparisons</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tempfile\"><code>tempfile</code> — Generate temporary files and directories</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/glob\"><code>glob</code> — Unix style pathname pattern expansion</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/fnmatch\"><code>fnmatch</code> — Unix filename pattern matching</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/linecache\"><code>linecache</code> — Random access to text lines</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/shutil\"><code>shutil</code> — High-level file operations</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/persistence\">Data Persistence</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pickle\"><code>pickle</code> — Python object serialization</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/copyreg\"><code>copyreg</code> — Register <code>pickle</code> support functions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/shelve\"><code>shelve</code> — Python object persistence</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/marshal\"><code>marshal</code> — Internal Python object serialization</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/dbm\"><code>dbm</code> — Interfaces to Unix “databases”</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/sqlite3\"><code>sqlite3</code> — DB-API 2.0 interface for SQLite databases</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/archiving\">Data Compression and Archiving</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/zlib\"><code>zlib</code> — Compression compatible with <strong class=\"program\">gzip</strong></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/gzip\"><code>gzip</code> — Support for <strong class=\"program\">gzip</strong> files</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/bz2\"><code>bz2</code> — Support for <strong class=\"program\">bzip2</strong> compression</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/lzma\"><code>lzma</code> — Compression using the LZMA algorithm</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/zipfile\"><code>zipfile</code> — Work with ZIP archives</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tarfile\"><code>tarfile</code> — Read and write tar archive files</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/fileformats\">File Formats</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/csv\"><code>csv</code> — CSV File Reading and Writing</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/configparser\"><code>configparser</code> — Configuration file parser</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/netrc\"><code>netrc</code> — netrc file processing</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xdrlib\"><code>xdrlib</code> — Encode and decode XDR data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/plistlib\"><code>plistlib</code> — Generate and parse Apple <code>.plist</code> files</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/crypto\">Cryptographic Services</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/hashlib\"><code>hashlib</code> — Secure hashes and message digests</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/hmac\"><code>hmac</code> — Keyed-Hashing for Message Authentication</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/secrets\"><code>secrets</code> — Generate secure random numbers for managing secrets</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/allos\">Generic Operating System Services</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/os\"><code>os</code> — Miscellaneous operating system interfaces</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/io\"><code>io</code> — Core tools for working with streams</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/time\"><code>time</code> — Time access and conversions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/argparse\"><code>argparse</code> — Parser for command-line options, arguments and sub-commands</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/getopt\"><code>getopt</code> — C-style parser for command line options</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/logging\"><code>logging</code> — Logging facility for Python</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/logging.config\"><code>logging.config</code> — Logging configuration</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/logging.handlers\"><code>logging.handlers</code> — Logging handlers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/getpass\"><code>getpass</code> — Portable password input</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/curses\"><code>curses</code> — Terminal handling for character-cell displays</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/curses#module-curses.textpad\"><code>curses.textpad</code> — Text input widget for curses programs</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/curses.ascii\"><code>curses.ascii</code> — Utilities for ASCII characters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/curses.panel\"><code>curses.panel</code> — A panel stack extension for curses</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/platform\"><code>platform</code> — Access to underlying platform’s identifying data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/errno\"><code>errno</code> — Standard errno system symbols</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/ctypes\"><code>ctypes</code> — A foreign function library for Python</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/concurrency\">Concurrent Execution</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/threading\"><code>threading</code> — Thread-based parallelism</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/multiprocessing\"><code>multiprocessing</code> — Process-based parallelism</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/multiprocessing.shared_memory\"><code>multiprocessing.shared_memory</code> — Provides shared memory for direct access across processes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/concurrent\">The <code>concurrent</code> package</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/concurrent.futures\"><code>concurrent.futures</code> — Launching parallel tasks</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/subprocess\"><code>subprocess</code> — Subprocess management</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/sched\"><code>sched</code> — Event scheduler</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/queue\"><code>queue</code> — A synchronized queue class</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/contextvars\"><code>contextvars</code> — Context Variables</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/_thread\"><code>_thread</code> — Low-level threading API</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/ipc\">Networking and Interprocess Communication</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/asyncio\"><code>asyncio</code> — Asynchronous I/O</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/socket\"><code>socket</code> — Low-level networking interface</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/ssl\"><code>ssl</code> — TLS/SSL wrapper for socket objects</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/select\"><code>select</code> — Waiting for I/O completion</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/selectors\"><code>selectors</code> — High-level I/O multiplexing</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/asyncore\"><code>asyncore</code> — Asynchronous socket handler</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/asynchat\"><code>asynchat</code> — Asynchronous socket command/response handler</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/signal\"><code>signal</code> — Set handlers for asynchronous events</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/mmap\"><code>mmap</code> — Memory-mapped file support</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/netdata\">Internet Data Handling</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/email\"><code>email</code> — An email and MIME handling package</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/json\"><code>json</code> — JSON encoder and decoder</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/mailcap\"><code>mailcap</code> — Mailcap file handling</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/mailbox\"><code>mailbox</code> — Manipulate mailboxes in various formats</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/mimetypes\"><code>mimetypes</code> — Map filenames to MIME types</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/base64\"><code>base64</code> — Base16, Base32, Base64, Base85 Data Encodings</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/binhex\"><code>binhex</code> — Encode and decode binhex4 files</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/binascii\"><code>binascii</code> — Convert between binary and ASCII</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/quopri\"><code>quopri</code> — Encode and decode MIME quoted-printable data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/uu\"><code>uu</code> — Encode and decode uuencode files</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/markup\">Structured Markup Processing Tools</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/html\"><code>html</code> — HyperText Markup Language support</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/html.parser\"><code>html.parser</code> — Simple HTML and XHTML parser</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/html.entities\"><code>html.entities</code> — Definitions of HTML general entities</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xml\">XML Processing Modules</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xml.etree.elementtree\"><code>xml.etree.ElementTree</code> — The ElementTree XML API</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xml.dom\"><code>xml.dom</code> — The Document Object Model API</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xml.dom.minidom\"><code>xml.dom.minidom</code> — Minimal DOM implementation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xml.dom.pulldom\"><code>xml.dom.pulldom</code> — Support for building partial DOM trees</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xml.sax\"><code>xml.sax</code> — Support for SAX2 parsers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xml.sax.handler\"><code>xml.sax.handler</code> — Base classes for SAX handlers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xml.sax.utils\"><code>xml.sax.saxutils</code> — SAX Utilities</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xml.sax.reader\"><code>xml.sax.xmlreader</code> — Interface for XML parsers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pyexpat\"><code>xml.parsers.expat</code> — Fast XML parsing using Expat</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/internet\">Internet Protocols and Support</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/webbrowser\"><code>webbrowser</code> — Convenient Web-browser controller</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/cgi\"><code>cgi</code> — Common Gateway Interface support</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/cgitb\"><code>cgitb</code> — Traceback manager for CGI scripts</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/wsgiref\"><code>wsgiref</code> — WSGI Utilities and Reference Implementation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/urllib\"><code>urllib</code> — URL handling modules</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/urllib.request\"><code>urllib.request</code> — Extensible library for opening URLs</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/urllib.request#module-urllib.response\"><code>urllib.response</code> — Response classes used by urllib</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/urllib.parse\"><code>urllib.parse</code> — Parse URLs into components</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/urllib.error\"><code>urllib.error</code> — Exception classes raised by urllib.request</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/urllib.robotparser\"><code>urllib.robotparser</code> — Parser for robots.txt</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/http\"><code>http</code> — HTTP modules</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/http.client\"><code>http.client</code> — HTTP protocol client</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/ftplib\"><code>ftplib</code> — FTP protocol client</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/poplib\"><code>poplib</code> — POP3 protocol client</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/imaplib\"><code>imaplib</code> — IMAP4 protocol client</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/nntplib\"><code>nntplib</code> — NNTP protocol client</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/smtplib\"><code>smtplib</code> — SMTP protocol client</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/smtpd\"><code>smtpd</code> — SMTP Server</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/telnetlib\"><code>telnetlib</code> — Telnet client</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/uuid\"><code>uuid</code> — UUID objects according to <strong>RFC 4122</strong></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/socketserver\"><code>socketserver</code> — A framework for network servers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/http.server\"><code>http.server</code> — HTTP servers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/http.cookies\"><code>http.cookies</code> — HTTP state management</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/http.cookiejar\"><code>http.cookiejar</code> — Cookie handling for HTTP clients</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xmlrpc\"><code>xmlrpc</code> — XMLRPC server and client modules</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xmlrpc.client\"><code>xmlrpc.client</code> — XML-RPC client access</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/xmlrpc.server\"><code>xmlrpc.server</code> — Basic XML-RPC servers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/ipaddress\"><code>ipaddress</code> — IPv4/IPv6 manipulation library</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/mm\">Multimedia Services</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/audioop\"><code>audioop</code> — Manipulate raw audio data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/aifc\"><code>aifc</code> — Read and write AIFF and AIFC files</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"https://docs.python.org/3.9/library/sunau.html\"><code>sunau</code> — Read and write Sun AU files</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/wave\"><code>wave</code> — Read and write WAV files</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/chunk\"><code>chunk</code> — Read IFF chunked data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/colorsys\"><code>colorsys</code> — Conversions between color systems</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/imghdr\"><code>imghdr</code> — Determine the type of an image</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/sndhdr\"><code>sndhdr</code> — Determine type of sound file</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/ossaudiodev\"><code>ossaudiodev</code> — Access to OSS-compatible audio devices</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/i18n\">Internationalization</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/gettext\"><code>gettext</code> — Multilingual internationalization services</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/locale\"><code>locale</code> — Internationalization services</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/frameworks\">Program Frameworks</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/turtle\"><code>turtle</code> — Turtle graphics</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/cmd\"><code>cmd</code> — Support for line-oriented command interpreters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/shlex\"><code>shlex</code> — Simple lexical analysis</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/tk\">Graphical User Interfaces with Tk</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tkinter\"><code>tkinter</code> — Python interface to Tcl/Tk</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tkinter.colorchooser\"><code>tkinter.colorchooser</code> — Color choosing dialog</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tkinter.font\"><code>tkinter.font</code> — Tkinter font wrapper</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/dialog\">Tkinter Dialogs</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tkinter.messagebox\"><code>tkinter.messagebox</code> — Tkinter message prompts</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tkinter.scrolledtext\"><code>tkinter.scrolledtext</code> — Scrolled Text Widget</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tkinter.dnd\"><code>tkinter.dnd</code> — Drag and drop support</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tkinter.ttk\"><code>tkinter.ttk</code> — Tk themed widgets</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tkinter.tix\"><code>tkinter.tix</code> — Extension widgets for Tk</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/idle\">IDLE</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/othergui\">Other Graphical User Interface Packages</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/development\">Development Tools</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/typing\"><code>typing</code> — Support for type hints</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pydoc\"><code>pydoc</code> — Documentation generator and online help system</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/devmode\">Python Development Mode</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/devmode#effects-of-the-python-development-mode\">Effects of the Python Development Mode</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/devmode#resourcewarning-example\">ResourceWarning Example</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/devmode#bad-file-descriptor-error-example\">Bad file descriptor error example</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/doctest\"><code>doctest</code> — Test interactive Python examples</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/unittest\"><code>unittest</code> — Unit testing framework</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/unittest.mock\"><code>unittest.mock</code> — mock object library</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"https://docs.python.org/3.9/library/unittest.mock-examples.html\"><code>unittest.mock</code> — getting started</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"https://docs.python.org/3.9/library/2to3.html\">2to3 - Automated Python 2 to 3 code translation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/test\"><code>test</code> — Regression tests package for Python</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/test#module-test.support\"><code>test.support</code> — Utilities for the Python test suite</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/test#module-test.support.socket_helper\"><code>test.support.socket_helper</code> — Utilities for socket tests</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/test#module-test.support.script_helper\"><code>test.support.script_helper</code> — Utilities for the Python execution tests</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/test#module-test.support.bytecode_helper\"><code>test.support.bytecode_helper</code> — Support tools for testing correct bytecode generation</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/debug\">Debugging and Profiling</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/audit_events\">Audit events table</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/bdb\"><code>bdb</code> — Debugger framework</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/faulthandler\"><code>faulthandler</code> — Dump the Python traceback</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pdb\"><code>pdb</code> — The Python Debugger</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/profile\">The Python Profilers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/timeit\"><code>timeit</code> — Measure execution time of small code snippets</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/trace\"><code>trace</code> — Trace or track Python statement execution</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tracemalloc\"><code>tracemalloc</code> — Trace memory allocations</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/distribution\">Software Packaging and Distribution</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/distutils\"><code>distutils</code> — Building and installing Python modules</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/ensurepip\"><code>ensurepip</code> — Bootstrapping the <code>pip</code> installer</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/venv\"><code>venv</code> — Creation of virtual environments</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/zipapp\"><code>zipapp</code> — Manage executable Python zip archives</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/python\">Python Runtime Services</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/sys\"><code>sys</code> — System-specific parameters and functions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/sysconfig\"><code>sysconfig</code> — Provide access to Python’s configuration information</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/builtins\"><code>builtins</code> — Built-in objects</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/__main__\"><code>__main__</code> — Top-level script environment</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/warnings\"><code>warnings</code> — Warning control</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/dataclasses\"><code>dataclasses</code> — Data Classes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/contextlib\"><code>contextlib</code> — Utilities for <code>with</code>-statement contexts</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/abc\"><code>abc</code> — Abstract Base Classes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/atexit\"><code>atexit</code> — Exit handlers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/traceback\"><code>traceback</code> — Print or retrieve a stack traceback</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/__future__\"><code>__future__</code> — Future statement definitions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/gc\"><code>gc</code> — Garbage Collector interface</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/inspect\"><code>inspect</code> — Inspect live objects</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/site\"><code>site</code> — Site-specific configuration hook</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/custominterp\">Custom Python Interpreters</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/code\"><code>code</code> — Interpreter base classes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/codeop\"><code>codeop</code> — Compile Python code</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/modules\">Importing Modules</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/zipimport\"><code>zipimport</code> — Import modules from Zip archives</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pkgutil\"><code>pkgutil</code> — Package extension utility</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/modulefinder\"><code>modulefinder</code> — Find modules used by a script</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/runpy\"><code>runpy</code> — Locating and executing Python modules</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/importlib\"><code>importlib</code> — The implementation of <code>import</code></a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/importlib.metadata\">Using <code>importlib.metadata</code></a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/language\">Python Language Services</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/parser\"><code>parser</code> — Access Python parse trees</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/ast\"><code>ast</code> — Abstract Syntax Trees</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/symtable\"><code>symtable</code> — Access to the compiler’s symbol tables</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/symbol\"><code>symbol</code> — Constants used with Python parse trees</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/token\"><code>token</code> — Constants used with Python parse trees</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/keyword\"><code>keyword</code> — Testing for Python keywords</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tokenize\"><code>tokenize</code> — Tokenizer for Python source</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tabnanny\"><code>tabnanny</code> — Detection of ambiguous indentation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pyclbr\"><code>pyclbr</code> — Python module browser support</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/py_compile\"><code>py_compile</code> — Compile Python source files</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/compileall\"><code>compileall</code> — Byte-compile Python libraries</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/dis\"><code>dis</code> — Disassembler for Python bytecode</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pickletools\"><code>pickletools</code> — Tools for pickle developers</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/misc\">Miscellaneous Services</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"https://docs.python.org/3.9/library/formatter.html\"><code>formatter</code> — Generic output formatting</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/windows\">MS Windows Specific Services</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/msilib\"><code>msilib</code> — Read and write Microsoft Installer files</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/msvcrt\"><code>msvcrt</code> — Useful routines from the MS VC++ runtime</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/winreg\"><code>winreg</code> — Windows registry access</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/winsound\"><code>winsound</code> — Sound-playing interface for Windows</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/unix\">Unix Specific Services</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/posix\"><code>posix</code> — The most common POSIX system calls</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pwd\"><code>pwd</code> — The password database</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/spwd\"><code>spwd</code> — The shadow password database</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/grp\"><code>grp</code> — The group database</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/crypt\"><code>crypt</code> — Function to check Unix passwords</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/termios\"><code>termios</code> — POSIX style tty control</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/tty\"><code>tty</code> — Terminal control functions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pty\"><code>pty</code> — Pseudo-terminal utilities</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/fcntl\"><code>fcntl</code> — The <code>fcntl</code> and <code>ioctl</code> system calls</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/pipes\"><code>pipes</code> — Interface to shell pipelines</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/resource\"><code>resource</code> — Resource usage information</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/nis\"><code>nis</code> — Interface to Sun’s NIS (Yellow Pages)</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/syslog\"><code>syslog</code> — Unix syslog library routines</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"library/superseded\">Superseded Modules</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/optparse\"><code>optparse</code> — Parser for command line options</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"library/imp\"><code>imp</code> — Access the <span class=\"xref std std-ref\">import</span> internals</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://docs.python.org/3.9/library/undoc.html\">Undocumented Modules</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"https://docs.python.org/3.9/library/undoc.html#platform-specific-modules\">Platform specific modules</a></li> </ul> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/index.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/index.html</a>\n  </p>\n</div>\n","library/functions":"<h1 id=\"built-in-funcs\">Built-in Functions</h1> <p id=\"built-in-functions\">The Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order.</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"></th> <th class=\"head\"></th> <th class=\"head\"><p>Built-in Functions</p></th> <th class=\"head\"></th> <th class=\"head\"></th> </tr> </thead>  <tr>\n<td><p><a class=\"reference internal\" href=\"#abs\" title=\"abs\"><code>abs()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#delattr\" title=\"delattr\"><code>delattr()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#hash\" title=\"hash\"><code>hash()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#func-memoryview\"><code>memoryview()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#func-set\"><code>set()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#all\" title=\"all\"><code>all()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#func-dict\"><code>dict()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#help\" title=\"help\"><code>help()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#min\" title=\"min\"><code>min()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#setattr\" title=\"setattr\"><code>setattr()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#any\" title=\"any\"><code>any()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#dir\" title=\"dir\"><code>dir()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#hex\" title=\"hex\"><code>hex()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#next\" title=\"next\"><code>next()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#slice\" title=\"slice\"><code>slice()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#ascii\" title=\"ascii\"><code>ascii()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#divmod\" title=\"divmod\"><code>divmod()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#id\" title=\"id\"><code>id()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#object\" title=\"object\"><code>object()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#sorted\" title=\"sorted\"><code>sorted()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#bin\" title=\"bin\"><code>bin()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#enumerate\" title=\"enumerate\"><code>enumerate()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#input\" title=\"input\"><code>input()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#oct\" title=\"oct\"><code>oct()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#staticmethod\" title=\"staticmethod\"><code>staticmethod()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#bool\" title=\"bool\"><code>bool()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#eval\" title=\"eval\"><code>eval()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#open\" title=\"open\"><code>open()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#func-str\"><code>str()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#breakpoint\" title=\"breakpoint\"><code>breakpoint()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#exec\" title=\"exec\"><code>exec()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#isinstance\" title=\"isinstance\"><code>isinstance()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#ord\" title=\"ord\"><code>ord()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#sum\" title=\"sum\"><code>sum()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#func-bytearray\"><code>bytearray()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#filter\" title=\"filter\"><code>filter()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#issubclass\" title=\"issubclass\"><code>issubclass()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#pow\" title=\"pow\"><code>pow()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#super\" title=\"super\"><code>super()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#func-bytes\"><code>bytes()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#float\" title=\"float\"><code>float()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#iter\" title=\"iter\"><code>iter()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#print\" title=\"print\"><code>print()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#func-tuple\"><code>tuple()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#callable\" title=\"callable\"><code>callable()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#format\" title=\"format\"><code>format()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#len\" title=\"len\"><code>len()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#property\" title=\"property\"><code>property()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#type\" title=\"type\"><code>type()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#chr\" title=\"chr\"><code>chr()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#func-frozenset\"><code>frozenset()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#func-list\"><code>list()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#func-range\"><code>range()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#vars\" title=\"vars\"><code>vars()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#classmethod\" title=\"classmethod\"><code>classmethod()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#getattr\" title=\"getattr\"><code>getattr()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#locals\" title=\"locals\"><code>locals()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#repr\" title=\"repr\"><code>repr()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#zip\" title=\"zip\"><code>zip()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#compile\" title=\"compile\"><code>compile()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#globals\" title=\"globals\"><code>globals()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#map\" title=\"map\"><code>map()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#reversed\" title=\"reversed\"><code>reversed()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#__import__\" title=\"__import__\"><code>__import__()</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"#complex\" title=\"complex\"><code>complex()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#hasattr\" title=\"hasattr\"><code>hasattr()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#max\" title=\"max\"><code>max()</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#round\" title=\"round\"><code>round()</code></a></p></td> <td></td> </tr>  </table> <dl class=\"function\"> <dt id=\"abs\">\n<code>abs(x)</code> </dt> <dd>\n<p>Return the absolute value of a number. The argument may be an integer, a floating point number, or an object implementing <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__abs__\" title=\"object.__abs__\"><code>__abs__()</code></a>. If the argument is a complex number, its magnitude is returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"all\">\n<code>all(iterable)</code> </dt> <dd>\n<p>Return <code>True</code> if all elements of the <em>iterable</em> are true (or if the iterable is empty). Equivalent to:</p> <pre data-language=\"python\">def all(iterable):\n    for element in iterable:\n        if not element:\n            return False\n    return True\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"any\">\n<code>any(iterable)</code> </dt> <dd>\n<p>Return <code>True</code> if any element of the <em>iterable</em> is true. If the iterable is empty, return <code>False</code>. Equivalent to:</p> <pre data-language=\"python\">def any(iterable):\n    for element in iterable:\n        if element:\n            return True\n    return False\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"ascii\">\n<code>ascii(object)</code> </dt> <dd>\n<p>As <a class=\"reference internal\" href=\"#repr\" title=\"repr\"><code>repr()</code></a>, return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by <a class=\"reference internal\" href=\"#repr\" title=\"repr\"><code>repr()</code></a> using <code>\\x</code>, <code>\\u</code> or <code>\\U</code> escapes. This generates a string similar to that returned by <a class=\"reference internal\" href=\"#repr\" title=\"repr\"><code>repr()</code></a> in Python 2.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"bin\">\n<code>bin(x)</code> </dt> <dd>\n<p>Convert an integer number to a binary string prefixed with “0b”. The result is a valid Python expression. If <em>x</em> is not a Python <a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int</code></a> object, it has to define an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a> method that returns an integer. Some examples:</p> <pre data-language=\"python\">&gt;&gt;&gt; bin(3)\n'0b11'\n&gt;&gt;&gt; bin(-10)\n'-0b1010'\n</pre> <p>If prefix “0b” is desired or not, you can use either of the following ways.</p> <pre data-language=\"python\">&gt;&gt;&gt; format(14, '#b'), format(14, 'b')\n('0b1110', '1110')\n&gt;&gt;&gt; f'{14:#b}', f'{14:b}'\n('0b1110', '1110')\n</pre> <p>See also <a class=\"reference internal\" href=\"#format\" title=\"format\"><code>format()</code></a> for more information.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"bool\">\n<code>class bool([x])</code> </dt> <dd>\n<p>Return a Boolean value, i.e. one of <code>True</code> or <code>False</code>. <em>x</em> is converted using the standard <a class=\"reference internal\" href=\"stdtypes#truth\"><span class=\"std std-ref\">truth testing procedure</span></a>. If <em>x</em> is false or omitted, this returns <code>False</code>; otherwise it returns <code>True</code>. The <a class=\"reference internal\" href=\"#bool\" title=\"bool\"><code>bool</code></a> class is a subclass of <a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int</code></a> (see <a class=\"reference internal\" href=\"stdtypes#typesnumeric\"><span class=\"std std-ref\">Numeric Types — int, float, complex</span></a>). It cannot be subclassed further. Its only instances are <code>False</code> and <code>True</code> (see <a class=\"reference internal\" href=\"stdtypes#bltin-boolean-values\"><span class=\"std std-ref\">Boolean Values</span></a>).</p> <div class=\"versionchanged\" id=\"index-0\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span><em>x</em> is now a positional-only parameter.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"breakpoint\">\n<code>breakpoint(*args, **kws)</code> </dt> <dd>\n<p>This function drops you into the debugger at the call site. Specifically, it calls <a class=\"reference internal\" href=\"sys#sys.breakpointhook\" title=\"sys.breakpointhook\"><code>sys.breakpointhook()</code></a>, passing <code>args</code> and <code>kws</code> straight through. By default, <code>sys.breakpointhook()</code> calls <a class=\"reference internal\" href=\"pdb#pdb.set_trace\" title=\"pdb.set_trace\"><code>pdb.set_trace()</code></a> expecting no arguments. In this case, it is purely a convenience function so you don’t have to explicitly import <a class=\"reference internal\" href=\"pdb#module-pdb\" title=\"pdb: The Python debugger for interactive interpreters.\"><code>pdb</code></a> or type as much code to enter the debugger. However, <a class=\"reference internal\" href=\"sys#sys.breakpointhook\" title=\"sys.breakpointhook\"><code>sys.breakpointhook()</code></a> can be set to some other function and <a class=\"reference internal\" href=\"#breakpoint\" title=\"breakpoint\"><code>breakpoint()</code></a> will automatically call that, allowing you to drop into the debugger of choice.</p> <p class=\"audit-hook\">Raises an <a class=\"reference internal\" href=\"sys#auditing\"><span class=\"std std-ref\">auditing event</span></a> <code>builtins.breakpoint</code> with argument <code>breakpointhook</code>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.7.</span></p> </div> </dd>\n</dl> <dl class=\"class\"> <dt id=\"bytearray\">\n<code>class bytearray([source[, encoding[, errors]]])</code> </dt> <dd>\n<p>Return a new array of bytes. The <a class=\"reference internal\" href=\"stdtypes#bytearray\" title=\"bytearray\"><code>bytearray</code></a> class is a mutable sequence of integers in the range 0 &lt;= x &lt; 256. It has most of the usual methods of mutable sequences, described in <a class=\"reference internal\" href=\"stdtypes#typesseq-mutable\"><span class=\"std std-ref\">Mutable Sequence Types</span></a>, as well as most methods that the <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> type has, see <a class=\"reference internal\" href=\"stdtypes#bytes-methods\"><span class=\"std std-ref\">Bytes and Bytearray Operations</span></a>.</p> <p>The optional <em>source</em> parameter can be used to initialize the array in a few different ways:</p> <ul class=\"simple\"> <li>If it is a <em>string</em>, you must also give the <em>encoding</em> (and optionally, <em>errors</em>) parameters; <a class=\"reference internal\" href=\"stdtypes#bytearray\" title=\"bytearray\"><code>bytearray()</code></a> then converts the string to bytes using <a class=\"reference internal\" href=\"stdtypes#str.encode\" title=\"str.encode\"><code>str.encode()</code></a>.</li> <li>If it is an <em>integer</em>, the array will have that size and will be initialized with null bytes.</li> <li>If it is an object conforming to the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/c-api/buffer.html#bufferobjects\"><span class=\"std std-ref\">buffer interface</span></a>, a read-only buffer of the object will be used to initialize the bytes array.</li> <li>If it is an <em>iterable</em>, it must be an iterable of integers in the range <code>0 &lt;= x &lt; 256</code>, which are used as the initial contents of the array.</li> </ul> <p>Without an argument, an array of size 0 is created.</p> <p>See also <a class=\"reference internal\" href=\"stdtypes#binaryseq\"><span class=\"std std-ref\">Binary Sequence Types — bytes, bytearray, memoryview</span></a> and <a class=\"reference internal\" href=\"stdtypes#typebytearray\"><span class=\"std std-ref\">Bytearray Objects</span></a>.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"bytes\">\n<code>class bytes([source[, encoding[, errors]]])</code> </dt> <dd>\n<p>Return a new “bytes” object, which is an immutable sequence of integers in the range <code>0 &lt;= x &lt; 256</code>. <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> is an immutable version of <a class=\"reference internal\" href=\"stdtypes#bytearray\" title=\"bytearray\"><code>bytearray</code></a> – it has the same non-mutating methods and the same indexing and slicing behavior.</p> <p>Accordingly, constructor arguments are interpreted as for <a class=\"reference internal\" href=\"stdtypes#bytearray\" title=\"bytearray\"><code>bytearray()</code></a>.</p> <p>Bytes objects can also be created with literals, see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#strings\"><span class=\"std std-ref\">String and Bytes literals</span></a>.</p> <p>See also <a class=\"reference internal\" href=\"stdtypes#binaryseq\"><span class=\"std std-ref\">Binary Sequence Types — bytes, bytearray, memoryview</span></a>, <a class=\"reference internal\" href=\"stdtypes#typebytes\"><span class=\"std std-ref\">Bytes Objects</span></a>, and <a class=\"reference internal\" href=\"stdtypes#bytes-methods\"><span class=\"std std-ref\">Bytes and Bytearray Operations</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"callable\">\n<code>callable(object)</code> </dt> <dd>\n<p>Return <a class=\"reference internal\" href=\"constants#True\" title=\"True\"><code>True</code></a> if the <em>object</em> argument appears callable, <a class=\"reference internal\" href=\"constants#False\" title=\"False\"><code>False</code></a> if not. If this returns <code>True</code>, it is still possible that a call fails, but if it is <code>False</code>, calling <em>object</em> will never succeed. Note that classes are callable (calling a class returns a new instance); instances are callable if their class has a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__call__\" title=\"object.__call__\"><code>__call__()</code></a> method.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2: </span>This function was first removed in Python 3.0 and then brought back in Python 3.2.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"chr\">\n<code>chr(i)</code> </dt> <dd>\n<p>Return the string representing a character whose Unicode code point is the integer <em>i</em>. For example, <code>chr(97)</code> returns the string <code>'a'</code>, while <code>chr(8364)</code> returns the string <code>'€'</code>. This is the inverse of <a class=\"reference internal\" href=\"#ord\" title=\"ord\"><code>ord()</code></a>.</p> <p>The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in base 16). <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> will be raised if <em>i</em> is outside that range.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"classmethod\">\n<code>@classmethod</code> </dt> <dd>\n<p>Transform a method into a class method.</p> <p>A class method receives the class as implicit first argument, just like an instance method receives the instance. To declare a class method, use this idiom:</p> <pre data-language=\"python\">class C:\n    @classmethod\n    def f(cls, arg1, arg2, ...): ...\n</pre> <p>The <code>@classmethod</code> form is a function <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-decorator\"><span class=\"xref std std-term\">decorator</span></a> – see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#function\"><span class=\"std std-ref\">Function definitions</span></a> for details.</p> <p>A class method can be called either on the class (such as <code>C.f()</code>) or on an instance (such as <code>C().f()</code>). The instance is ignored except for its class. If a class method is called for a derived class, the derived class object is passed as the implied first argument.</p> <p>Class methods are different than C++ or Java static methods. If you want those, see <a class=\"reference internal\" href=\"#staticmethod\" title=\"staticmethod\"><code>staticmethod()</code></a> in this section. For more information on class methods, see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#types\"><span class=\"std std-ref\">The standard type hierarchy</span></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.9: </span>Class methods can now wrap other <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-descriptor\"><span class=\"xref std std-term\">descriptors</span></a> such as <a class=\"reference internal\" href=\"#property\" title=\"property\"><code>property()</code></a>.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"compile\">\n<code>compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)</code> </dt> <dd>\n<p>Compile the <em>source</em> into a code or AST object. Code objects can be executed by <a class=\"reference internal\" href=\"#exec\" title=\"exec\"><code>exec()</code></a> or <a class=\"reference internal\" href=\"#eval\" title=\"eval\"><code>eval()</code></a>. <em>source</em> can either be a normal string, a byte string, or an AST object. Refer to the <a class=\"reference internal\" href=\"ast#module-ast\" title=\"ast: Abstract Syntax Tree classes and manipulation.\"><code>ast</code></a> module documentation for information on how to work with AST objects.</p> <p>The <em>filename</em> argument should give the file from which the code was read; pass some recognizable value if it wasn’t read from a file (<code>'&lt;string&gt;'</code> is commonly used).</p> <p>The <em>mode</em> argument specifies what kind of code must be compiled; it can be <code>'exec'</code> if <em>source</em> consists of a sequence of statements, <code>'eval'</code> if it consists of a single expression, or <code>'single'</code> if it consists of a single interactive statement (in the latter case, expression statements that evaluate to something other than <code>None</code> will be printed).</p> <p>The optional arguments <em>flags</em> and <em>dont_inherit</em> control which <a class=\"reference internal\" href=\"ast#ast-compiler-flags\"><span class=\"std std-ref\">compiler options</span></a> should be activated and which <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#future\"><span class=\"std std-ref\">future features</span></a> should be allowed. If neither is present (or both are zero) the code is compiled with the same flags that affect the code that is calling <a class=\"reference internal\" href=\"#compile\" title=\"compile\"><code>compile()</code></a>. If the <em>flags</em> argument is given and <em>dont_inherit</em> is not (or is zero) then the compiler options and the future statements specified by the <em>flags</em> argument are used in addition to those that would be used anyway. If <em>dont_inherit</em> is a non-zero integer then the <em>flags</em> argument is it – the flags (future features and compiler options) in the surrounding code are ignored.</p> <p>Compiler options and future statements are specified by bits which can be bitwise ORed together to specify multiple options. The bitfield required to specify a given future feature can be found as the <code>compiler_flag</code> attribute on the <code>_Feature</code> instance in the <a class=\"reference internal\" href=\"__future__#module-__future__\" title=\"__future__: Future statement definitions\"><code>__future__</code></a> module. <a class=\"reference internal\" href=\"ast#ast-compiler-flags\"><span class=\"std std-ref\">Compiler flags</span></a> can be found in <a class=\"reference internal\" href=\"ast#module-ast\" title=\"ast: Abstract Syntax Tree classes and manipulation.\"><code>ast</code></a> module, with <code>PyCF_</code> prefix.</p> <p>The argument <em>optimize</em> specifies the optimization level of the compiler; the default value of <code>-1</code> selects the optimization level of the interpreter as given by <a class=\"reference internal\" href=\"https://docs.python.org/3.9/using/cmdline.html#cmdoption-o\"><code>-O</code></a> options. Explicit levels are <code>0</code> (no optimization; <code>__debug__</code> is true), <code>1</code> (asserts are removed, <code>__debug__</code> is false) or <code>2</code> (docstrings are removed too).</p> <p>This function raises <a class=\"reference internal\" href=\"exceptions#SyntaxError\" title=\"SyntaxError\"><code>SyntaxError</code></a> if the compiled source is invalid, and <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> if the source contains null bytes.</p> <p>If you want to parse Python code into its AST representation, see <a class=\"reference internal\" href=\"ast#ast.parse\" title=\"ast.parse\"><code>ast.parse()</code></a>.</p> \n<p>Raises an <a class=\"reference internal\" href=\"sys#auditing\"><span class=\"std std-ref\">auditing event</span></a> <code>compile</code> with arguments <code>source</code> and <code>filename</code>. This event may also be raised by implicit compilation.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>When compiling a string with multi-line code in <code>'single'</code> or <code>'eval'</code> mode, input must be terminated by at least one newline character. This is to facilitate detection of incomplete and complete statements in the <a class=\"reference internal\" href=\"code#module-code\" title=\"code: Facilities to implement read-eval-print loops.\"><code>code</code></a> module.</p> </div> <div class=\"admonition warning\"> <p class=\"admonition-title\">Warning</p> <p>It is possible to crash the Python interpreter with a sufficiently large/complex string when compiling to an AST object due to stack depth limitations in Python’s AST compiler.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.2: </span>Allowed use of Windows and Mac newlines. Also input in <code>'exec'</code> mode does not have to end in a newline anymore. Added the <em>optimize</em> parameter.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>Previously, <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> was raised when null bytes were encountered in <em>source</em>.</p> </div> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.8: </span><code>ast.PyCF_ALLOW_TOP_LEVEL_AWAIT</code> can now be passed in flags to enable support for top-level <code>await</code>, <code>async for</code>, and <code>async with</code>.</p> </div> </dd>\n</dl> <dl class=\"class\"> <dt id=\"complex\">\n<code>class complex([real[, imag]])</code> </dt> <dd>\n<p>Return a complex number with the value <em>real</em> + <em>imag</em>*1j or convert a string or number to a complex number. If the first parameter is a string, it will be interpreted as a complex number and the function must be called without a second parameter. The second parameter can never be a string. Each argument may be any numeric type (including complex). If <em>imag</em> is omitted, it defaults to zero and the constructor serves as a numeric conversion like <a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int</code></a> and <a class=\"reference internal\" href=\"#float\" title=\"float\"><code>float</code></a>. If both arguments are omitted, returns <code>0j</code>.</p> <p>For a general Python object <code>x</code>, <code>complex(x)</code> delegates to <code>x.__complex__()</code>. If <code>__complex__()</code> is not defined then it falls back to <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__float__\" title=\"object.__float__\"><code>__float__()</code></a>. If <code>__float__()</code> is not defined then it falls back to <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>When converting from a string, the string must not contain whitespace around the central <code>+</code> or <code>-</code> operator. For example, <code>complex('1+2j')</code> is fine, but <code>complex('1 + 2j')</code> raises <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a>.</p> </div> <p>The complex type is described in <a class=\"reference internal\" href=\"stdtypes#typesnumeric\"><span class=\"std std-ref\">Numeric Types — int, float, complex</span></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Grouping digits with underscores as in code literals is allowed.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>Falls back to <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a> if <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__complex__\" title=\"object.__complex__\"><code>__complex__()</code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__float__\" title=\"object.__float__\"><code>__float__()</code></a> are not defined.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"delattr\">\n<code>delattr(object, name)</code> </dt> <dd>\n<p>This is a relative of <a class=\"reference internal\" href=\"#setattr\" title=\"setattr\"><code>setattr()</code></a>. The arguments are an object and a string. The string must be the name of one of the object’s attributes. The function deletes the named attribute, provided the object allows it. For example, <code>delattr(x, 'foobar')</code> is equivalent to <code>del x.foobar</code>.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"dict\">\n<code>class dict(**kwarg)</code> </dt> <dt>\n<code>class dict(mapping, **kwarg)</code> </dt> <dt>\n<code>class dict(iterable, **kwarg)</code> </dt> <dd>\n<p>Create a new dictionary. The <a class=\"reference internal\" href=\"stdtypes#dict\" title=\"dict\"><code>dict</code></a> object is the dictionary class. See <a class=\"reference internal\" href=\"stdtypes#dict\" title=\"dict\"><code>dict</code></a> and <a class=\"reference internal\" href=\"stdtypes#typesmapping\"><span class=\"std std-ref\">Mapping Types — dict</span></a> for documentation about this class.</p> <p>For other containers see the built-in <a class=\"reference internal\" href=\"stdtypes#list\" title=\"list\"><code>list</code></a>, <a class=\"reference internal\" href=\"stdtypes#set\" title=\"set\"><code>set</code></a>, and <a class=\"reference internal\" href=\"stdtypes#tuple\" title=\"tuple\"><code>tuple</code></a> classes, as well as the <a class=\"reference internal\" href=\"collections#module-collections\" title=\"collections: Container datatypes\"><code>collections</code></a> module.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"dir\">\n<code>dir([object])</code> </dt> <dd>\n<p>Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.</p> <p>If the object has a method named <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__dir__\" title=\"object.__dir__\"><code>__dir__()</code></a>, this method will be called and must return the list of attributes. This allows objects that implement a custom <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__\" title=\"object.__getattr__\"><code>__getattr__()</code></a> or <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getattribute__\" title=\"object.__getattribute__\"><code>__getattribute__()</code></a> function to customize the way <a class=\"reference internal\" href=\"#dir\" title=\"dir\"><code>dir()</code></a> reports their attributes.</p> <p>If the object does not provide <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__dir__\" title=\"object.__dir__\"><code>__dir__()</code></a>, the function tries its best to gather information from the object’s <a class=\"reference internal\" href=\"stdtypes#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a> attribute, if defined, and from its type object. The resulting list is not necessarily complete, and may be inaccurate when the object has a custom <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__\" title=\"object.__getattr__\"><code>__getattr__()</code></a>.</p> <p>The default <a class=\"reference internal\" href=\"#dir\" title=\"dir\"><code>dir()</code></a> mechanism behaves differently with different types of objects, as it attempts to produce the most relevant, rather than complete, information:</p> <ul class=\"simple\"> <li>If the object is a module object, the list contains the names of the module’s attributes.</li> <li>If the object is a type or class object, the list contains the names of its attributes, and recursively of the attributes of its bases.</li> <li>Otherwise, the list contains the object’s attributes’ names, the names of its class’s attributes, and recursively of the attributes of its class’s base classes.</li> </ul> <p>The resulting list is sorted alphabetically. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; import struct\n&gt;&gt;&gt; dir()   # show the names in the module namespace  \n['__builtins__', '__name__', 'struct']\n&gt;&gt;&gt; dir(struct)   # show the names in the struct module \n['Struct', '__all__', '__builtins__', '__cached__', '__doc__', '__file__',\n '__initializing__', '__loader__', '__name__', '__package__',\n '_clearcache', 'calcsize', 'error', 'pack', 'pack_into',\n 'unpack', 'unpack_from']\n&gt;&gt;&gt; class Shape:\n...     def __dir__(self):\n...         return ['area', 'perimeter', 'location']\n&gt;&gt;&gt; s = Shape()\n&gt;&gt;&gt; dir(s)\n['area', 'location', 'perimeter']\n</pre> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>Because <a class=\"reference internal\" href=\"#dir\" title=\"dir\"><code>dir()</code></a> is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases. For example, metaclass attributes are not in the result list when the argument is a class.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"divmod\">\n<code>divmod(a, b)</code> </dt> <dd>\n<p>Take two (non complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder when using integer division. With mixed operand types, the rules for binary arithmetic operators apply. For integers, the result is the same as <code>(a // b, a % b)</code>. For floating point numbers the result is <code>(q, a % b)</code>, where <em>q</em> is usually <code>math.floor(a /\nb)</code> but may be 1 less than that. In any case <code>q * b + a % b</code> is very close to <em>a</em>, if <code>a % b</code> is non-zero it has the same sign as <em>b</em>, and <code>0\n&lt;= abs(a % b) &lt; abs(b)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"enumerate\">\n<code>enumerate(iterable, start=0)</code> </dt> <dd>\n<p>Return an enumerate object. <em>iterable</em> must be a sequence, an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-iterator\"><span class=\"xref std std-term\">iterator</span></a>, or some other object which supports iteration. The <a class=\"reference internal\" href=\"stdtypes#iterator.__next__\" title=\"iterator.__next__\"><code>__next__()</code></a> method of the iterator returned by <a class=\"reference internal\" href=\"#enumerate\" title=\"enumerate\"><code>enumerate()</code></a> returns a tuple containing a count (from <em>start</em> which defaults to 0) and the values obtained from iterating over <em>iterable</em>.</p> <pre data-language=\"python\">&gt;&gt;&gt; seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n&gt;&gt;&gt; list(enumerate(seasons))\n[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n&gt;&gt;&gt; list(enumerate(seasons, start=1))\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n</pre> <p>Equivalent to:</p> <pre data-language=\"python\">def enumerate(sequence, start=0):\n    n = start\n    for elem in sequence:\n        yield n, elem\n        n += 1\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"eval\">\n<code>eval(expression[, globals[, locals]])</code> </dt> <dd>\n<p>The arguments are a string and optional globals and locals. If provided, <em>globals</em> must be a dictionary. If provided, <em>locals</em> can be any mapping object.</p> <p>The <em>expression</em> argument is parsed and evaluated as a Python expression (technically speaking, a condition list) using the <em>globals</em> and <em>locals</em> dictionaries as global and local namespace. If the <em>globals</em> dictionary is present and does not contain a value for the key <code>__builtins__</code>, a reference to the dictionary of the built-in module <a class=\"reference internal\" href=\"builtins#module-builtins\" title=\"builtins: The module that provides the built-in namespace.\"><code>builtins</code></a> is inserted under that key before <em>expression</em> is parsed. This means that <em>expression</em> normally has full access to the standard <a class=\"reference internal\" href=\"builtins#module-builtins\" title=\"builtins: The module that provides the built-in namespace.\"><code>builtins</code></a> module and restricted environments are propagated. If the <em>locals</em> dictionary is omitted it defaults to the <em>globals</em> dictionary. If both dictionaries are omitted, the expression is executed with the <em>globals</em> and <em>locals</em> in the environment where <a class=\"reference internal\" href=\"#eval\" title=\"eval\"><code>eval()</code></a> is called. Note, <em>eval()</em> does not have access to the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-nested-scope\"><span class=\"xref std std-term\">nested scopes</span></a> (non-locals) in the enclosing environment.</p> <p>The return value is the result of the evaluated expression. Syntax errors are reported as exceptions. Example:</p> <pre data-language=\"python\">&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; eval('x+1')\n2\n</pre> <p>This function can also be used to execute arbitrary code objects (such as those created by <a class=\"reference internal\" href=\"#compile\" title=\"compile\"><code>compile()</code></a>). In this case pass a code object instead of a string. If the code object has been compiled with <code>'exec'</code> as the <em>mode</em> argument, <a class=\"reference internal\" href=\"#eval\" title=\"eval\"><code>eval()</code></a>’s return value will be <code>None</code>.</p> <p>Hints: dynamic execution of statements is supported by the <a class=\"reference internal\" href=\"#exec\" title=\"exec\"><code>exec()</code></a> function. The <a class=\"reference internal\" href=\"#globals\" title=\"globals\"><code>globals()</code></a> and <a class=\"reference internal\" href=\"#locals\" title=\"locals\"><code>locals()</code></a> functions returns the current global and local dictionary, respectively, which may be useful to pass around for use by <a class=\"reference internal\" href=\"#eval\" title=\"eval\"><code>eval()</code></a> or <a class=\"reference internal\" href=\"#exec\" title=\"exec\"><code>exec()</code></a>.</p> <p>See <a class=\"reference internal\" href=\"ast#ast.literal_eval\" title=\"ast.literal_eval\"><code>ast.literal_eval()</code></a> for a function that can safely evaluate strings with expressions containing only literals.</p> \n<p>Raises an <a class=\"reference internal\" href=\"sys#auditing\"><span class=\"std std-ref\">auditing event</span></a> <code>exec</code> with the code object as the argument. Code compilation events may also be raised.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"exec\">\n<code>exec(object[, globals[, locals]])</code> </dt> <dd>\n<p>This function supports dynamic execution of Python code. <em>object</em> must be either a string or a code object. If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs). <a class=\"footnote-reference brackets\" href=\"#id2\" id=\"id1\">1</a> If it is a code object, it is simply executed. In all cases, the code that’s executed is expected to be valid as file input (see the section “File input” in the Reference Manual). Be aware that the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#nonlocal\"><code>nonlocal</code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#yield\"><code>yield</code></a>, and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#return\"><code>return</code></a> statements may not be used outside of function definitions even within the context of code passed to the <a class=\"reference internal\" href=\"#exec\" title=\"exec\"><code>exec()</code></a> function. The return value is <code>None</code>.</p> <p>In all cases, if the optional parts are omitted, the code is executed in the current scope. If only <em>globals</em> is provided, it must be a dictionary (and not a subclass of dictionary), which will be used for both the global and the local variables. If <em>globals</em> and <em>locals</em> are given, they are used for the global and local variables, respectively. If provided, <em>locals</em> can be any mapping object. Remember that at module level, globals and locals are the same dictionary. If exec gets two separate objects as <em>globals</em> and <em>locals</em>, the code will be executed as if it were embedded in a class definition.</p> <p>If the <em>globals</em> dictionary does not contain a value for the key <code>__builtins__</code>, a reference to the dictionary of the built-in module <a class=\"reference internal\" href=\"builtins#module-builtins\" title=\"builtins: The module that provides the built-in namespace.\"><code>builtins</code></a> is inserted under that key. That way you can control what builtins are available to the executed code by inserting your own <code>__builtins__</code> dictionary into <em>globals</em> before passing it to <a class=\"reference internal\" href=\"#exec\" title=\"exec\"><code>exec()</code></a>.</p> \n<p>Raises an <a class=\"reference internal\" href=\"sys#auditing\"><span class=\"std std-ref\">auditing event</span></a> <code>exec</code> with the code object as the argument. Code compilation events may also be raised.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The built-in functions <a class=\"reference internal\" href=\"#globals\" title=\"globals\"><code>globals()</code></a> and <a class=\"reference internal\" href=\"#locals\" title=\"locals\"><code>locals()</code></a> return the current global and local dictionary, respectively, which may be useful to pass around for use as the second and third argument to <a class=\"reference internal\" href=\"#exec\" title=\"exec\"><code>exec()</code></a>.</p> </div> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The default <em>locals</em> act as described for function <a class=\"reference internal\" href=\"#locals\" title=\"locals\"><code>locals()</code></a> below: modifications to the default <em>locals</em> dictionary should not be attempted. Pass an explicit <em>locals</em> dictionary if you need to see effects of the code on <em>locals</em> after function <a class=\"reference internal\" href=\"#exec\" title=\"exec\"><code>exec()</code></a> returns.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"filter\">\n<code>filter(function, iterable)</code> </dt> <dd>\n<p>Construct an iterator from those elements of <em>iterable</em> for which <em>function</em> returns true. <em>iterable</em> may be either a sequence, a container which supports iteration, or an iterator. If <em>function</em> is <code>None</code>, the identity function is assumed, that is, all elements of <em>iterable</em> that are false are removed.</p> <p>Note that <code>filter(function, iterable)</code> is equivalent to the generator expression <code>(item for item in iterable if function(item))</code> if function is not <code>None</code> and <code>(item for item in iterable if item)</code> if function is <code>None</code>.</p> <p>See <a class=\"reference internal\" href=\"itertools#itertools.filterfalse\" title=\"itertools.filterfalse\"><code>itertools.filterfalse()</code></a> for the complementary function that returns elements of <em>iterable</em> for which <em>function</em> returns false.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"float\">\n<code>class float([x])</code> </dt> <dd>\n<p id=\"index-2\">Return a floating point number constructed from a number or string <em>x</em>.</p> <p>If the argument is a string, it should contain a decimal number, optionally preceded by a sign, and optionally embedded in whitespace. The optional sign may be <code>'+'</code> or <code>'-'</code>; a <code>'+'</code> sign has no effect on the value produced. The argument may also be a string representing a NaN (not-a-number), or a positive or negative infinity. More precisely, the input must conform to the following grammar after leading and trailing whitespace characters are removed:</p> <pre>\n<strong id=\"grammar-token-sign\">sign          </strong> ::=  \"+\" | \"-\"\n<strong id=\"grammar-token-infinity\">infinity      </strong> ::=  \"Infinity\" | \"inf\"\n<strong id=\"grammar-token-nan\">nan           </strong> ::=  \"nan\"\n<strong id=\"grammar-token-numeric-value\">numeric_value </strong> ::=  <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#grammar-token-floatnumber\">floatnumber</a> | <a class=\"reference internal\" href=\"#grammar-token-infinity\">infinity</a> | <a class=\"reference internal\" href=\"#grammar-token-nan\">nan</a>\n<strong id=\"grammar-token-numeric-string\">numeric_string</strong> ::=  [<a class=\"reference internal\" href=\"string#grammar-token-sign\">sign</a>] <a class=\"reference internal\" href=\"#grammar-token-numeric-value\">numeric_value</a>\n</pre> <p>Here <code>floatnumber</code> is the form of a Python floating-point literal, described in <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#floating\"><span class=\"std std-ref\">Floating point literals</span></a>. Case is not significant, so, for example, “inf”, “Inf”, “INFINITY” and “iNfINity” are all acceptable spellings for positive infinity.</p> <p>Otherwise, if the argument is an integer or a floating point number, a floating point number with the same value (within Python’s floating point precision) is returned. If the argument is outside the range of a Python float, an <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> will be raised.</p> <p>For a general Python object <code>x</code>, <code>float(x)</code> delegates to <code>x.__float__()</code>. If <code>__float__()</code> is not defined then it falls back to <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a>.</p> <p>If no argument is given, <code>0.0</code> is returned.</p> <p>Examples:</p> <pre data-language=\"python\">&gt;&gt;&gt; float('+1.23')\n1.23\n&gt;&gt;&gt; float('   -12345\\n')\n-12345.0\n&gt;&gt;&gt; float('1e-003')\n0.001\n&gt;&gt;&gt; float('+1E6')\n1000000.0\n&gt;&gt;&gt; float('-Infinity')\n-inf\n</pre> <p>The float type is described in <a class=\"reference internal\" href=\"stdtypes#typesnumeric\"><span class=\"std std-ref\">Numeric Types — int, float, complex</span></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Grouping digits with underscores as in code literals is allowed.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span><em>x</em> is now a positional-only parameter.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>Falls back to <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a> if <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__float__\" title=\"object.__float__\"><code>__float__()</code></a> is not defined.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"format\">\n<code>format(value[, format_spec])</code> </dt> <dd>\n<p>Convert a <em>value</em> to a “formatted” representation, as controlled by <em>format_spec</em>. The interpretation of <em>format_spec</em> will depend on the type of the <em>value</em> argument, however there is a standard formatting syntax that is used by most built-in types: <a class=\"reference internal\" href=\"string#formatspec\"><span class=\"std std-ref\">Format Specification Mini-Language</span></a>.</p> <p>The default <em>format_spec</em> is an empty string which usually gives the same effect as calling <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str(value)</code></a>.</p> <p>A call to <code>format(value, format_spec)</code> is translated to <code>type(value).__format__(value, format_spec)</code> which bypasses the instance dictionary when searching for the value’s <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__format__\" title=\"object.__format__\"><code>__format__()</code></a> method. A <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> exception is raised if the method search reaches <a class=\"reference internal\" href=\"#object\" title=\"object\"><code>object</code></a> and the <em>format_spec</em> is non-empty, or if either the <em>format_spec</em> or the return value are not strings.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span><code>object().__format__(format_spec)</code> raises <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> if <em>format_spec</em> is not an empty string.</p> </div> </dd>\n</dl> <dl class=\"class\"> <dt id=\"frozenset\">\n<code>class frozenset([iterable])</code> </dt> <dd>\n<p>Return a new <a class=\"reference internal\" href=\"stdtypes#frozenset\" title=\"frozenset\"><code>frozenset</code></a> object, optionally with elements taken from <em>iterable</em>. <code>frozenset</code> is a built-in class. See <a class=\"reference internal\" href=\"stdtypes#frozenset\" title=\"frozenset\"><code>frozenset</code></a> and <a class=\"reference internal\" href=\"stdtypes#types-set\"><span class=\"std std-ref\">Set Types — set, frozenset</span></a> for documentation about this class.</p> <p>For other containers see the built-in <a class=\"reference internal\" href=\"stdtypes#set\" title=\"set\"><code>set</code></a>, <a class=\"reference internal\" href=\"stdtypes#list\" title=\"list\"><code>list</code></a>, <a class=\"reference internal\" href=\"stdtypes#tuple\" title=\"tuple\"><code>tuple</code></a>, and <a class=\"reference internal\" href=\"stdtypes#dict\" title=\"dict\"><code>dict</code></a> classes, as well as the <a class=\"reference internal\" href=\"collections#module-collections\" title=\"collections: Container datatypes\"><code>collections</code></a> module.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"getattr\">\n<code>getattr(object, name[, default])</code> </dt> <dd>\n<p>Return the value of the named attribute of <em>object</em>. <em>name</em> must be a string. If the string is the name of one of the object’s attributes, the result is the value of that attribute. For example, <code>getattr(x, 'foobar')</code> is equivalent to <code>x.foobar</code>. If the named attribute does not exist, <em>default</em> is returned if provided, otherwise <a class=\"reference internal\" href=\"exceptions#AttributeError\" title=\"AttributeError\"><code>AttributeError</code></a> is raised.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"globals\">\n<code>globals()</code> </dt> <dd>\n<p>Return a dictionary representing the current global symbol table. This is always the dictionary of the current module (inside a function or method, this is the module where it is defined, not the module from which it is called).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"hasattr\">\n<code>hasattr(object, name)</code> </dt> <dd>\n<p>The arguments are an object and a string. The result is <code>True</code> if the string is the name of one of the object’s attributes, <code>False</code> if not. (This is implemented by calling <code>getattr(object, name)</code> and seeing whether it raises an <a class=\"reference internal\" href=\"exceptions#AttributeError\" title=\"AttributeError\"><code>AttributeError</code></a> or not.)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"hash\">\n<code>hash(object)</code> </dt> <dd>\n<p>Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>For objects with custom <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__hash__\" title=\"object.__hash__\"><code>__hash__()</code></a> methods, note that <a class=\"reference internal\" href=\"#hash\" title=\"hash\"><code>hash()</code></a> truncates the return value based on the bit width of the host machine. See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__hash__\" title=\"object.__hash__\"><code>__hash__()</code></a> for details.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"help\">\n<code>help([object])</code> </dt> <dd>\n<p>Invoke the built-in help system. (This function is intended for interactive use.) If no argument is given, the interactive help system starts on the interpreter console. If the argument is a string, then the string is looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console. If the argument is any other kind of object, a help page on the object is generated.</p> <p>Note that if a slash(/) appears in the parameter list of a function, when invoking <a class=\"reference internal\" href=\"#help\" title=\"help\"><code>help()</code></a>, it means that the parameters prior to the slash are positional-only. For more info, see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/faq/programming.html#faq-positional-only-arguments\"><span class=\"std std-ref\">the FAQ entry on positional-only parameters</span></a>.</p> <p>This function is added to the built-in namespace by the <a class=\"reference internal\" href=\"site#module-site\" title=\"site: Module responsible for site-specific configuration.\"><code>site</code></a> module.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span>Changes to <a class=\"reference internal\" href=\"pydoc#module-pydoc\" title=\"pydoc: Documentation generator and online help system.\"><code>pydoc</code></a> and <a class=\"reference internal\" href=\"inspect#module-inspect\" title=\"inspect: Extract information and source code from live objects.\"><code>inspect</code></a> mean that the reported signatures for callables are now more comprehensive and consistent.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"hex\">\n<code>hex(x)</code> </dt> <dd>\n<p>Convert an integer number to a lowercase hexadecimal string prefixed with “0x”. If <em>x</em> is not a Python <a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int</code></a> object, it has to define an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a> method that returns an integer. Some examples:</p> <pre data-language=\"python\">&gt;&gt;&gt; hex(255)\n'0xff'\n&gt;&gt;&gt; hex(-42)\n'-0x2a'\n</pre> <p>If you want to convert an integer number to an uppercase or lower hexadecimal string with prefix or not, you can use either of the following ways:</p> <pre data-language=\"python\">&gt;&gt;&gt; '%#x' % 255, '%x' % 255, '%X' % 255\n('0xff', 'ff', 'FF')\n&gt;&gt;&gt; format(255, '#x'), format(255, 'x'), format(255, 'X')\n('0xff', 'ff', 'FF')\n&gt;&gt;&gt; f'{255:#x}', f'{255:x}', f'{255:X}'\n('0xff', 'ff', 'FF')\n</pre> <p>See also <a class=\"reference internal\" href=\"#format\" title=\"format\"><code>format()</code></a> for more information.</p> <p>See also <a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int()</code></a> for converting a hexadecimal string to an integer using a base of 16.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>To obtain a hexadecimal string representation for a float, use the <a class=\"reference internal\" href=\"stdtypes#float.hex\" title=\"float.hex\"><code>float.hex()</code></a> method.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"id\">\n<code>id(object)</code> </dt> <dd>\n<p>Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same <a class=\"reference internal\" href=\"#id\" title=\"id\"><code>id()</code></a> value.</p> <div class=\"impl-detail compound\"> <p><strong>CPython implementation detail:</strong> This is the address of the object in memory.</p> </div> <p class=\"audit-hook\">Raises an <a class=\"reference internal\" href=\"sys#auditing\"><span class=\"std std-ref\">auditing event</span></a> <code>builtins.id</code> with argument <code>id</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"input\">\n<code>input([prompt])</code> </dt> <dd>\n<p>If the <em>prompt</em> argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, <a class=\"reference internal\" href=\"exceptions#EOFError\" title=\"EOFError\"><code>EOFError</code></a> is raised. Example:</p> <pre data-language=\"python\">&gt;&gt;&gt; s = input('--&gt; ')  \n--&gt; Monty Python's Flying Circus\n&gt;&gt;&gt; s  \n\"Monty Python's Flying Circus\"\n</pre> <p>If the <a class=\"reference internal\" href=\"readline#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code>readline</code></a> module was loaded, then <a class=\"reference internal\" href=\"#input\" title=\"input\"><code>input()</code></a> will use it to provide elaborate line editing and history features.</p> \n<p>Raises an <a class=\"reference internal\" href=\"sys#auditing\"><span class=\"std std-ref\">auditing event</span></a> <code>builtins.input</code> with argument <code>prompt</code> before reading input</p> \n<p>Raises an auditing event <code>builtins.input/result</code> with the result after successfully reading input.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"int\">\n<code>class int([x])</code> </dt> <dt>\n<code>class int(x, base=10)</code> </dt> <dd>\n<p>Return an integer object constructed from a number or string <em>x</em>, or return <code>0</code> if no arguments are given. If <em>x</em> defines <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__int__\" title=\"object.__int__\"><code>__int__()</code></a>, <code>int(x)</code> returns <code>x.__int__()</code>. If <em>x</em> defines <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a>, it returns <code>x.__index__()</code>. If <em>x</em> defines <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__trunc__\" title=\"object.__trunc__\"><code>__trunc__()</code></a>, it returns <code>x.__trunc__()</code>. For floating point numbers, this truncates towards zero.</p> <p>If <em>x</em> is not a number or if <em>base</em> is given, then <em>x</em> must be a string, <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a>, or <a class=\"reference internal\" href=\"stdtypes#bytearray\" title=\"bytearray\"><code>bytearray</code></a> instance representing an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#integers\"><span class=\"std std-ref\">integer literal</span></a> in radix <em>base</em>. Optionally, the literal can be preceded by <code>+</code> or <code>-</code> (with no space in between) and surrounded by whitespace. A base-n literal consists of the digits 0 to n-1, with <code>a</code> to <code>z</code> (or <code>A</code> to <code>Z</code>) having values 10 to 35. The default <em>base</em> is 10. The allowed values are 0 and 2–36. Base-2, -8, and -16 literals can be optionally prefixed with <code>0b</code>/<code>0B</code>, <code>0o</code>/<code>0O</code>, or <code>0x</code>/<code>0X</code>, as with integer literals in code. Base 0 means to interpret exactly as a code literal, so that the actual base is 2, 8, 10, or 16, and so that <code>int('010', 0)</code> is not legal, while <code>int('010')</code> is, as well as <code>int('010', 8)</code>.</p> <p>The integer type is described in <a class=\"reference internal\" href=\"stdtypes#typesnumeric\"><span class=\"std std-ref\">Numeric Types — int, float, complex</span></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span>If <em>base</em> is not an instance of <a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int</code></a> and the <em>base</em> object has a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>base.__index__</code></a> method, that method is called to obtain an integer for the base. Previous versions used <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__int__\" title=\"object.__int__\"><code>base.__int__</code></a> instead of <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>base.__index__</code></a>.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Grouping digits with underscores as in code literals is allowed.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span><em>x</em> is now a positional-only parameter.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>Falls back to <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a> if <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__int__\" title=\"object.__int__\"><code>__int__()</code></a> is not defined.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"isinstance\">\n<code>isinstance(object, classinfo)</code> </dt> <dd>\n<p>Return <code>True</code> if the <em>object</em> argument is an instance of the <em>classinfo</em> argument, or of a (direct, indirect or <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-abstract-base-class\"><span class=\"xref std std-term\">virtual</span></a>) subclass thereof. If <em>object</em> is not an object of the given type, the function always returns <code>False</code>. If <em>classinfo</em> is a tuple of type objects (or recursively, other such tuples), return <code>True</code> if <em>object</em> is an instance of any of the types. If <em>classinfo</em> is not a type or tuple of types and such tuples, a <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> exception is raised.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"issubclass\">\n<code>issubclass(class, classinfo)</code> </dt> <dd>\n<p>Return <code>True</code> if <em>class</em> is a subclass (direct, indirect or <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-abstract-base-class\"><span class=\"xref std std-term\">virtual</span></a>) of <em>classinfo</em>. A class is considered a subclass of itself. <em>classinfo</em> may be a tuple of class objects, in which case every entry in <em>classinfo</em> will be checked. In any other case, a <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> exception is raised.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"iter\">\n<code>iter(object[, sentinel])</code> </dt> <dd>\n<p>Return an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-iterator\"><span class=\"xref std std-term\">iterator</span></a> object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, <em>object</em> must be a collection object which supports the iteration protocol (the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__iter__\" title=\"object.__iter__\"><code>__iter__()</code></a> method), or it must support the sequence protocol (the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><code>__getitem__()</code></a> method with integer arguments starting at <code>0</code>). If it does not support either of those protocols, <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> is raised. If the second argument, <em>sentinel</em>, is given, then <em>object</em> must be a callable object. The iterator created in this case will call <em>object</em> with no arguments for each call to its <a class=\"reference internal\" href=\"stdtypes#iterator.__next__\" title=\"iterator.__next__\"><code>__next__()</code></a> method; if the value returned is equal to <em>sentinel</em>, <a class=\"reference internal\" href=\"exceptions#StopIteration\" title=\"StopIteration\"><code>StopIteration</code></a> will be raised, otherwise the value will be returned.</p> <p>See also <a class=\"reference internal\" href=\"stdtypes#typeiter\"><span class=\"std std-ref\">Iterator Types</span></a>.</p> <p>One useful application of the second form of <a class=\"reference internal\" href=\"#iter\" title=\"iter\"><code>iter()</code></a> is to build a block-reader. For example, reading fixed-width blocks from a binary database file until the end of file is reached:</p> <pre data-language=\"python\">from functools import partial\nwith open('mydata.db', 'rb') as f:\n    for block in iter(partial(f.read, 64), b''):\n        process_block(block)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"len\">\n<code>len(s)</code> </dt> <dd>\n<p>Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).</p> <div class=\"impl-detail compound\"> <p><strong>CPython implementation detail:</strong> <code>len</code> raises <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> on lengths larger than <a class=\"reference internal\" href=\"sys#sys.maxsize\" title=\"sys.maxsize\"><code>sys.maxsize</code></a>, such as <a class=\"reference internal\" href=\"stdtypes#range\" title=\"range\"><code>range(2 ** 100)</code></a>.</p> </div> </dd>\n</dl> <dl class=\"class\"> <dt id=\"list\">\n<code>class list([iterable])</code> </dt> <dd>\n<p>Rather than being a function, <a class=\"reference internal\" href=\"stdtypes#list\" title=\"list\"><code>list</code></a> is actually a mutable sequence type, as documented in <a class=\"reference internal\" href=\"stdtypes#typesseq-list\"><span class=\"std std-ref\">Lists</span></a> and <a class=\"reference internal\" href=\"stdtypes#typesseq\"><span class=\"std std-ref\">Sequence Types — list, tuple, range</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"locals\">\n<code>locals()</code> </dt> <dd>\n<p>Update and return a dictionary representing the current local symbol table. Free variables are returned by <a class=\"reference internal\" href=\"#locals\" title=\"locals\"><code>locals()</code></a> when it is called in function blocks, but not in class blocks. Note that at the module level, <a class=\"reference internal\" href=\"#locals\" title=\"locals\"><code>locals()</code></a> and <a class=\"reference internal\" href=\"#globals\" title=\"globals\"><code>globals()</code></a> are the same dictionary.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"map\">\n<code>map(function, iterable, ...)</code> </dt> <dd>\n<p>Return an iterator that applies <em>function</em> to every item of <em>iterable</em>, yielding the results. If additional <em>iterable</em> arguments are passed, <em>function</em> must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inputs are already arranged into argument tuples, see <a class=\"reference internal\" href=\"itertools#itertools.starmap\" title=\"itertools.starmap\"><code>itertools.starmap()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"max\">\n<code>max(iterable, *[, key, default])</code> </dt> <dt>\n<code>max(arg1, arg2, *args[, key])</code> </dt> <dd>\n<p>Return the largest item in an iterable or the largest of two or more arguments.</p> <p>If one positional argument is provided, it should be an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-iterable\"><span class=\"xref std std-term\">iterable</span></a>. The largest item in the iterable is returned. If two or more positional arguments are provided, the largest of the positional arguments is returned.</p> <p>There are two optional keyword-only arguments. The <em>key</em> argument specifies a one-argument ordering function like that used for <a class=\"reference internal\" href=\"stdtypes#list.sort\" title=\"list.sort\"><code>list.sort()</code></a>. The <em>default</em> argument specifies an object to return if the provided iterable is empty. If the iterable is empty and <em>default</em> is not provided, a <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised.</p> <p>If multiple items are maximal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as <code>sorted(iterable, key=keyfunc, reverse=True)[0]</code> and <code>heapq.nlargest(1, iterable, key=keyfunc)</code>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4: </span>The <em>default</em> keyword-only argument.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>The <em>key</em> can be <code>None</code>.</p> </div> </dd>\n</dl> <dl class=\"class\"> <dt id=\"memoryview\">\n<code>class memoryview(obj)</code> </dt> <dd>\n<p>Return a “memory view” object created from the given argument. See <a class=\"reference internal\" href=\"stdtypes#typememoryview\"><span class=\"std std-ref\">Memory Views</span></a> for more information.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"min\">\n<code>min(iterable, *[, key, default])</code> </dt> <dt>\n<code>min(arg1, arg2, *args[, key])</code> </dt> <dd>\n<p>Return the smallest item in an iterable or the smallest of two or more arguments.</p> <p>If one positional argument is provided, it should be an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-iterable\"><span class=\"xref std std-term\">iterable</span></a>. The smallest item in the iterable is returned. If two or more positional arguments are provided, the smallest of the positional arguments is returned.</p> <p>There are two optional keyword-only arguments. The <em>key</em> argument specifies a one-argument ordering function like that used for <a class=\"reference internal\" href=\"stdtypes#list.sort\" title=\"list.sort\"><code>list.sort()</code></a>. The <em>default</em> argument specifies an object to return if the provided iterable is empty. If the iterable is empty and <em>default</em> is not provided, a <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised.</p> <p>If multiple items are minimal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as <code>sorted(iterable, key=keyfunc)[0]</code> and <code>heapq.nsmallest(1,\niterable, key=keyfunc)</code>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4: </span>The <em>default</em> keyword-only argument.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>The <em>key</em> can be <code>None</code>.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"next\">\n<code>next(iterator[, default])</code> </dt> <dd>\n<p>Retrieve the next item from the <em>iterator</em> by calling its <a class=\"reference internal\" href=\"stdtypes#iterator.__next__\" title=\"iterator.__next__\"><code>__next__()</code></a> method. If <em>default</em> is given, it is returned if the iterator is exhausted, otherwise <a class=\"reference internal\" href=\"exceptions#StopIteration\" title=\"StopIteration\"><code>StopIteration</code></a> is raised.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"object\">\n<code>class object</code> </dt> <dd>\n<p>Return a new featureless object. <a class=\"reference internal\" href=\"#object\" title=\"object\"><code>object</code></a> is a base for all classes. It has the methods that are common to all instances of Python classes. This function does not accept any arguments.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p><a class=\"reference internal\" href=\"#object\" title=\"object\"><code>object</code></a> does <em>not</em> have a <a class=\"reference internal\" href=\"stdtypes#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a>, so you can’t assign arbitrary attributes to an instance of the <a class=\"reference internal\" href=\"#object\" title=\"object\"><code>object</code></a> class.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"oct\">\n<code>oct(x)</code> </dt> <dd>\n<p>Convert an integer number to an octal string prefixed with “0o”. The result is a valid Python expression. If <em>x</em> is not a Python <a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int</code></a> object, it has to define an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a> method that returns an integer. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; oct(8)\n'0o10'\n&gt;&gt;&gt; oct(-56)\n'-0o70'\n</pre> <p>If you want to convert an integer number to octal string either with prefix “0o” or not, you can use either of the following ways.</p> <pre data-language=\"python\">&gt;&gt;&gt; '%#o' % 10, '%o' % 10\n('0o12', '12')\n&gt;&gt;&gt; format(10, '#o'), format(10, 'o')\n('0o12', '12')\n&gt;&gt;&gt; f'{10:#o}', f'{10:o}'\n('0o12', '12')\n</pre> <p>See also <a class=\"reference internal\" href=\"#format\" title=\"format\"><code>format()</code></a> for more information.</p>   </dd>\n</dl> <dl class=\"function\"> <dt id=\"open\">\n<code>open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code> </dt> <dd>\n<p>Open <em>file</em> and return a corresponding <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-file-object\"><span class=\"xref std std-term\">file object</span></a>. If the file cannot be opened, an <a class=\"reference internal\" href=\"exceptions#OSError\" title=\"OSError\"><code>OSError</code></a> is raised. See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/tutorial/inputoutput.html#tut-files\"><span class=\"std std-ref\">Reading and Writing Files</span></a> for more examples of how to use this function.</p> <p><em>file</em> is a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a> giving the pathname (absolute or relative to the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given, it is closed when the returned I/O object is closed, unless <em>closefd</em> is set to <code>False</code>.)</p> <p><em>mode</em> is an optional string that specifies the mode in which the file is opened. It defaults to <code>'r'</code> which means open for reading in text mode. Other common values are <code>'w'</code> for writing (truncating the file if it already exists), <code>'x'</code> for exclusive creation and <code>'a'</code> for appending (which on <em>some</em> Unix systems, means that <em>all</em> writes append to the end of the file regardless of the current seek position). In text mode, if <em>encoding</em> is not specified the encoding used is platform dependent: <code>locale.getpreferredencoding(False)</code> is called to get the current locale encoding. (For reading and writing raw bytes use binary mode and leave <em>encoding</em> unspecified.) The available modes are:</p> <table class=\"docutils align-default\" id=\"index-5\">  <thead> <tr>\n<th class=\"head\"><p>Character</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'r'</code></p></td> <td><p>open for reading (default)</p></td> </tr> <tr>\n<td><p><code>'w'</code></p></td> <td><p>open for writing, truncating the file first</p></td> </tr> <tr>\n<td><p><code>'x'</code></p></td> <td><p>open for exclusive creation, failing if the file already exists</p></td> </tr> <tr>\n<td><p><code>'a'</code></p></td> <td><p>open for writing, appending to the end of the file if it exists</p></td> </tr> <tr>\n<td><p><code>'b'</code></p></td> <td><p>binary mode</p></td> </tr> <tr>\n<td><p><code>'t'</code></p></td> <td><p>text mode (default)</p></td> </tr> <tr>\n<td><p><code>'+'</code></p></td> <td><p>open for updating (reading and writing)</p></td> </tr>  </table> <p>The default mode is <code>'r'</code> (open for reading text, synonym of <code>'rt'</code>). Modes <code>'w+'</code> and <code>'w+b'</code> open and truncate the file. Modes <code>'r+'</code> and <code>'r+b'</code> open the file with no truncation.</p> <p>As mentioned in the <a class=\"reference internal\" href=\"io#io-overview\"><span class=\"std std-ref\">Overview</span></a>, Python distinguishes between binary and text I/O. Files opened in binary mode (including <code>'b'</code> in the <em>mode</em> argument) return contents as <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> objects without any decoding. In text mode (the default, or when <code>'t'</code> is included in the <em>mode</em> argument), the contents of the file are returned as <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a>, the bytes having been first decoded using a platform-dependent encoding or using the specified <em>encoding</em> if given.</p> <p>There is an additional mode character permitted, <code>'U'</code>, which no longer has any effect, and is considered deprecated. It previously enabled <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-universal-newlines\"><span class=\"xref std std-term\">universal newlines</span></a> in text mode, which became the default behaviour in Python 3.0. Refer to the documentation of the <a class=\"reference internal\" href=\"#open-newline-parameter\"><span class=\"std std-ref\">newline</span></a> parameter for further details.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>Python doesn’t depend on the underlying operating system’s notion of text files; all the processing is done by Python itself, and is therefore platform-independent.</p> </div> <p><em>buffering</em> is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer &gt; 1 to indicate the size in bytes of a fixed-size chunk buffer. When no <em>buffering</em> argument is given, the default buffering policy works as follows:</p> <ul class=\"simple\"> <li>Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device’s “block size” and falling back on <a class=\"reference internal\" href=\"io#io.DEFAULT_BUFFER_SIZE\" title=\"io.DEFAULT_BUFFER_SIZE\"><code>io.DEFAULT_BUFFER_SIZE</code></a>. On many systems, the buffer will typically be 4096 or 8192 bytes long.</li> <li>“Interactive” text files (files for which <a class=\"reference internal\" href=\"io#io.IOBase.isatty\" title=\"io.IOBase.isatty\"><code>isatty()</code></a> returns <code>True</code>) use line buffering. Other text files use the policy described above for binary files.</li> </ul> <p><em>encoding</em> is the name of the encoding used to decode or encode the file. This should only be used in text mode. The default encoding is platform dependent (whatever <a class=\"reference internal\" href=\"locale#locale.getpreferredencoding\" title=\"locale.getpreferredencoding\"><code>locale.getpreferredencoding()</code></a> returns), but any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encoding</span></a> supported by Python can be used. See the <a class=\"reference internal\" href=\"codecs#module-codecs\" title=\"codecs: Encode and decode data and streams.\"><code>codecs</code></a> module for the list of supported encodings.</p> <p><em>errors</em> is an optional string that specifies how encoding and decoding errors are to be handled—this cannot be used in binary mode. A variety of standard error handlers are available (listed under <a class=\"reference internal\" href=\"codecs#error-handlers\"><span class=\"std std-ref\">Error Handlers</span></a>), though any error handling name that has been registered with <a class=\"reference internal\" href=\"codecs#codecs.register_error\" title=\"codecs.register_error\"><code>codecs.register_error()</code></a> is also valid. The standard names include:</p> <ul class=\"simple\"> <li>\n<code>'strict'</code> to raise a <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> exception if there is an encoding error. The default value of <code>None</code> has the same effect.</li> <li>\n<code>'ignore'</code> ignores errors. Note that ignoring encoding errors can lead to data loss.</li> <li>\n<code>'replace'</code> causes a replacement marker (such as <code>'?'</code>) to be inserted where there is malformed data.</li> <li>\n<code>'surrogateescape'</code> will represent any incorrect bytes as code points in the Unicode Private Use Area ranging from U+DC80 to U+DCFF. These private code points will then be turned back into the same bytes when the <code>surrogateescape</code> error handler is used when writing data. This is useful for processing files in an unknown encoding.</li> <li>\n<code>'xmlcharrefreplace'</code> is only supported when writing to a file. Characters not supported by the encoding are replaced with the appropriate XML character reference <code>&amp;#nnn;</code>.</li> <li>\n<code>'backslashreplace'</code> replaces malformed data by Python’s backslashed escape sequences.</li> <li>\n<code>'namereplace'</code> (also only supported when writing) replaces unsupported characters with <code>\\N{...}</code> escape sequences.</li> </ul> <p id=\"open-newline-parameter\"><em id=\"index-6\">newline</em> controls how <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-universal-newlines\"><span class=\"xref std std-term\">universal newlines</span></a> mode works (it only applies to text mode). It can be <code>None</code>, <code>''</code>, <code>'\\n'</code>, <code>'\\r'</code>, and <code>'\\r\\n'</code>. It works as follows:</p> <ul class=\"simple\"> <li>When reading input from the stream, if <em>newline</em> is <code>None</code>, universal newlines mode is enabled. Lines in the input can end in <code>'\\n'</code>, <code>'\\r'</code>, or <code>'\\r\\n'</code>, and these are translated into <code>'\\n'</code> before being returned to the caller. If it is <code>''</code>, universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.</li> <li>When writing output to the stream, if <em>newline</em> is <code>None</code>, any <code>'\\n'</code> characters written are translated to the system default line separator, <a class=\"reference internal\" href=\"os#os.linesep\" title=\"os.linesep\"><code>os.linesep</code></a>. If <em>newline</em> is <code>''</code> or <code>'\\n'</code>, no translation takes place. If <em>newline</em> is any of the other legal values, any <code>'\\n'</code> characters written are translated to the given string.</li> </ul> <p>If <em>closefd</em> is <code>False</code> and a file descriptor rather than a filename was given, the underlying file descriptor will be kept open when the file is closed. If a filename is given <em>closefd</em> must be <code>True</code> (the default) otherwise an error will be raised.</p> <p>A custom opener can be used by passing a callable as <em>opener</em>. The underlying file descriptor for the file object is then obtained by calling <em>opener</em> with (<em>file</em>, <em>flags</em>). <em>opener</em> must return an open file descriptor (passing <a class=\"reference internal\" href=\"os#os.open\" title=\"os.open\"><code>os.open</code></a> as <em>opener</em> results in functionality similar to passing <code>None</code>).</p> <p>The newly created file is <a class=\"reference internal\" href=\"os#fd-inheritance\"><span class=\"std std-ref\">non-inheritable</span></a>.</p> <p>The following example uses the <a class=\"reference internal\" href=\"os#dir-fd\"><span class=\"std std-ref\">dir_fd</span></a> parameter of the <a class=\"reference internal\" href=\"os#os.open\" title=\"os.open\"><code>os.open()</code></a> function to open a file relative to a given directory:</p> <pre data-language=\"python\">&gt;&gt;&gt; import os\n&gt;&gt;&gt; dir_fd = os.open('somedir', os.O_RDONLY)\n&gt;&gt;&gt; def opener(path, flags):\n...     return os.open(path, flags, dir_fd=dir_fd)\n...\n&gt;&gt;&gt; with open('spamspam.txt', 'w', opener=opener) as f:\n...     print('This will be written to somedir/spamspam.txt', file=f)\n...\n&gt;&gt;&gt; os.close(dir_fd)  # don't leak a file descriptor\n</pre> <p>The type of <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-file-object\"><span class=\"xref std std-term\">file object</span></a> returned by the <a class=\"reference internal\" href=\"#open\" title=\"open\"><code>open()</code></a> function depends on the mode. When <a class=\"reference internal\" href=\"#open\" title=\"open\"><code>open()</code></a> is used to open a file in a text mode (<code>'w'</code>, <code>'r'</code>, <code>'wt'</code>, <code>'rt'</code>, etc.), it returns a subclass of <a class=\"reference internal\" href=\"io#io.TextIOBase\" title=\"io.TextIOBase\"><code>io.TextIOBase</code></a> (specifically <a class=\"reference internal\" href=\"io#io.TextIOWrapper\" title=\"io.TextIOWrapper\"><code>io.TextIOWrapper</code></a>). When used to open a file in a binary mode with buffering, the returned class is a subclass of <a class=\"reference internal\" href=\"io#io.BufferedIOBase\" title=\"io.BufferedIOBase\"><code>io.BufferedIOBase</code></a>. The exact class varies: in read binary mode, it returns an <a class=\"reference internal\" href=\"io#io.BufferedReader\" title=\"io.BufferedReader\"><code>io.BufferedReader</code></a>; in write binary and append binary modes, it returns an <a class=\"reference internal\" href=\"io#io.BufferedWriter\" title=\"io.BufferedWriter\"><code>io.BufferedWriter</code></a>, and in read/write mode, it returns an <a class=\"reference internal\" href=\"io#io.BufferedRandom\" title=\"io.BufferedRandom\"><code>io.BufferedRandom</code></a>. When buffering is disabled, the raw stream, a subclass of <a class=\"reference internal\" href=\"io#io.RawIOBase\" title=\"io.RawIOBase\"><code>io.RawIOBase</code></a>, <a class=\"reference internal\" href=\"io#io.FileIO\" title=\"io.FileIO\"><code>io.FileIO</code></a>, is returned.</p> <p id=\"index-7\">See also the file handling modules, such as, <a class=\"reference internal\" href=\"fileinput#module-fileinput\" title=\"fileinput: Loop over standard input or a list of files.\"><code>fileinput</code></a>, <a class=\"reference internal\" href=\"io#module-io\" title=\"io: Core tools for working with streams.\"><code>io</code></a> (where <a class=\"reference internal\" href=\"#open\" title=\"open\"><code>open()</code></a> is declared), <a class=\"reference internal\" href=\"os#module-os\" title=\"os: Miscellaneous operating system interfaces.\"><code>os</code></a>, <a class=\"reference internal\" href=\"os.path#module-os.path\" title=\"os.path: Operations on pathnames.\"><code>os.path</code></a>, <a class=\"reference internal\" href=\"tempfile#module-tempfile\" title=\"tempfile: Generate temporary files and directories.\"><code>tempfile</code></a>, and <a class=\"reference internal\" href=\"shutil#module-shutil\" title=\"shutil: High-level file operations, including copying.\"><code>shutil</code></a>.</p> <p class=\"audit-hook\">Raises an <a class=\"reference internal\" href=\"sys#auditing\"><span class=\"std std-ref\">auditing event</span></a> <code>open</code> with arguments <code>file</code>, <code>mode</code>, <code>flags</code>.</p> <p>The <code>mode</code> and <code>flags</code> arguments may have been modified or inferred from the original call.</p> <div class=\"versionchanged\">  <span class=\"versionmodified changed\">Changed in version 3.3: </span><ul class=\"simple\"> <li>The <em>opener</em> parameter was added.</li> <li>The <code>'x'</code> mode was added.</li> <li>\n<a class=\"reference internal\" href=\"exceptions#IOError\" title=\"IOError\"><code>IOError</code></a> used to be raised, it is now an alias of <a class=\"reference internal\" href=\"exceptions#OSError\" title=\"OSError\"><code>OSError</code></a>.</li> <li>\n<a class=\"reference internal\" href=\"exceptions#FileExistsError\" title=\"FileExistsError\"><code>FileExistsError</code></a> is now raised if the file opened in exclusive creation mode (<code>'x'</code>) already exists.</li> </ul>  </div> <div class=\"versionchanged\">  <span class=\"versionmodified changed\">Changed in version 3.4: </span><ul class=\"simple\"> <li>The file is now non-inheritable.</li> </ul>  </div> <div class=\"deprecated-removed\"> <p><span class=\"versionmodified\">Deprecated since version 3.4, will be removed in version 3.10: </span>The <code>'U'</code> mode.</p> </div> <div class=\"versionchanged\">  <span class=\"versionmodified changed\">Changed in version 3.5: </span><ul class=\"simple\"> <li>If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an <a class=\"reference internal\" href=\"exceptions#InterruptedError\" title=\"InterruptedError\"><code>InterruptedError</code></a> exception (see <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0475\" id=\"index-8\"><strong>PEP 475</strong></a> for the rationale).</li> <li>The <code>'namereplace'</code> error handler was added.</li> </ul>  </div> <div class=\"versionchanged\">  <span class=\"versionmodified changed\">Changed in version 3.6: </span><ul class=\"simple\"> <li>Support added to accept objects implementing <a class=\"reference internal\" href=\"os#os.PathLike\" title=\"os.PathLike\"><code>os.PathLike</code></a>.</li> <li>On Windows, opening a console buffer may return a subclass of <a class=\"reference internal\" href=\"io#io.RawIOBase\" title=\"io.RawIOBase\"><code>io.RawIOBase</code></a> other than <a class=\"reference internal\" href=\"io#io.FileIO\" title=\"io.FileIO\"><code>io.FileIO</code></a>.</li> </ul>  </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"ord\">\n<code>ord(c)</code> </dt> <dd>\n<p>Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, <code>ord('a')</code> returns the integer <code>97</code> and <code>ord('€')</code> (Euro sign) returns <code>8364</code>. This is the inverse of <a class=\"reference internal\" href=\"#chr\" title=\"chr\"><code>chr()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"pow\">\n<code>pow(base, exp[, mod])</code> </dt> <dd>\n<p>Return <em>base</em> to the power <em>exp</em>; if <em>mod</em> is present, return <em>base</em> to the power <em>exp</em>, modulo <em>mod</em> (computed more efficiently than <code>pow(base, exp) % mod</code>). The two-argument form <code>pow(base, exp)</code> is equivalent to using the power operator: <code>base**exp</code>.</p> <p>The arguments must have numeric types. With mixed operand types, the coercion rules for binary arithmetic operators apply. For <a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int</code></a> operands, the result has the same type as the operands (after coercion) unless the second argument is negative; in that case, all arguments are converted to float and a float result is delivered. For example, <code>10**2</code> returns <code>100</code>, but <code>10**-2</code> returns <code>0.01</code>.</p> <p>For <a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int</code></a> operands <em>base</em> and <em>exp</em>, if <em>mod</em> is present, <em>mod</em> must also be of integer type and <em>mod</em> must be nonzero. If <em>mod</em> is present and <em>exp</em> is negative, <em>base</em> must be relatively prime to <em>mod</em>. In that case, <code>pow(inv_base, -exp, mod)</code> is returned, where <em>inv_base</em> is an inverse to <em>base</em> modulo <em>mod</em>.</p> <p>Here’s an example of computing an inverse for <code>38</code> modulo <code>97</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; pow(38, -1, mod=97)\n23\n&gt;&gt;&gt; 23 * 38 % 97 == 1\nTrue\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>For <a class=\"reference internal\" href=\"#int\" title=\"int\"><code>int</code></a> operands, the three-argument form of <code>pow</code> now allows the second argument to be negative, permitting computation of modular inverses.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>Allow keyword arguments. Formerly, only positional arguments were supported.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"print\">\n<code>print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)</code> </dt> <dd>\n<p>Print <em>objects</em> to the text stream <em>file</em>, separated by <em>sep</em> and followed by <em>end</em>. <em>sep</em>, <em>end</em>, <em>file</em> and <em>flush</em>, if present, must be given as keyword arguments.</p> <p>All non-keyword arguments are converted to strings like <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str()</code></a> does and written to the stream, separated by <em>sep</em> and followed by <em>end</em>. Both <em>sep</em> and <em>end</em> must be strings; they can also be <code>None</code>, which means to use the default values. If no <em>objects</em> are given, <a class=\"reference internal\" href=\"#print\" title=\"print\"><code>print()</code></a> will just write <em>end</em>.</p> <p>The <em>file</em> argument must be an object with a <code>write(string)</code> method; if it is not present or <code>None</code>, <a class=\"reference internal\" href=\"sys#sys.stdout\" title=\"sys.stdout\"><code>sys.stdout</code></a> will be used. Since printed arguments are converted to text strings, <a class=\"reference internal\" href=\"#print\" title=\"print\"><code>print()</code></a> cannot be used with binary mode file objects. For these, use <code>file.write(...)</code> instead.</p> <p>Whether output is buffered is usually determined by <em>file</em>, but if the <em>flush</em> keyword argument is true, the stream is forcibly flushed.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Added the <em>flush</em> keyword argument.</p> </div> </dd>\n</dl> <dl class=\"class\"> <dt id=\"property\">\n<code>class property(fget=None, fset=None, fdel=None, doc=None)</code> </dt> <dd>\n<p>Return a property attribute.</p> <p><em>fget</em> is a function for getting an attribute value. <em>fset</em> is a function for setting an attribute value. <em>fdel</em> is a function for deleting an attribute value. And <em>doc</em> creates a docstring for the attribute.</p> <p>A typical use is to define a managed attribute <code>x</code>:</p> <pre data-language=\"python\">class C:\n    def __init__(self):\n        self._x = None\n\n    def getx(self):\n        return self._x\n\n    def setx(self, value):\n        self._x = value\n\n    def delx(self):\n        del self._x\n\n    x = property(getx, setx, delx, \"I'm the 'x' property.\")\n</pre> <p>If <em>c</em> is an instance of <em>C</em>, <code>c.x</code> will invoke the getter, <code>c.x = value</code> will invoke the setter and <code>del c.x</code> the deleter.</p> <p>If given, <em>doc</em> will be the docstring of the property attribute. Otherwise, the property will copy <em>fget</em>’s docstring (if it exists). This makes it possible to create read-only properties easily using <a class=\"reference internal\" href=\"#property\" title=\"property\"><code>property()</code></a> as a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-decorator\"><span class=\"xref std std-term\">decorator</span></a>:</p> <pre data-language=\"python\">class Parrot:\n    def __init__(self):\n        self._voltage = 100000\n\n    @property\n    def voltage(self):\n        \"\"\"Get the current voltage.\"\"\"\n        return self._voltage\n</pre> <p>The <code>@property</code> decorator turns the <code>voltage()</code> method into a “getter” for a read-only attribute with the same name, and it sets the docstring for <em>voltage</em> to “Get the current voltage.”</p> <p>A property object has <code>getter</code>, <code>setter</code>, and <code>deleter</code> methods usable as decorators that create a copy of the property with the corresponding accessor function set to the decorated function. This is best explained with an example:</p> <pre data-language=\"python\">class C:\n    def __init__(self):\n        self._x = None\n\n    @property\n    def x(self):\n        \"\"\"I'm the 'x' property.\"\"\"\n        return self._x\n\n    @x.setter\n    def x(self, value):\n        self._x = value\n\n    @x.deleter\n    def x(self):\n        del self._x\n</pre> <p>This code is exactly equivalent to the first example. Be sure to give the additional functions the same name as the original property (<code>x</code> in this case.)</p> <p>The returned property object also has the attributes <code>fget</code>, <code>fset</code>, and <code>fdel</code> corresponding to the constructor arguments.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>The docstrings of property objects are now writeable.</p> </div> </dd>\n</dl> <dl class=\"class\"> <dt id=\"range\">\n<code>class range(stop)</code> </dt> <dt>\n<code>class range(start, stop[, step])</code> </dt> <dd>\n<p>Rather than being a function, <a class=\"reference internal\" href=\"stdtypes#range\" title=\"range\"><code>range</code></a> is actually an immutable sequence type, as documented in <a class=\"reference internal\" href=\"stdtypes#typesseq-range\"><span class=\"std std-ref\">Ranges</span></a> and <a class=\"reference internal\" href=\"stdtypes#typesseq\"><span class=\"std std-ref\">Sequence Types — list, tuple, range</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"repr\">\n<code>repr(object)</code> </dt> <dd>\n<p>Return a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to <a class=\"reference internal\" href=\"#eval\" title=\"eval\"><code>eval()</code></a>, otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__repr__\" title=\"object.__repr__\"><code>__repr__()</code></a> method.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"reversed\">\n<code>reversed(seq)</code> </dt> <dd>\n<p>Return a reverse <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-iterator\"><span class=\"xref std std-term\">iterator</span></a>. <em>seq</em> must be an object which has a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__reversed__\" title=\"object.__reversed__\"><code>__reversed__()</code></a> method or supports the sequence protocol (the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__len__\" title=\"object.__len__\"><code>__len__()</code></a> method and the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><code>__getitem__()</code></a> method with integer arguments starting at <code>0</code>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"round\">\n<code>round(number[, ndigits])</code> </dt> <dd>\n<p>Return <em>number</em> rounded to <em>ndigits</em> precision after the decimal point. If <em>ndigits</em> is omitted or is <code>None</code>, it returns the nearest integer to its input.</p> <p>For the built-in types supporting <a class=\"reference internal\" href=\"#round\" title=\"round\"><code>round()</code></a>, values are rounded to the closest multiple of 10 to the power minus <em>ndigits</em>; if two multiples are equally close, rounding is done toward the even choice (so, for example, both <code>round(0.5)</code> and <code>round(-0.5)</code> are <code>0</code>, and <code>round(1.5)</code> is <code>2</code>). Any integer value is valid for <em>ndigits</em> (positive, zero, or negative). The return value is an integer if <em>ndigits</em> is omitted or <code>None</code>. Otherwise the return value has the same type as <em>number</em>.</p> <p>For a general Python object <code>number</code>, <code>round</code> delegates to <code>number.__round__</code>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The behavior of <a class=\"reference internal\" href=\"#round\" title=\"round\"><code>round()</code></a> for floats can be surprising: for example, <code>round(2.675, 2)</code> gives <code>2.67</code> instead of the expected <code>2.68</code>. This is not a bug: it’s a result of the fact that most decimal fractions can’t be represented exactly as a float. See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/tutorial/floatingpoint.html#tut-fp-issues\"><span class=\"std std-ref\">Floating Point Arithmetic: Issues and Limitations</span></a> for more information.</p> </div> </dd>\n</dl> <dl class=\"class\"> <dt id=\"set\">\n<code>class set([iterable])</code> </dt> <dd>\n<p>Return a new <a class=\"reference internal\" href=\"stdtypes#set\" title=\"set\"><code>set</code></a> object, optionally with elements taken from <em>iterable</em>. <code>set</code> is a built-in class. See <a class=\"reference internal\" href=\"stdtypes#set\" title=\"set\"><code>set</code></a> and <a class=\"reference internal\" href=\"stdtypes#types-set\"><span class=\"std std-ref\">Set Types — set, frozenset</span></a> for documentation about this class.</p> <p>For other containers see the built-in <a class=\"reference internal\" href=\"stdtypes#frozenset\" title=\"frozenset\"><code>frozenset</code></a>, <a class=\"reference internal\" href=\"stdtypes#list\" title=\"list\"><code>list</code></a>, <a class=\"reference internal\" href=\"stdtypes#tuple\" title=\"tuple\"><code>tuple</code></a>, and <a class=\"reference internal\" href=\"stdtypes#dict\" title=\"dict\"><code>dict</code></a> classes, as well as the <a class=\"reference internal\" href=\"collections#module-collections\" title=\"collections: Container datatypes\"><code>collections</code></a> module.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"setattr\">\n<code>setattr(object, name, value)</code> </dt> <dd>\n<p>This is the counterpart of <a class=\"reference internal\" href=\"#getattr\" title=\"getattr\"><code>getattr()</code></a>. The arguments are an object, a string and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, <code>setattr(x, 'foobar', 123)</code> is equivalent to <code>x.foobar = 123</code>.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"slice\">\n<code>class slice(stop)</code> </dt> <dt>\n<code>class slice(start, stop[, step])</code> </dt> <dd>\n<p id=\"index-9\">Return a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-slice\"><span class=\"xref std std-term\">slice</span></a> object representing the set of indices specified by <code>range(start, stop, step)</code>. The <em>start</em> and <em>step</em> arguments default to <code>None</code>. Slice objects have read-only data attributes <code>start</code>, <code>stop</code> and <code>step</code> which merely return the argument values (or their default). They have no other explicit functionality; however they are used by Numerical Python and other third party extensions. Slice objects are also generated when extended indexing syntax is used. For example: <code>a[start:stop:step]</code> or <code>a[start:stop, i]</code>. See <a class=\"reference internal\" href=\"itertools#itertools.islice\" title=\"itertools.islice\"><code>itertools.islice()</code></a> for an alternate version that returns an iterator.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"sorted\">\n<code>sorted(iterable, *, key=None, reverse=False)</code> </dt> <dd>\n<p>Return a new sorted list from the items in <em>iterable</em>.</p> <p>Has two optional arguments which must be specified as keyword arguments.</p> <p><em>key</em> specifies a function of one argument that is used to extract a comparison key from each element in <em>iterable</em> (for example, <code>key=str.lower</code>). The default value is <code>None</code> (compare the elements directly).</p> <p><em>reverse</em> is a boolean value. If set to <code>True</code>, then the list elements are sorted as if each comparison were reversed.</p> <p>Use <a class=\"reference internal\" href=\"functools#functools.cmp_to_key\" title=\"functools.cmp_to_key\"><code>functools.cmp_to_key()</code></a> to convert an old-style <em>cmp</em> function to a <em>key</em> function.</p> <p>The built-in <a class=\"reference internal\" href=\"#sorted\" title=\"sorted\"><code>sorted()</code></a> function is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal — this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade).</p> <p>For sorting examples and a brief sorting tutorial, see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/howto/sorting.html#sortinghowto\"><span class=\"std std-ref\">Sorting HOW TO</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"staticmethod\">\n<code>@staticmethod</code> </dt> <dd>\n<p>Transform a method into a static method.</p> <p>A static method does not receive an implicit first argument. To declare a static method, use this idiom:</p> <pre data-language=\"python\">class C:\n    @staticmethod\n    def f(arg1, arg2, ...): ...\n</pre> <p>The <code>@staticmethod</code> form is a function <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-decorator\"><span class=\"xref std std-term\">decorator</span></a> – see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#function\"><span class=\"std std-ref\">Function definitions</span></a> for details.</p> <p>A static method can be called either on the class (such as <code>C.f()</code>) or on an instance (such as <code>C().f()</code>).</p> <p>Static methods in Python are similar to those found in Java or C++. Also see <a class=\"reference internal\" href=\"#classmethod\" title=\"classmethod\"><code>classmethod()</code></a> for a variant that is useful for creating alternate class constructors.</p> <p>Like all decorators, it is also possible to call <code>staticmethod</code> as a regular function and do something with its result. This is needed in some cases where you need a reference to a function from a class body and you want to avoid the automatic transformation to instance method. For these cases, use this idiom:</p> <pre data-language=\"python\">class C:\n    builtin_open = staticmethod(open)\n</pre> <p>For more information on static methods, see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#types\"><span class=\"std std-ref\">The standard type hierarchy</span></a>.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"str\">\n<code>class str(object='')</code> </dt> <dt>\n<code>class str(object=b'', encoding='utf-8', errors='strict')</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a> version of <em>object</em>. See <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str()</code></a> for details.</p> <p><code>str</code> is the built-in string <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-class\"><span class=\"xref std std-term\">class</span></a>. For general information about strings, see <a class=\"reference internal\" href=\"stdtypes#textseq\"><span class=\"std std-ref\">Text Sequence Type — str</span></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"sum\">\n<code>sum(iterable, /, start=0)</code> </dt> <dd>\n<p>Sums <em>start</em> and the items of an <em>iterable</em> from left to right and returns the total. The <em>iterable</em>’s items are normally numbers, and the start value is not allowed to be a string.</p> <p>For some use cases, there are good alternatives to <a class=\"reference internal\" href=\"#sum\" title=\"sum\"><code>sum()</code></a>. The preferred, fast way to concatenate a sequence of strings is by calling <code>''.join(sequence)</code>. To add floating point values with extended precision, see <a class=\"reference internal\" href=\"math#math.fsum\" title=\"math.fsum\"><code>math.fsum()</code></a>. To concatenate a series of iterables, consider using <a class=\"reference internal\" href=\"itertools#itertools.chain\" title=\"itertools.chain\"><code>itertools.chain()</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>The <em>start</em> parameter can be specified as a keyword argument.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"super\">\n<code>super([type[, object-or-type]])</code> </dt> <dd>\n<p>Return a proxy object that delegates method calls to a parent or sibling class of <em>type</em>. This is useful for accessing inherited methods that have been overridden in a class.</p> <p>The <em>object-or-type</em> determines the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-method-resolution-order\"><span class=\"xref std std-term\">method resolution order</span></a> to be searched. The search starts from the class right after the <em>type</em>.</p> <p>For example, if <a class=\"reference internal\" href=\"stdtypes#class.__mro__\" title=\"class.__mro__\"><code>__mro__</code></a> of <em>object-or-type</em> is <code>D -&gt; B -&gt; C -&gt; A -&gt; object</code> and the value of <em>type</em> is <code>B</code>, then <a class=\"reference internal\" href=\"#super\" title=\"super\"><code>super()</code></a> searches <code>C -&gt; A -&gt; object</code>.</p> <p>The <a class=\"reference internal\" href=\"stdtypes#class.__mro__\" title=\"class.__mro__\"><code>__mro__</code></a> attribute of the <em>object-or-type</em> lists the method resolution search order used by both <a class=\"reference internal\" href=\"#getattr\" title=\"getattr\"><code>getattr()</code></a> and <a class=\"reference internal\" href=\"#super\" title=\"super\"><code>super()</code></a>. The attribute is dynamic and can change whenever the inheritance hierarchy is updated.</p> <p>If the second argument is omitted, the super object returned is unbound. If the second argument is an object, <code>isinstance(obj, type)</code> must be true. If the second argument is a type, <code>issubclass(type2, type)</code> must be true (this is useful for classmethods).</p> <p>There are two typical use cases for <em>super</em>. In a class hierarchy with single inheritance, <em>super</em> can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable. This use closely parallels the use of <em>super</em> in other programming languages.</p> <p>The second use case is to support cooperative multiple inheritance in a dynamic execution environment. This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance. This makes it possible to implement “diamond diagrams” where multiple base classes implement the same method. Good design dictates that such implementations have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime).</p> <p>For both use cases, a typical superclass call looks like this:</p> <pre data-language=\"python\">class C(B):\n    def method(self, arg):\n        super().method(arg)    # This does the same thing as:\n                               # super(C, self).method(arg)\n</pre> <p>In addition to method lookups, <a class=\"reference internal\" href=\"#super\" title=\"super\"><code>super()</code></a> also works for attribute lookups. One possible use case for this is calling <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-descriptor\"><span class=\"xref std std-term\">descriptors</span></a> in a parent or sibling class.</p> <p>Note that <a class=\"reference internal\" href=\"#super\" title=\"super\"><code>super()</code></a> is implemented as part of the binding process for explicit dotted attribute lookups such as <code>super().__getitem__(name)</code>. It does so by implementing its own <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getattribute__\" title=\"object.__getattribute__\"><code>__getattribute__()</code></a> method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, <a class=\"reference internal\" href=\"#super\" title=\"super\"><code>super()</code></a> is undefined for implicit lookups using statements or operators such as <code>super()[name]</code>.</p> <p>Also note that, aside from the zero argument form, <a class=\"reference internal\" href=\"#super\" title=\"super\"><code>super()</code></a> is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods.</p> <p>For practical suggestions on how to design cooperative classes using <a class=\"reference internal\" href=\"#super\" title=\"super\"><code>super()</code></a>, see <a class=\"reference external\" href=\"https://rhettinger.wordpress.com/2011/05/26/super-considered-super/\">guide to using super()</a>.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"tuple\">\n<code>class tuple([iterable])</code> </dt> <dd>\n<p>Rather than being a function, <a class=\"reference internal\" href=\"stdtypes#tuple\" title=\"tuple\"><code>tuple</code></a> is actually an immutable sequence type, as documented in <a class=\"reference internal\" href=\"stdtypes#typesseq-tuple\"><span class=\"std std-ref\">Tuples</span></a> and <a class=\"reference internal\" href=\"stdtypes#typesseq\"><span class=\"std std-ref\">Sequence Types — list, tuple, range</span></a>.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"type\">\n<code>class type(object)</code> </dt> <dt>\n<code>class type(name, bases, dict, **kwds)</code> </dt> <dd>\n<p id=\"index-11\">With one argument, return the type of an <em>object</em>. The return value is a type object and generally the same object as returned by <a class=\"reference internal\" href=\"stdtypes#instance.__class__\" title=\"instance.__class__\"><code>object.__class__</code></a>.</p> <p>The <a class=\"reference internal\" href=\"#isinstance\" title=\"isinstance\"><code>isinstance()</code></a> built-in function is recommended for testing the type of an object, because it takes subclasses into account.</p> <p>With three arguments, return a new type object. This is essentially a dynamic form of the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#class\"><code>class</code></a> statement. The <em>name</em> string is the class name and becomes the <a class=\"reference internal\" href=\"stdtypes#definition.__name__\" title=\"definition.__name__\"><code>__name__</code></a> attribute. The <em>bases</em> tuple contains the base classes and becomes the <a class=\"reference internal\" href=\"stdtypes#class.__bases__\" title=\"class.__bases__\"><code>__bases__</code></a> attribute; if empty, <a class=\"reference internal\" href=\"#object\" title=\"object\"><code>object</code></a>, the ultimate base of all classes, is added. The <em>dict</em> dictionary contains attribute and method definitions for the class body; it may be copied or wrapped before becoming the <a class=\"reference internal\" href=\"stdtypes#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a> attribute. The following two statements create identical <a class=\"reference internal\" href=\"#type\" title=\"type\"><code>type</code></a> objects:</p> <pre data-language=\"python\">&gt;&gt;&gt; class X:\n...     a = 1\n...\n&gt;&gt;&gt; X = type('X', (), dict(a=1))\n</pre> <p>See also <a class=\"reference internal\" href=\"stdtypes#bltin-type-objects\"><span class=\"std std-ref\">Type Objects</span></a>.</p> <p>Keyword arguments provided to the three argument form are passed to the appropriate metaclass machinery (usually <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__init_subclass__\" title=\"object.__init_subclass__\"><code>__init_subclass__()</code></a>) in the same way that keywords in a class definition (besides <em>metaclass</em>) would.</p> <p>See also <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#class-customization\"><span class=\"std std-ref\">Customizing class creation</span></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Subclasses of <a class=\"reference internal\" href=\"#type\" title=\"type\"><code>type</code></a> which don’t override <code>type.__new__</code> may no longer use the one-argument form to get the type of an object.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"vars\">\n<code>vars([object])</code> </dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"stdtypes#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a> attribute for a module, class, instance, or any other object with a <a class=\"reference internal\" href=\"stdtypes#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a> attribute.</p> <p>Objects such as modules and instances have an updateable <a class=\"reference internal\" href=\"stdtypes#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a> attribute; however, other objects may have write restrictions on their <a class=\"reference internal\" href=\"stdtypes#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a> attributes (for example, classes use a <a class=\"reference internal\" href=\"types#types.MappingProxyType\" title=\"types.MappingProxyType\"><code>types.MappingProxyType</code></a> to prevent direct dictionary updates).</p> <p>Without an argument, <a class=\"reference internal\" href=\"#vars\" title=\"vars\"><code>vars()</code></a> acts like <a class=\"reference internal\" href=\"#locals\" title=\"locals\"><code>locals()</code></a>. Note, the locals dictionary is only useful for reads since updates to the locals dictionary are ignored.</p> <p>A <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> exception is raised if an object is specified but it doesn’t have a <a class=\"reference internal\" href=\"stdtypes#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a> attribute (for example, if its class defines the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__slots__\" title=\"object.__slots__\"><code>__slots__</code></a> attribute).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"zip\">\n<code>zip(*iterables)</code> </dt> <dd>\n<p>Make an iterator that aggregates elements from each of the iterables.</p> <p>Returns an iterator of tuples, where the <em>i</em>-th tuple contains the <em>i</em>-th element from each of the argument sequences or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument, it returns an iterator of 1-tuples. With no arguments, it returns an empty iterator. Equivalent to:</p> <pre data-language=\"python\">def zip(*iterables):\n    # zip('ABCD', 'xy') --&gt; Ax By\n    sentinel = object()\n    iterators = [iter(it) for it in iterables]\n    while iterators:\n        result = []\n        for it in iterators:\n            elem = next(it, sentinel)\n            if elem is sentinel:\n                return\n            result.append(elem)\n        yield tuple(result)\n</pre> <p>The left-to-right evaluation order of the iterables is guaranteed. This makes possible an idiom for clustering a data series into n-length groups using <code>zip(*[iter(s)]*n)</code>. This repeats the <em>same</em> iterator <code>n</code> times so that each output tuple has the result of <code>n</code> calls to the iterator. This has the effect of dividing the input into n-length chunks.</p> <p><a class=\"reference internal\" href=\"#zip\" title=\"zip\"><code>zip()</code></a> should only be used with unequal length inputs when you don’t care about trailing, unmatched values from the longer iterables. If those values are important, use <a class=\"reference internal\" href=\"itertools#itertools.zip_longest\" title=\"itertools.zip_longest\"><code>itertools.zip_longest()</code></a> instead.</p> <p><a class=\"reference internal\" href=\"#zip\" title=\"zip\"><code>zip()</code></a> in conjunction with the <code>*</code> operator can be used to unzip a list:</p> <pre data-language=\"python\">&gt;&gt;&gt; x = [1, 2, 3]\n&gt;&gt;&gt; y = [4, 5, 6]\n&gt;&gt;&gt; zipped = zip(x, y)\n&gt;&gt;&gt; list(zipped)\n[(1, 4), (2, 5), (3, 6)]\n&gt;&gt;&gt; x2, y2 = zip(*zip(x, y))\n&gt;&gt;&gt; x == list(x2) and y == list(y2)\nTrue\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"__import__\">\n<code>__import__(name, globals=None, locals=None, fromlist=(), level=0)</code> </dt> <dd>\n<div class=\"admonition note\" id=\"index-12\"> <p class=\"admonition-title\">Note</p> <p>This is an advanced function that is not needed in everyday Python programming, unlike <a class=\"reference internal\" href=\"importlib#importlib.import_module\" title=\"importlib.import_module\"><code>importlib.import_module()</code></a>.</p> </div> <p>This function is invoked by the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#import\"><code>import</code></a> statement. It can be replaced (by importing the <a class=\"reference internal\" href=\"builtins#module-builtins\" title=\"builtins: The module that provides the built-in namespace.\"><code>builtins</code></a> module and assigning to <code>builtins.__import__</code>) in order to change semantics of the <code>import</code> statement, but doing so is <strong>strongly</strong> discouraged as it is usually simpler to use import hooks (see <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0302\" id=\"index-13\"><strong>PEP 302</strong></a>) to attain the same goals and does not cause issues with code which assumes the default import implementation is in use. Direct use of <a class=\"reference internal\" href=\"#__import__\" title=\"__import__\"><code>__import__()</code></a> is also discouraged in favor of <a class=\"reference internal\" href=\"importlib#importlib.import_module\" title=\"importlib.import_module\"><code>importlib.import_module()</code></a>.</p> <p>The function imports the module <em>name</em>, potentially using the given <em>globals</em> and <em>locals</em> to determine how to interpret the name in a package context. The <em>fromlist</em> gives the names of objects or submodules that should be imported from the module given by <em>name</em>. The standard implementation does not use its <em>locals</em> argument at all, and uses its <em>globals</em> only to determine the package context of the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#import\"><code>import</code></a> statement.</p> <p><em>level</em> specifies whether to use absolute or relative imports. <code>0</code> (the default) means only perform absolute imports. Positive values for <em>level</em> indicate the number of parent directories to search relative to the directory of the module calling <a class=\"reference internal\" href=\"#__import__\" title=\"__import__\"><code>__import__()</code></a> (see <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0328\" id=\"index-14\"><strong>PEP 328</strong></a> for the details).</p> <p>When the <em>name</em> variable is of the form <code>package.module</code>, normally, the top-level package (the name up till the first dot) is returned, <em>not</em> the module named by <em>name</em>. However, when a non-empty <em>fromlist</em> argument is given, the module named by <em>name</em> is returned.</p> <p>For example, the statement <code>import spam</code> results in bytecode resembling the following code:</p> <pre data-language=\"python\">spam = __import__('spam', globals(), locals(), [], 0)\n</pre> <p>The statement <code>import spam.ham</code> results in this call:</p> <pre data-language=\"python\">spam = __import__('spam.ham', globals(), locals(), [], 0)\n</pre> <p>Note how <a class=\"reference internal\" href=\"#__import__\" title=\"__import__\"><code>__import__()</code></a> returns the toplevel module here because this is the object that is bound to a name by the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#import\"><code>import</code></a> statement.</p> <p>On the other hand, the statement <code>from spam.ham import eggs, sausage as\nsaus</code> results in</p> <pre data-language=\"python\">_temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0)\neggs = _temp.eggs\nsaus = _temp.sausage\n</pre> <p>Here, the <code>spam.ham</code> module is returned from <a class=\"reference internal\" href=\"#__import__\" title=\"__import__\"><code>__import__()</code></a>. From this object, the names to import are retrieved and assigned to their respective names.</p> <p>If you simply want to import a module (potentially within a package) by name, use <a class=\"reference internal\" href=\"importlib#importlib.import_module\" title=\"importlib.import_module\"><code>importlib.import_module()</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Negative values for <em>level</em> are no longer supported (which also changes the default value to 0).</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.9: </span>When the command line options <a class=\"reference internal\" href=\"https://docs.python.org/3.9/using/cmdline.html#cmdoption-e\"><code>-E</code></a> or <a class=\"reference internal\" href=\"https://docs.python.org/3.9/using/cmdline.html#id2\"><code>-I</code></a> are being used, the environment variable <a class=\"reference internal\" href=\"https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONCASEOK\" id=\"index-15\"><code>PYTHONCASEOK</code></a> is now ignored.</p> </div> </dd>\n</dl> <h4 class=\"rubric\">Footnotes</h4> <dl class=\"footnote brackets\"> <dt class=\"label\" id=\"id2\">\n<code>1</code> </dt> <dd>\n<p>Note that the parser only accepts the Unix-style end of line convention. If you are reading the code from a file, make sure to use newline conversion mode to convert Windows or Mac-style newlines.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/functions.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/functions.html</a>\n  </p>\n</div>\n","library/constants":"<h1 id=\"built-in-consts\">Built-in Constants</h1> <p id=\"built-in-constants\">A small number of constants live in the built-in namespace. They are:</p> <dl class=\"data\"> <dt id=\"False\">\n<code>False</code> </dt> <dd>\n<p>The false value of the <a class=\"reference internal\" href=\"functions#bool\" title=\"bool\"><code>bool</code></a> type. Assignments to <code>False</code> are illegal and raise a <a class=\"reference internal\" href=\"exceptions#SyntaxError\" title=\"SyntaxError\"><code>SyntaxError</code></a>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"True\">\n<code>True</code> </dt> <dd>\n<p>The true value of the <a class=\"reference internal\" href=\"functions#bool\" title=\"bool\"><code>bool</code></a> type. Assignments to <code>True</code> are illegal and raise a <a class=\"reference internal\" href=\"exceptions#SyntaxError\" title=\"SyntaxError\"><code>SyntaxError</code></a>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"None\">\n<code>None</code> </dt> <dd>\n<p>The sole value of the type <code>NoneType</code>. <code>None</code> is frequently used to represent the absence of a value, as when default arguments are not passed to a function. Assignments to <code>None</code> are illegal and raise a <a class=\"reference internal\" href=\"exceptions#SyntaxError\" title=\"SyntaxError\"><code>SyntaxError</code></a>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"NotImplemented\">\n<code>NotImplemented</code> </dt> <dd>\n<p>Special value which should be returned by the binary special methods (e.g. <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__eq__\" title=\"object.__eq__\"><code>__eq__()</code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__lt__\" title=\"object.__lt__\"><code>__lt__()</code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__add__\" title=\"object.__add__\"><code>__add__()</code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__rsub__\" title=\"object.__rsub__\"><code>__rsub__()</code></a>, etc.) to indicate that the operation is not implemented with respect to the other type; may be returned by the in-place binary special methods (e.g. <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__imul__\" title=\"object.__imul__\"><code>__imul__()</code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__iand__\" title=\"object.__iand__\"><code>__iand__()</code></a>, etc.) for the same purpose. It should not be evaluated in a boolean context.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>When a binary (or in-place) method returns <code>NotImplemented</code> the interpreter will try the reflected operation on the other type (or some other fallback, depending on the operator). If all attempts return <code>NotImplemented</code>, the interpreter will raise an appropriate exception. Incorrectly returning <code>NotImplemented</code> will result in a misleading error message or the <code>NotImplemented</code> value being returned to Python code.</p> <p>See <a class=\"reference internal\" href=\"numbers#implementing-the-arithmetic-operations\"><span class=\"std std-ref\">Implementing the arithmetic operations</span></a> for examples.</p> </div> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p><code>NotImplementedError</code> and <code>NotImplemented</code> are not interchangeable, even though they have similar names and purposes. See <a class=\"reference internal\" href=\"exceptions#NotImplementedError\" title=\"NotImplementedError\"><code>NotImplementedError</code></a> for details on when to use it.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.9: </span>Evaluating <code>NotImplemented</code> in a boolean context is deprecated. While it currently evaluates as true, it will emit a <a class=\"reference internal\" href=\"exceptions#DeprecationWarning\" title=\"DeprecationWarning\"><code>DeprecationWarning</code></a>. It will raise a <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> in a future version of Python.</p> </div> </dd>\n</dl> <dl class=\"data\"> <dt id=\"Ellipsis\">\n<code>Ellipsis</code> </dt> <dd>\n<p>The same as the ellipsis literal “<code>...</code>”. Special value used mostly in conjunction with extended slicing syntax for user-defined container data types.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"__debug__\">\n<code>__debug__</code> </dt> <dd>\n<p>This constant is true if Python was not started with an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/using/cmdline.html#cmdoption-o\"><code>-O</code></a> option. See also the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#assert\"><code>assert</code></a> statement.</p> </dd>\n</dl> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The names <a class=\"reference internal\" href=\"#None\" title=\"None\"><code>None</code></a>, <a class=\"reference internal\" href=\"#False\" title=\"False\"><code>False</code></a>, <a class=\"reference internal\" href=\"#True\" title=\"True\"><code>True</code></a> and <a class=\"reference internal\" href=\"#__debug__\" title=\"__debug__\"><code>__debug__</code></a> cannot be reassigned (assignments to them, even as an attribute name, raise <a class=\"reference internal\" href=\"exceptions#SyntaxError\" title=\"SyntaxError\"><code>SyntaxError</code></a>), so they can be considered “true” constants.</p> </div>  <h2 id=\"constants-added-by-the-site-module\">Constants added by the site module</h2> <p>The <a class=\"reference internal\" href=\"site#module-site\" title=\"site: Module responsible for site-specific configuration.\"><code>site</code></a> module (which is imported automatically during startup, except if the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/using/cmdline.html#id3\"><code>-S</code></a> command-line option is given) adds several constants to the built-in namespace. They are useful for the interactive interpreter shell and should not be used in programs.</p> <dl class=\"data\"> <dt id=\"quit\">\n<code>quit(code=None)</code> </dt> <dt id=\"exit\">\n<code>exit(code=None)</code> </dt> <dd>\n<p>Objects that when printed, print a message like “Use quit() or Ctrl-D (i.e. EOF) to exit”, and when called, raise <a class=\"reference internal\" href=\"exceptions#SystemExit\" title=\"SystemExit\"><code>SystemExit</code></a> with the specified exit code.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"copyright\">\n<code>copyright</code> </dt> <dt id=\"credits\">\n<code>credits</code> </dt> <dd>\n<p>Objects that when printed or called, print the text of copyright or credits, respectively.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"license\">\n<code>license</code> </dt> <dd>\n<p>Object that when printed, prints the message “Type license() to see the full license text”, and when called, displays the full license text in a pager-like fashion (one screen at a time).</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/constants.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/constants.html</a>\n  </p>\n</div>\n","library/stdtypes":"<h1 id=\"bltin-types\">Built-in Types</h1> <p id=\"built-in-types\">The following sections describe the standard types that are built into the interpreter.</p> <p id=\"index-0\">The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions.</p> <p>Some collection classes are mutable. The methods that add, subtract, or rearrange their members in place, and don’t return a specific item, never return the collection instance itself but <code>None</code>.</p> <p>Some operations are supported by several object types; in particular, practically all objects can be compared for equality, tested for truth value, and converted to a string (with the <a class=\"reference internal\" href=\"functions#repr\" title=\"repr\"><code>repr()</code></a> function or the slightly different <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str()</code></a> function). The latter function is implicitly used when an object is written by the <a class=\"reference internal\" href=\"functions#print\" title=\"print\"><code>print()</code></a> function.</p>  <h2 id=\"truth\">Truth Value Testing</h2> <p id=\"truth-value-testing\">Any object can be tested for truth value, for use in an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#if\"><code>if</code></a> or <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#while\"><code>while</code></a> condition or as operand of the Boolean operations below.</p> <p id=\"index-2\">By default, an object is considered true unless its class defines either a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__bool__\" title=\"object.__bool__\"><code>__bool__()</code></a> method that returns <code>False</code> or a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__len__\" title=\"object.__len__\"><code>__len__()</code></a> method that returns zero, when called with the object. <a class=\"footnote-reference brackets\" href=\"#id12\" id=\"id1\">1</a> Here are most of the built-in objects considered false:</p>   <ul class=\"simple\" id=\"index-3\"> <li>constants defined to be false: <code>None</code> and <code>False</code>.</li> <li>zero of any numeric type: <code>0</code>, <code>0.0</code>, <code>0j</code>, <code>Decimal(0)</code>, <code>Fraction(0, 1)</code>\n</li> <li>empty sequences and collections: <code>''</code>, <code>()</code>, <code>[]</code>, <code>{}</code>, <code>set()</code>, <code>range(0)</code>\n</li> </ul> <p id=\"index-4\">Operations and built-in functions that have a Boolean result always return <code>0</code> or <code>False</code> for false and <code>1</code> or <code>True</code> for true, unless otherwise stated. (Important exception: the Boolean operations <code>or</code> and <code>and</code> always return one of their operands.)</p>   <h2 id=\"boolean\">Boolean Operations — <code>and</code>, <code>or</code>, <code>not</code>\n</h2> <p id=\"boolean-operations-and-or-not\">These are the Boolean operations, ordered by ascending priority:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Operation</p></th> <th class=\"head\"><p>Result</p></th> <th class=\"head\"><p>Notes</p></th> </tr> </thead>  <tr>\n<td><p><code>x or y</code></p></td> <td><p>if <em>x</em> is false, then <em>y</em>, else <em>x</em></p></td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>x and y</code></p></td> <td><p>if <em>x</em> is false, then <em>x</em>, else <em>y</em></p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>not x</code></p></td> <td><p>if <em>x</em> is false, then <code>True</code>, else <code>False</code></p></td> <td><p>(3)</p></td> </tr>  </table> <p id=\"index-6\">Notes:</p> <ol class=\"arabic simple\"> <li>This is a short-circuit operator, so it only evaluates the second argument if the first one is false.</li> <li>This is a short-circuit operator, so it only evaluates the second argument if the first one is true.</li> <li>\n<code>not</code> has a lower priority than non-Boolean operators, so <code>not a == b</code> is interpreted as <code>not (a == b)</code>, and <code>a == not b</code> is a syntax error.</li> </ol>   <h2 id=\"stdcomparisons\">Comparisons</h2> <p id=\"comparisons\">There are eight comparison operations in Python. They all have the same priority (which is higher than that of the Boolean operations). Comparisons can be chained arbitrarily; for example, <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y and\ny &lt;= z</code>, except that <em>y</em> is evaluated only once (but in both cases <em>z</em> is not evaluated at all when <code>x &lt; y</code> is found to be false).</p> <p>This table summarizes the comparison operations:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Operation</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>&lt;</code></p></td> <td><p>strictly less than</p></td> </tr> <tr>\n<td><p><code>&lt;=</code></p></td> <td><p>less than or equal</p></td> </tr> <tr>\n<td><p><code>&gt;</code></p></td> <td><p>strictly greater than</p></td> </tr> <tr>\n<td><p><code>&gt;=</code></p></td> <td><p>greater than or equal</p></td> </tr> <tr>\n<td><p><code>==</code></p></td> <td><p>equal</p></td> </tr> <tr>\n<td><p><code>!=</code></p></td> <td><p>not equal</p></td> </tr> <tr>\n<td><p><code>is</code></p></td> <td><p>object identity</p></td> </tr> <tr>\n<td><p><code>is not</code></p></td> <td><p>negated object identity</p></td> </tr>  </table> <p id=\"index-8\">Objects of different types, except different numeric types, never compare equal. The <code>==</code> operator is always defined but for some object types (for example, class objects) is equivalent to <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#is\"><code>is</code></a>. The <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> and <code>&gt;=</code> operators are only defined where they make sense; for example, they raise a <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> exception when one of the arguments is a complex number.</p> <p id=\"index-9\">Non-identical instances of a class normally compare as non-equal unless the class defines the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__eq__\" title=\"object.__eq__\"><code>__eq__()</code></a> method.</p> <p>Instances of a class cannot be ordered with respect to other instances of the same class, or other types of object, unless the class defines enough of the methods <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__lt__\" title=\"object.__lt__\"><code>__lt__()</code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__le__\" title=\"object.__le__\"><code>__le__()</code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__gt__\" title=\"object.__gt__\"><code>__gt__()</code></a>, and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__ge__\" title=\"object.__ge__\"><code>__ge__()</code></a> (in general, <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__lt__\" title=\"object.__lt__\"><code>__lt__()</code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__eq__\" title=\"object.__eq__\"><code>__eq__()</code></a> are sufficient, if you want the conventional meanings of the comparison operators).</p> <p>The behavior of the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#is\"><code>is</code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#is-not\"><code>is not</code></a> operators cannot be customized; also they can be applied to any two objects and never raise an exception.</p> <p id=\"index-10\">Two more operations with the same syntactic priority, <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#in\"><code>in</code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#not-in\"><code>not in</code></a>, are supported by types that are <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-iterable\"><span class=\"xref std std-term\">iterable</span></a> or implement the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__contains__\" title=\"object.__contains__\"><code>__contains__()</code></a> method.</p>   <h2 id=\"typesnumeric\">Numeric Types — int, float, complex</h2> <p id=\"numeric-types-int-float-complex\">There are three distinct numeric types: <em class=\"dfn\">integers</em>, <em class=\"dfn\">floating point numbers</em>, and <em class=\"dfn\">complex numbers</em>. In addition, Booleans are a subtype of integers. Integers have unlimited precision. Floating point numbers are usually implemented using <code>double</code> in C; information about the precision and internal representation of floating point numbers for the machine on which your program is running is available in <a class=\"reference internal\" href=\"sys#sys.float_info\" title=\"sys.float_info\"><code>sys.float_info</code></a>. Complex numbers have a real and imaginary part, which are each a floating point number. To extract these parts from a complex number <em>z</em>, use <code>z.real</code> and <code>z.imag</code>. (The standard library includes the additional numeric types <a class=\"reference internal\" href=\"fractions#fractions.Fraction\" title=\"fractions.Fraction\"><code>fractions.Fraction</code></a>, for rationals, and <a class=\"reference internal\" href=\"decimal#decimal.Decimal\" title=\"decimal.Decimal\"><code>decimal.Decimal</code></a>, for floating-point numbers with user-definable precision.)</p> <p id=\"index-12\">Numbers are created by numeric literals or as the result of built-in functions and operators. Unadorned integer literals (including hex, octal and binary numbers) yield integers. Numeric literals containing a decimal point or an exponent sign yield floating point numbers. Appending <code>'j'</code> or <code>'J'</code> to a numeric literal yields an imaginary number (a complex number with a zero real part) which you can add to an integer or float to get a complex number with real and imaginary parts.</p> <p id=\"index-13\">Python fully supports mixed arithmetic: when a binary arithmetic operator has operands of different numeric types, the operand with the “narrower” type is widened to that of the other, where integer is narrower than floating point, which is narrower than complex. A comparison between numbers of different types behaves as though the exact values of those numbers were being compared. <a class=\"footnote-reference brackets\" href=\"#id13\" id=\"id2\">2</a></p> <p>The constructors <a class=\"reference internal\" href=\"functions#int\" title=\"int\"><code>int()</code></a>, <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float()</code></a>, and <a class=\"reference internal\" href=\"functions#complex\" title=\"complex\"><code>complex()</code></a> can be used to produce numbers of a specific type.</p> <p>All numeric types (except complex) support the following operations (for priorities of the operations, see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#operator-summary\"><span class=\"std std-ref\">Operator precedence</span></a>):</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Operation</p></th> <th class=\"head\"><p>Result</p></th> <th class=\"head\"><p>Notes</p></th> <th class=\"head\"><p>Full documentation</p></th> </tr> </thead>  <tr>\n<td><p><code>x + y</code></p></td> <td><p>sum of <em>x</em> and <em>y</em></p></td> <td></td> <td></td> </tr> <tr>\n<td><p><code>x - y</code></p></td> <td><p>difference of <em>x</em> and <em>y</em></p></td> <td></td> <td></td> </tr> <tr>\n<td><p><code>x * y</code></p></td> <td><p>product of <em>x</em> and <em>y</em></p></td> <td></td> <td></td> </tr> <tr>\n<td><p><code>x / y</code></p></td> <td><p>quotient of <em>x</em> and <em>y</em></p></td> <td></td> <td></td> </tr> <tr>\n<td><p><code>x // y</code></p></td> <td><p>floored quotient of <em>x</em> and <em>y</em></p></td> <td><p>(1)</p></td> <td></td> </tr> <tr>\n<td><p><code>x % y</code></p></td> <td><p>remainder of <code>x / y</code></p></td> <td><p>(2)</p></td> <td></td> </tr> <tr>\n<td><p><code>-x</code></p></td> <td><p><em>x</em> negated</p></td> <td></td> <td></td> </tr> <tr>\n<td><p><code>+x</code></p></td> <td><p><em>x</em> unchanged</p></td> <td></td> <td></td> </tr> <tr>\n<td><p><code>abs(x)</code></p></td> <td><p>absolute value or magnitude of <em>x</em></p></td> <td></td> <td><p><a class=\"reference internal\" href=\"functions#abs\" title=\"abs\"><code>abs()</code></a></p></td> </tr> <tr>\n<td><p><code>int(x)</code></p></td> <td><p><em>x</em> converted to integer</p></td> <td><p>(3)(6)</p></td> <td><p><a class=\"reference internal\" href=\"functions#int\" title=\"int\"><code>int()</code></a></p></td> </tr> <tr>\n<td><p><code>float(x)</code></p></td> <td><p><em>x</em> converted to floating point</p></td> <td><p>(4)(6)</p></td> <td><p><a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float()</code></a></p></td> </tr> <tr>\n<td><p><code>complex(re, im)</code></p></td> <td><p>a complex number with real part <em>re</em>, imaginary part <em>im</em>. <em>im</em> defaults to zero.</p></td> <td><p>(6)</p></td> <td><p><a class=\"reference internal\" href=\"functions#complex\" title=\"complex\"><code>complex()</code></a></p></td> </tr> <tr>\n<td><p><code>c.conjugate()</code></p></td> <td><p>conjugate of the complex number <em>c</em></p></td> <td></td> <td></td> </tr> <tr>\n<td><p><code>divmod(x, y)</code></p></td> <td><p>the pair <code>(x // y, x % y)</code></p></td> <td><p>(2)</p></td> <td><p><a class=\"reference internal\" href=\"functions#divmod\" title=\"divmod\"><code>divmod()</code></a></p></td> </tr> <tr>\n<td><p><code>pow(x, y)</code></p></td> <td><p><em>x</em> to the power <em>y</em></p></td> <td><p>(5)</p></td> <td><p><a class=\"reference internal\" href=\"functions#pow\" title=\"pow\"><code>pow()</code></a></p></td> </tr> <tr>\n<td><p><code>x ** y</code></p></td> <td><p><em>x</em> to the power <em>y</em></p></td> <td><p>(5)</p></td> <td></td> </tr>  </table> <p id=\"index-14\">Notes:</p> <ol class=\"arabic\"> <li>Also referred to as integer division. The resultant value is a whole integer, though the result’s type is not necessarily int. The result is always rounded towards minus infinity: <code>1//2</code> is <code>0</code>, <code>(-1)//2</code> is <code>-1</code>, <code>1//(-2)</code> is <code>-1</code>, and <code>(-1)//(-2)</code> is <code>0</code>.</li> <li>Not for complex numbers. Instead convert to floats using <a class=\"reference internal\" href=\"functions#abs\" title=\"abs\"><code>abs()</code></a> if appropriate.</li> <li>Conversion from floating point to integer may round or truncate as in C; see functions <a class=\"reference internal\" href=\"math#math.floor\" title=\"math.floor\"><code>math.floor()</code></a> and <a class=\"reference internal\" href=\"math#math.ceil\" title=\"math.ceil\"><code>math.ceil()</code></a> for well-defined conversions. </li> <li>float also accepts the strings “nan” and “inf” with an optional prefix “+” or “-” for Not a Number (NaN) and positive or negative infinity.</li> <li>Python defines <code>pow(0, 0)</code> and <code>0 ** 0</code> to be <code>1</code>, as is common for programming languages.</li> <li>\n<p>The numeric literals accepted include the digits <code>0</code> to <code>9</code> or any Unicode equivalent (code points with the <code>Nd</code> property).</p> <p>See <a class=\"reference external\" href=\"https://www.unicode.org/Public/13.0.0/ucd/extracted/DerivedNumericType.txt\">https://www.unicode.org/Public/13.0.0/ucd/extracted/DerivedNumericType.txt</a> for a complete list of code points with the <code>Nd</code> property.</p> </li> </ol> <p>All <a class=\"reference internal\" href=\"numbers#numbers.Real\" title=\"numbers.Real\"><code>numbers.Real</code></a> types (<a class=\"reference internal\" href=\"functions#int\" title=\"int\"><code>int</code></a> and <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a>) also include the following operations:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Operation</p></th> <th class=\"head\"><p>Result</p></th> </tr> </thead>  <tr>\n<td><p><a class=\"reference internal\" href=\"math#math.trunc\" title=\"math.trunc\"><code>math.trunc(x)</code></a></p></td> <td><p><em>x</em> truncated to <a class=\"reference internal\" href=\"numbers#numbers.Integral\" title=\"numbers.Integral\"><code>Integral</code></a></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"functions#round\" title=\"round\"><code>round(x[,\nn])</code></a></p></td> <td><p><em>x</em> rounded to <em>n</em> digits, rounding half to even. If <em>n</em> is omitted, it defaults to 0.</p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"math#math.floor\" title=\"math.floor\"><code>math.floor(x)</code></a></p></td> <td><p>the greatest <a class=\"reference internal\" href=\"numbers#numbers.Integral\" title=\"numbers.Integral\"><code>Integral</code></a> &lt;= <em>x</em></p></td> </tr> <tr>\n<td><p><a class=\"reference internal\" href=\"math#math.ceil\" title=\"math.ceil\"><code>math.ceil(x)</code></a></p></td> <td><p>the least <a class=\"reference internal\" href=\"numbers#numbers.Integral\" title=\"numbers.Integral\"><code>Integral</code></a> &gt;= <em>x</em></p></td> </tr>  </table> <p>For additional numeric operations see the <a class=\"reference internal\" href=\"math#module-math\" title=\"math: Mathematical functions (sin() etc.).\"><code>math</code></a> and <a class=\"reference internal\" href=\"cmath#module-cmath\" title=\"cmath: Mathematical functions for complex numbers.\"><code>cmath</code></a> modules.</p>  <h3 id=\"bitstring-ops\">Bitwise Operations on Integer Types</h3> <p id=\"bitwise-operations-on-integer-types\">Bitwise operations only make sense for integers. The result of bitwise operations is calculated as though carried out in two’s complement with an infinite number of sign bits.</p> <p>The priorities of the binary bitwise operations are all lower than the numeric operations and higher than the comparisons; the unary operation <code>~</code> has the same priority as the other unary numeric operations (<code>+</code> and <code>-</code>).</p> <p>This table lists the bitwise operations sorted in ascending priority:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Operation</p></th> <th class=\"head\"><p>Result</p></th> <th class=\"head\"><p>Notes</p></th> </tr> </thead>  <tr>\n<td><p><code>x | y</code></p></td> <td><p>bitwise <em class=\"dfn\">or</em> of <em>x</em> and <em>y</em></p></td> <td><p>(4)</p></td> </tr> <tr>\n<td><p><code>x ^ y</code></p></td> <td><p>bitwise <em class=\"dfn\">exclusive or</em> of <em>x</em> and <em>y</em></p></td> <td><p>(4)</p></td> </tr> <tr>\n<td><p><code>x &amp; y</code></p></td> <td><p>bitwise <em class=\"dfn\">and</em> of <em>x</em> and <em>y</em></p></td> <td><p>(4)</p></td> </tr> <tr>\n<td><p><code>x &lt;&lt; n</code></p></td> <td><p><em>x</em> shifted left by <em>n</em> bits</p></td> <td><p>(1)(2)</p></td> </tr> <tr>\n<td><p><code>x &gt;&gt; n</code></p></td> <td><p><em>x</em> shifted right by <em>n</em> bits</p></td> <td><p>(1)(3)</p></td> </tr> <tr>\n<td><p><code>~x</code></p></td> <td><p>the bits of <em>x</em> inverted</p></td> <td></td> </tr>  </table> <p>Notes:</p> <ol class=\"arabic simple\"> <li>Negative shift counts are illegal and cause a <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> to be raised.</li> <li>A left shift by <em>n</em> bits is equivalent to multiplication by <code>pow(2, n)</code>.</li> <li>A right shift by <em>n</em> bits is equivalent to floor division by <code>pow(2, n)</code>.</li> <li>Performing these calculations with at least one extra sign extension bit in a finite two’s complement representation (a working bit-width of <code>1 + max(x.bit_length(), y.bit_length())</code> or more) is sufficient to get the same result as if there were an infinite number of sign bits.</li> </ol>   <h3 id=\"additional-methods-on-integer-types\">Additional Methods on Integer Types</h3> <p>The int type implements the <a class=\"reference internal\" href=\"numbers#numbers.Integral\" title=\"numbers.Integral\"><code>numbers.Integral</code></a> <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-abstract-base-class\"><span class=\"xref std std-term\">abstract base class</span></a>. In addition, it provides a few more methods:</p> <dl class=\"method\"> <dt id=\"int.bit_length\">\n<code>int.bit_length()</code> </dt> <dd>\n<p>Return the number of bits necessary to represent an integer in binary, excluding the sign and leading zeros:</p> <pre data-language=\"python\">&gt;&gt;&gt; n = -37\n&gt;&gt;&gt; bin(n)\n'-0b100101'\n&gt;&gt;&gt; n.bit_length()\n6\n</pre> <p>More precisely, if <code>x</code> is nonzero, then <code>x.bit_length()</code> is the unique positive integer <code>k</code> such that <code>2**(k-1) &lt;= abs(x) &lt; 2**k</code>. Equivalently, when <code>abs(x)</code> is small enough to have a correctly rounded logarithm, then <code>k = 1 + int(log(abs(x), 2))</code>. If <code>x</code> is zero, then <code>x.bit_length()</code> returns <code>0</code>.</p> <p>Equivalent to:</p> <pre data-language=\"python\">def bit_length(self):\n    s = bin(self)       # binary representation:  bin(-37) --&gt; '-0b100101'\n    s = s.lstrip('-0b') # remove leading zeros and minus sign\n    return len(s)       # len('100101') --&gt; 6\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.1.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"int.to_bytes\">\n<code>int.to_bytes(length, byteorder, *, signed=False)</code> </dt> <dd>\n<p>Return an array of bytes representing an integer.</p> <pre data-language=\"python\">&gt;&gt;&gt; (1024).to_bytes(2, byteorder='big')\nb'\\x04\\x00'\n&gt;&gt;&gt; (1024).to_bytes(10, byteorder='big')\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00'\n&gt;&gt;&gt; (-1024).to_bytes(10, byteorder='big', signed=True)\nb'\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\x00'\n&gt;&gt;&gt; x = 1000\n&gt;&gt;&gt; x.to_bytes((x.bit_length() + 7) // 8, byteorder='little')\nb'\\xe8\\x03'\n</pre> <p>The integer is represented using <em>length</em> bytes. An <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> is raised if the integer is not representable with the given number of bytes.</p> <p>The <em>byteorder</em> argument determines the byte order used to represent the integer. If <em>byteorder</em> is <code>\"big\"</code>, the most significant byte is at the beginning of the byte array. If <em>byteorder</em> is <code>\"little\"</code>, the most significant byte is at the end of the byte array. To request the native byte order of the host system, use <a class=\"reference internal\" href=\"sys#sys.byteorder\" title=\"sys.byteorder\"><code>sys.byteorder</code></a> as the byte order value.</p> <p>The <em>signed</em> argument determines whether two’s complement is used to represent the integer. If <em>signed</em> is <code>False</code> and a negative integer is given, an <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> is raised. The default value for <em>signed</em> is <code>False</code>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"int.from_bytes\">\n<code>classmethod int.from_bytes(bytes, byteorder, *, signed=False)</code> </dt> <dd>\n<p>Return the integer represented by the given array of bytes.</p> <pre data-language=\"python\">&gt;&gt;&gt; int.from_bytes(b'\\x00\\x10', byteorder='big')\n16\n&gt;&gt;&gt; int.from_bytes(b'\\x00\\x10', byteorder='little')\n4096\n&gt;&gt;&gt; int.from_bytes(b'\\xfc\\x00', byteorder='big', signed=True)\n-1024\n&gt;&gt;&gt; int.from_bytes(b'\\xfc\\x00', byteorder='big', signed=False)\n64512\n&gt;&gt;&gt; int.from_bytes([255, 0, 0], byteorder='big')\n16711680\n</pre> <p>The argument <em>bytes</em> must either be a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> or an iterable producing bytes.</p> <p>The <em>byteorder</em> argument determines the byte order used to represent the integer. If <em>byteorder</em> is <code>\"big\"</code>, the most significant byte is at the beginning of the byte array. If <em>byteorder</em> is <code>\"little\"</code>, the most significant byte is at the end of the byte array. To request the native byte order of the host system, use <a class=\"reference internal\" href=\"sys#sys.byteorder\" title=\"sys.byteorder\"><code>sys.byteorder</code></a> as the byte order value.</p> <p>The <em>signed</em> argument indicates whether two’s complement is used to represent the integer.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"int.as_integer_ratio\">\n<code>int.as_integer_ratio()</code> </dt> <dd>\n<p>Return a pair of integers whose ratio is exactly equal to the original integer and with a positive denominator. The integer ratio of integers (whole numbers) is always the integer as the numerator and <code>1</code> as the denominator.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.8.</span></p> </div> </dd>\n</dl>   <h3 id=\"additional-methods-on-float\">Additional Methods on Float</h3> <p>The float type implements the <a class=\"reference internal\" href=\"numbers#numbers.Real\" title=\"numbers.Real\"><code>numbers.Real</code></a> <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-abstract-base-class\"><span class=\"xref std std-term\">abstract base class</span></a>. float also has the following additional methods.</p> <dl class=\"method\"> <dt id=\"float.as_integer_ratio\">\n<code>float.as_integer_ratio()</code> </dt> <dd>\n<p>Return a pair of integers whose ratio is exactly equal to the original float and with a positive denominator. Raises <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> on infinities and a <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> on NaNs.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"float.is_integer\">\n<code>float.is_integer()</code> </dt> <dd>\n<p>Return <code>True</code> if the float instance is finite with integral value, and <code>False</code> otherwise:</p> <pre data-language=\"python\">&gt;&gt;&gt; (-2.0).is_integer()\nTrue\n&gt;&gt;&gt; (3.2).is_integer()\nFalse\n</pre> </dd>\n</dl> <p>Two methods support conversion to and from hexadecimal strings. Since Python’s floats are stored internally as binary numbers, converting a float to or from a <em>decimal</em> string usually involves a small rounding error. In contrast, hexadecimal strings allow exact representation and specification of floating-point numbers. This can be useful when debugging, and in numerical work.</p> <dl class=\"method\"> <dt id=\"float.hex\">\n<code>float.hex()</code> </dt> <dd>\n<p>Return a representation of a floating-point number as a hexadecimal string. For finite floating-point numbers, this representation will always include a leading <code>0x</code> and a trailing <code>p</code> and exponent.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"float.fromhex\">\n<code>classmethod float.fromhex(s)</code> </dt> <dd>\n<p>Class method to return the float represented by a hexadecimal string <em>s</em>. The string <em>s</em> may have leading and trailing whitespace.</p> </dd>\n</dl> <p>Note that <a class=\"reference internal\" href=\"#float.hex\" title=\"float.hex\"><code>float.hex()</code></a> is an instance method, while <a class=\"reference internal\" href=\"#float.fromhex\" title=\"float.fromhex\"><code>float.fromhex()</code></a> is a class method.</p> <p>A hexadecimal string takes the form:</p> <pre data-language=\"python\">[sign] ['0x'] integer ['.' fraction] ['p' exponent]\n</pre> <p>where the optional <code>sign</code> may by either <code>+</code> or <code>-</code>, <code>integer</code> and <code>fraction</code> are strings of hexadecimal digits, and <code>exponent</code> is a decimal integer with an optional leading sign. Case is not significant, and there must be at least one hexadecimal digit in either the integer or the fraction. This syntax is similar to the syntax specified in section 6.4.4.2 of the C99 standard, and also to the syntax used in Java 1.5 onwards. In particular, the output of <a class=\"reference internal\" href=\"#float.hex\" title=\"float.hex\"><code>float.hex()</code></a> is usable as a hexadecimal floating-point literal in C or Java code, and hexadecimal strings produced by C’s <code>%a</code> format character or Java’s <code>Double.toHexString</code> are accepted by <a class=\"reference internal\" href=\"#float.fromhex\" title=\"float.fromhex\"><code>float.fromhex()</code></a>.</p> <p>Note that the exponent is written in decimal rather than hexadecimal, and that it gives the power of 2 by which to multiply the coefficient. For example, the hexadecimal string <code>0x3.a7p10</code> represents the floating-point number <code>(3 + 10./16 + 7./16**2) * 2.0**10</code>, or <code>3740.0</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; float.fromhex('0x3.a7p10')\n3740.0\n</pre> <p>Applying the reverse conversion to <code>3740.0</code> gives a different hexadecimal string representing the same number:</p> <pre data-language=\"python\">&gt;&gt;&gt; float.hex(3740.0)\n'0x1.d380000000000p+11'\n</pre>   <h3 id=\"numeric-hash\">Hashing of numeric types</h3> <p id=\"hashing-of-numeric-types\">For numbers <code>x</code> and <code>y</code>, possibly of different types, it’s a requirement that <code>hash(x) == hash(y)</code> whenever <code>x == y</code> (see the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__hash__\" title=\"object.__hash__\"><code>__hash__()</code></a> method documentation for more details). For ease of implementation and efficiency across a variety of numeric types (including <a class=\"reference internal\" href=\"functions#int\" title=\"int\"><code>int</code></a>, <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a>, <a class=\"reference internal\" href=\"decimal#decimal.Decimal\" title=\"decimal.Decimal\"><code>decimal.Decimal</code></a> and <a class=\"reference internal\" href=\"fractions#fractions.Fraction\" title=\"fractions.Fraction\"><code>fractions.Fraction</code></a>) Python’s hash for numeric types is based on a single mathematical function that’s defined for any rational number, and hence applies to all instances of <a class=\"reference internal\" href=\"functions#int\" title=\"int\"><code>int</code></a> and <a class=\"reference internal\" href=\"fractions#fractions.Fraction\" title=\"fractions.Fraction\"><code>fractions.Fraction</code></a>, and all finite instances of <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a> and <a class=\"reference internal\" href=\"decimal#decimal.Decimal\" title=\"decimal.Decimal\"><code>decimal.Decimal</code></a>. Essentially, this function is given by reduction modulo <code>P</code> for a fixed prime <code>P</code>. The value of <code>P</code> is made available to Python as the <code>modulus</code> attribute of <a class=\"reference internal\" href=\"sys#sys.hash_info\" title=\"sys.hash_info\"><code>sys.hash_info</code></a>.</p> <div class=\"impl-detail compound\"> <p><strong>CPython implementation detail:</strong> Currently, the prime used is <code>P = 2**31 - 1</code> on machines with 32-bit C longs and <code>P = 2**61 - 1</code> on machines with 64-bit C longs.</p> </div> <p>Here are the rules in detail:</p> <ul class=\"simple\"> <li>If <code>x = m / n</code> is a nonnegative rational number and <code>n</code> is not divisible by <code>P</code>, define <code>hash(x)</code> as <code>m * invmod(n, P) % P</code>, where <code>invmod(n,\nP)</code> gives the inverse of <code>n</code> modulo <code>P</code>.</li> <li>If <code>x = m / n</code> is a nonnegative rational number and <code>n</code> is divisible by <code>P</code> (but <code>m</code> is not) then <code>n</code> has no inverse modulo <code>P</code> and the rule above doesn’t apply; in this case define <code>hash(x)</code> to be the constant value <code>sys.hash_info.inf</code>.</li> <li>If <code>x = m / n</code> is a negative rational number define <code>hash(x)</code> as <code>-hash(-x)</code>. If the resulting hash is <code>-1</code>, replace it with <code>-2</code>.</li> <li>The particular values <code>sys.hash_info.inf</code>, <code>-sys.hash_info.inf</code> and <code>sys.hash_info.nan</code> are used as hash values for positive infinity, negative infinity, or nans (respectively). (All hashable nans have the same hash value.)</li> <li>For a <a class=\"reference internal\" href=\"functions#complex\" title=\"complex\"><code>complex</code></a> number <code>z</code>, the hash values of the real and imaginary parts are combined by computing <code>hash(z.real) +\nsys.hash_info.imag * hash(z.imag)</code>, reduced modulo <code>2**sys.hash_info.width</code> so that it lies in <code>range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width -\n1))</code>. Again, if the result is <code>-1</code>, it’s replaced with <code>-2</code>.</li> </ul> <p>To clarify the above rules, here’s some example Python code, equivalent to the built-in hash, for computing the hash of a rational number, <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a>, or <a class=\"reference internal\" href=\"functions#complex\" title=\"complex\"><code>complex</code></a>:</p> <pre data-language=\"python\">import sys, math\n\ndef hash_fraction(m, n):\n    \"\"\"Compute the hash of a rational number m / n.\n\n    Assumes m and n are integers, with n positive.\n    Equivalent to hash(fractions.Fraction(m, n)).\n\n    \"\"\"\n    P = sys.hash_info.modulus\n    # Remove common factors of P.  (Unnecessary if m and n already coprime.)\n    while m % P == n % P == 0:\n        m, n = m // P, n // P\n\n    if n % P == 0:\n        hash_value = sys.hash_info.inf\n    else:\n        # Fermat's Little Theorem: pow(n, P-1, P) is 1, so\n        # pow(n, P-2, P) gives the inverse of n modulo P.\n        hash_value = (abs(m) % P) * pow(n, P - 2, P) % P\n    if m &lt; 0:\n        hash_value = -hash_value\n    if hash_value == -1:\n        hash_value = -2\n    return hash_value\n\ndef hash_float(x):\n    \"\"\"Compute the hash of a float x.\"\"\"\n\n    if math.isnan(x):\n        return sys.hash_info.nan\n    elif math.isinf(x):\n        return sys.hash_info.inf if x &gt; 0 else -sys.hash_info.inf\n    else:\n        return hash_fraction(*x.as_integer_ratio())\n\ndef hash_complex(z):\n    \"\"\"Compute the hash of a complex number z.\"\"\"\n\n    hash_value = hash_float(z.real) + sys.hash_info.imag * hash_float(z.imag)\n    # do a signed reduction modulo 2**sys.hash_info.width\n    M = 2**(sys.hash_info.width - 1)\n    hash_value = (hash_value &amp; (M - 1)) - (hash_value &amp; M)\n    if hash_value == -1:\n        hash_value = -2\n    return hash_value\n</pre>    <h2 id=\"typeiter\">Iterator Types</h2> <p id=\"iterator-types\">Python supports a concept of iteration over containers. This is implemented using two distinct methods; these are used to allow user-defined classes to support iteration. Sequences, described below in more detail, always support the iteration methods.</p> <p>One method needs to be defined for container objects to provide iteration support:</p> <dl class=\"method\"> <dt id=\"container.__iter__\">\n<code>container.__iter__()</code> </dt> <dd>\n<p>Return an iterator object. The object is required to support the iterator protocol described below. If a container supports different types of iteration, additional methods can be provided to specifically request iterators for those iteration types. (An example of an object supporting multiple forms of iteration would be a tree structure which supports both breadth-first and depth-first traversal.) This method corresponds to the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/c-api/typeobj.html#c.PyTypeObject.tp_iter\" title=\"PyTypeObject.tp_iter\"><code>tp_iter</code></a> slot of the type structure for Python objects in the Python/C API.</p> </dd>\n</dl> <p>The iterator objects themselves are required to support the following two methods, which together form the <em class=\"dfn\">iterator protocol</em>:</p> <dl class=\"method\"> <dt id=\"iterator.__iter__\">\n<code>iterator.__iter__()</code> </dt> <dd>\n<p>Return the iterator object itself. This is required to allow both containers and iterators to be used with the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#for\"><code>for</code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#in\"><code>in</code></a> statements. This method corresponds to the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/c-api/typeobj.html#c.PyTypeObject.tp_iter\" title=\"PyTypeObject.tp_iter\"><code>tp_iter</code></a> slot of the type structure for Python objects in the Python/C API.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"iterator.__next__\">\n<code>iterator.__next__()</code> </dt> <dd>\n<p>Return the next item from the container. If there are no further items, raise the <a class=\"reference internal\" href=\"exceptions#StopIteration\" title=\"StopIteration\"><code>StopIteration</code></a> exception. This method corresponds to the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/c-api/typeobj.html#c.PyTypeObject.tp_iternext\" title=\"PyTypeObject.tp_iternext\"><code>tp_iternext</code></a> slot of the type structure for Python objects in the Python/C API.</p> </dd>\n</dl> <p>Python defines several iterator objects to support iteration over general and specific sequence types, dictionaries, and other more specialized forms. The specific types are not important beyond their implementation of the iterator protocol.</p> <p>Once an iterator’s <a class=\"reference internal\" href=\"#iterator.__next__\" title=\"iterator.__next__\"><code>__next__()</code></a> method raises <a class=\"reference internal\" href=\"exceptions#StopIteration\" title=\"StopIteration\"><code>StopIteration</code></a>, it must continue to do so on subsequent calls. Implementations that do not obey this property are deemed broken.</p>  <h3 id=\"id3\">Generator Types</h3> <p id=\"generator-types\">Python’s <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generator\"><span class=\"xref std std-term\">generator</span></a>s provide a convenient way to implement the iterator protocol. If a container object’s <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__iter__\" title=\"object.__iter__\"><code>__iter__()</code></a> method is implemented as a generator, it will automatically return an iterator object (technically, a generator object) supplying the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__iter__\" title=\"object.__iter__\"><code>__iter__()</code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#generator.__next__\" title=\"generator.__next__\"><code>__next__()</code></a> methods. More information about generators can be found in <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#yieldexpr\"><span class=\"std std-ref\">the documentation for the yield expression</span></a>.</p>    <h2 id=\"typesseq\">Sequence Types — list, tuple, range</h2> <p id=\"sequence-types-list-tuple-range\">There are three basic sequence types: lists, tuples, and range objects. Additional sequence types tailored for processing of <a class=\"reference internal\" href=\"#binaryseq\"><span class=\"std std-ref\">binary data</span></a> and <a class=\"reference internal\" href=\"#textseq\"><span class=\"std std-ref\">text strings</span></a> are described in dedicated sections.</p>  <h3 id=\"typesseq-common\">Common Sequence Operations</h3> <p id=\"common-sequence-operations\">The operations in the following table are supported by most sequence types, both mutable and immutable. The <a class=\"reference internal\" href=\"collections.abc#collections.abc.Sequence\" title=\"collections.abc.Sequence\"><code>collections.abc.Sequence</code></a> ABC is provided to make it easier to correctly implement these operations on custom sequence types.</p> <p>This table lists the sequence operations sorted in ascending priority. In the table, <em>s</em> and <em>t</em> are sequences of the same type, <em>n</em>, <em>i</em>, <em>j</em> and <em>k</em> are integers and <em>x</em> is an arbitrary object that meets any type and value restrictions imposed by <em>s</em>.</p> <p>The <code>in</code> and <code>not in</code> operations have the same priorities as the comparison operations. The <code>+</code> (concatenation) and <code>*</code> (repetition) operations have the same priority as the corresponding numeric operations. <a class=\"footnote-reference brackets\" href=\"#id14\" id=\"id4\">3</a></p> <table class=\"docutils align-default\" id=\"index-19\">  <thead> <tr>\n<th class=\"head\"><p>Operation</p></th> <th class=\"head\"><p>Result</p></th> <th class=\"head\"><p>Notes</p></th> </tr> </thead>  <tr>\n<td><p><code>x in s</code></p></td> <td><p><code>True</code> if an item of <em>s</em> is equal to <em>x</em>, else <code>False</code></p></td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>x not in s</code></p></td> <td><p><code>False</code> if an item of <em>s</em> is equal to <em>x</em>, else <code>True</code></p></td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>s + t</code></p></td> <td><p>the concatenation of <em>s</em> and <em>t</em></p></td> <td><p>(6)(7)</p></td> </tr> <tr>\n<td><p><code>s * n</code> or <code>n * s</code></p></td> <td><p>equivalent to adding <em>s</em> to itself <em>n</em> times</p></td> <td><p>(2)(7)</p></td> </tr> <tr>\n<td><p><code>s[i]</code></p></td> <td><p><em>i</em>th item of <em>s</em>, origin 0</p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>s[i:j]</code></p></td> <td><p>slice of <em>s</em> from <em>i</em> to <em>j</em></p></td> <td><p>(3)(4)</p></td> </tr> <tr>\n<td><p><code>s[i:j:k]</code></p></td> <td><p>slice of <em>s</em> from <em>i</em> to <em>j</em> with step <em>k</em></p></td> <td><p>(3)(5)</p></td> </tr> <tr>\n<td><p><code>len(s)</code></p></td> <td><p>length of <em>s</em></p></td> <td></td> </tr> <tr>\n<td><p><code>min(s)</code></p></td> <td><p>smallest item of <em>s</em></p></td> <td></td> </tr> <tr>\n<td><p><code>max(s)</code></p></td> <td><p>largest item of <em>s</em></p></td> <td></td> </tr> <tr>\n<td><p><code>s.index(x[, i[, j]])</code></p></td> <td><p>index of the first occurrence of <em>x</em> in <em>s</em> (at or after index <em>i</em> and before index <em>j</em>)</p></td> <td><p>(8)</p></td> </tr> <tr>\n<td><p><code>s.count(x)</code></p></td> <td><p>total number of occurrences of <em>x</em> in <em>s</em></p></td> <td></td> </tr>  </table> <p>Sequences of the same type also support comparisons. In particular, tuples and lists are compared lexicographically by comparing corresponding elements. This means that to compare equal, every element must compare equal and the two sequences must be of the same type and have the same length. (For full details see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#comparisons\"><span class=\"std std-ref\">Comparisons</span></a> in the language reference.)</p> <p>Notes:</p> <ol class=\"arabic\"> <li>\n<p>While the <code>in</code> and <code>not in</code> operations are used only for simple containment testing in the general case, some specialised sequences (such as <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str</code></a>, <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> and <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a>) also use them for subsequence testing:</p> <pre data-language=\"python\">&gt;&gt;&gt; \"gg\" in \"eggs\"\nTrue\n</pre> </li> <li>\n<p>Values of <em>n</em> less than <code>0</code> are treated as <code>0</code> (which yields an empty sequence of the same type as <em>s</em>). Note that items in the sequence <em>s</em> are not copied; they are referenced multiple times. This often haunts new Python programmers; consider:</p> <pre data-language=\"python\">&gt;&gt;&gt; lists = [[]] * 3\n&gt;&gt;&gt; lists\n[[], [], []]\n&gt;&gt;&gt; lists[0].append(3)\n&gt;&gt;&gt; lists\n[[3], [3], [3]]\n</pre> <p>What has happened is that <code>[[]]</code> is a one-element list containing an empty list, so all three elements of <code>[[]] * 3</code> are references to this single empty list. Modifying any of the elements of <code>lists</code> modifies this single list. You can create a list of different lists this way:</p> <pre data-language=\"python\">&gt;&gt;&gt; lists = [[] for i in range(3)]\n&gt;&gt;&gt; lists[0].append(3)\n&gt;&gt;&gt; lists[1].append(5)\n&gt;&gt;&gt; lists[2].append(7)\n&gt;&gt;&gt; lists\n[[3], [5], [7]]\n</pre> <p>Further explanation is available in the FAQ entry <a class=\"reference internal\" href=\"https://docs.python.org/3.9/faq/programming.html#faq-multidimensional-list\"><span class=\"std std-ref\">How do I create a multidimensional list?</span></a>.</p> </li> <li>If <em>i</em> or <em>j</em> is negative, the index is relative to the end of sequence <em>s</em>: <code>len(s) + i</code> or <code>len(s) + j</code> is substituted. But note that <code>-0</code> is still <code>0</code>.</li> <li>The slice of <em>s</em> from <em>i</em> to <em>j</em> is defined as the sequence of items with index <em>k</em> such that <code>i &lt;= k &lt; j</code>. If <em>i</em> or <em>j</em> is greater than <code>len(s)</code>, use <code>len(s)</code>. If <em>i</em> is omitted or <code>None</code>, use <code>0</code>. If <em>j</em> is omitted or <code>None</code>, use <code>len(s)</code>. If <em>i</em> is greater than or equal to <em>j</em>, the slice is empty.</li> <li>The slice of <em>s</em> from <em>i</em> to <em>j</em> with step <em>k</em> is defined as the sequence of items with index <code>x = i + n*k</code> such that <code>0 &lt;= n &lt; (j-i)/k</code>. In other words, the indices are <code>i</code>, <code>i+k</code>, <code>i+2*k</code>, <code>i+3*k</code> and so on, stopping when <em>j</em> is reached (but never including <em>j</em>). When <em>k</em> is positive, <em>i</em> and <em>j</em> are reduced to <code>len(s)</code> if they are greater. When <em>k</em> is negative, <em>i</em> and <em>j</em> are reduced to <code>len(s) - 1</code> if they are greater. If <em>i</em> or <em>j</em> are omitted or <code>None</code>, they become “end” values (which end depends on the sign of <em>k</em>). Note, <em>k</em> cannot be zero. If <em>k</em> is <code>None</code>, it is treated like <code>1</code>.</li> <li>\n<p>Concatenating immutable sequences always results in a new object. This means that building up a sequence by repeated concatenation will have a quadratic runtime cost in the total sequence length. To get a linear runtime cost, you must switch to one of the alternatives below:</p> <ul class=\"simple\"> <li>if concatenating <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str</code></a> objects, you can build a list and use <a class=\"reference internal\" href=\"#str.join\" title=\"str.join\"><code>str.join()</code></a> at the end or else write to an <a class=\"reference internal\" href=\"io#io.StringIO\" title=\"io.StringIO\"><code>io.StringIO</code></a> instance and retrieve its value when complete</li> <li>if concatenating <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> objects, you can similarly use <a class=\"reference internal\" href=\"#bytes.join\" title=\"bytes.join\"><code>bytes.join()</code></a> or <a class=\"reference internal\" href=\"io#io.BytesIO\" title=\"io.BytesIO\"><code>io.BytesIO</code></a>, or you can do in-place concatenation with a <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a> object. <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a> objects are mutable and have an efficient overallocation mechanism</li> <li>if concatenating <a class=\"reference internal\" href=\"#tuple\" title=\"tuple\"><code>tuple</code></a> objects, extend a <a class=\"reference internal\" href=\"#list\" title=\"list\"><code>list</code></a> instead</li> <li>for other types, investigate the relevant class documentation</li> </ul> </li> <li>Some sequence types (such as <a class=\"reference internal\" href=\"#range\" title=\"range\"><code>range</code></a>) only support item sequences that follow specific patterns, and hence don’t support sequence concatenation or repetition.</li> <li>\n<code>index</code> raises <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> when <em>x</em> is not found in <em>s</em>. Not all implementations support passing the additional arguments <em>i</em> and <em>j</em>. These arguments allow efficient searching of subsections of the sequence. Passing the extra arguments is roughly equivalent to using <code>s[i:j].index(x)</code>, only without copying any data and with the returned index being relative to the start of the sequence rather than the start of the slice.</li> </ol>   <h3 id=\"typesseq-immutable\">Immutable Sequence Types</h3> <p id=\"immutable-sequence-types\">The only operation that immutable sequence types generally implement that is not also implemented by mutable sequence types is support for the <a class=\"reference internal\" href=\"functions#hash\" title=\"hash\"><code>hash()</code></a> built-in.</p> <p>This support allows immutable sequences, such as <a class=\"reference internal\" href=\"#tuple\" title=\"tuple\"><code>tuple</code></a> instances, to be used as <a class=\"reference internal\" href=\"#dict\" title=\"dict\"><code>dict</code></a> keys and stored in <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a> and <a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a> instances.</p> <p>Attempting to hash an immutable sequence that contains unhashable values will result in <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a>.</p>   <h3 id=\"typesseq-mutable\">Mutable Sequence Types</h3> <p id=\"mutable-sequence-types\">The operations in the following table are defined on mutable sequence types. The <a class=\"reference internal\" href=\"collections.abc#collections.abc.MutableSequence\" title=\"collections.abc.MutableSequence\"><code>collections.abc.MutableSequence</code></a> ABC is provided to make it easier to correctly implement these operations on custom sequence types.</p> <p>In the table <em>s</em> is an instance of a mutable sequence type, <em>t</em> is any iterable object and <em>x</em> is an arbitrary object that meets any type and value restrictions imposed by <em>s</em> (for example, <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a> only accepts integers that meet the value restriction <code>0 &lt;= x &lt;= 255</code>).</p> <table class=\"docutils align-default\" id=\"index-22\">  <thead> <tr>\n<th class=\"head\"><p>Operation</p></th> <th class=\"head\"><p>Result</p></th> <th class=\"head\"><p>Notes</p></th> </tr> </thead>  <tr>\n<td><p><code>s[i] = x</code></p></td> <td><p>item <em>i</em> of <em>s</em> is replaced by <em>x</em></p></td> <td></td> </tr> <tr>\n<td><p><code>s[i:j] = t</code></p></td> <td><p>slice of <em>s</em> from <em>i</em> to <em>j</em> is replaced by the contents of the iterable <em>t</em></p></td> <td></td> </tr> <tr>\n<td><p><code>del s[i:j]</code></p></td> <td><p>same as <code>s[i:j] = []</code></p></td> <td></td> </tr> <tr>\n<td><p><code>s[i:j:k] = t</code></p></td> <td><p>the elements of <code>s[i:j:k]</code> are replaced by those of <em>t</em></p></td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>del s[i:j:k]</code></p></td> <td><p>removes the elements of <code>s[i:j:k]</code> from the list</p></td> <td></td> </tr> <tr>\n<td><p><code>s.append(x)</code></p></td> <td><p>appends <em>x</em> to the end of the sequence (same as <code>s[len(s):len(s)] = [x]</code>)</p></td> <td></td> </tr> <tr>\n<td><p><code>s.clear()</code></p></td> <td><p>removes all items from <em>s</em> (same as <code>del s[:]</code>)</p></td> <td><p>(5)</p></td> </tr> <tr>\n<td><p><code>s.copy()</code></p></td> <td><p>creates a shallow copy of <em>s</em> (same as <code>s[:]</code>)</p></td> <td><p>(5)</p></td> </tr> <tr>\n<td><p><code>s.extend(t)</code> or <code>s += t</code></p></td> <td><p>extends <em>s</em> with the contents of <em>t</em> (for the most part the same as <code>s[len(s):len(s)] = t</code>)</p></td> <td></td> </tr> <tr>\n<td><p><code>s *= n</code></p></td> <td><p>updates <em>s</em> with its contents repeated <em>n</em> times</p></td> <td><p>(6)</p></td> </tr> <tr>\n<td><p><code>s.insert(i, x)</code></p></td> <td><p>inserts <em>x</em> into <em>s</em> at the index given by <em>i</em> (same as <code>s[i:i] = [x]</code>)</p></td> <td></td> </tr> <tr>\n<td><p><code>s.pop([i])</code></p></td> <td><p>retrieves the item at <em>i</em> and also removes it from <em>s</em></p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>s.remove(x)</code></p></td> <td><p>remove the first item from <em>s</em> where <code>s[i]</code> is equal to <em>x</em></p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>s.reverse()</code></p></td> <td><p>reverses the items of <em>s</em> in place</p></td> <td><p>(4)</p></td> </tr>  </table> <p>Notes:</p> <ol class=\"arabic\"> <li>\n<em>t</em> must have the same length as the slice it is replacing.</li> <li>The optional argument <em>i</em> defaults to <code>-1</code>, so that by default the last item is removed and returned.</li> <li>\n<code>remove()</code> raises <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> when <em>x</em> is not found in <em>s</em>.</li> <li>The <code>reverse()</code> method modifies the sequence in place for economy of space when reversing a large sequence. To remind users that it operates by side effect, it does not return the reversed sequence.</li> <li>\n<p><code>clear()</code> and <code>copy()</code> are included for consistency with the interfaces of mutable containers that don’t support slicing operations (such as <a class=\"reference internal\" href=\"#dict\" title=\"dict\"><code>dict</code></a> and <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a>). <code>copy()</code> is not part of the <a class=\"reference internal\" href=\"collections.abc#collections.abc.MutableSequence\" title=\"collections.abc.MutableSequence\"><code>collections.abc.MutableSequence</code></a> ABC, but most concrete mutable sequence classes provide it.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3: </span><code>clear()</code> and <code>copy()</code> methods.</p> </div> </li> <li>The value <em>n</em> is an integer, or an object implementing <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a>. Zero and negative values of <em>n</em> clear the sequence. Items in the sequence are not copied; they are referenced multiple times, as explained for <code>s * n</code> under <a class=\"reference internal\" href=\"#typesseq-common\"><span class=\"std std-ref\">Common Sequence Operations</span></a>.</li> </ol>   <h3 id=\"typesseq-list\">Lists</h3> <p id=\"lists\">Lists are mutable sequences, typically used to store collections of homogeneous items (where the precise degree of similarity will vary by application).</p> <dl class=\"class\"> <dt id=\"list\">\n<code>class list([iterable])</code> </dt> <dd>\n<p>Lists may be constructed in several ways:</p> <ul class=\"simple\"> <li>Using a pair of square brackets to denote the empty list: <code>[]</code>\n</li> <li>Using square brackets, separating items with commas: <code>[a]</code>, <code>[a, b, c]</code>\n</li> <li>Using a list comprehension: <code>[x for x in iterable]</code>\n</li> <li>Using the type constructor: <code>list()</code> or <code>list(iterable)</code>\n</li> </ul> <p>The constructor builds a list whose items are the same and in the same order as <em>iterable</em>’s items. <em>iterable</em> may be either a sequence, a container that supports iteration, or an iterator object. If <em>iterable</em> is already a list, a copy is made and returned, similar to <code>iterable[:]</code>. For example, <code>list('abc')</code> returns <code>['a', 'b', 'c']</code> and <code>list( (1, 2, 3) )</code> returns <code>[1, 2, 3]</code>. If no argument is given, the constructor creates a new empty list, <code>[]</code>.</p> <p>Many other operations also produce lists, including the <a class=\"reference internal\" href=\"functions#sorted\" title=\"sorted\"><code>sorted()</code></a> built-in.</p> <p>Lists implement all of the <a class=\"reference internal\" href=\"#typesseq-common\"><span class=\"std std-ref\">common</span></a> and <a class=\"reference internal\" href=\"#typesseq-mutable\"><span class=\"std std-ref\">mutable</span></a> sequence operations. Lists also provide the following additional method:</p> <dl class=\"method\"> <dt id=\"list.sort\">\n<code>sort(*, key=None, reverse=False)</code> </dt> <dd>\n<p>This method sorts the list in place, using only <code>&lt;</code> comparisons between items. Exceptions are not suppressed - if any comparison operations fail, the entire sort operation will fail (and the list will likely be left in a partially modified state).</p> <p><a class=\"reference internal\" href=\"#list.sort\" title=\"list.sort\"><code>sort()</code></a> accepts two arguments that can only be passed by keyword (<a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#keyword-only-parameter\"><span class=\"std std-ref\">keyword-only arguments</span></a>):</p> <p><em>key</em> specifies a function of one argument that is used to extract a comparison key from each list element (for example, <code>key=str.lower</code>). The key corresponding to each item in the list is calculated once and then used for the entire sorting process. The default value of <code>None</code> means that list items are sorted directly without calculating a separate key value.</p> <p>The <a class=\"reference internal\" href=\"functools#functools.cmp_to_key\" title=\"functools.cmp_to_key\"><code>functools.cmp_to_key()</code></a> utility is available to convert a 2.x style <em>cmp</em> function to a <em>key</em> function.</p> <p><em>reverse</em> is a boolean value. If set to <code>True</code>, then the list elements are sorted as if each comparison were reversed.</p> <p>This method modifies the sequence in place for economy of space when sorting a large sequence. To remind users that it operates by side effect, it does not return the sorted sequence (use <a class=\"reference internal\" href=\"functions#sorted\" title=\"sorted\"><code>sorted()</code></a> to explicitly request a new sorted list instance).</p> <p>The <a class=\"reference internal\" href=\"#list.sort\" title=\"list.sort\"><code>sort()</code></a> method is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal — this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade).</p> <p>For sorting examples and a brief sorting tutorial, see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/howto/sorting.html#sortinghowto\"><span class=\"std std-ref\">Sorting HOW TO</span></a>.</p> <div class=\"impl-detail compound\"> <p><strong>CPython implementation detail:</strong> While a list is being sorted, the effect of attempting to mutate, or even inspect, the list is undefined. The C implementation of Python makes the list appear empty for the duration, and raises <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> if it can detect that the list has been mutated during a sort.</p> </div> </dd>\n</dl> </dd>\n</dl>   <h3 id=\"typesseq-tuple\">Tuples</h3> <p id=\"tuples\">Tuples are immutable sequences, typically used to store collections of heterogeneous data (such as the 2-tuples produced by the <a class=\"reference internal\" href=\"functions#enumerate\" title=\"enumerate\"><code>enumerate()</code></a> built-in). Tuples are also used for cases where an immutable sequence of homogeneous data is needed (such as allowing storage in a <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a> or <a class=\"reference internal\" href=\"#dict\" title=\"dict\"><code>dict</code></a> instance).</p> <dl class=\"class\"> <dt id=\"tuple\">\n<code>class tuple([iterable])</code> </dt> <dd>\n<p>Tuples may be constructed in a number of ways:</p> <ul class=\"simple\"> <li>Using a pair of parentheses to denote the empty tuple: <code>()</code>\n</li> <li>Using a trailing comma for a singleton tuple: <code>a,</code> or <code>(a,)</code>\n</li> <li>Separating items with commas: <code>a, b, c</code> or <code>(a, b, c)</code>\n</li> <li>Using the <a class=\"reference internal\" href=\"#tuple\" title=\"tuple\"><code>tuple()</code></a> built-in: <code>tuple()</code> or <code>tuple(iterable)</code>\n</li> </ul> <p>The constructor builds a tuple whose items are the same and in the same order as <em>iterable</em>’s items. <em>iterable</em> may be either a sequence, a container that supports iteration, or an iterator object. If <em>iterable</em> is already a tuple, it is returned unchanged. For example, <code>tuple('abc')</code> returns <code>('a', 'b', 'c')</code> and <code>tuple( [1, 2, 3] )</code> returns <code>(1, 2, 3)</code>. If no argument is given, the constructor creates a new empty tuple, <code>()</code>.</p> <p>Note that it is actually the comma which makes a tuple, not the parentheses. The parentheses are optional, except in the empty tuple case, or when they are needed to avoid syntactic ambiguity. For example, <code>f(a, b, c)</code> is a function call with three arguments, while <code>f((a, b, c))</code> is a function call with a 3-tuple as the sole argument.</p> <p>Tuples implement all of the <a class=\"reference internal\" href=\"#typesseq-common\"><span class=\"std std-ref\">common</span></a> sequence operations.</p> </dd>\n</dl> <p>For heterogeneous collections of data where access by name is clearer than access by index, <a class=\"reference internal\" href=\"collections#collections.namedtuple\" title=\"collections.namedtuple\"><code>collections.namedtuple()</code></a> may be a more appropriate choice than a simple tuple object.</p>   <h3 id=\"typesseq-range\">Ranges</h3> <p id=\"ranges\">The <a class=\"reference internal\" href=\"#range\" title=\"range\"><code>range</code></a> type represents an immutable sequence of numbers and is commonly used for looping a specific number of times in <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#for\"><code>for</code></a> loops.</p> <dl class=\"class\"> <dt id=\"range\">\n<code>class range(stop)</code> </dt> <dt>\n<code>class range(start, stop[, step])</code> </dt> <dd>\n<p>The arguments to the range constructor must be integers (either built-in <a class=\"reference internal\" href=\"functions#int\" title=\"int\"><code>int</code></a> or any object that implements the <code>__index__</code> special method). If the <em>step</em> argument is omitted, it defaults to <code>1</code>. If the <em>start</em> argument is omitted, it defaults to <code>0</code>. If <em>step</em> is zero, <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised.</p> <p>For a positive <em>step</em>, the contents of a range <code>r</code> are determined by the formula <code>r[i] = start + step*i</code> where <code>i &gt;= 0</code> and <code>r[i] &lt; stop</code>.</p> <p>For a negative <em>step</em>, the contents of the range are still determined by the formula <code>r[i] = start + step*i</code>, but the constraints are <code>i &gt;= 0</code> and <code>r[i] &gt; stop</code>.</p> <p>A range object will be empty if <code>r[0]</code> does not meet the value constraint. Ranges do support negative indices, but these are interpreted as indexing from the end of the sequence determined by the positive indices.</p> <p>Ranges containing absolute values larger than <a class=\"reference internal\" href=\"sys#sys.maxsize\" title=\"sys.maxsize\"><code>sys.maxsize</code></a> are permitted but some features (such as <a class=\"reference internal\" href=\"functions#len\" title=\"len\"><code>len()</code></a>) may raise <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a>.</p> <p>Range examples:</p> <pre data-language=\"python\">&gt;&gt;&gt; list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; list(range(1, 11))\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n&gt;&gt;&gt; list(range(0, 30, 5))\n[0, 5, 10, 15, 20, 25]\n&gt;&gt;&gt; list(range(0, 10, 3))\n[0, 3, 6, 9]\n&gt;&gt;&gt; list(range(0, -10, -1))\n[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n&gt;&gt;&gt; list(range(0))\n[]\n&gt;&gt;&gt; list(range(1, 0))\n[]\n</pre> <p>Ranges implement all of the <a class=\"reference internal\" href=\"#typesseq-common\"><span class=\"std std-ref\">common</span></a> sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition and concatenation will usually violate that pattern).</p> <dl class=\"attribute\"> <dt id=\"range.start\">\n<code>start</code> </dt> <dd>\n<p>The value of the <em>start</em> parameter (or <code>0</code> if the parameter was not supplied)</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"range.stop\">\n<code>stop</code> </dt> <dd>\n<p>The value of the <em>stop</em> parameter</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"range.step\">\n<code>step</code> </dt> <dd>\n<p>The value of the <em>step</em> parameter (or <code>1</code> if the parameter was not supplied)</p> </dd>\n</dl> </dd>\n</dl> <p>The advantage of the <a class=\"reference internal\" href=\"#range\" title=\"range\"><code>range</code></a> type over a regular <a class=\"reference internal\" href=\"#list\" title=\"list\"><code>list</code></a> or <a class=\"reference internal\" href=\"#tuple\" title=\"tuple\"><code>tuple</code></a> is that a <a class=\"reference internal\" href=\"#range\" title=\"range\"><code>range</code></a> object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the <code>start</code>, <code>stop</code> and <code>step</code> values, calculating individual items and subranges as needed).</p> <p>Range objects implement the <a class=\"reference internal\" href=\"collections.abc#collections.abc.Sequence\" title=\"collections.abc.Sequence\"><code>collections.abc.Sequence</code></a> ABC, and provide features such as containment tests, element index lookup, slicing and support for negative indices (see <a class=\"reference internal\" href=\"#typesseq\"><span class=\"std std-ref\">Sequence Types — list, tuple, range</span></a>):</p> <pre data-language=\"python\">&gt;&gt;&gt; r = range(0, 20, 2)\n&gt;&gt;&gt; r\nrange(0, 20, 2)\n&gt;&gt;&gt; 11 in r\nFalse\n&gt;&gt;&gt; 10 in r\nTrue\n&gt;&gt;&gt; r.index(10)\n5\n&gt;&gt;&gt; r[5]\n10\n&gt;&gt;&gt; r[:5]\nrange(0, 10, 2)\n&gt;&gt;&gt; r[-1]\n18\n</pre> <p>Testing range objects for equality with <code>==</code> and <code>!=</code> compares them as sequences. That is, two range objects are considered equal if they represent the same sequence of values. (Note that two range objects that compare equal might have different <a class=\"reference internal\" href=\"#range.start\" title=\"range.start\"><code>start</code></a>, <a class=\"reference internal\" href=\"#range.stop\" title=\"range.stop\"><code>stop</code></a> and <a class=\"reference internal\" href=\"#range.step\" title=\"range.step\"><code>step</code></a> attributes, for example <code>range(0) == range(2, 1, 3)</code> or <code>range(0, 3, 2) == range(0, 4, 2)</code>.)</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.2: </span>Implement the Sequence ABC. Support slicing and negative indices. Test <a class=\"reference internal\" href=\"functions#int\" title=\"int\"><code>int</code></a> objects for membership in constant time instead of iterating through all items.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Define ‘==’ and ‘!=’ to compare range objects based on the sequence of values they define (instead of comparing based on object identity).</p> </div> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3: </span>The <a class=\"reference internal\" href=\"#range.start\" title=\"range.start\"><code>start</code></a>, <a class=\"reference internal\" href=\"#range.stop\" title=\"range.stop\"><code>stop</code></a> and <a class=\"reference internal\" href=\"#range.step\" title=\"range.step\"><code>step</code></a> attributes.</p> </div> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <ul class=\"simple\"> <li>The <a class=\"reference external\" href=\"http://code.activestate.com/recipes/579000/\">linspace recipe</a> shows how to implement a lazy version of range suitable for floating point applications.</li> </ul> </div>    <h2 id=\"index-26\">Text Sequence Type — str</h2> <p id=\"text-sequence-type-str\">Textual data in Python is handled with <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str</code></a> objects, or <em class=\"dfn\">strings</em>. Strings are immutable <a class=\"reference internal\" href=\"#typesseq\"><span class=\"std std-ref\">sequences</span></a> of Unicode code points. String literals are written in a variety of ways:</p> <ul class=\"simple\"> <li>Single quotes: <code>'allows embedded \"double\" quotes'</code>\n</li> <li>Double quotes: <code>\"allows embedded 'single' quotes\"</code>.</li> <li>Triple quoted: <code>'''Three single quotes'''</code>, <code>\"\"\"Three double quotes\"\"\"</code>\n</li> </ul> <p>Triple quoted strings may span multiple lines - all associated whitespace will be included in the string literal.</p> <p>String literals that are part of a single expression and have only whitespace between them will be implicitly converted to a single string literal. That is, <code>(\"spam \" \"eggs\") == \"spam eggs\"</code>.</p> <p>See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#strings\"><span class=\"std std-ref\">String and Bytes literals</span></a> for more about the various forms of string literal, including supported escape sequences, and the <code>r</code> (“raw”) prefix that disables most escape sequence processing.</p> <p>Strings may also be created from other objects using the <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str</code></a> constructor.</p> <p>Since there is no separate “character” type, indexing a string produces strings of length 1. That is, for a non-empty string <em>s</em>, <code>s[0] == s[0:1]</code>.</p> <p id=\"index-27\">There is also no mutable string type, but <a class=\"reference internal\" href=\"#str.join\" title=\"str.join\"><code>str.join()</code></a> or <a class=\"reference internal\" href=\"io#io.StringIO\" title=\"io.StringIO\"><code>io.StringIO</code></a> can be used to efficiently construct strings from multiple fragments.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>For backwards compatibility with the Python 2 series, the <code>u</code> prefix is once again permitted on string literals. It has no effect on the meaning of string literals and cannot be combined with the <code>r</code> prefix.</p> </div> <dl class=\"class\"> <dt id=\"str\">\n<code>class str(object='')</code> </dt> <dt>\n<code>class str(object=b'', encoding='utf-8', errors='strict')</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#textseq\"><span class=\"std std-ref\">string</span></a> version of <em>object</em>. If <em>object</em> is not provided, returns the empty string. Otherwise, the behavior of <code>str()</code> depends on whether <em>encoding</em> or <em>errors</em> is given, as follows.</p> <p>If neither <em>encoding</em> nor <em>errors</em> is given, <code>str(object)</code> returns <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__str__\" title=\"object.__str__\"><code>object.__str__()</code></a>, which is the “informal” or nicely printable string representation of <em>object</em>. For string objects, this is the string itself. If <em>object</em> does not have a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__str__\" title=\"object.__str__\"><code>__str__()</code></a> method, then <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str()</code></a> falls back to returning <a class=\"reference internal\" href=\"functions#repr\" title=\"repr\"><code>repr(object)</code></a>.</p> <p id=\"index-29\">If at least one of <em>encoding</em> or <em>errors</em> is given, <em>object</em> should be a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> (e.g. <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> or <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a>). In this case, if <em>object</em> is a <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> (or <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a>) object, then <code>str(bytes, encoding, errors)</code> is equivalent to <a class=\"reference internal\" href=\"#bytes.decode\" title=\"bytes.decode\"><code>bytes.decode(encoding, errors)</code></a>. Otherwise, the bytes object underlying the buffer object is obtained before calling <a class=\"reference internal\" href=\"#bytes.decode\" title=\"bytes.decode\"><code>bytes.decode()</code></a>. See <a class=\"reference internal\" href=\"#binaryseq\"><span class=\"std std-ref\">Binary Sequence Types — bytes, bytearray, memoryview</span></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/c-api/buffer.html#bufferobjects\"><span class=\"std std-ref\">Buffer Protocol</span></a> for information on buffer objects.</p> <p>Passing a <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> object to <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str()</code></a> without the <em>encoding</em> or <em>errors</em> arguments falls under the first case of returning the informal string representation (see also the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/using/cmdline.html#cmdoption-b\"><code>-b</code></a> command-line option to Python). For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; str(b'Zoot!')\n\"b'Zoot!'\"\n</pre> <p>For more information on the <code>str</code> class and its methods, see <a class=\"reference internal\" href=\"#textseq\"><span class=\"std std-ref\">Text Sequence Type — str</span></a> and the <a class=\"reference internal\" href=\"#string-methods\"><span class=\"std std-ref\">String Methods</span></a> section below. To output formatted strings, see the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings\"><span class=\"std std-ref\">Formatted string literals</span></a> and <a class=\"reference internal\" href=\"string#formatstrings\"><span class=\"std std-ref\">Format String Syntax</span></a> sections. In addition, see the <a class=\"reference internal\" href=\"text#stringservices\"><span class=\"std std-ref\">Text Processing Services</span></a> section.</p> </dd>\n</dl>  <h3 id=\"id5\">String Methods</h3> <p id=\"string-methods\">Strings implement all of the <a class=\"reference internal\" href=\"#typesseq-common\"><span class=\"std std-ref\">common</span></a> sequence operations, along with the additional methods described below.</p> <p>Strings also support two styles of string formatting, one providing a large degree of flexibility and customization (see <a class=\"reference internal\" href=\"#str.format\" title=\"str.format\"><code>str.format()</code></a>, <a class=\"reference internal\" href=\"string#formatstrings\"><span class=\"std std-ref\">Format String Syntax</span></a> and <a class=\"reference internal\" href=\"string#string-formatting\"><span class=\"std std-ref\">Custom String Formatting</span></a>) and the other based on C <code>printf</code> style formatting that handles a narrower range of types and is slightly harder to use correctly, but is often faster for the cases it can handle (<a class=\"reference internal\" href=\"#old-string-formatting\"><span class=\"std std-ref\">printf-style String Formatting</span></a>).</p> <p>The <a class=\"reference internal\" href=\"text#textservices\"><span class=\"std std-ref\">Text Processing Services</span></a> section of the standard library covers a number of other modules that provide various text related utilities (including regular expression support in the <a class=\"reference internal\" href=\"re#module-re\" title=\"re: Regular expression operations.\"><code>re</code></a> module).</p> <dl class=\"method\"> <dt id=\"str.capitalize\">\n<code>str.capitalize()</code> </dt> <dd>\n<p>Return a copy of the string with its first character capitalized and the rest lowercased.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>The first character is now put into titlecase rather than uppercase. This means that characters like digraphs will only have their first letter capitalized, instead of the full character.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.casefold\">\n<code>str.casefold()</code> </dt> <dd>\n<p>Return a casefolded copy of the string. Casefolded strings may be used for caseless matching.</p> <p>Casefolding is similar to lowercasing but more aggressive because it is intended to remove all case distinctions in a string. For example, the German lowercase letter <code>'ß'</code> is equivalent to <code>\"ss\"</code>. Since it is already lowercase, <a class=\"reference internal\" href=\"#str.lower\" title=\"str.lower\"><code>lower()</code></a> would do nothing to <code>'ß'</code>; <a class=\"reference internal\" href=\"#str.casefold\" title=\"str.casefold\"><code>casefold()</code></a> converts it to <code>\"ss\"</code>.</p> <p>The casefolding algorithm is described in section 3.13 of the Unicode Standard.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.center\">\n<code>str.center(width[, fillchar])</code> </dt> <dd>\n<p>Return centered in a string of length <em>width</em>. Padding is done using the specified <em>fillchar</em> (default is an ASCII space). The original string is returned if <em>width</em> is less than or equal to <code>len(s)</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.count\">\n<code>str.count(sub[, start[, end]])</code> </dt> <dd>\n<p>Return the number of non-overlapping occurrences of substring <em>sub</em> in the range [<em>start</em>, <em>end</em>]. Optional arguments <em>start</em> and <em>end</em> are interpreted as in slice notation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.encode\">\n<code>str.encode(encoding=\"utf-8\", errors=\"strict\")</code> </dt> <dd>\n<p>Return an encoded version of the string as a bytes object. Default encoding is <code>'utf-8'</code>. <em>errors</em> may be given to set a different error handling scheme. The default for <em>errors</em> is <code>'strict'</code>, meaning that encoding errors raise a <a class=\"reference internal\" href=\"exceptions#UnicodeError\" title=\"UnicodeError\"><code>UnicodeError</code></a>. Other possible values are <code>'ignore'</code>, <code>'replace'</code>, <code>'xmlcharrefreplace'</code>, <code>'backslashreplace'</code> and any other name registered via <a class=\"reference internal\" href=\"codecs#codecs.register_error\" title=\"codecs.register_error\"><code>codecs.register_error()</code></a>, see section <a class=\"reference internal\" href=\"codecs#error-handlers\"><span class=\"std std-ref\">Error Handlers</span></a>. For a list of possible encodings, see section <a class=\"reference internal\" href=\"codecs#standard-encodings\"><span class=\"std std-ref\">Standard Encodings</span></a>.</p> <p>By default, the <em>errors</em> argument is not checked for best performances, but only used at the first encoding error. Enable the <a class=\"reference internal\" href=\"devmode#devmode\"><span class=\"std std-ref\">Python Development Mode</span></a>, or use a debug build to check <em>errors</em>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.1: </span>Support for keyword arguments added.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.9: </span>The <em>errors</em> is now checked in development mode and in debug mode.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.endswith\">\n<code>str.endswith(suffix[, start[, end]])</code> </dt> <dd>\n<p>Return <code>True</code> if the string ends with the specified <em>suffix</em>, otherwise return <code>False</code>. <em>suffix</em> can also be a tuple of suffixes to look for. With optional <em>start</em>, test beginning at that position. With optional <em>end</em>, stop comparing at that position.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.expandtabs\">\n<code>str.expandtabs(tabsize=8)</code> </dt> <dd>\n<p>Return a copy of the string where all tab characters are replaced by one or more spaces, depending on the current column and the given tab size. Tab positions occur every <em>tabsize</em> characters (default is 8, giving tab positions at columns 0, 8, 16 and so on). To expand the string, the current column is set to zero and the string is examined character by character. If the character is a tab (<code>\\t</code>), one or more space characters are inserted in the result until the current column is equal to the next tab position. (The tab character itself is not copied.) If the character is a newline (<code>\\n</code>) or return (<code>\\r</code>), it is copied and the current column is reset to zero. Any other character is copied unchanged and the current column is incremented by one regardless of how the character is represented when printed.</p> <pre data-language=\"python\">&gt;&gt;&gt; '01\\t012\\t0123\\t01234'.expandtabs()\n'01      012     0123    01234'\n&gt;&gt;&gt; '01\\t012\\t0123\\t01234'.expandtabs(4)\n'01  012 0123    01234'\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.find\">\n<code>str.find(sub[, start[, end]])</code> </dt> <dd>\n<p>Return the lowest index in the string where substring <em>sub</em> is found within the slice <code>s[start:end]</code>. Optional arguments <em>start</em> and <em>end</em> are interpreted as in slice notation. Return <code>-1</code> if <em>sub</em> is not found.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The <a class=\"reference internal\" href=\"#str.find\" title=\"str.find\"><code>find()</code></a> method should be used only if you need to know the position of <em>sub</em>. To check if <em>sub</em> is a substring or not, use the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#in\"><code>in</code></a> operator:</p> <pre data-language=\"python\">&gt;&gt;&gt; 'Py' in 'Python'\nTrue\n</pre> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.format\">\n<code>str.format(*args, **kwargs)</code> </dt> <dd>\n<p>Perform a string formatting operation. The string on which this method is called can contain literal text or replacement fields delimited by braces <code>{}</code>. Each replacement field contains either the numeric index of a positional argument, or the name of a keyword argument. Returns a copy of the string where each replacement field is replaced with the string value of the corresponding argument.</p> <pre data-language=\"python\">&gt;&gt;&gt; \"The sum of 1 + 2 is {0}\".format(1+2)\n'The sum of 1 + 2 is 3'\n</pre> <p>See <a class=\"reference internal\" href=\"string#formatstrings\"><span class=\"std std-ref\">Format String Syntax</span></a> for a description of the various formatting options that can be specified in format strings.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>When formatting a number (<a class=\"reference internal\" href=\"functions#int\" title=\"int\"><code>int</code></a>, <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a>, <a class=\"reference internal\" href=\"functions#complex\" title=\"complex\"><code>complex</code></a>, <a class=\"reference internal\" href=\"decimal#decimal.Decimal\" title=\"decimal.Decimal\"><code>decimal.Decimal</code></a> and subclasses) with the <code>n</code> type (ex: <code>'{:n}'.format(1234)</code>), the function temporarily sets the <code>LC_CTYPE</code> locale to the <code>LC_NUMERIC</code> locale to decode <code>decimal_point</code> and <code>thousands_sep</code> fields of <code>localeconv()</code> if they are non-ASCII or longer than 1 byte, and the <code>LC_NUMERIC</code> locale is different than the <code>LC_CTYPE</code> locale. This temporary change affects other threads.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>When formatting a number with the <code>n</code> type, the function sets temporarily the <code>LC_CTYPE</code> locale to the <code>LC_NUMERIC</code> locale in some cases.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.format_map\">\n<code>str.format_map(mapping)</code> </dt> <dd>\n<p>Similar to <code>str.format(**mapping)</code>, except that <code>mapping</code> is used directly and not copied to a <a class=\"reference internal\" href=\"#dict\" title=\"dict\"><code>dict</code></a>. This is useful if for example <code>mapping</code> is a dict subclass:</p> <pre data-language=\"python\">&gt;&gt;&gt; class Default(dict):\n...     def __missing__(self, key):\n...         return key\n...\n&gt;&gt;&gt; '{name} was born in {country}'.format_map(Default(name='Guido'))\n'Guido was born in country'\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.index\">\n<code>str.index(sub[, start[, end]])</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#str.find\" title=\"str.find\"><code>find()</code></a>, but raise <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> when the substring is not found.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.isalnum\">\n<code>str.isalnum()</code> </dt> <dd>\n<p>Return <code>True</code> if all characters in the string are alphanumeric and there is at least one character, <code>False</code> otherwise. A character <code>c</code> is alphanumeric if one of the following returns <code>True</code>: <code>c.isalpha()</code>, <code>c.isdecimal()</code>, <code>c.isdigit()</code>, or <code>c.isnumeric()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.isalpha\">\n<code>str.isalpha()</code> </dt> <dd>\n<p>Return <code>True</code> if all characters in the string are alphabetic and there is at least one character, <code>False</code> otherwise. Alphabetic characters are those characters defined in the Unicode character database as “Letter”, i.e., those with general category property being one of “Lm”, “Lt”, “Lu”, “Ll”, or “Lo”. Note that this is different from the “Alphabetic” property defined in the Unicode Standard.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.isascii\">\n<code>str.isascii()</code> </dt> <dd>\n<p>Return <code>True</code> if the string is empty or all characters in the string are ASCII, <code>False</code> otherwise. ASCII characters have code points in the range U+0000-U+007F.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.7.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.isdecimal\">\n<code>str.isdecimal()</code> </dt> <dd>\n<p>Return <code>True</code> if all characters in the string are decimal characters and there is at least one character, <code>False</code> otherwise. Decimal characters are those that can be used to form numbers in base 10, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Formally a decimal character is a character in the Unicode General Category “Nd”.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.isdigit\">\n<code>str.isdigit()</code> </dt> <dd>\n<p>Return <code>True</code> if all characters in the string are digits and there is at least one character, <code>False</code> otherwise. Digits include decimal characters and digits that need special handling, such as the compatibility superscript digits. This covers digits which cannot be used to form numbers in base 10, like the Kharosthi numbers. Formally, a digit is a character that has the property value Numeric_Type=Digit or Numeric_Type=Decimal.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.isidentifier\">\n<code>str.isidentifier()</code> </dt> <dd>\n<p>Return <code>True</code> if the string is a valid identifier according to the language definition, section <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#identifiers\"><span class=\"std std-ref\">Identifiers and keywords</span></a>.</p> <p>Call <a class=\"reference internal\" href=\"keyword#keyword.iskeyword\" title=\"keyword.iskeyword\"><code>keyword.iskeyword()</code></a> to test whether string <code>s</code> is a reserved identifier, such as <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#def\"><code>def</code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#class\"><code>class</code></a>.</p> <p>Example:</p> <pre data-language=\"python\">&gt;&gt;&gt; from keyword import iskeyword\n\n&gt;&gt;&gt; 'hello'.isidentifier(), iskeyword('hello')\nTrue, False\n&gt;&gt;&gt; 'def'.isidentifier(), iskeyword('def')\nTrue, True\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.islower\">\n<code>str.islower()</code> </dt> <dd>\n<p>Return <code>True</code> if all cased characters <a class=\"footnote-reference brackets\" href=\"#id15\" id=\"id6\">4</a> in the string are lowercase and there is at least one cased character, <code>False</code> otherwise.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.isnumeric\">\n<code>str.isnumeric()</code> </dt> <dd>\n<p>Return <code>True</code> if all characters in the string are numeric characters, and there is at least one character, <code>False</code> otherwise. Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH. Formally, numeric characters are those with the property value Numeric_Type=Digit, Numeric_Type=Decimal or Numeric_Type=Numeric.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.isprintable\">\n<code>str.isprintable()</code> </dt> <dd>\n<p>Return <code>True</code> if all characters in the string are printable or the string is empty, <code>False</code> otherwise. Nonprintable characters are those characters defined in the Unicode character database as “Other” or “Separator”, excepting the ASCII space (0x20) which is considered printable. (Note that printable characters in this context are those which should not be escaped when <a class=\"reference internal\" href=\"functions#repr\" title=\"repr\"><code>repr()</code></a> is invoked on a string. It has no bearing on the handling of strings written to <a class=\"reference internal\" href=\"sys#sys.stdout\" title=\"sys.stdout\"><code>sys.stdout</code></a> or <a class=\"reference internal\" href=\"sys#sys.stderr\" title=\"sys.stderr\"><code>sys.stderr</code></a>.)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.isspace\">\n<code>str.isspace()</code> </dt> <dd>\n<p>Return <code>True</code> if there are only whitespace characters in the string and there is at least one character, <code>False</code> otherwise.</p> <p>A character is <em>whitespace</em> if in the Unicode character database (see <a class=\"reference internal\" href=\"unicodedata#module-unicodedata\" title=\"unicodedata: Access the Unicode Database.\"><code>unicodedata</code></a>), either its general category is <code>Zs</code> (“Separator, space”), or its bidirectional class is one of <code>WS</code>, <code>B</code>, or <code>S</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.istitle\">\n<code>str.istitle()</code> </dt> <dd>\n<p>Return <code>True</code> if the string is a titlecased string and there is at least one character, for example uppercase characters may only follow uncased characters and lowercase characters only cased ones. Return <code>False</code> otherwise.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.isupper\">\n<code>str.isupper()</code> </dt> <dd>\n<p>Return <code>True</code> if all cased characters <a class=\"footnote-reference brackets\" href=\"#id15\" id=\"id7\">4</a> in the string are uppercase and there is at least one cased character, <code>False</code> otherwise.</p> <pre data-language=\"python\">&gt;&gt;&gt; 'BANANA'.isupper()\nTrue\n&gt;&gt;&gt; 'banana'.isupper()\nFalse\n&gt;&gt;&gt; 'baNana'.isupper()\nFalse\n&gt;&gt;&gt; ' '.isupper()\nFalse\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.join\">\n<code>str.join(iterable)</code> </dt> <dd>\n<p>Return a string which is the concatenation of the strings in <em>iterable</em>. A <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> will be raised if there are any non-string values in <em>iterable</em>, including <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> objects. The separator between elements is the string providing this method.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.ljust\">\n<code>str.ljust(width[, fillchar])</code> </dt> <dd>\n<p>Return the string left justified in a string of length <em>width</em>. Padding is done using the specified <em>fillchar</em> (default is an ASCII space). The original string is returned if <em>width</em> is less than or equal to <code>len(s)</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.lower\">\n<code>str.lower()</code> </dt> <dd>\n<p>Return a copy of the string with all the cased characters <a class=\"footnote-reference brackets\" href=\"#id15\" id=\"id8\">4</a> converted to lowercase.</p> <p>The lowercasing algorithm used is described in section 3.13 of the Unicode Standard.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.lstrip\">\n<code>str.lstrip([chars])</code> </dt> <dd>\n<p>Return a copy of the string with leading characters removed. The <em>chars</em> argument is a string specifying the set of characters to be removed. If omitted or <code>None</code>, the <em>chars</em> argument defaults to removing whitespace. The <em>chars</em> argument is not a prefix; rather, all combinations of its values are stripped:</p> <pre data-language=\"python\">&gt;&gt;&gt; '   spacious   '.lstrip()\n'spacious   '\n&gt;&gt;&gt; 'www.example.com'.lstrip('cmowz.')\n'example.com'\n</pre> <p>See <a class=\"reference internal\" href=\"#str.removeprefix\" title=\"str.removeprefix\"><code>str.removeprefix()</code></a> for a method that will remove a single prefix string rather than all of a set of characters. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; 'Arthur: three!'.lstrip('Arthur: ')\n'ee!'\n&gt;&gt;&gt; 'Arthur: three!'.removeprefix('Arthur: ')\n'three!'\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.maketrans\">\n<code>static str.maketrans(x[, y[, z]])</code> </dt> <dd>\n<p>This static method returns a translation table usable for <a class=\"reference internal\" href=\"#str.translate\" title=\"str.translate\"><code>str.translate()</code></a>.</p> <p>If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or <code>None</code>. Character keys will then be converted to ordinals.</p> <p>If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to <code>None</code> in the result.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.partition\">\n<code>str.partition(sep)</code> </dt> <dd>\n<p>Split the string at the first occurrence of <em>sep</em>, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return a 3-tuple containing the string itself, followed by two empty strings.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.removeprefix\">\n<code>str.removeprefix(prefix, /)</code> </dt> <dd>\n<p>If the string starts with the <em>prefix</em> string, return <code>string[len(prefix):]</code>. Otherwise, return a copy of the original string:</p> <pre data-language=\"python\">&gt;&gt;&gt; 'TestHook'.removeprefix('Test')\n'Hook'\n&gt;&gt;&gt; 'BaseTestCase'.removeprefix('Test')\n'BaseTestCase'\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.9.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.removesuffix\">\n<code>str.removesuffix(suffix, /)</code> </dt> <dd>\n<p>If the string ends with the <em>suffix</em> string and that <em>suffix</em> is not empty, return <code>string[:-len(suffix)]</code>. Otherwise, return a copy of the original string:</p> <pre data-language=\"python\">&gt;&gt;&gt; 'MiscTests'.removesuffix('Tests')\n'Misc'\n&gt;&gt;&gt; 'TmpDirMixin'.removesuffix('Tests')\n'TmpDirMixin'\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.9.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.replace\">\n<code>str.replace(old, new[, count])</code> </dt> <dd>\n<p>Return a copy of the string with all occurrences of substring <em>old</em> replaced by <em>new</em>. If the optional argument <em>count</em> is given, only the first <em>count</em> occurrences are replaced.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.rfind\">\n<code>str.rfind(sub[, start[, end]])</code> </dt> <dd>\n<p>Return the highest index in the string where substring <em>sub</em> is found, such that <em>sub</em> is contained within <code>s[start:end]</code>. Optional arguments <em>start</em> and <em>end</em> are interpreted as in slice notation. Return <code>-1</code> on failure.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.rindex\">\n<code>str.rindex(sub[, start[, end]])</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#str.rfind\" title=\"str.rfind\"><code>rfind()</code></a> but raises <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> when the substring <em>sub</em> is not found.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.rjust\">\n<code>str.rjust(width[, fillchar])</code> </dt> <dd>\n<p>Return the string right justified in a string of length <em>width</em>. Padding is done using the specified <em>fillchar</em> (default is an ASCII space). The original string is returned if <em>width</em> is less than or equal to <code>len(s)</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.rpartition\">\n<code>str.rpartition(sep)</code> </dt> <dd>\n<p>Split the string at the last occurrence of <em>sep</em>, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return a 3-tuple containing two empty strings, followed by the string itself.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.rsplit\">\n<code>str.rsplit(sep=None, maxsplit=-1)</code> </dt> <dd>\n<p>Return a list of the words in the string, using <em>sep</em> as the delimiter string. If <em>maxsplit</em> is given, at most <em>maxsplit</em> splits are done, the <em>rightmost</em> ones. If <em>sep</em> is not specified or <code>None</code>, any whitespace string is a separator. Except for splitting from the right, <a class=\"reference internal\" href=\"#str.rsplit\" title=\"str.rsplit\"><code>rsplit()</code></a> behaves like <a class=\"reference internal\" href=\"#str.split\" title=\"str.split\"><code>split()</code></a> which is described in detail below.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.rstrip\">\n<code>str.rstrip([chars])</code> </dt> <dd>\n<p>Return a copy of the string with trailing characters removed. The <em>chars</em> argument is a string specifying the set of characters to be removed. If omitted or <code>None</code>, the <em>chars</em> argument defaults to removing whitespace. The <em>chars</em> argument is not a suffix; rather, all combinations of its values are stripped:</p> <pre data-language=\"python\">&gt;&gt;&gt; '   spacious   '.rstrip()\n'   spacious'\n&gt;&gt;&gt; 'mississippi'.rstrip('ipz')\n'mississ'\n</pre> <p>See <a class=\"reference internal\" href=\"#str.removesuffix\" title=\"str.removesuffix\"><code>str.removesuffix()</code></a> for a method that will remove a single suffix string rather than all of a set of characters. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; 'Monty Python'.rstrip(' Python')\n'M'\n&gt;&gt;&gt; 'Monty Python'.removesuffix(' Python')\n'Monty'\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.split\">\n<code>str.split(sep=None, maxsplit=-1)</code> </dt> <dd>\n<p>Return a list of the words in the string, using <em>sep</em> as the delimiter string. If <em>maxsplit</em> is given, at most <em>maxsplit</em> splits are done (thus, the list will have at most <code>maxsplit+1</code> elements). If <em>maxsplit</em> is not specified or <code>-1</code>, then there is no limit on the number of splits (all possible splits are made).</p> <p>If <em>sep</em> is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, <code>'1,,2'.split(',')</code> returns <code>['1', '', '2']</code>). The <em>sep</em> argument may consist of multiple characters (for example, <code>'1&lt;&gt;2&lt;&gt;3'.split('&lt;&gt;')</code> returns <code>['1', '2', '3']</code>). Splitting an empty string with a specified separator returns <code>['']</code>.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; '1,2,3'.split(',')\n['1', '2', '3']\n&gt;&gt;&gt; '1,2,3'.split(',', maxsplit=1)\n['1', '2,3']\n&gt;&gt;&gt; '1,2,,3,'.split(',')\n['1', '2', '', '3', '']\n</pre> <p>If <em>sep</em> is not specified or is <code>None</code>, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a <code>None</code> separator returns <code>[]</code>.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; '1 2 3'.split()\n['1', '2', '3']\n&gt;&gt;&gt; '1 2 3'.split(maxsplit=1)\n['1', '2 3']\n&gt;&gt;&gt; '   1   2   3   '.split()\n['1', '2', '3']\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.splitlines\">\n<code>str.splitlines([keepends])</code> </dt> <dd>\n<p>Return a list of the lines in the string, breaking at line boundaries. Line breaks are not included in the resulting list unless <em>keepends</em> is given and true.</p> <p>This method splits on the following line boundaries. In particular, the boundaries are a superset of <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-universal-newlines\"><span class=\"xref std std-term\">universal newlines</span></a>.</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Representation</p></th> <th class=\"head\"><p>Description</p></th> </tr> </thead>  <tr>\n<td><p><code>\\n</code></p></td> <td><p>Line Feed</p></td> </tr> <tr>\n<td><p><code>\\r</code></p></td> <td><p>Carriage Return</p></td> </tr> <tr>\n<td><p><code>\\r\\n</code></p></td> <td><p>Carriage Return + Line Feed</p></td> </tr> <tr>\n<td><p><code>\\v</code> or <code>\\x0b</code></p></td> <td><p>Line Tabulation</p></td> </tr> <tr>\n<td><p><code>\\f</code> or <code>\\x0c</code></p></td> <td><p>Form Feed</p></td> </tr> <tr>\n<td><p><code>\\x1c</code></p></td> <td><p>File Separator</p></td> </tr> <tr>\n<td><p><code>\\x1d</code></p></td> <td><p>Group Separator</p></td> </tr> <tr>\n<td><p><code>\\x1e</code></p></td> <td><p>Record Separator</p></td> </tr> <tr>\n<td><p><code>\\x85</code></p></td> <td><p>Next Line (C1 Control Code)</p></td> </tr> <tr>\n<td><p><code>\\u2028</code></p></td> <td><p>Line Separator</p></td> </tr> <tr>\n<td><p><code>\\u2029</code></p></td> <td><p>Paragraph Separator</p></td> </tr>  </table> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.2: </span><code>\\v</code> and <code>\\f</code> added to list of line boundaries.</p> </div> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n['ab c', '', 'de fg', 'kl']\n&gt;&gt;&gt; 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']\n</pre> <p>Unlike <a class=\"reference internal\" href=\"#str.split\" title=\"str.split\"><code>split()</code></a> when a delimiter string <em>sep</em> is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:</p> <pre data-language=\"python\">&gt;&gt;&gt; \"\".splitlines()\n[]\n&gt;&gt;&gt; \"One line\\n\".splitlines()\n['One line']\n</pre> <p>For comparison, <code>split('\\n')</code> gives:</p> <pre data-language=\"python\">&gt;&gt;&gt; ''.split('\\n')\n['']\n&gt;&gt;&gt; 'Two lines\\n'.split('\\n')\n['Two lines', '']\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.startswith\">\n<code>str.startswith(prefix[, start[, end]])</code> </dt> <dd>\n<p>Return <code>True</code> if string starts with the <em>prefix</em>, otherwise return <code>False</code>. <em>prefix</em> can also be a tuple of prefixes to look for. With optional <em>start</em>, test string beginning at that position. With optional <em>end</em>, stop comparing string at that position.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.strip\">\n<code>str.strip([chars])</code> </dt> <dd>\n<p>Return a copy of the string with the leading and trailing characters removed. The <em>chars</em> argument is a string specifying the set of characters to be removed. If omitted or <code>None</code>, the <em>chars</em> argument defaults to removing whitespace. The <em>chars</em> argument is not a prefix or suffix; rather, all combinations of its values are stripped:</p> <pre data-language=\"python\">&gt;&gt;&gt; '   spacious   '.strip()\n'spacious'\n&gt;&gt;&gt; 'www.example.com'.strip('cmowz.')\n'example'\n</pre> <p>The outermost leading and trailing <em>chars</em> argument values are stripped from the string. Characters are removed from the leading end until reaching a string character that is not contained in the set of characters in <em>chars</em>. A similar action takes place on the trailing end. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; comment_string = '#....... Section 3.2.1 Issue #32 .......'\n&gt;&gt;&gt; comment_string.strip('.#! ')\n'Section 3.2.1 Issue #32'\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.swapcase\">\n<code>str.swapcase()</code> </dt> <dd>\n<p>Return a copy of the string with uppercase characters converted to lowercase and vice versa. Note that it is not necessarily true that <code>s.swapcase().swapcase() == s</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.title\">\n<code>str.title()</code> </dt> <dd>\n<p>Return a titlecased version of the string where words start with an uppercase character and the remaining characters are lowercase.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; 'Hello world'.title()\n'Hello World'\n</pre> <p>The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:</p> <pre data-language=\"python\">&gt;&gt;&gt; \"they're bill's friends from the UK\".title()\n\"They'Re Bill'S Friends From The Uk\"\n</pre> <p>A workaround for apostrophes can be constructed using regular expressions:</p> <pre data-language=\"python\">&gt;&gt;&gt; import re\n&gt;&gt;&gt; def titlecase(s):\n...     return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\",\n...                   lambda mo: mo.group(0).capitalize(),\n...                   s)\n...\n&gt;&gt;&gt; titlecase(\"they're bill's friends.\")\n\"They're Bill's Friends.\"\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.translate\">\n<code>str.translate(table)</code> </dt> <dd>\n<p>Return a copy of the string in which each character has been mapped through the given translation table. The table must be an object that implements indexing via <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><code>__getitem__()</code></a>, typically a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-mapping\"><span class=\"xref std std-term\">mapping</span></a> or <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-sequence\"><span class=\"xref std std-term\">sequence</span></a>. When indexed by a Unicode ordinal (an integer), the table object can do any of the following: return a Unicode ordinal or a string, to map the character to one or more other characters; return <code>None</code>, to delete the character from the return string; or raise a <a class=\"reference internal\" href=\"exceptions#LookupError\" title=\"LookupError\"><code>LookupError</code></a> exception, to map the character to itself.</p> <p>You can use <a class=\"reference internal\" href=\"#str.maketrans\" title=\"str.maketrans\"><code>str.maketrans()</code></a> to create a translation map from character-to-character mappings in different formats.</p> <p>See also the <a class=\"reference internal\" href=\"codecs#module-codecs\" title=\"codecs: Encode and decode data and streams.\"><code>codecs</code></a> module for a more flexible approach to custom character mappings.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.upper\">\n<code>str.upper()</code> </dt> <dd>\n<p>Return a copy of the string with all the cased characters <a class=\"footnote-reference brackets\" href=\"#id15\" id=\"id9\">4</a> converted to uppercase. Note that <code>s.upper().isupper()</code> might be <code>False</code> if <code>s</code> contains uncased characters or if the Unicode category of the resulting character(s) is not “Lu” (Letter, uppercase), but e.g. “Lt” (Letter, titlecase).</p> <p>The uppercasing algorithm used is described in section 3.13 of the Unicode Standard.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"str.zfill\">\n<code>str.zfill(width)</code> </dt> <dd>\n<p>Return a copy of the string left filled with ASCII <code>'0'</code> digits to make a string of length <em>width</em>. A leading sign prefix (<code>'+'</code>/<code>'-'</code>) is handled by inserting the padding <em>after</em> the sign character rather than before. The original string is returned if <em>width</em> is less than or equal to <code>len(s)</code>.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; \"42\".zfill(5)\n'00042'\n&gt;&gt;&gt; \"-42\".zfill(5)\n'-0042'\n</pre> </dd>\n</dl>   <h3 id=\"old-string-formatting\">\n<code>printf</code>-style String Formatting</h3> <div class=\"admonition note\" id=\"printf-style-string-formatting\"> <p class=\"admonition-title\">Note</p> <p>The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings\"><span class=\"std std-ref\">formatted string literals</span></a>, the <a class=\"reference internal\" href=\"#str.format\" title=\"str.format\"><code>str.format()</code></a> interface, or <a class=\"reference internal\" href=\"string#template-strings\"><span class=\"std std-ref\">template strings</span></a> may help avoid these errors. Each of these alternatives provides their own trade-offs and benefits of simplicity, flexibility, and/or extensibility.</p> </div> <p>String objects have one unique built-in operation: the <code>%</code> operator (modulo). This is also known as the string <em>formatting</em> or <em>interpolation</em> operator. Given <code>format % values</code> (where <em>format</em> is a string), <code>%</code> conversion specifications in <em>format</em> are replaced with zero or more elements of <em>values</em>. The effect is similar to using the <code>sprintf()</code> in the C language.</p> <p>If <em>format</em> requires a single argument, <em>values</em> may be a single non-tuple object. <a class=\"footnote-reference brackets\" href=\"#id16\" id=\"id10\">5</a> Otherwise, <em>values</em> must be a tuple with exactly the number of items specified by the format string, or a single mapping object (for example, a dictionary).</p> <p id=\"index-34\">A conversion specifier contains two or more characters and has the following components, which must occur in this order:</p> <ol class=\"arabic simple\"> <li>The <code>'%'</code> character, which marks the start of the specifier.</li> <li>Mapping key (optional), consisting of a parenthesised sequence of characters (for example, <code>(somename)</code>).</li> <li>Conversion flags (optional), which affect the result of some conversion types.</li> <li>Minimum field width (optional). If specified as an <code>'*'</code> (asterisk), the actual width is read from the next element of the tuple in <em>values</em>, and the object to convert comes after the minimum field width and optional precision.</li> <li>Precision (optional), given as a <code>'.'</code> (dot) followed by the precision. If specified as <code>'*'</code> (an asterisk), the actual precision is read from the next element of the tuple in <em>values</em>, and the value to convert comes after the precision.</li> <li>Length modifier (optional).</li> <li>Conversion type.</li> </ol> <p>When the right argument is a dictionary (or other mapping type), then the formats in the string <em>must</em> include a parenthesised mapping key into that dictionary inserted immediately after the <code>'%'</code> character. The mapping key selects the value to be formatted from the mapping. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; print('%(language)s has %(number)03d quote types.' %\n...       {'language': \"Python\", \"number\": 2})\nPython has 002 quote types.\n</pre> <p>In this case no <code>*</code> specifiers may occur in a format (since they require a sequential parameter list).</p> <p>The conversion flag characters are:</p> <table class=\"docutils align-default\" id=\"index-35\">  <thead> <tr>\n<th class=\"head\"><p>Flag</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'#'</code></p></td> <td><p>The value conversion will use the “alternate form” (where defined below).</p></td> </tr> <tr>\n<td><p><code>'0'</code></p></td> <td><p>The conversion will be zero padded for numeric values.</p></td> </tr> <tr>\n<td><p><code>'-'</code></p></td> <td><p>The converted value is left adjusted (overrides the <code>'0'</code> conversion if both are given).</p></td> </tr> <tr>\n<td><p><code>' '</code></p></td> <td><p>(a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.</p></td> </tr> <tr>\n<td><p><code>'+'</code></p></td> <td><p>A sign character (<code>'+'</code> or <code>'-'</code>) will precede the conversion (overrides a “space” flag).</p></td> </tr>  </table> <p>A length modifier (<code>h</code>, <code>l</code>, or <code>L</code>) may be present, but is ignored as it is not necessary for Python – so e.g. <code>%ld</code> is identical to <code>%d</code>.</p> <p>The conversion types are:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Conversion</p></th> <th class=\"head\"><p>Meaning</p></th> <th class=\"head\"><p>Notes</p></th> </tr> </thead>  <tr>\n<td><p><code>'d'</code></p></td> <td><p>Signed integer decimal.</p></td> <td></td> </tr> <tr>\n<td><p><code>'i'</code></p></td> <td><p>Signed integer decimal.</p></td> <td></td> </tr> <tr>\n<td><p><code>'o'</code></p></td> <td><p>Signed octal value.</p></td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>'u'</code></p></td> <td><p>Obsolete type – it is identical to <code>'d'</code>.</p></td> <td><p>(6)</p></td> </tr> <tr>\n<td><p><code>'x'</code></p></td> <td><p>Signed hexadecimal (lowercase).</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>'X'</code></p></td> <td><p>Signed hexadecimal (uppercase).</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>'e'</code></p></td> <td><p>Floating point exponential format (lowercase).</p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>'E'</code></p></td> <td><p>Floating point exponential format (uppercase).</p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>'f'</code></p></td> <td><p>Floating point decimal format.</p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>'F'</code></p></td> <td><p>Floating point decimal format.</p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>'g'</code></p></td> <td><p>Floating point format. Uses lowercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise.</p></td> <td><p>(4)</p></td> </tr> <tr>\n<td><p><code>'G'</code></p></td> <td><p>Floating point format. Uses uppercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise.</p></td> <td><p>(4)</p></td> </tr> <tr>\n<td><p><code>'c'</code></p></td> <td><p>Single character (accepts integer or single character string).</p></td> <td></td> </tr> <tr>\n<td><p><code>'r'</code></p></td> <td><p>String (converts any Python object using <a class=\"reference internal\" href=\"functions#repr\" title=\"repr\"><code>repr()</code></a>).</p></td> <td><p>(5)</p></td> </tr> <tr>\n<td><p><code>'s'</code></p></td> <td><p>String (converts any Python object using <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str()</code></a>).</p></td> <td><p>(5)</p></td> </tr> <tr>\n<td><p><code>'a'</code></p></td> <td><p>String (converts any Python object using <a class=\"reference internal\" href=\"functions#ascii\" title=\"ascii\"><code>ascii()</code></a>).</p></td> <td><p>(5)</p></td> </tr> <tr>\n<td><p><code>'%'</code></p></td> <td><p>No argument is converted, results in a <code>'%'</code> character in the result.</p></td> <td></td> </tr>  </table> <p>Notes:</p> <ol class=\"arabic\"> <li>The alternate form causes a leading octal specifier (<code>'0o'</code>) to be inserted before the first digit.</li> <li>The alternate form causes a leading <code>'0x'</code> or <code>'0X'</code> (depending on whether the <code>'x'</code> or <code>'X'</code> format was used) to be inserted before the first digit.</li> <li>\n<p>The alternate form causes the result to always contain a decimal point, even if no digits follow it.</p> <p>The precision determines the number of digits after the decimal point and defaults to 6.</p> </li> <li>\n<p>The alternate form causes the result to always contain a decimal point, and trailing zeroes are not removed as they would otherwise be.</p> <p>The precision determines the number of significant digits before and after the decimal point and defaults to 6.</p> </li> <li>If precision is <code>N</code>, the output is truncated to <code>N</code> characters.</li> <li>See <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0237\" id=\"index-36\"><strong>PEP 237</strong></a>.</li> </ol> <p>Since Python strings have an explicit length, <code>%s</code> conversions do not assume that <code>'\\0'</code> is the end of the string.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.1: </span><code>%f</code> conversions for numbers whose absolute value is over 1e50 are no longer replaced by <code>%g</code> conversions.</p> </div>    <h2 id=\"index-37\">Binary Sequence Types — bytes, bytearray, memoryview</h2> <p id=\"binary-sequence-types-bytes-bytearray-memoryview\">The core built-in types for manipulating binary data are <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> and <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a>. They are supported by <a class=\"reference internal\" href=\"#memoryview\" title=\"memoryview\"><code>memoryview</code></a> which uses the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/c-api/buffer.html#bufferobjects\"><span class=\"std std-ref\">buffer protocol</span></a> to access the memory of other binary objects without needing to make a copy.</p> <p>The <a class=\"reference internal\" href=\"array#module-array\" title=\"array: Space efficient arrays of uniformly typed numeric values.\"><code>array</code></a> module supports efficient storage of basic data types like 32-bit integers and IEEE754 double-precision floating values.</p>  <h3 id=\"typebytes\">Bytes Objects</h3> <p id=\"bytes-objects\">Bytes objects are immutable sequences of single bytes. Since many major binary protocols are based on the ASCII text encoding, bytes objects offer several methods that are only valid when working with ASCII compatible data and are closely related to string objects in a variety of other ways.</p> <dl class=\"class\"> <dt id=\"bytes\">\n<code>class bytes([source[, encoding[, errors]]])</code> </dt> <dd>\n<p>Firstly, the syntax for bytes literals is largely the same as that for string literals, except that a <code>b</code> prefix is added:</p> <ul class=\"simple\"> <li>Single quotes: <code>b'still allows embedded \"double\" quotes'</code>\n</li> <li>Double quotes: <code>b\"still allows embedded 'single' quotes\"</code>.</li> <li>Triple quoted: <code>b'''3 single quotes'''</code>, <code>b\"\"\"3 double quotes\"\"\"</code>\n</li> </ul> <p>Only ASCII characters are permitted in bytes literals (regardless of the declared source code encoding). Any binary values over 127 must be entered into bytes literals using the appropriate escape sequence.</p> <p>As with string literals, bytes literals may also use a <code>r</code> prefix to disable processing of escape sequences. See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#strings\"><span class=\"std std-ref\">String and Bytes literals</span></a> for more about the various forms of bytes literal, including supported escape sequences.</p> <p>While bytes literals and representations are based on ASCII text, bytes objects actually behave like immutable sequences of integers, with each value in the sequence restricted such that <code>0 &lt;= x &lt; 256</code> (attempts to violate this restriction will trigger <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a>). This is done deliberately to emphasise that while many binary formats include ASCII based elements and can be usefully manipulated with some text-oriented algorithms, this is not generally the case for arbitrary binary data (blindly applying text processing algorithms to binary data formats that are not ASCII compatible will usually lead to data corruption).</p> <p>In addition to the literal forms, bytes objects can be created in a number of other ways:</p> <ul class=\"simple\"> <li>A zero-filled bytes object of a specified length: <code>bytes(10)</code>\n</li> <li>From an iterable of integers: <code>bytes(range(20))</code>\n</li> <li>Copying existing binary data via the buffer protocol: <code>bytes(obj)</code>\n</li> </ul> <p>Also see the <a class=\"reference internal\" href=\"functions#func-bytes\"><span class=\"std std-ref\">bytes</span></a> built-in.</p> <p>Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal numbers are a commonly used format for describing binary data. Accordingly, the bytes type has an additional class method to read data in that format:</p> <dl class=\"method\"> <dt id=\"bytes.fromhex\">\n<code>classmethod fromhex(string)</code> </dt> <dd>\n<p>This <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> class method returns a bytes object, decoding the given string object. The string must contain two hexadecimal digits per byte, with ASCII whitespace being ignored.</p> <pre data-language=\"python\">&gt;&gt;&gt; bytes.fromhex('2Ef0 F1f2  ')\nb'.\\xf0\\xf1\\xf2'\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span><a class=\"reference internal\" href=\"#bytes.fromhex\" title=\"bytes.fromhex\"><code>bytes.fromhex()</code></a> now skips all ASCII whitespace in the string, not just spaces.</p> </div> </dd>\n</dl> <p>A reverse conversion function exists to transform a bytes object into its hexadecimal representation.</p> <dl class=\"method\"> <dt id=\"bytes.hex\">\n<code>hex([sep[, bytes_per_sep]])</code> </dt> <dd>\n<p>Return a string object containing two hexadecimal digits for each byte in the instance.</p> <pre data-language=\"python\">&gt;&gt;&gt; b'\\xf0\\xf1\\xf2'.hex()\n'f0f1f2'\n</pre> <p>If you want to make the hex string easier to read, you can specify a single character separator <em>sep</em> parameter to include in the output. By default between each byte. A second optional <em>bytes_per_sep</em> parameter controls the spacing. Positive values calculate the separator position from the right, negative values from the left.</p> <pre data-language=\"python\">&gt;&gt;&gt; value = b'\\xf0\\xf1\\xf2'\n&gt;&gt;&gt; value.hex('-')\n'f0-f1-f2'\n&gt;&gt;&gt; value.hex('_', 2)\n'f0_f1f2'\n&gt;&gt;&gt; b'UUDDLRLRAB'.hex(' ', -4)\n'55554444 4c524c52 4142'\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5.</span></p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span><a class=\"reference internal\" href=\"#bytes.hex\" title=\"bytes.hex\"><code>bytes.hex()</code></a> now supports optional <em>sep</em> and <em>bytes_per_sep</em> parameters to insert separators between bytes in the hex output.</p> </div> </dd>\n</dl> </dd>\n</dl> <p>Since bytes objects are sequences of integers (akin to a tuple), for a bytes object <em>b</em>, <code>b[0]</code> will be an integer, while <code>b[0:1]</code> will be a bytes object of length 1. (This contrasts with text strings, where both indexing and slicing will produce a string of length 1)</p> <p>The representation of bytes objects uses the literal format (<code>b'...'</code>) since it is often more useful than e.g. <code>bytes([46, 46, 46])</code>. You can always convert a bytes object into a list of integers using <code>list(b)</code>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>For Python 2.x users: In the Python 2.x series, a variety of implicit conversions between 8-bit strings (the closest thing 2.x offers to a built-in binary data type) and Unicode strings were permitted. This was a backwards compatibility workaround to account for the fact that Python originally only supported 8-bit text, and Unicode text was a later addition. In Python 3.x, those implicit conversions are gone - conversions between 8-bit binary data and Unicode text must be explicit, and bytes and string objects will always compare unequal.</p> </div>   <h3 id=\"typebytearray\">Bytearray Objects</h3> <p id=\"bytearray-objects\"><a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a> objects are a mutable counterpart to <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> objects.</p> <dl class=\"class\"> <dt id=\"bytearray\">\n<code>class bytearray([source[, encoding[, errors]]])</code> </dt> <dd>\n<p>There is no dedicated literal syntax for bytearray objects, instead they are always created by calling the constructor:</p> <ul class=\"simple\"> <li>Creating an empty instance: <code>bytearray()</code>\n</li> <li>Creating a zero-filled instance with a given length: <code>bytearray(10)</code>\n</li> <li>From an iterable of integers: <code>bytearray(range(20))</code>\n</li> <li>Copying existing binary data via the buffer protocol: <code>bytearray(b'Hi!')</code>\n</li> </ul> <p>As bytearray objects are mutable, they support the <a class=\"reference internal\" href=\"#typesseq-mutable\"><span class=\"std std-ref\">mutable</span></a> sequence operations in addition to the common bytes and bytearray operations described in <a class=\"reference internal\" href=\"#bytes-methods\"><span class=\"std std-ref\">Bytes and Bytearray Operations</span></a>.</p> <p>Also see the <a class=\"reference internal\" href=\"functions#func-bytearray\"><span class=\"std std-ref\">bytearray</span></a> built-in.</p> <p>Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal numbers are a commonly used format for describing binary data. Accordingly, the bytearray type has an additional class method to read data in that format:</p> <dl class=\"method\"> <dt id=\"bytearray.fromhex\">\n<code>classmethod fromhex(string)</code> </dt> <dd>\n<p>This <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a> class method returns bytearray object, decoding the given string object. The string must contain two hexadecimal digits per byte, with ASCII whitespace being ignored.</p> <pre data-language=\"python\">&gt;&gt;&gt; bytearray.fromhex('2Ef0 F1f2  ')\nbytearray(b'.\\xf0\\xf1\\xf2')\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span><a class=\"reference internal\" href=\"#bytearray.fromhex\" title=\"bytearray.fromhex\"><code>bytearray.fromhex()</code></a> now skips all ASCII whitespace in the string, not just spaces.</p> </div> </dd>\n</dl> <p>A reverse conversion function exists to transform a bytearray object into its hexadecimal representation.</p> <dl class=\"method\"> <dt id=\"bytearray.hex\">\n<code>hex([sep[, bytes_per_sep]])</code> </dt> <dd>\n<p>Return a string object containing two hexadecimal digits for each byte in the instance.</p> <pre data-language=\"python\">&gt;&gt;&gt; bytearray(b'\\xf0\\xf1\\xf2').hex()\n'f0f1f2'\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5.</span></p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>Similar to <a class=\"reference internal\" href=\"#bytes.hex\" title=\"bytes.hex\"><code>bytes.hex()</code></a>, <a class=\"reference internal\" href=\"#bytearray.hex\" title=\"bytearray.hex\"><code>bytearray.hex()</code></a> now supports optional <em>sep</em> and <em>bytes_per_sep</em> parameters to insert separators between bytes in the hex output.</p> </div> </dd>\n</dl> </dd>\n</dl> <p>Since bytearray objects are sequences of integers (akin to a list), for a bytearray object <em>b</em>, <code>b[0]</code> will be an integer, while <code>b[0:1]</code> will be a bytearray object of length 1. (This contrasts with text strings, where both indexing and slicing will produce a string of length 1)</p> <p>The representation of bytearray objects uses the bytes literal format (<code>bytearray(b'...')</code>) since it is often more useful than e.g. <code>bytearray([46, 46, 46])</code>. You can always convert a bytearray object into a list of integers using <code>list(b)</code>.</p>   <h3 id=\"bytes-methods\">Bytes and Bytearray Operations</h3> <p id=\"bytes-and-bytearray-operations\">Both bytes and bytearray objects support the <a class=\"reference internal\" href=\"#typesseq-common\"><span class=\"std std-ref\">common</span></a> sequence operations. They interoperate not just with operands of the same type, but with any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>. Due to this flexibility, they can be freely mixed in operations without causing errors. However, the return type of the result may depend on the order of operands.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The methods on bytes and bytearray objects don’t accept strings as their arguments, just as the methods on strings don’t accept bytes as their arguments. For example, you have to write:</p> <pre data-language=\"python\">a = \"abc\"\nb = a.replace(\"a\", \"f\")\n</pre> <p>and:</p> <pre data-language=\"python\">a = b\"abc\"\nb = a.replace(b\"a\", b\"f\")\n</pre> </div> <p>Some bytes and bytearray operations assume the use of ASCII compatible binary formats, and hence should be avoided when working with arbitrary binary data. These restrictions are covered below.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>Using these ASCII based operations to manipulate binary data that is not stored in an ASCII based format may lead to data corruption.</p> </div> <p>The following methods on bytes and bytearray objects can be used with arbitrary binary data.</p> <dl class=\"method\"> <dt id=\"bytes.count\">\n<code>bytes.count(sub[, start[, end]])</code> </dt> <dt id=\"bytearray.count\">\n<code>bytearray.count(sub[, start[, end]])</code> </dt> <dd>\n<p>Return the number of non-overlapping occurrences of subsequence <em>sub</em> in the range [<em>start</em>, <em>end</em>]. Optional arguments <em>start</em> and <em>end</em> are interpreted as in slice notation.</p> <p>The subsequence to search for may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> or an integer in the range 0 to 255.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Also accept an integer in the range 0 to 255 as the subsequence.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.removeprefix\">\n<code>bytes.removeprefix(prefix, /)</code> </dt> <dt id=\"bytearray.removeprefix\">\n<code>bytearray.removeprefix(prefix, /)</code> </dt> <dd>\n<p>If the binary data starts with the <em>prefix</em> string, return <code>bytes[len(prefix):]</code>. Otherwise, return a copy of the original binary data:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'TestHook'.removeprefix(b'Test')\nb'Hook'\n&gt;&gt;&gt; b'BaseTestCase'.removeprefix(b'Test')\nb'BaseTestCase'\n</pre> <p>The <em>prefix</em> may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.9.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.removesuffix\">\n<code>bytes.removesuffix(suffix, /)</code> </dt> <dt id=\"bytearray.removesuffix\">\n<code>bytearray.removesuffix(suffix, /)</code> </dt> <dd>\n<p>If the binary data ends with the <em>suffix</em> string and that <em>suffix</em> is not empty, return <code>bytes[:-len(suffix)]</code>. Otherwise, return a copy of the original binary data:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'MiscTests'.removesuffix(b'Tests')\nb'Misc'\n&gt;&gt;&gt; b'TmpDirMixin'.removesuffix(b'Tests')\nb'TmpDirMixin'\n</pre> <p>The <em>suffix</em> may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.9.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.decode\">\n<code>bytes.decode(encoding=\"utf-8\", errors=\"strict\")</code> </dt> <dt id=\"bytearray.decode\">\n<code>bytearray.decode(encoding=\"utf-8\", errors=\"strict\")</code> </dt> <dd>\n<p>Return a string decoded from the given bytes. Default encoding is <code>'utf-8'</code>. <em>errors</em> may be given to set a different error handling scheme. The default for <em>errors</em> is <code>'strict'</code>, meaning that encoding errors raise a <a class=\"reference internal\" href=\"exceptions#UnicodeError\" title=\"UnicodeError\"><code>UnicodeError</code></a>. Other possible values are <code>'ignore'</code>, <code>'replace'</code> and any other name registered via <a class=\"reference internal\" href=\"codecs#codecs.register_error\" title=\"codecs.register_error\"><code>codecs.register_error()</code></a>, see section <a class=\"reference internal\" href=\"codecs#error-handlers\"><span class=\"std std-ref\">Error Handlers</span></a>. For a list of possible encodings, see section <a class=\"reference internal\" href=\"codecs#standard-encodings\"><span class=\"std std-ref\">Standard Encodings</span></a>.</p> <p>By default, the <em>errors</em> argument is not checked for best performances, but only used at the first decoding error. Enable the <a class=\"reference internal\" href=\"devmode#devmode\"><span class=\"std std-ref\">Python Development Mode</span></a>, or use a debug build to check <em>errors</em>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>Passing the <em>encoding</em> argument to <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str</code></a> allows decoding any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> directly, without needing to make a temporary bytes or bytearray object.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.1: </span>Added support for keyword arguments.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.9: </span>The <em>errors</em> is now checked in development mode and in debug mode.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.endswith\">\n<code>bytes.endswith(suffix[, start[, end]])</code> </dt> <dt id=\"bytearray.endswith\">\n<code>bytearray.endswith(suffix[, start[, end]])</code> </dt> <dd>\n<p>Return <code>True</code> if the binary data ends with the specified <em>suffix</em>, otherwise return <code>False</code>. <em>suffix</em> can also be a tuple of suffixes to look for. With optional <em>start</em>, test beginning at that position. With optional <em>end</em>, stop comparing at that position.</p> <p>The suffix(es) to search for may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.find\">\n<code>bytes.find(sub[, start[, end]])</code> </dt> <dt id=\"bytearray.find\">\n<code>bytearray.find(sub[, start[, end]])</code> </dt> <dd>\n<p>Return the lowest index in the data where the subsequence <em>sub</em> is found, such that <em>sub</em> is contained in the slice <code>s[start:end]</code>. Optional arguments <em>start</em> and <em>end</em> are interpreted as in slice notation. Return <code>-1</code> if <em>sub</em> is not found.</p> <p>The subsequence to search for may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> or an integer in the range 0 to 255.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The <a class=\"reference internal\" href=\"#bytes.find\" title=\"bytes.find\"><code>find()</code></a> method should be used only if you need to know the position of <em>sub</em>. To check if <em>sub</em> is a substring or not, use the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#in\"><code>in</code></a> operator:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'Py' in b'Python'\nTrue\n</pre> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Also accept an integer in the range 0 to 255 as the subsequence.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.index\">\n<code>bytes.index(sub[, start[, end]])</code> </dt> <dt id=\"bytearray.index\">\n<code>bytearray.index(sub[, start[, end]])</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#bytes.find\" title=\"bytes.find\"><code>find()</code></a>, but raise <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> when the subsequence is not found.</p> <p>The subsequence to search for may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> or an integer in the range 0 to 255.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Also accept an integer in the range 0 to 255 as the subsequence.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.join\">\n<code>bytes.join(iterable)</code> </dt> <dt id=\"bytearray.join\">\n<code>bytearray.join(iterable)</code> </dt> <dd>\n<p>Return a bytes or bytearray object which is the concatenation of the binary data sequences in <em>iterable</em>. A <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> will be raised if there are any values in <em>iterable</em> that are not <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like objects</span></a>, including <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str</code></a> objects. The separator between elements is the contents of the bytes or bytearray object providing this method.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.maketrans\">\n<code>static bytes.maketrans(from, to)</code> </dt> <dt id=\"bytearray.maketrans\">\n<code>static bytearray.maketrans(from, to)</code> </dt> <dd>\n<p>This static method returns a translation table usable for <a class=\"reference internal\" href=\"#bytes.translate\" title=\"bytes.translate\"><code>bytes.translate()</code></a> that will map each character in <em>from</em> into the character at the same position in <em>to</em>; <em>from</em> and <em>to</em> must both be <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like objects</span></a> and have the same length.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.1.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.partition\">\n<code>bytes.partition(sep)</code> </dt> <dt id=\"bytearray.partition\">\n<code>bytearray.partition(sep)</code> </dt> <dd>\n<p>Split the sequence at the first occurrence of <em>sep</em>, and return a 3-tuple containing the part before the separator, the separator itself or its bytearray copy, and the part after the separator. If the separator is not found, return a 3-tuple containing a copy of the original sequence, followed by two empty bytes or bytearray objects.</p> <p>The separator to search for may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.replace\">\n<code>bytes.replace(old, new[, count])</code> </dt> <dt id=\"bytearray.replace\">\n<code>bytearray.replace(old, new[, count])</code> </dt> <dd>\n<p>Return a copy of the sequence with all occurrences of subsequence <em>old</em> replaced by <em>new</em>. If the optional argument <em>count</em> is given, only the first <em>count</em> occurrences are replaced.</p> <p>The subsequence to search for and its replacement may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.rfind\">\n<code>bytes.rfind(sub[, start[, end]])</code> </dt> <dt id=\"bytearray.rfind\">\n<code>bytearray.rfind(sub[, start[, end]])</code> </dt> <dd>\n<p>Return the highest index in the sequence where the subsequence <em>sub</em> is found, such that <em>sub</em> is contained within <code>s[start:end]</code>. Optional arguments <em>start</em> and <em>end</em> are interpreted as in slice notation. Return <code>-1</code> on failure.</p> <p>The subsequence to search for may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> or an integer in the range 0 to 255.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Also accept an integer in the range 0 to 255 as the subsequence.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.rindex\">\n<code>bytes.rindex(sub[, start[, end]])</code> </dt> <dt id=\"bytearray.rindex\">\n<code>bytearray.rindex(sub[, start[, end]])</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#bytes.rfind\" title=\"bytes.rfind\"><code>rfind()</code></a> but raises <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> when the subsequence <em>sub</em> is not found.</p> <p>The subsequence to search for may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> or an integer in the range 0 to 255.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Also accept an integer in the range 0 to 255 as the subsequence.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.rpartition\">\n<code>bytes.rpartition(sep)</code> </dt> <dt id=\"bytearray.rpartition\">\n<code>bytearray.rpartition(sep)</code> </dt> <dd>\n<p>Split the sequence at the last occurrence of <em>sep</em>, and return a 3-tuple containing the part before the separator, the separator itself or its bytearray copy, and the part after the separator. If the separator is not found, return a 3-tuple containing two empty bytes or bytearray objects, followed by a copy of the original sequence.</p> <p>The separator to search for may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.startswith\">\n<code>bytes.startswith(prefix[, start[, end]])</code> </dt> <dt id=\"bytearray.startswith\">\n<code>bytearray.startswith(prefix[, start[, end]])</code> </dt> <dd>\n<p>Return <code>True</code> if the binary data starts with the specified <em>prefix</em>, otherwise return <code>False</code>. <em>prefix</em> can also be a tuple of prefixes to look for. With optional <em>start</em>, test beginning at that position. With optional <em>end</em>, stop comparing at that position.</p> <p>The prefix(es) to search for may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.translate\">\n<code>bytes.translate(table, /, delete=b'')</code> </dt> <dt id=\"bytearray.translate\">\n<code>bytearray.translate(table, /, delete=b'')</code> </dt> <dd>\n<p>Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument <em>delete</em> are removed, and the remaining bytes have been mapped through the given translation table, which must be a bytes object of length 256.</p> <p>You can use the <a class=\"reference internal\" href=\"#bytes.maketrans\" title=\"bytes.maketrans\"><code>bytes.maketrans()</code></a> method to create a translation table.</p> <p>Set the <em>table</em> argument to <code>None</code> for translations that only delete characters:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'read this short text'.translate(None, b'aeiou')\nb'rd ths shrt txt'\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span><em>delete</em> is now supported as a keyword argument.</p> </div> </dd>\n</dl> <p>The following methods on bytes and bytearray objects have default behaviours that assume the use of ASCII compatible binary formats, but can still be used with arbitrary binary data by passing appropriate arguments. Note that all of the bytearray methods in this section do <em>not</em> operate in place, and instead produce new objects.</p> <dl class=\"method\"> <dt id=\"bytes.center\">\n<code>bytes.center(width[, fillbyte])</code> </dt> <dt id=\"bytearray.center\">\n<code>bytearray.center(width[, fillbyte])</code> </dt> <dd>\n<p>Return a copy of the object centered in a sequence of length <em>width</em>. Padding is done using the specified <em>fillbyte</em> (default is an ASCII space). For <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> objects, the original sequence is returned if <em>width</em> is less than or equal to <code>len(s)</code>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.ljust\">\n<code>bytes.ljust(width[, fillbyte])</code> </dt> <dt id=\"bytearray.ljust\">\n<code>bytearray.ljust(width[, fillbyte])</code> </dt> <dd>\n<p>Return a copy of the object left justified in a sequence of length <em>width</em>. Padding is done using the specified <em>fillbyte</em> (default is an ASCII space). For <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> objects, the original sequence is returned if <em>width</em> is less than or equal to <code>len(s)</code>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.lstrip\">\n<code>bytes.lstrip([chars])</code> </dt> <dt id=\"bytearray.lstrip\">\n<code>bytearray.lstrip([chars])</code> </dt> <dd>\n<p>Return a copy of the sequence with specified leading bytes removed. The <em>chars</em> argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters. If omitted or <code>None</code>, the <em>chars</em> argument defaults to removing ASCII whitespace. The <em>chars</em> argument is not a prefix; rather, all combinations of its values are stripped:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'   spacious   '.lstrip()\nb'spacious   '\n&gt;&gt;&gt; b'www.example.com'.lstrip(b'cmowz.')\nb'example.com'\n</pre> <p>The binary sequence of byte values to remove may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>. See <a class=\"reference internal\" href=\"#bytes.removeprefix\" title=\"bytes.removeprefix\"><code>removeprefix()</code></a> for a method that will remove a single prefix string rather than all of a set of characters. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'Arthur: three!'.lstrip(b'Arthur: ')\nb'ee!'\n&gt;&gt;&gt; b'Arthur: three!'.removeprefix(b'Arthur: ')\nb'three!'\n</pre> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.rjust\">\n<code>bytes.rjust(width[, fillbyte])</code> </dt> <dt id=\"bytearray.rjust\">\n<code>bytearray.rjust(width[, fillbyte])</code> </dt> <dd>\n<p>Return a copy of the object right justified in a sequence of length <em>width</em>. Padding is done using the specified <em>fillbyte</em> (default is an ASCII space). For <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> objects, the original sequence is returned if <em>width</em> is less than or equal to <code>len(s)</code>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.rsplit\">\n<code>bytes.rsplit(sep=None, maxsplit=-1)</code> </dt> <dt id=\"bytearray.rsplit\">\n<code>bytearray.rsplit(sep=None, maxsplit=-1)</code> </dt> <dd>\n<p>Split the binary sequence into subsequences of the same type, using <em>sep</em> as the delimiter string. If <em>maxsplit</em> is given, at most <em>maxsplit</em> splits are done, the <em>rightmost</em> ones. If <em>sep</em> is not specified or <code>None</code>, any subsequence consisting solely of ASCII whitespace is a separator. Except for splitting from the right, <a class=\"reference internal\" href=\"#bytearray.rsplit\" title=\"bytearray.rsplit\"><code>rsplit()</code></a> behaves like <a class=\"reference internal\" href=\"#bytearray.split\" title=\"bytearray.split\"><code>split()</code></a> which is described in detail below.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.rstrip\">\n<code>bytes.rstrip([chars])</code> </dt> <dt id=\"bytearray.rstrip\">\n<code>bytearray.rstrip([chars])</code> </dt> <dd>\n<p>Return a copy of the sequence with specified trailing bytes removed. The <em>chars</em> argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters. If omitted or <code>None</code>, the <em>chars</em> argument defaults to removing ASCII whitespace. The <em>chars</em> argument is not a suffix; rather, all combinations of its values are stripped:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'   spacious   '.rstrip()\nb'   spacious'\n&gt;&gt;&gt; b'mississippi'.rstrip(b'ipz')\nb'mississ'\n</pre> <p>The binary sequence of byte values to remove may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>. See <a class=\"reference internal\" href=\"#bytes.removesuffix\" title=\"bytes.removesuffix\"><code>removesuffix()</code></a> for a method that will remove a single suffix string rather than all of a set of characters. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'Monty Python'.rstrip(b' Python')\nb'M'\n&gt;&gt;&gt; b'Monty Python'.removesuffix(b' Python')\nb'Monty'\n</pre> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.split\">\n<code>bytes.split(sep=None, maxsplit=-1)</code> </dt> <dt id=\"bytearray.split\">\n<code>bytearray.split(sep=None, maxsplit=-1)</code> </dt> <dd>\n<p>Split the binary sequence into subsequences of the same type, using <em>sep</em> as the delimiter string. If <em>maxsplit</em> is given and non-negative, at most <em>maxsplit</em> splits are done (thus, the list will have at most <code>maxsplit+1</code> elements). If <em>maxsplit</em> is not specified or is <code>-1</code>, then there is no limit on the number of splits (all possible splits are made).</p> <p>If <em>sep</em> is given, consecutive delimiters are not grouped together and are deemed to delimit empty subsequences (for example, <code>b'1,,2'.split(b',')</code> returns <code>[b'1', b'', b'2']</code>). The <em>sep</em> argument may consist of a multibyte sequence (for example, <code>b'1&lt;&gt;2&lt;&gt;3'.split(b'&lt;&gt;')</code> returns <code>[b'1', b'2', b'3']</code>). Splitting an empty sequence with a specified separator returns <code>[b'']</code> or <code>[bytearray(b'')]</code> depending on the type of object being split. The <em>sep</em> argument may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'1,2,3'.split(b',')\n[b'1', b'2', b'3']\n&gt;&gt;&gt; b'1,2,3'.split(b',', maxsplit=1)\n[b'1', b'2,3']\n&gt;&gt;&gt; b'1,2,,3,'.split(b',')\n[b'1', b'2', b'', b'3', b'']\n</pre> <p>If <em>sep</em> is not specified or is <code>None</code>, a different splitting algorithm is applied: runs of consecutive ASCII whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the sequence has leading or trailing whitespace. Consequently, splitting an empty sequence or a sequence consisting solely of ASCII whitespace without a specified separator returns <code>[]</code>.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'1 2 3'.split()\n[b'1', b'2', b'3']\n&gt;&gt;&gt; b'1 2 3'.split(maxsplit=1)\n[b'1', b'2 3']\n&gt;&gt;&gt; b'   1   2   3   '.split()\n[b'1', b'2', b'3']\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.strip\">\n<code>bytes.strip([chars])</code> </dt> <dt id=\"bytearray.strip\">\n<code>bytearray.strip([chars])</code> </dt> <dd>\n<p>Return a copy of the sequence with specified leading and trailing bytes removed. The <em>chars</em> argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters. If omitted or <code>None</code>, the <em>chars</em> argument defaults to removing ASCII whitespace. The <em>chars</em> argument is not a prefix or suffix; rather, all combinations of its values are stripped:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'   spacious   '.strip()\nb'spacious'\n&gt;&gt;&gt; b'www.example.com'.strip(b'cmowz.')\nb'example'\n</pre> <p>The binary sequence of byte values to remove may be any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <p>The following methods on bytes and bytearray objects assume the use of ASCII compatible binary formats and should not be applied to arbitrary binary data. Note that all of the bytearray methods in this section do <em>not</em> operate in place, and instead produce new objects.</p> <dl class=\"method\"> <dt id=\"bytes.capitalize\">\n<code>bytes.capitalize()</code> </dt> <dt id=\"bytearray.capitalize\">\n<code>bytearray.capitalize()</code> </dt> <dd>\n<p>Return a copy of the sequence with each byte interpreted as an ASCII character, and the first byte capitalized and the rest lowercased. Non-ASCII byte values are passed through unchanged.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.expandtabs\">\n<code>bytes.expandtabs(tabsize=8)</code> </dt> <dt id=\"bytearray.expandtabs\">\n<code>bytearray.expandtabs(tabsize=8)</code> </dt> <dd>\n<p>Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces, depending on the current column and the given tab size. Tab positions occur every <em>tabsize</em> bytes (default is 8, giving tab positions at columns 0, 8, 16 and so on). To expand the sequence, the current column is set to zero and the sequence is examined byte by byte. If the byte is an ASCII tab character (<code>b'\\t'</code>), one or more space characters are inserted in the result until the current column is equal to the next tab position. (The tab character itself is not copied.) If the current byte is an ASCII newline (<code>b'\\n'</code>) or carriage return (<code>b'\\r'</code>), it is copied and the current column is reset to zero. Any other byte value is copied unchanged and the current column is incremented by one regardless of how the byte value is represented when printed:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'01\\t012\\t0123\\t01234'.expandtabs()\nb'01      012     0123    01234'\n&gt;&gt;&gt; b'01\\t012\\t0123\\t01234'.expandtabs(4)\nb'01  012 0123    01234'\n</pre> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.isalnum\">\n<code>bytes.isalnum()</code> </dt> <dt id=\"bytearray.isalnum\">\n<code>bytearray.isalnum()</code> </dt> <dd>\n<p>Return <code>True</code> if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty, <code>False</code> otherwise. Alphabetic ASCII characters are those byte values in the sequence <code>b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</code>. ASCII decimal digits are those byte values in the sequence <code>b'0123456789'</code>.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'ABCabc1'.isalnum()\nTrue\n&gt;&gt;&gt; b'ABC abc1'.isalnum()\nFalse\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.isalpha\">\n<code>bytes.isalpha()</code> </dt> <dt id=\"bytearray.isalpha\">\n<code>bytearray.isalpha()</code> </dt> <dd>\n<p>Return <code>True</code> if all bytes in the sequence are alphabetic ASCII characters and the sequence is not empty, <code>False</code> otherwise. Alphabetic ASCII characters are those byte values in the sequence <code>b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</code>.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'ABCabc'.isalpha()\nTrue\n&gt;&gt;&gt; b'ABCabc1'.isalpha()\nFalse\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.isascii\">\n<code>bytes.isascii()</code> </dt> <dt id=\"bytearray.isascii\">\n<code>bytearray.isascii()</code> </dt> <dd>\n<p>Return <code>True</code> if the sequence is empty or all bytes in the sequence are ASCII, <code>False</code> otherwise. ASCII bytes are in the range 0-0x7F.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.7.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.isdigit\">\n<code>bytes.isdigit()</code> </dt> <dt id=\"bytearray.isdigit\">\n<code>bytearray.isdigit()</code> </dt> <dd>\n<p>Return <code>True</code> if all bytes in the sequence are ASCII decimal digits and the sequence is not empty, <code>False</code> otherwise. ASCII decimal digits are those byte values in the sequence <code>b'0123456789'</code>.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'1234'.isdigit()\nTrue\n&gt;&gt;&gt; b'1.23'.isdigit()\nFalse\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.islower\">\n<code>bytes.islower()</code> </dt> <dt id=\"bytearray.islower\">\n<code>bytearray.islower()</code> </dt> <dd>\n<p>Return <code>True</code> if there is at least one lowercase ASCII character in the sequence and no uppercase ASCII characters, <code>False</code> otherwise.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'hello world'.islower()\nTrue\n&gt;&gt;&gt; b'Hello world'.islower()\nFalse\n</pre> <p>Lowercase ASCII characters are those byte values in the sequence <code>b'abcdefghijklmnopqrstuvwxyz'</code>. Uppercase ASCII characters are those byte values in the sequence <code>b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.isspace\">\n<code>bytes.isspace()</code> </dt> <dt id=\"bytearray.isspace\">\n<code>bytearray.isspace()</code> </dt> <dd>\n<p>Return <code>True</code> if all bytes in the sequence are ASCII whitespace and the sequence is not empty, <code>False</code> otherwise. ASCII whitespace characters are those byte values in the sequence <code>b' \\t\\n\\r\\x0b\\f'</code> (space, tab, newline, carriage return, vertical tab, form feed).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.istitle\">\n<code>bytes.istitle()</code> </dt> <dt id=\"bytearray.istitle\">\n<code>bytearray.istitle()</code> </dt> <dd>\n<p>Return <code>True</code> if the sequence is ASCII titlecase and the sequence is not empty, <code>False</code> otherwise. See <a class=\"reference internal\" href=\"#bytes.title\" title=\"bytes.title\"><code>bytes.title()</code></a> for more details on the definition of “titlecase”.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'Hello World'.istitle()\nTrue\n&gt;&gt;&gt; b'Hello world'.istitle()\nFalse\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.isupper\">\n<code>bytes.isupper()</code> </dt> <dt id=\"bytearray.isupper\">\n<code>bytearray.isupper()</code> </dt> <dd>\n<p>Return <code>True</code> if there is at least one uppercase alphabetic ASCII character in the sequence and no lowercase ASCII characters, <code>False</code> otherwise.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'HELLO WORLD'.isupper()\nTrue\n&gt;&gt;&gt; b'Hello world'.isupper()\nFalse\n</pre> <p>Lowercase ASCII characters are those byte values in the sequence <code>b'abcdefghijklmnopqrstuvwxyz'</code>. Uppercase ASCII characters are those byte values in the sequence <code>b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.lower\">\n<code>bytes.lower()</code> </dt> <dt id=\"bytearray.lower\">\n<code>bytearray.lower()</code> </dt> <dd>\n<p>Return a copy of the sequence with all the uppercase ASCII characters converted to their corresponding lowercase counterpart.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'Hello World'.lower()\nb'hello world'\n</pre> <p>Lowercase ASCII characters are those byte values in the sequence <code>b'abcdefghijklmnopqrstuvwxyz'</code>. Uppercase ASCII characters are those byte values in the sequence <code>b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</code>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.splitlines\">\n<code>bytes.splitlines(keepends=False)</code> </dt> <dt id=\"bytearray.splitlines\">\n<code>bytearray.splitlines(keepends=False)</code> </dt> <dd>\n<p>Return a list of the lines in the binary sequence, breaking at ASCII line boundaries. This method uses the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-universal-newlines\"><span class=\"xref std std-term\">universal newlines</span></a> approach to splitting lines. Line breaks are not included in the resulting list unless <em>keepends</em> is given and true.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n[b'ab c', b'', b'de fg', b'kl']\n&gt;&gt;&gt; b'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n[b'ab c\\n', b'\\n', b'de fg\\r', b'kl\\r\\n']\n</pre> <p>Unlike <a class=\"reference internal\" href=\"#bytes.split\" title=\"bytes.split\"><code>split()</code></a> when a delimiter string <em>sep</em> is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:</p> <pre data-language=\"python\">&gt;&gt;&gt; b\"\".split(b'\\n'), b\"Two lines\\n\".split(b'\\n')\n([b''], [b'Two lines', b''])\n&gt;&gt;&gt; b\"\".splitlines(), b\"One line\\n\".splitlines()\n([], [b'One line'])\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.swapcase\">\n<code>bytes.swapcase()</code> </dt> <dt id=\"bytearray.swapcase\">\n<code>bytearray.swapcase()</code> </dt> <dd>\n<p>Return a copy of the sequence with all the lowercase ASCII characters converted to their corresponding uppercase counterpart and vice-versa.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'Hello World'.swapcase()\nb'hELLO wORLD'\n</pre> <p>Lowercase ASCII characters are those byte values in the sequence <code>b'abcdefghijklmnopqrstuvwxyz'</code>. Uppercase ASCII characters are those byte values in the sequence <code>b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</code>.</p> <p>Unlike <a class=\"reference internal\" href=\"#str.swapcase\" title=\"str.swapcase\"><code>str.swapcase()</code></a>, it is always the case that <code>bin.swapcase().swapcase() == bin</code> for the binary versions. Case conversions are symmetrical in ASCII, even though that is not generally true for arbitrary Unicode code points.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.title\">\n<code>bytes.title()</code> </dt> <dt id=\"bytearray.title\">\n<code>bytearray.title()</code> </dt> <dd>\n<p>Return a titlecased version of the binary sequence where words start with an uppercase ASCII character and the remaining characters are lowercase. Uncased byte values are left unmodified.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'Hello world'.title()\nb'Hello World'\n</pre> <p>Lowercase ASCII characters are those byte values in the sequence <code>b'abcdefghijklmnopqrstuvwxyz'</code>. Uppercase ASCII characters are those byte values in the sequence <code>b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</code>. All other byte values are uncased.</p> <p>The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:</p> <pre data-language=\"python\">&gt;&gt;&gt; b\"they're bill's friends from the UK\".title()\nb\"They'Re Bill'S Friends From The Uk\"\n</pre> <p>A workaround for apostrophes can be constructed using regular expressions:</p> <pre data-language=\"python\">&gt;&gt;&gt; import re\n&gt;&gt;&gt; def titlecase(s):\n...     return re.sub(rb\"[A-Za-z]+('[A-Za-z]+)?\",\n...                   lambda mo: mo.group(0)[0:1].upper() +\n...                              mo.group(0)[1:].lower(),\n...                   s)\n...\n&gt;&gt;&gt; titlecase(b\"they're bill's friends.\")\nb\"They're Bill's Friends.\"\n</pre> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.upper\">\n<code>bytes.upper()</code> </dt> <dt id=\"bytearray.upper\">\n<code>bytearray.upper()</code> </dt> <dd>\n<p>Return a copy of the sequence with all the lowercase ASCII characters converted to their corresponding uppercase counterpart.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b'Hello World'.upper()\nb'HELLO WORLD'\n</pre> <p>Lowercase ASCII characters are those byte values in the sequence <code>b'abcdefghijklmnopqrstuvwxyz'</code>. Uppercase ASCII characters are those byte values in the sequence <code>b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</code>.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"bytes.zfill\">\n<code>bytes.zfill(width)</code> </dt> <dt id=\"bytearray.zfill\">\n<code>bytearray.zfill(width)</code> </dt> <dd>\n<p>Return a copy of the sequence left filled with ASCII <code>b'0'</code> digits to make a sequence of length <em>width</em>. A leading sign prefix (<code>b'+'</code>/ <code>b'-'</code>) is handled by inserting the padding <em>after</em> the sign character rather than before. For <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> objects, the original sequence is returned if <em>width</em> is less than or equal to <code>len(seq)</code>.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; b\"42\".zfill(5)\nb'00042'\n&gt;&gt;&gt; b\"-42\".zfill(5)\nb'-0042'\n</pre> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> </dd>\n</dl>   <h3 id=\"bytes-formatting\">\n<code>printf</code>-style Bytes Formatting</h3> <div class=\"admonition note\" id=\"printf-style-bytes-formatting\"> <p class=\"admonition-title\">Note</p> <p>The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). If the value being printed may be a tuple or dictionary, wrap it in a tuple.</p> </div> <p>Bytes objects (<code>bytes</code>/<code>bytearray</code>) have one unique built-in operation: the <code>%</code> operator (modulo). This is also known as the bytes <em>formatting</em> or <em>interpolation</em> operator. Given <code>format % values</code> (where <em>format</em> is a bytes object), <code>%</code> conversion specifications in <em>format</em> are replaced with zero or more elements of <em>values</em>. The effect is similar to using the <code>sprintf()</code> in the C language.</p> <p>If <em>format</em> requires a single argument, <em>values</em> may be a single non-tuple object. <a class=\"footnote-reference brackets\" href=\"#id16\" id=\"id11\">5</a> Otherwise, <em>values</em> must be a tuple with exactly the number of items specified by the format bytes object, or a single mapping object (for example, a dictionary).</p> <p id=\"index-44\">A conversion specifier contains two or more characters and has the following components, which must occur in this order:</p> <ol class=\"arabic simple\"> <li>The <code>'%'</code> character, which marks the start of the specifier.</li> <li>Mapping key (optional), consisting of a parenthesised sequence of characters (for example, <code>(somename)</code>).</li> <li>Conversion flags (optional), which affect the result of some conversion types.</li> <li>Minimum field width (optional). If specified as an <code>'*'</code> (asterisk), the actual width is read from the next element of the tuple in <em>values</em>, and the object to convert comes after the minimum field width and optional precision.</li> <li>Precision (optional), given as a <code>'.'</code> (dot) followed by the precision. If specified as <code>'*'</code> (an asterisk), the actual precision is read from the next element of the tuple in <em>values</em>, and the value to convert comes after the precision.</li> <li>Length modifier (optional).</li> <li>Conversion type.</li> </ol> <p>When the right argument is a dictionary (or other mapping type), then the formats in the bytes object <em>must</em> include a parenthesised mapping key into that dictionary inserted immediately after the <code>'%'</code> character. The mapping key selects the value to be formatted from the mapping. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; print(b'%(language)s has %(number)03d quote types.' %\n...       {b'language': b\"Python\", b\"number\": 2})\nb'Python has 002 quote types.'\n</pre> <p>In this case no <code>*</code> specifiers may occur in a format (since they require a sequential parameter list).</p> <p>The conversion flag characters are:</p> <table class=\"docutils align-default\" id=\"index-45\">  <thead> <tr>\n<th class=\"head\"><p>Flag</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'#'</code></p></td> <td><p>The value conversion will use the “alternate form” (where defined below).</p></td> </tr> <tr>\n<td><p><code>'0'</code></p></td> <td><p>The conversion will be zero padded for numeric values.</p></td> </tr> <tr>\n<td><p><code>'-'</code></p></td> <td><p>The converted value is left adjusted (overrides the <code>'0'</code> conversion if both are given).</p></td> </tr> <tr>\n<td><p><code>' '</code></p></td> <td><p>(a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.</p></td> </tr> <tr>\n<td><p><code>'+'</code></p></td> <td><p>A sign character (<code>'+'</code> or <code>'-'</code>) will precede the conversion (overrides a “space” flag).</p></td> </tr>  </table> <p>A length modifier (<code>h</code>, <code>l</code>, or <code>L</code>) may be present, but is ignored as it is not necessary for Python – so e.g. <code>%ld</code> is identical to <code>%d</code>.</p> <p>The conversion types are:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Conversion</p></th> <th class=\"head\"><p>Meaning</p></th> <th class=\"head\"><p>Notes</p></th> </tr> </thead>  <tr>\n<td><p><code>'d'</code></p></td> <td><p>Signed integer decimal.</p></td> <td></td> </tr> <tr>\n<td><p><code>'i'</code></p></td> <td><p>Signed integer decimal.</p></td> <td></td> </tr> <tr>\n<td><p><code>'o'</code></p></td> <td><p>Signed octal value.</p></td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>'u'</code></p></td> <td><p>Obsolete type – it is identical to <code>'d'</code>.</p></td> <td><p>(8)</p></td> </tr> <tr>\n<td><p><code>'x'</code></p></td> <td><p>Signed hexadecimal (lowercase).</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>'X'</code></p></td> <td><p>Signed hexadecimal (uppercase).</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>'e'</code></p></td> <td><p>Floating point exponential format (lowercase).</p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>'E'</code></p></td> <td><p>Floating point exponential format (uppercase).</p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>'f'</code></p></td> <td><p>Floating point decimal format.</p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>'F'</code></p></td> <td><p>Floating point decimal format.</p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>'g'</code></p></td> <td><p>Floating point format. Uses lowercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise.</p></td> <td><p>(4)</p></td> </tr> <tr>\n<td><p><code>'G'</code></p></td> <td><p>Floating point format. Uses uppercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise.</p></td> <td><p>(4)</p></td> </tr> <tr>\n<td><p><code>'c'</code></p></td> <td><p>Single byte (accepts integer or single byte objects).</p></td> <td></td> </tr> <tr>\n<td><p><code>'b'</code></p></td> <td><p>Bytes (any object that follows the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/c-api/buffer.html#bufferobjects\"><span class=\"std std-ref\">buffer protocol</span></a> or has <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__bytes__\" title=\"object.__bytes__\"><code>__bytes__()</code></a>).</p></td> <td><p>(5)</p></td> </tr> <tr>\n<td><p><code>'s'</code></p></td> <td><p><code>'s'</code> is an alias for <code>'b'</code> and should only be used for Python2/3 code bases.</p></td> <td><p>(6)</p></td> </tr> <tr>\n<td><p><code>'a'</code></p></td> <td><p>Bytes (converts any Python object using <code>repr(obj).encode('ascii','backslashreplace)</code>).</p></td> <td><p>(5)</p></td> </tr> <tr>\n<td><p><code>'r'</code></p></td> <td><p><code>'r'</code> is an alias for <code>'a'</code> and should only be used for Python2/3 code bases.</p></td> <td><p>(7)</p></td> </tr> <tr>\n<td><p><code>'%'</code></p></td> <td><p>No argument is converted, results in a <code>'%'</code> character in the result.</p></td> <td></td> </tr>  </table> <p>Notes:</p> <ol class=\"arabic\"> <li>The alternate form causes a leading octal specifier (<code>'0o'</code>) to be inserted before the first digit.</li> <li>The alternate form causes a leading <code>'0x'</code> or <code>'0X'</code> (depending on whether the <code>'x'</code> or <code>'X'</code> format was used) to be inserted before the first digit.</li> <li>\n<p>The alternate form causes the result to always contain a decimal point, even if no digits follow it.</p> <p>The precision determines the number of digits after the decimal point and defaults to 6.</p> </li> <li>\n<p>The alternate form causes the result to always contain a decimal point, and trailing zeroes are not removed as they would otherwise be.</p> <p>The precision determines the number of significant digits before and after the decimal point and defaults to 6.</p> </li> <li>If precision is <code>N</code>, the output is truncated to <code>N</code> characters.</li> <li>\n<code>b'%s'</code> is deprecated, but will not be removed during the 3.x series.</li> <li>\n<code>b'%r'</code> is deprecated, but will not be removed during the 3.x series.</li> <li>See <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0237\" id=\"index-46\"><strong>PEP 237</strong></a>.</li> </ol> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The bytearray version of this method does <em>not</em> operate in place - it always produces a new object, even if no changes were made.</p> </div> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <p><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0461\" id=\"index-47\"><strong>PEP 461</strong></a> - Adding % formatting to bytes and bytearray</p> </div> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5.</span></p> </div>   <h3 id=\"typememoryview\">Memory Views</h3> <p id=\"memory-views\"><a class=\"reference internal\" href=\"#memoryview\" title=\"memoryview\"><code>memoryview</code></a> objects allow Python code to access the internal data of an object that supports the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/c-api/buffer.html#bufferobjects\"><span class=\"std std-ref\">buffer protocol</span></a> without copying.</p> <dl class=\"class\"> <dt id=\"memoryview\">\n<code>class memoryview(obj)</code> </dt> <dd>\n<p>Create a <a class=\"reference internal\" href=\"#memoryview\" title=\"memoryview\"><code>memoryview</code></a> that references <em>obj</em>. <em>obj</em> must support the buffer protocol. Built-in objects that support the buffer protocol include <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> and <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a>.</p> <p>A <a class=\"reference internal\" href=\"#memoryview\" title=\"memoryview\"><code>memoryview</code></a> has the notion of an <em>element</em>, which is the atomic memory unit handled by the originating object <em>obj</em>. For many simple types such as <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> and <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a>, an element is a single byte, but other types such as <a class=\"reference internal\" href=\"array#array.array\" title=\"array.array\"><code>array.array</code></a> may have bigger elements.</p> <p><code>len(view)</code> is equal to the length of <a class=\"reference internal\" href=\"#memoryview.tolist\" title=\"memoryview.tolist\"><code>tolist</code></a>. If <code>view.ndim = 0</code>, the length is 1. If <code>view.ndim = 1</code>, the length is equal to the number of elements in the view. For higher dimensions, the length is equal to the length of the nested list representation of the view. The <a class=\"reference internal\" href=\"#memoryview.itemsize\" title=\"memoryview.itemsize\"><code>itemsize</code></a> attribute will give you the number of bytes in a single element.</p> <p>A <a class=\"reference internal\" href=\"#memoryview\" title=\"memoryview\"><code>memoryview</code></a> supports slicing and indexing to expose its data. One-dimensional slicing will result in a subview:</p> <pre data-language=\"python\">&gt;&gt;&gt; v = memoryview(b'abcefg')\n&gt;&gt;&gt; v[1]\n98\n&gt;&gt;&gt; v[-1]\n103\n&gt;&gt;&gt; v[1:4]\n&lt;memory at 0x7f3ddc9f4350&gt;\n&gt;&gt;&gt; bytes(v[1:4])\nb'bce'\n</pre> <p>If <a class=\"reference internal\" href=\"#memoryview.format\" title=\"memoryview.format\"><code>format</code></a> is one of the native format specifiers from the <a class=\"reference internal\" href=\"struct#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> module, indexing with an integer or a tuple of integers is also supported and returns a single <em>element</em> with the correct type. One-dimensional memoryviews can be indexed with an integer or a one-integer tuple. Multi-dimensional memoryviews can be indexed with tuples of exactly <em>ndim</em> integers where <em>ndim</em> is the number of dimensions. Zero-dimensional memoryviews can be indexed with the empty tuple.</p> <p>Here is an example with a non-byte format:</p> <pre data-language=\"python\">&gt;&gt;&gt; import array\n&gt;&gt;&gt; a = array.array('l', [-11111111, 22222222, -33333333, 44444444])\n&gt;&gt;&gt; m = memoryview(a)\n&gt;&gt;&gt; m[0]\n-11111111\n&gt;&gt;&gt; m[-1]\n44444444\n&gt;&gt;&gt; m[::2].tolist()\n[-11111111, -33333333]\n</pre> <p>If the underlying object is writable, the memoryview supports one-dimensional slice assignment. Resizing is not allowed:</p> <pre data-language=\"python\">&gt;&gt;&gt; data = bytearray(b'abcefg')\n&gt;&gt;&gt; v = memoryview(data)\n&gt;&gt;&gt; v.readonly\nFalse\n&gt;&gt;&gt; v[0] = ord(b'z')\n&gt;&gt;&gt; data\nbytearray(b'zbcefg')\n&gt;&gt;&gt; v[1:4] = b'123'\n&gt;&gt;&gt; data\nbytearray(b'z123fg')\n&gt;&gt;&gt; v[2:3] = b'spam'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: memoryview assignment: lvalue and rvalue have different structures\n&gt;&gt;&gt; v[2:6] = b'spam'\n&gt;&gt;&gt; data\nbytearray(b'z1spam')\n</pre> <p>One-dimensional memoryviews of hashable (read-only) types with formats ‘B’, ‘b’ or ‘c’ are also hashable. The hash is defined as <code>hash(m) == hash(m.tobytes())</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; v = memoryview(b'abcefg')\n&gt;&gt;&gt; hash(v) == hash(b'abcefg')\nTrue\n&gt;&gt;&gt; hash(v[2:4]) == hash(b'ce')\nTrue\n&gt;&gt;&gt; hash(v[::-2]) == hash(b'abcefg'[::-2])\nTrue\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>One-dimensional memoryviews can now be sliced. One-dimensional memoryviews with formats ‘B’, ‘b’ or ‘c’ are now hashable.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span>memoryview is now registered automatically with <a class=\"reference internal\" href=\"collections.abc#collections.abc.Sequence\" title=\"collections.abc.Sequence\"><code>collections.abc.Sequence</code></a></p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>memoryviews can now be indexed with tuple of integers.</p> </div> <p><a class=\"reference internal\" href=\"#memoryview\" title=\"memoryview\"><code>memoryview</code></a> has several methods:</p> <dl class=\"method\"> <dt id=\"memoryview.__eq__\">\n<code>__eq__(exporter)</code> </dt> <dd>\n<p>A memoryview and a <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-3118\" id=\"index-48\"><strong>PEP 3118</strong></a> exporter are equal if their shapes are equivalent and if all corresponding values are equal when the operands’ respective format codes are interpreted using <a class=\"reference internal\" href=\"struct#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> syntax.</p> <p>For the subset of <a class=\"reference internal\" href=\"struct#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> format strings currently supported by <a class=\"reference internal\" href=\"#memoryview.tolist\" title=\"memoryview.tolist\"><code>tolist()</code></a>, <code>v</code> and <code>w</code> are equal if <code>v.tolist() == w.tolist()</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; import array\n&gt;&gt;&gt; a = array.array('I', [1, 2, 3, 4, 5])\n&gt;&gt;&gt; b = array.array('d', [1.0, 2.0, 3.0, 4.0, 5.0])\n&gt;&gt;&gt; c = array.array('b', [5, 3, 1])\n&gt;&gt;&gt; x = memoryview(a)\n&gt;&gt;&gt; y = memoryview(b)\n&gt;&gt;&gt; x == a == y == b\nTrue\n&gt;&gt;&gt; x.tolist() == a.tolist() == y.tolist() == b.tolist()\nTrue\n&gt;&gt;&gt; z = y[::-2]\n&gt;&gt;&gt; z == c\nTrue\n&gt;&gt;&gt; z.tolist() == c.tolist()\nTrue\n</pre> <p>If either format string is not supported by the <a class=\"reference internal\" href=\"struct#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> module, then the objects will always compare as unequal (even if the format strings and buffer contents are identical):</p> <pre data-language=\"python\">&gt;&gt;&gt; from ctypes import BigEndianStructure, c_long\n&gt;&gt;&gt; class BEPoint(BigEndianStructure):\n...     _fields_ = [(\"x\", c_long), (\"y\", c_long)]\n...\n&gt;&gt;&gt; point = BEPoint(100, 200)\n&gt;&gt;&gt; a = memoryview(point)\n&gt;&gt;&gt; b = memoryview(point)\n&gt;&gt;&gt; a == point\nFalse\n&gt;&gt;&gt; a == b\nFalse\n</pre> <p>Note that, as with floating point numbers, <code>v is w</code> does <em>not</em> imply <code>v == w</code> for memoryview objects.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Previous versions compared the raw memory disregarding the item format and the logical array structure.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"memoryview.tobytes\">\n<code>tobytes(order=None)</code> </dt> <dd>\n<p>Return the data in the buffer as a bytestring. This is equivalent to calling the <a class=\"reference internal\" href=\"#bytes\" title=\"bytes\"><code>bytes</code></a> constructor on the memoryview.</p> <pre data-language=\"python\">&gt;&gt;&gt; m = memoryview(b\"abc\")\n&gt;&gt;&gt; m.tobytes()\nb'abc'\n&gt;&gt;&gt; bytes(m)\nb'abc'\n</pre> <p>For non-contiguous arrays the result is equal to the flattened list representation with all elements converted to bytes. <a class=\"reference internal\" href=\"#memoryview.tobytes\" title=\"memoryview.tobytes\"><code>tobytes()</code></a> supports all format strings, including those that are not in <a class=\"reference internal\" href=\"struct#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> module syntax.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.8: </span><em>order</em> can be {‘C’, ‘F’, ‘A’}. When <em>order</em> is ‘C’ or ‘F’, the data of the original array is converted to C or Fortran order. For contiguous views, ‘A’ returns an exact copy of the physical memory. In particular, in-memory Fortran order is preserved. For non-contiguous views, the data is converted to C first. <em>order=None</em> is the same as <em>order=’C’</em>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"memoryview.hex\">\n<code>hex([sep[, bytes_per_sep]])</code> </dt> <dd>\n<p>Return a string object containing two hexadecimal digits for each byte in the buffer.</p> <pre data-language=\"python\">&gt;&gt;&gt; m = memoryview(b\"abc\")\n&gt;&gt;&gt; m.hex()\n'616263'\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5.</span></p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>Similar to <a class=\"reference internal\" href=\"#bytes.hex\" title=\"bytes.hex\"><code>bytes.hex()</code></a>, <a class=\"reference internal\" href=\"#memoryview.hex\" title=\"memoryview.hex\"><code>memoryview.hex()</code></a> now supports optional <em>sep</em> and <em>bytes_per_sep</em> parameters to insert separators between bytes in the hex output.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"memoryview.tolist\">\n<code>tolist()</code> </dt> <dd>\n<p>Return the data in the buffer as a list of elements.</p> <pre data-language=\"python\">&gt;&gt;&gt; memoryview(b'abc').tolist()\n[97, 98, 99]\n&gt;&gt;&gt; import array\n&gt;&gt;&gt; a = array.array('d', [1.1, 2.2, 3.3])\n&gt;&gt;&gt; m = memoryview(a)\n&gt;&gt;&gt; m.tolist()\n[1.1, 2.2, 3.3]\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span><a class=\"reference internal\" href=\"#memoryview.tolist\" title=\"memoryview.tolist\"><code>tolist()</code></a> now supports all single character native formats in <a class=\"reference internal\" href=\"struct#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> module syntax as well as multi-dimensional representations.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"memoryview.toreadonly\">\n<code>toreadonly()</code> </dt> <dd>\n<p>Return a readonly version of the memoryview object. The original memoryview object is unchanged.</p> <pre data-language=\"python\">&gt;&gt;&gt; m = memoryview(bytearray(b'abc'))\n&gt;&gt;&gt; mm = m.toreadonly()\n&gt;&gt;&gt; mm.tolist()\n[89, 98, 99]\n&gt;&gt;&gt; mm[0] = 42\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: cannot modify read-only memory\n&gt;&gt;&gt; m[0] = 43\n&gt;&gt;&gt; mm.tolist()\n[43, 98, 99]\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.8.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"memoryview.release\">\n<code>release()</code> </dt> <dd>\n<p>Release the underlying buffer exposed by the memoryview object. Many objects take special actions when a view is held on them (for example, a <a class=\"reference internal\" href=\"#bytearray\" title=\"bytearray\"><code>bytearray</code></a> would temporarily forbid resizing); therefore, calling release() is handy to remove these restrictions (and free any dangling resources) as soon as possible.</p> <p>After this method has been called, any further operation on the view raises a <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> (except <a class=\"reference internal\" href=\"#memoryview.release\" title=\"memoryview.release\"><code>release()</code></a> itself which can be called multiple times):</p> <pre data-language=\"python\">&gt;&gt;&gt; m = memoryview(b'abc')\n&gt;&gt;&gt; m.release()\n&gt;&gt;&gt; m[0]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: operation forbidden on released memoryview object\n</pre> <p>The context management protocol can be used for a similar effect, using the <code>with</code> statement:</p> <pre data-language=\"python\">&gt;&gt;&gt; with memoryview(b'abc') as m:\n...     m[0]\n...\n97\n&gt;&gt;&gt; m[0]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: operation forbidden on released memoryview object\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"memoryview.cast\">\n<code>cast(format[, shape])</code> </dt> <dd>\n<p>Cast a memoryview to a new format or shape. <em>shape</em> defaults to <code>[byte_length//new_itemsize]</code>, which means that the result view will be one-dimensional. The return value is a new memoryview, but the buffer itself is not copied. Supported casts are 1D -&gt; C-<a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-contiguous\"><span class=\"xref std std-term\">contiguous</span></a> and C-contiguous -&gt; 1D.</p> <p>The destination format is restricted to a single element native format in <a class=\"reference internal\" href=\"struct#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> syntax. One of the formats must be a byte format (‘B’, ‘b’ or ‘c’). The byte length of the result must be the same as the original length.</p> <p>Cast 1D/long to 1D/unsigned bytes:</p> <pre data-language=\"python\">&gt;&gt;&gt; import array\n&gt;&gt;&gt; a = array.array('l', [1,2,3])\n&gt;&gt;&gt; x = memoryview(a)\n&gt;&gt;&gt; x.format\n'l'\n&gt;&gt;&gt; x.itemsize\n8\n&gt;&gt;&gt; len(x)\n3\n&gt;&gt;&gt; x.nbytes\n24\n&gt;&gt;&gt; y = x.cast('B')\n&gt;&gt;&gt; y.format\n'B'\n&gt;&gt;&gt; y.itemsize\n1\n&gt;&gt;&gt; len(y)\n24\n&gt;&gt;&gt; y.nbytes\n24\n</pre> <p>Cast 1D/unsigned bytes to 1D/char:</p> <pre data-language=\"python\">&gt;&gt;&gt; b = bytearray(b'zyz')\n&gt;&gt;&gt; x = memoryview(b)\n&gt;&gt;&gt; x[0] = b'a'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: memoryview: invalid value for format \"B\"\n&gt;&gt;&gt; y = x.cast('c')\n&gt;&gt;&gt; y[0] = b'a'\n&gt;&gt;&gt; b\nbytearray(b'ayz')\n</pre> <p>Cast 1D/bytes to 3D/ints to 1D/signed char:</p> <pre data-language=\"python\">&gt;&gt;&gt; import struct\n&gt;&gt;&gt; buf = struct.pack(\"i\"*12, *list(range(12)))\n&gt;&gt;&gt; x = memoryview(buf)\n&gt;&gt;&gt; y = x.cast('i', shape=[2,2,3])\n&gt;&gt;&gt; y.tolist()\n[[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]\n&gt;&gt;&gt; y.format\n'i'\n&gt;&gt;&gt; y.itemsize\n4\n&gt;&gt;&gt; len(y)\n2\n&gt;&gt;&gt; y.nbytes\n48\n&gt;&gt;&gt; z = y.cast('b')\n&gt;&gt;&gt; z.format\n'b'\n&gt;&gt;&gt; z.itemsize\n1\n&gt;&gt;&gt; len(z)\n48\n&gt;&gt;&gt; z.nbytes\n48\n</pre> <p>Cast 1D/unsigned long to 2D/unsigned long:</p> <pre data-language=\"python\">&gt;&gt;&gt; buf = struct.pack(\"L\"*6, *list(range(6)))\n&gt;&gt;&gt; x = memoryview(buf)\n&gt;&gt;&gt; y = x.cast('L', shape=[2,3])\n&gt;&gt;&gt; len(y)\n2\n&gt;&gt;&gt; y.nbytes\n48\n&gt;&gt;&gt; y.tolist()\n[[0, 1, 2], [3, 4, 5]]\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>The source format is no longer restricted when casting to a byte view.</p> </div> </dd>\n</dl> <p>There are also several readonly attributes available:</p> <dl class=\"attribute\"> <dt id=\"memoryview.obj\">\n<code>obj</code> </dt> <dd>\n<p>The underlying object of the memoryview:</p> <pre data-language=\"python\">&gt;&gt;&gt; b  = bytearray(b'xyz')\n&gt;&gt;&gt; m = memoryview(b)\n&gt;&gt;&gt; m.obj is b\nTrue\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.nbytes\">\n<code>nbytes</code> </dt> <dd>\n<p><code>nbytes == product(shape) * itemsize == len(m.tobytes())</code>. This is the amount of space in bytes that the array would use in a contiguous representation. It is not necessarily equal to <code>len(m)</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; import array\n&gt;&gt;&gt; a = array.array('i', [1,2,3,4,5])\n&gt;&gt;&gt; m = memoryview(a)\n&gt;&gt;&gt; len(m)\n5\n&gt;&gt;&gt; m.nbytes\n20\n&gt;&gt;&gt; y = m[::2]\n&gt;&gt;&gt; len(y)\n3\n&gt;&gt;&gt; y.nbytes\n12\n&gt;&gt;&gt; len(y.tobytes())\n12\n</pre> <p>Multi-dimensional arrays:</p> <pre data-language=\"python\">&gt;&gt;&gt; import struct\n&gt;&gt;&gt; buf = struct.pack(\"d\"*12, *[1.5*x for x in range(12)])\n&gt;&gt;&gt; x = memoryview(buf)\n&gt;&gt;&gt; y = x.cast('d', shape=[3,4])\n&gt;&gt;&gt; y.tolist()\n[[0.0, 1.5, 3.0, 4.5], [6.0, 7.5, 9.0, 10.5], [12.0, 13.5, 15.0, 16.5]]\n&gt;&gt;&gt; len(y)\n3\n&gt;&gt;&gt; y.nbytes\n96\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.readonly\">\n<code>readonly</code> </dt> <dd>\n<p>A bool indicating whether the memory is read only.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.format\">\n<code>format</code> </dt> <dd>\n<p>A string containing the format (in <a class=\"reference internal\" href=\"struct#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> module style) for each element in the view. A memoryview can be created from exporters with arbitrary format strings, but some methods (e.g. <a class=\"reference internal\" href=\"#memoryview.tolist\" title=\"memoryview.tolist\"><code>tolist()</code></a>) are restricted to native single element formats.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>format <code>'B'</code> is now handled according to the struct module syntax. This means that <code>memoryview(b'abc')[0] == b'abc'[0] == 97</code>.</p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.itemsize\">\n<code>itemsize</code> </dt> <dd>\n<p>The size in bytes of each element of the memoryview:</p> <pre data-language=\"python\">&gt;&gt;&gt; import array, struct\n&gt;&gt;&gt; m = memoryview(array.array('H', [32000, 32001, 32002]))\n&gt;&gt;&gt; m.itemsize\n2\n&gt;&gt;&gt; m[0]\n32000\n&gt;&gt;&gt; struct.calcsize('H') == m.itemsize\nTrue\n</pre> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.ndim\">\n<code>ndim</code> </dt> <dd>\n<p>An integer indicating how many dimensions of a multi-dimensional array the memory represents.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.shape\">\n<code>shape</code> </dt> <dd>\n<p>A tuple of integers the length of <a class=\"reference internal\" href=\"#memoryview.ndim\" title=\"memoryview.ndim\"><code>ndim</code></a> giving the shape of the memory as an N-dimensional array.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>An empty tuple instead of <code>None</code> when ndim = 0.</p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.strides\">\n<code>strides</code> </dt> <dd>\n<p>A tuple of integers the length of <a class=\"reference internal\" href=\"#memoryview.ndim\" title=\"memoryview.ndim\"><code>ndim</code></a> giving the size in bytes to access each element for each dimension of the array.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>An empty tuple instead of <code>None</code> when ndim = 0.</p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.suboffsets\">\n<code>suboffsets</code> </dt> <dd>\n<p>Used internally for PIL-style arrays. The value is informational only.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.c_contiguous\">\n<code>c_contiguous</code> </dt> <dd>\n<p>A bool indicating whether the memory is C-<a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-contiguous\"><span class=\"xref std std-term\">contiguous</span></a>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.f_contiguous\">\n<code>f_contiguous</code> </dt> <dd>\n<p>A bool indicating whether the memory is Fortran <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-contiguous\"><span class=\"xref std std-term\">contiguous</span></a>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"memoryview.contiguous\">\n<code>contiguous</code> </dt> <dd>\n<p>A bool indicating whether the memory is <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-contiguous\"><span class=\"xref std std-term\">contiguous</span></a>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> </dd>\n</dl> </dd>\n</dl>    <h2 id=\"types-set\">Set Types — set, frozenset</h2> <p id=\"set-types-set-frozenset\">A <em class=\"dfn\">set</em> object is an unordered collection of distinct <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-hashable\"><span class=\"xref std std-term\">hashable</span></a> objects. Common uses include membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference. (For other containers see the built-in <a class=\"reference internal\" href=\"#dict\" title=\"dict\"><code>dict</code></a>, <a class=\"reference internal\" href=\"#list\" title=\"list\"><code>list</code></a>, and <a class=\"reference internal\" href=\"#tuple\" title=\"tuple\"><code>tuple</code></a> classes, and the <a class=\"reference internal\" href=\"collections#module-collections\" title=\"collections: Container datatypes\"><code>collections</code></a> module.)</p> <p>Like other collections, sets support <code>x in set</code>, <code>len(set)</code>, and <code>for x in\nset</code>. Being an unordered collection, sets do not record element position or order of insertion. Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.</p> <p>There are currently two built-in set types, <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a> and <a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a>. The <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a> type is mutable — the contents can be changed using methods like <code>add()</code> and <code>remove()</code>. Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set. The <a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a> type is immutable and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-hashable\"><span class=\"xref std std-term\">hashable</span></a> — its contents cannot be altered after it is created; it can therefore be used as a dictionary key or as an element of another set.</p> <p>Non-empty sets (not frozensets) can be created by placing a comma-separated list of elements within braces, for example: <code>{'jack', 'sjoerd'}</code>, in addition to the <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a> constructor.</p> <p>The constructors for both classes work the same:</p> <dl class=\"class\"> <dt id=\"set\">\n<code>class set([iterable])</code> </dt> <dt id=\"frozenset\">\n<code>class frozenset([iterable])</code> </dt> <dd>\n<p>Return a new set or frozenset object whose elements are taken from <em>iterable</em>. The elements of a set must be <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-hashable\"><span class=\"xref std std-term\">hashable</span></a>. To represent sets of sets, the inner sets must be <a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a> objects. If <em>iterable</em> is not specified, a new empty set is returned.</p> <p>Sets can be created by several means:</p> <ul class=\"simple\"> <li>Use a comma-separated list of elements within braces: <code>{'jack', 'sjoerd'}</code>\n</li> <li>Use a set comprehension: <code>{c for c in 'abracadabra' if c not in 'abc'}</code>\n</li> <li>Use the type constructor: <code>set()</code>, <code>set('foobar')</code>, <code>set(['a', 'b', 'foo'])</code>\n</li> </ul> <p>Instances of <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a> and <a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a> provide the following operations:</p> <dl class=\"describe\"> <dt>\n<code>len(s)</code> </dt> <dd>\n<p>Return the number of elements in set <em>s</em> (cardinality of <em>s</em>).</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>x in s</code> </dt> <dd>\n<p>Test <em>x</em> for membership in <em>s</em>.</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>x not in s</code> </dt> <dd>\n<p>Test <em>x</em> for non-membership in <em>s</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.isdisjoint\">\n<code>isdisjoint(other)</code> </dt> <dd>\n<p>Return <code>True</code> if the set has no elements in common with <em>other</em>. Sets are disjoint if and only if their intersection is the empty set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.issubset\">\n<code>issubset(other)</code> </dt> <dt>\n<code>set &lt;= other</code> </dt> <dd>\n<p>Test whether every element in the set is in <em>other</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt>\n<code>set &lt; other</code> </dt> <dd>\n<p>Test whether the set is a proper subset of <em>other</em>, that is, <code>set &lt;= other and set != other</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.issuperset\">\n<code>issuperset(other)</code> </dt> <dt>\n<code>set &gt;= other</code> </dt> <dd>\n<p>Test whether every element in <em>other</em> is in the set.</p> </dd>\n</dl> <dl class=\"method\"> <dt>\n<code>set &gt; other</code> </dt> <dd>\n<p>Test whether the set is a proper superset of <em>other</em>, that is, <code>set &gt;=\nother and set != other</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.union\">\n<code>union(*others)</code> </dt> <dt>\n<code>set | other | ...</code> </dt> <dd>\n<p>Return a new set with elements from the set and all others.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.intersection\">\n<code>intersection(*others)</code> </dt> <dt>\n<code>set &amp; other &amp; ...</code> </dt> <dd>\n<p>Return a new set with elements common to the set and all others.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.difference\">\n<code>difference(*others)</code> </dt> <dt>\n<code>set - other - ...</code> </dt> <dd>\n<p>Return a new set with elements in the set that are not in the others.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.symmetric_difference\">\n<code>symmetric_difference(other)</code> </dt> <dt>\n<code>set ^ other</code> </dt> <dd>\n<p>Return a new set with elements in either the set or <em>other</em> but not both.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.copy\">\n<code>copy()</code> </dt> <dd>\n<p>Return a shallow copy of the set.</p> </dd>\n</dl> <p>Note, the non-operator versions of <a class=\"reference internal\" href=\"#frozenset.union\" title=\"frozenset.union\"><code>union()</code></a>, <a class=\"reference internal\" href=\"#frozenset.intersection\" title=\"frozenset.intersection\"><code>intersection()</code></a>, <a class=\"reference internal\" href=\"#frozenset.difference\" title=\"frozenset.difference\"><code>difference()</code></a>, and <a class=\"reference internal\" href=\"#frozenset.symmetric_difference\" title=\"frozenset.symmetric_difference\"><code>symmetric_difference()</code></a>, <a class=\"reference internal\" href=\"#frozenset.issubset\" title=\"frozenset.issubset\"><code>issubset()</code></a>, and <a class=\"reference internal\" href=\"#frozenset.issuperset\" title=\"frozenset.issuperset\"><code>issuperset()</code></a> methods will accept any iterable as an argument. In contrast, their operator based counterparts require their arguments to be sets. This precludes error-prone constructions like <code>set('abc') &amp; 'cbs'</code> in favor of the more readable <code>set('abc').intersection('cbs')</code>.</p> <p>Both <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a> and <a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a> support set to set comparisons. Two sets are equal if and only if every element of each set is contained in the other (each is a subset of the other). A set is less than another set if and only if the first set is a proper subset of the second set (is a subset, but is not equal). A set is greater than another set if and only if the first set is a proper superset of the second set (is a superset, but is not equal).</p> <p>Instances of <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a> are compared to instances of <a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a> based on their members. For example, <code>set('abc') == frozenset('abc')</code> returns <code>True</code> and so does <code>set('abc') in set([frozenset('abc')])</code>.</p> <p>The subset and equality comparisons do not generalize to a total ordering function. For example, any two nonempty disjoint sets are not equal and are not subsets of each other, so <em>all</em> of the following return <code>False</code>: <code>a&lt;b</code>, <code>a==b</code>, or <code>a&gt;b</code>.</p> <p>Since sets only define partial ordering (subset relationships), the output of the <a class=\"reference internal\" href=\"#list.sort\" title=\"list.sort\"><code>list.sort()</code></a> method is undefined for lists of sets.</p> <p>Set elements, like dictionary keys, must be <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-hashable\"><span class=\"xref std std-term\">hashable</span></a>.</p> <p>Binary operations that mix <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a> instances with <a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a> return the type of the first operand. For example: <code>frozenset('ab') |\nset('bc')</code> returns an instance of <a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a>.</p> <p>The following table lists operations available for <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a> that do not apply to immutable instances of <a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a>:</p> <dl class=\"method\"> <dt id=\"frozenset.update\">\n<code>update(*others)</code> </dt> <dt>\n<code>set |= other | ...</code> </dt> <dd>\n<p>Update the set, adding elements from all others.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.intersection_update\">\n<code>intersection_update(*others)</code> </dt> <dt>\n<code>set &amp;= other &amp; ...</code> </dt> <dd>\n<p>Update the set, keeping only elements found in it and all others.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.difference_update\">\n<code>difference_update(*others)</code> </dt> <dt>\n<code>set -= other | ...</code> </dt> <dd>\n<p>Update the set, removing elements found in others.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.symmetric_difference_update\">\n<code>symmetric_difference_update(other)</code> </dt> <dt>\n<code>set ^= other</code> </dt> <dd>\n<p>Update the set, keeping only elements found in either set, but not in both.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.add\">\n<code>add(elem)</code> </dt> <dd>\n<p>Add element <em>elem</em> to the set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.remove\">\n<code>remove(elem)</code> </dt> <dd>\n<p>Remove element <em>elem</em> from the set. Raises <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a> if <em>elem</em> is not contained in the set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.discard\">\n<code>discard(elem)</code> </dt> <dd>\n<p>Remove element <em>elem</em> from the set if it is present.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.pop\">\n<code>pop()</code> </dt> <dd>\n<p>Remove and return an arbitrary element from the set. Raises <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a> if the set is empty.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"frozenset.clear\">\n<code>clear()</code> </dt> <dd>\n<p>Remove all elements from the set.</p> </dd>\n</dl> <p>Note, the non-operator versions of the <a class=\"reference internal\" href=\"#frozenset.update\" title=\"frozenset.update\"><code>update()</code></a>, <a class=\"reference internal\" href=\"#frozenset.intersection_update\" title=\"frozenset.intersection_update\"><code>intersection_update()</code></a>, <a class=\"reference internal\" href=\"#frozenset.difference_update\" title=\"frozenset.difference_update\"><code>difference_update()</code></a>, and <a class=\"reference internal\" href=\"#frozenset.symmetric_difference_update\" title=\"frozenset.symmetric_difference_update\"><code>symmetric_difference_update()</code></a> methods will accept any iterable as an argument.</p> <p>Note, the <em>elem</em> argument to the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__contains__\" title=\"object.__contains__\"><code>__contains__()</code></a>, <a class=\"reference internal\" href=\"#frozenset.remove\" title=\"frozenset.remove\"><code>remove()</code></a>, and <a class=\"reference internal\" href=\"#frozenset.discard\" title=\"frozenset.discard\"><code>discard()</code></a> methods may be a set. To support searching for an equivalent frozenset, a temporary one is created from <em>elem</em>.</p> </dd>\n</dl>   <h2 id=\"typesmapping\">Mapping Types — dict</h2> <p id=\"mapping-types-dict\">A <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-mapping\"><span class=\"xref std std-term\">mapping</span></a> object maps <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-hashable\"><span class=\"xref std std-term\">hashable</span></a> values to arbitrary objects. Mappings are mutable objects. There is currently only one standard mapping type, the <em class=\"dfn\">dictionary</em>. (For other containers see the built-in <a class=\"reference internal\" href=\"#list\" title=\"list\"><code>list</code></a>, <a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a>, and <a class=\"reference internal\" href=\"#tuple\" title=\"tuple\"><code>tuple</code></a> classes, and the <a class=\"reference internal\" href=\"collections#module-collections\" title=\"collections: Container datatypes\"><code>collections</code></a> module.)</p> <p>A dictionary’s keys are <em>almost</em> arbitrary values. Values that are not <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-hashable\"><span class=\"xref std std-term\">hashable</span></a>, that is, values containing lists, dictionaries or other mutable types (that are compared by value rather than by object identity) may not be used as keys. Numeric types used for keys obey the normal rules for numeric comparison: if two numbers compare equal (such as <code>1</code> and <code>1.0</code>) then they can be used interchangeably to index the same dictionary entry. (Note however, that since computers store floating-point numbers as approximations it is usually unwise to use them as dictionary keys.)</p> <p>Dictionaries can be created by placing a comma-separated list of <code>key: value</code> pairs within braces, for example: <code>{'jack': 4098, 'sjoerd': 4127}</code> or <code>{4098:\n'jack', 4127: 'sjoerd'}</code>, or by the <a class=\"reference internal\" href=\"#dict\" title=\"dict\"><code>dict</code></a> constructor.</p> <dl class=\"class\"> <dt id=\"dict\">\n<code>class dict(**kwarg)</code> </dt> <dt>\n<code>class dict(mapping, **kwarg)</code> </dt> <dt>\n<code>class dict(iterable, **kwarg)</code> </dt> <dd>\n<p>Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments.</p> <p>Dictionaries can be created by several means:</p> <ul class=\"simple\"> <li>Use a comma-separated list of <code>key: value</code> pairs within braces: <code>{'jack': 4098, 'sjoerd': 4127}</code> or <code>{4098: 'jack', 4127: 'sjoerd'}</code>\n</li> <li>Use a dict comprehension: <code>{}</code>, <code>{x: x ** 2 for x in range(10)}</code>\n</li> <li>Use the type constructor: <code>dict()</code>, <code>dict([('foo', 100), ('bar', 200)])</code>, <code>dict(foo=100, bar=200)</code>\n</li> </ul> <p>If no positional argument is given, an empty dictionary is created. If a positional argument is given and it is a mapping object, a dictionary is created with the same key-value pairs as the mapping object. Otherwise, the positional argument must be an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-iterable\"><span class=\"xref std std-term\">iterable</span></a> object. Each item in the iterable must itself be an iterable with exactly two objects. The first object of each item becomes a key in the new dictionary, and the second object the corresponding value. If a key occurs more than once, the last value for that key becomes the corresponding value in the new dictionary.</p> <p>If keyword arguments are given, the keyword arguments and their values are added to the dictionary created from the positional argument. If a key being added is already present, the value from the keyword argument replaces the value from the positional argument.</p> <p>To illustrate, the following examples all return a dictionary equal to <code>{\"one\": 1, \"two\": 2, \"three\": 3}</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; a = dict(one=1, two=2, three=3)\n&gt;&gt;&gt; b = {'one': 1, 'two': 2, 'three': 3}\n&gt;&gt;&gt; c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\n&gt;&gt;&gt; d = dict([('two', 2), ('one', 1), ('three', 3)])\n&gt;&gt;&gt; e = dict({'three': 3, 'one': 1, 'two': 2})\n&gt;&gt;&gt; f = dict({'one': 1, 'three': 3}, two=2)\n&gt;&gt;&gt; a == b == c == d == e == f\nTrue\n</pre> <p>Providing keyword arguments as in the first example only works for keys that are valid Python identifiers. Otherwise, any valid keys can be used.</p> <p>These are the operations that dictionaries support (and therefore, custom mapping types should support too):</p> <dl class=\"describe\"> <dt>\n<code>list(d)</code> </dt> <dd>\n<p>Return a list of all the keys used in the dictionary <em>d</em>.</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>len(d)</code> </dt> <dd>\n<p>Return the number of items in the dictionary <em>d</em>.</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>d[key]</code> </dt> <dd>\n<p>Return the item of <em>d</em> with key <em>key</em>. Raises a <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a> if <em>key</em> is not in the map.</p> <p id=\"index-51\">If a subclass of dict defines a method <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__missing__\" title=\"object.__missing__\"><code>__missing__()</code></a> and <em>key</em> is not present, the <code>d[key]</code> operation calls that method with the key <em>key</em> as argument. The <code>d[key]</code> operation then returns or raises whatever is returned or raised by the <code>__missing__(key)</code> call. No other operations or methods invoke <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__missing__\" title=\"object.__missing__\"><code>__missing__()</code></a>. If <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__missing__\" title=\"object.__missing__\"><code>__missing__()</code></a> is not defined, <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a> is raised. <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__missing__\" title=\"object.__missing__\"><code>__missing__()</code></a> must be a method; it cannot be an instance variable:</p> <pre data-language=\"python\">&gt;&gt;&gt; class Counter(dict):\n...     def __missing__(self, key):\n...         return 0\n&gt;&gt;&gt; c = Counter()\n&gt;&gt;&gt; c['red']\n0\n&gt;&gt;&gt; c['red'] += 1\n&gt;&gt;&gt; c['red']\n1\n</pre> <p>The example above shows part of the implementation of <a class=\"reference internal\" href=\"collections#collections.Counter\" title=\"collections.Counter\"><code>collections.Counter</code></a>. A different <code>__missing__</code> method is used by <a class=\"reference internal\" href=\"collections#collections.defaultdict\" title=\"collections.defaultdict\"><code>collections.defaultdict</code></a>.</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>d[key] = value</code> </dt> <dd>\n<p>Set <code>d[key]</code> to <em>value</em>.</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>del d[key]</code> </dt> <dd>\n<p>Remove <code>d[key]</code> from <em>d</em>. Raises a <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a> if <em>key</em> is not in the map.</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>key in d</code> </dt> <dd>\n<p>Return <code>True</code> if <em>d</em> has a key <em>key</em>, else <code>False</code>.</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>key not in d</code> </dt> <dd>\n<p>Equivalent to <code>not key in d</code>.</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>iter(d)</code> </dt> <dd>\n<p>Return an iterator over the keys of the dictionary. This is a shortcut for <code>iter(d.keys())</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.clear\">\n<code>clear()</code> </dt> <dd>\n<p>Remove all items from the dictionary.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.copy\">\n<code>copy()</code> </dt> <dd>\n<p>Return a shallow copy of the dictionary.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.fromkeys\">\n<code>classmethod fromkeys(iterable[, value])</code> </dt> <dd>\n<p>Create a new dictionary with keys from <em>iterable</em> and values set to <em>value</em>.</p> <p><a class=\"reference internal\" href=\"#dict.fromkeys\" title=\"dict.fromkeys\"><code>fromkeys()</code></a> is a class method that returns a new dictionary. <em>value</em> defaults to <code>None</code>. All of the values refer to just a single instance, so it generally doesn’t make sense for <em>value</em> to be a mutable object such as an empty list. To get distinct values, use a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#dict\"><span class=\"std std-ref\">dict comprehension</span></a> instead.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.get\">\n<code>get(key[, default])</code> </dt> <dd>\n<p>Return the value for <em>key</em> if <em>key</em> is in the dictionary, else <em>default</em>. If <em>default</em> is not given, it defaults to <code>None</code>, so that this method never raises a <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.items\">\n<code>items()</code> </dt> <dd>\n<p>Return a new view of the dictionary’s items (<code>(key, value)</code> pairs). See the <a class=\"reference internal\" href=\"#dict-views\"><span class=\"std std-ref\">documentation of view objects</span></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.keys\">\n<code>keys()</code> </dt> <dd>\n<p>Return a new view of the dictionary’s keys. See the <a class=\"reference internal\" href=\"#dict-views\"><span class=\"std std-ref\">documentation of view objects</span></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.pop\">\n<code>pop(key[, default])</code> </dt> <dd>\n<p>If <em>key</em> is in the dictionary, remove it and return its value, else return <em>default</em>. If <em>default</em> is not given and <em>key</em> is not in the dictionary, a <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a> is raised.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.popitem\">\n<code>popitem()</code> </dt> <dd>\n<p>Remove and return a <code>(key, value)</code> pair from the dictionary. Pairs are returned in <abbr title=\"last-in, first-out\">LIFO</abbr> order.</p> <p><a class=\"reference internal\" href=\"#dict.popitem\" title=\"dict.popitem\"><code>popitem()</code></a> is useful to destructively iterate over a dictionary, as often used in set algorithms. If the dictionary is empty, calling <a class=\"reference internal\" href=\"#dict.popitem\" title=\"dict.popitem\"><code>popitem()</code></a> raises a <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>LIFO order is now guaranteed. In prior versions, <a class=\"reference internal\" href=\"#dict.popitem\" title=\"dict.popitem\"><code>popitem()</code></a> would return an arbitrary key/value pair.</p> </div> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>reversed(d)</code> </dt> <dd>\n<p>Return a reverse iterator over the keys of the dictionary. This is a shortcut for <code>reversed(d.keys())</code>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.8.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.setdefault\">\n<code>setdefault(key[, default])</code> </dt> <dd>\n<p>If <em>key</em> is in the dictionary, return its value. If not, insert <em>key</em> with a value of <em>default</em> and return <em>default</em>. <em>default</em> defaults to <code>None</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.update\">\n<code>update([other])</code> </dt> <dd>\n<p>Update the dictionary with the key/value pairs from <em>other</em>, overwriting existing keys. Return <code>None</code>.</p> <p><a class=\"reference internal\" href=\"#dict.update\" title=\"dict.update\"><code>update()</code></a> accepts either another dictionary object or an iterable of key/value pairs (as tuples or other iterables of length two). If keyword arguments are specified, the dictionary is then updated with those key/value pairs: <code>d.update(red=1, blue=2)</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"dict.values\">\n<code>values()</code> </dt> <dd>\n<p>Return a new view of the dictionary’s values. See the <a class=\"reference internal\" href=\"#dict-views\"><span class=\"std std-ref\">documentation of view objects</span></a>.</p> <p>An equality comparison between one <code>dict.values()</code> view and another will always return <code>False</code>. This also applies when comparing <code>dict.values()</code> to itself:</p> <pre data-language=\"python\">&gt;&gt;&gt; d = {'a': 1}\n&gt;&gt;&gt; d.values() == d.values()\nFalse\n</pre> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>d | other</code> </dt> <dd>\n<p>Create a new dictionary with the merged keys and values of <em>d</em> and <em>other</em>, which must both be dictionaries. The values of <em>other</em> take priority when <em>d</em> and <em>other</em> share keys.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.9.</span></p> </div> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>d |= other</code> </dt> <dd>\n<p>Update the dictionary <em>d</em> with keys and values from <em>other</em>, which may be either a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-mapping\"><span class=\"xref std std-term\">mapping</span></a> or an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-iterable\"><span class=\"xref std std-term\">iterable</span></a> of key/value pairs. The values of <em>other</em> take priority when <em>d</em> and <em>other</em> share keys.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.9.</span></p> </div> </dd>\n</dl> <p>Dictionaries compare equal if and only if they have the same <code>(key,\nvalue)</code> pairs (regardless of ordering). Order comparisons (‘&lt;’, ‘&lt;=’, ‘&gt;=’, ‘&gt;’) raise <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a>.</p> <p>Dictionaries preserve insertion order. Note that updating a key does not affect the order. Keys added after deletion are inserted at the end.</p> <pre data-language=\"python\">&gt;&gt;&gt; d = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n&gt;&gt;&gt; d\n{'one': 1, 'two': 2, 'three': 3, 'four': 4}\n&gt;&gt;&gt; list(d)\n['one', 'two', 'three', 'four']\n&gt;&gt;&gt; list(d.values())\n[1, 2, 3, 4]\n&gt;&gt;&gt; d[\"one\"] = 42\n&gt;&gt;&gt; d\n{'one': 42, 'two': 2, 'three': 3, 'four': 4}\n&gt;&gt;&gt; del d[\"two\"]\n&gt;&gt;&gt; d[\"two\"] = None\n&gt;&gt;&gt; d\n{'one': 42, 'three': 3, 'four': 4, 'two': None}\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Dictionary order is guaranteed to be insertion order. This behavior was an implementation detail of CPython from 3.6.</p> </div> <p>Dictionaries and dictionary views are reversible.</p> <pre data-language=\"python\">&gt;&gt;&gt; d = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n&gt;&gt;&gt; d\n{'one': 1, 'two': 2, 'three': 3, 'four': 4}\n&gt;&gt;&gt; list(reversed(d))\n['four', 'three', 'two', 'one']\n&gt;&gt;&gt; list(reversed(d.values()))\n[4, 3, 2, 1]\n&gt;&gt;&gt; list(reversed(d.items()))\n[('four', 4), ('three', 3), ('two', 2), ('one', 1)]\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>Dictionaries are now reversible.</p> </div> </dd>\n</dl> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <p><a class=\"reference internal\" href=\"types#types.MappingProxyType\" title=\"types.MappingProxyType\"><code>types.MappingProxyType</code></a> can be used to create a read-only view of a <a class=\"reference internal\" href=\"#dict\" title=\"dict\"><code>dict</code></a>.</p> </div>  <h3 id=\"dict-views\">Dictionary view objects</h3> <p id=\"dictionary-view-objects\">The objects returned by <a class=\"reference internal\" href=\"#dict.keys\" title=\"dict.keys\"><code>dict.keys()</code></a>, <a class=\"reference internal\" href=\"#dict.values\" title=\"dict.values\"><code>dict.values()</code></a> and <a class=\"reference internal\" href=\"#dict.items\" title=\"dict.items\"><code>dict.items()</code></a> are <em>view objects</em>. They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes.</p> <p>Dictionary views can be iterated over to yield their respective data, and support membership tests:</p> <dl class=\"describe\"> <dt>\n<code>len(dictview)</code> </dt> <dd>\n<p>Return the number of entries in the dictionary.</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>iter(dictview)</code> </dt> <dd>\n<p>Return an iterator over the keys, values or items (represented as tuples of <code>(key, value)</code>) in the dictionary.</p> <p>Keys and values are iterated over in insertion order. This allows the creation of <code>(value, key)</code> pairs using <a class=\"reference internal\" href=\"functions#zip\" title=\"zip\"><code>zip()</code></a>: <code>pairs = zip(d.values(), d.keys())</code>. Another way to create the same list is <code>pairs = [(v, k) for (k, v) in d.items()]</code>.</p> <p>Iterating views while adding or deleting entries in the dictionary may raise a <a class=\"reference internal\" href=\"exceptions#RuntimeError\" title=\"RuntimeError\"><code>RuntimeError</code></a> or fail to iterate over all entries.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Dictionary order is guaranteed to be insertion order.</p> </div> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>x in dictview</code> </dt> <dd>\n<p>Return <code>True</code> if <em>x</em> is in the underlying dictionary’s keys, values or items (in the latter case, <em>x</em> should be a <code>(key, value)</code> tuple).</p> </dd>\n</dl> <dl class=\"describe\"> <dt>\n<code>reversed(dictview)</code> </dt> <dd>\n<p>Return a reverse iterator over the keys, values or items of the dictionary. The view will be iterated in reverse order of the insertion.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>Dictionary views are now reversible.</p> </div> </dd>\n</dl> <p>Keys views are set-like since their entries are unique and hashable. If all values are hashable, so that <code>(key, value)</code> pairs are unique and hashable, then the items view is also set-like. (Values views are not treated as set-like since the entries are generally not unique.) For set-like views, all of the operations defined for the abstract base class <a class=\"reference internal\" href=\"collections.abc#collections.abc.Set\" title=\"collections.abc.Set\"><code>collections.abc.Set</code></a> are available (for example, <code>==</code>, <code>&lt;</code>, or <code>^</code>).</p> <p>An example of dictionary view usage:</p> <pre data-language=\"python\">&gt;&gt;&gt; dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}\n&gt;&gt;&gt; keys = dishes.keys()\n&gt;&gt;&gt; values = dishes.values()\n\n&gt;&gt;&gt; # iteration\n&gt;&gt;&gt; n = 0\n&gt;&gt;&gt; for val in values:\n...     n += val\n&gt;&gt;&gt; print(n)\n504\n\n&gt;&gt;&gt; # keys and values are iterated over in the same order (insertion order)\n&gt;&gt;&gt; list(keys)\n['eggs', 'sausage', 'bacon', 'spam']\n&gt;&gt;&gt; list(values)\n[2, 1, 1, 500]\n\n&gt;&gt;&gt; # view objects are dynamic and reflect dict changes\n&gt;&gt;&gt; del dishes['eggs']\n&gt;&gt;&gt; del dishes['sausage']\n&gt;&gt;&gt; list(keys)\n['bacon', 'spam']\n\n&gt;&gt;&gt; # set operations\n&gt;&gt;&gt; keys &amp; {'eggs', 'bacon', 'salad'}\n{'bacon'}\n&gt;&gt;&gt; keys ^ {'sausage', 'juice'}\n{'juice', 'sausage', 'bacon', 'spam'}\n</pre>    <h2 id=\"typecontextmanager\">Context Manager Types</h2> <p id=\"context-manager-types\">Python’s <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#with\"><code>with</code></a> statement supports the concept of a runtime context defined by a context manager. This is implemented using a pair of methods that allow user-defined classes to define a runtime context that is entered before the statement body is executed and exited when the statement ends:</p> <dl class=\"method\"> <dt id=\"contextmanager.__enter__\">\n<code>contextmanager.__enter__()</code> </dt> <dd>\n<p>Enter the runtime context and return either this object or another object related to the runtime context. The value returned by this method is bound to the identifier in the <code>as</code> clause of <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#with\"><code>with</code></a> statements using this context manager.</p> <p>An example of a context manager that returns itself is a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-file-object\"><span class=\"xref std std-term\">file object</span></a>. File objects return themselves from __enter__() to allow <a class=\"reference internal\" href=\"functions#open\" title=\"open\"><code>open()</code></a> to be used as the context expression in a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#with\"><code>with</code></a> statement.</p> <p>An example of a context manager that returns a related object is the one returned by <a class=\"reference internal\" href=\"decimal#decimal.localcontext\" title=\"decimal.localcontext\"><code>decimal.localcontext()</code></a>. These managers set the active decimal context to a copy of the original decimal context and then return the copy. This allows changes to be made to the current decimal context in the body of the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#with\"><code>with</code></a> statement without affecting code outside the <code>with</code> statement.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"contextmanager.__exit__\">\n<code>contextmanager.__exit__(exc_type, exc_val, exc_tb)</code> </dt> <dd>\n<p>Exit the runtime context and return a Boolean flag indicating if any exception that occurred should be suppressed. If an exception occurred while executing the body of the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#with\"><code>with</code></a> statement, the arguments contain the exception type, value and traceback information. Otherwise, all three arguments are <code>None</code>.</p> <p>Returning a true value from this method will cause the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#with\"><code>with</code></a> statement to suppress the exception and continue execution with the statement immediately following the <code>with</code> statement. Otherwise the exception continues propagating after this method has finished executing. Exceptions that occur during execution of this method will replace any exception that occurred in the body of the <code>with</code> statement.</p> <p>The exception passed in should never be reraised explicitly - instead, this method should return a false value to indicate that the method completed successfully and does not want to suppress the raised exception. This allows context management code to easily detect whether or not an <a class=\"reference internal\" href=\"#contextmanager.__exit__\" title=\"contextmanager.__exit__\"><code>__exit__()</code></a> method has actually failed.</p> </dd>\n</dl> <p>Python defines several context managers to support easy thread synchronisation, prompt closure of files or other objects, and simpler manipulation of the active decimal arithmetic context. The specific types are not treated specially beyond their implementation of the context management protocol. See the <a class=\"reference internal\" href=\"contextlib#module-contextlib\" title=\"contextlib: Utilities for with-statement contexts.\"><code>contextlib</code></a> module for some examples.</p> <p>Python’s <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generator\"><span class=\"xref std std-term\">generator</span></a>s and the <a class=\"reference internal\" href=\"contextlib#contextlib.contextmanager\" title=\"contextlib.contextmanager\"><code>contextlib.contextmanager</code></a> decorator provide a convenient way to implement these protocols. If a generator function is decorated with the <a class=\"reference internal\" href=\"contextlib#contextlib.contextmanager\" title=\"contextlib.contextmanager\"><code>contextlib.contextmanager</code></a> decorator, it will return a context manager implementing the necessary <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__enter__\" title=\"object.__enter__\"><code>__enter__()</code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__exit__\" title=\"object.__exit__\"><code>__exit__()</code></a> methods, rather than the iterator produced by an undecorated generator function.</p> <p>Note that there is no specific slot for any of these methods in the type structure for Python objects in the Python/C API. Extension types wanting to define these methods must provide them as a normal Python accessible method. Compared to the overhead of setting up the runtime context, the overhead of a single class dictionary lookup is negligible.</p>   <h2 id=\"types-genericalias\">Generic Alias Type</h2> <p id=\"generic-alias-type\"><code>GenericAlias</code> objects are created by subscripting a class (usually a container), such as <code>list[int]</code>. They are intended primarily for <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-annotation\"><span class=\"xref std std-term\">type annotations</span></a>.</p> <p>Usually, the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#subscriptions\"><span class=\"std std-ref\">subscription</span></a> of container objects calls the method <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><code>__getitem__()</code></a> of the object. However, the subscription of some containers’ classes may call the classmethod <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__\" title=\"object.__class_getitem__\"><code>__class_getitem__()</code></a> of the class instead. The classmethod <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__\" title=\"object.__class_getitem__\"><code>__class_getitem__()</code></a> should return a <code>GenericAlias</code> object.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>If the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><code>__getitem__()</code></a> of the class’ metaclass is present, it will take precedence over the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__\" title=\"object.__class_getitem__\"><code>__class_getitem__()</code></a> defined in the class (see <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0560\" id=\"index-54\"><strong>PEP 560</strong></a> for more details).</p> </div> <p>The <code>GenericAlias</code> object acts as a proxy for <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generic-type\"><span class=\"xref std std-term\">generic types</span></a>, implementing <em>parameterized generics</em> - a specific instance of a generic which provides the types for container elements.</p> <p>The user-exposed type for the <code>GenericAlias</code> object can be accessed from <a class=\"reference internal\" href=\"types#types.GenericAlias\" title=\"types.GenericAlias\"><code>types.GenericAlias</code></a> and used for <a class=\"reference internal\" href=\"functions#isinstance\" title=\"isinstance\"><code>isinstance()</code></a> checks. It can also be used to create <code>GenericAlias</code> objects directly.</p> <dl class=\"describe\"> <dt>\n<code>T[X, Y, ...]</code> </dt> <dd>\n<p>Creates a <code>GenericAlias</code> representing a type <code>T</code> containing elements of types <em>X</em>, <em>Y</em>, and more depending on the <code>T</code> used. For example, a function expecting a <a class=\"reference internal\" href=\"#list\" title=\"list\"><code>list</code></a> containing <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a> elements:</p> <pre data-language=\"python\">def average(values: list[float]) -&gt; float:\n    return sum(values) / len(values)\n</pre> <p>Another example for <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-mapping\"><span class=\"xref std std-term\">mapping</span></a> objects, using a <a class=\"reference internal\" href=\"#dict\" title=\"dict\"><code>dict</code></a>, which is a generic type expecting two type parameters representing the key type and the value type. In this example, the function expects a <code>dict</code> with keys of type <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str</code></a> and values of type <a class=\"reference internal\" href=\"functions#int\" title=\"int\"><code>int</code></a>:</p> <pre data-language=\"python\">def send_post_request(url: str, body: dict[str, int]) -&gt; None:\n    ...\n</pre> </dd>\n</dl> <p>The builtin functions <a class=\"reference internal\" href=\"functions#isinstance\" title=\"isinstance\"><code>isinstance()</code></a> and <a class=\"reference internal\" href=\"functions#issubclass\" title=\"issubclass\"><code>issubclass()</code></a> do not accept <code>GenericAlias</code> types for their second argument:</p> <pre data-language=\"python\">&gt;&gt;&gt; isinstance([1, 2], list[str])\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: isinstance() argument 2 cannot be a parameterized generic\n</pre> <p>The Python runtime does not enforce <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-annotation\"><span class=\"xref std std-term\">type annotations</span></a>. This extends to generic types and their type parameters. When creating an object from a <code>GenericAlias</code>, container elements are not checked against their type. For example, the following code is discouraged, but will run without errors:</p> <pre data-language=\"python\">&gt;&gt;&gt; t = list[str]\n&gt;&gt;&gt; t([1, 2, 3])\n[1, 2, 3]\n</pre> <p>Furthermore, parameterized generics erase type parameters during object creation:</p> <pre data-language=\"python\">&gt;&gt;&gt; t = list[str]\n&gt;&gt;&gt; type(t)\n&lt;class 'types.GenericAlias'&gt;\n\n&gt;&gt;&gt; l = t()\n&gt;&gt;&gt; type(l)\n&lt;class 'list'&gt;\n</pre> <p>Calling <a class=\"reference internal\" href=\"functions#repr\" title=\"repr\"><code>repr()</code></a> or <a class=\"reference internal\" href=\"#str\" title=\"str\"><code>str()</code></a> on a generic shows the parameterized type:</p> <pre data-language=\"python\">&gt;&gt;&gt; repr(list[int])\n'list[int]'\n\n&gt;&gt;&gt; str(list[int])\n'list[int]'\n</pre> <p>The <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><code>__getitem__()</code></a> method of generics will raise an exception to disallow mistakes like <code>dict[str][str]</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; dict[str][str]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: There are no type variables left in dict[str]\n</pre> <p>However, such expressions are valid when <a class=\"reference internal\" href=\"typing#generics\"><span class=\"std std-ref\">type variables</span></a> are used. The index must have as many elements as there are type variable items in the <code>GenericAlias</code> object’s <a class=\"reference internal\" href=\"#genericalias.__args__\" title=\"genericalias.__args__\"><code>__args__</code></a>.</p> <pre data-language=\"python\">&gt;&gt;&gt; from typing import TypeVar\n&gt;&gt;&gt; Y = TypeVar('Y')\n&gt;&gt;&gt; dict[str, Y][int]\ndict[str, int]\n</pre>  <h3 id=\"standard-generic-collections\">Standard Generic Collections</h3> <p>These standard library collections support parameterized generics.</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#tuple\" title=\"tuple\"><code>tuple</code></a></li> <li><a class=\"reference internal\" href=\"#list\" title=\"list\"><code>list</code></a></li> <li><a class=\"reference internal\" href=\"#dict\" title=\"dict\"><code>dict</code></a></li> <li><a class=\"reference internal\" href=\"#set\" title=\"set\"><code>set</code></a></li> <li><a class=\"reference internal\" href=\"#frozenset\" title=\"frozenset\"><code>frozenset</code></a></li> <li><a class=\"reference internal\" href=\"functions#type\" title=\"type\"><code>type</code></a></li> <li><a class=\"reference internal\" href=\"collections#collections.deque\" title=\"collections.deque\"><code>collections.deque</code></a></li> <li><a class=\"reference internal\" href=\"collections#collections.defaultdict\" title=\"collections.defaultdict\"><code>collections.defaultdict</code></a></li> <li><a class=\"reference internal\" href=\"collections#collections.OrderedDict\" title=\"collections.OrderedDict\"><code>collections.OrderedDict</code></a></li> <li><a class=\"reference internal\" href=\"collections#collections.Counter\" title=\"collections.Counter\"><code>collections.Counter</code></a></li> <li><a class=\"reference internal\" href=\"collections#collections.ChainMap\" title=\"collections.ChainMap\"><code>collections.ChainMap</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Awaitable\" title=\"collections.abc.Awaitable\"><code>collections.abc.Awaitable</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Coroutine\" title=\"collections.abc.Coroutine\"><code>collections.abc.Coroutine</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.AsyncIterable\" title=\"collections.abc.AsyncIterable\"><code>collections.abc.AsyncIterable</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.AsyncIterator\" title=\"collections.abc.AsyncIterator\"><code>collections.abc.AsyncIterator</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.AsyncGenerator\" title=\"collections.abc.AsyncGenerator\"><code>collections.abc.AsyncGenerator</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Iterable\" title=\"collections.abc.Iterable\"><code>collections.abc.Iterable</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Iterator\" title=\"collections.abc.Iterator\"><code>collections.abc.Iterator</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Generator\" title=\"collections.abc.Generator\"><code>collections.abc.Generator</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Reversible\" title=\"collections.abc.Reversible\"><code>collections.abc.Reversible</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Container\" title=\"collections.abc.Container\"><code>collections.abc.Container</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Collection\" title=\"collections.abc.Collection\"><code>collections.abc.Collection</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Callable\" title=\"collections.abc.Callable\"><code>collections.abc.Callable</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Set\" title=\"collections.abc.Set\"><code>collections.abc.Set</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.MutableSet\" title=\"collections.abc.MutableSet\"><code>collections.abc.MutableSet</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Mapping\" title=\"collections.abc.Mapping\"><code>collections.abc.Mapping</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.MutableMapping\" title=\"collections.abc.MutableMapping\"><code>collections.abc.MutableMapping</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.Sequence\" title=\"collections.abc.Sequence\"><code>collections.abc.Sequence</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.MutableSequence\" title=\"collections.abc.MutableSequence\"><code>collections.abc.MutableSequence</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.ByteString\" title=\"collections.abc.ByteString\"><code>collections.abc.ByteString</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.MappingView\" title=\"collections.abc.MappingView\"><code>collections.abc.MappingView</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.KeysView\" title=\"collections.abc.KeysView\"><code>collections.abc.KeysView</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.ItemsView\" title=\"collections.abc.ItemsView\"><code>collections.abc.ItemsView</code></a></li> <li><a class=\"reference internal\" href=\"collections.abc#collections.abc.ValuesView\" title=\"collections.abc.ValuesView\"><code>collections.abc.ValuesView</code></a></li> <li><a class=\"reference internal\" href=\"contextlib#contextlib.AbstractContextManager\" title=\"contextlib.AbstractContextManager\"><code>contextlib.AbstractContextManager</code></a></li> <li><a class=\"reference internal\" href=\"contextlib#contextlib.AbstractAsyncContextManager\" title=\"contextlib.AbstractAsyncContextManager\"><code>contextlib.AbstractAsyncContextManager</code></a></li> <li><a class=\"reference internal\" href=\"re#re-objects\"><span class=\"std std-ref\">re.Pattern</span></a></li> <li><a class=\"reference internal\" href=\"re#match-objects\"><span class=\"std std-ref\">re.Match</span></a></li> </ul>   <h3 id=\"special-attributes-of-generic-alias\">Special Attributes of Generic Alias</h3> <p>All parameterized generics implement special read-only attributes.</p> <dl class=\"attribute\"> <dt id=\"genericalias.__origin__\">\n<code>genericalias.__origin__</code> </dt> <dd>\n<p>This attribute points at the non-parameterized generic class:</p> <pre data-language=\"python\">&gt;&gt;&gt; list[int].__origin__\n&lt;class 'list'&gt;\n</pre> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"genericalias.__args__\">\n<code>genericalias.__args__</code> </dt> <dd>\n<p>This attribute is a <a class=\"reference internal\" href=\"#tuple\" title=\"tuple\"><code>tuple</code></a> (possibly of length 1) of generic types passed to the original <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__\" title=\"object.__class_getitem__\"><code>__class_getitem__()</code></a> of the generic container:</p> <pre data-language=\"python\">&gt;&gt;&gt; dict[str, list[int]].__args__\n(&lt;class 'str'&gt;, list[int])\n</pre> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"genericalias.__parameters__\">\n<code>genericalias.__parameters__</code> </dt> <dd>\n<p>This attribute is a lazily computed tuple (possibly empty) of unique type variables found in <code>__args__</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; from typing import TypeVar\n\n&gt;&gt;&gt; T = TypeVar('T')\n&gt;&gt;&gt; list[T].__parameters__\n(~T,)\n</pre> </dd>\n</dl> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <ul class=\"simple\"> <li>\n<a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0585\" id=\"index-55\"><strong>PEP 585</strong></a> – “Type Hinting Generics In Standard Collections”</li> <li>\n<a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__\" title=\"object.__class_getitem__\"><code>__class_getitem__()</code></a> – Used to implement parameterized generics.</li> <li>\n<a class=\"reference internal\" href=\"typing#generics\"><span class=\"std std-ref\">Generics</span></a> – Generics in the <a class=\"reference internal\" href=\"typing#module-typing\" title=\"typing: Support for type hints (see :pep:`484`).\"><code>typing</code></a> module.</li> </ul> </div> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.9.</span></p> </div>    <h2 id=\"typesother\">Other Built-in Types</h2> <p id=\"other-built-in-types\">The interpreter supports several other kinds of objects. Most of these support only one or two operations.</p>  <h3 id=\"typesmodules\">Modules</h3> <p id=\"modules\">The only special operation on a module is attribute access: <code>m.name</code>, where <em>m</em> is a module and <em>name</em> accesses a name defined in <em>m</em>’s symbol table. Module attributes can be assigned to. (Note that the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#import\"><code>import</code></a> statement is not, strictly speaking, an operation on a module object; <code>import\nfoo</code> does not require a module object named <em>foo</em> to exist, rather it requires an (external) <em>definition</em> for a module named <em>foo</em> somewhere.)</p> <p>A special attribute of every module is <a class=\"reference internal\" href=\"#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a>. This is the dictionary containing the module’s symbol table. Modifying this dictionary will actually change the module’s symbol table, but direct assignment to the <a class=\"reference internal\" href=\"#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a> attribute is not possible (you can write <code>m.__dict__['a'] = 1</code>, which defines <code>m.a</code> to be <code>1</code>, but you can’t write <code>m.__dict__ = {}</code>). Modifying <a class=\"reference internal\" href=\"#object.__dict__\" title=\"object.__dict__\"><code>__dict__</code></a> directly is not recommended.</p> <p>Modules built into the interpreter are written like this: <code>&lt;module 'sys'\n(built-in)&gt;</code>. If loaded from a file, they are written as <code>&lt;module 'os' from\n'/usr/local/lib/pythonX.Y/os.pyc'&gt;</code>.</p>   <h3 id=\"typesobjects\">Classes and Class Instances</h3> <p id=\"classes-and-class-instances\">See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#objects\"><span class=\"std std-ref\">Objects, values and types</span></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#class\"><span class=\"std std-ref\">Class definitions</span></a> for these.</p>   <h3 id=\"typesfunctions\">Functions</h3> <p id=\"functions\">Function objects are created by function definitions. The only operation on a function object is to call it: <code>func(argument-list)</code>.</p> <p>There are really two flavors of function objects: built-in functions and user-defined functions. Both support the same operation (to call the function), but the implementation is different, hence the different object types.</p> <p>See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#function\"><span class=\"std std-ref\">Function definitions</span></a> for more information.</p>   <h3 id=\"typesmethods\">Methods</h3> <p id=\"methods\">Methods are functions that are called using the attribute notation. There are two flavors: built-in methods (such as <code>append()</code> on lists) and class instance methods. Built-in methods are described with the types that support them.</p> <p>If you access a method (a function defined in a class namespace) through an instance, you get a special object: a <em class=\"dfn\">bound method</em> (also called <em class=\"dfn\">instance method</em>) object. When called, it will add the <code>self</code> argument to the argument list. Bound methods have two special read-only attributes: <code>m.__self__</code> is the object on which the method operates, and <code>m.__func__</code> is the function implementing the method. Calling <code>m(arg-1, arg-2, ..., arg-n)</code> is completely equivalent to calling <code>m.__func__(m.__self__, arg-1, arg-2, ...,\narg-n)</code>.</p> <p>Like function objects, bound method objects support getting arbitrary attributes. However, since method attributes are actually stored on the underlying function object (<code>meth.__func__</code>), setting method attributes on bound methods is disallowed. Attempting to set an attribute on a method results in an <a class=\"reference internal\" href=\"exceptions#AttributeError\" title=\"AttributeError\"><code>AttributeError</code></a> being raised. In order to set a method attribute, you need to explicitly set it on the underlying function object:</p> <pre data-language=\"python\">&gt;&gt;&gt; class C:\n...     def method(self):\n...         pass\n...\n&gt;&gt;&gt; c = C()\n&gt;&gt;&gt; c.method.whoami = 'my name is method'  # can't set on the method\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'method' object has no attribute 'whoami'\n&gt;&gt;&gt; c.method.__func__.whoami = 'my name is method'\n&gt;&gt;&gt; c.method.whoami\n'my name is method'\n</pre> <p>See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#types\"><span class=\"std std-ref\">The standard type hierarchy</span></a> for more information.</p>   <h3 id=\"index-57\">Code Objects</h3> <p id=\"code-objects\">Code objects are used by the implementation to represent “pseudo-compiled” executable Python code such as a function body. They differ from function objects because they don’t contain a reference to their global execution environment. Code objects are returned by the built-in <a class=\"reference internal\" href=\"functions#compile\" title=\"compile\"><code>compile()</code></a> function and can be extracted from function objects through their <code>__code__</code> attribute. See also the <a class=\"reference internal\" href=\"code#module-code\" title=\"code: Facilities to implement read-eval-print loops.\"><code>code</code></a> module.</p> <p id=\"index-59\">A code object can be executed or evaluated by passing it (instead of a source string) to the <a class=\"reference internal\" href=\"functions#exec\" title=\"exec\"><code>exec()</code></a> or <a class=\"reference internal\" href=\"functions#eval\" title=\"eval\"><code>eval()</code></a> built-in functions.</p> <p>See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#types\"><span class=\"std std-ref\">The standard type hierarchy</span></a> for more information.</p>   <h3 id=\"bltin-type-objects\">Type Objects</h3> <p id=\"type-objects\">Type objects represent the various object types. An object’s type is accessed by the built-in function <a class=\"reference internal\" href=\"functions#type\" title=\"type\"><code>type()</code></a>. There are no special operations on types. The standard module <a class=\"reference internal\" href=\"types#module-types\" title=\"types: Names for built-in types.\"><code>types</code></a> defines names for all standard built-in types.</p> <p>Types are written like this: <code>&lt;class 'int'&gt;</code>.</p>   <h3 id=\"bltin-null-object\">The Null Object</h3> <p id=\"the-null-object\">This object is returned by functions that don’t explicitly return a value. It supports no special operations. There is exactly one null object, named <code>None</code> (a built-in name). <code>type(None)()</code> produces the same singleton.</p> <p>It is written as <code>None</code>.</p>   <h3 id=\"index-61\">The Ellipsis Object</h3> <p id=\"the-ellipsis-object\">This object is commonly used by slicing (see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#slicings\"><span class=\"std std-ref\">Slicings</span></a>). It supports no special operations. There is exactly one ellipsis object, named <a class=\"reference internal\" href=\"constants#Ellipsis\" title=\"Ellipsis\"><code>Ellipsis</code></a> (a built-in name). <code>type(Ellipsis)()</code> produces the <a class=\"reference internal\" href=\"constants#Ellipsis\" title=\"Ellipsis\"><code>Ellipsis</code></a> singleton.</p> <p>It is written as <code>Ellipsis</code> or <code>...</code>.</p>   <h3 id=\"bltin-notimplemented-object\">The NotImplemented Object</h3> <p id=\"the-notimplemented-object\">This object is returned from comparisons and binary operations when they are asked to operate on types they don’t support. See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#comparisons\"><span class=\"std std-ref\">Comparisons</span></a> for more information. There is exactly one <code>NotImplemented</code> object. <code>type(NotImplemented)()</code> produces the singleton instance.</p> <p>It is written as <code>NotImplemented</code>.</p>   <h3 id=\"bltin-boolean-values\">Boolean Values</h3> <p id=\"boolean-values\">Boolean values are the two constant objects <code>False</code> and <code>True</code>. They are used to represent truth values (although other values can also be considered false or true). In numeric contexts (for example when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively. The built-in function <a class=\"reference internal\" href=\"functions#bool\" title=\"bool\"><code>bool()</code></a> can be used to convert any value to a Boolean, if the value can be interpreted as a truth value (see section <a class=\"reference internal\" href=\"#truth\"><span class=\"std std-ref\">Truth Value Testing</span></a> above).</p> <p id=\"index-62\">They are written as <code>False</code> and <code>True</code>, respectively.</p>   <h3 id=\"typesinternal\">Internal Objects</h3> <p id=\"internal-objects\">See <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#types\"><span class=\"std std-ref\">The standard type hierarchy</span></a> for this information. It describes stack frame objects, traceback objects, and slice objects.</p>    <h2 id=\"specialattrs\">Special Attributes</h2> <p id=\"special-attributes\">The implementation adds a few special read-only attributes to several object types, where they are relevant. Some of these are not reported by the <a class=\"reference internal\" href=\"functions#dir\" title=\"dir\"><code>dir()</code></a> built-in function.</p> <dl class=\"attribute\"> <dt id=\"object.__dict__\">\n<code>object.__dict__</code> </dt> <dd>\n<p>A dictionary or other mapping object used to store an object’s (writable) attributes.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"instance.__class__\">\n<code>instance.__class__</code> </dt> <dd>\n<p>The class to which a class instance belongs.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"class.__bases__\">\n<code>class.__bases__</code> </dt> <dd>\n<p>The tuple of base classes of a class object.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"definition.__name__\">\n<code>definition.__name__</code> </dt> <dd>\n<p>The name of the class, function, method, descriptor, or generator instance.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"definition.__qualname__\">\n<code>definition.__qualname__</code> </dt> <dd>\n<p>The <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-qualified-name\"><span class=\"xref std std-term\">qualified name</span></a> of the class, function, method, descriptor, or generator instance.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"class.__mro__\">\n<code>class.__mro__</code> </dt> <dd>\n<p>This attribute is a tuple of classes that are considered when looking for base classes during method resolution.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"class.mro\">\n<code>class.mro()</code> </dt> <dd>\n<p>This method can be overridden by a metaclass to customize the method resolution order for its instances. It is called at class instantiation, and its result is stored in <a class=\"reference internal\" href=\"#class.__mro__\" title=\"class.__mro__\"><code>__mro__</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"class.__subclasses__\">\n<code>class.__subclasses__()</code> </dt> <dd>\n<p>Each class keeps a list of weak references to its immediate subclasses. This method returns a list of all those references still alive. The list is in definition order. Example:</p> <pre data-language=\"python\">&gt;&gt;&gt; int.__subclasses__()\n[&lt;class 'bool'&gt;]\n</pre> </dd>\n</dl> <h4 class=\"rubric\">Footnotes</h4> <dl class=\"footnote brackets\"> <dt class=\"label\" id=\"id12\">\n<code>1</code> </dt> <dd>\n<p>Additional information on these special methods may be found in the Python Reference Manual (<a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#customization\"><span class=\"std std-ref\">Basic customization</span></a>).</p> </dd> <dt class=\"label\" id=\"id13\">\n<code>2</code> </dt> <dd>\n<p>As a consequence, the list <code>[1, 2]</code> is considered equal to <code>[1.0, 2.0]</code>, and similarly for tuples.</p> </dd> <dt class=\"label\" id=\"id14\">\n<code>3</code> </dt> <dd>\n<p>They must have since the parser can’t tell the type of the operands.</p> </dd> <dt class=\"label\" id=\"id15\">\n<code>4(1,2,3,4)</code> </dt> <dd>\n<p>Cased characters are those with general category property being one of “Lu” (Letter, uppercase), “Ll” (Letter, lowercase), or “Lt” (Letter, titlecase).</p> </dd> <dt class=\"label\" id=\"id16\">\n<code>5(1,2)</code> </dt> <dd>\n<p>To format only a tuple you should therefore provide a singleton tuple whose only element is the tuple to be formatted.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/stdtypes.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/stdtypes.html</a>\n  </p>\n</div>\n","library/exceptions":"<h1 id=\"bltin-exceptions\">Built-in Exceptions</h1> <p id=\"built-in-exceptions\">In Python, all exceptions must be instances of a class that derives from <a class=\"reference internal\" href=\"#BaseException\" title=\"BaseException\"><code>BaseException</code></a>. In a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#try\"><code>try</code></a> statement with an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#except\"><code>except</code></a> clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which <em>it</em> is derived). Two exception classes that are not related via subclassing are never equivalent, even if they have the same name.</p> <p id=\"index-1\">The built-in exceptions listed below can be generated by the interpreter or built-in functions. Except where mentioned, they have an “associated value” indicating the detailed cause of the error. This may be a string or a tuple of several items of information (e.g., an error code and a string explaining the code). The associated value is usually passed as arguments to the exception class’s constructor.</p> <p>User code can raise built-in exceptions. This can be used to test an exception handler or to report an error condition “just like” the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error.</p> <p>The built-in exception classes can be subclassed to define new exceptions; programmers are encouraged to derive new exceptions from the <a class=\"reference internal\" href=\"#Exception\" title=\"Exception\"><code>Exception</code></a> class or one of its subclasses, and not from <a class=\"reference internal\" href=\"#BaseException\" title=\"BaseException\"><code>BaseException</code></a>. More information on defining exceptions is available in the Python Tutorial under <a class=\"reference internal\" href=\"https://docs.python.org/3.9/tutorial/errors.html#tut-userexceptions\"><span class=\"std std-ref\">User-defined Exceptions</span></a>.</p> <p>When raising (or re-raising) an exception in an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#except\"><code>except</code></a> or <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#finally\"><code>finally</code></a> clause <code>__context__</code> is automatically set to the last exception caught; if the new exception is not handled the traceback that is eventually displayed will include the originating exception(s) and the final exception.</p> <p>When raising a new exception (rather than using a bare <code>raise</code> to re-raise the exception currently being handled), the implicit exception context can be supplemented with an explicit cause by using <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#from\"><code>from</code></a> with <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#raise\"><code>raise</code></a>:</p> <pre data-language=\"python\">raise new_exc from original_exc\n</pre> <p>The expression following <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#from\"><code>from</code></a> must be an exception or <code>None</code>. It will be set as <code>__cause__</code> on the raised exception. Setting <code>__cause__</code> also implicitly sets the <code>__suppress_context__</code> attribute to <code>True</code>, so that using <code>raise new_exc from None</code> effectively replaces the old exception with the new one for display purposes (e.g. converting <a class=\"reference internal\" href=\"#KeyError\" title=\"KeyError\"><code>KeyError</code></a> to <a class=\"reference internal\" href=\"#AttributeError\" title=\"AttributeError\"><code>AttributeError</code></a>), while leaving the old exception available in <code>__context__</code> for introspection when debugging.</p> <p>The default traceback display code shows these chained exceptions in addition to the traceback for the exception itself. An explicitly chained exception in <code>__cause__</code> is always shown when present. An implicitly chained exception in <code>__context__</code> is shown only if <code>__cause__</code> is <a class=\"reference internal\" href=\"constants#None\" title=\"None\"><code>None</code></a> and <code>__suppress_context__</code> is false.</p> <p>In either case, the exception itself is always shown after any chained exceptions so that the final line of the traceback always shows the last exception that was raised.</p>  <h2 id=\"base-classes\">Base classes</h2> <p>The following exceptions are used mostly as base classes for other exceptions.</p> <dl class=\"exception\"> <dt id=\"BaseException\">\n<code>exception BaseException</code> </dt> <dd>\n<p>The base class for all built-in exceptions. It is not meant to be directly inherited by user-defined classes (for that, use <a class=\"reference internal\" href=\"#Exception\" title=\"Exception\"><code>Exception</code></a>). If <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str()</code></a> is called on an instance of this class, the representation of the argument(s) to the instance are returned, or the empty string when there were no arguments.</p> <dl class=\"attribute\"> <dt id=\"BaseException.args\">\n<code>args</code> </dt> <dd>\n<p>The tuple of arguments given to the exception constructor. Some built-in exceptions (like <a class=\"reference internal\" href=\"#OSError\" title=\"OSError\"><code>OSError</code></a>) expect a certain number of arguments and assign a special meaning to the elements of this tuple, while others are usually called only with a single string giving an error message.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"BaseException.with_traceback\">\n<code>with_traceback(tb)</code> </dt> <dd>\n<p>This method sets <em>tb</em> as the new traceback for the exception and returns the exception object. It is usually used in exception handling code like this:</p> <pre data-language=\"python\">try:\n    ...\nexcept SomeException:\n    tb = sys.exc_info()[2]\n    raise OtherException(...).with_traceback(tb)\n</pre> </dd>\n</dl> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"Exception\">\n<code>exception Exception</code> </dt> <dd>\n<p>All built-in, non-system-exiting exceptions are derived from this class. All user-defined exceptions should also be derived from this class.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ArithmeticError\">\n<code>exception ArithmeticError</code> </dt> <dd>\n<p>The base class for those built-in exceptions that are raised for various arithmetic errors: <a class=\"reference internal\" href=\"#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a>, <a class=\"reference internal\" href=\"#ZeroDivisionError\" title=\"ZeroDivisionError\"><code>ZeroDivisionError</code></a>, <a class=\"reference internal\" href=\"#FloatingPointError\" title=\"FloatingPointError\"><code>FloatingPointError</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"BufferError\">\n<code>exception BufferError</code> </dt> <dd>\n<p>Raised when a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/c-api/buffer.html#bufferobjects\"><span class=\"std std-ref\">buffer</span></a> related operation cannot be performed.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"LookupError\">\n<code>exception LookupError</code> </dt> <dd>\n<p>The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: <a class=\"reference internal\" href=\"#IndexError\" title=\"IndexError\"><code>IndexError</code></a>, <a class=\"reference internal\" href=\"#KeyError\" title=\"KeyError\"><code>KeyError</code></a>. This can be raised directly by <a class=\"reference internal\" href=\"codecs#codecs.lookup\" title=\"codecs.lookup\"><code>codecs.lookup()</code></a>.</p> </dd>\n</dl>   <h2 id=\"concrete-exceptions\">Concrete exceptions</h2> <p>The following exceptions are the exceptions that are usually raised.</p> <dl class=\"exception\"> <dt id=\"AssertionError\">\n<code>exception AssertionError</code> </dt> <dd>\n<p id=\"index-2\">Raised when an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#assert\"><code>assert</code></a> statement fails.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"AttributeError\">\n<code>exception AttributeError</code> </dt> <dd>\n<p>Raised when an attribute reference (see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#attribute-references\"><span class=\"std std-ref\">Attribute references</span></a>) or assignment fails. (When an object does not support attribute references or attribute assignments at all, <a class=\"reference internal\" href=\"#TypeError\" title=\"TypeError\"><code>TypeError</code></a> is raised.)</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"EOFError\">\n<code>exception EOFError</code> </dt> <dd>\n<p>Raised when the <a class=\"reference internal\" href=\"functions#input\" title=\"input\"><code>input()</code></a> function hits an end-of-file condition (EOF) without reading any data. (N.B.: the <code>io.IOBase.read()</code> and <a class=\"reference internal\" href=\"io#io.IOBase.readline\" title=\"io.IOBase.readline\"><code>io.IOBase.readline()</code></a> methods return an empty string when they hit EOF.)</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"FloatingPointError\">\n<code>exception FloatingPointError</code> </dt> <dd>\n<p>Not currently used.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"GeneratorExit\">\n<code>exception GeneratorExit</code> </dt> <dd>\n<p>Raised when a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generator\"><span class=\"xref std std-term\">generator</span></a> or <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-coroutine\"><span class=\"xref std std-term\">coroutine</span></a> is closed; see <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/expressions.html#generator.close\" title=\"generator.close\"><code>generator.close()</code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#coroutine.close\" title=\"coroutine.close\"><code>coroutine.close()</code></a>. It directly inherits from <a class=\"reference internal\" href=\"#BaseException\" title=\"BaseException\"><code>BaseException</code></a> instead of <a class=\"reference internal\" href=\"#Exception\" title=\"Exception\"><code>Exception</code></a> since it is technically not an error.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ImportError\">\n<code>exception ImportError</code> </dt> <dd>\n<p>Raised when the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#import\"><code>import</code></a> statement has troubles trying to load a module. Also raised when the “from list” in <code>from ... import</code> has a name that cannot be found.</p> <p>The <code>name</code> and <code>path</code> attributes can be set using keyword-only arguments to the constructor. When set they represent the name of the module that was attempted to be imported and the path to any file which triggered the exception, respectively.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Added the <code>name</code> and <code>path</code> attributes.</p> </div> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ModuleNotFoundError\">\n<code>exception ModuleNotFoundError</code> </dt> <dd>\n<p>A subclass of <a class=\"reference internal\" href=\"#ImportError\" title=\"ImportError\"><code>ImportError</code></a> which is raised by <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#import\"><code>import</code></a> when a module could not be located. It is also raised when <code>None</code> is found in <a class=\"reference internal\" href=\"sys#sys.modules\" title=\"sys.modules\"><code>sys.modules</code></a>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6.</span></p> </div> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"IndexError\">\n<code>exception IndexError</code> </dt> <dd>\n<p>Raised when a sequence subscript is out of range. (Slice indices are silently truncated to fall in the allowed range; if an index is not an integer, <a class=\"reference internal\" href=\"#TypeError\" title=\"TypeError\"><code>TypeError</code></a> is raised.)</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"KeyError\">\n<code>exception KeyError</code> </dt> <dd>\n<p>Raised when a mapping (dictionary) key is not found in the set of existing keys.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"KeyboardInterrupt\">\n<code>exception KeyboardInterrupt</code> </dt> <dd>\n<p>Raised when the user hits the interrupt key (normally <kbd class=\"kbd docutils literal notranslate\">Control-C</kbd> or <kbd class=\"kbd docutils literal notranslate\">Delete</kbd>). During execution, a check for interrupts is made regularly. The exception inherits from <a class=\"reference internal\" href=\"#BaseException\" title=\"BaseException\"><code>BaseException</code></a> so as to not be accidentally caught by code that catches <a class=\"reference internal\" href=\"#Exception\" title=\"Exception\"><code>Exception</code></a> and thus prevent the interpreter from exiting.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"MemoryError\">\n<code>exception MemoryError</code> </dt> <dd>\n<p>Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects). The associated value is a string indicating what kind of (internal) operation ran out of memory. Note that because of the underlying memory management architecture (C’s <code>malloc()</code> function), the interpreter may not always be able to completely recover from this situation; it nevertheless raises an exception so that a stack traceback can be printed, in case a run-away program was the cause.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"NameError\">\n<code>exception NameError</code> </dt> <dd>\n<p>Raised when a local or global name is not found. This applies only to unqualified names. The associated value is an error message that includes the name that could not be found.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"NotImplementedError\">\n<code>exception NotImplementedError</code> </dt> <dd>\n<p>This exception is derived from <a class=\"reference internal\" href=\"#RuntimeError\" title=\"RuntimeError\"><code>RuntimeError</code></a>. In user defined base classes, abstract methods should raise this exception when they require derived classes to override the method, or while the class is being developed to indicate that the real implementation still needs to be added.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>It should not be used to indicate that an operator or method is not meant to be supported at all – in that case either leave the operator / method undefined or, if a subclass, set it to <a class=\"reference internal\" href=\"constants#None\" title=\"None\"><code>None</code></a>.</p> </div> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p><code>NotImplementedError</code> and <code>NotImplemented</code> are not interchangeable, even though they have similar names and purposes. See <a class=\"reference internal\" href=\"constants#NotImplemented\" title=\"NotImplemented\"><code>NotImplemented</code></a> for details on when to use it.</p> </div> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"OSError\">\n<code>exception OSError([arg])</code> </dt> <dt>\n<code>exception OSError(errno, strerror[, filename[, winerror[, filename2]]])</code> </dt> <dd>\n<p id=\"index-3\">This exception is raised when a system function returns a system-related error, including I/O failures such as “file not found” or “disk full” (not for illegal argument types or other incidental errors).</p> <p>The second form of the constructor sets the corresponding attributes, described below. The attributes default to <a class=\"reference internal\" href=\"constants#None\" title=\"None\"><code>None</code></a> if not specified. For backwards compatibility, if three arguments are passed, the <a class=\"reference internal\" href=\"#BaseException.args\" title=\"BaseException.args\"><code>args</code></a> attribute contains only a 2-tuple of the first two constructor arguments.</p> <p>The constructor often actually returns a subclass of <a class=\"reference internal\" href=\"#OSError\" title=\"OSError\"><code>OSError</code></a>, as described in <a class=\"reference internal\" href=\"#os-exceptions\">OS exceptions</a> below. The particular subclass depends on the final <a class=\"reference internal\" href=\"#OSError.errno\" title=\"OSError.errno\"><code>errno</code></a> value. This behaviour only occurs when constructing <a class=\"reference internal\" href=\"#OSError\" title=\"OSError\"><code>OSError</code></a> directly or via an alias, and is not inherited when subclassing.</p> <dl class=\"attribute\"> <dt id=\"OSError.errno\">\n<code>errno</code> </dt> <dd>\n<p>A numeric error code from the C variable <code>errno</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"OSError.winerror\">\n<code>winerror</code> </dt> <dd>\n<p>Under Windows, this gives you the native Windows error code. The <a class=\"reference internal\" href=\"#OSError.errno\" title=\"OSError.errno\"><code>errno</code></a> attribute is then an approximate translation, in POSIX terms, of that native error code.</p> <p>Under Windows, if the <em>winerror</em> constructor argument is an integer, the <a class=\"reference internal\" href=\"#OSError.errno\" title=\"OSError.errno\"><code>errno</code></a> attribute is determined from the Windows error code, and the <em>errno</em> argument is ignored. On other platforms, the <em>winerror</em> argument is ignored, and the <a class=\"reference internal\" href=\"#OSError.winerror\" title=\"OSError.winerror\"><code>winerror</code></a> attribute does not exist.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"OSError.strerror\">\n<code>strerror</code> </dt> <dd>\n<p>The corresponding error message, as provided by the operating system. It is formatted by the C functions <code>perror()</code> under POSIX, and <code>FormatMessage()</code> under Windows.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"OSError.filename\">\n<code>filename</code> </dt> <dt id=\"OSError.filename2\">\n<code>filename2</code> </dt> <dd>\n<p>For exceptions that involve a file system path (such as <a class=\"reference internal\" href=\"functions#open\" title=\"open\"><code>open()</code></a> or <a class=\"reference internal\" href=\"os#os.unlink\" title=\"os.unlink\"><code>os.unlink()</code></a>), <a class=\"reference internal\" href=\"#OSError.filename\" title=\"OSError.filename\"><code>filename</code></a> is the file name passed to the function. For functions that involve two file system paths (such as <a class=\"reference internal\" href=\"os#os.rename\" title=\"os.rename\"><code>os.rename()</code></a>), <a class=\"reference internal\" href=\"#OSError.filename2\" title=\"OSError.filename2\"><code>filename2</code></a> corresponds to the second file name passed to the function.</p> </dd>\n</dl> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span><a class=\"reference internal\" href=\"#EnvironmentError\" title=\"EnvironmentError\"><code>EnvironmentError</code></a>, <a class=\"reference internal\" href=\"#IOError\" title=\"IOError\"><code>IOError</code></a>, <a class=\"reference internal\" href=\"#WindowsError\" title=\"WindowsError\"><code>WindowsError</code></a>, <a class=\"reference internal\" href=\"socket#socket.error\" title=\"socket.error\"><code>socket.error</code></a>, <a class=\"reference internal\" href=\"select#select.error\" title=\"select.error\"><code>select.error</code></a> and <code>mmap.error</code> have been merged into <a class=\"reference internal\" href=\"#OSError\" title=\"OSError\"><code>OSError</code></a>, and the constructor may return a subclass.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span>The <a class=\"reference internal\" href=\"#OSError.filename\" title=\"OSError.filename\"><code>filename</code></a> attribute is now the original file name passed to the function, instead of the name encoded to or decoded from the filesystem encoding. Also, the <em>filename2</em> constructor argument and attribute was added.</p> </div> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"OverflowError\">\n<code>exception OverflowError</code> </dt> <dd>\n<p>Raised when the result of an arithmetic operation is too large to be represented. This cannot occur for integers (which would rather raise <a class=\"reference internal\" href=\"#MemoryError\" title=\"MemoryError\"><code>MemoryError</code></a> than give up). However, for historical reasons, OverflowError is sometimes raised for integers that are outside a required range. Because of the lack of standardization of floating point exception handling in C, most floating point operations are not checked.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"RecursionError\">\n<code>exception RecursionError</code> </dt> <dd>\n<p>This exception is derived from <a class=\"reference internal\" href=\"#RuntimeError\" title=\"RuntimeError\"><code>RuntimeError</code></a>. It is raised when the interpreter detects that the maximum recursion depth (see <a class=\"reference internal\" href=\"sys#sys.getrecursionlimit\" title=\"sys.getrecursionlimit\"><code>sys.getrecursionlimit()</code></a>) is exceeded.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5: </span>Previously, a plain <a class=\"reference internal\" href=\"#RuntimeError\" title=\"RuntimeError\"><code>RuntimeError</code></a> was raised.</p> </div> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ReferenceError\">\n<code>exception ReferenceError</code> </dt> <dd>\n<p>This exception is raised when a weak reference proxy, created by the <a class=\"reference internal\" href=\"weakref#weakref.proxy\" title=\"weakref.proxy\"><code>weakref.proxy()</code></a> function, is used to access an attribute of the referent after it has been garbage collected. For more information on weak references, see the <a class=\"reference internal\" href=\"weakref#module-weakref\" title=\"weakref: Support for weak references and weak dictionaries.\"><code>weakref</code></a> module.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"RuntimeError\">\n<code>exception RuntimeError</code> </dt> <dd>\n<p>Raised when an error is detected that doesn’t fall in any of the other categories. The associated value is a string indicating what precisely went wrong.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"StopIteration\">\n<code>exception StopIteration</code> </dt> <dd>\n<p>Raised by built-in function <a class=\"reference internal\" href=\"functions#next\" title=\"next\"><code>next()</code></a> and an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-iterator\"><span class=\"xref std std-term\">iterator</span></a>’s <a class=\"reference internal\" href=\"stdtypes#iterator.__next__\" title=\"iterator.__next__\"><code>__next__()</code></a> method to signal that there are no further items produced by the iterator.</p> <p>The exception object has a single attribute <code>value</code>, which is given as an argument when constructing the exception, and defaults to <a class=\"reference internal\" href=\"constants#None\" title=\"None\"><code>None</code></a>.</p> <p>When a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generator\"><span class=\"xref std std-term\">generator</span></a> or <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-coroutine\"><span class=\"xref std std-term\">coroutine</span></a> function returns, a new <a class=\"reference internal\" href=\"#StopIteration\" title=\"StopIteration\"><code>StopIteration</code></a> instance is raised, and the value returned by the function is used as the <code>value</code> parameter to the constructor of the exception.</p> <p>If a generator code directly or indirectly raises <a class=\"reference internal\" href=\"#StopIteration\" title=\"StopIteration\"><code>StopIteration</code></a>, it is converted into a <a class=\"reference internal\" href=\"#RuntimeError\" title=\"RuntimeError\"><code>RuntimeError</code></a> (retaining the <a class=\"reference internal\" href=\"#StopIteration\" title=\"StopIteration\"><code>StopIteration</code></a> as the new exception’s cause).</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Added <code>value</code> attribute and the ability for generator functions to use it to return a value.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>Introduced the RuntimeError transformation via <code>from __future__ import generator_stop</code>, see <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0479\" id=\"index-4\"><strong>PEP 479</strong></a>.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Enable <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0479\" id=\"index-5\"><strong>PEP 479</strong></a> for all code by default: a <a class=\"reference internal\" href=\"#StopIteration\" title=\"StopIteration\"><code>StopIteration</code></a> error raised in a generator is transformed into a <a class=\"reference internal\" href=\"#RuntimeError\" title=\"RuntimeError\"><code>RuntimeError</code></a>.</p> </div> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"StopAsyncIteration\">\n<code>exception StopAsyncIteration</code> </dt> <dd>\n<p>Must be raised by <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__anext__\" title=\"object.__anext__\"><code>__anext__()</code></a> method of an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-asynchronous-iterator\"><span class=\"xref std std-term\">asynchronous iterator</span></a> object to stop the iteration.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5.</span></p> </div> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"SyntaxError\">\n<code>exception SyntaxError</code> </dt> <dd>\n<p>Raised when the parser encounters a syntax error. This may occur in an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/simple_stmts.html#import\"><code>import</code></a> statement, in a call to the built-in functions <a class=\"reference internal\" href=\"functions#exec\" title=\"exec\"><code>exec()</code></a> or <a class=\"reference internal\" href=\"functions#eval\" title=\"eval\"><code>eval()</code></a>, or when reading the initial script or standard input (also interactively).</p> <p>The <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str()</code></a> of the exception instance returns only the error message.</p> <dl class=\"attribute\"> <dt id=\"SyntaxError.filename\">\n<code>filename</code> </dt> <dd>\n<p>The name of the file the syntax error occurred in.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"SyntaxError.lineno\">\n<code>lineno</code> </dt> <dd>\n<p>Which line number in the file the error occurred in. This is 1-indexed: the first line in the file has a <code>lineno</code> of 1.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"SyntaxError.offset\">\n<code>offset</code> </dt> <dd>\n<p>The column in the line where the error occurred. This is 1-indexed: the first character in the line has an <code>offset</code> of 1.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"SyntaxError.text\">\n<code>text</code> </dt> <dd>\n<p>The source code text involved in the error.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"IndentationError\">\n<code>exception IndentationError</code> </dt> <dd>\n<p>Base class for syntax errors related to incorrect indentation. This is a subclass of <a class=\"reference internal\" href=\"#SyntaxError\" title=\"SyntaxError\"><code>SyntaxError</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"TabError\">\n<code>exception TabError</code> </dt> <dd>\n<p>Raised when indentation contains an inconsistent use of tabs and spaces. This is a subclass of <a class=\"reference internal\" href=\"#IndentationError\" title=\"IndentationError\"><code>IndentationError</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"SystemError\">\n<code>exception SystemError</code> </dt> <dd>\n<p>Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope. The associated value is a string indicating what went wrong (in low-level terms).</p> <p>You should report this to the author or maintainer of your Python interpreter. Be sure to report the version of the Python interpreter (<code>sys.version</code>; it is also printed at the start of an interactive Python session), the exact error message (the exception’s associated value) and if possible the source of the program that triggered the error.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"SystemExit\">\n<code>exception SystemExit</code> </dt> <dd>\n<p>This exception is raised by the <a class=\"reference internal\" href=\"sys#sys.exit\" title=\"sys.exit\"><code>sys.exit()</code></a> function. It inherits from <a class=\"reference internal\" href=\"#BaseException\" title=\"BaseException\"><code>BaseException</code></a> instead of <a class=\"reference internal\" href=\"#Exception\" title=\"Exception\"><code>Exception</code></a> so that it is not accidentally caught by code that catches <a class=\"reference internal\" href=\"#Exception\" title=\"Exception\"><code>Exception</code></a>. This allows the exception to properly propagate up and cause the interpreter to exit. When it is not handled, the Python interpreter exits; no stack traceback is printed. The constructor accepts the same optional argument passed to <a class=\"reference internal\" href=\"sys#sys.exit\" title=\"sys.exit\"><code>sys.exit()</code></a>. If the value is an integer, it specifies the system exit status (passed to C’s <code>exit()</code> function); if it is <code>None</code>, the exit status is zero; if it has another type (such as a string), the object’s value is printed and the exit status is one.</p> <p>A call to <a class=\"reference internal\" href=\"sys#sys.exit\" title=\"sys.exit\"><code>sys.exit()</code></a> is translated into an exception so that clean-up handlers (<a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#finally\"><code>finally</code></a> clauses of <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/compound_stmts.html#try\"><code>try</code></a> statements) can be executed, and so that a debugger can execute a script without running the risk of losing control. The <a class=\"reference internal\" href=\"os#os._exit\" title=\"os._exit\"><code>os._exit()</code></a> function can be used if it is absolutely positively necessary to exit immediately (for example, in the child process after a call to <a class=\"reference internal\" href=\"os#os.fork\" title=\"os.fork\"><code>os.fork()</code></a>).</p> <dl class=\"attribute\"> <dt id=\"SystemExit.code\">\n<code>code</code> </dt> <dd>\n<p>The exit status or error message that is passed to the constructor. (Defaults to <code>None</code>.)</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"TypeError\">\n<code>exception TypeError</code> </dt> <dd>\n<p>Raised when an operation or function is applied to an object of inappropriate type. The associated value is a string giving details about the type mismatch.</p> <p>This exception may be raised by user code to indicate that an attempted operation on an object is not supported, and is not meant to be. If an object is meant to support a given operation but has not yet provided an implementation, <a class=\"reference internal\" href=\"#NotImplementedError\" title=\"NotImplementedError\"><code>NotImplementedError</code></a> is the proper exception to raise.</p> <p>Passing arguments of the wrong type (e.g. passing a <a class=\"reference internal\" href=\"stdtypes#list\" title=\"list\"><code>list</code></a> when an <a class=\"reference internal\" href=\"functions#int\" title=\"int\"><code>int</code></a> is expected) should result in a <a class=\"reference internal\" href=\"#TypeError\" title=\"TypeError\"><code>TypeError</code></a>, but passing arguments with the wrong value (e.g. a number outside expected boundaries) should result in a <a class=\"reference internal\" href=\"#ValueError\" title=\"ValueError\"><code>ValueError</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"UnboundLocalError\">\n<code>exception UnboundLocalError</code> </dt> <dd>\n<p>Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable. This is a subclass of <a class=\"reference internal\" href=\"#NameError\" title=\"NameError\"><code>NameError</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"UnicodeError\">\n<code>exception UnicodeError</code> </dt> <dd>\n<p>Raised when a Unicode-related encoding or decoding error occurs. It is a subclass of <a class=\"reference internal\" href=\"#ValueError\" title=\"ValueError\"><code>ValueError</code></a>.</p> <p><a class=\"reference internal\" href=\"#UnicodeError\" title=\"UnicodeError\"><code>UnicodeError</code></a> has attributes that describe the encoding or decoding error. For example, <code>err.object[err.start:err.end]</code> gives the particular invalid input that the codec failed on.</p> <dl class=\"attribute\"> <dt id=\"UnicodeError.encoding\">\n<code>encoding</code> </dt> <dd>\n<p>The name of the encoding that raised the error.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"UnicodeError.reason\">\n<code>reason</code> </dt> <dd>\n<p>A string describing the specific codec error.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"UnicodeError.object\">\n<code>object</code> </dt> <dd>\n<p>The object the codec was attempting to encode or decode.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"UnicodeError.start\">\n<code>start</code> </dt> <dd>\n<p>The first index of invalid data in <a class=\"reference internal\" href=\"functions#object\" title=\"object\"><code>object</code></a>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"UnicodeError.end\">\n<code>end</code> </dt> <dd>\n<p>The index after the last invalid data in <a class=\"reference internal\" href=\"functions#object\" title=\"object\"><code>object</code></a>.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"UnicodeEncodeError\">\n<code>exception UnicodeEncodeError</code> </dt> <dd>\n<p>Raised when a Unicode-related error occurs during encoding. It is a subclass of <a class=\"reference internal\" href=\"#UnicodeError\" title=\"UnicodeError\"><code>UnicodeError</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"UnicodeDecodeError\">\n<code>exception UnicodeDecodeError</code> </dt> <dd>\n<p>Raised when a Unicode-related error occurs during decoding. It is a subclass of <a class=\"reference internal\" href=\"#UnicodeError\" title=\"UnicodeError\"><code>UnicodeError</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"UnicodeTranslateError\">\n<code>exception UnicodeTranslateError</code> </dt> <dd>\n<p>Raised when a Unicode-related error occurs during translating. It is a subclass of <a class=\"reference internal\" href=\"#UnicodeError\" title=\"UnicodeError\"><code>UnicodeError</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ValueError\">\n<code>exception ValueError</code> </dt> <dd>\n<p>Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as <a class=\"reference internal\" href=\"#IndexError\" title=\"IndexError\"><code>IndexError</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ZeroDivisionError\">\n<code>exception ZeroDivisionError</code> </dt> <dd>\n<p>Raised when the second argument of a division or modulo operation is zero. The associated value is a string indicating the type of the operands and the operation.</p> </dd>\n</dl> <p>The following exceptions are kept for compatibility with previous versions; starting from Python 3.3, they are aliases of <a class=\"reference internal\" href=\"#OSError\" title=\"OSError\"><code>OSError</code></a>.</p> <dl class=\"exception\"> <dt id=\"EnvironmentError\">\n<code>exception EnvironmentError</code> </dt> \n</dl> <dl class=\"exception\"> <dt id=\"IOError\">\n<code>exception IOError</code> </dt> \n</dl> <dl class=\"exception\"> <dt id=\"WindowsError\">\n<code>exception WindowsError</code> </dt> <dd>\n<p>Only available on Windows.</p> </dd>\n</dl>  <h3 id=\"os-exceptions\">OS exceptions</h3> <p>The following exceptions are subclasses of <a class=\"reference internal\" href=\"#OSError\" title=\"OSError\"><code>OSError</code></a>, they get raised depending on the system error code.</p> <dl class=\"exception\"> <dt id=\"BlockingIOError\">\n<code>exception BlockingIOError</code> </dt> <dd>\n<p>Raised when an operation would block on an object (e.g. socket) set for non-blocking operation. Corresponds to <code>errno</code> <code>EAGAIN</code>, <code>EALREADY</code>, <code>EWOULDBLOCK</code> and <code>EINPROGRESS</code>.</p> <p>In addition to those of <a class=\"reference internal\" href=\"#OSError\" title=\"OSError\"><code>OSError</code></a>, <a class=\"reference internal\" href=\"#BlockingIOError\" title=\"BlockingIOError\"><code>BlockingIOError</code></a> can have one more attribute:</p> <dl class=\"attribute\"> <dt id=\"BlockingIOError.characters_written\">\n<code>characters_written</code> </dt> <dd>\n<p>An integer containing the number of characters written to the stream before it blocked. This attribute is available when using the buffered I/O classes from the <a class=\"reference internal\" href=\"io#module-io\" title=\"io: Core tools for working with streams.\"><code>io</code></a> module.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ChildProcessError\">\n<code>exception ChildProcessError</code> </dt> <dd>\n<p>Raised when an operation on a child process failed. Corresponds to <code>errno</code> <code>ECHILD</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ConnectionError\">\n<code>exception ConnectionError</code> </dt> <dd>\n<p>A base class for connection-related issues.</p> <p>Subclasses are <a class=\"reference internal\" href=\"#BrokenPipeError\" title=\"BrokenPipeError\"><code>BrokenPipeError</code></a>, <a class=\"reference internal\" href=\"#ConnectionAbortedError\" title=\"ConnectionAbortedError\"><code>ConnectionAbortedError</code></a>, <a class=\"reference internal\" href=\"#ConnectionRefusedError\" title=\"ConnectionRefusedError\"><code>ConnectionRefusedError</code></a> and <a class=\"reference internal\" href=\"#ConnectionResetError\" title=\"ConnectionResetError\"><code>ConnectionResetError</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"BrokenPipeError\">\n<code>exception BrokenPipeError</code> </dt> <dd>\n<p>A subclass of <a class=\"reference internal\" href=\"#ConnectionError\" title=\"ConnectionError\"><code>ConnectionError</code></a>, raised when trying to write on a pipe while the other end has been closed, or trying to write on a socket which has been shutdown for writing. Corresponds to <code>errno</code> <code>EPIPE</code> and <code>ESHUTDOWN</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ConnectionAbortedError\">\n<code>exception ConnectionAbortedError</code> </dt> <dd>\n<p>A subclass of <a class=\"reference internal\" href=\"#ConnectionError\" title=\"ConnectionError\"><code>ConnectionError</code></a>, raised when a connection attempt is aborted by the peer. Corresponds to <code>errno</code> <code>ECONNABORTED</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ConnectionRefusedError\">\n<code>exception ConnectionRefusedError</code> </dt> <dd>\n<p>A subclass of <a class=\"reference internal\" href=\"#ConnectionError\" title=\"ConnectionError\"><code>ConnectionError</code></a>, raised when a connection attempt is refused by the peer. Corresponds to <code>errno</code> <code>ECONNREFUSED</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ConnectionResetError\">\n<code>exception ConnectionResetError</code> </dt> <dd>\n<p>A subclass of <a class=\"reference internal\" href=\"#ConnectionError\" title=\"ConnectionError\"><code>ConnectionError</code></a>, raised when a connection is reset by the peer. Corresponds to <code>errno</code> <code>ECONNRESET</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"FileExistsError\">\n<code>exception FileExistsError</code> </dt> <dd>\n<p>Raised when trying to create a file or directory which already exists. Corresponds to <code>errno</code> <code>EEXIST</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"FileNotFoundError\">\n<code>exception FileNotFoundError</code> </dt> <dd>\n<p>Raised when a file or directory is requested but doesn’t exist. Corresponds to <code>errno</code> <code>ENOENT</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"InterruptedError\">\n<code>exception InterruptedError</code> </dt> <dd>\n<p>Raised when a system call is interrupted by an incoming signal. Corresponds to <code>errno</code> <a class=\"reference internal\" href=\"errno#errno.EINTR\" title=\"errno.EINTR\"><code>EINTR</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>Python now retries system calls when a syscall is interrupted by a signal, except if the signal handler raises an exception (see <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0475\" id=\"index-6\"><strong>PEP 475</strong></a> for the rationale), instead of raising <a class=\"reference internal\" href=\"#InterruptedError\" title=\"InterruptedError\"><code>InterruptedError</code></a>.</p> </div> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"IsADirectoryError\">\n<code>exception IsADirectoryError</code> </dt> <dd>\n<p>Raised when a file operation (such as <a class=\"reference internal\" href=\"os#os.remove\" title=\"os.remove\"><code>os.remove()</code></a>) is requested on a directory. Corresponds to <code>errno</code> <code>EISDIR</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"NotADirectoryError\">\n<code>exception NotADirectoryError</code> </dt> <dd>\n<p>Raised when a directory operation (such as <a class=\"reference internal\" href=\"os#os.listdir\" title=\"os.listdir\"><code>os.listdir()</code></a>) is requested on something which is not a directory. Corresponds to <code>errno</code> <code>ENOTDIR</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"PermissionError\">\n<code>exception PermissionError</code> </dt> <dd>\n<p>Raised when trying to run an operation without the adequate access rights - for example filesystem permissions. Corresponds to <code>errno</code> <code>EACCES</code> and <code>EPERM</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ProcessLookupError\">\n<code>exception ProcessLookupError</code> </dt> <dd>\n<p>Raised when a given process doesn’t exist. Corresponds to <code>errno</code> <code>ESRCH</code>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"TimeoutError\">\n<code>exception TimeoutError</code> </dt> <dd>\n<p>Raised when a system function timed out at the system level. Corresponds to <code>errno</code> <code>ETIMEDOUT</code>.</p> </dd>\n</dl> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3: </span>All the above <a class=\"reference internal\" href=\"#OSError\" title=\"OSError\"><code>OSError</code></a> subclasses were added.</p> </div> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <p><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-3151\" id=\"index-7\"><strong>PEP 3151</strong></a> - Reworking the OS and IO exception hierarchy</p> </div>    <h2 id=\"warning-categories-as-exceptions\">Warnings</h2> <p id=\"warnings\">The following exceptions are used as warning categories; see the <a class=\"reference internal\" href=\"warnings#warning-categories\"><span class=\"std std-ref\">Warning Categories</span></a> documentation for more details.</p> <dl class=\"exception\"> <dt id=\"Warning\">\n<code>exception Warning</code> </dt> <dd>\n<p>Base class for warning categories.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"UserWarning\">\n<code>exception UserWarning</code> </dt> <dd>\n<p>Base class for warnings generated by user code.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"DeprecationWarning\">\n<code>exception DeprecationWarning</code> </dt> <dd>\n<p>Base class for warnings about deprecated features when those warnings are intended for other Python developers.</p> <p>Ignored by the default warning filters, except in the <code>__main__</code> module (<a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0565\" id=\"index-8\"><strong>PEP 565</strong></a>). Enabling the <a class=\"reference internal\" href=\"devmode#devmode\"><span class=\"std std-ref\">Python Development Mode</span></a> shows this warning.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"PendingDeprecationWarning\">\n<code>exception PendingDeprecationWarning</code> </dt> <dd>\n<p>Base class for warnings about features which are obsolete and expected to be deprecated in the future, but are not deprecated at the moment.</p> <p>This class is rarely used as emitting a warning about a possible upcoming deprecation is unusual, and <a class=\"reference internal\" href=\"#DeprecationWarning\" title=\"DeprecationWarning\"><code>DeprecationWarning</code></a> is preferred for already active deprecations.</p> <p>Ignored by the default warning filters. Enabling the <a class=\"reference internal\" href=\"devmode#devmode\"><span class=\"std std-ref\">Python Development Mode</span></a> shows this warning.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"SyntaxWarning\">\n<code>exception SyntaxWarning</code> </dt> <dd>\n<p>Base class for warnings about dubious syntax.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"RuntimeWarning\">\n<code>exception RuntimeWarning</code> </dt> <dd>\n<p>Base class for warnings about dubious runtime behavior.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"FutureWarning\">\n<code>exception FutureWarning</code> </dt> <dd>\n<p>Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ImportWarning\">\n<code>exception ImportWarning</code> </dt> <dd>\n<p>Base class for warnings about probable mistakes in module imports.</p> <p>Ignored by the default warning filters. Enabling the <a class=\"reference internal\" href=\"devmode#devmode\"><span class=\"std std-ref\">Python Development Mode</span></a> shows this warning.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"UnicodeWarning\">\n<code>exception UnicodeWarning</code> </dt> <dd>\n<p>Base class for warnings related to Unicode.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"BytesWarning\">\n<code>exception BytesWarning</code> </dt> <dd>\n<p>Base class for warnings related to <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> and <a class=\"reference internal\" href=\"stdtypes#bytearray\" title=\"bytearray\"><code>bytearray</code></a>.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"ResourceWarning\">\n<code>exception ResourceWarning</code> </dt> <dd>\n<p>Base class for warnings related to resource usage.</p> <p>Ignored by the default warning filters. Enabling the <a class=\"reference internal\" href=\"devmode#devmode\"><span class=\"std std-ref\">Python Development Mode</span></a> shows this warning.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2.</span></p> </div> </dd>\n</dl>   <h2 id=\"exception-hierarchy\">Exception hierarchy</h2> <p>The class hierarchy for built-in exceptions is:</p> <pre data-language=\"python\">BaseException\n +-- SystemExit\n +-- KeyboardInterrupt\n +-- GeneratorExit\n +-- Exception\n      +-- StopIteration\n      +-- StopAsyncIteration\n      +-- ArithmeticError\n      |    +-- FloatingPointError\n      |    +-- OverflowError\n      |    +-- ZeroDivisionError\n      +-- AssertionError\n      +-- AttributeError\n      +-- BufferError\n      +-- EOFError\n      +-- ImportError\n      |    +-- ModuleNotFoundError\n      +-- LookupError\n      |    +-- IndexError\n      |    +-- KeyError\n      +-- MemoryError\n      +-- NameError\n      |    +-- UnboundLocalError\n      +-- OSError\n      |    +-- BlockingIOError\n      |    +-- ChildProcessError\n      |    +-- ConnectionError\n      |    |    +-- BrokenPipeError\n      |    |    +-- ConnectionAbortedError\n      |    |    +-- ConnectionRefusedError\n      |    |    +-- ConnectionResetError\n      |    +-- FileExistsError\n      |    +-- FileNotFoundError\n      |    +-- InterruptedError\n      |    +-- IsADirectoryError\n      |    +-- NotADirectoryError\n      |    +-- PermissionError\n      |    +-- ProcessLookupError\n      |    +-- TimeoutError\n      +-- ReferenceError\n      +-- RuntimeError\n      |    +-- NotImplementedError\n      |    +-- RecursionError\n      +-- SyntaxError\n      |    +-- IndentationError\n      |         +-- TabError\n      +-- SystemError\n      +-- TypeError\n      +-- ValueError\n      |    +-- UnicodeError\n      |         +-- UnicodeDecodeError\n      |         +-- UnicodeEncodeError\n      |         +-- UnicodeTranslateError\n      +-- Warning\n           +-- DeprecationWarning\n           +-- PendingDeprecationWarning\n           +-- RuntimeWarning\n           +-- SyntaxWarning\n           +-- UserWarning\n           +-- FutureWarning\n           +-- ImportWarning\n           +-- UnicodeWarning\n           +-- BytesWarning\n           +-- ResourceWarning\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/exceptions.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/exceptions.html</a>\n  </p>\n</div>\n","library/string":"<h1 id=\"string-common-string-operations\">string — Common string operations</h1> <p id=\"module-string\"><strong>Source code:</strong> <a class=\"reference external\" href=\"https://github.com/python/cpython/tree/3.9/Lib/string.py\">Lib/string.py</a></p>  <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <p><a class=\"reference internal\" href=\"stdtypes#textseq\"><span class=\"std std-ref\">Text Sequence Type — str</span></a></p> <p><a class=\"reference internal\" href=\"stdtypes#string-methods\"><span class=\"std std-ref\">String Methods</span></a></p> </div>  <h2 id=\"string-constants\">String constants</h2> <p>The constants defined in this module are:</p> <dl class=\"data\"> <dt id=\"string.ascii_letters\">\n<code>string.ascii_letters</code> </dt> <dd>\n<p>The concatenation of the <a class=\"reference internal\" href=\"#string.ascii_lowercase\" title=\"string.ascii_lowercase\"><code>ascii_lowercase</code></a> and <a class=\"reference internal\" href=\"#string.ascii_uppercase\" title=\"string.ascii_uppercase\"><code>ascii_uppercase</code></a> constants described below. This value is not locale-dependent.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"string.ascii_lowercase\">\n<code>string.ascii_lowercase</code> </dt> <dd>\n<p>The lowercase letters <code>'abcdefghijklmnopqrstuvwxyz'</code>. This value is not locale-dependent and will not change.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"string.ascii_uppercase\">\n<code>string.ascii_uppercase</code> </dt> <dd>\n<p>The uppercase letters <code>'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</code>. This value is not locale-dependent and will not change.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"string.digits\">\n<code>string.digits</code> </dt> <dd>\n<p>The string <code>'0123456789'</code>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"string.hexdigits\">\n<code>string.hexdigits</code> </dt> <dd>\n<p>The string <code>'0123456789abcdefABCDEF'</code>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"string.octdigits\">\n<code>string.octdigits</code> </dt> <dd>\n<p>The string <code>'01234567'</code>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"string.punctuation\">\n<code>string.punctuation</code> </dt> <dd>\n<p>String of ASCII characters which are considered punctuation characters in the <code>C</code> locale: <code>!\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~</code>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"string.printable\">\n<code>string.printable</code> </dt> <dd>\n<p>String of ASCII characters which are considered printable. This is a combination of <a class=\"reference internal\" href=\"#string.digits\" title=\"string.digits\"><code>digits</code></a>, <a class=\"reference internal\" href=\"#string.ascii_letters\" title=\"string.ascii_letters\"><code>ascii_letters</code></a>, <a class=\"reference internal\" href=\"#string.punctuation\" title=\"string.punctuation\"><code>punctuation</code></a>, and <a class=\"reference internal\" href=\"#string.whitespace\" title=\"string.whitespace\"><code>whitespace</code></a>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"string.whitespace\">\n<code>string.whitespace</code> </dt> <dd>\n<p>A string containing all ASCII characters that are considered whitespace. This includes the characters space, tab, linefeed, return, formfeed, and vertical tab.</p> </dd>\n</dl>   <h2 id=\"string-formatting\">Custom String Formatting</h2> <p id=\"custom-string-formatting\">The built-in string class provides the ability to do complex variable substitutions and value formatting via the <a class=\"reference internal\" href=\"stdtypes#str.format\" title=\"str.format\"><code>format()</code></a> method described in <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-3101\" id=\"index-0\"><strong>PEP 3101</strong></a>. The <a class=\"reference internal\" href=\"#string.Formatter\" title=\"string.Formatter\"><code>Formatter</code></a> class in the <a class=\"reference internal\" href=\"#module-string\" title=\"string: Common string operations.\"><code>string</code></a> module allows you to create and customize your own string formatting behaviors using the same implementation as the built-in <a class=\"reference internal\" href=\"stdtypes#str.format\" title=\"str.format\"><code>format()</code></a> method.</p> <dl class=\"class\"> <dt id=\"string.Formatter\">\n<code>class string.Formatter</code> </dt> <dd>\n<p>The <a class=\"reference internal\" href=\"#string.Formatter\" title=\"string.Formatter\"><code>Formatter</code></a> class has the following public methods:</p> <dl class=\"method\"> <dt id=\"string.Formatter.format\">\n<code>format(format_string, /, *args, **kwargs)</code> </dt> <dd>\n<p>The primary API method. It takes a format string and an arbitrary set of positional and keyword arguments. It is just a wrapper that calls <a class=\"reference internal\" href=\"#string.Formatter.vformat\" title=\"string.Formatter.vformat\"><code>vformat()</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>A format string argument is now <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#positional-only-parameter\"><span class=\"std std-ref\">positional-only</span></a>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"string.Formatter.vformat\">\n<code>vformat(format_string, args, kwargs)</code> </dt> <dd>\n<p>This function does the actual work of formatting. It is exposed as a separate function for cases where you want to pass in a predefined dictionary of arguments, rather than unpacking and repacking the dictionary as individual arguments using the <code>*args</code> and <code>**kwargs</code> syntax. <a class=\"reference internal\" href=\"#string.Formatter.vformat\" title=\"string.Formatter.vformat\"><code>vformat()</code></a> does the work of breaking up the format string into character data and replacement fields. It calls the various methods described below.</p> </dd>\n</dl> <p>In addition, the <a class=\"reference internal\" href=\"#string.Formatter\" title=\"string.Formatter\"><code>Formatter</code></a> defines a number of methods that are intended to be replaced by subclasses:</p> <dl class=\"method\"> <dt id=\"string.Formatter.parse\">\n<code>parse(format_string)</code> </dt> <dd>\n<p>Loop over the format_string and return an iterable of tuples (<em>literal_text</em>, <em>field_name</em>, <em>format_spec</em>, <em>conversion</em>). This is used by <a class=\"reference internal\" href=\"#string.Formatter.vformat\" title=\"string.Formatter.vformat\"><code>vformat()</code></a> to break the string into either literal text, or replacement fields.</p> <p>The values in the tuple conceptually represent a span of literal text followed by a single replacement field. If there is no literal text (which can happen if two replacement fields occur consecutively), then <em>literal_text</em> will be a zero-length string. If there is no replacement field, then the values of <em>field_name</em>, <em>format_spec</em> and <em>conversion</em> will be <code>None</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"string.Formatter.get_field\">\n<code>get_field(field_name, args, kwargs)</code> </dt> <dd>\n<p>Given <em>field_name</em> as returned by <a class=\"reference internal\" href=\"#string.Formatter.parse\" title=\"string.Formatter.parse\"><code>parse()</code></a> (see above), convert it to an object to be formatted. Returns a tuple (obj, used_key). The default version takes strings of the form defined in <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-3101\" id=\"index-1\"><strong>PEP 3101</strong></a>, such as “0[name]” or “label.title”. <em>args</em> and <em>kwargs</em> are as passed in to <a class=\"reference internal\" href=\"#string.Formatter.vformat\" title=\"string.Formatter.vformat\"><code>vformat()</code></a>. The return value <em>used_key</em> has the same meaning as the <em>key</em> parameter to <a class=\"reference internal\" href=\"#string.Formatter.get_value\" title=\"string.Formatter.get_value\"><code>get_value()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"string.Formatter.get_value\">\n<code>get_value(key, args, kwargs)</code> </dt> <dd>\n<p>Retrieve a given field value. The <em>key</em> argument will be either an integer or a string. If it is an integer, it represents the index of the positional argument in <em>args</em>; if it is a string, then it represents a named argument in <em>kwargs</em>.</p> <p>The <em>args</em> parameter is set to the list of positional arguments to <a class=\"reference internal\" href=\"#string.Formatter.vformat\" title=\"string.Formatter.vformat\"><code>vformat()</code></a>, and the <em>kwargs</em> parameter is set to the dictionary of keyword arguments.</p> <p>For compound field names, these functions are only called for the first component of the field name; subsequent components are handled through normal attribute and indexing operations.</p> <p>So for example, the field expression ‘0.name’ would cause <a class=\"reference internal\" href=\"#string.Formatter.get_value\" title=\"string.Formatter.get_value\"><code>get_value()</code></a> to be called with a <em>key</em> argument of 0. The <code>name</code> attribute will be looked up after <a class=\"reference internal\" href=\"#string.Formatter.get_value\" title=\"string.Formatter.get_value\"><code>get_value()</code></a> returns by calling the built-in <a class=\"reference internal\" href=\"functions#getattr\" title=\"getattr\"><code>getattr()</code></a> function.</p> <p>If the index or keyword refers to an item that does not exist, then an <a class=\"reference internal\" href=\"exceptions#IndexError\" title=\"IndexError\"><code>IndexError</code></a> or <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a> should be raised.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"string.Formatter.check_unused_args\">\n<code>check_unused_args(used_args, args, kwargs)</code> </dt> <dd>\n<p>Implement checking for unused arguments if desired. The arguments to this function is the set of all argument keys that were actually referred to in the format string (integers for positional arguments, and strings for named arguments), and a reference to the <em>args</em> and <em>kwargs</em> that was passed to vformat. The set of unused args can be calculated from these parameters. <a class=\"reference internal\" href=\"#string.Formatter.check_unused_args\" title=\"string.Formatter.check_unused_args\"><code>check_unused_args()</code></a> is assumed to raise an exception if the check fails.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"string.Formatter.format_field\">\n<code>format_field(value, format_spec)</code> </dt> <dd>\n<p><a class=\"reference internal\" href=\"#string.Formatter.format_field\" title=\"string.Formatter.format_field\"><code>format_field()</code></a> simply calls the global <a class=\"reference internal\" href=\"functions#format\" title=\"format\"><code>format()</code></a> built-in. The method is provided so that subclasses can override it.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"string.Formatter.convert_field\">\n<code>convert_field(value, conversion)</code> </dt> <dd>\n<p>Converts the value (returned by <a class=\"reference internal\" href=\"#string.Formatter.get_field\" title=\"string.Formatter.get_field\"><code>get_field()</code></a>) given a conversion type (as in the tuple returned by the <a class=\"reference internal\" href=\"#string.Formatter.parse\" title=\"string.Formatter.parse\"><code>parse()</code></a> method). The default version understands ‘s’ (str), ‘r’ (repr) and ‘a’ (ascii) conversion types.</p> </dd>\n</dl> </dd>\n</dl>   <h2 id=\"formatstrings\">Format String Syntax</h2> <p id=\"format-string-syntax\">The <a class=\"reference internal\" href=\"stdtypes#str.format\" title=\"str.format\"><code>str.format()</code></a> method and the <a class=\"reference internal\" href=\"#string.Formatter\" title=\"string.Formatter\"><code>Formatter</code></a> class share the same syntax for format strings (although in the case of <a class=\"reference internal\" href=\"#string.Formatter\" title=\"string.Formatter\"><code>Formatter</code></a>, subclasses can define their own format string syntax). The syntax is related to that of <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings\"><span class=\"std std-ref\">formatted string literals</span></a>, but it is less sophisticated and, in particular, does not support arbitrary expressions.</p> <p id=\"index-2\">Format strings contain “replacement fields” surrounded by curly braces <code>{}</code>. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: <code>{{</code> and <code>}}</code>.</p> <p>The grammar for a replacement field is as follows:</p>  <pre>\n<strong id=\"grammar-token-replacement-field\">replacement_field</strong> ::=  \"{\" [<a class=\"reference internal\" href=\"#grammar-token-field-name\">field_name</a>] [\"!\" <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#grammar-token-conversion\">conversion</a>] [\":\" <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#grammar-token-format-spec\">format_spec</a>] \"}\"\n<strong id=\"grammar-token-field-name\">field_name       </strong> ::=  arg_name (\".\" <a class=\"reference internal\" href=\"#grammar-token-attribute-name\">attribute_name</a> | \"[\" <a class=\"reference internal\" href=\"#grammar-token-element-index\">element_index</a> \"]\")*\n<strong id=\"grammar-token-arg-name\">arg_name         </strong> ::=  [<a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#grammar-token-identifier\">identifier</a> | <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#grammar-token-digit\">digit</a>+]\n<strong id=\"grammar-token-attribute-name\">attribute_name   </strong> ::=  <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#grammar-token-identifier\">identifier</a>\n<strong id=\"grammar-token-element-index\">element_index    </strong> ::=  <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#grammar-token-digit\">digit</a>+ | <a class=\"reference internal\" href=\"#grammar-token-index-string\">index_string</a>\n<strong id=\"grammar-token-index-string\">index_string     </strong> ::=  &lt;any source character except \"]\"&gt; +\n<strong id=\"grammar-token-conversion\">conversion       </strong> ::=  \"r\" | \"s\" | \"a\"\n<strong id=\"grammar-token-format-spec\">format_spec      </strong> ::=  &lt;described in the next section&gt;\n</pre>  <p>In less formal terms, the replacement field can start with a <em>field_name</em> that specifies the object whose value is to be formatted and inserted into the output instead of the replacement field. The <em>field_name</em> is optionally followed by a <em>conversion</em> field, which is preceded by an exclamation point <code>'!'</code>, and a <em>format_spec</em>, which is preceded by a colon <code>':'</code>. These specify a non-default format for the replacement value.</p> <p>See also the <a class=\"reference internal\" href=\"#formatspec\"><span class=\"std std-ref\">Format Specification Mini-Language</span></a> section.</p> <p>The <em>field_name</em> itself begins with an <em>arg_name</em> that is either a number or a keyword. If it’s a number, it refers to a positional argument, and if it’s a keyword, it refers to a named keyword argument. If the numerical arg_names in a format string are 0, 1, 2, … in sequence, they can all be omitted (not just some) and the numbers 0, 1, 2, … will be automatically inserted in that order. Because <em>arg_name</em> is not quote-delimited, it is not possible to specify arbitrary dictionary keys (e.g., the strings <code>'10'</code> or <code>':-]'</code>) within a format string. The <em>arg_name</em> can be followed by any number of index or attribute expressions. An expression of the form <code>'.name'</code> selects the named attribute using <a class=\"reference internal\" href=\"functions#getattr\" title=\"getattr\"><code>getattr()</code></a>, while an expression of the form <code>'[index]'</code> does an index lookup using <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><code>__getitem__()</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.1: </span>The positional argument specifiers can be omitted for <a class=\"reference internal\" href=\"stdtypes#str.format\" title=\"str.format\"><code>str.format()</code></a>, so <code>'{} {}'.format(a, b)</code> is equivalent to <code>'{0} {1}'.format(a, b)</code>.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span>The positional argument specifiers can be omitted for <a class=\"reference internal\" href=\"#string.Formatter\" title=\"string.Formatter\"><code>Formatter</code></a>.</p> </div> <p>Some simple format string examples:</p> <pre data-language=\"python\">\"First, thou shalt count to {0}\"  # References first positional argument\n\"Bring me a {}\"                   # Implicitly references the first positional argument\n\"From {} to {}\"                   # Same as \"From {0} to {1}\"\n\"My quest is {name}\"              # References keyword argument 'name'\n\"Weight in tons {0.weight}\"       # 'weight' attribute of first positional arg\n\"Units destroyed: {players[0]}\"   # First element of keyword argument 'players'.\n</pre> <p>The <em>conversion</em> field causes a type coercion before formatting. Normally, the job of formatting a value is done by the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__format__\" title=\"object.__format__\"><code>__format__()</code></a> method of the value itself. However, in some cases it is desirable to force a type to be formatted as a string, overriding its own definition of formatting. By converting the value to a string before calling <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__format__\" title=\"object.__format__\"><code>__format__()</code></a>, the normal formatting logic is bypassed.</p> <p>Three conversion flags are currently supported: <code>'!s'</code> which calls <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str()</code></a> on the value, <code>'!r'</code> which calls <a class=\"reference internal\" href=\"functions#repr\" title=\"repr\"><code>repr()</code></a> and <code>'!a'</code> which calls <a class=\"reference internal\" href=\"functions#ascii\" title=\"ascii\"><code>ascii()</code></a>.</p> <p>Some examples:</p> <pre data-language=\"python\">\"Harold's a clever {0!s}\"        # Calls str() on the argument first\n\"Bring out the holy {name!r}\"    # Calls repr() on the argument first\n\"More {!a}\"                      # Calls ascii() on the argument first\n</pre> <p>The <em>format_spec</em> field contains a specification of how the value should be presented, including such details as field width, alignment, padding, decimal precision and so on. Each value type can define its own “formatting mini-language” or interpretation of the <em>format_spec</em>.</p> <p>Most built-in types support a common formatting mini-language, which is described in the next section.</p> <p>A <em>format_spec</em> field can also include nested replacement fields within it. These nested replacement fields may contain a field name, conversion flag and format specification, but deeper nesting is not allowed. The replacement fields within the format_spec are substituted before the <em>format_spec</em> string is interpreted. This allows the formatting of a value to be dynamically specified.</p> <p>See the <a class=\"reference internal\" href=\"#formatexamples\"><span class=\"std std-ref\">Format examples</span></a> section for some examples.</p>  <h3 id=\"formatspec\">Format Specification Mini-Language</h3> <p id=\"format-specification-mini-language\">“Format specifications” are used within replacement fields contained within a format string to define how individual values are presented (see <a class=\"reference internal\" href=\"#formatstrings\"><span class=\"std std-ref\">Format String Syntax</span></a> and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings\"><span class=\"std std-ref\">Formatted string literals</span></a>). They can also be passed directly to the built-in <a class=\"reference internal\" href=\"functions#format\" title=\"format\"><code>format()</code></a> function. Each formattable type may define how the format specification is to be interpreted.</p> <p>Most built-in types implement the following options for format specifications, although some of the formatting options are only supported by the numeric types.</p> <p>A general convention is that an empty format specification produces the same result as if you had called <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str()</code></a> on the value. A non-empty format specification typically modifies the result.</p> <p>The general form of a <em>standard format specifier</em> is:</p> <pre>\n<strong id=\"id1\">format_spec    </strong> ::=  [[<a class=\"reference internal\" href=\"#grammar-token-fill\">fill</a>]<a class=\"reference internal\" href=\"#grammar-token-align\">align</a>][<a class=\"reference internal\" href=\"#grammar-token-sign\">sign</a>][#][0][<a class=\"reference internal\" href=\"#grammar-token-width\">width</a>][<a class=\"reference internal\" href=\"#grammar-token-grouping-option\">grouping_option</a>][.<a class=\"reference internal\" href=\"#grammar-token-precision\">precision</a>][<a class=\"reference internal\" href=\"#grammar-token-type\">type</a>]\n<strong id=\"grammar-token-fill\">fill           </strong> ::=  &lt;any character&gt;\n<strong id=\"grammar-token-align\">align          </strong> ::=  \"&lt;\" | \"&gt;\" | \"=\" | \"^\"\n<strong id=\"grammar-token-sign\">sign           </strong> ::=  \"+\" | \"-\" | \" \"\n<strong id=\"grammar-token-width\">width          </strong> ::=  <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#grammar-token-digit\">digit</a>+\n<strong id=\"grammar-token-grouping-option\">grouping_option</strong> ::=  \"_\" | \",\"\n<strong id=\"grammar-token-precision\">precision      </strong> ::=  <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#grammar-token-digit\">digit</a>+\n<strong id=\"grammar-token-type\">type           </strong> ::=  \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\"\n</pre> <p>If a valid <em>align</em> value is specified, it can be preceded by a <em>fill</em> character that can be any character and defaults to a space if omitted. It is not possible to use a literal curly brace (“<code>{</code>” or “<code>}</code>”) as the <em>fill</em> character in a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings\"><span class=\"std std-ref\">formatted string literal</span></a> or when using the <a class=\"reference internal\" href=\"stdtypes#str.format\" title=\"str.format\"><code>str.format()</code></a> method. However, it is possible to insert a curly brace with a nested replacement field. This limitation doesn’t affect the <a class=\"reference internal\" href=\"functions#format\" title=\"format\"><code>format()</code></a> function.</p> <p>The meaning of the various alignment options is as follows:</p>  <table class=\"docutils align-default\" id=\"index-3\">  <thead> <tr>\n<th class=\"head\"><p>Option</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'&lt;'</code></p></td> <td><p>Forces the field to be left-aligned within the available space (this is the default for most objects).</p></td> </tr> <tr>\n<td><p><code>'&gt;'</code></p></td> <td><p>Forces the field to be right-aligned within the available space (this is the default for numbers).</p></td> </tr> <tr>\n<td><p><code>'='</code></p></td> <td><p>Forces the padding to be placed after the sign (if any) but before the digits. This is used for printing fields in the form ‘+000000120’. This alignment option is only valid for numeric types. It becomes the default when ‘0’ immediately precedes the field width.</p></td> </tr> <tr>\n<td><p><code>'^'</code></p></td> <td><p>Forces the field to be centered within the available space.</p></td> </tr>  </table>  <p>Note that unless a minimum field width is defined, the field width will always be the same size as the data to fill it, so that the alignment option has no meaning in this case.</p> <p>The <em>sign</em> option is only valid for number types, and can be one of the following:</p>  <table class=\"docutils align-default\" id=\"index-4\">  <thead> <tr>\n<th class=\"head\"><p>Option</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'+'</code></p></td> <td><p>indicates that a sign should be used for both positive as well as negative numbers.</p></td> </tr> <tr>\n<td><p><code>'-'</code></p></td> <td><p>indicates that a sign should be used only for negative numbers (this is the default behavior).</p></td> </tr> <tr>\n<td><p>space</p></td> <td><p>indicates that a leading space should be used on positive numbers, and a minus sign on negative numbers.</p></td> </tr>  </table>  <p id=\"index-5\">The <code>'#'</code> option causes the “alternate form” to be used for the conversion. The alternate form is defined differently for different types. This option is only valid for integer, float and complex types. For integers, when binary, octal, or hexadecimal output is used, this option adds the prefix respective <code>'0b'</code>, <code>'0o'</code>, or <code>'0x'</code> to the output value. For float and complex the alternate form causes the result of the conversion to always contain a decimal-point character, even if no digits follow it. Normally, a decimal-point character appears in the result of these conversions only if a digit follows it. In addition, for <code>'g'</code> and <code>'G'</code> conversions, trailing zeros are not removed from the result.</p> <p id=\"index-6\">The <code>','</code> option signals the use of a comma for a thousands separator. For a locale aware separator, use the <code>'n'</code> integer presentation type instead.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.1: </span>Added the <code>','</code> option (see also <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0378\" id=\"index-7\"><strong>PEP 378</strong></a>).</p> </div> <p id=\"index-8\">The <code>'_'</code> option signals the use of an underscore for a thousands separator for floating point presentation types and for integer presentation type <code>'d'</code>. For integer presentation types <code>'b'</code>, <code>'o'</code>, <code>'x'</code>, and <code>'X'</code>, underscores will be inserted every 4 digits. For other presentation types, specifying this option is an error.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Added the <code>'_'</code> option (see also <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0515\" id=\"index-9\"><strong>PEP 515</strong></a>).</p> </div> <p><em>width</em> is a decimal integer defining the minimum total field width, including any prefixes, separators, and other formatting characters. If not specified, then the field width will be determined by the content.</p> <p>When no explicit alignment is given, preceding the <em>width</em> field by a zero (<code>'0'</code>) character enables sign-aware zero-padding for numeric types. This is equivalent to a <em>fill</em> character of <code>'0'</code> with an <em>alignment</em> type of <code>'='</code>.</p> <p>The <em>precision</em> is a decimal number indicating how many digits should be displayed after the decimal point for a floating point value formatted with <code>'f'</code> and <code>'F'</code>, or before and after the decimal point for a floating point value formatted with <code>'g'</code> or <code>'G'</code>. For non-number types the field indicates the maximum field size - in other words, how many characters will be used from the field content. The <em>precision</em> is not allowed for integer values.</p> <p>Finally, the <em>type</em> determines how the data should be presented.</p> <p>The available string presentation types are:</p>  <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Type</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'s'</code></p></td> <td><p>String format. This is the default type for strings and may be omitted.</p></td> </tr> <tr>\n<td><p>None</p></td> <td><p>The same as <code>'s'</code>.</p></td> </tr>  </table>  <p>The available integer presentation types are:</p>  <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Type</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'b'</code></p></td> <td><p>Binary format. Outputs the number in base 2.</p></td> </tr> <tr>\n<td><p><code>'c'</code></p></td> <td><p>Character. Converts the integer to the corresponding unicode character before printing.</p></td> </tr> <tr>\n<td><p><code>'d'</code></p></td> <td><p>Decimal Integer. Outputs the number in base 10.</p></td> </tr> <tr>\n<td><p><code>'o'</code></p></td> <td><p>Octal format. Outputs the number in base 8.</p></td> </tr> <tr>\n<td><p><code>'x'</code></p></td> <td><p>Hex format. Outputs the number in base 16, using lower-case letters for the digits above 9.</p></td> </tr> <tr>\n<td><p><code>'X'</code></p></td> <td><p>Hex format. Outputs the number in base 16, using upper-case letters for the digits above 9.</p></td> </tr> <tr>\n<td><p><code>'n'</code></p></td> <td><p>Number. This is the same as <code>'d'</code>, except that it uses the current locale setting to insert the appropriate number separator characters.</p></td> </tr> <tr>\n<td><p>None</p></td> <td><p>The same as <code>'d'</code>.</p></td> </tr>  </table>  <p>In addition to the above presentation types, integers can be formatted with the floating point presentation types listed below (except <code>'n'</code> and <code>None</code>). When doing so, <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float()</code></a> is used to convert the integer to a floating point number before formatting.</p> <p>The available presentation types for <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a> and <a class=\"reference internal\" href=\"decimal#decimal.Decimal\" title=\"decimal.Decimal\"><code>Decimal</code></a> values are:</p>  <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Type</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'e'</code></p></td> <td><p>Scientific notation. For a given precision <code>p</code>, formats the number in scientific notation with the letter ‘e’ separating the coefficient from the exponent. The coefficient has one digit before and <code>p</code> digits after the decimal point, for a total of <code>p + 1</code> significant digits. With no precision given, uses a precision of <code>6</code> digits after the decimal point for <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a>, and shows all coefficient digits for <a class=\"reference internal\" href=\"decimal#decimal.Decimal\" title=\"decimal.Decimal\"><code>Decimal</code></a>. If no digits follow the decimal point, the decimal point is also removed unless the <code>#</code> option is used.</p></td> </tr> <tr>\n<td><p><code>'E'</code></p></td> <td><p>Scientific notation. Same as <code>'e'</code> except it uses an upper case ‘E’ as the separator character.</p></td> </tr> <tr>\n<td><p><code>'f'</code></p></td> <td><p>Fixed-point notation. For a given precision <code>p</code>, formats the number as a decimal number with exactly <code>p</code> digits following the decimal point. With no precision given, uses a precision of <code>6</code> digits after the decimal point for <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a>, and uses a precision large enough to show all coefficient digits for <a class=\"reference internal\" href=\"decimal#decimal.Decimal\" title=\"decimal.Decimal\"><code>Decimal</code></a>. If no digits follow the decimal point, the decimal point is also removed unless the <code>#</code> option is used.</p></td> </tr> <tr>\n<td><p><code>'F'</code></p></td> <td><p>Fixed-point notation. Same as <code>'f'</code>, but converts <code>nan</code> to <code>NAN</code> and <code>inf</code> to <code>INF</code>.</p></td> </tr> <tr>\n<td><p><code>'g'</code></p></td> <td>\n<p>General format. For a given precision <code>p &gt;= 1</code>, this rounds the number to <code>p</code> significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude. A precision of <code>0</code> is treated as equivalent to a precision of <code>1</code>.</p> <p>The precise rules are as follows: suppose that the result formatted with presentation type <code>'e'</code> and precision <code>p-1</code> would have exponent <code>exp</code>. Then, if <code>m &lt;= exp &lt; p</code>, where <code>m</code> is -4 for floats and -6 for <a class=\"reference internal\" href=\"decimal#decimal.Decimal\" title=\"decimal.Decimal\"><code>Decimals</code></a>, the number is formatted with presentation type <code>'f'</code> and precision <code>p-1-exp</code>. Otherwise, the number is formatted with presentation type <code>'e'</code> and precision <code>p-1</code>. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it, unless the <code>'#'</code> option is used.</p> <p>With no precision given, uses a precision of <code>6</code> significant digits for <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a>. For <a class=\"reference internal\" href=\"decimal#decimal.Decimal\" title=\"decimal.Decimal\"><code>Decimal</code></a>, the coefficient of the result is formed from the coefficient digits of the value; scientific notation is used for values smaller than <code>1e-6</code> in absolute value and values where the place value of the least significant digit is larger than 1, and fixed-point notation is used otherwise.</p> <p>Positive and negative infinity, positive and negative zero, and nans, are formatted as <code>inf</code>, <code>-inf</code>, <code>0</code>, <code>-0</code> and <code>nan</code> respectively, regardless of the precision.</p> </td> </tr> <tr>\n<td><p><code>'G'</code></p></td> <td><p>General format. Same as <code>'g'</code> except switches to <code>'E'</code> if the number gets too large. The representations of infinity and NaN are uppercased, too.</p></td> </tr> <tr>\n<td><p><code>'n'</code></p></td> <td><p>Number. This is the same as <code>'g'</code>, except that it uses the current locale setting to insert the appropriate number separator characters.</p></td> </tr> <tr>\n<td><p><code>'%'</code></p></td> <td><p>Percentage. Multiplies the number by 100 and displays in fixed (<code>'f'</code>) format, followed by a percent sign.</p></td> </tr> <tr>\n<td><p>None</p></td> <td>\n<p>For <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a> this is the same as <code>'g'</code>, except that when fixed-point notation is used to format the result, it always includes at least one digit past the decimal point. The precision used is as large as needed to represent the given value faithfully.</p> <p>For <a class=\"reference internal\" href=\"decimal#decimal.Decimal\" title=\"decimal.Decimal\"><code>Decimal</code></a>, this is the same as either <code>'g'</code> or <code>'G'</code> depending on the value of <code>context.capitals</code> for the current decimal context.</p> <p>The overall effect is to match the output of <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str()</code></a> as altered by the other format modifiers.</p> </td> </tr>  </table>    <h3 id=\"formatexamples\">Format examples</h3> <p id=\"format-examples\">This section contains examples of the <a class=\"reference internal\" href=\"stdtypes#str.format\" title=\"str.format\"><code>str.format()</code></a> syntax and comparison with the old <code>%</code>-formatting.</p> <p>In most of the cases the syntax is similar to the old <code>%</code>-formatting, with the addition of the <code>{}</code> and with <code>:</code> used instead of <code>%</code>. For example, <code>'%03.2f'</code> can be translated to <code>'{:03.2f}'</code>.</p> <p>The new format syntax also supports new and different options, shown in the following examples.</p> <p>Accessing arguments by position:</p> <pre data-language=\"python\">&gt;&gt;&gt; '{0}, {1}, {2}'.format('a', 'b', 'c')\n'a, b, c'\n&gt;&gt;&gt; '{}, {}, {}'.format('a', 'b', 'c')  # 3.1+ only\n'a, b, c'\n&gt;&gt;&gt; '{2}, {1}, {0}'.format('a', 'b', 'c')\n'c, b, a'\n&gt;&gt;&gt; '{2}, {1}, {0}'.format(*'abc')      # unpacking argument sequence\n'c, b, a'\n&gt;&gt;&gt; '{0}{1}{0}'.format('abra', 'cad')   # arguments' indices can be repeated\n'abracadabra'\n</pre> <p>Accessing arguments by name:</p> <pre data-language=\"python\">&gt;&gt;&gt; 'Coordinates: {latitude}, {longitude}'.format(latitude='37.24N', longitude='-115.81W')\n'Coordinates: 37.24N, -115.81W'\n&gt;&gt;&gt; coord = {'latitude': '37.24N', 'longitude': '-115.81W'}\n&gt;&gt;&gt; 'Coordinates: {latitude}, {longitude}'.format(**coord)\n'Coordinates: 37.24N, -115.81W'\n</pre> <p>Accessing arguments’ attributes:</p> <pre data-language=\"python\">&gt;&gt;&gt; c = 3-5j\n&gt;&gt;&gt; ('The complex number {0} is formed from the real part {0.real} '\n...  'and the imaginary part {0.imag}.').format(c)\n'The complex number (3-5j) is formed from the real part 3.0 and the imaginary part -5.0.'\n&gt;&gt;&gt; class Point:\n...     def __init__(self, x, y):\n...         self.x, self.y = x, y\n...     def __str__(self):\n...         return 'Point({self.x}, {self.y})'.format(self=self)\n...\n&gt;&gt;&gt; str(Point(4, 2))\n'Point(4, 2)'\n</pre> <p>Accessing arguments’ items:</p> <pre data-language=\"python\">&gt;&gt;&gt; coord = (3, 5)\n&gt;&gt;&gt; 'X: {0[0]};  Y: {0[1]}'.format(coord)\n'X: 3;  Y: 5'\n</pre> <p>Replacing <code>%s</code> and <code>%r</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; \"repr() shows quotes: {!r}; str() doesn't: {!s}\".format('test1', 'test2')\n\"repr() shows quotes: 'test1'; str() doesn't: test2\"\n</pre> <p>Aligning the text and specifying a width:</p> <pre data-language=\"python\">&gt;&gt;&gt; '{:&lt;30}'.format('left aligned')\n'left aligned                  '\n&gt;&gt;&gt; '{:&gt;30}'.format('right aligned')\n'                 right aligned'\n&gt;&gt;&gt; '{:^30}'.format('centered')\n'           centered           '\n&gt;&gt;&gt; '{:*^30}'.format('centered')  # use '*' as a fill char\n'***********centered***********'\n</pre> <p>Replacing <code>%+f</code>, <code>%-f</code>, and <code>% f</code> and specifying a sign:</p> <pre data-language=\"python\">&gt;&gt;&gt; '{:+f}; {:+f}'.format(3.14, -3.14)  # show it always\n'+3.140000; -3.140000'\n&gt;&gt;&gt; '{: f}; {: f}'.format(3.14, -3.14)  # show a space for positive numbers\n' 3.140000; -3.140000'\n&gt;&gt;&gt; '{:-f}; {:-f}'.format(3.14, -3.14)  # show only the minus -- same as '{:f}; {:f}'\n'3.140000; -3.140000'\n</pre> <p>Replacing <code>%x</code> and <code>%o</code> and converting the value to different bases:</p> <pre data-language=\"python\">&gt;&gt;&gt; # format also supports binary numbers\n&gt;&gt;&gt; \"int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}\".format(42)\n'int: 42;  hex: 2a;  oct: 52;  bin: 101010'\n&gt;&gt;&gt; # with 0x, 0o, or 0b as prefix:\n&gt;&gt;&gt; \"int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}\".format(42)\n'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'\n</pre> <p>Using the comma as a thousands separator:</p> <pre data-language=\"python\">&gt;&gt;&gt; '{:,}'.format(1234567890)\n'1,234,567,890'\n</pre> <p>Expressing a percentage:</p> <pre data-language=\"python\">&gt;&gt;&gt; points = 19\n&gt;&gt;&gt; total = 22\n&gt;&gt;&gt; 'Correct answers: {:.2%}'.format(points/total)\n'Correct answers: 86.36%'\n</pre> <p>Using type-specific formatting:</p> <pre data-language=\"python\">&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; d = datetime.datetime(2010, 7, 4, 12, 15, 58)\n&gt;&gt;&gt; '{:%Y-%m-%d %H:%M:%S}'.format(d)\n'2010-07-04 12:15:58'\n</pre> <p>Nesting arguments and more complex examples:</p> <pre data-language=\"python\">&gt;&gt;&gt; for align, text in zip('&lt;^&gt;', ['left', 'center', 'right']):\n...     '{0:{fill}{align}16}'.format(text, fill=align, align=align)\n...\n'left&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;'\n'^^^^^center^^^^^'\n'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;right'\n&gt;&gt;&gt;\n&gt;&gt;&gt; octets = [192, 168, 0, 1]\n&gt;&gt;&gt; '{:02X}{:02X}{:02X}{:02X}'.format(*octets)\n'C0A80001'\n&gt;&gt;&gt; int(_, 16)\n3232235521\n&gt;&gt;&gt;\n&gt;&gt;&gt; width = 5\n&gt;&gt;&gt; for num in range(5,12): \n...     for base in 'dXob':\n...         print('{0:{width}{base}}'.format(num, base=base, width=width), end=' ')\n...     print()\n...\n    5     5     5   101\n    6     6     6   110\n    7     7     7   111\n    8     8    10  1000\n    9     9    11  1001\n   10     A    12  1010\n   11     B    13  1011\n</pre>    <h2 id=\"id2\">Template strings</h2> <p id=\"template-strings\">Template strings provide simpler string substitutions as described in <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0292\" id=\"index-10\"><strong>PEP 292</strong></a>. A primary use case for template strings is for internationalization (i18n) since in that context, the simpler syntax and functionality makes it easier to translate than other built-in string formatting facilities in Python. As an example of a library built on template strings for i18n, see the <a class=\"reference external\" href=\"http://flufli18n.readthedocs.io/en/latest/\">flufl.i18n</a> package.</p> <p id=\"index-11\">Template strings support <code>$</code>-based substitutions, using the following rules:</p> <ul class=\"simple\"> <li>\n<code>$$</code> is an escape; it is replaced with a single <code>$</code>.</li> <li>\n<code>$identifier</code> names a substitution placeholder matching a mapping key of <code>\"identifier\"</code>. By default, <code>\"identifier\"</code> is restricted to any case-insensitive ASCII alphanumeric string (including underscores) that starts with an underscore or ASCII letter. The first non-identifier character after the <code>$</code> character terminates this placeholder specification.</li> <li>\n<code>${identifier}</code> is equivalent to <code>$identifier</code>. It is required when valid identifier characters follow the placeholder but are not part of the placeholder, such as <code>\"${noun}ification\"</code>.</li> </ul> <p>Any other appearance of <code>$</code> in the string will result in a <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> being raised.</p> <p>The <a class=\"reference internal\" href=\"#module-string\" title=\"string: Common string operations.\"><code>string</code></a> module provides a <a class=\"reference internal\" href=\"#string.Template\" title=\"string.Template\"><code>Template</code></a> class that implements these rules. The methods of <a class=\"reference internal\" href=\"#string.Template\" title=\"string.Template\"><code>Template</code></a> are:</p> <dl class=\"class\"> <dt id=\"string.Template\">\n<code>class string.Template(template)</code> </dt> <dd>\n<p>The constructor takes a single argument which is the template string.</p> <dl class=\"method\"> <dt id=\"string.Template.substitute\">\n<code>substitute(mapping={}, /, **kwds)</code> </dt> <dd>\n<p>Performs the template substitution, returning a new string. <em>mapping</em> is any dictionary-like object with keys that match the placeholders in the template. Alternatively, you can provide keyword arguments, where the keywords are the placeholders. When both <em>mapping</em> and <em>kwds</em> are given and there are duplicates, the placeholders from <em>kwds</em> take precedence.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"string.Template.safe_substitute\">\n<code>safe_substitute(mapping={}, /, **kwds)</code> </dt> <dd>\n<p>Like <a class=\"reference internal\" href=\"#string.Template.substitute\" title=\"string.Template.substitute\"><code>substitute()</code></a>, except that if placeholders are missing from <em>mapping</em> and <em>kwds</em>, instead of raising a <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a> exception, the original placeholder will appear in the resulting string intact. Also, unlike with <a class=\"reference internal\" href=\"#string.Template.substitute\" title=\"string.Template.substitute\"><code>substitute()</code></a>, any other appearances of the <code>$</code> will simply return <code>$</code> instead of raising <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a>.</p> <p>While other exceptions may still occur, this method is called “safe” because it always tries to return a usable string instead of raising an exception. In another sense, <a class=\"reference internal\" href=\"#string.Template.safe_substitute\" title=\"string.Template.safe_substitute\"><code>safe_substitute()</code></a> may be anything other than safe, since it will silently ignore malformed templates containing dangling delimiters, unmatched braces, or placeholders that are not valid Python identifiers.</p> </dd>\n</dl> <p><a class=\"reference internal\" href=\"#string.Template\" title=\"string.Template\"><code>Template</code></a> instances also provide one public data attribute:</p> <dl class=\"attribute\"> <dt id=\"string.Template.template\">\n<code>template</code> </dt> <dd>\n<p>This is the object passed to the constructor’s <em>template</em> argument. In general, you shouldn’t change it, but read-only access is not enforced.</p> </dd>\n</dl> </dd>\n</dl> <p>Here is an example of how to use a Template:</p> <pre data-language=\"python\">&gt;&gt;&gt; from string import Template\n&gt;&gt;&gt; s = Template('$who likes $what')\n&gt;&gt;&gt; s.substitute(who='tim', what='kung pao')\n'tim likes kung pao'\n&gt;&gt;&gt; d = dict(who='tim')\n&gt;&gt;&gt; Template('Give $who $100').substitute(d)\nTraceback (most recent call last):\n...\nValueError: Invalid placeholder in string: line 1, col 11\n&gt;&gt;&gt; Template('$who likes $what').substitute(d)\nTraceback (most recent call last):\n...\nKeyError: 'what'\n&gt;&gt;&gt; Template('$who likes $what').safe_substitute(d)\n'tim likes $what'\n</pre> <p>Advanced usage: you can derive subclasses of <a class=\"reference internal\" href=\"#string.Template\" title=\"string.Template\"><code>Template</code></a> to customize the placeholder syntax, delimiter character, or the entire regular expression used to parse template strings. To do this, you can override these class attributes:</p> <ul> <li>\n<em>delimiter</em> – This is the literal string describing a placeholder introducing delimiter. The default value is <code>$</code>. Note that this should <em>not</em> be a regular expression, as the implementation will call <a class=\"reference internal\" href=\"re#re.escape\" title=\"re.escape\"><code>re.escape()</code></a> on this string as needed. Note further that you cannot change the delimiter after class creation (i.e. a different delimiter must be set in the subclass’s class namespace).</li> <li>\n<p><em>idpattern</em> – This is the regular expression describing the pattern for non-braced placeholders. The default value is the regular expression <code>(?a:[_a-z][_a-z0-9]*)</code>. If this is given and <em>braceidpattern</em> is <code>None</code> this pattern will also apply to braced placeholders.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>Since default <em>flags</em> is <code>re.IGNORECASE</code>, pattern <code>[a-z]</code> can match with some non-ASCII characters. That’s why we use the local <code>a</code> flag here.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span><em>braceidpattern</em> can be used to define separate patterns used inside and outside the braces.</p> </div> </li> <li>\n<p><em>braceidpattern</em> – This is like <em>idpattern</em> but describes the pattern for braced placeholders. Defaults to <code>None</code> which means to fall back to <em>idpattern</em> (i.e. the same pattern is used both inside and outside braces). If given, this allows you to define different patterns for braced and unbraced placeholders.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.7.</span></p> </div> </li> <li>\n<p><em>flags</em> – The regular expression flags that will be applied when compiling the regular expression used for recognizing substitutions. The default value is <code>re.IGNORECASE</code>. Note that <code>re.VERBOSE</code> will always be added to the flags, so custom <em>idpattern</em>s must follow conventions for verbose regular expressions.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2.</span></p> </div> </li> </ul> <p>Alternatively, you can provide the entire regular expression pattern by overriding the class attribute <em>pattern</em>. If you do this, the value must be a regular expression object with four named capturing groups. The capturing groups correspond to the rules given above, along with the invalid placeholder rule:</p> <ul class=\"simple\"> <li>\n<em>escaped</em> – This group matches the escape sequence, e.g. <code>$$</code>, in the default pattern.</li> <li>\n<em>named</em> – This group matches the unbraced placeholder name; it should not include the delimiter in capturing group.</li> <li>\n<em>braced</em> – This group matches the brace enclosed placeholder name; it should not include either the delimiter or braces in the capturing group.</li> <li>\n<em>invalid</em> – This group matches any other delimiter pattern (usually a single delimiter), and it should appear last in the regular expression.</li> </ul>   <h2 id=\"helper-functions\">Helper functions</h2> <dl class=\"function\"> <dt id=\"string.capwords\">\n<code>string.capwords(s, sep=None)</code> </dt> <dd>\n<p>Split the argument into words using <a class=\"reference internal\" href=\"stdtypes#str.split\" title=\"str.split\"><code>str.split()</code></a>, capitalize each word using <a class=\"reference internal\" href=\"stdtypes#str.capitalize\" title=\"str.capitalize\"><code>str.capitalize()</code></a>, and join the capitalized words using <a class=\"reference internal\" href=\"stdtypes#str.join\" title=\"str.join\"><code>str.join()</code></a>. If the optional second argument <em>sep</em> is absent or <code>None</code>, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise <em>sep</em> is used to split and join the words.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/string.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/string.html</a>\n  </p>\n</div>\n","library/re":"<h1 id=\"re-regular-expression-operations\">re — Regular expression operations</h1> <p id=\"module-re\"><strong>Source code:</strong> <a class=\"reference external\" href=\"https://github.com/python/cpython/tree/3.9/Lib/re.py\">Lib/re.py</a></p>  <p>This module provides regular expression matching operations similar to those found in Perl.</p> <p>Both patterns and strings to be searched can be Unicode strings (<a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a>) as well as 8-bit strings (<a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a>). However, Unicode strings and 8-bit strings cannot be mixed: that is, you cannot match a Unicode string with a byte pattern or vice-versa; similarly, when asking for a substitution, the replacement string must be of the same type as both the pattern and the search string.</p> <p>Regular expressions use the backslash character (<code>'\\'</code>) to indicate special forms or to allow special characters to be used without invoking their special meaning. This collides with Python’s usage of the same character for the same purpose in string literals; for example, to match a literal backslash, one might have to write <code>'\\\\\\\\'</code> as the pattern string, because the regular expression must be <code>\\\\</code>, and each backslash must be expressed as <code>\\\\</code> inside a regular Python string literal. Also, please note that any invalid escape sequences in Python’s usage of the backslash in string literals now generate a <a class=\"reference internal\" href=\"exceptions#DeprecationWarning\" title=\"DeprecationWarning\"><code>DeprecationWarning</code></a> and in the future this will become a <a class=\"reference internal\" href=\"exceptions#SyntaxError\" title=\"SyntaxError\"><code>SyntaxError</code></a>. This behaviour will happen even if it is a valid escape sequence for a regular expression.</p> <p>The solution is to use Python’s raw string notation for regular expression patterns; backslashes are not handled in any special way in a string literal prefixed with <code>'r'</code>. So <code>r\"\\n\"</code> is a two-character string containing <code>'\\'</code> and <code>'n'</code>, while <code>\"\\n\"</code> is a one-character string containing a newline. Usually patterns will be expressed in Python code using this raw string notation.</p> <p>It is important to note that most regular expression operations are available as module-level functions and methods on <a class=\"reference internal\" href=\"#re-objects\"><span class=\"std std-ref\">compiled regular expressions</span></a>. The functions are shortcuts that don’t require you to compile a regex object first, but miss some fine-tuning parameters.</p> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <p>The third-party <a class=\"reference external\" href=\"https://pypi.org/project/regex/\">regex</a> module, which has an API compatible with the standard library <a class=\"reference internal\" href=\"#module-re\" title=\"re: Regular expression operations.\"><code>re</code></a> module, but offers additional functionality and a more thorough Unicode support.</p> </div>  <h2 id=\"re-syntax\">Regular Expression Syntax</h2> <p id=\"regular-expression-syntax\">A regular expression (or RE) specifies a set of strings that matches it; the functions in this module let you check if a particular string matches a given regular expression (or if a given regular expression matches a particular string, which comes down to the same thing).</p> <p>Regular expressions can be concatenated to form new regular expressions; if <em>A</em> and <em>B</em> are both regular expressions, then <em>AB</em> is also a regular expression. In general, if a string <em>p</em> matches <em>A</em> and another string <em>q</em> matches <em>B</em>, the string <em>pq</em> will match AB. This holds unless <em>A</em> or <em>B</em> contain low precedence operations; boundary conditions between <em>A</em> and <em>B</em>; or have numbered group references. Thus, complex expressions can easily be constructed from simpler primitive expressions like the ones described here. For details of the theory and implementation of regular expressions, consult the Friedl book <a class=\"reference internal\" href=\"#frie09\" id=\"id1\"><span>[Frie09]</span></a>, or almost any textbook about compiler construction.</p> <p>A brief explanation of the format of regular expressions follows. For further information and a gentler presentation, consult the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/howto/regex.html#regex-howto\"><span class=\"std std-ref\">Regular Expression HOWTO</span></a>.</p> <p>Regular expressions can contain both special and ordinary characters. Most ordinary characters, like <code>'A'</code>, <code>'a'</code>, or <code>'0'</code>, are the simplest regular expressions; they simply match themselves. You can concatenate ordinary characters, so <code>last</code> matches the string <code>'last'</code>. (In the rest of this section, we’ll write RE’s in <code>this special style</code>, usually without quotes, and strings to be matched <code>'in single quotes'</code>.)</p> <p>Some characters, like <code>'|'</code> or <code>'('</code>, are special. Special characters either stand for classes of ordinary characters, or affect how the regular expressions around them are interpreted.</p> <p>Repetition qualifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{m,n}</code>, etc) cannot be directly nested. This avoids ambiguity with the non-greedy modifier suffix <code>?</code>, and with other modifiers in other implementations. To apply a second repetition to an inner repetition, parentheses may be used. For example, the expression <code>(?:a{6})*</code> matches any multiple of six <code>'a'</code> characters.</p> <p>The special characters are:</p> <dl class=\"simple\" id=\"index-0\"> <dt>\n<code>.</code> </dt>\n<dd>\n<p>(Dot.) In the default mode, this matches any character except a newline. If the <a class=\"reference internal\" href=\"#re.DOTALL\" title=\"re.DOTALL\"><code>DOTALL</code></a> flag has been specified, this matches any character including a newline.</p> </dd> </dl> <dl class=\"simple\" id=\"index-1\"> <dt>\n<code>^</code> </dt>\n<dd>\n<p>(Caret.) Matches the start of the string, and in <a class=\"reference internal\" href=\"#re.MULTILINE\" title=\"re.MULTILINE\"><code>MULTILINE</code></a> mode also matches immediately after each newline.</p> </dd> </dl> <dl class=\"simple\" id=\"index-2\"> <dt>\n<code>$</code> </dt>\n<dd>\n<p>Matches the end of the string or just before the newline at the end of the string, and in <a class=\"reference internal\" href=\"#re.MULTILINE\" title=\"re.MULTILINE\"><code>MULTILINE</code></a> mode also matches before a newline. <code>foo</code> matches both ‘foo’ and ‘foobar’, while the regular expression <code>foo$</code> matches only ‘foo’. More interestingly, searching for <code>foo.$</code> in <code>'foo1\\nfoo2\\n'</code> matches ‘foo2’ normally, but ‘foo1’ in <a class=\"reference internal\" href=\"#re.MULTILINE\" title=\"re.MULTILINE\"><code>MULTILINE</code></a> mode; searching for a single <code>$</code> in <code>'foo\\n'</code> will find two (empty) matches: one just before the newline, and one at the end of the string.</p> </dd> </dl> <dl class=\"simple\" id=\"index-3\"> <dt>\n<code>*</code> </dt>\n<dd>\n<p>Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. <code>ab*</code> will match ‘a’, ‘ab’, or ‘a’ followed by any number of ‘b’s.</p> </dd> </dl> <dl class=\"simple\" id=\"index-4\"> <dt>\n<code>+</code> </dt>\n<dd>\n<p>Causes the resulting RE to match 1 or more repetitions of the preceding RE. <code>ab+</code> will match ‘a’ followed by any non-zero number of ‘b’s; it will not match just ‘a’.</p> </dd> </dl> <dl class=\"simple\" id=\"index-5\"> <dt>\n<code>?</code> </dt>\n<dd>\n<p>Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. <code>ab?</code> will match either ‘a’ or ‘ab’.</p> </dd> </dl> <dl class=\"simple\" id=\"index-6\"> <dt>\n<code>*?, +?, ??</code> </dt>\n<dd>\n<p>The <code>'*'</code>, <code>'+'</code>, and <code>'?'</code> qualifiers are all <em class=\"dfn\">greedy</em>; they match as much text as possible. Sometimes this behaviour isn’t desired; if the RE <code>&lt;.*&gt;</code> is matched against <code>'&lt;a&gt; b &lt;c&gt;'</code>, it will match the entire string, and not just <code>'&lt;a&gt;'</code>. Adding <code>?</code> after the qualifier makes it perform the match in <em class=\"dfn\">non-greedy</em> or <em class=\"dfn\">minimal</em> fashion; as <em>few</em> characters as possible will be matched. Using the RE <code>&lt;.*?&gt;</code> will match only <code>'&lt;a&gt;'</code>.</p> </dd> </dl> <dl class=\"simple\" id=\"index-7\"> <dt>\n<code>{m}</code> </dt>\n<dd>\n<p>Specifies that exactly <em>m</em> copies of the previous RE should be matched; fewer matches cause the entire RE not to match. For example, <code>a{6}</code> will match exactly six <code>'a'</code> characters, but not five.</p> </dd> <dt>\n<code>{m,n}</code> </dt>\n<dd>\n<p>Causes the resulting RE to match from <em>m</em> to <em>n</em> repetitions of the preceding RE, attempting to match as many repetitions as possible. For example, <code>a{3,5}</code> will match from 3 to 5 <code>'a'</code> characters. Omitting <em>m</em> specifies a lower bound of zero, and omitting <em>n</em> specifies an infinite upper bound. As an example, <code>a{4,}b</code> will match <code>'aaaab'</code> or a thousand <code>'a'</code> characters followed by a <code>'b'</code>, but not <code>'aaab'</code>. The comma may not be omitted or the modifier would be confused with the previously described form.</p> </dd> <dt>\n<code>{m,n}?</code> </dt>\n<dd>\n<p>Causes the resulting RE to match from <em>m</em> to <em>n</em> repetitions of the preceding RE, attempting to match as <em>few</em> repetitions as possible. This is the non-greedy version of the previous qualifier. For example, on the 6-character string <code>'aaaaaa'</code>, <code>a{3,5}</code> will match 5 <code>'a'</code> characters, while <code>a{3,5}?</code> will only match 3 characters.</p> </dd> </dl> <dl id=\"index-8\"> <dt>\n<code>\\</code> </dt>\n<dd>\n<p>Either escapes special characters (permitting you to match characters like <code>'*'</code>, <code>'?'</code>, and so forth), or signals a special sequence; special sequences are discussed below.</p> <p>If you’re not using a raw string to express the pattern, remember that Python also uses the backslash as an escape sequence in string literals; if the escape sequence isn’t recognized by Python’s parser, the backslash and subsequent character are included in the resulting string. However, if Python would recognize the resulting sequence, the backslash should be repeated twice. This is complicated and hard to understand, so it’s highly recommended that you use raw strings for all but the simplest expressions.</p> </dd> </dl> <dl id=\"index-9\"> <dt>\n<code>[]</code> </dt>\n<dd>\n<p>Used to indicate a set of characters. In a set:</p> <ul class=\"simple\"> <li>Characters can be listed individually, e.g. <code>[amk]</code> will match <code>'a'</code>, <code>'m'</code>, or <code>'k'</code>.</li> </ul> <ul class=\"simple\" id=\"index-10\"> <li>Ranges of characters can be indicated by giving two characters and separating them by a <code>'-'</code>, for example <code>[a-z]</code> will match any lowercase ASCII letter, <code>[0-5][0-9]</code> will match all the two-digits numbers from <code>00</code> to <code>59</code>, and <code>[0-9A-Fa-f]</code> will match any hexadecimal digit. If <code>-</code> is escaped (e.g. <code>[a\\-z]</code>) or if it’s placed as the first or last character (e.g. <code>[-a]</code> or <code>[a-]</code>), it will match a literal <code>'-'</code>.</li> <li>Special characters lose their special meaning inside sets. For example, <code>[(+*)]</code> will match any of the literal characters <code>'('</code>, <code>'+'</code>, <code>'*'</code>, or <code>')'</code>.</li> </ul> <ul class=\"simple\" id=\"index-11\"> <li>Character classes such as <code>\\w</code> or <code>\\S</code> (defined below) are also accepted inside a set, although the characters they match depends on whether <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>ASCII</code></a> or <a class=\"reference internal\" href=\"#re.LOCALE\" title=\"re.LOCALE\"><code>LOCALE</code></a> mode is in force.</li> </ul> <ul class=\"simple\" id=\"index-12\"> <li>Characters that are not within a range can be matched by <em class=\"dfn\">complementing</em> the set. If the first character of the set is <code>'^'</code>, all the characters that are <em>not</em> in the set will be matched. For example, <code>[^5]</code> will match any character except <code>'5'</code>, and <code>[^^]</code> will match any character except <code>'^'</code>. <code>^</code> has no special meaning if it’s not the first character in the set.</li> <li>To match a literal <code>']'</code> inside a set, precede it with a backslash, or place it at the beginning of the set. For example, both <code>[()[\\]{}]</code> and <code>[]()[{}]</code> will both match a parenthesis.</li> </ul> <ul class=\"simple\"> <li>Support of nested sets and set operations as in <a class=\"reference external\" href=\"https://unicode.org/reports/tr18/\">Unicode Technical Standard #18</a> might be added in the future. This would change the syntax, so to facilitate this change a <a class=\"reference internal\" href=\"exceptions#FutureWarning\" title=\"FutureWarning\"><code>FutureWarning</code></a> will be raised in ambiguous cases for the time being. That includes sets starting with a literal <code>'['</code> or containing literal character sequences <code>'--'</code>, <code>'&amp;&amp;'</code>, <code>'~~'</code>, and <code>'||'</code>. To avoid a warning escape them with a backslash.</li> </ul> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span><a class=\"reference internal\" href=\"exceptions#FutureWarning\" title=\"FutureWarning\"><code>FutureWarning</code></a> is raised if a character set contains constructs that will change semantically in the future.</p> </div> </dd> </dl> <dl class=\"simple\" id=\"index-13\"> <dt>\n<code>|</code> </dt>\n<dd>\n<p><code>A|B</code>, where <em>A</em> and <em>B</em> can be arbitrary REs, creates a regular expression that will match either <em>A</em> or <em>B</em>. An arbitrary number of REs can be separated by the <code>'|'</code> in this way. This can be used inside groups (see below) as well. As the target string is scanned, REs separated by <code>'|'</code> are tried from left to right. When one pattern completely matches, that branch is accepted. This means that once <em>A</em> matches, <em>B</em> will not be tested further, even if it would produce a longer overall match. In other words, the <code>'|'</code> operator is never greedy. To match a literal <code>'|'</code>, use <code>\\|</code>, or enclose it inside a character class, as in <code>[|]</code>.</p> </dd> </dl> <dl class=\"simple\" id=\"index-14\"> <dt>\n<code>(...)</code> </dt>\n<dd>\n<p>Matches whatever regular expression is inside the parentheses, and indicates the start and end of a group; the contents of a group can be retrieved after a match has been performed, and can be matched later in the string with the <code>\\number</code> special sequence, described below. To match the literals <code>'('</code> or <code>')'</code>, use <code>\\(</code> or <code>\\)</code>, or enclose them inside a character class: <code>[(]</code>, <code>[)]</code>.</p> </dd> </dl> <dl class=\"simple\" id=\"index-15\"> <dt>\n<code>(?...)</code> </dt>\n<dd>\n<p>This is an extension notation (a <code>'?'</code> following a <code>'('</code> is not meaningful otherwise). The first character after the <code>'?'</code> determines what the meaning and further syntax of the construct is. Extensions usually do not create a new group; <code>(?P&lt;name&gt;...)</code> is the only exception to this rule. Following are the currently supported extensions.</p> </dd> <dt>\n<code>(?aiLmsux)</code> </dt>\n<dd>\n<p>(One or more letters from the set <code>'a'</code>, <code>'i'</code>, <code>'L'</code>, <code>'m'</code>, <code>'s'</code>, <code>'u'</code>, <code>'x'</code>.) The group matches the empty string; the letters set the corresponding flags: <a class=\"reference internal\" href=\"#re.A\" title=\"re.A\"><code>re.A</code></a> (ASCII-only matching), <a class=\"reference internal\" href=\"#re.I\" title=\"re.I\"><code>re.I</code></a> (ignore case), <a class=\"reference internal\" href=\"#re.L\" title=\"re.L\"><code>re.L</code></a> (locale dependent), <a class=\"reference internal\" href=\"#re.M\" title=\"re.M\"><code>re.M</code></a> (multi-line), <a class=\"reference internal\" href=\"#re.S\" title=\"re.S\"><code>re.S</code></a> (dot matches all), <code>re.U</code> (Unicode matching), and <a class=\"reference internal\" href=\"#re.X\" title=\"re.X\"><code>re.X</code></a> (verbose), for the entire regular expression. (The flags are described in <a class=\"reference internal\" href=\"#contents-of-module-re\"><span class=\"std std-ref\">Module Contents</span></a>.) This is useful if you wish to include the flags as part of the regular expression, instead of passing a <em>flag</em> argument to the <a class=\"reference internal\" href=\"#re.compile\" title=\"re.compile\"><code>re.compile()</code></a> function. Flags should be used first in the expression string.</p> </dd> </dl> <dl id=\"index-16\"> <dt>\n<code>(?:...)</code> </dt>\n<dd>\n<p>A non-capturing version of regular parentheses. Matches whatever regular expression is inside the parentheses, but the substring matched by the group <em>cannot</em> be retrieved after performing a match or referenced later in the pattern.</p> </dd> <dt>\n<code>(?aiLmsux-imsx:...)</code> </dt>\n<dd>\n<p>(Zero or more letters from the set <code>'a'</code>, <code>'i'</code>, <code>'L'</code>, <code>'m'</code>, <code>'s'</code>, <code>'u'</code>, <code>'x'</code>, optionally followed by <code>'-'</code> followed by one or more letters from the <code>'i'</code>, <code>'m'</code>, <code>'s'</code>, <code>'x'</code>.) The letters set or remove the corresponding flags: <a class=\"reference internal\" href=\"#re.A\" title=\"re.A\"><code>re.A</code></a> (ASCII-only matching), <a class=\"reference internal\" href=\"#re.I\" title=\"re.I\"><code>re.I</code></a> (ignore case), <a class=\"reference internal\" href=\"#re.L\" title=\"re.L\"><code>re.L</code></a> (locale dependent), <a class=\"reference internal\" href=\"#re.M\" title=\"re.M\"><code>re.M</code></a> (multi-line), <a class=\"reference internal\" href=\"#re.S\" title=\"re.S\"><code>re.S</code></a> (dot matches all), <code>re.U</code> (Unicode matching), and <a class=\"reference internal\" href=\"#re.X\" title=\"re.X\"><code>re.X</code></a> (verbose), for the part of the expression. (The flags are described in <a class=\"reference internal\" href=\"#contents-of-module-re\"><span class=\"std std-ref\">Module Contents</span></a>.)</p> <p>The letters <code>'a'</code>, <code>'L'</code> and <code>'u'</code> are mutually exclusive when used as inline flags, so they can’t be combined or follow <code>'-'</code>. Instead, when one of them appears in an inline group, it overrides the matching mode in the enclosing group. In Unicode patterns <code>(?a:...)</code> switches to ASCII-only matching, and <code>(?u:...)</code> switches to Unicode matching (default). In byte pattern <code>(?L:...)</code> switches to locale depending matching, and <code>(?a:...)</code> switches to ASCII-only matching (default). This override is only in effect for the narrow inline group, and the original matching mode is restored outside of the group.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6.</span></p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The letters <code>'a'</code>, <code>'L'</code> and <code>'u'</code> also can be used in a group.</p> </div> </dd> </dl> <dl id=\"index-17\"> <dt>\n<code>(?P&lt;name&gt;...)</code> </dt>\n<dd>\n<p>Similar to regular parentheses, but the substring matched by the group is accessible via the symbolic group name <em>name</em>. Group names must be valid Python identifiers, and each group name must be defined only once within a regular expression. A symbolic group is also a numbered group, just as if the group were not named.</p> <p>Named groups can be referenced in three contexts. If the pattern is <code>(?P&lt;quote&gt;['\"]).*?(?P=quote)</code> (i.e. matching a string quoted with either single or double quotes):</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Context of reference to group “quote”</p></th> <th class=\"head\"><p>Ways to reference it</p></th> </tr> </thead>  <tr>\n<td><p>in the same pattern itself</p></td> <td>\n<ul class=\"simple\"> <li>\n<code>(?P=quote)</code> (as shown)</li> <li><code>\\1</code></li> </ul> </td> </tr> <tr>\n<td><p>when processing match object <em>m</em></p></td> <td>\n<ul class=\"simple\"> <li><code>m.group('quote')</code></li> <li>\n<code>m.end('quote')</code> (etc.)</li> </ul> </td> </tr> <tr>\n<td><p>in a string passed to the <em>repl</em> argument of <code>re.sub()</code></p></td> <td>\n<ul class=\"simple\"> <li><code>\\g&lt;quote&gt;</code></li> <li><code>\\g&lt;1&gt;</code></li> <li><code>\\1</code></li> </ul> </td> </tr>  </table> </dd> </dl> <dl class=\"simple\" id=\"index-18\"> <dt>\n<code>(?P=name)</code> </dt>\n<dd>\n<p>A backreference to a named group; it matches whatever text was matched by the earlier group named <em>name</em>.</p> </dd> </dl> <dl class=\"simple\" id=\"index-19\"> <dt>\n<code>(?#...)</code> </dt>\n<dd>\n<p>A comment; the contents of the parentheses are simply ignored.</p> </dd> </dl> <dl class=\"simple\" id=\"index-20\"> <dt>\n<code>(?=...)</code> </dt>\n<dd>\n<p>Matches if <code>...</code> matches next, but doesn’t consume any of the string. This is called a <em class=\"dfn\">lookahead assertion</em>. For example, <code>Isaac (?=Asimov)</code> will match <code>'Isaac '</code> only if it’s followed by <code>'Asimov'</code>.</p> </dd> </dl> <dl class=\"simple\" id=\"index-21\"> <dt>\n<code>(?!...)</code> </dt>\n<dd>\n<p>Matches if <code>...</code> doesn’t match next. This is a <em class=\"dfn\">negative lookahead assertion</em>. For example, <code>Isaac (?!Asimov)</code> will match <code>'Isaac '</code> only if it’s <em>not</em> followed by <code>'Asimov'</code>.</p> </dd> </dl> <dl id=\"index-22\"> <dt>\n<code>(?&lt;=...)</code> </dt>\n<dd>\n<p>Matches if the current position in the string is preceded by a match for <code>...</code> that ends at the current position. This is called a <em class=\"dfn\">positive lookbehind assertion</em>. <code>(?&lt;=abc)def</code> will find a match in <code>'abcdef'</code>, since the lookbehind will back up 3 characters and check if the contained pattern matches. The contained pattern must only match strings of some fixed length, meaning that <code>abc</code> or <code>a|b</code> are allowed, but <code>a*</code> and <code>a{3,4}</code> are not. Note that patterns which start with positive lookbehind assertions will not match at the beginning of the string being searched; you will most likely want to use the <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><code>search()</code></a> function rather than the <a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><code>match()</code></a> function:</p> <pre data-language=\"python\">&gt;&gt;&gt; import re\n&gt;&gt;&gt; m = re.search('(?&lt;=abc)def', 'abcdef')\n&gt;&gt;&gt; m.group(0)\n'def'\n</pre> <p>This example looks for a word following a hyphen:</p> <pre data-language=\"python\">&gt;&gt;&gt; m = re.search(r'(?&lt;=-)\\w+', 'spam-egg')\n&gt;&gt;&gt; m.group(0)\n'egg'\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>Added support for group references of fixed length.</p> </div> </dd> </dl> <dl class=\"simple\" id=\"index-23\"> <dt>\n<code>(?&lt;!...)</code> </dt>\n<dd>\n<p>Matches if the current position in the string is not preceded by a match for <code>...</code>. This is called a <em class=\"dfn\">negative lookbehind assertion</em>. Similar to positive lookbehind assertions, the contained pattern must only match strings of some fixed length. Patterns which start with negative lookbehind assertions may match at the beginning of the string being searched.</p> </dd> <dt>\n<code>(?(id/name)yes-pattern|no-pattern)</code> </dt>\n<dd>\n<p>Will try to match with <code>yes-pattern</code> if the group with given <em>id</em> or <em>name</em> exists, and with <code>no-pattern</code> if it doesn’t. <code>no-pattern</code> is optional and can be omitted. For example, <code>(&lt;)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)&gt;|$)</code> is a poor email matching pattern, which will match with <code>'&lt;user@host.com&gt;'</code> as well as <code>'user@host.com'</code>, but not with <code>'&lt;user@host.com'</code> nor <code>'user@host.com&gt;'</code>.</p> </dd> </dl> <p>The special sequences consist of <code>'\\'</code> and a character from the list below. If the ordinary character is not an ASCII digit or an ASCII letter, then the resulting RE will match the second character. For example, <code>\\$</code> matches the character <code>'$'</code>.</p> <dl class=\"simple\" id=\"index-24\"> <dt>\n<code>\\number</code> </dt>\n<dd>\n<p>Matches the contents of the group of the same number. Groups are numbered starting from 1. For example, <code>(.+) \\1</code> matches <code>'the the'</code> or <code>'55 55'</code>, but not <code>'thethe'</code> (note the space after the group). This special sequence can only be used to match one of the first 99 groups. If the first digit of <em>number</em> is 0, or <em>number</em> is 3 octal digits long, it will not be interpreted as a group match, but as the character with octal value <em>number</em>. Inside the <code>'['</code> and <code>']'</code> of a character class, all numeric escapes are treated as characters.</p> </dd> </dl> <dl class=\"simple\" id=\"index-25\"> <dt>\n<code>\\A</code> </dt>\n<dd>\n<p>Matches only at the start of the string.</p> </dd> </dl> <dl id=\"index-26\"> <dt>\n<code>\\b</code> </dt>\n<dd>\n<p>Matches the empty string, but only at the beginning or end of a word. A word is defined as a sequence of word characters. Note that formally, <code>\\b</code> is defined as the boundary between a <code>\\w</code> and a <code>\\W</code> character (or vice versa), or between <code>\\w</code> and the beginning/end of the string. This means that <code>r'\\bfoo\\b'</code> matches <code>'foo'</code>, <code>'foo.'</code>, <code>'(foo)'</code>, <code>'bar foo baz'</code> but not <code>'foobar'</code> or <code>'foo3'</code>.</p> <p>By default Unicode alphanumerics are the ones used in Unicode patterns, but this can be changed by using the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>ASCII</code></a> flag. Word boundaries are determined by the current locale if the <a class=\"reference internal\" href=\"#re.LOCALE\" title=\"re.LOCALE\"><code>LOCALE</code></a> flag is used. Inside a character range, <code>\\b</code> represents the backspace character, for compatibility with Python’s string literals.</p> </dd> </dl> <dl class=\"simple\" id=\"index-27\"> <dt>\n<code>\\B</code> </dt>\n<dd>\n<p>Matches the empty string, but only when it is <em>not</em> at the beginning or end of a word. This means that <code>r'py\\B'</code> matches <code>'python'</code>, <code>'py3'</code>, <code>'py2'</code>, but not <code>'py'</code>, <code>'py.'</code>, or <code>'py!'</code>. <code>\\B</code> is just the opposite of <code>\\b</code>, so word characters in Unicode patterns are Unicode alphanumerics or the underscore, although this can be changed by using the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>ASCII</code></a> flag. Word boundaries are determined by the current locale if the <a class=\"reference internal\" href=\"#re.LOCALE\" title=\"re.LOCALE\"><code>LOCALE</code></a> flag is used.</p> </dd> </dl> <dl class=\"simple\" id=\"index-28\"> <dt>\n<code>\\d</code> </dt>\n<dd>\n<dl class=\"simple\"> <dt>For Unicode (str) patterns:</dt>\n<dd>\n<p>Matches any Unicode decimal digit (that is, any character in Unicode character category [Nd]). This includes <code>[0-9]</code>, and also many other digit characters. If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>ASCII</code></a> flag is used only <code>[0-9]</code> is matched.</p> </dd> <dt>For 8-bit (bytes) patterns:</dt>\n<dd>\n<p>Matches any decimal digit; this is equivalent to <code>[0-9]</code>.</p> </dd> </dl> </dd> </dl> <dl class=\"simple\" id=\"index-29\"> <dt>\n<code>\\D</code> </dt>\n<dd>\n<p>Matches any character which is not a decimal digit. This is the opposite of <code>\\d</code>. If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>ASCII</code></a> flag is used this becomes the equivalent of <code>[^0-9]</code>.</p> </dd> </dl> <dl class=\"simple\" id=\"index-30\"> <dt>\n<code>\\s</code> </dt>\n<dd>\n<dl class=\"simple\"> <dt>For Unicode (str) patterns:</dt>\n<dd>\n<p>Matches Unicode whitespace characters (which includes <code>[ \\t\\n\\r\\f\\v]</code>, and also many other characters, for example the non-breaking spaces mandated by typography rules in many languages). If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>ASCII</code></a> flag is used, only <code>[ \\t\\n\\r\\f\\v]</code> is matched.</p> </dd> <dt>For 8-bit (bytes) patterns:</dt>\n<dd>\n<p>Matches characters considered whitespace in the ASCII character set; this is equivalent to <code>[ \\t\\n\\r\\f\\v]</code>.</p> </dd> </dl> </dd> </dl> <dl class=\"simple\" id=\"index-31\"> <dt>\n<code>\\S</code> </dt>\n<dd>\n<p>Matches any character which is not a whitespace character. This is the opposite of <code>\\s</code>. If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>ASCII</code></a> flag is used this becomes the equivalent of <code>[^ \\t\\n\\r\\f\\v]</code>.</p> </dd> </dl> <dl class=\"simple\" id=\"index-32\"> <dt>\n<code>\\w</code> </dt>\n<dd>\n<dl class=\"simple\"> <dt>For Unicode (str) patterns:</dt>\n<dd>\n<p>Matches Unicode word characters; this includes most characters that can be part of a word in any language, as well as numbers and the underscore. If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>ASCII</code></a> flag is used, only <code>[a-zA-Z0-9_]</code> is matched.</p> </dd> <dt>For 8-bit (bytes) patterns:</dt>\n<dd>\n<p>Matches characters considered alphanumeric in the ASCII character set; this is equivalent to <code>[a-zA-Z0-9_]</code>. If the <a class=\"reference internal\" href=\"#re.LOCALE\" title=\"re.LOCALE\"><code>LOCALE</code></a> flag is used, matches characters considered alphanumeric in the current locale and the underscore.</p> </dd> </dl> </dd> </dl> <dl class=\"simple\" id=\"index-33\"> <dt>\n<code>\\W</code> </dt>\n<dd>\n<p>Matches any character which is not a word character. This is the opposite of <code>\\w</code>. If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>ASCII</code></a> flag is used this becomes the equivalent of <code>[^a-zA-Z0-9_]</code>. If the <a class=\"reference internal\" href=\"#re.LOCALE\" title=\"re.LOCALE\"><code>LOCALE</code></a> flag is used, matches characters which are neither alphanumeric in the current locale nor the underscore.</p> </dd> </dl> <dl class=\"simple\" id=\"index-34\"> <dt>\n<code>\\Z</code> </dt>\n<dd>\n<p>Matches only at the end of the string.</p> </dd> </dl> <p id=\"index-35\">Most of the standard escapes supported by Python string literals are also accepted by the regular expression parser:</p> <pre data-language=\"python\">\\a      \\b      \\f      \\n\n\\N      \\r      \\t      \\u\n\\U      \\v      \\x      \\\\\n</pre> <p>(Note that <code>\\b</code> is used to represent word boundaries, and means “backspace” only inside character classes.)</p> <p><code>'\\u'</code>, <code>'\\U'</code>, and <code>'\\N'</code> escape sequences are only recognized in Unicode patterns. In bytes patterns they are errors. Unknown escapes of ASCII letters are reserved for future use and treated as errors.</p> <p>Octal escapes are included in a limited form. If the first digit is a 0, or if there are three octal digits, it is considered an octal escape. Otherwise, it is a group reference. As for string literals, octal escapes are always at most three digits in length.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>The <code>'\\u'</code> and <code>'\\U'</code> escape sequences have been added.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Unknown escapes consisting of <code>'\\'</code> and an ASCII letter now are errors.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>The <code>'\\N{name}'</code> escape sequence has been added. As in string literals, it expands to the named Unicode character (e.g. <code>'\\N{EM DASH}'</code>).</p> </div>   <h2 id=\"contents-of-module-re\">Module Contents</h2> <p id=\"module-contents\">The module defines several functions, constants, and an exception. Some of the functions are simplified versions of the full featured methods for compiled regular expressions. Most non-trivial applications always use the compiled form.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Flag constants are now instances of <code>RegexFlag</code>, which is a subclass of <a class=\"reference internal\" href=\"enum#enum.IntFlag\" title=\"enum.IntFlag\"><code>enum.IntFlag</code></a>.</p> </div> <dl class=\"function\"> <dt id=\"re.compile\">\n<code>re.compile(pattern, flags=0)</code> </dt> <dd>\n<p>Compile a regular expression pattern into a <a class=\"reference internal\" href=\"#re-objects\"><span class=\"std std-ref\">regular expression object</span></a>, which can be used for matching using its <a class=\"reference internal\" href=\"#re.Pattern.match\" title=\"re.Pattern.match\"><code>match()</code></a>, <a class=\"reference internal\" href=\"#re.Pattern.search\" title=\"re.Pattern.search\"><code>search()</code></a> and other methods, described below.</p> <p>The expression’s behaviour can be modified by specifying a <em>flags</em> value. Values can be any of the following variables, combined using bitwise OR (the <code>|</code> operator).</p> <p>The sequence</p> <pre data-language=\"python\">prog = re.compile(pattern)\nresult = prog.match(string)\n</pre> <p>is equivalent to</p> <pre data-language=\"python\">result = re.match(pattern, string)\n</pre> <p>but using <a class=\"reference internal\" href=\"#re.compile\" title=\"re.compile\"><code>re.compile()</code></a> and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The compiled versions of the most recent patterns passed to <a class=\"reference internal\" href=\"#re.compile\" title=\"re.compile\"><code>re.compile()</code></a> and the module-level matching functions are cached, so programs that use only a few regular expressions at a time needn’t worry about compiling regular expressions.</p> </div> </dd>\n</dl> <dl class=\"data\"> <dt id=\"re.A\">\n<code>re.A</code> </dt> <dt id=\"re.ASCII\">\n<code>re.ASCII</code> </dt> <dd>\n<p>Make <code>\\w</code>, <code>\\W</code>, <code>\\b</code>, <code>\\B</code>, <code>\\d</code>, <code>\\D</code>, <code>\\s</code> and <code>\\S</code> perform ASCII-only matching instead of full Unicode matching. This is only meaningful for Unicode patterns, and is ignored for byte patterns. Corresponds to the inline flag <code>(?a)</code>.</p> <p>Note that for backward compatibility, the <code>re.U</code> flag still exists (as well as its synonym <code>re.UNICODE</code> and its embedded counterpart <code>(?u)</code>), but these are redundant in Python 3 since matches are Unicode by default for strings (and Unicode matching isn’t allowed for bytes).</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"re.DEBUG\">\n<code>re.DEBUG</code> </dt> <dd>\n<p>Display debug information about compiled expression. No corresponding inline flag.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"re.I\">\n<code>re.I</code> </dt> <dt id=\"re.IGNORECASE\">\n<code>re.IGNORECASE</code> </dt> <dd>\n<p>Perform case-insensitive matching; expressions like <code>[A-Z]</code> will also match lowercase letters. Full Unicode matching (such as <code>Ü</code> matching <code>ü</code>) also works unless the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>re.ASCII</code></a> flag is used to disable non-ASCII matches. The current locale does not change the effect of this flag unless the <a class=\"reference internal\" href=\"#re.LOCALE\" title=\"re.LOCALE\"><code>re.LOCALE</code></a> flag is also used. Corresponds to the inline flag <code>(?i)</code>.</p> <p>Note that when the Unicode patterns <code>[a-z]</code> or <code>[A-Z]</code> are used in combination with the <a class=\"reference internal\" href=\"#re.IGNORECASE\" title=\"re.IGNORECASE\"><code>IGNORECASE</code></a> flag, they will match the 52 ASCII letters and 4 additional non-ASCII letters: ‘İ’ (U+0130, Latin capital letter I with dot above), ‘ı’ (U+0131, Latin small letter dotless i), ‘ſ’ (U+017F, Latin small letter long s) and ‘K’ (U+212A, Kelvin sign). If the <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>ASCII</code></a> flag is used, only letters ‘a’ to ‘z’ and ‘A’ to ‘Z’ are matched.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"re.L\">\n<code>re.L</code> </dt> <dt id=\"re.LOCALE\">\n<code>re.LOCALE</code> </dt> <dd>\n<p>Make <code>\\w</code>, <code>\\W</code>, <code>\\b</code>, <code>\\B</code> and case-insensitive matching dependent on the current locale. This flag can be used only with bytes patterns. The use of this flag is discouraged as the locale mechanism is very unreliable, it only handles one “culture” at a time, and it only works with 8-bit locales. Unicode matching is already enabled by default in Python 3 for Unicode (str) patterns, and it is able to handle different locales/languages. Corresponds to the inline flag <code>(?L)</code>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span><a class=\"reference internal\" href=\"#re.LOCALE\" title=\"re.LOCALE\"><code>re.LOCALE</code></a> can be used only with bytes patterns and is not compatible with <a class=\"reference internal\" href=\"#re.ASCII\" title=\"re.ASCII\"><code>re.ASCII</code></a>.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Compiled regular expression objects with the <a class=\"reference internal\" href=\"#re.LOCALE\" title=\"re.LOCALE\"><code>re.LOCALE</code></a> flag no longer depend on the locale at compile time. Only the locale at matching time affects the result of matching.</p> </div> </dd>\n</dl> <dl class=\"data\"> <dt id=\"re.M\">\n<code>re.M</code> </dt> <dt id=\"re.MULTILINE\">\n<code>re.MULTILINE</code> </dt> <dd>\n<p>When specified, the pattern character <code>'^'</code> matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character <code>'$'</code> matches at the end of the string and at the end of each line (immediately preceding each newline). By default, <code>'^'</code> matches only at the beginning of the string, and <code>'$'</code> only at the end of the string and immediately before the newline (if any) at the end of the string. Corresponds to the inline flag <code>(?m)</code>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"re.S\">\n<code>re.S</code> </dt> <dt id=\"re.DOTALL\">\n<code>re.DOTALL</code> </dt> <dd>\n<p>Make the <code>'.'</code> special character match any character at all, including a newline; without this flag, <code>'.'</code> will match anything <em>except</em> a newline. Corresponds to the inline flag <code>(?s)</code>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"re.X\">\n<code>re.X</code> </dt> <dt id=\"re.VERBOSE\">\n<code>re.VERBOSE</code> </dt> <dd>\n<p id=\"index-36\">This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments. Whitespace within the pattern is ignored, except when in a character class, or when preceded by an unescaped backslash, or within tokens like <code>*?</code>, <code>(?:</code> or <code>(?P&lt;...&gt;</code>. When a line contains a <code>#</code> that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such <code>#</code> through the end of the line are ignored.</p> <p>This means that the two following regular expression objects that match a decimal number are functionally equal:</p> <pre data-language=\"python\">a = re.compile(r\"\"\"\\d +  # the integral part\n                   \\.    # the decimal point\n                   \\d *  # some fractional digits\"\"\", re.X)\nb = re.compile(r\"\\d+\\.\\d*\")\n</pre> <p>Corresponds to the inline flag <code>(?x)</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"re.search\">\n<code>re.search(pattern, string, flags=0)</code> </dt> <dd>\n<p>Scan through <em>string</em> looking for the first location where the regular expression <em>pattern</em> produces a match, and return a corresponding <a class=\"reference internal\" href=\"#match-objects\"><span class=\"std std-ref\">match object</span></a>. Return <code>None</code> if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"re.match\">\n<code>re.match(pattern, string, flags=0)</code> </dt> <dd>\n<p>If zero or more characters at the beginning of <em>string</em> match the regular expression <em>pattern</em>, return a corresponding <a class=\"reference internal\" href=\"#match-objects\"><span class=\"std std-ref\">match object</span></a>. Return <code>None</code> if the string does not match the pattern; note that this is different from a zero-length match.</p> <p>Note that even in <a class=\"reference internal\" href=\"#re.MULTILINE\" title=\"re.MULTILINE\"><code>MULTILINE</code></a> mode, <a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><code>re.match()</code></a> will only match at the beginning of the string and not at the beginning of each line.</p> <p>If you want to locate a match anywhere in <em>string</em>, use <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><code>search()</code></a> instead (see also <a class=\"reference internal\" href=\"#search-vs-match\"><span class=\"std std-ref\">search() vs. match()</span></a>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"re.fullmatch\">\n<code>re.fullmatch(pattern, string, flags=0)</code> </dt> <dd>\n<p>If the whole <em>string</em> matches the regular expression <em>pattern</em>, return a corresponding <a class=\"reference internal\" href=\"#match-objects\"><span class=\"std std-ref\">match object</span></a>. Return <code>None</code> if the string does not match the pattern; note that this is different from a zero-length match.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4.</span></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"re.split\">\n<code>re.split(pattern, string, maxsplit=0, flags=0)</code> </dt> <dd>\n<p>Split <em>string</em> by the occurrences of <em>pattern</em>. If capturing parentheses are used in <em>pattern</em>, then the text of all groups in the pattern are also returned as part of the resulting list. If <em>maxsplit</em> is nonzero, at most <em>maxsplit</em> splits occur, and the remainder of the string is returned as the final element of the list.</p> <pre data-language=\"python\">&gt;&gt;&gt; re.split(r'\\W+', 'Words, words, words.')\n['Words', 'words', 'words', '']\n&gt;&gt;&gt; re.split(r'(\\W+)', 'Words, words, words.')\n['Words', ', ', 'words', ', ', 'words', '.', '']\n&gt;&gt;&gt; re.split(r'\\W+', 'Words, words, words.', 1)\n['Words', 'words, words.']\n&gt;&gt;&gt; re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)\n['0', '3', '9']\n</pre> <p>If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string. The same holds for the end of the string:</p> <pre data-language=\"python\">&gt;&gt;&gt; re.split(r'(\\W+)', '...words, words...')\n['', '...', 'words', ', ', 'words', '...', '']\n</pre> <p>That way, separator components are always found at the same relative indices within the result list.</p> <p>Empty matches for the pattern split the string only when not adjacent to a previous empty match.</p> <pre data-language=\"python\">&gt;&gt;&gt; re.split(r'\\b', 'Words, words, words.')\n['', 'Words', ', ', 'words', ', ', 'words', '.']\n&gt;&gt;&gt; re.split(r'\\W*', '...words...')\n['', '', 'w', 'o', 'r', 'd', 's', '', '']\n&gt;&gt;&gt; re.split(r'(\\W*)', '...words...')\n['', '...', '', '', 'w', '', 'o', '', 'r', '', 'd', '', 's', '...', '', '', '']\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.1: </span>Added the optional flags argument.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Added support of splitting on a pattern that could match an empty string.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"re.findall\">\n<code>re.findall(pattern, string, flags=0)</code> </dt> <dd>\n<p>Return all non-overlapping matches of <em>pattern</em> in <em>string</em>, as a list of strings. The <em>string</em> is scanned left-to-right, and matches are returned in the order found. If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Non-empty matches can now start just after a previous empty match.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"re.finditer\">\n<code>re.finditer(pattern, string, flags=0)</code> </dt> <dd>\n<p>Return an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-iterator\"><span class=\"xref std std-term\">iterator</span></a> yielding <a class=\"reference internal\" href=\"#match-objects\"><span class=\"std std-ref\">match objects</span></a> over all non-overlapping matches for the RE <em>pattern</em> in <em>string</em>. The <em>string</em> is scanned left-to-right, and matches are returned in the order found. Empty matches are included in the result.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Non-empty matches can now start just after a previous empty match.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"re.sub\">\n<code>re.sub(pattern, repl, string, count=0, flags=0)</code> </dt> <dd>\n<p>Return the string obtained by replacing the leftmost non-overlapping occurrences of <em>pattern</em> in <em>string</em> by the replacement <em>repl</em>. If the pattern isn’t found, <em>string</em> is returned unchanged. <em>repl</em> can be a string or a function; if it is a string, any backslash escapes in it are processed. That is, <code>\\n</code> is converted to a single newline character, <code>\\r</code> is converted to a carriage return, and so forth. Unknown escapes of ASCII letters are reserved for future use and treated as errors. Other unknown escapes such as <code>\\&amp;</code> are left alone. Backreferences, such as <code>\\6</code>, are replaced with the substring matched by group 6 in the pattern. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; re.sub(r'def\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(\\s*\\):',\n...        r'static PyObject*\\npy_\\1(void)\\n{',\n...        'def myfunc():')\n'static PyObject*\\npy_myfunc(void)\\n{'\n</pre> <p>If <em>repl</em> is a function, it is called for every non-overlapping occurrence of <em>pattern</em>. The function takes a single <a class=\"reference internal\" href=\"#match-objects\"><span class=\"std std-ref\">match object</span></a> argument, and returns the replacement string. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; def dashrepl(matchobj):\n...     if matchobj.group(0) == '-': return ' '\n...     else: return '-'\n&gt;&gt;&gt; re.sub('-{1,2}', dashrepl, 'pro----gram-files')\n'pro--gram files'\n&gt;&gt;&gt; re.sub(r'\\sAND\\s', ' &amp; ', 'Baked Beans And Spam', flags=re.IGNORECASE)\n'Baked Beans &amp; Spam'\n</pre> <p>The pattern may be a string or a <a class=\"reference internal\" href=\"#re-objects\"><span class=\"std std-ref\">pattern object</span></a>.</p> <p>The optional argument <em>count</em> is the maximum number of pattern occurrences to be replaced; <em>count</em> must be a non-negative integer. If omitted or zero, all occurrences will be replaced. Empty matches for the pattern are replaced only when not adjacent to a previous empty match, so <code>sub('x*', '-', 'abxd')</code> returns <code>'-a-b--d-'</code>.</p> <p id=\"index-37\">In string-type <em>repl</em> arguments, in addition to the character escapes and backreferences described above, <code>\\g&lt;name&gt;</code> will use the substring matched by the group named <code>name</code>, as defined by the <code>(?P&lt;name&gt;...)</code> syntax. <code>\\g&lt;number&gt;</code> uses the corresponding group number; <code>\\g&lt;2&gt;</code> is therefore equivalent to <code>\\2</code>, but isn’t ambiguous in a replacement such as <code>\\g&lt;2&gt;0</code>. <code>\\20</code> would be interpreted as a reference to group 20, not a reference to group 2 followed by the literal character <code>'0'</code>. The backreference <code>\\g&lt;0&gt;</code> substitutes in the entire substring matched by the RE.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.1: </span>Added the optional flags argument.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>Unmatched groups are replaced with an empty string.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Unknown escapes in <em>pattern</em> consisting of <code>'\\'</code> and an ASCII letter now are errors.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Unknown escapes in <em>repl</em> consisting of <code>'\\'</code> and an ASCII letter now are errors.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Empty matches for the pattern are replaced when adjacent to a previous non-empty match.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"re.subn\">\n<code>re.subn(pattern, repl, string, count=0, flags=0)</code> </dt> <dd>\n<p>Perform the same operation as <a class=\"reference internal\" href=\"#re.sub\" title=\"re.sub\"><code>sub()</code></a>, but return a tuple <code>(new_string,\nnumber_of_subs_made)</code>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.1: </span>Added the optional flags argument.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>Unmatched groups are replaced with an empty string.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"re.escape\">\n<code>re.escape(pattern)</code> </dt> <dd>\n<p>Escape special characters in <em>pattern</em>. This is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; print(re.escape('http://www.python.org'))\nhttp://www\\.python\\.org\n\n&gt;&gt;&gt; legal_chars = string.ascii_lowercase + string.digits + \"!#$%&amp;'*+-.^_`|~:\"\n&gt;&gt;&gt; print('[%s]+' % re.escape(legal_chars))\n[abcdefghijklmnopqrstuvwxyz0123456789!\\#\\$%\\&amp;'\\*\\+\\-\\.\\^_`\\|\\~:]+\n\n&gt;&gt;&gt; operators = ['+', '-', '*', '/', '**']\n&gt;&gt;&gt; print('|'.join(map(re.escape, sorted(operators, reverse=True))))\n/|\\-|\\+|\\*\\*|\\*\n</pre> <p>This function must not be used for the replacement string in <a class=\"reference internal\" href=\"#re.sub\" title=\"re.sub\"><code>sub()</code></a> and <a class=\"reference internal\" href=\"#re.subn\" title=\"re.subn\"><code>subn()</code></a>, only backslashes should be escaped. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; digits_re = r'\\d+'\n&gt;&gt;&gt; sample = '/usr/sbin/sendmail - 0 errors, 12 warnings'\n&gt;&gt;&gt; print(re.sub(digits_re, digits_re.replace('\\\\', r'\\\\'), sample))\n/usr/sbin/sendmail - \\d+ errors, \\d+ warnings\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>The <code>'_'</code> character is no longer escaped.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Only characters that can have special meaning in a regular expression are escaped. As a result, <code>'!'</code>, <code>'\"'</code>, <code>'%'</code>, <code>\"'\"</code>, <code>','</code>, <code>'/'</code>, <code>':'</code>, <code>';'</code>, <code>'&lt;'</code>, <code>'='</code>, <code>'&gt;'</code>, <code>'@'</code>, and <code>\"`\"</code> are no longer escaped.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"re.purge\">\n<code>re.purge()</code> </dt> <dd>\n<p>Clear the regular expression cache.</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"re.error\">\n<code>exception re.error(msg, pattern=None, pos=None)</code> </dt> <dd>\n<p>Exception raised when a string passed to one of the functions here is not a valid regular expression (for example, it might contain unmatched parentheses) or when some other error occurs during compilation or matching. It is never an error if a string contains no match for a pattern. The error instance has the following additional attributes:</p> <dl class=\"attribute\"> <dt id=\"re.error.msg\">\n<code>msg</code> </dt> <dd>\n<p>The unformatted error message.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.error.pattern\">\n<code>pattern</code> </dt> <dd>\n<p>The regular expression pattern.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.error.pos\">\n<code>pos</code> </dt> <dd>\n<p>The index in <em>pattern</em> where compilation failed (may be <code>None</code>).</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.error.lineno\">\n<code>lineno</code> </dt> <dd>\n<p>The line corresponding to <em>pos</em> (may be <code>None</code>).</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.error.colno\">\n<code>colno</code> </dt> <dd>\n<p>The column corresponding to <em>pos</em> (may be <code>None</code>).</p> </dd>\n</dl> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>Added additional attributes.</p> </div> </dd>\n</dl>   <h2 id=\"re-objects\">Regular Expression Objects</h2> <p id=\"regular-expression-objects\">Compiled regular expression objects support the following methods and attributes:</p> <dl class=\"method\"> <dt id=\"re.Pattern.search\">\n<code>Pattern.search(string[, pos[, endpos]])</code> </dt> <dd>\n<p>Scan through <em>string</em> looking for the first location where this regular expression produces a match, and return a corresponding <a class=\"reference internal\" href=\"#match-objects\"><span class=\"std std-ref\">match object</span></a>. Return <code>None</code> if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.</p> <p>The optional second parameter <em>pos</em> gives an index in the string where the search is to start; it defaults to <code>0</code>. This is not completely equivalent to slicing the string; the <code>'^'</code> pattern character matches at the real beginning of the string and at positions just after a newline, but not necessarily at the index where the search is to start.</p> <p>The optional parameter <em>endpos</em> limits how far the string will be searched; it will be as if the string is <em>endpos</em> characters long, so only the characters from <em>pos</em> to <code>endpos - 1</code> will be searched for a match. If <em>endpos</em> is less than <em>pos</em>, no match will be found; otherwise, if <em>rx</em> is a compiled regular expression object, <code>rx.search(string, 0, 50)</code> is equivalent to <code>rx.search(string[:50], 0)</code>.</p> <pre data-language=\"python\">&gt;&gt;&gt; pattern = re.compile(\"d\")\n&gt;&gt;&gt; pattern.search(\"dog\")     # Match at index 0\n&lt;re.Match object; span=(0, 1), match='d'&gt;\n&gt;&gt;&gt; pattern.search(\"dog\", 1)  # No match; search doesn't include the \"d\"\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Pattern.match\">\n<code>Pattern.match(string[, pos[, endpos]])</code> </dt> <dd>\n<p>If zero or more characters at the <em>beginning</em> of <em>string</em> match this regular expression, return a corresponding <a class=\"reference internal\" href=\"#match-objects\"><span class=\"std std-ref\">match object</span></a>. Return <code>None</code> if the string does not match the pattern; note that this is different from a zero-length match.</p> <p>The optional <em>pos</em> and <em>endpos</em> parameters have the same meaning as for the <a class=\"reference internal\" href=\"#re.Pattern.search\" title=\"re.Pattern.search\"><code>search()</code></a> method.</p> <pre data-language=\"python\">&gt;&gt;&gt; pattern = re.compile(\"o\")\n&gt;&gt;&gt; pattern.match(\"dog\")      # No match as \"o\" is not at the start of \"dog\".\n&gt;&gt;&gt; pattern.match(\"dog\", 1)   # Match as \"o\" is the 2nd character of \"dog\".\n&lt;re.Match object; span=(1, 2), match='o'&gt;\n</pre> <p>If you want to locate a match anywhere in <em>string</em>, use <a class=\"reference internal\" href=\"#re.Pattern.search\" title=\"re.Pattern.search\"><code>search()</code></a> instead (see also <a class=\"reference internal\" href=\"#search-vs-match\"><span class=\"std std-ref\">search() vs. match()</span></a>).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Pattern.fullmatch\">\n<code>Pattern.fullmatch(string[, pos[, endpos]])</code> </dt> <dd>\n<p>If the whole <em>string</em> matches this regular expression, return a corresponding <a class=\"reference internal\" href=\"#match-objects\"><span class=\"std std-ref\">match object</span></a>. Return <code>None</code> if the string does not match the pattern; note that this is different from a zero-length match.</p> <p>The optional <em>pos</em> and <em>endpos</em> parameters have the same meaning as for the <a class=\"reference internal\" href=\"#re.Pattern.search\" title=\"re.Pattern.search\"><code>search()</code></a> method.</p> <pre data-language=\"python\">&gt;&gt;&gt; pattern = re.compile(\"o[gh]\")\n&gt;&gt;&gt; pattern.fullmatch(\"dog\")      # No match as \"o\" is not at the start of \"dog\".\n&gt;&gt;&gt; pattern.fullmatch(\"ogre\")     # No match as not the full string matches.\n&gt;&gt;&gt; pattern.fullmatch(\"doggie\", 1, 3)   # Matches within given limits.\n&lt;re.Match object; span=(1, 3), match='og'&gt;\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Pattern.split\">\n<code>Pattern.split(string, maxsplit=0)</code> </dt> <dd>\n<p>Identical to the <a class=\"reference internal\" href=\"#re.split\" title=\"re.split\"><code>split()</code></a> function, using the compiled pattern.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Pattern.findall\">\n<code>Pattern.findall(string[, pos[, endpos]])</code> </dt> <dd>\n<p>Similar to the <a class=\"reference internal\" href=\"#re.findall\" title=\"re.findall\"><code>findall()</code></a> function, using the compiled pattern, but also accepts optional <em>pos</em> and <em>endpos</em> parameters that limit the search region like for <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><code>search()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Pattern.finditer\">\n<code>Pattern.finditer(string[, pos[, endpos]])</code> </dt> <dd>\n<p>Similar to the <a class=\"reference internal\" href=\"#re.finditer\" title=\"re.finditer\"><code>finditer()</code></a> function, using the compiled pattern, but also accepts optional <em>pos</em> and <em>endpos</em> parameters that limit the search region like for <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><code>search()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Pattern.sub\">\n<code>Pattern.sub(repl, string, count=0)</code> </dt> <dd>\n<p>Identical to the <a class=\"reference internal\" href=\"#re.sub\" title=\"re.sub\"><code>sub()</code></a> function, using the compiled pattern.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Pattern.subn\">\n<code>Pattern.subn(repl, string, count=0)</code> </dt> <dd>\n<p>Identical to the <a class=\"reference internal\" href=\"#re.subn\" title=\"re.subn\"><code>subn()</code></a> function, using the compiled pattern.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.Pattern.flags\">\n<code>Pattern.flags</code> </dt> <dd>\n<p>The regex matching flags. This is a combination of the flags given to <a class=\"reference internal\" href=\"#re.compile\" title=\"re.compile\"><code>compile()</code></a>, any <code>(?...)</code> inline flags in the pattern, and implicit flags such as <code>UNICODE</code> if the pattern is a Unicode string.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.Pattern.groups\">\n<code>Pattern.groups</code> </dt> <dd>\n<p>The number of capturing groups in the pattern.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.Pattern.groupindex\">\n<code>Pattern.groupindex</code> </dt> <dd>\n<p>A dictionary mapping any symbolic group names defined by <code>(?P&lt;id&gt;)</code> to group numbers. The dictionary is empty if no symbolic groups were used in the pattern.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.Pattern.pattern\">\n<code>Pattern.pattern</code> </dt> <dd>\n<p>The pattern string from which the pattern object was compiled.</p> </dd>\n</dl> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Added support of <a class=\"reference internal\" href=\"copy#copy.copy\" title=\"copy.copy\"><code>copy.copy()</code></a> and <a class=\"reference internal\" href=\"copy#copy.deepcopy\" title=\"copy.deepcopy\"><code>copy.deepcopy()</code></a>. Compiled regular expression objects are considered atomic.</p> </div>   <h2 id=\"id2\">Match Objects</h2> <p id=\"match-objects\">Match objects always have a boolean value of <code>True</code>. Since <a class=\"reference internal\" href=\"#re.Pattern.match\" title=\"re.Pattern.match\"><code>match()</code></a> and <a class=\"reference internal\" href=\"#re.Pattern.search\" title=\"re.Pattern.search\"><code>search()</code></a> return <code>None</code> when there is no match, you can test whether there was a match with a simple <code>if</code> statement:</p> <pre data-language=\"python\">match = re.search(pattern, string)\nif match:\n    process(match)\n</pre> <p>Match objects support the following methods and attributes:</p> <dl class=\"method\"> <dt id=\"re.Match.expand\">\n<code>Match.expand(template)</code> </dt> <dd>\n<p>Return the string obtained by doing backslash substitution on the template string <em>template</em>, as done by the <a class=\"reference internal\" href=\"#re.Pattern.sub\" title=\"re.Pattern.sub\"><code>sub()</code></a> method. Escapes such as <code>\\n</code> are converted to the appropriate characters, and numeric backreferences (<code>\\1</code>, <code>\\2</code>) and named backreferences (<code>\\g&lt;1&gt;</code>, <code>\\g&lt;name&gt;</code>) are replaced by the contents of the corresponding group.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>Unmatched groups are replaced with an empty string.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Match.group\">\n<code>Match.group([group1, ...])</code> </dt> <dd>\n<p>Returns one or more subgroups of the match. If there is a single argument, the result is a single string; if there are multiple arguments, the result is a tuple with one item per argument. Without arguments, <em>group1</em> defaults to zero (the whole match is returned). If a <em>groupN</em> argument is zero, the corresponding return value is the entire matching string; if it is in the inclusive range [1..99], it is the string matching the corresponding parenthesized group. If a group number is negative or larger than the number of groups defined in the pattern, an <a class=\"reference internal\" href=\"exceptions#IndexError\" title=\"IndexError\"><code>IndexError</code></a> exception is raised. If a group is contained in a part of the pattern that did not match, the corresponding result is <code>None</code>. If a group is contained in a part of the pattern that matched multiple times, the last match is returned.</p> <pre data-language=\"python\">&gt;&gt;&gt; m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\n&gt;&gt;&gt; m.group(0)       # The entire match\n'Isaac Newton'\n&gt;&gt;&gt; m.group(1)       # The first parenthesized subgroup.\n'Isaac'\n&gt;&gt;&gt; m.group(2)       # The second parenthesized subgroup.\n'Newton'\n&gt;&gt;&gt; m.group(1, 2)    # Multiple arguments give us a tuple.\n('Isaac', 'Newton')\n</pre> <p>If the regular expression uses the <code>(?P&lt;name&gt;...)</code> syntax, the <em>groupN</em> arguments may also be strings identifying groups by their group name. If a string argument is not used as a group name in the pattern, an <a class=\"reference internal\" href=\"exceptions#IndexError\" title=\"IndexError\"><code>IndexError</code></a> exception is raised.</p> <p>A moderately complicated example:</p> <pre data-language=\"python\">&gt;&gt;&gt; m = re.match(r\"(?P&lt;first_name&gt;\\w+) (?P&lt;last_name&gt;\\w+)\", \"Malcolm Reynolds\")\n&gt;&gt;&gt; m.group('first_name')\n'Malcolm'\n&gt;&gt;&gt; m.group('last_name')\n'Reynolds'\n</pre> <p>Named groups can also be referred to by their index:</p> <pre data-language=\"python\">&gt;&gt;&gt; m.group(1)\n'Malcolm'\n&gt;&gt;&gt; m.group(2)\n'Reynolds'\n</pre> <p>If a group matches multiple times, only the last match is accessible:</p> <pre data-language=\"python\">&gt;&gt;&gt; m = re.match(r\"(..)+\", \"a1b2c3\")  # Matches 3 times.\n&gt;&gt;&gt; m.group(1)                        # Returns only the last match.\n'c3'\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Match.__getitem__\">\n<code>Match.__getitem__(g)</code> </dt> <dd>\n<p>This is identical to <code>m.group(g)</code>. This allows easier access to an individual group from a match:</p> <pre data-language=\"python\">&gt;&gt;&gt; m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\n&gt;&gt;&gt; m[0]       # The entire match\n'Isaac Newton'\n&gt;&gt;&gt; m[1]       # The first parenthesized subgroup.\n'Isaac'\n&gt;&gt;&gt; m[2]       # The second parenthesized subgroup.\n'Newton'\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Match.groups\">\n<code>Match.groups(default=None)</code> </dt> <dd>\n<p>Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern. The <em>default</em> argument is used for groups that did not participate in the match; it defaults to <code>None</code>.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; m = re.match(r\"(\\d+)\\.(\\d+)\", \"24.1632\")\n&gt;&gt;&gt; m.groups()\n('24', '1632')\n</pre> <p>If we make the decimal place and everything after it optional, not all groups might participate in the match. These groups will default to <code>None</code> unless the <em>default</em> argument is given:</p> <pre data-language=\"python\">&gt;&gt;&gt; m = re.match(r\"(\\d+)\\.?(\\d+)?\", \"24\")\n&gt;&gt;&gt; m.groups()      # Second group defaults to None.\n('24', None)\n&gt;&gt;&gt; m.groups('0')   # Now, the second group defaults to '0'.\n('24', '0')\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Match.groupdict\">\n<code>Match.groupdict(default=None)</code> </dt> <dd>\n<p>Return a dictionary containing all the <em>named</em> subgroups of the match, keyed by the subgroup name. The <em>default</em> argument is used for groups that did not participate in the match; it defaults to <code>None</code>. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; m = re.match(r\"(?P&lt;first_name&gt;\\w+) (?P&lt;last_name&gt;\\w+)\", \"Malcolm Reynolds\")\n&gt;&gt;&gt; m.groupdict()\n{'first_name': 'Malcolm', 'last_name': 'Reynolds'}\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Match.start\">\n<code>Match.start([group])</code> </dt> <dt id=\"re.Match.end\">\n<code>Match.end([group])</code> </dt> <dd>\n<p>Return the indices of the start and end of the substring matched by <em>group</em>; <em>group</em> defaults to zero (meaning the whole matched substring). Return <code>-1</code> if <em>group</em> exists but did not contribute to the match. For a match object <em>m</em>, and a group <em>g</em> that did contribute to the match, the substring matched by group <em>g</em> (equivalent to <code>m.group(g)</code>) is</p> <pre data-language=\"python\">m.string[m.start(g):m.end(g)]\n</pre> <p>Note that <code>m.start(group)</code> will equal <code>m.end(group)</code> if <em>group</em> matched a null string. For example, after <code>m = re.search('b(c?)', 'cba')</code>, <code>m.start(0)</code> is 1, <code>m.end(0)</code> is 2, <code>m.start(1)</code> and <code>m.end(1)</code> are both 2, and <code>m.start(2)</code> raises an <a class=\"reference internal\" href=\"exceptions#IndexError\" title=\"IndexError\"><code>IndexError</code></a> exception.</p> <p>An example that will remove <em>remove_this</em> from email addresses:</p> <pre data-language=\"python\">&gt;&gt;&gt; email = \"tony@tiremove_thisger.net\"\n&gt;&gt;&gt; m = re.search(\"remove_this\", email)\n&gt;&gt;&gt; email[:m.start()] + email[m.end():]\n'tony@tiger.net'\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"re.Match.span\">\n<code>Match.span([group])</code> </dt> <dd>\n<p>For a match <em>m</em>, return the 2-tuple <code>(m.start(group), m.end(group))</code>. Note that if <em>group</em> did not contribute to the match, this is <code>(-1, -1)</code>. <em>group</em> defaults to zero, the entire match.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.Match.pos\">\n<code>Match.pos</code> </dt> <dd>\n<p>The value of <em>pos</em> which was passed to the <a class=\"reference internal\" href=\"#re.Pattern.search\" title=\"re.Pattern.search\"><code>search()</code></a> or <a class=\"reference internal\" href=\"#re.Pattern.match\" title=\"re.Pattern.match\"><code>match()</code></a> method of a <a class=\"reference internal\" href=\"#re-objects\"><span class=\"std std-ref\">regex object</span></a>. This is the index into the string at which the RE engine started looking for a match.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.Match.endpos\">\n<code>Match.endpos</code> </dt> <dd>\n<p>The value of <em>endpos</em> which was passed to the <a class=\"reference internal\" href=\"#re.Pattern.search\" title=\"re.Pattern.search\"><code>search()</code></a> or <a class=\"reference internal\" href=\"#re.Pattern.match\" title=\"re.Pattern.match\"><code>match()</code></a> method of a <a class=\"reference internal\" href=\"#re-objects\"><span class=\"std std-ref\">regex object</span></a>. This is the index into the string beyond which the RE engine will not go.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.Match.lastindex\">\n<code>Match.lastindex</code> </dt> <dd>\n<p>The integer index of the last matched capturing group, or <code>None</code> if no group was matched at all. For example, the expressions <code>(a)b</code>, <code>((a)(b))</code>, and <code>((ab))</code> will have <code>lastindex == 1</code> if applied to the string <code>'ab'</code>, while the expression <code>(a)(b)</code> will have <code>lastindex == 2</code>, if applied to the same string.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.Match.lastgroup\">\n<code>Match.lastgroup</code> </dt> <dd>\n<p>The name of the last matched capturing group, or <code>None</code> if the group didn’t have a name, or if no group was matched at all.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.Match.re\">\n<code>Match.re</code> </dt> <dd>\n<p>The <a class=\"reference internal\" href=\"#re-objects\"><span class=\"std std-ref\">regular expression object</span></a> whose <a class=\"reference internal\" href=\"#re.Pattern.match\" title=\"re.Pattern.match\"><code>match()</code></a> or <a class=\"reference internal\" href=\"#re.Pattern.search\" title=\"re.Pattern.search\"><code>search()</code></a> method produced this match instance.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"re.Match.string\">\n<code>Match.string</code> </dt> <dd>\n<p>The string passed to <a class=\"reference internal\" href=\"#re.Pattern.match\" title=\"re.Pattern.match\"><code>match()</code></a> or <a class=\"reference internal\" href=\"#re.Pattern.search\" title=\"re.Pattern.search\"><code>search()</code></a>.</p> </dd>\n</dl> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>Added support of <a class=\"reference internal\" href=\"copy#copy.copy\" title=\"copy.copy\"><code>copy.copy()</code></a> and <a class=\"reference internal\" href=\"copy#copy.deepcopy\" title=\"copy.deepcopy\"><code>copy.deepcopy()</code></a>. Match objects are considered atomic.</p> </div>   <h2 id=\"re-examples\">Regular Expression Examples</h2>  <h3 id=\"regular-expression-examples\">Checking for a Pair</h3> <p>In this example, we’ll use the following helper function to display match objects a little more gracefully:</p> <pre data-language=\"python\">def displaymatch(match):\n    if match is None:\n        return None\n    return '&lt;Match: %r, groups=%r&gt;' % (match.group(), match.groups())\n</pre> <p>Suppose you are writing a poker program where a player’s hand is represented as a 5-character string with each character representing a card, “a” for ace, “k” for king, “q” for queen, “j” for jack, “t” for 10, and “2” through “9” representing the card with that value.</p> <p>To see if a given string is a valid hand, one could do the following:</p> <pre data-language=\"python\">&gt;&gt;&gt; valid = re.compile(r\"^[a2-9tjqk]{5}$\")\n&gt;&gt;&gt; displaymatch(valid.match(\"akt5q\"))  # Valid.\n\"&lt;Match: 'akt5q', groups=()&gt;\"\n&gt;&gt;&gt; displaymatch(valid.match(\"akt5e\"))  # Invalid.\n&gt;&gt;&gt; displaymatch(valid.match(\"akt\"))    # Invalid.\n&gt;&gt;&gt; displaymatch(valid.match(\"727ak\"))  # Valid.\n\"&lt;Match: '727ak', groups=()&gt;\"\n</pre> <p>That last hand, <code>\"727ak\"</code>, contained a pair, or two of the same valued cards. To match this with a regular expression, one could use backreferences as such:</p> <pre data-language=\"python\">&gt;&gt;&gt; pair = re.compile(r\".*(.).*\\1\")\n&gt;&gt;&gt; displaymatch(pair.match(\"717ak\"))     # Pair of 7s.\n\"&lt;Match: '717', groups=('7',)&gt;\"\n&gt;&gt;&gt; displaymatch(pair.match(\"718ak\"))     # No pairs.\n&gt;&gt;&gt; displaymatch(pair.match(\"354aa\"))     # Pair of aces.\n\"&lt;Match: '354aa', groups=('a',)&gt;\"\n</pre> <p>To find out what card the pair consists of, one could use the <a class=\"reference internal\" href=\"#re.Match.group\" title=\"re.Match.group\"><code>group()</code></a> method of the match object in the following manner:</p> <pre data-language=\"python\">&gt;&gt;&gt; pair = re.compile(r\".*(.).*\\1\")\n&gt;&gt;&gt; pair.match(\"717ak\").group(1)\n'7'\n\n# Error because re.match() returns None, which doesn't have a group() method:\n&gt;&gt;&gt; pair.match(\"718ak\").group(1)\nTraceback (most recent call last):\n  File \"&lt;pyshell#23&gt;\", line 1, in &lt;module&gt;\n    re.match(r\".*(.).*\\1\", \"718ak\").group(1)\nAttributeError: 'NoneType' object has no attribute 'group'\n\n&gt;&gt;&gt; pair.match(\"354aa\").group(1)\n'a'\n</pre>   <h3 id=\"simulating-scanf\">Simulating scanf()</h3> <p id=\"index-38\">Python does not currently have an equivalent to <code>scanf()</code>. Regular expressions are generally more powerful, though also more verbose, than <code>scanf()</code> format strings. The table below offers some more-or-less equivalent mappings between <code>scanf()</code> format tokens and regular expressions.</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p><code>scanf()</code> Token</p></th> <th class=\"head\"><p>Regular Expression</p></th> </tr> </thead>  <tr>\n<td><p><code>%c</code></p></td> <td><p><code>.</code></p></td> </tr> <tr>\n<td><p><code>%5c</code></p></td> <td><p><code>.{5}</code></p></td> </tr> <tr>\n<td><p><code>%d</code></p></td> <td><p><code>[-+]?\\d+</code></p></td> </tr> <tr>\n<td><p><code>%e</code>, <code>%E</code>, <code>%f</code>, <code>%g</code></p></td> <td><p><code>[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?</code></p></td> </tr> <tr>\n<td><p><code>%i</code></p></td> <td><p><code>[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)</code></p></td> </tr> <tr>\n<td><p><code>%o</code></p></td> <td><p><code>[-+]?[0-7]+</code></p></td> </tr> <tr>\n<td><p><code>%s</code></p></td> <td><p><code>\\S+</code></p></td> </tr> <tr>\n<td><p><code>%u</code></p></td> <td><p><code>\\d+</code></p></td> </tr> <tr>\n<td><p><code>%x</code>, <code>%X</code></p></td> <td><p><code>[-+]?(0[xX])?[\\dA-Fa-f]+</code></p></td> </tr>  </table> <p>To extract the filename and numbers from a string like</p> <pre data-language=\"python\">/usr/sbin/sendmail - 0 errors, 4 warnings\n</pre> <p>you would use a <code>scanf()</code> format like</p> <pre data-language=\"python\">%s - %d errors, %d warnings\n</pre> <p>The equivalent regular expression would be</p> <pre data-language=\"python\">(\\S+) - (\\d+) errors, (\\d+) warnings\n</pre>   <h3 id=\"id3\">search() vs. match()</h3> <p id=\"search-vs-match\">Python offers two different primitive operations based on regular expressions: <a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><code>re.match()</code></a> checks for a match only at the beginning of the string, while <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><code>re.search()</code></a> checks for a match anywhere in the string (this is what Perl does by default).</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; re.match(\"c\", \"abcdef\")    # No match\n&gt;&gt;&gt; re.search(\"c\", \"abcdef\")   # Match\n&lt;re.Match object; span=(2, 3), match='c'&gt;\n</pre> <p>Regular expressions beginning with <code>'^'</code> can be used with <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><code>search()</code></a> to restrict the match at the beginning of the string:</p> <pre data-language=\"python\">&gt;&gt;&gt; re.match(\"c\", \"abcdef\")    # No match\n&gt;&gt;&gt; re.search(\"^c\", \"abcdef\")  # No match\n&gt;&gt;&gt; re.search(\"^a\", \"abcdef\")  # Match\n&lt;re.Match object; span=(0, 1), match='a'&gt;\n</pre> <p>Note however that in <a class=\"reference internal\" href=\"#re.MULTILINE\" title=\"re.MULTILINE\"><code>MULTILINE</code></a> mode <a class=\"reference internal\" href=\"#re.match\" title=\"re.match\"><code>match()</code></a> only matches at the beginning of the string, whereas using <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><code>search()</code></a> with a regular expression beginning with <code>'^'</code> will match at the beginning of each line.</p> <pre data-language=\"python\">&gt;&gt;&gt; re.match('X', 'A\\nB\\nX', re.MULTILINE)  # No match\n&gt;&gt;&gt; re.search('^X', 'A\\nB\\nX', re.MULTILINE)  # Match\n&lt;re.Match object; span=(4, 5), match='X'&gt;\n</pre>   <h3 id=\"making-a-phonebook\">Making a Phonebook</h3> <p><a class=\"reference internal\" href=\"#re.split\" title=\"re.split\"><code>split()</code></a> splits a string into a list delimited by the passed pattern. The method is invaluable for converting textual data into data structures that can be easily read and modified by Python as demonstrated in the following example that creates a phonebook.</p> <p>First, here is the input. Normally it may come from a file, here we are using triple-quoted string syntax</p> <pre data-language=\"pycon3\">&gt;&gt;&gt; text = \"\"\"Ross McFluff: 834.345.1254 155 Elm Street\n...\n... Ronald Heathmore: 892.345.3428 436 Finley Avenue\n... Frank Burger: 925.541.7625 662 South Dogwood Way\n...\n...\n... Heather Albrecht: 548.326.4584 919 Park Place\"\"\"\n</pre> <p>The entries are separated by one or more newlines. Now we convert the string into a list with each nonempty line having its own entry:</p> <pre data-language=\"pycon3\">&gt;&gt;&gt; entries = re.split(\"\\n+\", text)\n&gt;&gt;&gt; entries\n['Ross McFluff: 834.345.1254 155 Elm Street',\n'Ronald Heathmore: 892.345.3428 436 Finley Avenue',\n'Frank Burger: 925.541.7625 662 South Dogwood Way',\n'Heather Albrecht: 548.326.4584 919 Park Place']\n</pre> <p>Finally, split each entry into a list with first name, last name, telephone number, and address. We use the <code>maxsplit</code> parameter of <a class=\"reference internal\" href=\"#re.split\" title=\"re.split\"><code>split()</code></a> because the address has spaces, our splitting pattern, in it:</p> <pre data-language=\"pycon3\">&gt;&gt;&gt; [re.split(\":? \", entry, 3) for entry in entries]\n[['Ross', 'McFluff', '834.345.1254', '155 Elm Street'],\n['Ronald', 'Heathmore', '892.345.3428', '436 Finley Avenue'],\n['Frank', 'Burger', '925.541.7625', '662 South Dogwood Way'],\n['Heather', 'Albrecht', '548.326.4584', '919 Park Place']]\n</pre> <p>The <code>:?</code> pattern matches the colon after the last name, so that it does not occur in the result list. With a <code>maxsplit</code> of <code>4</code>, we could separate the house number from the street name:</p> <pre data-language=\"pycon3\">&gt;&gt;&gt; [re.split(\":? \", entry, 4) for entry in entries]\n[['Ross', 'McFluff', '834.345.1254', '155', 'Elm Street'],\n['Ronald', 'Heathmore', '892.345.3428', '436', 'Finley Avenue'],\n['Frank', 'Burger', '925.541.7625', '662', 'South Dogwood Way'],\n['Heather', 'Albrecht', '548.326.4584', '919', 'Park Place']]\n</pre>   <h3 id=\"text-munging\">Text Munging</h3> <p><a class=\"reference internal\" href=\"#re.sub\" title=\"re.sub\"><code>sub()</code></a> replaces every occurrence of a pattern with a string or the result of a function. This example demonstrates using <a class=\"reference internal\" href=\"#re.sub\" title=\"re.sub\"><code>sub()</code></a> with a function to “munge” text, or randomize the order of all the characters in each word of a sentence except for the first and last characters:</p> <pre data-language=\"python\">&gt;&gt;&gt; def repl(m):\n...     inner_word = list(m.group(2))\n...     random.shuffle(inner_word)\n...     return m.group(1) + \"\".join(inner_word) + m.group(3)\n&gt;&gt;&gt; text = \"Professor Abdolmalek, please report your absences promptly.\"\n&gt;&gt;&gt; re.sub(r\"(\\w)(\\w+)(\\w)\", repl, text)\n'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.'\n&gt;&gt;&gt; re.sub(r\"(\\w)(\\w+)(\\w)\", repl, text)\n'Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.'\n</pre>   <h3 id=\"finding-all-adverbs\">Finding all Adverbs</h3> <p><a class=\"reference internal\" href=\"#re.findall\" title=\"re.findall\"><code>findall()</code></a> matches <em>all</em> occurrences of a pattern, not just the first one as <a class=\"reference internal\" href=\"#re.search\" title=\"re.search\"><code>search()</code></a> does. For example, if a writer wanted to find all of the adverbs in some text, they might use <a class=\"reference internal\" href=\"#re.findall\" title=\"re.findall\"><code>findall()</code></a> in the following manner:</p> <pre data-language=\"python\">&gt;&gt;&gt; text = \"He was carefully disguised but captured quickly by police.\"\n&gt;&gt;&gt; re.findall(r\"\\w+ly\", text)\n['carefully', 'quickly']\n</pre>   <h3 id=\"finding-all-adverbs-and-their-positions\">Finding all Adverbs and their Positions</h3> <p>If one wants more information about all matches of a pattern than the matched text, <a class=\"reference internal\" href=\"#re.finditer\" title=\"re.finditer\"><code>finditer()</code></a> is useful as it provides <a class=\"reference internal\" href=\"#match-objects\"><span class=\"std std-ref\">match objects</span></a> instead of strings. Continuing with the previous example, if a writer wanted to find all of the adverbs <em>and their positions</em> in some text, they would use <a class=\"reference internal\" href=\"#re.finditer\" title=\"re.finditer\"><code>finditer()</code></a> in the following manner:</p> <pre data-language=\"python\">&gt;&gt;&gt; text = \"He was carefully disguised but captured quickly by police.\"\n&gt;&gt;&gt; for m in re.finditer(r\"\\w+ly\", text):\n...     print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))\n07-16: carefully\n40-47: quickly\n</pre>   <h3 id=\"raw-string-notation\">Raw String Notation</h3> <p>Raw string notation (<code>r\"text\"</code>) keeps regular expressions sane. Without it, every backslash (<code>'\\'</code>) in a regular expression would have to be prefixed with another one to escape it. For example, the two following lines of code are functionally identical:</p> <pre data-language=\"python\">&gt;&gt;&gt; re.match(r\"\\W(.)\\1\\W\", \" ff \")\n&lt;re.Match object; span=(0, 4), match=' ff '&gt;\n&gt;&gt;&gt; re.match(\"\\\\W(.)\\\\1\\\\W\", \" ff \")\n&lt;re.Match object; span=(0, 4), match=' ff '&gt;\n</pre> <p>When one wants to match a literal backslash, it must be escaped in the regular expression. With raw string notation, this means <code>r\"\\\\\"</code>. Without raw string notation, one must use <code>\"\\\\\\\\\"</code>, making the following lines of code functionally identical:</p> <pre data-language=\"python\">&gt;&gt;&gt; re.match(r\"\\\\\", r\"\\\\\")\n&lt;re.Match object; span=(0, 1), match='\\\\'&gt;\n&gt;&gt;&gt; re.match(\"\\\\\\\\\", r\"\\\\\")\n&lt;re.Match object; span=(0, 1), match='\\\\'&gt;\n</pre>   <h3 id=\"writing-a-tokenizer\">Writing a Tokenizer</h3> <p>A <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Lexical_analysis\">tokenizer or scanner</a> analyzes a string to categorize groups of characters. This is a useful first step in writing a compiler or interpreter.</p> <p>The text categories are specified with regular expressions. The technique is to combine those into a single master regular expression and to loop over successive matches:</p> <pre data-language=\"python\">from typing import NamedTuple\nimport re\n\nclass Token(NamedTuple):\n    type: str\n    value: str\n    line: int\n    column: int\n\ndef tokenize(code):\n    keywords = {'IF', 'THEN', 'ENDIF', 'FOR', 'NEXT', 'GOSUB', 'RETURN'}\n    token_specification = [\n        ('NUMBER',   r'\\d+(\\.\\d*)?'),  # Integer or decimal number\n        ('ASSIGN',   r':='),           # Assignment operator\n        ('END',      r';'),            # Statement terminator\n        ('ID',       r'[A-Za-z]+'),    # Identifiers\n        ('OP',       r'[+\\-*/]'),      # Arithmetic operators\n        ('NEWLINE',  r'\\n'),           # Line endings\n        ('SKIP',     r'[ \\t]+'),       # Skip over spaces and tabs\n        ('MISMATCH', r'.'),            # Any other character\n    ]\n    tok_regex = '|'.join('(?P&lt;%s&gt;%s)' % pair for pair in token_specification)\n    line_num = 1\n    line_start = 0\n    for mo in re.finditer(tok_regex, code):\n        kind = mo.lastgroup\n        value = mo.group()\n        column = mo.start() - line_start\n        if kind == 'NUMBER':\n            value = float(value) if '.' in value else int(value)\n        elif kind == 'ID' and value in keywords:\n            kind = value\n        elif kind == 'NEWLINE':\n            line_start = mo.end()\n            line_num += 1\n            continue\n        elif kind == 'SKIP':\n            continue\n        elif kind == 'MISMATCH':\n            raise RuntimeError(f'{value!r} unexpected on line {line_num}')\n        yield Token(kind, value, line_num, column)\n\nstatements = '''\n    IF quantity THEN\n        total := total + price * quantity;\n        tax := price * 0.05;\n    ENDIF;\n'''\n\nfor token in tokenize(statements):\n    print(token)\n</pre> <p>The tokenizer produces the following output:</p> <pre data-language=\"python\">Token(type='IF', value='IF', line=2, column=4)\nToken(type='ID', value='quantity', line=2, column=7)\nToken(type='THEN', value='THEN', line=2, column=16)\nToken(type='ID', value='total', line=3, column=8)\nToken(type='ASSIGN', value=':=', line=3, column=14)\nToken(type='ID', value='total', line=3, column=17)\nToken(type='OP', value='+', line=3, column=23)\nToken(type='ID', value='price', line=3, column=25)\nToken(type='OP', value='*', line=3, column=31)\nToken(type='ID', value='quantity', line=3, column=33)\nToken(type='END', value=';', line=3, column=41)\nToken(type='ID', value='tax', line=4, column=8)\nToken(type='ASSIGN', value=':=', line=4, column=12)\nToken(type='ID', value='price', line=4, column=15)\nToken(type='OP', value='*', line=4, column=21)\nToken(type='NUMBER', value=0.05, line=4, column=23)\nToken(type='END', value=';', line=4, column=27)\nToken(type='ENDIF', value='ENDIF', line=5, column=4)\nToken(type='END', value=';', line=5, column=9)\n</pre> <dl class=\"citation\"> <dt class=\"label\" id=\"frie09\">\n<code>Frie09</code> </dt> <dd>\n<p>Friedl, Jeffrey. Mastering Regular Expressions. 3rd ed., O’Reilly Media, 2009. The third edition of the book no longer covers Python at all, but the first edition covered writing good regular expression patterns in great detail.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/re.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/re.html</a>\n  </p>\n</div>\n","library/difflib":"<h1 id=\"difflib-helpers-for-computing-deltas\">difflib — Helpers for computing deltas</h1> <p id=\"module-difflib\"><strong>Source code:</strong> <a class=\"reference external\" href=\"https://github.com/python/cpython/tree/3.9/Lib/difflib.py\">Lib/difflib.py</a></p>  <p>This module provides classes and functions for comparing sequences. It can be used for example, for comparing files, and can produce information about file differences in various formats, including HTML and context and unified diffs. For comparing directories and files, see also, the <a class=\"reference internal\" href=\"filecmp#module-filecmp\" title=\"filecmp: Compare files efficiently.\"><code>filecmp</code></a> module.</p> <dl class=\"class\"> <dt>\n<code>class difflib.SequenceMatcher</code> </dt> <dd>\n<p>This is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-hashable\"><span class=\"xref std std-term\">hashable</span></a>. The basic algorithm predates, and is a little fancier than, an algorithm published in the late 1980’s by Ratcliff and Obershelp under the hyperbolic name “gestalt pattern matching.” The idea is to find the longest contiguous matching subsequence that contains no “junk” elements; these “junk” elements are ones that are uninteresting in some sense, such as blank lines or whitespace. (Handling junk is an extension to the Ratcliff and Obershelp algorithm.) The same idea is then applied recursively to the pieces of the sequences to the left and to the right of the matching subsequence. This does not yield minimal edit sequences, but does tend to yield matches that “look right” to people.</p> <p><strong>Timing:</strong> The basic Ratcliff-Obershelp algorithm is cubic time in the worst case and quadratic time in the expected case. <a class=\"reference internal\" href=\"#difflib.SequenceMatcher\" title=\"difflib.SequenceMatcher\"><code>SequenceMatcher</code></a> is quadratic time for the worst case and has expected-case behavior dependent in a complicated way on how many elements the sequences have in common; best case time is linear.</p> <p><strong>Automatic junk heuristic:</strong> <a class=\"reference internal\" href=\"#difflib.SequenceMatcher\" title=\"difflib.SequenceMatcher\"><code>SequenceMatcher</code></a> supports a heuristic that automatically treats certain sequence items as junk. The heuristic counts how many times each individual item appears in the sequence. If an item’s duplicates (after the first one) account for more than 1% of the sequence and the sequence is at least 200 items long, this item is marked as “popular” and is treated as junk for the purpose of sequence matching. This heuristic can be turned off by setting the <code>autojunk</code> argument to <code>False</code> when creating the <a class=\"reference internal\" href=\"#difflib.SequenceMatcher\" title=\"difflib.SequenceMatcher\"><code>SequenceMatcher</code></a>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2: </span>The <em>autojunk</em> parameter.</p> </div> </dd>\n</dl> <dl class=\"class\"> <dt id=\"difflib.Differ\">\n<code>class difflib.Differ</code> </dt> <dd>\n<p>This is a class for comparing sequences of lines of text, and producing human-readable differences or deltas. Differ uses <a class=\"reference internal\" href=\"#difflib.SequenceMatcher\" title=\"difflib.SequenceMatcher\"><code>SequenceMatcher</code></a> both to compare sequences of lines, and to compare sequences of characters within similar (near-matching) lines.</p> <p>Each line of a <a class=\"reference internal\" href=\"#difflib.Differ\" title=\"difflib.Differ\"><code>Differ</code></a> delta begins with a two-letter code:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Code</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'- '</code></p></td> <td><p>line unique to sequence 1</p></td> </tr> <tr>\n<td><p><code>'+ '</code></p></td> <td><p>line unique to sequence 2</p></td> </tr> <tr>\n<td><p><code>'  '</code></p></td> <td><p>line common to both sequences</p></td> </tr> <tr>\n<td><p><code>'? '</code></p></td> <td><p>line not present in either input sequence</p></td> </tr>  </table> <p>Lines beginning with ‘<code>?</code>’ attempt to guide the eye to intraline differences, and were not present in either input sequence. These lines can be confusing if the sequences contain tab characters.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"difflib.HtmlDiff\">\n<code>class difflib.HtmlDiff</code> </dt> <dd>\n<p>This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights. The table can be generated in either full or contextual difference mode.</p> <p>The constructor for this class is:</p> <dl class=\"method\"> <dt id=\"difflib.HtmlDiff.__init__\">\n<code>__init__(tabsize=8, wrapcolumn=None, linejunk=None, charjunk=IS_CHARACTER_JUNK)</code> </dt> <dd>\n<p>Initializes instance of <a class=\"reference internal\" href=\"#difflib.HtmlDiff\" title=\"difflib.HtmlDiff\"><code>HtmlDiff</code></a>.</p> <p><em>tabsize</em> is an optional keyword argument to specify tab stop spacing and defaults to <code>8</code>.</p> <p><em>wrapcolumn</em> is an optional keyword to specify column number where lines are broken and wrapped, defaults to <code>None</code> where lines are not wrapped.</p> <p><em>linejunk</em> and <em>charjunk</em> are optional keyword arguments passed into <a class=\"reference internal\" href=\"#difflib.ndiff\" title=\"difflib.ndiff\"><code>ndiff()</code></a> (used by <a class=\"reference internal\" href=\"#difflib.HtmlDiff\" title=\"difflib.HtmlDiff\"><code>HtmlDiff</code></a> to generate the side by side HTML differences). See <a class=\"reference internal\" href=\"#difflib.ndiff\" title=\"difflib.ndiff\"><code>ndiff()</code></a> documentation for argument default values and descriptions.</p> </dd>\n</dl> <p>The following methods are public:</p> <dl class=\"method\"> <dt id=\"difflib.HtmlDiff.make_file\">\n<code>make_file(fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5, *, charset='utf-8')</code> </dt> <dd>\n<p>Compares <em>fromlines</em> and <em>tolines</em> (lists of strings) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted.</p> <p><em>fromdesc</em> and <em>todesc</em> are optional keyword arguments to specify from/to file column header strings (both default to an empty string).</p> <p><em>context</em> and <em>numlines</em> are both optional keyword arguments. Set <em>context</em> to <code>True</code> when contextual differences are to be shown, else the default is <code>False</code> to show the full files. <em>numlines</em> defaults to <code>5</code>. When <em>context</em> is <code>True</code> <em>numlines</em> controls the number of context lines which surround the difference highlights. When <em>context</em> is <code>False</code> <em>numlines</em> controls the number of lines which are shown before a difference highlight when using the “next” hyperlinks (setting to zero would cause the “next” hyperlinks to place the next difference highlight at the top of the browser without any leading context).</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p><em>fromdesc</em> and <em>todesc</em> are interpreted as unescaped HTML and should be properly escaped while receiving input from untrusted sources.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span><em>charset</em> keyword-only argument was added. The default charset of HTML document changed from <code>'ISO-8859-1'</code> to <code>'utf-8'</code>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"difflib.HtmlDiff.make_table\">\n<code>make_table(fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5)</code> </dt> <dd>\n<p>Compares <em>fromlines</em> and <em>tolines</em> (lists of strings) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted.</p> <p>The arguments for this method are the same as those for the <a class=\"reference internal\" href=\"#difflib.HtmlDiff.make_file\" title=\"difflib.HtmlDiff.make_file\"><code>make_file()</code></a> method.</p> </dd>\n</dl> <p><code>Tools/scripts/diff.py</code> is a command-line front-end to this class and contains a good example of its use.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"difflib.context_diff\">\n<code>difflib.context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\\n')</code> </dt> <dd>\n<p>Compare <em>a</em> and <em>b</em> (lists of strings); return a delta (a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generator\"><span class=\"xref std std-term\">generator</span></a> generating the delta lines) in context diff format.</p> <p>Context diffs are a compact way of showing just the lines that have changed plus a few lines of context. The changes are shown in a before/after style. The number of context lines is set by <em>n</em> which defaults to three.</p> <p>By default, the diff control lines (those with <code>***</code> or <code>---</code>) are created with a trailing newline. This is helpful so that inputs created from <a class=\"reference internal\" href=\"io#io.IOBase.readlines\" title=\"io.IOBase.readlines\"><code>io.IOBase.readlines()</code></a> result in diffs that are suitable for use with <a class=\"reference internal\" href=\"io#io.IOBase.writelines\" title=\"io.IOBase.writelines\"><code>io.IOBase.writelines()</code></a> since both the inputs and outputs have trailing newlines.</p> <p>For inputs that do not have trailing newlines, set the <em>lineterm</em> argument to <code>\"\"</code> so that the output will be uniformly newline free.</p> <p>The context diff format normally has a header for filenames and modification times. Any or all of these may be specified using strings for <em>fromfile</em>, <em>tofile</em>, <em>fromfiledate</em>, and <em>tofiledate</em>. The modification times are normally expressed in the ISO 8601 format. If not specified, the strings default to blanks.</p> <pre data-language=\"python\">&gt;&gt;&gt; s1 = ['bacon\\n', 'eggs\\n', 'ham\\n', 'guido\\n']\n&gt;&gt;&gt; s2 = ['python\\n', 'eggy\\n', 'hamster\\n', 'guido\\n']\n&gt;&gt;&gt; sys.stdout.writelines(context_diff(s1, s2, fromfile='before.py', tofile='after.py'))\n*** before.py\n--- after.py\n***************\n*** 1,4 ****\n! bacon\n! eggs\n! ham\n  guido\n--- 1,4 ----\n! python\n! eggy\n! hamster\n  guido\n</pre> <p>See <a class=\"reference internal\" href=\"#difflib-interface\"><span class=\"std std-ref\">A command-line interface to difflib</span></a> for a more detailed example.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"difflib.get_close_matches\">\n<code>difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)</code> </dt> <dd>\n<p>Return a list of the best “good enough” matches. <em>word</em> is a sequence for which close matches are desired (typically a string), and <em>possibilities</em> is a list of sequences against which to match <em>word</em> (typically a list of strings).</p> <p>Optional argument <em>n</em> (default <code>3</code>) is the maximum number of close matches to return; <em>n</em> must be greater than <code>0</code>.</p> <p>Optional argument <em>cutoff</em> (default <code>0.6</code>) is a float in the range [0, 1]. Possibilities that don’t score at least that similar to <em>word</em> are ignored.</p> <p>The best (no more than <em>n</em>) matches among the possibilities are returned in a list, sorted by similarity score, most similar first.</p> <pre data-language=\"python\">&gt;&gt;&gt; get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy'])\n['apple', 'ape']\n&gt;&gt;&gt; import keyword\n&gt;&gt;&gt; get_close_matches('wheel', keyword.kwlist)\n['while']\n&gt;&gt;&gt; get_close_matches('pineapple', keyword.kwlist)\n[]\n&gt;&gt;&gt; get_close_matches('accept', keyword.kwlist)\n['except']\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"difflib.ndiff\">\n<code>difflib.ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)</code> </dt> <dd>\n<p>Compare <em>a</em> and <em>b</em> (lists of strings); return a <a class=\"reference internal\" href=\"#difflib.Differ\" title=\"difflib.Differ\"><code>Differ</code></a>-style delta (a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generator\"><span class=\"xref std std-term\">generator</span></a> generating the delta lines).</p> <p>Optional keyword parameters <em>linejunk</em> and <em>charjunk</em> are filtering functions (or <code>None</code>):</p> <p><em>linejunk</em>: A function that accepts a single string argument, and returns true if the string is junk, or false if not. The default is <code>None</code>. There is also a module-level function <a class=\"reference internal\" href=\"#difflib.IS_LINE_JUNK\" title=\"difflib.IS_LINE_JUNK\"><code>IS_LINE_JUNK()</code></a>, which filters out lines without visible characters, except for at most one pound character (<code>'#'</code>) – however the underlying <a class=\"reference internal\" href=\"#difflib.SequenceMatcher\" title=\"difflib.SequenceMatcher\"><code>SequenceMatcher</code></a> class does a dynamic analysis of which lines are so frequent as to constitute noise, and this usually works better than using this function.</p> <p><em>charjunk</em>: A function that accepts a character (a string of length 1), and returns if the character is junk, or false if not. The default is module-level function <a class=\"reference internal\" href=\"#difflib.IS_CHARACTER_JUNK\" title=\"difflib.IS_CHARACTER_JUNK\"><code>IS_CHARACTER_JUNK()</code></a>, which filters out whitespace characters (a blank or tab; it’s a bad idea to include newline in this!).</p> <p><code>Tools/scripts/ndiff.py</code> is a command-line front-end to this function.</p> <pre data-language=\"python\">&gt;&gt;&gt; diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n...              'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\n&gt;&gt;&gt; print(''.join(diff), end=\"\")\n- one\n?  ^\n+ ore\n?  ^\n- two\n- three\n?  -\n+ tree\n+ emu\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"difflib.restore\">\n<code>difflib.restore(sequence, which)</code> </dt> <dd>\n<p>Return one of the two sequences that generated a delta.</p> <p>Given a <em>sequence</em> produced by <a class=\"reference internal\" href=\"#difflib.Differ.compare\" title=\"difflib.Differ.compare\"><code>Differ.compare()</code></a> or <a class=\"reference internal\" href=\"#difflib.ndiff\" title=\"difflib.ndiff\"><code>ndiff()</code></a>, extract lines originating from file 1 or 2 (parameter <em>which</em>), stripping off line prefixes.</p> <p>Example:</p> <pre data-language=\"python\">&gt;&gt;&gt; diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n...              'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\n&gt;&gt;&gt; diff = list(diff) # materialize the generated delta into a list\n&gt;&gt;&gt; print(''.join(restore(diff, 1)), end=\"\")\none\ntwo\nthree\n&gt;&gt;&gt; print(''.join(restore(diff, 2)), end=\"\")\nore\ntree\nemu\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"difflib.unified_diff\">\n<code>difflib.unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\\n')</code> </dt> <dd>\n<p>Compare <em>a</em> and <em>b</em> (lists of strings); return a delta (a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generator\"><span class=\"xref std std-term\">generator</span></a> generating the delta lines) in unified diff format.</p> <p>Unified diffs are a compact way of showing just the lines that have changed plus a few lines of context. The changes are shown in an inline style (instead of separate before/after blocks). The number of context lines is set by <em>n</em> which defaults to three.</p> <p>By default, the diff control lines (those with <code>---</code>, <code>+++</code>, or <code>@@</code>) are created with a trailing newline. This is helpful so that inputs created from <a class=\"reference internal\" href=\"io#io.IOBase.readlines\" title=\"io.IOBase.readlines\"><code>io.IOBase.readlines()</code></a> result in diffs that are suitable for use with <a class=\"reference internal\" href=\"io#io.IOBase.writelines\" title=\"io.IOBase.writelines\"><code>io.IOBase.writelines()</code></a> since both the inputs and outputs have trailing newlines.</p> <p>For inputs that do not have trailing newlines, set the <em>lineterm</em> argument to <code>\"\"</code> so that the output will be uniformly newline free.</p> <p>The context diff format normally has a header for filenames and modification times. Any or all of these may be specified using strings for <em>fromfile</em>, <em>tofile</em>, <em>fromfiledate</em>, and <em>tofiledate</em>. The modification times are normally expressed in the ISO 8601 format. If not specified, the strings default to blanks.</p> <pre data-language=\"python\">&gt;&gt;&gt; s1 = ['bacon\\n', 'eggs\\n', 'ham\\n', 'guido\\n']\n&gt;&gt;&gt; s2 = ['python\\n', 'eggy\\n', 'hamster\\n', 'guido\\n']\n&gt;&gt;&gt; sys.stdout.writelines(unified_diff(s1, s2, fromfile='before.py', tofile='after.py'))\n--- before.py\n+++ after.py\n@@ -1,4 +1,4 @@\n-bacon\n-eggs\n-ham\n+python\n+eggy\n+hamster\n guido\n</pre> <p>See <a class=\"reference internal\" href=\"#difflib-interface\"><span class=\"std std-ref\">A command-line interface to difflib</span></a> for a more detailed example.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"difflib.diff_bytes\">\n<code>difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'', fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\\n')</code> </dt> <dd>\n<p>Compare <em>a</em> and <em>b</em> (lists of bytes objects) using <em>dfunc</em>; yield a sequence of delta lines (also bytes) in the format returned by <em>dfunc</em>. <em>dfunc</em> must be a callable, typically either <a class=\"reference internal\" href=\"#difflib.unified_diff\" title=\"difflib.unified_diff\"><code>unified_diff()</code></a> or <a class=\"reference internal\" href=\"#difflib.context_diff\" title=\"difflib.context_diff\"><code>context_diff()</code></a>.</p> <p>Allows you to compare data with unknown or inconsistent encoding. All inputs except <em>n</em> must be bytes objects, not str. Works by losslessly converting all inputs (except <em>n</em>) to str, and calling <code>dfunc(a, b,\nfromfile, tofile, fromfiledate, tofiledate, n, lineterm)</code>. The output of <em>dfunc</em> is then converted back to bytes, so the delta lines that you receive have the same unknown/inconsistent encodings as <em>a</em> and <em>b</em>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5.</span></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"difflib.IS_LINE_JUNK\">\n<code>difflib.IS_LINE_JUNK(line)</code> </dt> <dd>\n<p>Return <code>True</code> for ignorable lines. The line <em>line</em> is ignorable if <em>line</em> is blank or contains a single <code>'#'</code>, otherwise it is not ignorable. Used as a default for parameter <em>linejunk</em> in <a class=\"reference internal\" href=\"#difflib.ndiff\" title=\"difflib.ndiff\"><code>ndiff()</code></a> in older versions.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"difflib.IS_CHARACTER_JUNK\">\n<code>difflib.IS_CHARACTER_JUNK(ch)</code> </dt> <dd>\n<p>Return <code>True</code> for ignorable characters. The character <em>ch</em> is ignorable if <em>ch</em> is a space or tab, otherwise it is not ignorable. Used as a default for parameter <em>charjunk</em> in <a class=\"reference internal\" href=\"#difflib.ndiff\" title=\"difflib.ndiff\"><code>ndiff()</code></a>.</p> </dd>\n</dl> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <dl class=\"simple\"> <dt><a class=\"reference external\" href=\"http://www.drdobbs.com/database/pattern-matching-the-gestalt-approach/184407970\">Pattern Matching: The Gestalt Approach</a></dt>\n<dd>\n<p>Discussion of a similar algorithm by John W. Ratcliff and D. E. Metzener. This was published in <a class=\"reference external\" href=\"http://www.drdobbs.com/\">Dr. Dobb’s Journal</a> in July, 1988.</p> </dd> </dl> </div>  <h2 id=\"sequence-matcher\">SequenceMatcher Objects</h2> <p id=\"sequencematcher-objects\">The <a class=\"reference internal\" href=\"#difflib.SequenceMatcher\" title=\"difflib.SequenceMatcher\"><code>SequenceMatcher</code></a> class has this constructor:</p> <dl class=\"class\"> <dt id=\"difflib.SequenceMatcher\">\n<code>class difflib.SequenceMatcher(isjunk=None, a='', b='', autojunk=True)</code> </dt> <dd>\n<p>Optional argument <em>isjunk</em> must be <code>None</code> (the default) or a one-argument function that takes a sequence element and returns true if and only if the element is “junk” and should be ignored. Passing <code>None</code> for <em>isjunk</em> is equivalent to passing <code>lambda x: False</code>; in other words, no elements are ignored. For example, pass:</p> <pre data-language=\"python\">lambda x: x in \" \\t\"\n</pre> <p>if you’re comparing lines as sequences of characters, and don’t want to synch up on blanks or hard tabs.</p> <p>The optional arguments <em>a</em> and <em>b</em> are sequences to be compared; both default to empty strings. The elements of both sequences must be <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-hashable\"><span class=\"xref std std-term\">hashable</span></a>.</p> <p>The optional argument <em>autojunk</em> can be used to disable the automatic junk heuristic.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2: </span>The <em>autojunk</em> parameter.</p> </div> <p>SequenceMatcher objects get three data attributes: <em>bjunk</em> is the set of elements of <em>b</em> for which <em>isjunk</em> is <code>True</code>; <em>bpopular</em> is the set of non-junk elements considered popular by the heuristic (if it is not disabled); <em>b2j</em> is a dict mapping the remaining elements of <em>b</em> to a list of positions where they occur. All three are reset whenever <em>b</em> is reset with <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.set_seqs\" title=\"difflib.SequenceMatcher.set_seqs\"><code>set_seqs()</code></a> or <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.set_seq2\" title=\"difflib.SequenceMatcher.set_seq2\"><code>set_seq2()</code></a>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2: </span>The <em>bjunk</em> and <em>bpopular</em> attributes.</p> </div> <p><a class=\"reference internal\" href=\"#difflib.SequenceMatcher\" title=\"difflib.SequenceMatcher\"><code>SequenceMatcher</code></a> objects have the following methods:</p> <dl class=\"method\"> <dt id=\"difflib.SequenceMatcher.set_seqs\">\n<code>set_seqs(a, b)</code> </dt> <dd>\n<p>Set the two sequences to be compared.</p> </dd>\n</dl> <p><a class=\"reference internal\" href=\"#difflib.SequenceMatcher\" title=\"difflib.SequenceMatcher\"><code>SequenceMatcher</code></a> computes and caches detailed information about the second sequence, so if you want to compare one sequence against many sequences, use <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.set_seq2\" title=\"difflib.SequenceMatcher.set_seq2\"><code>set_seq2()</code></a> to set the commonly used sequence once and call <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.set_seq1\" title=\"difflib.SequenceMatcher.set_seq1\"><code>set_seq1()</code></a> repeatedly, once for each of the other sequences.</p> <dl class=\"method\"> <dt id=\"difflib.SequenceMatcher.set_seq1\">\n<code>set_seq1(a)</code> </dt> <dd>\n<p>Set the first sequence to be compared. The second sequence to be compared is not changed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"difflib.SequenceMatcher.set_seq2\">\n<code>set_seq2(b)</code> </dt> <dd>\n<p>Set the second sequence to be compared. The first sequence to be compared is not changed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"difflib.SequenceMatcher.find_longest_match\">\n<code>find_longest_match(alo=0, ahi=None, blo=0, bhi=None)</code> </dt> <dd>\n<p>Find longest matching block in <code>a[alo:ahi]</code> and <code>b[blo:bhi]</code>.</p> <p>If <em>isjunk</em> was omitted or <code>None</code>, <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.find_longest_match\" title=\"difflib.SequenceMatcher.find_longest_match\"><code>find_longest_match()</code></a> returns <code>(i, j, k)</code> such that <code>a[i:i+k]</code> is equal to <code>b[j:j+k]</code>, where <code>alo\n&lt;= i &lt;= i+k &lt;= ahi</code> and <code>blo &lt;= j &lt;= j+k &lt;= bhi</code>. For all <code>(i', j',\nk')</code> meeting those conditions, the additional conditions <code>k &gt;= k'</code>, <code>i\n&lt;= i'</code>, and if <code>i == i'</code>, <code>j &lt;= j'</code> are also met. In other words, of all maximal matching blocks, return one that starts earliest in <em>a</em>, and of all those maximal matching blocks that start earliest in <em>a</em>, return the one that starts earliest in <em>b</em>.</p> <pre data-language=\"python\">&gt;&gt;&gt; s = SequenceMatcher(None, \" abcd\", \"abcd abcd\")\n&gt;&gt;&gt; s.find_longest_match(0, 5, 0, 9)\nMatch(a=0, b=4, size=5)\n</pre> <p>If <em>isjunk</em> was provided, first the longest matching block is determined as above, but with the additional restriction that no junk element appears in the block. Then that block is extended as far as possible by matching (only) junk elements on both sides. So the resulting block never matches on junk except as identical junk happens to be adjacent to an interesting match.</p> <p>Here’s the same example as before, but considering blanks to be junk. That prevents <code>' abcd'</code> from matching the <code>' abcd'</code> at the tail end of the second sequence directly. Instead only the <code>'abcd'</code> can match, and matches the leftmost <code>'abcd'</code> in the second sequence:</p> <pre data-language=\"python\">&gt;&gt;&gt; s = SequenceMatcher(lambda x: x==\" \", \" abcd\", \"abcd abcd\")\n&gt;&gt;&gt; s.find_longest_match(0, 5, 0, 9)\nMatch(a=1, b=0, size=4)\n</pre> <p>If no blocks match, this returns <code>(alo, blo, 0)</code>.</p> <p>This method returns a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-named-tuple\"><span class=\"xref std std-term\">named tuple</span></a> <code>Match(a, b, size)</code>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.9: </span>Added default arguments.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"difflib.SequenceMatcher.get_matching_blocks\">\n<code>get_matching_blocks()</code> </dt> <dd>\n<p>Return list of triples describing non-overlapping matching subsequences. Each triple is of the form <code>(i, j, n)</code>, and means that <code>a[i:i+n] == b[j:j+n]</code>. The triples are monotonically increasing in <em>i</em> and <em>j</em>.</p> <p>The last triple is a dummy, and has the value <code>(len(a), len(b), 0)</code>. It is the only triple with <code>n == 0</code>. If <code>(i, j, n)</code> and <code>(i', j', n')</code> are adjacent triples in the list, and the second is not the last triple in the list, then <code>i+n &lt; i'</code> or <code>j+n &lt; j'</code>; in other words, adjacent triples always describe non-adjacent equal blocks.</p> <pre data-language=\"pycon3\">&gt;&gt;&gt; s = SequenceMatcher(None, \"abxcd\", \"abcd\")\n&gt;&gt;&gt; s.get_matching_blocks()\n[Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"difflib.SequenceMatcher.get_opcodes\">\n<code>get_opcodes()</code> </dt> <dd>\n<p>Return list of 5-tuples describing how to turn <em>a</em> into <em>b</em>. Each tuple is of the form <code>(tag, i1, i2, j1, j2)</code>. The first tuple has <code>i1 == j1 ==\n0</code>, and remaining tuples have <em>i1</em> equal to the <em>i2</em> from the preceding tuple, and, likewise, <em>j1</em> equal to the previous <em>j2</em>.</p> <p>The <em>tag</em> values are strings, with these meanings:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Value</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'replace'</code></p></td> <td><p><code>a[i1:i2]</code> should be replaced by <code>b[j1:j2]</code>.</p></td> </tr> <tr>\n<td><p><code>'delete'</code></p></td> <td><p><code>a[i1:i2]</code> should be deleted. Note that <code>j1 == j2</code> in this case.</p></td> </tr> <tr>\n<td><p><code>'insert'</code></p></td> <td><p><code>b[j1:j2]</code> should be inserted at <code>a[i1:i1]</code>. Note that <code>i1 == i2</code> in this case.</p></td> </tr> <tr>\n<td><p><code>'equal'</code></p></td> <td><p><code>a[i1:i2] == b[j1:j2]</code> (the sub-sequences are equal).</p></td> </tr>  </table> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; a = \"qabxcd\"\n&gt;&gt;&gt; b = \"abycdf\"\n&gt;&gt;&gt; s = SequenceMatcher(None, a, b)\n&gt;&gt;&gt; for tag, i1, i2, j1, j2 in s.get_opcodes():\n...     print('{:7}   a[{}:{}] --&gt; b[{}:{}] {!r:&gt;8} --&gt; {!r}'.format(\n...         tag, i1, i2, j1, j2, a[i1:i2], b[j1:j2]))\ndelete    a[0:1] --&gt; b[0:0]      'q' --&gt; ''\nequal     a[1:3] --&gt; b[0:2]     'ab' --&gt; 'ab'\nreplace   a[3:4] --&gt; b[2:3]      'x' --&gt; 'y'\nequal     a[4:6] --&gt; b[3:5]     'cd' --&gt; 'cd'\ninsert    a[6:6] --&gt; b[5:6]       '' --&gt; 'f'\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"difflib.SequenceMatcher.get_grouped_opcodes\">\n<code>get_grouped_opcodes(n=3)</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generator\"><span class=\"xref std std-term\">generator</span></a> of groups with up to <em>n</em> lines of context.</p> <p>Starting with the groups returned by <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.get_opcodes\" title=\"difflib.SequenceMatcher.get_opcodes\"><code>get_opcodes()</code></a>, this method splits out smaller change clusters and eliminates intervening ranges which have no changes.</p> <p>The groups are returned in the same format as <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.get_opcodes\" title=\"difflib.SequenceMatcher.get_opcodes\"><code>get_opcodes()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"difflib.SequenceMatcher.ratio\">\n<code>ratio()</code> </dt> <dd>\n<p>Return a measure of the sequences’ similarity as a float in the range [0, 1].</p> <p>Where T is the total number of elements in both sequences, and M is the number of matches, this is 2.0*M / T. Note that this is <code>1.0</code> if the sequences are identical, and <code>0.0</code> if they have nothing in common.</p> <p>This is expensive to compute if <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.get_matching_blocks\" title=\"difflib.SequenceMatcher.get_matching_blocks\"><code>get_matching_blocks()</code></a> or <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.get_opcodes\" title=\"difflib.SequenceMatcher.get_opcodes\"><code>get_opcodes()</code></a> hasn’t already been called, in which case you may want to try <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.quick_ratio\" title=\"difflib.SequenceMatcher.quick_ratio\"><code>quick_ratio()</code></a> or <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.real_quick_ratio\" title=\"difflib.SequenceMatcher.real_quick_ratio\"><code>real_quick_ratio()</code></a> first to get an upper bound.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>Caution: The result of a <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.ratio\" title=\"difflib.SequenceMatcher.ratio\"><code>ratio()</code></a> call may depend on the order of the arguments. For instance:</p> <pre data-language=\"python\">&gt;&gt;&gt; SequenceMatcher(None, 'tide', 'diet').ratio()\n0.25\n&gt;&gt;&gt; SequenceMatcher(None, 'diet', 'tide').ratio()\n0.5\n</pre> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"difflib.SequenceMatcher.quick_ratio\">\n<code>quick_ratio()</code> </dt> <dd>\n<p>Return an upper bound on <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.ratio\" title=\"difflib.SequenceMatcher.ratio\"><code>ratio()</code></a> relatively quickly.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"difflib.SequenceMatcher.real_quick_ratio\">\n<code>real_quick_ratio()</code> </dt> <dd>\n<p>Return an upper bound on <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.ratio\" title=\"difflib.SequenceMatcher.ratio\"><code>ratio()</code></a> very quickly.</p> </dd>\n</dl> </dd>\n</dl> <p>The three methods that return the ratio of matching to total characters can give different results due to differing levels of approximation, although <code>quick_ratio()</code> and <code>real_quick_ratio()</code> are always at least as large as <code>ratio()</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; s = SequenceMatcher(None, \"abcd\", \"bcde\")\n&gt;&gt;&gt; s.ratio()\n0.75\n&gt;&gt;&gt; s.quick_ratio()\n0.75\n&gt;&gt;&gt; s.real_quick_ratio()\n1.0\n</pre>   <h2 id=\"id1\">SequenceMatcher Examples</h2> <p id=\"sequencematcher-examples\">This example compares two strings, considering blanks to be “junk”:</p> <pre data-language=\"python\">&gt;&gt;&gt; s = SequenceMatcher(lambda x: x == \" \",\n...                     \"private Thread currentThread;\",\n...                     \"private volatile Thread currentThread;\")\n</pre> <p><code>ratio()</code> returns a float in [0, 1], measuring the similarity of the sequences. As a rule of thumb, a <code>ratio()</code> value over 0.6 means the sequences are close matches:</p> <pre data-language=\"python\">&gt;&gt;&gt; print(round(s.ratio(), 3))\n0.866\n</pre> <p>If you’re only interested in where the sequences match, <code>get_matching_blocks()</code> is handy:</p> <pre data-language=\"python\">&gt;&gt;&gt; for block in s.get_matching_blocks():\n...     print(\"a[%d] and b[%d] match for %d elements\" % block)\na[0] and b[0] match for 8 elements\na[8] and b[17] match for 21 elements\na[29] and b[38] match for 0 elements\n</pre> <p>Note that the last tuple returned by <code>get_matching_blocks()</code> is always a dummy, <code>(len(a), len(b), 0)</code>, and this is the only case in which the last tuple element (number of elements matched) is <code>0</code>.</p> <p>If you want to know how to change the first sequence into the second, use <code>get_opcodes()</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; for opcode in s.get_opcodes():\n...     print(\"%6s a[%d:%d] b[%d:%d]\" % opcode)\n equal a[0:8] b[0:8]\ninsert a[8:8] b[8:17]\n equal a[8:29] b[17:38]\n</pre> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <ul class=\"simple\"> <li>The <a class=\"reference internal\" href=\"#difflib.get_close_matches\" title=\"difflib.get_close_matches\"><code>get_close_matches()</code></a> function in this module which shows how simple code building on <a class=\"reference internal\" href=\"#difflib.SequenceMatcher\" title=\"difflib.SequenceMatcher\"><code>SequenceMatcher</code></a> can be used to do useful work.</li> <li>\n<a class=\"reference external\" href=\"https://code.activestate.com/recipes/576729/\">Simple version control recipe</a> for a small application built with <a class=\"reference internal\" href=\"#difflib.SequenceMatcher\" title=\"difflib.SequenceMatcher\"><code>SequenceMatcher</code></a>.</li> </ul> </div>   <h2 id=\"id2\">Differ Objects</h2> <p id=\"differ-objects\">Note that <a class=\"reference internal\" href=\"#difflib.Differ\" title=\"difflib.Differ\"><code>Differ</code></a>-generated deltas make no claim to be <strong>minimal</strong> diffs. To the contrary, minimal diffs are often counter-intuitive, because they synch up anywhere possible, sometimes accidental matches 100 pages apart. Restricting synch points to contiguous matches preserves some notion of locality, at the occasional cost of producing a longer diff.</p> <p>The <a class=\"reference internal\" href=\"#difflib.Differ\" title=\"difflib.Differ\"><code>Differ</code></a> class has this constructor:</p> <dl class=\"class\"> <dt>\n<code>class difflib.Differ(linejunk=None, charjunk=None)</code> </dt> <dd>\n<p>Optional keyword parameters <em>linejunk</em> and <em>charjunk</em> are for filter functions (or <code>None</code>):</p> <p><em>linejunk</em>: A function that accepts a single string argument, and returns true if the string is junk. The default is <code>None</code>, meaning that no line is considered junk.</p> <p><em>charjunk</em>: A function that accepts a single character argument (a string of length 1), and returns true if the character is junk. The default is <code>None</code>, meaning that no character is considered junk.</p> <p>These junk-filtering functions speed up matching to find differences and do not cause any differing lines or characters to be ignored. Read the description of the <a class=\"reference internal\" href=\"#difflib.SequenceMatcher.find_longest_match\" title=\"difflib.SequenceMatcher.find_longest_match\"><code>find_longest_match()</code></a> method’s <em>isjunk</em> parameter for an explanation.</p> <p><a class=\"reference internal\" href=\"#difflib.Differ\" title=\"difflib.Differ\"><code>Differ</code></a> objects are used (deltas generated) via a single method:</p> <dl class=\"method\"> <dt id=\"difflib.Differ.compare\">\n<code>compare(a, b)</code> </dt> <dd>\n<p>Compare two sequences of lines, and generate the delta (a sequence of lines).</p> <p>Each sequence must contain individual single-line strings ending with newlines. Such sequences can be obtained from the <a class=\"reference internal\" href=\"io#io.IOBase.readlines\" title=\"io.IOBase.readlines\"><code>readlines()</code></a> method of file-like objects. The delta generated also consists of newline-terminated strings, ready to be printed as-is via the <a class=\"reference internal\" href=\"io#io.IOBase.writelines\" title=\"io.IOBase.writelines\"><code>writelines()</code></a> method of a file-like object.</p> </dd>\n</dl> </dd>\n</dl>   <h2 id=\"differ-examples\">Differ Example</h2> <p id=\"differ-example\">This example compares two texts. First we set up the texts, sequences of individual single-line strings ending with newlines (such sequences can also be obtained from the <code>readlines()</code> method of file-like objects):</p> <pre data-language=\"python\">&gt;&gt;&gt; text1 = '''  1. Beautiful is better than ugly.\n...   2. Explicit is better than implicit.\n...   3. Simple is better than complex.\n...   4. Complex is better than complicated.\n... '''.splitlines(keepends=True)\n&gt;&gt;&gt; len(text1)\n4\n&gt;&gt;&gt; text1[0][-1]\n'\\n'\n&gt;&gt;&gt; text2 = '''  1. Beautiful is better than ugly.\n...   3.   Simple is better than complex.\n...   4. Complicated is better than complex.\n...   5. Flat is better than nested.\n... '''.splitlines(keepends=True)\n</pre> <p>Next we instantiate a Differ object:</p> <pre data-language=\"python\">&gt;&gt;&gt; d = Differ()\n</pre> <p>Note that when instantiating a <a class=\"reference internal\" href=\"#difflib.Differ\" title=\"difflib.Differ\"><code>Differ</code></a> object we may pass functions to filter out line and character “junk.” See the <a class=\"reference internal\" href=\"#difflib.Differ\" title=\"difflib.Differ\"><code>Differ()</code></a> constructor for details.</p> <p>Finally, we compare the two:</p> <pre data-language=\"python\">&gt;&gt;&gt; result = list(d.compare(text1, text2))\n</pre> <p><code>result</code> is a list of strings, so let’s pretty-print it:</p> <pre data-language=\"python\">&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; pprint(result)\n['    1. Beautiful is better than ugly.\\n',\n '-   2. Explicit is better than implicit.\\n',\n '-   3. Simple is better than complex.\\n',\n '+   3.   Simple is better than complex.\\n',\n '?     ++\\n',\n '-   4. Complex is better than complicated.\\n',\n '?            ^                     ---- ^\\n',\n '+   4. Complicated is better than complex.\\n',\n '?           ++++ ^                      ^\\n',\n '+   5. Flat is better than nested.\\n']\n</pre> <p>As a single multi-line string it looks like this:</p> <pre data-language=\"python\">&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.stdout.writelines(result)\n    1. Beautiful is better than ugly.\n-   2. Explicit is better than implicit.\n-   3. Simple is better than complex.\n+   3.   Simple is better than complex.\n?     ++\n-   4. Complex is better than complicated.\n?            ^                     ---- ^\n+   4. Complicated is better than complex.\n?           ++++ ^                      ^\n+   5. Flat is better than nested.\n</pre>   <h2 id=\"difflib-interface\">A command-line interface to difflib</h2> <p id=\"a-command-line-interface-to-difflib\">This example shows how to use difflib to create a <code>diff</code>-like utility. It is also contained in the Python source distribution, as <code>Tools/scripts/diff.py</code>.</p> <pre data-language=\"python\">#!/usr/bin/env python3\n\"\"\" Command line interface to difflib.py providing diffs in four formats:\n\n* ndiff:    lists every line and highlights interline changes.\n* context:  highlights clusters of changes in a before/after format.\n* unified:  highlights clusters of changes in an inline format.\n* html:     generates side by side comparison with change highlights.\n\n\"\"\"\n\nimport sys, os, difflib, argparse\nfrom datetime import datetime, timezone\n\ndef file_mtime(path):\n    t = datetime.fromtimestamp(os.stat(path).st_mtime,\n                               timezone.utc)\n    return t.astimezone().isoformat()\n\ndef main():\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-c', action='store_true', default=False,\n                        help='Produce a context format diff (default)')\n    parser.add_argument('-u', action='store_true', default=False,\n                        help='Produce a unified format diff')\n    parser.add_argument('-m', action='store_true', default=False,\n                        help='Produce HTML side by side diff '\n                             '(can use -c and -l in conjunction)')\n    parser.add_argument('-n', action='store_true', default=False,\n                        help='Produce a ndiff format diff')\n    parser.add_argument('-l', '--lines', type=int, default=3,\n                        help='Set number of context lines (default 3)')\n    parser.add_argument('fromfile')\n    parser.add_argument('tofile')\n    options = parser.parse_args()\n\n    n = options.lines\n    fromfile = options.fromfile\n    tofile = options.tofile\n\n    fromdate = file_mtime(fromfile)\n    todate = file_mtime(tofile)\n    with open(fromfile) as ff:\n        fromlines = ff.readlines()\n    with open(tofile) as tf:\n        tolines = tf.readlines()\n\n    if options.u:\n        diff = difflib.unified_diff(fromlines, tolines, fromfile, tofile, fromdate, todate, n=n)\n    elif options.n:\n        diff = difflib.ndiff(fromlines, tolines)\n    elif options.m:\n        diff = difflib.HtmlDiff().make_file(fromlines,tolines,fromfile,tofile,context=options.c,numlines=n)\n    else:\n        diff = difflib.context_diff(fromlines, tolines, fromfile, tofile, fromdate, todate, n=n)\n\n    sys.stdout.writelines(diff)\n\nif __name__ == '__main__':\n    main()\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/difflib.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/difflib.html</a>\n  </p>\n</div>\n","library/textwrap":"<h1 id=\"textwrap-text-wrapping-and-filling\">textwrap — Text wrapping and filling</h1> <p id=\"module-textwrap\"><strong>Source code:</strong> <a class=\"reference external\" href=\"https://github.com/python/cpython/tree/3.9/Lib/textwrap.py\">Lib/textwrap.py</a></p>  <p>The <a class=\"reference internal\" href=\"#module-textwrap\" title=\"textwrap: Text wrapping and filling\"><code>textwrap</code></a> module provides some convenience functions, as well as <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a>, the class that does all the work. If you’re just wrapping or filling one or two text strings, the convenience functions should be good enough; otherwise, you should use an instance of <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> for efficiency.</p> <dl class=\"function\"> <dt id=\"textwrap.wrap\">\n<code>textwrap.wrap(text, width=70, **kwargs)</code> </dt> <dd>\n<p>Wraps the single paragraph in <em>text</em> (a string) so every line is at most <em>width</em> characters long. Returns a list of output lines, without final newlines.</p> <p>Optional keyword arguments correspond to the instance attributes of <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a>, documented below. <em>width</em> defaults to <code>70</code>.</p> <p>See the <a class=\"reference internal\" href=\"#textwrap.TextWrapper.wrap\" title=\"textwrap.TextWrapper.wrap\"><code>TextWrapper.wrap()</code></a> method for additional details on how <a class=\"reference internal\" href=\"#textwrap.wrap\" title=\"textwrap.wrap\"><code>wrap()</code></a> behaves.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"textwrap.fill\">\n<code>textwrap.fill(text, width=70, **kwargs)</code> </dt> <dd>\n<p>Wraps the single paragraph in <em>text</em>, and returns a single string containing the wrapped paragraph. <a class=\"reference internal\" href=\"#textwrap.fill\" title=\"textwrap.fill\"><code>fill()</code></a> is shorthand for</p> <pre data-language=\"python\">\"\\n\".join(wrap(text, ...))\n</pre> <p>In particular, <a class=\"reference internal\" href=\"#textwrap.fill\" title=\"textwrap.fill\"><code>fill()</code></a> accepts exactly the same keyword arguments as <a class=\"reference internal\" href=\"#textwrap.wrap\" title=\"textwrap.wrap\"><code>wrap()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"textwrap.shorten\">\n<code>textwrap.shorten(text, width, **kwargs)</code> </dt> <dd>\n<p>Collapse and truncate the given <em>text</em> to fit in the given <em>width</em>.</p> <p>First the whitespace in <em>text</em> is collapsed (all whitespace is replaced by single spaces). If the result fits in the <em>width</em>, it is returned. Otherwise, enough words are dropped from the end so that the remaining words plus the <code>placeholder</code> fit within <code>width</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; textwrap.shorten(\"Hello  world!\", width=12)\n'Hello world!'\n&gt;&gt;&gt; textwrap.shorten(\"Hello  world!\", width=11)\n'Hello [...]'\n&gt;&gt;&gt; textwrap.shorten(\"Hello world\", width=10, placeholder=\"...\")\n'Hello...'\n</pre> <p>Optional keyword arguments correspond to the instance attributes of <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a>, documented below. Note that the whitespace is collapsed before the text is passed to the <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> <a class=\"reference internal\" href=\"#textwrap.fill\" title=\"textwrap.fill\"><code>fill()</code></a> function, so changing the value of <a class=\"reference internal\" href=\"#textwrap.TextWrapper.tabsize\" title=\"textwrap.TextWrapper.tabsize\"><code>tabsize</code></a>, <a class=\"reference internal\" href=\"#textwrap.TextWrapper.expand_tabs\" title=\"textwrap.TextWrapper.expand_tabs\"><code>expand_tabs</code></a>, <a class=\"reference internal\" href=\"#textwrap.TextWrapper.drop_whitespace\" title=\"textwrap.TextWrapper.drop_whitespace\"><code>drop_whitespace</code></a>, and <a class=\"reference internal\" href=\"#textwrap.TextWrapper.replace_whitespace\" title=\"textwrap.TextWrapper.replace_whitespace\"><code>replace_whitespace</code></a> will have no effect.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4.</span></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"textwrap.dedent\">\n<code>textwrap.dedent(text)</code> </dt> <dd>\n<p>Remove any common leading whitespace from every line in <em>text</em>.</p> <p>This can be used to make triple-quoted strings line up with the left edge of the display, while still presenting them in the source code in indented form.</p> <p>Note that tabs and spaces are both treated as whitespace, but they are not equal: the lines <code>\"  hello\"</code> and <code>\"\\thello\"</code> are considered to have no common leading whitespace.</p> <p>Lines containing only whitespace are ignored in the input and normalized to a single newline character in the output.</p> <p>For example:</p> <pre data-language=\"python\">def test():\n    # end first line with \\ to avoid the empty line!\n    s = '''\\\n    hello\n      world\n    '''\n    print(repr(s))          # prints '    hello\\n      world\\n    '\n    print(repr(dedent(s)))  # prints 'hello\\n  world\\n'\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"textwrap.indent\">\n<code>textwrap.indent(text, prefix, predicate=None)</code> </dt> <dd>\n<p>Add <em>prefix</em> to the beginning of selected lines in <em>text</em>.</p> <p>Lines are separated by calling <code>text.splitlines(True)</code>.</p> <p>By default, <em>prefix</em> is added to all lines that do not consist solely of whitespace (including any line endings).</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; s = 'hello\\n\\n \\nworld'\n&gt;&gt;&gt; indent(s, '  ')\n'  hello\\n\\n \\n  world'\n</pre> <p>The optional <em>predicate</em> argument can be used to control which lines are indented. For example, it is easy to add <em>prefix</em> to even empty and whitespace-only lines:</p> <pre data-language=\"python\">&gt;&gt;&gt; print(indent(s, '+ ', lambda line: True))\n+ hello\n+\n+\n+ world\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> </dd>\n</dl> <p><a class=\"reference internal\" href=\"#textwrap.wrap\" title=\"textwrap.wrap\"><code>wrap()</code></a>, <a class=\"reference internal\" href=\"#textwrap.fill\" title=\"textwrap.fill\"><code>fill()</code></a> and <a class=\"reference internal\" href=\"#textwrap.shorten\" title=\"textwrap.shorten\"><code>shorten()</code></a> work by creating a <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> instance and calling a single method on it. That instance is not reused, so for applications that process many text strings using <a class=\"reference internal\" href=\"#textwrap.wrap\" title=\"textwrap.wrap\"><code>wrap()</code></a> and/or <a class=\"reference internal\" href=\"#textwrap.fill\" title=\"textwrap.fill\"><code>fill()</code></a>, it may be more efficient to create your own <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> object.</p> <p>Text is preferably wrapped on whitespaces and right after the hyphens in hyphenated words; only then will long words be broken if necessary, unless <a class=\"reference internal\" href=\"#textwrap.TextWrapper.break_long_words\" title=\"textwrap.TextWrapper.break_long_words\"><code>TextWrapper.break_long_words</code></a> is set to false.</p> <dl class=\"class\"> <dt id=\"textwrap.TextWrapper\">\n<code>class textwrap.TextWrapper(**kwargs)</code> </dt> <dd>\n<p>The <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> constructor accepts a number of optional keyword arguments. Each keyword argument corresponds to an instance attribute, so for example</p> <pre data-language=\"python\">wrapper = TextWrapper(initial_indent=\"* \")\n</pre> <p>is the same as</p> <pre data-language=\"python\">wrapper = TextWrapper()\nwrapper.initial_indent = \"* \"\n</pre> <p>You can re-use the same <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> object many times, and you can change any of its options through direct assignment to instance attributes between uses.</p> <p>The <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> instance attributes (and keyword arguments to the constructor) are as follows:</p> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.width\">\n<code>width</code> </dt> <dd>\n<p>(default: <code>70</code>) The maximum length of wrapped lines. As long as there are no individual words in the input text longer than <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><code>width</code></a>, <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> guarantees that no output line will be longer than <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><code>width</code></a> characters.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.expand_tabs\">\n<code>expand_tabs</code> </dt> <dd>\n<p>(default: <code>True</code>) If true, then all tab characters in <em>text</em> will be expanded to spaces using the <code>expandtabs()</code> method of <em>text</em>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.tabsize\">\n<code>tabsize</code> </dt> <dd>\n<p>(default: <code>8</code>) If <a class=\"reference internal\" href=\"#textwrap.TextWrapper.expand_tabs\" title=\"textwrap.TextWrapper.expand_tabs\"><code>expand_tabs</code></a> is true, then all tab characters in <em>text</em> will be expanded to zero or more spaces, depending on the current column and the given tab size.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.replace_whitespace\">\n<code>replace_whitespace</code> </dt> <dd>\n<p>(default: <code>True</code>) If true, after tab expansion but before wrapping, the <a class=\"reference internal\" href=\"#textwrap.wrap\" title=\"textwrap.wrap\"><code>wrap()</code></a> method will replace each whitespace character with a single space. The whitespace characters replaced are as follows: tab, newline, vertical tab, formfeed, and carriage return (<code>'\\t\\n\\v\\f\\r'</code>).</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>If <a class=\"reference internal\" href=\"#textwrap.TextWrapper.expand_tabs\" title=\"textwrap.TextWrapper.expand_tabs\"><code>expand_tabs</code></a> is false and <a class=\"reference internal\" href=\"#textwrap.TextWrapper.replace_whitespace\" title=\"textwrap.TextWrapper.replace_whitespace\"><code>replace_whitespace</code></a> is true, each tab character will be replaced by a single space, which is <em>not</em> the same as tab expansion.</p> </div> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>If <a class=\"reference internal\" href=\"#textwrap.TextWrapper.replace_whitespace\" title=\"textwrap.TextWrapper.replace_whitespace\"><code>replace_whitespace</code></a> is false, newlines may appear in the middle of a line and cause strange output. For this reason, text should be split into paragraphs (using <a class=\"reference internal\" href=\"stdtypes#str.splitlines\" title=\"str.splitlines\"><code>str.splitlines()</code></a> or similar) which are wrapped separately.</p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.drop_whitespace\">\n<code>drop_whitespace</code> </dt> <dd>\n<p>(default: <code>True</code>) If true, whitespace at the beginning and ending of every line (after wrapping but before indenting) is dropped. Whitespace at the beginning of the paragraph, however, is not dropped if non-whitespace follows it. If whitespace being dropped takes up an entire line, the whole line is dropped.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.initial_indent\">\n<code>initial_indent</code> </dt> <dd>\n<p>(default: <code>''</code>) String that will be prepended to the first line of wrapped output. Counts towards the length of the first line. The empty string is not indented.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.subsequent_indent\">\n<code>subsequent_indent</code> </dt> <dd>\n<p>(default: <code>''</code>) String that will be prepended to all lines of wrapped output except the first. Counts towards the length of each line except the first.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.fix_sentence_endings\">\n<code>fix_sentence_endings</code> </dt> <dd>\n<p>(default: <code>False</code>) If true, <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces. This is generally desired for text in a monospaced font. However, the sentence detection algorithm is imperfect: it assumes that a sentence ending consists of a lowercase letter followed by one of <code>'.'</code>, <code>'!'</code>, or <code>'?'</code>, possibly followed by one of <code>'\"'</code> or <code>\"'\"</code>, followed by a space. One problem with this is algorithm is that it is unable to detect the difference between “Dr.” in</p> <pre data-language=\"python\">[...] Dr. Frankenstein's monster [...]\n</pre> <p>and “Spot.” in</p> <pre data-language=\"python\">[...] See Spot. See Spot run [...]\n</pre> <p><a class=\"reference internal\" href=\"#textwrap.TextWrapper.fix_sentence_endings\" title=\"textwrap.TextWrapper.fix_sentence_endings\"><code>fix_sentence_endings</code></a> is false by default.</p> <p>Since the sentence detection algorithm relies on <code>string.lowercase</code> for the definition of “lowercase letter”, and a convention of using two spaces after a period to separate sentences on the same line, it is specific to English-language texts.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.break_long_words\">\n<code>break_long_words</code> </dt> <dd>\n<p>(default: <code>True</code>) If true, then words longer than <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><code>width</code></a> will be broken in order to ensure that no lines are longer than <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><code>width</code></a>. If it is false, long words will not be broken, and some lines may be longer than <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><code>width</code></a>. (Long words will be put on a line by themselves, in order to minimize the amount by which <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><code>width</code></a> is exceeded.)</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.break_on_hyphens\">\n<code>break_on_hyphens</code> </dt> <dd>\n<p>(default: <code>True</code>) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English. If false, only whitespaces will be considered as potentially good places for line breaks, but you need to set <a class=\"reference internal\" href=\"#textwrap.TextWrapper.break_long_words\" title=\"textwrap.TextWrapper.break_long_words\"><code>break_long_words</code></a> to false if you want truly insecable words. Default behaviour in previous versions was to always allow breaking hyphenated words.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"textwrap.TextWrapper.max_lines\">\n<code>max_lines</code> </dt> <dd>\n<p>(default: <code>None</code>) If not <code>None</code>, then the output will contain at most <em>max_lines</em> lines, with <em>placeholder</em> appearing at the end of the output.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4.</span></p> </div> </dd>\n</dl> <dl class=\"attribute\" id=\"index-0\"> <dt id=\"textwrap.TextWrapper.placeholder\">\n<code>placeholder</code> </dt> <dd>\n<p>(default: <code>' [...]'</code>) String that will appear at the end of the output text if it has been truncated.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4.</span></p> </div> </dd>\n</dl> <p><a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> also provides some public methods, analogous to the module-level convenience functions:</p> <dl class=\"method\"> <dt id=\"textwrap.TextWrapper.wrap\">\n<code>wrap(text)</code> </dt> <dd>\n<p>Wraps the single paragraph in <em>text</em> (a string) so every line is at most <a class=\"reference internal\" href=\"#textwrap.TextWrapper.width\" title=\"textwrap.TextWrapper.width\"><code>width</code></a> characters long. All wrapping options are taken from instance attributes of the <a class=\"reference internal\" href=\"#textwrap.TextWrapper\" title=\"textwrap.TextWrapper\"><code>TextWrapper</code></a> instance. Returns a list of output lines, without final newlines. If the wrapped output has no content, the returned list is empty.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"textwrap.TextWrapper.fill\">\n<code>fill(text)</code> </dt> <dd>\n<p>Wraps the single paragraph in <em>text</em>, and returns a single string containing the wrapped paragraph.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/textwrap.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/textwrap.html</a>\n  </p>\n</div>\n","library/unicodedata":"<h1 id=\"unicodedata-unicode-database\">unicodedata — Unicode Database</h1>  <p id=\"module-unicodedata\">This module provides access to the Unicode Character Database (UCD) which defines character properties for all Unicode characters. The data contained in this database is compiled from the <a class=\"reference external\" href=\"https://www.unicode.org/Public/13.0.0/ucd\">UCD version 13.0.0</a>.</p> <p>The module uses the same names and symbols as defined by Unicode Standard Annex #44, <a class=\"reference external\" href=\"https://www.unicode.org/reports/tr44/\">“Unicode Character Database”</a>. It defines the following functions:</p> <dl class=\"function\"> <dt id=\"unicodedata.lookup\">\n<code>unicodedata.lookup(name)</code> </dt> <dd>\n<p>Look up character by name. If a character with the given name is found, return the corresponding character. If not found, <a class=\"reference internal\" href=\"exceptions#KeyError\" title=\"KeyError\"><code>KeyError</code></a> is raised.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Support for name aliases <a class=\"footnote-reference brackets\" href=\"#id3\" id=\"id1\">1</a> and named sequences <a class=\"footnote-reference brackets\" href=\"#id4\" id=\"id2\">2</a> has been added.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.name\">\n<code>unicodedata.name(chr[, default])</code> </dt> <dd>\n<p>Returns the name assigned to the character <em>chr</em> as a string. If no name is defined, <em>default</em> is returned, or, if not given, <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.decimal\">\n<code>unicodedata.decimal(chr[, default])</code> </dt> <dd>\n<p>Returns the decimal value assigned to the character <em>chr</em> as integer. If no such value is defined, <em>default</em> is returned, or, if not given, <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.digit\">\n<code>unicodedata.digit(chr[, default])</code> </dt> <dd>\n<p>Returns the digit value assigned to the character <em>chr</em> as integer. If no such value is defined, <em>default</em> is returned, or, if not given, <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.numeric\">\n<code>unicodedata.numeric(chr[, default])</code> </dt> <dd>\n<p>Returns the numeric value assigned to the character <em>chr</em> as float. If no such value is defined, <em>default</em> is returned, or, if not given, <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.category\">\n<code>unicodedata.category(chr)</code> </dt> <dd>\n<p>Returns the general category assigned to the character <em>chr</em> as string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.bidirectional\">\n<code>unicodedata.bidirectional(chr)</code> </dt> <dd>\n<p>Returns the bidirectional class assigned to the character <em>chr</em> as string. If no such value is defined, an empty string is returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.combining\">\n<code>unicodedata.combining(chr)</code> </dt> <dd>\n<p>Returns the canonical combining class assigned to the character <em>chr</em> as integer. Returns <code>0</code> if no combining class is defined.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.east_asian_width\">\n<code>unicodedata.east_asian_width(chr)</code> </dt> <dd>\n<p>Returns the east asian width assigned to the character <em>chr</em> as string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.mirrored\">\n<code>unicodedata.mirrored(chr)</code> </dt> <dd>\n<p>Returns the mirrored property assigned to the character <em>chr</em> as integer. Returns <code>1</code> if the character has been identified as a “mirrored” character in bidirectional text, <code>0</code> otherwise.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.decomposition\">\n<code>unicodedata.decomposition(chr)</code> </dt> <dd>\n<p>Returns the character decomposition mapping assigned to the character <em>chr</em> as string. An empty string is returned in case no such mapping is defined.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.normalize\">\n<code>unicodedata.normalize(form, unistr)</code> </dt> <dd>\n<p>Return the normal form <em>form</em> for the Unicode string <em>unistr</em>. Valid values for <em>form</em> are ‘NFC’, ‘NFKC’, ‘NFD’, and ‘NFKD’.</p> <p>The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA).</p> <p>For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again.</p> <p>In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312).</p> <p>The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition.</p> <p>Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn’t, they may not compare equal.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unicodedata.is_normalized\">\n<code>unicodedata.is_normalized(form, unistr)</code> </dt> <dd>\n<p>Return whether the Unicode string <em>unistr</em> is in the normal form <em>form</em>. Valid values for <em>form</em> are ‘NFC’, ‘NFKC’, ‘NFD’, and ‘NFKD’.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.8.</span></p> </div> </dd>\n</dl> <p>In addition, the module exposes the following constant:</p> <dl class=\"data\"> <dt id=\"unicodedata.unidata_version\">\n<code>unicodedata.unidata_version</code> </dt> <dd>\n<p>The version of the Unicode database used in this module.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"unicodedata.ucd_3_2_0\">\n<code>unicodedata.ucd_3_2_0</code> </dt> <dd>\n<p>This is an object that has the same methods as the entire module, but uses the Unicode database version 3.2 instead, for applications that require this specific version of the Unicode database (such as IDNA).</p> </dd>\n</dl> <p>Examples:</p> <pre data-language=\"python\">&gt;&gt;&gt; import unicodedata\n&gt;&gt;&gt; unicodedata.lookup('LEFT CURLY BRACKET')\n'{'\n&gt;&gt;&gt; unicodedata.name('/')\n'SOLIDUS'\n&gt;&gt;&gt; unicodedata.decimal('9')\n9\n&gt;&gt;&gt; unicodedata.decimal('a')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: not a decimal\n&gt;&gt;&gt; unicodedata.category('A')  # 'L'etter, 'u'ppercase\n'Lu'\n&gt;&gt;&gt; unicodedata.bidirectional('\\u0660') # 'A'rabic, 'N'umber\n'AN'\n</pre> <h4 class=\"rubric\">Footnotes</h4> <dl class=\"footnote brackets\"> <dt class=\"label\" id=\"id3\">\n<code>1</code> </dt> <dd>\n<p><a class=\"reference external\" href=\"https://www.unicode.org/Public/13.0.0/ucd/NameAliases.txt\">https://www.unicode.org/Public/13.0.0/ucd/NameAliases.txt</a></p> </dd> <dt class=\"label\" id=\"id4\">\n<code>2</code> </dt> <dd>\n<p><a class=\"reference external\" href=\"https://www.unicode.org/Public/13.0.0/ucd/NamedSequences.txt\">https://www.unicode.org/Public/13.0.0/ucd/NamedSequences.txt</a></p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/unicodedata.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/unicodedata.html</a>\n  </p>\n</div>\n","library/stringprep":"<h1 id=\"stringprep-internet-string-preparation\">stringprep — Internet String Preparation</h1> <p id=\"module-stringprep\"><strong>Source code:</strong> <a class=\"reference external\" href=\"https://github.com/python/cpython/tree/3.9/Lib/stringprep.py\">Lib/stringprep.py</a></p>  <p>When identifying things (such as host names) in the internet, it is often necessary to compare such identifications for “equality”. Exactly how this comparison is executed may depend on the application domain, e.g. whether it should be case-insensitive or not. It may be also necessary to restrict the possible identifications, to allow only identifications consisting of “printable” characters.</p> <p><a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc3454.html\" id=\"index-0\"><strong>RFC 3454</strong></a> defines a procedure for “preparing” Unicode strings in internet protocols. Before passing strings onto the wire, they are processed with the preparation procedure, after which they have a certain normalized form. The RFC defines a set of tables, which can be combined into profiles. Each profile must define which tables it uses, and what other optional parts of the <code>stringprep</code> procedure are part of the profile. One example of a <code>stringprep</code> profile is <code>nameprep</code>, which is used for internationalized domain names.</p> <p>The module <a class=\"reference internal\" href=\"#module-stringprep\" title=\"stringprep: String preparation, as per RFC 3453\"><code>stringprep</code></a> only exposes the tables from <a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc3454.html\" id=\"index-1\"><strong>RFC 3454</strong></a>. As these tables would be very large to represent them as dictionaries or lists, the module uses the Unicode character database internally. The module source code itself was generated using the <code>mkstringprep.py</code> utility.</p> <p>As a result, these tables are exposed as functions, not as data structures. There are two kinds of tables in the RFC: sets and mappings. For a set, <a class=\"reference internal\" href=\"#module-stringprep\" title=\"stringprep: String preparation, as per RFC 3453\"><code>stringprep</code></a> provides the “characteristic function”, i.e. a function that returns <code>True</code> if the parameter is part of the set. For mappings, it provides the mapping function: given the key, it returns the associated value. Below is a list of all functions available in the module.</p> <dl class=\"function\"> <dt id=\"stringprep.in_table_a1\">\n<code>stringprep.in_table_a1(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableA.1 (Unassigned code points in Unicode 3.2).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_b1\">\n<code>stringprep.in_table_b1(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableB.1 (Commonly mapped to nothing).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.map_table_b2\">\n<code>stringprep.map_table_b2(code)</code> </dt> <dd>\n<p>Return the mapped value for <em>code</em> according to tableB.2 (Mapping for case-folding used with NFKC).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.map_table_b3\">\n<code>stringprep.map_table_b3(code)</code> </dt> <dd>\n<p>Return the mapped value for <em>code</em> according to tableB.3 (Mapping for case-folding used with no normalization).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c11\">\n<code>stringprep.in_table_c11(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.1.1 (ASCII space characters).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c12\">\n<code>stringprep.in_table_c12(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.1.2 (Non-ASCII space characters).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c11_c12\">\n<code>stringprep.in_table_c11_c12(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.1 (Space characters, union of C.1.1 and C.1.2).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c21\">\n<code>stringprep.in_table_c21(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.2.1 (ASCII control characters).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c22\">\n<code>stringprep.in_table_c22(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.2.2 (Non-ASCII control characters).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c21_c22\">\n<code>stringprep.in_table_c21_c22(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.2 (Control characters, union of C.2.1 and C.2.2).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c3\">\n<code>stringprep.in_table_c3(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.3 (Private use).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c4\">\n<code>stringprep.in_table_c4(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.4 (Non-character code points).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c5\">\n<code>stringprep.in_table_c5(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.5 (Surrogate codes).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c6\">\n<code>stringprep.in_table_c6(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.6 (Inappropriate for plain text).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c7\">\n<code>stringprep.in_table_c7(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.7 (Inappropriate for canonical representation).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c8\">\n<code>stringprep.in_table_c8(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.8 (Change display properties or are deprecated).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_c9\">\n<code>stringprep.in_table_c9(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableC.9 (Tagging characters).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_d1\">\n<code>stringprep.in_table_d1(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableD.1 (Characters with bidirectional property “R” or “AL”).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"stringprep.in_table_d2\">\n<code>stringprep.in_table_d2(code)</code> </dt> <dd>\n<p>Determine whether <em>code</em> is in tableD.2 (Characters with bidirectional property “L”).</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/stringprep.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/stringprep.html</a>\n  </p>\n</div>\n","library/readline":"<h1 id=\"readline-gnu-readline-interface\">readline — GNU readline interface</h1>  <p id=\"module-readline\">The <a class=\"reference internal\" href=\"#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code>readline</code></a> module defines a number of functions to facilitate completion and reading/writing of history files from the Python interpreter. This module can be used directly, or via the <a class=\"reference internal\" href=\"rlcompleter#module-rlcompleter\" title=\"rlcompleter: Python identifier completion, suitable for the GNU readline library.\"><code>rlcompleter</code></a> module, which supports completion of Python identifiers at the interactive prompt. Settings made using this module affect the behaviour of both the interpreter’s interactive prompt and the prompts offered by the built-in <a class=\"reference internal\" href=\"functions#input\" title=\"input\"><code>input()</code></a> function.</p> <p>Readline keybindings may be configured via an initialization file, typically <code>.inputrc</code> in your home directory. See <a class=\"reference external\" href=\"https://tiswww.cwru.edu/php/chet/readline/rluserman.html#SEC9\">Readline Init File</a> in the GNU Readline manual for information about the format and allowable constructs of that file, and the capabilities of the Readline library in general.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The underlying Readline library API may be implemented by the <code>libedit</code> library instead of GNU readline. On macOS the <a class=\"reference internal\" href=\"#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code>readline</code></a> module detects which library is being used at run time.</p> <p>The configuration file for <code>libedit</code> is different from that of GNU readline. If you programmatically load configuration strings you can check for the text “libedit” in <code>readline.__doc__</code> to differentiate between GNU readline and libedit.</p> <p>If you use <em>editline</em>/<code>libedit</code> readline emulation on macOS, the initialization file located in your home directory is named <code>.editrc</code>. For example, the following content in <code>~/.editrc</code> will turn ON <em>vi</em> keybindings and TAB completion:</p> <pre data-language=\"python\">python:bind -v\npython:bind ^I rl_complete\n</pre> </div>  <h2 id=\"init-file\">Init file</h2> <p>The following functions relate to the init file and user configuration:</p> <dl class=\"function\"> <dt id=\"readline.parse_and_bind\">\n<code>readline.parse_and_bind(string)</code> </dt> <dd>\n<p>Execute the init line provided in the <em>string</em> argument. This calls <code>rl_parse_and_bind()</code> in the underlying library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.read_init_file\">\n<code>readline.read_init_file([filename])</code> </dt> <dd>\n<p>Execute a readline initialization file. The default filename is the last filename used. This calls <code>rl_read_init_file()</code> in the underlying library.</p> </dd>\n</dl>   <h2 id=\"line-buffer\">Line buffer</h2> <p>The following functions operate on the line buffer:</p> <dl class=\"function\"> <dt id=\"readline.get_line_buffer\">\n<code>readline.get_line_buffer()</code> </dt> <dd>\n<p>Return the current contents of the line buffer (<code>rl_line_buffer</code> in the underlying library).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.insert_text\">\n<code>readline.insert_text(string)</code> </dt> <dd>\n<p>Insert text into the line buffer at the cursor position. This calls <code>rl_insert_text()</code> in the underlying library, but ignores the return value.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.redisplay\">\n<code>readline.redisplay()</code> </dt> <dd>\n<p>Change what’s displayed on the screen to reflect the current contents of the line buffer. This calls <code>rl_redisplay()</code> in the underlying library.</p> </dd>\n</dl>   <h2 id=\"history-file\">History file</h2> <p>The following functions operate on a history file:</p> <dl class=\"function\"> <dt id=\"readline.read_history_file\">\n<code>readline.read_history_file([filename])</code> </dt> <dd>\n<p>Load a readline history file, and append it to the history list. The default filename is <code>~/.history</code>. This calls <code>read_history()</code> in the underlying library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.write_history_file\">\n<code>readline.write_history_file([filename])</code> </dt> <dd>\n<p>Save the history list to a readline history file, overwriting any existing file. The default filename is <code>~/.history</code>. This calls <code>write_history()</code> in the underlying library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.append_history_file\">\n<code>readline.append_history_file(nelements[, filename])</code> </dt> <dd>\n<p>Append the last <em>nelements</em> items of history to a file. The default filename is <code>~/.history</code>. The file must already exist. This calls <code>append_history()</code> in the underlying library. This function only exists if Python was compiled for a version of the library that supports it.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5.</span></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.get_history_length\">\n<code>readline.get_history_length()</code> </dt> <dt id=\"readline.set_history_length\">\n<code>readline.set_history_length(length)</code> </dt> <dd>\n<p>Set or return the desired number of lines to save in the history file. The <a class=\"reference internal\" href=\"#readline.write_history_file\" title=\"readline.write_history_file\"><code>write_history_file()</code></a> function uses this value to truncate the history file, by calling <code>history_truncate_file()</code> in the underlying library. Negative values imply unlimited history file size.</p> </dd>\n</dl>   <h2 id=\"history-list\">History list</h2> <p>The following functions operate on a global history list:</p> <dl class=\"function\"> <dt id=\"readline.clear_history\">\n<code>readline.clear_history()</code> </dt> <dd>\n<p>Clear the current history. This calls <code>clear_history()</code> in the underlying library. The Python function only exists if Python was compiled for a version of the library that supports it.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.get_current_history_length\">\n<code>readline.get_current_history_length()</code> </dt> <dd>\n<p>Return the number of items currently in the history. (This is different from <a class=\"reference internal\" href=\"#readline.get_history_length\" title=\"readline.get_history_length\"><code>get_history_length()</code></a>, which returns the maximum number of lines that will be written to a history file.)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.get_history_item\">\n<code>readline.get_history_item(index)</code> </dt> <dd>\n<p>Return the current contents of history item at <em>index</em>. The item index is one-based. This calls <code>history_get()</code> in the underlying library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.remove_history_item\">\n<code>readline.remove_history_item(pos)</code> </dt> <dd>\n<p>Remove history item specified by its position from the history. The position is zero-based. This calls <code>remove_history()</code> in the underlying library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.replace_history_item\">\n<code>readline.replace_history_item(pos, line)</code> </dt> <dd>\n<p>Replace history item specified by its position with <em>line</em>. The position is zero-based. This calls <code>replace_history_entry()</code> in the underlying library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.add_history\">\n<code>readline.add_history(line)</code> </dt> <dd>\n<p>Append <em>line</em> to the history buffer, as if it was the last line typed. This calls <code>add_history()</code> in the underlying library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.set_auto_history\">\n<code>readline.set_auto_history(enabled)</code> </dt> <dd>\n<p>Enable or disable automatic calls to <code>add_history()</code> when reading input via readline. The <em>enabled</em> argument should be a Boolean value that when true, enables auto history, and that when false, disables auto history.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6.</span></p> </div> <div class=\"impl-detail compound\"> <p><strong>CPython implementation detail:</strong> Auto history is enabled by default, and changes to this do not persist across multiple sessions.</p> </div> </dd>\n</dl>   <h2 id=\"startup-hooks\">Startup hooks</h2> <dl class=\"function\"> <dt id=\"readline.set_startup_hook\">\n<code>readline.set_startup_hook([function])</code> </dt> <dd>\n<p>Set or remove the function invoked by the <code>rl_startup_hook</code> callback of the underlying library. If <em>function</em> is specified, it will be used as the new hook function; if omitted or <code>None</code>, any function already installed is removed. The hook is called with no arguments just before readline prints the first prompt.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.set_pre_input_hook\">\n<code>readline.set_pre_input_hook([function])</code> </dt> <dd>\n<p>Set or remove the function invoked by the <code>rl_pre_input_hook</code> callback of the underlying library. If <em>function</em> is specified, it will be used as the new hook function; if omitted or <code>None</code>, any function already installed is removed. The hook is called with no arguments after the first prompt has been printed and just before readline starts reading input characters. This function only exists if Python was compiled for a version of the library that supports it.</p> </dd>\n</dl>   <h2 id=\"completion\">Completion</h2> <p>The following functions relate to implementing a custom word completion function. This is typically operated by the Tab key, and can suggest and automatically complete a word being typed. By default, Readline is set up to be used by <a class=\"reference internal\" href=\"rlcompleter#module-rlcompleter\" title=\"rlcompleter: Python identifier completion, suitable for the GNU readline library.\"><code>rlcompleter</code></a> to complete Python identifiers for the interactive interpreter. If the <a class=\"reference internal\" href=\"#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code>readline</code></a> module is to be used with a custom completer, a different set of word delimiters should be set.</p> <dl class=\"function\"> <dt id=\"readline.set_completer\">\n<code>readline.set_completer([function])</code> </dt> <dd>\n<p>Set or remove the completer function. If <em>function</em> is specified, it will be used as the new completer function; if omitted or <code>None</code>, any completer function already installed is removed. The completer function is called as <code>function(text, state)</code>, for <em>state</em> in <code>0</code>, <code>1</code>, <code>2</code>, …, until it returns a non-string value. It should return the next possible completion starting with <em>text</em>.</p> <p>The installed completer function is invoked by the <em>entry_func</em> callback passed to <code>rl_completion_matches()</code> in the underlying library. The <em>text</em> string comes from the first parameter to the <code>rl_attempted_completion_function</code> callback of the underlying library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.get_completer\">\n<code>readline.get_completer()</code> </dt> <dd>\n<p>Get the completer function, or <code>None</code> if no completer function has been set.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.get_completion_type\">\n<code>readline.get_completion_type()</code> </dt> <dd>\n<p>Get the type of completion being attempted. This returns the <code>rl_completion_type</code> variable in the underlying library as an integer.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.get_begidx\">\n<code>readline.get_begidx()</code> </dt> <dt id=\"readline.get_endidx\">\n<code>readline.get_endidx()</code> </dt> <dd>\n<p>Get the beginning or ending index of the completion scope. These indexes are the <em>start</em> and <em>end</em> arguments passed to the <code>rl_attempted_completion_function</code> callback of the underlying library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.set_completer_delims\">\n<code>readline.set_completer_delims(string)</code> </dt> <dt id=\"readline.get_completer_delims\">\n<code>readline.get_completer_delims()</code> </dt> <dd>\n<p>Set or get the word delimiters for completion. These determine the start of the word to be considered for completion (the completion scope). These functions access the <code>rl_completer_word_break_characters</code> variable in the underlying library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"readline.set_completion_display_matches_hook\">\n<code>readline.set_completion_display_matches_hook([function])</code> </dt> <dd>\n<p>Set or remove the completion display function. If <em>function</em> is specified, it will be used as the new completion display function; if omitted or <code>None</code>, any completion display function already installed is removed. This sets or clears the <code>rl_completion_display_matches_hook</code> callback in the underlying library. The completion display function is called as <code>function(substitution, [matches], longest_match_length)</code> once each time matches need to be displayed.</p> </dd>\n</dl>   <h2 id=\"readline-example\">Example</h2> <p id=\"example\">The following example demonstrates how to use the <a class=\"reference internal\" href=\"#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code>readline</code></a> module’s history reading and writing functions to automatically load and save a history file named <code>.python_history</code> from the user’s home directory. The code below would normally be executed automatically during interactive sessions from the user’s <a class=\"reference internal\" href=\"https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONSTARTUP\" id=\"index-0\"><code>PYTHONSTARTUP</code></a> file.</p> <pre data-language=\"python\">import atexit\nimport os\nimport readline\n\nhistfile = os.path.join(os.path.expanduser(\"~\"), \".python_history\")\ntry:\n    readline.read_history_file(histfile)\n    # default history len is -1 (infinite), which may grow unruly\n    readline.set_history_length(1000)\nexcept FileNotFoundError:\n    pass\n\natexit.register(readline.write_history_file, histfile)\n</pre> <p>This code is actually automatically run when Python is run in <a class=\"reference internal\" href=\"https://docs.python.org/3.9/tutorial/interpreter.html#tut-interactive\"><span class=\"std std-ref\">interactive mode</span></a> (see <a class=\"reference internal\" href=\"site#rlcompleter-config\"><span class=\"std std-ref\">Readline configuration</span></a>).</p> <p>The following example achieves the same goal but supports concurrent interactive sessions, by only appending the new history.</p> <pre data-language=\"python\">import atexit\nimport os\nimport readline\nhistfile = os.path.join(os.path.expanduser(\"~\"), \".python_history\")\n\ntry:\n    readline.read_history_file(histfile)\n    h_len = readline.get_current_history_length()\nexcept FileNotFoundError:\n    open(histfile, 'wb').close()\n    h_len = 0\n\ndef save(prev_h_len, histfile):\n    new_h_len = readline.get_current_history_length()\n    readline.set_history_length(1000)\n    readline.append_history_file(new_h_len - prev_h_len, histfile)\natexit.register(save, h_len, histfile)\n</pre> <p>The following example extends the <a class=\"reference internal\" href=\"code#code.InteractiveConsole\" title=\"code.InteractiveConsole\"><code>code.InteractiveConsole</code></a> class to support history save/restore.</p> <pre data-language=\"python\">import atexit\nimport code\nimport os\nimport readline\n\nclass HistoryConsole(code.InteractiveConsole):\n    def __init__(self, locals=None, filename=\"&lt;console&gt;\",\n                 histfile=os.path.expanduser(\"~/.console-history\")):\n        code.InteractiveConsole.__init__(self, locals, filename)\n        self.init_history(histfile)\n\n    def init_history(self, histfile):\n        readline.parse_and_bind(\"tab: complete\")\n        if hasattr(readline, \"read_history_file\"):\n            try:\n                readline.read_history_file(histfile)\n            except FileNotFoundError:\n                pass\n            atexit.register(self.save_history, histfile)\n\n    def save_history(self, histfile):\n        readline.set_history_length(1000)\n        readline.write_history_file(histfile)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/readline.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/readline.html</a>\n  </p>\n</div>\n","library/rlcompleter":"<h1 id=\"rlcompleter-completion-function-for-gnu-readline\">rlcompleter — Completion function for GNU readline</h1> <p id=\"module-rlcompleter\"><strong>Source code:</strong> <a class=\"reference external\" href=\"https://github.com/python/cpython/tree/3.9/Lib/rlcompleter.py\">Lib/rlcompleter.py</a></p>  <p>The <a class=\"reference internal\" href=\"#module-rlcompleter\" title=\"rlcompleter: Python identifier completion, suitable for the GNU readline library.\"><code>rlcompleter</code></a> module defines a completion function suitable for the <a class=\"reference internal\" href=\"readline#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code>readline</code></a> module by completing valid Python identifiers and keywords.</p> <p>When this module is imported on a Unix platform with the <a class=\"reference internal\" href=\"readline#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code>readline</code></a> module available, an instance of the <code>Completer</code> class is automatically created and its <code>complete()</code> method is set as the <a class=\"reference internal\" href=\"readline#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code>readline</code></a> completer.</p> <p>Example:</p> <pre data-language=\"python\">&gt;&gt;&gt; import rlcompleter\n&gt;&gt;&gt; import readline\n&gt;&gt;&gt; readline.parse_and_bind(\"tab: complete\")\n&gt;&gt;&gt; readline. &lt;TAB PRESSED&gt;\nreadline.__doc__          readline.get_line_buffer(  readline.read_init_file(\nreadline.__file__         readline.insert_text(      readline.set_completer(\nreadline.__name__         readline.parse_and_bind(\n&gt;&gt;&gt; readline.\n</pre> <p>The <a class=\"reference internal\" href=\"#module-rlcompleter\" title=\"rlcompleter: Python identifier completion, suitable for the GNU readline library.\"><code>rlcompleter</code></a> module is designed for use with Python’s <a class=\"reference internal\" href=\"https://docs.python.org/3.9/tutorial/interpreter.html#tut-interactive\"><span class=\"std std-ref\">interactive mode</span></a>. Unless Python is run with the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/using/cmdline.html#id3\"><code>-S</code></a> option, the module is automatically imported and configured (see <a class=\"reference internal\" href=\"site#rlcompleter-config\"><span class=\"std std-ref\">Readline configuration</span></a>).</p> <p>On platforms without <a class=\"reference internal\" href=\"readline#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code>readline</code></a>, the <code>Completer</code> class defined by this module can still be used for custom purposes.</p>  <h2 id=\"id1\">Completer Objects</h2> <p id=\"completer-objects\">Completer objects have the following method:</p> <dl class=\"method\"> <dt id=\"rlcompleter.Completer.complete\">\n<code>Completer.complete(text, state)</code> </dt> <dd>\n<p>Return the <em>state</em>th completion for <em>text</em>.</p> <p>If called for <em>text</em> that doesn’t include a period character (<code>'.'</code>), it will complete from names currently defined in <a class=\"reference internal\" href=\"__main__#module-__main__\" title=\"__main__: The environment where the top-level script is run.\"><code>__main__</code></a>, <a class=\"reference internal\" href=\"builtins#module-builtins\" title=\"builtins: The module that provides the built-in namespace.\"><code>builtins</code></a> and keywords (as defined by the <a class=\"reference internal\" href=\"keyword#module-keyword\" title=\"keyword: Test whether a string is a keyword in Python.\"><code>keyword</code></a> module).</p> <p>If called for a dotted name, it will try to evaluate anything without obvious side-effects (functions will not be evaluated, but it can generate calls to <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__\" title=\"object.__getattr__\"><code>__getattr__()</code></a>) up to the last part, and find matches for the rest via the <a class=\"reference internal\" href=\"functions#dir\" title=\"dir\"><code>dir()</code></a> function. Any exception raised during the evaluation of the expression is caught, silenced and <a class=\"reference internal\" href=\"constants#None\" title=\"None\"><code>None</code></a> is returned.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/rlcompleter.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/rlcompleter.html</a>\n  </p>\n</div>\n","library/struct":"<h1 id=\"struct-interpret-bytes-as-packed-binary-data\">struct — Interpret bytes as packed binary data</h1> <p id=\"module-struct\"><strong>Source code:</strong> <a class=\"reference external\" href=\"https://github.com/python/cpython/tree/3.9/Lib/struct.py\">Lib/struct.py</a></p>  <p>This module performs conversions between Python values and C structs represented as Python <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> objects. This can be used in handling binary data stored in files or from network connections, among other sources. It uses <a class=\"reference internal\" href=\"#struct-format-strings\"><span class=\"std std-ref\">Format Strings</span></a> as compact descriptions of the layout of the C structs and the intended conversion to/from Python values.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking. This behavior is chosen so that the bytes of a packed struct correspond exactly to the layout in memory of the corresponding C struct. To handle platform-independent data formats or omit implicit pad bytes, use <code>standard</code> size and alignment instead of <code>native</code> size and alignment: see <a class=\"reference internal\" href=\"#struct-alignment\"><span class=\"std std-ref\">Byte Order, Size, and Alignment</span></a> for details.</p> </div> <p>Several <a class=\"reference internal\" href=\"#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> functions (and methods of <a class=\"reference internal\" href=\"#struct.Struct\" title=\"struct.Struct\"><code>Struct</code></a>) take a <em>buffer</em> argument. This refers to objects that implement the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/c-api/buffer.html#bufferobjects\"><span class=\"std std-ref\">Buffer Protocol</span></a> and provide either a readable or read-writable buffer. The most common types used for that purpose are <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> and <a class=\"reference internal\" href=\"stdtypes#bytearray\" title=\"bytearray\"><code>bytearray</code></a>, but many other types that can be viewed as an array of bytes implement the buffer protocol, so that they can be read/filled without additional copying from a <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> object.</p>  <h2 id=\"functions-and-exceptions\">Functions and Exceptions</h2> <p>The module defines the following exception and functions:</p> <dl class=\"exception\"> <dt id=\"struct.error\">\n<code>exception struct.error</code> </dt> <dd>\n<p>Exception raised on various occasions; argument is a string describing what is wrong.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"struct.pack\">\n<code>struct.pack(format, v1, v2, ...)</code> </dt> <dd>\n<p>Return a bytes object containing the values <em>v1</em>, <em>v2</em>, … packed according to the format string <em>format</em>. The arguments must match the values required by the format exactly.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"struct.pack_into\">\n<code>struct.pack_into(format, buffer, offset, v1, v2, ...)</code> </dt> <dd>\n<p>Pack the values <em>v1</em>, <em>v2</em>, … according to the format string <em>format</em> and write the packed bytes into the writable buffer <em>buffer</em> starting at position <em>offset</em>. Note that <em>offset</em> is a required argument.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"struct.unpack\">\n<code>struct.unpack(format, buffer)</code> </dt> <dd>\n<p>Unpack from the buffer <em>buffer</em> (presumably packed by <code>pack(format, ...)</code>) according to the format string <em>format</em>. The result is a tuple even if it contains exactly one item. The buffer’s size in bytes must match the size required by the format, as reflected by <a class=\"reference internal\" href=\"#struct.calcsize\" title=\"struct.calcsize\"><code>calcsize()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"struct.unpack_from\">\n<code>struct.unpack_from(format, /, buffer, offset=0)</code> </dt> <dd>\n<p>Unpack from <em>buffer</em> starting at position <em>offset</em>, according to the format string <em>format</em>. The result is a tuple even if it contains exactly one item. The buffer’s size in bytes, starting at position <em>offset</em>, must be at least the size required by the format, as reflected by <a class=\"reference internal\" href=\"#struct.calcsize\" title=\"struct.calcsize\"><code>calcsize()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"struct.iter_unpack\">\n<code>struct.iter_unpack(format, buffer)</code> </dt> <dd>\n<p>Iteratively unpack from the buffer <em>buffer</em> according to the format string <em>format</em>. This function returns an iterator which will read equally-sized chunks from the buffer until all its contents have been consumed. The buffer’s size in bytes must be a multiple of the size required by the format, as reflected by <a class=\"reference internal\" href=\"#struct.calcsize\" title=\"struct.calcsize\"><code>calcsize()</code></a>.</p> <p>Each iteration yields a tuple as specified by the format string.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4.</span></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"struct.calcsize\">\n<code>struct.calcsize(format)</code> </dt> <dd>\n<p>Return the size of the struct (and hence of the bytes object produced by <code>pack(format, ...)</code>) corresponding to the format string <em>format</em>.</p> </dd>\n</dl>   <h2 id=\"struct-format-strings\">Format Strings</h2> <p id=\"format-strings\">Format strings are the mechanism used to specify the expected layout when packing and unpacking data. They are built up from <a class=\"reference internal\" href=\"#format-characters\"><span class=\"std std-ref\">Format Characters</span></a>, which specify the type of data being packed/unpacked. In addition, there are special characters for controlling the <a class=\"reference internal\" href=\"#struct-alignment\"><span class=\"std std-ref\">Byte Order, Size, and Alignment</span></a>.</p>  <h3 id=\"struct-alignment\">Byte Order, Size, and Alignment</h3> <p id=\"byte-order-size-and-alignment\">By default, C types are represented in the machine’s native format and byte order, and properly aligned by skipping pad bytes if necessary (according to the rules used by the C compiler).</p> <p id=\"index-1\">Alternatively, the first character of the format string can be used to indicate the byte order, size and alignment of the packed data, according to the following table:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Character</p></th> <th class=\"head\"><p>Byte order</p></th> <th class=\"head\"><p>Size</p></th> <th class=\"head\"><p>Alignment</p></th> </tr> </thead>  <tr>\n<td><p><code>@</code></p></td> <td><p>native</p></td> <td><p>native</p></td> <td><p>native</p></td> </tr> <tr>\n<td><p><code>=</code></p></td> <td><p>native</p></td> <td><p>standard</p></td> <td><p>none</p></td> </tr> <tr>\n<td><p><code>&lt;</code></p></td> <td><p>little-endian</p></td> <td><p>standard</p></td> <td><p>none</p></td> </tr> <tr>\n<td><p><code>&gt;</code></p></td> <td><p>big-endian</p></td> <td><p>standard</p></td> <td><p>none</p></td> </tr> <tr>\n<td><p><code>!</code></p></td> <td><p>network (= big-endian)</p></td> <td><p>standard</p></td> <td><p>none</p></td> </tr>  </table> <p>If the first character is not one of these, <code>'@'</code> is assumed.</p> <p>Native byte order is big-endian or little-endian, depending on the host system. For example, Intel x86 and AMD64 (x86-64) are little-endian; Motorola 68000 and PowerPC G5 are big-endian; ARM and Intel Itanium feature switchable endianness (bi-endian). Use <code>sys.byteorder</code> to check the endianness of your system.</p> <p>Native size and alignment are determined using the C compiler’s <code>sizeof</code> expression. This is always combined with native byte order.</p> <p>Standard size depends only on the format character; see the table in the <a class=\"reference internal\" href=\"#format-characters\"><span class=\"std std-ref\">Format Characters</span></a> section.</p> <p>Note the difference between <code>'@'</code> and <code>'='</code>: both use native byte order, but the size and alignment of the latter is standardized.</p> <p>The form <code>'!'</code> represents the network byte order which is always big-endian as defined in <a class=\"reference external\" href=\"https://tools.ietf.org/html/rfc1700\">IETF RFC 1700</a>.</p> <p>There is no way to indicate non-native byte order (force byte-swapping); use the appropriate choice of <code>'&lt;'</code> or <code>'&gt;'</code>.</p> <p>Notes:</p> <ol class=\"arabic simple\"> <li>Padding is only automatically added between successive structure members. No padding is added at the beginning or the end of the encoded struct.</li> <li>No padding is added when using non-native size and alignment, e.g. with ‘&lt;’, ‘&gt;’, ‘=’, and ‘!’.</li> <li>To align the end of a structure to the alignment requirement of a particular type, end the format with the code for that type with a repeat count of zero. See <a class=\"reference internal\" href=\"#struct-examples\"><span class=\"std std-ref\">Examples</span></a>.</li> </ol>   <h3 id=\"id1\">Format Characters</h3> <p id=\"format-characters\">Format characters have the following meaning; the conversion between C and Python values should be obvious given their types. The ‘Standard size’ column refers to the size of the packed value in bytes when using standard size; that is, when the format string starts with one of <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'!'</code> or <code>'='</code>. When using native size, the size of the packed value is platform-dependent.</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Format</p></th> <th class=\"head\"><p>C Type</p></th> <th class=\"head\"><p>Python type</p></th> <th class=\"head\"><p>Standard size</p></th> <th class=\"head\"><p>Notes</p></th> </tr> </thead>  <tr>\n<td><p><code>x</code></p></td> <td><p>pad byte</p></td> <td><p>no value</p></td> <td></td> <td></td> </tr> <tr>\n<td><p><code>c</code></p></td> <td><p><code>char</code></p></td> <td><p>bytes of length 1</p></td> <td><p>1</p></td> <td></td> </tr> <tr>\n<td><p><code>b</code></p></td> <td><p><code>signed char</code></p></td> <td><p>integer</p></td> <td><p>1</p></td> <td><p>(1), (2)</p></td> </tr> <tr>\n<td><p><code>B</code></p></td> <td><p><code>unsigned char</code></p></td> <td><p>integer</p></td> <td><p>1</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>?</code></p></td> <td><p><code>_Bool</code></p></td> <td><p>bool</p></td> <td><p>1</p></td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>h</code></p></td> <td><p><code>short</code></p></td> <td><p>integer</p></td> <td><p>2</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>H</code></p></td> <td><p><code>unsigned short</code></p></td> <td><p>integer</p></td> <td><p>2</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>i</code></p></td> <td><p><code>int</code></p></td> <td><p>integer</p></td> <td><p>4</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>I</code></p></td> <td><p><code>unsigned int</code></p></td> <td><p>integer</p></td> <td><p>4</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>l</code></p></td> <td><p><code>long</code></p></td> <td><p>integer</p></td> <td><p>4</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>L</code></p></td> <td><p><code>unsigned long</code></p></td> <td><p>integer</p></td> <td><p>4</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>q</code></p></td> <td><p><code>long long</code></p></td> <td><p>integer</p></td> <td><p>8</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>Q</code></p></td> <td><p><code>unsigned long\nlong</code></p></td> <td><p>integer</p></td> <td><p>8</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>n</code></p></td> <td><p><code>ssize_t</code></p></td> <td><p>integer</p></td> <td></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>N</code></p></td> <td><p><code>size_t</code></p></td> <td><p>integer</p></td> <td></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>e</code></p></td> <td><p>(6)</p></td> <td><p>float</p></td> <td><p>2</p></td> <td><p>(4)</p></td> </tr> <tr>\n<td><p><code>f</code></p></td> <td><p><code>float</code></p></td> <td><p>float</p></td> <td><p>4</p></td> <td><p>(4)</p></td> </tr> <tr>\n<td><p><code>d</code></p></td> <td><p><code>double</code></p></td> <td><p>float</p></td> <td><p>8</p></td> <td><p>(4)</p></td> </tr> <tr>\n<td><p><code>s</code></p></td> <td><p><code>char[]</code></p></td> <td><p>bytes</p></td> <td></td> <td></td> </tr> <tr>\n<td><p><code>p</code></p></td> <td><p><code>char[]</code></p></td> <td><p>bytes</p></td> <td></td> <td></td> </tr> <tr>\n<td><p><code>P</code></p></td> <td><p><code>void *</code></p></td> <td><p>integer</p></td> <td></td> <td><p>(5)</p></td> </tr>  </table> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Added support for the <code>'n'</code> and <code>'N'</code> formats.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Added support for the <code>'e'</code> format.</p> </div> <p>Notes:</p> <ol class=\"arabic\"> <li>The <code>'?'</code> conversion code corresponds to the <code>_Bool</code> type defined by C99. If this type is not available, it is simulated using a <code>char</code>. In standard mode, it is always represented by one byte. </li> <li>\n<p>When attempting to pack a non-integer using any of the integer conversion codes, if the non-integer has a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a> method then that method is called to convert the argument to an integer before packing.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.2: </span>Added use of the <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code>__index__()</code></a> method for non-integers.</p> </div> </li> <li>The <code>'n'</code> and <code>'N'</code> conversion codes are only available for the native size (selected as the default or with the <code>'@'</code> byte order character). For the standard size, you can use whichever of the other integer formats fits your application.</li> <li>For the <code>'f'</code>, <code>'d'</code> and <code>'e'</code> conversion codes, the packed representation uses the IEEE 754 binary32, binary64 or binary16 format (for <code>'f'</code>, <code>'d'</code> or <code>'e'</code> respectively), regardless of the floating-point format used by the platform.</li> <li>The <code>'P'</code> format character is only available for the native byte ordering (selected as the default or with the <code>'@'</code> byte order character). The byte order character <code>'='</code> chooses to use little- or big-endian ordering based on the host system. The struct module does not interpret this as native ordering, so the <code>'P'</code> format is not available.</li> <li>The IEEE 754 binary16 “half precision” type was introduced in the 2008 revision of the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/IEEE_floating_point#IEEE_754-2008\">IEEE 754 standard</a>. It has a sign bit, a 5-bit exponent and 11-bit precision (with 10 bits explicitly stored), and can represent numbers between approximately <code>6.1e-05</code> and <code>6.5e+04</code> at full precision. This type is not widely supported by C compilers: on a typical machine, an unsigned short can be used for storage, but not for math operations. See the Wikipedia page on the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Half-precision_floating-point_format\">half-precision floating-point format</a> for more information.</li> </ol> <p>A format character may be preceded by an integral repeat count. For example, the format string <code>'4h'</code> means exactly the same as <code>'hhhh'</code>.</p> <p>Whitespace characters between formats are ignored; a count and its format must not contain whitespace though.</p> <p>For the <code>'s'</code> format character, the count is interpreted as the length of the bytes, not a repeat count like for the other format characters; for example, <code>'10s'</code> means a single 10-byte string, while <code>'10c'</code> means 10 characters. If a count is not given, it defaults to 1. For packing, the string is truncated or padded with null bytes as appropriate to make it fit. For unpacking, the resulting bytes object always has exactly the specified number of bytes. As a special case, <code>'0s'</code> means a single, empty string (while <code>'0c'</code> means 0 characters).</p> <p>When packing a value <code>x</code> using one of the integer formats (<code>'b'</code>, <code>'B'</code>, <code>'h'</code>, <code>'H'</code>, <code>'i'</code>, <code>'I'</code>, <code>'l'</code>, <code>'L'</code>, <code>'q'</code>, <code>'Q'</code>), if <code>x</code> is outside the valid range for that format then <a class=\"reference internal\" href=\"#struct.error\" title=\"struct.error\"><code>struct.error</code></a> is raised.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.1: </span>Previously, some of the integer formats wrapped out-of-range values and raised <a class=\"reference internal\" href=\"exceptions#DeprecationWarning\" title=\"DeprecationWarning\"><code>DeprecationWarning</code></a> instead of <a class=\"reference internal\" href=\"#struct.error\" title=\"struct.error\"><code>struct.error</code></a>.</p> </div> <p>The <code>'p'</code> format character encodes a “Pascal string”, meaning a short variable-length string stored in a <em>fixed number of bytes</em>, given by the count. The first byte stored is the length of the string, or 255, whichever is smaller. The bytes of the string follow. If the string passed in to <a class=\"reference internal\" href=\"#struct.pack\" title=\"struct.pack\"><code>pack()</code></a> is too long (longer than the count minus 1), only the leading <code>count-1</code> bytes of the string are stored. If the string is shorter than <code>count-1</code>, it is padded with null bytes so that exactly count bytes in all are used. Note that for <a class=\"reference internal\" href=\"#struct.unpack\" title=\"struct.unpack\"><code>unpack()</code></a>, the <code>'p'</code> format character consumes <code>count</code> bytes, but that the string returned can never contain more than 255 bytes.</p> <p id=\"index-3\">For the <code>'?'</code> format character, the return value is either <a class=\"reference internal\" href=\"constants#True\" title=\"True\"><code>True</code></a> or <a class=\"reference internal\" href=\"constants#False\" title=\"False\"><code>False</code></a>. When packing, the truth value of the argument object is used. Either 0 or 1 in the native or standard bool representation will be packed, and any non-zero value will be <code>True</code> when unpacking.</p>   <h3 id=\"struct-examples\">Examples</h3> <div class=\"admonition note\" id=\"examples\"> <p class=\"admonition-title\">Note</p> <p>All examples assume a native byte order, size, and alignment with a big-endian machine.</p> </div> <p>A basic example of packing/unpacking three integers:</p> <pre data-language=\"python\">&gt;&gt;&gt; from struct import *\n&gt;&gt;&gt; pack('hhl', 1, 2, 3)\nb'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03'\n&gt;&gt;&gt; unpack('hhl', b'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03')\n(1, 2, 3)\n&gt;&gt;&gt; calcsize('hhl')\n8\n</pre> <p>Unpacked fields can be named by assigning them to variables or by wrapping the result in a named tuple:</p> <pre data-language=\"python\">&gt;&gt;&gt; record = b'raymond   \\x32\\x12\\x08\\x01\\x08'\n&gt;&gt;&gt; name, serialnum, school, gradelevel = unpack('&lt;10sHHb', record)\n\n&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Student = namedtuple('Student', 'name serialnum school gradelevel')\n&gt;&gt;&gt; Student._make(unpack('&lt;10sHHb', record))\nStudent(name=b'raymond   ', serialnum=4658, school=264, gradelevel=8)\n</pre> <p>The ordering of format characters may have an impact on size since the padding needed to satisfy alignment requirements is different:</p> <pre data-language=\"python\">&gt;&gt;&gt; pack('ci', b'*', 0x12131415)\nb'*\\x00\\x00\\x00\\x12\\x13\\x14\\x15'\n&gt;&gt;&gt; pack('ic', 0x12131415, b'*')\nb'\\x12\\x13\\x14\\x15*'\n&gt;&gt;&gt; calcsize('ci')\n8\n&gt;&gt;&gt; calcsize('ic')\n5\n</pre> <p>The following format <code>'llh0l'</code> specifies two pad bytes at the end, assuming longs are aligned on 4-byte boundaries:</p> <pre data-language=\"python\">&gt;&gt;&gt; pack('llh0l', 1, 2, 3)\nb'\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x03\\x00\\x00'\n</pre> <p>This only works when native size and alignment are in effect; standard size and alignment does not enforce any alignment.</p> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <dl class=\"simple\"> <dt>\n<code>Module</code> <a class=\"reference internal\" href=\"array#module-array\" title=\"array: Space efficient arrays of uniformly typed numeric values.\"><code>array</code></a>\n</dt>\n<dd>\n<p>Packed binary storage of homogeneous data.</p> </dd> <dt>\n<code>Module</code> <a class=\"reference internal\" href=\"xdrlib#module-xdrlib\" title=\"xdrlib: Encoders and decoders for the External Data Representation (XDR).\"><code>xdrlib</code></a>\n</dt>\n<dd>\n<p>Packing and unpacking of XDR data.</p> </dd> </dl> </div>    <h2 id=\"struct-objects\">Classes</h2> <p id=\"classes\">The <a class=\"reference internal\" href=\"#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> module also defines the following type:</p> <dl class=\"class\"> <dt id=\"struct.Struct\">\n<code>class struct.Struct(format)</code> </dt> <dd>\n<p>Return a new Struct object which writes and reads binary data according to the format string <em>format</em>. Creating a Struct object once and calling its methods is more efficient than calling the <a class=\"reference internal\" href=\"#module-struct\" title=\"struct: Interpret bytes as packed binary data.\"><code>struct</code></a> functions with the same format since the format string only needs to be compiled once.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>The compiled versions of the most recent format strings passed to <a class=\"reference internal\" href=\"#struct.Struct\" title=\"struct.Struct\"><code>Struct</code></a> and the module-level functions are cached, so programs that use only a few format strings needn’t worry about reusing a single <a class=\"reference internal\" href=\"#struct.Struct\" title=\"struct.Struct\"><code>Struct</code></a> instance.</p> </div> <p>Compiled Struct objects support the following methods and attributes:</p> <dl class=\"method\"> <dt id=\"struct.Struct.pack\">\n<code>pack(v1, v2, ...)</code> </dt> <dd>\n<p>Identical to the <a class=\"reference internal\" href=\"#struct.pack\" title=\"struct.pack\"><code>pack()</code></a> function, using the compiled format. (<code>len(result)</code> will equal <a class=\"reference internal\" href=\"#struct.Struct.size\" title=\"struct.Struct.size\"><code>size</code></a>.)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"struct.Struct.pack_into\">\n<code>pack_into(buffer, offset, v1, v2, ...)</code> </dt> <dd>\n<p>Identical to the <a class=\"reference internal\" href=\"#struct.pack_into\" title=\"struct.pack_into\"><code>pack_into()</code></a> function, using the compiled format.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"struct.Struct.unpack\">\n<code>unpack(buffer)</code> </dt> <dd>\n<p>Identical to the <a class=\"reference internal\" href=\"#struct.unpack\" title=\"struct.unpack\"><code>unpack()</code></a> function, using the compiled format. The buffer’s size in bytes must equal <a class=\"reference internal\" href=\"#struct.Struct.size\" title=\"struct.Struct.size\"><code>size</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"struct.Struct.unpack_from\">\n<code>unpack_from(buffer, offset=0)</code> </dt> <dd>\n<p>Identical to the <a class=\"reference internal\" href=\"#struct.unpack_from\" title=\"struct.unpack_from\"><code>unpack_from()</code></a> function, using the compiled format. The buffer’s size in bytes, starting at position <em>offset</em>, must be at least <a class=\"reference internal\" href=\"#struct.Struct.size\" title=\"struct.Struct.size\"><code>size</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"struct.Struct.iter_unpack\">\n<code>iter_unpack(buffer)</code> </dt> <dd>\n<p>Identical to the <a class=\"reference internal\" href=\"#struct.iter_unpack\" title=\"struct.iter_unpack\"><code>iter_unpack()</code></a> function, using the compiled format. The buffer’s size in bytes must be a multiple of <a class=\"reference internal\" href=\"#struct.Struct.size\" title=\"struct.Struct.size\"><code>size</code></a>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4.</span></p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"struct.Struct.format\">\n<code>format</code> </dt> <dd>\n<p>The format string used to construct this Struct object.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The format string type is now <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a> instead of <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a>.</p> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"struct.Struct.size\">\n<code>size</code> </dt> <dd>\n<p>The calculated size of the struct (and hence of the bytes object produced by the <a class=\"reference internal\" href=\"#struct.pack\" title=\"struct.pack\"><code>pack()</code></a> method) corresponding to <a class=\"reference internal\" href=\"functions#format\" title=\"format\"><code>format</code></a>.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/struct.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/struct.html</a>\n  </p>\n</div>\n","library/codecs":"<h1 id=\"codecs-codec-registry-and-base-classes\">codecs — Codec registry and base classes</h1> <p id=\"module-codecs\"><strong>Source code:</strong> <a class=\"reference external\" href=\"https://github.com/python/cpython/tree/3.9/Lib/codecs.py\">Lib/codecs.py</a></p>  <p>This module defines base classes for standard Python codecs (encoders and decoders) and provides access to the internal Python codec registry, which manages the codec and error handling lookup process. Most standard codecs are <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encodings</span></a>, which encode text to bytes, but there are also codecs provided that encode text to text, and bytes to bytes. Custom codecs may encode and decode between arbitrary types, but some module features are restricted to use specifically with <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encodings</span></a>, or with codecs that encode to <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a>.</p> <p>The module defines the following functions for encoding and decoding with any codec:</p> <dl class=\"function\"> <dt id=\"codecs.encode\">\n<code>codecs.encode(obj, encoding='utf-8', errors='strict')</code> </dt> <dd>\n<p>Encodes <em>obj</em> using the codec registered for <em>encoding</em>.</p> <p><em>Errors</em> may be given to set the desired error handling scheme. The default error handler is <code>'strict'</code> meaning that encoding errors raise <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> (or a more codec specific subclass, such as <a class=\"reference internal\" href=\"exceptions#UnicodeEncodeError\" title=\"UnicodeEncodeError\"><code>UnicodeEncodeError</code></a>). Refer to <a class=\"reference internal\" href=\"#codec-base-classes\"><span class=\"std std-ref\">Codec Base Classes</span></a> for more information on codec error handling.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.decode\">\n<code>codecs.decode(obj, encoding='utf-8', errors='strict')</code> </dt> <dd>\n<p>Decodes <em>obj</em> using the codec registered for <em>encoding</em>.</p> <p><em>Errors</em> may be given to set the desired error handling scheme. The default error handler is <code>'strict'</code> meaning that decoding errors raise <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> (or a more codec specific subclass, such as <a class=\"reference internal\" href=\"exceptions#UnicodeDecodeError\" title=\"UnicodeDecodeError\"><code>UnicodeDecodeError</code></a>). Refer to <a class=\"reference internal\" href=\"#codec-base-classes\"><span class=\"std std-ref\">Codec Base Classes</span></a> for more information on codec error handling.</p> </dd>\n</dl> <p>The full details for each codec can also be looked up directly:</p> <dl class=\"function\"> <dt id=\"codecs.lookup\">\n<code>codecs.lookup(encoding)</code> </dt> <dd>\n<p>Looks up the codec info in the Python codec registry and returns a <a class=\"reference internal\" href=\"#codecs.CodecInfo\" title=\"codecs.CodecInfo\"><code>CodecInfo</code></a> object as defined below.</p> <p>Encodings are first looked up in the registry’s cache. If not found, the list of registered search functions is scanned. If no <a class=\"reference internal\" href=\"#codecs.CodecInfo\" title=\"codecs.CodecInfo\"><code>CodecInfo</code></a> object is found, a <a class=\"reference internal\" href=\"exceptions#LookupError\" title=\"LookupError\"><code>LookupError</code></a> is raised. Otherwise, the <a class=\"reference internal\" href=\"#codecs.CodecInfo\" title=\"codecs.CodecInfo\"><code>CodecInfo</code></a> object is stored in the cache and returned to the caller.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"codecs.CodecInfo\">\n<code>class codecs.CodecInfo(encode, decode, streamreader=None, streamwriter=None, incrementalencoder=None, incrementaldecoder=None, name=None)</code> </dt> <dd>\n<p>Codec details when looking up the codec registry. The constructor arguments are stored in attributes of the same name:</p> <dl class=\"attribute\"> <dt id=\"codecs.CodecInfo.name\">\n<code>name</code> </dt> <dd>\n<p>The name of the encoding.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"codecs.CodecInfo.encode\">\n<code>encode</code> </dt> <dt id=\"codecs.CodecInfo.decode\">\n<code>decode</code> </dt> <dd>\n<p>The stateless encoding and decoding functions. These must be functions or methods which have the same interface as the <a class=\"reference internal\" href=\"#codecs.Codec.encode\" title=\"codecs.Codec.encode\"><code>encode()</code></a> and <a class=\"reference internal\" href=\"#codecs.Codec.decode\" title=\"codecs.Codec.decode\"><code>decode()</code></a> methods of Codec instances (see <a class=\"reference internal\" href=\"#codec-objects\"><span class=\"std std-ref\">Codec Interface</span></a>). The functions or methods are expected to work in a stateless mode.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"codecs.CodecInfo.incrementalencoder\">\n<code>incrementalencoder</code> </dt> <dt id=\"codecs.CodecInfo.incrementaldecoder\">\n<code>incrementaldecoder</code> </dt> <dd>\n<p>Incremental encoder and decoder classes or factory functions. These have to provide the interface defined by the base classes <a class=\"reference internal\" href=\"#codecs.IncrementalEncoder\" title=\"codecs.IncrementalEncoder\"><code>IncrementalEncoder</code></a> and <a class=\"reference internal\" href=\"#codecs.IncrementalDecoder\" title=\"codecs.IncrementalDecoder\"><code>IncrementalDecoder</code></a>, respectively. Incremental codecs can maintain state.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"codecs.CodecInfo.streamwriter\">\n<code>streamwriter</code> </dt> <dt id=\"codecs.CodecInfo.streamreader\">\n<code>streamreader</code> </dt> <dd>\n<p>Stream writer and reader classes or factory functions. These have to provide the interface defined by the base classes <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> and <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a>, respectively. Stream codecs can maintain state.</p> </dd>\n</dl> </dd>\n</dl> <p>To simplify access to the various codec components, the module provides these additional functions which use <a class=\"reference internal\" href=\"#codecs.lookup\" title=\"codecs.lookup\"><code>lookup()</code></a> for the codec lookup:</p> <dl class=\"function\"> <dt id=\"codecs.getencoder\">\n<code>codecs.getencoder(encoding)</code> </dt> <dd>\n<p>Look up the codec for the given encoding and return its encoder function.</p> <p>Raises a <a class=\"reference internal\" href=\"exceptions#LookupError\" title=\"LookupError\"><code>LookupError</code></a> in case the encoding cannot be found.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.getdecoder\">\n<code>codecs.getdecoder(encoding)</code> </dt> <dd>\n<p>Look up the codec for the given encoding and return its decoder function.</p> <p>Raises a <a class=\"reference internal\" href=\"exceptions#LookupError\" title=\"LookupError\"><code>LookupError</code></a> in case the encoding cannot be found.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.getincrementalencoder\">\n<code>codecs.getincrementalencoder(encoding)</code> </dt> <dd>\n<p>Look up the codec for the given encoding and return its incremental encoder class or factory function.</p> <p>Raises a <a class=\"reference internal\" href=\"exceptions#LookupError\" title=\"LookupError\"><code>LookupError</code></a> in case the encoding cannot be found or the codec doesn’t support an incremental encoder.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.getincrementaldecoder\">\n<code>codecs.getincrementaldecoder(encoding)</code> </dt> <dd>\n<p>Look up the codec for the given encoding and return its incremental decoder class or factory function.</p> <p>Raises a <a class=\"reference internal\" href=\"exceptions#LookupError\" title=\"LookupError\"><code>LookupError</code></a> in case the encoding cannot be found or the codec doesn’t support an incremental decoder.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.getreader\">\n<code>codecs.getreader(encoding)</code> </dt> <dd>\n<p>Look up the codec for the given encoding and return its <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> class or factory function.</p> <p>Raises a <a class=\"reference internal\" href=\"exceptions#LookupError\" title=\"LookupError\"><code>LookupError</code></a> in case the encoding cannot be found.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.getwriter\">\n<code>codecs.getwriter(encoding)</code> </dt> <dd>\n<p>Look up the codec for the given encoding and return its <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> class or factory function.</p> <p>Raises a <a class=\"reference internal\" href=\"exceptions#LookupError\" title=\"LookupError\"><code>LookupError</code></a> in case the encoding cannot be found.</p> </dd>\n</dl> <p>Custom codecs are made available by registering a suitable codec search function:</p> <dl class=\"function\"> <dt id=\"codecs.register\">\n<code>codecs.register(search_function)</code> </dt> <dd>\n<p>Register a codec search function. Search functions are expected to take one argument, being the encoding name in all lower case letters with hyphens and spaces converted to underscores, and return a <a class=\"reference internal\" href=\"#codecs.CodecInfo\" title=\"codecs.CodecInfo\"><code>CodecInfo</code></a> object. In case a search function cannot find a given encoding, it should return <code>None</code>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.9: </span>Hyphens and spaces are converted to underscore.</p> </div> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>Search function registration is not currently reversible, which may cause problems in some cases, such as unit testing or module reloading.</p> </div> </dd>\n</dl> <p>While the builtin <a class=\"reference internal\" href=\"functions#open\" title=\"open\"><code>open()</code></a> and the associated <a class=\"reference internal\" href=\"io#module-io\" title=\"io: Core tools for working with streams.\"><code>io</code></a> module are the recommended approach for working with encoded text files, this module provides additional utility functions and classes that allow the use of a wider range of codecs when working with binary files:</p> <dl class=\"function\"> <dt id=\"codecs.open\">\n<code>codecs.open(filename, mode='r', encoding=None, errors='strict', buffering=-1)</code> </dt> <dd>\n<p>Open an encoded file using the given <em>mode</em> and return an instance of <a class=\"reference internal\" href=\"#codecs.StreamReaderWriter\" title=\"codecs.StreamReaderWriter\"><code>StreamReaderWriter</code></a>, providing transparent encoding/decoding. The default file mode is <code>'r'</code>, meaning to open the file in read mode.</p> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>Underlying encoded files are always opened in binary mode. No automatic conversion of <code>'\\n'</code> is done on reading and writing. The <em>mode</em> argument may be any binary mode acceptable to the built-in <a class=\"reference internal\" href=\"functions#open\" title=\"open\"><code>open()</code></a> function; the <code>'b'</code> is automatically added.</p> </div> <p><em>encoding</em> specifies the encoding which is to be used for the file. Any encoding that encodes to and decodes from bytes is allowed, and the data types supported by the file methods depend on the codec used.</p> <p><em>errors</em> may be given to define the error handling. It defaults to <code>'strict'</code> which causes a <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> to be raised in case an encoding error occurs.</p> <p><em>buffering</em> has the same meaning as for the built-in <a class=\"reference internal\" href=\"functions#open\" title=\"open\"><code>open()</code></a> function. It defaults to -1 which means that the default buffer size will be used.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.EncodedFile\">\n<code>codecs.EncodedFile(file, data_encoding, file_encoding=None, errors='strict')</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#codecs.StreamRecoder\" title=\"codecs.StreamRecoder\"><code>StreamRecoder</code></a> instance, a wrapped version of <em>file</em> which provides transparent transcoding. The original file is closed when the wrapped version is closed.</p> <p>Data written to the wrapped file is decoded according to the given <em>data_encoding</em> and then written to the original file as bytes using <em>file_encoding</em>. Bytes read from the original file are decoded according to <em>file_encoding</em>, and the result is encoded using <em>data_encoding</em>.</p> <p>If <em>file_encoding</em> is not given, it defaults to <em>data_encoding</em>.</p> <p><em>errors</em> may be given to define the error handling. It defaults to <code>'strict'</code>, which causes <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> to be raised in case an encoding error occurs.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.iterencode\">\n<code>codecs.iterencode(iterator, encoding, errors='strict', **kwargs)</code> </dt> <dd>\n<p>Uses an incremental encoder to iteratively encode the input provided by <em>iterator</em>. This function is a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generator\"><span class=\"xref std std-term\">generator</span></a>. The <em>errors</em> argument (as well as any other keyword argument) is passed through to the incremental encoder.</p> <p>This function requires that the codec accept text <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a> objects to encode. Therefore it does not support bytes-to-bytes encoders such as <code>base64_codec</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.iterdecode\">\n<code>codecs.iterdecode(iterator, encoding, errors='strict', **kwargs)</code> </dt> <dd>\n<p>Uses an incremental decoder to iteratively decode the input provided by <em>iterator</em>. This function is a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-generator\"><span class=\"xref std std-term\">generator</span></a>. The <em>errors</em> argument (as well as any other keyword argument) is passed through to the incremental decoder.</p> <p>This function requires that the codec accept <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> objects to decode. Therefore it does not support text-to-text encoders such as <code>rot_13</code>, although <code>rot_13</code> may be used equivalently with <a class=\"reference internal\" href=\"#codecs.iterencode\" title=\"codecs.iterencode\"><code>iterencode()</code></a>.</p> </dd>\n</dl> <p>The module also provides the following constants which are useful for reading and writing to platform dependent files:</p> <dl class=\"data\"> <dt id=\"codecs.BOM\">\n<code>codecs.BOM</code> </dt> <dt id=\"codecs.BOM_BE\">\n<code>codecs.BOM_BE</code> </dt> <dt id=\"codecs.BOM_LE\">\n<code>codecs.BOM_LE</code> </dt> <dt id=\"codecs.BOM_UTF8\">\n<code>codecs.BOM_UTF8</code> </dt> <dt id=\"codecs.BOM_UTF16\">\n<code>codecs.BOM_UTF16</code> </dt> <dt id=\"codecs.BOM_UTF16_BE\">\n<code>codecs.BOM_UTF16_BE</code> </dt> <dt id=\"codecs.BOM_UTF16_LE\">\n<code>codecs.BOM_UTF16_LE</code> </dt> <dt id=\"codecs.BOM_UTF32\">\n<code>codecs.BOM_UTF32</code> </dt> <dt id=\"codecs.BOM_UTF32_BE\">\n<code>codecs.BOM_UTF32_BE</code> </dt> <dt id=\"codecs.BOM_UTF32_LE\">\n<code>codecs.BOM_UTF32_LE</code> </dt> <dd>\n<p>These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings. They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature. <a class=\"reference internal\" href=\"#codecs.BOM_UTF16\" title=\"codecs.BOM_UTF16\"><code>BOM_UTF16</code></a> is either <a class=\"reference internal\" href=\"#codecs.BOM_UTF16_BE\" title=\"codecs.BOM_UTF16_BE\"><code>BOM_UTF16_BE</code></a> or <a class=\"reference internal\" href=\"#codecs.BOM_UTF16_LE\" title=\"codecs.BOM_UTF16_LE\"><code>BOM_UTF16_LE</code></a> depending on the platform’s native byte order, <a class=\"reference internal\" href=\"#codecs.BOM\" title=\"codecs.BOM\"><code>BOM</code></a> is an alias for <a class=\"reference internal\" href=\"#codecs.BOM_UTF16\" title=\"codecs.BOM_UTF16\"><code>BOM_UTF16</code></a>, <a class=\"reference internal\" href=\"#codecs.BOM_LE\" title=\"codecs.BOM_LE\"><code>BOM_LE</code></a> for <a class=\"reference internal\" href=\"#codecs.BOM_UTF16_LE\" title=\"codecs.BOM_UTF16_LE\"><code>BOM_UTF16_LE</code></a> and <a class=\"reference internal\" href=\"#codecs.BOM_BE\" title=\"codecs.BOM_BE\"><code>BOM_BE</code></a> for <a class=\"reference internal\" href=\"#codecs.BOM_UTF16_BE\" title=\"codecs.BOM_UTF16_BE\"><code>BOM_UTF16_BE</code></a>. The others represent the BOM in UTF-8 and UTF-32 encodings.</p> </dd>\n</dl>  <h2 id=\"id1\">Codec Base Classes</h2> <p id=\"codec-base-classes\">The <a class=\"reference internal\" href=\"#module-codecs\" title=\"codecs: Encode and decode data and streams.\"><code>codecs</code></a> module defines a set of base classes which define the interfaces for working with codec objects, and can also be used as the basis for custom codec implementations.</p> <p>Each codec has to define four interfaces to make it usable as codec in Python: stateless encoder, stateless decoder, stream reader and stream writer. The stream reader and writers typically reuse the stateless encoder/decoder to implement the file protocols. Codec authors also need to define how the codec will handle encoding and decoding errors.</p>  <h3 id=\"id2\">Error Handlers</h3> <p id=\"error-handlers\">To simplify and standardize error handling, codecs may implement different error handling schemes by accepting the <em>errors</em> string argument. The following string values are defined and implemented by all standard Python codecs:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Value</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'strict'</code></p></td> <td><p>Raise <a class=\"reference internal\" href=\"exceptions#UnicodeError\" title=\"UnicodeError\"><code>UnicodeError</code></a> (or a subclass); this is the default. Implemented in <a class=\"reference internal\" href=\"#codecs.strict_errors\" title=\"codecs.strict_errors\"><code>strict_errors()</code></a>.</p></td> </tr> <tr>\n<td><p><code>'ignore'</code></p></td> <td><p>Ignore the malformed data and continue without further notice. Implemented in <a class=\"reference internal\" href=\"#codecs.ignore_errors\" title=\"codecs.ignore_errors\"><code>ignore_errors()</code></a>.</p></td> </tr>  </table> <p>The following error handlers are only applicable to <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encodings</span></a>:</p> <table class=\"docutils align-default\" id=\"index-1\">  <thead> <tr>\n<th class=\"head\"><p>Value</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'replace'</code></p></td> <td><p>Replace with a suitable replacement marker; Python will use the official <code>U+FFFD</code> REPLACEMENT CHARACTER for the built-in codecs on decoding, and ‘?’ on encoding. Implemented in <a class=\"reference internal\" href=\"#codecs.replace_errors\" title=\"codecs.replace_errors\"><code>replace_errors()</code></a>.</p></td> </tr> <tr>\n<td><p><code>'xmlcharrefreplace'</code></p></td> <td><p>Replace with the appropriate XML character reference (only for encoding). Implemented in <a class=\"reference internal\" href=\"#codecs.xmlcharrefreplace_errors\" title=\"codecs.xmlcharrefreplace_errors\"><code>xmlcharrefreplace_errors()</code></a>.</p></td> </tr> <tr>\n<td><p><code>'backslashreplace'</code></p></td> <td><p>Replace with backslashed escape sequences. Implemented in <a class=\"reference internal\" href=\"#codecs.backslashreplace_errors\" title=\"codecs.backslashreplace_errors\"><code>backslashreplace_errors()</code></a>.</p></td> </tr> <tr>\n<td><p><code>'namereplace'</code></p></td> <td><p>Replace with <code>\\N{...}</code> escape sequences (only for encoding). Implemented in <a class=\"reference internal\" href=\"#codecs.namereplace_errors\" title=\"codecs.namereplace_errors\"><code>namereplace_errors()</code></a>.</p></td> </tr> <tr>\n<td><p><code>'surrogateescape'</code></p></td> <td><p>On decoding, replace byte with individual surrogate code ranging from <code>U+DC80</code> to <code>U+DCFF</code>. This code will then be turned back into the same byte when the <code>'surrogateescape'</code> error handler is used when encoding the data. (See <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0383\" id=\"index-2\"><strong>PEP 383</strong></a> for more.)</p></td> </tr>  </table> <p>In addition, the following error handler is specific to the given codecs:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Value</p></th> <th class=\"head\"><p>Codecs</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p><code>'surrogatepass'</code></p></td> <td><p>utf-8, utf-16, utf-32, utf-16-be, utf-16-le, utf-32-be, utf-32-le</p></td> <td><p>Allow encoding and decoding of surrogate codes. These codecs normally treat the presence of surrogates as an error.</p></td> </tr>  </table> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.1: </span>The <code>'surrogateescape'</code> and <code>'surrogatepass'</code> error handlers.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span>The <code>'surrogatepass'</code> error handlers now works with utf-16* and utf-32* codecs.</p> </div> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5: </span>The <code>'namereplace'</code> error handler.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>The <code>'backslashreplace'</code> error handlers now works with decoding and translating.</p> </div> <p>The set of allowed values can be extended by registering a new named error handler:</p> <dl class=\"function\"> <dt id=\"codecs.register_error\">\n<code>codecs.register_error(name, error_handler)</code> </dt> <dd>\n<p>Register the error handling function <em>error_handler</em> under the name <em>name</em>. The <em>error_handler</em> argument will be called during encoding and decoding in case of an error, when <em>name</em> is specified as the errors parameter.</p> <p>For encoding, <em>error_handler</em> will be called with a <a class=\"reference internal\" href=\"exceptions#UnicodeEncodeError\" title=\"UnicodeEncodeError\"><code>UnicodeEncodeError</code></a> instance, which contains information about the location of the error. The error handler must either raise this or a different exception, or return a tuple with a replacement for the unencodable part of the input and a position where encoding should continue. The replacement may be either <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a> or <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a>. If the replacement is bytes, the encoder will simply copy them into the output buffer. If the replacement is a string, the encoder will encode the replacement. Encoding continues on original input at the specified position. Negative position values will be treated as being relative to the end of the input string. If the resulting position is out of bound an <a class=\"reference internal\" href=\"exceptions#IndexError\" title=\"IndexError\"><code>IndexError</code></a> will be raised.</p> <p>Decoding and translating works similarly, except <a class=\"reference internal\" href=\"exceptions#UnicodeDecodeError\" title=\"UnicodeDecodeError\"><code>UnicodeDecodeError</code></a> or <a class=\"reference internal\" href=\"exceptions#UnicodeTranslateError\" title=\"UnicodeTranslateError\"><code>UnicodeTranslateError</code></a> will be passed to the handler and that the replacement from the error handler will be put into the output directly.</p> </dd>\n</dl> <p>Previously registered error handlers (including the standard error handlers) can be looked up by name:</p> <dl class=\"function\"> <dt id=\"codecs.lookup_error\">\n<code>codecs.lookup_error(name)</code> </dt> <dd>\n<p>Return the error handler previously registered under the name <em>name</em>.</p> <p>Raises a <a class=\"reference internal\" href=\"exceptions#LookupError\" title=\"LookupError\"><code>LookupError</code></a> in case the handler cannot be found.</p> </dd>\n</dl> <p>The following standard error handlers are also made available as module level functions:</p> <dl class=\"function\"> <dt id=\"codecs.strict_errors\">\n<code>codecs.strict_errors(exception)</code> </dt> <dd>\n<p>Implements the <code>'strict'</code> error handling: each encoding or decoding error raises a <a class=\"reference internal\" href=\"exceptions#UnicodeError\" title=\"UnicodeError\"><code>UnicodeError</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.replace_errors\">\n<code>codecs.replace_errors(exception)</code> </dt> <dd>\n<p>Implements the <code>'replace'</code> error handling (for <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encodings</span></a> only): substitutes <code>'?'</code> for encoding errors (to be encoded by the codec), and <code>'\\ufffd'</code> (the Unicode replacement character) for decoding errors.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.ignore_errors\">\n<code>codecs.ignore_errors(exception)</code> </dt> <dd>\n<p>Implements the <code>'ignore'</code> error handling: malformed data is ignored and encoding or decoding is continued without further notice.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.xmlcharrefreplace_errors\">\n<code>codecs.xmlcharrefreplace_errors(exception)</code> </dt> <dd>\n<p>Implements the <code>'xmlcharrefreplace'</code> error handling (for encoding with <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encodings</span></a> only): the unencodable character is replaced by an appropriate XML character reference.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.backslashreplace_errors\">\n<code>codecs.backslashreplace_errors(exception)</code> </dt> <dd>\n<p>Implements the <code>'backslashreplace'</code> error handling (for <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encodings</span></a> only): malformed data is replaced by a backslashed escape sequence.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"codecs.namereplace_errors\">\n<code>codecs.namereplace_errors(exception)</code> </dt> <dd>\n<p>Implements the <code>'namereplace'</code> error handling (for encoding with <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encodings</span></a> only): the unencodable character is replaced by a <code>\\N{...}</code> escape sequence.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5.</span></p> </div> </dd>\n</dl>   <h3 id=\"codec-objects\">Stateless Encoding and Decoding</h3> <p id=\"stateless-encoding-and-decoding\">The base <code>Codec</code> class defines these methods which also define the function interfaces of the stateless encoder and decoder:</p> <dl class=\"method\"> <dt id=\"codecs.Codec.encode\">\n<code>Codec.encode(input[, errors])</code> </dt> <dd>\n<p>Encodes the object <em>input</em> and returns a tuple (output object, length consumed). For instance, <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encoding</span></a> converts a string object to a bytes object using a particular character set encoding (e.g., <code>cp1252</code> or <code>iso-8859-1</code>).</p> <p>The <em>errors</em> argument defines the error handling to apply. It defaults to <code>'strict'</code> handling.</p> <p>The method may not store state in the <code>Codec</code> instance. Use <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> for codecs which have to keep state in order to make encoding efficient.</p> <p>The encoder must be able to handle zero length input and return an empty object of the output object type in this situation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.Codec.decode\">\n<code>Codec.decode(input[, errors])</code> </dt> <dd>\n<p>Decodes the object <em>input</em> and returns a tuple (output object, length consumed). For instance, for a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encoding</span></a>, decoding converts a bytes object encoded using a particular character set encoding to a string object.</p> <p>For text encodings and bytes-to-bytes codecs, <em>input</em> must be a bytes object or one which provides the read-only buffer interface – for example, buffer objects and memory mapped files.</p> <p>The <em>errors</em> argument defines the error handling to apply. It defaults to <code>'strict'</code> handling.</p> <p>The method may not store state in the <code>Codec</code> instance. Use <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> for codecs which have to keep state in order to make decoding efficient.</p> <p>The decoder must be able to handle zero length input and return an empty object of the output object type in this situation.</p> </dd>\n</dl>   <h3 id=\"incremental-encoding-and-decoding\">Incremental Encoding and Decoding</h3> <p>The <a class=\"reference internal\" href=\"#codecs.IncrementalEncoder\" title=\"codecs.IncrementalEncoder\"><code>IncrementalEncoder</code></a> and <a class=\"reference internal\" href=\"#codecs.IncrementalDecoder\" title=\"codecs.IncrementalDecoder\"><code>IncrementalDecoder</code></a> classes provide the basic interface for incremental encoding and decoding. Encoding/decoding the input isn’t done with one call to the stateless encoder/decoder function, but with multiple calls to the <a class=\"reference internal\" href=\"#codecs.IncrementalEncoder.encode\" title=\"codecs.IncrementalEncoder.encode\"><code>encode()</code></a>/<a class=\"reference internal\" href=\"#codecs.IncrementalDecoder.decode\" title=\"codecs.IncrementalDecoder.decode\"><code>decode()</code></a> method of the incremental encoder/decoder. The incremental encoder/decoder keeps track of the encoding/decoding process during method calls.</p> <p>The joined output of calls to the <a class=\"reference internal\" href=\"#codecs.IncrementalEncoder.encode\" title=\"codecs.IncrementalEncoder.encode\"><code>encode()</code></a>/<a class=\"reference internal\" href=\"#codecs.IncrementalDecoder.decode\" title=\"codecs.IncrementalDecoder.decode\"><code>decode()</code></a> method is the same as if all the single inputs were joined into one, and this input was encoded/decoded with the stateless encoder/decoder.</p>  <h4 id=\"incremental-encoder-objects\">IncrementalEncoder Objects</h4> <p id=\"incrementalencoder-objects\">The <a class=\"reference internal\" href=\"#codecs.IncrementalEncoder\" title=\"codecs.IncrementalEncoder\"><code>IncrementalEncoder</code></a> class is used for encoding an input in multiple steps. It defines the following methods which every incremental encoder must define in order to be compatible with the Python codec registry.</p> <dl class=\"class\"> <dt id=\"codecs.IncrementalEncoder\">\n<code>class codecs.IncrementalEncoder(errors='strict')</code> </dt> <dd>\n<p>Constructor for an <a class=\"reference internal\" href=\"#codecs.IncrementalEncoder\" title=\"codecs.IncrementalEncoder\"><code>IncrementalEncoder</code></a> instance.</p> <p>All incremental encoders must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</p> <p>The <a class=\"reference internal\" href=\"#codecs.IncrementalEncoder\" title=\"codecs.IncrementalEncoder\"><code>IncrementalEncoder</code></a> may implement different error handling schemes by providing the <em>errors</em> keyword argument. See <a class=\"reference internal\" href=\"#error-handlers\"><span class=\"std std-ref\">Error Handlers</span></a> for possible values.</p> <p>The <em>errors</em> argument will be assigned to an attribute of the same name. Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the <a class=\"reference internal\" href=\"#codecs.IncrementalEncoder\" title=\"codecs.IncrementalEncoder\"><code>IncrementalEncoder</code></a> object.</p> <dl class=\"method\"> <dt id=\"codecs.IncrementalEncoder.encode\">\n<code>encode(object[, final])</code> </dt> <dd>\n<p>Encodes <em>object</em> (taking the current state of the encoder into account) and returns the resulting encoded object. If this is the last call to <a class=\"reference internal\" href=\"#codecs.encode\" title=\"codecs.encode\"><code>encode()</code></a> <em>final</em> must be true (the default is false).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.IncrementalEncoder.reset\">\n<code>reset()</code> </dt> <dd>\n<p>Reset the encoder to the initial state. The output is discarded: call <code>.encode(object, final=True)</code>, passing an empty byte or text string if necessary, to reset the encoder and to get the output.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.IncrementalEncoder.getstate\">\n<code>getstate()</code> </dt> <dd>\n<p>Return the current state of the encoder which must be an integer. The implementation should make sure that <code>0</code> is the most common state. (States that are more complicated than integers can be converted into an integer by marshaling/pickling the state and encoding the bytes of the resulting string into an integer.)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.IncrementalEncoder.setstate\">\n<code>setstate(state)</code> </dt> <dd>\n<p>Set the state of the encoder to <em>state</em>. <em>state</em> must be an encoder state returned by <a class=\"reference internal\" href=\"#codecs.IncrementalEncoder.getstate\" title=\"codecs.IncrementalEncoder.getstate\"><code>getstate()</code></a>.</p> </dd>\n</dl> </dd>\n</dl>   <h4 id=\"incremental-decoder-objects\">IncrementalDecoder Objects</h4> <p id=\"incrementaldecoder-objects\">The <a class=\"reference internal\" href=\"#codecs.IncrementalDecoder\" title=\"codecs.IncrementalDecoder\"><code>IncrementalDecoder</code></a> class is used for decoding an input in multiple steps. It defines the following methods which every incremental decoder must define in order to be compatible with the Python codec registry.</p> <dl class=\"class\"> <dt id=\"codecs.IncrementalDecoder\">\n<code>class codecs.IncrementalDecoder(errors='strict')</code> </dt> <dd>\n<p>Constructor for an <a class=\"reference internal\" href=\"#codecs.IncrementalDecoder\" title=\"codecs.IncrementalDecoder\"><code>IncrementalDecoder</code></a> instance.</p> <p>All incremental decoders must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</p> <p>The <a class=\"reference internal\" href=\"#codecs.IncrementalDecoder\" title=\"codecs.IncrementalDecoder\"><code>IncrementalDecoder</code></a> may implement different error handling schemes by providing the <em>errors</em> keyword argument. See <a class=\"reference internal\" href=\"#error-handlers\"><span class=\"std std-ref\">Error Handlers</span></a> for possible values.</p> <p>The <em>errors</em> argument will be assigned to an attribute of the same name. Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the <a class=\"reference internal\" href=\"#codecs.IncrementalDecoder\" title=\"codecs.IncrementalDecoder\"><code>IncrementalDecoder</code></a> object.</p> <dl class=\"method\"> <dt id=\"codecs.IncrementalDecoder.decode\">\n<code>decode(object[, final])</code> </dt> <dd>\n<p>Decodes <em>object</em> (taking the current state of the decoder into account) and returns the resulting decoded object. If this is the last call to <a class=\"reference internal\" href=\"#codecs.decode\" title=\"codecs.decode\"><code>decode()</code></a> <em>final</em> must be true (the default is false). If <em>final</em> is true the decoder must decode the input completely and must flush all buffers. If this isn’t possible (e.g. because of incomplete byte sequences at the end of the input) it must initiate error handling just like in the stateless case (which might raise an exception).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.IncrementalDecoder.reset\">\n<code>reset()</code> </dt> <dd>\n<p>Reset the decoder to the initial state.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.IncrementalDecoder.getstate\">\n<code>getstate()</code> </dt> <dd>\n<p>Return the current state of the decoder. This must be a tuple with two items, the first must be the buffer containing the still undecoded input. The second must be an integer and can be additional state info. (The implementation should make sure that <code>0</code> is the most common additional state info.) If this additional state info is <code>0</code> it must be possible to set the decoder to the state which has no input buffered and <code>0</code> as the additional state info, so that feeding the previously buffered input to the decoder returns it to the previous state without producing any output. (Additional state info that is more complicated than integers can be converted into an integer by marshaling/pickling the info and encoding the bytes of the resulting string into an integer.)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.IncrementalDecoder.setstate\">\n<code>setstate(state)</code> </dt> <dd>\n<p>Set the state of the decoder to <em>state</em>. <em>state</em> must be a decoder state returned by <a class=\"reference internal\" href=\"#codecs.IncrementalDecoder.getstate\" title=\"codecs.IncrementalDecoder.getstate\"><code>getstate()</code></a>.</p> </dd>\n</dl> </dd>\n</dl>    <h3 id=\"stream-encoding-and-decoding\">Stream Encoding and Decoding</h3> <p>The <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> and <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> classes provide generic working interfaces which can be used to implement new encoding submodules very easily. See <code>encodings.utf_8</code> for an example of how this is done.</p>  <h4 id=\"stream-writer-objects\">StreamWriter Objects</h4> <p id=\"streamwriter-objects\">The <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> class is a subclass of <code>Codec</code> and defines the following methods which every stream writer must define in order to be compatible with the Python codec registry.</p> <dl class=\"class\"> <dt id=\"codecs.StreamWriter\">\n<code>class codecs.StreamWriter(stream, errors='strict')</code> </dt> <dd>\n<p>Constructor for a <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> instance.</p> <p>All stream writers must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</p> <p>The <em>stream</em> argument must be a file-like object open for writing text or binary data, as appropriate for the specific codec.</p> <p>The <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> may implement different error handling schemes by providing the <em>errors</em> keyword argument. See <a class=\"reference internal\" href=\"#error-handlers\"><span class=\"std std-ref\">Error Handlers</span></a> for the standard error handlers the underlying stream codec may support.</p> <p>The <em>errors</em> argument will be assigned to an attribute of the same name. Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> object.</p> <dl class=\"method\"> <dt id=\"codecs.StreamWriter.write\">\n<code>write(object)</code> </dt> <dd>\n<p>Writes the object’s contents encoded to the stream.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.StreamWriter.writelines\">\n<code>writelines(list)</code> </dt> <dd>\n<p>Writes the concatenated list of strings to the stream (possibly by reusing the <a class=\"reference internal\" href=\"#codecs.StreamWriter.write\" title=\"codecs.StreamWriter.write\"><code>write()</code></a> method). The standard bytes-to-bytes codecs do not support this method.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.StreamWriter.reset\">\n<code>reset()</code> </dt> <dd>\n<p>Resets the codec buffers used for keeping internal state.</p> <p>Calling this method should ensure that the data on the output is put into a clean state that allows appending of new fresh data without having to rescan the whole stream to recover state.</p> </dd>\n</dl> </dd>\n</dl> <p>In addition to the above methods, the <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> must also inherit all other methods and attributes from the underlying stream.</p>   <h4 id=\"stream-reader-objects\">StreamReader Objects</h4> <p id=\"streamreader-objects\">The <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> class is a subclass of <code>Codec</code> and defines the following methods which every stream reader must define in order to be compatible with the Python codec registry.</p> <dl class=\"class\"> <dt id=\"codecs.StreamReader\">\n<code>class codecs.StreamReader(stream, errors='strict')</code> </dt> <dd>\n<p>Constructor for a <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> instance.</p> <p>All stream readers must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</p> <p>The <em>stream</em> argument must be a file-like object open for reading text or binary data, as appropriate for the specific codec.</p> <p>The <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> may implement different error handling schemes by providing the <em>errors</em> keyword argument. See <a class=\"reference internal\" href=\"#error-handlers\"><span class=\"std std-ref\">Error Handlers</span></a> for the standard error handlers the underlying stream codec may support.</p> <p>The <em>errors</em> argument will be assigned to an attribute of the same name. Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> object.</p> <p>The set of allowed values for the <em>errors</em> argument can be extended with <a class=\"reference internal\" href=\"#codecs.register_error\" title=\"codecs.register_error\"><code>register_error()</code></a>.</p> <dl class=\"method\"> <dt id=\"codecs.StreamReader.read\">\n<code>read([size[, chars[, firstline]]])</code> </dt> <dd>\n<p>Decodes data from the stream and returns the resulting object.</p> <p>The <em>chars</em> argument indicates the number of decoded code points or bytes to return. The <a class=\"reference internal\" href=\"#codecs.StreamReader.read\" title=\"codecs.StreamReader.read\"><code>read()</code></a> method will never return more data than requested, but it might return less, if there is not enough available.</p> <p>The <em>size</em> argument indicates the approximate maximum number of encoded bytes or code points to read for decoding. The decoder can modify this setting as appropriate. The default value -1 indicates to read and decode as much as possible. This parameter is intended to prevent having to decode huge files in one step.</p> <p>The <em>firstline</em> flag indicates that it would be sufficient to only return the first line, if there are decoding errors on later lines.</p> <p>The method should use a greedy read strategy meaning that it should read as much data as is allowed within the definition of the encoding and the given size, e.g. if optional encoding endings or state markers are available on the stream, these should be read too.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.StreamReader.readline\">\n<code>readline([size[, keepends]])</code> </dt> <dd>\n<p>Read one line from the input stream and return the decoded data.</p> <p><em>size</em>, if given, is passed as size argument to the stream’s <a class=\"reference internal\" href=\"#codecs.StreamReader.read\" title=\"codecs.StreamReader.read\"><code>read()</code></a> method.</p> <p>If <em>keepends</em> is false line-endings will be stripped from the lines returned.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.StreamReader.readlines\">\n<code>readlines([sizehint[, keepends]])</code> </dt> <dd>\n<p>Read all lines available on the input stream and return them as a list of lines.</p> <p>Line-endings are implemented using the codec’s <a class=\"reference internal\" href=\"#codecs.decode\" title=\"codecs.decode\"><code>decode()</code></a> method and are included in the list entries if <em>keepends</em> is true.</p> <p><em>sizehint</em>, if given, is passed as the <em>size</em> argument to the stream’s <a class=\"reference internal\" href=\"#codecs.StreamReader.read\" title=\"codecs.StreamReader.read\"><code>read()</code></a> method.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"codecs.StreamReader.reset\">\n<code>reset()</code> </dt> <dd>\n<p>Resets the codec buffers used for keeping internal state.</p> <p>Note that no stream repositioning should take place. This method is primarily intended to be able to recover from decoding errors.</p> </dd>\n</dl> </dd>\n</dl> <p>In addition to the above methods, the <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> must also inherit all other methods and attributes from the underlying stream.</p>   <h4 id=\"stream-reader-writer\">StreamReaderWriter Objects</h4> <p id=\"streamreaderwriter-objects\">The <a class=\"reference internal\" href=\"#codecs.StreamReaderWriter\" title=\"codecs.StreamReaderWriter\"><code>StreamReaderWriter</code></a> is a convenience class that allows wrapping streams which work in both read and write modes.</p> <p>The design is such that one can use the factory functions returned by the <a class=\"reference internal\" href=\"#codecs.lookup\" title=\"codecs.lookup\"><code>lookup()</code></a> function to construct the instance.</p> <dl class=\"class\"> <dt id=\"codecs.StreamReaderWriter\">\n<code>class codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')</code> </dt> <dd>\n<p>Creates a <a class=\"reference internal\" href=\"#codecs.StreamReaderWriter\" title=\"codecs.StreamReaderWriter\"><code>StreamReaderWriter</code></a> instance. <em>stream</em> must be a file-like object. <em>Reader</em> and <em>Writer</em> must be factory functions or classes providing the <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> and <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> interface resp. Error handling is done in the same way as defined for the stream readers and writers.</p> </dd>\n</dl> <p><a class=\"reference internal\" href=\"#codecs.StreamReaderWriter\" title=\"codecs.StreamReaderWriter\"><code>StreamReaderWriter</code></a> instances define the combined interfaces of <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> and <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> classes. They inherit all other methods and attributes from the underlying stream.</p>   <h4 id=\"stream-recoder-objects\">StreamRecoder Objects</h4> <p id=\"streamrecoder-objects\">The <a class=\"reference internal\" href=\"#codecs.StreamRecoder\" title=\"codecs.StreamRecoder\"><code>StreamRecoder</code></a> translates data from one encoding to another, which is sometimes useful when dealing with different encoding environments.</p> <p>The design is such that one can use the factory functions returned by the <a class=\"reference internal\" href=\"#codecs.lookup\" title=\"codecs.lookup\"><code>lookup()</code></a> function to construct the instance.</p> <dl class=\"class\"> <dt id=\"codecs.StreamRecoder\">\n<code>class codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict')</code> </dt> <dd>\n<p>Creates a <a class=\"reference internal\" href=\"#codecs.StreamRecoder\" title=\"codecs.StreamRecoder\"><code>StreamRecoder</code></a> instance which implements a two-way conversion: <em>encode</em> and <em>decode</em> work on the frontend — the data visible to code calling <code>read()</code> and <code>write()</code>, while <em>Reader</em> and <em>Writer</em> work on the backend — the data in <em>stream</em>.</p> <p>You can use these objects to do transparent transcodings, e.g., from Latin-1 to UTF-8 and back.</p> <p>The <em>stream</em> argument must be a file-like object.</p> <p>The <em>encode</em> and <em>decode</em> arguments must adhere to the <code>Codec</code> interface. <em>Reader</em> and <em>Writer</em> must be factory functions or classes providing objects of the <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> and <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> interface respectively.</p> <p>Error handling is done in the same way as defined for the stream readers and writers.</p> </dd>\n</dl> <p><a class=\"reference internal\" href=\"#codecs.StreamRecoder\" title=\"codecs.StreamRecoder\"><code>StreamRecoder</code></a> instances define the combined interfaces of <a class=\"reference internal\" href=\"#codecs.StreamReader\" title=\"codecs.StreamReader\"><code>StreamReader</code></a> and <a class=\"reference internal\" href=\"#codecs.StreamWriter\" title=\"codecs.StreamWriter\"><code>StreamWriter</code></a> classes. They inherit all other methods and attributes from the underlying stream.</p>     <h2 id=\"encodings-overview\">Encodings and Unicode</h2> <p id=\"encodings-and-unicode\">Strings are stored internally as sequences of code points in range <code>0x0</code>–<code>0x10FFFF</code>. (See <a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0393\" id=\"index-3\"><strong>PEP 393</strong></a> for more details about the implementation.) Once a string object is used outside of CPU and memory, endianness and how these arrays are stored as bytes become an issue. As with other codecs, serialising a string into a sequence of bytes is known as <em>encoding</em>, and recreating the string from the sequence of bytes is known as <em>decoding</em>. There are a variety of different text serialisation codecs, which are collectivity referred to as <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-text-encoding\"><span class=\"xref std std-term\">text encodings</span></a>.</p> <p>The simplest text encoding (called <code>'latin-1'</code> or <code>'iso-8859-1'</code>) maps the code points 0–255 to the bytes <code>0x0</code>–<code>0xff</code>, which means that a string object that contains code points above <code>U+00FF</code> can’t be encoded with this codec. Doing so will raise a <a class=\"reference internal\" href=\"exceptions#UnicodeEncodeError\" title=\"UnicodeEncodeError\"><code>UnicodeEncodeError</code></a> that looks like the following (although the details of the error message may differ): <code>UnicodeEncodeError: 'latin-1' codec can't encode character '\\u1234' in\nposition 3: ordinal not in range(256)</code>.</p> <p>There’s another group of encodings (the so called charmap encodings) that choose a different subset of all Unicode code points and how these code points are mapped to the bytes <code>0x0</code>–<code>0xff</code>. To see how this is done simply open e.g. <code>encodings/cp1252.py</code> (which is an encoding that is used primarily on Windows). There’s a string constant with 256 characters that shows you which character is mapped to which byte value.</p> <p>All of these encodings can only encode 256 of the 1114112 code points defined in Unicode. A simple and straightforward way that can store each Unicode code point, is to store each code point as four consecutive bytes. There are two possibilities: store the bytes in big endian or in little endian order. These two encodings are called <code>UTF-32-BE</code> and <code>UTF-32-LE</code> respectively. Their disadvantage is that if e.g. you use <code>UTF-32-BE</code> on a little endian machine you will always have to swap bytes on encoding and decoding. <code>UTF-32</code> avoids this problem: bytes will always be in natural endianness. When these bytes are read by a CPU with a different endianness, then bytes have to be swapped though. To be able to detect the endianness of a <code>UTF-16</code> or <code>UTF-32</code> byte sequence, there’s the so called BOM (“Byte Order Mark”). This is the Unicode character <code>U+FEFF</code>. This character can be prepended to every <code>UTF-16</code> or <code>UTF-32</code> byte sequence. The byte swapped version of this character (<code>0xFFFE</code>) is an illegal character that may not appear in a Unicode text. So when the first character in an <code>UTF-16</code> or <code>UTF-32</code> byte sequence appears to be a <code>U+FFFE</code> the bytes have to be swapped on decoding. Unfortunately the character <code>U+FEFF</code> had a second purpose as a <code>ZERO WIDTH NO-BREAK SPACE</code>: a character that has no width and doesn’t allow a word to be split. It can e.g. be used to give hints to a ligature algorithm. With Unicode 4.0 using <code>U+FEFF</code> as a <code>ZERO WIDTH NO-BREAK SPACE</code> has been deprecated (with <code>U+2060</code> (<code>WORD JOINER</code>) assuming this role). Nevertheless Unicode software still must be able to handle <code>U+FEFF</code> in both roles: as a BOM it’s a device to determine the storage layout of the encoded bytes, and vanishes once the byte sequence has been decoded into a string; as a <code>ZERO WIDTH\nNO-BREAK SPACE</code> it’s a normal character that will be decoded like any other.</p> <p>There’s another encoding that is able to encoding the full range of Unicode characters: UTF-8. UTF-8 is an 8-bit encoding, which means there are no issues with byte order in UTF-8. Each byte in a UTF-8 byte sequence consists of two parts: marker bits (the most significant bits) and payload bits. The marker bits are a sequence of zero to four <code>1</code> bits followed by a <code>0</code> bit. Unicode characters are encoded like this (with x being payload bits, which when concatenated give the Unicode character):</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Range</p></th> <th class=\"head\"><p>Encoding</p></th> </tr> </thead>  <tr>\n<td><p><code>U-00000000</code> … <code>U-0000007F</code></p></td> <td><p>0xxxxxxx</p></td> </tr> <tr>\n<td><p><code>U-00000080</code> … <code>U-000007FF</code></p></td> <td><p>110xxxxx 10xxxxxx</p></td> </tr> <tr>\n<td><p><code>U-00000800</code> … <code>U-0000FFFF</code></p></td> <td><p>1110xxxx 10xxxxxx 10xxxxxx</p></td> </tr> <tr>\n<td><p><code>U-00010000</code> … <code>U-0010FFFF</code></p></td> <td><p>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</p></td> </tr>  </table> <p>The least significant bit of the Unicode character is the rightmost x bit.</p> <p>As UTF-8 is an 8-bit encoding no BOM is required and any <code>U+FEFF</code> character in the decoded string (even if it’s the first character) is treated as a <code>ZERO\nWIDTH NO-BREAK SPACE</code>.</p> <p>Without external information it’s impossible to reliably determine which encoding was used for encoding a string. Each charmap encoding can decode any random byte sequence. However that’s not possible with UTF-8, as UTF-8 byte sequences have a structure that doesn’t allow arbitrary byte sequences. To increase the reliability with which a UTF-8 encoding can be detected, Microsoft invented a variant of UTF-8 (that Python 2.5 calls <code>\"utf-8-sig\"</code>) for its Notepad program: Before any of the Unicode characters is written to the file, a UTF-8 encoded BOM (which looks like this as a byte sequence: <code>0xef</code>, <code>0xbb</code>, <code>0xbf</code>) is written. As it’s rather improbable that any charmap encoded file starts with these byte values (which would e.g. map to</p>    <p>in iso-8859-1), this increases the probability that a <code>utf-8-sig</code> encoding can be correctly guessed from the byte sequence. So here the BOM is not used to be able to determine the byte order used for generating the byte sequence, but as a signature that helps in guessing the encoding. On encoding the utf-8-sig codec will write <code>0xef</code>, <code>0xbb</code>, <code>0xbf</code> as the first three bytes to the file. On decoding <code>utf-8-sig</code> will skip those three bytes if they appear as the first three bytes in the file. In UTF-8, the use of the BOM is discouraged and should generally be avoided.</p>   <h2 id=\"id3\">Standard Encodings</h2> <p id=\"standard-encodings\">Python comes with a number of codecs built-in, either implemented as C functions or with dictionaries as mapping tables. The following table lists the codecs by name, together with a few common aliases, and the languages for which the encoding is likely used. Neither the list of aliases nor the list of languages is meant to be exhaustive. Notice that spelling alternatives that only differ in case or use a hyphen instead of an underscore are also valid aliases; therefore, e.g. <code>'utf-8'</code> is a valid alias for the <code>'utf_8'</code> codec.</p> <div class=\"impl-detail compound\"> <p class=\"compound-first\"><strong>CPython implementation detail:</strong> Some common encodings can bypass the codecs lookup machinery to improve performance. These optimization opportunities are only recognized by CPython for a limited set of (case insensitive) aliases: utf-8, utf8, latin-1, latin1, iso-8859-1, iso8859-1, mbcs (Windows only), ascii, us-ascii, utf-16, utf16, utf-32, utf32, and the same using underscores instead of dashes. Using alternative aliases for these encodings may result in slower execution.</p> <div class=\"compound-last versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Optimization opportunity recognized for us-ascii.</p> </div> </div> <p>Many of the character sets support the same languages. They vary in individual characters (e.g. whether the EURO SIGN is supported or not), and in the assignment of characters to code positions. For the European languages in particular, the following variants typically exist:</p> <ul class=\"simple\"> <li>an ISO 8859 codeset</li> <li>a Microsoft Windows code page, which is typically derived from an 8859 codeset, but replaces control characters with additional graphic characters</li> <li>an IBM EBCDIC code page</li> <li>an IBM PC code page, which is ASCII compatible</li> </ul> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Codec</p></th> <th class=\"head\"><p>Aliases</p></th> <th class=\"head\"><p>Languages</p></th> </tr> </thead>  <tr>\n<td><p>ascii</p></td> <td><p>646, us-ascii</p></td> <td><p>English</p></td> </tr> <tr>\n<td><p>big5</p></td> <td><p>big5-tw, csbig5</p></td> <td><p>Traditional Chinese</p></td> </tr> <tr>\n<td><p>big5hkscs</p></td> <td><p>big5-hkscs, hkscs</p></td> <td><p>Traditional Chinese</p></td> </tr> <tr>\n<td><p>cp037</p></td> <td><p>IBM037, IBM039</p></td> <td><p>English</p></td> </tr> <tr>\n<td><p>cp273</p></td> <td><p>273, IBM273, csIBM273</p></td> <td>\n<p>German</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4.</span></p> </div> </td> </tr> <tr>\n<td><p>cp424</p></td> <td><p>EBCDIC-CP-HE, IBM424</p></td> <td><p>Hebrew</p></td> </tr> <tr>\n<td><p>cp437</p></td> <td><p>437, IBM437</p></td> <td><p>English</p></td> </tr> <tr>\n<td><p>cp500</p></td> <td><p>EBCDIC-CP-BE, EBCDIC-CP-CH, IBM500</p></td> <td><p>Western Europe</p></td> </tr> <tr>\n<td><p>cp720</p></td> <td></td> <td><p>Arabic</p></td> </tr> <tr>\n<td><p>cp737</p></td> <td></td> <td><p>Greek</p></td> </tr> <tr>\n<td><p>cp775</p></td> <td><p>IBM775</p></td> <td><p>Baltic languages</p></td> </tr> <tr>\n<td><p>cp850</p></td> <td><p>850, IBM850</p></td> <td><p>Western Europe</p></td> </tr> <tr>\n<td><p>cp852</p></td> <td><p>852, IBM852</p></td> <td><p>Central and Eastern Europe</p></td> </tr> <tr>\n<td><p>cp855</p></td> <td><p>855, IBM855</p></td> <td><p>Bulgarian, Byelorussian, Macedonian, Russian, Serbian</p></td> </tr> <tr>\n<td><p>cp856</p></td> <td></td> <td><p>Hebrew</p></td> </tr> <tr>\n<td><p>cp857</p></td> <td><p>857, IBM857</p></td> <td><p>Turkish</p></td> </tr> <tr>\n<td><p>cp858</p></td> <td><p>858, IBM858</p></td> <td><p>Western Europe</p></td> </tr> <tr>\n<td><p>cp860</p></td> <td><p>860, IBM860</p></td> <td><p>Portuguese</p></td> </tr> <tr>\n<td><p>cp861</p></td> <td><p>861, CP-IS, IBM861</p></td> <td><p>Icelandic</p></td> </tr> <tr>\n<td><p>cp862</p></td> <td><p>862, IBM862</p></td> <td><p>Hebrew</p></td> </tr> <tr>\n<td><p>cp863</p></td> <td><p>863, IBM863</p></td> <td><p>Canadian</p></td> </tr> <tr>\n<td><p>cp864</p></td> <td><p>IBM864</p></td> <td><p>Arabic</p></td> </tr> <tr>\n<td><p>cp865</p></td> <td><p>865, IBM865</p></td> <td><p>Danish, Norwegian</p></td> </tr> <tr>\n<td><p>cp866</p></td> <td><p>866, IBM866</p></td> <td><p>Russian</p></td> </tr> <tr>\n<td><p>cp869</p></td> <td><p>869, CP-GR, IBM869</p></td> <td><p>Greek</p></td> </tr> <tr>\n<td><p>cp874</p></td> <td></td> <td><p>Thai</p></td> </tr> <tr>\n<td><p>cp875</p></td> <td></td> <td><p>Greek</p></td> </tr> <tr>\n<td><p>cp932</p></td> <td><p>932, ms932, mskanji, ms-kanji</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>cp949</p></td> <td><p>949, ms949, uhc</p></td> <td><p>Korean</p></td> </tr> <tr>\n<td><p>cp950</p></td> <td><p>950, ms950</p></td> <td><p>Traditional Chinese</p></td> </tr> <tr>\n<td><p>cp1006</p></td> <td></td> <td><p>Urdu</p></td> </tr> <tr>\n<td><p>cp1026</p></td> <td><p>ibm1026</p></td> <td><p>Turkish</p></td> </tr> <tr>\n<td><p>cp1125</p></td> <td><p>1125, ibm1125, cp866u, ruscii</p></td> <td>\n<p>Ukrainian</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.4.</span></p> </div> </td> </tr> <tr>\n<td><p>cp1140</p></td> <td><p>ibm1140</p></td> <td><p>Western Europe</p></td> </tr> <tr>\n<td><p>cp1250</p></td> <td><p>windows-1250</p></td> <td><p>Central and Eastern Europe</p></td> </tr> <tr>\n<td><p>cp1251</p></td> <td><p>windows-1251</p></td> <td><p>Bulgarian, Byelorussian, Macedonian, Russian, Serbian</p></td> </tr> <tr>\n<td><p>cp1252</p></td> <td><p>windows-1252</p></td> <td><p>Western Europe</p></td> </tr> <tr>\n<td><p>cp1253</p></td> <td><p>windows-1253</p></td> <td><p>Greek</p></td> </tr> <tr>\n<td><p>cp1254</p></td> <td><p>windows-1254</p></td> <td><p>Turkish</p></td> </tr> <tr>\n<td><p>cp1255</p></td> <td><p>windows-1255</p></td> <td><p>Hebrew</p></td> </tr> <tr>\n<td><p>cp1256</p></td> <td><p>windows-1256</p></td> <td><p>Arabic</p></td> </tr> <tr>\n<td><p>cp1257</p></td> <td><p>windows-1257</p></td> <td><p>Baltic languages</p></td> </tr> <tr>\n<td><p>cp1258</p></td> <td><p>windows-1258</p></td> <td><p>Vietnamese</p></td> </tr> <tr>\n<td><p>euc_jp</p></td> <td><p>eucjp, ujis, u-jis</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>euc_jis_2004</p></td> <td><p>jisx0213, eucjis2004</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>euc_jisx0213</p></td> <td><p>eucjisx0213</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>euc_kr</p></td> <td><p>euckr, korean, ksc5601, ks_c-5601, ks_c-5601-1987, ksx1001, ks_x-1001</p></td> <td><p>Korean</p></td> </tr> <tr>\n<td><p>gb2312</p></td> <td><p>chinese, csiso58gb231280, euc-cn, euccn, eucgb2312-cn, gb2312-1980, gb2312-80, iso-ir-58</p></td> <td><p>Simplified Chinese</p></td> </tr> <tr>\n<td><p>gbk</p></td> <td><p>936, cp936, ms936</p></td> <td><p>Unified Chinese</p></td> </tr> <tr>\n<td><p>gb18030</p></td> <td><p>gb18030-2000</p></td> <td><p>Unified Chinese</p></td> </tr> <tr>\n<td><p>hz</p></td> <td><p>hzgb, hz-gb, hz-gb-2312</p></td> <td><p>Simplified Chinese</p></td> </tr> <tr>\n<td><p>iso2022_jp</p></td> <td><p>csiso2022jp, iso2022jp, iso-2022-jp</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>iso2022_jp_1</p></td> <td><p>iso2022jp-1, iso-2022-jp-1</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>iso2022_jp_2</p></td> <td><p>iso2022jp-2, iso-2022-jp-2</p></td> <td><p>Japanese, Korean, Simplified Chinese, Western Europe, Greek</p></td> </tr> <tr>\n<td><p>iso2022_jp_2004</p></td> <td><p>iso2022jp-2004, iso-2022-jp-2004</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>iso2022_jp_3</p></td> <td><p>iso2022jp-3, iso-2022-jp-3</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>iso2022_jp_ext</p></td> <td><p>iso2022jp-ext, iso-2022-jp-ext</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>iso2022_kr</p></td> <td><p>csiso2022kr, iso2022kr, iso-2022-kr</p></td> <td><p>Korean</p></td> </tr> <tr>\n<td><p>latin_1</p></td> <td><p>iso-8859-1, iso8859-1, 8859, cp819, latin, latin1, L1</p></td> <td><p>Western Europe</p></td> </tr> <tr>\n<td><p>iso8859_2</p></td> <td><p>iso-8859-2, latin2, L2</p></td> <td><p>Central and Eastern Europe</p></td> </tr> <tr>\n<td><p>iso8859_3</p></td> <td><p>iso-8859-3, latin3, L3</p></td> <td><p>Esperanto, Maltese</p></td> </tr> <tr>\n<td><p>iso8859_4</p></td> <td><p>iso-8859-4, latin4, L4</p></td> <td><p>Baltic languages</p></td> </tr> <tr>\n<td><p>iso8859_5</p></td> <td><p>iso-8859-5, cyrillic</p></td> <td><p>Bulgarian, Byelorussian, Macedonian, Russian, Serbian</p></td> </tr> <tr>\n<td><p>iso8859_6</p></td> <td><p>iso-8859-6, arabic</p></td> <td><p>Arabic</p></td> </tr> <tr>\n<td><p>iso8859_7</p></td> <td><p>iso-8859-7, greek, greek8</p></td> <td><p>Greek</p></td> </tr> <tr>\n<td><p>iso8859_8</p></td> <td><p>iso-8859-8, hebrew</p></td> <td><p>Hebrew</p></td> </tr> <tr>\n<td><p>iso8859_9</p></td> <td><p>iso-8859-9, latin5, L5</p></td> <td><p>Turkish</p></td> </tr> <tr>\n<td><p>iso8859_10</p></td> <td><p>iso-8859-10, latin6, L6</p></td> <td><p>Nordic languages</p></td> </tr> <tr>\n<td><p>iso8859_11</p></td> <td><p>iso-8859-11, thai</p></td> <td><p>Thai languages</p></td> </tr> <tr>\n<td><p>iso8859_13</p></td> <td><p>iso-8859-13, latin7, L7</p></td> <td><p>Baltic languages</p></td> </tr> <tr>\n<td><p>iso8859_14</p></td> <td><p>iso-8859-14, latin8, L8</p></td> <td><p>Celtic languages</p></td> </tr> <tr>\n<td><p>iso8859_15</p></td> <td><p>iso-8859-15, latin9, L9</p></td> <td><p>Western Europe</p></td> </tr> <tr>\n<td><p>iso8859_16</p></td> <td><p>iso-8859-16, latin10, L10</p></td> <td><p>South-Eastern Europe</p></td> </tr> <tr>\n<td><p>johab</p></td> <td><p>cp1361, ms1361</p></td> <td><p>Korean</p></td> </tr> <tr>\n<td><p>koi8_r</p></td> <td></td> <td><p>Russian</p></td> </tr> <tr>\n<td><p>koi8_t</p></td> <td></td> <td>\n<p>Tajik</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5.</span></p> </div> </td> </tr> <tr>\n<td><p>koi8_u</p></td> <td></td> <td><p>Ukrainian</p></td> </tr> <tr>\n<td><p>kz1048</p></td> <td><p>kz_1048, strk1048_2002, rk1048</p></td> <td>\n<p>Kazakh</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.5.</span></p> </div> </td> </tr> <tr>\n<td><p>mac_cyrillic</p></td> <td><p>maccyrillic</p></td> <td><p>Bulgarian, Byelorussian, Macedonian, Russian, Serbian</p></td> </tr> <tr>\n<td><p>mac_greek</p></td> <td><p>macgreek</p></td> <td><p>Greek</p></td> </tr> <tr>\n<td><p>mac_iceland</p></td> <td><p>maciceland</p></td> <td><p>Icelandic</p></td> </tr> <tr>\n<td><p>mac_latin2</p></td> <td><p>maclatin2, maccentraleurope, mac_centeuro</p></td> <td><p>Central and Eastern Europe</p></td> </tr> <tr>\n<td><p>mac_roman</p></td> <td><p>macroman, macintosh</p></td> <td><p>Western Europe</p></td> </tr> <tr>\n<td><p>mac_turkish</p></td> <td><p>macturkish</p></td> <td><p>Turkish</p></td> </tr> <tr>\n<td><p>ptcp154</p></td> <td><p>csptcp154, pt154, cp154, cyrillic-asian</p></td> <td><p>Kazakh</p></td> </tr> <tr>\n<td><p>shift_jis</p></td> <td><p>csshiftjis, shiftjis, sjis, s_jis</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>shift_jis_2004</p></td> <td><p>shiftjis2004, sjis_2004, sjis2004</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>shift_jisx0213</p></td> <td><p>shiftjisx0213, sjisx0213, s_jisx0213</p></td> <td><p>Japanese</p></td> </tr> <tr>\n<td><p>utf_32</p></td> <td><p>U32, utf32</p></td> <td><p>all languages</p></td> </tr> <tr>\n<td><p>utf_32_be</p></td> <td><p>UTF-32BE</p></td> <td><p>all languages</p></td> </tr> <tr>\n<td><p>utf_32_le</p></td> <td><p>UTF-32LE</p></td> <td><p>all languages</p></td> </tr> <tr>\n<td><p>utf_16</p></td> <td><p>U16, utf16</p></td> <td><p>all languages</p></td> </tr> <tr>\n<td><p>utf_16_be</p></td> <td><p>UTF-16BE</p></td> <td><p>all languages</p></td> </tr> <tr>\n<td><p>utf_16_le</p></td> <td><p>UTF-16LE</p></td> <td><p>all languages</p></td> </tr> <tr>\n<td><p>utf_7</p></td> <td><p>U7, unicode-1-1-utf-7</p></td> <td><p>all languages</p></td> </tr> <tr>\n<td><p>utf_8</p></td> <td><p>U8, UTF, utf8, cp65001</p></td> <td><p>all languages</p></td> </tr> <tr>\n<td><p>utf_8_sig</p></td> <td></td> <td><p>all languages</p></td> </tr>  </table> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span>The utf-16* and utf-32* encoders no longer allow surrogate code points (<code>U+D800</code>–<code>U+DFFF</code>) to be encoded. The utf-32* decoders no longer decode byte sequences that correspond to surrogate code points.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span><code>cp65001</code> is now an alias to <code>utf_8</code>.</p> </div>   <h2 id=\"python-specific-encodings\">Python Specific Encodings</h2> <p>A number of predefined codecs are specific to Python, so their codec names have no meaning outside Python. These are listed in the tables below based on the expected input and output types (note that while text encodings are the most common use case for codecs, the underlying codec infrastructure supports arbitrary data transforms rather than just text encodings). For asymmetric codecs, the stated meaning describes the encoding direction.</p>  <h3 id=\"text-encodings\">Text Encodings</h3> <p>The following codecs provide <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a> to <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> encoding and <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> to <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a> decoding, similar to the Unicode text encodings.</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Codec</p></th> <th class=\"head\"><p>Aliases</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p>idna</p></td> <td></td> <td><p>Implement <a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc3490.html\" id=\"index-4\"><strong>RFC 3490</strong></a>, see also <a class=\"reference internal\" href=\"#module-encodings.idna\" title=\"encodings.idna: Internationalized Domain Names implementation\"><code>encodings.idna</code></a>. Only <code>errors='strict'</code> is supported.</p></td> </tr> <tr>\n<td><p>mbcs</p></td> <td><p>ansi, dbcs</p></td> <td><p>Windows only: Encode the operand according to the ANSI codepage (CP_ACP).</p></td> </tr> <tr>\n<td><p>oem</p></td> <td></td> <td>\n<p>Windows only: Encode the operand according to the OEM codepage (CP_OEMCP).</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6.</span></p> </div> </td> </tr> <tr>\n<td><p>palmos</p></td> <td></td> <td><p>Encoding of PalmOS 3.5.</p></td> </tr> <tr>\n<td><p>punycode</p></td> <td></td> <td><p>Implement <a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc3492.html\" id=\"index-5\"><strong>RFC 3492</strong></a>. Stateful codecs are not supported.</p></td> </tr> <tr>\n<td><p>raw_unicode_escape</p></td> <td></td> <td><p>Latin-1 encoding with <code>\\uXXXX</code> and <code>\\UXXXXXXXX</code> for other code points. Existing backslashes are not escaped in any way. It is used in the Python pickle protocol.</p></td> </tr> <tr>\n<td><p>undefined</p></td> <td></td> <td><p>Raise an exception for all conversions, even empty strings. The error handler is ignored.</p></td> </tr> <tr>\n<td><p>unicode_escape</p></td> <td></td> <td><p>Encoding suitable as the contents of a Unicode literal in ASCII-encoded Python source code, except that quotes are not escaped. Decode from Latin-1 source code. Beware that Python source code actually uses UTF-8 by default.</p></td> </tr>  </table> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.8: </span>“unicode_internal” codec is removed.</p> </div>   <h3 id=\"id4\">Binary Transforms</h3> <p id=\"binary-transforms\">The following codecs provide binary transforms: <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> to <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> mappings. They are not supported by <a class=\"reference internal\" href=\"stdtypes#bytes.decode\" title=\"bytes.decode\"><code>bytes.decode()</code></a> (which only produces <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a> output).</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Codec</p></th> <th class=\"head\"><p>Aliases</p></th> <th class=\"head\"><p>Meaning</p></th> <th class=\"head\"><p>Encoder / decoder</p></th> </tr> </thead>  <tr>\n<td><p>base64_codec <a class=\"footnote-reference brackets\" href=\"#b64\" id=\"id5\">1</a></p></td> <td><p>base64, base_64</p></td> <td>\n<p>Convert the operand to multiline MIME base64 (the result always includes a trailing <code>'\\n'</code>).</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span>accepts any <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like object</span></a> as input for encoding and decoding</p> </div> </td> <td><p><a class=\"reference internal\" href=\"base64#base64.encodebytes\" title=\"base64.encodebytes\"><code>base64.encodebytes()</code></a> / <a class=\"reference internal\" href=\"base64#base64.decodebytes\" title=\"base64.decodebytes\"><code>base64.decodebytes()</code></a></p></td> </tr> <tr>\n<td><p>bz2_codec</p></td> <td><p>bz2</p></td> <td><p>Compress the operand using bz2.</p></td> <td><p><a class=\"reference internal\" href=\"bz2#bz2.compress\" title=\"bz2.compress\"><code>bz2.compress()</code></a> / <a class=\"reference internal\" href=\"bz2#bz2.decompress\" title=\"bz2.decompress\"><code>bz2.decompress()</code></a></p></td> </tr> <tr>\n<td><p>hex_codec</p></td> <td><p>hex</p></td> <td><p>Convert the operand to hexadecimal representation, with two digits per byte.</p></td> <td><p><a class=\"reference internal\" href=\"binascii#binascii.b2a_hex\" title=\"binascii.b2a_hex\"><code>binascii.b2a_hex()</code></a> / <a class=\"reference internal\" href=\"binascii#binascii.a2b_hex\" title=\"binascii.a2b_hex\"><code>binascii.a2b_hex()</code></a></p></td> </tr> <tr>\n<td><p>quopri_codec</p></td> <td><p>quopri, quotedprintable, quoted_printable</p></td> <td><p>Convert the operand to MIME quoted printable.</p></td> <td><p><a class=\"reference internal\" href=\"quopri#quopri.encode\" title=\"quopri.encode\"><code>quopri.encode()</code></a> with <code>quotetabs=True</code> / <a class=\"reference internal\" href=\"quopri#quopri.decode\" title=\"quopri.decode\"><code>quopri.decode()</code></a></p></td> </tr> <tr>\n<td><p>uu_codec</p></td> <td><p>uu</p></td> <td><p>Convert the operand using uuencode.</p></td> <td><p><a class=\"reference internal\" href=\"uu#uu.encode\" title=\"uu.encode\"><code>uu.encode()</code></a> / <a class=\"reference internal\" href=\"uu#uu.decode\" title=\"uu.decode\"><code>uu.decode()</code></a></p></td> </tr> <tr>\n<td><p>zlib_codec</p></td> <td><p>zip, zlib</p></td> <td><p>Compress the operand using gzip.</p></td> <td><p><a class=\"reference internal\" href=\"zlib#zlib.compress\" title=\"zlib.compress\"><code>zlib.compress()</code></a> / <a class=\"reference internal\" href=\"zlib#zlib.decompress\" title=\"zlib.decompress\"><code>zlib.decompress()</code></a></p></td> </tr>  </table> <dl class=\"footnote brackets\"> <dt class=\"label\" id=\"b64\">\n<code>1</code> </dt> <dd>\n<p>In addition to <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-bytes-like-object\"><span class=\"xref std std-term\">bytes-like objects</span></a>, <code>'base64_codec'</code> also accepts ASCII-only instances of <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a> for decoding</p> </dd> </dl> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2: </span>Restoration of the binary transforms.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span>Restoration of the aliases for the binary transforms.</p> </div>   <h3 id=\"id6\">Text Transforms</h3> <p id=\"text-transforms\">The following codec provides a text transform: a <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a> to <a class=\"reference internal\" href=\"stdtypes#str\" title=\"str\"><code>str</code></a> mapping. It is not supported by <a class=\"reference internal\" href=\"stdtypes#str.encode\" title=\"str.encode\"><code>str.encode()</code></a> (which only produces <a class=\"reference internal\" href=\"stdtypes#bytes\" title=\"bytes\"><code>bytes</code></a> output).</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Codec</p></th> <th class=\"head\"><p>Aliases</p></th> <th class=\"head\"><p>Meaning</p></th> </tr> </thead>  <tr>\n<td><p>rot_13</p></td> <td><p>rot13</p></td> <td><p>Return the Caesar-cypher encryption of the operand.</p></td> </tr>  </table> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2: </span>Restoration of the <code>rot_13</code> text transform.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.4: </span>Restoration of the <code>rot13</code> alias.</p> </div>    <h2 id=\"encodings-idna-internationalized-domain-names-in-applications\">encodings.idna — Internationalized Domain Names in Applications</h2> <p id=\"module-encodings.idna\">This module implements <a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc3490.html\" id=\"index-6\"><strong>RFC 3490</strong></a> (Internationalized Domain Names in Applications) and <a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc3492.html\" id=\"index-7\"><strong>RFC 3492</strong></a> (Nameprep: A Stringprep Profile for Internationalized Domain Names (IDN)). It builds upon the <code>punycode</code> encoding and <a class=\"reference internal\" href=\"stringprep#module-stringprep\" title=\"stringprep: String preparation, as per RFC 3453\"><code>stringprep</code></a>.</p> <p>If you need the IDNA 2008 standard from <a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc5891.html\" id=\"index-8\"><strong>RFC 5891</strong></a> and <a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc5895.html\" id=\"index-9\"><strong>RFC 5895</strong></a>, use the third-party <code>idna module &lt;https://pypi.org/project/idna/&gt;_</code>.</p> <p>These RFCs together define a protocol to support non-ASCII characters in domain names. A domain name containing non-ASCII characters (such as <code>www.Alliancefrançaise.nu</code>) is converted into an ASCII-compatible encoding (ACE, such as <code>www.xn--alliancefranaise-npb.nu</code>). The ACE form of the domain name is then used in all places where arbitrary characters are not allowed by the protocol, such as DNS queries, HTTP <em class=\"mailheader\">Host</em> fields, and so on. This conversion is carried out in the application; if possible invisible to the user: The application should transparently convert Unicode domain labels to IDNA on the wire, and convert back ACE labels to Unicode before presenting them to the user.</p> <p>Python supports this conversion in several ways: the <code>idna</code> codec performs conversion between Unicode and ACE, separating an input string into labels based on the separator characters defined in <a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc3490.html#section-3.1\" id=\"index-10\"><strong>section 3.1 of RFC 3490</strong></a> and converting each label to ACE as required, and conversely separating an input byte string into labels based on the <code>.</code> separator and converting any ACE labels found into unicode. Furthermore, the <a class=\"reference internal\" href=\"socket#module-socket\" title=\"socket: Low-level networking interface.\"><code>socket</code></a> module transparently converts Unicode host names to ACE, so that applications need not be concerned about converting host names themselves when they pass them to the socket module. On top of that, modules that have host names as function parameters, such as <a class=\"reference internal\" href=\"http.client#module-http.client\" title=\"http.client: HTTP and HTTPS protocol client (requires sockets).\"><code>http.client</code></a> and <a class=\"reference internal\" href=\"ftplib#module-ftplib\" title=\"ftplib: FTP protocol client (requires sockets).\"><code>ftplib</code></a>, accept Unicode host names (<a class=\"reference internal\" href=\"http.client#module-http.client\" title=\"http.client: HTTP and HTTPS protocol client (requires sockets).\"><code>http.client</code></a> then also transparently sends an IDNA hostname in the <em class=\"mailheader\">Host</em> field if it sends that field at all).</p> <p>When receiving host names from the wire (such as in reverse name lookup), no automatic conversion to Unicode is performed: applications wishing to present such host names to the user should decode them to Unicode.</p> <p>The module <a class=\"reference internal\" href=\"#module-encodings.idna\" title=\"encodings.idna: Internationalized Domain Names implementation\"><code>encodings.idna</code></a> also implements the nameprep procedure, which performs certain normalizations on host names, to achieve case-insensitivity of international domain names, and to unify similar characters. The nameprep functions can be used directly if desired.</p> <dl class=\"function\"> <dt id=\"encodings.idna.nameprep\">\n<code>encodings.idna.nameprep(label)</code> </dt> <dd>\n<p>Return the nameprepped version of <em>label</em>. The implementation currently assumes query strings, so <code>AllowUnassigned</code> is true.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"encodings.idna.ToASCII\">\n<code>encodings.idna.ToASCII(label)</code> </dt> <dd>\n<p>Convert a label to ASCII, as specified in <a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc3490.html\" id=\"index-11\"><strong>RFC 3490</strong></a>. <code>UseSTD3ASCIIRules</code> is assumed to be false.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"encodings.idna.ToUnicode\">\n<code>encodings.idna.ToUnicode(label)</code> </dt> <dd>\n<p>Convert a label to Unicode, as specified in <a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc3490.html\" id=\"index-12\"><strong>RFC 3490</strong></a>.</p> </dd>\n</dl>   <h2 id=\"encodings-mbcs-windows-ansi-codepage\">encodings.mbcs — Windows ANSI codepage</h2> <p id=\"module-encodings.mbcs\">This module implements the ANSI codepage (CP_ACP).</p> <p class=\"availability\"><a class=\"reference internal\" href=\"https://docs.python.org/3.9/library/intro.html#availability\"><span class=\"std std-ref\">Availability</span></a>: Windows only.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Support any error handler.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.2: </span>Before 3.2, the <em>errors</em> argument was ignored; <code>'replace'</code> was always used to encode, and <code>'ignore'</code> to decode.</p> </div>   <h2 id=\"encodings-utf-8-sig-utf-8-codec-with-bom-signature\">encodings.utf_8_sig — UTF-8 codec with BOM signature</h2> <p id=\"module-encodings.utf_8_sig\">This module implements a variant of the UTF-8 codec. On encoding, a UTF-8 encoded BOM will be prepended to the UTF-8 encoded bytes. For the stateful encoder this is only done once (on the first write to the byte stream). On decoding, an optional UTF-8 encoded BOM at the start of the data will be skipped.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2001&ndash;2021 Python Software Foundation<br>Licensed under the PSF License.<br>\n    <a href=\"https://docs.python.org/3.9/library/codecs.html\" class=\"_attribution-link\">https://docs.python.org/3.9/library/codecs.html</a>\n  </p>\n</div>\n","library/datetime":"<h1 id=\"datetime-basic-date-and-time-types\">datetime — Basic date and time types</h1> <p id=\"module-datetime\"><strong>Source code:</strong> <a class=\"reference external\" href=\"https://github.com/python/cpython/tree/3.9/Lib/datetime.py\">Lib/datetime.py</a></p>  <p>The <a class=\"reference internal\" href=\"#module-datetime\" title=\"datetime: Basic date and time types.\"><code>datetime</code></a> module supplies classes for manipulating dates and times.</p> <p>While date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation.</p> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <dl class=\"simple\"> <dt>\n<code>Module</code> <a class=\"reference internal\" href=\"calendar#module-calendar\" title=\"calendar: Functions for working with calendars, including some emulation of the Unix cal program.\"><code>calendar</code></a>\n</dt>\n<dd>\n<p>General calendar related functions.</p> </dd> <dt>\n<code>Module</code> <a class=\"reference internal\" href=\"time#module-time\" title=\"time: Time access and conversions.\"><code>time</code></a>\n</dt>\n<dd>\n<p>Time access and conversions.</p> </dd> <dt>Package <a class=\"reference external\" href=\"https://dateutil.readthedocs.io/en/stable/\">dateutil</a>\n</dt>\n<dd>\n<p>Third-party library with expanded time zone and parsing support.</p> </dd> </dl> </div>  <h2 id=\"datetime-naive-aware\">Aware and Naive Objects</h2> <p id=\"aware-and-naive-objects\">Date and time objects may be categorized as “aware” or “naive” depending on whether or not they include timezone information.</p> <p>With sufficient knowledge of applicable algorithmic and political time adjustments, such as time zone and daylight saving time information, an <strong>aware</strong> object can locate itself relative to other aware objects. An aware object represents a specific moment in time that is not open to interpretation. <a class=\"footnote-reference brackets\" href=\"#id5\" id=\"id1\">1</a></p> <p>A <strong>naive</strong> object does not contain enough information to unambiguously locate itself relative to other date/time objects. Whether a naive object represents Coordinated Universal Time (UTC), local time, or time in some other timezone is purely up to the program, just like it is up to the program whether a particular number represents metres, miles, or mass. Naive objects are easy to understand and to work with, at the cost of ignoring some aspects of reality.</p> <p>For applications requiring aware objects, <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> and <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> objects have an optional time zone information attribute, <code>tzinfo</code>, that can be set to an instance of a subclass of the abstract <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> class. These <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> objects capture information about the offset from UTC time, the time zone name, and whether daylight saving time is in effect.</p> <p>Only one concrete <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> class, the <a class=\"reference internal\" href=\"#datetime.timezone\" title=\"datetime.timezone\"><code>timezone</code></a> class, is supplied by the <a class=\"reference internal\" href=\"#module-datetime\" title=\"datetime: Basic date and time types.\"><code>datetime</code></a> module. The <a class=\"reference internal\" href=\"#datetime.timezone\" title=\"datetime.timezone\"><code>timezone</code></a> class can represent simple timezones with fixed offsets from UTC, such as UTC itself or North American EST and EDT timezones. Supporting timezones at deeper levels of detail is up to the application. The rules for time adjustment across the world are more political than rational, change frequently, and there is no standard suitable for every application aside from UTC.</p>   <h2 id=\"constants\">Constants</h2> <p>The <a class=\"reference internal\" href=\"#module-datetime\" title=\"datetime: Basic date and time types.\"><code>datetime</code></a> module exports the following constants:</p> <dl class=\"data\"> <dt id=\"datetime.MINYEAR\">\n<code>datetime.MINYEAR</code> </dt> <dd>\n<p>The smallest year number allowed in a <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> or <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object. <a class=\"reference internal\" href=\"#datetime.MINYEAR\" title=\"datetime.MINYEAR\"><code>MINYEAR</code></a> is <code>1</code>.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"datetime.MAXYEAR\">\n<code>datetime.MAXYEAR</code> </dt> <dd>\n<p>The largest year number allowed in a <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> or <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object. <a class=\"reference internal\" href=\"#datetime.MAXYEAR\" title=\"datetime.MAXYEAR\"><code>MAXYEAR</code></a> is <code>9999</code>.</p> </dd>\n</dl>   <h2 id=\"available-types\">Available Types</h2> <dl class=\"class\"> <dt>\n<code>class datetime.date</code> </dt> <dd>\n<p>An idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Attributes: <a class=\"reference internal\" href=\"#datetime.date.year\" title=\"datetime.date.year\"><code>year</code></a>, <a class=\"reference internal\" href=\"#datetime.date.month\" title=\"datetime.date.month\"><code>month</code></a>, and <a class=\"reference internal\" href=\"#datetime.date.day\" title=\"datetime.date.day\"><code>day</code></a>.</p> </dd>\n</dl> <dl class=\"class\"> <dt>\n<code>class datetime.time</code> </dt> <dd>\n<p>An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds. (There is no notion of “leap seconds” here.) Attributes: <a class=\"reference internal\" href=\"#datetime.time.hour\" title=\"datetime.time.hour\"><code>hour</code></a>, <a class=\"reference internal\" href=\"#datetime.time.minute\" title=\"datetime.time.minute\"><code>minute</code></a>, <a class=\"reference internal\" href=\"#datetime.time.second\" title=\"datetime.time.second\"><code>second</code></a>, <a class=\"reference internal\" href=\"#datetime.time.microsecond\" title=\"datetime.time.microsecond\"><code>microsecond</code></a>, and <a class=\"reference internal\" href=\"#datetime.time.tzinfo\" title=\"datetime.time.tzinfo\"><code>tzinfo</code></a>.</p> </dd>\n</dl> <dl class=\"class\"> <dt>\n<code>class datetime.datetime</code> </dt> <dd>\n<p>A combination of a date and a time. Attributes: <a class=\"reference internal\" href=\"#datetime.datetime.year\" title=\"datetime.datetime.year\"><code>year</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime.month\" title=\"datetime.datetime.month\"><code>month</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime.day\" title=\"datetime.datetime.day\"><code>day</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime.hour\" title=\"datetime.datetime.hour\"><code>hour</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime.minute\" title=\"datetime.datetime.minute\"><code>minute</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime.second\" title=\"datetime.datetime.second\"><code>second</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime.microsecond\" title=\"datetime.datetime.microsecond\"><code>microsecond</code></a>, and <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a>.</p> </dd>\n</dl> <dl class=\"class\"> <dt>\n<code>class datetime.timedelta</code> </dt> <dd>\n<p>A duration expressing the difference between two <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a>, <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a>, or <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> instances to microsecond resolution.</p> </dd>\n</dl> <dl class=\"class\"> <dt>\n<code>class datetime.tzinfo</code> </dt> <dd>\n<p>An abstract base class for time zone information objects. These are used by the <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> and <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> classes to provide a customizable notion of time adjustment (for example, to account for time zone and/or daylight saving time).</p> </dd>\n</dl> <dl class=\"class\"> <dt>\n<code>class datetime.timezone</code> </dt> <dd>\n<p>A class that implements the <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> abstract base class as a fixed offset from the UTC.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2.</span></p> </div> </dd>\n</dl> <p>Objects of these types are immutable.</p> <p>Subclass relationships:</p> <pre data-language=\"python\">object\n    timedelta\n    tzinfo\n        timezone\n    time\n    date\n        datetime\n</pre>  <h3 id=\"common-properties\">Common Properties</h3> <p>The <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a>, <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a>, and <a class=\"reference internal\" href=\"#datetime.timezone\" title=\"datetime.timezone\"><code>timezone</code></a> types share these common features:</p> <ul class=\"simple\"> <li>Objects of these types are immutable.</li> <li>Objects of these types are hashable, meaning that they can be used as dictionary keys.</li> <li>Objects of these types support efficient pickling via the <a class=\"reference internal\" href=\"pickle#module-pickle\" title=\"pickle: Convert Python objects to streams of bytes and back.\"><code>pickle</code></a> module.</li> </ul>   <h3 id=\"determining-if-an-object-is-aware-or-naive\">Determining if an Object is Aware or Naive</h3> <p>Objects of the <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> type are always naive.</p> <p>An object of type <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> or <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> may be aware or naive.</p> <p>A <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object <em>d</em> is aware if both of the following hold:</p> <ol class=\"arabic simple\"> <li>\n<code>d.tzinfo</code> is not <code>None</code>\n</li> <li>\n<code>d.tzinfo.utcoffset(d)</code> does not return <code>None</code>\n</li> </ol> <p>Otherwise, <em>d</em> is naive.</p> <p>A <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object <em>t</em> is aware if both of the following hold:</p> <ol class=\"arabic simple\"> <li>\n<code>t.tzinfo</code> is not <code>None</code>\n</li> <li>\n<code>t.tzinfo.utcoffset(None)</code> does not return <code>None</code>.</li> </ol> <p>Otherwise, <em>t</em> is naive.</p> <p>The distinction between aware and naive doesn’t apply to <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> objects.</p>    <h2 id=\"datetime-timedelta\">timedelta Objects</h2> <p id=\"timedelta-objects\">A <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object represents a duration, the difference between two dates or times.</p> <dl class=\"class\"> <dt id=\"datetime.timedelta\">\n<code>class datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)</code> </dt> <dd>\n<p>All arguments are optional and default to <code>0</code>. Arguments may be integers or floats, and may be positive or negative.</p> <p>Only <em>days</em>, <em>seconds</em> and <em>microseconds</em> are stored internally. Arguments are converted to those units:</p> <ul class=\"simple\"> <li>A millisecond is converted to 1000 microseconds.</li> <li>A minute is converted to 60 seconds.</li> <li>An hour is converted to 3600 seconds.</li> <li>A week is converted to 7 days.</li> </ul> <p>and days, seconds and microseconds are then normalized so that the representation is unique, with</p> <ul class=\"simple\"> <li><code>0 &lt;= microseconds &lt; 1000000</code></li> <li>\n<code>0 &lt;= seconds &lt; 3600*24</code> (the number of seconds in one day)</li> <li><code>-999999999 &lt;= days &lt;= 999999999</code></li> </ul> <p>The following example illustrates how any arguments besides <em>days</em>, <em>seconds</em> and <em>microseconds</em> are “merged” and normalized into those three resulting attributes:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import timedelta\n&gt;&gt;&gt; delta = timedelta(\n...     days=50,\n...     seconds=27,\n...     microseconds=10,\n...     milliseconds=29000,\n...     minutes=5,\n...     hours=8,\n...     weeks=2\n... )\n&gt;&gt;&gt; # Only days, seconds, and microseconds remain\n&gt;&gt;&gt; delta\ndatetime.timedelta(days=64, seconds=29156, microseconds=10)\n</pre> <p>If any argument is a float and there are fractional microseconds, the fractional microseconds left over from all arguments are combined and their sum is rounded to the nearest microsecond using round-half-to-even tiebreaker. If no argument is a float, the conversion and normalization processes are exact (no information is lost).</p> <p>If the normalized value of days lies outside the indicated range, <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> is raised.</p> <p>Note that normalization of negative values may be surprising at first. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import timedelta\n&gt;&gt;&gt; d = timedelta(microseconds=-1)\n&gt;&gt;&gt; (d.days, d.seconds, d.microseconds)\n(-1, 86399, 999999)\n</pre> </dd>\n</dl> <p>Class attributes:</p> <dl class=\"attribute\"> <dt id=\"datetime.timedelta.min\">\n<code>timedelta.min</code> </dt> <dd>\n<p>The most negative <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object, <code>timedelta(-999999999)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.timedelta.max\">\n<code>timedelta.max</code> </dt> <dd>\n<p>The most positive <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object, <code>timedelta(days=999999999,\nhours=23, minutes=59, seconds=59, microseconds=999999)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.timedelta.resolution\">\n<code>timedelta.resolution</code> </dt> <dd>\n<p>The smallest possible difference between non-equal <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> objects, <code>timedelta(microseconds=1)</code>.</p> </dd>\n</dl> <p>Note that, because of normalization, <code>timedelta.max</code> &gt; <code>-timedelta.min</code>. <code>-timedelta.max</code> is not representable as a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object.</p> <p>Instance attributes (read-only):</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Attribute</p></th> <th class=\"head\"><p>Value</p></th> </tr> </thead>  <tr>\n<td><p><code>days</code></p></td> <td><p>Between -999999999 and 999999999 inclusive</p></td> </tr> <tr>\n<td><p><code>seconds</code></p></td> <td><p>Between 0 and 86399 inclusive</p></td> </tr> <tr>\n<td><p><code>microseconds</code></p></td> <td><p>Between 0 and 999999 inclusive</p></td> </tr>  </table> <p>Supported operations:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Operation</p></th> <th class=\"head\"><p>Result</p></th> </tr> </thead>  <tr>\n<td><p><code>t1 = t2 + t3</code></p></td> <td><p>Sum of <em>t2</em> and <em>t3</em>. Afterwards <em>t1</em>-<em>t2</em> == <em>t3</em> and <em>t1</em>-<em>t3</em> == <em>t2</em> are true. (1)</p></td> </tr> <tr>\n<td><p><code>t1 = t2 - t3</code></p></td> <td><p>Difference of <em>t2</em> and <em>t3</em>. Afterwards <em>t1</em> == <em>t2</em> - <em>t3</em> and <em>t2</em> == <em>t1</em> + <em>t3</em> are true. (1)(6)</p></td> </tr> <tr>\n<td><p><code>t1 = t2 * i or t1 = i * t2</code></p></td> <td><p>Delta multiplied by an integer. Afterwards <em>t1</em> // i == <em>t2</em> is true, provided <code>i != 0</code>.</p></td> </tr> <tr>\n<td></td> <td><p>In general, <em>t1</em> * i == <em>t1</em> * (i-1) + <em>t1</em> is true. (1)</p></td> </tr> <tr>\n<td><p><code>t1 = t2 * f or t1 = f * t2</code></p></td> <td><p>Delta multiplied by a float. The result is rounded to the nearest multiple of timedelta.resolution using round-half-to-even.</p></td> </tr> <tr>\n<td><p><code>f = t2 / t3</code></p></td> <td><p>Division (3) of overall duration <em>t2</em> by interval unit <em>t3</em>. Returns a <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a> object.</p></td> </tr> <tr>\n<td><p><code>t1 = t2 / f or t1 = t2 / i</code></p></td> <td><p>Delta divided by a float or an int. The result is rounded to the nearest multiple of timedelta.resolution using round-half-to-even.</p></td> </tr> <tr>\n<td><p><code>t1 = t2 // i</code> or <code>t1 = t2 // t3</code></p></td> <td><p>The floor is computed and the remainder (if any) is thrown away. In the second case, an integer is returned. (3)</p></td> </tr> <tr>\n<td><p><code>t1 = t2 % t3</code></p></td> <td><p>The remainder is computed as a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object. (3)</p></td> </tr> <tr>\n<td><p><code>q, r = divmod(t1, t2)</code></p></td> <td><p>Computes the quotient and the remainder: <code>q = t1 // t2</code> (3) and <code>r = t1 % t2</code>. q is an integer and r is a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object.</p></td> </tr> <tr>\n<td><p><code>+t1</code></p></td> <td><p>Returns a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object with the same value. (2)</p></td> </tr> <tr>\n<td><p><code>-t1</code></p></td> <td><p>equivalent to <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a>(-<em>t1.days</em>, -<em>t1.seconds</em>, -<em>t1.microseconds</em>), and to <em>t1</em>* -1. (1)(4)</p></td> </tr> <tr>\n<td><p><code>abs(t)</code></p></td> <td><p>equivalent to +<em>t</em> when <code>t.days &gt;= 0</code>, and to -<em>t</em> when <code>t.days &lt; 0</code>. (2)</p></td> </tr> <tr>\n<td><p><code>str(t)</code></p></td> <td><p>Returns a string in the form <code>[D day[s], ][H]H:MM:SS[.UUUUUU]</code>, where D is negative for negative <code>t</code>. (5)</p></td> </tr> <tr>\n<td><p><code>repr(t)</code></p></td> <td><p>Returns a string representation of the <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object as a constructor call with canonical attribute values.</p></td> </tr>  </table> <p>Notes:</p> <ol class=\"arabic\"> <li>This is exact but may overflow.</li> <li>This is exact and cannot overflow.</li> <li>Division by 0 raises <a class=\"reference internal\" href=\"exceptions#ZeroDivisionError\" title=\"ZeroDivisionError\"><code>ZeroDivisionError</code></a>.</li> <li>-<em>timedelta.max</em> is not representable as a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object.</li> <li>\n<p>String representations of <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> objects are normalized similarly to their internal representation. This leads to somewhat unusual results for negative timedeltas. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; timedelta(hours=-5)\ndatetime.timedelta(days=-1, seconds=68400)\n&gt;&gt;&gt; print(_)\n-1 day, 19:00:00\n</pre> </li> <li>The expression <code>t2 - t3</code> will always be equal to the expression <code>t2 + (-t3)</code> except when t3 is equal to <code>timedelta.max</code>; in that case the former will produce a result while the latter will overflow.</li> </ol> <p>In addition to the operations listed above, <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> objects support certain additions and subtractions with <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> and <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> objects (see below).</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.2: </span>Floor division and true division of a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object by another <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object are now supported, as are remainder operations and the <a class=\"reference internal\" href=\"functions#divmod\" title=\"divmod\"><code>divmod()</code></a> function. True division and multiplication of a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object by a <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a> object are now supported.</p> </div> <p>Comparisons of <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> objects are supported, with some caveats.</p> <p>The comparisons <code>==</code> or <code>!=</code> <em>always</em> return a <a class=\"reference internal\" href=\"functions#bool\" title=\"bool\"><code>bool</code></a>, no matter the type of the compared object:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import timedelta\n&gt;&gt;&gt; delta1 = timedelta(seconds=57)\n&gt;&gt;&gt; delta2 = timedelta(hours=25, seconds=2)\n&gt;&gt;&gt; delta2 != delta1\nTrue\n&gt;&gt;&gt; delta2 == 5\nFalse\n</pre> <p>For all other comparisons (such as <code>&lt;</code> and <code>&gt;</code>), when a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object is compared to an object of a different type, <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> is raised:</p> <pre data-language=\"python\">&gt;&gt;&gt; delta2 &gt; delta1\nTrue\n&gt;&gt;&gt; delta2 &gt; 5\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: '&gt;' not supported between instances of 'datetime.timedelta' and 'int'\n</pre> <p>In Boolean contexts, a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object is considered to be true if and only if it isn’t equal to <code>timedelta(0)</code>.</p> <p>Instance methods:</p> <dl class=\"method\"> <dt id=\"datetime.timedelta.total_seconds\">\n<code>timedelta.total_seconds()</code> </dt> <dd>\n<p>Return the total number of seconds contained in the duration. Equivalent to <code>td / timedelta(seconds=1)</code>. For interval units other than seconds, use the division form directly (e.g. <code>td / timedelta(microseconds=1)</code>).</p> <p>Note that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2.</span></p> </div> </dd>\n</dl>  <h3 id=\"examples-of-usage-timedelta\">Examples of usage: <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a>\n</h3> <p>An additional example of normalization:</p> <pre data-language=\"python\">&gt;&gt;&gt; # Components of another_year add up to exactly 365 days\n&gt;&gt;&gt; from datetime import timedelta\n&gt;&gt;&gt; year = timedelta(days=365)\n&gt;&gt;&gt; another_year = timedelta(weeks=40, days=84, hours=23,\n...                          minutes=50, seconds=600)\n&gt;&gt;&gt; year == another_year\nTrue\n&gt;&gt;&gt; year.total_seconds()\n31536000.0\n</pre> <p>Examples of <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> arithmetic:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import timedelta\n&gt;&gt;&gt; year = timedelta(days=365)\n&gt;&gt;&gt; ten_years = 10 * year\n&gt;&gt;&gt; ten_years\ndatetime.timedelta(days=3650)\n&gt;&gt;&gt; ten_years.days // 365\n10\n&gt;&gt;&gt; nine_years = ten_years - year\n&gt;&gt;&gt; nine_years\ndatetime.timedelta(days=3285)\n&gt;&gt;&gt; three_years = nine_years // 3\n&gt;&gt;&gt; three_years, three_years.days // 365\n(datetime.timedelta(days=1095), 3)\n</pre>    <h2 id=\"datetime-date\">date Objects</h2> <p id=\"date-objects\">A <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> object represents a date (year, month and day) in an idealized calendar, the current Gregorian calendar indefinitely extended in both directions.</p> <p>January 1 of year 1 is called day number 1, January 2 of year 1 is called day number 2, and so on. <a class=\"footnote-reference brackets\" href=\"#id6\" id=\"id2\">2</a></p> <dl class=\"class\"> <dt id=\"datetime.date\">\n<code>class datetime.date(year, month, day)</code> </dt> <dd>\n<p>All arguments are required. Arguments must be integers, in the following ranges:</p> <ul class=\"simple\"> <li><code>MINYEAR &lt;= year &lt;= MAXYEAR</code></li> <li><code>1 &lt;= month &lt;= 12</code></li> <li><code>1 &lt;= day &lt;= number of days in the given month and year</code></li> </ul> <p>If an argument outside those ranges is given, <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised.</p> </dd>\n</dl> <p>Other constructors, all class methods:</p> <dl class=\"method\"> <dt id=\"datetime.date.today\">\n<code>classmethod date.today()</code> </dt> <dd>\n<p>Return the current local date.</p> <p>This is equivalent to <code>date.fromtimestamp(time.time())</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.fromtimestamp\">\n<code>classmethod date.fromtimestamp(timestamp)</code> </dt> <dd>\n<p>Return the local date corresponding to the POSIX timestamp, such as is returned by <a class=\"reference internal\" href=\"time#time.time\" title=\"time.time\"><code>time.time()</code></a>.</p> <p>This may raise <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a>, if the timestamp is out of the range of values supported by the platform C <code>localtime()</code> function, and <a class=\"reference internal\" href=\"exceptions#OSError\" title=\"OSError\"><code>OSError</code></a> on <code>localtime()</code> failure. It’s common for this to be restricted to years from 1970 through 2038. Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by <a class=\"reference internal\" href=\"#datetime.date.fromtimestamp\" title=\"datetime.date.fromtimestamp\"><code>fromtimestamp()</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Raise <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> instead of <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> if the timestamp is out of the range of values supported by the platform C <code>localtime()</code> function. Raise <a class=\"reference internal\" href=\"exceptions#OSError\" title=\"OSError\"><code>OSError</code></a> instead of <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> on <code>localtime()</code> failure.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.fromordinal\">\n<code>classmethod date.fromordinal(ordinal)</code> </dt> <dd>\n<p>Return the date corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1.</p> <p><a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised unless <code>1 &lt;= ordinal &lt;=\ndate.max.toordinal()</code>. For any date <em>d</em>, <code>date.fromordinal(d.toordinal()) == d</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.fromisoformat\">\n<code>classmethod date.fromisoformat(date_string)</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> corresponding to a <em>date_string</em> given in the format <code>YYYY-MM-DD</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; date.fromisoformat('2019-12-04')\ndatetime.date(2019, 12, 4)\n</pre> <p>This is the inverse of <a class=\"reference internal\" href=\"#datetime.date.isoformat\" title=\"datetime.date.isoformat\"><code>date.isoformat()</code></a>. It only supports the format <code>YYYY-MM-DD</code>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.7.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.fromisocalendar\">\n<code>classmethod date.fromisocalendar(year, week, day)</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> corresponding to the ISO calendar date specified by year, week and day. This is the inverse of the function <a class=\"reference internal\" href=\"#datetime.date.isocalendar\" title=\"datetime.date.isocalendar\"><code>date.isocalendar()</code></a>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.8.</span></p> </div> </dd>\n</dl> <p>Class attributes:</p> <dl class=\"attribute\"> <dt id=\"datetime.date.min\">\n<code>date.min</code> </dt> <dd>\n<p>The earliest representable date, <code>date(MINYEAR, 1, 1)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.date.max\">\n<code>date.max</code> </dt> <dd>\n<p>The latest representable date, <code>date(MAXYEAR, 12, 31)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.date.resolution\">\n<code>date.resolution</code> </dt> <dd>\n<p>The smallest possible difference between non-equal date objects, <code>timedelta(days=1)</code>.</p> </dd>\n</dl> <p>Instance attributes (read-only):</p> <dl class=\"attribute\"> <dt id=\"datetime.date.year\">\n<code>date.year</code> </dt> <dd>\n<p>Between <a class=\"reference internal\" href=\"#datetime.MINYEAR\" title=\"datetime.MINYEAR\"><code>MINYEAR</code></a> and <a class=\"reference internal\" href=\"#datetime.MAXYEAR\" title=\"datetime.MAXYEAR\"><code>MAXYEAR</code></a> inclusive.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.date.month\">\n<code>date.month</code> </dt> <dd>\n<p>Between 1 and 12 inclusive.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.date.day\">\n<code>date.day</code> </dt> <dd>\n<p>Between 1 and the number of days in the given month of the given year.</p> </dd>\n</dl> <p>Supported operations:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Operation</p></th> <th class=\"head\"><p>Result</p></th> </tr> </thead>  <tr>\n<td><p><code>date2 = date1 + timedelta</code></p></td> <td><p><em>date2</em> is <code>timedelta.days</code> days removed from <em>date1</em>. (1)</p></td> </tr> <tr>\n<td><p><code>date2 = date1 - timedelta</code></p></td> <td><p>Computes <em>date2</em> such that <code>date2 +\ntimedelta == date1</code>. (2)</p></td> </tr> <tr>\n<td><p><code>timedelta = date1 - date2</code></p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>date1 &lt; date2</code></p></td> <td><p><em>date1</em> is considered less than <em>date2</em> when <em>date1</em> precedes <em>date2</em> in time. (4)</p></td> </tr>  </table> <p>Notes:</p> <ol class=\"arabic simple\"> <li>\n<em>date2</em> is moved forward in time if <code>timedelta.days &gt; 0</code>, or backward if <code>timedelta.days &lt; 0</code>. Afterward <code>date2 - date1 == timedelta.days</code>. <code>timedelta.seconds</code> and <code>timedelta.microseconds</code> are ignored. <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> is raised if <code>date2.year</code> would be smaller than <a class=\"reference internal\" href=\"#datetime.MINYEAR\" title=\"datetime.MINYEAR\"><code>MINYEAR</code></a> or larger than <a class=\"reference internal\" href=\"#datetime.MAXYEAR\" title=\"datetime.MAXYEAR\"><code>MAXYEAR</code></a>.</li> <li>\n<code>timedelta.seconds</code> and <code>timedelta.microseconds</code> are ignored.</li> <li>This is exact, and cannot overflow. timedelta.seconds and timedelta.microseconds are 0, and date2 + timedelta == date1 after.</li> <li>In other words, <code>date1 &lt; date2</code> if and only if <code>date1.toordinal() &lt;\ndate2.toordinal()</code>. Date comparison raises <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> if the other comparand isn’t also a <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> object. However, <code>NotImplemented</code> is returned instead if the other comparand has a <code>timetuple()</code> attribute. This hook gives other kinds of date objects a chance at implementing mixed-type comparison. If not, when a <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> object is compared to an object of a different type, <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> is raised unless the comparison is <code>==</code> or <code>!=</code>. The latter cases return <a class=\"reference internal\" href=\"constants#False\" title=\"False\"><code>False</code></a> or <a class=\"reference internal\" href=\"constants#True\" title=\"True\"><code>True</code></a>, respectively.</li> </ol> <p>In Boolean contexts, all <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> objects are considered to be true.</p> <p>Instance methods:</p> <dl class=\"method\"> <dt id=\"datetime.date.replace\">\n<code>date.replace(year=self.year, month=self.month, day=self.day)</code> </dt> <dd>\n<p>Return a date with the same value, except for those parameters given new values by whichever keyword arguments are specified.</p> <p>Example:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; d = date(2002, 12, 31)\n&gt;&gt;&gt; d.replace(day=26)\ndatetime.date(2002, 12, 26)\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.timetuple\">\n<code>date.timetuple()</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"time#time.struct_time\" title=\"time.struct_time\"><code>time.struct_time</code></a> such as returned by <a class=\"reference internal\" href=\"time#time.localtime\" title=\"time.localtime\"><code>time.localtime()</code></a>.</p> <p>The hours, minutes and seconds are 0, and the DST flag is -1.</p> <p><code>d.timetuple()</code> is equivalent to:</p> <pre data-language=\"python\">time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), yday, -1))\n</pre> <p>where <code>yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1</code> is the day number within the current year starting with <code>1</code> for January 1st.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.toordinal\">\n<code>date.toordinal()</code> </dt> <dd>\n<p>Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1. For any <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> object <em>d</em>, <code>date.fromordinal(d.toordinal()) == d</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.weekday\">\n<code>date.weekday()</code> </dt> <dd>\n<p>Return the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, <code>date(2002, 12, 4).weekday() == 2</code>, a Wednesday. See also <a class=\"reference internal\" href=\"#datetime.date.isoweekday\" title=\"datetime.date.isoweekday\"><code>isoweekday()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.isoweekday\">\n<code>date.isoweekday()</code> </dt> <dd>\n<p>Return the day of the week as an integer, where Monday is 1 and Sunday is 7. For example, <code>date(2002, 12, 4).isoweekday() == 3</code>, a Wednesday. See also <a class=\"reference internal\" href=\"#datetime.date.weekday\" title=\"datetime.date.weekday\"><code>weekday()</code></a>, <a class=\"reference internal\" href=\"#datetime.date.isocalendar\" title=\"datetime.date.isocalendar\"><code>isocalendar()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.isocalendar\">\n<code>date.isocalendar()</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-named-tuple\"><span class=\"xref std std-term\">named tuple</span></a> object with three components: <code>year</code>, <code>week</code> and <code>weekday</code>.</p> <p>The ISO calendar is a widely used variant of the Gregorian calendar. <a class=\"footnote-reference brackets\" href=\"#id7\" id=\"id3\">3</a></p> <p>The ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday. The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year.</p> <p>For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; date(2003, 12, 29).isocalendar()\ndatetime.IsoCalendarDate(year=2004, week=1, weekday=1)\n&gt;&gt;&gt; date(2004, 1, 4).isocalendar()\ndatetime.IsoCalendarDate(year=2004, week=1, weekday=7)\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.9: </span>Result changed from a tuple to a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-named-tuple\"><span class=\"xref std std-term\">named tuple</span></a>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.isoformat\">\n<code>date.isoformat()</code> </dt> <dd>\n<p>Return a string representing the date in ISO 8601 format, <code>YYYY-MM-DD</code>:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; date(2002, 12, 4).isoformat()\n'2002-12-04'\n</pre> <p>This is the inverse of <a class=\"reference internal\" href=\"#datetime.date.fromisoformat\" title=\"datetime.date.fromisoformat\"><code>date.fromisoformat()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.__str__\">\n<code>date.__str__()</code> </dt> <dd>\n<p>For a date <em>d</em>, <code>str(d)</code> is equivalent to <code>d.isoformat()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.ctime\">\n<code>date.ctime()</code> </dt> <dd>\n<p>Return a string representing the date:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; date(2002, 12, 4).ctime()\n'Wed Dec  4 00:00:00 2002'\n</pre> <p><code>d.ctime()</code> is equivalent to:</p> <pre data-language=\"python\">time.ctime(time.mktime(d.timetuple()))\n</pre> <p>on platforms where the native C <code>ctime()</code> function (which <a class=\"reference internal\" href=\"time#time.ctime\" title=\"time.ctime\"><code>time.ctime()</code></a> invokes, but which <a class=\"reference internal\" href=\"#datetime.date.ctime\" title=\"datetime.date.ctime\"><code>date.ctime()</code></a> does not invoke) conforms to the C standard.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.strftime\">\n<code>date.strftime(format)</code> </dt> <dd>\n<p>Return a string representing the date, controlled by an explicit format string. Format codes referring to hours, minutes or seconds will see 0 values. For a complete list of formatting directives, see <a class=\"reference internal\" href=\"#strftime-strptime-behavior\"><span class=\"std std-ref\">strftime() and strptime() Behavior</span></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.date.__format__\">\n<code>date.__format__(format)</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#datetime.date.strftime\" title=\"datetime.date.strftime\"><code>date.strftime()</code></a>. This makes it possible to specify a format string for a <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> object in <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings\"><span class=\"std std-ref\">formatted string literals</span></a> and when using <a class=\"reference internal\" href=\"stdtypes#str.format\" title=\"str.format\"><code>str.format()</code></a>. For a complete list of formatting directives, see <a class=\"reference internal\" href=\"#strftime-strptime-behavior\"><span class=\"std std-ref\">strftime() and strptime() Behavior</span></a>.</p> </dd>\n</dl>  <h3 id=\"examples-of-usage-date\">Examples of Usage: <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a>\n</h3> <p>Example of counting days to an event:</p> <pre data-language=\"python\">&gt;&gt;&gt; import time\n&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; today = date.today()\n&gt;&gt;&gt; today\ndatetime.date(2007, 12, 5)\n&gt;&gt;&gt; today == date.fromtimestamp(time.time())\nTrue\n&gt;&gt;&gt; my_birthday = date(today.year, 6, 24)\n&gt;&gt;&gt; if my_birthday &lt; today:\n...     my_birthday = my_birthday.replace(year=today.year + 1)\n&gt;&gt;&gt; my_birthday\ndatetime.date(2008, 6, 24)\n&gt;&gt;&gt; time_to_birthday = abs(my_birthday - today)\n&gt;&gt;&gt; time_to_birthday.days\n202\n</pre> <p>More examples of working with <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a>:</p> <pre data-language=\"pycon3\">&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; d = date.fromordinal(730920) # 730920th day after 1. 1. 0001\n&gt;&gt;&gt; d\ndatetime.date(2002, 3, 11)\n\n&gt;&gt;&gt; # Methods related to formatting string output\n&gt;&gt;&gt; d.isoformat()\n'2002-03-11'\n&gt;&gt;&gt; d.strftime(\"%d/%m/%y\")\n'11/03/02'\n&gt;&gt;&gt; d.strftime(\"%A %d. %B %Y\")\n'Monday 11. March 2002'\n&gt;&gt;&gt; d.ctime()\n'Mon Mar 11 00:00:00 2002'\n&gt;&gt;&gt; 'The {1} is {0:%d}, the {2} is {0:%B}.'.format(d, \"day\", \"month\")\n'The day is 11, the month is March.'\n\n&gt;&gt;&gt; # Methods for to extracting 'components' under different calendars\n&gt;&gt;&gt; t = d.timetuple()\n&gt;&gt;&gt; for i in t:     \n...     print(i)\n2002                # year\n3                   # month\n11                  # day\n0\n0\n0\n0                   # weekday (0 = Monday)\n70                  # 70th day in the year\n-1\n&gt;&gt;&gt; ic = d.isocalendar()\n&gt;&gt;&gt; for i in ic:    \n...     print(i)\n2002                # ISO year\n11                  # ISO week number\n1                   # ISO day number ( 1 = Monday )\n\n&gt;&gt;&gt; # A date object is immutable; all operations produce a new object\n&gt;&gt;&gt; d.replace(year=2005)\ndatetime.date(2005, 3, 11)\n</pre>    <h2 id=\"datetime-datetime\">datetime Objects</h2> <p id=\"datetime-objects\">A <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object is a single object containing all the information from a <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> object and a <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object.</p> <p>Like a <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> object, <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> assumes the current Gregorian calendar extended in both directions; like a <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object, <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> assumes there are exactly 3600*24 seconds in every day.</p> <p>Constructor:</p> <dl class=\"class\"> <dt id=\"datetime.datetime\">\n<code>class datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)</code> </dt> <dd>\n<p>The <em>year</em>, <em>month</em> and <em>day</em> arguments are required. <em>tzinfo</em> may be <code>None</code>, or an instance of a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass. The remaining arguments must be integers in the following ranges:</p> <ul class=\"simple\"> <li>\n<code>MINYEAR &lt;= year &lt;= MAXYEAR</code>,</li> <li>\n<code>1 &lt;= month &lt;= 12</code>,</li> <li>\n<code>1 &lt;= day &lt;= number of days in the given month and year</code>,</li> <li>\n<code>0 &lt;= hour &lt; 24</code>,</li> <li>\n<code>0 &lt;= minute &lt; 60</code>,</li> <li>\n<code>0 &lt;= second &lt; 60</code>,</li> <li>\n<code>0 &lt;= microsecond &lt; 1000000</code>,</li> <li>\n<code>fold in [0, 1]</code>.</li> </ul> <p>If an argument outside those ranges is given, <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6: </span>Added the <code>fold</code> argument.</p> </div> </dd>\n</dl> <p>Other constructors, all class methods:</p> <dl class=\"method\"> <dt id=\"datetime.datetime.today\">\n<code>classmethod datetime.today()</code> </dt> <dd>\n<p>Return the current local datetime, with <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> <code>None</code>.</p> <p>Equivalent to:</p> <pre data-language=\"python\">datetime.fromtimestamp(time.time())\n</pre> <p>See also <a class=\"reference internal\" href=\"#datetime.datetime.now\" title=\"datetime.datetime.now\"><code>now()</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime.fromtimestamp\" title=\"datetime.datetime.fromtimestamp\"><code>fromtimestamp()</code></a>.</p> <p>This method is functionally equivalent to <a class=\"reference internal\" href=\"#datetime.datetime.now\" title=\"datetime.datetime.now\"><code>now()</code></a>, but without a <code>tz</code> parameter.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.now\">\n<code>classmethod datetime.now(tz=None)</code> </dt> <dd>\n<p>Return the current local date and time.</p> <p>If optional argument <em>tz</em> is <code>None</code> or not specified, this is like <a class=\"reference internal\" href=\"#datetime.datetime.today\" title=\"datetime.datetime.today\"><code>today()</code></a>, but, if possible, supplies more precision than can be gotten from going through a <a class=\"reference internal\" href=\"time#time.time\" title=\"time.time\"><code>time.time()</code></a> timestamp (for example, this may be possible on platforms supplying the C <code>gettimeofday()</code> function).</p> <p>If <em>tz</em> is not <code>None</code>, it must be an instance of a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass, and the current date and time are converted to <em>tz</em>’s time zone.</p> <p>This function is preferred over <a class=\"reference internal\" href=\"#datetime.datetime.today\" title=\"datetime.datetime.today\"><code>today()</code></a> and <a class=\"reference internal\" href=\"#datetime.datetime.utcnow\" title=\"datetime.datetime.utcnow\"><code>utcnow()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.utcnow\">\n<code>classmethod datetime.utcnow()</code> </dt> <dd>\n<p>Return the current UTC date and time, with <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> <code>None</code>.</p> <p>This is like <a class=\"reference internal\" href=\"#datetime.datetime.now\" title=\"datetime.datetime.now\"><code>now()</code></a>, but returns the current UTC date and time, as a naive <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object. An aware current UTC datetime can be obtained by calling <code>datetime.now(timezone.utc)</code>. See also <a class=\"reference internal\" href=\"#datetime.datetime.now\" title=\"datetime.datetime.now\"><code>now()</code></a>.</p> <div class=\"admonition warning\"> <p class=\"admonition-title\">Warning</p> <p>Because naive <code>datetime</code> objects are treated by many <code>datetime</code> methods as local times, it is preferred to use aware datetimes to represent times in UTC. As such, the recommended way to create an object representing the current time in UTC is by calling <code>datetime.now(timezone.utc)</code>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.fromtimestamp\">\n<code>classmethod datetime.fromtimestamp(timestamp, tz=None)</code> </dt> <dd>\n<p>Return the local date and time corresponding to the POSIX timestamp, such as is returned by <a class=\"reference internal\" href=\"time#time.time\" title=\"time.time\"><code>time.time()</code></a>. If optional argument <em>tz</em> is <code>None</code> or not specified, the timestamp is converted to the platform’s local date and time, and the returned <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object is naive.</p> <p>If <em>tz</em> is not <code>None</code>, it must be an instance of a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass, and the timestamp is converted to <em>tz</em>’s time zone.</p> <p><a class=\"reference internal\" href=\"#datetime.datetime.fromtimestamp\" title=\"datetime.datetime.fromtimestamp\"><code>fromtimestamp()</code></a> may raise <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a>, if the timestamp is out of the range of values supported by the platform C <code>localtime()</code> or <code>gmtime()</code> functions, and <a class=\"reference internal\" href=\"exceptions#OSError\" title=\"OSError\"><code>OSError</code></a> on <code>localtime()</code> or <code>gmtime()</code> failure. It’s common for this to be restricted to years in 1970 through 2038. Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by <a class=\"reference internal\" href=\"#datetime.datetime.fromtimestamp\" title=\"datetime.datetime.fromtimestamp\"><code>fromtimestamp()</code></a>, and then it’s possible to have two timestamps differing by a second that yield identical <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> objects. This method is preferred over <a class=\"reference internal\" href=\"#datetime.datetime.utcfromtimestamp\" title=\"datetime.datetime.utcfromtimestamp\"><code>utcfromtimestamp()</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Raise <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> instead of <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> if the timestamp is out of the range of values supported by the platform C <code>localtime()</code> or <code>gmtime()</code> functions. Raise <a class=\"reference internal\" href=\"exceptions#OSError\" title=\"OSError\"><code>OSError</code></a> instead of <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> on <code>localtime()</code> or <code>gmtime()</code> failure.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span><a class=\"reference internal\" href=\"#datetime.datetime.fromtimestamp\" title=\"datetime.datetime.fromtimestamp\"><code>fromtimestamp()</code></a> may return instances with <a class=\"reference internal\" href=\"#datetime.datetime.fold\" title=\"datetime.datetime.fold\"><code>fold</code></a> set to 1.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.utcfromtimestamp\">\n<code>classmethod datetime.utcfromtimestamp(timestamp)</code> </dt> <dd>\n<p>Return the UTC <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> corresponding to the POSIX timestamp, with <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> <code>None</code>. (The resulting object is naive.)</p> <p>This may raise <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a>, if the timestamp is out of the range of values supported by the platform C <code>gmtime()</code> function, and <a class=\"reference internal\" href=\"exceptions#OSError\" title=\"OSError\"><code>OSError</code></a> on <code>gmtime()</code> failure. It’s common for this to be restricted to years in 1970 through 2038.</p> <p>To get an aware <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object, call <a class=\"reference internal\" href=\"#datetime.datetime.fromtimestamp\" title=\"datetime.datetime.fromtimestamp\"><code>fromtimestamp()</code></a>:</p> <pre data-language=\"python\">datetime.fromtimestamp(timestamp, timezone.utc)\n</pre> <p>On the POSIX compliant platforms, it is equivalent to the following expression:</p> <pre data-language=\"python\">datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(seconds=timestamp)\n</pre> <p>except the latter formula always supports the full years range: between <a class=\"reference internal\" href=\"#datetime.MINYEAR\" title=\"datetime.MINYEAR\"><code>MINYEAR</code></a> and <a class=\"reference internal\" href=\"#datetime.MAXYEAR\" title=\"datetime.MAXYEAR\"><code>MAXYEAR</code></a> inclusive.</p> <div class=\"admonition warning\"> <p class=\"admonition-title\">Warning</p> <p>Because naive <code>datetime</code> objects are treated by many <code>datetime</code> methods as local times, it is preferred to use aware datetimes to represent times in UTC. As such, the recommended way to create an object representing a specific timestamp in UTC is by calling <code>datetime.fromtimestamp(timestamp, tz=timezone.utc)</code>.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Raise <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> instead of <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> if the timestamp is out of the range of values supported by the platform C <code>gmtime()</code> function. Raise <a class=\"reference internal\" href=\"exceptions#OSError\" title=\"OSError\"><code>OSError</code></a> instead of <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> on <code>gmtime()</code> failure.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.fromordinal\">\n<code>classmethod datetime.fromordinal(ordinal)</code> </dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1. <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised unless <code>1\n&lt;= ordinal &lt;= datetime.max.toordinal()</code>. The hour, minute, second and microsecond of the result are all 0, and <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> is <code>None</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.combine\">\n<code>classmethod datetime.combine(date, time, tzinfo=self.tzinfo)</code> </dt> <dd>\n<p>Return a new <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object whose date components are equal to the given <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> object’s, and whose time components are equal to the given <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object’s. If the <em>tzinfo</em> argument is provided, its value is used to set the <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attribute of the result, otherwise the <a class=\"reference internal\" href=\"#datetime.time.tzinfo\" title=\"datetime.time.tzinfo\"><code>tzinfo</code></a> attribute of the <em>time</em> argument is used.</p> <p>For any <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object <em>d</em>, <code>d == datetime.combine(d.date(), d.time(), d.tzinfo)</code>. If date is a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object, its time components and <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attributes are ignored.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Added the <em>tzinfo</em> argument.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.fromisoformat\">\n<code>classmethod datetime.fromisoformat(date_string)</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> corresponding to a <em>date_string</em> in one of the formats emitted by <a class=\"reference internal\" href=\"#datetime.date.isoformat\" title=\"datetime.date.isoformat\"><code>date.isoformat()</code></a> and <a class=\"reference internal\" href=\"#datetime.datetime.isoformat\" title=\"datetime.datetime.isoformat\"><code>datetime.isoformat()</code></a>.</p> <p>Specifically, this function supports strings in the format:</p> <pre data-language=\"none\">YYYY-MM-DD[*HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]]\n</pre> <p>where <code>*</code> can match any single character.</p> <div class=\"admonition caution\"> <p class=\"admonition-title\">Caution</p> <p>This does <em>not</em> support parsing arbitrary ISO 8601 strings - it is only intended as the inverse operation of <a class=\"reference internal\" href=\"#datetime.datetime.isoformat\" title=\"datetime.datetime.isoformat\"><code>datetime.isoformat()</code></a>. A more full-featured ISO 8601 parser, <code>dateutil.parser.isoparse</code> is available in the third-party package <a class=\"reference external\" href=\"https://dateutil.readthedocs.io/en/stable/parser.html#dateutil.parser.isoparse\">dateutil</a>.</p> </div> <p>Examples:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; datetime.fromisoformat('2011-11-04')\ndatetime.datetime(2011, 11, 4, 0, 0)\n&gt;&gt;&gt; datetime.fromisoformat('2011-11-04T00:05:23')\ndatetime.datetime(2011, 11, 4, 0, 5, 23)\n&gt;&gt;&gt; datetime.fromisoformat('2011-11-04 00:05:23.283')\ndatetime.datetime(2011, 11, 4, 0, 5, 23, 283000)\n&gt;&gt;&gt; datetime.fromisoformat('2011-11-04 00:05:23.283+00:00')\ndatetime.datetime(2011, 11, 4, 0, 5, 23, 283000, tzinfo=datetime.timezone.utc)\n&gt;&gt;&gt; datetime.fromisoformat('2011-11-04T00:05:23+04:00')   \ndatetime.datetime(2011, 11, 4, 0, 5, 23,\n    tzinfo=datetime.timezone(datetime.timedelta(seconds=14400)))\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.7.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.fromisocalendar\">\n<code>classmethod datetime.fromisocalendar(year, week, day)</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> corresponding to the ISO calendar date specified by year, week and day. The non-date components of the datetime are populated with their normal default values. This is the inverse of the function <a class=\"reference internal\" href=\"#datetime.datetime.isocalendar\" title=\"datetime.datetime.isocalendar\"><code>datetime.isocalendar()</code></a>.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.8.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.strptime\">\n<code>classmethod datetime.strptime(date_string, format)</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> corresponding to <em>date_string</em>, parsed according to <em>format</em>.</p> <p>This is equivalent to:</p> <pre data-language=\"python\">datetime(*(time.strptime(date_string, format)[0:6]))\n</pre> <p><a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised if the date_string and format can’t be parsed by <a class=\"reference internal\" href=\"time#time.strptime\" title=\"time.strptime\"><code>time.strptime()</code></a> or if it returns a value which isn’t a time tuple. For a complete list of formatting directives, see <a class=\"reference internal\" href=\"#strftime-strptime-behavior\"><span class=\"std std-ref\">strftime() and strptime() Behavior</span></a>.</p> </dd>\n</dl> <p>Class attributes:</p> <dl class=\"attribute\"> <dt id=\"datetime.datetime.min\">\n<code>datetime.min</code> </dt> <dd>\n<p>The earliest representable <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a>, <code>datetime(MINYEAR, 1, 1,\ntzinfo=None)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.datetime.max\">\n<code>datetime.max</code> </dt> <dd>\n<p>The latest representable <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a>, <code>datetime(MAXYEAR, 12, 31, 23, 59,\n59, 999999, tzinfo=None)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.datetime.resolution\">\n<code>datetime.resolution</code> </dt> <dd>\n<p>The smallest possible difference between non-equal <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> objects, <code>timedelta(microseconds=1)</code>.</p> </dd>\n</dl> <p>Instance attributes (read-only):</p> <dl class=\"attribute\"> <dt id=\"datetime.datetime.year\">\n<code>datetime.year</code> </dt> <dd>\n<p>Between <a class=\"reference internal\" href=\"#datetime.MINYEAR\" title=\"datetime.MINYEAR\"><code>MINYEAR</code></a> and <a class=\"reference internal\" href=\"#datetime.MAXYEAR\" title=\"datetime.MAXYEAR\"><code>MAXYEAR</code></a> inclusive.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.datetime.month\">\n<code>datetime.month</code> </dt> <dd>\n<p>Between 1 and 12 inclusive.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.datetime.day\">\n<code>datetime.day</code> </dt> <dd>\n<p>Between 1 and the number of days in the given month of the given year.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.datetime.hour\">\n<code>datetime.hour</code> </dt> <dd>\n<p>In <code>range(24)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.datetime.minute\">\n<code>datetime.minute</code> </dt> <dd>\n<p>In <code>range(60)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.datetime.second\">\n<code>datetime.second</code> </dt> <dd>\n<p>In <code>range(60)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.datetime.microsecond\">\n<code>datetime.microsecond</code> </dt> <dd>\n<p>In <code>range(1000000)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.datetime.tzinfo\">\n<code>datetime.tzinfo</code> </dt> <dd>\n<p>The object passed as the <em>tzinfo</em> argument to the <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> constructor, or <code>None</code> if none was passed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.datetime.fold\">\n<code>datetime.fold</code> </dt> <dd>\n<p>In <code>[0, 1]</code>. Used to disambiguate wall times during a repeated interval. (A repeated interval occurs when clocks are rolled back at the end of daylight saving time or when the UTC offset for the current zone is decreased for political reasons.) The value 0 (1) represents the earlier (later) of the two moments with the same wall time representation.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6.</span></p> </div> </dd>\n</dl> <p>Supported operations:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Operation</p></th> <th class=\"head\"><p>Result</p></th> </tr> </thead>  <tr>\n<td><p><code>datetime2 = datetime1 + timedelta</code></p></td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>datetime2 = datetime1 - timedelta</code></p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>timedelta = datetime1 - datetime2</code></p></td> <td><p>(3)</p></td> </tr> <tr>\n<td><p><code>datetime1 &lt; datetime2</code></p></td> <td><p>Compares <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> to <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a>. (4)</p></td> </tr>  </table> <ol class=\"arabic\"> <li>datetime2 is a duration of timedelta removed from datetime1, moving forward in time if <code>timedelta.days</code> &gt; 0, or backward if <code>timedelta.days</code> &lt; 0. The result has the same <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attribute as the input datetime, and datetime2 - datetime1 == timedelta after. <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> is raised if datetime2.year would be smaller than <a class=\"reference internal\" href=\"#datetime.MINYEAR\" title=\"datetime.MINYEAR\"><code>MINYEAR</code></a> or larger than <a class=\"reference internal\" href=\"#datetime.MAXYEAR\" title=\"datetime.MAXYEAR\"><code>MAXYEAR</code></a>. Note that no time zone adjustments are done even if the input is an aware object.</li> <li>Computes the datetime2 such that datetime2 + timedelta == datetime1. As for addition, the result has the same <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attribute as the input datetime, and no time zone adjustments are done even if the input is aware.</li> <li>\n<p>Subtraction of a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> from a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> is defined only if both operands are naive, or if both are aware. If one is aware and the other is naive, <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> is raised.</p> <p>If both are naive, or both are aware and have the same <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attribute, the <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attributes are ignored, and the result is a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object <em>t</em> such that <code>datetime2 + t == datetime1</code>. No time zone adjustments are done in this case.</p> <p>If both are aware and have different <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attributes, <code>a-b</code> acts as if <em>a</em> and <em>b</em> were first converted to naive UTC datetimes first. The result is <code>(a.replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None)\n- b.utcoffset())</code> except that the implementation never overflows.</p> </li> <li>\n<p><em>datetime1</em> is considered less than <em>datetime2</em> when <em>datetime1</em> precedes <em>datetime2</em> in time.</p> <p>If one comparand is naive and the other is aware, <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> is raised if an order comparison is attempted. For equality comparisons, naive instances are never equal to aware instances.</p> <p>If both comparands are aware, and have the same <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attribute, the common <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attribute is ignored and the base datetimes are compared. If both comparands are aware and have different <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attributes, the comparands are first adjusted by subtracting their UTC offsets (obtained from <code>self.utcoffset()</code>).</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Equality comparisons between aware and naive <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> instances don’t raise <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a>.</p> </div> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>In order to stop comparison from falling back to the default scheme of comparing object addresses, datetime comparison normally raises <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> if the other comparand isn’t also a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object. However, <code>NotImplemented</code> is returned instead if the other comparand has a <code>timetuple()</code> attribute. This hook gives other kinds of date objects a chance at implementing mixed-type comparison. If not, when a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object is compared to an object of a different type, <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> is raised unless the comparison is <code>==</code> or <code>!=</code>. The latter cases return <a class=\"reference internal\" href=\"constants#False\" title=\"False\"><code>False</code></a> or <a class=\"reference internal\" href=\"constants#True\" title=\"True\"><code>True</code></a>, respectively.</p> </div> </li> </ol> <p>Instance methods:</p> <dl class=\"method\"> <dt id=\"datetime.datetime.date\">\n<code>datetime.date()</code> </dt> <dd>\n<p>Return <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> object with same year, month and day.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.time\">\n<code>datetime.time()</code> </dt> <dd>\n<p>Return <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object with same hour, minute, second, microsecond and fold. <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> is <code>None</code>. See also method <a class=\"reference internal\" href=\"#datetime.datetime.timetz\" title=\"datetime.datetime.timetz\"><code>timetz()</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>The fold value is copied to the returned <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.timetz\">\n<code>datetime.timetz()</code> </dt> <dd>\n<p>Return <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object with same hour, minute, second, microsecond, fold, and tzinfo attributes. See also method <a class=\"reference internal\" href=\"time#module-time\" title=\"time: Time access and conversions.\"><code>time()</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>The fold value is copied to the returned <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.replace\">\n<code>datetime.replace(year=self.year, month=self.month, day=self.day, hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, *, fold=0)</code> </dt> <dd>\n<p>Return a datetime with the same attributes, except for those attributes given new values by whichever keyword arguments are specified. Note that <code>tzinfo=None</code> can be specified to create a naive datetime from an aware datetime with no conversion of date and time data.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6: </span>Added the <code>fold</code> argument.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.astimezone\">\n<code>datetime.astimezone(tz=None)</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object with new <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attribute <em>tz</em>, adjusting the date and time data so the result is the same UTC time as <em>self</em>, but in <em>tz</em>’s local time.</p> <p>If provided, <em>tz</em> must be an instance of a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass, and its <a class=\"reference internal\" href=\"#datetime.datetime.utcoffset\" title=\"datetime.datetime.utcoffset\"><code>utcoffset()</code></a> and <a class=\"reference internal\" href=\"#datetime.datetime.dst\" title=\"datetime.datetime.dst\"><code>dst()</code></a> methods must not return <code>None</code>. If <em>self</em> is naive, it is presumed to represent time in the system timezone.</p> <p>If called without arguments (or with <code>tz=None</code>) the system local timezone is assumed for the target timezone. The <code>.tzinfo</code> attribute of the converted datetime instance will be set to an instance of <a class=\"reference internal\" href=\"#datetime.timezone\" title=\"datetime.timezone\"><code>timezone</code></a> with the zone name and offset obtained from the OS.</p> <p>If <code>self.tzinfo</code> is <em>tz</em>, <code>self.astimezone(tz)</code> is equal to <em>self</em>: no adjustment of date or time data is performed. Else the result is local time in the timezone <em>tz</em>, representing the same UTC time as <em>self</em>: after <code>astz = dt.astimezone(tz)</code>, <code>astz - astz.utcoffset()</code> will have the same date and time data as <code>dt - dt.utcoffset()</code>.</p> <p>If you merely want to attach a time zone object <em>tz</em> to a datetime <em>dt</em> without adjustment of date and time data, use <code>dt.replace(tzinfo=tz)</code>. If you merely want to remove the time zone object from an aware datetime <em>dt</em> without conversion of date and time data, use <code>dt.replace(tzinfo=None)</code>.</p> <p>Note that the default <a class=\"reference internal\" href=\"#datetime.tzinfo.fromutc\" title=\"datetime.tzinfo.fromutc\"><code>tzinfo.fromutc()</code></a> method can be overridden in a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass to affect the result returned by <a class=\"reference internal\" href=\"#datetime.datetime.astimezone\" title=\"datetime.datetime.astimezone\"><code>astimezone()</code></a>. Ignoring error cases, <a class=\"reference internal\" href=\"#datetime.datetime.astimezone\" title=\"datetime.datetime.astimezone\"><code>astimezone()</code></a> acts like:</p> <pre data-language=\"python\">def astimezone(self, tz):\n    if self.tzinfo is tz:\n        return self\n    # Convert self to UTC, and attach the new time zone object.\n    utc = (self - self.utcoffset()).replace(tzinfo=tz)\n    # Convert from UTC to tz's local time.\n    return tz.fromutc(utc)\n</pre> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span><em>tz</em> now can be omitted.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>The <a class=\"reference internal\" href=\"#datetime.datetime.astimezone\" title=\"datetime.datetime.astimezone\"><code>astimezone()</code></a> method can now be called on naive instances that are presumed to represent system local time.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.utcoffset\">\n<code>datetime.utcoffset()</code> </dt> <dd>\n<p>If <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> is <code>None</code>, returns <code>None</code>, else returns <code>self.tzinfo.utcoffset(self)</code>, and raises an exception if the latter doesn’t return <code>None</code> or a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object with magnitude less than one day.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The UTC offset is not restricted to a whole number of minutes.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.dst\">\n<code>datetime.dst()</code> </dt> <dd>\n<p>If <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> is <code>None</code>, returns <code>None</code>, else returns <code>self.tzinfo.dst(self)</code>, and raises an exception if the latter doesn’t return <code>None</code> or a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object with magnitude less than one day.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The DST offset is not restricted to a whole number of minutes.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.tzname\">\n<code>datetime.tzname()</code> </dt> <dd>\n<p>If <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> is <code>None</code>, returns <code>None</code>, else returns <code>self.tzinfo.tzname(self)</code>, raises an exception if the latter doesn’t return <code>None</code> or a string object,</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.timetuple\">\n<code>datetime.timetuple()</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"time#time.struct_time\" title=\"time.struct_time\"><code>time.struct_time</code></a> such as returned by <a class=\"reference internal\" href=\"time#time.localtime\" title=\"time.localtime\"><code>time.localtime()</code></a>.</p> <p><code>d.timetuple()</code> is equivalent to:</p> <pre data-language=\"python\">time.struct_time((d.year, d.month, d.day,\n                  d.hour, d.minute, d.second,\n                  d.weekday(), yday, dst))\n</pre> <p>where <code>yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1</code> is the day number within the current year starting with <code>1</code> for January 1st. The <code>tm_isdst</code> flag of the result is set according to the <a class=\"reference internal\" href=\"#datetime.datetime.dst\" title=\"datetime.datetime.dst\"><code>dst()</code></a> method: <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> is <code>None</code> or <a class=\"reference internal\" href=\"#datetime.datetime.dst\" title=\"datetime.datetime.dst\"><code>dst()</code></a> returns <code>None</code>, <code>tm_isdst</code> is set to <code>-1</code>; else if <a class=\"reference internal\" href=\"#datetime.datetime.dst\" title=\"datetime.datetime.dst\"><code>dst()</code></a> returns a non-zero value, <code>tm_isdst</code> is set to <code>1</code>; else <code>tm_isdst</code> is set to <code>0</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.utctimetuple\">\n<code>datetime.utctimetuple()</code> </dt> <dd>\n<p>If <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> instance <em>d</em> is naive, this is the same as <code>d.timetuple()</code> except that <code>tm_isdst</code> is forced to 0 regardless of what <code>d.dst()</code> returns. DST is never in effect for a UTC time.</p> <p>If <em>d</em> is aware, <em>d</em> is normalized to UTC time, by subtracting <code>d.utcoffset()</code>, and a <a class=\"reference internal\" href=\"time#time.struct_time\" title=\"time.struct_time\"><code>time.struct_time</code></a> for the normalized time is returned. <code>tm_isdst</code> is forced to 0. Note that an <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> may be raised if <em>d</em>.year was <code>MINYEAR</code> or <code>MAXYEAR</code> and UTC adjustment spills over a year boundary.</p> <div class=\"admonition warning\"> <p class=\"admonition-title\">Warning</p> <p>Because naive <code>datetime</code> objects are treated by many <code>datetime</code> methods as local times, it is preferred to use aware datetimes to represent times in UTC; as a result, using <code>utcfromtimetuple</code> may give misleading results. If you have a naive <code>datetime</code> representing UTC, use <code>datetime.replace(tzinfo=timezone.utc)</code> to make it aware, at which point you can use <a class=\"reference internal\" href=\"#datetime.datetime.timetuple\" title=\"datetime.datetime.timetuple\"><code>datetime.timetuple()</code></a>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.toordinal\">\n<code>datetime.toordinal()</code> </dt> <dd>\n<p>Return the proleptic Gregorian ordinal of the date. The same as <code>self.date().toordinal()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.timestamp\">\n<code>datetime.timestamp()</code> </dt> <dd>\n<p>Return POSIX timestamp corresponding to the <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> instance. The return value is a <a class=\"reference internal\" href=\"functions#float\" title=\"float\"><code>float</code></a> similar to that returned by <a class=\"reference internal\" href=\"time#time.time\" title=\"time.time\"><code>time.time()</code></a>.</p> <p>Naive <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> instances are assumed to represent local time and this method relies on the platform C <code>mktime()</code> function to perform the conversion. Since <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> supports wider range of values than <code>mktime()</code> on many platforms, this method may raise <a class=\"reference internal\" href=\"exceptions#OverflowError\" title=\"OverflowError\"><code>OverflowError</code></a> for times far in the past or far in the future.</p> <p>For aware <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> instances, the return value is computed as:</p> <pre data-language=\"python\">(dt - datetime(1970, 1, 1, tzinfo=timezone.utc)).total_seconds()\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.3.</span></p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>The <a class=\"reference internal\" href=\"#datetime.datetime.timestamp\" title=\"datetime.datetime.timestamp\"><code>timestamp()</code></a> method uses the <a class=\"reference internal\" href=\"#datetime.datetime.fold\" title=\"datetime.datetime.fold\"><code>fold</code></a> attribute to disambiguate the times during a repeated interval.</p> </div> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>There is no method to obtain the POSIX timestamp directly from a naive <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> instance representing UTC time. If your application uses this convention and your system timezone is not set to UTC, you can obtain the POSIX timestamp by supplying <code>tzinfo=timezone.utc</code>:</p> <pre data-language=\"python\">timestamp = dt.replace(tzinfo=timezone.utc).timestamp()\n</pre> <p>or by calculating the timestamp directly:</p> <pre data-language=\"python\">timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)\n</pre> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.weekday\">\n<code>datetime.weekday()</code> </dt> <dd>\n<p>Return the day of the week as an integer, where Monday is 0 and Sunday is 6. The same as <code>self.date().weekday()</code>. See also <a class=\"reference internal\" href=\"#datetime.datetime.isoweekday\" title=\"datetime.datetime.isoweekday\"><code>isoweekday()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.isoweekday\">\n<code>datetime.isoweekday()</code> </dt> <dd>\n<p>Return the day of the week as an integer, where Monday is 1 and Sunday is 7. The same as <code>self.date().isoweekday()</code>. See also <a class=\"reference internal\" href=\"#datetime.datetime.weekday\" title=\"datetime.datetime.weekday\"><code>weekday()</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime.isocalendar\" title=\"datetime.datetime.isocalendar\"><code>isocalendar()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.isocalendar\">\n<code>datetime.isocalendar()</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"https://docs.python.org/3.9/glossary.html#term-named-tuple\"><span class=\"xref std std-term\">named tuple</span></a> with three components: <code>year</code>, <code>week</code> and <code>weekday</code>. The same as <code>self.date().isocalendar()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.isoformat\">\n<code>datetime.isoformat(sep='T', timespec='auto')</code> </dt> <dd>\n<p>Return a string representing the date and time in ISO 8601 format:</p> <ul class=\"simple\"> <li>\n<code>YYYY-MM-DDTHH:MM:SS.ffffff</code>, if <a class=\"reference internal\" href=\"#datetime.datetime.microsecond\" title=\"datetime.datetime.microsecond\"><code>microsecond</code></a> is not 0</li> <li>\n<code>YYYY-MM-DDTHH:MM:SS</code>, if <a class=\"reference internal\" href=\"#datetime.datetime.microsecond\" title=\"datetime.datetime.microsecond\"><code>microsecond</code></a> is 0</li> </ul> <p>If <a class=\"reference internal\" href=\"#datetime.datetime.utcoffset\" title=\"datetime.datetime.utcoffset\"><code>utcoffset()</code></a> does not return <code>None</code>, a string is appended, giving the UTC offset:</p> <ul class=\"simple\"> <li>\n<code>YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]</code>, if <a class=\"reference internal\" href=\"#datetime.datetime.microsecond\" title=\"datetime.datetime.microsecond\"><code>microsecond</code></a> is not 0</li> <li>\n<code>YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]</code>, if <a class=\"reference internal\" href=\"#datetime.datetime.microsecond\" title=\"datetime.datetime.microsecond\"><code>microsecond</code></a> is 0</li> </ul> <p>Examples:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import datetime, timezone\n&gt;&gt;&gt; datetime(2019, 5, 18, 15, 17, 8, 132263).isoformat()\n'2019-05-18T15:17:08.132263'\n&gt;&gt;&gt; datetime(2019, 5, 18, 15, 17, tzinfo=timezone.utc).isoformat()\n'2019-05-18T15:17:00+00:00'\n</pre> <p>The optional argument <em>sep</em> (default <code>'T'</code>) is a one-character separator, placed between the date and time portions of the result. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import tzinfo, timedelta, datetime\n&gt;&gt;&gt; class TZ(tzinfo):\n...     \"\"\"A time zone with an arbitrary, constant -06:39 offset.\"\"\"\n...     def utcoffset(self, dt):\n...         return timedelta(hours=-6, minutes=-39)\n...\n&gt;&gt;&gt; datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')\n'2002-12-25 00:00:00-06:39'\n&gt;&gt;&gt; datetime(2009, 11, 27, microsecond=100, tzinfo=TZ()).isoformat()\n'2009-11-27T00:00:00.000100-06:39'\n</pre> <p>The optional argument <em>timespec</em> specifies the number of additional components of the time to include (the default is <code>'auto'</code>). It can be one of the following:</p> <ul class=\"simple\"> <li>\n<code>'auto'</code>: Same as <code>'seconds'</code> if <a class=\"reference internal\" href=\"#datetime.datetime.microsecond\" title=\"datetime.datetime.microsecond\"><code>microsecond</code></a> is 0, same as <code>'microseconds'</code> otherwise.</li> <li>\n<code>'hours'</code>: Include the <a class=\"reference internal\" href=\"#datetime.datetime.hour\" title=\"datetime.datetime.hour\"><code>hour</code></a> in the two-digit <code>HH</code> format.</li> <li>\n<code>'minutes'</code>: Include <a class=\"reference internal\" href=\"#datetime.datetime.hour\" title=\"datetime.datetime.hour\"><code>hour</code></a> and <a class=\"reference internal\" href=\"#datetime.datetime.minute\" title=\"datetime.datetime.minute\"><code>minute</code></a> in <code>HH:MM</code> format.</li> <li>\n<code>'seconds'</code>: Include <a class=\"reference internal\" href=\"#datetime.datetime.hour\" title=\"datetime.datetime.hour\"><code>hour</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime.minute\" title=\"datetime.datetime.minute\"><code>minute</code></a>, and <a class=\"reference internal\" href=\"#datetime.datetime.second\" title=\"datetime.datetime.second\"><code>second</code></a> in <code>HH:MM:SS</code> format.</li> <li>\n<code>'milliseconds'</code>: Include full time, but truncate fractional second part to milliseconds. <code>HH:MM:SS.sss</code> format.</li> <li>\n<code>'microseconds'</code>: Include full time in <code>HH:MM:SS.ffffff</code> format.</li> </ul> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>Excluded time components are truncated, not rounded.</p> </div> <p><a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> will be raised on an invalid <em>timespec</em> argument:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; datetime.now().isoformat(timespec='minutes')   \n'2002-12-25T00:00'\n&gt;&gt;&gt; dt = datetime(2015, 1, 1, 12, 30, 59, 0)\n&gt;&gt;&gt; dt.isoformat(timespec='microseconds')\n'2015-01-01T12:30:59.000000'\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6: </span>Added the <em>timespec</em> argument.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.__str__\">\n<code>datetime.__str__()</code> </dt> <dd>\n<p>For a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> instance <em>d</em>, <code>str(d)</code> is equivalent to <code>d.isoformat(' ')</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.ctime\">\n<code>datetime.ctime()</code> </dt> <dd>\n<p>Return a string representing the date and time:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; datetime(2002, 12, 4, 20, 30, 40).ctime()\n'Wed Dec  4 20:30:40 2002'\n</pre> <p>The output string will <em>not</em> include time zone information, regardless of whether the input is aware or naive.</p> <p><code>d.ctime()</code> is equivalent to:</p> <pre data-language=\"python\">time.ctime(time.mktime(d.timetuple()))\n</pre> <p>on platforms where the native C <code>ctime()</code> function (which <a class=\"reference internal\" href=\"time#time.ctime\" title=\"time.ctime\"><code>time.ctime()</code></a> invokes, but which <a class=\"reference internal\" href=\"#datetime.datetime.ctime\" title=\"datetime.datetime.ctime\"><code>datetime.ctime()</code></a> does not invoke) conforms to the C standard.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.strftime\">\n<code>datetime.strftime(format)</code> </dt> <dd>\n<p>Return a string representing the date and time, controlled by an explicit format string. For a complete list of formatting directives, see <a class=\"reference internal\" href=\"#strftime-strptime-behavior\"><span class=\"std std-ref\">strftime() and strptime() Behavior</span></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.datetime.__format__\">\n<code>datetime.__format__(format)</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#datetime.datetime.strftime\" title=\"datetime.datetime.strftime\"><code>datetime.strftime()</code></a>. This makes it possible to specify a format string for a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object in <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings\"><span class=\"std std-ref\">formatted string literals</span></a> and when using <a class=\"reference internal\" href=\"stdtypes#str.format\" title=\"str.format\"><code>str.format()</code></a>. For a complete list of formatting directives, see <a class=\"reference internal\" href=\"#strftime-strptime-behavior\"><span class=\"std std-ref\">strftime() and strptime() Behavior</span></a>.</p> </dd>\n</dl>  <h3 id=\"examples-of-usage-datetime\">Examples of Usage: <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a>\n</h3> <p>Examples of working with <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> objects:</p> <pre data-language=\"pycon3\">&gt;&gt;&gt; from datetime import datetime, date, time, timezone\n\n&gt;&gt;&gt; # Using datetime.combine()\n&gt;&gt;&gt; d = date(2005, 7, 14)\n&gt;&gt;&gt; t = time(12, 30)\n&gt;&gt;&gt; datetime.combine(d, t)\ndatetime.datetime(2005, 7, 14, 12, 30)\n\n&gt;&gt;&gt; # Using datetime.now()\n&gt;&gt;&gt; datetime.now()   \ndatetime.datetime(2007, 12, 6, 16, 29, 43, 79043)   # GMT +1\n&gt;&gt;&gt; datetime.now(timezone.utc)   \ndatetime.datetime(2007, 12, 6, 15, 29, 43, 79060, tzinfo=datetime.timezone.utc)\n\n&gt;&gt;&gt; # Using datetime.strptime()\n&gt;&gt;&gt; dt = datetime.strptime(\"21/11/06 16:30\", \"%d/%m/%y %H:%M\")\n&gt;&gt;&gt; dt\ndatetime.datetime(2006, 11, 21, 16, 30)\n\n&gt;&gt;&gt; # Using datetime.timetuple() to get tuple of all attributes\n&gt;&gt;&gt; tt = dt.timetuple()\n&gt;&gt;&gt; for it in tt:   \n...     print(it)\n...\n2006    # year\n11      # month\n21      # day\n16      # hour\n30      # minute\n0       # second\n1       # weekday (0 = Monday)\n325     # number of days since 1st January\n-1      # dst - method tzinfo.dst() returned None\n\n&gt;&gt;&gt; # Date in ISO format\n&gt;&gt;&gt; ic = dt.isocalendar()\n&gt;&gt;&gt; for it in ic:   \n...     print(it)\n...\n2006    # ISO year\n47      # ISO week\n2       # ISO weekday\n\n&gt;&gt;&gt; # Formatting a datetime\n&gt;&gt;&gt; dt.strftime(\"%A, %d. %B %Y %I:%M%p\")\n'Tuesday, 21. November 2006 04:30PM'\n&gt;&gt;&gt; 'The {1} is {0:%d}, the {2} is {0:%B}, the {3} is {0:%I:%M%p}.'.format(dt, \"day\", \"month\", \"time\")\n'The day is 21, the month is November, the time is 04:30PM.'\n</pre> <p>The example below defines a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass capturing time zone information for Kabul, Afghanistan, which used +4 UTC until 1945 and then +4:30 UTC thereafter:</p> <pre data-language=\"python\">from datetime import timedelta, datetime, tzinfo, timezone\n\nclass KabulTz(tzinfo):\n    # Kabul used +4 until 1945, when they moved to +4:30\n    UTC_MOVE_DATE = datetime(1944, 12, 31, 20, tzinfo=timezone.utc)\n\n    def utcoffset(self, dt):\n        if dt.year &lt; 1945:\n            return timedelta(hours=4)\n        elif (1945, 1, 1, 0, 0) &lt;= dt.timetuple()[:5] &lt; (1945, 1, 1, 0, 30):\n            # An ambiguous (\"imaginary\") half-hour range representing\n            # a 'fold' in time due to the shift from +4 to +4:30.\n            # If dt falls in the imaginary range, use fold to decide how\n            # to resolve. See PEP495.\n            return timedelta(hours=4, minutes=(30 if dt.fold else 0))\n        else:\n            return timedelta(hours=4, minutes=30)\n\n    def fromutc(self, dt):\n        # Follow same validations as in datetime.tzinfo\n        if not isinstance(dt, datetime):\n            raise TypeError(\"fromutc() requires a datetime argument\")\n        if dt.tzinfo is not self:\n            raise ValueError(\"dt.tzinfo is not self\")\n\n        # A custom implementation is required for fromutc as\n        # the input to this function is a datetime with utc values\n        # but with a tzinfo set to self.\n        # See datetime.astimezone or fromtimestamp.\n        if dt.replace(tzinfo=timezone.utc) &gt;= self.UTC_MOVE_DATE:\n            return dt + timedelta(hours=4, minutes=30)\n        else:\n            return dt + timedelta(hours=4)\n\n    def dst(self, dt):\n        # Kabul does not observe daylight saving time.\n        return timedelta(0)\n\n    def tzname(self, dt):\n        if dt &gt;= self.UTC_MOVE_DATE:\n            return \"+04:30\"\n        return \"+04\"\n</pre> <p>Usage of <code>KabulTz</code> from above:</p> <pre data-language=\"python\">&gt;&gt;&gt; tz1 = KabulTz()\n\n&gt;&gt;&gt; # Datetime before the change\n&gt;&gt;&gt; dt1 = datetime(1900, 11, 21, 16, 30, tzinfo=tz1)\n&gt;&gt;&gt; print(dt1.utcoffset())\n4:00:00\n\n&gt;&gt;&gt; # Datetime after the change\n&gt;&gt;&gt; dt2 = datetime(2006, 6, 14, 13, 0, tzinfo=tz1)\n&gt;&gt;&gt; print(dt2.utcoffset())\n4:30:00\n\n&gt;&gt;&gt; # Convert datetime to another time zone\n&gt;&gt;&gt; dt3 = dt2.astimezone(timezone.utc)\n&gt;&gt;&gt; dt3\ndatetime.datetime(2006, 6, 14, 8, 30, tzinfo=datetime.timezone.utc)\n&gt;&gt;&gt; dt2\ndatetime.datetime(2006, 6, 14, 13, 0, tzinfo=KabulTz())\n&gt;&gt;&gt; dt2 == dt3\nTrue\n</pre>    <h2 id=\"datetime-time\">time Objects</h2> <p id=\"time-objects\">A <a class=\"reference internal\" href=\"time#module-time\" title=\"time: Time access and conversions.\"><code>time</code></a> object represents a (local) time of day, independent of any particular day, and subject to adjustment via a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> object.</p> <dl class=\"class\"> <dt id=\"datetime.time\">\n<code>class datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)</code> </dt> <dd>\n<p>All arguments are optional. <em>tzinfo</em> may be <code>None</code>, or an instance of a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass. The remaining arguments must be integers in the following ranges:</p> <ul class=\"simple\"> <li>\n<code>0 &lt;= hour &lt; 24</code>,</li> <li>\n<code>0 &lt;= minute &lt; 60</code>,</li> <li>\n<code>0 &lt;= second &lt; 60</code>,</li> <li>\n<code>0 &lt;= microsecond &lt; 1000000</code>,</li> <li>\n<code>fold in [0, 1]</code>.</li> </ul> <p>If an argument outside those ranges is given, <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised. All default to <code>0</code> except <em>tzinfo</em>, which defaults to <a class=\"reference internal\" href=\"constants#None\" title=\"None\"><code>None</code></a>.</p> </dd>\n</dl> <p>Class attributes:</p> <dl class=\"attribute\"> <dt id=\"datetime.time.min\">\n<code>time.min</code> </dt> <dd>\n<p>The earliest representable <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a>, <code>time(0, 0, 0, 0)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.time.max\">\n<code>time.max</code> </dt> <dd>\n<p>The latest representable <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a>, <code>time(23, 59, 59, 999999)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.time.resolution\">\n<code>time.resolution</code> </dt> <dd>\n<p>The smallest possible difference between non-equal <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> objects, <code>timedelta(microseconds=1)</code>, although note that arithmetic on <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> objects is not supported.</p> </dd>\n</dl> <p>Instance attributes (read-only):</p> <dl class=\"attribute\"> <dt id=\"datetime.time.hour\">\n<code>time.hour</code> </dt> <dd>\n<p>In <code>range(24)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.time.minute\">\n<code>time.minute</code> </dt> <dd>\n<p>In <code>range(60)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.time.second\">\n<code>time.second</code> </dt> <dd>\n<p>In <code>range(60)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.time.microsecond\">\n<code>time.microsecond</code> </dt> <dd>\n<p>In <code>range(1000000)</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.time.tzinfo\">\n<code>time.tzinfo</code> </dt> <dd>\n<p>The object passed as the tzinfo argument to the <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> constructor, or <code>None</code> if none was passed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"datetime.time.fold\">\n<code>time.fold</code> </dt> <dd>\n<p>In <code>[0, 1]</code>. Used to disambiguate wall times during a repeated interval. (A repeated interval occurs when clocks are rolled back at the end of daylight saving time or when the UTC offset for the current zone is decreased for political reasons.) The value 0 (1) represents the earlier (later) of the two moments with the same wall time representation.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6.</span></p> </div> </dd>\n</dl> <p><a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> objects support comparison of <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> to <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a>, where <em>a</em> is considered less than <em>b</em> when <em>a</em> precedes <em>b</em> in time. If one comparand is naive and the other is aware, <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> is raised if an order comparison is attempted. For equality comparisons, naive instances are never equal to aware instances.</p> <p>If both comparands are aware, and have the same <a class=\"reference internal\" href=\"#datetime.time.tzinfo\" title=\"datetime.time.tzinfo\"><code>tzinfo</code></a> attribute, the common <a class=\"reference internal\" href=\"#datetime.time.tzinfo\" title=\"datetime.time.tzinfo\"><code>tzinfo</code></a> attribute is ignored and the base times are compared. If both comparands are aware and have different <a class=\"reference internal\" href=\"#datetime.time.tzinfo\" title=\"datetime.time.tzinfo\"><code>tzinfo</code></a> attributes, the comparands are first adjusted by subtracting their UTC offsets (obtained from <code>self.utcoffset()</code>). In order to stop mixed-type comparisons from falling back to the default comparison by object address, when a <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object is compared to an object of a different type, <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a> is raised unless the comparison is <code>==</code> or <code>!=</code>. The latter cases return <a class=\"reference internal\" href=\"constants#False\" title=\"False\"><code>False</code></a> or <a class=\"reference internal\" href=\"constants#True\" title=\"True\"><code>True</code></a>, respectively.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>Equality comparisons between aware and naive <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> instances don’t raise <a class=\"reference internal\" href=\"exceptions#TypeError\" title=\"TypeError\"><code>TypeError</code></a>.</p> </div> <p>In Boolean contexts, a <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object is always considered to be true.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.5: </span>Before Python 3.5, a <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object was considered to be false if it represented midnight in UTC. This behavior was considered obscure and error-prone and has been removed in Python 3.5. See <a class=\"reference external\" href=\"https://bugs.python.org/issue13936\">bpo-13936</a> for full details.</p> </div> <p>Other constructor:</p> <dl class=\"method\"> <dt id=\"datetime.time.fromisoformat\">\n<code>classmethod time.fromisoformat(time_string)</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> corresponding to a <em>time_string</em> in one of the formats emitted by <a class=\"reference internal\" href=\"#datetime.time.isoformat\" title=\"datetime.time.isoformat\"><code>time.isoformat()</code></a>. Specifically, this function supports strings in the format:</p> <pre data-language=\"none\">HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]\n</pre> <div class=\"admonition caution\"> <p class=\"admonition-title\">Caution</p> <p>This does <em>not</em> support parsing arbitrary ISO 8601 strings. It is only intended as the inverse operation of <a class=\"reference internal\" href=\"#datetime.time.isoformat\" title=\"datetime.time.isoformat\"><code>time.isoformat()</code></a>.</p> </div> <p>Examples:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import time\n&gt;&gt;&gt; time.fromisoformat('04:23:01')\ndatetime.time(4, 23, 1)\n&gt;&gt;&gt; time.fromisoformat('04:23:01.000384')\ndatetime.time(4, 23, 1, 384)\n&gt;&gt;&gt; time.fromisoformat('04:23:01+04:00')\ndatetime.time(4, 23, 1, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400)))\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.7.</span></p> </div> </dd>\n</dl> <p>Instance methods:</p> <dl class=\"method\"> <dt id=\"datetime.time.replace\">\n<code>time.replace(hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, *, fold=0)</code> </dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> with the same value, except for those attributes given new values by whichever keyword arguments are specified. Note that <code>tzinfo=None</code> can be specified to create a naive <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> from an aware <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a>, without conversion of the time data.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6: </span>Added the <code>fold</code> argument.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.time.isoformat\">\n<code>time.isoformat(timespec='auto')</code> </dt> <dd>\n<p>Return a string representing the time in ISO 8601 format, one of:</p> <ul class=\"simple\"> <li>\n<code>HH:MM:SS.ffffff</code>, if <a class=\"reference internal\" href=\"#datetime.time.microsecond\" title=\"datetime.time.microsecond\"><code>microsecond</code></a> is not 0</li> <li>\n<code>HH:MM:SS</code>, if <a class=\"reference internal\" href=\"#datetime.time.microsecond\" title=\"datetime.time.microsecond\"><code>microsecond</code></a> is 0</li> <li>\n<code>HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]</code>, if <a class=\"reference internal\" href=\"#datetime.time.utcoffset\" title=\"datetime.time.utcoffset\"><code>utcoffset()</code></a> does not return <code>None</code>\n</li> <li>\n<code>HH:MM:SS+HH:MM[:SS[.ffffff]]</code>, if <a class=\"reference internal\" href=\"#datetime.time.microsecond\" title=\"datetime.time.microsecond\"><code>microsecond</code></a> is 0 and <a class=\"reference internal\" href=\"#datetime.time.utcoffset\" title=\"datetime.time.utcoffset\"><code>utcoffset()</code></a> does not return <code>None</code>\n</li> </ul> <p>The optional argument <em>timespec</em> specifies the number of additional components of the time to include (the default is <code>'auto'</code>). It can be one of the following:</p> <ul class=\"simple\"> <li>\n<code>'auto'</code>: Same as <code>'seconds'</code> if <a class=\"reference internal\" href=\"#datetime.time.microsecond\" title=\"datetime.time.microsecond\"><code>microsecond</code></a> is 0, same as <code>'microseconds'</code> otherwise.</li> <li>\n<code>'hours'</code>: Include the <a class=\"reference internal\" href=\"#datetime.time.hour\" title=\"datetime.time.hour\"><code>hour</code></a> in the two-digit <code>HH</code> format.</li> <li>\n<code>'minutes'</code>: Include <a class=\"reference internal\" href=\"#datetime.time.hour\" title=\"datetime.time.hour\"><code>hour</code></a> and <a class=\"reference internal\" href=\"#datetime.time.minute\" title=\"datetime.time.minute\"><code>minute</code></a> in <code>HH:MM</code> format.</li> <li>\n<code>'seconds'</code>: Include <a class=\"reference internal\" href=\"#datetime.time.hour\" title=\"datetime.time.hour\"><code>hour</code></a>, <a class=\"reference internal\" href=\"#datetime.time.minute\" title=\"datetime.time.minute\"><code>minute</code></a>, and <a class=\"reference internal\" href=\"#datetime.time.second\" title=\"datetime.time.second\"><code>second</code></a> in <code>HH:MM:SS</code> format.</li> <li>\n<code>'milliseconds'</code>: Include full time, but truncate fractional second part to milliseconds. <code>HH:MM:SS.sss</code> format.</li> <li>\n<code>'microseconds'</code>: Include full time in <code>HH:MM:SS.ffffff</code> format.</li> </ul> <div class=\"admonition note\"> <p class=\"admonition-title\">Note</p> <p>Excluded time components are truncated, not rounded.</p> </div> <p><a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> will be raised on an invalid <em>timespec</em> argument.</p> <p>Example:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import time\n&gt;&gt;&gt; time(hour=12, minute=34, second=56, microsecond=123456).isoformat(timespec='minutes')\n'12:34'\n&gt;&gt;&gt; dt = time(hour=12, minute=34, second=56, microsecond=0)\n&gt;&gt;&gt; dt.isoformat(timespec='microseconds')\n'12:34:56.000000'\n&gt;&gt;&gt; dt.isoformat(timespec='auto')\n'12:34:56'\n</pre> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6: </span>Added the <em>timespec</em> argument.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.time.__str__\">\n<code>time.__str__()</code> </dt> <dd>\n<p>For a time <em>t</em>, <code>str(t)</code> is equivalent to <code>t.isoformat()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.time.strftime\">\n<code>time.strftime(format)</code> </dt> <dd>\n<p>Return a string representing the time, controlled by an explicit format string. For a complete list of formatting directives, see <a class=\"reference internal\" href=\"#strftime-strptime-behavior\"><span class=\"std std-ref\">strftime() and strptime() Behavior</span></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.time.__format__\">\n<code>time.__format__(format)</code> </dt> <dd>\n<p>Same as <a class=\"reference internal\" href=\"#datetime.time.strftime\" title=\"datetime.time.strftime\"><code>time.strftime()</code></a>. This makes it possible to specify a format string for a <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object in <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings\"><span class=\"std std-ref\">formatted string literals</span></a> and when using <a class=\"reference internal\" href=\"stdtypes#str.format\" title=\"str.format\"><code>str.format()</code></a>. For a complete list of formatting directives, see <a class=\"reference internal\" href=\"#strftime-strptime-behavior\"><span class=\"std std-ref\">strftime() and strptime() Behavior</span></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.time.utcoffset\">\n<code>time.utcoffset()</code> </dt> <dd>\n<p>If <a class=\"reference internal\" href=\"#datetime.time.tzinfo\" title=\"datetime.time.tzinfo\"><code>tzinfo</code></a> is <code>None</code>, returns <code>None</code>, else returns <code>self.tzinfo.utcoffset(None)</code>, and raises an exception if the latter doesn’t return <code>None</code> or a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object with magnitude less than one day.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The UTC offset is not restricted to a whole number of minutes.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.time.dst\">\n<code>time.dst()</code> </dt> <dd>\n<p>If <a class=\"reference internal\" href=\"#datetime.time.tzinfo\" title=\"datetime.time.tzinfo\"><code>tzinfo</code></a> is <code>None</code>, returns <code>None</code>, else returns <code>self.tzinfo.dst(None)</code>, and raises an exception if the latter doesn’t return <code>None</code>, or a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object with magnitude less than one day.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The DST offset is not restricted to a whole number of minutes.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.time.tzname\">\n<code>time.tzname()</code> </dt> <dd>\n<p>If <a class=\"reference internal\" href=\"#datetime.time.tzinfo\" title=\"datetime.time.tzinfo\"><code>tzinfo</code></a> is <code>None</code>, returns <code>None</code>, else returns <code>self.tzinfo.tzname(None)</code>, or raises an exception if the latter doesn’t return <code>None</code> or a string object.</p> </dd>\n</dl>  <h3 id=\"examples-of-usage-time\">Examples of Usage: <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a>\n</h3> <p>Examples of working with a <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import time, tzinfo, timedelta\n&gt;&gt;&gt; class TZ1(tzinfo):\n...     def utcoffset(self, dt):\n...         return timedelta(hours=1)\n...     def dst(self, dt):\n...         return timedelta(0)\n...     def tzname(self,dt):\n...         return \"+01:00\"\n...     def  __repr__(self):\n...         return f\"{self.__class__.__name__}()\"\n...\n&gt;&gt;&gt; t = time(12, 10, 30, tzinfo=TZ1())\n&gt;&gt;&gt; t\ndatetime.time(12, 10, 30, tzinfo=TZ1())\n&gt;&gt;&gt; t.isoformat()\n'12:10:30+01:00'\n&gt;&gt;&gt; t.dst()\ndatetime.timedelta(0)\n&gt;&gt;&gt; t.tzname()\n'+01:00'\n&gt;&gt;&gt; t.strftime(\"%H:%M:%S %Z\")\n'12:10:30 +01:00'\n&gt;&gt;&gt; 'The {} is {:%H:%M}.'.format(\"time\", t)\n'The time is 12:10.'\n</pre>    <h2 id=\"datetime-tzinfo\">tzinfo Objects</h2> <dl class=\"class\" id=\"tzinfo-objects\"> <dt id=\"datetime.tzinfo\">\n<code>class datetime.tzinfo</code> </dt> <dd>\n<p>This is an abstract base class, meaning that this class should not be instantiated directly. Define a subclass of <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> to capture information about a particular time zone.</p> <p>An instance of (a concrete subclass of) <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> can be passed to the constructors for <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> and <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> objects. The latter objects view their attributes as being in local time, and the <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> object supports methods revealing offset of local time from UTC, the name of the time zone, and DST offset, all relative to a date or time object passed to them.</p> <p>You need to derive a concrete subclass, and (at least) supply implementations of the standard <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> methods needed by the <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> methods you use. The <a class=\"reference internal\" href=\"#module-datetime\" title=\"datetime: Basic date and time types.\"><code>datetime</code></a> module provides <a class=\"reference internal\" href=\"#datetime.timezone\" title=\"datetime.timezone\"><code>timezone</code></a>, a simple concrete subclass of <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> which can represent timezones with fixed offset from UTC such as UTC itself or North American EST and EDT.</p> <p>Special requirement for pickling: A <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass must have an <a class=\"reference internal\" href=\"https://docs.python.org/3.9/reference/datamodel.html#object.__init__\" title=\"object.__init__\"><code>__init__()</code></a> method that can be called with no arguments, otherwise it can be pickled but possibly not unpickled again. This is a technical requirement that may be relaxed in the future.</p> <p>A concrete subclass of <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> may need to implement the following methods. Exactly which methods are needed depends on the uses made of aware <a class=\"reference internal\" href=\"#module-datetime\" title=\"datetime: Basic date and time types.\"><code>datetime</code></a> objects. If in doubt, simply implement all of them.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.tzinfo.utcoffset\">\n<code>tzinfo.utcoffset(dt)</code> </dt> <dd>\n<p>Return offset of local time from UTC, as a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object that is positive east of UTC. If local time is west of UTC, this should be negative.</p> <p>This represents the <em>total</em> offset from UTC; for example, if a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> object represents both time zone and DST adjustments, <a class=\"reference internal\" href=\"#datetime.tzinfo.utcoffset\" title=\"datetime.tzinfo.utcoffset\"><code>utcoffset()</code></a> should return their sum. If the UTC offset isn’t known, return <code>None</code>. Else the value returned must be a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object strictly between <code>-timedelta(hours=24)</code> and <code>timedelta(hours=24)</code> (the magnitude of the offset must be less than one day). Most implementations of <a class=\"reference internal\" href=\"#datetime.tzinfo.utcoffset\" title=\"datetime.tzinfo.utcoffset\"><code>utcoffset()</code></a> will probably look like one of these two:</p> <pre data-language=\"python\">return CONSTANT                 # fixed-offset class\nreturn CONSTANT + self.dst(dt)  # daylight-aware class\n</pre> <p>If <a class=\"reference internal\" href=\"#datetime.tzinfo.utcoffset\" title=\"datetime.tzinfo.utcoffset\"><code>utcoffset()</code></a> does not return <code>None</code>, <a class=\"reference internal\" href=\"#datetime.tzinfo.dst\" title=\"datetime.tzinfo.dst\"><code>dst()</code></a> should not return <code>None</code> either.</p> <p>The default implementation of <a class=\"reference internal\" href=\"#datetime.tzinfo.utcoffset\" title=\"datetime.tzinfo.utcoffset\"><code>utcoffset()</code></a> raises <a class=\"reference internal\" href=\"exceptions#NotImplementedError\" title=\"NotImplementedError\"><code>NotImplementedError</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The UTC offset is not restricted to a whole number of minutes.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.tzinfo.dst\">\n<code>tzinfo.dst(dt)</code> </dt> <dd>\n<p>Return the daylight saving time (DST) adjustment, as a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object or <code>None</code> if DST information isn’t known.</p> <p>Return <code>timedelta(0)</code> if DST is not in effect. If DST is in effect, return the offset as a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object (see <a class=\"reference internal\" href=\"#datetime.tzinfo.utcoffset\" title=\"datetime.tzinfo.utcoffset\"><code>utcoffset()</code></a> for details). Note that DST offset, if applicable, has already been added to the UTC offset returned by <a class=\"reference internal\" href=\"#datetime.tzinfo.utcoffset\" title=\"datetime.tzinfo.utcoffset\"><code>utcoffset()</code></a>, so there’s no need to consult <a class=\"reference internal\" href=\"#datetime.tzinfo.dst\" title=\"datetime.tzinfo.dst\"><code>dst()</code></a> unless you’re interested in obtaining DST info separately. For example, <a class=\"reference internal\" href=\"#datetime.datetime.timetuple\" title=\"datetime.datetime.timetuple\"><code>datetime.timetuple()</code></a> calls its <a class=\"reference internal\" href=\"#datetime.datetime.tzinfo\" title=\"datetime.datetime.tzinfo\"><code>tzinfo</code></a> attribute’s <a class=\"reference internal\" href=\"#datetime.tzinfo.dst\" title=\"datetime.tzinfo.dst\"><code>dst()</code></a> method to determine how the <code>tm_isdst</code> flag should be set, and <a class=\"reference internal\" href=\"#datetime.tzinfo.fromutc\" title=\"datetime.tzinfo.fromutc\"><code>tzinfo.fromutc()</code></a> calls <a class=\"reference internal\" href=\"#datetime.tzinfo.dst\" title=\"datetime.tzinfo.dst\"><code>dst()</code></a> to account for DST changes when crossing time zones.</p> <p>An instance <em>tz</em> of a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass that models both standard and daylight times must be consistent in this sense:</p> <p><code>tz.utcoffset(dt) - tz.dst(dt)</code></p> <p>must return the same result for every <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> <em>dt</em> with <code>dt.tzinfo ==\ntz</code> For sane <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclasses, this expression yields the time zone’s “standard offset”, which should not depend on the date or the time, but only on geographic location. The implementation of <a class=\"reference internal\" href=\"#datetime.datetime.astimezone\" title=\"datetime.datetime.astimezone\"><code>datetime.astimezone()</code></a> relies on this, but cannot detect violations; it’s the programmer’s responsibility to ensure it. If a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass cannot guarantee this, it may be able to override the default implementation of <a class=\"reference internal\" href=\"#datetime.tzinfo.fromutc\" title=\"datetime.tzinfo.fromutc\"><code>tzinfo.fromutc()</code></a> to work correctly with <code>astimezone()</code> regardless.</p> <p>Most implementations of <a class=\"reference internal\" href=\"#datetime.tzinfo.dst\" title=\"datetime.tzinfo.dst\"><code>dst()</code></a> will probably look like one of these two:</p> <pre data-language=\"python\">def dst(self, dt):\n    # a fixed-offset class:  doesn't account for DST\n    return timedelta(0)\n</pre> <p>or:</p> <pre data-language=\"python\">def dst(self, dt):\n    # Code to set dston and dstoff to the time zone's DST\n    # transition times based on the input dt.year, and expressed\n    # in standard local time.\n\n    if dston &lt;= dt.replace(tzinfo=None) &lt; dstoff:\n        return timedelta(hours=1)\n    else:\n        return timedelta(0)\n</pre> <p>The default implementation of <a class=\"reference internal\" href=\"#datetime.tzinfo.dst\" title=\"datetime.tzinfo.dst\"><code>dst()</code></a> raises <a class=\"reference internal\" href=\"exceptions#NotImplementedError\" title=\"NotImplementedError\"><code>NotImplementedError</code></a>.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The DST offset is not restricted to a whole number of minutes.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.tzinfo.tzname\">\n<code>tzinfo.tzname(dt)</code> </dt> <dd>\n<p>Return the time zone name corresponding to the <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object <em>dt</em>, as a string. Nothing about string names is defined by the <a class=\"reference internal\" href=\"#module-datetime\" title=\"datetime: Basic date and time types.\"><code>datetime</code></a> module, and there’s no requirement that it mean anything in particular. For example, “GMT”, “UTC”, “-500”, “-5:00”, “EDT”, “US/Eastern”, “America/New York” are all valid replies. Return <code>None</code> if a string name isn’t known. Note that this is a method rather than a fixed string primarily because some <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclasses will wish to return different names depending on the specific value of <em>dt</em> passed, especially if the <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> class is accounting for daylight time.</p> <p>The default implementation of <a class=\"reference internal\" href=\"#datetime.tzinfo.tzname\" title=\"datetime.tzinfo.tzname\"><code>tzname()</code></a> raises <a class=\"reference internal\" href=\"exceptions#NotImplementedError\" title=\"NotImplementedError\"><code>NotImplementedError</code></a>.</p> </dd>\n</dl> <p>These methods are called by a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> or <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object, in response to their methods of the same names. A <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object passes itself as the argument, and a <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> object passes <code>None</code> as the argument. A <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass’s methods should therefore be prepared to accept a <em>dt</em> argument of <code>None</code>, or of class <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a>.</p> <p>When <code>None</code> is passed, it’s up to the class designer to decide the best response. For example, returning <code>None</code> is appropriate if the class wishes to say that time objects don’t participate in the <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> protocols. It may be more useful for <code>utcoffset(None)</code> to return the standard UTC offset, as there is no other convention for discovering the standard offset.</p> <p>When a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object is passed in response to a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> method, <code>dt.tzinfo</code> is the same object as <em>self</em>. <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> methods can rely on this, unless user code calls <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> methods directly. The intent is that the <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> methods interpret <em>dt</em> as being in local time, and not need worry about objects in other timezones.</p> <p>There is one more <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> method that a subclass may wish to override:</p> <dl class=\"method\"> <dt id=\"datetime.tzinfo.fromutc\">\n<code>tzinfo.fromutc(dt)</code> </dt> <dd>\n<p>This is called from the default <a class=\"reference internal\" href=\"#datetime.datetime.astimezone\" title=\"datetime.datetime.astimezone\"><code>datetime.astimezone()</code></a> implementation. When called from that, <code>dt.tzinfo</code> is <em>self</em>, and <em>dt</em>’s date and time data are to be viewed as expressing a UTC time. The purpose of <a class=\"reference internal\" href=\"#datetime.tzinfo.fromutc\" title=\"datetime.tzinfo.fromutc\"><code>fromutc()</code></a> is to adjust the date and time data, returning an equivalent datetime in <em>self</em>’s local time.</p> <p>Most <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclasses should be able to inherit the default <a class=\"reference internal\" href=\"#datetime.tzinfo.fromutc\" title=\"datetime.tzinfo.fromutc\"><code>fromutc()</code></a> implementation without problems. It’s strong enough to handle fixed-offset time zones, and time zones accounting for both standard and daylight time, and the latter even if the DST transition times differ in different years. An example of a time zone the default <a class=\"reference internal\" href=\"#datetime.tzinfo.fromutc\" title=\"datetime.tzinfo.fromutc\"><code>fromutc()</code></a> implementation may not handle correctly in all cases is one where the standard offset (from UTC) depends on the specific date and time passed, which can happen for political reasons. The default implementations of <code>astimezone()</code> and <a class=\"reference internal\" href=\"#datetime.tzinfo.fromutc\" title=\"datetime.tzinfo.fromutc\"><code>fromutc()</code></a> may not produce the result you want if the result is one of the hours straddling the moment the standard offset changes.</p> <p>Skipping code for error cases, the default <a class=\"reference internal\" href=\"#datetime.tzinfo.fromutc\" title=\"datetime.tzinfo.fromutc\"><code>fromutc()</code></a> implementation acts like:</p> <pre data-language=\"python\">def fromutc(self, dt):\n    # raise ValueError error if dt.tzinfo is not self\n    dtoff = dt.utcoffset()\n    dtdst = dt.dst()\n    # raise ValueError if dtoff is None or dtdst is None\n    delta = dtoff - dtdst  # this is self's standard offset\n    if delta:\n        dt += delta   # convert to standard local time\n        dtdst = dt.dst()\n        # raise ValueError if dtdst is None\n    if dtdst:\n        return dt + dtdst\n    else:\n        return dt\n</pre> </dd>\n</dl> <p>In the following <a class=\"reference download internal\" download=\"\" href=\"https://docs.python.org/3.9/_downloads/6b45dc135219d1404be49d606589a11d/tzinfo_examples.py\"><code>tzinfo_examples.py</code></a> file there are some examples of <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> classes:</p> <pre data-language=\"python\">from datetime import tzinfo, timedelta, datetime\n\nZERO = timedelta(0)\nHOUR = timedelta(hours=1)\nSECOND = timedelta(seconds=1)\n\n# A class capturing the platform's idea of local time.\n# (May result in wrong values on historical times in\n#  timezones where UTC offset and/or the DST rules had\n#  changed in the past.)\nimport time as _time\n\nSTDOFFSET = timedelta(seconds = -_time.timezone)\nif _time.daylight:\n    DSTOFFSET = timedelta(seconds = -_time.altzone)\nelse:\n    DSTOFFSET = STDOFFSET\n\nDSTDIFF = DSTOFFSET - STDOFFSET\n\nclass LocalTimezone(tzinfo):\n\n    def fromutc(self, dt):\n        assert dt.tzinfo is self\n        stamp = (dt - datetime(1970, 1, 1, tzinfo=self)) // SECOND\n        args = _time.localtime(stamp)[:6]\n        dst_diff = DSTDIFF // SECOND\n        # Detect fold\n        fold = (args == _time.localtime(stamp - dst_diff))\n        return datetime(*args, microsecond=dt.microsecond,\n                        tzinfo=self, fold=fold)\n\n    def utcoffset(self, dt):\n        if self._isdst(dt):\n            return DSTOFFSET\n        else:\n            return STDOFFSET\n\n    def dst(self, dt):\n        if self._isdst(dt):\n            return DSTDIFF\n        else:\n            return ZERO\n\n    def tzname(self, dt):\n        return _time.tzname[self._isdst(dt)]\n\n    def _isdst(self, dt):\n        tt = (dt.year, dt.month, dt.day,\n              dt.hour, dt.minute, dt.second,\n              dt.weekday(), 0, 0)\n        stamp = _time.mktime(tt)\n        tt = _time.localtime(stamp)\n        return tt.tm_isdst &gt; 0\n\nLocal = LocalTimezone()\n\n\n# A complete implementation of current DST rules for major US time zones.\n\ndef first_sunday_on_or_after(dt):\n    days_to_go = 6 - dt.weekday()\n    if days_to_go:\n        dt += timedelta(days_to_go)\n    return dt\n\n\n# US DST Rules\n#\n# This is a simplified (i.e., wrong for a few cases) set of rules for US\n# DST start and end times. For a complete and up-to-date set of DST rules\n# and timezone definitions, visit the Olson Database (or try pytz):\n# http://www.twinsun.com/tz/tz-link.htm\n# http://sourceforge.net/projects/pytz/ (might not be up-to-date)\n#\n# In the US, since 2007, DST starts at 2am (standard time) on the second\n# Sunday in March, which is the first Sunday on or after Mar 8.\nDSTSTART_2007 = datetime(1, 3, 8, 2)\n# and ends at 2am (DST time) on the first Sunday of Nov.\nDSTEND_2007 = datetime(1, 11, 1, 2)\n# From 1987 to 2006, DST used to start at 2am (standard time) on the first\n# Sunday in April and to end at 2am (DST time) on the last\n# Sunday of October, which is the first Sunday on or after Oct 25.\nDSTSTART_1987_2006 = datetime(1, 4, 1, 2)\nDSTEND_1987_2006 = datetime(1, 10, 25, 2)\n# From 1967 to 1986, DST used to start at 2am (standard time) on the last\n# Sunday in April (the one on or after April 24) and to end at 2am (DST time)\n# on the last Sunday of October, which is the first Sunday\n# on or after Oct 25.\nDSTSTART_1967_1986 = datetime(1, 4, 24, 2)\nDSTEND_1967_1986 = DSTEND_1987_2006\n\ndef us_dst_range(year):\n    # Find start and end times for US DST. For years before 1967, return\n    # start = end for no DST.\n    if 2006 &lt; year:\n        dststart, dstend = DSTSTART_2007, DSTEND_2007\n    elif 1986 &lt; year &lt; 2007:\n        dststart, dstend = DSTSTART_1987_2006, DSTEND_1987_2006\n    elif 1966 &lt; year &lt; 1987:\n        dststart, dstend = DSTSTART_1967_1986, DSTEND_1967_1986\n    else:\n        return (datetime(year, 1, 1), ) * 2\n\n    start = first_sunday_on_or_after(dststart.replace(year=year))\n    end = first_sunday_on_or_after(dstend.replace(year=year))\n    return start, end\n\n\nclass USTimeZone(tzinfo):\n\n    def __init__(self, hours, reprname, stdname, dstname):\n        self.stdoffset = timedelta(hours=hours)\n        self.reprname = reprname\n        self.stdname = stdname\n        self.dstname = dstname\n\n    def __repr__(self):\n        return self.reprname\n\n    def tzname(self, dt):\n        if self.dst(dt):\n            return self.dstname\n        else:\n            return self.stdname\n\n    def utcoffset(self, dt):\n        return self.stdoffset + self.dst(dt)\n\n    def dst(self, dt):\n        if dt is None or dt.tzinfo is None:\n            # An exception may be sensible here, in one or both cases.\n            # It depends on how you want to treat them.  The default\n            # fromutc() implementation (called by the default astimezone()\n            # implementation) passes a datetime with dt.tzinfo is self.\n            return ZERO\n        assert dt.tzinfo is self\n        start, end = us_dst_range(dt.year)\n        # Can't compare naive to aware objects, so strip the timezone from\n        # dt first.\n        dt = dt.replace(tzinfo=None)\n        if start + HOUR &lt;= dt &lt; end - HOUR:\n            # DST is in effect.\n            return HOUR\n        if end - HOUR &lt;= dt &lt; end:\n            # Fold (an ambiguous hour): use dt.fold to disambiguate.\n            return ZERO if dt.fold else HOUR\n        if start &lt;= dt &lt; start + HOUR:\n            # Gap (a non-existent hour): reverse the fold rule.\n            return HOUR if dt.fold else ZERO\n        # DST is off.\n        return ZERO\n\n    def fromutc(self, dt):\n        assert dt.tzinfo is self\n        start, end = us_dst_range(dt.year)\n        start = start.replace(tzinfo=self)\n        end = end.replace(tzinfo=self)\n        std_time = dt + self.stdoffset\n        dst_time = std_time + HOUR\n        if end &lt;= dst_time &lt; end + HOUR:\n            # Repeated hour\n            return std_time.replace(fold=1)\n        if std_time &lt; start or dst_time &gt;= end:\n            # Standard time\n            return std_time\n        if start &lt;= std_time &lt; end - HOUR:\n            # Daylight saving time\n            return dst_time\n\n\nEastern  = USTimeZone(-5, \"Eastern\",  \"EST\", \"EDT\")\nCentral  = USTimeZone(-6, \"Central\",  \"CST\", \"CDT\")\nMountain = USTimeZone(-7, \"Mountain\", \"MST\", \"MDT\")\nPacific  = USTimeZone(-8, \"Pacific\",  \"PST\", \"PDT\")\n</pre> <p>Note that there are unavoidable subtleties twice per year in a <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass accounting for both standard and daylight time, at the DST transition points. For concreteness, consider US Eastern (UTC -0500), where EDT begins the minute after 1:59 (EST) on the second Sunday in March, and ends the minute after 1:59 (EDT) on the first Sunday in November:</p> <pre data-language=\"python\">  UTC   3:MM  4:MM  5:MM  6:MM  7:MM  8:MM\n  EST  22:MM 23:MM  0:MM  1:MM  2:MM  3:MM\n  EDT  23:MM  0:MM  1:MM  2:MM  3:MM  4:MM\n\nstart  22:MM 23:MM  0:MM  1:MM  3:MM  4:MM\n\n  end  23:MM  0:MM  1:MM  1:MM  2:MM  3:MM\n</pre> <p>When DST starts (the “start” line), the local wall clock leaps from 1:59 to 3:00. A wall time of the form 2:MM doesn’t really make sense on that day, so <code>astimezone(Eastern)</code> won’t deliver a result with <code>hour == 2</code> on the day DST begins. For example, at the Spring forward transition of 2016, we get:</p> <pre data-language=\"python\">&gt;&gt;&gt; from datetime import datetime, timezone\n&gt;&gt;&gt; from tzinfo_examples import HOUR, Eastern\n&gt;&gt;&gt; u0 = datetime(2016, 3, 13, 5, tzinfo=timezone.utc)\n&gt;&gt;&gt; for i in range(4):\n...     u = u0 + i*HOUR\n...     t = u.astimezone(Eastern)\n...     print(u.time(), 'UTC =', t.time(), t.tzname())\n...\n05:00:00 UTC = 00:00:00 EST\n06:00:00 UTC = 01:00:00 EST\n07:00:00 UTC = 03:00:00 EDT\n08:00:00 UTC = 04:00:00 EDT\n</pre> <p>When DST ends (the “end” line), there’s a potentially worse problem: there’s an hour that can’t be spelled unambiguously in local wall time: the last hour of daylight time. In Eastern, that’s times of the form 5:MM UTC on the day daylight time ends. The local wall clock leaps from 1:59 (daylight time) back to 1:00 (standard time) again. Local times of the form 1:MM are ambiguous. <code>astimezone()</code> mimics the local clock’s behavior by mapping two adjacent UTC hours into the same local hour then. In the Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when converted to Eastern, but earlier times have the <a class=\"reference internal\" href=\"#datetime.datetime.fold\" title=\"datetime.datetime.fold\"><code>fold</code></a> attribute set to 0 and the later times have it set to 1. For example, at the Fall back transition of 2016, we get:</p> <pre data-language=\"python\">&gt;&gt;&gt; u0 = datetime(2016, 11, 6, 4, tzinfo=timezone.utc)\n&gt;&gt;&gt; for i in range(4):\n...     u = u0 + i*HOUR\n...     t = u.astimezone(Eastern)\n...     print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)\n...\n04:00:00 UTC = 00:00:00 EDT 0\n05:00:00 UTC = 01:00:00 EDT 0\n06:00:00 UTC = 01:00:00 EST 1\n07:00:00 UTC = 02:00:00 EST 0\n</pre> <p>Note that the <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> instances that differ only by the value of the <a class=\"reference internal\" href=\"#datetime.datetime.fold\" title=\"datetime.datetime.fold\"><code>fold</code></a> attribute are considered equal in comparisons.</p> <p>Applications that can’t bear wall-time ambiguities should explicitly check the value of the <a class=\"reference internal\" href=\"#datetime.datetime.fold\" title=\"datetime.datetime.fold\"><code>fold</code></a> attribute or avoid using hybrid <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclasses; there are no ambiguities when using <a class=\"reference internal\" href=\"#datetime.timezone\" title=\"datetime.timezone\"><code>timezone</code></a>, or any other fixed-offset <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a> subclass (such as a class representing only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours)).</p> <div class=\"admonition seealso\"> <p class=\"admonition-title\">See also</p> <dl> <dt><a class=\"reference external\" href=\"https://dateutil.readthedocs.io/en/stable/tz.html\">dateutil.tz</a></dt>\n<dd>\n<p>The <a class=\"reference internal\" href=\"#module-datetime\" title=\"datetime: Basic date and time types.\"><code>datetime</code></a> module has a basic <a class=\"reference internal\" href=\"#datetime.timezone\" title=\"datetime.timezone\"><code>timezone</code></a> class (for handling arbitrary fixed offsets from UTC) and its <a class=\"reference internal\" href=\"#datetime.timezone.utc\" title=\"datetime.timezone.utc\"><code>timezone.utc</code></a> attribute (a UTC timezone instance).</p> <p><em>dateutil.tz</em> library brings the <em>IANA timezone database</em> (also known as the Olson database) to Python, and its usage is recommended.</p> </dd> <dt><a class=\"reference external\" href=\"https://www.iana.org/time-zones\">IANA timezone database</a></dt>\n<dd>\n<p>The Time Zone Database (often called tz, tzdata or zoneinfo) contains code and data that represent the history of local time for many representative locations around the globe. It is updated periodically to reflect changes made by political bodies to time zone boundaries, UTC offsets, and daylight-saving rules.</p> </dd> </dl> </div>   <h2 id=\"datetime-timezone\">timezone Objects</h2> <p id=\"timezone-objects\">The <a class=\"reference internal\" href=\"#datetime.timezone\" title=\"datetime.timezone\"><code>timezone</code></a> class is a subclass of <a class=\"reference internal\" href=\"#datetime.tzinfo\" title=\"datetime.tzinfo\"><code>tzinfo</code></a>, each instance of which represents a timezone defined by a fixed offset from UTC.</p> <p>Objects of this class cannot be used to represent timezone information in the locations where different offsets are used in different days of the year or where historical changes have been made to civil time.</p> <dl class=\"class\"> <dt id=\"datetime.timezone\">\n<code>class datetime.timezone(offset, name=None)</code> </dt> <dd>\n<p>The <em>offset</em> argument must be specified as a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> object representing the difference between the local time and UTC. It must be strictly between <code>-timedelta(hours=24)</code> and <code>timedelta(hours=24)</code>, otherwise <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a> is raised.</p> <p>The <em>name</em> argument is optional. If specified it must be a string that will be used as the value returned by the <a class=\"reference internal\" href=\"#datetime.datetime.tzname\" title=\"datetime.datetime.tzname\"><code>datetime.tzname()</code></a> method.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.2.</span></p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The UTC offset is not restricted to a whole number of minutes.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.timezone.utcoffset\">\n<code>timezone.utcoffset(dt)</code> </dt> <dd>\n<p>Return the fixed value specified when the <a class=\"reference internal\" href=\"#datetime.timezone\" title=\"datetime.timezone\"><code>timezone</code></a> instance is constructed.</p> <p>The <em>dt</em> argument is ignored. The return value is a <a class=\"reference internal\" href=\"#datetime.timedelta\" title=\"datetime.timedelta\"><code>timedelta</code></a> instance equal to the difference between the local time and UTC.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The UTC offset is not restricted to a whole number of minutes.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.timezone.tzname\">\n<code>timezone.tzname(dt)</code> </dt> <dd>\n<p>Return the fixed value specified when the <a class=\"reference internal\" href=\"#datetime.timezone\" title=\"datetime.timezone\"><code>timezone</code></a> instance is constructed.</p> <p>If <em>name</em> is not provided in the constructor, the name returned by <code>tzname(dt)</code> is generated from the value of the <code>offset</code> as follows. If <em>offset</em> is <code>timedelta(0)</code>, the name is “UTC”, otherwise it is a string in the format <code>UTC±HH:MM</code>, where ± is the sign of <code>offset</code>, HH and MM are two digits of <code>offset.hours</code> and <code>offset.minutes</code> respectively.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Name generated from <code>offset=timedelta(0)</code> is now plain <code>‘UTC’</code>, not <code>'UTC+00:00'</code>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.timezone.dst\">\n<code>timezone.dst(dt)</code> </dt> <dd>\n<p>Always returns <code>None</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"datetime.timezone.fromutc\">\n<code>timezone.fromutc(dt)</code> </dt> <dd>\n<p>Return <code>dt + offset</code>. The <em>dt</em> argument must be an aware <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> instance, with <code>tzinfo</code> set to <code>self</code>.</p> </dd>\n</dl> <p>Class attributes:</p> <dl class=\"attribute\"> <dt id=\"datetime.timezone.utc\">\n<code>timezone.utc</code> </dt> <dd>\n<p>The UTC timezone, <code>timezone(timedelta(0))</code>.</p> </dd>\n</dl>   <h2 id=\"index-0\">\n<code>strftime()</code> and <code>strptime()</code> Behavior</h2> <p id=\"strftime-and-strptime-behavior\"><a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a>, <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a>, and <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> objects all support a <code>strftime(format)</code> method, to create a string representing the time under the control of an explicit format string.</p> <p>Conversely, the <a class=\"reference internal\" href=\"#datetime.datetime.strptime\" title=\"datetime.datetime.strptime\"><code>datetime.strptime()</code></a> class method creates a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object from a string representing a date and time and a corresponding format string.</p> <p>The table below provides a high-level comparison of <code>strftime()</code> versus <code>strptime()</code>:</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"></th> <th class=\"head\"><p><code>strftime</code></p></th> <th class=\"head\"><p><code>strptime</code></p></th> </tr> </thead>  <tr>\n<td><p>Usage</p></td> <td><p>Convert object to a string according to a given format</p></td> <td><p>Parse a string into a <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a> object given a corresponding format</p></td> </tr> <tr>\n<td><p>Type of method</p></td> <td><p>Instance method</p></td> <td><p>Class method</p></td> </tr> <tr>\n<td><p>Method of</p></td> <td><p><a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a>; <a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a>; <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a></p></td> <td><p><a class=\"reference internal\" href=\"#datetime.datetime\" title=\"datetime.datetime\"><code>datetime</code></a></p></td> </tr> <tr>\n<td><p>Signature</p></td> <td><p><code>strftime(format)</code></p></td> <td><p><code>strptime(date_string, format)</code></p></td> </tr>  </table>  <h3 id=\"strftime-and-strptime-format-codes\">\n<code>strftime()</code> and <code>strptime()</code> Format Codes</h3> <p>The following is a list of all the format codes that the 1989 C standard requires, and these work on all platforms with a standard C implementation.</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Directive</p></th> <th class=\"head\"><p>Meaning</p></th> <th class=\"head\"><p>Example</p></th> <th class=\"head\"><p>Notes</p></th> </tr> </thead>  <tr>\n<td><p><code>%a</code></p></td> <td><p>Weekday as locale’s abbreviated name.</p></td> <td> </td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>%A</code></p></td> <td><p>Weekday as locale’s full name.</p></td> <td> </td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>%w</code></p></td> <td><p>Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.</p></td> <td><p>0, 1, …, 6</p></td> <td></td> </tr> <tr>\n<td><p><code>%d</code></p></td> <td><p>Day of the month as a zero-padded decimal number.</p></td> <td><p>01, 02, …, 31</p></td> <td><p>(9)</p></td> </tr> <tr>\n<td><p><code>%b</code></p></td> <td><p>Month as locale’s abbreviated name.</p></td> <td> </td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>%B</code></p></td> <td><p>Month as locale’s full name.</p></td> <td> </td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>%m</code></p></td> <td><p>Month as a zero-padded decimal number.</p></td> <td><p>01, 02, …, 12</p></td> <td><p>(9)</p></td> </tr> <tr>\n<td><p><code>%y</code></p></td> <td><p>Year without century as a zero-padded decimal number.</p></td> <td><p>00, 01, …, 99</p></td> <td><p>(9)</p></td> </tr> <tr>\n<td><p><code>%Y</code></p></td> <td><p>Year with century as a decimal number.</p></td> <td><p>0001, 0002, …, 2013, 2014, …, 9998, 9999</p></td> <td><p>(2)</p></td> </tr> <tr>\n<td><p><code>%H</code></p></td> <td><p>Hour (24-hour clock) as a zero-padded decimal number.</p></td> <td><p>00, 01, …, 23</p></td> <td><p>(9)</p></td> </tr> <tr>\n<td><p><code>%I</code></p></td> <td><p>Hour (12-hour clock) as a zero-padded decimal number.</p></td> <td><p>01, 02, …, 12</p></td> <td><p>(9)</p></td> </tr> <tr>\n<td><p><code>%p</code></p></td> <td><p>Locale’s equivalent of either AM or PM.</p></td> <td> </td> <td><p>(1), (3)</p></td> </tr> <tr>\n<td><p><code>%M</code></p></td> <td><p>Minute as a zero-padded decimal number.</p></td> <td><p>00, 01, …, 59</p></td> <td><p>(9)</p></td> </tr> <tr>\n<td><p><code>%S</code></p></td> <td><p>Second as a zero-padded decimal number.</p></td> <td><p>00, 01, …, 59</p></td> <td><p>(4), (9)</p></td> </tr> <tr>\n<td><p><code>%f</code></p></td> <td><p>Microsecond as a decimal number, zero-padded on the left.</p></td> <td><p>000000, 000001, …, 999999</p></td> <td><p>(5)</p></td> </tr> <tr>\n<td><p><code>%z</code></p></td> <td><p>UTC offset in the form <code>±HHMM[SS[.ffffff]]</code> (empty string if the object is naive).</p></td> <td><p>(empty), +0000, -0400, +1030, +063415, -030712.345216</p></td> <td><p>(6)</p></td> </tr> <tr>\n<td><p><code>%Z</code></p></td> <td><p>Time zone name (empty string if the object is naive).</p></td> <td><p>(empty), UTC, GMT</p></td> <td><p>(6)</p></td> </tr> <tr>\n<td><p><code>%j</code></p></td> <td><p>Day of the year as a zero-padded decimal number.</p></td> <td><p>001, 002, …, 366</p></td> <td><p>(9)</p></td> </tr> <tr>\n<td><p><code>%U</code></p></td> <td><p>Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.</p></td> <td><p>00, 01, …, 53</p></td> <td><p>(7), (9)</p></td> </tr> <tr>\n<td><p><code>%W</code></p></td> <td><p>Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.</p></td> <td><p>00, 01, …, 53</p></td> <td><p>(7), (9)</p></td> </tr> <tr>\n<td><p><code>%c</code></p></td> <td><p>Locale’s appropriate date and time representation.</p></td> <td> </td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>%x</code></p></td> <td><p>Locale’s appropriate date representation.</p></td> <td> </td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>%X</code></p></td> <td><p>Locale’s appropriate time representation.</p></td> <td> </td> <td><p>(1)</p></td> </tr> <tr>\n<td><p><code>%%</code></p></td> <td><p>A literal <code>'%'</code> character.</p></td> <td><p>%</p></td> <td></td> </tr>  </table> <p>Several additional directives not required by the C89 standard are included for convenience. These parameters all correspond to ISO 8601 date values.</p> <table class=\"docutils align-default\">  <thead> <tr>\n<th class=\"head\"><p>Directive</p></th> <th class=\"head\"><p>Meaning</p></th> <th class=\"head\"><p>Example</p></th> <th class=\"head\"><p>Notes</p></th> </tr> </thead>  <tr>\n<td><p><code>%G</code></p></td> <td><p>ISO 8601 year with century representing the year that contains the greater part of the ISO week (<code>%V</code>).</p></td> <td><p>0001, 0002, …, 2013, 2014, …, 9998, 9999</p></td> <td><p>(8)</p></td> </tr> <tr>\n<td><p><code>%u</code></p></td> <td><p>ISO 8601 weekday as a decimal number where 1 is Monday.</p></td> <td><p>1, 2, …, 7</p></td> <td></td> </tr> <tr>\n<td><p><code>%V</code></p></td> <td><p>ISO 8601 week as a decimal number with Monday as the first day of the week. Week 01 is the week containing Jan 4.</p></td> <td><p>01, 02, …, 53</p></td> <td><p>(8), (9)</p></td> </tr>  </table> <p>These may not be available on all platforms when used with the <code>strftime()</code> method. The ISO 8601 year and ISO 8601 week directives are not interchangeable with the year and week number directives above. Calling <code>strptime()</code> with incomplete or ambiguous ISO 8601 directives will raise a <a class=\"reference internal\" href=\"exceptions#ValueError\" title=\"ValueError\"><code>ValueError</code></a>.</p> <p>The full set of format codes supported varies across platforms, because Python calls the platform C library’s <code>strftime()</code> function, and platform variations are common. To see the full set of format codes supported on your platform, consult the <em class=\"manpage\"><a class=\"manpage reference external\" href=\"https://manpages.debian.org/strftime(3)\">strftime(3)</a></em> documentation.</p> <div class=\"versionadded\"> <p><span class=\"versionmodified added\">New in version 3.6: </span><code>%G</code>, <code>%u</code> and <code>%V</code> were added.</p> </div>   <h3 id=\"technical-detail\">Technical Detail</h3> <p>Broadly speaking, <code>d.strftime(fmt)</code> acts like the <a class=\"reference internal\" href=\"time#module-time\" title=\"time: Time access and conversions.\"><code>time</code></a> module’s <code>time.strftime(fmt, d.timetuple())</code> although not all objects support a <code>timetuple()</code> method.</p> <p>For the <a class=\"reference internal\" href=\"#datetime.datetime.strptime\" title=\"datetime.datetime.strptime\"><code>datetime.strptime()</code></a> class method, the default value is <code>1900-01-01T00:00:00.000</code>: any components not specified in the format string will be pulled from the default value. <a class=\"footnote-reference brackets\" href=\"#id8\" id=\"id4\">4</a></p> <p>Using <code>datetime.strptime(date_string, format)</code> is equivalent to:</p> <pre data-language=\"python\">datetime(*(time.strptime(date_string, format)[0:6]))\n</pre> <p>except when the format includes sub-second components or timezone offset information, which are supported in <code>datetime.strptime</code> but are discarded by <code>time.strptime</code>.</p> <p>For <a class=\"reference internal\" href=\"#datetime.time\" title=\"datetime.time\"><code>time</code></a> objects, the format codes for year, month, and day should not be used, as <a class=\"reference internal\" href=\"time#module-time\" title=\"time: Time access and conversions.\"><code>time</code></a> objects have no such values. If they’re used anyway, <code>1900</code> is substituted for the year, and <code>1</code> for the month and day.</p> <p>For <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> objects, the format codes for hours, minutes, seconds, and microseconds should not be used, as <a class=\"reference internal\" href=\"#datetime.date\" title=\"datetime.date\"><code>date</code></a> objects have no such values. If they’re used anyway, <code>0</code> is substituted for them.</p> <p>For the same reason, handling of format strings containing Unicode code points that can’t be represented in the charset of the current locale is also platform-dependent. On some platforms such code points are preserved intact in the output, while on others <code>strftime</code> may raise <a class=\"reference internal\" href=\"exceptions#UnicodeError\" title=\"UnicodeError\"><code>UnicodeError</code></a> or return an empty string instead.</p> <p>Notes:</p> <ol class=\"arabic\"> <li>Because the format depends on the current locale, care should be taken when making assumptions about the output value. Field orderings will vary (for example, “month/day/year” versus “day/month/year”), and the output may contain Unicode characters encoded using the locale’s default encoding (for example, if the current locale is <code>ja_JP</code>, the default encoding could be any one of <code>eucJP</code>, <code>SJIS</code>, or <code>utf-8</code>; use <a class=\"reference internal\" href=\"locale#locale.getlocale\" title=\"locale.getlocale\"><code>locale.getlocale()</code></a> to determine the current locale’s encoding).</li> <li>\n<p>The <code>strptime()</code> method can parse years in the full [1, 9999] range, but years &lt; 1000 must be zero-filled to 4-digit width.</p> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.2: </span>In previous versions, <code>strftime()</code> method was restricted to years &gt;= 1900.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.3: </span>In version 3.2, <code>strftime()</code> method was restricted to years &gt;= 1000.</p> </div> </li> <li>When used with the <code>strptime()</code> method, the <code>%p</code> directive only affects the output hour field if the <code>%I</code> directive is used to parse the hour.</li> <li>Unlike the <a class=\"reference internal\" href=\"time#module-time\" title=\"time: Time access and conversions.\"><code>time</code></a> module, the <a class=\"reference internal\" href=\"#module-datetime\" title=\"datetime: Basic date and time types.\"><code>datetime</code></a> module does not support leap seconds.</li> <li>When used with the <code>strptime()</code> method, the <code>%f</code> directive accepts from one to six digits and zero pads on the right. <code>%f</code> is an extension to the set of format characters in the C standard (but implemented separately in datetime objects, and therefore always available).</li> <li>\n<p>For a naive object, the <code>%z</code> and <code>%Z</code> format codes are replaced by empty strings.</p> <p>For an aware object:</p> <dl class=\"simple\"> <dt>\n<code>%z</code> </dt>\n<dd>\n<p><code>utcoffset()</code> is transformed into a string of the form <code>±HHMM[SS[.ffffff]]</code>, where <code>HH</code> is a 2-digit string giving the number of UTC offset hours, <code>MM</code> is a 2-digit string giving the number of UTC offset minutes, <code>SS</code> is a 2-digit string giving the number of UTC offset seconds and <code>ffffff</code> is a 6-digit string giving the number of UTC offset microseconds. The <code>ffffff</code> part is omitted when the offset is a whole number of seconds and both the <code>ffffff</code> and the <code>SS</code> part is omitted when the offset is a whole number of minutes. For example, if <code>utcoffset()</code> returns <code>timedelta(hours=-3, minutes=-30)</code>, <code>%z</code> is replaced with the string <code>'-0330'</code>.</p> </dd> </dl> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>The UTC offset is not restricted to a whole number of minutes.</p> </div> <div class=\"versionchanged\"> <p><span class=\"versionmodified changed\">Changed in version 3.7: </span>When the <code>%z</code> directive is provided to the <code>strptime()</code> method, the UTC offsets can have a colon as a separator between hours, minutes and seconds. For example, <code>'+01:00:00'</code> will be parsed as an offset of one hour. In addition, providing <code>'Z'</code> is identical to <code>'+00:00'</code>.</p> </div> <dl> <dt>\n<code>%Z</code> </dt>\n<dd>\n<p>In <code>strftime()</code>, <code>%Z</cod