[{"name": "1.1. Linear Models", "path": "modules/linear_model", "type": "Guide", "text": ["The following are a set of methods intended for regression in which the target value is expected to be a linear combination of the features. In mathematical notation, if \\(\\hat{y}\\) is the predicted value.", "Across the module, we designate the vector \\(w = (w_1, ..., w_p)\\) as coef_ and \\(w_0\\) as intercept_.", "To perform classification with generalized linear models, see Logistic regression.", "LinearRegression fits a linear model with coefficients \\(w = (w_1, ..., w_p)\\) to minimize the residual sum of squares between the observed targets in the dataset, and the targets predicted by the linear approximation. Mathematically it solves a problem of the form:", "LinearRegression will take in its fit method arrays X, y and will store the coefficients \\(w\\) of the linear model in its coef_ member:", "The coefficient estimates for Ordinary Least Squares rely on the independence of the features. When features are correlated and the columns of the design matrix \\(X\\) have an approximate linear dependence, the design matrix becomes close to singular and as a result, the least-squares estimate becomes highly sensitive to random errors in the observed target, producing a large variance. This situation of multicollinearity can arise, for example, when data are collected without an experimental design.", "Examples:", "It is possible to constrain all the coefficients to be non-negative, which may be useful when they represent some physical or naturally non-negative quantities (e.g., frequency counts or prices of goods). LinearRegression accepts a boolean positive parameter: when set to True Non Negative Least Squares are then applied.", "Examples:", "The least squares solution is computed using the singular value decomposition of X. If X is a matrix of shape (n_samples, n_features) this method has a cost of \\(O(n_{\\text{samples}} n_{\\text{features}}^2)\\), assuming that \\(n_{\\text{samples}} \\geq n_{\\text{features}}\\).", "Ridge regression addresses some of the problems of Ordinary Least Squares by imposing a penalty on the size of the coefficients. The ridge coefficients minimize a penalized residual sum of squares:", "The complexity parameter \\(\\alpha \\geq 0\\) controls the amount of shrinkage: the larger the value of \\(\\alpha\\), the greater the amount of shrinkage and thus the coefficients become more robust to collinearity.", "As with other linear models, Ridge will take in its fit method arrays X, y and will store the coefficients \\(w\\) of the linear model in its coef_ member:", "The Ridge regressor has a classifier variant: RidgeClassifier. This classifier first converts binary targets to {-1, 1} and then treats the problem as a regression task, optimizing the same objective as above. The predicted class corresponds to the sign of the regressor\u2019s prediction. For multiclass classification, the problem is treated as multi-output regression, and the predicted class corresponds to the output with the highest value.", "It might seem questionable to use a (penalized) Least Squares loss to fit a classification model instead of the more traditional logistic or hinge losses. However in practice all those models can lead to similar cross-validation scores in terms of accuracy or precision/recall, while the penalized least squares loss used by the RidgeClassifier allows for a very different choice of the numerical solvers with distinct computational performance profiles.", "The RidgeClassifier can be significantly faster than e.g. LogisticRegression with a high number of classes, because it is able to compute the projection matrix \\((X^T X)^{-1} X^T\\) only once.", "This classifier is sometimes referred to as a Least Squares Support Vector Machines with a linear kernel.", "Examples:", "This method has the same order of complexity as Ordinary Least Squares.", "RidgeCV implements ridge regression with built-in cross-validation of the alpha parameter. The object works in the same way as GridSearchCV except that it defaults to Leave-One-Out Cross-Validation:", "Specifying the value of the cv attribute will trigger the use of cross-validation with GridSearchCV, for example cv=10 for 10-fold cross-validation, rather than Leave-One-Out Cross-Validation.", "References", "The Lasso is a linear model that estimates sparse coefficients. It is useful in some contexts due to its tendency to prefer solutions with fewer non-zero coefficients, effectively reducing the number of features upon which the given solution is dependent. For this reason Lasso and its variants are fundamental to the field of compressed sensing. Under certain conditions, it can recover the exact set of non-zero coefficients (see Compressive sensing: tomography reconstruction with L1 prior (Lasso)).", "Mathematically, it consists of a linear model with an added regularization term. The objective function to minimize is:", "The lasso estimate thus solves the minimization of the least-squares penalty with \\(\\alpha ||w||_1\\) added, where \\(\\alpha\\) is a constant and \\(||w||_1\\) is the \\(\\ell_1\\)-norm of the coefficient vector.", "The implementation in the class Lasso uses coordinate descent as the algorithm to fit the coefficients. See Least Angle Regression for another implementation:", "The function lasso_path is useful for lower-level tasks, as it computes the coefficients along the full path of possible values.", "Examples:", "Note", "Feature selection with Lasso", "As the Lasso regression yields sparse models, it can thus be used to perform feature selection, as detailed in L1-based feature selection.", "The following two references explain the iterations used in the coordinate descent solver of scikit-learn, as well as the duality gap computation used for convergence control.", "References", "The alpha parameter controls the degree of sparsity of the estimated coefficients.", "scikit-learn exposes objects that set the Lasso alpha parameter by cross-validation: LassoCV and LassoLarsCV. LassoLarsCV is based on the Least Angle Regression algorithm explained below.", "For high-dimensional datasets with many collinear features, LassoCV is most often preferable. However, LassoLarsCV has the advantage of exploring more relevant values of alpha parameter, and if the number of samples is very small compared to the number of features, it is often faster than LassoCV.", "  ", "Alternatively, the estimator LassoLarsIC proposes to use the Akaike information criterion (AIC) and the Bayes Information criterion (BIC). It is a computationally cheaper alternative to find the optimal value of alpha as the regularization path is computed only once instead of k+1 times when using k-fold cross-validation. However, such criteria needs a proper estimation of the degrees of freedom of the solution, are derived for large samples (asymptotic results) and assume the model is correct, i.e. that the data are actually generated by this model. They also tend to break when the problem is badly conditioned (more features than samples).", "Examples:", "The equivalence between alpha and the regularization parameter of SVM, C is given by alpha = 1 / C or alpha = 1 / (n_samples * C), depending on the estimator and the exact objective function optimized by the model.", "The MultiTaskLasso is a linear model that estimates sparse coefficients for multiple regression problems jointly: y is a 2D array, of shape (n_samples, n_tasks). The constraint is that the selected features are the same for all the regression problems, also called tasks.", "The following figure compares the location of the non-zero entries in the coefficient matrix W obtained with a simple Lasso or a MultiTaskLasso. The Lasso estimates yield scattered non-zeros while the non-zeros of the MultiTaskLasso are full columns.", "  ", " Fitting a time-series model, imposing that any active feature be active at all times.", "Examples:", "Mathematically, it consists of a linear model trained with a mixed \\(\\ell_1\\) \\(\\ell_2\\)-norm for regularization. The objective function to minimize is:", "where \\(\\text{Fro}\\) indicates the Frobenius norm", "and \\(\\ell_1\\) \\(\\ell_2\\) reads", "The implementation in the class MultiTaskLasso uses coordinate descent as the algorithm to fit the coefficients.", "ElasticNet is a linear regression model trained with both \\(\\ell_1\\) and \\(\\ell_2\\)-norm regularization of the coefficients. This combination allows for learning a sparse model where few of the weights are non-zero like Lasso, while still maintaining the regularization properties of Ridge. We control the convex combination of \\(\\ell_1\\) and \\(\\ell_2\\) using the l1_ratio parameter.", "Elastic-net is useful when there are multiple features which are correlated with one another. Lasso is likely to pick one of these at random, while elastic-net is likely to pick both.", "A practical advantage of trading-off between Lasso and Ridge is that it allows Elastic-Net to inherit some of Ridge\u2019s stability under rotation.", "The objective function to minimize is in this case", "The class ElasticNetCV can be used to set the parameters alpha (\\(\\alpha\\)) and l1_ratio (\\(\\rho\\)) by cross-validation.", "Examples:", "The following two references explain the iterations used in the coordinate descent solver of scikit-learn, as well as the duality gap computation used for convergence control.", "References", "The MultiTaskElasticNet is an elastic-net model that estimates sparse coefficients for multiple regression problems jointly: Y is a 2D array of shape (n_samples, n_tasks). The constraint is that the selected features are the same for all the regression problems, also called tasks.", "Mathematically, it consists of a linear model trained with a mixed \\(\\ell_1\\) \\(\\ell_2\\)-norm and \\(\\ell_2\\)-norm for regularization. The objective function to minimize is:", "The implementation in the class MultiTaskElasticNet uses coordinate descent as the algorithm to fit the coefficients.", "The class MultiTaskElasticNetCV can be used to set the parameters alpha (\\(\\alpha\\)) and l1_ratio (\\(\\rho\\)) by cross-validation.", "Least-angle regression (LARS) is a regression algorithm for high-dimensional data, developed by Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani. LARS is similar to forward stepwise regression. At each step, it finds the feature most correlated with the target. When there are multiple features having equal correlation, instead of continuing along the same feature, it proceeds in a direction equiangular between the features.", "The advantages of LARS are:", "The disadvantages of the LARS method include:", "The LARS model can be used using estimator Lars, or its low-level implementation lars_path or lars_path_gram.", "LassoLars is a lasso model implemented using the LARS algorithm, and unlike the implementation based on coordinate descent, this yields the exact solution, which is piecewise linear as a function of the norm of its coefficients.", "Examples:", "The Lars algorithm provides the full path of the coefficients along the regularization parameter almost for free, thus a common operation is to retrieve the path with one of the functions lars_path or lars_path_gram.", "The algorithm is similar to forward stepwise regression, but instead of including features at each step, the estimated coefficients are increased in a direction equiangular to each one\u2019s correlations with the residual.", "Instead of giving a vector result, the LARS solution consists of a curve denoting the solution for each value of the \\(\\ell_1\\) norm of the parameter vector. The full coefficients path is stored in the array coef_path_, which has size (n_features, max_features+1). The first column is always zero.", "References:", "OrthogonalMatchingPursuit and orthogonal_mp implements the OMP algorithm for approximating the fit of a linear model with constraints imposed on the number of non-zero coefficients (ie. the \\(\\ell_0\\) pseudo-norm).", "Being a forward feature selection method like Least Angle Regression, orthogonal matching pursuit can approximate the optimum solution vector with a fixed number of non-zero elements:", "Alternatively, orthogonal matching pursuit can target a specific error instead of a specific number of non-zero coefficients. This can be expressed as:", "OMP is based on a greedy algorithm that includes at each step the atom most highly correlated with the current residual. It is similar to the simpler matching pursuit (MP) method, but better in that at each iteration, the residual is recomputed using an orthogonal projection on the space of the previously chosen dictionary elements.", "Examples:", "References:", "Bayesian regression techniques can be used to include regularization parameters in the estimation procedure: the regularization parameter is not set in a hard sense but tuned to the data at hand.", "This can be done by introducing uninformative priors over the hyper parameters of the model. The \\(\\ell_{2}\\) regularization used in Ridge regression and classification is equivalent to finding a maximum a posteriori estimation under a Gaussian prior over the coefficients \\(w\\) with precision \\(\\lambda^{-1}\\). Instead of setting lambda manually, it is possible to treat it as a random variable to be estimated from the data.", "To obtain a fully probabilistic model, the output \\(y\\) is assumed to be Gaussian distributed around \\(X w\\):", "where \\(\\alpha\\) is again treated as a random variable that is to be estimated from the data.", "The advantages of Bayesian Regression are:", "The disadvantages of Bayesian regression include:", "References", "BayesianRidge estimates a probabilistic model of the regression problem as described above. The prior for the coefficient \\(w\\) is given by a spherical Gaussian:", "The priors over \\(\\alpha\\) and \\(\\lambda\\) are chosen to be gamma distributions, the conjugate prior for the precision of the Gaussian. The resulting model is called Bayesian Ridge Regression, and is similar to the classical Ridge.", "The parameters \\(w\\), \\(\\alpha\\) and \\(\\lambda\\) are estimated jointly during the fit of the model, the regularization parameters \\(\\alpha\\) and \\(\\lambda\\) being estimated by maximizing the log marginal likelihood. The scikit-learn implementation is based on the algorithm described in Appendix A of (Tipping, 2001) where the update of the parameters \\(\\alpha\\) and \\(\\lambda\\) is done as suggested in (MacKay, 1992). The initial value of the maximization procedure can be set with the hyperparameters alpha_init and lambda_init.", "There are four more hyperparameters, \\(\\alpha_1\\), \\(\\alpha_2\\), \\(\\lambda_1\\) and \\(\\lambda_2\\) of the gamma prior distributions over \\(\\alpha\\) and \\(\\lambda\\). These are usually chosen to be non-informative. By default \\(\\alpha_1 = \\alpha_2 = \\lambda_1 = \\lambda_2 = 10^{-6}\\).", "Bayesian Ridge Regression is used for regression:", "After being fitted, the model can then be used to predict new values:", "The coefficients \\(w\\) of the model can be accessed:", "Due to the Bayesian framework, the weights found are slightly different to the ones found by Ordinary Least Squares. However, Bayesian Ridge Regression is more robust to ill-posed problems.", "Examples:", "References:", "ARDRegression is very similar to Bayesian Ridge Regression, but can lead to sparser coefficients \\(w\\) 1 2. ARDRegression poses a different prior over \\(w\\), by dropping the assumption of the Gaussian being spherical.", "Instead, the distribution over \\(w\\) is assumed to be an axis-parallel, elliptical Gaussian distribution.", "This means each coefficient \\(w_{i}\\) is drawn from a Gaussian distribution, centered on zero and with a precision \\(\\lambda_{i}\\):", "with \\(\\text{diag}(A) = \\lambda = \\{\\lambda_{1},...,\\lambda_{p}\\}\\).", "In contrast to Bayesian Ridge Regression, each coordinate of \\(w_{i}\\) has its own standard deviation \\(\\lambda_i\\). The prior over all \\(\\lambda_i\\) is chosen to be the same gamma distribution given by hyperparameters \\(\\lambda_1\\) and \\(\\lambda_2\\).", "ARD is also known in the literature as Sparse Bayesian Learning and Relevance Vector Machine 3 4.", "Examples:", "References:", "Christopher M. Bishop: Pattern Recognition and Machine Learning, Chapter 7.2.1", "David Wipf and Srikantan Nagarajan: A new view of automatic relevance determination", "Michael E. Tipping: Sparse Bayesian Learning and the Relevance Vector Machine", "Tristan Fletcher: Relevance Vector Machines explained", "Logistic regression, despite its name, is a linear model for classification rather than regression. Logistic regression is also known in the literature as logit regression, maximum-entropy classification (MaxEnt) or the log-linear classifier. In this model, the probabilities describing the possible outcomes of a single trial are modeled using a logistic function.", "Logistic regression is implemented in LogisticRegression. This implementation can fit binary, One-vs-Rest, or multinomial logistic regression with optional \\(\\ell_1\\), \\(\\ell_2\\) or Elastic-Net regularization.", "Note", "Regularization is applied by default, which is common in machine learning but not in statistics. Another advantage of regularization is that it improves numerical stability. No regularization amounts to setting C to a very high value.", "As an optimization problem, binary class \\(\\ell_2\\) penalized logistic regression minimizes the following cost function:", "Similarly, \\(\\ell_1\\) regularized logistic regression solves the following optimization problem:", "Elastic-Net regularization is a combination of \\(\\ell_1\\) and \\(\\ell_2\\), and minimizes the following cost function:", "where \\(\\rho\\) controls the strength of \\(\\ell_1\\) regularization vs. \\(\\ell_2\\) regularization (it corresponds to the l1_ratio parameter).", "Note that, in this notation, it\u2019s assumed that the target \\(y_i\\) takes values in the set \\({-1, 1}\\) at trial \\(i\\). We can also see that Elastic-Net is equivalent to \\(\\ell_1\\) when \\(\\rho = 1\\) and equivalent to \\(\\ell_2\\) when \\(\\rho=0\\).", "The solvers implemented in the class LogisticRegression are \u201cliblinear\u201d, \u201cnewton-cg\u201d, \u201clbfgs\u201d, \u201csag\u201d and \u201csaga\u201d:", "The solver \u201cliblinear\u201d uses a coordinate descent (CD) algorithm, and relies on the excellent C++ LIBLINEAR library, which is shipped with scikit-learn. However, the CD algorithm implemented in liblinear cannot learn a true multinomial (multiclass) model; instead, the optimization problem is decomposed in a \u201cone-vs-rest\u201d fashion so separate binary classifiers are trained for all classes. This happens under the hood, so LogisticRegression instances using this solver behave as multiclass classifiers. For \\(\\ell_1\\) regularization sklearn.svm.l1_min_c allows to calculate the lower bound for C in order to get a non \u201cnull\u201d (all feature weights to zero) model.", "The \u201clbfgs\u201d, \u201csag\u201d and \u201cnewton-cg\u201d solvers only support \\(\\ell_2\\) regularization or no regularization, and are found to converge faster for some high-dimensional data. Setting multi_class to \u201cmultinomial\u201d with these solvers learns a true multinomial logistic regression model 5, which means that its probability estimates should be better calibrated than the default \u201cone-vs-rest\u201d setting.", "The \u201csag\u201d solver uses Stochastic Average Gradient descent 6. It is faster than other solvers for large datasets, when both the number of samples and the number of features are large.", "The \u201csaga\u201d solver 7 is a variant of \u201csag\u201d that also supports the non-smooth penalty=\"l1\". This is therefore the solver of choice for sparse multinomial logistic regression. It is also the only solver that supports penalty=\"elasticnet\".", "The \u201clbfgs\u201d is an optimization algorithm that approximates the Broyden\u2013Fletcher\u2013Goldfarb\u2013Shanno algorithm 8, which belongs to quasi-Newton methods. The \u201clbfgs\u201d solver is recommended for use for small data-sets but for larger datasets its performance suffers. 9", "The following table summarizes the penalties supported by each solver:", "Solvers", "Penalties", "\u2018liblinear\u2019", "\u2018lbfgs\u2019", "\u2018newton-cg\u2019", "\u2018sag\u2019", "\u2018saga\u2019", "Multinomial + L2 penalty", "no", "yes", "yes", "yes", "yes", "OVR + L2 penalty", "yes", "yes", "yes", "yes", "yes", "Multinomial + L1 penalty", "no", "no", "no", "no", "yes", "OVR + L1 penalty", "yes", "no", "no", "no", "yes", "Elastic-Net", "no", "no", "no", "no", "yes", "No penalty (\u2018none\u2019)", "no", "yes", "yes", "yes", "yes", "Behaviors", "Penalize the intercept (bad)", "yes", "no", "no", "no", "no", "Faster for large datasets", "no", "no", "no", "yes", "yes", "Robust to unscaled datasets", "yes", "yes", "yes", "no", "no", "The \u201clbfgs\u201d solver is used by default for its robustness. For large datasets the \u201csaga\u201d solver is usually faster. For large dataset, you may also consider using SGDClassifier with \u2018log\u2019 loss, which might be even faster but requires more tuning.", "Examples:", "Differences from liblinear:", "There might be a difference in the scores obtained between LogisticRegression with solver=liblinear or LinearSVC and the external liblinear library directly, when fit_intercept=False and the fit coef_ (or) the data to be predicted are zeroes. This is because for the sample(s) with decision_function zero, LogisticRegression and LinearSVC predict the negative class, while liblinear predicts the positive class. Note that a model with fit_intercept=False and having many samples with decision_function zero, is likely to be a underfit, bad model and you are advised to set fit_intercept=True and increase the intercept_scaling.", "Note", "Feature selection with sparse logistic regression", "A logistic regression with \\(\\ell_1\\) penalty yields sparse models, and can thus be used to perform feature selection, as detailed in L1-based feature selection.", "Note", "P-value estimation", "It is possible to obtain the p-values and confidence intervals for coefficients in cases of regression without penalization. The statsmodels\npackage <https://pypi.org/project/statsmodels/> natively supports this. Within sklearn, one could use bootstrapping instead as well.", "LogisticRegressionCV implements Logistic Regression with built-in cross-validation support, to find the optimal C and l1_ratio parameters according to the scoring attribute. The \u201cnewton-cg\u201d, \u201csag\u201d, \u201csaga\u201d and \u201clbfgs\u201d solvers are found to be faster for high-dimensional dense data, due to warm-starting (see Glossary).", "References:", "Christopher M. Bishop: Pattern Recognition and Machine Learning, Chapter 4.3.4", "Mark Schmidt, Nicolas Le Roux, and Francis Bach: Minimizing Finite Sums with the Stochastic Average Gradient.", "Aaron Defazio, Francis Bach, Simon Lacoste-Julien: SAGA: A Fast Incremental Gradient Method With Support for Non-Strongly Convex Composite Objectives.", "https://en.wikipedia.org/wiki/Broyden%E2%80%93Fletcher%E2%80%93Goldfarb%E2%80%93Shanno_algorithm", "\u201cPerformance Evaluation of Lbfgs vs other solvers\u201d", "Generalized Linear Models (GLM) extend linear models in two ways 10. First, the predicted values \\(\\hat{y}\\) are linked to a linear combination of the input variables \\(X\\) via an inverse link function \\(h\\) as", "Secondly, the squared loss function is replaced by the unit deviance \\(d\\) of a distribution in the exponential family (or more precisely, a reproductive exponential dispersion model (EDM) 11).", "The minimization problem becomes:", "where \\(\\alpha\\) is the L2 regularization penalty. When sample weights are provided, the average becomes a weighted average.", "The following table lists some specific EDMs and their unit deviance (all of these are instances of the Tweedie family):", "Distribution", "Target Domain", "Unit Deviance \\(d(y, \\hat{y})\\)", "Normal", "\\(y \\in (-\\infty, \\infty)\\)", "\\((y-\\hat{y})^2\\)", "Poisson", "\\(y \\in [0, \\infty)\\)", "\\(2(y\\log\\frac{y}{\\hat{y}}-y+\\hat{y})\\)", "Gamma", "\\(y \\in (0, \\infty)\\)", "\\(2(\\log\\frac{\\hat{y}}{y}+\\frac{y}{\\hat{y}}-1)\\)", "Inverse Gaussian", "\\(y \\in (0, \\infty)\\)", "\\(\\frac{(y-\\hat{y})^2}{y\\hat{y}^2}\\)", "The Probability Density Functions (PDF) of these distributions are illustrated in the following figure,", "PDF of a random variable Y following Poisson, Tweedie (power=1.5) and Gamma distributions with different mean values (\\(\\mu\\)). Observe the point mass at \\(Y=0\\) for the Poisson distribution and the Tweedie (power=1.5) distribution, but not for the Gamma distribution which has a strictly positive target domain.", "The choice of the distribution depends on the problem at hand:", "Examples of use cases include:", "References:", "McCullagh, Peter; Nelder, John (1989). Generalized Linear Models, Second Edition. Boca Raton: Chapman and Hall/CRC. ISBN 0-412-31760-5.", "J\u00f8rgensen, B. (1992). The theory of exponential dispersion models and analysis of deviance. Monografias de matem\u00e1tica, no. 51. See also Exponential dispersion model.", "TweedieRegressor implements a generalized linear model for the Tweedie distribution, that allows to model any of the above mentioned distributions using the appropriate power parameter. In particular:", "The link function is determined by the link parameter.", "Usage example:", "Examples:", "The feature matrix X should be standardized before fitting. This ensures that the penalty treats features equally.", "Since the linear predictor \\(Xw\\) can be negative and Poisson, Gamma and Inverse Gaussian distributions don\u2019t support negative values, it is necessary to apply an inverse link function that guarantees the non-negativeness. For example with link='log', the inverse link function becomes \\(h(Xw)=\\exp(Xw)\\).", "If you want to model a relative frequency, i.e. counts per exposure (time, volume, \u2026) you can do so by using a Poisson distribution and passing \\(y=\\frac{\\mathrm{counts}}{\\mathrm{exposure}}\\) as target values together with \\(\\mathrm{exposure}\\) as sample weights. For a concrete example see e.g. Tweedie regression on insurance claims.", "When performing cross-validation for the power parameter of TweedieRegressor, it is advisable to specify an explicit scoring function, because the default scorer TweedieRegressor.score is a function of power itself.", "Stochastic gradient descent is a simple yet very efficient approach to fit linear models. It is particularly useful when the number of samples (and the number of features) is very large. The partial_fit method allows online/out-of-core learning.", "The classes SGDClassifier and SGDRegressor provide functionality to fit linear models for classification and regression using different (convex) loss functions and different penalties. E.g., with loss=\"log\", SGDClassifier fits a logistic regression model, while with loss=\"hinge\" it fits a linear support vector machine (SVM).", "References", "The Perceptron is another simple classification algorithm suitable for large scale learning. By default:", "The last characteristic implies that the Perceptron is slightly faster to train than SGD with the hinge loss and that the resulting models are sparser.", "The passive-aggressive algorithms are a family of algorithms for large-scale learning. They are similar to the Perceptron in that they do not require a learning rate. However, contrary to the Perceptron, they include a regularization parameter C.", "For classification, PassiveAggressiveClassifier can be used with loss='hinge' (PA-I) or loss='squared_hinge' (PA-II). For regression, PassiveAggressiveRegressor can be used with loss='epsilon_insensitive' (PA-I) or loss='squared_epsilon_insensitive' (PA-II).", "References:", "Robust regression aims to fit a regression model in the presence of corrupt data: either outliers, or error in the model.", "There are different things to keep in mind when dealing with data corrupted by outliers:", "Outliers in X or in y?", "Outliers in the y direction", "Outliers in the X direction", "", "", "Fraction of outliers versus amplitude of error", "The number of outlying points matters, but also how much they are outliers.", "Small outliers", "Large outliers", "", "", "An important notion of robust fitting is that of breakdown point: the fraction of data that can be outlying for the fit to start missing the inlying data.", "Note that in general, robust fitting in high-dimensional setting (large n_features) is very hard. The robust models here will probably not work in these settings.", "Trade-offs: which estimator?", "Scikit-learn provides 3 robust regression estimators: RANSAC, Theil Sen and HuberRegressor.", "When in doubt, use RANSAC.", "RANSAC (RANdom SAmple Consensus) fits a model from random subsets of inliers from the complete data set.", "RANSAC is a non-deterministic algorithm producing only a reasonable result with a certain probability, which is dependent on the number of iterations (see max_trials parameter). It is typically used for linear and non-linear regression problems and is especially popular in the field of photogrammetric computer vision.", "The algorithm splits the complete input sample data into a set of inliers, which may be subject to noise, and outliers, which are e.g. caused by erroneous measurements or invalid hypotheses about the data. The resulting model is then estimated only from the determined inliers.", "Each iteration performs the following steps:", "These steps are performed either a maximum number of times (max_trials) or until one of the special stop criteria are met (see stop_n_inliers and stop_score). The final model is estimated using all inlier samples (consensus set) of the previously determined best model.", "The is_data_valid and is_model_valid functions allow to identify and reject degenerate combinations of random sub-samples. If the estimated model is not needed for identifying degenerate cases, is_data_valid should be used as it is called prior to fitting the model and thus leading to better computational performance.", "Examples:", "References:", "The TheilSenRegressor estimator uses a generalization of the median in multiple dimensions. It is thus robust to multivariate outliers. Note however that the robustness of the estimator decreases quickly with the dimensionality of the problem. It loses its robustness properties and becomes no better than an ordinary least squares in high dimension.", "Examples:", "References:", "TheilSenRegressor is comparable to the Ordinary Least Squares (OLS) in terms of asymptotic efficiency and as an unbiased estimator. In contrast to OLS, Theil-Sen is a non-parametric method which means it makes no assumption about the underlying distribution of the data. Since Theil-Sen is a median-based estimator, it is more robust against corrupted data aka outliers. In univariate setting, Theil-Sen has a breakdown point of about 29.3% in case of a simple linear regression which means that it can tolerate arbitrary corrupted data of up to 29.3%.", "The implementation of TheilSenRegressor in scikit-learn follows a generalization to a multivariate linear regression model 12 using the spatial median which is a generalization of the median to multiple dimensions 13.", "In terms of time and space complexity, Theil-Sen scales according to", "which makes it infeasible to be applied exhaustively to problems with a large number of samples and features. Therefore, the magnitude of a subpopulation can be chosen to limit the time and space complexity by considering only a random subset of all possible combinations.", "Examples:", "References:", "Xin Dang, Hanxiang Peng, Xueqin Wang and Heping Zhang: Theil-Sen Estimators in a Multiple Linear Regression Model.", "The HuberRegressor is different to Ridge because it applies a linear loss to samples that are classified as outliers. A sample is classified as an inlier if the absolute error of that sample is lesser than a certain threshold. It differs from TheilSenRegressor and RANSACRegressor because it does not ignore the effect of the outliers but gives a lesser weight to them.", "The loss function that HuberRegressor minimizes is given by", "where", "It is advised to set the parameter epsilon to 1.35 to achieve 95% statistical efficiency.", "The HuberRegressor differs from using SGDRegressor with loss set to huber in the following ways.", "Examples:", "References:", "Note that this estimator is different from the R implementation of Robust Regression (http://www.ats.ucla.edu/stat/r/dae/rreg.htm) because the R implementation does a weighted least squares implementation with weights given to each sample on the basis of how much the residual is greater than a certain threshold.", "One common pattern within machine learning is to use linear models trained on nonlinear functions of the data. This approach maintains the generally fast performance of linear methods, while allowing them to fit a much wider range of data.", "For example, a simple linear regression can be extended by constructing polynomial features from the coefficients. In the standard linear regression case, you might have a model that looks like this for two-dimensional data:", "If we want to fit a paraboloid to the data instead of a plane, we can combine the features in second-order polynomials, so that the model looks like this:", "The (sometimes surprising) observation is that this is still a linear model: to see this, imagine creating a new set of features", "With this re-labeling of the data, our problem can be written", "We see that the resulting polynomial regression is in the same class of linear models we considered above (i.e. the model is linear in \\(w\\)) and can be solved by the same techniques. By considering linear fits within a higher-dimensional space built with these basis functions, the model has the flexibility to fit a much broader range of data.", "Here is an example of applying this idea to one-dimensional data, using polynomial features of varying degrees:", "This figure is created using the PolynomialFeatures transformer, which transforms an input data matrix into a new data matrix of a given degree. It can be used as follows:", "The features of X have been transformed from \\([x_1, x_2]\\) to \\([1, x_1, x_2, x_1^2, x_1 x_2, x_2^2]\\), and can now be used within any linear model.", "This sort of preprocessing can be streamlined with the Pipeline tools. A single object representing a simple polynomial regression can be created and used as follows:", "The linear model trained on polynomial features is able to exactly recover the input polynomial coefficients.", "In some cases it\u2019s not necessary to include higher powers of any single feature, but only the so-called interaction features that multiply together at most \\(d\\) distinct features. These can be gotten from PolynomialFeatures with the setting interaction_only=True.", "For example, when dealing with boolean features, \\(x_i^n = x_i\\) for all \\(n\\) and is therefore useless; but \\(x_i x_j\\) represents the conjunction of two booleans. This way, we can solve the XOR problem with a linear classifier:", "And the classifier \u201cpredictions\u201d are perfect:"]}, {"name": "1.2. Linear and Quadratic Discriminant Analysis", "path": "modules/lda_qda", "type": "Guide", "text": ["Linear Discriminant Analysis (LinearDiscriminantAnalysis) and Quadratic Discriminant Analysis (QuadraticDiscriminantAnalysis) are two classic classifiers, with, as their names suggest, a linear and a quadratic decision surface, respectively.", "These classifiers are attractive because they have closed-form solutions that can be easily computed, are inherently multiclass, have proven to work well in practice, and have no hyperparameters to tune.", " ", "The plot shows decision boundaries for Linear Discriminant Analysis and Quadratic Discriminant Analysis. The bottom row demonstrates that Linear Discriminant Analysis can only learn linear boundaries, while Quadratic Discriminant Analysis can learn quadratic boundaries and is therefore more flexible.", "Examples:", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid: Comparison of LDA and QDA on synthetic data.", "LinearDiscriminantAnalysis can be used to perform supervised dimensionality reduction, by projecting the input data to a linear subspace consisting of the directions which maximize the separation between classes (in a precise sense discussed in the mathematics section below). The dimension of the output is necessarily less than the number of classes, so this is in general a rather strong dimensionality reduction, and only makes sense in a multiclass setting.", "This is implemented in the transform method. The desired dimensionality can be set using the n_components parameter. This parameter has no influence on the fit and predict methods.", "Examples:", "Comparison of LDA and PCA 2D projection of Iris dataset: Comparison of LDA and PCA for dimensionality reduction of the Iris dataset", "Both LDA and QDA can be derived from simple probabilistic models which model the class conditional distribution of the data \\(P(X|y=k)\\) for each class \\(k\\). Predictions can then be obtained by using Bayes\u2019 rule, for each training sample \\(x \\in \\mathcal{R}^d\\):", "and we select the class \\(k\\) which maximizes this posterior probability.", "More specifically, for linear and quadratic discriminant analysis, \\(P(x|y)\\) is modeled as a multivariate Gaussian distribution with density:", "where \\(d\\) is the number of features.", "According to the model above, the log of the posterior is:", "where the constant term \\(Cst\\) corresponds to the denominator \\(P(x)\\), in addition to other constant terms from the Gaussian. The predicted class is the one that maximises this log-posterior.", "Note", "Relation with Gaussian Naive Bayes", "If in the QDA model one assumes that the covariance matrices are diagonal, then the inputs are assumed to be conditionally independent in each class, and the resulting classifier is equivalent to the Gaussian Naive Bayes classifier naive_bayes.GaussianNB.", "LDA is a special case of QDA, where the Gaussians for each class are assumed to share the same covariance matrix: \\(\\Sigma_k = \\Sigma\\) for all \\(k\\). This reduces the log posterior to:", "The term \\((x-\\mu_k)^t \\Sigma^{-1} (x-\\mu_k)\\) corresponds to the Mahalanobis Distance between the sample \\(x\\) and the mean \\(\\mu_k\\). The Mahalanobis distance tells how close \\(x\\) is from \\(\\mu_k\\), while also accounting for the variance of each feature. We can thus interpret LDA as assigning \\(x\\) to the class whose mean is the closest in terms of Mahalanobis distance, while also accounting for the class prior probabilities.", "The log-posterior of LDA can also be written 3 as:", "where \\(\\omega_k = \\Sigma^{-1} \\mu_k\\) and \\(\\omega_{k0} = -\\frac{1}{2} \\mu_k^t\\Sigma^{-1}\\mu_k + \\log P (y = k)\\). These quantities correspond to the coef_ and intercept_ attributes, respectively.", "From the above formula, it is clear that LDA has a linear decision surface. In the case of QDA, there are no assumptions on the covariance matrices \\(\\Sigma_k\\) of the Gaussians, leading to quadratic decision surfaces. See 1 for more details.", "First note that the K means \\(\\mu_k\\) are vectors in \\(\\mathcal{R}^d\\), and they lie in an affine subspace \\(H\\) of dimension at least \\(K - 1\\) (2 points lie on a line, 3 points lie on a plane, etc).", "As mentioned above, we can interpret LDA as assigning \\(x\\) to the class whose mean \\(\\mu_k\\) is the closest in terms of Mahalanobis distance, while also accounting for the class prior probabilities. Alternatively, LDA is equivalent to first sphering the data so that the covariance matrix is the identity, and then assigning \\(x\\) to the closest mean in terms of Euclidean distance (still accounting for the class priors).", "Computing Euclidean distances in this d-dimensional space is equivalent to first projecting the data points into \\(H\\), and computing the distances there (since the other dimensions will contribute equally to each class in terms of distance). In other words, if \\(x\\) is closest to \\(\\mu_k\\) in the original space, it will also be the case in \\(H\\). This shows that, implicit in the LDA classifier, there is a dimensionality reduction by linear projection onto a \\(K-1\\) dimensional space.", "We can reduce the dimension even more, to a chosen \\(L\\), by projecting onto the linear subspace \\(H_L\\) which maximizes the variance of the \\(\\mu^*_k\\) after projection (in effect, we are doing a form of PCA for the transformed class means \\(\\mu^*_k\\)). This \\(L\\) corresponds to the n_components parameter used in the transform method. See 1 for more details.", "Shrinkage is a form of regularization used to improve the estimation of covariance matrices in situations where the number of training samples is small compared to the number of features. In this scenario, the empirical sample covariance is a poor estimator, and shrinkage helps improving the generalization performance of the classifier. Shrinkage LDA can be used by setting the shrinkage parameter of the LinearDiscriminantAnalysis class to \u2018auto\u2019. This automatically determines the optimal shrinkage parameter in an analytic way following the lemma introduced by Ledoit and Wolf 2. Note that currently shrinkage only works when setting the solver parameter to \u2018lsqr\u2019 or \u2018eigen\u2019.", "The shrinkage parameter can also be manually set between 0 and 1. In particular, a value of 0 corresponds to no shrinkage (which means the empirical covariance matrix will be used) and a value of 1 corresponds to complete shrinkage (which means that the diagonal matrix of variances will be used as an estimate for the covariance matrix). Setting this parameter to a value between these two extrema will estimate a shrunk version of the covariance matrix.", "The shrinked Ledoit and Wolf estimator of covariance may not always be the best choice. For example if the distribution of the data is normally distributed, the Oracle Shrinkage Approximating estimator sklearn.covariance.OAS yields a smaller Mean Squared Error than the one given by Ledoit and Wolf\u2019s formula used with shrinkage=\u201dauto\u201d. In LDA, the data are assumed to be gaussian conditionally to the class. If these assumptions hold, using LDA with the OAS estimator of covariance will yield a better classification accuracy than if Ledoit and Wolf or the empirical covariance estimator is used.", "The covariance estimator can be chosen using with the covariance_estimator parameter of the discriminant_analysis.LinearDiscriminantAnalysis class. A covariance estimator should have a fit method and a covariance_ attribute like all covariance estimators in the sklearn.covariance module.", " ", "Examples:", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification: Comparison of LDA classifiers with Empirical, Ledoit Wolf and OAS covariance estimator.", "Using LDA and QDA requires computing the log-posterior which depends on the class priors \\(P(y=k)\\), the class means \\(\\mu_k\\), and the covariance matrices.", "The \u2018svd\u2019 solver is the default solver used for LinearDiscriminantAnalysis, and it is the only available solver for QuadraticDiscriminantAnalysis. It can perform both classification and transform (for LDA). As it does not rely on the calculation of the covariance matrix, the \u2018svd\u2019 solver may be preferable in situations where the number of features is large. The \u2018svd\u2019 solver cannot be used with shrinkage. For QDA, the use of the SVD solver relies on the fact that the covariance matrix \\(\\Sigma_k\\) is, by definition, equal to \\(\\frac{1}{n - 1} X_k^tX_k = V S^2 V^t\\) where \\(V\\) comes from the SVD of the (centered) matrix: \\(X_k = U S V^t\\). It turns out that we can compute the log-posterior above without having to explictly compute \\(\\Sigma\\): computing \\(S\\) and \\(V\\) via the SVD of \\(X\\) is enough. For LDA, two SVDs are computed: the SVD of the centered input matrix \\(X\\) and the SVD of the class-wise mean vectors.", "The \u2018lsqr\u2019 solver is an efficient algorithm that only works for classification. It needs to explicitly compute the covariance matrix \\(\\Sigma\\), and supports shrinkage and custom covariance estimators. This solver computes the coefficients \\(\\omega_k = \\Sigma^{-1}\\mu_k\\) by solving for \\(\\Sigma \\omega = \\mu_k\\), thus avoiding the explicit computation of the inverse \\(\\Sigma^{-1}\\).", "The \u2018eigen\u2019 solver is based on the optimization of the between class scatter to within class scatter ratio. It can be used for both classification and transform, and it supports shrinkage. However, the \u2018eigen\u2019 solver needs to compute the covariance matrix, so it might not be suitable for situations with a high number of features.", "References:", "\u201cThe Elements of Statistical Learning\u201d, Hastie T., Tibshirani R., Friedman J., Section 4.3, p.106-119, 2008.", "Ledoit O, Wolf M. Honey, I Shrunk the Sample Covariance Matrix. The Journal of Portfolio Management 30(4), 110-119, 2004.", "R. O. Duda, P. E. Hart, D. G. Stork. Pattern Classification (Second Edition), section 2.6.2."]}, {"name": "1.3. Kernel ridge regression", "path": "modules/kernel_ridge", "type": "Guide", "text": ["Kernel ridge regression (KRR) [M2012] combines Ridge regression and classification (linear least squares with l2-norm regularization) with the kernel trick. It thus learns a linear function in the space induced by the respective kernel and the data. For non-linear kernels, this corresponds to a non-linear function in the original space.", "The form of the model learned by KernelRidge is identical to support vector regression (SVR). However, different loss functions are used: KRR uses squared error loss while support vector regression uses \\(\\epsilon\\)-insensitive loss, both combined with l2 regularization. In contrast to SVR, fitting KernelRidge can be done in closed-form and is typically faster for medium-sized datasets. On the other hand, the learned model is non-sparse and thus slower than SVR, which learns a sparse model for \\(\\epsilon > 0\\), at prediction-time.", "The following figure compares KernelRidge and SVR on an artificial dataset, which consists of a sinusoidal target function and strong noise added to every fifth datapoint. The learned model of KernelRidge and SVR is plotted, where both complexity/regularization and bandwidth of the RBF kernel have been optimized using grid-search. The learned functions are very similar; however, fitting KernelRidge is approximately seven times faster than fitting SVR (both with grid-search). However, prediction of 100000 target values is more than three times faster with SVR since it has learned a sparse model using only approximately 1/3 of the 100 training datapoints as support vectors.", "The next figure compares the time for fitting and prediction of KernelRidge and SVR for different sizes of the training set. Fitting KernelRidge is faster than SVR for medium-sized training sets (less than 1000 samples); however, for larger training sets SVR scales better. With regard to prediction time, SVR is faster than KernelRidge for all sizes of the training set because of the learned sparse solution. Note that the degree of sparsity and thus the prediction time depends on the parameters \\(\\epsilon\\) and \\(C\\) of the SVR; \\(\\epsilon = 0\\) would correspond to a dense model.", "References:", "\u201cMachine Learning: A Probabilistic Perspective\u201d Murphy, K. P. - chapter 14.4.3, pp. 492-493, The MIT Press, 2012"]}, {"name": "1.4. Support Vector Machines", "path": "modules/svm", "type": "Guide", "text": ["Support vector machines (SVMs) are a set of supervised learning methods used for classification, regression and outliers detection.", "The advantages of support vector machines are:", "The disadvantages of support vector machines include:", "The support vector machines in scikit-learn support both dense (numpy.ndarray and convertible to that by numpy.asarray) and sparse (any scipy.sparse) sample vectors as input. However, to use an SVM to make predictions for sparse data, it must have been fit on such data. For optimal performance, use C-ordered numpy.ndarray (dense) or scipy.sparse.csr_matrix (sparse) with dtype=float64.", "SVC, NuSVC and LinearSVC are classes capable of performing binary and multi-class classification on a dataset.", "SVC and NuSVC are similar methods, but accept slightly different sets of parameters and have different mathematical formulations (see section Mathematical formulation). On the other hand, LinearSVC is another (faster) implementation of Support Vector Classification for the case of a linear kernel. Note that LinearSVC does not accept parameter kernel, as this is assumed to be linear. It also lacks some of the attributes of SVC and NuSVC, like support_.", "As other classifiers, SVC, NuSVC and LinearSVC take as input two arrays: an array X of shape (n_samples, n_features) holding the training samples, and an array y of class labels (strings or integers), of shape (n_samples):", "After being fitted, the model can then be used to predict new values:", "SVMs decision function (detailed in the Mathematical formulation) depends on some subset of the training data, called the support vectors. Some properties of these support vectors can be found in attributes support_vectors_, support_ and n_support_:", "Examples:", "SVC and NuSVC implement the \u201cone-versus-one\u201d approach for multi-class classification. In total, n_classes * (n_classes - 1) / 2 classifiers are constructed and each one trains data from two classes. To provide a consistent interface with other classifiers, the decision_function_shape option allows to monotonically transform the results of the \u201cone-versus-one\u201d classifiers to a \u201cone-vs-rest\u201d decision function of shape (n_samples, n_classes).", "On the other hand, LinearSVC implements \u201cone-vs-the-rest\u201d multi-class strategy, thus training n_classes models.", "See Mathematical formulation for a complete description of the decision function.", "Note that the LinearSVC also implements an alternative multi-class strategy, the so-called multi-class SVM formulated by Crammer and Singer 16, by using the option multi_class='crammer_singer'. In practice, one-vs-rest classification is usually preferred, since the results are mostly similar, but the runtime is significantly less.", "For \u201cone-vs-rest\u201d LinearSVC the attributes coef_ and intercept_ have the shape (n_classes, n_features) and (n_classes,) respectively. Each row of the coefficients corresponds to one of the n_classes \u201cone-vs-rest\u201d classifiers and similar for the intercepts, in the order of the \u201cone\u201d class.", "In the case of \u201cone-vs-one\u201d SVC and NuSVC, the layout of the attributes is a little more involved. In the case of a linear kernel, the attributes coef_ and intercept_ have the shape (n_classes * (n_classes - 1) / 2, n_features) and (n_classes *\n(n_classes - 1) / 2) respectively. This is similar to the layout for LinearSVC described above, with each row now corresponding to a binary classifier. The order for classes 0 to n is \u201c0 vs 1\u201d, \u201c0 vs 2\u201d , \u2026 \u201c0 vs n\u201d, \u201c1 vs 2\u201d, \u201c1 vs 3\u201d, \u201c1 vs n\u201d, . . . \u201cn-1 vs n\u201d.", "The shape of dual_coef_ is (n_classes-1, n_SV) with a somewhat hard to grasp layout. The columns correspond to the support vectors involved in any of the n_classes * (n_classes - 1) / 2 \u201cone-vs-one\u201d classifiers. Each of the support vectors is used in n_classes - 1 classifiers. The n_classes - 1 entries in each row correspond to the dual coefficients for these classifiers.", "This might be clearer with an example: consider a three class problem with class 0 having three support vectors \\(v^{0}_0, v^{1}_0, v^{2}_0\\) and class 1 and 2 having two support vectors \\(v^{0}_1, v^{1}_1\\) and \\(v^{0}_2, v^{1}_2\\) respectively. For each support vector \\(v^{j}_i\\), there are two dual coefficients. Let\u2019s call the coefficient of support vector \\(v^{j}_i\\) in the classifier between classes \\(i\\) and \\(k\\) \\(\\alpha^{j}_{i,k}\\). Then dual_coef_ looks like this:", "\\(\\alpha^{0}_{0,1}\\)", "\\(\\alpha^{0}_{0,2}\\)", "Coefficients for SVs of class 0", "\\(\\alpha^{1}_{0,1}\\)", "\\(\\alpha^{1}_{0,2}\\)", "\\(\\alpha^{2}_{0,1}\\)", "\\(\\alpha^{2}_{0,2}\\)", "\\(\\alpha^{0}_{1,0}\\)", "\\(\\alpha^{0}_{1,2}\\)", "Coefficients for SVs of class 1", "\\(\\alpha^{1}_{1,0}\\)", "\\(\\alpha^{1}_{1,2}\\)", "\\(\\alpha^{0}_{2,0}\\)", "\\(\\alpha^{0}_{2,1}\\)", "Coefficients for SVs of class 2", "\\(\\alpha^{1}_{2,0}\\)", "\\(\\alpha^{1}_{2,1}\\)", "Examples:", "The decision_function method of SVC and NuSVC gives per-class scores for each sample (or a single score per sample in the binary case). When the constructor option probability is set to True, class membership probability estimates (from the methods predict_proba and predict_log_proba) are enabled. In the binary case, the probabilities are calibrated using Platt scaling 9: logistic regression on the SVM\u2019s scores, fit by an additional cross-validation on the training data. In the multiclass case, this is extended as per 10.", "Note", "The same probability calibration procedure is available for all estimators via the CalibratedClassifierCV (see Probability calibration). In the case of SVC and NuSVC, this procedure is builtin in libsvm which is used under the hood, so it does not rely on scikit-learn\u2019s CalibratedClassifierCV.", "The cross-validation involved in Platt scaling is an expensive operation for large datasets. In addition, the probability estimates may be inconsistent with the scores:", "Platt\u2019s method is also known to have theoretical issues. If confidence scores are required, but these do not have to be probabilities, then it is advisable to set probability=False and use decision_function instead of predict_proba.", "Please note that when decision_function_shape='ovr' and n_classes > 2, unlike decision_function, the predict method does not try to break ties by default. You can set break_ties=True for the output of predict to be the same as np.argmax(clf.decision_function(...), axis=1), otherwise the first class among the tied classes will always be returned; but have in mind that it comes with a computational cost. See SVM Tie Breaking Example for an example on tie breaking.", "In problems where it is desired to give more importance to certain classes or certain individual samples, the parameters class_weight and sample_weight can be used.", "SVC (but not NuSVC) implements the parameter class_weight in the fit method. It\u2019s a dictionary of the form {class_label : value}, where value is a floating point number > 0 that sets the parameter C of class class_label to C * value. The figure below illustrates the decision boundary of an unbalanced problem, with and without weight correction.", "SVC, NuSVC, SVR, NuSVR, LinearSVC, LinearSVR and OneClassSVM implement also weights for individual samples in the fit method through the sample_weight parameter. Similar to class_weight, this sets the parameter C for the i-th example to C * sample_weight[i], which will encourage the classifier to get these samples right. The figure below illustrates the effect of sample weighting on the decision boundary. The size of the circles is proportional to the sample weights:", "Examples:", "The method of Support Vector Classification can be extended to solve regression problems. This method is called Support Vector Regression.", "The model produced by support vector classification (as described above) depends only on a subset of the training data, because the cost function for building the model does not care about training points that lie beyond the margin. Analogously, the model produced by Support Vector Regression depends only on a subset of the training data, because the cost function ignores samples whose prediction is close to their target.", "There are three different implementations of Support Vector Regression: SVR, NuSVR and LinearSVR. LinearSVR provides a faster implementation than SVR but only considers the linear kernel, while NuSVR implements a slightly different formulation than SVR and LinearSVR. See Implementation details for further details.", "As with classification classes, the fit method will take as argument vectors X, y, only that in this case y is expected to have floating point values instead of integer values:", "Examples:", "The class OneClassSVM implements a One-Class SVM which is used in outlier detection.", "See Novelty and Outlier Detection for the description and usage of OneClassSVM.", "Support Vector Machines are powerful tools, but their compute and storage requirements increase rapidly with the number of training vectors. The core of an SVM is a quadratic programming problem (QP), separating support vectors from the rest of the training data. The QP solver used by the libsvm-based implementation scales between \\(O(n_{features} \\times n_{samples}^2)\\) and \\(O(n_{features} \\times n_{samples}^3)\\) depending on how efficiently the libsvm cache is used in practice (dataset dependent). If the data is very sparse \\(n_{features}\\) should be replaced by the average number of non-zero features in a sample vector.", "For the linear case, the algorithm used in LinearSVC by the liblinear implementation is much more efficient than its libsvm-based SVC counterpart and can scale almost linearly to millions of samples and/or features.", "Avoiding data copy: For SVC, SVR, NuSVC and NuSVR, if the data passed to certain methods is not C-ordered contiguous and double precision, it will be copied before calling the underlying C implementation. You can check whether a given numpy array is C-contiguous by inspecting its flags attribute.", "For LinearSVC (and LogisticRegression) any input passed as a numpy array will be copied and converted to the liblinear internal sparse data representation (double precision floats and int32 indices of non-zero components). If you want to fit a large-scale linear classifier without copying a dense numpy C-contiguous double precision array as input, we suggest to use the SGDClassifier class instead. The objective function can be configured to be almost the same as the LinearSVC model.", "Setting C: C is 1 by default and it\u2019s a reasonable default choice. If you have a lot of noisy observations you should decrease it: decreasing C corresponds to more regularization.", "LinearSVC and LinearSVR are less sensitive to C when it becomes large, and prediction results stop improving after a certain threshold. Meanwhile, larger C values will take more time to train, sometimes up to 10 times longer, as shown in 11.", "Support Vector Machine algorithms are not scale invariant, so it is highly recommended to scale your data. For example, scale each attribute on the input vector X to [0,1] or [-1,+1], or standardize it to have mean 0 and variance 1. Note that the same scaling must be applied to the test vector to obtain meaningful results. This can be done easily by using a Pipeline:", "See section Preprocessing data for more details on scaling and normalization.", "Randomness of the underlying implementations: The underlying implementations of SVC and NuSVC use a random number generator only to shuffle the data for probability estimation (when probability is set to True). This randomness can be controlled with the random_state parameter. If probability is set to False these estimators are not random and random_state has no effect on the results. The underlying OneClassSVM implementation is similar to the ones of SVC and NuSVC. As no probability estimation is provided for OneClassSVM, it is not random.", "The underlying LinearSVC implementation uses a random number generator to select features when fitting the model with a dual coordinate descent (i.e when dual is set to True). It is thus not uncommon to have slightly different results for the same input data. If that happens, try with a smaller tol parameter. This randomness can also be controlled with the random_state parameter. When dual is set to False the underlying implementation of LinearSVC is not random and random_state has no effect on the results.", "The kernel function can be any of the following:", "Different kernels are specified by the kernel parameter:", "When training an SVM with the Radial Basis Function (RBF) kernel, two parameters must be considered: C and gamma. The parameter C, common to all SVM kernels, trades off misclassification of training examples against simplicity of the decision surface. A low C makes the decision surface smooth, while a high C aims at classifying all training examples correctly. gamma defines how much influence a single training example has. The larger gamma is, the closer other examples must be to be affected.", "Proper choice of C and gamma is critical to the SVM\u2019s performance. One is advised to use GridSearchCV with C and gamma spaced exponentially far apart to choose good values.", "Examples:", "You can define your own kernels by either giving the kernel as a python function or by precomputing the Gram matrix.", "Classifiers with custom kernels behave the same way as any other classifiers, except that:", "You can use your own defined kernels by passing a function to the kernel parameter.", "Your kernel must take as arguments two matrices of shape (n_samples_1, n_features), (n_samples_2, n_features) and return a kernel matrix of shape (n_samples_1, n_samples_2).", "The following code defines a linear kernel and creates a classifier instance that will use that kernel:", "Examples:", "You can pass pre-computed kernels by using the kernel='precomputed' option. You should then pass Gram matrix instead of X to the fit and predict methods. The kernel values between all training vectors and the test vectors must be provided:", "A support vector machine constructs a hyper-plane or set of hyper-planes in a high or infinite dimensional space, which can be used for classification, regression or other tasks. Intuitively, a good separation is achieved by the hyper-plane that has the largest distance to the nearest training data points of any class (so-called functional margin), since in general the larger the margin the lower the generalization error of the classifier. The figure below shows the decision function for a linearly separable problem, with three samples on the margin boundaries, called \u201csupport vectors\u201d:", "In general, when the problem isn\u2019t linearly separable, the support vectors are the samples within the margin boundaries.", "We recommend 13 and 14 as good references for the theory and practicalities of SVMs.", "Given training vectors \\(x_i \\in \\mathbb{R}^p\\), i=1,\u2026, n, in two classes, and a vector \\(y \\in \\{1, -1\\}^n\\), our goal is to find \\(w \\in \\mathbb{R}^p\\) and \\(b \\in \\mathbb{R}\\) such that the prediction given by \\(\\text{sign} (w^T\\phi(x) + b)\\) is correct for most samples.", "SVC solves the following primal problem:", "Intuitively, we\u2019re trying to maximize the margin (by minimizing \\(||w||^2 = w^Tw\\)), while incurring a penalty when a sample is misclassified or within the margin boundary. Ideally, the value \\(y_i (w^T \\phi (x_i) + b)\\) would be \\(\\geq 1\\) for all samples, which indicates a perfect prediction. But problems are usually not always perfectly separable with a hyperplane, so we allow some samples to be at a distance \\(\\zeta_i\\) from their correct margin boundary. The penalty term C controls the strengh of this penalty, and as a result, acts as an inverse regularization parameter (see note below).", "The dual problem to the primal is", "where \\(e\\) is the vector of all ones, and \\(Q\\) is an \\(n\\) by \\(n\\) positive semidefinite matrix, \\(Q_{ij} \\equiv y_i y_j K(x_i, x_j)\\), where \\(K(x_i, x_j) = \\phi (x_i)^T \\phi (x_j)\\) is the kernel. The terms \\(\\alpha_i\\) are called the dual coefficients, and they are upper-bounded by \\(C\\). This dual representation highlights the fact that training vectors are implicitly mapped into a higher (maybe infinite) dimensional space by the function \\(\\phi\\): see kernel trick.", "Once the optimization problem is solved, the output of decision_function for a given sample \\(x\\) becomes:", "and the predicted class correspond to its sign. We only need to sum over the support vectors (i.e. the samples that lie within the margin) because the dual coefficients \\(\\alpha_i\\) are zero for the other samples.", "These parameters can be accessed through the attributes dual_coef_ which holds the product \\(y_i \\alpha_i\\), support_vectors_ which holds the support vectors, and intercept_ which holds the independent term \\(b\\)", "Note", "While SVM models derived from libsvm and liblinear use C as regularization parameter, most other estimators use alpha. The exact equivalence between the amount of regularization of two models depends on the exact objective function optimized by the model. For example, when the estimator used is Ridge regression, the relation between them is given as \\(C = \\frac{1}{alpha}\\).", "The primal problem can be equivalently formulated as", "where we make use of the hinge loss. This is the form that is directly optimized by LinearSVC, but unlike the dual form, this one does not involve inner products between samples, so the famous kernel trick cannot be applied. This is why only the linear kernel is supported by LinearSVC (\\(\\phi\\) is the identity function).", "The \\(\\nu\\)-SVC formulation 15 is a reparameterization of the \\(C\\)-SVC and therefore mathematically equivalent.", "We introduce a new parameter \\(\\nu\\) (instead of \\(C\\)) which controls the number of support vectors and margin errors: \\(\\nu \\in (0, 1]\\) is an upper bound on the fraction of margin errors and a lower bound of the fraction of support vectors. A margin error corresponds to a sample that lies on the wrong side of its margin boundary: it is either misclassified, or it is correctly classified but does not lie beyond the margin.", "Given training vectors \\(x_i \\in \\mathbb{R}^p\\), i=1,\u2026, n, and a vector \\(y \\in \\mathbb{R}^n\\) \\(\\varepsilon\\)-SVR solves the following primal problem:", "Here, we are penalizing samples whose prediction is at least \\(\\varepsilon\\) away from their true target. These samples penalize the objective by \\(\\zeta_i\\) or \\(\\zeta_i^*\\), depending on whether their predictions lie above or below the \\(\\varepsilon\\) tube.", "The dual problem is", "where \\(e\\) is the vector of all ones, \\(Q\\) is an \\(n\\) by \\(n\\) positive semidefinite matrix, \\(Q_{ij} \\equiv K(x_i, x_j) = \\phi (x_i)^T \\phi (x_j)\\) is the kernel. Here training vectors are implicitly mapped into a higher (maybe infinite) dimensional space by the function \\(\\phi\\).", "The prediction is:", "These parameters can be accessed through the attributes dual_coef_ which holds the difference \\(\\alpha_i - \\alpha_i^*\\), support_vectors_ which holds the support vectors, and intercept_ which holds the independent term \\(b\\)", "The primal problem can be equivalently formulated as", "where we make use of the epsilon-insensitive loss, i.e. errors of less than \\(\\varepsilon\\) are ignored. This is the form that is directly optimized by LinearSVR.", "Internally, we use libsvm 12 and liblinear 11 to handle all computations. These libraries are wrapped using C and Cython. For a description of the implementation and details of the algorithms used, please refer to their respective papers.", "References:", "Platt \u201cProbabilistic outputs for SVMs and comparisons to regularized likelihood methods\u201d.", "Wu, Lin and Weng, \u201cProbability estimates for multi-class classification by pairwise coupling\u201d, JMLR 5:975-1005, 2004.", "Fan, Rong-En, et al., \u201cLIBLINEAR: A library for large linear classification.\u201d, Journal of machine learning research 9.Aug (2008): 1871-1874.", "Chang and Lin, LIBSVM: A Library for Support Vector Machines.", "Bishop, Pattern recognition and machine learning, chapter 7 Sparse Kernel Machines", "\u201cA Tutorial on Support Vector Regression\u201d, Alex J. Smola, Bernhard Sch\u00f6lkopf - Statistics and Computing archive Volume 14 Issue 3, August 2004, p. 199-222.", "Sch\u00f6lkopf et. al New Support Vector Algorithms", "Crammer and Singer On the Algorithmic Implementation ofMulticlass Kernel-based Vector Machines, JMLR 2001."]}, {"name": "1.5. Stochastic Gradient Descent", "path": "modules/sgd", "type": "Guide", "text": ["Stochastic Gradient Descent (SGD) is a simple yet very efficient approach to fitting linear classifiers and regressors under convex loss functions such as (linear) Support Vector Machines and Logistic Regression. Even though SGD has been around in the machine learning community for a long time, it has received a considerable amount of attention just recently in the context of large-scale learning.", "SGD has been successfully applied to large-scale and sparse machine learning problems often encountered in text classification and natural language processing. Given that the data is sparse, the classifiers in this module easily scale to problems with more than 10^5 training examples and more than 10^5 features.", "Strictly speaking, SGD is merely an optimization technique and does not correspond to a specific family of machine learning models. It is only a way to train a model. Often, an instance of SGDClassifier or SGDRegressor will have an equivalent estimator in the scikit-learn API, potentially using a different optimization technique. For example, using SGDClassifier(loss='log') results in logistic regression, i.e. a model equivalent to LogisticRegression which is fitted via SGD instead of being fitted by one of the other solvers in LogisticRegression. Similarly, SGDRegressor(loss='squared_loss', penalty='l2') and Ridge solve the same optimization problem, via different means.", "The advantages of Stochastic Gradient Descent are:", "The disadvantages of Stochastic Gradient Descent include:", "Warning", "Make sure you permute (shuffle) your training data before fitting the model or use shuffle=True to shuffle after each iteration (used by default). Also, ideally, features should be standardized using e.g. make_pipeline(StandardScaler(), SGDClassifier()) (see Pipelines).", "The class SGDClassifier implements a plain stochastic gradient descent learning routine which supports different loss functions and penalties for classification. Below is the decision boundary of a SGDClassifier trained with the hinge loss, equivalent to a linear SVM.", "As other classifiers, SGD has to be fitted with two arrays: an array X of shape (n_samples, n_features) holding the training samples, and an array y of shape (n_samples,) holding the target values (class labels) for the training samples:", "After being fitted, the model can then be used to predict new values:", "SGD fits a linear model to the training data. The coef_ attribute holds the model parameters:", "The intercept_ attribute holds the intercept (aka offset or bias):", "Whether or not the model should use an intercept, i.e. a biased hyperplane, is controlled by the parameter fit_intercept.", "The signed distance to the hyperplane (computed as the dot product between the coefficients and the input sample, plus the intercept) is given by SGDClassifier.decision_function:", "The concrete loss function can be set via the loss parameter. SGDClassifier supports the following loss functions:", "Please refer to the mathematical section below for formulas. The first two loss functions are lazy, they only update the model parameters if an example violates the margin constraint, which makes training very efficient and may result in sparser models (i.e. with more zero coefficents), even when L2 penalty is used.", "Using loss=\"log\" or loss=\"modified_huber\" enables the predict_proba method, which gives a vector of probability estimates \\(P(y|x)\\) per sample \\(x\\):", "The concrete penalty can be set via the penalty parameter. SGD supports the following penalties:", "The default setting is penalty=\"l2\". The L1 penalty leads to sparse solutions, driving most coefficients to zero. The Elastic Net 11 solves some deficiencies of the L1 penalty in the presence of highly correlated attributes. The parameter l1_ratio controls the convex combination of L1 and L2 penalty.", "SGDClassifier supports multi-class classification by combining multiple binary classifiers in a \u201cone versus all\u201d (OVA) scheme. For each of the \\(K\\) classes, a binary classifier is learned that discriminates between that and all other \\(K-1\\) classes. At testing time, we compute the confidence score (i.e. the signed distances to the hyperplane) for each classifier and choose the class with the highest confidence. The Figure below illustrates the OVA approach on the iris dataset. The dashed lines represent the three OVA classifiers; the background colors show the decision surface induced by the three classifiers.", "In the case of multi-class classification coef_ is a two-dimensional array of shape (n_classes, n_features) and intercept_ is a one-dimensional array of shape (n_classes,). The i-th row of coef_ holds the weight vector of the OVA classifier for the i-th class; classes are indexed in ascending order (see attribute classes_). Note that, in principle, since they allow to create a probability model, loss=\"log\" and loss=\"modified_huber\" are more suitable for one-vs-all classification.", "SGDClassifier supports both weighted classes and weighted instances via the fit parameters class_weight and sample_weight. See the examples below and the docstring of SGDClassifier.fit for further information.", "SGDClassifier supports averaged SGD (ASGD) 10. Averaging can be enabled by setting average=True. ASGD performs the same updates as the regular SGD (see Mathematical formulation), but instead of using the last value of the coefficients as the coef_ attribute (i.e. the values of the last update), coef_ is set instead to the average value of the coefficients across all updates. The same is done for the intercept_ attribute. When using ASGD the learning rate can be larger and even constant, leading on some datasets to a speed up in training time.", "For classification with a logistic loss, another variant of SGD with an averaging strategy is available with Stochastic Average Gradient (SAG) algorithm, available as a solver in LogisticRegression.", "Examples:", "The class SGDRegressor implements a plain stochastic gradient descent learning routine which supports different loss functions and penalties to fit linear regression models. SGDRegressor is well suited for regression problems with a large number of training samples (> 10.000), for other problems we recommend Ridge, Lasso, or ElasticNet.", "The concrete loss function can be set via the loss parameter. SGDRegressor supports the following loss functions:", "Please refer to the mathematical section below for formulas. The Huber and epsilon-insensitive loss functions can be used for robust regression. The width of the insensitive region has to be specified via the parameter epsilon. This parameter depends on the scale of the target variables.", "The penalty parameter determines the regularization to be used (see description above in the classification section).", "SGDRegressor also supports averaged SGD 10 (here again, see description above in the classification section).", "For regression with a squared loss and a l2 penalty, another variant of SGD with an averaging strategy is available with Stochastic Average Gradient (SAG) algorithm, available as a solver in Ridge.", "Note", "The sparse implementation produces slightly different results from the dense implementation, due to a shrunk learning rate for the intercept. See Implementation details.", "There is built-in support for sparse data given in any matrix in a format supported by scipy.sparse. For maximum efficiency, however, use the CSR matrix format as defined in scipy.sparse.csr_matrix.", "Examples:", "The major advantage of SGD is its efficiency, which is basically linear in the number of training examples. If X is a matrix of size (n, p) training has a cost of \\(O(k n \\bar p)\\), where k is the number of iterations (epochs) and \\(\\bar p\\) is the average number of non-zero attributes per sample.", "Recent theoretical results, however, show that the runtime to get some desired optimization accuracy does not increase as the training set size increases.", "The classes SGDClassifier and SGDRegressor provide two criteria to stop the algorithm when a given level of convergence is reached:", "In both cases, the criterion is evaluated once by epoch, and the algorithm stops when the criterion does not improve n_iter_no_change times in a row. The improvement is evaluated with absolute tolerance tol, and the algorithm stops in any case after a maximum number of iteration max_iter.", "Stochastic Gradient Descent is sensitive to feature scaling, so it is highly recommended to scale your data. For example, scale each attribute on the input vector X to [0,1] or [-1,+1], or standardize it to have mean 0 and variance 1. Note that the same scaling must be applied to the test vector to obtain meaningful results. This can be easily done using StandardScaler:", "If your attributes have an intrinsic scale (e.g. word frequencies or indicator features) scaling is not needed.", "References:", "We describe here the mathematical details of the SGD procedure. A good overview with convergence rates can be found in 12.", "Given a set of training examples \\((x_1, y_1), \\ldots, (x_n, y_n)\\) where \\(x_i \\in \\mathbf{R}^m\\) and \\(y_i \\in \\mathcal{R}\\) (\\(y_i \\in {-1, 1}\\) for classification), our goal is to learn a linear scoring function \\(f(x) = w^T x + b\\) with model parameters \\(w \\in \\mathbf{R}^m\\) and intercept \\(b \\in \\mathbf{R}\\). In order to make predictions for binary classification, we simply look at the sign of \\(f(x)\\). To find the model parameters, we minimize the regularized training error given by", "where \\(L\\) is a loss function that measures model (mis)fit and \\(R\\) is a regularization term (aka penalty) that penalizes model complexity; \\(\\alpha > 0\\) is a non-negative hyperparameter that controls the regularization stength.", "Different choices for \\(L\\) entail different classifiers or regressors:", "All of the above loss functions can be regarded as an upper bound on the misclassification error (Zero-one loss) as shown in the Figure below.", "Popular choices for the regularization term \\(R\\) (the penalty parameter) include:", "The Figure below shows the contours of the different regularization terms in a 2-dimensional parameter space (\\(m=2\\)) when \\(R(w) = 1\\).", "Stochastic gradient descent is an optimization method for unconstrained optimization problems. In contrast to (batch) gradient descent, SGD approximates the true gradient of \\(E(w,b)\\) by considering a single training example at a time.", "The class SGDClassifier implements a first-order SGD learning routine. The algorithm iterates over the training examples and for each example updates the model parameters according to the update rule given by", "where \\(\\eta\\) is the learning rate which controls the step-size in the parameter space. The intercept \\(b\\) is updated similarly but without regularization (and with additional decay for sparse matrices, as detailed in Implementation details).", "The learning rate \\(\\eta\\) can be either constant or gradually decaying. For classification, the default learning rate schedule (learning_rate='optimal') is given by", "where \\(t\\) is the time step (there are a total of n_samples * n_iter time steps), \\(t_0\\) is determined based on a heuristic proposed by L\u00e9on Bottou such that the expected initial updates are comparable with the expected size of the weights (this assuming that the norm of the training samples is approx. 1). The exact definition can be found in _init_t in BaseSGD.", "For regression the default learning rate schedule is inverse scaling (learning_rate='invscaling'), given by", "where \\(eta_0\\) and \\(power\\_t\\) are hyperparameters chosen by the user via eta0 and power_t, resp.", "For a constant learning rate use learning_rate='constant' and use eta0 to specify the learning rate.", "For an adaptively decreasing learning rate, use learning_rate='adaptive' and use eta0 to specify the starting learning rate. When the stopping criterion is reached, the learning rate is divided by 5, and the algorithm does not stop. The algorithm stops when the learning rate goes below 1e-6.", "The model parameters can be accessed through the coef_ and intercept_ attributes: coef_ holds the weights \\(w\\) and intercept_ holds \\(b\\).", "When using Averaged SGD (with the average parameter), coef_ is set to the average weight across all updates: coef_ \\(= \\frac{1}{T} \\sum_{t=0}^{T-1} w^{(t)}\\), where \\(T\\) is the total number of updates, found in the t_ attribute.", "The implementation of SGD is influenced by the Stochastic Gradient SVM of 7. Similar to SvmSGD, the weight vector is represented as the product of a scalar and a vector which allows an efficient weight update in the case of L2 regularization. In the case of sparse input X, the intercept is updated with a smaller learning rate (multiplied by 0.01) to account for the fact that it is updated more frequently. Training examples are picked up sequentially and the learning rate is lowered after each observed example. We adopted the learning rate schedule from 8. For multi-class classification, a \u201cone versus all\u201d approach is used. We use the truncated gradient algorithm proposed in 9 for L1 regularization (and the Elastic Net). The code is written in Cython.", "References:", "\u201cStochastic Gradient Descent\u201d L. Bottou - Website, 2010.", "\u201cPegasos: Primal estimated sub-gradient solver for svm\u201d S. Shalev-Shwartz, Y. Singer, N. Srebro - In Proceedings of ICML \u201807.", "\u201cStochastic gradient descent training for l1-regularized log-linear models with cumulative penalty\u201d Y. Tsuruoka, J. Tsujii, S. Ananiadou - In Proceedings of the AFNLP/ACL \u201809.", "\u201cTowards Optimal One Pass Large Scale Learning with Averaged Stochastic Gradient Descent\u201d Xu, Wei", "\u201cRegularization and variable selection via the elastic net\u201d H. Zou, T. Hastie - Journal of the Royal Statistical Society Series B, 67 (2), 301-320.", "\u201cSolving large scale linear prediction problems using stochastic gradient descent algorithms\u201d T. Zhang - In Proceedings of ICML \u201804."]}, {"name": "1.6. Nearest Neighbors", "path": "modules/neighbors", "type": "Guide", "text": ["sklearn.neighbors provides functionality for unsupervised and supervised neighbors-based learning methods. Unsupervised nearest neighbors is the foundation of many other learning methods, notably manifold learning and spectral clustering. Supervised neighbors-based learning comes in two flavors: classification for data with discrete labels, and regression for data with continuous labels.", "The principle behind nearest neighbor methods is to find a predefined number of training samples closest in distance to the new point, and predict the label from these. The number of samples can be a user-defined constant (k-nearest neighbor learning), or vary based on the local density of points (radius-based neighbor learning). The distance can, in general, be any metric measure: standard Euclidean distance is the most common choice. Neighbors-based methods are known as non-generalizing machine learning methods, since they simply \u201cremember\u201d all of its training data (possibly transformed into a fast indexing structure such as a Ball Tree or KD Tree).", "Despite its simplicity, nearest neighbors has been successful in a large number of classification and regression problems, including handwritten digits and satellite image scenes. Being a non-parametric method, it is often successful in classification situations where the decision boundary is very irregular.", "The classes in sklearn.neighbors can handle either NumPy arrays or scipy.sparse matrices as input. For dense matrices, a large number of possible distance metrics are supported. For sparse matrices, arbitrary Minkowski metrics are supported for searches.", "There are many learning routines which rely on nearest neighbors at their core. One example is kernel density estimation, discussed in the density estimation section.", "NearestNeighbors implements unsupervised nearest neighbors learning. It acts as a uniform interface to three different nearest neighbors algorithms: BallTree, KDTree, and a brute-force algorithm based on routines in sklearn.metrics.pairwise. The choice of neighbors search algorithm is controlled through the keyword 'algorithm', which must be one of ['auto', 'ball_tree', 'kd_tree', 'brute']. When the default value 'auto' is passed, the algorithm attempts to determine the best approach from the training data. For a discussion of the strengths and weaknesses of each option, see Nearest Neighbor Algorithms.", "Warning", "Regarding the Nearest Neighbors algorithms, if two neighbors \\(k+1\\) and \\(k\\) have identical distances but different labels, the result will depend on the ordering of the training data.", "For the simple task of finding the nearest neighbors between two sets of data, the unsupervised algorithms within sklearn.neighbors can be used:", "Because the query set matches the training set, the nearest neighbor of each point is the point itself, at a distance of zero.", "It is also possible to efficiently produce a sparse graph showing the connections between neighboring points:", "The dataset is structured such that points nearby in index order are nearby in parameter space, leading to an approximately block-diagonal matrix of K-nearest neighbors. Such a sparse graph is useful in a variety of circumstances which make use of spatial relationships between points for unsupervised learning: in particular, see Isomap, LocallyLinearEmbedding, and SpectralClustering.", "Alternatively, one can use the KDTree or BallTree classes directly to find nearest neighbors. This is the functionality wrapped by the NearestNeighbors class used above. The Ball Tree and KD Tree have the same interface; we\u2019ll show an example of using the KD Tree here:", "Refer to the KDTree and BallTree class documentation for more information on the options available for nearest neighbors searches, including specification of query strategies, distance metrics, etc. For a list of available metrics, see the documentation of the DistanceMetric class.", "Neighbors-based classification is a type of instance-based learning or non-generalizing learning: it does not attempt to construct a general internal model, but simply stores instances of the training data. Classification is computed from a simple majority vote of the nearest neighbors of each point: a query point is assigned the data class which has the most representatives within the nearest neighbors of the point.", "scikit-learn implements two different nearest neighbors classifiers: KNeighborsClassifier implements learning based on the \\(k\\) nearest neighbors of each query point, where \\(k\\) is an integer value specified by the user. RadiusNeighborsClassifier implements learning based on the number of neighbors within a fixed radius \\(r\\) of each training point, where \\(r\\) is a floating-point value specified by the user.", "The \\(k\\)-neighbors classification in KNeighborsClassifier is the most commonly used technique. The optimal choice of the value \\(k\\) is highly data-dependent: in general a larger \\(k\\) suppresses the effects of noise, but makes the classification boundaries less distinct.", "In cases where the data is not uniformly sampled, radius-based neighbors classification in RadiusNeighborsClassifier can be a better choice. The user specifies a fixed radius \\(r\\), such that points in sparser neighborhoods use fewer nearest neighbors for the classification. For high-dimensional parameter spaces, this method becomes less effective due to the so-called \u201ccurse of dimensionality\u201d.", "The basic nearest neighbors classification uses uniform weights: that is, the value assigned to a query point is computed from a simple majority vote of the nearest neighbors. Under some circumstances, it is better to weight the neighbors such that nearer neighbors contribute more to the fit. This can be accomplished through the weights keyword. The default value, weights = 'uniform', assigns uniform weights to each neighbor. weights = 'distance' assigns weights proportional to the inverse of the distance from the query point. Alternatively, a user-defined function of the distance can be supplied to compute the weights.", "  ", "Examples:", "Neighbors-based regression can be used in cases where the data labels are continuous rather than discrete variables. The label assigned to a query point is computed based on the mean of the labels of its nearest neighbors.", "scikit-learn implements two different neighbors regressors: KNeighborsRegressor implements learning based on the \\(k\\) nearest neighbors of each query point, where \\(k\\) is an integer value specified by the user. RadiusNeighborsRegressor implements learning based on the neighbors within a fixed radius \\(r\\) of the query point, where \\(r\\) is a floating-point value specified by the user.", "The basic nearest neighbors regression uses uniform weights: that is, each point in the local neighborhood contributes uniformly to the classification of a query point. Under some circumstances, it can be advantageous to weight points such that nearby points contribute more to the regression than faraway points. This can be accomplished through the weights keyword. The default value, weights = 'uniform', assigns equal weights to all points. weights = 'distance' assigns weights proportional to the inverse of the distance from the query point. Alternatively, a user-defined function of the distance can be supplied, which will be used to compute the weights.", "The use of multi-output nearest neighbors for regression is demonstrated in Face completion with a multi-output estimators. In this example, the inputs X are the pixels of the upper half of faces and the outputs Y are the pixels of the lower half of those faces.", "Examples:", "Fast computation of nearest neighbors is an active area of research in machine learning. The most naive neighbor search implementation involves the brute-force computation of distances between all pairs of points in the dataset: for \\(N\\) samples in \\(D\\) dimensions, this approach scales as \\(O[D N^2]\\). Efficient brute-force neighbors searches can be very competitive for small data samples. However, as the number of samples \\(N\\) grows, the brute-force approach quickly becomes infeasible. In the classes within sklearn.neighbors, brute-force neighbors searches are specified using the keyword algorithm = 'brute', and are computed using the routines available in sklearn.metrics.pairwise.", "To address the computational inefficiencies of the brute-force approach, a variety of tree-based data structures have been invented. In general, these structures attempt to reduce the required number of distance calculations by efficiently encoding aggregate distance information for the sample. The basic idea is that if point \\(A\\) is very distant from point \\(B\\), and point \\(B\\) is very close to point \\(C\\), then we know that points \\(A\\) and \\(C\\) are very distant, without having to explicitly calculate their distance. In this way, the computational cost of a nearest neighbors search can be reduced to \\(O[D N \\log(N)]\\) or better. This is a significant improvement over brute-force for large \\(N\\).", "An early approach to taking advantage of this aggregate information was the KD tree data structure (short for K-dimensional tree), which generalizes two-dimensional Quad-trees and 3-dimensional Oct-trees to an arbitrary number of dimensions. The KD tree is a binary tree structure which recursively partitions the parameter space along the data axes, dividing it into nested orthotropic regions into which data points are filed. The construction of a KD tree is very fast: because partitioning is performed only along the data axes, no \\(D\\)-dimensional distances need to be computed. Once constructed, the nearest neighbor of a query point can be determined with only \\(O[\\log(N)]\\) distance computations. Though the KD tree approach is very fast for low-dimensional (\\(D < 20\\)) neighbors searches, it becomes inefficient as \\(D\\) grows very large: this is one manifestation of the so-called \u201ccurse of dimensionality\u201d. In scikit-learn, KD tree neighbors searches are specified using the keyword algorithm = 'kd_tree', and are computed using the class KDTree.", "References:", "To address the inefficiencies of KD Trees in higher dimensions, the ball tree data structure was developed. Where KD trees partition data along Cartesian axes, ball trees partition data in a series of nesting hyper-spheres. This makes tree construction more costly than that of the KD tree, but results in a data structure which can be very efficient on highly structured data, even in very high dimensions.", "A ball tree recursively divides the data into nodes defined by a centroid \\(C\\) and radius \\(r\\), such that each point in the node lies within the hyper-sphere defined by \\(r\\) and \\(C\\). The number of candidate points for a neighbor search is reduced through use of the triangle inequality:", "With this setup, a single distance calculation between a test point and the centroid is sufficient to determine a lower and upper bound on the distance to all points within the node. Because of the spherical geometry of the ball tree nodes, it can out-perform a KD-tree in high dimensions, though the actual performance is highly dependent on the structure of the training data. In scikit-learn, ball-tree-based neighbors searches are specified using the keyword algorithm = 'ball_tree', and are computed using the class BallTree. Alternatively, the user can work with the BallTree class directly.", "References:", "The optimal algorithm for a given dataset is a complicated choice, and depends on a number of factors:", "number of samples \\(N\\) (i.e. n_samples) and dimensionality \\(D\\) (i.e. n_features).", "For small data sets (\\(N\\) less than 30 or so), \\(\\log(N)\\) is comparable to \\(N\\), and brute force algorithms can be more efficient than a tree-based approach. Both KDTree and BallTree address this through providing a leaf size parameter: this controls the number of samples at which a query switches to brute-force. This allows both algorithms to approach the efficiency of a brute-force computation for small \\(N\\).", "data structure: intrinsic dimensionality of the data and/or sparsity of the data. Intrinsic dimensionality refers to the dimension \\(d \\le D\\) of a manifold on which the data lies, which can be linearly or non-linearly embedded in the parameter space. Sparsity refers to the degree to which the data fills the parameter space (this is to be distinguished from the concept as used in \u201csparse\u201d matrices. The data matrix may have no zero entries, but the structure can still be \u201csparse\u201d in this sense).", "Datasets used in machine learning tend to be very structured, and are very well-suited for tree-based queries.", "number of neighbors \\(k\\) requested for a query point.", "As \\(k\\) becomes large compared to \\(N\\), the ability to prune branches in a tree-based query is reduced. In this situation, Brute force queries can be more efficient.", "Currently, algorithm = 'auto' selects 'brute' if any of the following conditions are verified:", "Otherwise, it selects the first out of 'kd_tree' and 'ball_tree' that has effective_metric_ in its VALID_METRICS list. This heuristic is based on the following assumptions:", "As noted above, for small sample sizes a brute force search can be more efficient than a tree-based query. This fact is accounted for in the ball tree and KD tree by internally switching to brute force searches within leaf nodes. The level of this switch can be specified with the parameter leaf_size. This parameter choice has many effects:", "A larger leaf_size leads to a faster tree construction time, because fewer nodes need to be created", "Both a large or small leaf_size can lead to suboptimal query cost. For leaf_size approaching 1, the overhead involved in traversing nodes can significantly slow query times. For leaf_size approaching the size of the training set, queries become essentially brute force. A good compromise between these is leaf_size = 30, the default value of the parameter.", "As leaf_size increases, the memory required to store a tree structure decreases. This is especially important in the case of ball tree, which stores a \\(D\\)-dimensional centroid for each node. The required storage space for BallTree is approximately 1 / leaf_size times the size of the training set.", "leaf_size is not referenced for brute force queries.", "The NearestCentroid classifier is a simple algorithm that represents each class by the centroid of its members. In effect, this makes it similar to the label updating phase of the KMeans algorithm. It also has no parameters to choose, making it a good baseline classifier. It does, however, suffer on non-convex classes, as well as when classes have drastically different variances, as equal variance in all dimensions is assumed. See Linear Discriminant Analysis (LinearDiscriminantAnalysis) and Quadratic Discriminant Analysis (QuadraticDiscriminantAnalysis) for more complex methods that do not make this assumption. Usage of the default NearestCentroid is simple:", "The NearestCentroid classifier has a shrink_threshold parameter, which implements the nearest shrunken centroid classifier. In effect, the value of each feature for each centroid is divided by the within-class variance of that feature. The feature values are then reduced by shrink_threshold. Most notably, if a particular feature value crosses zero, it is set to zero. In effect, this removes the feature from affecting the classification. This is useful, for example, for removing noisy features.", "In the example below, using a small shrink threshold increases the accuracy of the model from 0.81 to 0.82.", "  ", "Examples:", "Many scikit-learn estimators rely on nearest neighbors: Several classifiers and regressors such as KNeighborsClassifier and KNeighborsRegressor, but also some clustering methods such as DBSCAN and SpectralClustering, and some manifold embeddings such as TSNE and Isomap.", "All these estimators can compute internally the nearest neighbors, but most of them also accept precomputed nearest neighbors sparse graph, as given by kneighbors_graph and radius_neighbors_graph. With mode mode='connectivity', these functions return a binary adjacency sparse graph as required, for instance, in SpectralClustering. Whereas with mode='distance', they return a distance sparse graph as required, for instance, in DBSCAN. To include these functions in a scikit-learn pipeline, one can also use the corresponding classes KNeighborsTransformer and RadiusNeighborsTransformer. The benefits of this sparse graph API are multiple.", "First, the precomputed graph can be re-used multiple times, for instance while varying a parameter of the estimator. This can be done manually by the user, or using the caching properties of the scikit-learn pipeline:", "Second, precomputing the graph can give finer control on the nearest neighbors estimation, for instance enabling multiprocessing though the parameter n_jobs, which might not be available in all estimators.", "Finally, the precomputation can be performed by custom estimators to use different implementations, such as approximate nearest neighbors methods, or implementation with special data types. The precomputed neighbors sparse graph needs to be formatted as in radius_neighbors_graph output:", "Note", "When a specific number of neighbors is queried (using KNeighborsTransformer), the definition of n_neighbors is ambiguous since it can either include each training point as its own neighbor, or exclude them. Neither choice is perfect, since including them leads to a different number of non-self neighbors during training and testing, while excluding them leads to a difference between fit(X).transform(X) and fit_transform(X), which is against scikit-learn API. In KNeighborsTransformer we use the definition which includes each training point as its own neighbor in the count of n_neighbors. However, for compatibility reasons with other estimators which use the other definition, one extra neighbor will be computed when mode == 'distance'. To maximise compatibility with all estimators, a safe choice is to always include one extra neighbor in a custom nearest neighbors estimator, since unnecessary neighbors will be filtered by following estimators.", "Examples:", "Neighborhood Components Analysis (NCA, NeighborhoodComponentsAnalysis) is a distance metric learning algorithm which aims to improve the accuracy of nearest neighbors classification compared to the standard Euclidean distance. The algorithm directly maximizes a stochastic variant of the leave-one-out k-nearest neighbors (KNN) score on the training set. It can also learn a low-dimensional linear projection of data that can be used for data visualization and fast classification.", "  ", "In the above illustrating figure, we consider some points from a randomly generated dataset. We focus on the stochastic KNN classification of point no. 3. The thickness of a link between sample 3 and another point is proportional to their distance, and can be seen as the relative weight (or probability) that a stochastic nearest neighbor prediction rule would assign to this point. In the original space, sample 3 has many stochastic neighbors from various classes, so the right class is not very likely. However, in the projected space learned by NCA, the only stochastic neighbors with non-negligible weight are from the same class as sample 3, guaranteeing that the latter will be well classified. See the mathematical formulation for more details.", "Combined with a nearest neighbors classifier (KNeighborsClassifier), NCA is attractive for classification because it can naturally handle multi-class problems without any increase in the model size, and does not introduce additional parameters that require fine-tuning by the user.", "NCA classification has been shown to work well in practice for data sets of varying size and difficulty. In contrast to related methods such as Linear Discriminant Analysis, NCA does not make any assumptions about the class distributions. The nearest neighbor classification can naturally produce highly irregular decision boundaries.", "To use this model for classification, one needs to combine a NeighborhoodComponentsAnalysis instance that learns the optimal transformation with a KNeighborsClassifier instance that performs the classification in the projected space. Here is an example using the two classes:", "  ", "The plot shows decision boundaries for Nearest Neighbor Classification and Neighborhood Components Analysis classification on the iris dataset, when training and scoring on only two features, for visualisation purposes.", "NCA can be used to perform supervised dimensionality reduction. The input data are projected onto a linear subspace consisting of the directions which minimize the NCA objective. The desired dimensionality can be set using the parameter n_components. For instance, the following figure shows a comparison of dimensionality reduction with Principal Component Analysis (PCA), Linear Discriminant Analysis (LinearDiscriminantAnalysis) and Neighborhood Component Analysis (NeighborhoodComponentsAnalysis) on the Digits dataset, a dataset with size \\(n_{samples} = 1797\\) and \\(n_{features} = 64\\). The data set is split into a training and a test set of equal size, then standardized. For evaluation the 3-nearest neighbor classification accuracy is computed on the 2-dimensional projected points found by each method. Each data sample belongs to one of 10 classes.", "   ", "Examples:", "The goal of NCA is to learn an optimal linear transformation matrix of size (n_components, n_features), which maximises the sum over all samples \\(i\\) of the probability \\(p_i\\) that \\(i\\) is correctly classified, i.e.:", "with \\(N\\) = n_samples and \\(p_i\\) the probability of sample \\(i\\) being correctly classified according to a stochastic nearest neighbors rule in the learned embedded space:", "where \\(C_i\\) is the set of points in the same class as sample \\(i\\), and \\(p_{i j}\\) is the softmax over Euclidean distances in the embedded space:", "NCA can be seen as learning a (squared) Mahalanobis distance metric:", "where \\(M = L^T L\\) is a symmetric positive semi-definite matrix of size (n_features, n_features).", "This implementation follows what is explained in the original paper 1. For the optimisation method, it currently uses scipy\u2019s L-BFGS-B with a full gradient computation at each iteration, to avoid to tune the learning rate and provide stable learning.", "See the examples below and the docstring of NeighborhoodComponentsAnalysis.fit for further information.", "NCA stores a matrix of pairwise distances, taking n_samples ** 2 memory. Time complexity depends on the number of iterations done by the optimisation algorithm. However, one can set the maximum number of iterations with the argument max_iter. For each iteration, time complexity is O(n_components x n_samples x min(n_samples, n_features)).", "Here the transform operation returns \\(LX^T\\), therefore its time complexity equals n_components * n_features * n_samples_test. There is no added space complexity in the operation.", "References:", "\u201cNeighbourhood Components Analysis\u201d, J. Goldberger, S. Roweis, G. Hinton, R. Salakhutdinov, Advances in Neural Information Processing Systems, Vol. 17, May 2005, pp. 513-520.", "Wikipedia entry on Neighborhood Components Analysis"]}, {"name": "1.7. Gaussian Processes", "path": "modules/gaussian_process", "type": "Guide", "text": ["Gaussian Processes (GP) are a generic supervised learning method designed to solve regression and probabilistic classification problems.", "The advantages of Gaussian processes are:", "The disadvantages of Gaussian processes include:", "The GaussianProcessRegressor implements Gaussian processes (GP) for regression purposes. For this, the prior of the GP needs to be specified. The prior mean is assumed to be constant and zero (for normalize_y=False) or the training data\u2019s mean (for normalize_y=True). The prior\u2019s covariance is specified by passing a kernel object. The hyperparameters of the kernel are optimized during fitting of GaussianProcessRegressor by maximizing the log-marginal-likelihood (LML) based on the passed optimizer. As the LML may have multiple local optima, the optimizer can be started repeatedly by specifying n_restarts_optimizer. The first run is always conducted starting from the initial hyperparameter values of the kernel; subsequent runs are conducted from hyperparameter values that have been chosen randomly from the range of allowed values. If the initial hyperparameters should be kept fixed, None can be passed as optimizer.", "The noise level in the targets can be specified by passing it via the parameter alpha, either globally as a scalar or per datapoint. Note that a moderate noise level can also be helpful for dealing with numeric issues during fitting as it is effectively implemented as Tikhonov regularization, i.e., by adding it to the diagonal of the kernel matrix. An alternative to specifying the noise level explicitly is to include a WhiteKernel component into the kernel, which can estimate the global noise level from the data (see example below).", "The implementation is based on Algorithm 2.1 of [RW2006]. In addition to the API of standard scikit-learn estimators, GaussianProcessRegressor:", "This example illustrates that GPR with a sum-kernel including a WhiteKernel can estimate the noise level of data. An illustration of the log-marginal-likelihood (LML) landscape shows that there exist two local maxima of LML.", "The first corresponds to a model with a high noise level and a large length scale, which explains all variations in the data by noise.", "The second one has a smaller noise level and shorter length scale, which explains most of the variation by the noise-free functional relationship. The second model has a higher likelihood; however, depending on the initial value for the hyperparameters, the gradient-based optimization might also converge to the high-noise solution. It is thus important to repeat the optimization several times for different initializations.", "Both kernel ridge regression (KRR) and GPR learn a target function by employing internally the \u201ckernel trick\u201d. KRR learns a linear function in the space induced by the respective kernel which corresponds to a non-linear function in the original space. The linear function in the kernel space is chosen based on the mean-squared error loss with ridge regularization. GPR uses the kernel to define the covariance of a prior distribution over the target functions and uses the observed training data to define a likelihood function. Based on Bayes theorem, a (Gaussian) posterior distribution over target functions is defined, whose mean is used for prediction.", "A major difference is that GPR can choose the kernel\u2019s hyperparameters based on gradient-ascent on the marginal likelihood function while KRR needs to perform a grid search on a cross-validated loss function (mean-squared error loss). A further difference is that GPR learns a generative, probabilistic model of the target function and can thus provide meaningful confidence intervals and posterior samples along with the predictions while KRR only provides predictions.", "The following figure illustrates both methods on an artificial dataset, which consists of a sinusoidal target function and strong noise. The figure compares the learned model of KRR and GPR based on a ExpSineSquared kernel, which is suited for learning periodic functions. The kernel\u2019s hyperparameters control the smoothness (length_scale) and periodicity of the kernel (periodicity). Moreover, the noise level of the data is learned explicitly by GPR by an additional WhiteKernel component in the kernel and by the regularization parameter alpha of KRR.", "The figure shows that both methods learn reasonable models of the target function. GPR correctly identifies the periodicity of the function to be roughly \\(2*\\pi\\) (6.28), while KRR chooses the doubled periodicity \\(4*\\pi\\) . Besides that, GPR provides reasonable confidence bounds on the prediction which are not available for KRR. A major difference between the two methods is the time required for fitting and predicting: while fitting KRR is fast in principle, the grid-search for hyperparameter optimization scales exponentially with the number of hyperparameters (\u201ccurse of dimensionality\u201d). The gradient-based optimization of the parameters in GPR does not suffer from this exponential scaling and is thus considerably faster on this example with 3-dimensional hyperparameter space. The time for predicting is similar; however, generating the variance of the predictive distribution of GPR takes considerably longer than just predicting the mean.", "This example is based on Section 5.4.3 of [RW2006]. It illustrates an example of complex kernel engineering and hyperparameter optimization using gradient ascent on the log-marginal-likelihood. The data consists of the monthly average atmospheric CO2 concentrations (in parts per million by volume (ppmv)) collected at the Mauna Loa Observatory in Hawaii, between 1958 and 1997. The objective is to model the CO2 concentration as a function of the time t.", "The kernel is composed of several terms that are responsible for explaining different properties of the signal:", "Maximizing the log-marginal-likelihood after subtracting the target\u2019s mean yields the following kernel with an LML of -83.214:", "Thus, most of the target signal (34.4ppm) is explained by a long-term rising trend (length-scale 41.8 years). The periodic component has an amplitude of 3.27ppm, a decay time of 180 years and a length-scale of 1.44. The long decay time indicates that we have a locally very close to periodic seasonal component. The correlated noise has an amplitude of 0.197ppm with a length scale of 0.138 years and a white-noise contribution of 0.197ppm. Thus, the overall noise level is very small, indicating that the data can be very well explained by the model. The figure shows also that the model makes very confident predictions until around 2015", "The GaussianProcessClassifier implements Gaussian processes (GP) for classification purposes, more specifically for probabilistic classification, where test predictions take the form of class probabilities. GaussianProcessClassifier places a GP prior on a latent function \\(f\\), which is then squashed through a link function to obtain the probabilistic classification. The latent function \\(f\\) is a so-called nuisance function, whose values are not observed and are not relevant by themselves. Its purpose is to allow a convenient formulation of the model, and \\(f\\) is removed (integrated out) during prediction. GaussianProcessClassifier implements the logistic link function, for which the integral cannot be computed analytically but is easily approximated in the binary case.", "In contrast to the regression setting, the posterior of the latent function \\(f\\) is not Gaussian even for a GP prior since a Gaussian likelihood is inappropriate for discrete class labels. Rather, a non-Gaussian likelihood corresponding to the logistic link function (logit) is used. GaussianProcessClassifier approximates the non-Gaussian posterior with a Gaussian based on the Laplace approximation. More details can be found in Chapter 3 of [RW2006].", "The GP prior mean is assumed to be zero. The prior\u2019s covariance is specified by passing a kernel object. The hyperparameters of the kernel are optimized during fitting of GaussianProcessRegressor by maximizing the log-marginal-likelihood (LML) based on the passed optimizer. As the LML may have multiple local optima, the optimizer can be started repeatedly by specifying n_restarts_optimizer. The first run is always conducted starting from the initial hyperparameter values of the kernel; subsequent runs are conducted from hyperparameter values that have been chosen randomly from the range of allowed values. If the initial hyperparameters should be kept fixed, None can be passed as optimizer.", "GaussianProcessClassifier supports multi-class classification by performing either one-versus-rest or one-versus-one based training and prediction. In one-versus-rest, one binary Gaussian process classifier is fitted for each class, which is trained to separate this class from the rest. In \u201cone_vs_one\u201d, one binary Gaussian process classifier is fitted for each pair of classes, which is trained to separate these two classes. The predictions of these binary predictors are combined into multi-class predictions. See the section on multi-class classification for more details.", "In the case of Gaussian process classification, \u201cone_vs_one\u201d might be computationally cheaper since it has to solve many problems involving only a subset of the whole training set rather than fewer problems on the whole dataset. Since Gaussian process classification scales cubically with the size of the dataset, this might be considerably faster. However, note that \u201cone_vs_one\u201d does not support predicting probability estimates but only plain predictions. Moreover, note that GaussianProcessClassifier does not (yet) implement a true multi-class Laplace approximation internally, but as discussed above is based on solving several binary classification tasks internally, which are combined using one-versus-rest or one-versus-one.", "This example illustrates the predicted probability of GPC for an RBF kernel with different choices of the hyperparameters. The first figure shows the predicted probability of GPC with arbitrarily chosen hyperparameters and with the hyperparameters corresponding to the maximum log-marginal-likelihood (LML).", "While the hyperparameters chosen by optimizing LML have a considerably larger LML, they perform slightly worse according to the log-loss on test data. The figure shows that this is because they exhibit a steep change of the class probabilities at the class boundaries (which is good) but have predicted probabilities close to 0.5 far away from the class boundaries (which is bad) This undesirable effect is caused by the Laplace approximation used internally by GPC.", "The second figure shows the log-marginal-likelihood for different choices of the kernel\u2019s hyperparameters, highlighting the two choices of the hyperparameters used in the first figure by black dots.", "This example illustrates GPC on XOR data. Compared are a stationary, isotropic kernel (RBF) and a non-stationary kernel (DotProduct). On this particular dataset, the DotProduct kernel obtains considerably better results because the class-boundaries are linear and coincide with the coordinate axes. In practice, however, stationary kernels such as RBF often obtain better results.", "This example illustrates the predicted probability of GPC for an isotropic and anisotropic RBF kernel on a two-dimensional version for the iris-dataset. This illustrates the applicability of GPC to non-binary classification. The anisotropic RBF kernel obtains slightly higher log-marginal-likelihood by assigning different length-scales to the two feature dimensions.", "Kernels (also called \u201ccovariance functions\u201d in the context of GPs) are a crucial ingredient of GPs which determine the shape of prior and posterior of the GP. They encode the assumptions on the function being learned by defining the \u201csimilarity\u201d of two datapoints combined with the assumption that similar datapoints should have similar target values. Two categories of kernels can be distinguished: stationary kernels depend only on the distance of two datapoints and not on their absolute values \\(k(x_i, x_j)= k(d(x_i, x_j))\\) and are thus invariant to translations in the input space, while non-stationary kernels depend also on the specific values of the datapoints. Stationary kernels can further be subdivided into isotropic and anisotropic kernels, where isotropic kernels are also invariant to rotations in the input space. For more details, we refer to Chapter 4 of [RW2006]. For guidance on how to best combine different kernels, we refer to [Duv2014].", "The main usage of a Kernel is to compute the GP\u2019s covariance between datapoints. For this, the method __call__ of the kernel can be called. This method can either be used to compute the \u201cauto-covariance\u201d of all pairs of datapoints in a 2d array X, or the \u201ccross-covariance\u201d of all combinations of datapoints of a 2d array X with datapoints in a 2d array Y. The following identity holds true for all kernels k (except for the WhiteKernel): k(X) == K(X, Y=X)", "If only the diagonal of the auto-covariance is being used, the method diag() of a kernel can be called, which is more computationally efficient than the equivalent call to __call__: np.diag(k(X, X)) == k.diag(X)", "Kernels are parameterized by a vector \\(\\theta\\) of hyperparameters. These hyperparameters can for instance control length-scales or periodicity of a kernel (see below). All kernels support computing analytic gradients of the kernel\u2019s auto-covariance with respect to \\(log(\\theta)\\) via setting eval_gradient=True in the __call__ method. That is, a (len(X), len(X), len(theta)) array is returned where the entry [i, j, l] contains \\(\\frac{\\partial k_\\theta(x_i, x_j)}{\\partial log(\\theta_l)}\\). This gradient is used by the Gaussian process (both regressor and classifier) in computing the gradient of the log-marginal-likelihood, which in turn is used to determine the value of \\(\\theta\\), which maximizes the log-marginal-likelihood, via gradient ascent. For each hyperparameter, the initial value and the bounds need to be specified when creating an instance of the kernel. The current value of \\(\\theta\\) can be get and set via the property theta of the kernel object. Moreover, the bounds of the hyperparameters can be accessed by the property bounds of the kernel. Note that both properties (theta and bounds) return log-transformed values of the internally used values since those are typically more amenable to gradient-based optimization. The specification of each hyperparameter is stored in the form of an instance of Hyperparameter in the respective kernel. Note that a kernel using a hyperparameter with name \u201cx\u201d must have the attributes self.x and self.x_bounds.", "The abstract base class for all kernels is Kernel. Kernel implements a similar interface as Estimator, providing the methods get_params(), set_params(), and clone(). This allows setting kernel values also via meta-estimators such as Pipeline or GridSearch. Note that due to the nested structure of kernels (by applying kernel operators, see below), the names of kernel parameters might become relatively complicated. In general, for a binary kernel operator, parameters of the left operand are prefixed with k1__ and parameters of the right operand with k2__. An additional convenience method is clone_with_theta(theta), which returns a cloned version of the kernel but with the hyperparameters set to theta. An illustrative example:", "All Gaussian process kernels are interoperable with sklearn.metrics.pairwise and vice versa: instances of subclasses of Kernel can be passed as metric to pairwise_kernels from sklearn.metrics.pairwise. Moreover, kernel functions from pairwise can be used as GP kernels by using the wrapper class PairwiseKernel. The only caveat is that the gradient of the hyperparameters is not analytic but numeric and all those kernels support only isotropic distances. The parameter gamma is considered to be a hyperparameter and may be optimized. The other kernel parameters are set directly at initialization and are kept fixed.", "The ConstantKernel kernel can be used as part of a Product kernel where it scales the magnitude of the other factor (kernel) or as part of a Sum kernel, where it modifies the mean of the Gaussian process. It depends on a parameter \\(constant\\_value\\). It is defined as:", "The main use-case of the WhiteKernel kernel is as part of a sum-kernel where it explains the noise-component of the signal. Tuning its parameter \\(noise\\_level\\) corresponds to estimating the noise-level. It is defined as:", "Kernel operators take one or two base kernels and combine them into a new kernel. The Sum kernel takes two kernels \\(k_1\\) and \\(k_2\\) and combines them via \\(k_{sum}(X, Y) = k_1(X, Y) + k_2(X, Y)\\). The Product kernel takes two kernels \\(k_1\\) and \\(k_2\\) and combines them via \\(k_{product}(X, Y) = k_1(X, Y) * k_2(X, Y)\\). The Exponentiation kernel takes one base kernel and a scalar parameter \\(p\\) and combines them via \\(k_{exp}(X, Y) = k(X, Y)^p\\). Note that magic methods __add__, __mul___ and __pow__ are overridden on the Kernel objects, so one can use e.g. RBF() + RBF() as a shortcut for Sum(RBF(), RBF()).", "The RBF kernel is a stationary kernel. It is also known as the \u201csquared exponential\u201d kernel. It is parameterized by a length-scale parameter \\(l>0\\), which can either be a scalar (isotropic variant of the kernel) or a vector with the same number of dimensions as the inputs \\(x\\) (anisotropic variant of the kernel). The kernel is given by:", "where \\(d(\\cdot, \\cdot)\\) is the Euclidean distance. This kernel is infinitely differentiable, which implies that GPs with this kernel as covariance function have mean square derivatives of all orders, and are thus very smooth. The prior and posterior of a GP resulting from an RBF kernel are shown in the following figure:", "The Matern kernel is a stationary kernel and a generalization of the RBF kernel. It has an additional parameter \\(\\nu\\) which controls the smoothness of the resulting function. It is parameterized by a length-scale parameter \\(l>0\\), which can either be a scalar (isotropic variant of the kernel) or a vector with the same number of dimensions as the inputs \\(x\\) (anisotropic variant of the kernel). The kernel is given by:", "where \\(d(\\cdot,\\cdot)\\) is the Euclidean distance, \\(K_\\nu(\\cdot)\\) is a modified Bessel function and \\(\\Gamma(\\cdot)\\) is the gamma function. As \\(\\nu\\rightarrow\\infty\\), the Mat\u00e9rn kernel converges to the RBF kernel. When \\(\\nu = 1/2\\), the Mat\u00e9rn kernel becomes identical to the absolute exponential kernel, i.e.,", "In particular, \\(\\nu = 3/2\\):", "and \\(\\nu = 5/2\\):", "are popular choices for learning functions that are not infinitely differentiable (as assumed by the RBF kernel) but at least once (\\(\\nu = 3/2\\)) or twice differentiable (\\(\\nu = 5/2\\)).", "The flexibility of controlling the smoothness of the learned function via \\(\\nu\\) allows adapting to the properties of the true underlying functional relation. The prior and posterior of a GP resulting from a Mat\u00e9rn kernel are shown in the following figure:", "See [RW2006], pp84 for further details regarding the different variants of the Mat\u00e9rn kernel.", "The RationalQuadratic kernel can be seen as a scale mixture (an infinite sum) of RBF kernels with different characteristic length-scales. It is parameterized by a length-scale parameter \\(l>0\\) and a scale mixture parameter \\(\\alpha>0\\) Only the isotropic variant where \\(l\\) is a scalar is supported at the moment. The kernel is given by:", "The prior and posterior of a GP resulting from a RationalQuadratic kernel are shown in the following figure:", "The ExpSineSquared kernel allows modeling periodic functions. It is parameterized by a length-scale parameter \\(l>0\\) and a periodicity parameter \\(p>0\\). Only the isotropic variant where \\(l\\) is a scalar is supported at the moment. The kernel is given by:", "The prior and posterior of a GP resulting from an ExpSineSquared kernel are shown in the following figure:", "The DotProduct kernel is non-stationary and can be obtained from linear regression by putting \\(N(0, 1)\\) priors on the coefficients of \\(x_d (d = 1, . . . , D)\\) and a prior of \\(N(0, \\sigma_0^2)\\) on the bias. The DotProduct kernel is invariant to a rotation of the coordinates about the origin, but not translations. It is parameterized by a parameter \\(\\sigma_0^2\\). For \\(\\sigma_0^2 = 0\\), the kernel is called the homogeneous linear kernel, otherwise it is inhomogeneous. The kernel is given by", "The DotProduct kernel is commonly combined with exponentiation. An example with exponent 2 is shown in the following figure:", "Carl Eduard Rasmussen and Christopher K.I. Williams, \u201cGaussian Processes for Machine Learning\u201d, MIT Press 2006, Link to an official complete PDF version of the book here .", "David Duvenaud, \u201cThe Kernel Cookbook: Advice on Covariance functions\u201d, 2014, Link ."]}, {"name": "1.8. Cross decomposition", "path": "modules/cross_decomposition", "type": "Guide", "text": ["The cross decomposition module contains supervised estimators for dimensionality reduction and regression, belonging to the \u201cPartial Least Squares\u201d family.", "Cross decomposition algorithms find the fundamental relations between two matrices (X and Y). They are latent variable approaches to modeling the covariance structures in these two spaces. They will try to find the multidimensional direction in the X space that explains the maximum multidimensional variance direction in the Y space. In other words, PLS projects both X and Y into a lower-dimensional subspace such that the covariance between transformed(X) and transformed(Y) is maximal.", "PLS draws similarities with Principal Component Regression (PCR), where the samples are first projected into a lower-dimensional subspace, and the targets y are predicted using transformed(X). One issue with PCR is that the dimensionality reduction is unsupervized, and may lose some important variables: PCR would keep the features with the most variance, but it\u2019s possible that features with a small variances are relevant from predicting the target. In a way, PLS allows for the same kind of dimensionality reduction, but by taking into account the targets y. An illustration of this fact is given in the following example: * Principal Component Regression vs Partial Least Squares Regression.", "Apart from CCA, the PLS estimators are particularly suited when the matrix of predictors has more variables than observations, and when there is multicollinearity among the features. By contrast, standard linear regression would fail in these cases unless it is regularized.", "Classes included in this module are PLSRegression, PLSCanonical, CCA and PLSSVD", "We here describe the algorithm used in PLSCanonical. The other estimators use variants of this algorithm, and are detailed below. We recommend section 1 for more details and comparisons between these algorithms. In 1, PLSCanonical corresponds to \u201cPLSW2A\u201d.", "Given two centered matrices \\(X \\in \\mathbb{R}^{n \\times d}\\) and \\(Y \\in \\mathbb{R}^{n \\times t}\\), and a number of components \\(K\\), PLSCanonical proceeds as follows:", "Set \\(X_1\\) to \\(X\\) and \\(Y_1\\) to \\(Y\\). Then, for each \\(k \\in [1, K]\\):", "At the end, we have approximated \\(X\\) as a sum of rank-1 matrices: \\(X = \\Xi \\Gamma^T\\) where \\(\\Xi \\in \\mathbb{R}^{n \\times K}\\) contains the scores in its columns, and \\(\\Gamma^T \\in \\mathbb{R}^{K \\times d}\\) contains the loadings in its rows. Similarly for \\(Y\\), we have \\(Y = \\Omega \\Delta^T\\).", "Note that the scores matrices \\(\\Xi\\) and \\(\\Omega\\) correspond to the projections of the training data \\(X\\) and \\(Y\\), respectively.", "Step a) may be performed in two ways: either by computing the whole SVD of \\(C\\) and only retain the singular vectors with the biggest singular values, or by directly computing the singular vectors using the power method (cf section 11.3 in 1), which corresponds to the 'nipals' option of the algorithm parameter.", "To transform \\(X\\) into \\(\\bar{X}\\), we need to find a projection matrix \\(P\\) such that \\(\\bar{X} = XP\\). We know that for the training data, \\(\\Xi = XP\\), and \\(X = \\Xi \\Gamma^T\\). Setting \\(P = U(\\Gamma^T U)^{-1}\\) where \\(U\\) is the matrix with the \\(u_k\\) in the columns, we have \\(XP = X U(\\Gamma^T U)^{-1} = \\Xi (\\Gamma^T U) (\\Gamma^T U)^{-1} = \\Xi\\) as desired. The rotation matrix \\(P\\) can be accessed from the x_rotations_ attribute.", "Similarly, \\(Y\\) can be transformed using the rotation matrix \\(V(\\Delta^T V)^{-1}\\), accessed via the y_rotations_ attribute.", "To predict the targets of some data \\(X\\), we are looking for a coefficient matrix \\(\\beta \\in R^{d \\times t}\\) such that \\(Y = X\\beta\\).", "The idea is to try to predict the transformed targets \\(\\Omega\\) as a function of the transformed samples \\(\\Xi\\), by computing \\(\\alpha \\in \\mathbb{R}\\) such that \\(\\Omega = \\alpha \\Xi\\).", "Then, we have \\(Y = \\Omega \\Delta^T = \\alpha \\Xi \\Delta^T\\), and since \\(\\Xi\\) is the transformed training data we have that \\(Y = X \\alpha P \\Delta^T\\), and as a result the coefficient matrix \\(\\beta = \\alpha P \\Delta^T\\).", "\\(\\beta\\) can be accessed through the coef_ attribute.", "PLSSVD is a simplified version of PLSCanonical described earlier: instead of iteratively deflating the matrices \\(X_k\\) and \\(Y_k\\), PLSSVD computes the SVD of \\(C = X^TY\\) only once, and stores the n_components singular vectors corresponding to the biggest singular values in the matrices U and V, corresponding to the x_weights_ and y_weights_ attributes. Here, the transformed data is simply transformed(X) = XU and transformed(Y) = YV.", "If n_components == 1, PLSSVD and PLSCanonical are strictly equivalent.", "The PLSRegression estimator is similar to PLSCanonical with algorithm='nipals', with 2 significant differences:", "These two modifications affect the output of predict and transform, which are not the same as for PLSCanonical. Also, while the number of components is limited by min(n_samples, n_features, n_targets) in PLSCanonical, here the limit is the rank of \\(X^TX\\), i.e. min(n_samples, n_features).", "PLSRegression is also known as PLS1 (single targets) and PLS2 (multiple targets). Much like Lasso, PLSRegression is a form of regularized linear regression where the number of components controls the strength of the regularization.", "Canonical Correlation Analysis was developed prior and independently to PLS. But it turns out that CCA is a special case of PLS, and corresponds to PLS in \u201cMode B\u201d in the literature.", "CCA differs from PLSCanonical in the way the weights \\(u_k\\) and \\(v_k\\) are computed in the power method of step a). Details can be found in section 10 of 1.", "Since CCA involves the inversion of \\(X_k^TX_k\\) and \\(Y_k^TY_k\\), this estimator can be unstable if the number of features or targets is greater than the number of samples.", "Reference:", "A survey of Partial Least Squares (PLS) methods, with emphasis on the two-block case JA Wegelin", "Examples:"]}, {"name": "1.9. Naive Bayes", "path": "modules/naive_bayes", "type": "Guide", "text": ["Naive Bayes methods are a set of supervised learning algorithms based on applying Bayes\u2019 theorem with the \u201cnaive\u201d assumption of conditional independence between every pair of features given the value of the class variable. Bayes\u2019 theorem states the following relationship, given class variable \\(y\\) and dependent feature vector \\(x_1\\) through \\(x_n\\), :", "Using the naive conditional independence assumption that", "for all \\(i\\), this relationship is simplified to", "Since \\(P(x_1, \\dots, x_n)\\) is constant given the input, we can use the following classification rule:", "and we can use Maximum A Posteriori (MAP) estimation to estimate \\(P(y)\\) and \\(P(x_i \\mid y)\\); the former is then the relative frequency of class \\(y\\) in the training set.", "The different naive Bayes classifiers differ mainly by the assumptions they make regarding the distribution of \\(P(x_i \\mid y)\\).", "In spite of their apparently over-simplified assumptions, naive Bayes classifiers have worked quite well in many real-world situations, famously document classification and spam filtering. They require a small amount of training data to estimate the necessary parameters. (For theoretical reasons why naive Bayes works well, and on which types of data it does, see the references below.)", "Naive Bayes learners and classifiers can be extremely fast compared to more sophisticated methods. The decoupling of the class conditional feature distributions means that each distribution can be independently estimated as a one dimensional distribution. This in turn helps to alleviate problems stemming from the curse of dimensionality.", "On the flip side, although naive Bayes is known as a decent classifier, it is known to be a bad estimator, so the probability outputs from predict_proba are not to be taken too seriously.", "References:", "GaussianNB implements the Gaussian Naive Bayes algorithm for classification. The likelihood of the features is assumed to be Gaussian:", "The parameters \\(\\sigma_y\\) and \\(\\mu_y\\) are estimated using maximum likelihood.", "MultinomialNB implements the naive Bayes algorithm for multinomially distributed data, and is one of the two classic naive Bayes variants used in text classification (where the data are typically represented as word vector counts, although tf-idf vectors are also known to work well in practice). The distribution is parametrized by vectors \\(\\theta_y = (\\theta_{y1},\\ldots,\\theta_{yn})\\) for each class \\(y\\), where \\(n\\) is the number of features (in text classification, the size of the vocabulary) and \\(\\theta_{yi}\\) is the probability \\(P(x_i \\mid y)\\) of feature \\(i\\) appearing in a sample belonging to class \\(y\\).", "The parameters \\(\\theta_y\\) is estimated by a smoothed version of maximum likelihood, i.e. relative frequency counting:", "where \\(N_{yi} = \\sum_{x \\in T} x_i\\) is the number of times feature \\(i\\) appears in a sample of class \\(y\\) in the training set \\(T\\), and \\(N_{y} = \\sum_{i=1}^{n} N_{yi}\\) is the total count of all features for class \\(y\\).", "The smoothing priors \\(\\alpha \\ge 0\\) accounts for features not present in the learning samples and prevents zero probabilities in further computations. Setting \\(\\alpha = 1\\) is called Laplace smoothing, while \\(\\alpha < 1\\) is called Lidstone smoothing.", "ComplementNB implements the complement naive Bayes (CNB) algorithm. CNB is an adaptation of the standard multinomial naive Bayes (MNB) algorithm that is particularly suited for imbalanced data sets. Specifically, CNB uses statistics from the complement of each class to compute the model\u2019s weights. The inventors of CNB show empirically that the parameter estimates for CNB are more stable than those for MNB. Further, CNB regularly outperforms MNB (often by a considerable margin) on text classification tasks. The procedure for calculating the weights is as follows:", "where the summations are over all documents \\(j\\) not in class \\(c\\), \\(d_{ij}\\) is either the count or tf-idf value of term \\(i\\) in document \\(j\\), \\(\\alpha_i\\) is a smoothing hyperparameter like that found in MNB, and \\(\\alpha = \\sum_{i} \\alpha_i\\). The second normalization addresses the tendency for longer documents to dominate parameter estimates in MNB. The classification rule is:", "i.e., a document is assigned to the class that is the poorest complement match.", "References:", "BernoulliNB implements the naive Bayes training and classification algorithms for data that is distributed according to multivariate Bernoulli distributions; i.e., there may be multiple features but each one is assumed to be a binary-valued (Bernoulli, boolean) variable. Therefore, this class requires samples to be represented as binary-valued feature vectors; if handed any other kind of data, a BernoulliNB instance may binarize its input (depending on the binarize parameter).", "The decision rule for Bernoulli naive Bayes is based on", "which differs from multinomial NB\u2019s rule in that it explicitly penalizes the non-occurrence of a feature \\(i\\) that is an indicator for class \\(y\\), where the multinomial variant would simply ignore a non-occurring feature.", "In the case of text classification, word occurrence vectors (rather than word count vectors) may be used to train and use this classifier. BernoulliNB might perform better on some datasets, especially those with shorter documents. It is advisable to evaluate both models, if time permits.", "References:", "CategoricalNB implements the categorical naive Bayes algorithm for categorically distributed data. It assumes that each feature, which is described by the index \\(i\\), has its own categorical distribution.", "For each feature \\(i\\) in the training set \\(X\\), CategoricalNB estimates a categorical distribution for each feature i of X conditioned on the class y. The index set of the samples is defined as \\(J = \\{ 1, \\dots, m \\}\\), with \\(m\\) as the number of samples.", "The probability of category \\(t\\) in feature \\(i\\) given class \\(c\\) is estimated as:", "where \\(N_{tic} = |\\{j \\in J \\mid x_{ij} = t, y_j = c\\}|\\) is the number of times category \\(t\\) appears in the samples \\(x_{i}\\), which belong to class \\(c\\), \\(N_{c} = |\\{ j \\in J\\mid y_j = c\\}|\\) is the number of samples with class c, \\(\\alpha\\) is a smoothing parameter and \\(n_i\\) is the number of available categories of feature \\(i\\).", "CategoricalNB assumes that the sample matrix \\(X\\) is encoded (for instance with the help of OrdinalEncoder) such that all categories for each feature \\(i\\) are represented with numbers \\(0, ..., n_i - 1\\) where \\(n_i\\) is the number of available categories of feature \\(i\\).", "Naive Bayes models can be used to tackle large scale classification problems for which the full training set might not fit in memory. To handle this case, MultinomialNB, BernoulliNB, and GaussianNB expose a partial_fit method that can be used incrementally as done with other classifiers as demonstrated in Out-of-core classification of text documents. All naive Bayes classifiers support sample weighting.", "Contrary to the fit method, the first call to partial_fit needs to be passed the list of all the expected class labels.", "For an overview of available strategies in scikit-learn, see also the out-of-core learning documentation.", "Note", "The partial_fit method call of naive Bayes models introduces some computational overhead. It is recommended to use data chunk sizes that are as large as possible, that is as the available RAM allows."]}, {"name": "1.10. Decision Trees", "path": "modules/tree", "type": "Guide", "text": ["Decision Trees (DTs) are a non-parametric supervised learning method used for classification and regression. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. A tree can be seen as a piecewise constant approximation.", "For instance, in the example below, decision trees learn from data to approximate a sine curve with a set of if-then-else decision rules. The deeper the tree, the more complex the decision rules and the fitter the model.", "Some advantages of decision trees are:", "The disadvantages of decision trees include:", "DecisionTreeClassifier is a class capable of performing multi-class classification on a dataset.", "As with other classifiers, DecisionTreeClassifier takes as input two arrays: an array X, sparse or dense, of shape (n_samples, n_features) holding the training samples, and an array Y of integer values, shape (n_samples,), holding the class labels for the training samples:", "After being fitted, the model can then be used to predict the class of samples:", "In case that there are multiple classes with the same and highest probability, the classifier will predict the class with the lowest index amongst those classes.", "As an alternative to outputting a specific class, the probability of each class can be predicted, which is the fraction of training samples of the class in a leaf:", "DecisionTreeClassifier is capable of both binary (where the labels are [-1, 1]) classification and multiclass (where the labels are [0, \u2026, K-1]) classification.", "Using the Iris dataset, we can construct a tree as follows:", "Once trained, you can plot the tree with the plot_tree function:", "We can also export the tree in Graphviz format using the export_graphviz exporter. If you use the conda package manager, the graphviz binaries and the python package can be installed with conda install python-graphviz.", "Alternatively binaries for graphviz can be downloaded from the graphviz project homepage, and the Python wrapper installed from pypi with pip install graphviz.", "Below is an example graphviz export of the above tree trained on the entire iris dataset; the results are saved in an output file iris.pdf:", "The export_graphviz exporter also supports a variety of aesthetic options, including coloring nodes by their class (or value for regression) and using explicit variable and class names if desired. Jupyter notebooks also render these plots inline automatically:", "Alternatively, the tree can also be exported in textual format with the function export_text. This method doesn\u2019t require the installation of external libraries and is more compact:", "Examples:", "Decision trees can also be applied to regression problems, using the DecisionTreeRegressor class.", "As in the classification setting, the fit method will take as argument arrays X and y, only that in this case y is expected to have floating point values instead of integer values:", "Examples:", "A multi-output problem is a supervised learning problem with several outputs to predict, that is when Y is a 2d array of shape (n_samples, n_outputs).", "When there is no correlation between the outputs, a very simple way to solve this kind of problem is to build n independent models, i.e. one for each output, and then to use those models to independently predict each one of the n outputs. However, because it is likely that the output values related to the same input are themselves correlated, an often better way is to build a single model capable of predicting simultaneously all n outputs. First, it requires lower training time since only a single estimator is built. Second, the generalization accuracy of the resulting estimator may often be increased.", "With regard to decision trees, this strategy can readily be used to support multi-output problems. This requires the following changes:", "This module offers support for multi-output problems by implementing this strategy in both DecisionTreeClassifier and DecisionTreeRegressor. If a decision tree is fit on an output array Y of shape (n_samples, n_outputs) then the resulting estimator will:", "The use of multi-output trees for regression is demonstrated in Multi-output Decision Tree Regression. In this example, the input X is a single real value and the outputs Y are the sine and cosine of X.", "The use of multi-output trees for classification is demonstrated in Face completion with a multi-output estimators. In this example, the inputs X are the pixels of the upper half of faces and the outputs Y are the pixels of the lower half of those faces.", "Examples:", "References:", "In general, the run time cost to construct a balanced binary tree is \\(O(n_{samples}n_{features}\\log(n_{samples}))\\) and query time \\(O(\\log(n_{samples}))\\). Although the tree construction algorithm attempts to generate balanced trees, they will not always be balanced. Assuming that the subtrees remain approximately balanced, the cost at each node consists of searching through \\(O(n_{features})\\) to find the feature that offers the largest reduction in entropy. This has a cost of \\(O(n_{features}n_{samples}\\log(n_{samples}))\\) at each node, leading to a total cost over the entire trees (by summing the cost at each node) of \\(O(n_{features}n_{samples}^{2}\\log(n_{samples}))\\).", "Use min_samples_split or min_samples_leaf to ensure that multiple samples inform every decision in the tree, by controlling which splits will be considered. A very small number will usually mean the tree will overfit, whereas a large number will prevent the tree from learning the data. Try min_samples_leaf=5 as an initial value. If the sample size varies greatly, a float number can be used as percentage in these two parameters. While min_samples_split can create arbitrarily small leaves, min_samples_leaf guarantees that each leaf has a minimum size, avoiding low-variance, over-fit leaf nodes in regression problems. For classification with few classes, min_samples_leaf=1 is often the best choice.", "Note that min_samples_split considers samples directly and independent of sample_weight, if provided (e.g. a node with m weighted samples is still treated as having exactly m samples). Consider min_weight_fraction_leaf or min_impurity_decrease if accounting for sample weights is required at splits.", "What are all the various decision tree algorithms and how do they differ from each other? Which one is implemented in scikit-learn?", "ID3 (Iterative Dichotomiser 3) was developed in 1986 by Ross Quinlan. The algorithm creates a multiway tree, finding for each node (i.e. in a greedy manner) the categorical feature that will yield the largest information gain for categorical targets. Trees are grown to their maximum size and then a pruning step is usually applied to improve the ability of the tree to generalise to unseen data.", "C4.5 is the successor to ID3 and removed the restriction that features must be categorical by dynamically defining a discrete attribute (based on numerical variables) that partitions the continuous attribute value into a discrete set of intervals. C4.5 converts the trained trees (i.e. the output of the ID3 algorithm) into sets of if-then rules. These accuracy of each rule is then evaluated to determine the order in which they should be applied. Pruning is done by removing a rule\u2019s precondition if the accuracy of the rule improves without it.", "C5.0 is Quinlan\u2019s latest version release under a proprietary license. It uses less memory and builds smaller rulesets than C4.5 while being more accurate.", "CART (Classification and Regression Trees) is very similar to C4.5, but it differs in that it supports numerical target variables (regression) and does not compute rule sets. CART constructs binary trees using the feature and threshold that yield the largest information gain at each node.", "scikit-learn uses an optimised version of the CART algorithm; however, scikit-learn implementation does not support categorical variables for now.", "Given training vectors \\(x_i \\in R^n\\), i=1,\u2026, l and a label vector \\(y \\in R^l\\), a decision tree recursively partitions the feature space such that the samples with the same labels or similar target values are grouped together.", "Let the data at node \\(m\\) be represented by \\(Q_m\\) with \\(N_m\\) samples. For each candidate split \\(\\theta = (j, t_m)\\) consisting of a feature \\(j\\) and threshold \\(t_m\\), partition the data into \\(Q_m^{left}(\\theta)\\) and \\(Q_m^{right}(\\theta)\\) subsets", "The quality of a candidate split of node \\(m\\) is then computed using an impurity function or loss function \\(H()\\), the choice of which depends on the task being solved (classification or regression)", "Select the parameters that minimises the impurity", "Recurse for subsets \\(Q_m^{left}(\\theta^*)\\) and \\(Q_m^{right}(\\theta^*)\\) until the maximum allowable depth is reached, \\(N_m < \\min_{samples}\\) or \\(N_m = 1\\).", "If a target is a classification outcome taking on values 0,1,\u2026,K-1, for node \\(m\\), let", "be the proportion of class k observations in node \\(m\\). If \\(m\\) is a terminal node, predict_proba for this region is set to \\(p_{mk}\\). Common measures of impurity are the following.", "Gini:", "Entropy:", "Misclassification:", "If the target is a continuous value, then for node \\(m\\), common criteria to minimize as for determining locations for future splits are Mean Squared Error (MSE or L2 error), Poisson deviance as well as Mean Absolute Error (MAE or L1 error). MSE and Poisson deviance both set the predicted value of terminal nodes to the learned mean value \\(\\bar{y}_m\\) of the node whereas the MAE sets the predicted value of terminal nodes to the median \\(median(y)_m\\).", "Mean Squared Error:", "Half Poisson deviance:", "Setting criterion=\"poisson\" might be a good choice if your target is a count or a frequency (count per some unit). In any case, \\(y >= 0\\) is a necessary condition to use this criterion. Note that it fits much slower than the MSE criterion.", "Mean Absolute Error:", "Note that it fits much slower than the MSE criterion.", "Minimal cost-complexity pruning is an algorithm used to prune a tree to avoid over-fitting, described in Chapter 3 of [BRE]. This algorithm is parameterized by \\(\\alpha\\ge0\\) known as the complexity parameter. The complexity parameter is used to define the cost-complexity measure, \\(R_\\alpha(T)\\) of a given tree \\(T\\):", "where \\(|\\widetilde{T}|\\) is the number of terminal nodes in \\(T\\) and \\(R(T)\\) is traditionally defined as the total misclassification rate of the terminal nodes. Alternatively, scikit-learn uses the total sample weighted impurity of the terminal nodes for \\(R(T)\\). As shown above, the impurity of a node depends on the criterion. Minimal cost-complexity pruning finds the subtree of \\(T\\) that minimizes \\(R_\\alpha(T)\\).", "The cost complexity measure of a single node is \\(R_\\alpha(t)=R(t)+\\alpha\\). The branch, \\(T_t\\), is defined to be a tree where node \\(t\\) is its root. In general, the impurity of a node is greater than the sum of impurities of its terminal nodes, \\(R(T_t)<R(t)\\). However, the cost complexity measure of a node, \\(t\\), and its branch, \\(T_t\\), can be equal depending on \\(\\alpha\\). We define the effective \\(\\alpha\\) of a node to be the value where they are equal, \\(R_\\alpha(T_t)=R_\\alpha(t)\\) or \\(\\alpha_{eff}(t)=\\frac{R(t)-R(T_t)}{|T|-1}\\). A non-terminal node with the smallest value of \\(\\alpha_{eff}\\) is the weakest link and will be pruned. This process stops when the pruned tree\u2019s minimal \\(\\alpha_{eff}\\) is greater than the ccp_alpha parameter.", "Examples:", "References:", "L. Breiman, J. Friedman, R. Olshen, and C. Stone. Classification and Regression Trees. Wadsworth, Belmont, CA, 1984."]}, {"name": "1.11. Ensemble methods", "path": "modules/ensemble", "type": "Guide", "text": ["The goal of ensemble methods is to combine the predictions of several base estimators built with a given learning algorithm in order to improve generalizability / robustness over a single estimator.", "Two families of ensemble methods are usually distinguished:", "In averaging methods, the driving principle is to build several estimators independently and then to average their predictions. On average, the combined estimator is usually better than any of the single base estimator because its variance is reduced.", "Examples: Bagging methods, Forests of randomized trees, \u2026", "By contrast, in boosting methods, base estimators are built sequentially and one tries to reduce the bias of the combined estimator. The motivation is to combine several weak models to produce a powerful ensemble.", "Examples: AdaBoost, Gradient Tree Boosting, \u2026", "In ensemble algorithms, bagging methods form a class of algorithms which build several instances of a black-box estimator on random subsets of the original training set and then aggregate their individual predictions to form a final prediction. These methods are used as a way to reduce the variance of a base estimator (e.g., a decision tree), by introducing randomization into its construction procedure and then making an ensemble out of it. In many cases, bagging methods constitute a very simple way to improve with respect to a single model, without making it necessary to adapt the underlying base algorithm. As they provide a way to reduce overfitting, bagging methods work best with strong and complex models (e.g., fully developed decision trees), in contrast with boosting methods which usually work best with weak models (e.g., shallow decision trees).", "Bagging methods come in many flavours but mostly differ from each other by the way they draw random subsets of the training set:", "In scikit-learn, bagging methods are offered as a unified BaggingClassifier meta-estimator (resp. BaggingRegressor), taking as input a user-specified base estimator along with parameters specifying the strategy to draw random subsets. In particular, max_samples and max_features control the size of the subsets (in terms of samples and features), while bootstrap and bootstrap_features control whether samples and features are drawn with or without replacement. When using a subset of the available samples the generalization accuracy can be estimated with the out-of-bag samples by setting oob_score=True. As an example, the snippet below illustrates how to instantiate a bagging ensemble of KNeighborsClassifier base estimators, each built on random subsets of 50% of the samples and 50% of the features.", "Examples:", "References", "L. Breiman, \u201cPasting small votes for classification in large databases and on-line\u201d, Machine Learning, 36(1), 85-103, 1999.", "L. Breiman, \u201cBagging predictors\u201d, Machine Learning, 24(2), 123-140, 1996.", "T. Ho, \u201cThe random subspace method for constructing decision forests\u201d, Pattern Analysis and Machine Intelligence, 20(8), 832-844, 1998.", "G. Louppe and P. Geurts, \u201cEnsembles on Random Patches\u201d, Machine Learning and Knowledge Discovery in Databases, 346-361, 2012.", "The sklearn.ensemble module includes two averaging algorithms based on randomized decision trees: the RandomForest algorithm and the Extra-Trees method. Both algorithms are perturb-and-combine techniques [B1998] specifically designed for trees. This means a diverse set of classifiers is created by introducing randomness in the classifier construction. The prediction of the ensemble is given as the averaged prediction of the individual classifiers.", "As other classifiers, forest classifiers have to be fitted with two arrays: a sparse or dense array X of shape (n_samples, n_features) holding the training samples, and an array Y of shape (n_samples,) holding the target values (class labels) for the training samples:", "Like decision trees, forests of trees also extend to multi-output problems (if Y is an array of shape (n_samples, n_outputs)).", "In random forests (see RandomForestClassifier and RandomForestRegressor classes), each tree in the ensemble is built from a sample drawn with replacement (i.e., a bootstrap sample) from the training set.", "Furthermore, when splitting each node during the construction of a tree, the best split is found either from all input features or a random subset of size max_features. (See the parameter tuning guidelines for more details).", "The purpose of these two sources of randomness is to decrease the variance of the forest estimator. Indeed, individual decision trees typically exhibit high variance and tend to overfit. The injected randomness in forests yield decision trees with somewhat decoupled prediction errors. By taking an average of those predictions, some errors can cancel out. Random forests achieve a reduced variance by combining diverse trees, sometimes at the cost of a slight increase in bias. In practice the variance reduction is often significant hence yielding an overall better model.", "In contrast to the original publication [B2001], the scikit-learn implementation combines classifiers by averaging their probabilistic prediction, instead of letting each classifier vote for a single class.", "In extremely randomized trees (see ExtraTreesClassifier and ExtraTreesRegressor classes), randomness goes one step further in the way splits are computed. As in random forests, a random subset of candidate features is used, but instead of looking for the most discriminative thresholds, thresholds are drawn at random for each candidate feature and the best of these randomly-generated thresholds is picked as the splitting rule. This usually allows to reduce the variance of the model a bit more, at the expense of a slightly greater increase in bias:", "The main parameters to adjust when using these methods is n_estimators and max_features. The former is the number of trees in the forest. The larger the better, but also the longer it will take to compute. In addition, note that results will stop getting significantly better beyond a critical number of trees. The latter is the size of the random subsets of features to consider when splitting a node. The lower the greater the reduction of variance, but also the greater the increase in bias. Empirical good default values are max_features=None (always considering all features instead of a random subset) for regression problems, and max_features=\"sqrt\" (using a random subset of size sqrt(n_features)) for classification tasks (where n_features is the number of features in the data). Good results are often achieved when setting max_depth=None in combination with min_samples_split=2 (i.e., when fully developing the trees). Bear in mind though that these values are usually not optimal, and might result in models that consume a lot of RAM. The best parameter values should always be cross-validated. In addition, note that in random forests, bootstrap samples are used by default (bootstrap=True) while the default strategy for extra-trees is to use the whole dataset (bootstrap=False). When using bootstrap sampling the generalization accuracy can be estimated on the left out or out-of-bag samples. This can be enabled by setting oob_score=True.", "Note", "The size of the model with the default parameters is \\(O( M * N * log (N) )\\), where \\(M\\) is the number of trees and \\(N\\) is the number of samples. In order to reduce the size of the model, you can change these parameters: min_samples_split, max_leaf_nodes, max_depth and min_samples_leaf.", "Finally, this module also features the parallel construction of the trees and the parallel computation of the predictions through the n_jobs parameter. If n_jobs=k then computations are partitioned into k jobs, and run on k cores of the machine. If n_jobs=-1 then all cores available on the machine are used. Note that because of inter-process communication overhead, the speedup might not be linear (i.e., using k jobs will unfortunately not be k times as fast). Significant speedup can still be achieved though when building a large number of trees, or when building a single tree requires a fair amount of time (e.g., on large datasets).", "Examples:", "References", "The relative rank (i.e. depth) of a feature used as a decision node in a tree can be used to assess the relative importance of that feature with respect to the predictability of the target variable. Features used at the top of the tree contribute to the final prediction decision of a larger fraction of the input samples. The expected fraction of the samples they contribute to can thus be used as an estimate of the relative importance of the features. In scikit-learn, the fraction of samples a feature contributes to is combined with the decrease in impurity from splitting them to create a normalized estimate of the predictive power of that feature.", "By averaging the estimates of predictive ability over several randomized trees one can reduce the variance of such an estimate and use it for feature selection. This is known as the mean decrease in impurity, or MDI. Refer to [L2014] for more information on MDI and feature importance evaluation with Random Forests.", "Warning", "The impurity-based feature importances computed on tree-based models suffer from two flaws that can lead to misleading conclusions. First they are computed on statistics derived from the training dataset and therefore do not necessarily inform us on which features are most important to make good predictions on held-out dataset. Secondly, they favor high cardinality features, that is features with many unique values. Permutation feature importance is an alternative to impurity-based feature importance that does not suffer from these flaws. These two methods of obtaining feature importance are explored in: Permutation Importance vs Random Forest Feature Importance (MDI).", "The following example shows a color-coded representation of the relative importances of each individual pixel for a face recognition task using a ExtraTreesClassifier model.", "In practice those estimates are stored as an attribute named feature_importances_ on the fitted model. This is an array with shape (n_features,) whose values are positive and sum to 1.0. The higher the value, the more important is the contribution of the matching feature to the prediction function.", "Examples:", "References", "G. Louppe, \u201cUnderstanding Random Forests: From Theory to Practice\u201d, PhD Thesis, U. of Liege, 2014.", "RandomTreesEmbedding implements an unsupervised transformation of the data. Using a forest of completely random trees, RandomTreesEmbedding encodes the data by the indices of the leaves a data point ends up in. This index is then encoded in a one-of-K manner, leading to a high dimensional, sparse binary coding. This coding can be computed very efficiently and can then be used as a basis for other learning tasks. The size and sparsity of the code can be influenced by choosing the number of trees and the maximum depth per tree. For each tree in the ensemble, the coding contains one entry of one. The size of the coding is at most n_estimators * 2\n** max_depth, the maximum number of leaves in the forest.", "As neighboring data points are more likely to lie within the same leaf of a tree, the transformation performs an implicit, non-parametric density estimation.", "Examples:", "See also", "Manifold learning techniques can also be useful to derive non-linear representations of feature space, also these approaches focus also on dimensionality reduction.", "The module sklearn.ensemble includes the popular boosting algorithm AdaBoost, introduced in 1995 by Freund and Schapire [FS1995].", "The core principle of AdaBoost is to fit a sequence of weak learners (i.e., models that are only slightly better than random guessing, such as small decision trees) on repeatedly modified versions of the data. The predictions from all of them are then combined through a weighted majority vote (or sum) to produce the final prediction. The data modifications at each so-called boosting iteration consist of applying weights \\(w_1\\), \\(w_2\\), \u2026, \\(w_N\\) to each of the training samples. Initially, those weights are all set to \\(w_i = 1/N\\), so that the first step simply trains a weak learner on the original data. For each successive iteration, the sample weights are individually modified and the learning algorithm is reapplied to the reweighted data. At a given step, those training examples that were incorrectly predicted by the boosted model induced at the previous step have their weights increased, whereas the weights are decreased for those that were predicted correctly. As iterations proceed, examples that are difficult to predict receive ever-increasing influence. Each subsequent weak learner is thereby forced to concentrate on the examples that are missed by the previous ones in the sequence [HTF].", "AdaBoost can be used both for classification and regression problems:", "The following example shows how to fit an AdaBoost classifier with 100 weak learners:", "The number of weak learners is controlled by the parameter n_estimators. The learning_rate parameter controls the contribution of the weak learners in the final combination. By default, weak learners are decision stumps. Different weak learners can be specified through the base_estimator parameter. The main parameters to tune to obtain good results are n_estimators and the complexity of the base estimators (e.g., its depth max_depth or minimum required number of samples to consider a split min_samples_split).", "Examples:", "References", "Y. Freund, and R. Schapire, \u201cA Decision-Theoretic Generalization of On-Line Learning and an Application to Boosting\u201d, 1997.", "J. Zhu, H. Zou, S. Rosset, T. Hastie. \u201cMulti-class AdaBoost\u201d, 2009.", "T. Hastie, R. Tibshirani and J. Friedman, \u201cElements of Statistical Learning Ed. 2\u201d, Springer, 2009.", "Gradient Tree Boosting or Gradient Boosted Decision Trees (GBDT) is a generalization of boosting to arbitrary differentiable loss functions. GBDT is an accurate and effective off-the-shelf procedure that can be used for both regression and classification problems in a variety of areas including Web search ranking and ecology.", "The module sklearn.ensemble provides methods for both classification and regression via gradient boosted decision trees.", "Note", "Scikit-learn 0.21 introduces two new experimental implementations of gradient boosting trees, namely HistGradientBoostingClassifier and HistGradientBoostingRegressor, inspired by LightGBM (See [LightGBM]).", "These histogram-based estimators can be orders of magnitude faster than GradientBoostingClassifier and GradientBoostingRegressor when the number of samples is larger than tens of thousands of samples.", "They also have built-in support for missing values, which avoids the need for an imputer.", "These estimators are described in more detail below in Histogram-Based Gradient Boosting.", "The following guide focuses on GradientBoostingClassifier and GradientBoostingRegressor, which might be preferred for small sample sizes since binning may lead to split points that are too approximate in this setting.", "The usage and the parameters of GradientBoostingClassifier and GradientBoostingRegressor are described below. The 2 most important parameters of these estimators are n_estimators and learning_rate.", "GradientBoostingClassifier supports both binary and multi-class classification. The following example shows how to fit a gradient boosting classifier with 100 decision stumps as weak learners:", "The number of weak learners (i.e. regression trees) is controlled by the parameter n_estimators; The size of each tree can be controlled either by setting the tree depth via max_depth or by setting the number of leaf nodes via max_leaf_nodes. The learning_rate is a hyper-parameter in the range (0.0, 1.0] that controls overfitting via shrinkage .", "Note", "Classification with more than 2 classes requires the induction of n_classes regression trees at each iteration, thus, the total number of induced trees equals n_classes * n_estimators. For datasets with a large number of classes we strongly recommend to use HistGradientBoostingClassifier as an alternative to GradientBoostingClassifier .", "GradientBoostingRegressor supports a number of different loss functions for regression which can be specified via the argument loss; the default loss function for regression is least squares ('ls').", "The figure below shows the results of applying GradientBoostingRegressor with least squares loss and 500 base learners to the diabetes dataset (sklearn.datasets.load_diabetes). The plot on the left shows the train and test error at each iteration. The train error at each iteration is stored in the train_score_ attribute of the gradient boosting model. The test error at each iterations can be obtained via the staged_predict method which returns a generator that yields the predictions at each stage. Plots like these can be used to determine the optimal number of trees (i.e. n_estimators) by early stopping.", "Examples:", "Both GradientBoostingRegressor and GradientBoostingClassifier support warm_start=True which allows you to add more estimators to an already fitted model.", "The size of the regression tree base learners defines the level of variable interactions that can be captured by the gradient boosting model. In general, a tree of depth h can capture interactions of order h . There are two ways in which the size of the individual regression trees can be controlled.", "If you specify max_depth=h then complete binary trees of depth h will be grown. Such trees will have (at most) 2**h leaf nodes and 2**h - 1 split nodes.", "Alternatively, you can control the tree size by specifying the number of leaf nodes via the parameter max_leaf_nodes. In this case, trees will be grown using best-first search where nodes with the highest improvement in impurity will be expanded first. A tree with max_leaf_nodes=k has k - 1 split nodes and thus can model interactions of up to order max_leaf_nodes - 1 .", "We found that max_leaf_nodes=k gives comparable results to max_depth=k-1 but is significantly faster to train at the expense of a slightly higher training error. The parameter max_leaf_nodes corresponds to the variable J in the chapter on gradient boosting in [F2001] and is related to the parameter interaction.depth in R\u2019s gbm package where max_leaf_nodes == interaction.depth + 1 .", "We first present GBRT for regression, and then detail the classification case.", "GBRT regressors are additive models whose prediction \\(y_i\\) for a given input \\(x_i\\) is of the following form:", "where the \\(h_m\\) are estimators called weak learners in the context of boosting. Gradient Tree Boosting uses decision tree regressors of fixed size as weak learners. The constant M corresponds to the n_estimators parameter.", "Similar to other boosting algorithms, a GBRT is built in a greedy fashion:", "where the newly added tree \\(h_m\\) is fitted in order to minimize a sum of losses \\(L_m\\), given the previous ensemble \\(F_{m-1}\\):", "where \\(l(y_i, F(x_i))\\) is defined by the loss parameter, detailed in the next section.", "By default, the initial model \\(F_{0}\\) is chosen as the constant that minimizes the loss: for a least-squares loss, this is the empirical mean of the target values. The initial model can also be specified via the init argument.", "Using a first-order Taylor approximation, the value of \\(l\\) can be approximated as follows:", "Note", "Briefly, a first-order Taylor approximation says that \\(l(z) \\approx l(a) + (z - a) \\frac{\\partial l(a)}{\\partial a}\\). Here, \\(z\\) corresponds to \\(F_{m - 1}(x_i) + h_m(x_i)\\), and \\(a\\) corresponds to \\(F_{m-1}(x_i)\\)", "The quantity \\(\\left[ \\frac{\\partial l(y_i, F(x_i))}{\\partial F(x_i)} \\right]_{F=F_{m - 1}}\\) is the derivative of the loss with respect to its second parameter, evaluated at \\(F_{m-1}(x)\\). It is easy to compute for any given \\(F_{m - 1}(x_i)\\) in a closed form since the loss is differentiable. We will denote it by \\(g_i\\).", "Removing the constant terms, we have:", "This is minimized if \\(h(x_i)\\) is fitted to predict a value that is proportional to the negative gradient \\(-g_i\\). Therefore, at each iteration, the estimator \\(h_m\\) is fitted to predict the negative gradients of the samples. The gradients are updated at each iteration. This can be considered as some kind of gradient descent in a functional space.", "Note", "For some losses, e.g. the least absolute deviation (LAD) where the gradients are \\(\\pm 1\\), the values predicted by a fitted \\(h_m\\) are not accurate enough: the tree can only output integer values. As a result, the leaves values of the tree \\(h_m\\) are modified once the tree is fitted, such that the leaves values minimize the loss \\(L_m\\). The update is loss-dependent: for the LAD loss, the value of a leaf is updated to the median of the samples in that leaf.", "Gradient boosting for classification is very similar to the regression case. However, the sum of the trees \\(F_M(x_i) = \\sum_m h_m(x_i)\\) is not homogeneous to a prediction: it cannot be a class, since the trees predict continuous values.", "The mapping from the value \\(F_M(x_i)\\) to a class or a probability is loss-dependent. For the deviance (or log-loss), the probability that \\(x_i\\) belongs to the positive class is modeled as \\(p(y_i = 1 | x_i) = \\sigma(F_M(x_i))\\) where \\(\\sigma\\) is the sigmoid function.", "For multiclass classification, K trees (for K classes) are built at each of the \\(M\\) iterations. The probability that \\(x_i\\) belongs to class k is modeled as a softmax of the \\(F_{M,k}(x_i)\\) values.", "Note that even for a classification task, the \\(h_m\\) sub-estimator is still a regressor, not a classifier. This is because the sub-estimators are trained to predict (negative) gradients, which are always continuous quantities.", "The following loss functions are supported and can be specified using the parameter loss:", "Regression", "Classification", "[F2001] proposed a simple regularization strategy that scales the contribution of each weak learner by a constant factor \\(\\nu\\):", "The parameter \\(\\nu\\) is also called the learning rate because it scales the step length the gradient descent procedure; it can be set via the learning_rate parameter.", "The parameter learning_rate strongly interacts with the parameter n_estimators, the number of weak learners to fit. Smaller values of learning_rate require larger numbers of weak learners to maintain a constant training error. Empirical evidence suggests that small values of learning_rate favor better test error. [HTF] recommend to set the learning rate to a small constant (e.g. learning_rate <= 0.1) and choose n_estimators by early stopping. For a more detailed discussion of the interaction between learning_rate and n_estimators see [R2007].", "[F1999] proposed stochastic gradient boosting, which combines gradient boosting with bootstrap averaging (bagging). At each iteration the base classifier is trained on a fraction subsample of the available training data. The subsample is drawn without replacement. A typical value of subsample is 0.5.", "The figure below illustrates the effect of shrinkage and subsampling on the goodness-of-fit of the model. We can clearly see that shrinkage outperforms no-shrinkage. Subsampling with shrinkage can further increase the accuracy of the model. Subsampling without shrinkage, on the other hand, does poorly.", "Another strategy to reduce the variance is by subsampling the features analogous to the random splits in RandomForestClassifier . The number of subsampled features can be controlled via the max_features parameter.", "Note", "Using a small max_features value can significantly decrease the runtime.", "Stochastic gradient boosting allows to compute out-of-bag estimates of the test deviance by computing the improvement in deviance on the examples that are not included in the bootstrap sample (i.e. the out-of-bag examples). The improvements are stored in the attribute oob_improvement_. oob_improvement_[i] holds the improvement in terms of the loss on the OOB samples if you add the i-th stage to the current predictions. Out-of-bag estimates can be used for model selection, for example to determine the optimal number of iterations. OOB estimates are usually very pessimistic thus we recommend to use cross-validation instead and only use OOB if cross-validation is too time consuming.", "Examples:", "Individual decision trees can be interpreted easily by simply visualizing the tree structure. Gradient boosting models, however, comprise hundreds of regression trees thus they cannot be easily interpreted by visual inspection of the individual trees. Fortunately, a number of techniques have been proposed to summarize and interpret gradient boosting models.", "Often features do not contribute equally to predict the target response; in many situations the majority of the features are in fact irrelevant. When interpreting a model, the first question usually is: what are those important features and how do they contributing in predicting the target response?", "Individual decision trees intrinsically perform feature selection by selecting appropriate split points. This information can be used to measure the importance of each feature; the basic idea is: the more often a feature is used in the split points of a tree the more important that feature is. This notion of importance can be extended to decision tree ensembles by simply averaging the impurity-based feature importance of each tree (see Feature importance evaluation for more details).", "The feature importance scores of a fit gradient boosting model can be accessed via the feature_importances_ property:", "Note that this computation of feature importance is based on entropy, and it is distinct from sklearn.inspection.permutation_importance which is based on permutation of the features.", "Examples:", "Scikit-learn 0.21 introduced two new experimental implementations of gradient boosting trees, namely HistGradientBoostingClassifier and HistGradientBoostingRegressor, inspired by LightGBM (See [LightGBM]).", "These histogram-based estimators can be orders of magnitude faster than GradientBoostingClassifier and GradientBoostingRegressor when the number of samples is larger than tens of thousands of samples.", "They also have built-in support for missing values, which avoids the need for an imputer.", "These fast estimators first bin the input samples X into integer-valued bins (typically 256 bins) which tremendously reduces the number of splitting points to consider, and allows the algorithm to leverage integer-based data structures (histograms) instead of relying on sorted continuous values when building the trees. The API of these estimators is slightly different, and some of the features from GradientBoostingClassifier and GradientBoostingRegressor are not yet supported, for instance some loss functions.", "These estimators are still experimental: their predictions and their API might change without any deprecation cycle. To use them, you need to explicitly import enable_hist_gradient_boosting:", "Examples:", "Most of the parameters are unchanged from GradientBoostingClassifier and GradientBoostingRegressor. One exception is the max_iter parameter that replaces n_estimators, and controls the number of iterations of the boosting process:", "Available losses for regression are \u2018least_squares\u2019, \u2018least_absolute_deviation\u2019, which is less sensitive to outliers, and \u2018poisson\u2019, which is well suited to model counts and frequencies. For classification, \u2018binary_crossentropy\u2019 is used for binary classification and \u2018categorical_crossentropy\u2019 is used for multiclass classification. By default the loss is \u2018auto\u2019 and will select the appropriate loss depending on y passed to fit.", "The size of the trees can be controlled through the max_leaf_nodes, max_depth, and min_samples_leaf parameters.", "The number of bins used to bin the data is controlled with the max_bins parameter. Using less bins acts as a form of regularization. It is generally recommended to use as many bins as possible, which is the default.", "The l2_regularization parameter is a regularizer on the loss function and corresponds to \\(\\lambda\\) in equation (2) of [XGBoost].", "Note that early-stopping is enabled by default if the number of samples is larger than 10,000. The early-stopping behaviour is controlled via the early-stopping, scoring, validation_fraction, n_iter_no_change, and tol parameters. It is possible to early-stop using an arbitrary scorer, or just the training or validation loss. Note that for technical reasons, using a scorer is significantly slower than using the loss. By default, early-stopping is performed if there are at least 10,000 samples in the training set, using the validation loss.", "HistGradientBoostingClassifier and HistGradientBoostingRegressor have built-in support for missing values (NaNs).", "During training, the tree grower learns at each split point whether samples with missing values should go to the left or right child, based on the potential gain. When predicting, samples with missing values are assigned to the left or right child consequently:", "When the missingness pattern is predictive, the splits can be done on whether the feature value is missing or not:", "If no missing values were encountered for a given feature during training, then samples with missing values are mapped to whichever child has the most samples.", "HistGradientBoostingClassifier and HistGradientBoostingRegressor sample support weights during fit.", "The following toy example demonstrates how the model ignores the samples with zero sample weights:", "As you can see, the [1, 0] is comfortably classified as 1 since the first two samples are ignored due to their sample weights.", "Implementation detail: taking sample weights into account amounts to multiplying the gradients (and the hessians) by the sample weights. Note that the binning stage (specifically the quantiles computation) does not take the weights into account.", "HistGradientBoostingClassifier and HistGradientBoostingRegressor have native support for categorical features: they can consider splits on non-ordered, categorical data.", "For datasets with categorical features, using the native categorical support is often better than relying on one-hot encoding (OneHotEncoder), because one-hot encoding requires more tree depth to achieve equivalent splits. It is also usually better to rely on the native categorical support rather than to treat categorical features as continuous (ordinal), which happens for ordinal-encoded categorical data, since categories are nominal quantities where order does not matter.", "To enable categorical support, a boolean mask can be passed to the categorical_features parameter, indicating which feature is categorical. In the following, the first feature will be treated as categorical and the second feature as numerical:", "Equivalently, one can pass a list of integers indicating the indices of the categorical features:", "The cardinality of each categorical feature should be less than the max_bins parameter, and each categorical feature is expected to be encoded in [0, max_bins - 1]. To that end, it might be useful to pre-process the data with an OrdinalEncoder as done in Categorical Feature Support in Gradient Boosting.", "If there are missing values during training, the missing values will be treated as a proper category. If there are no missing values during training, then at prediction time, missing values are mapped to the child node that has the most samples (just like for continuous features). When predicting, categories that were not seen during fit time will be treated as missing values.", "Split finding with categorical features: The canonical way of considering categorical splits in a tree is to consider all of the \\(2^{K - 1} - 1\\) partitions, where \\(K\\) is the number of categories. This can quickly become prohibitive when \\(K\\) is large. Fortunately, since gradient boosting trees are always regression trees (even for classification problems), there exist a faster strategy that can yield equivalent splits. First, the categories of a feature are sorted according to the variance of the target, for each category k. Once the categories are sorted, one can consider continuous partitions, i.e. treat the categories as if they were ordered continuous values (see Fisher [Fisher1958] for a formal proof). As a result, only \\(K - 1\\) splits need to be considered instead of \\(2^{K - 1} - 1\\). The initial sorting is a \\(\\mathcal{O}(K \\log(K))\\) operation, leading to a total complexity of \\(\\mathcal{O}(K \\log(K) + K)\\), instead of \\(\\mathcal{O}(2^K)\\).", "Examples:", "Depending on the problem at hand, you may have prior knowledge indicating that a given feature should in general have a positive (or negative) effect on the target value. For example, all else being equal, a higher credit score should increase the probability of getting approved for a loan. Monotonic constraints allow you to incorporate such prior knowledge into the model.", "A positive monotonic constraint is a constraint of the form:", "\\(x_1 \\leq x_1' \\implies F(x_1, x_2) \\leq F(x_1', x_2)\\), where \\(F\\) is the predictor with two features.", "Similarly, a negative monotonic constraint is of the form:", "\\(x_1 \\leq x_1' \\implies F(x_1, x_2) \\geq F(x_1', x_2)\\).", "Note that monotonic constraints only constraint the output \u201call else being equal\u201d. Indeed, the following relation is not enforced by a positive constraint: \\(x_1 \\leq x_1' \\implies F(x_1, x_2) \\leq F(x_1', x_2')\\).", "You can specify a monotonic constraint on each feature using the monotonic_cst parameter. For each feature, a value of 0 indicates no constraint, while -1 and 1 indicate a negative and positive constraint, respectively:", "In a binary classification context, imposing a monotonic constraint means that the feature is supposed to have a positive / negative effect on the probability to belong to the positive class. Monotonic constraints are not supported for multiclass context.", "Note", "Since categories are unordered quantities, it is not possible to enforce monotonic constraints on categorical features.", "Examples:", "HistGradientBoostingClassifier and HistGradientBoostingRegressor have implementations that use OpenMP for parallelization through Cython. For more details on how to control the number of threads, please refer to our Parallelism notes.", "The following parts are parallelized:", "The bottleneck of a gradient boosting procedure is building the decision trees. Building a traditional decision tree (as in the other GBDTs GradientBoostingClassifier and GradientBoostingRegressor) requires sorting the samples at each node (for each feature). Sorting is needed so that the potential gain of a split point can be computed efficiently. Splitting a single node has thus a complexity of \\(\\mathcal{O}(n_\\text{features} \\times n \\log(n))\\) where \\(n\\) is the number of samples at the node.", "HistGradientBoostingClassifier and HistGradientBoostingRegressor, in contrast, do not require sorting the feature values and instead use a data-structure called a histogram, where the samples are implicitly ordered. Building a histogram has a \\(\\mathcal{O}(n)\\) complexity, so the node splitting procedure has a \\(\\mathcal{O}(n_\\text{features} \\times n)\\) complexity, much smaller than the previous one. In addition, instead of considering \\(n\\) split points, we here consider only max_bins split points, which is much smaller.", "In order to build histograms, the input data X needs to be binned into integer-valued bins. This binning procedure does require sorting the feature values, but it only happens once at the very beginning of the boosting process (not at each node, like in GradientBoostingClassifier and GradientBoostingRegressor).", "Finally, many parts of the implementation of HistGradientBoostingClassifier and HistGradientBoostingRegressor are parallelized.", "References", "Friedmann, Jerome H., 2007, \u201cStochastic Gradient Boosting\u201d", "G. Ridgeway, \u201cGeneralized Boosted Models: A guide to the gbm package\u201d, 2007", "Tianqi Chen, Carlos Guestrin, \u201cXGBoost: A Scalable Tree Boosting System\u201d", "Ke et. al. \u201cLightGBM: A Highly Efficient Gradient BoostingDecision Tree\u201d", "Walter D. Fisher. \u201cOn Grouping for Maximum Homogeneity\u201d", "The idea behind the VotingClassifier is to combine conceptually different machine learning classifiers and use a majority vote or the average predicted probabilities (soft vote) to predict the class labels. Such a classifier can be useful for a set of equally well performing model in order to balance out their individual weaknesses.", "In majority voting, the predicted class label for a particular sample is the class label that represents the majority (mode) of the class labels predicted by each individual classifier.", "E.g., if the prediction for a given sample is", "the VotingClassifier (with voting='hard') would classify the sample as \u201cclass 1\u201d based on the majority class label.", "In the cases of a tie, the VotingClassifier will select the class based on the ascending sort order. E.g., in the following scenario", "the class label 1 will be assigned to the sample.", "The following example shows how to fit the majority rule classifier:", "In contrast to majority voting (hard voting), soft voting returns the class label as argmax of the sum of predicted probabilities.", "Specific weights can be assigned to each classifier via the weights parameter. When weights are provided, the predicted class probabilities for each classifier are collected, multiplied by the classifier weight, and averaged. The final class label is then derived from the class label with the highest average probability.", "To illustrate this with a simple example, let\u2019s assume we have 3 classifiers and a 3-class classification problems where we assign equal weights to all classifiers: w1=1, w2=1, w3=1.", "The weighted average probabilities for a sample would then be calculated as follows:", "classifier", "class 1", "class 2", "class 3", "classifier 1", "w1 * 0.2", "w1 * 0.5", "w1 * 0.3", "classifier 2", "w2 * 0.6", "w2 * 0.3", "w2 * 0.1", "classifier 3", "w3 * 0.3", "w3 * 0.4", "w3 * 0.3", "weighted average", "0.37", "0.4", "0.23", "Here, the predicted class label is 2, since it has the highest average probability.", "The following example illustrates how the decision regions may change when a soft VotingClassifier is used based on an linear Support Vector Machine, a Decision Tree, and a K-nearest neighbor classifier:", "The VotingClassifier can also be used together with GridSearchCV in order to tune the hyperparameters of the individual estimators:", "In order to predict the class labels based on the predicted class-probabilities (scikit-learn estimators in the VotingClassifier must support predict_proba method):", "Optionally, weights can be provided for the individual classifiers:", "The idea behind the VotingRegressor is to combine conceptually different machine learning regressors and return the average predicted values. Such a regressor can be useful for a set of equally well performing models in order to balance out their individual weaknesses.", "The following example shows how to fit the VotingRegressor:", "Examples:", "Stacked generalization is a method for combining estimators to reduce their biases [W1992] [HTF]. More precisely, the predictions of each individual estimator are stacked together and used as input to a final estimator to compute the prediction. This final estimator is trained through cross-validation.", "The StackingClassifier and StackingRegressor provide such strategies which can be applied to classification and regression problems.", "The estimators parameter corresponds to the list of the estimators which are stacked together in parallel on the input data. It should be given as a list of names and estimators:", "The final_estimator will use the predictions of the estimators as input. It needs to be a classifier or a regressor when using StackingClassifier or StackingRegressor, respectively:", "To train the estimators and final_estimator, the fit method needs to be called on the training data:", "During training, the estimators are fitted on the whole training data X_train. They will be used when calling predict or predict_proba. To generalize and avoid over-fitting, the final_estimator is trained on out-samples using sklearn.model_selection.cross_val_predict internally.", "For StackingClassifier, note that the output of the estimators is controlled by the parameter stack_method and it is called by each estimator. This parameter is either a string, being estimator method names, or 'auto' which will automatically identify an available method depending on the availability, tested in the order of preference: predict_proba, decision_function and predict.", "A StackingRegressor and StackingClassifier can be used as any other regressor or classifier, exposing a predict, predict_proba, and decision_function methods, e.g.:", "Note that it is also possible to get the output of the stacked estimators using the transform method:", "In practice, a stacking predictor predicts as good as the best predictor of the base layer and even sometimes outperforms it by combining the different strengths of the these predictors. However, training a stacking predictor is computationally expensive.", "Note", "For StackingClassifier, when using stack_method_='predict_proba', the first column is dropped when the problem is a binary classification problem. Indeed, both probability columns predicted by each estimator are perfectly collinear.", "Note", "Multiple stacking layers can be achieved by assigning final_estimator to a StackingClassifier or StackingRegressor:", "References", "Wolpert, David H. \u201cStacked generalization.\u201d Neural networks 5.2 (1992): 241-259."]}, {"name": "1.12. Multiclass and multioutput algorithms", "path": "modules/multiclass", "type": "Guide", "text": ["This section of the user guide covers functionality related to multi-learning problems, including multiclass, multilabel, and multioutput classification and regression.", "The modules in this section implement meta-estimators, which require a base estimator to be provided in their constructor. Meta-estimators extend the functionality of the base estimator to support multi-learning problems, which is accomplished by transforming the multi-learning problem into a set of simpler problems, then fitting one estimator per problem.", "This section covers two modules: sklearn.multiclass and sklearn.multioutput. The chart below demonstrates the problem types that each module is responsible for, and the corresponding meta-estimators that each module provides.", "The table below provides a quick reference on the differences between problem types. More detailed explanations can be found in subsequent sections of this guide.", "Number of targets", "Target cardinality", "Valid type_of_target", "Multiclass classification", "1", ">2", "\u2018multiclass\u2019", "Multilabel classification", ">1", "2 (0 or 1)", "\u2018multilabel-indicator\u2019", "Multiclass-multioutput classification", ">1", ">2", "\u2018multiclass-multioutput\u2019", "Multioutput regression", ">1", "Continuous", "\u2018continuous-multioutput\u2019", "Below is a summary of scikit-learn estimators that have multi-learning support built-in, grouped by strategy. You don\u2019t need the meta-estimators provided by this section if you\u2019re using one of these estimators. However, meta-estimators can provide additional strategies beyond what is built-in:", "Inherently multiclass:", "Multiclass as One-Vs-One:", "Multiclass as One-Vs-The-Rest:", "Support multilabel:", "Support multiclass-multioutput:", "Warning", "All classifiers in scikit-learn do multiclass classification out-of-the-box. You don\u2019t need to use the sklearn.multiclass module unless you want to experiment with different multiclass strategies.", "Multiclass classification is a classification task with more than two classes. Each sample can only be labeled as one class.", "For example, classification using features extracted from a set of images of fruit, where each image may either be of an orange, an apple, or a pear. Each image is one sample and is labeled as one of the 3 possible classes. Multiclass classification makes the assumption that each sample is assigned to one and only one label - one sample cannot, for example, be both a pear and an apple.", "While all scikit-learn classifiers are capable of multiclass classification, the meta-estimators offered by sklearn.multiclass permit changing the way they handle more than two classes because this may have an effect on classifier performance (either in terms of generalization error or required computational resources).", "Valid multiclass representations for type_of_target (y) are:", "1d or column vector containing more than two discrete values. An example of a vector y for 4 samples:", "Dense or sparse binary matrix of shape (n_samples, n_classes) with a single sample per row, where each column represents one class. An example of both a dense and sparse binary matrix y for 4 samples, where the columns, in order, are apple, orange, and pear:", "For more information about LabelBinarizer, refer to Transforming the prediction target (y).", "The one-vs-rest strategy, also known as one-vs-all, is implemented in OneVsRestClassifier. The strategy consists in fitting one classifier per class. For each classifier, the class is fitted against all the other classes. In addition to its computational efficiency (only n_classes classifiers are needed), one advantage of this approach is its interpretability. Since each class is represented by one and only one classifier, it is possible to gain knowledge about the class by inspecting its corresponding classifier. This is the most commonly used strategy and is a fair default choice.", "Below is an example of multiclass learning using OvR:", "OneVsRestClassifier also supports multilabel classification. To use this feature, feed the classifier an indicator matrix, in which cell [i, j] indicates the presence of label j in sample i.", "Examples:", "OneVsOneClassifier constructs one classifier per pair of classes. At prediction time, the class which received the most votes is selected. In the event of a tie (among two classes with an equal number of votes), it selects the class with the highest aggregate classification confidence by summing over the pair-wise classification confidence levels computed by the underlying binary classifiers.", "Since it requires to fit n_classes * (n_classes - 1) / 2 classifiers, this method is usually slower than one-vs-the-rest, due to its O(n_classes^2) complexity. However, this method may be advantageous for algorithms such as kernel algorithms which don\u2019t scale well with n_samples. This is because each individual learning problem only involves a small subset of the data whereas, with one-vs-the-rest, the complete dataset is used n_classes times. The decision function is the result of a monotonic transformation of the one-versus-one classification.", "Below is an example of multiclass learning using OvO:", "References:", "Error-Correcting Output Code-based strategies are fairly different from one-vs-the-rest and one-vs-one. With these strategies, each class is represented in a Euclidean space, where each dimension can only be 0 or 1. Another way to put it is that each class is represented by a binary code (an array of 0 and 1). The matrix which keeps track of the location/code of each class is called the code book. The code size is the dimensionality of the aforementioned space. Intuitively, each class should be represented by a code as unique as possible and a good code book should be designed to optimize classification accuracy. In this implementation, we simply use a randomly-generated code book as advocated in 3 although more elaborate methods may be added in the future.", "At fitting time, one binary classifier per bit in the code book is fitted. At prediction time, the classifiers are used to project new points in the class space and the class closest to the points is chosen.", "In OutputCodeClassifier, the code_size attribute allows the user to control the number of classifiers which will be used. It is a percentage of the total number of classes.", "A number between 0 and 1 will require fewer classifiers than one-vs-the-rest. In theory, log2(n_classes) / n_classes is sufficient to represent each class unambiguously. However, in practice, it may not lead to good accuracy since log2(n_classes) is much smaller than n_classes.", "A number greater than 1 will require more classifiers than one-vs-the-rest. In this case, some classifiers will in theory correct for the mistakes made by other classifiers, hence the name \u201cerror-correcting\u201d. In practice, however, this may not happen as classifier mistakes will typically be correlated. The error-correcting output codes have a similar effect to bagging.", "Below is an example of multiclass learning using Output-Codes:", "References:", "\u201cThe error coding method and PICTs\u201d, James G., Hastie T., Journal of Computational and Graphical statistics 7, 1998.", "Multilabel classification (closely related to multioutput classification) is a classification task labeling each sample with m labels from n_classes possible classes, where m can be 0 to n_classes inclusive. This can be thought of as predicting properties of a sample that are not mutually exclusive. Formally, a binary output is assigned to each class, for every sample. Positive classes are indicated with 1 and negative classes with 0 or -1. It is thus comparable to running n_classes binary classification tasks, for example with MultiOutputClassifier. This approach treats each label independently whereas multilabel classifiers may treat the multiple classes simultaneously, accounting for correlated behavior among them.", "For example, prediction of the topics relevant to a text document or video. The document or video may be about one of \u2018religion\u2019, \u2018politics\u2019, \u2018finance\u2019 or \u2018education\u2019, several of the topic classes or all of the topic classes.", "A valid representation of multilabel y is an either dense or sparse binary matrix of shape (n_samples, n_classes). Each column represents a class. The 1\u2019s in each row denote the positive classes a sample has been labeled with. An example of a dense matrix y for 3 samples:", "Dense binary matrices can also be created using MultiLabelBinarizer. For more information, refer to Transforming the prediction target (y).", "An example of the same y in sparse matrix form:", "Multilabel classification support can be added to any classifier with MultiOutputClassifier. This strategy consists of fitting one classifier per target. This allows multiple target variable classifications. The purpose of this class is to extend estimators to be able to estimate a series of target functions (f1,f2,f3\u2026,fn) that are trained on a single X predictor matrix to predict a series of responses (y1,y2,y3\u2026,yn).", "Below is an example of multilabel classification:", "Classifier chains (see ClassifierChain) are a way of combining a number of binary classifiers into a single multi-label model that is capable of exploiting correlations among targets.", "For a multi-label classification problem with N classes, N binary classifiers are assigned an integer between 0 and N-1. These integers define the order of models in the chain. Each classifier is then fit on the available training data plus the true labels of the classes whose models were assigned a lower number.", "When predicting, the true labels will not be available. Instead the predictions of each model are passed on to the subsequent models in the chain to be used as features.", "Clearly the order of the chain is important. The first model in the chain has no information about the other labels while the last model in the chain has features indicating the presence of all of the other labels. In general one does not know the optimal ordering of the models in the chain so typically many randomly ordered chains are fit and their predictions are averaged together.", "References:", "\u201cClassifier Chains for Multi-label Classification\u201d, 2009.", "Multiclass-multioutput classification (also known as multitask classification) is a classification task which labels each sample with a set of non-binary properties. Both the number of properties and the number of classes per property is greater than 2. A single estimator thus handles several joint classification tasks. This is both a generalization of the multilabel classification task, which only considers binary attributes, as well as a generalization of the multiclass classification task, where only one property is considered.", "For example, classification of the properties \u201ctype of fruit\u201d and \u201ccolour\u201d for a set of images of fruit. The property \u201ctype of fruit\u201d has the possible classes: \u201capple\u201d, \u201cpear\u201d and \u201corange\u201d. The property \u201ccolour\u201d has the possible classes: \u201cgreen\u201d, \u201cred\u201d, \u201cyellow\u201d and \u201corange\u201d. Each sample is an image of a fruit, a label is output for both properties and each label is one of the possible classes of the corresponding property.", "Note that all classifiers handling multiclass-multioutput (also known as multitask classification) tasks, support the multilabel classification task as a special case. Multitask classification is similar to the multioutput classification task with different model formulations. For more information, see the relevant estimator documentation.", "Warning", "At present, no metric in sklearn.metrics supports the multiclass-multioutput classification task.", "A valid representation of multioutput y is a dense matrix of shape (n_samples, n_classes) of class labels. A column wise concatenation of 1d multiclass variables. An example of y for 3 samples:", "Multioutput regression predicts multiple numerical properties for each sample. Each property is a numerical variable and the number of properties to be predicted for each sample is greater than or equal to 2. Some estimators that support multioutput regression are faster than just running n_output estimators.", "For example, prediction of both wind speed and wind direction, in degrees, using data obtained at a certain location. Each sample would be data obtained at one location and both wind speed and direction would be output for each sample.", "A valid representation of multioutput y is a dense matrix of shape (n_samples, n_classes) of floats. A column wise concatenation of continuous variables. An example of y for 3 samples:", "Multioutput regression support can be added to any regressor with MultiOutputRegressor. This strategy consists of fitting one regressor per target. Since each target is represented by exactly one regressor it is possible to gain knowledge about the target by inspecting its corresponding regressor. As MultiOutputRegressor fits one regressor per target it can not take advantage of correlations between targets.", "Below is an example of multioutput regression:", "Regressor chains (see RegressorChain) is analogous to ClassifierChain as a way of combining a number of regressions into a single multi-target model that is capable of exploiting correlations among targets."]}, {"name": "1.13. Feature selection", "path": "modules/feature_selection", "type": "Guide", "text": ["The classes in the sklearn.feature_selection module can be used for feature selection/dimensionality reduction on sample sets, either to improve estimators\u2019 accuracy scores or to boost their performance on very high-dimensional datasets.", "VarianceThreshold is a simple baseline approach to feature selection. It removes all features whose variance doesn\u2019t meet some threshold. By default, it removes all zero-variance features, i.e. features that have the same value in all samples.", "As an example, suppose that we have a dataset with boolean features, and we want to remove all features that are either one or zero (on or off) in more than 80% of the samples. Boolean features are Bernoulli random variables, and the variance of such variables is given by", "so we can select using the threshold .8 * (1 - .8):", "As expected, VarianceThreshold has removed the first column, which has a probability \\(p = 5/6 > .8\\) of containing a zero.", "Univariate feature selection works by selecting the best features based on univariate statistical tests. It can be seen as a preprocessing step to an estimator. Scikit-learn exposes feature selection routines as objects that implement the transform method:", "For instance, we can perform a \\(\\chi^2\\) test to the samples to retrieve only the two best features as follows:", "These objects take as input a scoring function that returns univariate scores and p-values (or only scores for SelectKBest and SelectPercentile):", "The methods based on F-test estimate the degree of linear dependency between two random variables. On the other hand, mutual information methods can capture any kind of statistical dependency, but being nonparametric, they require more samples for accurate estimation.", "Feature selection with sparse data", "If you use sparse data (i.e. data represented as sparse matrices), chi2, mutual_info_regression, mutual_info_classif will deal with the data without making it dense.", "Warning", "Beware not to use a regression scoring function with a classification problem, you will get useless results.", "Examples:", "Given an external estimator that assigns weights to features (e.g., the coefficients of a linear model), the goal of recursive feature elimination (RFE) is to select features by recursively considering smaller and smaller sets of features. First, the estimator is trained on the initial set of features and the importance of each feature is obtained either through any specific attribute (such as coef_, feature_importances_) or callable. Then, the least important features are pruned from current set of features. That procedure is recursively repeated on the pruned set until the desired number of features to select is eventually reached.", "RFECV performs RFE in a cross-validation loop to find the optimal number of features.", "Examples:", "SelectFromModel is a meta-transformer that can be used along with any estimator that importance of each feature through a specific attribute (such as coef_, feature_importances_) or callable after fitting. The features are considered unimportant and removed, if the corresponding importance of the feature values are below the provided threshold parameter. Apart from specifying the threshold numerically, there are built-in heuristics for finding a threshold using a string argument. Available heuristics are \u201cmean\u201d, \u201cmedian\u201d and float multiples of these like \u201c0.1*mean\u201d. In combination with the threshold criteria, one can use the max_features parameter to set a limit on the number of features to select.", "For examples on how it is to be used refer to the sections below.", "Examples", "Linear models penalized with the L1 norm have sparse solutions: many of their estimated coefficients are zero. When the goal is to reduce the dimensionality of the data to use with another classifier, they can be used along with SelectFromModel to select the non-zero coefficients. In particular, sparse estimators useful for this purpose are the Lasso for regression, and of LogisticRegression and LinearSVC for classification:", "With SVMs and logistic-regression, the parameter C controls the sparsity: the smaller C the fewer features selected. With Lasso, the higher the alpha parameter, the fewer features selected.", "Examples:", "L1-recovery and compressive sensing", "For a good choice of alpha, the Lasso can fully recover the exact set of non-zero variables using only few observations, provided certain specific conditions are met. In particular, the number of samples should be \u201csufficiently large\u201d, or L1 models will perform at random, where \u201csufficiently large\u201d depends on the number of non-zero coefficients, the logarithm of the number of features, the amount of noise, the smallest absolute value of non-zero coefficients, and the structure of the design matrix X. In addition, the design matrix must display certain specific properties, such as not being too correlated.", "There is no general rule to select an alpha parameter for recovery of non-zero coefficients. It can by set by cross-validation (LassoCV or LassoLarsCV), though this may lead to under-penalized models: including a small number of non-relevant variables is not detrimental to prediction score. BIC (LassoLarsIC) tends, on the opposite, to set high values of alpha.", "Reference Richard G. Baraniuk \u201cCompressive Sensing\u201d, IEEE Signal Processing Magazine [120] July 2007 http://users.isr.ist.utl.pt/~aguiar/CS_notes.pdf", "Tree-based estimators (see the sklearn.tree module and forest of trees in the sklearn.ensemble module) can be used to compute impurity-based feature importances, which in turn can be used to discard irrelevant features (when coupled with the SelectFromModel meta-transformer):", "Examples:", "Sequential Feature Selection [sfs] (SFS) is available in the SequentialFeatureSelector transformer. SFS can be either forward or backward:", "Forward-SFS is a greedy procedure that iteratively finds the best new feature to add to the set of selected features. Concretely, we initially start with zero feature and find the one feature that maximizes a cross-validated score when an estimator is trained on this single feature. Once that first feature is selected, we repeat the procedure by adding a new feature to the set of selected features. The procedure stops when the desired number of selected features is reached, as determined by the n_features_to_select parameter.", "Backward-SFS follows the same idea but works in the opposite direction: instead of starting with no feature and greedily adding features, we start with all the features and greedily remove features from the set. The direction parameter controls whether forward or backward SFS is used.", "In general, forward and backward selection do not yield equivalent results. Also, one may be much faster than the other depending on the requested number of selected features: if we have 10 features and ask for 7 selected features, forward selection would need to perform 7 iterations while backward selection would only need to perform 3.", "SFS differs from RFE and SelectFromModel in that it does not require the underlying model to expose a coef_ or feature_importances_ attribute. It may however be slower considering that more models need to be evaluated, compared to the other approaches. For example in backward selection, the iteration going from m features to m - 1 features using k-fold cross-validation requires fitting m * k models, while RFE would require only a single fit, and SelectFromModel always just does a single fit and requires no iterations.", "Examples", "References:", "Ferri et al, Comparative study of techniques for large-scale feature selection.", "Feature selection is usually used as a pre-processing step before doing the actual learning. The recommended way to do this in scikit-learn is to use a Pipeline:", "In this snippet we make use of a LinearSVC coupled with SelectFromModel to evaluate feature importances and select the most relevant features. Then, a RandomForestClassifier is trained on the transformed output, i.e. using only relevant features. You can perform similar operations with the other feature selection methods and also classifiers that provide a way to evaluate feature importances of course. See the Pipeline examples for more details."]}, {"name": "1.14. Semi-supervised learning", "path": "modules/semi_supervised", "type": "Guide", "text": ["Semi-supervised learning is a situation in which in your training data some of the samples are not labeled. The semi-supervised estimators in sklearn.semi_supervised are able to make use of this additional unlabeled data to better capture the shape of the underlying data distribution and generalize better to new samples. These algorithms can perform well when we have a very small amount of labeled points and a large amount of unlabeled points.", "Unlabeled entries in y", "It is important to assign an identifier to unlabeled points along with the labeled data when training the model with the fit method. The identifier that this implementation uses is the integer value \\(-1\\). Note that for string labels, the dtype of y should be object so that it can contain both strings and integers.", "Note", "Semi-supervised algorithms need to make assumptions about the distribution of the dataset in order to achieve performance gains. See here for more details.", "This self-training implementation is based on Yarowsky\u2019s 1 algorithm. Using this algorithm, a given supervised classifier can function as a semi-supervised classifier, allowing it to learn from unlabeled data.", "SelfTrainingClassifier can be called with any classifier that implements predict_proba, passed as the parameter base_classifier. In each iteration, the base_classifier predicts labels for the unlabeled samples and adds a subset of these labels to the labeled dataset.", "The choice of this subset is determined by the selection criterion. This selection can be done using a threshold on the prediction probabilities, or by choosing the k_best samples according to the prediction probabilities.", "The labels used for the final fit as well as the iteration in which each sample was labeled are available as attributes. The optional max_iter parameter specifies how many times the loop is executed at most.", "The max_iter parameter may be set to None, causing the algorithm to iterate until all samples have labels or no new samples are selected in that iteration.", "Note", "When using the self-training classifier, the calibration of the classifier is important.", "Examples", "References", "David Yarowsky. 1995. Unsupervised word sense disambiguation rivaling supervised methods. In Proceedings of the 33rd annual meeting on Association for Computational Linguistics (ACL \u201895). Association for Computational Linguistics, Stroudsburg, PA, USA, 189-196. DOI: https://doi.org/10.3115/981658.981684", "Label propagation denotes a few variations of semi-supervised graph inference algorithms.", "scikit-learn provides two label propagation models: LabelPropagation and LabelSpreading. Both work by constructing a similarity graph over all items in the input dataset.", "An illustration of label-propagation: the structure of unlabeled observations is consistent with the class structure, and thus the class label can be propagated to the unlabeled observations of the training set.", "LabelPropagation and LabelSpreading differ in modifications to the similarity matrix that graph and the clamping effect on the label distributions. Clamping allows the algorithm to change the weight of the true ground labeled data to some degree. The LabelPropagation algorithm performs hard clamping of input labels, which means \\(\\alpha=0\\). This clamping factor can be relaxed, to say \\(\\alpha=0.2\\), which means that we will always retain 80 percent of our original label distribution, but the algorithm gets to change its confidence of the distribution within 20 percent.", "LabelPropagation uses the raw similarity matrix constructed from the data with no modifications. In contrast, LabelSpreading minimizes a loss function that has regularization properties, as such it is often more robust to noise. The algorithm iterates on a modified version of the original graph and normalizes the edge weights by computing the normalized graph Laplacian matrix. This procedure is also used in Spectral clustering.", "Label propagation models have two built-in kernel methods. Choice of kernel effects both scalability and performance of the algorithms. The following are available:", "The RBF kernel will produce a fully connected graph which is represented in memory by a dense matrix. This matrix may be very large and combined with the cost of performing a full matrix multiplication calculation for each iteration of the algorithm can lead to prohibitively long running times. On the other hand, the KNN kernel will produce a much more memory-friendly sparse matrix which can drastically reduce running times.", "Examples", "References", "[2] Yoshua Bengio, Olivier Delalleau, Nicolas Le Roux. In Semi-Supervised Learning (2006), pp. 193-216", "[3] Olivier Delalleau, Yoshua Bengio, Nicolas Le Roux. Efficient Non-Parametric Function Induction in Semi-Supervised Learning. AISTAT 2005 https://research.microsoft.com/en-us/people/nicolasl/efficient_ssl.pdf"]}, {"name": "1.15. Isotonic regression", "path": "modules/isotonic", "type": "Guide", "text": ["The class IsotonicRegression fits a non-decreasing real function to 1-dimensional data. It solves the following problem:", "minimize \\(\\sum_i w_i (y_i - \\hat{y}_i)^2\\)", "subject to \\(\\hat{y}_i \\le \\hat{y}_j\\) whenever \\(X_i \\le X_j\\),", "where the weights \\(w_i\\) are strictly positive, and both X and y are arbitrary real quantities.", "The increasing parameter changes the constraint to \\(\\hat{y}_i \\ge \\hat{y}_j\\) whenever \\(X_i \\le X_j\\). Setting it to \u2018auto\u2019 will automatically choose the constraint based on Spearman\u2019s rank correlation coefficient.", "IsotonicRegression produces a series of predictions \\(\\hat{y}_i\\) for the training data which are the closest to the targets \\(y\\) in terms of mean squared error. These predictions are interpolated for predicting to unseen data. The predictions of IsotonicRegression thus form a function that is piecewise linear:"]}, {"name": "1.16. Probability calibration", "path": "modules/calibration", "type": "Guide", "text": ["When performing classification you often want not only to predict the class label, but also obtain a probability of the respective label. This probability gives you some kind of confidence on the prediction. Some models can give you poor estimates of the class probabilities and some even do not support probability prediction (e.g., some instances of SGDClassifier). The calibration module allows you to better calibrate the probabilities of a given model, or to add support for probability prediction.", "Well calibrated classifiers are probabilistic classifiers for which the output of the predict_proba method can be directly interpreted as a confidence level. For instance, a well calibrated (binary) classifier should classify the samples such that among the samples to which it gave a predict_proba value close to 0.8, approximately 80% actually belong to the positive class.", "The following plot compares how well the probabilistic predictions of different classifiers are calibrated, using calibration_curve. The x axis represents the average predicted probability in each bin. The y axis is the fraction of positives, i.e. the proportion of samples whose class is the positive class (in each bin).", "LogisticRegression returns well calibrated predictions by default as it directly optimizes Log loss. In contrast, the other methods return biased probabilities; with different biases per method:", "GaussianNB tends to push probabilities to 0 or 1 (note the counts in the histograms). This is mainly because it makes the assumption that features are conditionally independent given the class, which is not the case in this dataset which contains 2 redundant features.", "RandomForestClassifier shows the opposite behavior: the histograms show peaks at approximately 0.2 and 0.9 probability, while probabilities close to 0 or 1 are very rare. An explanation for this is given by Niculescu-Mizil and Caruana 1: \u201cMethods such as bagging and random forests that average predictions from a base set of models can have difficulty making predictions near 0 and 1 because variance in the underlying base models will bias predictions that should be near zero or one away from these values. Because predictions are restricted to the interval [0,1], errors caused by variance tend to be one-sided near zero and one. For example, if a model should predict p = 0 for a case, the only way bagging can achieve this is if all bagged trees predict zero. If we add noise to the trees that bagging is averaging over, this noise will cause some trees to predict values larger than 0 for this case, thus moving the average prediction of the bagged ensemble away from 0. We observe this effect most strongly with random forests because the base-level trees trained with random forests have relatively high variance due to feature subsetting.\u201d As a result, the calibration curve also referred to as the reliability diagram (Wilks 1995 2) shows a characteristic sigmoid shape, indicating that the classifier could trust its \u201cintuition\u201d more and return probabilities closer to 0 or 1 typically.", "Linear Support Vector Classification (LinearSVC) shows an even more sigmoid curve than RandomForestClassifier, which is typical for maximum-margin methods (compare Niculescu-Mizil and Caruana 1), which focus on difficult to classify samples that are close to the decision boundary (the support vectors).", "Calibrating a classifier consists of fitting a regressor (called a calibrator) that maps the output of the classifier (as given by decision_function or predict_proba) to a calibrated probability in [0, 1]. Denoting the output of the classifier for a given sample by \\(f_i\\), the calibrator tries to predict \\(p(y_i = 1 | f_i)\\).", "The samples that are used to fit the calibrator should not be the same samples used to fit the classifier, as this would introduce bias. This is because performance of the classifier on its training data would be better than for novel data. Using the classifier output of training data to fit the calibrator would thus result in a biased calibrator that maps to probabilities closer to 0 and 1 than it should.", "The CalibratedClassifierCV class is used to calibrate a classifier.", "CalibratedClassifierCV uses a cross-validation approach to ensure unbiased data is always used to fit the calibrator. The data is split into k (train_set, test_set) couples (as determined by cv). When ensemble=True (default), the following procedure is repeated independently for each cross-validation split: a clone of base_estimator is first trained on the train subset. Then its predictions on the test subset are used to fit a calibrator (either a sigmoid or isotonic regressor). This results in an ensemble of k (classifier, calibrator) couples where each calibrator maps the output of its corresponding classifier into [0, 1]. Each couple is exposed in the calibrated_classifiers_ attribute, where each entry is a calibrated classifier with a predict_proba method that outputs calibrated probabilities. The output of predict_proba for the main CalibratedClassifierCV instance corresponds to the average of the predicted probabilities of the k estimators in the calibrated_classifiers_ list. The output of predict is the class that has the highest probability.", "When ensemble=False, cross-validation is used to obtain \u2018unbiased\u2019 predictions for all the data, via cross_val_predict. These unbiased predictions are then used to train the calibrator. The attribute calibrated_classifiers_ consists of only one (classifier, calibrator) couple where the classifier is the base_estimator trained on all the data. In this case the output of predict_proba for CalibratedClassifierCV is the predicted probabilities obtained from the single (classifier, calibrator) couple.", "The main advantage of ensemble=True is to benefit from the traditional ensembling effect (similar to Bagging meta-estimator). The resulting ensemble should both be well calibrated and slightly more accurate than with ensemble=False. The main advantage of using ensemble=False is computational: it reduces the overall fit time by training only a single base classifier and calibrator pair, decreases the final model size and increases prediction speed.", "Alternatively an already fitted classifier can be calibrated by setting cv=\"prefit\". In this case, the data is not split and all of it is used to fit the regressor. It is up to the user to make sure that the data used for fitting the classifier is disjoint from the data used for fitting the regressor.", "sklearn.metrics.brier_score_loss may be used to assess how well a classifier is calibrated. However, this metric should be used with care because a lower Brier score does not always mean a better calibrated model. This is because the Brier score metric is a combination of calibration loss and refinement loss. Calibration loss is defined as the mean squared deviation from empirical probabilities derived from the slope of ROC segments. Refinement loss can be defined as the expected optimal loss as measured by the area under the optimal cost curve. As refinement loss can change independently from calibration loss, a lower Brier score does not necessarily mean a better calibrated model.", "CalibratedClassifierCV supports the use of two \u2018calibration\u2019 regressors: \u2018sigmoid\u2019 and \u2018isotonic\u2019.", "The sigmoid regressor is based on Platt\u2019s logistic model 3:", "where \\(y_i\\) is the true label of sample \\(i\\) and \\(f_i\\) is the output of the un-calibrated classifier for sample \\(i\\). \\(A\\) and \\(B\\) are real numbers to be determined when fitting the regressor via maximum likelihood.", "The sigmoid method assumes the calibration curve can be corrected by applying a sigmoid function to the raw predictions. This assumption has been empirically justified in the case of Support Vector Machines with common kernel functions on various benchmark datasets in section 2.1 of Platt 1999 3 but does not necessarily hold in general. Additionally, the logistic model works best if the calibration error is symmetrical, meaning the classifier output for each binary class is normally distributed with the same variance 6. This is can be a problem for highly imbalanced classification problems, where outputs do not have equal variance.", "In general this method is most effective when the un-calibrated model is under-confident and has similar calibration errors for both high and low outputs.", "The \u2018isotonic\u2019 method fits a non-parametric isotonic regressor, which outputs a step-wise non-decreasing function (see sklearn.isotonic). It minimizes:", "subject to \\(\\hat{f}_i >= \\hat{f}_j\\) whenever \\(f_i >= f_j\\). \\(y_i\\) is the true label of sample \\(i\\) and \\(\\hat{f}_i\\) is the output of the calibrated classifier for sample \\(i\\) (i.e., the calibrated probability). This method is more general when compared to \u2018sigmoid\u2019 as the only restriction is that the mapping function is monotonically increasing. It is thus more powerful as it can correct any monotonic distortion of the un-calibrated model. However, it is more prone to overfitting, especially on small datasets 5.", "Overall, \u2018isotonic\u2019 will perform as well as or better than \u2018sigmoid\u2019 when there is enough data (greater than ~ 1000 samples) to avoid overfitting 1.", "Both isotonic and sigmoid regressors only support 1-dimensional data (e.g., binary classification output) but are extended for multiclass classification if the base_estimator supports multiclass predictions. For multiclass predictions, CalibratedClassifierCV calibrates for each class separately in a OneVsRestClassifier fashion 4. When predicting probabilities, the calibrated probabilities for each class are predicted separately. As those probabilities do not necessarily sum to one, a postprocessing is performed to normalize them.", "Examples:", "References:", "Predicting Good Probabilities with Supervised Learning, A. Niculescu-Mizil & R. Caruana, ICML 2005", "On the combination of forecast probabilities for consecutive precipitation periods. Wea. Forecasting, 5, 640\u2013650., Wilks, D. S., 1990a", "Probabilistic Outputs for Support Vector Machines and Comparisons to Regularized Likelihood Methods. J. Platt, (1999)", "Transforming Classifier Scores into Accurate Multiclass Probability Estimates. B. Zadrozny & C. Elkan, (KDD 2002)", "Predicting accurate probabilities with a ranking loss. Menon AK, Jiang XJ, Vembu S, Elkan C, Ohno-Machado L. Proc Int Conf Mach Learn. 2012;2012:703-710", "Beyond sigmoids: How to obtain well-calibrated probabilities from binary classifiers with beta calibration Kull, M., Silva Filho, T. M., & Flach, P. (2017)."]}, {"name": "1.17. Neural network models", "path": "modules/neural_networks_supervised", "type": "Guide", "text": ["Warning", "This implementation is not intended for large-scale applications. In particular, scikit-learn offers no GPU support. For much faster, GPU-based implementations, as well as frameworks offering much more flexibility to build deep learning architectures, see Related Projects.", "Multi-layer Perceptron (MLP) is a supervised learning algorithm that learns a function \\(f(\\cdot): R^m \\rightarrow R^o\\) by training on a dataset, where \\(m\\) is the number of dimensions for input and \\(o\\) is the number of dimensions for output. Given a set of features \\(X = {x_1, x_2, ..., x_m}\\) and a target \\(y\\), it can learn a non-linear function approximator for either classification or regression. It is different from logistic regression, in that between the input and the output layer, there can be one or more non-linear layers, called hidden layers. Figure 1 shows a one hidden layer MLP with scalar output.", "Figure 1 : One hidden layer MLP.", "The leftmost layer, known as the input layer, consists of a set of neurons \\(\\{x_i | x_1, x_2, ..., x_m\\}\\) representing the input features. Each neuron in the hidden layer transforms the values from the previous layer with a weighted linear summation \\(w_1x_1 + w_2x_2 + ... + w_mx_m\\), followed by a non-linear activation function \\(g(\\cdot):R \\rightarrow R\\) - like the hyperbolic tan function. The output layer receives the values from the last hidden layer and transforms them into output values.", "The module contains the public attributes coefs_ and intercepts_. coefs_ is a list of weight matrices, where weight matrix at index \\(i\\) represents the weights between layer \\(i\\) and layer \\(i+1\\). intercepts_ is a list of bias vectors, where the vector at index \\(i\\) represents the bias values added to layer \\(i+1\\).", "The advantages of Multi-layer Perceptron are:", "The disadvantages of Multi-layer Perceptron (MLP) include:", "Please see Tips on Practical Use section that addresses some of these disadvantages.", "Class MLPClassifier implements a multi-layer perceptron (MLP) algorithm that trains using Backpropagation.", "MLP trains on two arrays: array X of size (n_samples, n_features), which holds the training samples represented as floating point feature vectors; and array y of size (n_samples,), which holds the target values (class labels) for the training samples:", "After fitting (training), the model can predict labels for new samples:", "MLP can fit a non-linear model to the training data. clf.coefs_ contains the weight matrices that constitute the model parameters:", "Currently, MLPClassifier supports only the Cross-Entropy loss function, which allows probability estimates by running the predict_proba method.", "MLP trains using Backpropagation. More precisely, it trains using some form of gradient descent and the gradients are calculated using Backpropagation. For classification, it minimizes the Cross-Entropy loss function, giving a vector of probability estimates \\(P(y|x)\\) per sample \\(x\\):", "MLPClassifier supports multi-class classification by applying Softmax as the output function.", "Further, the model supports multi-label classification in which a sample can belong to more than one class. For each class, the raw output passes through the logistic function. Values larger or equal to 0.5 are rounded to 1, otherwise to 0. For a predicted output of a sample, the indices where the value is 1 represents the assigned classes of that sample:", "See the examples below and the docstring of MLPClassifier.fit for further information.", "Examples:", "Class MLPRegressor implements a multi-layer perceptron (MLP) that trains using backpropagation with no activation function in the output layer, which can also be seen as using the identity function as activation function. Therefore, it uses the square error as the loss function, and the output is a set of continuous values.", "MLPRegressor also supports multi-output regression, in which a sample can have more than one target.", "Both MLPRegressor and MLPClassifier use parameter alpha for regularization (L2 regularization) term which helps in avoiding overfitting by penalizing weights with large magnitudes. Following plot displays varying decision function with value of alpha.", "See the examples below for further information.", "Examples:", "MLP trains using Stochastic Gradient Descent, Adam, or L-BFGS. Stochastic Gradient Descent (SGD) updates parameters using the gradient of the loss function with respect to a parameter that needs adaptation, i.e.", "where \\(\\eta\\) is the learning rate which controls the step-size in the parameter space search. \\(Loss\\) is the loss function used for the network.", "More details can be found in the documentation of SGD", "Adam is similar to SGD in a sense that it is a stochastic optimizer, but it can automatically adjust the amount to update parameters based on adaptive estimates of lower-order moments.", "With SGD or Adam, training supports online and mini-batch learning.", "L-BFGS is a solver that approximates the Hessian matrix which represents the second-order partial derivative of a function. Further it approximates the inverse of the Hessian matrix to perform parameter updates. The implementation uses the Scipy version of L-BFGS.", "If the selected solver is \u2018L-BFGS\u2019, training does not support online nor mini-batch learning.", "Suppose there are \\(n\\) training samples, \\(m\\) features, \\(k\\) hidden layers, each containing \\(h\\) neurons - for simplicity, and \\(o\\) output neurons. The time complexity of backpropagation is \\(O(n\\cdot m \\cdot h^k \\cdot o \\cdot i)\\), where \\(i\\) is the number of iterations. Since backpropagation has a high time complexity, it is advisable to start with smaller number of hidden neurons and few hidden layers for training.", "Given a set of training examples \\((x_1, y_1), (x_2, y_2), \\ldots, (x_n, y_n)\\) where \\(x_i \\in \\mathbf{R}^n\\) and \\(y_i \\in \\{0, 1\\}\\), a one hidden layer one hidden neuron MLP learns the function \\(f(x) = W_2 g(W_1^T x + b_1) + b_2\\) where \\(W_1 \\in \\mathbf{R}^m\\) and \\(W_2, b_1, b_2 \\in \\mathbf{R}\\) are model parameters. \\(W_1, W_2\\) represent the weights of the input layer and hidden layer, respectively; and \\(b_1, b_2\\) represent the bias added to the hidden layer and the output layer, respectively. \\(g(\\cdot) : R \\rightarrow R\\) is the activation function, set by default as the hyperbolic tan. It is given as,", "For binary classification, \\(f(x)\\) passes through the logistic function \\(g(z)=1/(1+e^{-z})\\) to obtain output values between zero and one. A threshold, set to 0.5, would assign samples of outputs larger or equal 0.5 to the positive class, and the rest to the negative class.", "If there are more than two classes, \\(f(x)\\) itself would be a vector of size (n_classes,). Instead of passing through logistic function, it passes through the softmax function, which is written as,", "where \\(z_i\\) represents the \\(i\\) th element of the input to softmax, which corresponds to class \\(i\\), and \\(K\\) is the number of classes. The result is a vector containing the probabilities that sample \\(x\\) belong to each class. The output is the class with the highest probability.", "In regression, the output remains as \\(f(x)\\); therefore, output activation function is just the identity function.", "MLP uses different loss functions depending on the problem type. The loss function for classification is Cross-Entropy, which in binary case is given as,", "where \\(\\alpha ||W||_2^2\\) is an L2-regularization term (aka penalty) that penalizes complex models; and \\(\\alpha > 0\\) is a non-negative hyperparameter that controls the magnitude of the penalty.", "For regression, MLP uses the Square Error loss function; written as,", "Starting from initial random weights, multi-layer perceptron (MLP) minimizes the loss function by repeatedly updating these weights. After computing the loss, a backward pass propagates it from the output layer to the previous layers, providing each weight parameter with an update value meant to decrease the loss.", "In gradient descent, the gradient \\(\\nabla Loss_{W}\\) of the loss with respect to the weights is computed and deducted from \\(W\\). More formally, this is expressed as,", "where \\(i\\) is the iteration step, and \\(\\epsilon\\) is the learning rate with a value larger than 0.", "The algorithm stops when it reaches a preset maximum number of iterations; or when the improvement in loss is below a certain, small number.", "Multi-layer Perceptron is sensitive to feature scaling, so it is highly recommended to scale your data. For example, scale each attribute on the input vector X to [0, 1] or [-1, +1], or standardize it to have mean 0 and variance 1. Note that you must apply the same scaling to the test set for meaningful results. You can use StandardScaler for standardization.", "An alternative and recommended approach is to use StandardScaler in a Pipeline", "If you want more control over stopping criteria or learning rate in SGD, or want to do additional monitoring, using warm_start=True and max_iter=1 and iterating yourself can be helpful:", "References:"]}, {"name": "2.1. Gaussian mixture models", "path": "modules/mixture", "type": "Guide", "text": ["sklearn.mixture is a package which enables one to learn Gaussian Mixture Models (diagonal, spherical, tied and full covariance matrices supported), sample them, and estimate them from data. Facilities to help determine the appropriate number of components are also provided.", "Two-component Gaussian mixture model: data points, and equi-probability surfaces of the model.", "A Gaussian mixture model is a probabilistic model that assumes all the data points are generated from a mixture of a finite number of Gaussian distributions with unknown parameters. One can think of mixture models as generalizing k-means clustering to incorporate information about the covariance structure of the data as well as the centers of the latent Gaussians.", "Scikit-learn implements different classes to estimate Gaussian mixture models, that correspond to different estimation strategies, detailed below.", "The GaussianMixture object implements the expectation-maximization (EM) algorithm for fitting mixture-of-Gaussian models. It can also draw confidence ellipsoids for multivariate models, and compute the Bayesian Information Criterion to assess the number of clusters in the data. A GaussianMixture.fit method is provided that learns a Gaussian Mixture Model from train data. Given test data, it can assign to each sample the Gaussian it mostly probably belong to using the GaussianMixture.predict method.", "The GaussianMixture comes with different options to constrain the covariance of the difference classes estimated: spherical, diagonal, tied or full covariance.", "Examples:", "It is the fastest algorithm for learning mixture models", "As this algorithm maximizes only the likelihood, it will not bias the means towards zero, or bias the cluster sizes to have specific structures that might or might not apply.", "When one has insufficiently many points per mixture, estimating the covariance matrices becomes difficult, and the algorithm is known to diverge and find solutions with infinite likelihood unless one regularizes the covariances artificially.", "This algorithm will always use all the components it has access to, needing held-out data or information theoretical criteria to decide how many components to use in the absence of external cues.", "The BIC criterion can be used to select the number of components in a Gaussian Mixture in an efficient way. In theory, it recovers the true number of components only in the asymptotic regime (i.e. if much data is available and assuming that the data was actually generated i.i.d. from a mixture of Gaussian distribution). Note that using a Variational Bayesian Gaussian mixture avoids the specification of the number of components for a Gaussian mixture model.", "Examples:", "The main difficulty in learning Gaussian mixture models from unlabeled data is that it is one usually doesn\u2019t know which points came from which latent component (if one has access to this information it gets very easy to fit a separate Gaussian distribution to each set of points). Expectation-maximization is a well-founded statistical algorithm to get around this problem by an iterative process. First one assumes random components (randomly centered on data points, learned from k-means, or even just normally distributed around the origin) and computes for each point a probability of being generated by each component of the model. Then, one tweaks the parameters to maximize the likelihood of the data given those assignments. Repeating this process is guaranteed to always converge to a local optimum.", "The BayesianGaussianMixture object implements a variant of the Gaussian mixture model with variational inference algorithms. The API is similar as the one defined by GaussianMixture.", "Variational inference is an extension of expectation-maximization that maximizes a lower bound on model evidence (including priors) instead of data likelihood. The principle behind variational methods is the same as expectation-maximization (that is both are iterative algorithms that alternate between finding the probabilities for each point to be generated by each mixture and fitting the mixture to these assigned points), but variational methods add regularization by integrating information from prior distributions. This avoids the singularities often found in expectation-maximization solutions but introduces some subtle biases to the model. Inference is often notably slower, but not usually as much so as to render usage unpractical.", "Due to its Bayesian nature, the variational algorithm needs more hyper- parameters than expectation-maximization, the most important of these being the concentration parameter weight_concentration_prior. Specifying a low value for the concentration prior will make the model put most of the weight on few components set the remaining components weights very close to zero. High values of the concentration prior will allow a larger number of components to be active in the mixture.", "The parameters implementation of the BayesianGaussianMixture class proposes two types of prior for the weights distribution: a finite mixture model with Dirichlet distribution and an infinite mixture model with the Dirichlet Process. In practice Dirichlet Process inference algorithm is approximated and uses a truncated distribution with a fixed maximum number of components (called the Stick-breaking representation). The number of components actually used almost always depends on the data.", "The next figure compares the results obtained for the different type of the weight concentration prior (parameter weight_concentration_prior_type) for different values of weight_concentration_prior. Here, we can see the value of the weight_concentration_prior parameter has a strong impact on the effective number of active components obtained. We can also notice that large values for the concentration weight prior lead to more uniform weights when the type of prior is \u2018dirichlet_distribution\u2019 while this is not necessarily the case for the \u2018dirichlet_process\u2019 type (used by default).", "  ", "The examples below compare Gaussian mixture models with a fixed number of components, to the variational Gaussian mixture models with a Dirichlet process prior. Here, a classical Gaussian mixture is fitted with 5 components on a dataset composed of 2 clusters. We can see that the variational Gaussian mixture with a Dirichlet process prior is able to limit itself to only 2 components whereas the Gaussian mixture fits the data with a fixed number of components that has to be set a priori by the user. In this case the user has selected n_components=5 which does not match the true generative distribution of this toy dataset. Note that with very little observations, the variational Gaussian mixture models with a Dirichlet process prior can take a conservative stand, and fit only one component.", "On the following figure we are fitting a dataset not well-depicted by a Gaussian mixture. Adjusting the weight_concentration_prior, parameter of the BayesianGaussianMixture controls the number of components used to fit this data. We also present on the last two plots a random sampling generated from the two resulting mixtures.", "Examples:", "when weight_concentration_prior is small enough and n_components is larger than what is found necessary by the model, the Variational Bayesian mixture model has a natural tendency to set some mixture weights values close to zero. This makes it possible to let the model choose a suitable number of effective components automatically. Only an upper bound of this number needs to be provided. Note however that the \u201cideal\u201d number of active components is very application specific and is typically ill-defined in a data exploration setting.", "unlike finite models, which will almost always use all components as much as they can, and hence will produce wildly different solutions for different numbers of components, the variational inference with a Dirichlet process prior (weight_concentration_prior_type='dirichlet_process') won\u2019t change much with changes to the parameters, leading to more stability and less tuning.", "due to the incorporation of prior information, variational solutions have less pathological special cases than expectation-maximization solutions.", "the extra parametrization necessary for variational inference make inference slower, although not by much.", "this algorithm needs an extra hyperparameter that might need experimental tuning via cross-validation.", "there are many implicit biases in the inference algorithms (and also in the Dirichlet process if used), and whenever there is a mismatch between these biases and the data it might be possible to fit better models using a finite mixture.", "Here we describe variational inference algorithms on Dirichlet process mixture. The Dirichlet process is a prior probability distribution on clusterings with an infinite, unbounded, number of partitions. Variational techniques let us incorporate this prior structure on Gaussian mixture models at almost no penalty in inference time, comparing with a finite Gaussian mixture model.", "An important question is how can the Dirichlet process use an infinite, unbounded number of clusters and still be consistent. While a full explanation doesn\u2019t fit this manual, one can think of its stick breaking process analogy to help understanding it. The stick breaking process is a generative story for the Dirichlet process. We start with a unit-length stick and in each step we break off a portion of the remaining stick. Each time, we associate the length of the piece of the stick to the proportion of points that falls into a group of the mixture. At the end, to represent the infinite mixture, we associate the last remaining piece of the stick to the proportion of points that don\u2019t fall into all the other groups. The length of each piece is a random variable with probability proportional to the concentration parameter. Smaller value of the concentration will divide the unit-length into larger pieces of the stick (defining more concentrated distribution). Larger concentration values will create smaller pieces of the stick (increasing the number of components with non zero weights).", "Variational inference techniques for the Dirichlet process still work with a finite approximation to this infinite mixture model, but instead of having to specify a priori how many components one wants to use, one just specifies the concentration parameter and an upper bound on the number of mixture components (this upper bound, assuming it is higher than the \u201ctrue\u201d number of components, affects only algorithmic complexity, not the actual number of components used)."]}, {"name": "2.2. Manifold learning", "path": "modules/manifold", "type": "Guide", "text": ["Manifold learning is an approach to non-linear dimensionality reduction. Algorithms for this task are based on the idea that the dimensionality of many data sets is only artificially high.", "High-dimensional datasets can be very difficult to visualize. While data in two or three dimensions can be plotted to show the inherent structure of the data, equivalent high-dimensional plots are much less intuitive. To aid visualization of the structure of a dataset, the dimension must be reduced in some way.", "The simplest way to accomplish this dimensionality reduction is by taking a random projection of the data. Though this allows some degree of visualization of the data structure, the randomness of the choice leaves much to be desired. In a random projection, it is likely that the more interesting structure within the data will be lost.", "  ", "To address this concern, a number of supervised and unsupervised linear dimensionality reduction frameworks have been designed, such as Principal Component Analysis (PCA), Independent Component Analysis, Linear Discriminant Analysis, and others. These algorithms define specific rubrics to choose an \u201cinteresting\u201d linear projection of the data. These methods can be powerful, but often miss important non-linear structure in the data.", "  ", "Manifold Learning can be thought of as an attempt to generalize linear frameworks like PCA to be sensitive to non-linear structure in data. Though supervised variants exist, the typical manifold learning problem is unsupervised: it learns the high-dimensional structure of the data from the data itself, without the use of predetermined classifications.", "Examples:", "The manifold learning implementations available in scikit-learn are summarized below", "One of the earliest approaches to manifold learning is the Isomap algorithm, short for Isometric Mapping. Isomap can be viewed as an extension of Multi-dimensional Scaling (MDS) or Kernel PCA. Isomap seeks a lower-dimensional embedding which maintains geodesic distances between all points. Isomap can be performed with the object Isomap.", "The Isomap algorithm comprises three stages:", "The overall complexity of Isomap is \\(O[D \\log(k) N \\log(N)] + O[N^2(k + \\log(N))] + O[d N^2]\\).", "References:", "Locally linear embedding (LLE) seeks a lower-dimensional projection of the data which preserves distances within local neighborhoods. It can be thought of as a series of local Principal Component Analyses which are globally compared to find the best non-linear embedding.", "Locally linear embedding can be performed with function locally_linear_embedding or its object-oriented counterpart LocallyLinearEmbedding.", "The standard LLE algorithm comprises three stages:", "The overall complexity of standard LLE is \\(O[D \\log(k) N \\log(N)] + O[D N k^3] + O[d N^2]\\).", "References:", "One well-known issue with LLE is the regularization problem. When the number of neighbors is greater than the number of input dimensions, the matrix defining each local neighborhood is rank-deficient. To address this, standard LLE applies an arbitrary regularization parameter \\(r\\), which is chosen relative to the trace of the local weight matrix. Though it can be shown formally that as \\(r \\to 0\\), the solution converges to the desired embedding, there is no guarantee that the optimal solution will be found for \\(r > 0\\). This problem manifests itself in embeddings which distort the underlying geometry of the manifold.", "One method to address the regularization problem is to use multiple weight vectors in each neighborhood. This is the essence of modified locally linear embedding (MLLE). MLLE can be performed with function locally_linear_embedding or its object-oriented counterpart LocallyLinearEmbedding, with the keyword method = 'modified'. It requires n_neighbors > n_components.", "The MLLE algorithm comprises three stages:", "The overall complexity of MLLE is \\(O[D \\log(k) N \\log(N)] + O[D N k^3] + O[N (k-D) k^2] + O[d N^2]\\).", "References:", "Hessian Eigenmapping (also known as Hessian-based LLE: HLLE) is another method of solving the regularization problem of LLE. It revolves around a hessian-based quadratic form at each neighborhood which is used to recover the locally linear structure. Though other implementations note its poor scaling with data size, sklearn implements some algorithmic improvements which make its cost comparable to that of other LLE variants for small output dimension. HLLE can be performed with function locally_linear_embedding or its object-oriented counterpart LocallyLinearEmbedding, with the keyword method = 'hessian'. It requires n_neighbors > n_components * (n_components + 3) / 2.", "The HLLE algorithm comprises three stages:", "The overall complexity of standard HLLE is \\(O[D \\log(k) N \\log(N)] + O[D N k^3] + O[N d^6] + O[d N^2]\\).", "References:", "Spectral Embedding is an approach to calculating a non-linear embedding. Scikit-learn implements Laplacian Eigenmaps, which finds a low dimensional representation of the data using a spectral decomposition of the graph Laplacian. The graph generated can be considered as a discrete approximation of the low dimensional manifold in the high dimensional space. Minimization of a cost function based on the graph ensures that points close to each other on the manifold are mapped close to each other in the low dimensional space, preserving local distances. Spectral embedding can be performed with the function spectral_embedding or its object-oriented counterpart SpectralEmbedding.", "The Spectral Embedding (Laplacian Eigenmaps) algorithm comprises three stages:", "The overall complexity of spectral embedding is \\(O[D \\log(k) N \\log(N)] + O[D N k^3] + O[d N^2]\\).", "References:", "Though not technically a variant of LLE, Local tangent space alignment (LTSA) is algorithmically similar enough to LLE that it can be put in this category. Rather than focusing on preserving neighborhood distances as in LLE, LTSA seeks to characterize the local geometry at each neighborhood via its tangent space, and performs a global optimization to align these local tangent spaces to learn the embedding. LTSA can be performed with function locally_linear_embedding or its object-oriented counterpart LocallyLinearEmbedding, with the keyword method = 'ltsa'.", "The LTSA algorithm comprises three stages:", "The overall complexity of standard LTSA is \\(O[D \\log(k) N \\log(N)] + O[D N k^3] + O[k^2 d] + O[d N^2]\\).", "References:", "Multidimensional scaling (MDS) seeks a low-dimensional representation of the data in which the distances respect well the distances in the original high-dimensional space.", "In general, MDS is a technique used for analyzing similarity or dissimilarity data. It attempts to model similarity or dissimilarity data as distances in a geometric spaces. The data can be ratings of similarity between objects, interaction frequencies of molecules, or trade indices between countries.", "There exists two types of MDS algorithm: metric and non metric. In the scikit-learn, the class MDS implements both. In Metric MDS, the input similarity matrix arises from a metric (and thus respects the triangular inequality), the distances between output two points are then set to be as close as possible to the similarity or dissimilarity data. In the non-metric version, the algorithms will try to preserve the order of the distances, and hence seek for a monotonic relationship between the distances in the embedded space and the similarities/dissimilarities.", "Let \\(S\\) be the similarity matrix, and \\(X\\) the coordinates of the \\(n\\) input points. Disparities \\(\\hat{d}_{ij}\\) are transformation of the similarities chosen in some optimal ways. The objective, called the stress, is then defined by \\(\\sum_{i < j} d_{ij}(X) - \\hat{d}_{ij}(X)\\)", "The simplest metric MDS model, called absolute MDS, disparities are defined by \\(\\hat{d}_{ij} = S_{ij}\\). With absolute MDS, the value \\(S_{ij}\\) should then correspond exactly to the distance between point \\(i\\) and \\(j\\) in the embedding point.", "Most commonly, disparities are set to \\(\\hat{d}_{ij} = b S_{ij}\\).", "Non metric MDS focuses on the ordination of the data. If \\(S_{ij} < S_{jk}\\), then the embedding should enforce \\(d_{ij} < d_{jk}\\). A simple algorithm to enforce that is to use a monotonic regression of \\(d_{ij}\\) on \\(S_{ij}\\), yielding disparities \\(\\hat{d}_{ij}\\) in the same order as \\(S_{ij}\\).", "A trivial solution to this problem is to set all the points on the origin. In order to avoid that, the disparities \\(\\hat{d}_{ij}\\) are normalized.", "References:", "t-SNE (TSNE) converts affinities of data points to probabilities. The affinities in the original space are represented by Gaussian joint probabilities and the affinities in the embedded space are represented by Student\u2019s t-distributions. This allows t-SNE to be particularly sensitive to local structure and has a few other advantages over existing techniques:", "While Isomap, LLE and variants are best suited to unfold a single continuous low dimensional manifold, t-SNE will focus on the local structure of the data and will tend to extract clustered local groups of samples as highlighted on the S-curve example. This ability to group samples based on the local structure might be beneficial to visually disentangle a dataset that comprises several manifolds at once as is the case in the digits dataset.", "The Kullback-Leibler (KL) divergence of the joint probabilities in the original space and the embedded space will be minimized by gradient descent. Note that the KL divergence is not convex, i.e. multiple restarts with different initializations will end up in local minima of the KL divergence. Hence, it is sometimes useful to try different seeds and select the embedding with the lowest KL divergence.", "The disadvantages to using t-SNE are roughly:", "The main purpose of t-SNE is visualization of high-dimensional data. Hence, it works best when the data will be embedded on two or three dimensions.", "Optimizing the KL divergence can be a little bit tricky sometimes. There are five parameters that control the optimization of t-SNE and therefore possibly the quality of the resulting embedding:", "The perplexity is defined as \\(k=2^{(S)}\\) where \\(S\\) is the Shannon entropy of the conditional probability distribution. The perplexity of a \\(k\\)-sided die is \\(k\\), so that \\(k\\) is effectively the number of nearest neighbors t-SNE considers when generating the conditional probabilities. Larger perplexities lead to more nearest neighbors and less sensitive to small structure. Conversely a lower perplexity considers a smaller number of neighbors, and thus ignores more global information in favour of the local neighborhood. As dataset sizes get larger more points will be required to get a reasonable sample of the local neighborhood, and hence larger perplexities may be required. Similarly noisier datasets will require larger perplexity values to encompass enough local neighbors to see beyond the background noise.", "The maximum number of iterations is usually high enough and does not need any tuning. The optimization consists of two phases: the early exaggeration phase and the final optimization. During early exaggeration the joint probabilities in the original space will be artificially increased by multiplication with a given factor. Larger factors result in larger gaps between natural clusters in the data. If the factor is too high, the KL divergence could increase during this phase. Usually it does not have to be tuned. A critical parameter is the learning rate. If it is too low gradient descent will get stuck in a bad local minimum. If it is too high the KL divergence will increase during optimization. More tips can be found in Laurens van der Maaten\u2019s FAQ (see references). The last parameter, angle, is a tradeoff between performance and accuracy. Larger angles imply that we can approximate larger regions by a single point, leading to better speed but less accurate results.", "\u201cHow to Use t-SNE Effectively\u201d provides a good discussion of the effects of the various parameters, as well as interactive plots to explore the effects of different parameters.", "The Barnes-Hut t-SNE that has been implemented here is usually much slower than other manifold learning algorithms. The optimization is quite difficult and the computation of the gradient is \\(O[d N log(N)]\\), where \\(d\\) is the number of output dimensions and \\(N\\) is the number of samples. The Barnes-Hut method improves on the exact method where t-SNE complexity is \\(O[d N^2]\\), but has several other notable differences:", "For visualization purpose (which is the main use case of t-SNE), using the Barnes-Hut method is strongly recommended. The exact t-SNE method is useful for checking the theoretically properties of the embedding possibly in higher dimensional space but limit to small datasets due to computational constraints.", "Also note that the digits labels roughly match the natural grouping found by t-SNE while the linear 2D projection of the PCA model yields a representation where label regions largely overlap. This is a strong clue that this data can be well separated by non linear methods that focus on the local structure (e.g. an SVM with a Gaussian RBF kernel). However, failing to visualize well separated homogeneously labeled groups with t-SNE in 2D does not necessarily imply that the data cannot be correctly classified by a supervised model. It might be the case that 2 dimensions are not low enough to accurately represents the internal structure of the data.", "References:", "See also", "Totally Random Trees Embedding can also be useful to derive non-linear representations of feature space, also it does not perform dimensionality reduction."]}, {"name": "2.3. Clustering", "path": "modules/clustering", "type": "Guide", "text": ["Clustering of unlabeled data can be performed with the module sklearn.cluster.", "Each clustering algorithm comes in two variants: a class, that implements the fit method to learn the clusters on train data, and a function, that, given train data, returns an array of integer labels corresponding to the different clusters. For the class, the labels over the training data can be found in the labels_ attribute.", "Input data", "One important thing to note is that the algorithms implemented in this module can take different kinds of matrix as input. All the methods accept standard data matrices of shape (n_samples, n_features). These can be obtained from the classes in the sklearn.feature_extraction module. For AffinityPropagation, SpectralClustering and DBSCAN one can also input similarity matrices of shape (n_samples, n_samples). These can be obtained from the functions in the sklearn.metrics.pairwise module.", "A comparison of the clustering algorithms in scikit-learn", "Method name", "Parameters", "Scalability", "Usecase", "Geometry (metric used)", "K-Means", "number of clusters", "Very large n_samples, medium n_clusters with MiniBatch code", "General-purpose, even cluster size, flat geometry, not too many clusters", "Distances between points", "Affinity propagation", "damping, sample preference", "Not scalable with n_samples", "Many clusters, uneven cluster size, non-flat geometry", "Graph distance (e.g. nearest-neighbor graph)", "Mean-shift", "bandwidth", "Not scalable with n_samples", "Many clusters, uneven cluster size, non-flat geometry", "Distances between points", "Spectral clustering", "number of clusters", "Medium n_samples, small n_clusters", "Few clusters, even cluster size, non-flat geometry", "Graph distance (e.g. nearest-neighbor graph)", "Ward hierarchical clustering", "number of clusters or distance threshold", "Large n_samples and n_clusters", "Many clusters, possibly connectivity constraints", "Distances between points", "Agglomerative clustering", "number of clusters or distance threshold, linkage type, distance", "Large n_samples and n_clusters", "Many clusters, possibly connectivity constraints, non Euclidean distances", "Any pairwise distance", "DBSCAN", "neighborhood size", "Very large n_samples, medium n_clusters", "Non-flat geometry, uneven cluster sizes", "Distances between nearest points", "OPTICS", "minimum cluster membership", "Very large n_samples, large n_clusters", "Non-flat geometry, uneven cluster sizes, variable cluster density", "Distances between points", "Gaussian mixtures", "many", "Not scalable", "Flat geometry, good for density estimation", "Mahalanobis distances to centers", "Birch", "branching factor, threshold, optional global clusterer.", "Large n_clusters and n_samples", "Large dataset, outlier removal, data reduction.", "Euclidean distance between points", "Non-flat geometry clustering is useful when the clusters have a specific shape, i.e. a non-flat manifold, and the standard euclidean distance is not the right metric. This case arises in the two top rows of the figure above.", "Gaussian mixture models, useful for clustering, are described in another chapter of the documentation dedicated to mixture models. KMeans can be seen as a special case of Gaussian mixture model with equal covariance per component.", "The KMeans algorithm clusters data by trying to separate samples in n groups of equal variance, minimizing a criterion known as the inertia or within-cluster sum-of-squares (see below). This algorithm requires the number of clusters to be specified. It scales well to large number of samples and has been used across a large range of application areas in many different fields.", "The k-means algorithm divides a set of \\(N\\) samples \\(X\\) into \\(K\\) disjoint clusters \\(C\\), each described by the mean \\(\\mu_j\\) of the samples in the cluster. The means are commonly called the cluster \u201ccentroids\u201d; note that they are not, in general, points from \\(X\\), although they live in the same space.", "The K-means algorithm aims to choose centroids that minimise the inertia, or within-cluster sum-of-squares criterion:", "Inertia can be recognized as a measure of how internally coherent clusters are. It suffers from various drawbacks:", "K-means is often referred to as Lloyd\u2019s algorithm. In basic terms, the algorithm has three steps. The first step chooses the initial centroids, with the most basic method being to choose \\(k\\) samples from the dataset \\(X\\). After initialization, K-means consists of looping between the two other steps. The first step assigns each sample to its nearest centroid. The second step creates new centroids by taking the mean value of all of the samples assigned to each previous centroid. The difference between the old and the new centroids are computed and the algorithm repeats these last two steps until this value is less than a threshold. In other words, it repeats until the centroids do not move significantly.", "K-means is equivalent to the expectation-maximization algorithm with a small, all-equal, diagonal covariance matrix.", "The algorithm can also be understood through the concept of Voronoi diagrams. First the Voronoi diagram of the points is calculated using the current centroids. Each segment in the Voronoi diagram becomes a separate cluster. Secondly, the centroids are updated to the mean of each segment. The algorithm then repeats this until a stopping criterion is fulfilled. Usually, the algorithm stops when the relative decrease in the objective function between iterations is less than the given tolerance value. This is not the case in this implementation: iteration stops when centroids move less than the tolerance.", "Given enough time, K-means will always converge, however this may be to a local minimum. This is highly dependent on the initialization of the centroids. As a result, the computation is often done several times, with different initializations of the centroids. One method to help address this issue is the k-means++ initialization scheme, which has been implemented in scikit-learn (use the init='k-means++' parameter). This initializes the centroids to be (generally) distant from each other, leading to provably better results than random initialization, as shown in the reference.", "K-means++ can also be called independently to select seeds for other clustering algorithms, see sklearn.cluster.kmeans_plusplus for details and example usage.", "The algorithm supports sample weights, which can be given by a parameter sample_weight. This allows to assign more weight to some samples when computing cluster centers and values of inertia. For example, assigning a weight of 2 to a sample is equivalent to adding a duplicate of that sample to the dataset \\(X\\).", "K-means can be used for vector quantization. This is achieved using the transform method of a trained model of KMeans.", "KMeans benefits from OpenMP based parallelism through Cython. Small chunks of data (256 samples) are processed in parallel, which in addition yields a low memory footprint. For more details on how to control the number of threads, please refer to our Parallelism notes.", "Examples:", "References:", "The MiniBatchKMeans is a variant of the KMeans algorithm which uses mini-batches to reduce the computation time, while still attempting to optimise the same objective function. Mini-batches are subsets of the input data, randomly sampled in each training iteration. These mini-batches drastically reduce the amount of computation required to converge to a local solution. In contrast to other algorithms that reduce the convergence time of k-means, mini-batch k-means produces results that are generally only slightly worse than the standard algorithm.", "The algorithm iterates between two major steps, similar to vanilla k-means. In the first step, \\(b\\) samples are drawn randomly from the dataset, to form a mini-batch. These are then assigned to the nearest centroid. In the second step, the centroids are updated. In contrast to k-means, this is done on a per-sample basis. For each sample in the mini-batch, the assigned centroid is updated by taking the streaming average of the sample and all previous samples assigned to that centroid. This has the effect of decreasing the rate of change for a centroid over time. These steps are performed until convergence or a predetermined number of iterations is reached.", "MiniBatchKMeans converges faster than KMeans, but the quality of the results is reduced. In practice this difference in quality can be quite small, as shown in the example and cited reference.", "Examples:", "References:", "AffinityPropagation creates clusters by sending messages between pairs of samples until convergence. A dataset is then described using a small number of exemplars, which are identified as those most representative of other samples. The messages sent between pairs represent the suitability for one sample to be the exemplar of the other, which is updated in response to the values from other pairs. This updating happens iteratively until convergence, at which point the final exemplars are chosen, and hence the final clustering is given.", "Affinity Propagation can be interesting as it chooses the number of clusters based on the data provided. For this purpose, the two important parameters are the preference, which controls how many exemplars are used, and the damping factor which damps the responsibility and availability messages to avoid numerical oscillations when updating these messages.", "The main drawback of Affinity Propagation is its complexity. The algorithm has a time complexity of the order \\(O(N^2 T)\\), where \\(N\\) is the number of samples and \\(T\\) is the number of iterations until convergence. Further, the memory complexity is of the order \\(O(N^2)\\) if a dense similarity matrix is used, but reducible if a sparse similarity matrix is used. This makes Affinity Propagation most appropriate for small to medium sized datasets.", "Examples:", "Algorithm description: The messages sent between points belong to one of two categories. The first is the responsibility \\(r(i, k)\\), which is the accumulated evidence that sample \\(k\\) should be the exemplar for sample \\(i\\). The second is the availability \\(a(i, k)\\) which is the accumulated evidence that sample \\(i\\) should choose sample \\(k\\) to be its exemplar, and considers the values for all other samples that \\(k\\) should be an exemplar. In this way, exemplars are chosen by samples if they are (1) similar enough to many samples and (2) chosen by many samples to be representative of themselves.", "More formally, the responsibility of a sample \\(k\\) to be the exemplar of sample \\(i\\) is given by:", "Where \\(s(i, k)\\) is the similarity between samples \\(i\\) and \\(k\\). The availability of sample \\(k\\) to be the exemplar of sample \\(i\\) is given by:", "To begin with, all values for \\(r\\) and \\(a\\) are set to zero, and the calculation of each iterates until convergence. As discussed above, in order to avoid numerical oscillations when updating the messages, the damping factor \\(\\lambda\\) is introduced to iteration process:", "where \\(t\\) indicates the iteration times.", "MeanShift clustering aims to discover blobs in a smooth density of samples. It is a centroid based algorithm, which works by updating candidates for centroids to be the mean of the points within a given region. These candidates are then filtered in a post-processing stage to eliminate near-duplicates to form the final set of centroids.", "Given a candidate centroid \\(x_i\\) for iteration \\(t\\), the candidate is updated according to the following equation:", "Where \\(N(x_i)\\) is the neighborhood of samples within a given distance around \\(x_i\\) and \\(m\\) is the mean shift vector that is computed for each centroid that points towards a region of the maximum increase in the density of points. This is computed using the following equation, effectively updating a centroid to be the mean of the samples within its neighborhood:", "The algorithm automatically sets the number of clusters, instead of relying on a parameter bandwidth, which dictates the size of the region to search through. This parameter can be set manually, but can be estimated using the provided estimate_bandwidth function, which is called if the bandwidth is not set.", "The algorithm is not highly scalable, as it requires multiple nearest neighbor searches during the execution of the algorithm. The algorithm is guaranteed to converge, however the algorithm will stop iterating when the change in centroids is small.", "Labelling a new sample is performed by finding the nearest centroid for a given sample.", "Examples:", "References:", "SpectralClustering performs a low-dimension embedding of the affinity matrix between samples, followed by clustering, e.g., by KMeans, of the components of the eigenvectors in the low dimensional space. It is especially computationally efficient if the affinity matrix is sparse and the amg solver is used for the eigenvalue problem (Note, the amg solver requires that the pyamg module is installed.)", "The present version of SpectralClustering requires the number of clusters to be specified in advance. It works well for a small number of clusters, but is not advised for many clusters.", "For two clusters, SpectralClustering solves a convex relaxation of the normalised cuts problem on the similarity graph: cutting the graph in two so that the weight of the edges cut is small compared to the weights of the edges inside each cluster. This criteria is especially interesting when working on images, where graph vertices are pixels, and weights of the edges of the similarity graph are computed using a function of a gradient of the image.", "  ", "Warning", "Transforming distance to well-behaved similarities", "Note that if the values of your similarity matrix are not well distributed, e.g. with negative values or with a distance matrix rather than a similarity, the spectral problem will be singular and the problem not solvable. In which case it is advised to apply a transformation to the entries of the matrix. For instance, in the case of a signed distance matrix, is common to apply a heat kernel:", "See the examples for such an application.", "Examples:", "Different label assignment strategies can be used, corresponding to the assign_labels parameter of SpectralClustering. \"kmeans\" strategy can match finer details, but can be unstable. In particular, unless you control the random_state, it may not be reproducible from run-to-run, as it depends on random initialization. The alternative \"discretize\" strategy is 100% reproducible, but tends to create parcels of fairly even and geometrical shape.", "assign_labels=\"kmeans\"", "assign_labels=\"discretize\"", "", "", "Spectral Clustering can also be used to partition graphs via their spectral embeddings. In this case, the affinity matrix is the adjacency matrix of the graph, and SpectralClustering is initialized with affinity='precomputed':", "References:", "Hierarchical clustering is a general family of clustering algorithms that build nested clusters by merging or splitting them successively. This hierarchy of clusters is represented as a tree (or dendrogram). The root of the tree is the unique cluster that gathers all the samples, the leaves being the clusters with only one sample. See the Wikipedia page for more details.", "The AgglomerativeClustering object performs a hierarchical clustering using a bottom up approach: each observation starts in its own cluster, and clusters are successively merged together. The linkage criteria determines the metric used for the merge strategy:", "AgglomerativeClustering can also scale to large number of samples when it is used jointly with a connectivity matrix, but is computationally expensive when no connectivity constraints are added between samples: it considers at each step all the possible merges.", "FeatureAgglomeration", "The FeatureAgglomeration uses agglomerative clustering to group together features that look very similar, thus decreasing the number of features. It is a dimensionality reduction tool, see Unsupervised dimensionality reduction.", "AgglomerativeClustering supports Ward, single, average, and complete linkage strategies.", "Agglomerative cluster has a \u201crich get richer\u201d behavior that leads to uneven cluster sizes. In this regard, single linkage is the worst strategy, and Ward gives the most regular sizes. However, the affinity (or distance used in clustering) cannot be varied with Ward, thus for non Euclidean metrics, average linkage is a good alternative. Single linkage, while not robust to noisy data, can be computed very efficiently and can therefore be useful to provide hierarchical clustering of larger datasets. Single linkage can also perform well on non-globular data.", "Examples:", "It\u2019s possible to visualize the tree representing the hierarchical merging of clusters as a dendrogram. Visual inspection can often be useful for understanding the structure of the data, though more so in the case of small sample sizes.", "An interesting aspect of AgglomerativeClustering is that connectivity constraints can be added to this algorithm (only adjacent clusters can be merged together), through a connectivity matrix that defines for each sample the neighboring samples following a given structure of the data. For instance, in the swiss-roll example below, the connectivity constraints forbid the merging of points that are not adjacent on the swiss roll, and thus avoid forming clusters that extend across overlapping folds of the roll.", "  ", "These constraint are useful to impose a certain local structure, but they also make the algorithm faster, especially when the number of the samples is high.", "The connectivity constraints are imposed via an connectivity matrix: a scipy sparse matrix that has elements only at the intersection of a row and a column with indices of the dataset that should be connected. This matrix can be constructed from a-priori information: for instance, you may wish to cluster web pages by only merging pages with a link pointing from one to another. It can also be learned from the data, for instance using sklearn.neighbors.kneighbors_graph to restrict merging to nearest neighbors as in this example, or using sklearn.feature_extraction.image.grid_to_graph to enable only merging of neighboring pixels on an image, as in the coin example.", "Examples:", "Warning", "Connectivity constraints with single, average and complete linkage", "Connectivity constraints and single, complete or average linkage can enhance the \u2018rich getting richer\u2019 aspect of agglomerative clustering, particularly so if they are built with sklearn.neighbors.kneighbors_graph. In the limit of a small number of clusters, they tend to give a few macroscopically occupied clusters and almost empty ones. (see the discussion in Agglomerative clustering with and without structure). Single linkage is the most brittle linkage option with regard to this issue.", "Single, average and complete linkage can be used with a variety of distances (or affinities), in particular Euclidean distance (l2), Manhattan distance (or Cityblock, or l1), cosine distance, or any precomputed affinity matrix.", "The guidelines for choosing a metric is to use one that maximizes the distance between samples in different classes, and minimizes that within each class.", "Examples:", "The DBSCAN algorithm views clusters as areas of high density separated by areas of low density. Due to this rather generic view, clusters found by DBSCAN can be any shape, as opposed to k-means which assumes that clusters are convex shaped. The central component to the DBSCAN is the concept of core samples, which are samples that are in areas of high density. A cluster is therefore a set of core samples, each close to each other (measured by some distance measure) and a set of non-core samples that are close to a core sample (but are not themselves core samples). There are two parameters to the algorithm, min_samples and eps, which define formally what we mean when we say dense. Higher min_samples or lower eps indicate higher density necessary to form a cluster.", "More formally, we define a core sample as being a sample in the dataset such that there exist min_samples other samples within a distance of eps, which are defined as neighbors of the core sample. This tells us that the core sample is in a dense area of the vector space. A cluster is a set of core samples that can be built by recursively taking a core sample, finding all of its neighbors that are core samples, finding all of their neighbors that are core samples, and so on. A cluster also has a set of non-core samples, which are samples that are neighbors of a core sample in the cluster but are not themselves core samples. Intuitively, these samples are on the fringes of a cluster.", "Any core sample is part of a cluster, by definition. Any sample that is not a core sample, and is at least eps in distance from any core sample, is considered an outlier by the algorithm.", "While the parameter min_samples primarily controls how tolerant the algorithm is towards noise (on noisy and large data sets it may be desirable to increase this parameter), the parameter eps is crucial to choose appropriately for the data set and distance function and usually cannot be left at the default value. It controls the local neighborhood of the points. When chosen too small, most data will not be clustered at all (and labeled as -1 for \u201cnoise\u201d). When chosen too large, it causes close clusters to be merged into one cluster, and eventually the entire data set to be returned as a single cluster. Some heuristics for choosing this parameter have been discussed in the literature, for example based on a knee in the nearest neighbor distances plot (as discussed in the references below).", "In the figure below, the color indicates cluster membership, with large circles indicating core samples found by the algorithm. Smaller circles are non-core samples that are still part of a cluster. Moreover, the outliers are indicated by black points below.", " ", "Examples:", "Implementation", "The DBSCAN algorithm is deterministic, always generating the same clusters when given the same data in the same order. However, the results can differ when data is provided in a different order. First, even though the core samples will always be assigned to the same clusters, the labels of those clusters will depend on the order in which those samples are encountered in the data. Second and more importantly, the clusters to which non-core samples are assigned can differ depending on the data order. This would happen when a non-core sample has a distance lower than eps to two core samples in different clusters. By the triangular inequality, those two core samples must be more distant than eps from each other, or they would be in the same cluster. The non-core sample is assigned to whichever cluster is generated first in a pass through the data, and so the results will depend on the data ordering.", "The current implementation uses ball trees and kd-trees to determine the neighborhood of points, which avoids calculating the full distance matrix (as was done in scikit-learn versions before 0.14). The possibility to use custom metrics is retained; for details, see NearestNeighbors.", "Memory consumption for large sample sizes", "This implementation is by default not memory efficient because it constructs a full pairwise similarity matrix in the case where kd-trees or ball-trees cannot be used (e.g., with sparse matrices). This matrix will consume \\(n^2\\) floats. A couple of mechanisms for getting around this are:", "References:", "The OPTICS algorithm shares many similarities with the DBSCAN algorithm, and can be considered a generalization of DBSCAN that relaxes the eps requirement from a single value to a value range. The key difference between DBSCAN and OPTICS is that the OPTICS algorithm builds a reachability graph, which assigns each sample both a reachability_ distance, and a spot within the cluster ordering_ attribute; these two attributes are assigned when the model is fitted, and are used to determine cluster membership. If OPTICS is run with the default value of inf set for max_eps, then DBSCAN style cluster extraction can be performed repeatedly in linear time for any given eps value using the cluster_optics_dbscan method. Setting max_eps to a lower value will result in shorter run times, and can be thought of as the maximum neighborhood radius from each point to find other potential reachable points.", " ", "The reachability distances generated by OPTICS allow for variable density extraction of clusters within a single data set. As shown in the above plot, combining reachability distances and data set ordering_ produces a reachability plot, where point density is represented on the Y-axis, and points are ordered such that nearby points are adjacent. \u2018Cutting\u2019 the reachability plot at a single value produces DBSCAN like results; all points above the \u2018cut\u2019 are classified as noise, and each time that there is a break when reading from left to right signifies a new cluster. The default cluster extraction with OPTICS looks at the steep slopes within the graph to find clusters, and the user can define what counts as a steep slope using the parameter xi. There are also other possibilities for analysis on the graph itself, such as generating hierarchical representations of the data through reachability-plot dendrograms, and the hierarchy of clusters detected by the algorithm can be accessed through the cluster_hierarchy_ parameter. The plot above has been color-coded so that cluster colors in planar space match the linear segment clusters of the reachability plot. Note that the blue and red clusters are adjacent in the reachability plot, and can be hierarchically represented as children of a larger parent cluster.", "Examples:", "Comparison with DBSCAN", "The results from OPTICS cluster_optics_dbscan method and DBSCAN are very similar, but not always identical; specifically, labeling of periphery and noise points. This is in part because the first samples of each dense area processed by OPTICS have a large reachability value while being close to other points in their area, and will thus sometimes be marked as noise rather than periphery. This affects adjacent points when they are considered as candidates for being marked as either periphery or noise.", "Note that for any single value of eps, DBSCAN will tend to have a shorter run time than OPTICS; however, for repeated runs at varying eps values, a single run of OPTICS may require less cumulative runtime than DBSCAN. It is also important to note that OPTICS\u2019 output is close to DBSCAN\u2019s only if eps and max_eps are close.", "Computational Complexity", "Spatial indexing trees are used to avoid calculating the full distance matrix, and allow for efficient memory usage on large sets of samples. Different distance metrics can be supplied via the metric keyword.", "For large datasets, similar (but not identical) results can be obtained via HDBSCAN. The HDBSCAN implementation is multithreaded, and has better algorithmic runtime complexity than OPTICS, at the cost of worse memory scaling. For extremely large datasets that exhaust system memory using HDBSCAN, OPTICS will maintain \\(n\\) (as opposed to \\(n^2\\)) memory scaling; however, tuning of the max_eps parameter will likely need to be used to give a solution in a reasonable amount of wall time.", "References:", "The Birch builds a tree called the Clustering Feature Tree (CFT) for the given data. The data is essentially lossy compressed to a set of Clustering Feature nodes (CF Nodes). The CF Nodes have a number of subclusters called Clustering Feature subclusters (CF Subclusters) and these CF Subclusters located in the non-terminal CF Nodes can have CF Nodes as children.", "The CF Subclusters hold the necessary information for clustering which prevents the need to hold the entire input data in memory. This information includes:", "The Birch algorithm has two parameters, the threshold and the branching factor. The branching factor limits the number of subclusters in a node and the threshold limits the distance between the entering sample and the existing subclusters.", "This algorithm can be viewed as an instance or data reduction method, since it reduces the input data to a set of subclusters which are obtained directly from the leaves of the CFT. This reduced data can be further processed by feeding it into a global clusterer. This global clusterer can be set by n_clusters. If n_clusters is set to None, the subclusters from the leaves are directly read off, otherwise a global clustering step labels these subclusters into global clusters (labels) and the samples are mapped to the global label of the nearest subcluster.", "Algorithm description:", "Birch or MiniBatchKMeans?", "How to use partial_fit?", "To avoid the computation of global clustering, for every call of partial_fit the user is advised", "References:", "Evaluating the performance of a clustering algorithm is not as trivial as counting the number of errors or the precision and recall of a supervised classification algorithm. In particular any evaluation metric should not take the absolute values of the cluster labels into account but rather if this clustering define separations of the data similar to some ground truth set of classes or satisfying some assumption such that members belong to the same class are more similar than members of different classes according to some similarity metric.", "Given the knowledge of the ground truth class assignments labels_true and our clustering algorithm assignments of the same samples labels_pred, the (adjusted or unadjusted) Rand index is a function that measures the similarity of the two assignments, ignoring permutations:", "The Rand index does not ensure to obtain a value close to 0.0 for a random labelling. The adjusted Rand index corrects for chance and will give such a baseline.", "As with all clustering metrics, one can permute 0 and 1 in the predicted labels, rename 2 to 3, and get the same score:", "Furthermore, both rand_score adjusted_rand_score are symmetric: swapping the argument does not change the scores. They can thus be used as consensus measures:", "Perfect labeling is scored 1.0:", "Poorly agreeing labels (e.g. independent labelings) have lower scores, and for the adjusted Rand index the score will be negative or close to zero. However, for the unadjusted Rand index the score, while lower, will not necessarily be close to zero.:", "Contrary to inertia, the (adjusted or unadjusted) Rand index requires knowledge of the ground truth classes which is almost never available in practice or requires manual assignment by human annotators (as in the supervised learning setting).", "However (adjusted or unadjusted) Rand index can also be useful in a purely unsupervised setting as a building block for a Consensus Index that can be used for clustering model selection (TODO).", "Examples:", "If C is a ground truth class assignment and K the clustering, let us define \\(a\\) and \\(b\\) as:", "The unadjusted Rand index is then given by:", "where \\(C_2^{n_{samples}}\\) is the total number of possible pairs in the dataset. It does not matter if the calculation is performed on ordered pairs or unordered pairs as long as the calculation is performed consistently.", "However, the Rand index does not guarantee that random label assignments will get a value close to zero (esp. if the number of clusters is in the same order of magnitude as the number of samples).", "To counter this effect we can discount the expected RI \\(E[\\text{RI}]\\) of random labelings by defining the adjusted Rand index as follows:", "References", "Given the knowledge of the ground truth class assignments labels_true and our clustering algorithm assignments of the same samples labels_pred, the Mutual Information is a function that measures the agreement of the two assignments, ignoring permutations. Two different normalized versions of this measure are available, Normalized Mutual Information (NMI) and Adjusted Mutual Information (AMI). NMI is often used in the literature, while AMI was proposed more recently and is normalized against chance:", "One can permute 0 and 1 in the predicted labels, rename 2 to 3 and get the same score:", "All, mutual_info_score, adjusted_mutual_info_score and normalized_mutual_info_score are symmetric: swapping the argument does not change the score. Thus they can be used as a consensus measure:", "Perfect labeling is scored 1.0:", "This is not true for mutual_info_score, which is therefore harder to judge:", "Bad (e.g. independent labelings) have non-positive scores:", "Contrary to inertia, MI-based measures require the knowledge of the ground truth classes while almost never available in practice or requires manual assignment by human annotators (as in the supervised learning setting).", "However MI-based measures can also be useful in purely unsupervised setting as a building block for a Consensus Index that can be used for clustering model selection.", "Examples:", "Assume two label assignments (of the same N objects), \\(U\\) and \\(V\\). Their entropy is the amount of uncertainty for a partition set, defined by:", "where \\(P(i) = |U_i| / N\\) is the probability that an object picked at random from \\(U\\) falls into class \\(U_i\\). Likewise for \\(V\\):", "With \\(P'(j) = |V_j| / N\\). The mutual information (MI) between \\(U\\) and \\(V\\) is calculated by:", "where \\(P(i, j) = |U_i \\cap V_j| / N\\) is the probability that an object picked at random falls into both classes \\(U_i\\) and \\(V_j\\).", "It also can be expressed in set cardinality formulation:", "The normalized mutual information is defined as", "This value of the mutual information and also the normalized variant is not adjusted for chance and will tend to increase as the number of different labels (clusters) increases, regardless of the actual amount of \u201cmutual information\u201d between the label assignments.", "The expected value for the mutual information can be calculated using the following equation [VEB2009]. In this equation, \\(a_i = |U_i|\\) (the number of elements in \\(U_i\\)) and \\(b_j = |V_j|\\) (the number of elements in \\(V_j\\)).", "Using the expected value, the adjusted mutual information can then be calculated using a similar form to that of the adjusted Rand index:", "For normalized mutual information and adjusted mutual information, the normalizing value is typically some generalized mean of the entropies of each clustering. Various generalized means exist, and no firm rules exist for preferring one over the others. The decision is largely a field-by-field basis; for instance, in community detection, the arithmetic mean is most common. Each normalizing method provides \u201cqualitatively similar behaviours\u201d [YAT2016]. In our implementation, this is controlled by the average_method parameter.", "Vinh et al. (2010) named variants of NMI and AMI by their averaging method [VEB2010]. Their \u2018sqrt\u2019 and \u2018sum\u2019 averages are the geometric and arithmetic means; we use these more broadly common names.", "References", "Vinh, Epps, and Bailey, (2009). \u201cInformation theoretic measures for clusterings comparison\u201d. Proceedings of the 26th Annual International Conference on Machine Learning - ICML \u201809. doi:10.1145/1553374.1553511. ISBN 9781605585161.", "Vinh, Epps, and Bailey, (2010). \u201cInformation Theoretic Measures for Clusterings Comparison: Variants, Properties, Normalization and Correction for Chance\u201d. JMLR <http://jmlr.csail.mit.edu/papers/volume11/vinh10a/vinh10a.pdf>", "Yang, Algesheimer, and Tessone, (2016). \u201cA comparative analysis of community detection algorithms on artificial networks\u201d. Scientific Reports 6: 30750. doi:10.1038/srep30750.", "Given the knowledge of the ground truth class assignments of the samples, it is possible to define some intuitive metric using conditional entropy analysis.", "In particular Rosenberg and Hirschberg (2007) define the following two desirable objectives for any cluster assignment:", "We can turn those concept as scores homogeneity_score and completeness_score. Both are bounded below by 0.0 and above by 1.0 (higher is better):", "Their harmonic mean called V-measure is computed by v_measure_score:", "This function\u2019s formula is as follows:", "beta defaults to a value of 1.0, but for using a value less than 1 for beta:", "more weight will be attributed to homogeneity, and using a value greater than 1:", "more weight will be attributed to completeness.", "The V-measure is actually equivalent to the mutual information (NMI) discussed above, with the aggregation function being the arithmetic mean [B2011].", "Homogeneity, completeness and V-measure can be computed at once using homogeneity_completeness_v_measure as follows:", "The following clustering assignment is slightly better, since it is homogeneous but not complete:", "Note", "v_measure_score is symmetric: it can be used to evaluate the agreement of two independent assignments on the same dataset.", "This is not the case for completeness_score and homogeneity_score: both are bound by the relationship:", "The previously introduced metrics are not normalized with regards to random labeling: this means that depending on the number of samples, clusters and ground truth classes, a completely random labeling will not always yield the same values for homogeneity, completeness and hence v-measure. In particular random labeling won\u2019t yield zero scores especially when the number of clusters is large.", "This problem can safely be ignored when the number of samples is more than a thousand and the number of clusters is less than 10. For smaller sample sizes or larger number of clusters it is safer to use an adjusted index such as the Adjusted Rand Index (ARI).", "Examples:", "Homogeneity and completeness scores are formally given by:", "where \\(H(C|K)\\) is the conditional entropy of the classes given the cluster assignments and is given by:", "and \\(H(C)\\) is the entropy of the classes and is given by:", "with \\(n\\) the total number of samples, \\(n_c\\) and \\(n_k\\) the number of samples respectively belonging to class \\(c\\) and cluster \\(k\\), and finally \\(n_{c,k}\\) the number of samples from class \\(c\\) assigned to cluster \\(k\\).", "The conditional entropy of clusters given class \\(H(K|C)\\) and the entropy of clusters \\(H(K)\\) are defined in a symmetric manner.", "Rosenberg and Hirschberg further define V-measure as the harmonic mean of homogeneity and completeness:", "References", "Identication and Characterization of Events in Social Media, Hila Becker, PhD Thesis.", "The Fowlkes-Mallows index (sklearn.metrics.fowlkes_mallows_score) can be used when the ground truth class assignments of the samples is known. The Fowlkes-Mallows score FMI is defined as the geometric mean of the pairwise precision and recall:", "Where TP is the number of True Positive (i.e. the number of pair of points that belong to the same clusters in both the true labels and the predicted labels), FP is the number of False Positive (i.e. the number of pair of points that belong to the same clusters in the true labels and not in the predicted labels) and FN is the number of False Negative (i.e the number of pair of points that belongs in the same clusters in the predicted labels and not in the true labels).", "The score ranges from 0 to 1. A high value indicates a good similarity between two clusters.", "One can permute 0 and 1 in the predicted labels, rename 2 to 3 and get the same score:", "Perfect labeling is scored 1.0:", "Bad (e.g. independent labelings) have zero scores:", "References", "If the ground truth labels are not known, evaluation must be performed using the model itself. The Silhouette Coefficient (sklearn.metrics.silhouette_score) is an example of such an evaluation, where a higher Silhouette Coefficient score relates to a model with better defined clusters. The Silhouette Coefficient is defined for each sample and is composed of two scores:", "The Silhouette Coefficient s for a single sample is then given as:", "The Silhouette Coefficient for a set of samples is given as the mean of the Silhouette Coefficient for each sample.", "In normal usage, the Silhouette Coefficient is applied to the results of a cluster analysis.", "References", "Examples:", "If the ground truth labels are not known, the Calinski-Harabasz index (sklearn.metrics.calinski_harabasz_score) - also known as the Variance Ratio Criterion - can be used to evaluate the model, where a higher Calinski-Harabasz score relates to a model with better defined clusters.", "The index is the ratio of the sum of between-clusters dispersion and of within-cluster dispersion for all clusters (where dispersion is defined as the sum of distances squared):", "In normal usage, the Calinski-Harabasz index is applied to the results of a cluster analysis:", "For a set of data \\(E\\) of size \\(n_E\\) which has been clustered into \\(k\\) clusters, the Calinski-Harabasz score \\(s\\) is defined as the ratio of the between-clusters dispersion mean and the within-cluster dispersion:", "where \\(\\mathrm{tr}(B_k)\\) is trace of the between group dispersion matrix and \\(\\mathrm{tr}(W_k)\\) is the trace of the within-cluster dispersion matrix defined by:", "with \\(C_q\\) the set of points in cluster \\(q\\), \\(c_q\\) the center of cluster \\(q\\), \\(c_E\\) the center of \\(E\\), and \\(n_q\\) the number of points in cluster \\(q\\).", "References", "If the ground truth labels are not known, the Davies-Bouldin index (sklearn.metrics.davies_bouldin_score) can be used to evaluate the model, where a lower Davies-Bouldin index relates to a model with better separation between the clusters.", "This index signifies the average \u2018similarity\u2019 between clusters, where the similarity is a measure that compares the distance between clusters with the size of the clusters themselves.", "Zero is the lowest possible score. Values closer to zero indicate a better partition.", "In normal usage, the Davies-Bouldin index is applied to the results of a cluster analysis as follows:", "The index is defined as the average similarity between each cluster \\(C_i\\) for \\(i=1, ..., k\\) and its most similar one \\(C_j\\). In the context of this index, similarity is defined as a measure \\(R_{ij}\\) that trades off:", "A simple choice to construct \\(R_{ij}\\) so that it is nonnegative and symmetric is:", "Then the Davies-Bouldin index is defined as:", "References", "Contingency matrix (sklearn.metrics.cluster.contingency_matrix) reports the intersection cardinality for every true/predicted cluster pair. The contingency matrix provides sufficient statistics for all clustering metrics where the samples are independent and identically distributed and one doesn\u2019t need to account for some instances not being clustered.", "Here is an example:", "The first row of output array indicates that there are three samples whose true cluster is \u201ca\u201d. Of them, two are in predicted cluster 0, one is in 1, and none is in 2. And the second row indicates that there are three samples whose true cluster is \u201cb\u201d. Of them, none is in predicted cluster 0, one is in 1 and two are in 2.", "A confusion matrix for classification is a square contingency matrix where the order of rows and columns correspond to a list of classes.", "References", "The pair confusion matrix (sklearn.metrics.cluster.pair_confusion_matrix) is a 2x2 similarity matrix", "between two clusterings computed by considering all pairs of samples and counting pairs that are assigned into the same or into different clusters under the true and predicted clusterings.", "It has the following entries:", "\\(C_{00}\\) : number of pairs with both clusterings having the samples not clustered together", "\\(C_{10}\\) : number of pairs with the true label clustering having the samples clustered together but the other clustering not having the samples clustered together", "\\(C_{01}\\) : number of pairs with the true label clustering not having the samples clustered together but the other clustering having the samples clustered together", "\\(C_{11}\\) : number of pairs with both clusterings having the samples clustered together", "Considering a pair of samples that is clustered together a positive pair, then as in binary classification the count of true negatives is \\(C_{00}\\), false negatives is \\(C_{10}\\), true positives is \\(C_{11}\\) and false positives is \\(C_{01}\\).", "Perfectly matching labelings have all non-zero entries on the diagonal regardless of actual label values:", "Labelings that assign all classes members to the same clusters are complete but may not always be pure, hence penalized, and have some off-diagonal non-zero entries:", "The matrix is not symmetric:", "If classes members are completely split across different clusters, the assignment is totally incomplete, hence the matrix has all zero diagonal entries:", "References"]}, {"name": "2.4. Biclustering", "path": "modules/biclustering", "type": "Guide", "text": ["Biclustering can be performed with the module sklearn.cluster.bicluster. Biclustering algorithms simultaneously cluster rows and columns of a data matrix. These clusters of rows and columns are known as biclusters. Each determines a submatrix of the original data matrix with some desired properties.", "For instance, given a matrix of shape (10, 10), one possible bicluster with three rows and two columns induces a submatrix of shape (3, 2):", "For visualization purposes, given a bicluster, the rows and columns of the data matrix may be rearranged to make the bicluster contiguous.", "Algorithms differ in how they define biclusters. Some of the common types include:", "Algorithms also differ in how rows and columns may be assigned to biclusters, which leads to different bicluster structures. Block diagonal or checkerboard structures occur when rows and columns are divided into partitions.", "If each row and each column belongs to exactly one bicluster, then rearranging the rows and columns of the data matrix reveals the biclusters on the diagonal. Here is an example of this structure where biclusters have higher average values than the other rows and columns:", "An example of biclusters formed by partitioning rows and columns.", "In the checkerboard case, each row belongs to all column clusters, and each column belongs to all row clusters. Here is an example of this structure where the variance of the values within each bicluster is small:", "An example of checkerboard biclusters.", "After fitting a model, row and column cluster membership can be found in the rows_ and columns_ attributes. rows_[i] is a binary vector with nonzero entries corresponding to rows that belong to bicluster i. Similarly, columns_[i] indicates which columns belong to bicluster i.", "Some models also have row_labels_ and column_labels_ attributes. These models partition the rows and columns, such as in the block diagonal and checkerboard bicluster structures.", "Note", "Biclustering has many other names in different fields including co-clustering, two-mode clustering, two-way clustering, block clustering, coupled two-way clustering, etc. The names of some algorithms, such as the Spectral Co-Clustering algorithm, reflect these alternate names.", "The SpectralCoclustering algorithm finds biclusters with values higher than those in the corresponding other rows and columns. Each row and each column belongs to exactly one bicluster, so rearranging the rows and columns to make partitions contiguous reveals these high values along the diagonal:", "Note", "The algorithm treats the input data matrix as a bipartite graph: the rows and columns of the matrix correspond to the two sets of vertices, and each entry corresponds to an edge between a row and a column. The algorithm approximates the normalized cut of this graph to find heavy subgraphs.", "An approximate solution to the optimal normalized cut may be found via the generalized eigenvalue decomposition of the Laplacian of the graph. Usually this would mean working directly with the Laplacian matrix. If the original data matrix \\(A\\) has shape \\(m \\times n\\), the Laplacian matrix for the corresponding bipartite graph has shape \\((m + n) \\times (m + n)\\). However, in this case it is possible to work directly with \\(A\\), which is smaller and more efficient.", "The input matrix \\(A\\) is preprocessed as follows:", "Where \\(R\\) is the diagonal matrix with entry \\(i\\) equal to \\(\\sum_{j} A_{ij}\\) and \\(C\\) is the diagonal matrix with entry \\(j\\) equal to \\(\\sum_{i} A_{ij}\\).", "The singular value decomposition, \\(A_n = U \\Sigma V^\\top\\), provides the partitions of the rows and columns of \\(A\\). A subset of the left singular vectors gives the row partitions, and a subset of the right singular vectors gives the column partitions.", "The \\(\\ell = \\lceil \\log_2 k \\rceil\\) singular vectors, starting from the second, provide the desired partitioning information. They are used to form the matrix \\(Z\\):", "where the columns of \\(U\\) are \\(u_2, \\dots, u_{\\ell + 1}\\), and similarly for \\(V\\).", "Then the rows of \\(Z\\) are clustered using k-means. The first n_rows labels provide the row partitioning, and the remaining n_columns labels provide the column partitioning.", "Examples:", "References:", "The SpectralBiclustering algorithm assumes that the input data matrix has a hidden checkerboard structure. The rows and columns of a matrix with this structure may be partitioned so that the entries of any bicluster in the Cartesian product of row clusters and column clusters are approximately constant. For instance, if there are two row partitions and three column partitions, each row will belong to three biclusters, and each column will belong to two biclusters.", "The algorithm partitions the rows and columns of a matrix so that a corresponding blockwise-constant checkerboard matrix provides a good approximation to the original matrix.", "The input matrix \\(A\\) is first normalized to make the checkerboard pattern more obvious. There are three possible methods:", "After normalizing, the first few singular vectors are computed, just as in the Spectral Co-Clustering algorithm.", "If log normalization was used, all the singular vectors are meaningful. However, if independent normalization or bistochastization were used, the first singular vectors, \\(u_1\\) and \\(v_1\\). are discarded. From now on, the \u201cfirst\u201d singular vectors refers to \\(u_2 \\dots u_{p+1}\\) and \\(v_2 \\dots v_{p+1}\\) except in the case of log normalization.", "Given these singular vectors, they are ranked according to which can be best approximated by a piecewise-constant vector. The approximations for each vector are found using one-dimensional k-means and scored using the Euclidean distance. Some subset of the best left and right singular vector are selected. Next, the data is projected to this best subset of singular vectors and clustered.", "For instance, if \\(p\\) singular vectors were calculated, the \\(q\\) best are found as described, where \\(q<p\\). Let \\(U\\) be the matrix with columns the \\(q\\) best left singular vectors, and similarly \\(V\\) for the right. To partition the rows, the rows of \\(A\\) are projected to a \\(q\\) dimensional space: \\(A * V\\). Treating the \\(m\\) rows of this \\(m \\times q\\) matrix as samples and clustering using k-means yields the row labels. Similarly, projecting the columns to \\(A^{\\top} * U\\) and clustering this \\(n \\times q\\) matrix yields the column labels.", "Examples:", "References:", "There are two ways of evaluating a biclustering result: internal and external. Internal measures, such as cluster stability, rely only on the data and the result themselves. Currently there are no internal bicluster measures in scikit-learn. External measures refer to an external source of information, such as the true solution. When working with real data the true solution is usually unknown, but biclustering artificial data may be useful for evaluating algorithms precisely because the true solution is known.", "To compare a set of found biclusters to the set of true biclusters, two similarity measures are needed: a similarity measure for individual biclusters, and a way to combine these individual similarities into an overall score.", "To compare individual biclusters, several measures have been used. For now, only the Jaccard index is implemented:", "where \\(A\\) and \\(B\\) are biclusters, \\(|A \\cap B|\\) is the number of elements in their intersection. The Jaccard index achieves its minimum of 0 when the biclusters to not overlap at all and its maximum of 1 when they are identical.", "Several methods have been developed to compare two sets of biclusters. For now, only consensus_score (Hochreiter et. al., 2010) is available:", "The minimum consensus score, 0, occurs when all pairs of biclusters are totally dissimilar. The maximum score, 1, occurs when both sets are identical.", "References:"]}, {"name": "2.5. Decomposing signals in components", "path": "modules/decomposition", "type": "Guide", "text": ["PCA is used to decompose a multivariate dataset in a set of successive orthogonal components that explain a maximum amount of the variance. In scikit-learn, PCA is implemented as a transformer object that learns \\(n\\) components in its fit method, and can be used on new data to project it on these components.", "PCA centers but does not scale the input data for each feature before applying the SVD. The optional parameter whiten=True makes it possible to project the data onto the singular space while scaling each component to unit variance. This is often useful if the models down-stream make strong assumptions on the isotropy of the signal: this is for example the case for Support Vector Machines with the RBF kernel and the K-Means clustering algorithm.", "Below is an example of the iris dataset, which is comprised of 4 features, projected on the 2 dimensions that explain most variance:", "The PCA object also provides a probabilistic interpretation of the PCA that can give a likelihood of data based on the amount of variance it explains. As such it implements a score method that can be used in cross-validation:", "Examples:", "The PCA object is very useful, but has certain limitations for large datasets. The biggest limitation is that PCA only supports batch processing, which means all of the data to be processed must fit in main memory. The IncrementalPCA object uses a different form of processing and allows for partial computations which almost exactly match the results of PCA while processing the data in a minibatch fashion. IncrementalPCA makes it possible to implement out-of-core Principal Component Analysis either by:", "IncrementalPCA only stores estimates of component and noise variances, in order update explained_variance_ratio_ incrementally. This is why memory usage depends on the number of samples per batch, rather than the number of samples to be processed in the dataset.", "As in PCA, IncrementalPCA centers but does not scale the input data for each feature before applying the SVD.", "Examples:", "It is often interesting to project data to a lower-dimensional space that preserves most of the variance, by dropping the singular vector of components associated with lower singular values.", "For instance, if we work with 64x64 pixel gray-level pictures for face recognition, the dimensionality of the data is 4096 and it is slow to train an RBF support vector machine on such wide data. Furthermore we know that the intrinsic dimensionality of the data is much lower than 4096 since all pictures of human faces look somewhat alike. The samples lie on a manifold of much lower dimension (say around 200 for instance). The PCA algorithm can be used to linearly transform the data while both reducing the dimensionality and preserve most of the explained variance at the same time.", "The class PCA used with the optional parameter svd_solver='randomized' is very useful in that case: since we are going to drop most of the singular vectors it is much more efficient to limit the computation to an approximated estimate of the singular vectors we will keep to actually perform the transform.", "For instance, the following shows 16 sample portraits (centered around 0.0) from the Olivetti dataset. On the right hand side are the first 16 singular vectors reshaped as portraits. Since we only require the top 16 singular vectors of a dataset with size \\(n_{samples} = 400\\) and \\(n_{features} = 64 \\times 64 = 4096\\), the computation time is less than 1s:", "  ", "If we note \\(n_{\\max} = \\max(n_{\\mathrm{samples}}, n_{\\mathrm{features}})\\) and \\(n_{\\min} = \\min(n_{\\mathrm{samples}}, n_{\\mathrm{features}})\\), the time complexity of the randomized PCA is \\(O(n_{\\max}^2 \\cdot n_{\\mathrm{components}})\\) instead of \\(O(n_{\\max}^2 \\cdot n_{\\min})\\) for the exact method implemented in PCA.", "The memory footprint of randomized PCA is also proportional to \\(2 \\cdot n_{\\max} \\cdot n_{\\mathrm{components}}\\) instead of \\(n_{\\max} \\cdot n_{\\min}\\) for the exact method.", "Note: the implementation of inverse_transform in PCA with svd_solver='randomized' is not the exact inverse transform of transform even when whiten=False (default).", "Examples:", "References:", "KernelPCA is an extension of PCA which achieves non-linear dimensionality reduction through the use of kernels (see Pairwise metrics, Affinities and Kernels). It has many applications including denoising, compression and structured prediction (kernel dependency estimation). KernelPCA supports both transform and inverse_transform.", "Examples:", "SparsePCA is a variant of PCA, with the goal of extracting the set of sparse components that best reconstruct the data.", "Mini-batch sparse PCA (MiniBatchSparsePCA) is a variant of SparsePCA that is faster but less accurate. The increased speed is reached by iterating over small chunks of the set of features, for a given number of iterations.", "Principal component analysis (PCA) has the disadvantage that the components extracted by this method have exclusively dense expressions, i.e. they have non-zero coefficients when expressed as linear combinations of the original variables. This can make interpretation difficult. In many cases, the real underlying components can be more naturally imagined as sparse vectors; for example in face recognition, components might naturally map to parts of faces.", "Sparse principal components yields a more parsimonious, interpretable representation, clearly emphasizing which of the original features contribute to the differences between samples.", "The following example illustrates 16 components extracted using sparse PCA from the Olivetti faces dataset. It can be seen how the regularization term induces many zeros. Furthermore, the natural structure of the data causes the non-zero coefficients to be vertically adjacent. The model does not enforce this mathematically: each component is a vector \\(h \\in \\mathbf{R}^{4096}\\), and there is no notion of vertical adjacency except during the human-friendly visualization as 64x64 pixel images. The fact that the components shown below appear local is the effect of the inherent structure of the data, which makes such local patterns minimize reconstruction error. There exist sparsity-inducing norms that take into account adjacency and different kinds of structure; see [Jen09] for a review of such methods. For more details on how to use Sparse PCA, see the Examples section, below.", "  ", "Note that there are many different formulations for the Sparse PCA problem. The one implemented here is based on [Mrl09] . The optimization problem solved is a PCA problem (dictionary learning) with an \\(\\ell_1\\) penalty on the components:", "The sparsity-inducing \\(\\ell_1\\) norm also prevents learning components from noise when few training samples are available. The degree of penalization (and thus sparsity) can be adjusted through the hyperparameter alpha. Small values lead to a gently regularized factorization, while larger values shrink many coefficients to zero.", "Note", "While in the spirit of an online algorithm, the class MiniBatchSparsePCA does not implement partial_fit because the algorithm is online along the features direction, not the samples direction.", "Examples:", "References:", "\u201cOnline Dictionary Learning for Sparse Coding\u201d J. Mairal, F. Bach, J. Ponce, G. Sapiro, 2009", "\u201cStructured Sparse Principal Component Analysis\u201d R. Jenatton, G. Obozinski, F. Bach, 2009", "TruncatedSVD implements a variant of singular value decomposition (SVD) that only computes the \\(k\\) largest singular values, where \\(k\\) is a user-specified parameter.", "When truncated SVD is applied to term-document matrices (as returned by CountVectorizer or TfidfVectorizer), this transformation is known as latent semantic analysis (LSA), because it transforms such matrices to a \u201csemantic\u201d space of low dimensionality. In particular, LSA is known to combat the effects of synonymy and polysemy (both of which roughly mean there are multiple meanings per word), which cause term-document matrices to be overly sparse and exhibit poor similarity under measures such as cosine similarity.", "Note", "LSA is also known as latent semantic indexing, LSI, though strictly that refers to its use in persistent indexes for information retrieval purposes.", "Mathematically, truncated SVD applied to training samples \\(X\\) produces a low-rank approximation \\(X\\):", "After this operation, \\(U_k \\Sigma_k^\\top\\) is the transformed training set with \\(k\\) features (called n_components in the API).", "To also transform a test set \\(X\\), we multiply it with \\(V_k\\):", "Note", "Most treatments of LSA in the natural language processing (NLP) and information retrieval (IR) literature swap the axes of the matrix \\(X\\) so that it has shape n_features \u00d7 n_samples. We present LSA in a different way that matches the scikit-learn API better, but the singular values found are the same.", "TruncatedSVD is very similar to PCA, but differs in that the matrix \\(X\\) does not need to be centered. When the columnwise (per-feature) means of \\(X\\) are subtracted from the feature values, truncated SVD on the resulting matrix is equivalent to PCA. In practical terms, this means that the TruncatedSVD transformer accepts scipy.sparse matrices without the need to densify them, as densifying may fill up memory even for medium-sized document collections.", "While the TruncatedSVD transformer works with any feature matrix, using it on tf\u2013idf matrices is recommended over raw frequency counts in an LSA/document processing setting. In particular, sublinear scaling and inverse document frequency should be turned on (sublinear_tf=True, use_idf=True) to bring the feature values closer to a Gaussian distribution, compensating for LSA\u2019s erroneous assumptions about textual data.", "Examples:", "References:", "The SparseCoder object is an estimator that can be used to transform signals into sparse linear combination of atoms from a fixed, precomputed dictionary such as a discrete wavelet basis. This object therefore does not implement a fit method. The transformation amounts to a sparse coding problem: finding a representation of the data as a linear combination of as few dictionary atoms as possible. All variations of dictionary learning implement the following transform methods, controllable via the transform_method initialization parameter:", "Thresholding is very fast but it does not yield accurate reconstructions. They have been shown useful in literature for classification tasks. For image reconstruction tasks, orthogonal matching pursuit yields the most accurate, unbiased reconstruction.", "The dictionary learning objects offer, via the split_code parameter, the possibility to separate the positive and negative values in the results of sparse coding. This is useful when dictionary learning is used for extracting features that will be used for supervised learning, because it allows the learning algorithm to assign different weights to negative loadings of a particular atom, from to the corresponding positive loading.", "The split code for a single sample has length 2 * n_components and is constructed using the following rule: First, the regular code of length n_components is computed. Then, the first n_components entries of the split_code are filled with the positive part of the regular code vector. The second half of the split code is filled with the negative part of the code vector, only with a positive sign. Therefore, the split_code is non-negative.", "Examples:", "Dictionary learning (DictionaryLearning) is a matrix factorization problem that amounts to finding a (usually overcomplete) dictionary that will perform well at sparsely encoding the fitted data.", "Representing data as sparse combinations of atoms from an overcomplete dictionary is suggested to be the way the mammalian primary visual cortex works. Consequently, dictionary learning applied on image patches has been shown to give good results in image processing tasks such as image completion, inpainting and denoising, as well as for supervised recognition tasks.", "Dictionary learning is an optimization problem solved by alternatively updating the sparse code, as a solution to multiple Lasso problems, considering the dictionary fixed, and then updating the dictionary to best fit the sparse code.", "  ", "After using such a procedure to fit the dictionary, the transform is simply a sparse coding step that shares the same implementation with all dictionary learning objects (see Sparse coding with a precomputed dictionary).", "It is also possible to constrain the dictionary and/or code to be positive to match constraints that may be present in the data. Below are the faces with different positivity constraints applied. Red indicates negative values, blue indicates positive values, and white represents zeros.", "  ", "  ", "The following image shows how a dictionary learned from 4x4 pixel image patches extracted from part of the image of a raccoon face looks like.", "Examples:", "References:", "MiniBatchDictionaryLearning implements a faster, but less accurate version of the dictionary learning algorithm that is better suited for large datasets.", "By default, MiniBatchDictionaryLearning divides the data into mini-batches and optimizes in an online manner by cycling over the mini-batches for the specified number of iterations. However, at the moment it does not implement a stopping condition.", "The estimator also implements partial_fit, which updates the dictionary by iterating only once over a mini-batch. This can be used for online learning when the data is not readily available from the start, or for when the data does not fit into the memory.", "Clustering for dictionary learning", "Note that when using dictionary learning to extract a representation (e.g. for sparse coding) clustering can be a good proxy to learn the dictionary. For instance the MiniBatchKMeans estimator is computationally efficient and implements on-line learning with a partial_fit method.", "Example: Online learning of a dictionary of parts of faces", "In unsupervised learning we only have a dataset \\(X = \\{x_1, x_2, \\dots, x_n \\}\\). How can this dataset be described mathematically? A very simple continuous latent variable model for \\(X\\) is", "The vector \\(h_i\\) is called \u201clatent\u201d because it is unobserved. \\(\\epsilon\\) is considered a noise term distributed according to a Gaussian with mean 0 and covariance \\(\\Psi\\) (i.e. \\(\\epsilon \\sim \\mathcal{N}(0, \\Psi)\\)), \\(\\mu\\) is some arbitrary offset vector. Such a model is called \u201cgenerative\u201d as it describes how \\(x_i\\) is generated from \\(h_i\\). If we use all the \\(x_i\\)\u2019s as columns to form a matrix \\(\\mathbf{X}\\) and all the \\(h_i\\)\u2019s as columns of a matrix \\(\\mathbf{H}\\) then we can write (with suitably defined \\(\\mathbf{M}\\) and \\(\\mathbf{E}\\)):", "In other words, we decomposed matrix \\(\\mathbf{X}\\).", "If \\(h_i\\) is given, the above equation automatically implies the following probabilistic interpretation:", "For a complete probabilistic model we also need a prior distribution for the latent variable \\(h\\). The most straightforward assumption (based on the nice properties of the Gaussian distribution) is \\(h \\sim \\mathcal{N}(0, \\mathbf{I})\\). This yields a Gaussian as the marginal distribution of \\(x\\):", "Now, without any further assumptions the idea of having a latent variable \\(h\\) would be superfluous \u2013 \\(x\\) can be completely modelled with a mean and a covariance. We need to impose some more specific structure on one of these two parameters. A simple additional assumption regards the structure of the error covariance \\(\\Psi\\):", "Both models essentially estimate a Gaussian with a low-rank covariance matrix. Because both models are probabilistic they can be integrated in more complex models, e.g. Mixture of Factor Analysers. One gets very different models (e.g. FastICA) if non-Gaussian priors on the latent variables are assumed.", "Factor analysis can produce similar components (the columns of its loading matrix) to PCA. However, one can not make any general statements about these components (e.g. whether they are orthogonal):", "  ", "The main advantage for Factor Analysis over PCA is that it can model the variance in every direction of the input space independently (heteroscedastic noise):", "This allows better model selection than probabilistic PCA in the presence of heteroscedastic noise:", "Factor Analysis is often followed by a rotation of the factors (with the parameter rotation), usually to improve interpretability. For example, Varimax rotation maximizes the sum of the variances of the squared loadings, i.e., it tends to produce sparser factors, which are influenced by only a few features each (the \u201csimple structure\u201d). See e.g., the first example below.", "Examples:", "Independent component analysis separates a multivariate signal into additive subcomponents that are maximally independent. It is implemented in scikit-learn using the Fast ICA algorithm. Typically, ICA is not used for reducing dimensionality but for separating superimposed signals. Since the ICA model does not include a noise term, for the model to be correct, whitening must be applied. This can be done internally using the whiten argument or manually using one of the PCA variants.", "It is classically used to separate mixed signals (a problem known as blind source separation), as in the example below:", "ICA can also be used as yet another non linear decomposition that finds components with some sparsity:", "  ", "Examples:", "NMF 1 is an alternative approach to decomposition that assumes that the data and the components are non-negative. NMF can be plugged in instead of PCA or its variants, in the cases where the data matrix does not contain negative values. It finds a decomposition of samples \\(X\\) into two matrices \\(W\\) and \\(H\\) of non-negative elements, by optimizing the distance \\(d\\) between \\(X\\) and the matrix product \\(WH\\). The most widely used distance function is the squared Frobenius norm, which is an obvious extension of the Euclidean norm to matrices:", "Unlike PCA, the representation of a vector is obtained in an additive fashion, by superimposing the components, without subtracting. Such additive models are efficient for representing images and text.", "It has been observed in [Hoyer, 2004] 2 that, when carefully constrained, NMF can produce a parts-based representation of the dataset, resulting in interpretable models. The following example displays 16 sparse components found by NMF from the images in the Olivetti faces dataset, in comparison with the PCA eigenfaces.", "  ", "The init attribute determines the initialization method applied, which has a great impact on the performance of the method. NMF implements the method Nonnegative Double Singular Value Decomposition. NNDSVD 4 is based on two SVD processes, one approximating the data matrix, the other approximating positive sections of the resulting partial SVD factors utilizing an algebraic property of unit rank matrices. The basic NNDSVD algorithm is better fit for sparse factorization. Its variants NNDSVDa (in which all zeros are set equal to the mean of all elements of the data), and NNDSVDar (in which the zeros are set to random perturbations less than the mean of the data divided by 100) are recommended in the dense case.", "Note that the Multiplicative Update (\u2018mu\u2019) solver cannot update zeros present in the initialization, so it leads to poorer results when used jointly with the basic NNDSVD algorithm which introduces a lot of zeros; in this case, NNDSVDa or NNDSVDar should be preferred.", "NMF can also be initialized with correctly scaled random non-negative matrices by setting init=\"random\". An integer seed or a RandomState can also be passed to random_state to control reproducibility.", "In NMF, L1 and L2 priors can be added to the loss function in order to regularize the model. The L2 prior uses the Frobenius norm, while the L1 prior uses an elementwise L1 norm. As in ElasticNet, we control the combination of L1 and L2 with the l1_ratio (\\(\\rho\\)) parameter, and the intensity of the regularization with the alpha (\\(\\alpha\\)) parameter. Then the priors terms are:", "and the regularized objective function is:", "NMF regularizes both W and H by default. The regularization parameter allows for finer control, with which only W, only H, or both can be regularized.", "As described previously, the most widely used distance function is the squared Frobenius norm, which is an obvious extension of the Euclidean norm to matrices:", "Other distance functions can be used in NMF as, for example, the (generalized) Kullback-Leibler (KL) divergence, also referred as I-divergence:", "Or, the Itakura-Saito (IS) divergence:", "These three distances are special cases of the beta-divergence family, with \\(\\beta = 2, 1, 0\\) respectively 6. The beta-divergence are defined by :", "Note that this definition is not valid if \\(\\beta \\in (0; 1)\\), yet it can be continuously extended to the definitions of \\(d_{KL}\\) and \\(d_{IS}\\) respectively.", "NMF implements two solvers, using Coordinate Descent (\u2018cd\u2019) 5, and Multiplicative Update (\u2018mu\u2019) 6. The \u2018mu\u2019 solver can optimize every beta-divergence, including of course the Frobenius norm (\\(\\beta=2\\)), the (generalized) Kullback-Leibler divergence (\\(\\beta=1\\)) and the Itakura-Saito divergence (\\(\\beta=0\\)). Note that for \\(\\beta \\in (1; 2)\\), the \u2018mu\u2019 solver is significantly faster than for other values of \\(\\beta\\). Note also that with a negative (or 0, i.e. \u2018itakura-saito\u2019) \\(\\beta\\), the input matrix cannot contain zero values.", "The \u2018cd\u2019 solver can only optimize the Frobenius norm. Due to the underlying non-convexity of NMF, the different solvers may converge to different minima, even when optimizing the same distance function.", "NMF is best used with the fit_transform method, which returns the matrix W. The matrix H is stored into the fitted model in the components_ attribute; the method transform will decompose a new matrix X_new based on these stored components:", "Examples:", "References:", "\u201cLearning the parts of objects by non-negative matrix factorization\u201d D. Lee, S. Seung, 1999", "\u201cNon-negative Matrix Factorization with Sparseness Constraints\u201d P. Hoyer, 2004", "\u201cSVD based initialization: A head start for nonnegative matrix factorization\u201d C. Boutsidis, E. Gallopoulos, 2008", "\u201cFast local algorithms for large scale nonnegative matrix and tensor factorizations.\u201d A. Cichocki, A. Phan, 2009", "\u201cAlgorithms for nonnegative matrix factorization with the beta-divergence\u201d C. Fevotte, J. Idier, 2011", "Latent Dirichlet Allocation is a generative probabilistic model for collections of discrete dataset such as text corpora. It is also a topic model that is used for discovering abstract topics from a collection of documents.", "The graphical model of LDA is a three-level generative model:", "Note on notations presented in the graphical model above, which can be found in Hoffman et al. (2013):", "In the graphical model, each node is a random variable and has a role in the generative process. A shaded node indicates an observed variable and an unshaded node indicates a hidden (latent) variable. In this case, words in the corpus are the only data that we observe. The latent variables determine the random mixture of topics in the corpus and the distribution of words in the documents. The goal of LDA is to use the observed words to infer the hidden topic structure.", "When modeling text corpora, the model assumes the following generative process for a corpus with \\(D\\) documents and \\(K\\) topics, with \\(K\\) corresponding to n_components in the API:", "For parameter estimation, the posterior distribution is:", "Since the posterior is intractable, variational Bayesian method uses a simpler distribution \\(q(z,\\theta,\\beta | \\lambda, \\phi, \\gamma)\\) to approximate it, and those variational parameters \\(\\lambda\\), \\(\\phi\\), \\(\\gamma\\) are optimized to maximize the Evidence Lower Bound (ELBO):", "Maximizing ELBO is equivalent to minimizing the Kullback-Leibler(KL) divergence between \\(q(z,\\theta,\\beta)\\) and the true posterior \\(p(z, \\theta, \\beta |w, \\alpha, \\eta)\\).", "LatentDirichletAllocation implements the online variational Bayes algorithm and supports both online and batch update methods. While the batch method updates variational variables after each full pass through the data, the online method updates variational variables from mini-batch data points.", "Note", "Although the online method is guaranteed to converge to a local optimum point, the quality of the optimum point and the speed of convergence may depend on mini-batch size and attributes related to learning rate setting.", "When LatentDirichletAllocation is applied on a \u201cdocument-term\u201d matrix, the matrix will be decomposed into a \u201ctopic-term\u201d matrix and a \u201cdocument-topic\u201d matrix. While \u201ctopic-term\u201d matrix is stored as components_ in the model, \u201cdocument-topic\u201d matrix can be calculated from transform method.", "LatentDirichletAllocation also implements partial_fit method. This is used when data can be fetched sequentially.", "Examples:", "References:", "See also Dimensionality reduction for dimensionality reduction with Neighborhood Components Analysis."]}, {"name": "2.6. Covariance estimation", "path": "modules/covariance", "type": "Guide", "text": ["Many statistical problems require the estimation of a population\u2019s covariance matrix, which can be seen as an estimation of data set scatter plot shape. Most of the time, such an estimation has to be done on a sample whose properties (size, structure, homogeneity) have a large influence on the estimation\u2019s quality. The sklearn.covariance package provides tools for accurately estimating a population\u2019s covariance matrix under various settings.", "We assume that the observations are independent and identically distributed (i.i.d.).", "The covariance matrix of a data set is known to be well approximated by the classical maximum likelihood estimator (or \u201cempirical covariance\u201d), provided the number of observations is large enough compared to the number of features (the variables describing the observations). More precisely, the Maximum Likelihood Estimator of a sample is an asymptotically unbiased estimator of the corresponding population\u2019s covariance matrix.", "The empirical covariance matrix of a sample can be computed using the empirical_covariance function of the package, or by fitting an EmpiricalCovariance object to the data sample with the EmpiricalCovariance.fit method. Be careful that results depend on whether the data are centered, so one may want to use the assume_centered parameter accurately. More precisely, if assume_centered=False, then the test set is supposed to have the same mean vector as the training set. If not, both should be centered by the user, and assume_centered=True should be used.", "Examples:", "Despite being an asymptotically unbiased estimator of the covariance matrix, the Maximum Likelihood Estimator is not a good estimator of the eigenvalues of the covariance matrix, so the precision matrix obtained from its inversion is not accurate. Sometimes, it even occurs that the empirical covariance matrix cannot be inverted for numerical reasons. To avoid such an inversion problem, a transformation of the empirical covariance matrix has been introduced: the shrinkage.", "In scikit-learn, this transformation (with a user-defined shrinkage coefficient) can be directly applied to a pre-computed covariance with the shrunk_covariance method. Also, a shrunk estimator of the covariance can be fitted to data with a ShrunkCovariance object and its ShrunkCovariance.fit method. Again, results depend on whether the data are centered, so one may want to use the assume_centered parameter accurately.", "Mathematically, this shrinkage consists in reducing the ratio between the smallest and the largest eigenvalues of the empirical covariance matrix. It can be done by simply shifting every eigenvalue according to a given offset, which is equivalent of finding the l2-penalized Maximum Likelihood Estimator of the covariance matrix. In practice, shrinkage boils down to a simple a convex transformation : \\(\\Sigma_{\\rm shrunk} = (1-\\alpha)\\hat{\\Sigma} + \\alpha\\frac{{\\rm Tr}\\hat{\\Sigma}}{p}\\rm Id\\).", "Choosing the amount of shrinkage, \\(\\alpha\\) amounts to setting a bias/variance trade-off, and is discussed below.", "Examples:", "In their 2004 paper 1, O. Ledoit and M. Wolf propose a formula to compute the optimal shrinkage coefficient \\(\\alpha\\) that minimizes the Mean Squared Error between the estimated and the real covariance matrix.", "The Ledoit-Wolf estimator of the covariance matrix can be computed on a sample with the ledoit_wolf function of the sklearn.covariance package, or it can be otherwise obtained by fitting a LedoitWolf object to the same sample.", "Note", "Case when population covariance matrix is isotropic", "It is important to note that when the number of samples is much larger than the number of features, one would expect that no shrinkage would be necessary. The intuition behind this is that if the population covariance is full rank, when the number of sample grows, the sample covariance will also become positive definite. As a result, no shrinkage would necessary and the method should automatically do this.", "This, however, is not the case in the Ledoit-Wolf procedure when the population covariance happens to be a multiple of the identity matrix. In this case, the Ledoit-Wolf shrinkage estimate approaches 1 as the number of samples increases. This indicates that the optimal estimate of the covariance matrix in the Ledoit-Wolf sense is multiple of the identity. Since the population covariance is already a multiple of the identity matrix, the Ledoit-Wolf solution is indeed a reasonable estimate.", "Examples:", "References:", "O. Ledoit and M. Wolf, \u201cA Well-Conditioned Estimator for Large-Dimensional Covariance Matrices\u201d, Journal of Multivariate Analysis, Volume 88, Issue 2, February 2004, pages 365-411.", "Under the assumption that the data are Gaussian distributed, Chen et al. 2 derived a formula aimed at choosing a shrinkage coefficient that yields a smaller Mean Squared Error than the one given by Ledoit and Wolf\u2019s formula. The resulting estimator is known as the Oracle Shrinkage Approximating estimator of the covariance.", "The OAS estimator of the covariance matrix can be computed on a sample with the oas function of the sklearn.covariance package, or it can be otherwise obtained by fitting an OAS object to the same sample.", "Bias-variance trade-off when setting the shrinkage: comparing the choices of Ledoit-Wolf and OAS estimators", "References:", "Chen et al., \u201cShrinkage Algorithms for MMSE Covariance Estimation\u201d, IEEE Trans. on Sign. Proc., Volume 58, Issue 10, October 2010.", "Examples:", "The matrix inverse of the covariance matrix, often called the precision matrix, is proportional to the partial correlation matrix. It gives the partial independence relationship. In other words, if two features are independent conditionally on the others, the corresponding coefficient in the precision matrix will be zero. This is why it makes sense to estimate a sparse precision matrix: the estimation of the covariance matrix is better conditioned by learning independence relations from the data. This is known as covariance selection.", "In the small-samples situation, in which n_samples is on the order of n_features or smaller, sparse inverse covariance estimators tend to work better than shrunk covariance estimators. However, in the opposite situation, or for very correlated data, they can be numerically unstable. In addition, unlike shrinkage estimators, sparse estimators are able to recover off-diagonal structure.", "The GraphicalLasso estimator uses an l1 penalty to enforce sparsity on the precision matrix: the higher its alpha parameter, the more sparse the precision matrix. The corresponding GraphicalLassoCV object uses cross-validation to automatically set the alpha parameter.", "A comparison of maximum likelihood, shrinkage and sparse estimates of the covariance and precision matrix in the very small samples settings.", "Note", "Structure recovery", "Recovering a graphical structure from correlations in the data is a challenging thing. If you are interested in such recovery keep in mind that:", "The mathematical formulation is the following:", "Where \\(K\\) is the precision matrix to be estimated, and \\(S\\) is the sample covariance matrix. \\(\\|K\\|_1\\) is the sum of the absolute values of off-diagonal coefficients of \\(K\\). The algorithm employed to solve this problem is the GLasso algorithm, from the Friedman 2008 Biostatistics paper. It is the same algorithm as in the R glasso package.", "Examples:", "References:", "Real data sets are often subject to measurement or recording errors. Regular but uncommon observations may also appear for a variety of reasons. Observations which are very uncommon are called outliers. The empirical covariance estimator and the shrunk covariance estimators presented above are very sensitive to the presence of outliers in the data. Therefore, one should use robust covariance estimators to estimate the covariance of its real data sets. Alternatively, robust covariance estimators can be used to perform outlier detection and discard/downweight some observations according to further processing of the data.", "The sklearn.covariance package implements a robust estimator of covariance, the Minimum Covariance Determinant 3.", "The Minimum Covariance Determinant estimator is a robust estimator of a data set\u2019s covariance introduced by P.J. Rousseeuw in 3. The idea is to find a given proportion (h) of \u201cgood\u201d observations which are not outliers and compute their empirical covariance matrix. This empirical covariance matrix is then rescaled to compensate the performed selection of observations (\u201cconsistency step\u201d). Having computed the Minimum Covariance Determinant estimator, one can give weights to observations according to their Mahalanobis distance, leading to a reweighted estimate of the covariance matrix of the data set (\u201creweighting step\u201d).", "Rousseeuw and Van Driessen 4 developed the FastMCD algorithm in order to compute the Minimum Covariance Determinant. This algorithm is used in scikit-learn when fitting an MCD object to data. The FastMCD algorithm also computes a robust estimate of the data set location at the same time.", "Raw estimates can be accessed as raw_location_ and raw_covariance_ attributes of a MinCovDet robust covariance estimator object.", "References:", "P. J. Rousseeuw. Least median of squares regression. J. Am Stat Ass, 79:871, 1984.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS.", "Examples:", "Influence of outliers on location and covariance estimates", "Separating inliers from outliers using a Mahalanobis distance", "", ""]}, {"name": "2.7. Novelty and Outlier Detection", "path": "modules/outlier_detection", "type": "Guide", "text": ["Many applications require being able to decide whether a new observation belongs to the same distribution as existing observations (it is an inlier), or should be considered as different (it is an outlier). Often, this ability is used to clean real data sets. Two important distinctions must be made:", "The training data contains outliers which are defined as observations that are far from the others. Outlier detection estimators thus try to fit the regions where the training data is the most concentrated, ignoring the deviant observations.", "The training data is not polluted by outliers and we are interested in detecting whether a new observation is an outlier. In this context an outlier is also called a novelty.", "Outlier detection and novelty detection are both used for anomaly detection, where one is interested in detecting abnormal or unusual observations. Outlier detection is then also known as unsupervised anomaly detection and novelty detection as semi-supervised anomaly detection. In the context of outlier detection, the outliers/anomalies cannot form a dense cluster as available estimators assume that the outliers/anomalies are located in low density regions. On the contrary, in the context of novelty detection, novelties/anomalies can form a dense cluster as long as they are in a low density region of the training data, considered as normal in this context.", "The scikit-learn project provides a set of machine learning tools that can be used both for novelty or outlier detection. This strategy is implemented with objects learning in an unsupervised way from the data:", "new observations can then be sorted as inliers or outliers with a predict method:", "Inliers are labeled 1, while outliers are labeled -1. The predict method makes use of a threshold on the raw scoring function computed by the estimator. This scoring function is accessible through the score_samples method, while the threshold can be controlled by the contamination parameter.", "The decision_function method is also defined from the scoring function, in such a way that negative values are outliers and non-negative ones are inliers:", "Note that neighbors.LocalOutlierFactor does not support predict, decision_function and score_samples methods by default but only a fit_predict method, as this estimator was originally meant to be applied for outlier detection. The scores of abnormality of the training samples are accessible through the negative_outlier_factor_ attribute.", "If you really want to use neighbors.LocalOutlierFactor for novelty detection, i.e. predict labels or compute the score of abnormality of new unseen data, you can instantiate the estimator with the novelty parameter set to True before fitting the estimator. In this case, fit_predict is not available.", "Warning", "Novelty detection with Local Outlier Factor", "When novelty is set to True be aware that you must only use predict, decision_function and score_samples on new unseen data and not on the training samples as this would lead to wrong results. The scores of abnormality of the training samples are always accessible through the negative_outlier_factor_ attribute.", "The behavior of neighbors.LocalOutlierFactor is summarized in the following table.", "Method", "Outlier detection", "Novelty detection", "fit_predict", "OK", "Not available", "predict", "Not available", "Use only on new data", "decision_function", "Not available", "Use only on new data", "score_samples", "Use negative_outlier_factor_", "Use only on new data", "A comparison of the outlier detection algorithms in scikit-learn. Local Outlier Factor (LOF) does not show a decision boundary in black as it has no predict method to be applied on new data when it is used for outlier detection.", "ensemble.IsolationForest and neighbors.LocalOutlierFactor perform reasonably well on the data sets considered here. The svm.OneClassSVM is known to be sensitive to outliers and thus does not perform very well for outlier detection. That being said, outlier detection in high-dimension, or without any assumptions on the distribution of the inlying data is very challenging. svm.OneClassSVM may still be used with outlier detection but requires fine-tuning of its hyperparameter nu to handle outliers and prevent overfitting. Finally, covariance.EllipticEnvelope assumes the data is Gaussian and learns an ellipse. For more details on the different estimators refer to the example Comparing anomaly detection algorithms for outlier detection on toy datasets and the sections hereunder.", "Examples:", "Consider a data set of \\(n\\) observations from the same distribution described by \\(p\\) features. Consider now that we add one more observation to that data set. Is the new observation so different from the others that we can doubt it is regular? (i.e. does it come from the same distribution?) Or on the contrary, is it so similar to the other that we cannot distinguish it from the original observations? This is the question addressed by the novelty detection tools and methods.", "In general, it is about to learn a rough, close frontier delimiting the contour of the initial observations distribution, plotted in embedding \\(p\\)-dimensional space. Then, if further observations lay within the frontier-delimited subspace, they are considered as coming from the same population than the initial observations. Otherwise, if they lay outside the frontier, we can say that they are abnormal with a given confidence in our assessment.", "The One-Class SVM has been introduced by Sch\u00f6lkopf et al. for that purpose and implemented in the Support Vector Machines module in the svm.OneClassSVM object. It requires the choice of a kernel and a scalar parameter to define a frontier. The RBF kernel is usually chosen although there exists no exact formula or algorithm to set its bandwidth parameter. This is the default in the scikit-learn implementation. The nu parameter, also known as the margin of the One-Class SVM, corresponds to the probability of finding a new, but regular, observation outside the frontier.", "References:", "Examples:", "Outlier detection is similar to novelty detection in the sense that the goal is to separate a core of regular observations from some polluting ones, called outliers. Yet, in the case of outlier detection, we don\u2019t have a clean data set representing the population of regular observations that can be used to train any tool.", "One common way of performing outlier detection is to assume that the regular data come from a known distribution (e.g. data are Gaussian distributed). From this assumption, we generally try to define the \u201cshape\u201d of the data, and can define outlying observations as observations which stand far enough from the fit shape.", "The scikit-learn provides an object covariance.EllipticEnvelope that fits a robust covariance estimate to the data, and thus fits an ellipse to the central data points, ignoring points outside the central mode.", "For instance, assuming that the inlier data are Gaussian distributed, it will estimate the inlier location and covariance in a robust way (i.e. without being influenced by outliers). The Mahalanobis distances obtained from this estimate is used to derive a measure of outlyingness. This strategy is illustrated below.", "Examples:", "References:", "One efficient way of performing outlier detection in high-dimensional datasets is to use random forests. The ensemble.IsolationForest \u2018isolates\u2019 observations by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature.", "Since recursive partitioning can be represented by a tree structure, the number of splittings required to isolate a sample is equivalent to the path length from the root node to the terminating node.", "This path length, averaged over a forest of such random trees, is a measure of normality and our decision function.", "Random partitioning produces noticeably shorter paths for anomalies. Hence, when a forest of random trees collectively produce shorter path lengths for particular samples, they are highly likely to be anomalies.", "The implementation of ensemble.IsolationForest is based on an ensemble of tree.ExtraTreeRegressor. Following Isolation Forest original paper, the maximum depth of each tree is set to \\(\\lceil \\log_2(n) \\rceil\\) where \\(n\\) is the number of samples used to build the tree (see (Liu et al., 2008) for more details).", "This algorithm is illustrated below.", "The ensemble.IsolationForest supports warm_start=True which allows you to add more trees to an already fitted model:", "Examples:", "References:", "Another efficient way to perform outlier detection on moderately high dimensional datasets is to use the Local Outlier Factor (LOF) algorithm.", "The neighbors.LocalOutlierFactor (LOF) algorithm computes a score (called local outlier factor) reflecting the degree of abnormality of the observations. It measures the local density deviation of a given data point with respect to its neighbors. The idea is to detect the samples that have a substantially lower density than their neighbors.", "In practice the local density is obtained from the k-nearest neighbors. The LOF score of an observation is equal to the ratio of the average local density of his k-nearest neighbors, and its own local density: a normal instance is expected to have a local density similar to that of its neighbors, while abnormal data are expected to have much smaller local density.", "The number k of neighbors considered, (alias parameter n_neighbors) is typically chosen 1) greater than the minimum number of objects a cluster has to contain, so that other objects can be local outliers relative to this cluster, and 2) smaller than the maximum number of close by objects that can potentially be local outliers. In practice, such informations are generally not available, and taking n_neighbors=20 appears to work well in general. When the proportion of outliers is high (i.e. greater than 10 %, as in the example below), n_neighbors should be greater (n_neighbors=35 in the example below).", "The strength of the LOF algorithm is that it takes both local and global properties of datasets into consideration: it can perform well even in datasets where abnormal samples have different underlying densities. The question is not, how isolated the sample is, but how isolated it is with respect to the surrounding neighborhood.", "When applying LOF for outlier detection, there are no predict, decision_function and score_samples methods but only a fit_predict method. The scores of abnormality of the training samples are accessible through the negative_outlier_factor_ attribute. Note that predict, decision_function and score_samples can be used on new unseen data when LOF is applied for novelty detection, i.e. when the novelty parameter is set to True. See Novelty detection with Local Outlier Factor.", "This strategy is illustrated below.", "Examples:", "References:", "To use neighbors.LocalOutlierFactor for novelty detection, i.e. predict labels or compute the score of abnormality of new unseen data, you need to instantiate the estimator with the novelty parameter set to True before fitting the estimator:", "Note that fit_predict is not available in this case.", "Warning", "Novelty detection with Local Outlier Factor`", "When novelty is set to True be aware that you must only use predict, decision_function and score_samples on new unseen data and not on the training samples as this would lead to wrong results. The scores of abnormality of the training samples are always accessible through the negative_outlier_factor_ attribute.", "Novelty detection with Local Outlier Factor is illustrated below."]}, {"name": "2.8. Density Estimation", "path": "modules/density", "type": "Guide", "text": ["Density estimation walks the line between unsupervised learning, feature engineering, and data modeling. Some of the most popular and useful density estimation techniques are mixture models such as Gaussian Mixtures (GaussianMixture), and neighbor-based approaches such as the kernel density estimate (KernelDensity). Gaussian Mixtures are discussed more fully in the context of clustering, because the technique is also useful as an unsupervised clustering scheme.", "Density estimation is a very simple concept, and most people are already familiar with one common density estimation technique: the histogram.", "A histogram is a simple visualization of data where bins are defined, and the number of data points within each bin is tallied. An example of a histogram can be seen in the upper-left panel of the following figure:", " ", "A major problem with histograms, however, is that the choice of binning can have a disproportionate effect on the resulting visualization. Consider the upper-right panel of the above figure. It shows a histogram over the same data, with the bins shifted right. The results of the two visualizations look entirely different, and might lead to different interpretations of the data.", "Intuitively, one can also think of a histogram as a stack of blocks, one block per point. By stacking the blocks in the appropriate grid space, we recover the histogram. But what if, instead of stacking the blocks on a regular grid, we center each block on the point it represents, and sum the total height at each location? This idea leads to the lower-left visualization. It is perhaps not as clean as a histogram, but the fact that the data drive the block locations mean that it is a much better representation of the underlying data.", "This visualization is an example of a kernel density estimation, in this case with a top-hat kernel (i.e. a square block at each point). We can recover a smoother distribution by using a smoother kernel. The bottom-right plot shows a Gaussian kernel density estimate, in which each point contributes a Gaussian curve to the total. The result is a smooth density estimate which is derived from the data, and functions as a powerful non-parametric model of the distribution of points.", "Kernel density estimation in scikit-learn is implemented in the KernelDensity estimator, which uses the Ball Tree or KD Tree for efficient queries (see Nearest Neighbors for a discussion of these). Though the above example uses a 1D data set for simplicity, kernel density estimation can be performed in any number of dimensions, though in practice the curse of dimensionality causes its performance to degrade in high dimensions.", "In the following figure, 100 points are drawn from a bimodal distribution, and the kernel density estimates are shown for three choices of kernels:", " ", "It\u2019s clear how the kernel shape affects the smoothness of the resulting distribution. The scikit-learn kernel density estimator can be used as follows:", "Here we have used kernel='gaussian', as seen above. Mathematically, a kernel is a positive function \\(K(x;h)\\) which is controlled by the bandwidth parameter \\(h\\). Given this kernel form, the density estimate at a point \\(y\\) within a group of points \\(x_i; i=1\\cdots N\\) is given by:", "The bandwidth here acts as a smoothing parameter, controlling the tradeoff between bias and variance in the result. A large bandwidth leads to a very smooth (i.e. high-bias) density distribution. A small bandwidth leads to an unsmooth (i.e. high-variance) density distribution.", "KernelDensity implements several common kernel forms, which are shown in the following figure:", " ", "The form of these kernels is as follows:", "Gaussian kernel (kernel = 'gaussian')", "\\(K(x; h) \\propto \\exp(- \\frac{x^2}{2h^2} )\\)", "Tophat kernel (kernel = 'tophat')", "\\(K(x; h) \\propto 1\\) if \\(x < h\\)", "Epanechnikov kernel (kernel = 'epanechnikov')", "\\(K(x; h) \\propto 1 - \\frac{x^2}{h^2}\\)", "Exponential kernel (kernel = 'exponential')", "\\(K(x; h) \\propto \\exp(-x/h)\\)", "Linear kernel (kernel = 'linear')", "\\(K(x; h) \\propto 1 - x/h\\) if \\(x < h\\)", "Cosine kernel (kernel = 'cosine')", "\\(K(x; h) \\propto \\cos(\\frac{\\pi x}{2h})\\) if \\(x < h\\)", "The kernel density estimator can be used with any of the valid distance metrics (see DistanceMetric for a list of available metrics), though the results are properly normalized only for the Euclidean metric. One particularly useful metric is the Haversine distance which measures the angular distance between points on a sphere. Here is an example of using a kernel density estimate for a visualization of geospatial data, in this case the distribution of observations of two different species on the South American continent:", " ", "One other useful application of kernel density estimation is to learn a non-parametric generative model of a dataset in order to efficiently draw new samples from this generative model. Here is an example of using this process to create a new set of hand-written digits, using a Gaussian kernel learned on a PCA projection of the data:", " ", "The \u201cnew\u201d data consists of linear combinations of the input data, with weights probabilistically drawn given the KDE model.", "Examples:"]}, {"name": "2.9. Neural network models", "path": "modules/neural_networks_unsupervised", "type": "Guide", "text": ["Restricted Boltzmann machines (RBM) are unsupervised nonlinear feature learners based on a probabilistic model. The features extracted by an RBM or a hierarchy of RBMs often give good results when fed into a linear classifier such as a linear SVM or a perceptron.", "The model makes assumptions regarding the distribution of inputs. At the moment, scikit-learn only provides BernoulliRBM, which assumes the inputs are either binary values or values between 0 and 1, each encoding the probability that the specific feature would be turned on.", "The RBM tries to maximize the likelihood of the data using a particular graphical model. The parameter learning algorithm used (Stochastic Maximum Likelihood) prevents the representations from straying far from the input data, which makes them capture interesting regularities, but makes the model less useful for small datasets, and usually not useful for density estimation.", "The method gained popularity for initializing deep neural networks with the weights of independent RBMs. This method is known as unsupervised pre-training.", "Examples:", "The graphical model of an RBM is a fully-connected bipartite graph.", "The nodes are random variables whose states depend on the state of the other nodes they are connected to. The model is therefore parameterized by the weights of the connections, as well as one intercept (bias) term for each visible and hidden unit, omitted from the image for simplicity.", "The energy function measures the quality of a joint assignment:", "In the formula above, \\(\\mathbf{b}\\) and \\(\\mathbf{c}\\) are the intercept vectors for the visible and hidden layers, respectively. The joint probability of the model is defined in terms of the energy:", "The word restricted refers to the bipartite structure of the model, which prohibits direct interaction between hidden units, or between visible units. This means that the following conditional independencies are assumed:", "The bipartite structure allows for the use of efficient block Gibbs sampling for inference.", "In the BernoulliRBM, all units are binary stochastic units. This means that the input data should either be binary, or real-valued between 0 and 1 signifying the probability that the visible unit would turn on or off. This is a good model for character recognition, where the interest is on which pixels are active and which aren\u2019t. For images of natural scenes it no longer fits because of background, depth and the tendency of neighbouring pixels to take the same values.", "The conditional probability distribution of each unit is given by the logistic sigmoid activation function of the input it receives:", "where \\(\\sigma\\) is the logistic sigmoid function:", "The training algorithm implemented in BernoulliRBM is known as Stochastic Maximum Likelihood (SML) or Persistent Contrastive Divergence (PCD). Optimizing maximum likelihood directly is infeasible because of the form of the data likelihood:", "For simplicity the equation above is written for a single training example. The gradient with respect to the weights is formed of two terms corresponding to the ones above. They are usually known as the positive gradient and the negative gradient, because of their respective signs. In this implementation, the gradients are estimated over mini-batches of samples.", "In maximizing the log-likelihood, the positive gradient makes the model prefer hidden states that are compatible with the observed training data. Because of the bipartite structure of RBMs, it can be computed efficiently. The negative gradient, however, is intractable. Its goal is to lower the energy of joint states that the model prefers, therefore making it stay true to the data. It can be approximated by Markov chain Monte Carlo using block Gibbs sampling by iteratively sampling each of \\(v\\) and \\(h\\) given the other, until the chain mixes. Samples generated in this way are sometimes referred as fantasy particles. This is inefficient and it is difficult to determine whether the Markov chain mixes.", "The Contrastive Divergence method suggests to stop the chain after a small number of iterations, \\(k\\), usually even 1. This method is fast and has low variance, but the samples are far from the model distribution.", "Persistent Contrastive Divergence addresses this. Instead of starting a new chain each time the gradient is needed, and performing only one Gibbs sampling step, in PCD we keep a number of chains (fantasy particles) that are updated \\(k\\) Gibbs steps after each weight update. This allows the particles to explore the space more thoroughly.", "References:"]}, {"name": "3.1. Cross-validation", "path": "modules/cross_validation", "type": "Guide", "text": ["Learning the parameters of a prediction function and testing it on the same data is a methodological mistake: a model that would just repeat the labels of the samples that it has just seen would have a perfect score but would fail to predict anything useful on yet-unseen data. This situation is called overfitting. To avoid it, it is common practice when performing a (supervised) machine learning experiment to hold out part of the available data as a test set X_test, y_test. Note that the word \u201cexperiment\u201d is not intended to denote academic use only, because even in commercial settings machine learning usually starts out experimentally. Here is a flowchart of typical cross validation workflow in model training. The best parameters can be determined by grid search techniques.", "In scikit-learn a random split into training and test sets can be quickly computed with the train_test_split helper function. Let\u2019s load the iris data set to fit a linear support vector machine on it:", "We can now quickly sample a training set while holding out 40% of the data for testing (evaluating) our classifier:", "When evaluating different settings (\u201chyperparameters\u201d) for estimators, such as the C setting that must be manually set for an SVM, there is still a risk of overfitting on the test set because the parameters can be tweaked until the estimator performs optimally. This way, knowledge about the test set can \u201cleak\u201d into the model and evaluation metrics no longer report on generalization performance. To solve this problem, yet another part of the dataset can be held out as a so-called \u201cvalidation set\u201d: training proceeds on the training set, after which evaluation is done on the validation set, and when the experiment seems to be successful, final evaluation can be done on the test set.", "However, by partitioning the available data into three sets, we drastically reduce the number of samples which can be used for learning the model, and the results can depend on a particular random choice for the pair of (train, validation) sets.", "A solution to this problem is a procedure called cross-validation (CV for short). A test set should still be held out for final evaluation, but the validation set is no longer needed when doing CV. In the basic approach, called k-fold CV, the training set is split into k smaller sets (other approaches are described below, but generally follow the same principles). The following procedure is followed for each of the k \u201cfolds\u201d:", "The performance measure reported by k-fold cross-validation is then the average of the values computed in the loop. This approach can be computationally expensive, but does not waste too much data (as is the case when fixing an arbitrary validation set), which is a major advantage in problems such as inverse inference where the number of samples is very small.", "The simplest way to use cross-validation is to call the cross_val_score helper function on the estimator and the dataset.", "The following example demonstrates how to estimate the accuracy of a linear kernel support vector machine on the iris dataset by splitting the data, fitting a model and computing the score 5 consecutive times (with different splits each time):", "The mean score and the standard deviation are hence given by:", "By default, the score computed at each CV iteration is the score method of the estimator. It is possible to change this by using the scoring parameter:", "See The scoring parameter: defining model evaluation rules for details. In the case of the Iris dataset, the samples are balanced across target classes hence the accuracy and the F1-score are almost equal.", "When the cv argument is an integer, cross_val_score uses the KFold or StratifiedKFold strategies by default, the latter being used if the estimator derives from ClassifierMixin.", "It is also possible to use other cross validation strategies by passing a cross validation iterator instead, for instance:", "Another option is to use an iterable yielding (train, test) splits as arrays of indices, for example:", "Data transformation with held out data", "Just as it is important to test a predictor on data held-out from training, preprocessing (such as standardization, feature selection, etc.) and similar data transformations similarly should be learnt from a training set and applied to held-out data for prediction:", "A Pipeline makes it easier to compose estimators, providing this behavior under cross-validation:", "See Pipelines and composite estimators.", "The cross_validate function differs from cross_val_score in two ways:", "For single metric evaluation, where the scoring parameter is a string, callable or None, the keys will be - ['test_score', 'fit_time', 'score_time']", "And for multiple metric evaluation, the return value is a dict with the following keys - ['test_<scorer1_name>', 'test_<scorer2_name>', 'test_<scorer...>', 'fit_time', 'score_time']", "return_train_score is set to False by default to save computation time. To evaluate the scores on the training set as well you need to be set to True.", "You may also retain the estimator fitted on each training set by setting return_estimator=True.", "The multiple metrics can be specified either as a list, tuple or set of predefined scorer names:", "Or as a dict mapping scorer name to a predefined or custom scoring function:", "Here is an example of cross_validate using a single metric:", "The function cross_val_predict has a similar interface to cross_val_score, but returns, for each element in the input, the prediction that was obtained for that element when it was in the test set. Only cross-validation strategies that assign all elements to a test set exactly once can be used (otherwise, an exception is raised).", "Warning", "Note on inappropriate usage of cross_val_predict", "The result of cross_val_predict may be different from those obtained using cross_val_score as the elements are grouped in different ways. The function cross_val_score takes an average over cross-validation folds, whereas cross_val_predict simply returns the labels (or probabilities) from several distinct models undistinguished. Thus, cross_val_predict is not an appropriate measure of generalisation error.", "The available cross validation iterators are introduced in the following section.", "Examples", "The following sections list utilities to generate indices that can be used to generate dataset splits according to different cross validation strategies.", "Assuming that some data is Independent and Identically Distributed (i.i.d.) is making the assumption that all samples stem from the same generative process and that the generative process is assumed to have no memory of past generated samples.", "The following cross-validators can be used in such cases.", "Note", "While i.i.d. data is a common assumption in machine learning theory, it rarely holds in practice. If one knows that the samples have been generated using a time-dependent process, it is safer to use a time-series aware cross-validation scheme. Similarly, if we know that the generative process has a group structure (samples collected from different subjects, experiments, measurement devices), it is safer to use group-wise cross-validation.", "KFold divides all the samples in \\(k\\) groups of samples, called folds (if \\(k = n\\), this is equivalent to the Leave One Out strategy), of equal sizes (if possible). The prediction function is learned using \\(k - 1\\) folds, and the fold left out is used for test.", "Example of 2-fold cross-validation on a dataset with 4 samples:", "Here is a visualization of the cross-validation behavior. Note that KFold is not affected by classes or groups.", "Each fold is constituted by two arrays: the first one is related to the training set, and the second one to the test set. Thus, one can create the training/test sets using numpy indexing:", "RepeatedKFold repeats K-Fold n times. It can be used when one requires to run KFold n times, producing different splits in each repetition.", "Example of 2-fold K-Fold repeated 2 times:", "Similarly, RepeatedStratifiedKFold repeats Stratified K-Fold n times with different randomization in each repetition.", "LeaveOneOut (or LOO) is a simple cross-validation. Each learning set is created by taking all the samples except one, the test set being the sample left out. Thus, for \\(n\\) samples, we have \\(n\\) different training sets and \\(n\\) different tests set. This cross-validation procedure does not waste much data as only one sample is removed from the training set:", "Potential users of LOO for model selection should weigh a few known caveats. When compared with \\(k\\)-fold cross validation, one builds \\(n\\) models from \\(n\\) samples instead of \\(k\\) models, where \\(n > k\\). Moreover, each is trained on \\(n - 1\\) samples rather than \\((k-1) n / k\\). In both ways, assuming \\(k\\) is not too large and \\(k < n\\), LOO is more computationally expensive than \\(k\\)-fold cross validation.", "In terms of accuracy, LOO often results in high variance as an estimator for the test error. Intuitively, since \\(n - 1\\) of the \\(n\\) samples are used to build each model, models constructed from folds are virtually identical to each other and to the model built from the entire training set.", "However, if the learning curve is steep for the training size in question, then 5- or 10- fold cross validation can overestimate the generalization error.", "As a general rule, most authors, and empirical evidence, suggest that 5- or 10- fold cross validation should be preferred to LOO.", "References:", "LeavePOut is very similar to LeaveOneOut as it creates all the possible training/test sets by removing \\(p\\) samples from the complete set. For \\(n\\) samples, this produces \\({n \\choose p}\\) train-test pairs. Unlike LeaveOneOut and KFold, the test sets will overlap for \\(p > 1\\).", "Example of Leave-2-Out on a dataset with 4 samples:", "The ShuffleSplit iterator will generate a user defined number of independent train / test dataset splits. Samples are first shuffled and then split into a pair of train and test sets.", "It is possible to control the randomness for reproducibility of the results by explicitly seeding the random_state pseudo random number generator.", "Here is a usage example:", "Here is a visualization of the cross-validation behavior. Note that ShuffleSplit is not affected by classes or groups.", "ShuffleSplit is thus a good alternative to KFold cross validation that allows a finer control on the number of iterations and the proportion of samples on each side of the train / test split.", "Some classification problems can exhibit a large imbalance in the distribution of the target classes: for instance there could be several times more negative samples than positive samples. In such cases it is recommended to use stratified sampling as implemented in StratifiedKFold and StratifiedShuffleSplit to ensure that relative class frequencies is approximately preserved in each train and validation fold.", "StratifiedKFold is a variation of k-fold which returns stratified folds: each set contains approximately the same percentage of samples of each target class as the complete set.", "Here is an example of stratified 3-fold cross-validation on a dataset with 50 samples from two unbalanced classes. We show the number of samples in each class and compare with KFold.", "We can see that StratifiedKFold preserves the class ratios (approximately 1 / 10) in both train and test dataset.", "Here is a visualization of the cross-validation behavior.", "RepeatedStratifiedKFold can be used to repeat Stratified K-Fold n times with different randomization in each repetition.", "StratifiedShuffleSplit is a variation of ShuffleSplit, which returns stratified splits, i.e which creates splits by preserving the same percentage for each target class as in the complete set.", "Here is a visualization of the cross-validation behavior.", "The i.i.d. assumption is broken if the underlying generative process yield groups of dependent samples.", "Such a grouping of data is domain specific. An example would be when there is medical data collected from multiple patients, with multiple samples taken from each patient. And such data is likely to be dependent on the individual group. In our example, the patient id for each sample will be its group identifier.", "In this case we would like to know if a model trained on a particular set of groups generalizes well to the unseen groups. To measure this, we need to ensure that all the samples in the validation fold come from groups that are not represented at all in the paired training fold.", "The following cross-validation splitters can be used to do that. The grouping identifier for the samples is specified via the groups parameter.", "GroupKFold is a variation of k-fold which ensures that the same group is not represented in both testing and training sets. For example if the data is obtained from different subjects with several samples per-subject and if the model is flexible enough to learn from highly person specific features it could fail to generalize to new subjects. GroupKFold makes it possible to detect this kind of overfitting situations.", "Imagine you have three subjects, each with an associated number from 1 to 3:", "Each subject is in a different testing fold, and the same subject is never in both testing and training. Notice that the folds do not have exactly the same size due to the imbalance in the data.", "Here is a visualization of the cross-validation behavior.", "LeaveOneGroupOut is a cross-validation scheme which holds out the samples according to a third-party provided array of integer groups. This group information can be used to encode arbitrary domain specific pre-defined cross-validation folds.", "Each training set is thus constituted by all the samples except the ones related to a specific group.", "For example, in the cases of multiple experiments, LeaveOneGroupOut can be used to create a cross-validation based on the different experiments: we create a training set using the samples of all the experiments except one:", "Another common application is to use time information: for instance the groups could be the year of collection of the samples and thus allow for cross-validation against time-based splits.", "LeavePGroupsOut is similar as LeaveOneGroupOut, but removes samples related to \\(P\\) groups for each training/test set.", "Example of Leave-2-Group Out:", "The GroupShuffleSplit iterator behaves as a combination of ShuffleSplit and LeavePGroupsOut, and generates a sequence of randomized partitions in which a subset of groups are held out for each split.", "Here is a usage example:", "Here is a visualization of the cross-validation behavior.", "This class is useful when the behavior of LeavePGroupsOut is desired, but the number of groups is large enough that generating all possible partitions with \\(P\\) groups withheld would be prohibitively expensive. In such a scenario, GroupShuffleSplit provides a random sample (with replacement) of the train / test splits generated by LeavePGroupsOut.", "For some datasets, a pre-defined split of the data into training- and validation fold or into several cross-validation folds already exists. Using PredefinedSplit it is possible to use these folds e.g. when searching for hyperparameters.", "For example, when using a validation set, set the test_fold to 0 for all samples that are part of the validation set, and to -1 for all other samples.", "The above group cross-validation functions may also be useful for spitting a dataset into training and testing subsets. Note that the convenience function train_test_split is a wrapper around ShuffleSplit and thus only allows for stratified splitting (using the class labels) and cannot account for groups.", "To perform the train and test split, use the indices for the train and test subsets yielded by the generator output by the split() method of the cross-validation splitter. For example:", "Time series data is characterised by the correlation between observations that are near in time (autocorrelation). However, classical cross-validation techniques such as KFold and ShuffleSplit assume the samples are independent and identically distributed, and would result in unreasonable correlation between training and testing instances (yielding poor estimates of generalisation error) on time series data. Therefore, it is very important to evaluate our model for time series data on the \u201cfuture\u201d observations least like those that are used to train the model. To achieve this, one solution is provided by TimeSeriesSplit.", "TimeSeriesSplit is a variation of k-fold which returns first \\(k\\) folds as train set and the \\((k+1)\\) th fold as test set. Note that unlike standard cross-validation methods, successive training sets are supersets of those that come before them. Also, it adds all surplus data to the first training partition, which is always used to train the model.", "This class can be used to cross-validate time series data samples that are observed at fixed time intervals.", "Example of 3-split time series cross-validation on a dataset with 6 samples:", "Here is a visualization of the cross-validation behavior.", "If the data ordering is not arbitrary (e.g. samples with the same class label are contiguous), shuffling it first may be essential to get a meaningful cross- validation result. However, the opposite may be true if the samples are not independently and identically distributed. For example, if samples correspond to news articles, and are ordered by their time of publication, then shuffling the data will likely lead to a model that is overfit and an inflated validation score: it will be tested on samples that are artificially similar (close in time) to training samples.", "Some cross validation iterators, such as KFold, have an inbuilt option to shuffle the data indices before splitting them. Note that:", "For more details on how to control the randomness of cv splitters and avoid common pitfalls, see Controlling randomness.", "Cross validation iterators can also be used to directly perform model selection using Grid Search for the optimal hyperparameters of the model. This is the topic of the next section: Tuning the hyper-parameters of an estimator.", "permutation_test_score offers another way to evaluate the performance of classifiers. It provides a permutation-based p-value, which represents how likely an observed performance of the classifier would be obtained by chance. The null hypothesis in this test is that the classifier fails to leverage any statistical dependency between the features and the labels to make correct predictions on left out data. permutation_test_score generates a null distribution by calculating n_permutations different permutations of the data. In each permutation the labels are randomly shuffled, thereby removing any dependency between the features and the labels. The p-value output is the fraction of permutations for which the average cross-validation score obtained by the model is better than the cross-validation score obtained by the model using the original data. For reliable results n_permutations should typically be larger than 100 and cv between 3-10 folds.", "A low p-value provides evidence that the dataset contains real dependency between features and labels and the classifier was able to utilize this to obtain good results. A high p-value could be due to a lack of dependency between features and labels (there is no difference in feature values between the classes) or because the classifier was not able to use the dependency in the data. In the latter case, using a more appropriate classifier that is able to utilize the structure in the data, would result in a low p-value.", "Cross-validation provides information about how well a classifier generalizes, specifically the range of expected errors of the classifier. However, a classifier trained on a high dimensional dataset with no structure may still perform better than expected on cross-validation, just by chance. This can typically happen with small datasets with less than a few hundred samples. permutation_test_score provides information on whether the classifier has found a real class structure and can help in evaluating the performance of the classifier.", "It is important to note that this test has been shown to produce low p-values even if there is only weak structure in the data because in the corresponding permutated datasets there is absolutely no structure. This test is therefore only able to show when the model reliably outperforms random guessing.", "Finally, permutation_test_score is computed using brute force and interally fits (n_permutations + 1) * n_cv models. It is therefore only tractable with small datasets for which fitting an individual model is very fast.", "Examples", "References:"]}, {"name": "3.2. Tuning the hyper-parameters of an estimator", "path": "modules/grid_search", "type": "Guide", "text": ["Hyper-parameters are parameters that are not directly learnt within estimators. In scikit-learn they are passed as arguments to the constructor of the estimator classes. Typical examples include C, kernel and gamma for Support Vector Classifier, alpha for Lasso, etc.", "It is possible and recommended to search the hyper-parameter space for the best cross validation score.", "Any parameter provided when constructing an estimator may be optimized in this manner. Specifically, to find the names and current values for all parameters for a given estimator, use:", "A search consists of:", "Two generic approaches to parameter search are provided in scikit-learn: for given values, GridSearchCV exhaustively considers all parameter combinations, while RandomizedSearchCV can sample a given number of candidates from a parameter space with a specified distribution. Both these tools have successive halving counterparts HalvingGridSearchCV and HalvingRandomSearchCV, which can be much faster at finding a good parameter combination.", "After describing these tools we detail best practices applicable to these approaches. Some models allow for specialized, efficient parameter search strategies, outlined in Alternatives to brute force parameter search.", "Note that it is common that a small subset of those parameters can have a large impact on the predictive or computation performance of the model while others can be left to their default values. It is recommended to read the docstring of the estimator class to get a finer understanding of their expected behavior, possibly by reading the enclosed reference to the literature.", "The grid search provided by GridSearchCV exhaustively generates candidates from a grid of parameter values specified with the param_grid parameter. For instance, the following param_grid:", "specifies that two grids should be explored: one with a linear kernel and C values in [1, 10, 100, 1000], and the second one with an RBF kernel, and the cross-product of C values ranging in [1, 10, 100, 1000] and gamma values in [0.001, 0.0001].", "The GridSearchCV instance implements the usual estimator API: when \u201cfitting\u201d it on a dataset all the possible combinations of parameter values are evaluated and the best combination is retained.", "Examples:", "While using a grid of parameter settings is currently the most widely used method for parameter optimization, other search methods have more favourable properties. RandomizedSearchCV implements a randomized search over parameters, where each setting is sampled from a distribution over possible parameter values. This has two main benefits over an exhaustive search:", "Specifying how parameters should be sampled is done using a dictionary, very similar to specifying parameters for GridSearchCV. Additionally, a computation budget, being the number of sampled candidates or sampling iterations, is specified using the n_iter parameter. For each parameter, either a distribution over possible values or a list of discrete choices (which will be sampled uniformly) can be specified:", "This example uses the scipy.stats module, which contains many useful distributions for sampling parameters, such as expon, gamma, uniform or randint.", "In principle, any function can be passed that provides a rvs (random variate sample) method to sample a value. A call to the rvs function should provide independent random samples from possible parameter values on consecutive calls.", "Warning", "The distributions in scipy.stats prior to version scipy 0.16 do not allow specifying a random state. Instead, they use the global numpy random state, that can be seeded via np.random.seed or set using np.random.set_state. However, beginning scikit-learn 0.18, the sklearn.model_selection module sets the random state provided by the user if scipy >= 0.16 is also available.", "For continuous parameters, such as C above, it is important to specify a continuous distribution to take full advantage of the randomization. This way, increasing n_iter will always lead to a finer search.", "A continuous log-uniform random variable is available through loguniform. This is a continuous version of log-spaced parameters. For example to specify C above, loguniform(1,\n100) can be used instead of [1, 10, 100] or np.logspace(0, 2,\nnum=1000). This is an alias to SciPy\u2019s stats.reciprocal.", "Mirroring the example above in grid search, we can specify a continuous random variable that is log-uniformly distributed between 1e0 and 1e3:", "Examples:", "References:", "Scikit-learn also provides the HalvingGridSearchCV and HalvingRandomSearchCV estimators that can be used to search a parameter space using successive halving 1 2. Successive halving (SH) is like a tournament among candidate parameter combinations. SH is an iterative selection process where all candidates (the parameter combinations) are evaluated with a small amount of resources at the first iteration. Only some of these candidates are selected for the next iteration, which will be allocated more resources. For parameter tuning, the resource is typically the number of training samples, but it can also be an arbitrary numeric parameter such as n_estimators in a random forest.", "As illustrated in the figure below, only a subset of candidates \u2018survive\u2019 until the last iteration. These are the candidates that have consistently ranked among the top-scoring candidates across all iterations. Each iteration is allocated an increasing amount of resources per candidate, here the number of samples.", "We here briefly describe the main parameters, but each parameter and their interactions are described in more details in the sections below. The factor (> 1) parameter controls the rate at which the resources grow, and the rate at which the number of candidates decreases. In each iteration, the number of resources per candidate is multiplied by factor and the number of candidates is divided by the same factor. Along with resource and min_resources, factor is the most important parameter to control the search in our implementation, though a value of 3 usually works well. factor effectively controls the number of iterations in HalvingGridSearchCV and the number of candidates (by default) and iterations in HalvingRandomSearchCV. aggressive_elimination=True can also be used if the number of available resources is small. More control is available through tuning the min_resources parameter.", "These estimators are still experimental: their predictions and their API might change without any deprecation cycle. To use them, you need to explicitly import enable_halving_search_cv:", "Examples:", "Beside factor, the two main parameters that influence the behaviour of a successive halving search are the min_resources parameter, and the number of candidates (or parameter combinations) that are evaluated. min_resources is the amount of resources allocated at the first iteration for each candidate. The number of candidates is specified directly in HalvingRandomSearchCV, and is determined from the param_grid parameter of HalvingGridSearchCV.", "Consider a case where the resource is the number of samples, and where we have 1000 samples. In theory, with min_resources=10 and factor=2, we are able to run at most 7 iterations with the following number of samples: [10, 20, 40, 80, 160, 320, 640].", "But depending on the number of candidates, we might run less than 7 iterations: if we start with a small number of candidates, the last iteration might use less than 640 samples, which means not using all the available resources (samples). For example if we start with 5 candidates, we only need 2 iterations: 5 candidates for the first iteration, then 5 // 2 = 2 candidates at the second iteration, after which we know which candidate performs the best (so we don\u2019t need a third one). We would only be using at most 20 samples which is a waste since we have 1000 samples at our disposal. On the other hand, if we start with a high number of candidates, we might end up with a lot of candidates at the last iteration, which may not always be ideal: it means that many candidates will run with the full resources, basically reducing the procedure to standard search.", "In the case of HalvingRandomSearchCV, the number of candidates is set by default such that the last iteration uses as much of the available resources as possible. For HalvingGridSearchCV, the number of candidates is determined by the param_grid parameter. Changing the value of min_resources will impact the number of possible iterations, and as a result will also have an effect on the ideal number of candidates.", "Another consideration when choosing min_resources is whether or not it is easy to discriminate between good and bad candidates with a small amount of resources. For example, if you need a lot of samples to distinguish between good and bad parameters, a high min_resources is recommended. On the other hand if the distinction is clear even with a small amount of samples, then a small min_resources may be preferable since it would speed up the computation.", "Notice in the example above that the last iteration does not use the maximum amount of resources available: 1000 samples are available, yet only 640 are used, at most. By default, both HalvingRandomSearchCV and HalvingGridSearchCV try to use as many resources as possible in the last iteration, with the constraint that this amount of resources must be a multiple of both min_resources and factor (this constraint will be clear in the next section). HalvingRandomSearchCV achieves this by sampling the right amount of candidates, while HalvingGridSearchCV achieves this by properly setting min_resources. Please see Exhausting the available resources for details.", "At any iteration i, each candidate is allocated a given amount of resources which we denote n_resources_i. This quantity is controlled by the parameters factor and min_resources as follows (factor is strictly greater than 1):", "or equivalently:", "where min_resources == n_resources_0 is the amount of resources used at the first iteration. factor also defines the proportions of candidates that will be selected for the next iteration:", "or equivalently:", "So in the first iteration, we use min_resources resources n_candidates times. In the second iteration, we use min_resources *\nfactor resources n_candidates // factor times. The third again multiplies the resources per candidate and divides the number of candidates. This process stops when the maximum amount of resource per candidate is reached, or when we have identified the best candidate. The best candidate is identified at the iteration that is evaluating factor or less candidates (see just below for an explanation).", "Here is an example with min_resources=3 and factor=2, starting with 70 candidates:", "n_resources_i", "n_candidates_i", "3 (=min_resources)", "70 (=n_candidates)", "3 * 2 = 6", "70 // 2 = 35", "6 * 2 = 12", "35 // 2 = 17", "12 * 2 = 24", "17 // 2 = 8", "24 * 2 = 48", "8 // 2 = 4", "48 * 2 = 96", "4 // 2 = 2", "We can note that:", "The amount of resources that is used at each iteration can be found in the n_resources_ attribute.", "By default, the resource is defined in terms of number of samples. That is, each iteration will use an increasing amount of samples to train on. You can however manually specify a parameter to use as the resource with the resource parameter. Here is an example where the resource is defined in terms of the number of estimators of a random forest:", "Note that it is not possible to budget on a parameter that is part of the parameter grid.", "As mentioned above, the number of resources that is used at each iteration depends on the min_resources parameter. If you have a lot of resources available but start with a low number of resources, some of them might be wasted (i.e. not used):", "The search process will only use 80 resources at most, while our maximum amount of available resources is n_samples=1000. Here, we have min_resources = r_0 = 20.", "For HalvingGridSearchCV, by default, the min_resources parameter is set to \u2018exhaust\u2019. This means that min_resources is automatically set such that the last iteration can use as many resources as possible, within the max_resources limit:", "min_resources was here automatically set to 250, which results in the last iteration using all the resources. The exact value that is used depends on the number of candidate parameter, on max_resources and on factor.", "For HalvingRandomSearchCV, exhausting the resources can be done in 2 ways:", "Both options are mutally exclusive: using min_resources='exhaust' requires knowing the number of candidates, and symmetrically n_candidates='exhaust' requires knowing min_resources.", "In general, exhausting the total number of resources leads to a better final candidate parameter, and is slightly more time-intensive.", "Ideally, we want the last iteration to evaluate factor candidates (see Amount of resource and number of candidates at each iteration). We then just have to pick the best one. When the number of available resources is small with respect to the number of candidates, the last iteration may have to evaluate more than factor candidates:", "Since we cannot use more than max_resources=40 resources, the process has to stop at the second iteration which evaluates more than factor=2 candidates.", "Using the aggressive_elimination parameter, you can force the search process to end up with less than factor candidates at the last iteration. To do this, the process will eliminate as many candidates as necessary using min_resources resources:", "Notice that we end with 2 candidates at the last iteration since we have eliminated enough candidates during the first iterations, using n_resources =\nmin_resources = 20.", "The cv_results_ attribute contains useful information for analysing the results of a search. It can be converted to a pandas dataframe with df =\npd.DataFrame(est.cv_results_). The cv_results_ attribute of HalvingGridSearchCV and HalvingRandomSearchCV is similar to that of GridSearchCV and RandomizedSearchCV, with additional information related to the successive halving process.", "Here is an example with some of the columns of a (truncated) dataframe:", "iter", "n_resources", "mean_test_score", "params", "0", "0", "125", "0.983667", "{\u2018criterion\u2019: \u2018entropy\u2019, \u2018max_depth\u2019: None, \u2018max_features\u2019: 9, \u2018min_samples_split\u2019: 5}", "1", "0", "125", "0.983667", "{\u2018criterion\u2019: \u2018gini\u2019, \u2018max_depth\u2019: None, \u2018max_features\u2019: 8, \u2018min_samples_split\u2019: 7}", "2", "0", "125", "0.983667", "{\u2018criterion\u2019: \u2018gini\u2019, \u2018max_depth\u2019: None, \u2018max_features\u2019: 10, \u2018min_samples_split\u2019: 10}", "3", "0", "125", "0.983667", "{\u2018criterion\u2019: \u2018entropy\u2019, \u2018max_depth\u2019: None, \u2018max_features\u2019: 6, \u2018min_samples_split\u2019: 6}", "\u2026", "\u2026", "\u2026", "\u2026", "\u2026", "15", "2", "500", "0.951958", "{\u2018criterion\u2019: \u2018entropy\u2019, \u2018max_depth\u2019: None, \u2018max_features\u2019: 9, \u2018min_samples_split\u2019: 10}", "16", "2", "500", "0.947958", "{\u2018criterion\u2019: \u2018gini\u2019, \u2018max_depth\u2019: None, \u2018max_features\u2019: 10, \u2018min_samples_split\u2019: 10}", "17", "2", "500", "0.951958", "{\u2018criterion\u2019: \u2018gini\u2019, \u2018max_depth\u2019: None, \u2018max_features\u2019: 10, \u2018min_samples_split\u2019: 4}", "18", "3", "1000", "0.961009", "{\u2018criterion\u2019: \u2018entropy\u2019, \u2018max_depth\u2019: None, \u2018max_features\u2019: 9, \u2018min_samples_split\u2019: 10}", "19", "3", "1000", "0.955989", "{\u2018criterion\u2019: \u2018gini\u2019, \u2018max_depth\u2019: None, \u2018max_features\u2019: 10, \u2018min_samples_split\u2019: 4}", "Each row corresponds to a given parameter combination (a candidate) and a given iteration. The iteration is given by the iter column. The n_resources column tells you how many resources were used.", "In the example above, the best parameter combination is {'criterion':\n'entropy', 'max_depth': None, 'max_features': 9, 'min_samples_split': 10} since it has reached the last iteration (3) with the highest score: 0.96.", "References:", "K. Jamieson, A. Talwalkar, Non-stochastic Best Arm Identification and Hyperparameter Optimization, in proc. of Machine Learning Research, 2016.", "L. Li, K. Jamieson, G. DeSalvo, A. Rostamizadeh, A. Talwalkar, Hyperband: A Novel Bandit-Based Approach to Hyperparameter Optimization, in Machine Learning Research 18, 2018.", "By default, parameter search uses the score function of the estimator to evaluate a parameter setting. These are the sklearn.metrics.accuracy_score for classification and sklearn.metrics.r2_score for regression. For some applications, other scoring functions are better suited (for example in unbalanced classification, the accuracy score is often uninformative). An alternative scoring function can be specified via the scoring parameter of most parameter search tools. See The scoring parameter: defining model evaluation rules for more details.", "GridSearchCV and RandomizedSearchCV allow specifying multiple metrics for the scoring parameter.", "Multimetric scoring can either be specified as a list of strings of predefined scores names or a dict mapping the scorer name to the scorer function and/or the predefined scorer name(s). See Using multiple metric evaluation for more details.", "When specifying multiple metrics, the refit parameter must be set to the metric (string) for which the best_params_ will be found and used to build the best_estimator_ on the whole dataset. If the search should not be refit, set refit=False. Leaving refit to the default value None will result in an error when using multiple metrics.", "See Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV for an example usage.", "HalvingRandomSearchCV and HalvingGridSearchCV do not support multimetric scoring.", "GridSearchCV and RandomizedSearchCV allow searching over parameters of composite or nested estimators such as Pipeline, ColumnTransformer, VotingClassifier or CalibratedClassifierCV using a dedicated <estimator>__<parameter> syntax:", "Here, <estimator> is the parameter name of the nested estimator, in this case base_estimator. If the meta-estimator is constructed as a collection of estimators as in pipeline.Pipeline, then <estimator> refers to the name of the estimator, see Nested parameters. In practice, there can be several levels of nesting:", "Please refer to Pipeline: chaining estimators for performing parameter searches over pipelines.", "Model selection by evaluating various parameter settings can be seen as a way to use the labeled data to \u201ctrain\u201d the parameters of the grid.", "When evaluating the resulting model it is important to do it on held-out samples that were not seen during the grid search process: it is recommended to split the data into a development set (to be fed to the GridSearchCV instance) and an evaluation set to compute performance metrics.", "This can be done by using the train_test_split utility function.", "The parameter search tools evaluate each parameter combination on each data fold independently. Computations can be run in parallel by using the keyword n_jobs=-1. See function signature for more details, and also the Glossary entry for n_jobs.", "Some parameter settings may result in a failure to fit one or more folds of the data. By default, this will cause the entire search to fail, even if some parameter settings could be fully evaluated. Setting error_score=0 (or =np.NaN) will make the procedure robust to such failure, issuing a warning and setting the score for that fold to 0 (or NaN), but completing the search.", "Some models can fit data for a range of values of some parameter almost as efficiently as fitting the estimator for a single value of the parameter. This feature can be leveraged to perform a more efficient cross-validation used for model selection of this parameter.", "The most common parameter amenable to this strategy is the parameter encoding the strength of the regularizer. In this case we say that we compute the regularization path of the estimator.", "Here is the list of such models:", "linear_model.ElasticNetCV(*[, l1_ratio, \u2026])", "Elastic Net model with iterative fitting along a regularization path.", "linear_model.LarsCV(*[, fit_intercept, \u2026])", "Cross-validated Least Angle Regression model.", "linear_model.LassoCV(*[, eps, n_alphas, \u2026])", "Lasso linear model with iterative fitting along a regularization path.", "linear_model.LassoLarsCV(*[, fit_intercept, \u2026])", "Cross-validated Lasso, using the LARS algorithm.", "linear_model.LogisticRegressionCV(*[, Cs, \u2026])", "Logistic Regression CV (aka logit, MaxEnt) classifier.", "linear_model.MultiTaskElasticNetCV(*[, \u2026])", "Multi-task L1/L2 ElasticNet with built-in cross-validation.", "linear_model.MultiTaskLassoCV(*[, eps, \u2026])", "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.", "linear_model.OrthogonalMatchingPursuitCV(*)", "Cross-validated Orthogonal Matching Pursuit model (OMP).", "linear_model.RidgeCV([alphas, \u2026])", "Ridge regression with built-in cross-validation.", "linear_model.RidgeClassifierCV([alphas, \u2026])", "Ridge classifier with built-in cross-validation.", "Some models can offer an information-theoretic closed-form formula of the optimal estimate of the regularization parameter by computing a single regularization path (instead of several when using cross-validation).", "Here is the list of models benefiting from the Akaike Information Criterion (AIC) or the Bayesian Information Criterion (BIC) for automated model selection:", "linear_model.LassoLarsIC([criterion, \u2026])", "Lasso model fit with Lars using BIC or AIC for model selection", "When using ensemble methods base upon bagging, i.e. generating new training sets using sampling with replacement, part of the training set remains unused. For each classifier in the ensemble, a different part of the training set is left out.", "This left out portion can be used to estimate the generalization error without having to rely on a separate validation set. This estimate comes \u201cfor free\u201d as no additional data is needed and can be used for model selection.", "This is currently implemented in the following classes:", "ensemble.RandomForestClassifier([\u2026])", "A random forest classifier.", "ensemble.RandomForestRegressor([\u2026])", "A random forest regressor.", "ensemble.ExtraTreesClassifier([\u2026])", "An extra-trees classifier.", "ensemble.ExtraTreesRegressor([n_estimators, \u2026])", "An extra-trees regressor.", "ensemble.GradientBoostingClassifier(*[, \u2026])", "Gradient Boosting for classification.", "ensemble.GradientBoostingRegressor(*[, \u2026])", "Gradient Boosting for regression."]}, {"name": "3.3. Metrics and scoring", "path": "modules/model_evaluation", "type": "Guide", "text": ["There are 3 different APIs for evaluating the quality of a model\u2019s predictions:", "Finally, Dummy estimators are useful to get a baseline value of those metrics for random predictions.", "See also", "For \u201cpairwise\u201d metrics, between samples and not estimators or predictions, see the Pairwise metrics, Affinities and Kernels section.", "Model selection and evaluation using tools, such as model_selection.GridSearchCV and model_selection.cross_val_score, take a scoring parameter that controls what metric they apply to the estimators evaluated.", "For the most common use cases, you can designate a scorer object with the scoring parameter; the table below shows all possible values. All scorer objects follow the convention that higher return values are better than lower return values. Thus metrics which measure the distance between the model and the data, like metrics.mean_squared_error, are available as neg_mean_squared_error which return the negated value of the metric.", "Scoring", "Function", "Comment", "Classification", "\u2018accuracy\u2019", "metrics.accuracy_score", "\u2018balanced_accuracy\u2019", "metrics.balanced_accuracy_score", "\u2018top_k_accuracy\u2019", "metrics.top_k_accuracy_score", "\u2018average_precision\u2019", "metrics.average_precision_score", "\u2018neg_brier_score\u2019", "metrics.brier_score_loss", "\u2018f1\u2019", "metrics.f1_score", "for binary targets", "\u2018f1_micro\u2019", "metrics.f1_score", "micro-averaged", "\u2018f1_macro\u2019", "metrics.f1_score", "macro-averaged", "\u2018f1_weighted\u2019", "metrics.f1_score", "weighted average", "\u2018f1_samples\u2019", "metrics.f1_score", "by multilabel sample", "\u2018neg_log_loss\u2019", "metrics.log_loss", "requires predict_proba support", "\u2018precision\u2019 etc.", "metrics.precision_score", "suffixes apply as with \u2018f1\u2019", "\u2018recall\u2019 etc.", "metrics.recall_score", "suffixes apply as with \u2018f1\u2019", "\u2018jaccard\u2019 etc.", "metrics.jaccard_score", "suffixes apply as with \u2018f1\u2019", "\u2018roc_auc\u2019", "metrics.roc_auc_score", "\u2018roc_auc_ovr\u2019", "metrics.roc_auc_score", "\u2018roc_auc_ovo\u2019", "metrics.roc_auc_score", "\u2018roc_auc_ovr_weighted\u2019", "metrics.roc_auc_score", "\u2018roc_auc_ovo_weighted\u2019", "metrics.roc_auc_score", "Clustering", "\u2018adjusted_mutual_info_score\u2019", "metrics.adjusted_mutual_info_score", "\u2018adjusted_rand_score\u2019", "metrics.adjusted_rand_score", "\u2018completeness_score\u2019", "metrics.completeness_score", "\u2018fowlkes_mallows_score\u2019", "metrics.fowlkes_mallows_score", "\u2018homogeneity_score\u2019", "metrics.homogeneity_score", "\u2018mutual_info_score\u2019", "metrics.mutual_info_score", "\u2018normalized_mutual_info_score\u2019", "metrics.normalized_mutual_info_score", "\u2018rand_score\u2019", "metrics.rand_score", "\u2018v_measure_score\u2019", "metrics.v_measure_score", "Regression", "\u2018explained_variance\u2019", "metrics.explained_variance_score", "\u2018max_error\u2019", "metrics.max_error", "\u2018neg_mean_absolute_error\u2019", "metrics.mean_absolute_error", "\u2018neg_mean_squared_error\u2019", "metrics.mean_squared_error", "\u2018neg_root_mean_squared_error\u2019", "metrics.mean_squared_error", "\u2018neg_mean_squared_log_error\u2019", "metrics.mean_squared_log_error", "\u2018neg_median_absolute_error\u2019", "metrics.median_absolute_error", "\u2018r2\u2019", "metrics.r2_score", "\u2018neg_mean_poisson_deviance\u2019", "metrics.mean_poisson_deviance", "\u2018neg_mean_gamma_deviance\u2019", "metrics.mean_gamma_deviance", "\u2018neg_mean_absolute_percentage_error\u2019", "metrics.mean_absolute_percentage_error", "Usage examples:", "Note", "The values listed by the ValueError exception correspond to the functions measuring prediction accuracy described in the following sections. The scorer objects for those functions are stored in the dictionary sklearn.metrics.SCORERS.", "The module sklearn.metrics also exposes a set of simple functions measuring a prediction error given ground truth and prediction:", "Metrics available for various machine learning tasks are detailed in sections below.", "Many metrics are not given names to be used as scoring values, sometimes because they require additional parameters, such as fbeta_score. In such cases, you need to generate an appropriate scoring object. The simplest way to generate a callable object for scoring is by using make_scorer. That function converts metrics into callables that can be used for model evaluation.", "One typical use case is to wrap an existing metric function from the library with non-default values for its parameters, such as the beta parameter for the fbeta_score function:", "The second use case is to build a completely custom scorer object from a simple python function using make_scorer, which can take several parameters:", "Here is an example of building custom scorers, and of using the greater_is_better parameter:", "You can generate even more flexible model scorers by constructing your own scoring object from scratch, without using the make_scorer factory. For a callable to be a scorer, it needs to meet the protocol specified by the following two rules:", "Note", "Using custom scorers in functions where n_jobs > 1", "While defining the custom scoring function alongside the calling function should work out of the box with the default joblib backend (loky), importing it from another module will be a more robust approach and work independently of the joblib backend.", "For example, to use n_jobs greater than 1 in the example below, custom_scoring_function function is saved in a user-created module (custom_scorer_module.py) and imported:", "Scikit-learn also permits evaluation of multiple metrics in GridSearchCV, RandomizedSearchCV and cross_validate.", "There are three ways to specify multiple scoring metrics for the scoring parameter:", "Note that the dict values can either be scorer functions or one of the predefined metric strings.", "As a callable that returns a dictionary of scores:", "The sklearn.metrics module implements several loss, score, and utility functions to measure classification performance. Some metrics might require probability estimates of the positive class, confidence values, or binary decisions values. Most implementations allow each sample to provide a weighted contribution to the overall score, through the sample_weight parameter.", "Some of these are restricted to the binary classification case:", "precision_recall_curve(y_true, probas_pred, *)", "Compute precision-recall pairs for different probability thresholds.", "roc_curve(y_true, y_score, *[, pos_label, \u2026])", "Compute Receiver operating characteristic (ROC).", "det_curve(y_true, y_score[, pos_label, \u2026])", "Compute error rates for different probability thresholds.", "Others also work in the multiclass case:", "balanced_accuracy_score(y_true, y_pred, *[, \u2026])", "Compute the balanced accuracy.", "cohen_kappa_score(y1, y2, *[, labels, \u2026])", "Cohen\u2019s kappa: a statistic that measures inter-annotator agreement.", "confusion_matrix(y_true, y_pred, *[, \u2026])", "Compute confusion matrix to evaluate the accuracy of a classification.", "hinge_loss(y_true, pred_decision, *[, \u2026])", "Average hinge loss (non-regularized).", "matthews_corrcoef(y_true, y_pred, *[, \u2026])", "Compute the Matthews correlation coefficient (MCC).", "roc_auc_score(y_true, y_score, *[, average, \u2026])", "Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from prediction scores.", "top_k_accuracy_score(y_true, y_score, *[, \u2026])", "Top-k Accuracy classification score.", "Some also work in the multilabel case:", "accuracy_score(y_true, y_pred, *[, \u2026])", "Accuracy classification score.", "classification_report(y_true, y_pred, *[, \u2026])", "Build a text report showing the main classification metrics.", "f1_score(y_true, y_pred, *[, labels, \u2026])", "Compute the F1 score, also known as balanced F-score or F-measure.", "fbeta_score(y_true, y_pred, *, beta[, \u2026])", "Compute the F-beta score.", "hamming_loss(y_true, y_pred, *[, sample_weight])", "Compute the average Hamming loss.", "jaccard_score(y_true, y_pred, *[, labels, \u2026])", "Jaccard similarity coefficient score.", "log_loss(y_true, y_pred, *[, eps, \u2026])", "Log loss, aka logistic loss or cross-entropy loss.", "multilabel_confusion_matrix(y_true, y_pred, *)", "Compute a confusion matrix for each class or sample.", "precision_recall_fscore_support(y_true, \u2026)", "Compute precision, recall, F-measure and support for each class.", "precision_score(y_true, y_pred, *[, labels, \u2026])", "Compute the precision.", "recall_score(y_true, y_pred, *[, labels, \u2026])", "Compute the recall.", "roc_auc_score(y_true, y_score, *[, average, \u2026])", "Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from prediction scores.", "zero_one_loss(y_true, y_pred, *[, \u2026])", "Zero-one classification loss.", "And some work with binary and multilabel (but not multiclass) problems:", "average_precision_score(y_true, y_score, *)", "Compute average precision (AP) from prediction scores.", "In the following sub-sections, we will describe each of those functions, preceded by some notes on common API and metric definition.", "Some metrics are essentially defined for binary classification tasks (e.g. f1_score, roc_auc_score). In these cases, by default only the positive label is evaluated, assuming by default that the positive class is labelled 1 (though this may be configurable through the pos_label parameter).", "In extending a binary metric to multiclass or multilabel problems, the data is treated as a collection of binary problems, one for each class. There are then a number of ways to average binary metric calculations across the set of classes, each of which may be useful in some scenario. Where available, you should select among these using the average parameter.", "While multiclass data is provided to the metric, like binary targets, as an array of class labels, multilabel data is specified as an indicator matrix, in which cell [i, j] has value 1 if sample i has label j and value 0 otherwise.", "The accuracy_score function computes the accuracy, either the fraction (default) or the count (normalize=False) of correct predictions.", "In multilabel classification, the function returns the subset accuracy. If the entire set of predicted labels for a sample strictly match with the true set of labels, then the subset accuracy is 1.0; otherwise it is 0.0.", "If \\(\\hat{y}_i\\) is the predicted value of the \\(i\\)-th sample and \\(y_i\\) is the corresponding true value, then the fraction of correct predictions over \\(n_\\text{samples}\\) is defined as", "where \\(1(x)\\) is the indicator function.", "In the multilabel case with binary label indicators:", "Example:", "The top_k_accuracy_score function is a generalization of accuracy_score. The difference is that a prediction is considered correct as long as the true label is associated with one of the k highest predicted scores. accuracy_score is the special case of k = 1.", "The function covers the binary and multiclass classification cases but not the multilabel case.", "If \\(\\hat{f}_{i,j}\\) is the predicted class for the \\(i\\)-th sample corresponding to the \\(j\\)-th largest predicted score and \\(y_i\\) is the corresponding true value, then the fraction of correct predictions over \\(n_\\text{samples}\\) is defined as", "where \\(k\\) is the number of guesses allowed and \\(1(x)\\) is the indicator function.", "The balanced_accuracy_score function computes the balanced accuracy, which avoids inflated performance estimates on imbalanced datasets. It is the macro-average of recall scores per class or, equivalently, raw accuracy where each sample is weighted according to the inverse prevalence of its true class. Thus for balanced datasets, the score is equal to accuracy.", "In the binary case, balanced accuracy is equal to the arithmetic mean of sensitivity (true positive rate) and specificity (true negative rate), or the area under the ROC curve with binary predictions rather than scores:", "If the classifier performs equally well on either class, this term reduces to the conventional accuracy (i.e., the number of correct predictions divided by the total number of predictions).", "In contrast, if the conventional accuracy is above chance only because the classifier takes advantage of an imbalanced test set, then the balanced accuracy, as appropriate, will drop to \\(\\frac{1}{n\\_classes}\\).", "The score ranges from 0 to 1, or when adjusted=True is used, it rescaled to the range \\(\\frac{1}{1 - n\\_classes}\\) to 1, inclusive, with performance at random scoring 0.", "If \\(y_i\\) is the true value of the \\(i\\)-th sample, and \\(w_i\\) is the corresponding sample weight, then we adjust the sample weight to:", "where \\(1(x)\\) is the indicator function. Given predicted \\(\\hat{y}_i\\) for sample \\(i\\), balanced accuracy is defined as:", "With adjusted=True, balanced accuracy reports the relative increase from \\(\\texttt{balanced-accuracy}(y, \\mathbf{0}, w) = \\frac{1}{n\\_classes}\\). In the binary case, this is also known as *Youden\u2019s J statistic*, or informedness.", "Note", "The multiclass definition here seems the most reasonable extension of the metric used in binary classification, though there is no certain consensus in the literature:", "References:", "I. Guyon, K. Bennett, G. Cawley, H.J. Escalante, S. Escalera, T.K. Ho, N. Maci\u00e0, B. Ray, M. Saeed, A.R. Statnikov, E. Viegas, Design of the 2015 ChaLearn AutoML Challenge, IJCNN 2015.", "L. Mosley, A balanced approach to the multi-class imbalance problem, IJCV 2010.", "John. D. Kelleher, Brian Mac Namee, Aoife D\u2019Arcy, Fundamentals of Machine Learning for Predictive Data Analytics: Algorithms, Worked Examples, and Case Studies, 2015.", "Urbanowicz R.J., Moore, J.H. ExSTraCS 2.0: description and evaluation of a scalable learning classifier system, Evol. Intel. (2015) 8: 89.", "The function cohen_kappa_score computes Cohen\u2019s kappa statistic. This measure is intended to compare labelings by different human annotators, not a classifier versus a ground truth.", "The kappa score (see docstring) is a number between -1 and 1. Scores above .8 are generally considered good agreement; zero or lower means no agreement (practically random labels).", "Kappa scores can be computed for binary or multiclass problems, but not for multilabel problems (except by manually computing a per-label score) and not for more than two annotators.", "The confusion_matrix function evaluates classification accuracy by computing the confusion matrix with each row corresponding to the true class (Wikipedia and other references may use different convention for axes).", "By definition, entry \\(i, j\\) in a confusion matrix is the number of observations actually in group \\(i\\), but predicted to be in group \\(j\\). Here is an example:", "plot_confusion_matrix can be used to visually represent a confusion matrix as shown in the Confusion matrix example, which creates the following figure:", "The parameter normalize allows to report ratios instead of counts. The confusion matrix can be normalized in 3 different ways: 'pred', 'true', and 'all' which will divide the counts by the sum of each columns, rows, or the entire matrix, respectively.", "For binary problems, we can get counts of true negatives, false positives, false negatives and true positives as follows:", "Example:", "The classification_report function builds a text report showing the main classification metrics. Here is a small example with custom target_names and inferred labels:", "Example:", "The hamming_loss computes the average Hamming loss or Hamming distance between two sets of samples.", "If \\(\\hat{y}_j\\) is the predicted value for the \\(j\\)-th label of a given sample, \\(y_j\\) is the corresponding true value, and \\(n_\\text{labels}\\) is the number of classes or labels, then the Hamming loss \\(L_{Hamming}\\) between two samples is defined as:", "where \\(1(x)\\) is the indicator function.", "In the multilabel case with binary label indicators:", "Note", "In multiclass classification, the Hamming loss corresponds to the Hamming distance between y_true and y_pred which is similar to the Zero one loss function. However, while zero-one loss penalizes prediction sets that do not strictly match true sets, the Hamming loss penalizes individual labels. Thus the Hamming loss, upper bounded by the zero-one loss, is always between zero and one, inclusive; and predicting a proper subset or superset of the true labels will give a Hamming loss between zero and one, exclusive.", "Intuitively, precision is the ability of the classifier not to label as positive a sample that is negative, and recall is the ability of the classifier to find all the positive samples.", "The F-measure (\\(F_\\beta\\) and \\(F_1\\) measures) can be interpreted as a weighted harmonic mean of the precision and recall. A \\(F_\\beta\\) measure reaches its best value at 1 and its worst score at 0. With \\(\\beta = 1\\), \\(F_\\beta\\) and \\(F_1\\) are equivalent, and the recall and the precision are equally important.", "The precision_recall_curve computes a precision-recall curve from the ground truth label and a score given by the classifier by varying a decision threshold.", "The average_precision_score function computes the average precision (AP) from prediction scores. The value is between 0 and 1 and higher is better. AP is defined as", "where \\(P_n\\) and \\(R_n\\) are the precision and recall at the nth threshold. With random predictions, the AP is the fraction of positive samples.", "References [Manning2008] and [Everingham2010] present alternative variants of AP that interpolate the precision-recall curve. Currently, average_precision_score does not implement any interpolated variant. References [Davis2006] and [Flach2015] describe why a linear interpolation of points on the precision-recall curve provides an overly-optimistic measure of classifier performance. This linear interpolation is used when computing area under the curve with the trapezoidal rule in auc.", "Several functions allow you to analyze the precision, recall and F-measures score:", "average_precision_score(y_true, y_score, *)", "Compute average precision (AP) from prediction scores.", "f1_score(y_true, y_pred, *[, labels, \u2026])", "Compute the F1 score, also known as balanced F-score or F-measure.", "fbeta_score(y_true, y_pred, *, beta[, \u2026])", "Compute the F-beta score.", "precision_recall_curve(y_true, probas_pred, *)", "Compute precision-recall pairs for different probability thresholds.", "precision_recall_fscore_support(y_true, \u2026)", "Compute precision, recall, F-measure and support for each class.", "precision_score(y_true, y_pred, *[, labels, \u2026])", "Compute the precision.", "recall_score(y_true, y_pred, *[, labels, \u2026])", "Compute the recall.", "Note that the precision_recall_curve function is restricted to the binary case. The average_precision_score function works only in binary classification and multilabel indicator format. The plot_precision_recall_curve function plots the precision recall as follows.", "Examples:", "References:", "C.D. Manning, P. Raghavan, H. Sch\u00fctze, Introduction to Information Retrieval, 2008.", "M. Everingham, L. Van Gool, C.K.I. Williams, J. Winn, A. Zisserman, The Pascal Visual Object Classes (VOC) Challenge, IJCV 2010.", "J. Davis, M. Goadrich, The Relationship Between Precision-Recall and ROC Curves, ICML 2006.", "P.A. Flach, M. Kull, Precision-Recall-Gain Curves: PR Analysis Done Right, NIPS 2015.", "In a binary classification task, the terms \u2018\u2019positive\u2019\u2019 and \u2018\u2019negative\u2019\u2019 refer to the classifier\u2019s prediction, and the terms \u2018\u2019true\u2019\u2019 and \u2018\u2019false\u2019\u2019 refer to whether that prediction corresponds to the external judgment (sometimes known as the \u2018\u2019observation\u2019\u2019). Given these definitions, we can formulate the following table:", "Actual class (observation)", "Predicted class (expectation)", "tp (true positive) Correct result", "fp (false positive) Unexpected result", "fn (false negative) Missing result", "tn (true negative) Correct absence of result", "In this context, we can define the notions of precision, recall and F-measure:", "Here are some small examples in binary classification:", "In multiclass and multilabel classification task, the notions of precision, recall, and F-measures can be applied to each label independently. There are a few ways to combine results across labels, specified by the average argument to the average_precision_score (multilabel only), f1_score, fbeta_score, precision_recall_fscore_support, precision_score and recall_score functions, as described above. Note that if all labels are included, \u201cmicro\u201d-averaging in a multiclass setting will produce precision, recall and \\(F\\) that are all identical to accuracy. Also note that \u201cweighted\u201d averaging may produce an F-score that is not between precision and recall.", "To make this more explicit, consider the following notation:", "Then the metrics are defined as:", "average", "Precision", "Recall", "F_beta", "\"micro\"", "\\(P(y, \\hat{y})\\)", "\\(R(y, \\hat{y})\\)", "\\(F_\\beta(y, \\hat{y})\\)", "\"samples\"", "\\(\\frac{1}{\\left|S\\right|} \\sum_{s \\in S} P(y_s, \\hat{y}_s)\\)", "\\(\\frac{1}{\\left|S\\right|} \\sum_{s \\in S} R(y_s, \\hat{y}_s)\\)", "\\(\\frac{1}{\\left|S\\right|} \\sum_{s \\in S} F_\\beta(y_s, \\hat{y}_s)\\)", "\"macro\"", "\\(\\frac{1}{\\left|L\\right|} \\sum_{l \\in L} P(y_l, \\hat{y}_l)\\)", "\\(\\frac{1}{\\left|L\\right|} \\sum_{l \\in L} R(y_l, \\hat{y}_l)\\)", "\\(\\frac{1}{\\left|L\\right|} \\sum_{l \\in L} F_\\beta(y_l, \\hat{y}_l)\\)", "\"weighted\"", "\\(\\frac{1}{\\sum_{l \\in L} \\left|\\hat{y}_l\\right|} \\sum_{l \\in L} \\left|\\hat{y}_l\\right| P(y_l, \\hat{y}_l)\\)", "\\(\\frac{1}{\\sum_{l \\in L} \\left|\\hat{y}_l\\right|} \\sum_{l \\in L} \\left|\\hat{y}_l\\right| R(y_l, \\hat{y}_l)\\)", "\\(\\frac{1}{\\sum_{l \\in L} \\left|\\hat{y}_l\\right|} \\sum_{l \\in L} \\left|\\hat{y}_l\\right| F_\\beta(y_l, \\hat{y}_l)\\)", "None", "\\(\\langle P(y_l, \\hat{y}_l) | l \\in L \\rangle\\)", "\\(\\langle R(y_l, \\hat{y}_l) | l \\in L \\rangle\\)", "\\(\\langle F_\\beta(y_l, \\hat{y}_l) | l \\in L \\rangle\\)", "For multiclass classification with a \u201cnegative class\u201d, it is possible to exclude some labels:", "Similarly, labels not present in the data sample may be accounted for in macro-averaging.", "The jaccard_score function computes the average of Jaccard similarity coefficients, also called the Jaccard index, between pairs of label sets.", "The Jaccard similarity coefficient of the \\(i\\)-th samples, with a ground truth label set \\(y_i\\) and predicted label set \\(\\hat{y}_i\\), is defined as", "jaccard_score works like precision_recall_fscore_support as a naively set-wise measure applying natively to binary targets, and extended to apply to multilabel and multiclass through the use of average (see above).", "In the binary case:", "In the multilabel case with binary label indicators:", "Multiclass problems are binarized and treated like the corresponding multilabel problem:", "The hinge_loss function computes the average distance between the model and the data using hinge loss, a one-sided metric that considers only prediction errors. (Hinge loss is used in maximal margin classifiers such as support vector machines.)", "If the labels are encoded with +1 and -1, \\(y\\): is the true value, and \\(w\\) is the predicted decisions as output by decision_function, then the hinge loss is defined as:", "If there are more than two labels, hinge_loss uses a multiclass variant due to Crammer & Singer. Here is the paper describing it.", "If \\(y_w\\) is the predicted decision for true label and \\(y_t\\) is the maximum of the predicted decisions for all other labels, where predicted decisions are output by decision function, then multiclass hinge loss is defined by:", "Here a small example demonstrating the use of the hinge_loss function with a svm classifier in a binary class problem:", "Here is an example demonstrating the use of the hinge_loss function with a svm classifier in a multiclass problem:", "Log loss, also called logistic regression loss or cross-entropy loss, is defined on probability estimates. It is commonly used in (multinomial) logistic regression and neural networks, as well as in some variants of expectation-maximization, and can be used to evaluate the probability outputs (predict_proba) of a classifier instead of its discrete predictions.", "For binary classification with a true label \\(y \\in \\{0,1\\}\\) and a probability estimate \\(p = \\operatorname{Pr}(y = 1)\\), the log loss per sample is the negative log-likelihood of the classifier given the true label:", "This extends to the multiclass case as follows. Let the true labels for a set of samples be encoded as a 1-of-K binary indicator matrix \\(Y\\), i.e., \\(y_{i,k} = 1\\) if sample \\(i\\) has label \\(k\\) taken from a set of \\(K\\) labels. Let \\(P\\) be a matrix of probability estimates, with \\(p_{i,k} = \\operatorname{Pr}(y_{i,k} = 1)\\). Then the log loss of the whole set is", "To see how this generalizes the binary log loss given above, note that in the binary case, \\(p_{i,0} = 1 - p_{i,1}\\) and \\(y_{i,0} = 1 - y_{i,1}\\), so expanding the inner sum over \\(y_{i,k} \\in \\{0,1\\}\\) gives the binary log loss.", "The log_loss function computes log loss given a list of ground-truth labels and a probability matrix, as returned by an estimator\u2019s predict_proba method.", "The first [.9, .1] in y_pred denotes 90% probability that the first sample has label 0. The log loss is non-negative.", "The matthews_corrcoef function computes the Matthew\u2019s correlation coefficient (MCC) for binary classes. Quoting Wikipedia:", "\u201cThe Matthews correlation coefficient is used in machine learning as a measure of the quality of binary (two-class) classifications. It takes into account true and false positives and negatives and is generally regarded as a balanced measure which can be used even if the classes are of very different sizes. The MCC is in essence a correlation coefficient value between -1 and +1. A coefficient of +1 represents a perfect prediction, 0 an average random prediction and -1 an inverse prediction. The statistic is also known as the phi coefficient.\u201d", "In the binary (two-class) case, \\(tp\\), \\(tn\\), \\(fp\\) and \\(fn\\) are respectively the number of true positives, true negatives, false positives and false negatives, the MCC is defined as", "In the multiclass case, the Matthews correlation coefficient can be defined in terms of a confusion_matrix \\(C\\) for \\(K\\) classes. To simplify the definition consider the following intermediate variables:", "Then the multiclass MCC is defined as:", "When there are more than two labels, the value of the MCC will no longer range between -1 and +1. Instead the minimum value will be somewhere between -1 and 0 depending on the number and distribution of ground true labels. The maximum value is always +1.", "Here is a small example illustrating the usage of the matthews_corrcoef function:", "The multilabel_confusion_matrix function computes class-wise (default) or sample-wise (samplewise=True) multilabel confusion matrix to evaluate the accuracy of a classification. multilabel_confusion_matrix also treats multiclass data as if it were multilabel, as this is a transformation commonly applied to evaluate multiclass problems with binary classification metrics (such as precision, recall, etc.).", "When calculating class-wise multilabel confusion matrix \\(C\\), the count of true negatives for class \\(i\\) is \\(C_{i,0,0}\\), false negatives is \\(C_{i,1,0}\\), true positives is \\(C_{i,1,1}\\) and false positives is \\(C_{i,0,1}\\).", "Here is an example demonstrating the use of the multilabel_confusion_matrix function with multilabel indicator matrix input:", "Or a confusion matrix can be constructed for each sample\u2019s labels:", "Here is an example demonstrating the use of the multilabel_confusion_matrix function with multiclass input:", "Here are some examples demonstrating the use of the multilabel_confusion_matrix function to calculate recall (or sensitivity), specificity, fall out and miss rate for each class in a problem with multilabel indicator matrix input.", "Calculating recall (also called the true positive rate or the sensitivity) for each class:", "Calculating specificity (also called the true negative rate) for each class:", "Calculating fall out (also called the false positive rate) for each class:", "Calculating miss rate (also called the false negative rate) for each class:", "The function roc_curve computes the receiver operating characteristic curve, or ROC curve. Quoting Wikipedia :", "\u201cA receiver operating characteristic (ROC), or simply ROC curve, is a graphical plot which illustrates the performance of a binary classifier system as its discrimination threshold is varied. It is created by plotting the fraction of true positives out of the positives (TPR = true positive rate) vs. the fraction of false positives out of the negatives (FPR = false positive rate), at various threshold settings. TPR is also known as sensitivity, and FPR is one minus the specificity or true negative rate.\u201d", "This function requires the true binary value and the target scores, which can either be probability estimates of the positive class, confidence values, or binary decisions. Here is a small example of how to use the roc_curve function:", "This figure shows an example of such an ROC curve:", "The roc_auc_score function computes the area under the receiver operating characteristic (ROC) curve, which is also denoted by AUC or AUROC. By computing the area under the roc curve, the curve information is summarized in one number. For more information see the Wikipedia article on AUC.", "Compared to metrics such as the subset accuracy, the Hamming loss, or the F1 score, ROC doesn\u2019t require optimizing a threshold for each label.", "In the binary case, you can either provide the probability estimates, using the classifier.predict_proba() method, or the non-thresholded decision values given by the classifier.decision_function() method. In the case of providing the probability estimates, the probability of the class with the \u201cgreater label\u201d should be provided. The \u201cgreater label\u201d corresponds to classifier.classes_[1] and thus classifier.predict_proba(X)[:, 1]. Therefore, the y_score parameter is of size (n_samples,).", "We can use the probability estimates corresponding to clf.classes_[1].", "Otherwise, we can use the non-thresholded decision values", "The roc_auc_score function can also be used in multi-class classification. Two averaging strategies are currently supported: the one-vs-one algorithm computes the average of the pairwise ROC AUC scores, and the one-vs-rest algorithm computes the average of the ROC AUC scores for each class against all other classes. In both cases, the predicted labels are provided in an array with values from 0 to n_classes, and the scores correspond to the probability estimates that a sample belongs to a particular class. The OvO and OvR algorithms support weighting uniformly (average='macro') and by prevalence (average='weighted').", "One-vs-one Algorithm: Computes the average AUC of all possible pairwise combinations of classes. [HT2001] defines a multiclass AUC metric weighted uniformly:", "where \\(c\\) is the number of classes and \\(\\text{AUC}(j | k)\\) is the AUC with class \\(j\\) as the positive class and class \\(k\\) as the negative class. In general, \\(\\text{AUC}(j | k) \\neq \\text{AUC}(k | j))\\) in the multiclass case. This algorithm is used by setting the keyword argument multiclass to 'ovo' and average to 'macro'.", "The [HT2001] multiclass AUC metric can be extended to be weighted by the prevalence:", "where \\(c\\) is the number of classes. This algorithm is used by setting the keyword argument multiclass to 'ovo' and average to 'weighted'. The 'weighted' option returns a prevalence-weighted average as described in [FC2009].", "One-vs-rest Algorithm: Computes the AUC of each class against the rest [PD2000]. The algorithm is functionally the same as the multilabel case. To enable this algorithm set the keyword argument multiclass to 'ovr'. Like OvO, OvR supports two types of averaging: 'macro' [F2006] and 'weighted' [F2001].", "In applications where a high false positive rate is not tolerable the parameter max_fpr of roc_auc_score can be used to summarize the ROC curve up to the given limit.", "In multi-label classification, the roc_auc_score function is extended by averaging over the labels as above. In this case, you should provide a y_score of shape (n_samples, n_classes). Thus, when using the probability estimates, one needs to select the probability of the class with the greater label for each output.", "And the decision values do not require such processing.", "Examples:", "References:", "Hand, D.J. and Till, R.J., (2001). A simple generalisation of the area under the ROC curve for multiple class classification problems. Machine learning, 45(2), pp.171-186.", "Ferri, C\u00e8sar & Hernandez-Orallo, Jose & Modroiu, R. (2009). An Experimental Comparison of Performance Measures for Classification. Pattern Recognition Letters. 30. 27-38.", "Provost, F., Domingos, P. (2000). Well-trained PETs: Improving probability estimation trees (Section 6.2), CeDER Working Paper #IS-00-04, Stern School of Business, New York University.", "Fawcett, T., 2006. An introduction to ROC analysis. Pattern Recognition Letters, 27(8), pp. 861-874.", "Fawcett, T., 2001. Using rule sets to maximize ROC performance In Data Mining, 2001. Proceedings IEEE International Conference, pp. 131-138.", "The function det_curve computes the detection error tradeoff curve (DET) curve [WikipediaDET2017]. Quoting Wikipedia:", "\u201cA detection error tradeoff (DET) graph is a graphical plot of error rates for binary classification systems, plotting false reject rate vs. false accept rate. The x- and y-axes are scaled non-linearly by their standard normal deviates (or just by logarithmic transformation), yielding tradeoff curves that are more linear than ROC curves, and use most of the image area to highlight the differences of importance in the critical operating region.\u201d", "DET curves are a variation of receiver operating characteristic (ROC) curves where False Negative Rate is plotted on the y-axis instead of True Positive Rate. DET curves are commonly plotted in normal deviate scale by transformation with \\(\\phi^{-1}\\) (with \\(\\phi\\) being the cumulative distribution function). The resulting performance curves explicitly visualize the tradeoff of error types for given classification algorithms. See [Martin1997] for examples and further motivation.", "This figure compares the ROC and DET curves of two example classifiers on the same classification task:", "Properties:", "Applications and limitations:", "DET curves are intuitive to read and hence allow quick visual assessment of a classifier\u2019s performance. Additionally DET curves can be consulted for threshold analysis and operating point selection. This is particularly helpful if a comparison of error types is required.", "One the other hand DET curves do not provide their metric as a single number. Therefore for either automated evaluation or comparison to other classification tasks metrics like the derived area under ROC curve might be better suited.", "Examples:", "References:", "Wikipedia contributors. Detection error tradeoff. Wikipedia, The Free Encyclopedia. September 4, 2017, 23:33 UTC. Available at: https://en.wikipedia.org/w/index.php?title=Detection_error_tradeoff&oldid=798982054. Accessed February 19, 2018.", "A. Martin, G. Doddington, T. Kamm, M. Ordowski, and M. Przybocki, The DET Curve in Assessment of Detection Task Performance, NIST 1997.", "J. Navractil and D. Klusacek, \u201cOn Linear DETs,\u201d 2007 IEEE International Conference on Acoustics, Speech and Signal Processing - ICASSP \u201807, Honolulu, HI, 2007, pp. IV-229-IV-232.", "The zero_one_loss function computes the sum or the average of the 0-1 classification loss (\\(L_{0-1}\\)) over \\(n_{\\text{samples}}\\). By default, the function normalizes over the sample. To get the sum of the \\(L_{0-1}\\), set normalize to False.", "In multilabel classification, the zero_one_loss scores a subset as one if its labels strictly match the predictions, and as a zero if there are any errors. By default, the function returns the percentage of imperfectly predicted subsets. To get the count of such subsets instead, set normalize to False", "If \\(\\hat{y}_i\\) is the predicted value of the \\(i\\)-th sample and \\(y_i\\) is the corresponding true value, then the 0-1 loss \\(L_{0-1}\\) is defined as:", "where \\(1(x)\\) is the indicator function.", "In the multilabel case with binary label indicators, where the first label set [0,1] has an error:", "Example:", "The brier_score_loss function computes the Brier score for binary classes [Brier1950]. Quoting Wikipedia:", "\u201cThe Brier score is a proper score function that measures the accuracy of probabilistic predictions. It is applicable to tasks in which predictions must assign probabilities to a set of mutually exclusive discrete outcomes.\u201d", "This function returns the mean squared error of the actual outcome \\(y \\in \\{0,1\\}\\) and the predicted probability estimate \\(p = \\operatorname{Pr}(y = 1)\\) (predict_proba) as outputted by:", "The Brier score loss is also between 0 to 1 and the lower the value (the mean square difference is smaller), the more accurate the prediction is.", "Here is a small example of usage of this function:", "The Brier score can be used to assess how well a classifier is calibrated. However, a lower Brier score loss does not always mean a better calibration. This is because, by analogy with the bias-variance decomposition of the mean squared error, the Brier score loss can be decomposed as the sum of calibration loss and refinement loss [Bella2012]. Calibration loss is defined as the mean squared deviation from empirical probabilities derived from the slope of ROC segments. Refinement loss can be defined as the expected optimal loss as measured by the area under the optimal cost curve. Refinement loss can change independently from calibration loss, thus a lower Brier score loss does not necessarily mean a better calibrated model. \u201cOnly when refinement loss remains the same does a lower Brier score loss always mean better calibration\u201d [Bella2012], [Flach2008].", "Example:", "References:", "G. Brier, Verification of forecasts expressed in terms of probability, Monthly weather review 78.1 (1950)", "Bella, Ferri, Hern\u00e1ndez-Orallo, and Ram\u00edrez-Quintana \u201cCalibration of Machine Learning Models\u201d in Khosrow-Pour, M. \u201cMachine learning: concepts, methodologies, tools and applications.\u201d Hershey, PA: Information Science Reference (2012).", "Flach, Peter, and Edson Matsubara. \u201cOn classification, ranking, and probability estimation.\u201d Dagstuhl Seminar Proceedings. Schloss Dagstuhl-Leibniz-Zentrum fr Informatik (2008).", "In multilabel learning, each sample can have any number of ground truth labels associated with it. The goal is to give high scores and better rank to the ground truth labels.", "The coverage_error function computes the average number of labels that have to be included in the final prediction such that all true labels are predicted. This is useful if you want to know how many top-scored-labels you have to predict in average without missing any true one. The best value of this metrics is thus the average number of true labels.", "Note", "Our implementation\u2019s score is 1 greater than the one given in Tsoumakas et al., 2010. This extends it to handle the degenerate case in which an instance has 0 true labels.", "Formally, given a binary indicator matrix of the ground truth labels \\(y \\in \\left\\{0, 1\\right\\}^{n_\\text{samples} \\times n_\\text{labels}}\\) and the score associated with each label \\(\\hat{f} \\in \\mathbb{R}^{n_\\text{samples} \\times n_\\text{labels}}\\), the coverage is defined as", "with \\(\\text{rank}_{ij} = \\left|\\left\\{k: \\hat{f}_{ik} \\geq \\hat{f}_{ij} \\right\\}\\right|\\). Given the rank definition, ties in y_scores are broken by giving the maximal rank that would have been assigned to all tied values.", "Here is a small example of usage of this function:", "The label_ranking_average_precision_score function implements label ranking average precision (LRAP). This metric is linked to the average_precision_score function, but is based on the notion of label ranking instead of precision and recall.", "Label ranking average precision (LRAP) averages over the samples the answer to the following question: for each ground truth label, what fraction of higher-ranked labels were true labels? This performance measure will be higher if you are able to give better rank to the labels associated with each sample. The obtained score is always strictly greater than 0, and the best value is 1. If there is exactly one relevant label per sample, label ranking average precision is equivalent to the mean reciprocal rank.", "Formally, given a binary indicator matrix of the ground truth labels \\(y \\in \\left\\{0, 1\\right\\}^{n_\\text{samples} \\times n_\\text{labels}}\\) and the score associated with each label \\(\\hat{f} \\in \\mathbb{R}^{n_\\text{samples} \\times n_\\text{labels}}\\), the average precision is defined as", "where \\(\\mathcal{L}_{ij} = \\left\\{k: y_{ik} = 1, \\hat{f}_{ik} \\geq \\hat{f}_{ij} \\right\\}\\), \\(\\text{rank}_{ij} = \\left|\\left\\{k: \\hat{f}_{ik} \\geq \\hat{f}_{ij} \\right\\}\\right|\\), \\(|\\cdot|\\) computes the cardinality of the set (i.e., the number of elements in the set), and \\(||\\cdot||_0\\) is the \\(\\ell_0\\) \u201cnorm\u201d (which computes the number of nonzero elements in a vector).", "Here is a small example of usage of this function:", "The label_ranking_loss function computes the ranking loss which averages over the samples the number of label pairs that are incorrectly ordered, i.e. true labels have a lower score than false labels, weighted by the inverse of the number of ordered pairs of false and true labels. The lowest achievable ranking loss is zero.", "Formally, given a binary indicator matrix of the ground truth labels \\(y \\in \\left\\{0, 1\\right\\}^{n_\\text{samples} \\times n_\\text{labels}}\\) and the score associated with each label \\(\\hat{f} \\in \\mathbb{R}^{n_\\text{samples} \\times n_\\text{labels}}\\), the ranking loss is defined as", "where \\(|\\cdot|\\) computes the cardinality of the set (i.e., the number of elements in the set) and \\(||\\cdot||_0\\) is the \\(\\ell_0\\) \u201cnorm\u201d (which computes the number of nonzero elements in a vector).", "Here is a small example of usage of this function:", "References:", "Discounted Cumulative Gain (DCG) and Normalized Discounted Cumulative Gain (NDCG) are ranking metrics implemented in dcg_score and ndcg_score ; they compare a predicted order to ground-truth scores, such as the relevance of answers to a query.", "From the Wikipedia page for Discounted Cumulative Gain:", "\u201cDiscounted cumulative gain (DCG) is a measure of ranking quality. In information retrieval, it is often used to measure effectiveness of web search engine algorithms or related applications. Using a graded relevance scale of documents in a search-engine result set, DCG measures the usefulness, or gain, of a document based on its position in the result list. The gain is accumulated from the top of the result list to the bottom, with the gain of each result discounted at lower ranks\u201d", "DCG orders the true targets (e.g. relevance of query answers) in the predicted order, then multiplies them by a logarithmic decay and sums the result. The sum can be truncated after the first \\(K\\) results, in which case we call it DCG@K. NDCG, or NDCG@K is DCG divided by the DCG obtained by a perfect prediction, so that it is always between 0 and 1. Usually, NDCG is preferred to DCG.", "Compared with the ranking loss, NDCG can take into account relevance scores, rather than a ground-truth ranking. So if the ground-truth consists only of an ordering, the ranking loss should be preferred; if the ground-truth consists of actual usefulness scores (e.g. 0 for irrelevant, 1 for relevant, 2 for very relevant), NDCG can be used.", "For one sample, given the vector of continuous ground-truth values for each target \\(y \\in \\mathbb{R}^{M}\\), where \\(M\\) is the number of outputs, and the prediction \\(\\hat{y}\\), which induces the ranking function \\(f\\), the DCG score is", "and the NDCG score is the DCG score divided by the DCG score obtained for \\(y\\).", "References:", "The sklearn.metrics module implements several loss, score, and utility functions to measure regression performance. Some of those have been enhanced to handle the multioutput case: mean_squared_error, mean_absolute_error, explained_variance_score and r2_score.", "These functions have an multioutput keyword argument which specifies the way the scores or losses for each individual target should be averaged. The default is 'uniform_average', which specifies a uniformly weighted mean over outputs. If an ndarray of shape (n_outputs,) is passed, then its entries are interpreted as weights and an according weighted average is returned. If multioutput is 'raw_values' is specified, then all unaltered individual scores or losses will be returned in an array of shape (n_outputs,).", "The r2_score and explained_variance_score accept an additional value 'variance_weighted' for the multioutput parameter. This option leads to a weighting of each individual score by the variance of the corresponding target variable. This setting quantifies the globally captured unscaled variance. If the target variables are of different scale, then this score puts more importance on well explaining the higher variance variables. multioutput='variance_weighted' is the default value for r2_score for backward compatibility. This will be changed to uniform_average in the future.", "The explained_variance_score computes the explained variance regression score.", "If \\(\\hat{y}\\) is the estimated target output, \\(y\\) the corresponding (correct) target output, and \\(Var\\) is Variance, the square of the standard deviation, then the explained variance is estimated as follow:", "The best possible score is 1.0, lower values are worse.", "Here is a small example of usage of the explained_variance_score function:", "The max_error function computes the maximum residual error , a metric that captures the worst case error between the predicted value and the true value. In a perfectly fitted single output regression model, max_error would be 0 on the training set and though this would be highly unlikely in the real world, this metric shows the extent of error that the model had when it was fitted.", "If \\(\\hat{y}_i\\) is the predicted value of the \\(i\\)-th sample, and \\(y_i\\) is the corresponding true value, then the max error is defined as", "Here is a small example of usage of the max_error function:", "The max_error does not support multioutput.", "The mean_absolute_error function computes mean absolute error, a risk metric corresponding to the expected value of the absolute error loss or \\(l1\\)-norm loss.", "If \\(\\hat{y}_i\\) is the predicted value of the \\(i\\)-th sample, and \\(y_i\\) is the corresponding true value, then the mean absolute error (MAE) estimated over \\(n_{\\text{samples}}\\) is defined as", "Here is a small example of usage of the mean_absolute_error function:", "The mean_squared_error function computes mean square error, a risk metric corresponding to the expected value of the squared (quadratic) error or loss.", "If \\(\\hat{y}_i\\) is the predicted value of the \\(i\\)-th sample, and \\(y_i\\) is the corresponding true value, then the mean squared error (MSE) estimated over \\(n_{\\text{samples}}\\) is defined as", "Here is a small example of usage of the mean_squared_error function:", "Examples:", "The mean_squared_log_error function computes a risk metric corresponding to the expected value of the squared logarithmic (quadratic) error or loss.", "If \\(\\hat{y}_i\\) is the predicted value of the \\(i\\)-th sample, and \\(y_i\\) is the corresponding true value, then the mean squared logarithmic error (MSLE) estimated over \\(n_{\\text{samples}}\\) is defined as", "Where \\(\\log_e (x)\\) means the natural logarithm of \\(x\\). This metric is best to use when targets having exponential growth, such as population counts, average sales of a commodity over a span of years etc. Note that this metric penalizes an under-predicted estimate greater than an over-predicted estimate.", "Here is a small example of usage of the mean_squared_log_error function:", "The mean_absolute_percentage_error (MAPE), also known as mean absolute percentage deviation (MAPD), is an evaluation metric for regression problems. The idea of this metric is to be sensitive to relative errors. It is for example not changed by a global scaling of the target variable.", "If \\(\\hat{y}_i\\) is the predicted value of the \\(i\\)-th sample and \\(y_i\\) is the corresponding true value, then the mean absolute percentage error (MAPE) estimated over \\(n_{\\text{samples}}\\) is defined as", "where \\(\\epsilon\\) is an arbitrary small yet strictly positive number to avoid undefined results when y is zero.", "The mean_absolute_percentage_error function supports multioutput.", "Here is a small example of usage of the mean_absolute_percentage_error function:", "In above example, if we had used mean_absolute_error, it would have ignored the small magnitude values and only reflected the error in prediction of highest magnitude value. But that problem is resolved in case of MAPE because it calculates relative percentage error with respect to actual output.", "The median_absolute_error is particularly interesting because it is robust to outliers. The loss is calculated by taking the median of all absolute differences between the target and the prediction.", "If \\(\\hat{y}_i\\) is the predicted value of the \\(i\\)-th sample and \\(y_i\\) is the corresponding true value, then the median absolute error (MedAE) estimated over \\(n_{\\text{samples}}\\) is defined as", "The median_absolute_error does not support multioutput.", "Here is a small example of usage of the median_absolute_error function:", "The r2_score function computes the coefficient of determination, usually denoted as R\u00b2.", "It represents the proportion of variance (of y) that has been explained by the independent variables in the model. It provides an indication of goodness of fit and therefore a measure of how well unseen samples are likely to be predicted by the model, through the proportion of explained variance.", "As such variance is dataset dependent, R\u00b2 may not be meaningfully comparable across different datasets. Best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a R\u00b2 score of 0.0.", "If \\(\\hat{y}_i\\) is the predicted value of the \\(i\\)-th sample and \\(y_i\\) is the corresponding true value for total \\(n\\) samples, the estimated R\u00b2 is defined as:", "where \\(\\bar{y} = \\frac{1}{n} \\sum_{i=1}^{n} y_i\\) and \\(\\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2 = \\sum_{i=1}^{n} \\epsilon_i^2\\).", "Note that r2_score calculates unadjusted R\u00b2 without correcting for bias in sample variance of y.", "Here is a small example of usage of the r2_score function:", "Example:", "The mean_tweedie_deviance function computes the mean Tweedie deviance error with a power parameter (\\(p\\)). This is a metric that elicits predicted expectation values of regression targets.", "Following special cases exist,", "If \\(\\hat{y}_i\\) is the predicted value of the \\(i\\)-th sample, and \\(y_i\\) is the corresponding true value, then the mean Tweedie deviance error (D) for power \\(p\\), estimated over \\(n_{\\text{samples}}\\) is defined as", "Tweedie deviance is a homogeneous function of degree 2-power. Thus, Gamma distribution with power=2 means that simultaneously scaling y_true and y_pred has no effect on the deviance. For Poisson distribution power=1 the deviance scales linearly, and for Normal distribution (power=0), quadratically. In general, the higher power the less weight is given to extreme deviations between true and predicted targets.", "For instance, let\u2019s compare the two predictions 1.0 and 100 that are both 50% of their corresponding true value.", "The mean squared error (power=0) is very sensitive to the prediction difference of the second point,:", "If we increase power to 1,:", "the difference in errors decreases. Finally, by setting, power=2:", "we would get identical errors. The deviance when power=2 is thus only sensitive to relative errors.", "The sklearn.metrics module implements several loss, score, and utility functions. For more information see the Clustering performance evaluation section for instance clustering, and Biclustering evaluation for biclustering.", "When doing supervised learning, a simple sanity check consists of comparing one\u2019s estimator against simple rules of thumb. DummyClassifier implements several such simple strategies for classification:", "A major motivation of this method is F1-scoring, when the positive class is in the minority.", "Note that with all these strategies, the predict method completely ignores the input data!", "To illustrate DummyClassifier, first let\u2019s create an imbalanced dataset:", "Next, let\u2019s compare the accuracy of SVC and most_frequent:", "We see that SVC doesn\u2019t do much better than a dummy classifier. Now, let\u2019s change the kernel:", "We see that the accuracy was boosted to almost 100%. A cross validation strategy is recommended for a better estimate of the accuracy, if it is not too CPU costly. For more information see the Cross-validation: evaluating estimator performance section. Moreover if you want to optimize over the parameter space, it is highly recommended to use an appropriate methodology; see the Tuning the hyper-parameters of an estimator section for details.", "More generally, when the accuracy of a classifier is too close to random, it probably means that something went wrong: features are not helpful, a hyperparameter is not correctly tuned, the classifier is suffering from class imbalance, etc\u2026", "DummyRegressor also implements four simple rules of thumb for regression:", "In all these strategies, the predict method completely ignores the input data."]}, {"name": "3.4. Validation curves", "path": "modules/learning_curve", "type": "Guide", "text": ["Every estimator has its advantages and drawbacks. Its generalization error can be decomposed in terms of bias, variance and noise. The bias of an estimator is its average error for different training sets. The variance of an estimator indicates how sensitive it is to varying training sets. Noise is a property of the data.", "In the following plot, we see a function \\(f(x) = \\cos (\\frac{3}{2} \\pi x)\\) and some noisy samples from that function. We use three different estimators to fit the function: linear regression with polynomial features of degree 1, 4 and 15. We see that the first estimator can at best provide only a poor fit to the samples and the true function because it is too simple (high bias), the second estimator approximates it almost perfectly and the last estimator approximates the training data perfectly but does not fit the true function very well, i.e. it is very sensitive to varying training data (high variance).", "Bias and variance are inherent properties of estimators and we usually have to select learning algorithms and hyperparameters so that both bias and variance are as low as possible (see Bias-variance dilemma). Another way to reduce the variance of a model is to use more training data. However, you should only collect more training data if the true function is too complex to be approximated by an estimator with a lower variance.", "In the simple one-dimensional problem that we have seen in the example it is easy to see whether the estimator suffers from bias or variance. However, in high-dimensional spaces, models can become very difficult to visualize. For this reason, it is often helpful to use the tools described below.", "Examples:", "To validate a model we need a scoring function (see Metrics and scoring: quantifying the quality of predictions), for example accuracy for classifiers. The proper way of choosing multiple hyperparameters of an estimator are of course grid search or similar methods (see Tuning the hyper-parameters of an estimator) that select the hyperparameter with the maximum score on a validation set or multiple validation sets. Note that if we optimized the hyperparameters based on a validation score the validation score is biased and not a good estimate of the generalization any longer. To get a proper estimate of the generalization we have to compute the score on another test set.", "However, it is sometimes helpful to plot the influence of a single hyperparameter on the training score and the validation score to find out whether the estimator is overfitting or underfitting for some hyperparameter values.", "The function validation_curve can help in this case:", "If the training score and the validation score are both low, the estimator will be underfitting. If the training score is high and the validation score is low, the estimator is overfitting and otherwise it is working very well. A low training score and a high validation score is usually not possible. Underfitting, overfitting, and a working model are shown in the in the plot below where we vary the parameter \\(\\gamma\\) of an SVM on the digits dataset.", "A learning curve shows the validation and training score of an estimator for varying numbers of training samples. It is a tool to find out how much we benefit from adding more training data and whether the estimator suffers more from a variance error or a bias error. Consider the following example where we plot the learning curve of a naive Bayes classifier and an SVM.", "For the naive Bayes, both the validation score and the training score converge to a value that is quite low with increasing size of the training set. Thus, we will probably not benefit much from more training data.", "In contrast, for small amounts of data, the training score of the SVM is much greater than the validation score. Adding more training samples will most likely increase generalization.", "We can use the function learning_curve to generate the values that are required to plot such a learning curve (number of samples that have been used, the average scores on the training sets and the average scores on the validation sets):"]}, {"name": "4.1. Partial Dependence and Individual Conditional Expectation plots", "path": "modules/partial_dependence", "type": "Guide", "text": ["Partial dependence plots (PDP) and individual conditional expectation (ICE) plots can be used to visualize and analyze interaction between the target response 1 and a set of input features of interest.", "Both PDPs and ICEs assume that the input features of interest are independent from the complement features, and this assumption is often violated in practice. Thus, in the case of correlated features, we will create absurd data points to compute the PDP/ICE.", "Partial dependence plots (PDP) show the dependence between the target response and a set of input features of interest, marginalizing over the values of all other input features (the \u2018complement\u2019 features). Intuitively, we can interpret the partial dependence as the expected target response as a function of the input features of interest.", "Due to the limits of human perception the size of the set of input feature of interest must be small (usually, one or two) thus the input features of interest are usually chosen among the most important features.", "The figure below shows two one-way and one two-way partial dependence plots for the California housing dataset, with a HistGradientBoostingRegressor:", "One-way PDPs tell us about the interaction between the target response and an input feature of interest feature (e.g. linear, non-linear). The left plot in the above figure shows the effect of the average occupancy on the median house price; we can clearly see a linear relationship among them when the average occupancy is inferior to 3 persons. Similarly, we could analyze the effect of the house age on the median house price (middle plot). Thus, these interpretations are marginal, considering a feature at a time.", "PDPs with two input features of interest show the interactions among the two features. For example, the two-variable PDP in the above figure shows the dependence of median house price on joint values of house age and average occupants per household. We can clearly see an interaction between the two features: for an average occupancy greater than two, the house price is nearly independent of the house age, whereas for values less than 2 there is a strong dependence on age.", "The sklearn.inspection module provides a convenience function plot_partial_dependence to create one-way and two-way partial dependence plots. In the below example we show how to create a grid of partial dependence plots: two one-way PDPs for the features 0 and 1 and a two-way PDP between the two features:", "You can access the newly created figure and Axes objects using plt.gcf() and plt.gca().", "For multi-class classification, you need to set the class label for which the PDPs should be created via the target argument:", "The same parameter target is used to specify the target in multi-output regression settings.", "If you need the raw values of the partial dependence function rather than the plots, you can use the sklearn.inspection.partial_dependence function:", "The values at which the partial dependence should be evaluated are directly generated from X. For 2-way partial dependence, a 2D-grid of values is generated. The values field returned by sklearn.inspection.partial_dependence gives the actual values used in the grid for each input feature of interest. They also correspond to the axis of the plots.", "Similar to a PDP, an individual conditional expectation (ICE) plot shows the dependence between the target function and an input feature of interest. However, unlike a PDP, which shows the average effect of the input feature, an ICE plot visualizes the dependence of the prediction on a feature for each sample separately with one line per sample. Due to the limits of human perception, only one input feature of interest is supported for ICE plots.", "The figures below show four ICE plots for the California housing dataset, with a HistGradientBoostingRegressor. The second figure plots the corresponding PD line overlaid on ICE lines.", "While the PDPs are good at showing the average effect of the target features, they can obscure a heterogeneous relationship created by interactions. When interactions are present the ICE plot will provide many more insights. For example, we could observe a linear relationship between the median income and the house price in the PD line. However, the ICE lines show that there are some exceptions, where the house price remains constant in some ranges of the median income.", "The sklearn.inspection module\u2019s plot_partial_dependence convenience function can be used to create ICE plots by setting kind='individual'. In the example below, we show how to create a grid of ICE plots:", "In ICE plots it might not be easy to see the average effect of the input feature of interest. Hence, it is recommended to use ICE plots alongside PDPs. They can be plotted together with kind='both'.", "Let \\(X_S\\) be the set of input features of interest (i.e. the features parameter) and let \\(X_C\\) be its complement.", "The partial dependence of the response \\(f\\) at a point \\(x_S\\) is defined as:", "where \\(f(x_S, x_C)\\) is the response function (predict, predict_proba or decision_function) for a given sample whose values are defined by \\(x_S\\) for the features in \\(X_S\\), and by \\(x_C\\) for the features in \\(X_C\\). Note that \\(x_S\\) and \\(x_C\\) may be tuples.", "Computing this integral for various values of \\(x_S\\) produces a PDP plot as above. An ICE line is defined as a single \\(f(x_{S}, x_{C}^{(i)})\\) evaluated at \\(x_{S}\\).", "There are two main methods to approximate the integral above, namely the \u2018brute\u2019 and \u2018recursion\u2019 methods. The method parameter controls which method to use.", "The \u2018brute\u2019 method is a generic method that works with any estimator. Note that computing ICE plots is only supported with the \u2018brute\u2019 method. It approximates the above integral by computing an average over the data X:", "where \\(x_C^{(i)}\\) is the value of the i-th sample for the features in \\(X_C\\). For each value of \\(x_S\\), this method requires a full pass over the dataset X which is computationally intensive.", "Each of the \\(f(x_{S}, x_{C}^{(i)})\\) corresponds to one ICE line evaluated at \\(x_{S}\\). Computing this for multiple values of \\(x_{S}\\), one obtains a full ICE line. As one can see, the average of the ICE lines correspond to the partial dependence line.", "The \u2018recursion\u2019 method is faster than the \u2018brute\u2019 method, but it is only supported for PDP plots by some tree-based estimators. It is computed as follows. For a given point \\(x_S\\), a weighted tree traversal is performed: if a split node involves an input feature of interest, the corresponding left or right branch is followed; otherwise both branches are followed, each branch being weighted by the fraction of training samples that entered that branch. Finally, the partial dependence is given by a weighted average of all the visited leaves values.", "With the \u2018brute\u2019 method, the parameter X is used both for generating the grid of values \\(x_S\\) and the complement feature values \\(x_C\\). However with the \u2018recursion\u2019 method, X is only used for the grid values: implicitly, the \\(x_C\\) values are those of the training data.", "By default, the \u2018recursion\u2019 method is used for plotting PDPs on tree-based estimators that support it, and \u2018brute\u2019 is used for the rest.", "Note", "While both methods should be close in general, they might differ in some specific settings. The \u2018brute\u2019 method assumes the existence of the data points \\((x_S, x_C^{(i)})\\). When the features are correlated, such artificial samples may have a very low probability mass. The \u2018brute\u2019 and \u2018recursion\u2019 methods will likely disagree regarding the value of the partial dependence, because they will treat these unlikely samples differently. Remember, however, that the primary assumption for interpreting PDPs is that the features should be independent.", "Examples:", "For classification, the target response may be the probability of a class (the positive class for binary classification), or the decision function.", "References", "T. Hastie, R. Tibshirani and J. Friedman, The Elements of Statistical Learning, Second Edition, Section 10.13.2, Springer, 2009.", "C. Molnar, Interpretable Machine Learning, Section 5.1, 2019.", "A. Goldstein, A. Kapelner, J. Bleich, and E. Pitkin, Peeking Inside the Black Box: Visualizing Statistical Learning With Plots of Individual Conditional Expectation, Journal of Computational and Graphical Statistics, 24(1): 44-65, Springer, 2015."]}, {"name": "4.2. Permutation feature importance", "path": "modules/permutation_importance", "type": "Guide", "text": ["Permutation feature importance is a model inspection technique that can be used for any fitted estimator when the data is tabular. This is especially useful for non-linear or opaque estimators. The permutation feature importance is defined to be the decrease in a model score when a single feature value is randomly shuffled 1. This procedure breaks the relationship between the feature and the target, thus the drop in the model score is indicative of how much the model depends on the feature. This technique benefits from being model agnostic and can be calculated many times with different permutations of the feature.", "The permutation_importance function calculates the feature importance of estimators for a given dataset. The n_repeats parameter sets the number of times a feature is randomly shuffled and returns a sample of feature importances.", "Let\u2019s consider the following trained regression model:", "Its validation performance, measured via the \\(R^2\\) score, is significantly larger than the chance level. This makes it possible to use the permutation_importance function to probe which features are most predictive:", "Note that the importance values for the top features represent a large fraction of the reference score of 0.356.", "Permutation importances can be computed either on the training set or on a held-out testing or validation set. Using a held-out set makes it possible to highlight which features contribute the most to the generalization power of the inspected model. Features that are important on the training set but not on the held-out set might cause the model to overfit.", "Warning", "Features that are deemed of low importance for a bad model (low cross-validation score) could be very important for a good model. Therefore it is always important to evaluate the predictive power of a model using a held-out set (or better with cross-validation) prior to computing importances. Permutation importance does not reflect to the intrinsic predictive value of a feature by itself but how important this feature is for a particular model.", "For each feature \\(j\\) (column of \\(D\\)):", "For each repetition \\(k\\) in \\({1, ..., K}\\):", "Compute importance \\(i_j\\) for feature \\(f_j\\) defined as:", "Tree-based models provide an alternative measure of feature importances based on the mean decrease in impurity (MDI). Impurity is quantified by the splitting criterion of the decision trees (Gini, Entropy or Mean Squared Error). However, this method can give high importance to features that may not be predictive on unseen data when the model is overfitting. Permutation-based feature importance, on the other hand, avoids this issue, since it can be computed on unseen data.", "Furthermore, impurity-based feature importance for trees are strongly biased and favor high cardinality features (typically numerical features) over low cardinality features such as binary features or categorical variables with a small number of possible categories.", "Permutation-based feature importances do not exhibit such a bias. Additionally, the permutation feature importance may be computed performance metric on the model predictions predictions and can be used to analyze any model class (not just tree-based models).", "The following example highlights the limitations of impurity-based feature importance in contrast to permutation-based feature importance: Permutation Importance vs Random Forest Feature Importance (MDI).", "When two features are correlated and one of the features is permuted, the model will still have access to the feature through its correlated feature. This will result in a lower importance value for both features, where they might actually be important.", "One way to handle this is to cluster features that are correlated and only keep one feature from each cluster. This strategy is explored in the following example: Permutation Importance with Multicollinear or Correlated Features.", "Examples:", "References:", "L. Breiman, \u201cRandom Forests\u201d, Machine Learning, 45(1), 5-32, 2001. https://doi.org/10.1023/A:1010933404324"]}, {"name": "6.1. Pipelines and composite estimators", "path": "modules/compose", "type": "Guide", "text": ["Transformers are usually combined with classifiers, regressors or other estimators to build a composite estimator. The most common tool is a Pipeline. Pipeline is often used in combination with FeatureUnion which concatenates the output of transformers into a composite feature space. TransformedTargetRegressor deals with transforming the target (i.e. log-transform y). In contrast, Pipelines only transform the observed data (X).", "Pipeline can be used to chain multiple estimators into one. This is useful as there is often a fixed sequence of steps in processing the data, for example feature selection, normalization and classification. Pipeline serves multiple purposes here:", "You only have to call fit and predict once on your data to fit a whole sequence of estimators.", "You can grid search over parameters of all estimators in the pipeline at once.", "Pipelines help avoid leaking statistics from your test data into the trained model in cross-validation, by ensuring that the same samples are used to train the transformers and predictors.", "All estimators in a pipeline, except the last one, must be transformers (i.e. must have a transform method). The last estimator may be any type (transformer, classifier, etc.).", "The Pipeline is built using a list of (key, value) pairs, where the key is a string containing the name you want to give this step and value is an estimator object:", "The utility function make_pipeline is a shorthand for constructing pipelines; it takes a variable number of estimators and returns a pipeline, filling in the names automatically:", "The estimators of a pipeline are stored as a list in the steps attribute, but can be accessed by index or name by indexing (with [idx]) the Pipeline:", "Pipeline\u2019s named_steps attribute allows accessing steps by name with tab completion in interactive environments:", "A sub-pipeline can also be extracted using the slicing notation commonly used for Python Sequences such as lists or strings (although only a step of 1 is permitted). This is convenient for performing only some of the transformations (or their inverse):", "Parameters of the estimators in the pipeline can be accessed using the <estimator>__<parameter> syntax:", "This is particularly important for doing grid searches:", "Individual steps may also be replaced as parameters, and non-final steps may be ignored by setting them to 'passthrough':", "The estimators of the pipeline can be retrieved by index:", "or by name:", "Examples:", "See Also:", "Calling fit on the pipeline is the same as calling fit on each estimator in turn, transform the input and pass it on to the next step. The pipeline has all the methods that the last estimator in the pipeline has, i.e. if the last estimator is a classifier, the Pipeline can be used as a classifier. If the last estimator is a transformer, again, so is the pipeline.", "Fitting transformers may be computationally expensive. With its memory parameter set, Pipeline will cache each transformer after calling fit. This feature is used to avoid computing the fit transformers within a pipeline if the parameters and input data are identical. A typical example is the case of a grid search in which the transformers can be fitted only once and reused for each configuration.", "The parameter memory is needed in order to cache the transformers. memory can be either a string containing the directory where to cache the transformers or a joblib.Memory object:", "Warning", "Side effect of caching transformers", "Using a Pipeline without cache enabled, it is possible to inspect the original instance such as:", "Enabling caching triggers a clone of the transformers before fitting. Therefore, the transformer instance given to the pipeline cannot be inspected directly. In following example, accessing the PCA instance pca2 will raise an AttributeError since pca2 will be an unfitted transformer. Instead, use the attribute named_steps to inspect estimators within the pipeline:", "Examples:", "TransformedTargetRegressor transforms the targets y before fitting a regression model. The predictions are mapped back to the original space via an inverse transform. It takes as an argument the regressor that will be used for prediction, and the transformer that will be applied to the target variable:", "For simple transformations, instead of a Transformer object, a pair of functions can be passed, defining the transformation and its inverse mapping:", "Subsequently, the object is created as:", "By default, the provided functions are checked at each fit to be the inverse of each other. However, it is possible to bypass this checking by setting check_inverse to False:", "Note", "The transformation can be triggered by setting either transformer or the pair of functions func and inverse_func. However, setting both options will raise an error.", "Examples:", "FeatureUnion combines several transformer objects into a new transformer that combines their output. A FeatureUnion takes a list of transformer objects. During fitting, each of these is fit to the data independently. The transformers are applied in parallel, and the feature matrices they output are concatenated side-by-side into a larger matrix.", "When you want to apply different transformations to each field of the data, see the related class ColumnTransformer (see user guide).", "FeatureUnion serves the same purposes as Pipeline - convenience and joint parameter estimation and validation.", "FeatureUnion and Pipeline can be combined to create complex models.", "(A FeatureUnion has no way of checking whether two transformers might produce identical features. It only produces a union when the feature sets are disjoint, and making sure they are is the caller\u2019s responsibility.)", "A FeatureUnion is built using a list of (key, value) pairs, where the key is the name you want to give to a given transformation (an arbitrary string; it only serves as an identifier) and value is an estimator object:", "Like pipelines, feature unions have a shorthand constructor called make_union that does not require explicit naming of the components.", "Like Pipeline, individual steps may be replaced using set_params, and ignored by setting to 'drop':", "Examples:", "Many datasets contain features of different types, say text, floats, and dates, where each type of feature requires separate preprocessing or feature extraction steps. Often it is easiest to preprocess data before applying scikit-learn methods, for example using pandas. Processing your data before passing it to scikit-learn might be problematic for one of the following reasons:", "The ColumnTransformer helps performing different transformations for different columns of the data, within a Pipeline that is safe from data leakage and that can be parametrized. ColumnTransformer works on arrays, sparse matrices, and pandas DataFrames.", "To each column, a different transformation can be applied, such as preprocessing or a specific feature extraction method:", "For this data, we might want to encode the 'city' column as a categorical variable using OneHotEncoder but apply a CountVectorizer to the 'title' column. As we might use multiple feature extraction methods on the same column, we give each transformer a unique name, say 'city_category' and 'title_bow'. By default, the remaining rating columns are ignored (remainder='drop'):", "In the above example, the CountVectorizer expects a 1D array as input and therefore the columns were specified as a string ('title'). However, OneHotEncoder as most of other transformers expects 2D data, therefore in that case you need to specify the column as a list of strings (['city']).", "Apart from a scalar or a single item list, the column selection can be specified as a list of multiple items, an integer array, a slice, a boolean mask, or with a make_column_selector. The make_column_selector is used to select columns based on data type or column name:", "Strings can reference columns if the input is a DataFrame, integers are always interpreted as the positional columns.", "We can keep the remaining rating columns by setting remainder='passthrough'. The values are appended to the end of the transformation:", "The remainder parameter can be set to an estimator to transform the remaining rating columns. The transformed values are appended to the end of the transformation:", "The make_column_transformer function is available to more easily create a ColumnTransformer object. Specifically, the names will be given automatically. The equivalent for the above example would be:", "Estimators can be displayed with a HTML representation when shown in a jupyter notebook. This can be useful to diagnose or visualize a Pipeline with many estimators. This visualization is activated by setting the display option in set_config:", "An example of the HTML output can be seen in the HTML representation of Pipeline section of Column Transformer with Mixed Types. As an alternative, the HTML can be written to a file using estimator_html_repr:", "Examples:"]}, {"name": "6.2. Feature extraction", "path": "modules/feature_extraction", "type": "Guide", "text": ["The sklearn.feature_extraction module can be used to extract features in a format supported by machine learning algorithms from datasets consisting of formats such as text and image.", "Note", "Feature extraction is very different from Feature selection: the former consists in transforming arbitrary data, such as text or images, into numerical features usable for machine learning. The latter is a machine learning technique applied on these features.", "The class DictVectorizer can be used to convert feature arrays represented as lists of standard Python dict objects to the NumPy/SciPy representation used by scikit-learn estimators.", "While not particularly fast to process, Python\u2019s dict has the advantages of being convenient to use, being sparse (absent features need not be stored) and storing feature names in addition to values.", "DictVectorizer implements what is called one-of-K or \u201cone-hot\u201d coding for categorical (aka nominal, discrete) features. Categorical features are \u201cattribute-value\u201d pairs where the value is restricted to a list of discrete of possibilities without ordering (e.g. topic identifiers, types of objects, tags, names\u2026).", "In the following, \u201ccity\u201d is a categorical attribute while \u201ctemperature\u201d is a traditional numerical feature:", "DictVectorizer accepts multiple string values for one feature, like, e.g., multiple categories for a movie.", "Assume a database classifies each movie using some categories (not mandatories) and its year of release.", "DictVectorizer is also a useful representation transformation for training sequence classifiers in Natural Language Processing models that typically work by extracting feature windows around a particular word of interest.", "For example, suppose that we have a first algorithm that extracts Part of Speech (PoS) tags that we want to use as complementary tags for training a sequence classifier (e.g. a chunker). The following dict could be such a window of features extracted around the word \u2018sat\u2019 in the sentence \u2018The cat sat on the mat.\u2019:", "This description can be vectorized into a sparse two-dimensional matrix suitable for feeding into a classifier (maybe after being piped into a TfidfTransformer for normalization):", "As you can imagine, if one extracts such a context around each individual word of a corpus of documents the resulting matrix will be very wide (many one-hot-features) with most of them being valued to zero most of the time. So as to make the resulting data structure able to fit in memory the DictVectorizer class uses a scipy.sparse matrix by default instead of a numpy.ndarray.", "The class FeatureHasher is a high-speed, low-memory vectorizer that uses a technique known as feature hashing, or the \u201chashing trick\u201d. Instead of building a hash table of the features encountered in training, as the vectorizers do, instances of FeatureHasher apply a hash function to the features to determine their column index in sample matrices directly. The result is increased speed and reduced memory usage, at the expense of inspectability; the hasher does not remember what the input features looked like and has no inverse_transform method.", "Since the hash function might cause collisions between (unrelated) features, a signed hash function is used and the sign of the hash value determines the sign of the value stored in the output matrix for a feature. This way, collisions are likely to cancel out rather than accumulate error, and the expected mean of any output feature\u2019s value is zero. This mechanism is enabled by default with alternate_sign=True and is particularly useful for small hash table sizes (n_features < 10000). For large hash table sizes, it can be disabled, to allow the output to be passed to estimators like MultinomialNB or chi2 feature selectors that expect non-negative inputs.", "FeatureHasher accepts either mappings (like Python\u2019s dict and its variants in the collections module), (feature, value) pairs, or strings, depending on the constructor parameter input_type. Mapping are treated as lists of (feature, value) pairs, while single strings have an implicit value of 1, so ['feat1', 'feat2', 'feat3'] is interpreted as [('feat1', 1), ('feat2', 1), ('feat3', 1)]. If a single feature occurs multiple times in a sample, the associated values will be summed (so ('feat', 2) and ('feat', 3.5) become ('feat', 5.5)). The output from FeatureHasher is always a scipy.sparse matrix in the CSR format.", "Feature hashing can be employed in document classification, but unlike CountVectorizer, FeatureHasher does not do word splitting or any other preprocessing except Unicode-to-UTF-8 encoding; see Vectorizing a large text corpus with the hashing trick, below, for a combined tokenizer/hasher.", "As an example, consider a word-level natural language processing task that needs features extracted from (token, part_of_speech) pairs. One could use a Python generator function to extract features:", "Then, the raw_X to be fed to FeatureHasher.transform can be constructed using:", "and fed to a hasher with:", "to get a scipy.sparse matrix X.", "Note the use of a generator comprehension, which introduces laziness into the feature extraction: tokens are only processed on demand from the hasher.", "FeatureHasher uses the signed 32-bit variant of MurmurHash3. As a result (and because of limitations in scipy.sparse), the maximum number of features supported is currently \\(2^{31} - 1\\).", "The original formulation of the hashing trick by Weinberger et al. used two separate hash functions \\(h\\) and \\(\\xi\\) to determine the column index and sign of a feature, respectively. The present implementation works under the assumption that the sign bit of MurmurHash3 is independent of its other bits.", "Since a simple modulo is used to transform the hash function to a column index, it is advisable to use a power of two as the n_features parameter; otherwise the features will not be mapped evenly to the columns.", "References:", "Text Analysis is a major application field for machine learning algorithms. However the raw data, a sequence of symbols cannot be fed directly to the algorithms themselves as most of them expect numerical feature vectors with a fixed size rather than the raw text documents with variable length.", "In order to address this, scikit-learn provides utilities for the most common ways to extract numerical features from text content, namely:", "In this scheme, features and samples are defined as follows:", "A corpus of documents can thus be represented by a matrix with one row per document and one column per token (e.g. word) occurring in the corpus.", "We call vectorization the general process of turning a collection of text documents into numerical feature vectors. This specific strategy (tokenization, counting and normalization) is called the Bag of Words or \u201cBag of n-grams\u201d representation. Documents are described by word occurrences while completely ignoring the relative position information of the words in the document.", "As most documents will typically use a very small subset of the words used in the corpus, the resulting matrix will have many feature values that are zeros (typically more than 99% of them).", "For instance a collection of 10,000 short text documents (such as emails) will use a vocabulary with a size in the order of 100,000 unique words in total while each document will use 100 to 1000 unique words individually.", "In order to be able to store such a matrix in memory but also to speed up algebraic operations matrix / vector, implementations will typically use a sparse representation such as the implementations available in the scipy.sparse package.", "CountVectorizer implements both tokenization and occurrence counting in a single class:", "This model has many parameters, however the default values are quite reasonable (please see the reference documentation for the details):", "Let\u2019s use it to tokenize and count the word occurrences of a minimalistic corpus of text documents:", "The default configuration tokenizes the string by extracting words of at least 2 letters. The specific function that does this step can be requested explicitly:", "Each term found by the analyzer during the fit is assigned a unique integer index corresponding to a column in the resulting matrix. This interpretation of the columns can be retrieved as follows:", "The converse mapping from feature name to column index is stored in the vocabulary_ attribute of the vectorizer:", "Hence words that were not seen in the training corpus will be completely ignored in future calls to the transform method:", "Note that in the previous corpus, the first and the last documents have exactly the same words hence are encoded in equal vectors. In particular we lose the information that the last document is an interrogative form. To preserve some of the local ordering information we can extract 2-grams of words in addition to the 1-grams (individual words):", "The vocabulary extracted by this vectorizer is hence much bigger and can now resolve ambiguities encoded in local positioning patterns:", "In particular the interrogative form \u201cIs this\u201d is only present in the last document:", "Stop words are words like \u201cand\u201d, \u201cthe\u201d, \u201chim\u201d, which are presumed to be uninformative in representing the content of a text, and which may be removed to avoid them being construed as signal for prediction. Sometimes, however, similar words are useful for prediction, such as in classifying writing style or personality.", "There are several known issues in our provided \u2018english\u2019 stop word list. It does not aim to be a general, \u2018one-size-fits-all\u2019 solution as some tasks may require a more custom solution. See [NQY18] for more details.", "Please take care in choosing a stop word list. Popular stop word lists may include words that are highly informative to some tasks, such as computer.", "You should also make sure that the stop word list has had the same preprocessing and tokenization applied as the one used in the vectorizer. The word we\u2019ve is split into we and ve by CountVectorizer\u2019s default tokenizer, so if we\u2019ve is in stop_words, but ve is not, ve will be retained from we\u2019ve in transformed text. Our vectorizers will try to identify and warn about some kinds of inconsistencies.", "References", "J. Nothman, H. Qin and R. Yurchak (2018). \u201cStop Word Lists in Free Open-source Software Packages\u201d. In Proc. Workshop for NLP Open Source Software.", "In a large text corpus, some words will be very present (e.g. \u201cthe\u201d, \u201ca\u201d, \u201cis\u201d in English) hence carrying very little meaningful information about the actual contents of the document. If we were to feed the direct count data directly to a classifier those very frequent terms would shadow the frequencies of rarer yet more interesting terms.", "In order to re-weight the count features into floating point values suitable for usage by a classifier it is very common to use the tf\u2013idf transform.", "Tf means term-frequency while tf\u2013idf means term-frequency times inverse document-frequency: \\(\\text{tf-idf(t,d)}=\\text{tf(t,d)} \\times \\text{idf(t)}\\).", "Using the TfidfTransformer\u2019s default settings, TfidfTransformer(norm='l2', use_idf=True, smooth_idf=True, sublinear_tf=False) the term frequency, the number of times a term occurs in a given document, is multiplied with idf component, which is computed as", "\\(\\text{idf}(t) = \\log{\\frac{1 + n}{1+\\text{df}(t)}} + 1\\),", "where \\(n\\) is the total number of documents in the document set, and \\(\\text{df}(t)\\) is the number of documents in the document set that contain term \\(t\\). The resulting tf-idf vectors are then normalized by the Euclidean norm:", "\\(v_{norm} = \\frac{v}{||v||_2} = \\frac{v}{\\sqrt{v{_1}^2 + v{_2}^2 + \\dots + v{_n}^2}}\\).", "This was originally a term weighting scheme developed for information retrieval (as a ranking function for search engines results) that has also found good use in document classification and clustering.", "The following sections contain further explanations and examples that illustrate how the tf-idfs are computed exactly and how the tf-idfs computed in scikit-learn\u2019s TfidfTransformer and TfidfVectorizer differ slightly from the standard textbook notation that defines the idf as", "\\(\\text{idf}(t) = \\log{\\frac{n}{1+\\text{df}(t)}}.\\)", "In the TfidfTransformer and TfidfVectorizer with smooth_idf=False, the \u201c1\u201d count is added to the idf instead of the idf\u2019s denominator:", "\\(\\text{idf}(t) = \\log{\\frac{n}{\\text{df}(t)}} + 1\\)", "This normalization is implemented by the TfidfTransformer class:", "Again please see the reference documentation for the details on all the parameters.", "Let\u2019s take an example with the following counts. The first term is present 100% of the time hence not very interesting. The two other features only in less than 50% of the time hence probably more representative of the content of the documents:", "Each row is normalized to have unit Euclidean norm:", "\\(v_{norm} = \\frac{v}{||v||_2} = \\frac{v}{\\sqrt{v{_1}^2 + v{_2}^2 + \\dots + v{_n}^2}}\\)", "For example, we can compute the tf-idf of the first term in the first document in the counts array as follows:", "\\(n = 6\\)", "\\(\\text{df}(t)_{\\text{term1}} = 6\\)", "\\(\\text{idf}(t)_{\\text{term1}} = \\log \\frac{n}{\\text{df}(t)} + 1 = \\log(1)+1 = 1\\)", "\\(\\text{tf-idf}_{\\text{term1}} = \\text{tf} \\times \\text{idf} = 3 \\times 1 = 3\\)", "Now, if we repeat this computation for the remaining 2 terms in the document, we get", "\\(\\text{tf-idf}_{\\text{term2}} = 0 \\times (\\log(6/1)+1) = 0\\)", "\\(\\text{tf-idf}_{\\text{term3}} = 1 \\times (\\log(6/2)+1) \\approx 2.0986\\)", "and the vector of raw tf-idfs:", "\\(\\text{tf-idf}_{\\text{raw}} = [3, 0, 2.0986].\\)", "Then, applying the Euclidean (L2) norm, we obtain the following tf-idfs for document 1:", "\\(\\frac{[3, 0, 2.0986]}{\\sqrt{\\big(3^2 + 0^2 + 2.0986^2\\big)}} = [ 0.819, 0, 0.573].\\)", "Furthermore, the default parameter smooth_idf=True adds \u201c1\u201d to the numerator and denominator as if an extra document was seen containing every term in the collection exactly once, which prevents zero divisions:", "\\(\\text{idf}(t) = \\log{\\frac{1 + n}{1+\\text{df}(t)}} + 1\\)", "Using this modification, the tf-idf of the third term in document 1 changes to 1.8473:", "\\(\\text{tf-idf}_{\\text{term3}} = 1 \\times \\log(7/3)+1 \\approx 1.8473\\)", "And the L2-normalized tf-idf changes to", "\\(\\frac{[3, 0, 1.8473]}{\\sqrt{\\big(3^2 + 0^2 + 1.8473^2\\big)}} = [0.8515, 0, 0.5243]\\):", "The weights of each feature computed by the fit method call are stored in a model attribute:", "As tf\u2013idf is very often used for text features, there is also another class called TfidfVectorizer that combines all the options of CountVectorizer and TfidfTransformer in a single model:", "While the tf\u2013idf normalization is often very useful, there might be cases where the binary occurrence markers might offer better features. This can be achieved by using the binary parameter of CountVectorizer. In particular, some estimators such as Bernoulli Naive Bayes explicitly model discrete boolean random variables. Also, very short texts are likely to have noisy tf\u2013idf values while the binary occurrence info is more stable.", "As usual the best way to adjust the feature extraction parameters is to use a cross-validated grid search, for instance by pipelining the feature extractor with a classifier:", "Text is made of characters, but files are made of bytes. These bytes represent characters according to some encoding. To work with text files in Python, their bytes must be decoded to a character set called Unicode. Common encodings are ASCII, Latin-1 (Western Europe), KOI8-R (Russian) and the universal encodings UTF-8 and UTF-16. Many others exist.", "Note", "An encoding can also be called a \u2018character set\u2019, but this term is less accurate: several encodings can exist for a single character set.", "The text feature extractors in scikit-learn know how to decode text files, but only if you tell them what encoding the files are in. The CountVectorizer takes an encoding parameter for this purpose. For modern text files, the correct encoding is probably UTF-8, which is therefore the default (encoding=\"utf-8\").", "If the text you are loading is not actually encoded with UTF-8, however, you will get a UnicodeDecodeError. The vectorizers can be told to be silent about decoding errors by setting the decode_error parameter to either \"ignore\" or \"replace\". See the documentation for the Python function bytes.decode for more details (type help(bytes.decode) at the Python prompt).", "If you are having trouble decoding text, here are some things to try:", "For example, the following snippet uses chardet (not shipped with scikit-learn, must be installed separately) to figure out the encoding of three texts. It then vectorizes the texts and prints the learned vocabulary. The output is not shown here.", "(Depending on the version of chardet, it might get the first one wrong.)", "For an introduction to Unicode and character encodings in general, see Joel Spolsky\u2019s Absolute Minimum Every Software Developer Must Know About Unicode.", "The bag of words representation is quite simplistic but surprisingly useful in practice.", "In particular in a supervised setting it can be successfully combined with fast and scalable linear models to train document classifiers, for instance:", "In an unsupervised setting it can be used to group similar documents together by applying clustering algorithms such as K-means:", "Finally it is possible to discover the main topics of a corpus by relaxing the hard assignment constraint of clustering, for instance by using Non-negative matrix factorization (NMF or NNMF):", "A collection of unigrams (what bag of words is) cannot capture phrases and multi-word expressions, effectively disregarding any word order dependence. Additionally, the bag of words model doesn\u2019t account for potential misspellings or word derivations.", "N-grams to the rescue! Instead of building a simple collection of unigrams (n=1), one might prefer a collection of bigrams (n=2), where occurrences of pairs of consecutive words are counted.", "One might alternatively consider a collection of character n-grams, a representation resilient against misspellings and derivations.", "For example, let\u2019s say we\u2019re dealing with a corpus of two documents: ['words', 'wprds']. The second document contains a misspelling of the word \u2018words\u2019. A simple bag of words representation would consider these two as very distinct documents, differing in both of the two possible features. A character 2-gram representation, however, would find the documents matching in 4 out of 8 features, which may help the preferred classifier decide better:", "In the above example, char_wb analyzer is used, which creates n-grams only from characters inside word boundaries (padded with space on each side). The char analyzer, alternatively, creates n-grams that span across words:", "The word boundaries-aware variant char_wb is especially interesting for languages that use white-spaces for word separation as it generates significantly less noisy features than the raw char variant in that case. For such languages it can increase both the predictive accuracy and convergence speed of classifiers trained using such features while retaining the robustness with regards to misspellings and word derivations.", "While some local positioning information can be preserved by extracting n-grams instead of individual words, bag of words and bag of n-grams destroy most of the inner structure of the document and hence most of the meaning carried by that internal structure.", "In order to address the wider task of Natural Language Understanding, the local structure of sentences and paragraphs should thus be taken into account. Many such models will thus be casted as \u201cStructured output\u201d problems which are currently outside of the scope of scikit-learn.", "The above vectorization scheme is simple but the fact that it holds an in- memory mapping from the string tokens to the integer feature indices (the vocabulary_ attribute) causes several problems when dealing with large datasets:", "It is possible to overcome those limitations by combining the \u201chashing trick\u201d (Feature hashing) implemented by the FeatureHasher class and the text preprocessing and tokenization features of the CountVectorizer.", "This combination is implementing in HashingVectorizer, a transformer class that is mostly API compatible with CountVectorizer. HashingVectorizer is stateless, meaning that you don\u2019t have to call fit on it:", "You can see that 16 non-zero feature tokens were extracted in the vector output: this is less than the 19 non-zeros extracted previously by the CountVectorizer on the same toy corpus. The discrepancy comes from hash function collisions because of the low value of the n_features parameter.", "In a real world setting, the n_features parameter can be left to its default value of 2 ** 20 (roughly one million possible features). If memory or downstream models size is an issue selecting a lower value such as 2 **\n18 might help without introducing too many additional collisions on typical text classification tasks.", "Note that the dimensionality does not affect the CPU training time of algorithms which operate on CSR matrices (LinearSVC(dual=True), Perceptron, SGDClassifier, PassiveAggressive) but it does for algorithms that work with CSC matrices (LinearSVC(dual=False), Lasso(), etc).", "Let\u2019s try again with the default setting:", "We no longer get the collisions, but this comes at the expense of a much larger dimensionality of the output space. Of course, other terms than the 19 used here might still collide with each other.", "The HashingVectorizer also comes with the following limitations:", "An interesting development of using a HashingVectorizer is the ability to perform out-of-core scaling. This means that we can learn from data that does not fit into the computer\u2019s main memory.", "A strategy to implement out-of-core scaling is to stream data to the estimator in mini-batches. Each mini-batch is vectorized using HashingVectorizer so as to guarantee that the input space of the estimator has always the same dimensionality. The amount of memory used at any time is thus bounded by the size of a mini-batch. Although there is no limit to the amount of data that can be ingested using such an approach, from a practical point of view the learning time is often limited by the CPU time one wants to spend on the task.", "For a full-fledged example of out-of-core scaling in a text classification task see Out-of-core classification of text documents.", "It is possible to customize the behavior by passing a callable to the vectorizer constructor:", "In particular we name:", "(Lucene users might recognize these names, but be aware that scikit-learn concepts may not map one-to-one onto Lucene concepts.)", "To make the preprocessor, tokenizer and analyzers aware of the model parameters it is possible to derive from the class and override the build_preprocessor, build_tokenizer and build_analyzer factory methods instead of passing custom functions.", "Some tips and tricks:", "Fancy token-level analysis such as stemming, lemmatizing, compound splitting, filtering based on part-of-speech, etc. are not included in the scikit-learn codebase, but can be added by customizing either the tokenizer or the analyzer. Here\u2019s a CountVectorizer with a tokenizer and lemmatizer using NLTK:", "(Note that this will not filter out punctuation.)", "The following example will, for instance, transform some British spelling to American spelling:", "for other styles of preprocessing; examples include stemming, lemmatization, or normalizing numerical tokens, with the latter illustrated in:", "Customizing the vectorizer can also be useful when handling Asian languages that do not use an explicit word separator such as whitespace.", "The extract_patches_2d function extracts patches from an image stored as a two-dimensional array, or three-dimensional with color information along the third axis. For rebuilding an image from all its patches, use reconstruct_from_patches_2d. For example let use generate a 4x4 pixel picture with 3 color channels (e.g. in RGB format):", "Let us now try to reconstruct the original image from the patches by averaging on overlapping areas:", "The PatchExtractor class works in the same way as extract_patches_2d, only it supports multiple images as input. It is implemented as an estimator, so it can be used in pipelines. See:", "Several estimators in the scikit-learn can use connectivity information between features or samples. For instance Ward clustering (Hierarchical clustering) can cluster together only neighboring pixels of an image, thus forming contiguous patches:", "For this purpose, the estimators use a \u2018connectivity\u2019 matrix, giving which samples are connected.", "The function img_to_graph returns such a matrix from a 2D or 3D image. Similarly, grid_to_graph build a connectivity matrix for images given the shape of these image.", "These matrices can be used to impose connectivity in estimators that use connectivity information, such as Ward clustering (Hierarchical clustering), but also to build precomputed kernels, or similarity matrices.", "Note", "Examples"]}, {"name": "6.3. Preprocessing data", "path": "modules/preprocessing", "type": "Guide", "text": ["The sklearn.preprocessing package provides several common utility functions and transformer classes to change raw feature vectors into a representation that is more suitable for the downstream estimators.", "In general, learning algorithms benefit from standardization of the data set. If some outliers are present in the set, robust scalers or transformers are more appropriate. The behaviors of the different scalers, transformers, and normalizers on a dataset containing marginal outliers is highlighted in Compare the effect of different scalers on data with outliers.", "Standardization of datasets is a common requirement for many machine learning estimators implemented in scikit-learn; they might behave badly if the individual features do not more or less look like standard normally distributed data: Gaussian with zero mean and unit variance.", "In practice we often ignore the shape of the distribution and just transform the data to center it by removing the mean value of each feature, then scale it by dividing non-constant features by their standard deviation.", "For instance, many elements used in the objective function of a learning algorithm (such as the RBF kernel of Support Vector Machines or the l1 and l2 regularizers of linear models) assume that all features are centered around zero and have variance in the same order. If a feature has a variance that is orders of magnitude larger than others, it might dominate the objective function and make the estimator unable to learn from other features correctly as expected.", "The preprocessing module provides the StandardScaler utility class, which is a quick and easy way to perform the following operation on an array-like dataset:", "Scaled data has zero mean and unit variance:", "This class implements the Transformer API to compute the mean and standard deviation on a training set so as to be able to later re-apply the same transformation on the testing set. This class is hence suitable for use in the early steps of a Pipeline:", "It is possible to disable either centering or scaling by either passing with_mean=False or with_std=False to the constructor of StandardScaler.", "An alternative standardization is scaling features to lie between a given minimum and maximum value, often between zero and one, or so that the maximum absolute value of each feature is scaled to unit size. This can be achieved using MinMaxScaler or MaxAbsScaler, respectively.", "The motivation to use this scaling include robustness to very small standard deviations of features and preserving zero entries in sparse data.", "Here is an example to scale a toy data matrix to the [0, 1] range:", "The same instance of the transformer can then be applied to some new test data unseen during the fit call: the same scaling and shifting operations will be applied to be consistent with the transformation performed on the train data:", "It is possible to introspect the scaler attributes to find about the exact nature of the transformation learned on the training data:", "If MinMaxScaler is given an explicit feature_range=(min, max) the full formula is:", "MaxAbsScaler works in a very similar fashion, but scales in a way that the training data lies within the range [-1, 1] by dividing through the largest maximum value in each feature. It is meant for data that is already centered at zero or sparse data.", "Here is how to use the toy data from the previous example with this scaler:", "Centering sparse data would destroy the sparseness structure in the data, and thus rarely is a sensible thing to do. However, it can make sense to scale sparse inputs, especially if features are on different scales.", "MaxAbsScaler was specifically designed for scaling sparse data, and is the recommended way to go about this. However, StandardScaler can accept scipy.sparse matrices as input, as long as with_mean=False is explicitly passed to the constructor. Otherwise a ValueError will be raised as silently centering would break the sparsity and would often crash the execution by allocating excessive amounts of memory unintentionally. RobustScaler cannot be fitted to sparse inputs, but you can use the transform method on sparse inputs.", "Note that the scalers accept both Compressed Sparse Rows and Compressed Sparse Columns format (see scipy.sparse.csr_matrix and scipy.sparse.csc_matrix). Any other sparse input will be converted to the Compressed Sparse Rows representation. To avoid unnecessary memory copies, it is recommended to choose the CSR or CSC representation upstream.", "Finally, if the centered data is expected to be small enough, explicitly converting the input to an array using the toarray method of sparse matrices is another option.", "If your data contains many outliers, scaling using the mean and variance of the data is likely to not work very well. In these cases, you can use RobustScaler as a drop-in replacement instead. It uses more robust estimates for the center and range of your data.", "References:", "Further discussion on the importance of centering and scaling data is available on this FAQ: Should I normalize/standardize/rescale the data?", "Scaling vs Whitening", "It is sometimes not enough to center and scale the features independently, since a downstream model can further make some assumption on the linear independence of the features.", "To address this issue you can use PCA with whiten=True to further remove the linear correlation across features.", "If you have a kernel matrix of a kernel \\(K\\) that computes a dot product in a feature space defined by function \\(\\phi\\), a KernelCenterer can transform the kernel matrix so that it contains inner products in the feature space defined by \\(\\phi\\) followed by removal of the mean in that space.", "Two types of transformations are available: quantile transforms and power transforms. Both quantile and power transforms are based on monotonic transformations of the features and thus preserve the rank of the values along each feature.", "Quantile transforms put all features into the same desired distribution based on the formula \\(G^{-1}(F(X))\\) where \\(F\\) is the cumulative distribution function of the feature and \\(G^{-1}\\) the quantile function of the desired output distribution \\(G\\). This formula is using the two following facts: (i) if \\(X\\) is a random variable with a continuous cumulative distribution function \\(F\\) then \\(F(X)\\) is uniformly distributed on \\([0,1]\\); (ii) if \\(U\\) is a random variable with uniform distribution on \\([0,1]\\) then \\(G^{-1}(U)\\) has distribution \\(G\\). By performing a rank transformation, a quantile transform smooths out unusual distributions and is less influenced by outliers than scaling methods. It does, however, distort correlations and distances within and across features.", "Power transforms are a family of parametric transformations that aim to map data from any distribution to as close to a Gaussian distribution.", "QuantileTransformer provides a non-parametric transformation to map the data to a uniform distribution with values between 0 and 1:", "This feature corresponds to the sepal length in cm. Once the quantile transformation applied, those landmarks approach closely the percentiles previously defined:", "This can be confirmed on a independent testing set with similar remarks:", "In many modeling scenarios, normality of the features in a dataset is desirable. Power transforms are a family of parametric, monotonic transformations that aim to map data from any distribution to as close to a Gaussian distribution as possible in order to stabilize variance and minimize skewness.", "PowerTransformer currently provides two such power transformations, the Yeo-Johnson transform and the Box-Cox transform.", "The Yeo-Johnson transform is given by:", "while the Box-Cox transform is given by:", "Box-Cox can only be applied to strictly positive data. In both methods, the transformation is parameterized by \\(\\lambda\\), which is determined through maximum likelihood estimation. Here is an example of using Box-Cox to map samples drawn from a lognormal distribution to a normal distribution:", "While the above example sets the standardize option to False, PowerTransformer will apply zero-mean, unit-variance normalization to the transformed output by default.", "Below are examples of Box-Cox and Yeo-Johnson applied to various probability distributions. Note that when applied to certain distributions, the power transforms achieve very Gaussian-like results, but with others, they are ineffective. This highlights the importance of visualizing the data before and after transformation.", "It is also possible to map data to a normal distribution using QuantileTransformer by setting output_distribution='normal'. Using the earlier example with the iris dataset:", "Thus the median of the input becomes the mean of the output, centered at 0. The normal output is clipped so that the input\u2019s minimum and maximum \u2014 corresponding to the 1e-7 and 1 - 1e-7 quantiles respectively \u2014 do not become infinite under the transformation.", "Normalization is the process of scaling individual samples to have unit norm. This process can be useful if you plan to use a quadratic form such as the dot-product or any other kernel to quantify the similarity of any pair of samples.", "This assumption is the base of the Vector Space Model often used in text classification and clustering contexts.", "The function normalize provides a quick and easy way to perform this operation on a single array-like dataset, either using the l1, l2, or max norms:", "The preprocessing module further provides a utility class Normalizer that implements the same operation using the Transformer API (even though the fit method is useless in this case: the class is stateless as this operation treats samples independently).", "This class is hence suitable for use in the early steps of a Pipeline:", "The normalizer instance can then be used on sample vectors as any transformer:", "Note: L2 normalization is also known as spatial sign preprocessing.", "Sparse input", "normalize and Normalizer accept both dense array-like and sparse matrices from scipy.sparse as input.", "For sparse input the data is converted to the Compressed Sparse Rows representation (see scipy.sparse.csr_matrix) before being fed to efficient Cython routines. To avoid unnecessary memory copies, it is recommended to choose the CSR representation upstream.", "Often features are not given as continuous values but categorical. For example a person could have features [\"male\", \"female\"], [\"from Europe\", \"from US\", \"from Asia\"], [\"uses Firefox\", \"uses Chrome\", \"uses Safari\", \"uses Internet Explorer\"]. Such features can be efficiently coded as integers, for instance [\"male\", \"from US\", \"uses Internet Explorer\"] could be expressed as [0, 1, 3] while [\"female\", \"from Asia\", \"uses Chrome\"] would be [1, 2, 1].", "To convert categorical features to such integer codes, we can use the OrdinalEncoder. This estimator transforms each categorical feature to one new feature of integers (0 to n_categories - 1):", "Such integer representation can, however, not be used directly with all scikit-learn estimators, as these expect continuous input, and would interpret the categories as being ordered, which is often not desired (i.e. the set of browsers was ordered arbitrarily).", "Another possibility to convert categorical features to features that can be used with scikit-learn estimators is to use a one-of-K, also known as one-hot or dummy encoding. This type of encoding can be obtained with the OneHotEncoder, which transforms each categorical feature with n_categories possible values into n_categories binary features, with one of them 1, and all others 0.", "Continuing the example above:", "By default, the values each feature can take is inferred automatically from the dataset and can be found in the categories_ attribute:", "It is possible to specify this explicitly using the parameter categories. There are two genders, four possible continents and four web browsers in our dataset:", "If there is a possibility that the training data might have missing categorical features, it can often be better to specify handle_unknown='ignore' instead of setting the categories manually as above. When handle_unknown='ignore' is specified and unknown categories are encountered during transform, no error will be raised but the resulting one-hot encoded columns for this feature will be all zeros (handle_unknown='ignore' is only supported for one-hot encoding):", "It is also possible to encode each column into n_categories - 1 columns instead of n_categories columns by using the drop parameter. This parameter allows the user to specify a category for each feature to be dropped. This is useful to avoid co-linearity in the input matrix in some classifiers. Such functionality is useful, for example, when using non-regularized regression (LinearRegression), since co-linearity would cause the covariance matrix to be non-invertible. When this parameter is not None, handle_unknown must be set to error:", "One might want to drop one of the two columns only for features with 2 categories. In this case, you can set the parameter drop='if_binary'.", "In the transformed X, the first column is the encoding of the feature with categories \u201cmale\u201d/\u201dfemale\u201d, while the remaining 6 columns is the encoding of the 2 features with respectively 3 categories each.", "OneHotEncoder supports categorical features with missing values by considering the missing values as an additional category:", "If a feature contains both np.nan and None, they will be considered separate categories:", "See Loading features from dicts for categorical features that are represented as a dict, not as scalars.", "Discretization (otherwise known as quantization or binning) provides a way to partition continuous features into discrete values. Certain datasets with continuous features may benefit from discretization, because discretization can transform the dataset of continuous attributes to one with only nominal attributes.", "One-hot encoded discretized features can make a model more expressive, while maintaining interpretability. For instance, pre-processing with a discretizer can introduce nonlinearity to linear models.", "KBinsDiscretizer discretizes features into k bins:", "By default the output is one-hot encoded into a sparse matrix (See Encoding categorical features) and this can be configured with the encode parameter. For each feature, the bin edges are computed during fit and together with the number of bins, they will define the intervals. Therefore, for the current example, these intervals are defined as:", "Based on these bin intervals, X is transformed as follows:", "The resulting dataset contains ordinal attributes which can be further used in a Pipeline.", "Discretization is similar to constructing histograms for continuous data. However, histograms focus on counting features which fall into particular bins, whereas discretization focuses on assigning feature values to these bins.", "KBinsDiscretizer implements different binning strategies, which can be selected with the strategy parameter. The \u2018uniform\u2019 strategy uses constant-width bins. The \u2018quantile\u2019 strategy uses the quantiles values to have equally populated bins in each feature. The \u2018kmeans\u2019 strategy defines bins based on a k-means clustering procedure performed on each feature independently.", "Be aware that one can specify custom bins by passing a callable defining the discretization strategy to FunctionTransformer. For instance, we can use the Pandas function pandas.cut:", "Examples:", "Feature binarization is the process of thresholding numerical features to get boolean values. This can be useful for downstream probabilistic estimators that make assumption that the input data is distributed according to a multi-variate Bernoulli distribution. For instance, this is the case for the BernoulliRBM.", "It is also common among the text processing community to use binary feature values (probably to simplify the probabilistic reasoning) even if normalized counts (a.k.a. term frequencies) or TF-IDF valued features often perform slightly better in practice.", "As for the Normalizer, the utility class Binarizer is meant to be used in the early stages of Pipeline. The fit method does nothing as each sample is treated independently of others:", "It is possible to adjust the threshold of the binarizer:", "As for the Normalizer class, the preprocessing module provides a companion function binarize to be used when the transformer API is not necessary.", "Note that the Binarizer is similar to the KBinsDiscretizer when k = 2, and when the bin edge is at the value threshold.", "Sparse input", "binarize and Binarizer accept both dense array-like and sparse matrices from scipy.sparse as input.", "For sparse input the data is converted to the Compressed Sparse Rows representation (see scipy.sparse.csr_matrix). To avoid unnecessary memory copies, it is recommended to choose the CSR representation upstream.", "Tools for imputing missing values are discussed at Imputation of missing values.", "Often it\u2019s useful to add complexity to the model by considering nonlinear features of the input data. A simple and common method to use is polynomial features, which can get features\u2019 high-order and interaction terms. It is implemented in PolynomialFeatures:", "The features of X have been transformed from \\((X_1, X_2)\\) to \\((1, X_1, X_2, X_1^2, X_1X_2, X_2^2)\\).", "In some cases, only interaction terms among features are required, and it can be gotten with the setting interaction_only=True:", "The features of X have been transformed from \\((X_1, X_2, X_3)\\) to \\((1, X_1, X_2, X_3, X_1X_2, X_1X_3, X_2X_3, X_1X_2X_3)\\).", "Note that polynomial features are used implicitly in kernel methods (e.g., SVC, KernelPCA) when using polynomial Kernel functions.", "See Polynomial interpolation for Ridge regression using created polynomial features.", "Often, you will want to convert an existing Python function into a transformer to assist in data cleaning or processing. You can implement a transformer from an arbitrary function with FunctionTransformer. For example, to build a transformer that applies a log transformation in a pipeline, do:", "You can ensure that func and inverse_func are the inverse of each other by setting check_inverse=True and calling fit before transform. Please note that a warning is raised and can be turned into an error with a filterwarnings:", "For a full code example that demonstrates using a FunctionTransformer to extract features from text data see Column Transformer with Heterogeneous Data Sources"]}, {"name": "6.4. Imputation of missing values", "path": "modules/impute", "type": "Guide", "text": ["For various reasons, many real world datasets contain missing values, often encoded as blanks, NaNs or other placeholders. Such datasets however are incompatible with scikit-learn estimators which assume that all values in an array are numerical, and that all have and hold meaning. A basic strategy to use incomplete datasets is to discard entire rows and/or columns containing missing values. However, this comes at the price of losing data which may be valuable (even though incomplete). A better strategy is to impute the missing values, i.e., to infer them from the known part of the data. See the Glossary of Common Terms and API Elements entry on imputation.", "One type of imputation algorithm is univariate, which imputes values in the i-th feature dimension using only non-missing values in that feature dimension (e.g. impute.SimpleImputer). By contrast, multivariate imputation algorithms use the entire set of available feature dimensions to estimate the missing values (e.g. impute.IterativeImputer).", "The SimpleImputer class provides basic strategies for imputing missing values. Missing values can be imputed with a provided constant value, or using the statistics (mean, median or most frequent) of each column in which the missing values are located. This class also allows for different missing values encodings.", "The following snippet demonstrates how to replace missing values, encoded as np.nan, using the mean value of the columns (axis 0) that contain the missing values:", "The SimpleImputer class also supports sparse matrices:", "Note that this format is not meant to be used to implicitly store missing values in the matrix because it would densify it at transform time. Missing values encoded by 0 must be used with dense input.", "The SimpleImputer class also supports categorical data represented as string values or pandas categoricals when using the 'most_frequent' or 'constant' strategy:", "A more sophisticated approach is to use the IterativeImputer class, which models each feature with missing values as a function of other features, and uses that estimate for imputation. It does so in an iterated round-robin fashion: at each step, a feature column is designated as output y and the other feature columns are treated as inputs X. A regressor is fit on (X,\ny) for known y. Then, the regressor is used to predict the missing values of y. This is done for each feature in an iterative fashion, and then is repeated for max_iter imputation rounds. The results of the final imputation round are returned.", "Note", "This estimator is still experimental for now: default parameters or details of behaviour might change without any deprecation cycle. Resolving the following issues would help stabilize IterativeImputer: convergence criteria (#14338), default estimators (#13286), and use of random state (#15611). To use it, you need to explicitly import enable_iterative_imputer.", "Both SimpleImputer and IterativeImputer can be used in a Pipeline as a way to build a composite estimator that supports imputation. See Imputing missing values before building an estimator.", "There are many well-established imputation packages in the R data science ecosystem: Amelia, mi, mice, missForest, etc. missForest is popular, and turns out to be a particular instance of different sequential imputation algorithms that can all be implemented with IterativeImputer by passing in different regressors to be used for predicting missing feature values. In the case of missForest, this regressor is a Random Forest. See Imputing missing values with variants of IterativeImputer.", "In the statistics community, it is common practice to perform multiple imputations, generating, for example, m separate imputations for a single feature matrix. Each of these m imputations is then put through the subsequent analysis pipeline (e.g. feature engineering, clustering, regression, classification). The m final analysis results (e.g. held-out validation errors) allow the data scientist to obtain understanding of how analytic results may differ as a consequence of the inherent uncertainty caused by the missing values. The above practice is called multiple imputation.", "Our implementation of IterativeImputer was inspired by the R MICE package (Multivariate Imputation by Chained Equations) 1, but differs from it by returning a single imputation instead of multiple imputations. However, IterativeImputer can also be used for multiple imputations by applying it repeatedly to the same dataset with different random seeds when sample_posterior=True. See 2, chapter 4 for more discussion on multiple vs. single imputations.", "It is still an open problem as to how useful single vs. multiple imputation is in the context of prediction and classification when the user is not interested in measuring uncertainty due to missing values.", "Note that a call to the transform method of IterativeImputer is not allowed to change the number of samples. Therefore multiple imputations cannot be achieved by a single call to transform.", "Stef van Buuren, Karin Groothuis-Oudshoorn (2011). \u201cmice: Multivariate Imputation by Chained Equations in R\u201d. Journal of Statistical Software 45: 1-67.", "Roderick J A Little and Donald B Rubin (1986). \u201cStatistical Analysis with Missing Data\u201d. John Wiley & Sons, Inc., New York, NY, USA.", "The KNNImputer class provides imputation for filling in missing values using the k-Nearest Neighbors approach. By default, a euclidean distance metric that supports missing values, nan_euclidean_distances, is used to find the nearest neighbors. Each missing feature is imputed using values from n_neighbors nearest neighbors that have a value for the feature. The feature of the neighbors are averaged uniformly or weighted by distance to each neighbor. If a sample has more than one feature missing, then the neighbors for that sample can be different depending on the particular feature being imputed. When the number of available neighbors is less than n_neighbors and there are no defined distances to the training set, the training set average for that feature is used during imputation. If there is at least one neighbor with a defined distance, the weighted or unweighted average of the remaining neighbors will be used during imputation. If a feature is always missing in training, it is removed during transform. For more information on the methodology, see ref. [OL2001].", "The following snippet demonstrates how to replace missing values, encoded as np.nan, using the mean feature value of the two nearest neighbors of samples with missing values:", "Olga Troyanskaya, Michael Cantor, Gavin Sherlock, Pat Brown, Trevor Hastie, Robert Tibshirani, David Botstein and Russ B. Altman, Missing value estimation methods for DNA microarrays, BIOINFORMATICS Vol. 17 no. 6, 2001 Pages 520-525.", "The MissingIndicator transformer is useful to transform a dataset into corresponding binary matrix indicating the presence of missing values in the dataset. This transformation is useful in conjunction with imputation. When using imputation, preserving the information about which values had been missing can be informative. Note that both the SimpleImputer and IterativeImputer have the boolean parameter add_indicator (False by default) which when set to True provides a convenient way of stacking the output of the MissingIndicator transformer with the output of the imputer.", "NaN is usually used as the placeholder for missing values. However, it enforces the data type to be float. The parameter missing_values allows to specify other placeholder such as integer. In the following example, we will use -1 as missing values:", "The features parameter is used to choose the features for which the mask is constructed. By default, it is 'missing-only' which returns the imputer mask of the features containing missing values at fit time:", "The features parameter can be set to 'all' to return all features whether or not they contain missing values:", "When using the MissingIndicator in a Pipeline, be sure to use the FeatureUnion or ColumnTransformer to add the indicator features to the regular features. First we obtain the iris dataset, and add some missing values to it.", "Now we create a FeatureUnion. All features will be imputed using SimpleImputer, in order to enable classifiers to work with this data. Additionally, it adds the indicator variables from MissingIndicator.", "Of course, we cannot use the transformer to make any predictions. We should wrap this in a Pipeline with a classifier (e.g., a DecisionTreeClassifier) to be able to make predictions."]}, {"name": "6.5. Unsupervised dimensionality reduction", "path": "modules/unsupervised_reduction", "type": "Guide", "text": ["If your number of features is high, it may be useful to reduce it with an unsupervised step prior to supervised steps. Many of the Unsupervised learning methods implement a transform method that can be used to reduce the dimensionality. Below we discuss two specific example of this pattern that are heavily used.", "Pipelining", "The unsupervised data reduction and the supervised estimator can be chained in one step. See Pipeline: chaining estimators.", "decomposition.PCA looks for a combination of features that capture well the variance of the original features. See Decomposing signals in components (matrix factorization problems).", "Examples", "The module: random_projection provides several tools for data reduction by random projections. See the relevant section of the documentation: Random Projection.", "Examples", "cluster.FeatureAgglomeration applies Hierarchical clustering to group together features that behave similarly.", "Examples", "Feature scaling", "Note that if features have very different scaling or statistical properties, cluster.FeatureAgglomeration may not be able to capture the links between related features. Using a preprocessing.StandardScaler can be useful in these settings."]}, {"name": "6.6. Random Projection", "path": "modules/random_projection", "type": "Guide", "text": ["The sklearn.random_projection module implements a simple and computationally efficient way to reduce the dimensionality of the data by trading a controlled amount of accuracy (as additional variance) for faster processing times and smaller model sizes. This module implements two types of unstructured random matrix: Gaussian random matrix and sparse random matrix.", "The dimensions and distribution of random projections matrices are controlled so as to preserve the pairwise distances between any two samples of the dataset. Thus random projection is a suitable approximation technique for distance based method.", "References:", "The main theoretical result behind the efficiency of random projection is the Johnson-Lindenstrauss lemma (quoting Wikipedia):", "In mathematics, the Johnson-Lindenstrauss lemma is a result concerning low-distortion embeddings of points from high-dimensional into low-dimensional Euclidean space. The lemma states that a small set of points in a high-dimensional space can be embedded into a space of much lower dimension in such a way that distances between the points are nearly preserved. The map used for the embedding is at least Lipschitz, and can even be taken to be an orthogonal projection.", "Knowing only the number of samples, the johnson_lindenstrauss_min_dim estimates conservatively the minimal size of the random subspace to guarantee a bounded distortion introduced by the random projection:", "Example:", "References:", "The GaussianRandomProjection reduces the dimensionality by projecting the original input space on a randomly generated matrix where components are drawn from the following distribution \\(N(0, \\frac{1}{n_{components}})\\).", "Here a small excerpt which illustrates how to use the Gaussian random projection transformer:", "The SparseRandomProjection reduces the dimensionality by projecting the original input space using a sparse random matrix.", "Sparse random matrices are an alternative to dense Gaussian random projection matrix that guarantees similar embedding quality while being much more memory efficient and allowing faster computation of the projected data.", "If we define s = 1 / density, the elements of the random matrix are drawn from", "where \\(n_{\\text{components}}\\) is the size of the projected subspace. By default the density of non zero elements is set to the minimum density as recommended by Ping Li et al.: \\(1 / \\sqrt{n_{\\text{features}}}\\).", "Here a small excerpt which illustrates how to use the sparse random projection transformer:", "References:"]}, {"name": "6.7. Kernel Approximation", "path": "modules/kernel_approximation", "type": "Guide", "text": ["This submodule contains functions that approximate the feature mappings that correspond to certain kernels, as they are used for example in support vector machines (see Support Vector Machines). The following feature functions perform non-linear transformations of the input, which can serve as a basis for linear classification or other algorithms.", "The advantage of using approximate explicit feature maps compared to the kernel trick, which makes use of feature maps implicitly, is that explicit mappings can be better suited for online learning and can significantly reduce the cost of learning with very large datasets. Standard kernelized SVMs do not scale well to large datasets, but using an approximate kernel map it is possible to use much more efficient linear SVMs. In particular, the combination of kernel map approximations with SGDClassifier can make non-linear learning on large datasets possible.", "Since there has not been much empirical work using approximate embeddings, it is advisable to compare results against exact kernel methods when possible.", "See also", "Polynomial regression: extending linear models with basis functions for an exact polynomial transformation.", "The Nystroem method, as implemented in Nystroem is a general method for low-rank approximations of kernels. It achieves this by essentially subsampling the data on which the kernel is evaluated. By default Nystroem uses the rbf kernel, but it can use any kernel function or a precomputed kernel matrix. The number of samples used - which is also the dimensionality of the features computed - is given by the parameter n_components.", "The RBFSampler constructs an approximate mapping for the radial basis function kernel, also known as Random Kitchen Sinks [RR2007]. This transformation can be used to explicitly model a kernel map, prior to applying a linear algorithm, for example a linear SVM:", "The mapping relies on a Monte Carlo approximation to the kernel values. The fit function performs the Monte Carlo sampling, whereas the transform method performs the mapping of the data. Because of the inherent randomness of the process, results may vary between different calls to the fit function.", "The fit function takes two arguments: n_components, which is the target dimensionality of the feature transform, and gamma, the parameter of the RBF-kernel. A higher n_components will result in a better approximation of the kernel and will yield results more similar to those produced by a kernel SVM. Note that \u201cfitting\u201d the feature function does not actually depend on the data given to the fit function. Only the dimensionality of the data is used. Details on the method can be found in [RR2007].", "For a given value of n_components RBFSampler is often less accurate as Nystroem. RBFSampler is cheaper to compute, though, making use of larger feature spaces more efficient.", "Comparing an exact RBF kernel (left) with the approximation (right)", "Examples:", "The additive chi squared kernel is a kernel on histograms, often used in computer vision.", "The additive chi squared kernel as used here is given by", "This is not exactly the same as sklearn.metrics.additive_chi2_kernel. The authors of [VZ2010] prefer the version above as it is always positive definite. Since the kernel is additive, it is possible to treat all components \\(x_i\\) separately for embedding. This makes it possible to sample the Fourier transform in regular intervals, instead of approximating using Monte Carlo sampling.", "The class AdditiveChi2Sampler implements this component wise deterministic sampling. Each component is sampled \\(n\\) times, yielding \\(2n+1\\) dimensions per input dimension (the multiple of two stems from the real and complex part of the Fourier transform). In the literature, \\(n\\) is usually chosen to be 1 or 2, transforming the dataset to size n_samples * 5 * n_features (in the case of \\(n=2\\)).", "The approximate feature map provided by AdditiveChi2Sampler can be combined with the approximate feature map provided by RBFSampler to yield an approximate feature map for the exponentiated chi squared kernel. See the [VZ2010] for details and [VVZ2010] for combination with the RBFSampler.", "The skewed chi squared kernel is given by:", "It has properties that are similar to the exponentiated chi squared kernel often used in computer vision, but allows for a simple Monte Carlo approximation of the feature map.", "The usage of the SkewedChi2Sampler is the same as the usage described above for the RBFSampler. The only difference is in the free parameter, that is called \\(c\\). For a motivation for this mapping and the mathematical details see [LS2010].", "The polynomial kernel is a popular type of kernel function given by:", "where:", "Intuitively, the feature space of the polynomial kernel of degree d consists of all possible degree-d products among input features, which enables learning algorithms using this kernel to account for interactions between features.", "The TensorSketch [PP2013] method, as implemented in PolynomialCountSketch, is a scalable, input data independent method for polynomial kernel approximation. It is based on the concept of Count sketch [WIKICS] [CCF2002] , a dimensionality reduction technique similar to feature hashing, which instead uses several independent hash functions. TensorSketch obtains a Count Sketch of the outer product of two vectors (or a vector with itself), which can be used as an approximation of the polynomial kernel feature space. In particular, instead of explicitly computing the outer product, TensorSketch computes the Count Sketch of the vectors and then uses polynomial multiplication via the Fast Fourier Transform to compute the Count Sketch of their outer product.", "Conveniently, the training phase of TensorSketch simply consists of initializing some random variables. It is thus independent of the input data, i.e. it only depends on the number of input features, but not the data values. In addition, this method can transform samples in \\(\\mathcal{O}(n_{\\text{samples}}(n_{\\text{features}} + n_{\\text{components}} \\log(n_{\\text{components}})))\\) time, where \\(n_{\\text{components}}\\) is the desired output dimension, determined by n_components.", "Examples:", "Kernel methods like support vector machines or kernelized PCA rely on a property of reproducing kernel Hilbert spaces. For any positive definite kernel function \\(k\\) (a so called Mercer kernel), it is guaranteed that there exists a mapping \\(\\phi\\) into a Hilbert space \\(\\mathcal{H}\\), such that", "Where \\(\\langle \\cdot, \\cdot \\rangle\\) denotes the inner product in the Hilbert space.", "If an algorithm, such as a linear support vector machine or PCA, relies only on the scalar product of data points \\(x_i\\), one may use the value of \\(k(x_i, x_j)\\), which corresponds to applying the algorithm to the mapped data points \\(\\phi(x_i)\\). The advantage of using \\(k\\) is that the mapping \\(\\phi\\) never has to be calculated explicitly, allowing for arbitrary large features (even infinite).", "One drawback of kernel methods is, that it might be necessary to store many kernel values \\(k(x_i, x_j)\\) during optimization. If a kernelized classifier is applied to new data \\(y_j\\), \\(k(x_i, y_j)\\) needs to be computed to make predictions, possibly for many different \\(x_i\\) in the training set.", "The classes in this submodule allow to approximate the embedding \\(\\phi\\), thereby working explicitly with the representations \\(\\phi(x_i)\\), which obviates the need to apply the kernel or store training examples.", "References:", "\u201cRandom features for large-scale kernel machines\u201d Rahimi, A. and Recht, B. - Advances in neural information processing 2007,", "\u201cRandom Fourier approximations for skewed multiplicative histogram kernels\u201d Random Fourier approximations for skewed multiplicative histogram kernels - Lecture Notes for Computer Sciencd (DAGM)", "\u201cEfficient additive kernels via explicit feature maps\u201d Vedaldi, A. and Zisserman, A. - Computer Vision and Pattern Recognition 2010", "\u201cGeneralized RBF feature maps for Efficient Detection\u201d Vempati, S. and Vedaldi, A. and Zisserman, A. and Jawahar, CV - 2010", "\u201cFast and scalable polynomial kernels via explicit feature maps\u201d Pham, N., & Pagh, R. - 2013", "\u201cFinding frequent items in data streams\u201d Charikar, M., Chen, K., & Farach-Colton - 2002", "\u201cWikipedia: Count sketch\u201d"]}, {"name": "6.8. Pairwise metrics, Affinities and Kernels", "path": "modules/metrics", "type": "Guide", "text": ["The sklearn.metrics.pairwise submodule implements utilities to evaluate pairwise distances or affinity of sets of samples.", "This module contains both distance metrics and kernels. A brief summary is given on the two here.", "Distance metrics are functions d(a, b) such that d(a, b) < d(a, c) if objects a and b are considered \u201cmore similar\u201d than objects a and c. Two objects exactly alike would have a distance of zero. One of the most popular examples is Euclidean distance. To be a \u2018true\u2019 metric, it must obey the following four conditions:", "Kernels are measures of similarity, i.e. s(a, b) > s(a, c) if objects a and b are considered \u201cmore similar\u201d than objects a and c. A kernel must also be positive semi-definite.", "There are a number of ways to convert between a distance metric and a similarity measure, such as a kernel. Let D be the distance, and S be the kernel:", "The distances between the row vectors of X and the row vectors of Y can be evaluated using pairwise_distances. If Y is omitted the pairwise distances of the row vectors of X are calculated. Similarly, pairwise.pairwise_kernels can be used to calculate the kernel between X and Y using different kernel functions. See the API reference for more details.", "cosine_similarity computes the L2-normalized dot product of vectors. That is, if \\(x\\) and \\(y\\) are row vectors, their cosine similarity \\(k\\) is defined as:", "This is called cosine similarity, because Euclidean (L2) normalization projects the vectors onto the unit sphere, and their dot product is then the cosine of the angle between the points denoted by the vectors.", "This kernel is a popular choice for computing the similarity of documents represented as tf-idf vectors. cosine_similarity accepts scipy.sparse matrices. (Note that the tf-idf functionality in sklearn.feature_extraction.text can produce normalized vectors, in which case cosine_similarity is equivalent to linear_kernel, only slower.)", "References:", "The function linear_kernel computes the linear kernel, that is, a special case of polynomial_kernel with degree=1 and coef0=0 (homogeneous). If x and y are column vectors, their linear kernel is:", "The function polynomial_kernel computes the degree-d polynomial kernel between two vectors. The polynomial kernel represents the similarity between two vectors. Conceptually, the polynomial kernels considers not only the similarity between vectors under the same dimension, but also across dimensions. When used in machine learning algorithms, this allows to account for feature interaction.", "The polynomial kernel is defined as:", "where:", "If \\(c_0 = 0\\) the kernel is said to be homogeneous.", "The function sigmoid_kernel computes the sigmoid kernel between two vectors. The sigmoid kernel is also known as hyperbolic tangent, or Multilayer Perceptron (because, in the neural network field, it is often used as neuron activation function). It is defined as:", "where:", "The function rbf_kernel computes the radial basis function (RBF) kernel between two vectors. This kernel is defined as:", "where x and y are the input vectors. If \\(\\gamma = \\sigma^{-2}\\) the kernel is known as the Gaussian kernel of variance \\(\\sigma^2\\).", "The function laplacian_kernel is a variant on the radial basis function kernel defined as:", "where x and y are the input vectors and \\(\\|x-y\\|_1\\) is the Manhattan distance between the input vectors.", "It has proven useful in ML applied to noiseless data. See e.g. Machine learning for quantum mechanics in a nutshell.", "The chi-squared kernel is a very popular choice for training non-linear SVMs in computer vision applications. It can be computed using chi2_kernel and then passed to an SVC with kernel=\"precomputed\":", "It can also be directly used as the kernel argument:", "The chi squared kernel is given by", "The data is assumed to be non-negative, and is often normalized to have an L1-norm of one. The normalization is rationalized with the connection to the chi squared distance, which is a distance between discrete probability distributions.", "The chi squared kernel is most commonly used on histograms (bags) of visual words.", "References:"]}, {"name": "6.9. Transforming the prediction target", "path": "modules/preprocessing_targets", "type": "Guide", "text": ["These are transformers that are not intended to be used on features, only on supervised learning targets. See also Transforming target in regression if you want to transform the prediction target for learning, but evaluate the model in the original (untransformed) space.", "LabelBinarizer is a utility class to help create a label indicator matrix from a list of multiclass labels:", "Using this format can enable multiclass classification in estimators that support the label indicator matrix format.", "Warning", "LabelBinarizer is not needed if you are using an estimator that already supports multiclass data.", "For more information about multiclass classification, refer to Multiclass classification.", "In multilabel learning, the joint set of binary classification tasks is expressed with a label binary indicator array: each sample is one row of a 2d array of shape (n_samples, n_classes) with binary values where the one, i.e. the non zero elements, corresponds to the subset of labels for that sample. An array such as np.array([[1, 0, 0], [0, 1, 1], [0, 0, 0]]) represents label 0 in the first sample, labels 1 and 2 in the second sample, and no labels in the third sample.", "Producing multilabel data as a list of sets of labels may be more intuitive. The MultiLabelBinarizer transformer can be used to convert between a collection of collections of labels and the indicator format:", "For more information about multilabel classification, refer to Multilabel classification.", "LabelEncoder is a utility class to help normalize labels such that they contain only values between 0 and n_classes-1. This is sometimes useful for writing efficient Cython routines. LabelEncoder can be used as follows:", "It can also be used to transform non-numerical labels (as long as they are hashable and comparable) to numerical labels:"]}, {"name": "7. Dataset loading utilities", "path": "datasets", "type": "Guide", "text": ["The sklearn.datasets package embeds some small toy datasets as introduced in the Getting Started section.", "This package also features helpers to fetch larger datasets commonly used by the machine learning community to benchmark algorithms on data that comes from the \u2018real world\u2019.", "To evaluate the impact of the scale of the dataset (n_samples and n_features) while controlling the statistical properties of the data (typically the correlation and informativeness of the features), it is also possible to generate synthetic data.", "General dataset API. There are three main kinds of dataset interfaces that can be used to get datasets depending on the desired type of dataset.", "The dataset loaders. They can be used to load small standard datasets, described in the Toy datasets section.", "The dataset fetchers. They can be used to download and load larger datasets, described in the Real world datasets section.", "Both loaders and fetchers functions return a Bunch object holding at least two items: an array of shape n_samples * n_features with key data (except for 20newsgroups) and a numpy array of length n_samples, containing the target values, with key target.", "The Bunch object is a dictionary that exposes its keys as attributes. For more information about Bunch object, see Bunch.", "It\u2019s also possible for almost all of these function to constrain the output to be a tuple containing only the data and the target, by setting the return_X_y parameter to True.", "The datasets also contain a full description in their DESCR attribute and some contain feature_names and target_names. See the dataset descriptions below for details.", "The dataset generation functions. They can be used to generate controlled synthetic datasets, described in the Generated datasets section.", "These functions return a tuple (X, y) consisting of a n_samples * n_features numpy array X and an array of length n_samples containing the targets y.", "In addition, there are also miscellaneous tools to load datasets of other formats or from other locations, described in the Loading other datasets section."]}, {"name": "API Reference", "path": "modules/classes", "type": "Guide", "text": ["This is the class and function reference of scikit-learn. Please refer to the full user guide for further details, as the class and function raw specifications may not be enough to give full guidelines on their uses. For reference on concepts repeated across the API, see Glossary of Common Terms and API Elements.", "Base classes for all estimators.", "base.BaseEstimator", "Base class for all estimators in scikit-learn.", "base.BiclusterMixin", "Mixin class for all bicluster estimators in scikit-learn.", "base.ClassifierMixin", "Mixin class for all classifiers in scikit-learn.", "base.ClusterMixin", "Mixin class for all cluster estimators in scikit-learn.", "base.DensityMixin", "Mixin class for all density estimators in scikit-learn.", "base.RegressorMixin", "Mixin class for all regression estimators in scikit-learn.", "base.TransformerMixin", "Mixin class for all transformers in scikit-learn.", "feature_selection.SelectorMixin", "Transformer mixin that performs feature selection given a support mask", "base.clone(estimator, *[, safe])", "Constructs a new unfitted estimator with the same parameters.", "base.is_classifier(estimator)", "Return True if the given estimator is (probably) a classifier.", "base.is_regressor(estimator)", "Return True if the given estimator is (probably) a regressor.", "config_context(**new_config)", "Context manager for global scikit-learn configuration", "get_config()", "Retrieve current values for configuration set by set_config", "set_config([assume_finite, working_memory, \u2026])", "Set global scikit-learn configuration", "show_versions()", "Print useful debugging information\u201d", "Calibration of predicted probabilities.", "User guide: See the Probability calibration section for further details.", "calibration.CalibratedClassifierCV([\u2026])", "Probability calibration with isotonic regression or logistic regression.", "calibration.calibration_curve(y_true, y_prob, *)", "Compute true and predicted probabilities for a calibration curve.", "The sklearn.cluster module gathers popular unsupervised clustering algorithms.", "User guide: See the Clustering and Biclustering sections for further details.", "cluster.AffinityPropagation(*[, damping, \u2026])", "Perform Affinity Propagation Clustering of data.", "cluster.AgglomerativeClustering([\u2026])", "Agglomerative Clustering", "cluster.Birch(*[, threshold, \u2026])", "Implements the Birch clustering algorithm.", "cluster.DBSCAN([eps, min_samples, metric, \u2026])", "Perform DBSCAN clustering from vector array or distance matrix.", "cluster.FeatureAgglomeration([n_clusters, \u2026])", "Agglomerate features.", "cluster.KMeans([n_clusters, init, n_init, \u2026])", "K-Means clustering.", "cluster.MiniBatchKMeans([n_clusters, init, \u2026])", "Mini-Batch K-Means clustering.", "cluster.MeanShift(*[, bandwidth, seeds, \u2026])", "Mean shift clustering using a flat kernel.", "cluster.OPTICS(*[, min_samples, max_eps, \u2026])", "Estimate clustering structure from vector array.", "cluster.SpectralClustering([n_clusters, \u2026])", "Apply clustering to a projection of the normalized Laplacian.", "cluster.SpectralBiclustering([n_clusters, \u2026])", "Spectral biclustering (Kluger, 2003).", "cluster.SpectralCoclustering([n_clusters, \u2026])", "Spectral Co-Clustering algorithm (Dhillon, 2001).", "cluster.affinity_propagation(S, *[, \u2026])", "Perform Affinity Propagation Clustering of data.", "cluster.cluster_optics_dbscan(*, \u2026)", "Performs DBSCAN extraction for an arbitrary epsilon.", "cluster.cluster_optics_xi(*, reachability, \u2026)", "Automatically extract clusters according to the Xi-steep method.", "cluster.compute_optics_graph(X, *, \u2026)", "Computes the OPTICS reachability graph.", "cluster.dbscan(X[, eps, min_samples, \u2026])", "Perform DBSCAN clustering from vector array or distance matrix.", "cluster.estimate_bandwidth(X, *[, quantile, \u2026])", "Estimate the bandwidth to use with the mean-shift algorithm.", "cluster.k_means(X, n_clusters, *[, \u2026])", "K-means clustering algorithm.", "cluster.kmeans_plusplus(X, n_clusters, *[, \u2026])", "Init n_clusters seeds according to k-means++", "cluster.mean_shift(X, *[, bandwidth, seeds, \u2026])", "Perform mean shift clustering of data using a flat kernel.", "cluster.spectral_clustering(affinity, *[, \u2026])", "Apply clustering to a projection of the normalized Laplacian.", "cluster.ward_tree(X, *[, connectivity, \u2026])", "Ward clustering based on a Feature matrix.", "Meta-estimators for building composite models with transformers", "In addition to its current contents, this module will eventually be home to refurbished versions of Pipeline and FeatureUnion.", "User guide: See the Pipelines and composite estimators section for further details.", "compose.ColumnTransformer(transformers, *[, \u2026])", "Applies transformers to columns of an array or pandas DataFrame.", "compose.TransformedTargetRegressor([\u2026])", "Meta-estimator to regress on a transformed target.", "compose.make_column_transformer(*transformers)", "Construct a ColumnTransformer from the given transformers.", "compose.make_column_selector([pattern, \u2026])", "Create a callable to select columns to be used with ColumnTransformer.", "The sklearn.covariance module includes methods and algorithms to robustly estimate the covariance of features given a set of points. The precision matrix defined as the inverse of the covariance is also estimated. Covariance estimation is closely related to the theory of Gaussian Graphical Models.", "User guide: See the Covariance estimation section for further details.", "covariance.EmpiricalCovariance(*[, \u2026])", "Maximum likelihood covariance estimator", "covariance.EllipticEnvelope(*[, \u2026])", "An object for detecting outliers in a Gaussian distributed dataset.", "covariance.GraphicalLasso([alpha, mode, \u2026])", "Sparse inverse covariance estimation with an l1-penalized estimator.", "covariance.GraphicalLassoCV(*[, alphas, \u2026])", "Sparse inverse covariance w/ cross-validated choice of the l1 penalty.", "covariance.LedoitWolf(*[, store_precision, \u2026])", "LedoitWolf Estimator", "covariance.MinCovDet(*[, store_precision, \u2026])", "Minimum Covariance Determinant (MCD): robust estimator of covariance.", "covariance.OAS(*[, store_precision, \u2026])", "Oracle Approximating Shrinkage Estimator", "covariance.ShrunkCovariance(*[, \u2026])", "Covariance estimator with shrinkage", "covariance.empirical_covariance(X, *[, \u2026])", "Computes the Maximum likelihood covariance estimator", "covariance.graphical_lasso(emp_cov, alpha, *)", "l1-penalized covariance estimator", "covariance.ledoit_wolf(X, *[, \u2026])", "Estimates the shrunk Ledoit-Wolf covariance matrix.", "covariance.oas(X, *[, assume_centered])", "Estimate covariance with the Oracle Approximating Shrinkage algorithm.", "covariance.shrunk_covariance(emp_cov[, \u2026])", "Calculates a covariance matrix shrunk on the diagonal", "User guide: See the Cross decomposition section for further details.", "cross_decomposition.CCA([n_components, \u2026])", "Canonical Correlation Analysis, also known as \u201cMode B\u201d PLS.", "cross_decomposition.PLSCanonical([\u2026])", "Partial Least Squares transformer and regressor.", "cross_decomposition.PLSRegression([\u2026])", "PLS regression", "cross_decomposition.PLSSVD([n_components, \u2026])", "Partial Least Square SVD.", "The sklearn.datasets module includes utilities to load datasets, including methods to load and fetch popular reference datasets. It also features some artificial data generators.", "User guide: See the Dataset loading utilities section for further details.", "datasets.clear_data_home([data_home])", "Delete all the content of the data home cache.", "datasets.dump_svmlight_file(X, y, f, *[, \u2026])", "Dump the dataset in svmlight / libsvm file format.", "datasets.fetch_20newsgroups(*[, data_home, \u2026])", "Load the filenames and data from the 20 newsgroups dataset (classification).", "datasets.fetch_20newsgroups_vectorized(*[, \u2026])", "Load and vectorize the 20 newsgroups dataset (classification).", "datasets.fetch_california_housing(*[, \u2026])", "Load the California housing dataset (regression).", "datasets.fetch_covtype(*[, data_home, \u2026])", "Load the covertype dataset (classification).", "datasets.fetch_kddcup99(*[, subset, \u2026])", "Load the kddcup99 dataset (classification).", "datasets.fetch_lfw_pairs(*[, subset, \u2026])", "Load the Labeled Faces in the Wild (LFW) pairs dataset (classification).", "datasets.fetch_lfw_people(*[, data_home, \u2026])", "Load the Labeled Faces in the Wild (LFW) people dataset (classification).", "datasets.fetch_olivetti_faces(*[, \u2026])", "Load the Olivetti faces data-set from AT&T (classification).", "datasets.fetch_openml([name, version, \u2026])", "Fetch dataset from openml by name or dataset id.", "datasets.fetch_rcv1(*[, data_home, subset, \u2026])", "Load the RCV1 multilabel dataset (classification).", "datasets.fetch_species_distributions(*[, \u2026])", "Loader for species distribution dataset from Phillips et.", "datasets.get_data_home([data_home])", "Return the path of the scikit-learn data dir.", "datasets.load_boston(*[, return_X_y])", "Load and return the boston house-prices dataset (regression).", "datasets.load_breast_cancer(*[, return_X_y, \u2026])", "Load and return the breast cancer wisconsin dataset (classification).", "datasets.load_diabetes(*[, return_X_y, as_frame])", "Load and return the diabetes dataset (regression).", "datasets.load_digits(*[, n_class, \u2026])", "Load and return the digits dataset (classification).", "datasets.load_files(container_path, *[, \u2026])", "Load text files with categories as subfolder names.", "datasets.load_iris(*[, return_X_y, as_frame])", "Load and return the iris dataset (classification).", "datasets.load_linnerud(*[, return_X_y, as_frame])", "Load and return the physical excercise linnerud dataset.", "datasets.load_sample_image(image_name)", "Load the numpy array of a single sample image", "datasets.load_sample_images()", "Load sample images for image manipulation.", "datasets.load_svmlight_file(f, *[, \u2026])", "Load datasets in the svmlight / libsvm format into sparse CSR matrix", "datasets.load_svmlight_files(files, *[, \u2026])", "Load dataset from multiple files in SVMlight format", "datasets.load_wine(*[, return_X_y, as_frame])", "Load and return the wine dataset (classification).", "datasets.make_biclusters(shape, n_clusters, *)", "Generate an array with constant block diagonal structure for biclustering.", "datasets.make_blobs([n_samples, n_features, \u2026])", "Generate isotropic Gaussian blobs for clustering.", "datasets.make_checkerboard(shape, n_clusters, *)", "Generate an array with block checkerboard structure for biclustering.", "datasets.make_circles([n_samples, shuffle, \u2026])", "Make a large circle containing a smaller circle in 2d.", "datasets.make_classification([n_samples, \u2026])", "Generate a random n-class classification problem.", "datasets.make_friedman1([n_samples, \u2026])", "Generate the \u201cFriedman #1\u201d regression problem.", "datasets.make_friedman2([n_samples, noise, \u2026])", "Generate the \u201cFriedman #2\u201d regression problem.", "datasets.make_friedman3([n_samples, noise, \u2026])", "Generate the \u201cFriedman #3\u201d regression problem.", "datasets.make_gaussian_quantiles(*[, mean, \u2026])", "Generate isotropic Gaussian and label samples by quantile.", "datasets.make_hastie_10_2([n_samples, \u2026])", "Generates data for binary classification used in Hastie et al.", "datasets.make_low_rank_matrix([n_samples, \u2026])", "Generate a mostly low rank matrix with bell-shaped singular values.", "datasets.make_moons([n_samples, shuffle, \u2026])", "Make two interleaving half circles.", "datasets.make_multilabel_classification([\u2026])", "Generate a random multilabel classification problem.", "datasets.make_regression([n_samples, \u2026])", "Generate a random regression problem.", "datasets.make_s_curve([n_samples, noise, \u2026])", "Generate an S curve dataset.", "datasets.make_sparse_coded_signal(n_samples, \u2026)", "Generate a signal as a sparse combination of dictionary elements.", "datasets.make_sparse_spd_matrix([dim, \u2026])", "Generate a sparse symmetric definite positive matrix.", "datasets.make_sparse_uncorrelated([\u2026])", "Generate a random regression problem with sparse uncorrelated design.", "datasets.make_spd_matrix(n_dim, *[, \u2026])", "Generate a random symmetric, positive-definite matrix.", "datasets.make_swiss_roll([n_samples, noise, \u2026])", "Generate a swiss roll dataset.", "The sklearn.decomposition module includes matrix decomposition algorithms, including among others PCA, NMF or ICA. Most of the algorithms of this module can be regarded as dimensionality reduction techniques.", "User guide: See the Decomposing signals in components (matrix factorization problems) section for further details.", "decomposition.DictionaryLearning([\u2026])", "Dictionary learning", "decomposition.FactorAnalysis([n_components, \u2026])", "Factor Analysis (FA).", "decomposition.FastICA([n_components, \u2026])", "FastICA: a fast algorithm for Independent Component Analysis.", "decomposition.IncrementalPCA([n_components, \u2026])", "Incremental principal components analysis (IPCA).", "decomposition.KernelPCA([n_components, \u2026])", "Kernel Principal component analysis (KPCA).", "decomposition.LatentDirichletAllocation([\u2026])", "Latent Dirichlet Allocation with online variational Bayes algorithm", "decomposition.MiniBatchDictionaryLearning([\u2026])", "Mini-batch dictionary learning", "decomposition.MiniBatchSparsePCA([\u2026])", "Mini-batch Sparse Principal Components Analysis", "decomposition.NMF([n_components, init, \u2026])", "Non-Negative Matrix Factorization (NMF).", "decomposition.PCA([n_components, copy, \u2026])", "Principal component analysis (PCA).", "decomposition.SparsePCA([n_components, \u2026])", "Sparse Principal Components Analysis (SparsePCA).", "decomposition.SparseCoder(dictionary, *[, \u2026])", "Sparse coding", "decomposition.TruncatedSVD([n_components, \u2026])", "Dimensionality reduction using truncated SVD (aka LSA).", "decomposition.dict_learning(X, n_components, \u2026)", "Solves a dictionary learning matrix factorization problem.", "decomposition.dict_learning_online(X[, \u2026])", "Solves a dictionary learning matrix factorization problem online.", "decomposition.fastica(X[, n_components, \u2026])", "Perform Fast Independent Component Analysis.", "decomposition.non_negative_factorization(X)", "Compute Non-negative Matrix Factorization (NMF).", "decomposition.sparse_encode(X, dictionary, *)", "Sparse coding", "Linear Discriminant Analysis and Quadratic Discriminant Analysis", "User guide: See the Linear and Quadratic Discriminant Analysis section for further details.", "discriminant_analysis.LinearDiscriminantAnalysis([\u2026])", "Linear Discriminant Analysis", "discriminant_analysis.QuadraticDiscriminantAnalysis(*)", "Quadratic Discriminant Analysis", "User guide: See the Metrics and scoring: quantifying the quality of predictions section for further details.", "dummy.DummyClassifier(*[, strategy, \u2026])", "DummyClassifier is a classifier that makes predictions using simple rules.", "dummy.DummyRegressor(*[, strategy, \u2026])", "DummyRegressor is a regressor that makes predictions using simple rules.", "The sklearn.ensemble module includes ensemble-based methods for classification, regression and anomaly detection.", "User guide: See the Ensemble methods section for further details.", "ensemble.AdaBoostClassifier([\u2026])", "An AdaBoost classifier.", "ensemble.AdaBoostRegressor([base_estimator, \u2026])", "An AdaBoost regressor.", "ensemble.BaggingClassifier([base_estimator, \u2026])", "A Bagging classifier.", "ensemble.BaggingRegressor([base_estimator, \u2026])", "A Bagging regressor.", "ensemble.ExtraTreesClassifier([\u2026])", "An extra-trees classifier.", "ensemble.ExtraTreesRegressor([n_estimators, \u2026])", "An extra-trees regressor.", "ensemble.GradientBoostingClassifier(*[, \u2026])", "Gradient Boosting for classification.", "ensemble.GradientBoostingRegressor(*[, \u2026])", "Gradient Boosting for regression.", "ensemble.IsolationForest(*[, n_estimators, \u2026])", "Isolation Forest Algorithm.", "ensemble.RandomForestClassifier([\u2026])", "A random forest classifier.", "ensemble.RandomForestRegressor([\u2026])", "A random forest regressor.", "ensemble.RandomTreesEmbedding([\u2026])", "An ensemble of totally random trees.", "ensemble.StackingClassifier(estimators[, \u2026])", "Stack of estimators with a final classifier.", "ensemble.StackingRegressor(estimators[, \u2026])", "Stack of estimators with a final regressor.", "ensemble.VotingClassifier(estimators, *[, \u2026])", "Soft Voting/Majority Rule classifier for unfitted estimators.", "ensemble.VotingRegressor(estimators, *[, \u2026])", "Prediction voting regressor for unfitted estimators.", "ensemble.HistGradientBoostingRegressor([\u2026])", "Histogram-based Gradient Boosting Regression Tree.", "ensemble.HistGradientBoostingClassifier([\u2026])", "Histogram-based Gradient Boosting Classification Tree.", "The sklearn.exceptions module includes all custom warnings and error classes used across scikit-learn.", "exceptions.ConvergenceWarning", "Custom warning to capture convergence problems", "exceptions.DataConversionWarning", "Warning used to notify implicit data conversions happening in the code.", "exceptions.DataDimensionalityWarning", "Custom warning to notify potential issues with data dimensionality.", "exceptions.EfficiencyWarning", "Warning used to notify the user of inefficient computation.", "exceptions.FitFailedWarning", "Warning class used if there is an error while fitting the estimator.", "exceptions.NotFittedError", "Exception class to raise if estimator is used before fitting.", "exceptions.UndefinedMetricWarning", "Warning used when the metric is invalid", "The sklearn.experimental module provides importable modules that enable the use of experimental features or estimators.", "The features and estimators that are experimental aren\u2019t subject to deprecation cycles. Use them at your own risks!", "experimental.enable_hist_gradient_boosting", "Enables histogram-based gradient boosting estimators.", "experimental.enable_iterative_imputer", "Enables IterativeImputer", "experimental.enable_halving_search_cv", "Enables Successive Halving search-estimators", "The sklearn.feature_extraction module deals with feature extraction from raw data. It currently includes methods to extract features from text and images.", "User guide: See the Feature extraction section for further details.", "feature_extraction.DictVectorizer(*[, \u2026])", "Transforms lists of feature-value mappings to vectors.", "feature_extraction.FeatureHasher([\u2026])", "Implements feature hashing, aka the hashing trick.", "The sklearn.feature_extraction.image submodule gathers utilities to extract features from images.", "feature_extraction.image.extract_patches_2d(\u2026)", "Reshape a 2D image into a collection of patches", "feature_extraction.image.grid_to_graph(n_x, n_y)", "Graph of the pixel-to-pixel connections", "feature_extraction.image.img_to_graph(img, *)", "Graph of the pixel-to-pixel gradient connections", "feature_extraction.image.reconstruct_from_patches_2d(\u2026)", "Reconstruct the image from all of its patches.", "feature_extraction.image.PatchExtractor(*[, \u2026])", "Extracts patches from a collection of images", "The sklearn.feature_extraction.text submodule gathers utilities to build feature vectors from text documents.", "feature_extraction.text.CountVectorizer(*[, \u2026])", "Convert a collection of text documents to a matrix of token counts", "feature_extraction.text.HashingVectorizer(*)", "Convert a collection of text documents to a matrix of token occurrences", "feature_extraction.text.TfidfTransformer(*)", "Transform a count matrix to a normalized tf or tf-idf representation", "feature_extraction.text.TfidfVectorizer(*[, \u2026])", "Convert a collection of raw documents to a matrix of TF-IDF features.", "The sklearn.feature_selection module implements feature selection algorithms. It currently includes univariate filter selection methods and the recursive feature elimination algorithm.", "User guide: See the Feature selection section for further details.", "feature_selection.GenericUnivariateSelect([\u2026])", "Univariate feature selector with configurable strategy.", "feature_selection.SelectPercentile([\u2026])", "Select features according to a percentile of the highest scores.", "feature_selection.SelectKBest([score_func, k])", "Select features according to the k highest scores.", "feature_selection.SelectFpr([score_func, alpha])", "Filter: Select the pvalues below alpha based on a FPR test.", "feature_selection.SelectFdr([score_func, alpha])", "Filter: Select the p-values for an estimated false discovery rate", "feature_selection.SelectFromModel(estimator, *)", "Meta-transformer for selecting features based on importance weights.", "feature_selection.SelectFwe([score_func, alpha])", "Filter: Select the p-values corresponding to Family-wise error rate", "feature_selection.SequentialFeatureSelector(\u2026)", "Transformer that performs Sequential Feature Selection.", "feature_selection.RFE(estimator, *[, \u2026])", "Feature ranking with recursive feature elimination.", "feature_selection.RFECV(estimator, *[, \u2026])", "Feature ranking with recursive feature elimination and cross-validated selection of the best number of features.", "feature_selection.VarianceThreshold([threshold])", "Feature selector that removes all low-variance features.", "feature_selection.chi2(X, y)", "Compute chi-squared stats between each non-negative feature and class.", "feature_selection.f_classif(X, y)", "Compute the ANOVA F-value for the provided sample.", "feature_selection.f_regression(X, y, *[, center])", "Univariate linear regression tests.", "feature_selection.mutual_info_classif(X, y, *)", "Estimate mutual information for a discrete target variable.", "feature_selection.mutual_info_regression(X, y, *)", "Estimate mutual information for a continuous target variable.", "The sklearn.gaussian_process module implements Gaussian Process based regression and classification.", "User guide: See the Gaussian Processes section for further details.", "gaussian_process.GaussianProcessClassifier([\u2026])", "Gaussian process classification (GPC) based on Laplace approximation.", "gaussian_process.GaussianProcessRegressor([\u2026])", "Gaussian process regression (GPR).", "Kernels:", "gaussian_process.kernels.CompoundKernel(kernels)", "Kernel which is composed of a set of other kernels.", "gaussian_process.kernels.ConstantKernel([\u2026])", "Constant kernel.", "gaussian_process.kernels.DotProduct([\u2026])", "Dot-Product kernel.", "gaussian_process.kernels.ExpSineSquared([\u2026])", "Exp-Sine-Squared kernel (aka periodic kernel).", "gaussian_process.kernels.Exponentiation(\u2026)", "The Exponentiation kernel takes one base kernel and a scalar parameter \\(p\\) and combines them via", "gaussian_process.kernels.Hyperparameter(\u2026)", "A kernel hyperparameter\u2019s specification in form of a namedtuple.", "gaussian_process.kernels.Kernel()", "Base class for all kernels.", "gaussian_process.kernels.Matern([\u2026])", "Matern kernel.", "gaussian_process.kernels.PairwiseKernel([\u2026])", "Wrapper for kernels in sklearn.metrics.pairwise.", "gaussian_process.kernels.Product(k1, k2)", "The Product kernel takes two kernels \\(k_1\\) and \\(k_2\\) and combines them via", "gaussian_process.kernels.RBF([length_scale, \u2026])", "Radial-basis function kernel (aka squared-exponential kernel).", "gaussian_process.kernels.RationalQuadratic([\u2026])", "Rational Quadratic kernel.", "gaussian_process.kernels.Sum(k1, k2)", "The Sum kernel takes two kernels \\(k_1\\) and \\(k_2\\) and combines them via", "gaussian_process.kernels.WhiteKernel([\u2026])", "White kernel.", "Transformers for missing value imputation", "User guide: See the Imputation of missing values section for further details.", "impute.SimpleImputer(*[, missing_values, \u2026])", "Imputation transformer for completing missing values.", "impute.IterativeImputer([estimator, \u2026])", "Multivariate imputer that estimates each feature from all the others.", "impute.MissingIndicator(*[, missing_values, \u2026])", "Binary indicators for missing values.", "impute.KNNImputer(*[, missing_values, \u2026])", "Imputation for completing missing values using k-Nearest Neighbors.", "The sklearn.inspection module includes tools for model inspection.", "inspection.partial_dependence(estimator, X, \u2026)", "Partial dependence of features.", "inspection.permutation_importance(estimator, \u2026)", "Permutation importance for feature evaluation [Rd9e56ef97513-BRE].", "inspection.PartialDependenceDisplay(\u2026[, \u2026])", "Partial Dependence Plot (PDP).", "inspection.plot_partial_dependence(\u2026[, \u2026])", "Partial dependence (PD) and individual conditional expectation (ICE) plots.", "User guide: See the Isotonic regression section for further details.", "isotonic.IsotonicRegression(*[, y_min, \u2026])", "Isotonic regression model.", "isotonic.check_increasing(x, y)", "Determine whether y is monotonically correlated with x.", "isotonic.isotonic_regression(y, *[, \u2026])", "Solve the isotonic regression model.", "The sklearn.kernel_approximation module implements several approximate kernel feature maps based on Fourier transforms and Count Sketches.", "User guide: See the Kernel Approximation section for further details.", "kernel_approximation.AdditiveChi2Sampler(*)", "Approximate feature map for additive chi2 kernel.", "kernel_approximation.Nystroem([kernel, \u2026])", "Approximate a kernel map using a subset of the training data.", "kernel_approximation.PolynomialCountSketch(*)", "Polynomial kernel approximation via Tensor Sketch.", "kernel_approximation.RBFSampler(*[, gamma, \u2026])", "Approximates feature map of an RBF kernel by Monte Carlo approximation of its Fourier transform.", "kernel_approximation.SkewedChi2Sampler(*[, \u2026])", "Approximates feature map of the \u201cskewed chi-squared\u201d kernel by Monte Carlo approximation of its Fourier transform.", "Module sklearn.kernel_ridge implements kernel ridge regression.", "User guide: See the Kernel ridge regression section for further details.", "kernel_ridge.KernelRidge([alpha, kernel, \u2026])", "Kernel ridge regression.", "The sklearn.linear_model module implements a variety of linear models.", "User guide: See the Linear Models section for further details.", "The following subsections are only rough guidelines: the same estimator can fall into multiple categories, depending on its parameters.", "linear_model.LogisticRegression([penalty, \u2026])", "Logistic Regression (aka logit, MaxEnt) classifier.", "linear_model.LogisticRegressionCV(*[, Cs, \u2026])", "Logistic Regression CV (aka logit, MaxEnt) classifier.", "linear_model.PassiveAggressiveClassifier(*)", "Passive Aggressive Classifier", "linear_model.Perceptron(*[, penalty, alpha, \u2026])", "Read more in the User Guide.", "linear_model.RidgeClassifier([alpha, \u2026])", "Classifier using Ridge regression.", "linear_model.RidgeClassifierCV([alphas, \u2026])", "Ridge classifier with built-in cross-validation.", "linear_model.SGDClassifier([loss, penalty, \u2026])", "Linear classifiers (SVM, logistic regression, etc.) with SGD training.", "linear_model.LinearRegression(*[, \u2026])", "Ordinary least squares Linear Regression.", "linear_model.Ridge([alpha, fit_intercept, \u2026])", "Linear least squares with l2 regularization.", "linear_model.RidgeCV([alphas, \u2026])", "Ridge regression with built-in cross-validation.", "linear_model.SGDRegressor([loss, penalty, \u2026])", "Linear model fitted by minimizing a regularized empirical loss with SGD", "The following estimators have built-in variable selection fitting procedures, but any estimator using a L1 or elastic-net penalty also performs variable selection: typically SGDRegressor or SGDClassifier with an appropriate penalty.", "linear_model.ElasticNet([alpha, l1_ratio, \u2026])", "Linear regression with combined L1 and L2 priors as regularizer.", "linear_model.ElasticNetCV(*[, l1_ratio, \u2026])", "Elastic Net model with iterative fitting along a regularization path.", "linear_model.Lars(*[, fit_intercept, \u2026])", "Least Angle Regression model a.k.a.", "linear_model.LarsCV(*[, fit_intercept, \u2026])", "Cross-validated Least Angle Regression model.", "linear_model.Lasso([alpha, fit_intercept, \u2026])", "Linear Model trained with L1 prior as regularizer (aka the Lasso)", "linear_model.LassoCV(*[, eps, n_alphas, \u2026])", "Lasso linear model with iterative fitting along a regularization path.", "linear_model.LassoLars([alpha, \u2026])", "Lasso model fit with Least Angle Regression a.k.a.", "linear_model.LassoLarsCV(*[, fit_intercept, \u2026])", "Cross-validated Lasso, using the LARS algorithm.", "linear_model.LassoLarsIC([criterion, \u2026])", "Lasso model fit with Lars using BIC or AIC for model selection", "linear_model.OrthogonalMatchingPursuit(*[, \u2026])", "Orthogonal Matching Pursuit model (OMP).", "linear_model.OrthogonalMatchingPursuitCV(*)", "Cross-validated Orthogonal Matching Pursuit model (OMP).", "linear_model.ARDRegression(*[, n_iter, tol, \u2026])", "Bayesian ARD regression.", "linear_model.BayesianRidge(*[, n_iter, tol, \u2026])", "Bayesian ridge regression.", "These estimators fit multiple regression problems (or tasks) jointly, while inducing sparse coefficients. While the inferred coefficients may differ between the tasks, they are constrained to agree on the features that are selected (non-zero coefficients).", "linear_model.MultiTaskElasticNet([alpha, \u2026])", "Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer.", "linear_model.MultiTaskElasticNetCV(*[, \u2026])", "Multi-task L1/L2 ElasticNet with built-in cross-validation.", "linear_model.MultiTaskLasso([alpha, \u2026])", "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.", "linear_model.MultiTaskLassoCV(*[, eps, \u2026])", "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.", "Any estimator using the Huber loss would also be robust to outliers, e.g. SGDRegressor with loss='huber'.", "linear_model.HuberRegressor(*[, epsilon, \u2026])", "Linear regression model that is robust to outliers.", "linear_model.RANSACRegressor([\u2026])", "RANSAC (RANdom SAmple Consensus) algorithm.", "linear_model.TheilSenRegressor(*[, \u2026])", "Theil-Sen Estimator: robust multivariate regression model.", "These models allow for response variables to have error distributions other than a normal distribution:", "linear_model.PoissonRegressor(*[, alpha, \u2026])", "Generalized Linear Model with a Poisson distribution.", "linear_model.TweedieRegressor(*[, power, \u2026])", "Generalized Linear Model with a Tweedie distribution.", "linear_model.GammaRegressor(*[, alpha, \u2026])", "Generalized Linear Model with a Gamma distribution.", "linear_model.PassiveAggressiveRegressor(*[, \u2026])", "Passive Aggressive Regressor", "linear_model.enet_path(X, y, *[, l1_ratio, \u2026])", "Compute elastic net path with coordinate descent.", "linear_model.lars_path(X, y[, Xy, Gram, \u2026])", "Compute Least Angle Regression or Lasso path using LARS algorithm [1]", "linear_model.lars_path_gram(Xy, Gram, *, \u2026)", "lars_path in the sufficient stats mode [1]", "linear_model.lasso_path(X, y, *[, eps, \u2026])", "Compute Lasso path with coordinate descent", "linear_model.orthogonal_mp(X, y, *[, \u2026])", "Orthogonal Matching Pursuit (OMP).", "linear_model.orthogonal_mp_gram(Gram, Xy, *)", "Gram Orthogonal Matching Pursuit (OMP).", "linear_model.ridge_regression(X, y, alpha, *)", "Solve the ridge equation by the method of normal equations.", "The sklearn.manifold module implements data embedding techniques.", "User guide: See the Manifold learning section for further details.", "manifold.Isomap(*[, n_neighbors, \u2026])", "Isomap Embedding", "manifold.LocallyLinearEmbedding(*[, \u2026])", "Locally Linear Embedding", "manifold.MDS([n_components, metric, n_init, \u2026])", "Multidimensional scaling.", "manifold.SpectralEmbedding([n_components, \u2026])", "Spectral embedding for non-linear dimensionality reduction.", "manifold.TSNE([n_components, perplexity, \u2026])", "t-distributed Stochastic Neighbor Embedding.", "manifold.locally_linear_embedding(X, *, \u2026)", "Perform a Locally Linear Embedding analysis on the data.", "manifold.smacof(dissimilarities, *[, \u2026])", "Computes multidimensional scaling using the SMACOF algorithm.", "manifold.spectral_embedding(adjacency, *[, \u2026])", "Project the sample on the first eigenvectors of the graph Laplacian.", "manifold.trustworthiness(X, X_embedded, *[, \u2026])", "Expresses to what extent the local structure is retained.", "See the Metrics and scoring: quantifying the quality of predictions section and the Pairwise metrics, Affinities and Kernels section of the user guide for further details.", "The sklearn.metrics module includes score functions, performance metrics and pairwise metrics and distance computations.", "See the The scoring parameter: defining model evaluation rules section of the user guide for further details.", "metrics.check_scoring(estimator[, scoring, \u2026])", "Determine scorer from user options.", "metrics.get_scorer(scoring)", "Get a scorer from string.", "metrics.make_scorer(score_func, *[, \u2026])", "Make a scorer from a performance metric or loss function.", "See the Classification metrics section of the user guide for further details.", "metrics.accuracy_score(y_true, y_pred, *[, \u2026])", "Accuracy classification score.", "metrics.auc(x, y)", "Compute Area Under the Curve (AUC) using the trapezoidal rule.", "metrics.average_precision_score(y_true, \u2026)", "Compute average precision (AP) from prediction scores.", "metrics.balanced_accuracy_score(y_true, \u2026)", "Compute the balanced accuracy.", "metrics.brier_score_loss(y_true, y_prob, *)", "Compute the Brier score loss.", "metrics.classification_report(y_true, y_pred, *)", "Build a text report showing the main classification metrics.", "metrics.cohen_kappa_score(y1, y2, *[, \u2026])", "Cohen\u2019s kappa: a statistic that measures inter-annotator agreement.", "metrics.confusion_matrix(y_true, y_pred, *)", "Compute confusion matrix to evaluate the accuracy of a classification.", "metrics.dcg_score(y_true, y_score, *[, k, \u2026])", "Compute Discounted Cumulative Gain.", "metrics.det_curve(y_true, y_score[, \u2026])", "Compute error rates for different probability thresholds.", "metrics.f1_score(y_true, y_pred, *[, \u2026])", "Compute the F1 score, also known as balanced F-score or F-measure.", "metrics.fbeta_score(y_true, y_pred, *, beta)", "Compute the F-beta score.", "metrics.hamming_loss(y_true, y_pred, *[, \u2026])", "Compute the average Hamming loss.", "metrics.hinge_loss(y_true, pred_decision, *)", "Average hinge loss (non-regularized).", "metrics.jaccard_score(y_true, y_pred, *[, \u2026])", "Jaccard similarity coefficient score.", "metrics.log_loss(y_true, y_pred, *[, eps, \u2026])", "Log loss, aka logistic loss or cross-entropy loss.", "metrics.matthews_corrcoef(y_true, y_pred, *)", "Compute the Matthews correlation coefficient (MCC).", "metrics.multilabel_confusion_matrix(y_true, \u2026)", "Compute a confusion matrix for each class or sample.", "metrics.ndcg_score(y_true, y_score, *[, k, \u2026])", "Compute Normalized Discounted Cumulative Gain.", "metrics.precision_recall_curve(y_true, \u2026)", "Compute precision-recall pairs for different probability thresholds.", "metrics.precision_recall_fscore_support(\u2026)", "Compute precision, recall, F-measure and support for each class.", "metrics.precision_score(y_true, y_pred, *[, \u2026])", "Compute the precision.", "metrics.recall_score(y_true, y_pred, *[, \u2026])", "Compute the recall.", "metrics.roc_auc_score(y_true, y_score, *[, \u2026])", "Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from prediction scores.", "metrics.roc_curve(y_true, y_score, *[, \u2026])", "Compute Receiver operating characteristic (ROC).", "metrics.top_k_accuracy_score(y_true, y_score, *)", "Top-k Accuracy classification score.", "metrics.zero_one_loss(y_true, y_pred, *[, \u2026])", "Zero-one classification loss.", "See the Regression metrics section of the user guide for further details.", "metrics.explained_variance_score(y_true, \u2026)", "Explained variance regression score function.", "metrics.max_error(y_true, y_pred)", "max_error metric calculates the maximum residual error.", "metrics.mean_absolute_error(y_true, y_pred, *)", "Mean absolute error regression loss.", "metrics.mean_squared_error(y_true, y_pred, *)", "Mean squared error regression loss.", "metrics.mean_squared_log_error(y_true, y_pred, *)", "Mean squared logarithmic error regression loss.", "metrics.median_absolute_error(y_true, y_pred, *)", "Median absolute error regression loss.", "metrics.mean_absolute_percentage_error(\u2026)", "Mean absolute percentage error regression loss.", "metrics.r2_score(y_true, y_pred, *[, \u2026])", "R^2 (coefficient of determination) regression score function.", "metrics.mean_poisson_deviance(y_true, y_pred, *)", "Mean Poisson deviance regression loss.", "metrics.mean_gamma_deviance(y_true, y_pred, *)", "Mean Gamma deviance regression loss.", "metrics.mean_tweedie_deviance(y_true, y_pred, *)", "Mean Tweedie deviance regression loss.", "See the Multilabel ranking metrics section of the user guide for further details.", "metrics.coverage_error(y_true, y_score, *[, \u2026])", "Coverage error measure.", "metrics.label_ranking_average_precision_score(\u2026)", "Compute ranking-based average precision.", "metrics.label_ranking_loss(y_true, y_score, *)", "Compute Ranking loss measure.", "See the Clustering performance evaluation section of the user guide for further details.", "The sklearn.metrics.cluster submodule contains evaluation metrics for cluster analysis results. There are two forms of evaluation:", "metrics.adjusted_mutual_info_score(\u2026[, \u2026])", "Adjusted Mutual Information between two clusterings.", "metrics.adjusted_rand_score(labels_true, \u2026)", "Rand index adjusted for chance.", "metrics.calinski_harabasz_score(X, labels)", "Compute the Calinski and Harabasz score.", "metrics.davies_bouldin_score(X, labels)", "Computes the Davies-Bouldin score.", "metrics.completeness_score(labels_true, \u2026)", "Completeness metric of a cluster labeling given a ground truth.", "metrics.cluster.contingency_matrix(\u2026[, \u2026])", "Build a contingency matrix describing the relationship between labels.", "metrics.cluster.pair_confusion_matrix(\u2026)", "Pair confusion matrix arising from two clusterings.", "metrics.fowlkes_mallows_score(labels_true, \u2026)", "Measure the similarity of two clusterings of a set of points.", "metrics.homogeneity_completeness_v_measure(\u2026)", "Compute the homogeneity and completeness and V-Measure scores at once.", "metrics.homogeneity_score(labels_true, \u2026)", "Homogeneity metric of a cluster labeling given a ground truth.", "metrics.mutual_info_score(labels_true, \u2026)", "Mutual Information between two clusterings.", "metrics.normalized_mutual_info_score(\u2026[, \u2026])", "Normalized Mutual Information between two clusterings.", "metrics.rand_score(labels_true, labels_pred)", "Rand index.", "metrics.silhouette_score(X, labels, *[, \u2026])", "Compute the mean Silhouette Coefficient of all samples.", "metrics.silhouette_samples(X, labels, *[, \u2026])", "Compute the Silhouette Coefficient for each sample.", "metrics.v_measure_score(labels_true, \u2026[, beta])", "V-measure cluster labeling given a ground truth.", "See the Biclustering evaluation section of the user guide for further details.", "metrics.consensus_score(a, b, *[, similarity])", "The similarity of two sets of biclusters.", "See the Pairwise metrics, Affinities and Kernels section of the user guide for further details.", "metrics.pairwise.additive_chi2_kernel(X[, Y])", "Computes the additive chi-squared kernel between observations in X and Y.", "metrics.pairwise.chi2_kernel(X[, Y, gamma])", "Computes the exponential chi-squared kernel X and Y.", "metrics.pairwise.cosine_similarity(X[, Y, \u2026])", "Compute cosine similarity between samples in X and Y.", "metrics.pairwise.cosine_distances(X[, Y])", "Compute cosine distance between samples in X and Y.", "metrics.pairwise.distance_metrics()", "Valid metrics for pairwise_distances.", "metrics.pairwise.euclidean_distances(X[, Y, \u2026])", "Considering the rows of X (and Y=X) as vectors, compute the distance matrix between each pair of vectors.", "metrics.pairwise.haversine_distances(X[, Y])", "Compute the Haversine distance between samples in X and Y.", "metrics.pairwise.kernel_metrics()", "Valid metrics for pairwise_kernels.", "metrics.pairwise.laplacian_kernel(X[, Y, gamma])", "Compute the laplacian kernel between X and Y.", "metrics.pairwise.linear_kernel(X[, Y, \u2026])", "Compute the linear kernel between X and Y.", "metrics.pairwise.manhattan_distances(X[, Y, \u2026])", "Compute the L1 distances between the vectors in X and Y.", "metrics.pairwise.nan_euclidean_distances(X)", "Calculate the euclidean distances in the presence of missing values.", "metrics.pairwise.pairwise_kernels(X[, Y, \u2026])", "Compute the kernel between arrays X and optional array Y.", "metrics.pairwise.polynomial_kernel(X[, Y, \u2026])", "Compute the polynomial kernel between X and Y.", "metrics.pairwise.rbf_kernel(X[, Y, gamma])", "Compute the rbf (gaussian) kernel between X and Y.", "metrics.pairwise.sigmoid_kernel(X[, Y, \u2026])", "Compute the sigmoid kernel between X and Y.", "metrics.pairwise.paired_euclidean_distances(X, Y)", "Computes the paired euclidean distances between X and Y.", "metrics.pairwise.paired_manhattan_distances(X, Y)", "Compute the L1 distances between the vectors in X and Y.", "metrics.pairwise.paired_cosine_distances(X, Y)", "Computes the paired cosine distances between X and Y.", "metrics.pairwise.paired_distances(X, Y, *[, \u2026])", "Computes the paired distances between X and Y.", "metrics.pairwise_distances(X[, Y, metric, \u2026])", "Compute the distance matrix from a vector array X and optional Y.", "metrics.pairwise_distances_argmin(X, Y, *[, \u2026])", "Compute minimum distances between one point and a set of points.", "metrics.pairwise_distances_argmin_min(X, Y, *)", "Compute minimum distances between one point and a set of points.", "metrics.pairwise_distances_chunked(X[, Y, \u2026])", "Generate a distance matrix chunk by chunk with optional reduction.", "See the Visualizations section of the user guide for further details.", "metrics.plot_confusion_matrix(estimator, X, \u2026)", "Plot Confusion Matrix.", "metrics.plot_det_curve(estimator, X, y, *[, \u2026])", "Plot detection error tradeoff (DET) curve.", "metrics.plot_precision_recall_curve(\u2026[, \u2026])", "Plot Precision Recall Curve for binary classifiers.", "metrics.plot_roc_curve(estimator, X, y, *[, \u2026])", "Plot Receiver operating characteristic (ROC) curve.", "metrics.ConfusionMatrixDisplay(\u2026[, \u2026])", "Confusion Matrix visualization.", "metrics.DetCurveDisplay(*, fpr, fnr[, \u2026])", "DET curve visualization.", "metrics.PrecisionRecallDisplay(precision, \u2026)", "Precision Recall visualization.", "metrics.RocCurveDisplay(*, fpr, tpr[, \u2026])", "ROC Curve visualization.", "The sklearn.mixture module implements mixture modeling algorithms.", "User guide: See the Gaussian mixture models section for further details.", "mixture.BayesianGaussianMixture(*[, \u2026])", "Variational Bayesian estimation of a Gaussian mixture.", "mixture.GaussianMixture([n_components, \u2026])", "Gaussian Mixture.", "User guide: See the Cross-validation: evaluating estimator performance, Tuning the hyper-parameters of an estimator and Learning curve sections for further details.", "model_selection.GroupKFold([n_splits])", "K-fold iterator variant with non-overlapping groups.", "model_selection.GroupShuffleSplit([\u2026])", "Shuffle-Group(s)-Out cross-validation iterator", "model_selection.KFold([n_splits, shuffle, \u2026])", "K-Folds cross-validator", "model_selection.LeaveOneGroupOut()", "Leave One Group Out cross-validator", "model_selection.LeavePGroupsOut(n_groups)", "Leave P Group(s) Out cross-validator", "model_selection.LeaveOneOut()", "Leave-One-Out cross-validator", "model_selection.LeavePOut(p)", "Leave-P-Out cross-validator", "model_selection.PredefinedSplit(test_fold)", "Predefined split cross-validator", "model_selection.RepeatedKFold(*[, n_splits, \u2026])", "Repeated K-Fold cross validator.", "model_selection.RepeatedStratifiedKFold(*[, \u2026])", "Repeated Stratified K-Fold cross validator.", "model_selection.ShuffleSplit([n_splits, \u2026])", "Random permutation cross-validator", "model_selection.StratifiedKFold([n_splits, \u2026])", "Stratified K-Folds cross-validator.", "model_selection.StratifiedShuffleSplit([\u2026])", "Stratified ShuffleSplit cross-validator", "model_selection.TimeSeriesSplit([n_splits, \u2026])", "Time Series cross-validator", "model_selection.check_cv([cv, y, classifier])", "Input checker utility for building a cross-validator", "model_selection.train_test_split(*arrays[, \u2026])", "Split arrays or matrices into random train and test subsets", "model_selection.GridSearchCV(estimator, \u2026)", "Exhaustive search over specified parameter values for an estimator.", "model_selection.HalvingGridSearchCV(\u2026[, \u2026])", "Search over specified parameter values with successive halving.", "model_selection.ParameterGrid(param_grid)", "Grid of parameters with a discrete number of values for each.", "model_selection.ParameterSampler(\u2026[, \u2026])", "Generator on parameters sampled from given distributions.", "model_selection.RandomizedSearchCV(\u2026[, \u2026])", "Randomized search on hyper parameters.", "model_selection.HalvingRandomSearchCV(\u2026[, \u2026])", "Randomized search on hyper parameters.", "model_selection.cross_validate(estimator, X)", "Evaluate metric(s) by cross-validation and also record fit/score times.", "model_selection.cross_val_predict(estimator, X)", "Generate cross-validated estimates for each input data point", "model_selection.cross_val_score(estimator, X)", "Evaluate a score by cross-validation", "model_selection.learning_curve(estimator, X, \u2026)", "Learning curve.", "model_selection.permutation_test_score(\u2026)", "Evaluate the significance of a cross-validated score with permutations", "model_selection.validation_curve(estimator, \u2026)", "Validation curve.", "The estimators provided in this module are meta-estimators: they require a base estimator to be provided in their constructor. For example, it is possible to use these estimators to turn a binary classifier or a regressor into a multiclass classifier. It is also possible to use these estimators with multiclass estimators in the hope that their accuracy or runtime performance improves.", "All classifiers in scikit-learn implement multiclass classification; you only need to use this module if you want to experiment with custom multiclass strategies.", "The one-vs-the-rest meta-classifier also implements a predict_proba method, so long as such a method is implemented by the base classifier. This method returns probabilities of class membership in both the single label and multilabel case. Note that in the multilabel case, probabilities are the marginal probability that a given sample falls in the given class. As such, in the multilabel case the sum of these probabilities over all possible labels for a given sample will not sum to unity, as they do in the single label case.", "User guide: See the Multiclass classification section for further details.", "multiclass.OneVsRestClassifier(estimator, *)", "One-vs-the-rest (OvR) multiclass strategy.", "multiclass.OneVsOneClassifier(estimator, *)", "One-vs-one multiclass strategy", "multiclass.OutputCodeClassifier(estimator, *)", "(Error-Correcting) Output-Code multiclass strategy", "This module implements multioutput regression and classification.", "The estimators provided in this module are meta-estimators: they require a base estimator to be provided in their constructor. The meta-estimator extends single output estimators to multioutput estimators.", "User guide: See the Multilabel classification, Multiclass-multioutput classification, and Multioutput regression sections for further details.", "multioutput.ClassifierChain(base_estimator, *)", "A multi-label model that arranges binary classifiers into a chain.", "multioutput.MultiOutputRegressor(estimator, *)", "Multi target regression", "multioutput.MultiOutputClassifier(estimator, *)", "Multi target classification", "multioutput.RegressorChain(base_estimator, *)", "A multi-label model that arranges regressions into a chain.", "The sklearn.naive_bayes module implements Naive Bayes algorithms. These are supervised learning methods based on applying Bayes\u2019 theorem with strong (naive) feature independence assumptions.", "User guide: See the Naive Bayes section for further details.", "naive_bayes.BernoulliNB(*[, alpha, \u2026])", "Naive Bayes classifier for multivariate Bernoulli models.", "naive_bayes.CategoricalNB(*[, alpha, \u2026])", "Naive Bayes classifier for categorical features", "naive_bayes.ComplementNB(*[, alpha, \u2026])", "The Complement Naive Bayes classifier described in Rennie et al.", "naive_bayes.GaussianNB(*[, priors, \u2026])", "Gaussian Naive Bayes (GaussianNB)", "naive_bayes.MultinomialNB(*[, alpha, \u2026])", "Naive Bayes classifier for multinomial models", "The sklearn.neighbors module implements the k-nearest neighbors algorithm.", "User guide: See the Nearest Neighbors section for further details.", "neighbors.BallTree(X[, leaf_size, metric])", "BallTree for fast generalized N-point problems", "neighbors.DistanceMetric", "DistanceMetric class", "neighbors.KDTree(X[, leaf_size, metric])", "KDTree for fast generalized N-point problems", "neighbors.KernelDensity(*[, bandwidth, \u2026])", "Kernel Density Estimation.", "neighbors.KNeighborsClassifier([\u2026])", "Classifier implementing the k-nearest neighbors vote.", "neighbors.KNeighborsRegressor([n_neighbors, \u2026])", "Regression based on k-nearest neighbors.", "neighbors.KNeighborsTransformer(*[, mode, \u2026])", "Transform X into a (weighted) graph of k nearest neighbors", "neighbors.LocalOutlierFactor([n_neighbors, \u2026])", "Unsupervised Outlier Detection using Local Outlier Factor (LOF)", "neighbors.RadiusNeighborsClassifier([\u2026])", "Classifier implementing a vote among neighbors within a given radius", "neighbors.RadiusNeighborsRegressor([radius, \u2026])", "Regression based on neighbors within a fixed radius.", "neighbors.RadiusNeighborsTransformer(*[, \u2026])", "Transform X into a (weighted) graph of neighbors nearer than a radius", "neighbors.NearestCentroid([metric, \u2026])", "Nearest centroid classifier.", "neighbors.NearestNeighbors(*[, n_neighbors, \u2026])", "Unsupervised learner for implementing neighbor searches.", "neighbors.NeighborhoodComponentsAnalysis([\u2026])", "Neighborhood Components Analysis", "neighbors.kneighbors_graph(X, n_neighbors, *)", "Computes the (weighted) graph of k-Neighbors for points in X", "neighbors.radius_neighbors_graph(X, radius, *)", "Computes the (weighted) graph of Neighbors for points in X", "The sklearn.neural_network module includes models based on neural networks.", "User guide: See the Neural network models (supervised) and Neural network models (unsupervised) sections for further details.", "neural_network.BernoulliRBM([n_components, \u2026])", "Bernoulli Restricted Boltzmann Machine (RBM).", "neural_network.MLPClassifier([\u2026])", "Multi-layer Perceptron classifier.", "neural_network.MLPRegressor([\u2026])", "Multi-layer Perceptron regressor.", "The sklearn.pipeline module implements utilities to build a composite estimator, as a chain of transforms and estimators.", "User guide: See the Pipelines and composite estimators section for further details.", "pipeline.FeatureUnion(transformer_list, *[, \u2026])", "Concatenates results of multiple transformer objects.", "pipeline.Pipeline(steps, *[, memory, verbose])", "Pipeline of transforms with a final estimator.", "pipeline.make_pipeline(*steps[, memory, verbose])", "Construct a Pipeline from the given estimators.", "pipeline.make_union(*transformers[, n_jobs, \u2026])", "Construct a FeatureUnion from the given transformers.", "The sklearn.preprocessing module includes scaling, centering, normalization, binarization methods.", "User guide: See the Preprocessing data section for further details.", "preprocessing.Binarizer(*[, threshold, copy])", "Binarize data (set feature values to 0 or 1) according to a threshold.", "preprocessing.FunctionTransformer([func, \u2026])", "Constructs a transformer from an arbitrary callable.", "preprocessing.KBinsDiscretizer([n_bins, \u2026])", "Bin continuous data into intervals.", "preprocessing.KernelCenterer()", "Center a kernel matrix.", "preprocessing.LabelBinarizer(*[, neg_label, \u2026])", "Binarize labels in a one-vs-all fashion.", "preprocessing.LabelEncoder()", "Encode target labels with value between 0 and n_classes-1.", "preprocessing.MultiLabelBinarizer(*[, \u2026])", "Transform between iterable of iterables and a multilabel format.", "preprocessing.MaxAbsScaler(*[, copy])", "Scale each feature by its maximum absolute value.", "preprocessing.MinMaxScaler([feature_range, \u2026])", "Transform features by scaling each feature to a given range.", "preprocessing.Normalizer([norm, copy])", "Normalize samples individually to unit norm.", "preprocessing.OneHotEncoder(*[, categories, \u2026])", "Encode categorical features as a one-hot numeric array.", "preprocessing.OrdinalEncoder(*[, \u2026])", "Encode categorical features as an integer array.", "preprocessing.PolynomialFeatures([degree, \u2026])", "Generate polynomial and interaction features.", "preprocessing.PowerTransformer([method, \u2026])", "Apply a power transform featurewise to make data more Gaussian-like.", "preprocessing.QuantileTransformer(*[, \u2026])", "Transform features using quantiles information.", "preprocessing.RobustScaler(*[, \u2026])", "Scale features using statistics that are robust to outliers.", "preprocessing.StandardScaler(*[, copy, \u2026])", "Standardize features by removing the mean and scaling to unit variance", "preprocessing.add_dummy_feature(X[, value])", "Augment dataset with an additional dummy feature.", "preprocessing.binarize(X, *[, threshold, copy])", "Boolean thresholding of array-like or scipy.sparse matrix.", "preprocessing.label_binarize(y, *, classes)", "Binarize labels in a one-vs-all fashion.", "preprocessing.maxabs_scale(X, *[, axis, copy])", "Scale each feature to the [-1, 1] range without breaking the sparsity.", "preprocessing.minmax_scale(X[, \u2026])", "Transform features by scaling each feature to a given range.", "preprocessing.normalize(X[, norm, axis, \u2026])", "Scale input vectors individually to unit norm (vector length).", "preprocessing.quantile_transform(X, *[, \u2026])", "Transform features using quantiles information.", "preprocessing.robust_scale(X, *[, axis, \u2026])", "Standardize a dataset along any axis", "preprocessing.scale(X, *[, axis, with_mean, \u2026])", "Standardize a dataset along any axis.", "preprocessing.power_transform(X[, method, \u2026])", "Power transforms are a family of parametric, monotonic transformations that are applied to make data more Gaussian-like.", "Random Projection transformers.", "Random Projections are a simple and computationally efficient way to reduce the dimensionality of the data by trading a controlled amount of accuracy (as additional variance) for faster processing times and smaller model sizes.", "The dimensions and distribution of Random Projections matrices are controlled so as to preserve the pairwise distances between any two samples of the dataset.", "The main theoretical result behind the efficiency of random projection is the Johnson-Lindenstrauss lemma (quoting Wikipedia):", "In mathematics, the Johnson-Lindenstrauss lemma is a result concerning low-distortion embeddings of points from high-dimensional into low-dimensional Euclidean space. The lemma states that a small set of points in a high-dimensional space can be embedded into a space of much lower dimension in such a way that distances between the points are nearly preserved. The map used for the embedding is at least Lipschitz, and can even be taken to be an orthogonal projection.", "User guide: See the Random Projection section for further details.", "random_projection.GaussianRandomProjection([\u2026])", "Reduce dimensionality through Gaussian random projection.", "random_projection.SparseRandomProjection([\u2026])", "Reduce dimensionality through sparse random projection.", "random_projection.johnson_lindenstrauss_min_dim(\u2026)", "Find a \u2018safe\u2019 number of components to randomly project to.", "The sklearn.semi_supervised module implements semi-supervised learning algorithms. These algorithms utilize small amounts of labeled data and large amounts of unlabeled data for classification tasks. This module includes Label Propagation.", "User guide: See the Semi-supervised learning section for further details.", "semi_supervised.LabelPropagation([kernel, \u2026])", "Label Propagation classifier", "semi_supervised.LabelSpreading([kernel, \u2026])", "LabelSpreading model for semi-supervised learning", "semi_supervised.SelfTrainingClassifier(\u2026)", "Self-training classifier.", "The sklearn.svm module includes Support Vector Machine algorithms.", "User guide: See the Support Vector Machines section for further details.", "svm.LinearSVC([penalty, loss, dual, tol, C, \u2026])", "Linear Support Vector Classification.", "svm.LinearSVR(*[, epsilon, tol, C, loss, \u2026])", "Linear Support Vector Regression.", "svm.NuSVC(*[, nu, kernel, degree, gamma, \u2026])", "Nu-Support Vector Classification.", "svm.NuSVR(*[, nu, C, kernel, degree, gamma, \u2026])", "Nu Support Vector Regression.", "svm.OneClassSVM(*[, kernel, degree, gamma, \u2026])", "Unsupervised Outlier Detection.", "svm.SVC(*[, C, kernel, degree, gamma, \u2026])", "C-Support Vector Classification.", "svm.SVR(*[, kernel, degree, gamma, coef0, \u2026])", "Epsilon-Support Vector Regression.", "svm.l1_min_c(X, y, *[, loss, fit_intercept, \u2026])", "Return the lowest bound for C such that for C in (l1_min_C, infinity) the model is guaranteed not to be empty.", "The sklearn.tree module includes decision tree-based models for classification and regression.", "User guide: See the Decision Trees section for further details.", "tree.DecisionTreeClassifier(*[, criterion, \u2026])", "A decision tree classifier.", "tree.DecisionTreeRegressor(*[, criterion, \u2026])", "A decision tree regressor.", "tree.ExtraTreeClassifier(*[, criterion, \u2026])", "An extremely randomized tree classifier.", "tree.ExtraTreeRegressor(*[, criterion, \u2026])", "An extremely randomized tree regressor.", "tree.export_graphviz(decision_tree[, \u2026])", "Export a decision tree in DOT format.", "tree.export_text(decision_tree, *[, \u2026])", "Build a text report showing the rules of a decision tree.", "tree.plot_tree(decision_tree, *[, \u2026])", "Plot a decision tree.", "The sklearn.utils module includes various utilities.", "Developer guide: See the Utilities for Developers page for further details.", "utils.arrayfuncs.min_pos", "Find the minimum value of an array over positive values", "utils.as_float_array(X, *[, copy, \u2026])", "Converts an array-like to an array of floats.", "utils.assert_all_finite(X, *[, allow_nan])", "Throw a ValueError if X contains NaN or infinity.", "utils.Bunch(**kwargs)", "Container object exposing keys as attributes.", "utils.check_X_y(X, y[, accept_sparse, \u2026])", "Input validation for standard estimators.", "utils.check_array(array[, accept_sparse, \u2026])", "Input validation on an array, list, sparse matrix or similar.", "utils.check_scalar(x, name, target_type, *)", "Validate scalar parameters type and value.", "utils.check_consistent_length(*arrays)", "Check that all arrays have consistent first dimensions.", "utils.check_random_state(seed)", "Turn seed into a np.random.RandomState instance", "utils.class_weight.compute_class_weight(\u2026)", "Estimate class weights for unbalanced datasets.", "utils.class_weight.compute_sample_weight(\u2026)", "Estimate sample weights by class for unbalanced datasets.", "utils.deprecated([extra])", "Decorator to mark a function or class as deprecated.", "utils.estimator_checks.check_estimator(Estimator)", "Check if estimator adheres to scikit-learn conventions.", "utils.estimator_checks.parametrize_with_checks(\u2026)", "Pytest specific decorator for parametrizing estimator checks.", "utils.estimator_html_repr(estimator)", "Build a HTML representation of an estimator.", "utils.extmath.safe_sparse_dot(a, b, *[, \u2026])", "Dot product that handle the sparse matrix case correctly.", "utils.extmath.randomized_range_finder(A, *, \u2026)", "Computes an orthonormal matrix whose range approximates the range of A.", "utils.extmath.randomized_svd(M, n_components, *)", "Computes a truncated randomized SVD.", "utils.extmath.fast_logdet(A)", "Compute log(det(A)) for A symmetric.", "utils.extmath.density(w, **kwargs)", "Compute density of a sparse vector.", "utils.extmath.weighted_mode(a, w, *[, axis])", "Returns an array of the weighted modal (most common) value in a.", "utils.gen_even_slices(n, n_packs, *[, n_samples])", "Generator to create n_packs slices going up to n.", "utils.graph.single_source_shortest_path_length(\u2026)", "Return the shortest path length from source to all reachable nodes.", "utils.graph_shortest_path.graph_shortest_path", "Perform a shortest-path graph search on a positive directed or undirected graph.", "utils.indexable(*iterables)", "Make arrays indexable for cross-validation.", "utils.metaestimators.if_delegate_has_method(\u2026)", "Create a decorator for methods that are delegated to a sub-estimator", "utils.multiclass.type_of_target(y)", "Determine the type of data indicated by the target.", "utils.multiclass.is_multilabel(y)", "Check if y is in a multilabel format.", "utils.multiclass.unique_labels(*ys)", "Extract an ordered array of unique labels.", "utils.murmurhash3_32", "Compute the 32bit murmurhash3 of key at seed.", "utils.resample(*arrays[, replace, \u2026])", "Resample arrays or sparse matrices in a consistent way.", "utils._safe_indexing(X, indices, *[, axis])", "Return rows, items or columns of X using indices.", "utils.safe_mask(X, mask)", "Return a mask which is safe to use on X.", "utils.safe_sqr(X, *[, copy])", "Element wise squaring of array-likes and sparse matrices.", "utils.shuffle(*arrays[, random_state, n_samples])", "Shuffle arrays or sparse matrices in a consistent way.", "utils.sparsefuncs.incr_mean_variance_axis(X, \u2026)", "Compute incremental mean and variance along an axis on a CSR or CSC matrix.", "utils.sparsefuncs.inplace_column_scale(X, scale)", "Inplace column scaling of a CSC/CSR matrix.", "utils.sparsefuncs.inplace_row_scale(X, scale)", "Inplace row scaling of a CSR or CSC matrix.", "utils.sparsefuncs.inplace_swap_row(X, m, n)", "Swaps two rows of a CSC/CSR matrix in-place.", "utils.sparsefuncs.inplace_swap_column(X, m, n)", "Swaps two columns of a CSC/CSR matrix in-place.", "utils.sparsefuncs.mean_variance_axis(X, axis)", "Compute mean and variance along an axis on a CSR or CSC matrix.", "utils.sparsefuncs.inplace_csr_column_scale(X, \u2026)", "Inplace column scaling of a CSR matrix.", "utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "Inplace row normalize using the l1 norm", "utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "Inplace row normalize using the l2 norm", "utils.random.sample_without_replacement", "Sample integers without replacement.", "utils.validation.check_is_fitted(estimator)", "Perform is_fitted validation for estimator.", "utils.validation.check_memory(memory)", "Check that memory is joblib.Memory-like.", "utils.validation.check_symmetric(array, *[, \u2026])", "Make sure that array is 2D, square and symmetric.", "utils.validation.column_or_1d(y, *[, warn])", "Ravel column or 1d numpy array, else raises an error.", "utils.validation.has_fit_parameter(\u2026)", "Checks whether the estimator\u2019s fit method supports the given parameter.", "utils.all_estimators([type_filter])", "Get a list of all estimators from sklearn.", "Utilities from joblib:", "utils.parallel_backend(backend[, n_jobs, \u2026])", "Change the default backend used by Parallel inside a with block.", "utils.register_parallel_backend(name, factory)", "Register a new Parallel backend factory."]}, {"name": "base.BaseEstimator", "path": "modules/generated/sklearn.base.baseestimator", "type": "base", "text": ["Base class for all estimators in scikit-learn.", "All estimators should specify all the parameters that can be set at the class level in their __init__ as explicit keyword arguments (no *args or **kwargs).", "get_params([deep])", "Get parameters for this estimator.", "set_params(**params)", "Set the parameters of this estimator.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Inductive Clustering", "Approximate nearest neighbors in TSNE"]}, {"name": "base.BaseEstimator", "path": "modules/generated/sklearn.base.baseestimator#sklearn.base.BaseEstimator", "type": "base", "text": ["Base class for all estimators in scikit-learn.", "All estimators should specify all the parameters that can be set at the class level in their __init__ as explicit keyword arguments (no *args or **kwargs).", "get_params([deep])", "Get parameters for this estimator.", "set_params(**params)", "Set the parameters of this estimator.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "base.BaseEstimator.get_params()", "path": "modules/generated/sklearn.base.baseestimator#sklearn.base.BaseEstimator.get_params", "type": "base", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "base.BaseEstimator.set_params()", "path": "modules/generated/sklearn.base.baseestimator#sklearn.base.BaseEstimator.set_params", "type": "base", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "base.BiclusterMixin", "path": "modules/generated/sklearn.base.biclustermixin", "type": "base", "text": ["Mixin class for all bicluster estimators in scikit-learn.", "Convenient way to get row and column indicators together.", "get_indices(i)", "Row and column indices of the i\u2019th bicluster.", "get_shape(i)", "Shape of the i\u2019th bicluster.", "get_submatrix(i, data)", "Return the submatrix corresponding to bicluster i.", "Convenient way to get row and column indicators together.", "Returns the rows_ and columns_ members.", "Row and column indices of the i\u2019th bicluster.", "Only works if rows_ and columns_ attributes exist.", "The index of the cluster.", "Indices of rows in the dataset that belong to the bicluster.", "Indices of columns in the dataset that belong to the bicluster.", "Shape of the i\u2019th bicluster.", "The index of the cluster.", "Number of rows in the bicluster.", "Number of columns in the bicluster.", "Return the submatrix corresponding to bicluster i.", "The index of the cluster.", "The data.", "The submatrix corresponding to bicluster i.", "Works with sparse matrices. Only works if rows_ and columns_ attributes exist."]}, {"name": "base.BiclusterMixin", "path": "modules/generated/sklearn.base.biclustermixin#sklearn.base.BiclusterMixin", "type": "base", "text": ["Mixin class for all bicluster estimators in scikit-learn.", "Convenient way to get row and column indicators together.", "get_indices(i)", "Row and column indices of the i\u2019th bicluster.", "get_shape(i)", "Shape of the i\u2019th bicluster.", "get_submatrix(i, data)", "Return the submatrix corresponding to bicluster i.", "Convenient way to get row and column indicators together.", "Returns the rows_ and columns_ members.", "Row and column indices of the i\u2019th bicluster.", "Only works if rows_ and columns_ attributes exist.", "The index of the cluster.", "Indices of rows in the dataset that belong to the bicluster.", "Indices of columns in the dataset that belong to the bicluster.", "Shape of the i\u2019th bicluster.", "The index of the cluster.", "Number of rows in the bicluster.", "Number of columns in the bicluster.", "Return the submatrix corresponding to bicluster i.", "The index of the cluster.", "The data.", "The submatrix corresponding to bicluster i.", "Works with sparse matrices. Only works if rows_ and columns_ attributes exist."]}, {"name": "base.BiclusterMixin.biclusters_()", "path": "modules/generated/sklearn.base.biclustermixin#sklearn.base.BiclusterMixin.biclusters_", "type": "base", "text": ["Convenient way to get row and column indicators together.", "Returns the rows_ and columns_ members."]}, {"name": "base.BiclusterMixin.get_indices()", "path": "modules/generated/sklearn.base.biclustermixin#sklearn.base.BiclusterMixin.get_indices", "type": "base", "text": ["Row and column indices of the i\u2019th bicluster.", "Only works if rows_ and columns_ attributes exist.", "The index of the cluster.", "Indices of rows in the dataset that belong to the bicluster.", "Indices of columns in the dataset that belong to the bicluster."]}, {"name": "base.BiclusterMixin.get_shape()", "path": "modules/generated/sklearn.base.biclustermixin#sklearn.base.BiclusterMixin.get_shape", "type": "base", "text": ["Shape of the i\u2019th bicluster.", "The index of the cluster.", "Number of rows in the bicluster.", "Number of columns in the bicluster."]}, {"name": "base.BiclusterMixin.get_submatrix()", "path": "modules/generated/sklearn.base.biclustermixin#sklearn.base.BiclusterMixin.get_submatrix", "type": "base", "text": ["Return the submatrix corresponding to bicluster i.", "The index of the cluster.", "The data.", "The submatrix corresponding to bicluster i.", "Works with sparse matrices. Only works if rows_ and columns_ attributes exist."]}, {"name": "base.ClassifierMixin", "path": "modules/generated/sklearn.base.classifiermixin", "type": "base", "text": ["Mixin class for all classifiers in scikit-learn.", "score(X, y[, sample_weight])", "Return the mean accuracy on the given test data and labels.", "Return the mean accuracy on the given test data and labels.", "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.", "Test samples.", "True labels for X.", "Sample weights.", "Mean accuracy of self.predict(X) wrt. y."]}, {"name": "base.ClassifierMixin", "path": "modules/generated/sklearn.base.classifiermixin#sklearn.base.ClassifierMixin", "type": "base", "text": ["Mixin class for all classifiers in scikit-learn.", "score(X, y[, sample_weight])", "Return the mean accuracy on the given test data and labels.", "Return the mean accuracy on the given test data and labels.", "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.", "Test samples.", "True labels for X.", "Sample weights.", "Mean accuracy of self.predict(X) wrt. y."]}, {"name": "base.ClassifierMixin.score()", "path": "modules/generated/sklearn.base.classifiermixin#sklearn.base.ClassifierMixin.score", "type": "base", "text": ["Return the mean accuracy on the given test data and labels.", "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.", "Test samples.", "True labels for X.", "Sample weights.", "Mean accuracy of self.predict(X) wrt. y."]}, {"name": "base.clone()", "path": "modules/generated/sklearn.base.clone#sklearn.base.clone", "type": "base", "text": ["Constructs a new unfitted estimator with the same parameters.", "Clone does a deep copy of the model in an estimator without actually copying attached data. It yields a new estimator with the same parameters that has not been fitted on any data.", "If the estimator\u2019s random_state parameter is an integer (or if the estimator doesn\u2019t have a random_state parameter), an exact clone is returned: the clone and the original estimator will give the exact same results. Otherwise, statistical clone is returned: the clone might yield different results from the original estimator. More details can be found in Controlling randomness.", "The estimator or group of estimators to be cloned.", "If safe is False, clone will fall back to a deep copy on objects that are not estimators."]}, {"name": "base.ClusterMixin", "path": "modules/generated/sklearn.base.clustermixin", "type": "base", "text": ["Mixin class for all cluster estimators in scikit-learn.", "fit_predict(X[, y])", "Perform clustering on X and returns cluster labels.", "Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels."]}, {"name": "base.ClusterMixin", "path": "modules/generated/sklearn.base.clustermixin#sklearn.base.ClusterMixin", "type": "base", "text": ["Mixin class for all cluster estimators in scikit-learn.", "fit_predict(X[, y])", "Perform clustering on X and returns cluster labels.", "Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels."]}, {"name": "base.ClusterMixin.fit_predict()", "path": "modules/generated/sklearn.base.clustermixin#sklearn.base.ClusterMixin.fit_predict", "type": "base", "text": ["Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels."]}, {"name": "base.DensityMixin", "path": "modules/generated/sklearn.base.densitymixin", "type": "base", "text": ["Mixin class for all density estimators in scikit-learn.", "score(X[, y])", "Return the score of the model on the data X.", "Return the score of the model on the data X.", "Test samples.", "Not used, present for API consistency by convention."]}, {"name": "base.DensityMixin", "path": "modules/generated/sklearn.base.densitymixin#sklearn.base.DensityMixin", "type": "base", "text": ["Mixin class for all density estimators in scikit-learn.", "score(X[, y])", "Return the score of the model on the data X.", "Return the score of the model on the data X.", "Test samples.", "Not used, present for API consistency by convention."]}, {"name": "base.DensityMixin.score()", "path": "modules/generated/sklearn.base.densitymixin#sklearn.base.DensityMixin.score", "type": "base", "text": ["Return the score of the model on the data X.", "Test samples.", "Not used, present for API consistency by convention."]}, {"name": "base.is_classifier()", "path": "modules/generated/sklearn.base.is_classifier#sklearn.base.is_classifier", "type": "base", "text": ["Return True if the given estimator is (probably) a classifier.", "Estimator object to test.", "True if estimator is a classifier and False otherwise."]}, {"name": "base.is_regressor()", "path": "modules/generated/sklearn.base.is_regressor#sklearn.base.is_regressor", "type": "base", "text": ["Return True if the given estimator is (probably) a regressor.", "Estimator object to test.", "True if estimator is a regressor and False otherwise."]}, {"name": "base.RegressorMixin", "path": "modules/generated/sklearn.base.regressormixin#sklearn.base.RegressorMixin", "type": "base", "text": ["Mixin class for all regression estimators in scikit-learn.", "score(X, y[, sample_weight])", "Return the coefficient of determination \\(R^2\\) of the prediction.", "Return the coefficient of determination \\(R^2\\) of the prediction.", "The coefficient \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)\n** 2).sum() and \\(v\\) is the total sum of squares ((y_true -\ny_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.", "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.", "True values for X.", "Sample weights.", "\\(R^2\\) of self.predict(X) wrt. y.", "The \\(R^2\\) score used when calling score on a regressor uses multioutput='uniform_average' from version 0.23 to keep consistent with default value of r2_score. This influences the score method of all the multioutput regressors (except for MultiOutputRegressor)."]}, {"name": "base.RegressorMixin", "path": "modules/generated/sklearn.base.regressormixin", "type": "base", "text": ["Mixin class for all regression estimators in scikit-learn.", "score(X, y[, sample_weight])", "Return the coefficient of determination \\(R^2\\) of the prediction.", "Return the coefficient of determination \\(R^2\\) of the prediction.", "The coefficient \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)\n** 2).sum() and \\(v\\) is the total sum of squares ((y_true -\ny_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.", "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.", "True values for X.", "Sample weights.", "\\(R^2\\) of self.predict(X) wrt. y.", "The \\(R^2\\) score used when calling score on a regressor uses multioutput='uniform_average' from version 0.23 to keep consistent with default value of r2_score. This influences the score method of all the multioutput regressors (except for MultiOutputRegressor)."]}, {"name": "base.RegressorMixin.score()", "path": "modules/generated/sklearn.base.regressormixin#sklearn.base.RegressorMixin.score", "type": "base", "text": ["Return the coefficient of determination \\(R^2\\) of the prediction.", "The coefficient \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)\n** 2).sum() and \\(v\\) is the total sum of squares ((y_true -\ny_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.", "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.", "True values for X.", "Sample weights.", "\\(R^2\\) of self.predict(X) wrt. y.", "The \\(R^2\\) score used when calling score on a regressor uses multioutput='uniform_average' from version 0.23 to keep consistent with default value of r2_score. This influences the score method of all the multioutput regressors (except for MultiOutputRegressor)."]}, {"name": "base.TransformerMixin", "path": "modules/generated/sklearn.base.transformermixin", "type": "base", "text": ["Mixin class for all transformers in scikit-learn.", "fit_transform(X[, y])", "Fit to data, then transform it.", "Fit to data, then transform it.", "Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.", "Input samples.", "Target values (None for unsupervised transformations).", "Additional fit parameters.", "Transformed array.", "Approximate nearest neighbors in TSNE"]}, {"name": "base.TransformerMixin", "path": "modules/generated/sklearn.base.transformermixin#sklearn.base.TransformerMixin", "type": "base", "text": ["Mixin class for all transformers in scikit-learn.", "fit_transform(X[, y])", "Fit to data, then transform it.", "Fit to data, then transform it.", "Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.", "Input samples.", "Target values (None for unsupervised transformations).", "Additional fit parameters.", "Transformed array."]}, {"name": "base.TransformerMixin.fit_transform()", "path": "modules/generated/sklearn.base.transformermixin#sklearn.base.TransformerMixin.fit_transform", "type": "base", "text": ["Fit to data, then transform it.", "Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.", "Input samples.", "Target values (None for unsupervised transformations).", "Additional fit parameters.", "Transformed array."]}, {"name": "calibration.CalibratedClassifierCV", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV", "type": "calibration", "text": ["Probability calibration with isotonic regression or logistic regression.", "This class uses cross-validation to both estimate the parameters of a classifier and subsequently calibrate a classifier. With default ensemble=True, for each cv split it fits a copy of the base estimator to the training subset, and calibrates it using the testing subset. For prediction, predicted probabilities are averaged across these individual calibrated classifiers. When ensemble=False, cross-validation is used to obtain unbiased predictions, via cross_val_predict, which are then used for calibration. For prediction, the base estimator, trained using all the data, is used. This is the method implemented when probabilities=True for sklearn.svm estimators.", "Already fitted classifiers can be calibrated via the parameter cv=\"prefit\". In this case, no cross-validation is used and all provided data is used for calibration. The user has to take care manually that data for model fitting and calibration are disjoint.", "The calibration is based on the decision_function method of the base_estimator if it exists, else on predict_proba.", "Read more in the User Guide.", "The classifier whose output need to be calibrated to provide more accurate predict_proba outputs. The default classifier is a LinearSVC.", "The method to use for calibration. Can be \u2018sigmoid\u2019 which corresponds to Platt\u2019s method (i.e. a logistic regression model) or \u2018isotonic\u2019 which is a non-parametric approach. It is not advised to use isotonic calibration with too few calibration samples (<<1000) since it tends to overfit.", "Determines the cross-validation splitting strategy. Possible inputs for cv are:", "For integer/None inputs, if y is binary or multiclass, StratifiedKFold is used. If y is neither binary nor multiclass, KFold is used.", "Refer to the User Guide for the various cross-validation strategies that can be used here.", "If \u201cprefit\u201d is passed, it is assumed that base_estimator has been fitted already and all data is used for calibration.", "Changed in version 0.22: cv default value if None changed from 3-fold to 5-fold.", "Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors.", "Base estimator clones are fitted in parallel across cross-validation iterations. Therefore parallelism happens only when cv != \"prefit\".", "See Glossary for more details.", "New in version 0.24.", "Determines how the calibrator is fitted when cv is not 'prefit'. Ignored if cv='prefit'.", "If True, the base_estimator is fitted using training data and calibrated using testing data, for each cv fold. The final estimator is an ensemble of n_cv fitted classifer and calibrator pairs, where n_cv is the number of cross-validation folds. The output is the average predicted probabilities of all pairs.", "If False, cv is used to compute unbiased predictions, via cross_val_predict, which are then used for calibration. At prediction time, the classifier used is the base_estimator trained on all the data. Note that this method is also internally implemented in sklearn.svm estimators with the probabilities=True parameter.", "New in version 0.24.", "The class labels.", "The list of classifier and calibrator pairs.", "Changed in version 0.24: Single calibrated classifier case when ensemble=False.", "Obtaining calibrated probability estimates from decision trees and naive Bayesian classifiers, B. Zadrozny & C. Elkan, ICML 2001", "Transforming Classifier Scores into Accurate Multiclass Probability Estimates, B. Zadrozny & C. Elkan, (KDD 2002)", "Probabilistic Outputs for Support Vector Machines and Comparisons to Regularized Likelihood Methods, J. Platt, (1999)", "Predicting Good Probabilities with Supervised Learning, A. Niculescu-Mizil & R. Caruana, ICML 2005", "fit(X, y[, sample_weight])", "Fit the calibrated model.", "get_params([deep])", "Get parameters for this estimator.", "predict(X)", "Predict the target of new samples.", "predict_proba(X)", "Calibrated probabilities of classification.", "score(X, y[, sample_weight])", "Return the mean accuracy on the given test data and labels.", "set_params(**params)", "Set the parameters of this estimator.", "Fit the calibrated model.", "Training data.", "Target values.", "Sample weights. If None, then samples are equally weighted.", "Returns an instance of self.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Predict the target of new samples. The predicted class is the class that has the highest probability, and can thus be different from the prediction of the uncalibrated classifier.", "The samples.", "The predicted class.", "Calibrated probabilities of classification.", "This function returns calibrated probabilities of classification according to each class on an array of test vectors X.", "The samples.", "The predicted probas.", "Return the mean accuracy on the given test data and labels.", "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.", "Test samples.", "True labels for X.", "Sample weights.", "Mean accuracy of self.predict(X) wrt. y.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "calibration.CalibratedClassifierCV()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv", "type": "calibration", "text": ["Probability calibration with isotonic regression or logistic regression.", "This class uses cross-validation to both estimate the parameters of a classifier and subsequently calibrate a classifier. With default ensemble=True, for each cv split it fits a copy of the base estimator to the training subset, and calibrates it using the testing subset. For prediction, predicted probabilities are averaged across these individual calibrated classifiers. When ensemble=False, cross-validation is used to obtain unbiased predictions, via cross_val_predict, which are then used for calibration. For prediction, the base estimator, trained using all the data, is used. This is the method implemented when probabilities=True for sklearn.svm estimators.", "Already fitted classifiers can be calibrated via the parameter cv=\"prefit\". In this case, no cross-validation is used and all provided data is used for calibration. The user has to take care manually that data for model fitting and calibration are disjoint.", "The calibration is based on the decision_function method of the base_estimator if it exists, else on predict_proba.", "Read more in the User Guide.", "The classifier whose output need to be calibrated to provide more accurate predict_proba outputs. The default classifier is a LinearSVC.", "The method to use for calibration. Can be \u2018sigmoid\u2019 which corresponds to Platt\u2019s method (i.e. a logistic regression model) or \u2018isotonic\u2019 which is a non-parametric approach. It is not advised to use isotonic calibration with too few calibration samples (<<1000) since it tends to overfit.", "Determines the cross-validation splitting strategy. Possible inputs for cv are:", "For integer/None inputs, if y is binary or multiclass, StratifiedKFold is used. If y is neither binary nor multiclass, KFold is used.", "Refer to the User Guide for the various cross-validation strategies that can be used here.", "If \u201cprefit\u201d is passed, it is assumed that base_estimator has been fitted already and all data is used for calibration.", "Changed in version 0.22: cv default value if None changed from 3-fold to 5-fold.", "Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors.", "Base estimator clones are fitted in parallel across cross-validation iterations. Therefore parallelism happens only when cv != \"prefit\".", "See Glossary for more details.", "New in version 0.24.", "Determines how the calibrator is fitted when cv is not 'prefit'. Ignored if cv='prefit'.", "If True, the base_estimator is fitted using training data and calibrated using testing data, for each cv fold. The final estimator is an ensemble of n_cv fitted classifer and calibrator pairs, where n_cv is the number of cross-validation folds. The output is the average predicted probabilities of all pairs.", "If False, cv is used to compute unbiased predictions, via cross_val_predict, which are then used for calibration. At prediction time, the classifier used is the base_estimator trained on all the data. Note that this method is also internally implemented in sklearn.svm estimators with the probabilities=True parameter.", "New in version 0.24.", "The class labels.", "The list of classifier and calibrator pairs.", "Changed in version 0.24: Single calibrated classifier case when ensemble=False.", "Obtaining calibrated probability estimates from decision trees and naive Bayesian classifiers, B. Zadrozny & C. Elkan, ICML 2001", "Transforming Classifier Scores into Accurate Multiclass Probability Estimates, B. Zadrozny & C. Elkan, (KDD 2002)", "Probabilistic Outputs for Support Vector Machines and Comparisons to Regularized Likelihood Methods, J. Platt, (1999)", "Predicting Good Probabilities with Supervised Learning, A. Niculescu-Mizil & R. Caruana, ICML 2005", "fit(X, y[, sample_weight])", "Fit the calibrated model.", "get_params([deep])", "Get parameters for this estimator.", "predict(X)", "Predict the target of new samples.", "predict_proba(X)", "Calibrated probabilities of classification.", "score(X, y[, sample_weight])", "Return the mean accuracy on the given test data and labels.", "set_params(**params)", "Set the parameters of this estimator.", "Fit the calibrated model.", "Training data.", "Target values.", "Sample weights. If None, then samples are equally weighted.", "Returns an instance of self.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Predict the target of new samples. The predicted class is the class that has the highest probability, and can thus be different from the prediction of the uncalibrated classifier.", "The samples.", "The predicted class.", "Calibrated probabilities of classification.", "This function returns calibrated probabilities of classification according to each class on an array of test vectors X.", "The samples.", "The predicted probas.", "Return the mean accuracy on the given test data and labels.", "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.", "Test samples.", "True labels for X.", "Sample weights.", "Mean accuracy of self.predict(X) wrt. y.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Probability Calibration curves", "Probability calibration of classifiers", "Probability Calibration for 3-class classification"]}, {"name": "calibration.CalibratedClassifierCV.fit()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.fit", "type": "calibration", "text": ["Fit the calibrated model.", "Training data.", "Target values.", "Sample weights. If None, then samples are equally weighted.", "Returns an instance of self."]}, {"name": "calibration.CalibratedClassifierCV.get_params()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.get_params", "type": "calibration", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "calibration.CalibratedClassifierCV.predict()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.predict", "type": "calibration", "text": ["Predict the target of new samples. The predicted class is the class that has the highest probability, and can thus be different from the prediction of the uncalibrated classifier.", "The samples.", "The predicted class."]}, {"name": "calibration.CalibratedClassifierCV.predict_proba()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.predict_proba", "type": "calibration", "text": ["Calibrated probabilities of classification.", "This function returns calibrated probabilities of classification according to each class on an array of test vectors X.", "The samples.", "The predicted probas."]}, {"name": "calibration.CalibratedClassifierCV.score()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.score", "type": "calibration", "text": ["Return the mean accuracy on the given test data and labels.", "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.", "Test samples.", "True labels for X.", "Sample weights.", "Mean accuracy of self.predict(X) wrt. y."]}, {"name": "calibration.CalibratedClassifierCV.set_params()", "path": "modules/generated/sklearn.calibration.calibratedclassifiercv#sklearn.calibration.CalibratedClassifierCV.set_params", "type": "calibration", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "calibration.calibration_curve()", "path": "modules/generated/sklearn.calibration.calibration_curve#sklearn.calibration.calibration_curve", "type": "calibration", "text": ["Compute true and predicted probabilities for a calibration curve.", "The method assumes the inputs come from a binary classifier, and discretize the [0, 1] interval into bins.", "Calibration curves may also be referred to as reliability diagrams.", "Read more in the User Guide.", "True targets.", "Probabilities of the positive class.", "Whether y_prob needs to be normalized into the [0, 1] interval, i.e. is not a proper probability. If True, the smallest value in y_prob is linearly mapped onto 0 and the largest one onto 1.", "Number of bins to discretize the [0, 1] interval. A bigger number requires more data. Bins with no samples (i.e. without corresponding values in y_prob) will not be returned, thus the returned arrays may have less than n_bins values.", "Strategy used to define the widths of the bins.", "The bins have identical widths.", "The bins have the same number of samples and depend on y_prob.", "The proportion of samples whose class is the positive class, in each bin (fraction of positives).", "The mean predicted probability in each bin.", "Alexandru Niculescu-Mizil and Rich Caruana (2005) Predicting Good Probabilities With Supervised Learning, in Proceedings of the 22nd International Conference on Machine Learning (ICML). See section 4 (Qualitative Analysis of Predictions)."]}, {"name": "cluster.AffinityPropagation", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation", "type": "cluster", "text": ["Perform Affinity Propagation Clustering of data.", "Read more in the User Guide.", "Damping factor (between 0.5 and 1) is the extent to which the current value is maintained relative to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when updating these values (messages).", "Maximum number of iterations.", "Number of iterations with no change in the number of estimated clusters that stops the convergence.", "Make a copy of input data.", "Preferences for each point - points with larger values of preferences are more likely to be chosen as exemplars. The number of exemplars, ie of clusters, is influenced by the input preferences value. If the preferences are not passed as arguments, they will be set to the median of the input similarities.", "Which affinity to use. At the moment \u2018precomputed\u2019 and euclidean are supported. \u2018euclidean\u2019 uses the negative squared euclidean distance between points.", "Whether to be verbose.", "Pseudo-random number generator to control the starting state. Use an int for reproducible results across function calls. See the Glossary.", "New in version 0.23: this parameter was previously hardcoded as 0.", "Indices of cluster centers.", "Cluster centers (if affinity != precomputed).", "Labels of each point.", "Stores the affinity matrix used in fit.", "Number of iterations taken to converge.", "For an example, see examples/cluster/plot_affinity_propagation.py.", "The algorithmic complexity of affinity propagation is quadratic in the number of points.", "When fit does not converge, cluster_centers_ becomes an empty array and all training samples will be labelled as -1. In addition, predict will then label every sample as -1.", "When all training samples have equal similarities and equal preferences, the assignment of cluster centers and labels depends on the preference. If the preference is smaller than the similarities, fit will result in a single cluster center and label 0 for every sample. Otherwise, every training sample becomes its own cluster center and is assigned a unique label.", "Brendan J. Frey and Delbert Dueck, \u201cClustering by Passing Messages Between Data Points\u201d, Science Feb. 2007", "fit(X[, y])", "Fit the clustering from features, or affinity matrix.", "fit_predict(X[, y])", "Fit the clustering from features or affinity matrix, and return cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "predict(X)", "Predict the closest cluster each sample in X belongs to.", "set_params(**params)", "Set the parameters of this estimator.", "Fit the clustering from features, or affinity matrix.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse feature matrix is provided, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention.", "Fit the clustering from features or affinity matrix, and return cluster labels.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse feature matrix is provided, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention.", "Cluster labels.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Predict the closest cluster each sample in X belongs to.", "New data to predict. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.", "Cluster labels.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.AffinityPropagation()", "path": "modules/generated/sklearn.cluster.affinitypropagation", "type": "cluster", "text": ["Perform Affinity Propagation Clustering of data.", "Read more in the User Guide.", "Damping factor (between 0.5 and 1) is the extent to which the current value is maintained relative to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when updating these values (messages).", "Maximum number of iterations.", "Number of iterations with no change in the number of estimated clusters that stops the convergence.", "Make a copy of input data.", "Preferences for each point - points with larger values of preferences are more likely to be chosen as exemplars. The number of exemplars, ie of clusters, is influenced by the input preferences value. If the preferences are not passed as arguments, they will be set to the median of the input similarities.", "Which affinity to use. At the moment \u2018precomputed\u2019 and euclidean are supported. \u2018euclidean\u2019 uses the negative squared euclidean distance between points.", "Whether to be verbose.", "Pseudo-random number generator to control the starting state. Use an int for reproducible results across function calls. See the Glossary.", "New in version 0.23: this parameter was previously hardcoded as 0.", "Indices of cluster centers.", "Cluster centers (if affinity != precomputed).", "Labels of each point.", "Stores the affinity matrix used in fit.", "Number of iterations taken to converge.", "For an example, see examples/cluster/plot_affinity_propagation.py.", "The algorithmic complexity of affinity propagation is quadratic in the number of points.", "When fit does not converge, cluster_centers_ becomes an empty array and all training samples will be labelled as -1. In addition, predict will then label every sample as -1.", "When all training samples have equal similarities and equal preferences, the assignment of cluster centers and labels depends on the preference. If the preference is smaller than the similarities, fit will result in a single cluster center and label 0 for every sample. Otherwise, every training sample becomes its own cluster center and is assigned a unique label.", "Brendan J. Frey and Delbert Dueck, \u201cClustering by Passing Messages Between Data Points\u201d, Science Feb. 2007", "fit(X[, y])", "Fit the clustering from features, or affinity matrix.", "fit_predict(X[, y])", "Fit the clustering from features or affinity matrix, and return cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "predict(X)", "Predict the closest cluster each sample in X belongs to.", "set_params(**params)", "Set the parameters of this estimator.", "Fit the clustering from features, or affinity matrix.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse feature matrix is provided, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention.", "Fit the clustering from features or affinity matrix, and return cluster labels.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse feature matrix is provided, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention.", "Cluster labels.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Predict the closest cluster each sample in X belongs to.", "New data to predict. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.", "Cluster labels.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Demo of affinity propagation clustering algorithm", "Comparing different clustering algorithms on toy datasets"]}, {"name": "cluster.AffinityPropagation.fit()", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation.fit", "type": "cluster", "text": ["Fit the clustering from features, or affinity matrix.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse feature matrix is provided, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention."]}, {"name": "cluster.AffinityPropagation.fit_predict()", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation.fit_predict", "type": "cluster", "text": ["Fit the clustering from features or affinity matrix, and return cluster labels.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse feature matrix is provided, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention.", "Cluster labels."]}, {"name": "cluster.AffinityPropagation.get_params()", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.AffinityPropagation.predict()", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation.predict", "type": "cluster", "text": ["Predict the closest cluster each sample in X belongs to.", "New data to predict. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.", "Cluster labels."]}, {"name": "cluster.AffinityPropagation.set_params()", "path": "modules/generated/sklearn.cluster.affinitypropagation#sklearn.cluster.AffinityPropagation.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.affinity_propagation()", "path": "modules/generated/sklearn.cluster.affinity_propagation#sklearn.cluster.affinity_propagation", "type": "cluster", "text": ["Perform Affinity Propagation Clustering of data.", "Read more in the User Guide.", "Matrix of similarities between points.", "Preferences for each point - points with larger values of preferences are more likely to be chosen as exemplars. The number of exemplars, i.e. of clusters, is influenced by the input preferences value. If the preferences are not passed as arguments, they will be set to the median of the input similarities (resulting in a moderate number of clusters). For a smaller amount of clusters, this can be set to the minimum value of the similarities.", "Number of iterations with no change in the number of estimated clusters that stops the convergence.", "Maximum number of iterations", "Damping factor between 0.5 and 1.", "If copy is False, the affinity matrix is modified inplace by the algorithm, for memory efficiency.", "The verbosity level.", "Whether or not to return the number of iterations.", "Pseudo-random number generator to control the starting state. Use an int for reproducible results across function calls. See the Glossary.", "New in version 0.23: this parameter was previously hardcoded as 0.", "Index of clusters centers.", "Cluster labels for each point.", "Number of iterations run. Returned only if return_n_iter is set to True.", "For an example, see examples/cluster/plot_affinity_propagation.py.", "When the algorithm does not converge, it returns an empty array as cluster_center_indices and -1 as label for each training sample.", "When all training samples have equal similarities and equal preferences, the assignment of cluster centers and labels depends on the preference. If the preference is smaller than the similarities, a single cluster center and label 0 for every sample will be returned. Otherwise, every training sample becomes its own cluster center and is assigned a unique label.", "Brendan J. Frey and Delbert Dueck, \u201cClustering by Passing Messages Between Data Points\u201d, Science Feb. 2007"]}, {"name": "cluster.AgglomerativeClustering", "path": "modules/generated/sklearn.cluster.agglomerativeclustering#sklearn.cluster.AgglomerativeClustering", "type": "cluster", "text": ["Agglomerative Clustering", "Recursively merges the pair of clusters that minimally increases a given linkage distance.", "Read more in the User Guide.", "The number of clusters to find. It must be None if distance_threshold is not None.", "Metric used to compute the linkage. Can be \u201ceuclidean\u201d, \u201cl1\u201d, \u201cl2\u201d, \u201cmanhattan\u201d, \u201ccosine\u201d, or \u201cprecomputed\u201d. If linkage is \u201cward\u201d, only \u201ceuclidean\u201d is accepted. If \u201cprecomputed\u201d, a distance matrix (instead of a similarity matrix) is needed as input for the fit method.", "Used to cache the output of the computation of the tree. By default, no caching is done. If a string is given, it is the path to the caching directory.", "Connectivity matrix. Defines for each sample the neighboring samples following a given structure of the data. This can be a connectivity matrix itself or a callable that transforms the data into a connectivity matrix, such as derived from kneighbors_graph. Default is None, i.e, the hierarchical clustering algorithm is unstructured.", "Stop early the construction of the tree at n_clusters. This is useful to decrease computation time if the number of clusters is not small compared to the number of samples. This option is useful only when specifying a connectivity matrix. Note also that when varying the number of clusters and using caching, it may be advantageous to compute the full tree. It must be True if distance_threshold is not None. By default compute_full_tree is \u201cauto\u201d, which is equivalent to True when distance_threshold is not None or that n_clusters is inferior to the maximum between 100 or 0.02 * n_samples. Otherwise, \u201cauto\u201d is equivalent to False.", "Which linkage criterion to use. The linkage criterion determines which distance to use between sets of observation. The algorithm will merge the pairs of cluster that minimize this criterion.", "New in version 0.20: Added the \u2018single\u2019 option", "The linkage distance threshold above which, clusters will not be merged. If not None, n_clusters must be None and compute_full_tree must be True.", "New in version 0.21.", "Computes distances between clusters even if distance_threshold is not used. This can be used to make dendrogram visualization, but introduces a computational and memory overhead.", "New in version 0.24.", "The number of clusters found by the algorithm. If distance_threshold=None, it will be equal to the given n_clusters.", "cluster labels for each point", "Number of leaves in the hierarchical tree.", "The estimated number of connected components in the graph.", "New in version 0.21: n_connected_components_ was added to replace n_components_.", "The children of each non-leaf node. Values less than n_samples correspond to leaves of the tree which are the original samples. A node i greater than or equal to n_samples is a non-leaf node and has children children_[i - n_samples]. Alternatively at the i-th iteration, children[i][0] and children[i][1] are merged to form node n_samples + i", "Distances between nodes in the corresponding place in children_. Only computed if distance_threshold is used or compute_distances is set to True.", "fit(X[, y])", "Fit the hierarchical clustering from features, or distance matrix.", "fit_predict(X[, y])", "Fit the hierarchical clustering from features or distance matrix, and return cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "set_params(**params)", "Set the parameters of this estimator.", "Fit the hierarchical clustering from features, or distance matrix.", "Training instances to cluster, or distances between instances if affinity='precomputed'.", "Not used, present here for API consistency by convention.", "Fit the hierarchical clustering from features or distance matrix, and return cluster labels.", "Training instances to cluster, or distances between instances if affinity='precomputed'.", "Not used, present here for API consistency by convention.", "Cluster labels.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.AgglomerativeClustering()", "path": "modules/generated/sklearn.cluster.agglomerativeclustering", "type": "cluster", "text": ["Agglomerative Clustering", "Recursively merges the pair of clusters that minimally increases a given linkage distance.", "Read more in the User Guide.", "The number of clusters to find. It must be None if distance_threshold is not None.", "Metric used to compute the linkage. Can be \u201ceuclidean\u201d, \u201cl1\u201d, \u201cl2\u201d, \u201cmanhattan\u201d, \u201ccosine\u201d, or \u201cprecomputed\u201d. If linkage is \u201cward\u201d, only \u201ceuclidean\u201d is accepted. If \u201cprecomputed\u201d, a distance matrix (instead of a similarity matrix) is needed as input for the fit method.", "Used to cache the output of the computation of the tree. By default, no caching is done. If a string is given, it is the path to the caching directory.", "Connectivity matrix. Defines for each sample the neighboring samples following a given structure of the data. This can be a connectivity matrix itself or a callable that transforms the data into a connectivity matrix, such as derived from kneighbors_graph. Default is None, i.e, the hierarchical clustering algorithm is unstructured.", "Stop early the construction of the tree at n_clusters. This is useful to decrease computation time if the number of clusters is not small compared to the number of samples. This option is useful only when specifying a connectivity matrix. Note also that when varying the number of clusters and using caching, it may be advantageous to compute the full tree. It must be True if distance_threshold is not None. By default compute_full_tree is \u201cauto\u201d, which is equivalent to True when distance_threshold is not None or that n_clusters is inferior to the maximum between 100 or 0.02 * n_samples. Otherwise, \u201cauto\u201d is equivalent to False.", "Which linkage criterion to use. The linkage criterion determines which distance to use between sets of observation. The algorithm will merge the pairs of cluster that minimize this criterion.", "New in version 0.20: Added the \u2018single\u2019 option", "The linkage distance threshold above which, clusters will not be merged. If not None, n_clusters must be None and compute_full_tree must be True.", "New in version 0.21.", "Computes distances between clusters even if distance_threshold is not used. This can be used to make dendrogram visualization, but introduces a computational and memory overhead.", "New in version 0.24.", "The number of clusters found by the algorithm. If distance_threshold=None, it will be equal to the given n_clusters.", "cluster labels for each point", "Number of leaves in the hierarchical tree.", "The estimated number of connected components in the graph.", "New in version 0.21: n_connected_components_ was added to replace n_components_.", "The children of each non-leaf node. Values less than n_samples correspond to leaves of the tree which are the original samples. A node i greater than or equal to n_samples is a non-leaf node and has children children_[i - n_samples]. Alternatively at the i-th iteration, children[i][0] and children[i][1] are merged to form node n_samples + i", "Distances between nodes in the corresponding place in children_. Only computed if distance_threshold is used or compute_distances is set to True.", "fit(X[, y])", "Fit the hierarchical clustering from features, or distance matrix.", "fit_predict(X[, y])", "Fit the hierarchical clustering from features or distance matrix, and return cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "set_params(**params)", "Set the parameters of this estimator.", "Fit the hierarchical clustering from features, or distance matrix.", "Training instances to cluster, or distances between instances if affinity='precomputed'.", "Not used, present here for API consistency by convention.", "Fit the hierarchical clustering from features or distance matrix, and return cluster labels.", "Training instances to cluster, or distances between instances if affinity='precomputed'.", "Not used, present here for API consistency by convention.", "Cluster labels.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Plot Hierarchical Clustering Dendrogram", "Agglomerative clustering with and without structure", "Various Agglomerative Clustering on a 2D embedding of digits", "A demo of structured Ward hierarchical clustering on an image of coins", "Hierarchical clustering: structured vs unstructured ward", "Agglomerative clustering with different metrics", "Inductive Clustering", "Comparing different hierarchical linkage methods on toy datasets", "Comparing different clustering algorithms on toy datasets"]}, {"name": "cluster.AgglomerativeClustering.fit()", "path": "modules/generated/sklearn.cluster.agglomerativeclustering#sklearn.cluster.AgglomerativeClustering.fit", "type": "cluster", "text": ["Fit the hierarchical clustering from features, or distance matrix.", "Training instances to cluster, or distances between instances if affinity='precomputed'.", "Not used, present here for API consistency by convention."]}, {"name": "cluster.AgglomerativeClustering.fit_predict()", "path": "modules/generated/sklearn.cluster.agglomerativeclustering#sklearn.cluster.AgglomerativeClustering.fit_predict", "type": "cluster", "text": ["Fit the hierarchical clustering from features or distance matrix, and return cluster labels.", "Training instances to cluster, or distances between instances if affinity='precomputed'.", "Not used, present here for API consistency by convention.", "Cluster labels."]}, {"name": "cluster.AgglomerativeClustering.get_params()", "path": "modules/generated/sklearn.cluster.agglomerativeclustering#sklearn.cluster.AgglomerativeClustering.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.AgglomerativeClustering.set_params()", "path": "modules/generated/sklearn.cluster.agglomerativeclustering#sklearn.cluster.AgglomerativeClustering.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.Birch", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch", "type": "cluster", "text": ["Implements the Birch clustering algorithm.", "It is a memory-efficient, online-learning algorithm provided as an alternative to MiniBatchKMeans. It constructs a tree data structure with the cluster centroids being read off the leaf. These can be either the final cluster centroids or can be provided as input to another clustering algorithm such as AgglomerativeClustering.", "Read more in the User Guide.", "New in version 0.16.", "The radius of the subcluster obtained by merging a new sample and the closest subcluster should be lesser than the threshold. Otherwise a new subcluster is started. Setting this value to be very low promotes splitting and vice-versa.", "Maximum number of CF subclusters in each node. If a new samples enters such that the number of subclusters exceed the branching_factor then that node is split into two nodes with the subclusters redistributed in each. The parent subcluster of that node is removed and two new subclusters are added as parents of the 2 split nodes.", "Number of clusters after the final clustering step, which treats the subclusters from the leaves as new samples.", "Whether or not to compute labels for each fit.", "Whether or not to make a copy of the given data. If set to False, the initial data will be overwritten.", "Root of the CFTree.", "Start pointer to all the leaves.", "Centroids of all subclusters read directly from the leaves.", "Labels assigned to the centroids of the subclusters after they are clustered globally.", "Array of labels assigned to the input data. if partial_fit is used instead of fit, they are assigned to the last batch of data.", "See also", "Alternative implementation that does incremental updates of the centers\u2019 positions using mini-batches.", "The tree data structure consists of nodes with each node consisting of a number of subclusters. The maximum number of subclusters in a node is determined by the branching factor. Each subcluster maintains a linear sum, squared sum and the number of samples in that subcluster. In addition, each subcluster can also have a node as its child, if the subcluster is not a member of a leaf node.", "For a new point entering the root, it is merged with the subcluster closest to it and the linear sum, squared sum and the number of samples of that subcluster are updated. This is done recursively till the properties of the leaf node are updated.", "fit(X[, y])", "Build a CF Tree for the input data.", "fit_predict(X[, y])", "Perform clustering on X and returns cluster labels.", "fit_transform(X[, y])", "Fit to data, then transform it.", "get_params([deep])", "Get parameters for this estimator.", "partial_fit([X, y])", "Online learning.", "predict(X)", "Predict data using the centroids_ of subclusters.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X)", "Transform X into subcluster centroids dimension.", "Build a CF Tree for the input data.", "Input data.", "Not used, present here for API consistency by convention.", "Fitted estimator.", "Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels.", "Fit to data, then transform it.", "Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.", "Input samples.", "Target values (None for unsupervised transformations).", "Additional fit parameters.", "Transformed array.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Online learning. Prevents rebuilding of CFTree from scratch.", "Input data. If X is not provided, only the global clustering step is done.", "Not used, present here for API consistency by convention.", "Fitted estimator.", "Predict data using the centroids_ of subclusters.", "Avoid computation of the row norms of X.", "Input data.", "Labelled data.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Transform X into subcluster centroids dimension.", "Each dimension represents the distance from the sample point to each cluster centroid.", "Input data.", "Transformed data."]}, {"name": "cluster.Birch()", "path": "modules/generated/sklearn.cluster.birch", "type": "cluster", "text": ["Implements the Birch clustering algorithm.", "It is a memory-efficient, online-learning algorithm provided as an alternative to MiniBatchKMeans. It constructs a tree data structure with the cluster centroids being read off the leaf. These can be either the final cluster centroids or can be provided as input to another clustering algorithm such as AgglomerativeClustering.", "Read more in the User Guide.", "New in version 0.16.", "The radius of the subcluster obtained by merging a new sample and the closest subcluster should be lesser than the threshold. Otherwise a new subcluster is started. Setting this value to be very low promotes splitting and vice-versa.", "Maximum number of CF subclusters in each node. If a new samples enters such that the number of subclusters exceed the branching_factor then that node is split into two nodes with the subclusters redistributed in each. The parent subcluster of that node is removed and two new subclusters are added as parents of the 2 split nodes.", "Number of clusters after the final clustering step, which treats the subclusters from the leaves as new samples.", "Whether or not to compute labels for each fit.", "Whether or not to make a copy of the given data. If set to False, the initial data will be overwritten.", "Root of the CFTree.", "Start pointer to all the leaves.", "Centroids of all subclusters read directly from the leaves.", "Labels assigned to the centroids of the subclusters after they are clustered globally.", "Array of labels assigned to the input data. if partial_fit is used instead of fit, they are assigned to the last batch of data.", "See also", "Alternative implementation that does incremental updates of the centers\u2019 positions using mini-batches.", "The tree data structure consists of nodes with each node consisting of a number of subclusters. The maximum number of subclusters in a node is determined by the branching factor. Each subcluster maintains a linear sum, squared sum and the number of samples in that subcluster. In addition, each subcluster can also have a node as its child, if the subcluster is not a member of a leaf node.", "For a new point entering the root, it is merged with the subcluster closest to it and the linear sum, squared sum and the number of samples of that subcluster are updated. This is done recursively till the properties of the leaf node are updated.", "fit(X[, y])", "Build a CF Tree for the input data.", "fit_predict(X[, y])", "Perform clustering on X and returns cluster labels.", "fit_transform(X[, y])", "Fit to data, then transform it.", "get_params([deep])", "Get parameters for this estimator.", "partial_fit([X, y])", "Online learning.", "predict(X)", "Predict data using the centroids_ of subclusters.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X)", "Transform X into subcluster centroids dimension.", "Build a CF Tree for the input data.", "Input data.", "Not used, present here for API consistency by convention.", "Fitted estimator.", "Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels.", "Fit to data, then transform it.", "Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.", "Input samples.", "Target values (None for unsupervised transformations).", "Additional fit parameters.", "Transformed array.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Online learning. Prevents rebuilding of CFTree from scratch.", "Input data. If X is not provided, only the global clustering step is done.", "Not used, present here for API consistency by convention.", "Fitted estimator.", "Predict data using the centroids_ of subclusters.", "Avoid computation of the row norms of X.", "Input data.", "Labelled data.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Transform X into subcluster centroids dimension.", "Each dimension represents the distance from the sample point to each cluster centroid.", "Input data.", "Transformed data.", "Compare BIRCH and MiniBatchKMeans", "Comparing different clustering algorithms on toy datasets"]}, {"name": "cluster.Birch.fit()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.fit", "type": "cluster", "text": ["Build a CF Tree for the input data.", "Input data.", "Not used, present here for API consistency by convention.", "Fitted estimator."]}, {"name": "cluster.Birch.fit_predict()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.fit_predict", "type": "cluster", "text": ["Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels."]}, {"name": "cluster.Birch.fit_transform()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.fit_transform", "type": "cluster", "text": ["Fit to data, then transform it.", "Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.", "Input samples.", "Target values (None for unsupervised transformations).", "Additional fit parameters.", "Transformed array."]}, {"name": "cluster.Birch.get_params()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.Birch.partial_fit()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.partial_fit", "type": "cluster", "text": ["Online learning. Prevents rebuilding of CFTree from scratch.", "Input data. If X is not provided, only the global clustering step is done.", "Not used, present here for API consistency by convention.", "Fitted estimator."]}, {"name": "cluster.Birch.predict()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.predict", "type": "cluster", "text": ["Predict data using the centroids_ of subclusters.", "Avoid computation of the row norms of X.", "Input data.", "Labelled data."]}, {"name": "cluster.Birch.set_params()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.Birch.transform()", "path": "modules/generated/sklearn.cluster.birch#sklearn.cluster.Birch.transform", "type": "cluster", "text": ["Transform X into subcluster centroids dimension.", "Each dimension represents the distance from the sample point to each cluster centroid.", "Input data.", "Transformed data."]}, {"name": "cluster.cluster_optics_dbscan()", "path": "modules/generated/sklearn.cluster.cluster_optics_dbscan#sklearn.cluster.cluster_optics_dbscan", "type": "cluster", "text": ["Performs DBSCAN extraction for an arbitrary epsilon.", "Extracting the clusters runs in linear time. Note that this results in labels_ which are close to a DBSCAN with similar settings and eps, only if eps is close to max_eps.", "Reachability distances calculated by OPTICS (reachability_)", "Distances at which points become core (core_distances_)", "OPTICS ordered point indices (ordering_)", "DBSCAN eps parameter. Must be set to < max_eps. Results will be close to DBSCAN algorithm if eps and max_eps are close to one another.", "The estimated labels."]}, {"name": "cluster.cluster_optics_xi()", "path": "modules/generated/sklearn.cluster.cluster_optics_xi#sklearn.cluster.cluster_optics_xi", "type": "cluster", "text": ["Automatically extract clusters according to the Xi-steep method.", "Reachability distances calculated by OPTICS (reachability_)", "Predecessors calculated by OPTICS.", "OPTICS ordered point indices (ordering_)", "The same as the min_samples given to OPTICS. Up and down steep regions can\u2019t have more then min_samples consecutive non-steep points. Expressed as an absolute number or a fraction of the number of samples (rounded to be at least 2).", "Minimum number of samples in an OPTICS cluster, expressed as an absolute number or a fraction of the number of samples (rounded to be at least 2). If None, the value of min_samples is used instead.", "Determines the minimum steepness on the reachability plot that constitutes a cluster boundary. For example, an upwards point in the reachability plot is defined by the ratio from one point to its successor being at most 1-xi.", "Correct clusters based on the calculated predecessors.", "The labels assigned to samples. Points which are not included in any cluster are labeled as -1.", "The list of clusters in the form of [start, end] in each row, with all indices inclusive. The clusters are ordered according to (end,\n-start) (ascending) so that larger clusters encompassing smaller clusters come after such nested smaller clusters. Since labels does not reflect the hierarchy, usually len(clusters) >\nnp.unique(labels)."]}, {"name": "cluster.compute_optics_graph()", "path": "modules/generated/sklearn.cluster.compute_optics_graph#sklearn.cluster.compute_optics_graph", "type": "cluster", "text": ["Computes the OPTICS reachability graph.", "Read more in the User Guide.", "A feature array, or array of distances between samples if metric=\u2019precomputed\u2019", "The number of samples in a neighborhood for a point to be considered as a core point. Expressed as an absolute number or a fraction of the number of samples (rounded to be at least 2).", "The maximum distance between two samples for one to be considered as in the neighborhood of the other. Default value of np.inf will identify clusters across all scales; reducing max_eps will result in shorter run times.", "Metric to use for distance computation. Any metric from scikit-learn or scipy.spatial.distance can be used.", "If metric is a callable function, it is called on each pair of instances (rows) and the resulting value recorded. The callable should take two arrays as input and return one value indicating the distance between them. This works for Scipy\u2019s metrics, but is less efficient than passing the metric name as a string. If metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix and must be square.", "Valid values for metric are:", "See the documentation for scipy.spatial.distance for details on these metrics.", "Parameter for the Minkowski metric from pairwise_distances. When p = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.", "Additional keyword arguments for the metric function.", "Algorithm used to compute the nearest neighbors:", "Note: fitting on sparse input will override the setting of this parameter, using brute force.", "Leaf size passed to BallTree or KDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.", "The number of parallel jobs to run for neighbors search. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "The cluster ordered list of sample indices.", "Distance at which each sample becomes a core point, indexed by object order. Points which will never be core have a distance of inf. Use clust.core_distances_[clust.ordering_] to access in cluster order.", "Reachability distances per sample, indexed by object order. Use clust.reachability_[clust.ordering_] to access in cluster order.", "Point that a sample was reached from, indexed by object order. Seed points have a predecessor of -1.", "Ankerst, Mihael, Markus M. Breunig, Hans-Peter Kriegel, and J\u00f6rg Sander. \u201cOPTICS: ordering points to identify the clustering structure.\u201d ACM SIGMOD Record 28, no. 2 (1999): 49-60."]}, {"name": "cluster.DBSCAN", "path": "modules/generated/sklearn.cluster.dbscan#sklearn.cluster.DBSCAN", "type": "cluster", "text": ["Perform DBSCAN clustering from vector array or distance matrix.", "DBSCAN - Density-Based Spatial Clustering of Applications with Noise. Finds core samples of high density and expands clusters from them. Good for data which contains clusters of similar density.", "Read more in the User Guide.", "The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. This is the most important DBSCAN parameter to choose appropriately for your data set and distance function.", "The number of samples (or total weight) in a neighborhood for a point to be considered as a core point. This includes the point itself.", "The metric to use when calculating distance between instances in a feature array. If metric is a string or callable, it must be one of the options allowed by sklearn.metrics.pairwise_distances for its metric parameter. If metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix and must be square. X may be a Glossary, in which case only \u201cnonzero\u201d elements may be considered neighbors for DBSCAN.", "New in version 0.17: metric precomputed to accept precomputed sparse matrix.", "Additional keyword arguments for the metric function.", "New in version 0.19.", "The algorithm to be used by the NearestNeighbors module to compute pointwise distances and find nearest neighbors. See NearestNeighbors module documentation for details.", "Leaf size passed to BallTree or cKDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.", "The power of the Minkowski metric to be used to calculate distance between points. If None, then p=2 (equivalent to the Euclidean distance).", "The number of parallel jobs to run. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Indices of core samples.", "Copy of each core sample found by training.", "Cluster labels for each point in the dataset given to fit(). Noisy samples are given the label -1.", "See also", "A similar clustering at multiple values of eps. Our implementation is optimized for memory usage.", "For an example, see examples/cluster/plot_dbscan.py.", "This implementation bulk-computes all neighborhood queries, which increases the memory complexity to O(n.d) where d is the average number of neighbors, while original DBSCAN had memory complexity O(n). It may attract a higher memory complexity when querying these nearest neighborhoods, depending on the algorithm.", "One way to avoid the query complexity is to pre-compute sparse neighborhoods in chunks using NearestNeighbors.radius_neighbors_graph with mode='distance', then using metric='precomputed' here.", "Another way to reduce memory and computation time is to remove (near-)duplicate points and use sample_weight instead.", "cluster.OPTICS provides a similar clustering with lower memory usage.", "Ester, M., H. P. Kriegel, J. Sander, and X. Xu, \u201cA Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise\u201d. In: Proceedings of the 2nd International Conference on Knowledge Discovery and Data Mining, Portland, OR, AAAI Press, pp. 226-231. 1996", "Schubert, E., Sander, J., Ester, M., Kriegel, H. P., & Xu, X. (2017). DBSCAN revisited, revisited: why and how you should (still) use DBSCAN. ACM Transactions on Database Systems (TODS), 42(3), 19.", "fit(X[, y, sample_weight])", "Perform DBSCAN clustering from features, or distance matrix.", "fit_predict(X[, y, sample_weight])", "Perform DBSCAN clustering from features or distance matrix, and return cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "set_params(**params)", "Set the parameters of this estimator.", "Perform DBSCAN clustering from features, or distance matrix.", "Training instances to cluster, or distances between instances if metric='precomputed'. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.", "Weight of each sample, such that a sample with a weight of at least min_samples is by itself a core sample; a sample with a negative weight may inhibit its eps-neighbor from being core. Note that weights are absolute, and default to 1.", "Not used, present here for API consistency by convention.", "Perform DBSCAN clustering from features or distance matrix, and return cluster labels.", "Training instances to cluster, or distances between instances if metric='precomputed'. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.", "Weight of each sample, such that a sample with a weight of at least min_samples is by itself a core sample; a sample with a negative weight may inhibit its eps-neighbor from being core. Note that weights are absolute, and default to 1.", "Not used, present here for API consistency by convention.", "Cluster labels. Noisy samples are given the label -1.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.DBSCAN()", "path": "modules/generated/sklearn.cluster.dbscan", "type": "cluster", "text": ["Perform DBSCAN clustering from vector array or distance matrix.", "DBSCAN - Density-Based Spatial Clustering of Applications with Noise. Finds core samples of high density and expands clusters from them. Good for data which contains clusters of similar density.", "Read more in the User Guide.", "The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. This is the most important DBSCAN parameter to choose appropriately for your data set and distance function.", "The number of samples (or total weight) in a neighborhood for a point to be considered as a core point. This includes the point itself.", "The metric to use when calculating distance between instances in a feature array. If metric is a string or callable, it must be one of the options allowed by sklearn.metrics.pairwise_distances for its metric parameter. If metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix and must be square. X may be a Glossary, in which case only \u201cnonzero\u201d elements may be considered neighbors for DBSCAN.", "New in version 0.17: metric precomputed to accept precomputed sparse matrix.", "Additional keyword arguments for the metric function.", "New in version 0.19.", "The algorithm to be used by the NearestNeighbors module to compute pointwise distances and find nearest neighbors. See NearestNeighbors module documentation for details.", "Leaf size passed to BallTree or cKDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.", "The power of the Minkowski metric to be used to calculate distance between points. If None, then p=2 (equivalent to the Euclidean distance).", "The number of parallel jobs to run. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Indices of core samples.", "Copy of each core sample found by training.", "Cluster labels for each point in the dataset given to fit(). Noisy samples are given the label -1.", "See also", "A similar clustering at multiple values of eps. Our implementation is optimized for memory usage.", "For an example, see examples/cluster/plot_dbscan.py.", "This implementation bulk-computes all neighborhood queries, which increases the memory complexity to O(n.d) where d is the average number of neighbors, while original DBSCAN had memory complexity O(n). It may attract a higher memory complexity when querying these nearest neighborhoods, depending on the algorithm.", "One way to avoid the query complexity is to pre-compute sparse neighborhoods in chunks using NearestNeighbors.radius_neighbors_graph with mode='distance', then using metric='precomputed' here.", "Another way to reduce memory and computation time is to remove (near-)duplicate points and use sample_weight instead.", "cluster.OPTICS provides a similar clustering with lower memory usage.", "Ester, M., H. P. Kriegel, J. Sander, and X. Xu, \u201cA Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise\u201d. In: Proceedings of the 2nd International Conference on Knowledge Discovery and Data Mining, Portland, OR, AAAI Press, pp. 226-231. 1996", "Schubert, E., Sander, J., Ester, M., Kriegel, H. P., & Xu, X. (2017). DBSCAN revisited, revisited: why and how you should (still) use DBSCAN. ACM Transactions on Database Systems (TODS), 42(3), 19.", "fit(X[, y, sample_weight])", "Perform DBSCAN clustering from features, or distance matrix.", "fit_predict(X[, y, sample_weight])", "Perform DBSCAN clustering from features or distance matrix, and return cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "set_params(**params)", "Set the parameters of this estimator.", "Perform DBSCAN clustering from features, or distance matrix.", "Training instances to cluster, or distances between instances if metric='precomputed'. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.", "Weight of each sample, such that a sample with a weight of at least min_samples is by itself a core sample; a sample with a negative weight may inhibit its eps-neighbor from being core. Note that weights are absolute, and default to 1.", "Not used, present here for API consistency by convention.", "Perform DBSCAN clustering from features or distance matrix, and return cluster labels.", "Training instances to cluster, or distances between instances if metric='precomputed'. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.", "Weight of each sample, such that a sample with a weight of at least min_samples is by itself a core sample; a sample with a negative weight may inhibit its eps-neighbor from being core. Note that weights are absolute, and default to 1.", "Not used, present here for API consistency by convention.", "Cluster labels. Noisy samples are given the label -1.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Demo of DBSCAN clustering algorithm", "Comparing different clustering algorithms on toy datasets"]}, {"name": "cluster.dbscan()", "path": "modules/generated/dbscan-function#sklearn.cluster.dbscan", "type": "cluster", "text": ["Perform DBSCAN clustering from vector array or distance matrix.", "Read more in the User Guide.", "A feature array, or array of distances between samples if metric='precomputed'.", "The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. This is the most important DBSCAN parameter to choose appropriately for your data set and distance function.", "The number of samples (or total weight) in a neighborhood for a point to be considered as a core point. This includes the point itself.", "The metric to use when calculating distance between instances in a feature array. If metric is a string or callable, it must be one of the options allowed by sklearn.metrics.pairwise_distances for its metric parameter. If metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix and must be square during fit. X may be a sparse graph, in which case only \u201cnonzero\u201d elements may be considered neighbors.", "Additional keyword arguments for the metric function.", "New in version 0.19.", "The algorithm to be used by the NearestNeighbors module to compute pointwise distances and find nearest neighbors. See NearestNeighbors module documentation for details.", "Leaf size passed to BallTree or cKDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.", "The power of the Minkowski metric to be used to calculate distance between points.", "Weight of each sample, such that a sample with a weight of at least min_samples is by itself a core sample; a sample with negative weight may inhibit its eps-neighbor from being core. Note that weights are absolute, and default to 1.", "The number of parallel jobs to run for neighbors search. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details. If precomputed distance are used, parallel execution is not available and thus n_jobs will have no effect.", "Indices of core samples.", "Cluster labels for each point. Noisy samples are given the label -1.", "See also", "An estimator interface for this clustering algorithm.", "A similar estimator interface clustering at multiple values of eps. Our implementation is optimized for memory usage.", "For an example, see examples/cluster/plot_dbscan.py.", "This implementation bulk-computes all neighborhood queries, which increases the memory complexity to O(n.d) where d is the average number of neighbors, while original DBSCAN had memory complexity O(n). It may attract a higher memory complexity when querying these nearest neighborhoods, depending on the algorithm.", "One way to avoid the query complexity is to pre-compute sparse neighborhoods in chunks using NearestNeighbors.radius_neighbors_graph with mode='distance', then using metric='precomputed' here.", "Another way to reduce memory and computation time is to remove (near-)duplicate points and use sample_weight instead.", "cluster.optics provides a similar clustering with lower memory usage.", "Ester, M., H. P. Kriegel, J. Sander, and X. Xu, \u201cA Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise\u201d. In: Proceedings of the 2nd International Conference on Knowledge Discovery and Data Mining, Portland, OR, AAAI Press, pp. 226-231. 1996", "Schubert, E., Sander, J., Ester, M., Kriegel, H. P., & Xu, X. (2017). DBSCAN revisited, revisited: why and how you should (still) use DBSCAN. ACM Transactions on Database Systems (TODS), 42(3), 19."]}, {"name": "cluster.DBSCAN.fit()", "path": "modules/generated/sklearn.cluster.dbscan#sklearn.cluster.DBSCAN.fit", "type": "cluster", "text": ["Perform DBSCAN clustering from features, or distance matrix.", "Training instances to cluster, or distances between instances if metric='precomputed'. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.", "Weight of each sample, such that a sample with a weight of at least min_samples is by itself a core sample; a sample with a negative weight may inhibit its eps-neighbor from being core. Note that weights are absolute, and default to 1.", "Not used, present here for API consistency by convention."]}, {"name": "cluster.DBSCAN.fit_predict()", "path": "modules/generated/sklearn.cluster.dbscan#sklearn.cluster.DBSCAN.fit_predict", "type": "cluster", "text": ["Perform DBSCAN clustering from features or distance matrix, and return cluster labels.", "Training instances to cluster, or distances between instances if metric='precomputed'. If a sparse matrix is provided, it will be converted into a sparse csr_matrix.", "Weight of each sample, such that a sample with a weight of at least min_samples is by itself a core sample; a sample with a negative weight may inhibit its eps-neighbor from being core. Note that weights are absolute, and default to 1.", "Not used, present here for API consistency by convention.", "Cluster labels. Noisy samples are given the label -1."]}, {"name": "cluster.DBSCAN.get_params()", "path": "modules/generated/sklearn.cluster.dbscan#sklearn.cluster.DBSCAN.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.DBSCAN.set_params()", "path": "modules/generated/sklearn.cluster.dbscan#sklearn.cluster.DBSCAN.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.estimate_bandwidth()", "path": "modules/generated/sklearn.cluster.estimate_bandwidth#sklearn.cluster.estimate_bandwidth", "type": "cluster", "text": ["Estimate the bandwidth to use with the mean-shift algorithm.", "That this function takes time at least quadratic in n_samples. For large datasets, it\u2019s wise to set that parameter to a small value.", "Input points.", "should be between [0, 1] 0.5 means that the median of all pairwise distances is used.", "The number of samples to use. If not given, all samples are used.", "The generator used to randomly select the samples from input points for bandwidth estimation. Use an int to make the randomness deterministic. See Glossary.", "The number of parallel jobs to run for neighbors search. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "The bandwidth parameter."]}, {"name": "cluster.FeatureAgglomeration", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration", "type": "cluster", "text": ["Agglomerate features.", "Similar to AgglomerativeClustering, but recursively merges features instead of samples.", "Read more in the User Guide.", "The number of clusters to find. It must be None if distance_threshold is not None.", "Metric used to compute the linkage. Can be \u201ceuclidean\u201d, \u201cl1\u201d, \u201cl2\u201d, \u201cmanhattan\u201d, \u201ccosine\u201d, or \u2018precomputed\u2019. If linkage is \u201cward\u201d, only \u201ceuclidean\u201d is accepted.", "Used to cache the output of the computation of the tree. By default, no caching is done. If a string is given, it is the path to the caching directory.", "Connectivity matrix. Defines for each feature the neighboring features following a given structure of the data. This can be a connectivity matrix itself or a callable that transforms the data into a connectivity matrix, such as derived from kneighbors_graph. Default is None, i.e, the hierarchical clustering algorithm is unstructured.", "Stop early the construction of the tree at n_clusters. This is useful to decrease computation time if the number of clusters is not small compared to the number of features. This option is useful only when specifying a connectivity matrix. Note also that when varying the number of clusters and using caching, it may be advantageous to compute the full tree. It must be True if distance_threshold is not None. By default compute_full_tree is \u201cauto\u201d, which is equivalent to True when distance_threshold is not None or that n_clusters is inferior to the maximum between 100 or 0.02 * n_samples. Otherwise, \u201cauto\u201d is equivalent to False.", "Which linkage criterion to use. The linkage criterion determines which distance to use between sets of features. The algorithm will merge the pairs of cluster that minimize this criterion.", "This combines the values of agglomerated features into a single value, and should accept an array of shape [M, N] and the keyword argument axis=1, and reduce it to an array of size [M].", "The linkage distance threshold above which, clusters will not be merged. If not None, n_clusters must be None and compute_full_tree must be True.", "New in version 0.21.", "Computes distances between clusters even if distance_threshold is not used. This can be used to make dendrogram visualization, but introduces a computational and memory overhead.", "New in version 0.24.", "The number of clusters found by the algorithm. If distance_threshold=None, it will be equal to the given n_clusters.", "cluster labels for each feature.", "Number of leaves in the hierarchical tree.", "The estimated number of connected components in the graph.", "New in version 0.21: n_connected_components_ was added to replace n_components_.", "The children of each non-leaf node. Values less than n_features correspond to leaves of the tree which are the original samples. A node i greater than or equal to n_features is a non-leaf node and has children children_[i - n_features]. Alternatively at the i-th iteration, children[i][0] and children[i][1] are merged to form node n_features + i", "Distances between nodes in the corresponding place in children_. Only computed if distance_threshold is used or compute_distances is set to True.", "fit(X[, y])", "Fit the hierarchical clustering on the data", "fit_transform(X[, y])", "Fit to data, then transform it.", "get_params([deep])", "Get parameters for this estimator.", "inverse_transform(Xred)", "Inverse the transformation.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X)", "Transform a new matrix using the built clustering", "Fit the hierarchical clustering on the data", "The data", "Fit the hierarchical clustering from features or distance matrix, and return cluster labels.", "Training instances to cluster, or distances between instances if affinity='precomputed'.", "Not used, present here for API consistency by convention.", "Cluster labels.", "Fit to data, then transform it.", "Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.", "Input samples.", "Target values (None for unsupervised transformations).", "Additional fit parameters.", "Transformed array.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Inverse the transformation. Return a vector of size nb_features with the values of Xred assigned to each group of features", "The values to be assigned to each cluster of samples", "A vector of size n_samples with the values of Xred assigned to each of the cluster of samples.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Transform a new matrix using the built clustering", "A M by N array of M observations in N dimensions or a length M array of M one-dimensional observations.", "The pooled values for each feature cluster."]}, {"name": "cluster.FeatureAgglomeration()", "path": "modules/generated/sklearn.cluster.featureagglomeration", "type": "cluster", "text": ["Agglomerate features.", "Similar to AgglomerativeClustering, but recursively merges features instead of samples.", "Read more in the User Guide.", "The number of clusters to find. It must be None if distance_threshold is not None.", "Metric used to compute the linkage. Can be \u201ceuclidean\u201d, \u201cl1\u201d, \u201cl2\u201d, \u201cmanhattan\u201d, \u201ccosine\u201d, or \u2018precomputed\u2019. If linkage is \u201cward\u201d, only \u201ceuclidean\u201d is accepted.", "Used to cache the output of the computation of the tree. By default, no caching is done. If a string is given, it is the path to the caching directory.", "Connectivity matrix. Defines for each feature the neighboring features following a given structure of the data. This can be a connectivity matrix itself or a callable that transforms the data into a connectivity matrix, such as derived from kneighbors_graph. Default is None, i.e, the hierarchical clustering algorithm is unstructured.", "Stop early the construction of the tree at n_clusters. This is useful to decrease computation time if the number of clusters is not small compared to the number of features. This option is useful only when specifying a connectivity matrix. Note also that when varying the number of clusters and using caching, it may be advantageous to compute the full tree. It must be True if distance_threshold is not None. By default compute_full_tree is \u201cauto\u201d, which is equivalent to True when distance_threshold is not None or that n_clusters is inferior to the maximum between 100 or 0.02 * n_samples. Otherwise, \u201cauto\u201d is equivalent to False.", "Which linkage criterion to use. The linkage criterion determines which distance to use between sets of features. The algorithm will merge the pairs of cluster that minimize this criterion.", "This combines the values of agglomerated features into a single value, and should accept an array of shape [M, N] and the keyword argument axis=1, and reduce it to an array of size [M].", "The linkage distance threshold above which, clusters will not be merged. If not None, n_clusters must be None and compute_full_tree must be True.", "New in version 0.21.", "Computes distances between clusters even if distance_threshold is not used. This can be used to make dendrogram visualization, but introduces a computational and memory overhead.", "New in version 0.24.", "The number of clusters found by the algorithm. If distance_threshold=None, it will be equal to the given n_clusters.", "cluster labels for each feature.", "Number of leaves in the hierarchical tree.", "The estimated number of connected components in the graph.", "New in version 0.21: n_connected_components_ was added to replace n_components_.", "The children of each non-leaf node. Values less than n_features correspond to leaves of the tree which are the original samples. A node i greater than or equal to n_features is a non-leaf node and has children children_[i - n_features]. Alternatively at the i-th iteration, children[i][0] and children[i][1] are merged to form node n_features + i", "Distances between nodes in the corresponding place in children_. Only computed if distance_threshold is used or compute_distances is set to True.", "fit(X[, y])", "Fit the hierarchical clustering on the data", "fit_transform(X[, y])", "Fit to data, then transform it.", "get_params([deep])", "Get parameters for this estimator.", "inverse_transform(Xred)", "Inverse the transformation.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X)", "Transform a new matrix using the built clustering", "Fit the hierarchical clustering on the data", "The data", "Fit the hierarchical clustering from features or distance matrix, and return cluster labels.", "Training instances to cluster, or distances between instances if affinity='precomputed'.", "Not used, present here for API consistency by convention.", "Cluster labels.", "Fit to data, then transform it.", "Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.", "Input samples.", "Target values (None for unsupervised transformations).", "Additional fit parameters.", "Transformed array.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Inverse the transformation. Return a vector of size nb_features with the values of Xred assigned to each group of features", "The values to be assigned to each cluster of samples", "A vector of size n_samples with the values of Xred assigned to each of the cluster of samples.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Transform a new matrix using the built clustering", "A M by N array of M observations in N dimensions or a length M array of M one-dimensional observations.", "The pooled values for each feature cluster.", "Feature agglomeration", "Feature agglomeration vs. univariate selection"]}, {"name": "cluster.FeatureAgglomeration.fit()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.fit", "type": "cluster", "text": ["Fit the hierarchical clustering on the data", "The data"]}, {"name": "cluster.FeatureAgglomeration.fit_predict()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.fit_predict", "type": "cluster", "text": ["Fit the hierarchical clustering from features or distance matrix, and return cluster labels.", "Training instances to cluster, or distances between instances if affinity='precomputed'.", "Not used, present here for API consistency by convention.", "Cluster labels."]}, {"name": "cluster.FeatureAgglomeration.fit_transform()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.fit_transform", "type": "cluster", "text": ["Fit to data, then transform it.", "Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X.", "Input samples.", "Target values (None for unsupervised transformations).", "Additional fit parameters.", "Transformed array."]}, {"name": "cluster.FeatureAgglomeration.get_params()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.FeatureAgglomeration.inverse_transform()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.inverse_transform", "type": "cluster", "text": ["Inverse the transformation. Return a vector of size nb_features with the values of Xred assigned to each group of features", "The values to be assigned to each cluster of samples", "A vector of size n_samples with the values of Xred assigned to each of the cluster of samples."]}, {"name": "cluster.FeatureAgglomeration.set_params()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.FeatureAgglomeration.transform()", "path": "modules/generated/sklearn.cluster.featureagglomeration#sklearn.cluster.FeatureAgglomeration.transform", "type": "cluster", "text": ["Transform a new matrix using the built clustering", "A M by N array of M observations in N dimensions or a length M array of M one-dimensional observations.", "The pooled values for each feature cluster."]}, {"name": "cluster.KMeans", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans", "type": "cluster", "text": ["K-Means clustering.", "Read more in the User Guide.", "The number of clusters to form as well as the number of centroids to generate.", "Method for initialization:", "\u2018k-means++\u2019 : selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. See section Notes in k_init for more details.", "\u2018random\u2019: choose n_clusters observations (rows) at random from data for the initial centroids.", "If an array is passed, it should be of shape (n_clusters, n_features) and gives the initial centers.", "If a callable is passed, it should take arguments X, n_clusters and a random state and return an initialization.", "Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia.", "Maximum number of iterations of the k-means algorithm for a single run.", "Relative tolerance with regards to Frobenius norm of the difference in the cluster centers of two consecutive iterations to declare convergence.", "Precompute distances (faster but takes more memory).", "\u2018auto\u2019 : do not precompute distances if n_samples * n_clusters > 12 million. This corresponds to about 100MB overhead per job using double precision.", "True : always precompute distances.", "False : never precompute distances.", "Deprecated since version 0.23: \u2018precompute_distances\u2019 was deprecated in version 0.22 and will be removed in 1.0 (renaming of 0.25). It has no effect.", "Verbosity mode.", "Determines random number generation for centroid initialization. Use an int to make the randomness deterministic. See Glossary.", "When pre-computing distances it is more numerically accurate to center the data first. If copy_x is True (default), then the original data is not modified. If False, the original data is modified, and put back before the function returns, but small numerical differences may be introduced by subtracting and then adding the data mean. Note that if the original data is not C-contiguous, a copy will be made even if copy_x is False. If the original data is sparse, but not in CSR format, a copy will be made even if copy_x is False.", "The number of OpenMP threads to use for the computation. Parallelism is sample-wise on the main cython loop which assigns each sample to its closest center.", "None or -1 means using all processors.", "Deprecated since version 0.23: n_jobs was deprecated in version 0.23 and will be removed in 1.0 (renaming of 0.25).", "K-means algorithm to use. The classical EM-style algorithm is \u201cfull\u201d. The \u201celkan\u201d variation is more efficient on data with well-defined clusters, by using the triangle inequality. However it\u2019s more memory intensive due to the allocation of an extra array of shape (n_samples, n_clusters).", "For now \u201cauto\u201d (kept for backward compatibiliy) chooses \u201celkan\u201d but it might change in the future for a better heuristic.", "Changed in version 0.18: Added Elkan algorithm", "Coordinates of cluster centers. If the algorithm stops before fully converging (see tol and max_iter), these will not be consistent with labels_.", "Labels of each point", "Sum of squared distances of samples to their closest cluster center.", "Number of iterations run.", "See also", "Alternative online implementation that does incremental updates of the centers positions using mini-batches. For large scale learning (say n_samples > 10k) MiniBatchKMeans is probably much faster than the default batch implementation.", "The k-means problem is solved using either Lloyd\u2019s or Elkan\u2019s algorithm.", "The average complexity is given by O(k n T), were n is the number of samples and T is the number of iteration.", "The worst case complexity is given by O(n^(k+2/p)) with n = n_samples, p = n_features. (D. Arthur and S. Vassilvitskii, \u2018How slow is the k-means method?\u2019 SoCG2006)", "In practice, the k-means algorithm is very fast (one of the fastest clustering algorithms available), but it falls in local minima. That\u2019s why it can be useful to restart it several times.", "If the algorithm stops before fully converging (because of tol or max_iter), labels_ and cluster_centers_ will not be consistent, i.e. the cluster_centers_ will not be the means of the points in each cluster. Also, the estimator will reassign labels_ after the last iteration to make labels_ consistent with predict on the training set.", "fit(X[, y, sample_weight])", "Compute k-means clustering.", "fit_predict(X[, y, sample_weight])", "Compute cluster centers and predict cluster index for each sample.", "fit_transform(X[, y, sample_weight])", "Compute clustering and transform X to cluster-distance space.", "get_params([deep])", "Get parameters for this estimator.", "predict(X[, sample_weight])", "Predict the closest cluster each sample in X belongs to.", "score(X[, y, sample_weight])", "Opposite of the value of X on the K-means objective.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X)", "Transform X to a cluster-distance space.", "Compute k-means clustering.", "Training instances to cluster. It must be noted that the data will be converted to C ordering, which will cause a memory copy if the given data is not C-contiguous. If a sparse matrix is passed, a copy will be made if it\u2019s not in CSR format.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "New in version 0.20.", "Fitted estimator.", "Compute cluster centers and predict cluster index for each sample.", "Convenience method; equivalent to calling fit(X) followed by predict(X).", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Index of the cluster each sample belongs to.", "Compute clustering and transform X to cluster-distance space.", "Equivalent to fit(X).transform(X), but more efficiently implemented.", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "X transformed in the new space.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Predict the closest cluster each sample in X belongs to.", "In the vector quantization literature, cluster_centers_ is called the code book and each value returned by predict is the index of the closest code in the code book.", "New data to predict.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Index of the cluster each sample belongs to.", "Opposite of the value of X on the K-means objective.", "New data.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Opposite of the value of X on the K-means objective.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Transform X to a cluster-distance space.", "In the new space, each dimension is the distance to the cluster centers. Note that even if X is sparse, the array returned by transform will typically be dense.", "New data to transform.", "X transformed in the new space."]}, {"name": "cluster.KMeans()", "path": "modules/generated/sklearn.cluster.kmeans", "type": "cluster", "text": ["K-Means clustering.", "Read more in the User Guide.", "The number of clusters to form as well as the number of centroids to generate.", "Method for initialization:", "\u2018k-means++\u2019 : selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. See section Notes in k_init for more details.", "\u2018random\u2019: choose n_clusters observations (rows) at random from data for the initial centroids.", "If an array is passed, it should be of shape (n_clusters, n_features) and gives the initial centers.", "If a callable is passed, it should take arguments X, n_clusters and a random state and return an initialization.", "Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia.", "Maximum number of iterations of the k-means algorithm for a single run.", "Relative tolerance with regards to Frobenius norm of the difference in the cluster centers of two consecutive iterations to declare convergence.", "Precompute distances (faster but takes more memory).", "\u2018auto\u2019 : do not precompute distances if n_samples * n_clusters > 12 million. This corresponds to about 100MB overhead per job using double precision.", "True : always precompute distances.", "False : never precompute distances.", "Deprecated since version 0.23: \u2018precompute_distances\u2019 was deprecated in version 0.22 and will be removed in 1.0 (renaming of 0.25). It has no effect.", "Verbosity mode.", "Determines random number generation for centroid initialization. Use an int to make the randomness deterministic. See Glossary.", "When pre-computing distances it is more numerically accurate to center the data first. If copy_x is True (default), then the original data is not modified. If False, the original data is modified, and put back before the function returns, but small numerical differences may be introduced by subtracting and then adding the data mean. Note that if the original data is not C-contiguous, a copy will be made even if copy_x is False. If the original data is sparse, but not in CSR format, a copy will be made even if copy_x is False.", "The number of OpenMP threads to use for the computation. Parallelism is sample-wise on the main cython loop which assigns each sample to its closest center.", "None or -1 means using all processors.", "Deprecated since version 0.23: n_jobs was deprecated in version 0.23 and will be removed in 1.0 (renaming of 0.25).", "K-means algorithm to use. The classical EM-style algorithm is \u201cfull\u201d. The \u201celkan\u201d variation is more efficient on data with well-defined clusters, by using the triangle inequality. However it\u2019s more memory intensive due to the allocation of an extra array of shape (n_samples, n_clusters).", "For now \u201cauto\u201d (kept for backward compatibiliy) chooses \u201celkan\u201d but it might change in the future for a better heuristic.", "Changed in version 0.18: Added Elkan algorithm", "Coordinates of cluster centers. If the algorithm stops before fully converging (see tol and max_iter), these will not be consistent with labels_.", "Labels of each point", "Sum of squared distances of samples to their closest cluster center.", "Number of iterations run.", "See also", "Alternative online implementation that does incremental updates of the centers positions using mini-batches. For large scale learning (say n_samples > 10k) MiniBatchKMeans is probably much faster than the default batch implementation.", "The k-means problem is solved using either Lloyd\u2019s or Elkan\u2019s algorithm.", "The average complexity is given by O(k n T), were n is the number of samples and T is the number of iteration.", "The worst case complexity is given by O(n^(k+2/p)) with n = n_samples, p = n_features. (D. Arthur and S. Vassilvitskii, \u2018How slow is the k-means method?\u2019 SoCG2006)", "In practice, the k-means algorithm is very fast (one of the fastest clustering algorithms available), but it falls in local minima. That\u2019s why it can be useful to restart it several times.", "If the algorithm stops before fully converging (because of tol or max_iter), labels_ and cluster_centers_ will not be consistent, i.e. the cluster_centers_ will not be the means of the points in each cluster. Also, the estimator will reassign labels_ after the last iteration to make labels_ consistent with predict on the training set.", "fit(X[, y, sample_weight])", "Compute k-means clustering.", "fit_predict(X[, y, sample_weight])", "Compute cluster centers and predict cluster index for each sample.", "fit_transform(X[, y, sample_weight])", "Compute clustering and transform X to cluster-distance space.", "get_params([deep])", "Get parameters for this estimator.", "predict(X[, sample_weight])", "Predict the closest cluster each sample in X belongs to.", "score(X[, y, sample_weight])", "Opposite of the value of X on the K-means objective.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X)", "Transform X to a cluster-distance space.", "Compute k-means clustering.", "Training instances to cluster. It must be noted that the data will be converted to C ordering, which will cause a memory copy if the given data is not C-contiguous. If a sparse matrix is passed, a copy will be made if it\u2019s not in CSR format.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "New in version 0.20.", "Fitted estimator.", "Compute cluster centers and predict cluster index for each sample.", "Convenience method; equivalent to calling fit(X) followed by predict(X).", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Index of the cluster each sample belongs to.", "Compute clustering and transform X to cluster-distance space.", "Equivalent to fit(X).transform(X), but more efficiently implemented.", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "X transformed in the new space.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Predict the closest cluster each sample in X belongs to.", "In the vector quantization literature, cluster_centers_ is called the code book and each value returned by predict is the index of the closest code in the code book.", "New data to predict.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Index of the cluster each sample belongs to.", "Opposite of the value of X on the K-means objective.", "New data.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Opposite of the value of X on the K-means objective.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Transform X to a cluster-distance space.", "In the new space, each dimension is the distance to the cluster centers. Note that even if X is sparse, the array returned by transform will typically be dense.", "New data to transform.", "X transformed in the new space.", "Release Highlights for scikit-learn 0.23", "Demonstration of k-means assumptions", "Vector Quantization Example", "K-means Clustering", "Color Quantization using K-Means", "Empirical evaluation of the impact of k-means initialization", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "A demo of K-Means clustering on the handwritten digits data", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Clustering text documents using k-means"]}, {"name": "cluster.KMeans.fit()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.fit", "type": "cluster", "text": ["Compute k-means clustering.", "Training instances to cluster. It must be noted that the data will be converted to C ordering, which will cause a memory copy if the given data is not C-contiguous. If a sparse matrix is passed, a copy will be made if it\u2019s not in CSR format.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "New in version 0.20.", "Fitted estimator."]}, {"name": "cluster.KMeans.fit_predict()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.fit_predict", "type": "cluster", "text": ["Compute cluster centers and predict cluster index for each sample.", "Convenience method; equivalent to calling fit(X) followed by predict(X).", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Index of the cluster each sample belongs to."]}, {"name": "cluster.KMeans.fit_transform()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.fit_transform", "type": "cluster", "text": ["Compute clustering and transform X to cluster-distance space.", "Equivalent to fit(X).transform(X), but more efficiently implemented.", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "X transformed in the new space."]}, {"name": "cluster.KMeans.get_params()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.KMeans.predict()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.predict", "type": "cluster", "text": ["Predict the closest cluster each sample in X belongs to.", "In the vector quantization literature, cluster_centers_ is called the code book and each value returned by predict is the index of the closest code in the code book.", "New data to predict.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Index of the cluster each sample belongs to."]}, {"name": "cluster.KMeans.score()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.score", "type": "cluster", "text": ["Opposite of the value of X on the K-means objective.", "New data.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Opposite of the value of X on the K-means objective."]}, {"name": "cluster.KMeans.set_params()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.KMeans.transform()", "path": "modules/generated/sklearn.cluster.kmeans#sklearn.cluster.KMeans.transform", "type": "cluster", "text": ["Transform X to a cluster-distance space.", "In the new space, each dimension is the distance to the cluster centers. Note that even if X is sparse, the array returned by transform will typically be dense.", "New data to transform.", "X transformed in the new space."]}, {"name": "cluster.kmeans_plusplus()", "path": "modules/generated/sklearn.cluster.kmeans_plusplus#sklearn.cluster.kmeans_plusplus", "type": "cluster", "text": ["Init n_clusters seeds according to k-means++", "New in version 0.24.", "The data to pick seeds from.", "The number of centroids to initialize", "Squared Euclidean norm of each data point.", "Determines random number generation for centroid initialization. Pass an int for reproducible output across multiple function calls. See Glossary.", "The number of seeding trials for each center (except the first), of which the one reducing inertia the most is greedily chosen. Set to None to make the number of trials depend logarithmically on the number of seeds (2+log(k)).", "The inital centers for k-means.", "The index location of the chosen centers in the data array X. For a given index and center, X[index] = center.", "Selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. see: Arthur, D. and Vassilvitskii, S. \u201ck-means++: the advantages of careful seeding\u201d. ACM-SIAM symposium on Discrete algorithms. 2007"]}, {"name": "cluster.k_means()", "path": "modules/generated/sklearn.cluster.k_means#sklearn.cluster.k_means", "type": "cluster", "text": ["K-means clustering algorithm.", "Read more in the User Guide.", "The observations to cluster. It must be noted that the data will be converted to C ordering, which will cause a memory copy if the given data is not C-contiguous.", "The number of clusters to form as well as the number of centroids to generate.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Method for initialization:", "\u2018k-means++\u2019 : selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. See section Notes in k_init for more details.", "\u2018random\u2019: choose n_clusters observations (rows) at random from data for the initial centroids.", "If an array is passed, it should be of shape (n_clusters, n_features) and gives the initial centers.", "If a callable is passed, it should take arguments X, n_clusters and a random state and return an initialization.", "Precompute distances (faster but takes more memory).", "\u2018auto\u2019 : do not precompute distances if n_samples * n_clusters > 12 million. This corresponds to about 100MB overhead per job using double precision.", "True : always precompute distances", "False : never precompute distances", "Deprecated since version 0.23: \u2018precompute_distances\u2019 was deprecated in version 0.23 and will be removed in 1.0 (renaming of 0.25). It has no effect.", "Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia.", "Maximum number of iterations of the k-means algorithm to run.", "Verbosity mode.", "Relative tolerance with regards to Frobenius norm of the difference in the cluster centers of two consecutive iterations to declare convergence.", "Determines random number generation for centroid initialization. Use an int to make the randomness deterministic. See Glossary.", "When pre-computing distances it is more numerically accurate to center the data first. If copy_x is True (default), then the original data is not modified. If False, the original data is modified, and put back before the function returns, but small numerical differences may be introduced by subtracting and then adding the data mean. Note that if the original data is not C-contiguous, a copy will be made even if copy_x is False. If the original data is sparse, but not in CSR format, a copy will be made even if copy_x is False.", "The number of OpenMP threads to use for the computation. Parallelism is sample-wise on the main cython loop which assigns each sample to its closest center.", "None or -1 means using all processors.", "Deprecated since version 0.23: n_jobs was deprecated in version 0.23 and will be removed in 1.0 (renaming of 0.25).", "K-means algorithm to use. The classical EM-style algorithm is \u201cfull\u201d. The \u201celkan\u201d variation is more efficient on data with well-defined clusters, by using the triangle inequality. However it\u2019s more memory intensive due to the allocation of an extra array of shape (n_samples, n_clusters).", "For now \u201cauto\u201d (kept for backward compatibiliy) chooses \u201celkan\u201d but it might change in the future for a better heuristic.", "Whether or not to return the number of iterations.", "Centroids found at the last iteration of k-means.", "label[i] is the code or index of the centroid the i\u2019th observation is closest to.", "The final value of the inertia criterion (sum of squared distances to the closest centroid for all observations in the training set).", "Number of iterations corresponding to the best results. Returned only if return_n_iter is set to True."]}, {"name": "cluster.MeanShift", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift", "type": "cluster", "text": ["Mean shift clustering using a flat kernel.", "Mean shift clustering aims to discover \u201cblobs\u201d in a smooth density of samples. It is a centroid-based algorithm, which works by updating candidates for centroids to be the mean of the points within a given region. These candidates are then filtered in a post-processing stage to eliminate near-duplicates to form the final set of centroids.", "Seeding is performed using a binning technique for scalability.", "Read more in the User Guide.", "Bandwidth used in the RBF kernel.", "If not given, the bandwidth is estimated using sklearn.cluster.estimate_bandwidth; see the documentation for that function for hints on scalability (see also the Notes, below).", "Seeds used to initialize kernels. If not set, the seeds are calculated by clustering.get_bin_seeds with bandwidth as the grid size and default values for other parameters.", "If true, initial kernel locations are not locations of all points, but rather the location of the discretized version of points, where points are binned onto a grid whose coarseness corresponds to the bandwidth. Setting this option to True will speed up the algorithm because fewer seeds will be initialized. The default value is False. Ignored if seeds argument is not None.", "To speed up the algorithm, accept only those bins with at least min_bin_freq points as seeds.", "If true, then all points are clustered, even those orphans that are not within any kernel. Orphans are assigned to the nearest kernel. If false, then orphans are given cluster label -1.", "The number of jobs to use for the computation. This works by computing each of the n_init runs in parallel.", "None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Maximum number of iterations, per seed point before the clustering operation terminates (for that seed point), if has not converged yet.", "New in version 0.22.", "Coordinates of cluster centers.", "Labels of each point.", "Maximum number of iterations performed on each seed.", "New in version 0.22.", "Scalability:", "Because this implementation uses a flat kernel and a Ball Tree to look up members of each kernel, the complexity will tend towards O(T*n*log(n)) in lower dimensions, with n the number of samples and T the number of points. In higher dimensions the complexity will tend towards O(T*n^2).", "Scalability can be boosted by using fewer seeds, for example by using a higher value of min_bin_freq in the get_bin_seeds function.", "Note that the estimate_bandwidth function is much less scalable than the mean shift algorithm and will be the bottleneck if it is used.", "Dorin Comaniciu and Peter Meer, \u201cMean Shift: A robust approach toward feature space analysis\u201d. IEEE Transactions on Pattern Analysis and Machine Intelligence. 2002. pp. 603-619.", "fit(X[, y])", "Perform clustering.", "fit_predict(X[, y])", "Perform clustering on X and returns cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "predict(X)", "Predict the closest cluster each sample in X belongs to.", "set_params(**params)", "Set the parameters of this estimator.", "Perform clustering.", "Samples to cluster.", "Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Predict the closest cluster each sample in X belongs to.", "New data to predict.", "Index of the cluster each sample belongs to.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.MeanShift()", "path": "modules/generated/sklearn.cluster.meanshift", "type": "cluster", "text": ["Mean shift clustering using a flat kernel.", "Mean shift clustering aims to discover \u201cblobs\u201d in a smooth density of samples. It is a centroid-based algorithm, which works by updating candidates for centroids to be the mean of the points within a given region. These candidates are then filtered in a post-processing stage to eliminate near-duplicates to form the final set of centroids.", "Seeding is performed using a binning technique for scalability.", "Read more in the User Guide.", "Bandwidth used in the RBF kernel.", "If not given, the bandwidth is estimated using sklearn.cluster.estimate_bandwidth; see the documentation for that function for hints on scalability (see also the Notes, below).", "Seeds used to initialize kernels. If not set, the seeds are calculated by clustering.get_bin_seeds with bandwidth as the grid size and default values for other parameters.", "If true, initial kernel locations are not locations of all points, but rather the location of the discretized version of points, where points are binned onto a grid whose coarseness corresponds to the bandwidth. Setting this option to True will speed up the algorithm because fewer seeds will be initialized. The default value is False. Ignored if seeds argument is not None.", "To speed up the algorithm, accept only those bins with at least min_bin_freq points as seeds.", "If true, then all points are clustered, even those orphans that are not within any kernel. Orphans are assigned to the nearest kernel. If false, then orphans are given cluster label -1.", "The number of jobs to use for the computation. This works by computing each of the n_init runs in parallel.", "None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Maximum number of iterations, per seed point before the clustering operation terminates (for that seed point), if has not converged yet.", "New in version 0.22.", "Coordinates of cluster centers.", "Labels of each point.", "Maximum number of iterations performed on each seed.", "New in version 0.22.", "Scalability:", "Because this implementation uses a flat kernel and a Ball Tree to look up members of each kernel, the complexity will tend towards O(T*n*log(n)) in lower dimensions, with n the number of samples and T the number of points. In higher dimensions the complexity will tend towards O(T*n^2).", "Scalability can be boosted by using fewer seeds, for example by using a higher value of min_bin_freq in the get_bin_seeds function.", "Note that the estimate_bandwidth function is much less scalable than the mean shift algorithm and will be the bottleneck if it is used.", "Dorin Comaniciu and Peter Meer, \u201cMean Shift: A robust approach toward feature space analysis\u201d. IEEE Transactions on Pattern Analysis and Machine Intelligence. 2002. pp. 603-619.", "fit(X[, y])", "Perform clustering.", "fit_predict(X[, y])", "Perform clustering on X and returns cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "predict(X)", "Predict the closest cluster each sample in X belongs to.", "set_params(**params)", "Set the parameters of this estimator.", "Perform clustering.", "Samples to cluster.", "Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Predict the closest cluster each sample in X belongs to.", "New data to predict.", "Index of the cluster each sample belongs to.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "A demo of the mean-shift clustering algorithm", "Comparing different clustering algorithms on toy datasets"]}, {"name": "cluster.MeanShift.fit()", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift.fit", "type": "cluster", "text": ["Perform clustering.", "Samples to cluster."]}, {"name": "cluster.MeanShift.fit_predict()", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift.fit_predict", "type": "cluster", "text": ["Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels."]}, {"name": "cluster.MeanShift.get_params()", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.MeanShift.predict()", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift.predict", "type": "cluster", "text": ["Predict the closest cluster each sample in X belongs to.", "New data to predict.", "Index of the cluster each sample belongs to."]}, {"name": "cluster.MeanShift.set_params()", "path": "modules/generated/sklearn.cluster.meanshift#sklearn.cluster.MeanShift.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.mean_shift()", "path": "modules/generated/sklearn.cluster.mean_shift#sklearn.cluster.mean_shift", "type": "cluster", "text": ["Perform mean shift clustering of data using a flat kernel.", "Read more in the User Guide.", "Input data.", "Kernel bandwidth.", "If bandwidth is not given, it is determined using a heuristic based on the median of all pairwise distances. This will take quadratic time in the number of samples. The sklearn.cluster.estimate_bandwidth function can be used to do this more efficiently.", "Point used as initial kernel locations. If None and bin_seeding=False, each data point is used as a seed. If None and bin_seeding=True, see bin_seeding.", "If true, initial kernel locations are not locations of all points, but rather the location of the discretized version of points, where points are binned onto a grid whose coarseness corresponds to the bandwidth. Setting this option to True will speed up the algorithm because fewer seeds will be initialized. Ignored if seeds argument is not None.", "To speed up the algorithm, accept only those bins with at least min_bin_freq points as seeds.", "If true, then all points are clustered, even those orphans that are not within any kernel. Orphans are assigned to the nearest kernel. If false, then orphans are given cluster label -1.", "Maximum number of iterations, per seed point before the clustering operation terminates (for that seed point), if has not converged yet.", "The number of jobs to use for the computation. This works by computing each of the n_init runs in parallel.", "None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "New in version 0.17: Parallel Execution using n_jobs.", "Coordinates of cluster centers.", "Cluster labels for each point.", "For an example, see examples/cluster/plot_mean_shift.py."]}, {"name": "cluster.MiniBatchKMeans", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans", "type": "cluster", "text": ["Mini-Batch K-Means clustering.", "Read more in the User Guide.", "The number of clusters to form as well as the number of centroids to generate.", "Method for initialization:", "\u2018k-means++\u2019 : selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. See section Notes in k_init for more details.", "\u2018random\u2019: choose n_clusters observations (rows) at random from data for the initial centroids.", "If an array is passed, it should be of shape (n_clusters, n_features) and gives the initial centers.", "If a callable is passed, it should take arguments X, n_clusters and a random state and return an initialization.", "Maximum number of iterations over the complete dataset before stopping independently of any early stopping criterion heuristics.", "Size of the mini batches.", "Verbosity mode.", "Compute label assignment and inertia for the complete dataset once the minibatch optimization has converged in fit.", "Determines random number generation for centroid initialization and random reassignment. Use an int to make the randomness deterministic. See Glossary.", "Control early stopping based on the relative center changes as measured by a smoothed, variance-normalized of the mean center squared position changes. This early stopping heuristics is closer to the one used for the batch variant of the algorithms but induces a slight computational and memory overhead over the inertia heuristic.", "To disable convergence detection based on normalized center change, set tol to 0.0 (default).", "Control early stopping based on the consecutive number of mini batches that does not yield an improvement on the smoothed inertia.", "To disable convergence detection based on inertia, set max_no_improvement to None.", "Number of samples to randomly sample for speeding up the initialization (sometimes at the expense of accuracy): the only algorithm is initialized by running a batch KMeans on a random subset of the data. This needs to be larger than n_clusters.", "If None, init_size= 3 * batch_size.", "Number of random initializations that are tried. In contrast to KMeans, the algorithm is only run once, using the best of the n_init initializations as measured by inertia.", "Control the fraction of the maximum number of counts for a center to be reassigned. A higher value means that low count centers are more easily reassigned, which means that the model will take longer to converge, but should converge in a better clustering.", "Coordinates of cluster centers.", "Labels of each point (if compute_labels is set to True).", "The value of the inertia criterion associated with the chosen partition (if compute_labels is set to True). The inertia is defined as the sum of square distances of samples to their nearest neighbor.", "Number of batches processed.", "Weigth sum of each cluster.", "Deprecated since version 0.24: This attribute is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26).", "The effective number of samples used for the initialization.", "Deprecated since version 0.24: This attribute is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26).", "See also", "The classic implementation of the clustering method based on the Lloyd\u2019s algorithm. It consumes the whole set of input data at each iteration.", "See https://www.eecs.tufts.edu/~dsculley/papers/fastkmeans.pdf", "fit(X[, y, sample_weight])", "Compute the centroids on X by chunking it into mini-batches.", "fit_predict(X[, y, sample_weight])", "Compute cluster centers and predict cluster index for each sample.", "fit_transform(X[, y, sample_weight])", "Compute clustering and transform X to cluster-distance space.", "get_params([deep])", "Get parameters for this estimator.", "partial_fit(X[, y, sample_weight])", "Update k means estimate on a single mini-batch X.", "predict(X[, sample_weight])", "Predict the closest cluster each sample in X belongs to.", "score(X[, y, sample_weight])", "Opposite of the value of X on the K-means objective.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X)", "Transform X to a cluster-distance space.", "Compute the centroids on X by chunking it into mini-batches.", "Training instances to cluster. It must be noted that the data will be converted to C ordering, which will cause a memory copy if the given data is not C-contiguous.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight (default: None).", "New in version 0.20.", "Compute cluster centers and predict cluster index for each sample.", "Convenience method; equivalent to calling fit(X) followed by predict(X).", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Index of the cluster each sample belongs to.", "Compute clustering and transform X to cluster-distance space.", "Equivalent to fit(X).transform(X), but more efficiently implemented.", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "X transformed in the new space.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Update k means estimate on a single mini-batch X.", "Coordinates of the data points to cluster. It must be noted that X will be copied if it is not C-contiguous.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight (default: None).", "Predict the closest cluster each sample in X belongs to.", "In the vector quantization literature, cluster_centers_ is called the code book and each value returned by predict is the index of the closest code in the code book.", "New data to predict.", "The weights for each observation in X. If None, all observations are assigned equal weight (default: None).", "Index of the cluster each sample belongs to.", "Opposite of the value of X on the K-means objective.", "New data.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Opposite of the value of X on the K-means objective.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Transform X to a cluster-distance space.", "In the new space, each dimension is the distance to the cluster centers. Note that even if X is sparse, the array returned by transform will typically be dense.", "New data to transform.", "X transformed in the new space."]}, {"name": "cluster.MiniBatchKMeans()", "path": "modules/generated/sklearn.cluster.minibatchkmeans", "type": "cluster", "text": ["Mini-Batch K-Means clustering.", "Read more in the User Guide.", "The number of clusters to form as well as the number of centroids to generate.", "Method for initialization:", "\u2018k-means++\u2019 : selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. See section Notes in k_init for more details.", "\u2018random\u2019: choose n_clusters observations (rows) at random from data for the initial centroids.", "If an array is passed, it should be of shape (n_clusters, n_features) and gives the initial centers.", "If a callable is passed, it should take arguments X, n_clusters and a random state and return an initialization.", "Maximum number of iterations over the complete dataset before stopping independently of any early stopping criterion heuristics.", "Size of the mini batches.", "Verbosity mode.", "Compute label assignment and inertia for the complete dataset once the minibatch optimization has converged in fit.", "Determines random number generation for centroid initialization and random reassignment. Use an int to make the randomness deterministic. See Glossary.", "Control early stopping based on the relative center changes as measured by a smoothed, variance-normalized of the mean center squared position changes. This early stopping heuristics is closer to the one used for the batch variant of the algorithms but induces a slight computational and memory overhead over the inertia heuristic.", "To disable convergence detection based on normalized center change, set tol to 0.0 (default).", "Control early stopping based on the consecutive number of mini batches that does not yield an improvement on the smoothed inertia.", "To disable convergence detection based on inertia, set max_no_improvement to None.", "Number of samples to randomly sample for speeding up the initialization (sometimes at the expense of accuracy): the only algorithm is initialized by running a batch KMeans on a random subset of the data. This needs to be larger than n_clusters.", "If None, init_size= 3 * batch_size.", "Number of random initializations that are tried. In contrast to KMeans, the algorithm is only run once, using the best of the n_init initializations as measured by inertia.", "Control the fraction of the maximum number of counts for a center to be reassigned. A higher value means that low count centers are more easily reassigned, which means that the model will take longer to converge, but should converge in a better clustering.", "Coordinates of cluster centers.", "Labels of each point (if compute_labels is set to True).", "The value of the inertia criterion associated with the chosen partition (if compute_labels is set to True). The inertia is defined as the sum of square distances of samples to their nearest neighbor.", "Number of batches processed.", "Weigth sum of each cluster.", "Deprecated since version 0.24: This attribute is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26).", "The effective number of samples used for the initialization.", "Deprecated since version 0.24: This attribute is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26).", "See also", "The classic implementation of the clustering method based on the Lloyd\u2019s algorithm. It consumes the whole set of input data at each iteration.", "See https://www.eecs.tufts.edu/~dsculley/papers/fastkmeans.pdf", "fit(X[, y, sample_weight])", "Compute the centroids on X by chunking it into mini-batches.", "fit_predict(X[, y, sample_weight])", "Compute cluster centers and predict cluster index for each sample.", "fit_transform(X[, y, sample_weight])", "Compute clustering and transform X to cluster-distance space.", "get_params([deep])", "Get parameters for this estimator.", "partial_fit(X[, y, sample_weight])", "Update k means estimate on a single mini-batch X.", "predict(X[, sample_weight])", "Predict the closest cluster each sample in X belongs to.", "score(X[, y, sample_weight])", "Opposite of the value of X on the K-means objective.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X)", "Transform X to a cluster-distance space.", "Compute the centroids on X by chunking it into mini-batches.", "Training instances to cluster. It must be noted that the data will be converted to C ordering, which will cause a memory copy if the given data is not C-contiguous.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight (default: None).", "New in version 0.20.", "Compute cluster centers and predict cluster index for each sample.", "Convenience method; equivalent to calling fit(X) followed by predict(X).", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Index of the cluster each sample belongs to.", "Compute clustering and transform X to cluster-distance space.", "Equivalent to fit(X).transform(X), but more efficiently implemented.", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "X transformed in the new space.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Update k means estimate on a single mini-batch X.", "Coordinates of the data points to cluster. It must be noted that X will be copied if it is not C-contiguous.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight (default: None).", "Predict the closest cluster each sample in X belongs to.", "In the vector quantization literature, cluster_centers_ is called the code book and each value returned by predict is the index of the closest code in the code book.", "New data to predict.", "The weights for each observation in X. If None, all observations are assigned equal weight (default: None).", "Index of the cluster each sample belongs to.", "Opposite of the value of X on the K-means objective.", "New data.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Opposite of the value of X on the K-means objective.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Transform X to a cluster-distance space.", "In the new space, each dimension is the distance to the cluster centers. Note that even if X is sparse, the array returned by transform will typically be dense.", "New data to transform.", "X transformed in the new space.", "Biclustering documents with the Spectral Co-clustering algorithm", "Online learning of a dictionary of parts of faces", "Compare BIRCH and MiniBatchKMeans", "Empirical evaluation of the impact of k-means initialization", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Comparing different clustering algorithms on toy datasets", "Faces dataset decompositions", "Clustering text documents using k-means"]}, {"name": "cluster.MiniBatchKMeans.fit()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.fit", "type": "cluster", "text": ["Compute the centroids on X by chunking it into mini-batches.", "Training instances to cluster. It must be noted that the data will be converted to C ordering, which will cause a memory copy if the given data is not C-contiguous.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight (default: None).", "New in version 0.20."]}, {"name": "cluster.MiniBatchKMeans.fit_predict()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.fit_predict", "type": "cluster", "text": ["Compute cluster centers and predict cluster index for each sample.", "Convenience method; equivalent to calling fit(X) followed by predict(X).", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Index of the cluster each sample belongs to."]}, {"name": "cluster.MiniBatchKMeans.fit_transform()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.fit_transform", "type": "cluster", "text": ["Compute clustering and transform X to cluster-distance space.", "Equivalent to fit(X).transform(X), but more efficiently implemented.", "New data to transform.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "X transformed in the new space."]}, {"name": "cluster.MiniBatchKMeans.get_params()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.MiniBatchKMeans.partial_fit()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.partial_fit", "type": "cluster", "text": ["Update k means estimate on a single mini-batch X.", "Coordinates of the data points to cluster. It must be noted that X will be copied if it is not C-contiguous.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight (default: None)."]}, {"name": "cluster.MiniBatchKMeans.predict()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.predict", "type": "cluster", "text": ["Predict the closest cluster each sample in X belongs to.", "In the vector quantization literature, cluster_centers_ is called the code book and each value returned by predict is the index of the closest code in the code book.", "New data to predict.", "The weights for each observation in X. If None, all observations are assigned equal weight (default: None).", "Index of the cluster each sample belongs to."]}, {"name": "cluster.MiniBatchKMeans.score()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.score", "type": "cluster", "text": ["Opposite of the value of X on the K-means objective.", "New data.", "Not used, present here for API consistency by convention.", "The weights for each observation in X. If None, all observations are assigned equal weight.", "Opposite of the value of X on the K-means objective."]}, {"name": "cluster.MiniBatchKMeans.set_params()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.MiniBatchKMeans.transform()", "path": "modules/generated/sklearn.cluster.minibatchkmeans#sklearn.cluster.MiniBatchKMeans.transform", "type": "cluster", "text": ["Transform X to a cluster-distance space.", "In the new space, each dimension is the distance to the cluster centers. Note that even if X is sparse, the array returned by transform will typically be dense.", "New data to transform.", "X transformed in the new space."]}, {"name": "cluster.OPTICS", "path": "modules/generated/sklearn.cluster.optics#sklearn.cluster.OPTICS", "type": "cluster", "text": ["Estimate clustering structure from vector array.", "OPTICS (Ordering Points To Identify the Clustering Structure), closely related to DBSCAN, finds core sample of high density and expands clusters from them [1]. Unlike DBSCAN, keeps cluster hierarchy for a variable neighborhood radius. Better suited for usage on large datasets than the current sklearn implementation of DBSCAN.", "Clusters are then extracted using a DBSCAN-like method (cluster_method = \u2018dbscan\u2019) or an automatic technique proposed in [1] (cluster_method = \u2018xi\u2019).", "This implementation deviates from the original OPTICS by first performing k-nearest-neighborhood searches on all points to identify core sizes, then computing only the distances to unprocessed points when constructing the cluster order. Note that we do not employ a heap to manage the expansion candidates, so the time complexity will be O(n^2).", "Read more in the User Guide.", "The number of samples in a neighborhood for a point to be considered as a core point. Also, up and down steep regions can\u2019t have more than min_samples consecutive non-steep points. Expressed as an absolute number or a fraction of the number of samples (rounded to be at least 2).", "The maximum distance between two samples for one to be considered as in the neighborhood of the other. Default value of np.inf will identify clusters across all scales; reducing max_eps will result in shorter run times.", "Metric to use for distance computation. Any metric from scikit-learn or scipy.spatial.distance can be used.", "If metric is a callable function, it is called on each pair of instances (rows) and the resulting value recorded. The callable should take two arrays as input and return one value indicating the distance between them. This works for Scipy\u2019s metrics, but is less efficient than passing the metric name as a string. If metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix and must be square.", "Valid values for metric are:", "See the documentation for scipy.spatial.distance for details on these metrics.", "Parameter for the Minkowski metric from pairwise_distances. When p = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.", "Additional keyword arguments for the metric function.", "The extraction method used to extract clusters using the calculated reachability and ordering. Possible values are \u201cxi\u201d and \u201cdbscan\u201d.", "The maximum distance between two samples for one to be considered as in the neighborhood of the other. By default it assumes the same value as max_eps. Used only when cluster_method='dbscan'.", "Determines the minimum steepness on the reachability plot that constitutes a cluster boundary. For example, an upwards point in the reachability plot is defined by the ratio from one point to its successor being at most 1-xi. Used only when cluster_method='xi'.", "Correct clusters according to the predecessors calculated by OPTICS [2]. This parameter has minimal effect on most datasets. Used only when cluster_method='xi'.", "Minimum number of samples in an OPTICS cluster, expressed as an absolute number or a fraction of the number of samples (rounded to be at least 2). If None, the value of min_samples is used instead. Used only when cluster_method='xi'.", "Algorithm used to compute the nearest neighbors:", "Note: fitting on sparse input will override the setting of this parameter, using brute force.", "Leaf size passed to BallTree or KDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.", "The number of parallel jobs to run for neighbors search. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Cluster labels for each point in the dataset given to fit(). Noisy samples and points which are not included in a leaf cluster of cluster_hierarchy_ are labeled as -1.", "Reachability distances per sample, indexed by object order. Use clust.reachability_[clust.ordering_] to access in cluster order.", "The cluster ordered list of sample indices.", "Distance at which each sample becomes a core point, indexed by object order. Points which will never be core have a distance of inf. Use clust.core_distances_[clust.ordering_] to access in cluster order.", "Point that a sample was reached from, indexed by object order. Seed points have a predecessor of -1.", "The list of clusters in the form of [start, end] in each row, with all indices inclusive. The clusters are ordered according to (end, -start) (ascending) so that larger clusters encompassing smaller clusters come after those smaller ones. Since labels_ does not reflect the hierarchy, usually len(cluster_hierarchy_) > np.unique(optics.labels_). Please also note that these indices are of the ordering_, i.e. X[ordering_][start:end + 1] form a cluster. Only available when cluster_method='xi'.", "See also", "A similar clustering for a specified neighborhood radius (eps). Our implementation is optimized for runtime.", "Ankerst, Mihael, Markus M. Breunig, Hans-Peter Kriegel, and J\u00f6rg Sander. \u201cOPTICS: ordering points to identify the clustering structure.\u201d ACM SIGMOD Record 28, no. 2 (1999): 49-60.", "Schubert, Erich, Michael Gertz. \u201cImproving the Cluster Structure Extracted from OPTICS Plots.\u201d Proc. of the Conference \u201cLernen, Wissen, Daten, Analysen\u201d (LWDA) (2018): 318-329.", "fit(X[, y])", "Perform OPTICS clustering.", "fit_predict(X[, y])", "Perform clustering on X and returns cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "set_params(**params)", "Set the parameters of this estimator.", "Perform OPTICS clustering.", "Extracts an ordered list of points and reachability distances, and performs initial clustering using max_eps distance specified at OPTICS object instantiation.", "A feature array, or array of distances between samples if metric=\u2019precomputed\u2019.", "Ignored.", "The instance.", "Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.OPTICS()", "path": "modules/generated/sklearn.cluster.optics", "type": "cluster", "text": ["Estimate clustering structure from vector array.", "OPTICS (Ordering Points To Identify the Clustering Structure), closely related to DBSCAN, finds core sample of high density and expands clusters from them [1]. Unlike DBSCAN, keeps cluster hierarchy for a variable neighborhood radius. Better suited for usage on large datasets than the current sklearn implementation of DBSCAN.", "Clusters are then extracted using a DBSCAN-like method (cluster_method = \u2018dbscan\u2019) or an automatic technique proposed in [1] (cluster_method = \u2018xi\u2019).", "This implementation deviates from the original OPTICS by first performing k-nearest-neighborhood searches on all points to identify core sizes, then computing only the distances to unprocessed points when constructing the cluster order. Note that we do not employ a heap to manage the expansion candidates, so the time complexity will be O(n^2).", "Read more in the User Guide.", "The number of samples in a neighborhood for a point to be considered as a core point. Also, up and down steep regions can\u2019t have more than min_samples consecutive non-steep points. Expressed as an absolute number or a fraction of the number of samples (rounded to be at least 2).", "The maximum distance between two samples for one to be considered as in the neighborhood of the other. Default value of np.inf will identify clusters across all scales; reducing max_eps will result in shorter run times.", "Metric to use for distance computation. Any metric from scikit-learn or scipy.spatial.distance can be used.", "If metric is a callable function, it is called on each pair of instances (rows) and the resulting value recorded. The callable should take two arrays as input and return one value indicating the distance between them. This works for Scipy\u2019s metrics, but is less efficient than passing the metric name as a string. If metric is \u201cprecomputed\u201d, X is assumed to be a distance matrix and must be square.", "Valid values for metric are:", "See the documentation for scipy.spatial.distance for details on these metrics.", "Parameter for the Minkowski metric from pairwise_distances. When p = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance (l2) for p = 2. For arbitrary p, minkowski_distance (l_p) is used.", "Additional keyword arguments for the metric function.", "The extraction method used to extract clusters using the calculated reachability and ordering. Possible values are \u201cxi\u201d and \u201cdbscan\u201d.", "The maximum distance between two samples for one to be considered as in the neighborhood of the other. By default it assumes the same value as max_eps. Used only when cluster_method='dbscan'.", "Determines the minimum steepness on the reachability plot that constitutes a cluster boundary. For example, an upwards point in the reachability plot is defined by the ratio from one point to its successor being at most 1-xi. Used only when cluster_method='xi'.", "Correct clusters according to the predecessors calculated by OPTICS [2]. This parameter has minimal effect on most datasets. Used only when cluster_method='xi'.", "Minimum number of samples in an OPTICS cluster, expressed as an absolute number or a fraction of the number of samples (rounded to be at least 2). If None, the value of min_samples is used instead. Used only when cluster_method='xi'.", "Algorithm used to compute the nearest neighbors:", "Note: fitting on sparse input will override the setting of this parameter, using brute force.", "Leaf size passed to BallTree or KDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.", "The number of parallel jobs to run for neighbors search. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Cluster labels for each point in the dataset given to fit(). Noisy samples and points which are not included in a leaf cluster of cluster_hierarchy_ are labeled as -1.", "Reachability distances per sample, indexed by object order. Use clust.reachability_[clust.ordering_] to access in cluster order.", "The cluster ordered list of sample indices.", "Distance at which each sample becomes a core point, indexed by object order. Points which will never be core have a distance of inf. Use clust.core_distances_[clust.ordering_] to access in cluster order.", "Point that a sample was reached from, indexed by object order. Seed points have a predecessor of -1.", "The list of clusters in the form of [start, end] in each row, with all indices inclusive. The clusters are ordered according to (end, -start) (ascending) so that larger clusters encompassing smaller clusters come after those smaller ones. Since labels_ does not reflect the hierarchy, usually len(cluster_hierarchy_) > np.unique(optics.labels_). Please also note that these indices are of the ordering_, i.e. X[ordering_][start:end + 1] form a cluster. Only available when cluster_method='xi'.", "See also", "A similar clustering for a specified neighborhood radius (eps). Our implementation is optimized for runtime.", "Ankerst, Mihael, Markus M. Breunig, Hans-Peter Kriegel, and J\u00f6rg Sander. \u201cOPTICS: ordering points to identify the clustering structure.\u201d ACM SIGMOD Record 28, no. 2 (1999): 49-60.", "Schubert, Erich, Michael Gertz. \u201cImproving the Cluster Structure Extracted from OPTICS Plots.\u201d Proc. of the Conference \u201cLernen, Wissen, Daten, Analysen\u201d (LWDA) (2018): 318-329.", "fit(X[, y])", "Perform OPTICS clustering.", "fit_predict(X[, y])", "Perform clustering on X and returns cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "set_params(**params)", "Set the parameters of this estimator.", "Perform OPTICS clustering.", "Extracts an ordered list of points and reachability distances, and performs initial clustering using max_eps distance specified at OPTICS object instantiation.", "A feature array, or array of distances between samples if metric=\u2019precomputed\u2019.", "Ignored.", "The instance.", "Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Demo of OPTICS clustering algorithm", "Comparing different clustering algorithms on toy datasets"]}, {"name": "cluster.OPTICS.fit()", "path": "modules/generated/sklearn.cluster.optics#sklearn.cluster.OPTICS.fit", "type": "cluster", "text": ["Perform OPTICS clustering.", "Extracts an ordered list of points and reachability distances, and performs initial clustering using max_eps distance specified at OPTICS object instantiation.", "A feature array, or array of distances between samples if metric=\u2019precomputed\u2019.", "Ignored.", "The instance."]}, {"name": "cluster.OPTICS.fit_predict()", "path": "modules/generated/sklearn.cluster.optics#sklearn.cluster.OPTICS.fit_predict", "type": "cluster", "text": ["Perform clustering on X and returns cluster labels.", "Input data.", "Not used, present for API consistency by convention.", "Cluster labels."]}, {"name": "cluster.OPTICS.get_params()", "path": "modules/generated/sklearn.cluster.optics#sklearn.cluster.OPTICS.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.OPTICS.set_params()", "path": "modules/generated/sklearn.cluster.optics#sklearn.cluster.OPTICS.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.SpectralBiclustering", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering", "type": "cluster", "text": ["Spectral biclustering (Kluger, 2003).", "Partitions rows and columns under the assumption that the data has an underlying checkerboard structure. For instance, if there are two row partitions and three column partitions, each row will belong to three biclusters, and each column will belong to two biclusters. The outer product of the corresponding row and column label vectors gives this checkerboard structure.", "Read more in the User Guide.", "The number of row and column clusters in the checkerboard structure.", "Method of normalizing and converting singular vectors into biclusters. May be one of \u2018scale\u2019, \u2018bistochastic\u2019, or \u2018log\u2019. The authors recommend using \u2018log\u2019. If the data is sparse, however, log normalization will not work, which is why the default is \u2018bistochastic\u2019.", "Warning", "if method='log', the data must be sparse.", "Number of singular vectors to check.", "Number of best singular vectors to which to project the data for clustering.", "Selects the algorithm for finding singular vectors. May be \u2018randomized\u2019 or \u2018arpack\u2019. If \u2018randomized\u2019, uses randomized_svd, which may be faster for large matrices. If \u2018arpack\u2019, uses scipy.sparse.linalg.svds, which is more accurate, but possibly slower in some cases.", "Number of vectors to use in calculating the SVD. Corresponds to ncv when svd_method=arpack and n_oversamples when svd_method is \u2018randomized`.", "Whether to use mini-batch k-means, which is faster but may get different results.", "Method for initialization of k-means algorithm; defaults to \u2018k-means++\u2019.", "Number of random initializations that are tried with the k-means algorithm.", "If mini-batch k-means is used, the best initialization is chosen and the algorithm runs once. Otherwise, the algorithm is run for each initialization and the best solution chosen.", "The number of jobs to use for the computation. This works by breaking down the pairwise matrix into n_jobs even slices and computing them in parallel.", "None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Deprecated since version 0.23: n_jobs was deprecated in version 0.23 and will be removed in 1.0 (renaming of 0.25).", "Used for randomizing the singular value decomposition and the k-means initialization. Use an int to make the randomness deterministic. See Glossary.", "Results of the clustering. rows[i, r] is True if cluster i contains row r. Available only after calling fit.", "Results of the clustering, like rows.", "Row partition labels.", "Column partition labels.", "fit(X[, y])", "Creates a biclustering for X.", "get_indices(i)", "Row and column indices of the i\u2019th bicluster.", "get_params([deep])", "Get parameters for this estimator.", "get_shape(i)", "Shape of the i\u2019th bicluster.", "get_submatrix(i, data)", "Return the submatrix corresponding to bicluster i.", "set_params(**params)", "Set the parameters of this estimator.", "Convenient way to get row and column indicators together.", "Returns the rows_ and columns_ members.", "Creates a biclustering for X.", "Row and column indices of the i\u2019th bicluster.", "Only works if rows_ and columns_ attributes exist.", "The index of the cluster.", "Indices of rows in the dataset that belong to the bicluster.", "Indices of columns in the dataset that belong to the bicluster.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Shape of the i\u2019th bicluster.", "The index of the cluster.", "Number of rows in the bicluster.", "Number of columns in the bicluster.", "Return the submatrix corresponding to bicluster i.", "The index of the cluster.", "The data.", "The submatrix corresponding to bicluster i.", "Works with sparse matrices. Only works if rows_ and columns_ attributes exist.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.SpectralBiclustering()", "path": "modules/generated/sklearn.cluster.spectralbiclustering", "type": "cluster", "text": ["Spectral biclustering (Kluger, 2003).", "Partitions rows and columns under the assumption that the data has an underlying checkerboard structure. For instance, if there are two row partitions and three column partitions, each row will belong to three biclusters, and each column will belong to two biclusters. The outer product of the corresponding row and column label vectors gives this checkerboard structure.", "Read more in the User Guide.", "The number of row and column clusters in the checkerboard structure.", "Method of normalizing and converting singular vectors into biclusters. May be one of \u2018scale\u2019, \u2018bistochastic\u2019, or \u2018log\u2019. The authors recommend using \u2018log\u2019. If the data is sparse, however, log normalization will not work, which is why the default is \u2018bistochastic\u2019.", "Warning", "if method='log', the data must be sparse.", "Number of singular vectors to check.", "Number of best singular vectors to which to project the data for clustering.", "Selects the algorithm for finding singular vectors. May be \u2018randomized\u2019 or \u2018arpack\u2019. If \u2018randomized\u2019, uses randomized_svd, which may be faster for large matrices. If \u2018arpack\u2019, uses scipy.sparse.linalg.svds, which is more accurate, but possibly slower in some cases.", "Number of vectors to use in calculating the SVD. Corresponds to ncv when svd_method=arpack and n_oversamples when svd_method is \u2018randomized`.", "Whether to use mini-batch k-means, which is faster but may get different results.", "Method for initialization of k-means algorithm; defaults to \u2018k-means++\u2019.", "Number of random initializations that are tried with the k-means algorithm.", "If mini-batch k-means is used, the best initialization is chosen and the algorithm runs once. Otherwise, the algorithm is run for each initialization and the best solution chosen.", "The number of jobs to use for the computation. This works by breaking down the pairwise matrix into n_jobs even slices and computing them in parallel.", "None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Deprecated since version 0.23: n_jobs was deprecated in version 0.23 and will be removed in 1.0 (renaming of 0.25).", "Used for randomizing the singular value decomposition and the k-means initialization. Use an int to make the randomness deterministic. See Glossary.", "Results of the clustering. rows[i, r] is True if cluster i contains row r. Available only after calling fit.", "Results of the clustering, like rows.", "Row partition labels.", "Column partition labels.", "fit(X[, y])", "Creates a biclustering for X.", "get_indices(i)", "Row and column indices of the i\u2019th bicluster.", "get_params([deep])", "Get parameters for this estimator.", "get_shape(i)", "Shape of the i\u2019th bicluster.", "get_submatrix(i, data)", "Return the submatrix corresponding to bicluster i.", "set_params(**params)", "Set the parameters of this estimator.", "Convenient way to get row and column indicators together.", "Returns the rows_ and columns_ members.", "Creates a biclustering for X.", "Row and column indices of the i\u2019th bicluster.", "Only works if rows_ and columns_ attributes exist.", "The index of the cluster.", "Indices of rows in the dataset that belong to the bicluster.", "Indices of columns in the dataset that belong to the bicluster.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Shape of the i\u2019th bicluster.", "The index of the cluster.", "Number of rows in the bicluster.", "Number of columns in the bicluster.", "Return the submatrix corresponding to bicluster i.", "The index of the cluster.", "The data.", "The submatrix corresponding to bicluster i.", "Works with sparse matrices. Only works if rows_ and columns_ attributes exist.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "A demo of the Spectral Biclustering algorithm"]}, {"name": "cluster.SpectralBiclustering.biclusters_()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.biclusters_", "type": "cluster", "text": ["Convenient way to get row and column indicators together.", "Returns the rows_ and columns_ members."]}, {"name": "cluster.SpectralBiclustering.fit()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.fit", "type": "cluster", "text": ["Creates a biclustering for X."]}, {"name": "cluster.SpectralBiclustering.get_indices()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.get_indices", "type": "cluster", "text": ["Row and column indices of the i\u2019th bicluster.", "Only works if rows_ and columns_ attributes exist.", "The index of the cluster.", "Indices of rows in the dataset that belong to the bicluster.", "Indices of columns in the dataset that belong to the bicluster."]}, {"name": "cluster.SpectralBiclustering.get_params()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.SpectralBiclustering.get_shape()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.get_shape", "type": "cluster", "text": ["Shape of the i\u2019th bicluster.", "The index of the cluster.", "Number of rows in the bicluster.", "Number of columns in the bicluster."]}, {"name": "cluster.SpectralBiclustering.get_submatrix()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.get_submatrix", "type": "cluster", "text": ["Return the submatrix corresponding to bicluster i.", "The index of the cluster.", "The data.", "The submatrix corresponding to bicluster i.", "Works with sparse matrices. Only works if rows_ and columns_ attributes exist."]}, {"name": "cluster.SpectralBiclustering.set_params()", "path": "modules/generated/sklearn.cluster.spectralbiclustering#sklearn.cluster.SpectralBiclustering.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.SpectralClustering", "path": "modules/generated/sklearn.cluster.spectralclustering#sklearn.cluster.SpectralClustering", "type": "cluster", "text": ["Apply clustering to a projection of the normalized Laplacian.", "In practice Spectral Clustering is very useful when the structure of the individual clusters is highly non-convex or more generally when a measure of the center and spread of the cluster is not a suitable description of the complete cluster. For instance when clusters are nested circles on the 2D plane.", "If affinity is the adjacency matrix of a graph, this method can be used to find normalized graph cuts.", "When calling fit, an affinity matrix is constructed using either kernel function such the Gaussian (aka RBF) kernel of the euclidean distanced d(X, X):", "or a k-nearest neighbors connectivity matrix.", "Alternatively, using precomputed, a user-provided affinity matrix can be used.", "Read more in the User Guide.", "The dimension of the projection subspace.", "The eigenvalue decomposition strategy to use. AMG requires pyamg to be installed. It can be faster on very large, sparse problems, but may also lead to instabilities. If None, then 'arpack' is used.", "Number of eigen vectors to use for the spectral embedding", "A pseudo random number generator used for the initialization of the lobpcg eigen vectors decomposition when eigen_solver='amg' and by the K-Means initialization. Use an int to make the randomness deterministic. See Glossary.", "Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia.", "Kernel coefficient for rbf, poly, sigmoid, laplacian and chi2 kernels. Ignored for affinity='nearest_neighbors'.", "Only kernels that produce similarity scores (non-negative values that increase with similarity) should be used. This property is not checked by the clustering algorithm.", "Number of neighbors to use when constructing the affinity matrix using the nearest neighbors method. Ignored for affinity='rbf'.", "Stopping criterion for eigendecomposition of the Laplacian matrix when eigen_solver='arpack'.", "The strategy to use to assign labels in the embedding space. There are two ways to assign labels after the laplacian embedding. k-means can be applied and is a popular choice. But it can also be sensitive to initialization. Discretization is another approach which is less sensitive to random initialization.", "Degree of the polynomial kernel. Ignored by other kernels.", "Zero coefficient for polynomial and sigmoid kernels. Ignored by other kernels.", "Parameters (keyword arguments) and values for kernel passed as callable object. Ignored by other kernels.", "The number of parallel jobs to run when affinity='nearest_neighbors' or affinity='precomputed_nearest_neighbors'. The neighbors search will be done in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Verbosity mode.", "New in version 0.24.", "Affinity matrix used for clustering. Available only if after calling fit.", "Labels of each point", "If you have an affinity matrix, such as a distance matrix, for which 0 means identical elements, and high values means very dissimilar elements, it can be transformed in a similarity matrix that is well suited for the algorithm by applying the Gaussian (RBF, heat) kernel:", "Where delta is a free parameter representing the width of the Gaussian kernel.", "Another alternative is to take a symmetric version of the k nearest neighbors connectivity matrix of the points.", "If the pyamg package is installed, it is used: this greatly speeds up computation.", "fit(X[, y])", "Perform spectral clustering from features, or affinity matrix.", "fit_predict(X[, y])", "Perform spectral clustering from features, or affinity matrix, and return cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "set_params(**params)", "Set the parameters of this estimator.", "Perform spectral clustering from features, or affinity matrix.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse matrix is provided in a format other than csr_matrix, csc_matrix, or coo_matrix, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention.", "Perform spectral clustering from features, or affinity matrix, and return cluster labels.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse matrix is provided in a format other than csr_matrix, csc_matrix, or coo_matrix, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention.", "Cluster labels.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.SpectralClustering()", "path": "modules/generated/sklearn.cluster.spectralclustering", "type": "cluster", "text": ["Apply clustering to a projection of the normalized Laplacian.", "In practice Spectral Clustering is very useful when the structure of the individual clusters is highly non-convex or more generally when a measure of the center and spread of the cluster is not a suitable description of the complete cluster. For instance when clusters are nested circles on the 2D plane.", "If affinity is the adjacency matrix of a graph, this method can be used to find normalized graph cuts.", "When calling fit, an affinity matrix is constructed using either kernel function such the Gaussian (aka RBF) kernel of the euclidean distanced d(X, X):", "or a k-nearest neighbors connectivity matrix.", "Alternatively, using precomputed, a user-provided affinity matrix can be used.", "Read more in the User Guide.", "The dimension of the projection subspace.", "The eigenvalue decomposition strategy to use. AMG requires pyamg to be installed. It can be faster on very large, sparse problems, but may also lead to instabilities. If None, then 'arpack' is used.", "Number of eigen vectors to use for the spectral embedding", "A pseudo random number generator used for the initialization of the lobpcg eigen vectors decomposition when eigen_solver='amg' and by the K-Means initialization. Use an int to make the randomness deterministic. See Glossary.", "Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia.", "Kernel coefficient for rbf, poly, sigmoid, laplacian and chi2 kernels. Ignored for affinity='nearest_neighbors'.", "Only kernels that produce similarity scores (non-negative values that increase with similarity) should be used. This property is not checked by the clustering algorithm.", "Number of neighbors to use when constructing the affinity matrix using the nearest neighbors method. Ignored for affinity='rbf'.", "Stopping criterion for eigendecomposition of the Laplacian matrix when eigen_solver='arpack'.", "The strategy to use to assign labels in the embedding space. There are two ways to assign labels after the laplacian embedding. k-means can be applied and is a popular choice. But it can also be sensitive to initialization. Discretization is another approach which is less sensitive to random initialization.", "Degree of the polynomial kernel. Ignored by other kernels.", "Zero coefficient for polynomial and sigmoid kernels. Ignored by other kernels.", "Parameters (keyword arguments) and values for kernel passed as callable object. Ignored by other kernels.", "The number of parallel jobs to run when affinity='nearest_neighbors' or affinity='precomputed_nearest_neighbors'. The neighbors search will be done in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Verbosity mode.", "New in version 0.24.", "Affinity matrix used for clustering. Available only if after calling fit.", "Labels of each point", "If you have an affinity matrix, such as a distance matrix, for which 0 means identical elements, and high values means very dissimilar elements, it can be transformed in a similarity matrix that is well suited for the algorithm by applying the Gaussian (RBF, heat) kernel:", "Where delta is a free parameter representing the width of the Gaussian kernel.", "Another alternative is to take a symmetric version of the k nearest neighbors connectivity matrix of the points.", "If the pyamg package is installed, it is used: this greatly speeds up computation.", "fit(X[, y])", "Perform spectral clustering from features, or affinity matrix.", "fit_predict(X[, y])", "Perform spectral clustering from features, or affinity matrix, and return cluster labels.", "get_params([deep])", "Get parameters for this estimator.", "set_params(**params)", "Set the parameters of this estimator.", "Perform spectral clustering from features, or affinity matrix.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse matrix is provided in a format other than csr_matrix, csc_matrix, or coo_matrix, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention.", "Perform spectral clustering from features, or affinity matrix, and return cluster labels.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse matrix is provided in a format other than csr_matrix, csc_matrix, or coo_matrix, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention.", "Cluster labels.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Comparing different clustering algorithms on toy datasets"]}, {"name": "cluster.SpectralClustering.fit()", "path": "modules/generated/sklearn.cluster.spectralclustering#sklearn.cluster.SpectralClustering.fit", "type": "cluster", "text": ["Perform spectral clustering from features, or affinity matrix.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse matrix is provided in a format other than csr_matrix, csc_matrix, or coo_matrix, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention."]}, {"name": "cluster.SpectralClustering.fit_predict()", "path": "modules/generated/sklearn.cluster.spectralclustering#sklearn.cluster.SpectralClustering.fit_predict", "type": "cluster", "text": ["Perform spectral clustering from features, or affinity matrix, and return cluster labels.", "Training instances to cluster, or similarities / affinities between instances if affinity='precomputed'. If a sparse matrix is provided in a format other than csr_matrix, csc_matrix, or coo_matrix, it will be converted into a sparse csr_matrix.", "Not used, present here for API consistency by convention.", "Cluster labels."]}, {"name": "cluster.SpectralClustering.get_params()", "path": "modules/generated/sklearn.cluster.spectralclustering#sklearn.cluster.SpectralClustering.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.SpectralClustering.set_params()", "path": "modules/generated/sklearn.cluster.spectralclustering#sklearn.cluster.SpectralClustering.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.SpectralCoclustering", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering", "type": "cluster", "text": ["Spectral Co-Clustering algorithm (Dhillon, 2001).", "Clusters rows and columns of an array X to solve the relaxed normalized cut of the bipartite graph created from X as follows: the edge between row vertex i and column vertex j has weight X[i, j].", "The resulting bicluster structure is block-diagonal, since each row and each column belongs to exactly one bicluster.", "Supports sparse matrices, as long as they are nonnegative.", "Read more in the User Guide.", "The number of biclusters to find.", "Selects the algorithm for finding singular vectors. May be \u2018randomized\u2019 or \u2018arpack\u2019. If \u2018randomized\u2019, use sklearn.utils.extmath.randomized_svd, which may be faster for large matrices. If \u2018arpack\u2019, use scipy.sparse.linalg.svds, which is more accurate, but possibly slower in some cases.", "Number of vectors to use in calculating the SVD. Corresponds to ncv when svd_method=arpack and n_oversamples when svd_method is \u2018randomized`.", "Whether to use mini-batch k-means, which is faster but may get different results.", "Method for initialization of k-means algorithm; defaults to \u2018k-means++\u2019.", "Number of random initializations that are tried with the k-means algorithm.", "If mini-batch k-means is used, the best initialization is chosen and the algorithm runs once. Otherwise, the algorithm is run for each initialization and the best solution chosen.", "The number of jobs to use for the computation. This works by breaking down the pairwise matrix into n_jobs even slices and computing them in parallel.", "None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Deprecated since version 0.23: n_jobs was deprecated in version 0.23 and will be removed in 1.0 (renaming of 0.25).", "Used for randomizing the singular value decomposition and the k-means initialization. Use an int to make the randomness deterministic. See Glossary.", "Results of the clustering. rows[i, r] is True if cluster i contains row r. Available only after calling fit.", "Results of the clustering, like rows.", "The bicluster label of each row.", "The bicluster label of each column.", "fit(X[, y])", "Creates a biclustering for X.", "get_indices(i)", "Row and column indices of the i\u2019th bicluster.", "get_params([deep])", "Get parameters for this estimator.", "get_shape(i)", "Shape of the i\u2019th bicluster.", "get_submatrix(i, data)", "Return the submatrix corresponding to bicluster i.", "set_params(**params)", "Set the parameters of this estimator.", "Convenient way to get row and column indicators together.", "Returns the rows_ and columns_ members.", "Creates a biclustering for X.", "Row and column indices of the i\u2019th bicluster.", "Only works if rows_ and columns_ attributes exist.", "The index of the cluster.", "Indices of rows in the dataset that belong to the bicluster.", "Indices of columns in the dataset that belong to the bicluster.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Shape of the i\u2019th bicluster.", "The index of the cluster.", "Number of rows in the bicluster.", "Number of columns in the bicluster.", "Return the submatrix corresponding to bicluster i.", "The index of the cluster.", "The data.", "The submatrix corresponding to bicluster i.", "Works with sparse matrices. Only works if rows_ and columns_ attributes exist.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.SpectralCoclustering()", "path": "modules/generated/sklearn.cluster.spectralcoclustering", "type": "cluster", "text": ["Spectral Co-Clustering algorithm (Dhillon, 2001).", "Clusters rows and columns of an array X to solve the relaxed normalized cut of the bipartite graph created from X as follows: the edge between row vertex i and column vertex j has weight X[i, j].", "The resulting bicluster structure is block-diagonal, since each row and each column belongs to exactly one bicluster.", "Supports sparse matrices, as long as they are nonnegative.", "Read more in the User Guide.", "The number of biclusters to find.", "Selects the algorithm for finding singular vectors. May be \u2018randomized\u2019 or \u2018arpack\u2019. If \u2018randomized\u2019, use sklearn.utils.extmath.randomized_svd, which may be faster for large matrices. If \u2018arpack\u2019, use scipy.sparse.linalg.svds, which is more accurate, but possibly slower in some cases.", "Number of vectors to use in calculating the SVD. Corresponds to ncv when svd_method=arpack and n_oversamples when svd_method is \u2018randomized`.", "Whether to use mini-batch k-means, which is faster but may get different results.", "Method for initialization of k-means algorithm; defaults to \u2018k-means++\u2019.", "Number of random initializations that are tried with the k-means algorithm.", "If mini-batch k-means is used, the best initialization is chosen and the algorithm runs once. Otherwise, the algorithm is run for each initialization and the best solution chosen.", "The number of jobs to use for the computation. This works by breaking down the pairwise matrix into n_jobs even slices and computing them in parallel.", "None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Deprecated since version 0.23: n_jobs was deprecated in version 0.23 and will be removed in 1.0 (renaming of 0.25).", "Used for randomizing the singular value decomposition and the k-means initialization. Use an int to make the randomness deterministic. See Glossary.", "Results of the clustering. rows[i, r] is True if cluster i contains row r. Available only after calling fit.", "Results of the clustering, like rows.", "The bicluster label of each row.", "The bicluster label of each column.", "fit(X[, y])", "Creates a biclustering for X.", "get_indices(i)", "Row and column indices of the i\u2019th bicluster.", "get_params([deep])", "Get parameters for this estimator.", "get_shape(i)", "Shape of the i\u2019th bicluster.", "get_submatrix(i, data)", "Return the submatrix corresponding to bicluster i.", "set_params(**params)", "Set the parameters of this estimator.", "Convenient way to get row and column indicators together.", "Returns the rows_ and columns_ members.", "Creates a biclustering for X.", "Row and column indices of the i\u2019th bicluster.", "Only works if rows_ and columns_ attributes exist.", "The index of the cluster.", "Indices of rows in the dataset that belong to the bicluster.", "Indices of columns in the dataset that belong to the bicluster.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Shape of the i\u2019th bicluster.", "The index of the cluster.", "Number of rows in the bicluster.", "Number of columns in the bicluster.", "Return the submatrix corresponding to bicluster i.", "The index of the cluster.", "The data.", "The submatrix corresponding to bicluster i.", "Works with sparse matrices. Only works if rows_ and columns_ attributes exist.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "A demo of the Spectral Co-Clustering algorithm", "Biclustering documents with the Spectral Co-clustering algorithm"]}, {"name": "cluster.SpectralCoclustering.biclusters_()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.biclusters_", "type": "cluster", "text": ["Convenient way to get row and column indicators together.", "Returns the rows_ and columns_ members."]}, {"name": "cluster.SpectralCoclustering.fit()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.fit", "type": "cluster", "text": ["Creates a biclustering for X."]}, {"name": "cluster.SpectralCoclustering.get_indices()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.get_indices", "type": "cluster", "text": ["Row and column indices of the i\u2019th bicluster.", "Only works if rows_ and columns_ attributes exist.", "The index of the cluster.", "Indices of rows in the dataset that belong to the bicluster.", "Indices of columns in the dataset that belong to the bicluster."]}, {"name": "cluster.SpectralCoclustering.get_params()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.get_params", "type": "cluster", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cluster.SpectralCoclustering.get_shape()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.get_shape", "type": "cluster", "text": ["Shape of the i\u2019th bicluster.", "The index of the cluster.", "Number of rows in the bicluster.", "Number of columns in the bicluster."]}, {"name": "cluster.SpectralCoclustering.get_submatrix()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.get_submatrix", "type": "cluster", "text": ["Return the submatrix corresponding to bicluster i.", "The index of the cluster.", "The data.", "The submatrix corresponding to bicluster i.", "Works with sparse matrices. Only works if rows_ and columns_ attributes exist."]}, {"name": "cluster.SpectralCoclustering.set_params()", "path": "modules/generated/sklearn.cluster.spectralcoclustering#sklearn.cluster.SpectralCoclustering.set_params", "type": "cluster", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cluster.spectral_clustering()", "path": "modules/generated/sklearn.cluster.spectral_clustering#sklearn.cluster.spectral_clustering", "type": "cluster", "text": ["Apply clustering to a projection of the normalized Laplacian.", "In practice Spectral Clustering is very useful when the structure of the individual clusters is highly non-convex or more generally when a measure of the center and spread of the cluster is not a suitable description of the complete cluster. For instance, when clusters are nested circles on the 2D plane.", "If affinity is the adjacency matrix of a graph, this method can be used to find normalized graph cuts.", "Read more in the User Guide.", "The affinity matrix describing the relationship of the samples to embed. Must be symmetric.", "Number of clusters to extract.", "Number of eigen vectors to use for the spectral embedding", "The eigenvalue decomposition strategy to use. AMG requires pyamg to be installed. It can be faster on very large, sparse problems, but may also lead to instabilities. If None, then 'arpack' is used.", "A pseudo random number generator used for the initialization of the lobpcg eigen vectors decomposition when eigen_solver == \u2018amg\u2019 and by the K-Means initialization. Use an int to make the randomness deterministic. See Glossary.", "Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia.", "Stopping criterion for eigendecomposition of the Laplacian matrix when using arpack eigen_solver.", "The strategy to use to assign labels in the embedding space. There are two ways to assign labels after the laplacian embedding. k-means can be applied and is a popular choice. But it can also be sensitive to initialization. Discretization is another approach which is less sensitive to random initialization. See the \u2018Multiclass spectral clustering\u2019 paper referenced below for more details on the discretization approach.", "Verbosity mode.", "New in version 0.24.", "The labels of the clusters.", "The graph should contain only one connect component, elsewhere the results make little sense.", "This algorithm solves the normalized cut for k=2: it is a normalized spectral clustering."]}, {"name": "cluster.ward_tree()", "path": "modules/generated/sklearn.cluster.ward_tree#sklearn.cluster.ward_tree", "type": "cluster", "text": ["Ward clustering based on a Feature matrix.", "Recursively merges the pair of clusters that minimally increases within-cluster variance.", "The inertia matrix uses a Heapq-based representation.", "This is the structured version, that takes into account some topological structure between samples.", "Read more in the User Guide.", "feature matrix representing n_samples samples to be clustered", "connectivity matrix. Defines for each sample the neighboring samples following a given structure of the data. The matrix is assumed to be symmetric and only the upper triangular half is used. Default is None, i.e, the Ward algorithm is unstructured.", "Stop early the construction of the tree at n_clusters. This is useful to decrease computation time if the number of clusters is not small compared to the number of samples. In this case, the complete tree is not computed, thus the \u2018children\u2019 output is of limited use, and the \u2018parents\u2019 output should rather be used. This option is valid only when specifying a connectivity matrix.", "If True, return the distance between the clusters.", "The children of each non-leaf node. Values less than n_samples correspond to leaves of the tree which are the original samples. A node i greater than or equal to n_samples is a non-leaf node and has children children_[i - n_samples]. Alternatively at the i-th iteration, children[i][0] and children[i][1] are merged to form node n_samples + i", "The number of connected components in the graph.", "The number of leaves in the tree", "The parent of each node. Only returned when a connectivity matrix is specified, elsewhere \u2018None\u2019 is returned.", "Only returned if return_distance is set to True (for compatibility). The distances between the centers of the nodes. distances[i] corresponds to a weighted euclidean distance between the nodes children[i, 1] and children[i, 2]. If the nodes refer to leaves of the tree, then distances[i] is their unweighted euclidean distance. Distances are updated in the following way (from scipy.hierarchy.linkage):", "The new entry \\(d(u,v)\\) is computed as follows,", "where \\(u\\) is the newly joined cluster consisting of clusters \\(s\\) and \\(t\\), \\(v\\) is an unused cluster in the forest, \\(T=|v|+|s|+|t|\\), and \\(|*|\\) is the cardinality of its argument. This is also known as the incremental algorithm."]}, {"name": "compose.ColumnTransformer", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer", "type": "compose", "text": ["Applies transformers to columns of an array or pandas DataFrame.", "This estimator allows different columns or column subsets of the input to be transformed separately and the features generated by each transformer will be concatenated to form a single feature space. This is useful for heterogeneous or columnar data, to combine several feature extraction mechanisms or transformations into a single transformer.", "Read more in the User Guide.", "New in version 0.20.", "List of (name, transformer, columns) tuples specifying the transformer objects to be applied to subsets of the data.", "Like in Pipeline and FeatureUnion, this allows the transformer and its parameters to be set using set_params and searched in grid search.", "Estimator must support fit and transform. Special-cased strings \u2018drop\u2019 and \u2018passthrough\u2019 are accepted as well, to indicate to drop the columns or to pass them through untransformed, respectively.", "Indexes the data on its second axis. Integers are interpreted as positional columns, while strings can reference DataFrame columns by name. A scalar string or int should be used where transformer expects X to be a 1d array-like (vector), otherwise a 2d array will be passed to the transformer. A callable is passed the input data X and can return any of the above. To select multiple columns by name or dtype, you can use make_column_selector.", "By default, only the specified columns in transformers are transformed and combined in the output, and the non-specified columns are dropped. (default of 'drop'). By specifying remainder='passthrough', all remaining columns that were not specified in transformers will be automatically passed through. This subset of columns is concatenated with the output of the transformers. By setting remainder to be an estimator, the remaining non-specified columns will use the remainder estimator. The estimator must support fit and transform. Note that using this feature requires that the DataFrame columns input at fit and transform have identical order.", "If the output of the different transformers contains sparse matrices, these will be stacked as a sparse matrix if the overall density is lower than this value. Use sparse_threshold=0 to always return dense. When the transformed output consists of all dense data, the stacked result will be dense, and this keyword will be ignored.", "Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Multiplicative weights for features per transformer. The output of the transformer is multiplied by these weights. Keys are transformer names, values the weights.", "If True, the time elapsed while fitting each transformer will be printed as it is completed.", "The collection of fitted transformers as tuples of (name, fitted_transformer, column). fitted_transformer can be an estimator, \u2018drop\u2019, or \u2018passthrough\u2019. In case there were no columns selected, this will be the unfitted transformer. If there are remaining columns, the final element is a tuple of the form: (\u2018remainder\u2019, transformer, remaining_columns) corresponding to the remainder parameter. If there are remaining columns, then len(transformers_)==len(transformers)+1, otherwise len(transformers_)==len(transformers).", "Access the fitted transformer by name.", "Boolean flag indicating whether the output of transform is a sparse matrix or a dense numpy array, which depends on the output of the individual transformers and the sparse_threshold keyword.", "See also", "Convenience function for combining the outputs of multiple transformer objects applied to column subsets of the original feature space.", "Convenience function for selecting columns based on datatype or the columns name with a regex pattern.", "The order of the columns in the transformed feature matrix follows the order of how the columns are specified in the transformers list. Columns of the original feature matrix that are not specified are dropped from the resulting transformed feature matrix, unless specified in the passthrough keyword. Those columns specified with passthrough are added at the right to the output of the transformers.", "fit(X[, y])", "Fit all transformers using X.", "fit_transform(X[, y])", "Fit all transformers, transform the data and concatenate results.", "get_feature_names()", "Get feature names from all transformers.", "get_params([deep])", "Get parameters for this estimator.", "set_params(**kwargs)", "Set the parameters of this estimator.", "transform(X)", "Transform X separately by each transformer, concatenate results.", "Fit all transformers using X.", "Input data, of which specified subsets are used to fit the transformers.", "Targets for supervised learning.", "This estimator", "Fit all transformers, transform the data and concatenate results.", "Input data, of which specified subsets are used to fit the transformers.", "Targets for supervised learning.", "hstack of results of transformers. sum_n_components is the sum of n_components (output dimension) over transformers. If any result is a sparse matrix, everything will be converted to sparse matrices.", "Get feature names from all transformers.", "Names of the features produced by transform.", "Get parameters for this estimator.", "Returns the parameters given in the constructor as well as the estimators contained within the transformers of the ColumnTransformer.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Access the fitted transformer by name.", "Read-only attribute to access any transformer by given name. Keys are transformer names and values are the fitted transformer objects.", "Set the parameters of this estimator.", "Valid parameter keys can be listed with get_params(). Note that you can directly set the parameters of the estimators contained in transformers of ColumnTransformer.", "Transform X separately by each transformer, concatenate results.", "The data to be transformed by subset.", "hstack of results of transformers. sum_n_components is the sum of n_components (output dimension) over transformers. If any result is a sparse matrix, everything will be converted to sparse matrices."]}, {"name": "compose.ColumnTransformer()", "path": "modules/generated/sklearn.compose.columntransformer", "type": "compose", "text": ["Applies transformers to columns of an array or pandas DataFrame.", "This estimator allows different columns or column subsets of the input to be transformed separately and the features generated by each transformer will be concatenated to form a single feature space. This is useful for heterogeneous or columnar data, to combine several feature extraction mechanisms or transformations into a single transformer.", "Read more in the User Guide.", "New in version 0.20.", "List of (name, transformer, columns) tuples specifying the transformer objects to be applied to subsets of the data.", "Like in Pipeline and FeatureUnion, this allows the transformer and its parameters to be set using set_params and searched in grid search.", "Estimator must support fit and transform. Special-cased strings \u2018drop\u2019 and \u2018passthrough\u2019 are accepted as well, to indicate to drop the columns or to pass them through untransformed, respectively.", "Indexes the data on its second axis. Integers are interpreted as positional columns, while strings can reference DataFrame columns by name. A scalar string or int should be used where transformer expects X to be a 1d array-like (vector), otherwise a 2d array will be passed to the transformer. A callable is passed the input data X and can return any of the above. To select multiple columns by name or dtype, you can use make_column_selector.", "By default, only the specified columns in transformers are transformed and combined in the output, and the non-specified columns are dropped. (default of 'drop'). By specifying remainder='passthrough', all remaining columns that were not specified in transformers will be automatically passed through. This subset of columns is concatenated with the output of the transformers. By setting remainder to be an estimator, the remaining non-specified columns will use the remainder estimator. The estimator must support fit and transform. Note that using this feature requires that the DataFrame columns input at fit and transform have identical order.", "If the output of the different transformers contains sparse matrices, these will be stacked as a sparse matrix if the overall density is lower than this value. Use sparse_threshold=0 to always return dense. When the transformed output consists of all dense data, the stacked result will be dense, and this keyword will be ignored.", "Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Multiplicative weights for features per transformer. The output of the transformer is multiplied by these weights. Keys are transformer names, values the weights.", "If True, the time elapsed while fitting each transformer will be printed as it is completed.", "The collection of fitted transformers as tuples of (name, fitted_transformer, column). fitted_transformer can be an estimator, \u2018drop\u2019, or \u2018passthrough\u2019. In case there were no columns selected, this will be the unfitted transformer. If there are remaining columns, the final element is a tuple of the form: (\u2018remainder\u2019, transformer, remaining_columns) corresponding to the remainder parameter. If there are remaining columns, then len(transformers_)==len(transformers)+1, otherwise len(transformers_)==len(transformers).", "Access the fitted transformer by name.", "Boolean flag indicating whether the output of transform is a sparse matrix or a dense numpy array, which depends on the output of the individual transformers and the sparse_threshold keyword.", "See also", "Convenience function for combining the outputs of multiple transformer objects applied to column subsets of the original feature space.", "Convenience function for selecting columns based on datatype or the columns name with a regex pattern.", "The order of the columns in the transformed feature matrix follows the order of how the columns are specified in the transformers list. Columns of the original feature matrix that are not specified are dropped from the resulting transformed feature matrix, unless specified in the passthrough keyword. Those columns specified with passthrough are added at the right to the output of the transformers.", "fit(X[, y])", "Fit all transformers using X.", "fit_transform(X[, y])", "Fit all transformers, transform the data and concatenate results.", "get_feature_names()", "Get feature names from all transformers.", "get_params([deep])", "Get parameters for this estimator.", "set_params(**kwargs)", "Set the parameters of this estimator.", "transform(X)", "Transform X separately by each transformer, concatenate results.", "Fit all transformers using X.", "Input data, of which specified subsets are used to fit the transformers.", "Targets for supervised learning.", "This estimator", "Fit all transformers, transform the data and concatenate results.", "Input data, of which specified subsets are used to fit the transformers.", "Targets for supervised learning.", "hstack of results of transformers. sum_n_components is the sum of n_components (output dimension) over transformers. If any result is a sparse matrix, everything will be converted to sparse matrices.", "Get feature names from all transformers.", "Names of the features produced by transform.", "Get parameters for this estimator.", "Returns the parameters given in the constructor as well as the estimators contained within the transformers of the ColumnTransformer.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Access the fitted transformer by name.", "Read-only attribute to access any transformer by given name. Keys are transformer names and values are the fitted transformer objects.", "Set the parameters of this estimator.", "Valid parameter keys can be listed with get_params(). Note that you can directly set the parameters of the estimators contained in transformers of ColumnTransformer.", "Transform X separately by each transformer, concatenate results.", "The data to be transformed by subset.", "hstack of results of transformers. sum_n_components is the sum of n_components (output dimension) over transformers. If any result is a sparse matrix, everything will be converted to sparse matrices.", "Poisson regression and non-normal loss", "Tweedie regression on insurance claims", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Column Transformer with Mixed Types", "Column Transformer with Heterogeneous Data Sources"]}, {"name": "compose.ColumnTransformer.fit()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.fit", "type": "compose", "text": ["Fit all transformers using X.", "Input data, of which specified subsets are used to fit the transformers.", "Targets for supervised learning.", "This estimator"]}, {"name": "compose.ColumnTransformer.fit_transform()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.fit_transform", "type": "compose", "text": ["Fit all transformers, transform the data and concatenate results.", "Input data, of which specified subsets are used to fit the transformers.", "Targets for supervised learning.", "hstack of results of transformers. sum_n_components is the sum of n_components (output dimension) over transformers. If any result is a sparse matrix, everything will be converted to sparse matrices."]}, {"name": "compose.ColumnTransformer.get_feature_names()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.get_feature_names", "type": "compose", "text": ["Get feature names from all transformers.", "Names of the features produced by transform."]}, {"name": "compose.ColumnTransformer.get_params()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.get_params", "type": "compose", "text": ["Get parameters for this estimator.", "Returns the parameters given in the constructor as well as the estimators contained within the transformers of the ColumnTransformer.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "compose.ColumnTransformer.named_transformers_()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.named_transformers_", "type": "compose", "text": ["Access the fitted transformer by name.", "Read-only attribute to access any transformer by given name. Keys are transformer names and values are the fitted transformer objects."]}, {"name": "compose.ColumnTransformer.set_params()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.set_params", "type": "compose", "text": ["Set the parameters of this estimator.", "Valid parameter keys can be listed with get_params(). Note that you can directly set the parameters of the estimators contained in transformers of ColumnTransformer."]}, {"name": "compose.ColumnTransformer.transform()", "path": "modules/generated/sklearn.compose.columntransformer#sklearn.compose.ColumnTransformer.transform", "type": "compose", "text": ["Transform X separately by each transformer, concatenate results.", "The data to be transformed by subset.", "hstack of results of transformers. sum_n_components is the sum of n_components (output dimension) over transformers. If any result is a sparse matrix, everything will be converted to sparse matrices."]}, {"name": "compose.make_column_selector()", "path": "modules/generated/sklearn.compose.make_column_selector#sklearn.compose.make_column_selector", "type": "compose", "text": ["Create a callable to select columns to be used with ColumnTransformer.", "make_column_selector can select columns based on datatype or the columns name with a regex. When using multiple selection criteria, all criteria must match for a column to be selected.", "Name of columns containing this regex pattern will be included. If None, column selection will not be selected based on pattern.", "A selection of dtypes to include. For more details, see pandas.DataFrame.select_dtypes.", "A selection of dtypes to exclude. For more details, see pandas.DataFrame.select_dtypes.", "Callable for column selection to be used by a ColumnTransformer.", "See also", "Class that allows combining the outputs of multiple transformer objects used on column subsets of the data into a single feature space."]}, {"name": "compose.make_column_transformer()", "path": "modules/generated/sklearn.compose.make_column_transformer#sklearn.compose.make_column_transformer", "type": "compose", "text": ["Construct a ColumnTransformer from the given transformers.", "This is a shorthand for the ColumnTransformer constructor; it does not require, and does not permit, naming the transformers. Instead, they will be given names automatically based on their types. It also does not allow weighting with transformer_weights.", "Read more in the User Guide.", "Tuples of the form (transformer, columns) specifying the transformer objects to be applied to subsets of the data.", "Estimator must support fit and transform. Special-cased strings \u2018drop\u2019 and \u2018passthrough\u2019 are accepted as well, to indicate to drop the columns or to pass them through untransformed, respectively.", "Indexes the data on its second axis. Integers are interpreted as positional columns, while strings can reference DataFrame columns by name. A scalar string or int should be used where transformer expects X to be a 1d array-like (vector), otherwise a 2d array will be passed to the transformer. A callable is passed the input data X and can return any of the above. To select multiple columns by name or dtype, you can use make_column_selector.", "By default, only the specified columns in transformers are transformed and combined in the output, and the non-specified columns are dropped. (default of 'drop'). By specifying remainder='passthrough', all remaining columns that were not specified in transformers will be automatically passed through. This subset of columns is concatenated with the output of the transformers. By setting remainder to be an estimator, the remaining non-specified columns will use the remainder estimator. The estimator must support fit and transform.", "If the transformed output consists of a mix of sparse and dense data, it will be stacked as a sparse matrix if the density is lower than this value. Use sparse_threshold=0 to always return dense. When the transformed output consists of all sparse or all dense data, the stacked result will be sparse or dense, respectively, and this keyword will be ignored.", "Number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "If True, the time elapsed while fitting each transformer will be printed as it is completed.", "See also", "Class that allows combining the outputs of multiple transformer objects used on column subsets of the data into a single feature space."]}, {"name": "compose.TransformedTargetRegressor", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor", "type": "compose", "text": ["Meta-estimator to regress on a transformed target.", "Useful for applying a non-linear transformation to the target y in regression problems. This transformation can be given as a Transformer such as the QuantileTransformer or as a function and its inverse such as log and exp.", "The computation during fit is:", "or:", "The computation during predict is:", "or:", "Read more in the User Guide.", "New in version 0.20.", "Regressor object such as derived from RegressorMixin. This regressor will automatically be cloned each time prior to fitting. If regressor is None, LinearRegression() is created and used.", "Estimator object such as derived from TransformerMixin. Cannot be set at the same time as func and inverse_func. If transformer is None as well as func and inverse_func, the transformer will be an identity transformer. Note that the transformer will be cloned during fitting. Also, the transformer is restricting y to be a numpy array.", "Function to apply to y before passing to fit. Cannot be set at the same time as transformer. The function needs to return a 2-dimensional array. If func is None, the function used will be the identity function.", "Function to apply to the prediction of the regressor. Cannot be set at the same time as transformer as well. The function needs to return a 2-dimensional array. The inverse function is used to return predictions to the same space of the original training labels.", "Whether to check that transform followed by inverse_transform or func followed by inverse_func leads to the original targets.", "Fitted regressor.", "Transformer used in fit and predict.", "Internally, the target y is always converted into a 2-dimensional array to be used by scikit-learn transformers. At the time of prediction, the output will be reshaped to a have the same number of dimensions as y.", "See examples/compose/plot_transformed_target.py.", "fit(X, y, **fit_params)", "Fit the model according to the given training data.", "get_params([deep])", "Get parameters for this estimator.", "predict(X)", "Predict using the base regressor, applying inverse.", "score(X, y[, sample_weight])", "Return the coefficient of determination \\(R^2\\) of the prediction.", "set_params(**params)", "Set the parameters of this estimator.", "Fit the model according to the given training data.", "Training vector, where n_samples is the number of samples and n_features is the number of features.", "Target values.", "Parameters passed to the fit method of the underlying regressor.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Predict using the base regressor, applying inverse.", "The regressor is used to predict and the inverse_func or inverse_transform is applied before returning the prediction.", "Samples.", "Predicted values.", "Return the coefficient of determination \\(R^2\\) of the prediction.", "The coefficient \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)\n** 2).sum() and \\(v\\) is the total sum of squares ((y_true -\ny_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.", "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.", "True values for X.", "Sample weights.", "\\(R^2\\) of self.predict(X) wrt. y.", "The \\(R^2\\) score used when calling score on a regressor uses multioutput='uniform_average' from version 0.23 to keep consistent with default value of r2_score. This influences the score method of all the multioutput regressors (except for MultiOutputRegressor).", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "compose.TransformedTargetRegressor()", "path": "modules/generated/sklearn.compose.transformedtargetregressor", "type": "compose", "text": ["Meta-estimator to regress on a transformed target.", "Useful for applying a non-linear transformation to the target y in regression problems. This transformation can be given as a Transformer such as the QuantileTransformer or as a function and its inverse such as log and exp.", "The computation during fit is:", "or:", "The computation during predict is:", "or:", "Read more in the User Guide.", "New in version 0.20.", "Regressor object such as derived from RegressorMixin. This regressor will automatically be cloned each time prior to fitting. If regressor is None, LinearRegression() is created and used.", "Estimator object such as derived from TransformerMixin. Cannot be set at the same time as func and inverse_func. If transformer is None as well as func and inverse_func, the transformer will be an identity transformer. Note that the transformer will be cloned during fitting. Also, the transformer is restricting y to be a numpy array.", "Function to apply to y before passing to fit. Cannot be set at the same time as transformer. The function needs to return a 2-dimensional array. If func is None, the function used will be the identity function.", "Function to apply to the prediction of the regressor. Cannot be set at the same time as transformer as well. The function needs to return a 2-dimensional array. The inverse function is used to return predictions to the same space of the original training labels.", "Whether to check that transform followed by inverse_transform or func followed by inverse_func leads to the original targets.", "Fitted regressor.", "Transformer used in fit and predict.", "Internally, the target y is always converted into a 2-dimensional array to be used by scikit-learn transformers. At the time of prediction, the output will be reshaped to a have the same number of dimensions as y.", "See examples/compose/plot_transformed_target.py.", "fit(X, y, **fit_params)", "Fit the model according to the given training data.", "get_params([deep])", "Get parameters for this estimator.", "predict(X)", "Predict using the base regressor, applying inverse.", "score(X, y[, sample_weight])", "Return the coefficient of determination \\(R^2\\) of the prediction.", "set_params(**params)", "Set the parameters of this estimator.", "Fit the model according to the given training data.", "Training vector, where n_samples is the number of samples and n_features is the number of features.", "Target values.", "Parameters passed to the fit method of the underlying regressor.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Predict using the base regressor, applying inverse.", "The regressor is used to predict and the inverse_func or inverse_transform is applied before returning the prediction.", "Samples.", "Predicted values.", "Return the coefficient of determination \\(R^2\\) of the prediction.", "The coefficient \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)\n** 2).sum() and \\(v\\) is the total sum of squares ((y_true -\ny_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.", "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.", "True values for X.", "Sample weights.", "\\(R^2\\) of self.predict(X) wrt. y.", "The \\(R^2\\) score used when calling score on a regressor uses multioutput='uniform_average' from version 0.23 to keep consistent with default value of r2_score. This influences the score method of all the multioutput regressors (except for MultiOutputRegressor).", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Poisson regression and non-normal loss", "Common pitfalls in interpretation of coefficients of linear models", "Effect of transforming the targets in regression model"]}, {"name": "compose.TransformedTargetRegressor.fit()", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor.fit", "type": "compose", "text": ["Fit the model according to the given training data.", "Training vector, where n_samples is the number of samples and n_features is the number of features.", "Target values.", "Parameters passed to the fit method of the underlying regressor."]}, {"name": "compose.TransformedTargetRegressor.get_params()", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor.get_params", "type": "compose", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "compose.TransformedTargetRegressor.predict()", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor.predict", "type": "compose", "text": ["Predict using the base regressor, applying inverse.", "The regressor is used to predict and the inverse_func or inverse_transform is applied before returning the prediction.", "Samples.", "Predicted values."]}, {"name": "compose.TransformedTargetRegressor.score()", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor.score", "type": "compose", "text": ["Return the coefficient of determination \\(R^2\\) of the prediction.", "The coefficient \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)\n** 2).sum() and \\(v\\) is the total sum of squares ((y_true -\ny_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.", "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.", "True values for X.", "Sample weights.", "\\(R^2\\) of self.predict(X) wrt. y.", "The \\(R^2\\) score used when calling score on a regressor uses multioutput='uniform_average' from version 0.23 to keep consistent with default value of r2_score. This influences the score method of all the multioutput regressors (except for MultiOutputRegressor)."]}, {"name": "compose.TransformedTargetRegressor.set_params()", "path": "modules/generated/sklearn.compose.transformedtargetregressor#sklearn.compose.TransformedTargetRegressor.set_params", "type": "compose", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "config_context()", "path": "modules/generated/sklearn.config_context#sklearn.config_context", "type": "sklearn", "text": ["Context manager for global scikit-learn configuration", "If True, validation for finiteness will be skipped, saving time, but leading to potential crashes. If False, validation for finiteness will be performed, avoiding error. Global default: False.", "If set, scikit-learn will attempt to limit the size of temporary arrays to this number of MiB (per job when parallelised), often saving both computation time and memory on expensive operations that can be performed in chunks. Global default: 1024.", "If True, only the parameters that were set to non-default values will be printed when printing an estimator. For example, print(SVC()) while True will only print \u2018SVC()\u2019, but would print \u2018SVC(C=1.0, cache_size=200, \u2026)\u2019 with all the non-changed parameters when False. Default is True.", "Changed in version 0.23: Default changed from False to True.", "If \u2018diagram\u2019, estimators will be displayed as a diagram in a Jupyter lab or notebook context. If \u2018text\u2019, estimators will be displayed as text. Default is \u2018text\u2019.", "New in version 0.23.", "See also", "Set global scikit-learn configuration.", "Retrieve current values of the global configuration.", "All settings, not just those presently modified, will be returned to their previous values when the context manager is exited. This is not thread-safe."]}, {"name": "covariance.EllipticEnvelope", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope", "type": "covariance", "text": ["An object for detecting outliers in a Gaussian distributed dataset.", "Read more in the User Guide.", "Specify if the estimated precision is stored.", "If True, the support of robust location and covariance estimates is computed, and a covariance estimate is recomputed from it, without centering the data. Useful to work with data whose mean is significantly equal to zero but is not exactly zero. If False, the robust location and covariance are directly computed with the FastMCD algorithm without additional treatment.", "The proportion of points to be included in the support of the raw MCD estimate. If None, the minimum value of support_fraction will be used within the algorithm: [n_sample + n_features + 1] / 2. Range is (0, 1).", "The amount of contamination of the data set, i.e. the proportion of outliers in the data set. Range is (0, 0.5).", "Determines the pseudo random number generator for shuffling the data. Pass an int for reproducible results across multiple function calls. See :term: Glossary <random_state>.", "Estimated robust location.", "Estimated robust covariance matrix.", "Estimated pseudo inverse matrix. (stored only if store_precision is True)", "A mask of the observations that have been used to compute the robust estimates of location and shape.", "Offset used to define the decision function from the raw scores. We have the relation: decision_function = score_samples - offset_. The offset depends on the contamination parameter and is defined in such a way we obtain the expected number of outliers (samples with decision function < 0) in training.", "New in version 0.20.", "The raw robust estimated location before correction and re-weighting.", "The raw robust estimated covariance before correction and re-weighting.", "A mask of the observations that have been used to compute the raw robust estimates of location and shape, before correction and re-weighting.", "Mahalanobis distances of the training set (on which fit is called) observations.", "See also", "Outlier detection from covariance estimation may break or not perform well in high-dimensional settings. In particular, one will always take care to work with n_samples > n_features ** 2.", "Rousseeuw, P.J., Van Driessen, K. \u201cA fast algorithm for the minimum covariance determinant estimator\u201d Technometrics 41(3), 212 (1999)", "correct_covariance(data)", "Apply a correction to raw Minimum Covariance Determinant estimates.", "decision_function(X)", "Compute the decision function of the given observations.", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fit the EllipticEnvelope model.", "fit_predict(X[, y])", "Perform fit on X and returns labels for X.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "predict(X)", "Predict the labels (1 inlier, -1 outlier) of X according to the fitted model.", "reweight_covariance(data)", "Re-weight raw Minimum Covariance Determinant estimates.", "score(X, y[, sample_weight])", "Returns the mean accuracy on the given test data and labels.", "score_samples(X)", "Compute the negative Mahalanobis distances.", "set_params(**params)", "Set the parameters of this estimator.", "Apply a correction to raw Minimum Covariance Determinant estimates.", "Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [RVD].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Corrected robust covariance estimate.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS", "Compute the decision function of the given observations.", "The data matrix.", "Decision function of the samples. It is equal to the shifted Mahalanobis distances. The threshold for being an outlier is 0, which ensures a compatibility with other outlier detection algorithms.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fit the EllipticEnvelope model.", "Training data.", "Not used, present for API consistency by convention.", "Perform fit on X and returns labels for X.", "Returns -1 for outliers and 1 for inliers.", "Not used, present for API consistency by convention.", "1 for inliers, -1 for outliers.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Predict the labels (1 inlier, -1 outlier) of X according to the fitted model.", "The data matrix.", "Returns -1 for anomalies/outliers and +1 for inliers.", "Re-weight raw Minimum Covariance Determinant estimates.", "Re-weight observations using Rousseeuw\u2019s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [RVDriessen].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Re-weighted robust location estimate.", "Re-weighted robust covariance estimate.", "A mask of the observations that have been used to compute the re-weighted robust location and covariance estimates.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS", "Returns the mean accuracy on the given test data and labels.", "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.", "Test samples.", "True labels for X.", "Sample weights.", "Mean accuracy of self.predict(X) w.r.t. y.", "Compute the negative Mahalanobis distances.", "The data matrix.", "Opposite of the Mahalanobis distances.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.EllipticEnvelope()", "path": "modules/generated/sklearn.covariance.ellipticenvelope", "type": "covariance", "text": ["An object for detecting outliers in a Gaussian distributed dataset.", "Read more in the User Guide.", "Specify if the estimated precision is stored.", "If True, the support of robust location and covariance estimates is computed, and a covariance estimate is recomputed from it, without centering the data. Useful to work with data whose mean is significantly equal to zero but is not exactly zero. If False, the robust location and covariance are directly computed with the FastMCD algorithm without additional treatment.", "The proportion of points to be included in the support of the raw MCD estimate. If None, the minimum value of support_fraction will be used within the algorithm: [n_sample + n_features + 1] / 2. Range is (0, 1).", "The amount of contamination of the data set, i.e. the proportion of outliers in the data set. Range is (0, 0.5).", "Determines the pseudo random number generator for shuffling the data. Pass an int for reproducible results across multiple function calls. See :term: Glossary <random_state>.", "Estimated robust location.", "Estimated robust covariance matrix.", "Estimated pseudo inverse matrix. (stored only if store_precision is True)", "A mask of the observations that have been used to compute the robust estimates of location and shape.", "Offset used to define the decision function from the raw scores. We have the relation: decision_function = score_samples - offset_. The offset depends on the contamination parameter and is defined in such a way we obtain the expected number of outliers (samples with decision function < 0) in training.", "New in version 0.20.", "The raw robust estimated location before correction and re-weighting.", "The raw robust estimated covariance before correction and re-weighting.", "A mask of the observations that have been used to compute the raw robust estimates of location and shape, before correction and re-weighting.", "Mahalanobis distances of the training set (on which fit is called) observations.", "See also", "Outlier detection from covariance estimation may break or not perform well in high-dimensional settings. In particular, one will always take care to work with n_samples > n_features ** 2.", "Rousseeuw, P.J., Van Driessen, K. \u201cA fast algorithm for the minimum covariance determinant estimator\u201d Technometrics 41(3), 212 (1999)", "correct_covariance(data)", "Apply a correction to raw Minimum Covariance Determinant estimates.", "decision_function(X)", "Compute the decision function of the given observations.", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fit the EllipticEnvelope model.", "fit_predict(X[, y])", "Perform fit on X and returns labels for X.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "predict(X)", "Predict the labels (1 inlier, -1 outlier) of X according to the fitted model.", "reweight_covariance(data)", "Re-weight raw Minimum Covariance Determinant estimates.", "score(X, y[, sample_weight])", "Returns the mean accuracy on the given test data and labels.", "score_samples(X)", "Compute the negative Mahalanobis distances.", "set_params(**params)", "Set the parameters of this estimator.", "Apply a correction to raw Minimum Covariance Determinant estimates.", "Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [RVD].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Corrected robust covariance estimate.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS", "Compute the decision function of the given observations.", "The data matrix.", "Decision function of the samples. It is equal to the shifted Mahalanobis distances. The threshold for being an outlier is 0, which ensures a compatibility with other outlier detection algorithms.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fit the EllipticEnvelope model.", "Training data.", "Not used, present for API consistency by convention.", "Perform fit on X and returns labels for X.", "Returns -1 for outliers and 1 for inliers.", "Not used, present for API consistency by convention.", "1 for inliers, -1 for outliers.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Predict the labels (1 inlier, -1 outlier) of X according to the fitted model.", "The data matrix.", "Returns -1 for anomalies/outliers and +1 for inliers.", "Re-weight raw Minimum Covariance Determinant estimates.", "Re-weight observations using Rousseeuw\u2019s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [RVDriessen].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Re-weighted robust location estimate.", "Re-weighted robust covariance estimate.", "A mask of the observations that have been used to compute the re-weighted robust location and covariance estimates.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS", "Returns the mean accuracy on the given test data and labels.", "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.", "Test samples.", "True labels for X.", "Sample weights.", "Mean accuracy of self.predict(X) w.r.t. y.", "Compute the negative Mahalanobis distances.", "The data matrix.", "Opposite of the Mahalanobis distances.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Outlier detection on a real data set", "Comparing anomaly detection algorithms for outlier detection on toy datasets"]}, {"name": "covariance.EllipticEnvelope.correct_covariance()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.correct_covariance", "type": "covariance", "text": ["Apply a correction to raw Minimum Covariance Determinant estimates.", "Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [RVD].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Corrected robust covariance estimate.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS"]}, {"name": "covariance.EllipticEnvelope.decision_function()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.decision_function", "type": "covariance", "text": ["Compute the decision function of the given observations.", "The data matrix.", "Decision function of the samples. It is equal to the shifted Mahalanobis distances. The threshold for being an outlier is 0, which ensures a compatibility with other outlier detection algorithms."]}, {"name": "covariance.EllipticEnvelope.error_norm()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.error_norm", "type": "covariance", "text": ["Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators."]}, {"name": "covariance.EllipticEnvelope.fit()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.fit", "type": "covariance", "text": ["Fit the EllipticEnvelope model.", "Training data.", "Not used, present for API consistency by convention."]}, {"name": "covariance.EllipticEnvelope.fit_predict()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.fit_predict", "type": "covariance", "text": ["Perform fit on X and returns labels for X.", "Returns -1 for outliers and 1 for inliers.", "Not used, present for API consistency by convention.", "1 for inliers, -1 for outliers."]}, {"name": "covariance.EllipticEnvelope.get_params()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.get_params", "type": "covariance", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "covariance.EllipticEnvelope.get_precision()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.get_precision", "type": "covariance", "text": ["Getter for the precision matrix.", "The precision matrix associated to the current covariance object."]}, {"name": "covariance.EllipticEnvelope.mahalanobis()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.mahalanobis", "type": "covariance", "text": ["Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations."]}, {"name": "covariance.EllipticEnvelope.predict()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.predict", "type": "covariance", "text": ["Predict the labels (1 inlier, -1 outlier) of X according to the fitted model.", "The data matrix.", "Returns -1 for anomalies/outliers and +1 for inliers."]}, {"name": "covariance.EllipticEnvelope.reweight_covariance()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.reweight_covariance", "type": "covariance", "text": ["Re-weight raw Minimum Covariance Determinant estimates.", "Re-weight observations using Rousseeuw\u2019s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [RVDriessen].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Re-weighted robust location estimate.", "Re-weighted robust covariance estimate.", "A mask of the observations that have been used to compute the re-weighted robust location and covariance estimates.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS"]}, {"name": "covariance.EllipticEnvelope.score()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.score", "type": "covariance", "text": ["Returns the mean accuracy on the given test data and labels.", "In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.", "Test samples.", "True labels for X.", "Sample weights.", "Mean accuracy of self.predict(X) w.r.t. y."]}, {"name": "covariance.EllipticEnvelope.score_samples()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.score_samples", "type": "covariance", "text": ["Compute the negative Mahalanobis distances.", "The data matrix.", "Opposite of the Mahalanobis distances."]}, {"name": "covariance.EllipticEnvelope.set_params()", "path": "modules/generated/sklearn.covariance.ellipticenvelope#sklearn.covariance.EllipticEnvelope.set_params", "type": "covariance", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.EmpiricalCovariance", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance", "type": "covariance", "text": ["Maximum likelihood covariance estimator", "Read more in the User Guide.", "Specifies if the estimated precision is stored.", "If True, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False (default), data are centered before computation.", "Estimated location, i.e. the estimated mean.", "Estimated covariance matrix", "Estimated pseudo-inverse matrix. (stored only if store_precision is True)", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fits the Maximum Likelihood Estimator covariance model according to the given training data and parameters.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fits the Maximum Likelihood Estimator covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.EmpiricalCovariance()", "path": "modules/generated/sklearn.covariance.empiricalcovariance", "type": "covariance", "text": ["Maximum likelihood covariance estimator", "Read more in the User Guide.", "Specifies if the estimated precision is stored.", "If True, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False (default), data are centered before computation.", "Estimated location, i.e. the estimated mean.", "Estimated covariance matrix", "Estimated pseudo-inverse matrix. (stored only if store_precision is True)", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fits the Maximum Likelihood Estimator covariance model according to the given training data and parameters.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fits the Maximum Likelihood Estimator covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate"]}, {"name": "covariance.EmpiricalCovariance.error_norm()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.error_norm", "type": "covariance", "text": ["Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators."]}, {"name": "covariance.EmpiricalCovariance.fit()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.fit", "type": "covariance", "text": ["Fits the Maximum Likelihood Estimator covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention."]}, {"name": "covariance.EmpiricalCovariance.get_params()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.get_params", "type": "covariance", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "covariance.EmpiricalCovariance.get_precision()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.get_precision", "type": "covariance", "text": ["Getter for the precision matrix.", "The precision matrix associated to the current covariance object."]}, {"name": "covariance.EmpiricalCovariance.mahalanobis()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.mahalanobis", "type": "covariance", "text": ["Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations."]}, {"name": "covariance.EmpiricalCovariance.score()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.score", "type": "covariance", "text": ["Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix."]}, {"name": "covariance.EmpiricalCovariance.set_params()", "path": "modules/generated/sklearn.covariance.empiricalcovariance#sklearn.covariance.EmpiricalCovariance.set_params", "type": "covariance", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.empirical_covariance()", "path": "modules/generated/sklearn.covariance.empirical_covariance#sklearn.covariance.empirical_covariance", "type": "covariance", "text": ["Computes the Maximum likelihood covariance estimator", "Data from which to compute the covariance estimate", "If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data will be centered before computation.", "Empirical covariance (Maximum Likelihood Estimator)."]}, {"name": "covariance.GraphicalLasso", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso", "type": "covariance", "text": ["Sparse inverse covariance estimation with an l1-penalized estimator.", "Read more in the User Guide.", "Changed in version v0.20: GraphLasso has been renamed to GraphicalLasso", "The regularization parameter: the higher alpha, the more regularization, the sparser the inverse covariance. Range is (0, inf].", "The Lasso solver to use: coordinate descent or LARS. Use LARS for very sparse underlying graphs, where p > n. Elsewhere prefer cd which is more numerically stable.", "The tolerance to declare convergence: if the dual gap goes below this value, iterations are stopped. Range is (0, inf].", "The tolerance for the elastic net solver used to calculate the descent direction. This parameter controls the accuracy of the search direction for a given column update, not of the overall parameter estimate. Only used for mode=\u2019cd\u2019. Range is (0, inf].", "The maximum number of iterations.", "If verbose is True, the objective function and dual gap are plotted at each iteration.", "If True, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data are centered before computation.", "Estimated location, i.e. the estimated mean.", "Estimated covariance matrix", "Estimated pseudo inverse matrix.", "Number of iterations run.", "See also", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fits the GraphicalLasso model to X.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fits the GraphicalLasso model to X.", "Data from which to compute the covariance estimate", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.GraphicalLasso()", "path": "modules/generated/sklearn.covariance.graphicallasso", "type": "covariance", "text": ["Sparse inverse covariance estimation with an l1-penalized estimator.", "Read more in the User Guide.", "Changed in version v0.20: GraphLasso has been renamed to GraphicalLasso", "The regularization parameter: the higher alpha, the more regularization, the sparser the inverse covariance. Range is (0, inf].", "The Lasso solver to use: coordinate descent or LARS. Use LARS for very sparse underlying graphs, where p > n. Elsewhere prefer cd which is more numerically stable.", "The tolerance to declare convergence: if the dual gap goes below this value, iterations are stopped. Range is (0, inf].", "The tolerance for the elastic net solver used to calculate the descent direction. This parameter controls the accuracy of the search direction for a given column update, not of the overall parameter estimate. Only used for mode=\u2019cd\u2019. Range is (0, inf].", "The maximum number of iterations.", "If verbose is True, the objective function and dual gap are plotted at each iteration.", "If True, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data are centered before computation.", "Estimated location, i.e. the estimated mean.", "Estimated covariance matrix", "Estimated pseudo inverse matrix.", "Number of iterations run.", "See also", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fits the GraphicalLasso model to X.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fits the GraphicalLasso model to X.", "Data from which to compute the covariance estimate", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.GraphicalLasso.error_norm()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.error_norm", "type": "covariance", "text": ["Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators."]}, {"name": "covariance.GraphicalLasso.fit()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.fit", "type": "covariance", "text": ["Fits the GraphicalLasso model to X.", "Data from which to compute the covariance estimate", "Not used, present for API consistency by convention."]}, {"name": "covariance.GraphicalLasso.get_params()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.get_params", "type": "covariance", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "covariance.GraphicalLasso.get_precision()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.get_precision", "type": "covariance", "text": ["Getter for the precision matrix.", "The precision matrix associated to the current covariance object."]}, {"name": "covariance.GraphicalLasso.mahalanobis()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.mahalanobis", "type": "covariance", "text": ["Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations."]}, {"name": "covariance.GraphicalLasso.score()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.score", "type": "covariance", "text": ["Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix."]}, {"name": "covariance.GraphicalLasso.set_params()", "path": "modules/generated/sklearn.covariance.graphicallasso#sklearn.covariance.GraphicalLasso.set_params", "type": "covariance", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.GraphicalLassoCV", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV", "type": "covariance", "text": ["Sparse inverse covariance w/ cross-validated choice of the l1 penalty.", "See glossary entry for cross-validation estimator.", "Read more in the User Guide.", "Changed in version v0.20: GraphLassoCV has been renamed to GraphicalLassoCV", "If an integer is given, it fixes the number of points on the grids of alpha to be used. If a list is given, it gives the grid to be used. See the notes in the class docstring for more details. Range is (0, inf] when floats given.", "The number of times the grid is refined. Not used if explicit values of alphas are passed. Range is [1, inf).", "Determines the cross-validation splitting strategy. Possible inputs for cv are:", "For integer/None inputs KFold is used.", "Refer User Guide for the various cross-validation strategies that can be used here.", "Changed in version 0.20: cv default value if None changed from 3-fold to 5-fold.", "The tolerance to declare convergence: if the dual gap goes below this value, iterations are stopped. Range is (0, inf].", "The tolerance for the elastic net solver used to calculate the descent direction. This parameter controls the accuracy of the search direction for a given column update, not of the overall parameter estimate. Only used for mode=\u2019cd\u2019. Range is (0, inf].", "Maximum number of iterations.", "The Lasso solver to use: coordinate descent or LARS. Use LARS for very sparse underlying graphs, where number of features is greater than number of samples. Elsewhere prefer cd which is more numerically stable.", "number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Changed in version v0.20: n_jobs default changed from 1 to None", "If verbose is True, the objective function and duality gap are printed at each iteration.", "If True, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data are centered before computation.", "Estimated location, i.e. the estimated mean.", "Estimated covariance matrix.", "Estimated precision matrix (inverse covariance).", "Penalization parameter selected.", "All penalization parameters explored.", "Deprecated since version 0.24: The cv_alphas_ attribute is deprecated in version 0.24 in favor of cv_results_['alphas'] and will be removed in version 1.1 (renaming of 0.26).", "Log-likelihood score on left-out data across folds.", "Deprecated since version 0.24: The grid_scores_ attribute is deprecated in version 0.24 in favor of cv_results_ and will be removed in version 1.1 (renaming of 0.26).", "A dict with keys:", "All penalization parameters explored.", "Log-likelihood score on left-out data across (k)th fold.", "Mean of scores over the folds.", "Standard deviation of scores over the folds.", "New in version 0.24.", "Number of iterations run for the optimal alpha.", "See also", "The search for the optimal penalization parameter (alpha) is done on an iteratively refined grid: first the cross-validated scores on a grid are computed, then a new refined grid is centered around the maximum, and so on.", "One of the challenges which is faced here is that the solvers can fail to converge to a well-conditioned estimate. The corresponding values of alpha then come out as missing values, but the optimum may be close to these missing values.", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fits the GraphicalLasso covariance model to X.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fits the GraphicalLasso covariance model to X.", "Data from which to compute the covariance estimate", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.GraphicalLassoCV()", "path": "modules/generated/sklearn.covariance.graphicallassocv", "type": "covariance", "text": ["Sparse inverse covariance w/ cross-validated choice of the l1 penalty.", "See glossary entry for cross-validation estimator.", "Read more in the User Guide.", "Changed in version v0.20: GraphLassoCV has been renamed to GraphicalLassoCV", "If an integer is given, it fixes the number of points on the grids of alpha to be used. If a list is given, it gives the grid to be used. See the notes in the class docstring for more details. Range is (0, inf] when floats given.", "The number of times the grid is refined. Not used if explicit values of alphas are passed. Range is [1, inf).", "Determines the cross-validation splitting strategy. Possible inputs for cv are:", "For integer/None inputs KFold is used.", "Refer User Guide for the various cross-validation strategies that can be used here.", "Changed in version 0.20: cv default value if None changed from 3-fold to 5-fold.", "The tolerance to declare convergence: if the dual gap goes below this value, iterations are stopped. Range is (0, inf].", "The tolerance for the elastic net solver used to calculate the descent direction. This parameter controls the accuracy of the search direction for a given column update, not of the overall parameter estimate. Only used for mode=\u2019cd\u2019. Range is (0, inf].", "Maximum number of iterations.", "The Lasso solver to use: coordinate descent or LARS. Use LARS for very sparse underlying graphs, where number of features is greater than number of samples. Elsewhere prefer cd which is more numerically stable.", "number of jobs to run in parallel. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.", "Changed in version v0.20: n_jobs default changed from 1 to None", "If verbose is True, the objective function and duality gap are printed at each iteration.", "If True, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data are centered before computation.", "Estimated location, i.e. the estimated mean.", "Estimated covariance matrix.", "Estimated precision matrix (inverse covariance).", "Penalization parameter selected.", "All penalization parameters explored.", "Deprecated since version 0.24: The cv_alphas_ attribute is deprecated in version 0.24 in favor of cv_results_['alphas'] and will be removed in version 1.1 (renaming of 0.26).", "Log-likelihood score on left-out data across folds.", "Deprecated since version 0.24: The grid_scores_ attribute is deprecated in version 0.24 in favor of cv_results_ and will be removed in version 1.1 (renaming of 0.26).", "A dict with keys:", "All penalization parameters explored.", "Log-likelihood score on left-out data across (k)th fold.", "Mean of scores over the folds.", "Standard deviation of scores over the folds.", "New in version 0.24.", "Number of iterations run for the optimal alpha.", "See also", "The search for the optimal penalization parameter (alpha) is done on an iteratively refined grid: first the cross-validated scores on a grid are computed, then a new refined grid is centered around the maximum, and so on.", "One of the challenges which is faced here is that the solvers can fail to converge to a well-conditioned estimate. The corresponding values of alpha then come out as missing values, but the optimum may be close to these missing values.", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fits the GraphicalLasso covariance model to X.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fits the GraphicalLasso covariance model to X.", "Data from which to compute the covariance estimate", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Sparse inverse covariance estimation", "Visualizing the stock market structure"]}, {"name": "covariance.GraphicalLassoCV.error_norm()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.error_norm", "type": "covariance", "text": ["Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators."]}, {"name": "covariance.GraphicalLassoCV.fit()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.fit", "type": "covariance", "text": ["Fits the GraphicalLasso covariance model to X.", "Data from which to compute the covariance estimate", "Not used, present for API consistency by convention."]}, {"name": "covariance.GraphicalLassoCV.get_params()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.get_params", "type": "covariance", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "covariance.GraphicalLassoCV.get_precision()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.get_precision", "type": "covariance", "text": ["Getter for the precision matrix.", "The precision matrix associated to the current covariance object."]}, {"name": "covariance.GraphicalLassoCV.mahalanobis()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.mahalanobis", "type": "covariance", "text": ["Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations."]}, {"name": "covariance.GraphicalLassoCV.score()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.score", "type": "covariance", "text": ["Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix."]}, {"name": "covariance.GraphicalLassoCV.set_params()", "path": "modules/generated/sklearn.covariance.graphicallassocv#sklearn.covariance.GraphicalLassoCV.set_params", "type": "covariance", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.graphical_lasso()", "path": "modules/generated/sklearn.covariance.graphical_lasso#sklearn.covariance.graphical_lasso", "type": "covariance", "text": ["l1-penalized covariance estimator", "Read more in the User Guide.", "Changed in version v0.20: graph_lasso has been renamed to graphical_lasso", "Empirical covariance from which to compute the covariance estimate.", "The regularization parameter: the higher alpha, the more regularization, the sparser the inverse covariance. Range is (0, inf].", "The initial guess for the covariance. If None, then the empirical covariance is used.", "The Lasso solver to use: coordinate descent or LARS. Use LARS for very sparse underlying graphs, where p > n. Elsewhere prefer cd which is more numerically stable.", "The tolerance to declare convergence: if the dual gap goes below this value, iterations are stopped. Range is (0, inf].", "The tolerance for the elastic net solver used to calculate the descent direction. This parameter controls the accuracy of the search direction for a given column update, not of the overall parameter estimate. Only used for mode=\u2019cd\u2019. Range is (0, inf].", "The maximum number of iterations.", "If verbose is True, the objective function and dual gap are printed at each iteration.", "If return_costs is True, the objective function and dual gap at each iteration are returned.", "The machine-precision regularization in the computation of the Cholesky diagonal factors. Increase this for very ill-conditioned systems. Default is np.finfo(np.float64).eps.", "Whether or not to return the number of iterations.", "The estimated covariance matrix.", "The estimated (sparse) precision matrix.", "The list of values of the objective function and the dual gap at each iteration. Returned only if return_costs is True.", "Number of iterations. Returned only if return_n_iter is set to True.", "See also", "The algorithm employed to solve this problem is the GLasso algorithm, from the Friedman 2008 Biostatistics paper. It is the same algorithm as in the R glasso package.", "One possible difference with the glasso R package is that the diagonal coefficients are not penalized."]}, {"name": "covariance.LedoitWolf", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf", "type": "covariance", "text": ["LedoitWolf Estimator", "Ledoit-Wolf is a particular form of shrinkage, where the shrinkage coefficient is computed using O. Ledoit and M. Wolf\u2019s formula as described in \u201cA Well-Conditioned Estimator for Large-Dimensional Covariance Matrices\u201d, Ledoit and Wolf, Journal of Multivariate Analysis, Volume 88, Issue 2, February 2004, pages 365-411.", "Read more in the User Guide.", "Specify if the estimated precision is stored.", "If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False (default), data will be centered before computation.", "Size of blocks into which the covariance matrix will be split during its Ledoit-Wolf estimation. This is purely a memory optimization and does not affect results.", "Estimated covariance matrix.", "Estimated location, i.e. the estimated mean.", "Estimated pseudo inverse matrix. (stored only if store_precision is True)", "Coefficient in the convex combination used for the computation of the shrunk estimate. Range is [0, 1].", "The regularised covariance is:", "(1 - shrinkage) * cov + shrinkage * mu * np.identity(n_features)", "where mu = trace(cov) / n_features and shrinkage is given by the Ledoit and Wolf formula (see References)", "\u201cA Well-Conditioned Estimator for Large-Dimensional Covariance Matrices\u201d, Ledoit and Wolf, Journal of Multivariate Analysis, Volume 88, Issue 2, February 2004, pages 365-411.", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fit the Ledoit-Wolf shrunk covariance model according to the given training data and parameters.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fit the Ledoit-Wolf shrunk covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.LedoitWolf()", "path": "modules/generated/sklearn.covariance.ledoitwolf", "type": "covariance", "text": ["LedoitWolf Estimator", "Ledoit-Wolf is a particular form of shrinkage, where the shrinkage coefficient is computed using O. Ledoit and M. Wolf\u2019s formula as described in \u201cA Well-Conditioned Estimator for Large-Dimensional Covariance Matrices\u201d, Ledoit and Wolf, Journal of Multivariate Analysis, Volume 88, Issue 2, February 2004, pages 365-411.", "Read more in the User Guide.", "Specify if the estimated precision is stored.", "If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False (default), data will be centered before computation.", "Size of blocks into which the covariance matrix will be split during its Ledoit-Wolf estimation. This is purely a memory optimization and does not affect results.", "Estimated covariance matrix.", "Estimated location, i.e. the estimated mean.", "Estimated pseudo inverse matrix. (stored only if store_precision is True)", "Coefficient in the convex combination used for the computation of the shrunk estimate. Range is [0, 1].", "The regularised covariance is:", "(1 - shrinkage) * cov + shrinkage * mu * np.identity(n_features)", "where mu = trace(cov) / n_features and shrinkage is given by the Ledoit and Wolf formula (see References)", "\u201cA Well-Conditioned Estimator for Large-Dimensional Covariance Matrices\u201d, Ledoit and Wolf, Journal of Multivariate Analysis, Volume 88, Issue 2, February 2004, pages 365-411.", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fit the Ledoit-Wolf shrunk covariance model according to the given training data and parameters.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fit the Ledoit-Wolf shrunk covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Ledoit-Wolf vs OAS estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Model selection with Probabilistic PCA and Factor Analysis (FA)"]}, {"name": "covariance.LedoitWolf.error_norm()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.error_norm", "type": "covariance", "text": ["Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators."]}, {"name": "covariance.LedoitWolf.fit()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.fit", "type": "covariance", "text": ["Fit the Ledoit-Wolf shrunk covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention."]}, {"name": "covariance.LedoitWolf.get_params()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.get_params", "type": "covariance", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "covariance.LedoitWolf.get_precision()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.get_precision", "type": "covariance", "text": ["Getter for the precision matrix.", "The precision matrix associated to the current covariance object."]}, {"name": "covariance.LedoitWolf.mahalanobis()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.mahalanobis", "type": "covariance", "text": ["Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations."]}, {"name": "covariance.LedoitWolf.score()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.score", "type": "covariance", "text": ["Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix."]}, {"name": "covariance.LedoitWolf.set_params()", "path": "modules/generated/sklearn.covariance.ledoitwolf#sklearn.covariance.LedoitWolf.set_params", "type": "covariance", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.ledoit_wolf()", "path": "modules/generated/sklearn.covariance.ledoit_wolf#sklearn.covariance.ledoit_wolf", "type": "covariance", "text": ["Estimates the shrunk Ledoit-Wolf covariance matrix.", "Read more in the User Guide.", "Data from which to compute the covariance estimate", "If True, data will not be centered before computation. Useful to work with data whose mean is significantly equal to zero but is not exactly zero. If False, data will be centered before computation.", "Size of blocks into which the covariance matrix will be split. This is purely a memory optimization and does not affect results.", "Shrunk covariance.", "Coefficient in the convex combination used for the computation of the shrunk estimate.", "The regularized (shrunk) covariance is:", "(1 - shrinkage) * cov + shrinkage * mu * np.identity(n_features)", "where mu = trace(cov) / n_features"]}, {"name": "covariance.MinCovDet", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet", "type": "covariance", "text": ["Minimum Covariance Determinant (MCD): robust estimator of covariance.", "The Minimum Covariance Determinant covariance estimator is to be applied on Gaussian-distributed data, but could still be relevant on data drawn from a unimodal, symmetric distribution. It is not meant to be used with multi-modal data (the algorithm used to fit a MinCovDet object is likely to fail in such a case). One should consider projection pursuit methods to deal with multi-modal datasets.", "Read more in the User Guide.", "Specify if the estimated precision is stored.", "If True, the support of the robust location and the covariance estimates is computed, and a covariance estimate is recomputed from it, without centering the data. Useful to work with data whose mean is significantly equal to zero but is not exactly zero. If False, the robust location and covariance are directly computed with the FastMCD algorithm without additional treatment.", "The proportion of points to be included in the support of the raw MCD estimate. Default is None, which implies that the minimum value of support_fraction will be used within the algorithm: (n_sample + n_features + 1) / 2. The parameter must be in the range (0, 1).", "Determines the pseudo random number generator for shuffling the data. Pass an int for reproducible results across multiple function calls. See :term: Glossary <random_state>.", "The raw robust estimated location before correction and re-weighting.", "The raw robust estimated covariance before correction and re-weighting.", "A mask of the observations that have been used to compute the raw robust estimates of location and shape, before correction and re-weighting.", "Estimated robust location.", "Estimated robust covariance matrix.", "Estimated pseudo inverse matrix. (stored only if store_precision is True)", "A mask of the observations that have been used to compute the robust estimates of location and shape.", "Mahalanobis distances of the training set (on which fit is called) observations.", "P. J. Rousseeuw. Least median of squares regression. J. Am Stat Ass, 79:871, 1984.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS", "R. W. Butler, P. L. Davies and M. Jhun, Asymptotics For The Minimum Covariance Determinant Estimator, The Annals of Statistics, 1993, Vol. 21, No. 3, 1385-1400", "correct_covariance(data)", "Apply a correction to raw Minimum Covariance Determinant estimates.", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fits a Minimum Covariance Determinant with the FastMCD algorithm.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "reweight_covariance(data)", "Re-weight raw Minimum Covariance Determinant estimates.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Apply a correction to raw Minimum Covariance Determinant estimates.", "Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [RVD].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Corrected robust covariance estimate.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fits a Minimum Covariance Determinant with the FastMCD algorithm.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Re-weight raw Minimum Covariance Determinant estimates.", "Re-weight observations using Rousseeuw\u2019s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [RVDriessen].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Re-weighted robust location estimate.", "Re-weighted robust covariance estimate.", "A mask of the observations that have been used to compute the re-weighted robust location and covariance estimates.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.MinCovDet()", "path": "modules/generated/sklearn.covariance.mincovdet", "type": "covariance", "text": ["Minimum Covariance Determinant (MCD): robust estimator of covariance.", "The Minimum Covariance Determinant covariance estimator is to be applied on Gaussian-distributed data, but could still be relevant on data drawn from a unimodal, symmetric distribution. It is not meant to be used with multi-modal data (the algorithm used to fit a MinCovDet object is likely to fail in such a case). One should consider projection pursuit methods to deal with multi-modal datasets.", "Read more in the User Guide.", "Specify if the estimated precision is stored.", "If True, the support of the robust location and the covariance estimates is computed, and a covariance estimate is recomputed from it, without centering the data. Useful to work with data whose mean is significantly equal to zero but is not exactly zero. If False, the robust location and covariance are directly computed with the FastMCD algorithm without additional treatment.", "The proportion of points to be included in the support of the raw MCD estimate. Default is None, which implies that the minimum value of support_fraction will be used within the algorithm: (n_sample + n_features + 1) / 2. The parameter must be in the range (0, 1).", "Determines the pseudo random number generator for shuffling the data. Pass an int for reproducible results across multiple function calls. See :term: Glossary <random_state>.", "The raw robust estimated location before correction and re-weighting.", "The raw robust estimated covariance before correction and re-weighting.", "A mask of the observations that have been used to compute the raw robust estimates of location and shape, before correction and re-weighting.", "Estimated robust location.", "Estimated robust covariance matrix.", "Estimated pseudo inverse matrix. (stored only if store_precision is True)", "A mask of the observations that have been used to compute the robust estimates of location and shape.", "Mahalanobis distances of the training set (on which fit is called) observations.", "P. J. Rousseeuw. Least median of squares regression. J. Am Stat Ass, 79:871, 1984.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS", "R. W. Butler, P. L. Davies and M. Jhun, Asymptotics For The Minimum Covariance Determinant Estimator, The Annals of Statistics, 1993, Vol. 21, No. 3, 1385-1400", "correct_covariance(data)", "Apply a correction to raw Minimum Covariance Determinant estimates.", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fits a Minimum Covariance Determinant with the FastMCD algorithm.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "reweight_covariance(data)", "Re-weight raw Minimum Covariance Determinant estimates.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Apply a correction to raw Minimum Covariance Determinant estimates.", "Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [RVD].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Corrected robust covariance estimate.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fits a Minimum Covariance Determinant with the FastMCD algorithm.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Re-weight raw Minimum Covariance Determinant estimates.", "Re-weight observations using Rousseeuw\u2019s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [RVDriessen].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Re-weighted robust location estimate.", "Re-weighted robust covariance estimate.", "A mask of the observations that have been used to compute the re-weighted robust location and covariance estimates.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate"]}, {"name": "covariance.MinCovDet.correct_covariance()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.correct_covariance", "type": "covariance", "text": ["Apply a correction to raw Minimum Covariance Determinant estimates.", "Correction using the empirical correction factor suggested by Rousseeuw and Van Driessen in [RVD].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Corrected robust covariance estimate.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS"]}, {"name": "covariance.MinCovDet.error_norm()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.error_norm", "type": "covariance", "text": ["Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators."]}, {"name": "covariance.MinCovDet.fit()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.fit", "type": "covariance", "text": ["Fits a Minimum Covariance Determinant with the FastMCD algorithm.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention."]}, {"name": "covariance.MinCovDet.get_params()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.get_params", "type": "covariance", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "covariance.MinCovDet.get_precision()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.get_precision", "type": "covariance", "text": ["Getter for the precision matrix.", "The precision matrix associated to the current covariance object."]}, {"name": "covariance.MinCovDet.mahalanobis()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.mahalanobis", "type": "covariance", "text": ["Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations."]}, {"name": "covariance.MinCovDet.reweight_covariance()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.reweight_covariance", "type": "covariance", "text": ["Re-weight raw Minimum Covariance Determinant estimates.", "Re-weight observations using Rousseeuw\u2019s method (equivalent to deleting outlying observations from the data set before computing location and covariance estimates) described in [RVDriessen].", "The data matrix, with p features and n samples. The data set must be the one which was used to compute the raw estimates.", "Re-weighted robust location estimate.", "Re-weighted robust covariance estimate.", "A mask of the observations that have been used to compute the re-weighted robust location and covariance estimates.", "A Fast Algorithm for the Minimum Covariance Determinant Estimator, 1999, American Statistical Association and the American Society for Quality, TECHNOMETRICS"]}, {"name": "covariance.MinCovDet.score()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.score", "type": "covariance", "text": ["Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix."]}, {"name": "covariance.MinCovDet.set_params()", "path": "modules/generated/sklearn.covariance.mincovdet#sklearn.covariance.MinCovDet.set_params", "type": "covariance", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.OAS", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS", "type": "covariance", "text": ["Oracle Approximating Shrinkage Estimator", "Read more in the User Guide.", "OAS is a particular form of shrinkage described in \u201cShrinkage Algorithms for MMSE Covariance Estimation\u201d Chen et al., IEEE Trans. on Sign. Proc., Volume 58, Issue 10, October 2010.", "The formula used here does not correspond to the one given in the article. In the original article, formula (23) states that 2/p is multiplied by Trace(cov*cov) in both the numerator and denominator, but this operation is omitted because for a large p, the value of 2/p is so small that it doesn\u2019t affect the value of the estimator.", "Specify if the estimated precision is stored.", "If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False (default), data will be centered before computation.", "Estimated covariance matrix.", "Estimated location, i.e. the estimated mean.", "Estimated pseudo inverse matrix. (stored only if store_precision is True)", "coefficient in the convex combination used for the computation of the shrunk estimate. Range is [0, 1].", "The regularised covariance is:", "(1 - shrinkage) * cov + shrinkage * mu * np.identity(n_features)", "where mu = trace(cov) / n_features and shrinkage is given by the OAS formula (see References)", "\u201cShrinkage Algorithms for MMSE Covariance Estimation\u201d Chen et al., IEEE Trans. on Sign. Proc., Volume 58, Issue 10, October 2010.", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fit the Oracle Approximating Shrinkage covariance model according to the given training data and parameters.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fit the Oracle Approximating Shrinkage covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.oas()", "path": "modules/generated/oas-function#sklearn.covariance.oas", "type": "covariance", "text": ["Estimate covariance with the Oracle Approximating Shrinkage algorithm.", "Data from which to compute the covariance estimate.", "If True, data will not be centered before computation. Useful to work with data whose mean is significantly equal to zero but is not exactly zero. If False, data will be centered before computation.", "Shrunk covariance.", "Coefficient in the convex combination used for the computation of the shrunk estimate.", "The regularised (shrunk) covariance is:", "(1 - shrinkage) * cov + shrinkage * mu * np.identity(n_features)", "where mu = trace(cov) / n_features", "The formula we used to implement the OAS is slightly modified compared to the one given in the article. See OAS for more details."]}, {"name": "covariance.OAS()", "path": "modules/generated/sklearn.covariance.oas", "type": "covariance", "text": ["Oracle Approximating Shrinkage Estimator", "Read more in the User Guide.", "OAS is a particular form of shrinkage described in \u201cShrinkage Algorithms for MMSE Covariance Estimation\u201d Chen et al., IEEE Trans. on Sign. Proc., Volume 58, Issue 10, October 2010.", "The formula used here does not correspond to the one given in the article. In the original article, formula (23) states that 2/p is multiplied by Trace(cov*cov) in both the numerator and denominator, but this operation is omitted because for a large p, the value of 2/p is so small that it doesn\u2019t affect the value of the estimator.", "Specify if the estimated precision is stored.", "If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False (default), data will be centered before computation.", "Estimated covariance matrix.", "Estimated location, i.e. the estimated mean.", "Estimated pseudo inverse matrix. (stored only if store_precision is True)", "coefficient in the convex combination used for the computation of the shrunk estimate. Range is [0, 1].", "The regularised covariance is:", "(1 - shrinkage) * cov + shrinkage * mu * np.identity(n_features)", "where mu = trace(cov) / n_features and shrinkage is given by the OAS formula (see References)", "\u201cShrinkage Algorithms for MMSE Covariance Estimation\u201d Chen et al., IEEE Trans. on Sign. Proc., Volume 58, Issue 10, October 2010.", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fit the Oracle Approximating Shrinkage covariance model according to the given training data and parameters.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fit the Oracle Approximating Shrinkage covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Ledoit-Wolf vs OAS estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood"]}, {"name": "covariance.OAS.error_norm()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.error_norm", "type": "covariance", "text": ["Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators."]}, {"name": "covariance.OAS.fit()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.fit", "type": "covariance", "text": ["Fit the Oracle Approximating Shrinkage covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention."]}, {"name": "covariance.OAS.get_params()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.get_params", "type": "covariance", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "covariance.OAS.get_precision()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.get_precision", "type": "covariance", "text": ["Getter for the precision matrix.", "The precision matrix associated to the current covariance object."]}, {"name": "covariance.OAS.mahalanobis()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.mahalanobis", "type": "covariance", "text": ["Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations."]}, {"name": "covariance.OAS.score()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.score", "type": "covariance", "text": ["Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix."]}, {"name": "covariance.OAS.set_params()", "path": "modules/generated/sklearn.covariance.oas#sklearn.covariance.OAS.set_params", "type": "covariance", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.ShrunkCovariance", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance", "type": "covariance", "text": ["Covariance estimator with shrinkage", "Read more in the User Guide.", "Specify if the estimated precision is stored", "If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data will be centered before computation.", "Coefficient in the convex combination used for the computation of the shrunk estimate. Range is [0, 1].", "Estimated covariance matrix", "Estimated location, i.e. the estimated mean.", "Estimated pseudo inverse matrix. (stored only if store_precision is True)", "The regularized covariance is given by:", "(1 - shrinkage) * cov + shrinkage * mu * np.identity(n_features)", "where mu = trace(cov) / n_features", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fit the shrunk covariance model according to the given training data and parameters.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fit the shrunk covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.ShrunkCovariance()", "path": "modules/generated/sklearn.covariance.shrunkcovariance", "type": "covariance", "text": ["Covariance estimator with shrinkage", "Read more in the User Guide.", "Specify if the estimated precision is stored", "If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data will be centered before computation.", "Coefficient in the convex combination used for the computation of the shrunk estimate. Range is [0, 1].", "Estimated covariance matrix", "Estimated location, i.e. the estimated mean.", "Estimated pseudo inverse matrix. (stored only if store_precision is True)", "The regularized covariance is given by:", "(1 - shrinkage) * cov + shrinkage * mu * np.identity(n_features)", "where mu = trace(cov) / n_features", "error_norm(comp_cov[, norm, scaling, squared])", "Computes the Mean Squared Error between two covariance estimators.", "fit(X[, y])", "Fit the shrunk covariance model according to the given training data and parameters.", "get_params([deep])", "Get parameters for this estimator.", "get_precision()", "Getter for the precision matrix.", "mahalanobis(X)", "Computes the squared Mahalanobis distances of given observations.", "score(X_test[, y])", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "set_params(**params)", "Set the parameters of this estimator.", "Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators.", "Fit the shrunk covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Getter for the precision matrix.", "The precision matrix associated to the current covariance object.", "Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations.", "Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix.", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Model selection with Probabilistic PCA and Factor Analysis (FA)"]}, {"name": "covariance.ShrunkCovariance.error_norm()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.error_norm", "type": "covariance", "text": ["Computes the Mean Squared Error between two covariance estimators. (In the sense of the Frobenius norm).", "The covariance to compare with.", "The type of norm used to compute the error. Available error types: - \u2018frobenius\u2019 (default): sqrt(tr(A^t.A)) - \u2018spectral\u2019: sqrt(max(eigenvalues(A^t.A)) where A is the error (comp_cov - self.covariance_).", "If True (default), the squared error norm is divided by n_features. If False, the squared error norm is not rescaled.", "Whether to compute the squared error norm or the error norm. If True (default), the squared error norm is returned. If False, the error norm is returned.", "The Mean Squared Error (in the sense of the Frobenius norm) between self and comp_cov covariance estimators."]}, {"name": "covariance.ShrunkCovariance.fit()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.fit", "type": "covariance", "text": ["Fit the shrunk covariance model according to the given training data and parameters.", "Training data, where n_samples is the number of samples and n_features is the number of features.", "Not used, present for API consistency by convention."]}, {"name": "covariance.ShrunkCovariance.get_params()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.get_params", "type": "covariance", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "covariance.ShrunkCovariance.get_precision()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.get_precision", "type": "covariance", "text": ["Getter for the precision matrix.", "The precision matrix associated to the current covariance object."]}, {"name": "covariance.ShrunkCovariance.mahalanobis()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.mahalanobis", "type": "covariance", "text": ["Computes the squared Mahalanobis distances of given observations.", "The observations, the Mahalanobis distances of the which we compute. Observations are assumed to be drawn from the same distribution than the data used in fit.", "Squared Mahalanobis distances of the observations."]}, {"name": "covariance.ShrunkCovariance.score()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.score", "type": "covariance", "text": ["Computes the log-likelihood of a Gaussian data set with self.covariance_ as an estimator of its covariance matrix.", "Test data of which we compute the likelihood, where n_samples is the number of samples and n_features is the number of features. X_test is assumed to be drawn from the same distribution than the data used in fit (including centering).", "Not used, present for API consistency by convention.", "The likelihood of the data set with self.covariance_ as an estimator of its covariance matrix."]}, {"name": "covariance.ShrunkCovariance.set_params()", "path": "modules/generated/sklearn.covariance.shrunkcovariance#sklearn.covariance.ShrunkCovariance.set_params", "type": "covariance", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "covariance.shrunk_covariance()", "path": "modules/generated/sklearn.covariance.shrunk_covariance#sklearn.covariance.shrunk_covariance", "type": "covariance", "text": ["Calculates a covariance matrix shrunk on the diagonal", "Read more in the User Guide.", "Covariance matrix to be shrunk", "Coefficient in the convex combination used for the computation of the shrunk estimate. Range is [0, 1].", "Shrunk covariance.", "The regularized (shrunk) covariance is given by:", "(1 - shrinkage) * cov + shrinkage * mu * np.identity(n_features)", "where mu = trace(cov) / n_features"]}, {"name": "cross_decomposition.CCA", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA", "type": "cross_decomposition", "text": ["Canonical Correlation Analysis, also known as \u201cMode B\u201d PLS.", "Read more in the User Guide.", "Number of components to keep. Should be in [1, min(n_samples,\nn_features, n_targets)].", "Whether to scale X and Y.", "the maximum number of iterations of the power method.", "The tolerance used as convergence criteria in the power method: the algorithm stops whenever the squared norm of u_i - u_{i-1} is less than tol, where u corresponds to the left singular vector.", "Whether to copy X and Y in fit before applying centering, and potentially scaling. If False, these operations will be done inplace, modifying both arrays.", "The left singular vectors of the cross-covariance matrices of each iteration.", "The right singular vectors of the cross-covariance matrices of each iteration.", "The loadings of X.", "The loadings of Y.", "The transformed training samples.", "Deprecated since version 0.24: x_scores_ is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). You can just call transform on the training data instead.", "The transformed training targets.", "Deprecated since version 0.24: y_scores_ is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). You can just call transform on the training data instead.", "The projection matrix used to transform X.", "The projection matrix used to transform Y.", "The coefficients of the linear model such that Y is approximated as Y = X @ coef_.", "Number of iterations of the power method, for each component.", "See also", "fit(X, Y)", "Fit model to data.", "fit_transform(X[, y])", "Learn and apply the dimension reduction on the train data.", "get_params([deep])", "Get parameters for this estimator.", "inverse_transform(X)", "Transform data back to its original space.", "predict(X[, copy])", "Predict targets of given samples.", "score(X, y[, sample_weight])", "Return the coefficient of determination \\(R^2\\) of the prediction.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X[, Y, copy])", "Apply the dimension reduction.", "Fit model to data.", "Training vectors, where n_samples is the number of samples and n_features is the number of predictors.", "Target vectors, where n_samples is the number of samples and n_targets is the number of response variables.", "Learn and apply the dimension reduction on the train data.", "Training vectors, where n_samples is the number of samples and n_features is the number of predictors.", "Target vectors, where n_samples is the number of samples and n_targets is the number of response variables.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Transform data back to its original space.", "New data, where n_samples is the number of samples and n_components is the number of pls components.", "This transformation will only be exact if n_components=n_features.", "Predict targets of given samples.", "Samples.", "Whether to copy X and Y, or perform in-place normalization.", "This call requires the estimation of a matrix of shape (n_features, n_targets), which may be an issue in high dimensional space.", "Return the coefficient of determination \\(R^2\\) of the prediction.", "The coefficient \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)\n** 2).sum() and \\(v\\) is the total sum of squares ((y_true -\ny_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.", "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.", "True values for X.", "Sample weights.", "\\(R^2\\) of self.predict(X) wrt. y.", "The \\(R^2\\) score used when calling score on a regressor uses multioutput='uniform_average' from version 0.23 to keep consistent with default value of r2_score. This influences the score method of all the multioutput regressors (except for MultiOutputRegressor).", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Apply the dimension reduction.", "Samples to transform.", "Target vectors.", "Whether to copy X and Y, or perform in-place normalization."]}, {"name": "cross_decomposition.CCA()", "path": "modules/generated/sklearn.cross_decomposition.cca", "type": "cross_decomposition", "text": ["Canonical Correlation Analysis, also known as \u201cMode B\u201d PLS.", "Read more in the User Guide.", "Number of components to keep. Should be in [1, min(n_samples,\nn_features, n_targets)].", "Whether to scale X and Y.", "the maximum number of iterations of the power method.", "The tolerance used as convergence criteria in the power method: the algorithm stops whenever the squared norm of u_i - u_{i-1} is less than tol, where u corresponds to the left singular vector.", "Whether to copy X and Y in fit before applying centering, and potentially scaling. If False, these operations will be done inplace, modifying both arrays.", "The left singular vectors of the cross-covariance matrices of each iteration.", "The right singular vectors of the cross-covariance matrices of each iteration.", "The loadings of X.", "The loadings of Y.", "The transformed training samples.", "Deprecated since version 0.24: x_scores_ is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). You can just call transform on the training data instead.", "The transformed training targets.", "Deprecated since version 0.24: y_scores_ is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). You can just call transform on the training data instead.", "The projection matrix used to transform X.", "The projection matrix used to transform Y.", "The coefficients of the linear model such that Y is approximated as Y = X @ coef_.", "Number of iterations of the power method, for each component.", "See also", "fit(X, Y)", "Fit model to data.", "fit_transform(X[, y])", "Learn and apply the dimension reduction on the train data.", "get_params([deep])", "Get parameters for this estimator.", "inverse_transform(X)", "Transform data back to its original space.", "predict(X[, copy])", "Predict targets of given samples.", "score(X, y[, sample_weight])", "Return the coefficient of determination \\(R^2\\) of the prediction.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X[, Y, copy])", "Apply the dimension reduction.", "Fit model to data.", "Training vectors, where n_samples is the number of samples and n_features is the number of predictors.", "Target vectors, where n_samples is the number of samples and n_targets is the number of response variables.", "Learn and apply the dimension reduction on the train data.", "Training vectors, where n_samples is the number of samples and n_features is the number of predictors.", "Target vectors, where n_samples is the number of samples and n_targets is the number of response variables.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Transform data back to its original space.", "New data, where n_samples is the number of samples and n_components is the number of pls components.", "This transformation will only be exact if n_components=n_features.", "Predict targets of given samples.", "Samples.", "Whether to copy X and Y, or perform in-place normalization.", "This call requires the estimation of a matrix of shape (n_features, n_targets), which may be an issue in high dimensional space.", "Return the coefficient of determination \\(R^2\\) of the prediction.", "The coefficient \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)\n** 2).sum() and \\(v\\) is the total sum of squares ((y_true -\ny_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.", "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.", "True values for X.", "Sample weights.", "\\(R^2\\) of self.predict(X) wrt. y.", "The \\(R^2\\) score used when calling score on a regressor uses multioutput='uniform_average' from version 0.23 to keep consistent with default value of r2_score. This influences the score method of all the multioutput regressors (except for MultiOutputRegressor).", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Apply the dimension reduction.", "Samples to transform.", "Target vectors.", "Whether to copy X and Y, or perform in-place normalization.", "Compare cross decomposition methods", "Multilabel classification"]}, {"name": "cross_decomposition.CCA.fit()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.fit", "type": "cross_decomposition", "text": ["Fit model to data.", "Training vectors, where n_samples is the number of samples and n_features is the number of predictors.", "Target vectors, where n_samples is the number of samples and n_targets is the number of response variables."]}, {"name": "cross_decomposition.CCA.fit_transform()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.fit_transform", "type": "cross_decomposition", "text": ["Learn and apply the dimension reduction on the train data.", "Training vectors, where n_samples is the number of samples and n_features is the number of predictors.", "Target vectors, where n_samples is the number of samples and n_targets is the number of response variables."]}, {"name": "cross_decomposition.CCA.get_params()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.get_params", "type": "cross_decomposition", "text": ["Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values."]}, {"name": "cross_decomposition.CCA.inverse_transform()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.inverse_transform", "type": "cross_decomposition", "text": ["Transform data back to its original space.", "New data, where n_samples is the number of samples and n_components is the number of pls components.", "This transformation will only be exact if n_components=n_features."]}, {"name": "cross_decomposition.CCA.predict()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.predict", "type": "cross_decomposition", "text": ["Predict targets of given samples.", "Samples.", "Whether to copy X and Y, or perform in-place normalization.", "This call requires the estimation of a matrix of shape (n_features, n_targets), which may be an issue in high dimensional space."]}, {"name": "cross_decomposition.CCA.score()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.score", "type": "cross_decomposition", "text": ["Return the coefficient of determination \\(R^2\\) of the prediction.", "The coefficient \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)\n** 2).sum() and \\(v\\) is the total sum of squares ((y_true -\ny_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.", "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.", "True values for X.", "Sample weights.", "\\(R^2\\) of self.predict(X) wrt. y.", "The \\(R^2\\) score used when calling score on a regressor uses multioutput='uniform_average' from version 0.23 to keep consistent with default value of r2_score. This influences the score method of all the multioutput regressors (except for MultiOutputRegressor)."]}, {"name": "cross_decomposition.CCA.set_params()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.set_params", "type": "cross_decomposition", "text": ["Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance."]}, {"name": "cross_decomposition.CCA.transform()", "path": "modules/generated/sklearn.cross_decomposition.cca#sklearn.cross_decomposition.CCA.transform", "type": "cross_decomposition", "text": ["Apply the dimension reduction.", "Samples to transform.", "Target vectors.", "Whether to copy X and Y, or perform in-place normalization."]}, {"name": "cross_decomposition.PLSCanonical", "path": "modules/generated/sklearn.cross_decomposition.plscanonical#sklearn.cross_decomposition.PLSCanonical", "type": "cross_decomposition", "text": ["Partial Least Squares transformer and regressor.", "Read more in the User Guide.", "New in version 0.8.", "Number of components to keep. Should be in [1, min(n_samples,\nn_features, n_targets)].", "Whether to scale X and Y.", "The algorithm used to estimate the first singular vectors of the cross-covariance matrix. \u2018nipals\u2019 uses the power method while \u2018svd\u2019 will compute the whole SVD.", "the maximum number of iterations of the power method when algorithm='nipals'. Ignored otherwise.", "The tolerance used as convergence criteria in the power method: the algorithm stops whenever the squared norm of u_i - u_{i-1} is less than tol, where u corresponds to the left singular vector.", "Whether to copy X and Y in fit before applying centering, and potentially scaling. If False, these operations will be done inplace, modifying both arrays.", "The left singular vectors of the cross-covariance matrices of each iteration.", "The right singular vectors of the cross-covariance matrices of each iteration.", "The loadings of X.", "The loadings of Y.", "The transformed training samples.", "Deprecated since version 0.24: x_scores_ is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). You can just call transform on the training data instead.", "The transformed training targets.", "Deprecated since version 0.24: y_scores_ is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). You can just call transform on the training data instead.", "The projection matrix used to transform X.", "The projection matrix used to transform Y.", "The coefficients of the linear model such that Y is approximated as Y = X @ coef_.", "Number of iterations of the power method, for each component. Empty if algorithm='svd'.", "See also", "fit(X, Y)", "Fit model to data.", "fit_transform(X[, y])", "Learn and apply the dimension reduction on the train data.", "get_params([deep])", "Get parameters for this estimator.", "inverse_transform(X)", "Transform data back to its original space.", "predict(X[, copy])", "Predict targets of given samples.", "score(X, y[, sample_weight])", "Return the coefficient of determination \\(R^2\\) of the prediction.", "set_params(**params)", "Set the parameters of this estimator.", "transform(X[, Y, copy])", "Apply the dimension reduction.", "Fit model to data.", "Training vectors, where n_samples is the number of samples and n_features is the number of predictors.", "Target vectors, where n_samples is the number of samples and n_targets is the number of response variables.", "Learn and apply the dimension reduction on the train data.", "Training vectors, where n_samples is the number of samples and n_features is the number of predictors.", "Target vectors, where n_samples is the number of samples and n_targets is the number of response variables.", "Get parameters for this estimator.", "If True, will return the parameters for this estimator and contained subobjects that are estimators.", "Parameter names mapped to their values.", "Transform data back to its original space.", "New data, where n_samples is the number of samples and n_components is the number of pls components.", "This transformation will only be exact if n_components=n_features.", "Predict targets of given samples.", "Samples.", "Whether to copy X and Y, or perform in-place normalization.", "This call requires the estimation of a matrix of shape (n_features, n_targets), which may be an issue in high dimensional space.", "Return the coefficient of determination \\(R^2\\) of the prediction.", "The coefficient \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares ((y_true - y_pred)\n** 2).sum() and \\(v\\) is the total sum of squares ((y_true -\ny_true.mean()) ** 2).sum(). The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a \\(R^2\\) score of 0.0.", "Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.", "True values for X.", "Sample weights.", "\\(R^2\\) of self.predict(X) wrt. y.", "The \\(R^2\\) score used when calling score on a regressor uses multioutput='uniform_average' from version 0.23 to keep consistent with default value of r2_score. This influences the score method of all the multioutput regressors (except for MultiOutputRegressor).", "Set the parameters of this estimator.", "The method works on simple estimators as well as on nested objects (such as Pipeline). The latter have parameters of the form <component>__<parameter> so that it\u2019s possible to update each component of a nested object.", "Estimator parameters.", "Estimator instance.", "Apply the dimension reduction.", "Samples to transform.", "Target vectors.", "Whether to copy X and Y, or perform in-place normalization."]}, {"name": "cross_decomposition.PLSCanonical()", "path": "modules/generated/sklearn.cross_decomposition.plscanonical", "type": "cross_decomposition", "text": ["Partial Least Squares transformer and regressor.", "Read more in the User Guide.", "New in version 0.8.", "Number of components to keep. Should be in [1, min(n_samples,\nn_features, n_targets)].", "Whether to scale X and Y.", "The algorithm used to estimate the first singular vectors of the cross-covariance matrix. \u2018nipals\u2019 uses the power method while \u2018svd\u2019 will compute the whole SVD.", "the maximum number of iterations of the power method when algorithm='nipals'. Ignored otherwise.", "The tolerance used as convergence criteria in the power method: the algorithm stops whenever the squared norm of u_i - u_{i-1} is less than tol, where u corresponds to the left singular vector.", "Whether to copy X and Y in fit before applying centering, and potentially scaling. If False, these operations will be done inplace, modifying both arrays.", "The left singular vectors of the cross-covariance matrices of each iteration.", "The right singular vectors of the cross-covariance matrices of each iteration.", "The loadings of X.", "The loadings of Y.", "The transformed training samples.", "Deprecated since version 0.24: x_scores_ is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). You can just call transform on the training data instead.", "The transformed training targets.", "Deprecated since version 0.24: y_scores_ is deprecated in 0.24 and will be removed in 1.1 (renaming of 0.26). You can just call transform on the training data instead.", "The projection matrix used to transform X.", "The projection matrix used to transform Y.", "The coefficients of the linear model such that Y is approximated as Y = X @ coef_.", "Number of iterations of the power method, for each component. Empty if algorithm='svd'.", "See also", "fit(X, Y)", "Fit model to data.", "fit_transform(X[, y])", "Learn and apply the dimension reduction on the train data.", "get_params([deep])", "Get parameters for this estimator.", "inverse_transform(X)", "Transform data back to its original space.", "predict(X[, copy])", "Predict targets of given samples.", "score(X, y[, sample_weight])", "Return the coefficient of determination \\(R^2\\) of the prediction.", "set_params(**params)", "Set the parameters of this estimator.