[{"name": "Admin actions", "path": "ref/contrib/admin/actions", "type": "API", "text": "The basic workflow of Django\u2019s admin is, in a nutshell, \u201cselect an object,\nthen change it.\u201d This works well for a majority of use cases. However, if you\nneed to make the same change to many objects at once, this workflow can be\nquite tedious.\n\nIn these cases, Django\u2019s admin lets you write and register \u201cactions\u201d \u2013\nfunctions that get called with a list of objects selected on the change list\npage.\n\nIf you look at any change list in the admin, you\u2019ll see this feature in\naction; Django ships with a \u201cdelete selected objects\u201d action available to all\nmodels. For example, here\u2019s the user module from Django\u2019s built-in\n`django.contrib.auth` app:\n\nWarning\n\nThe \u201cdelete selected objects\u201d action uses `QuerySet.delete()` for efficiency\nreasons, which has an important caveat: your model\u2019s `delete()` method will\nnot be called.\n\nIf you wish to override this behavior, you can override\n`ModelAdmin.delete_queryset()` or write a custom action which does deletion in\nyour preferred manner \u2013 for example, by calling `Model.delete()` for each of\nthe selected items.\n\nFor more background on bulk deletion, see the documentation on object\ndeletion.\n\nRead on to find out how to add your own actions to this list.\n\nThe easiest way to explain actions is by example, so let\u2019s dive in.\n\nA common use case for admin actions is the bulk updating of a model. Imagine a\nnews application with an `Article` model:\n\nA common task we might perform with a model like this is to update an\narticle\u2019s status from \u201cdraft\u201d to \u201cpublished\u201d. We could easily do this in the\nadmin one article at a time, but if we wanted to bulk-publish a group of\narticles, it\u2019d be tedious. So, let\u2019s write an action that lets us change an\narticle\u2019s status to \u201cpublished.\u201d\n\nFirst, we\u2019ll need to write a function that gets called when the action is\ntriggered from the admin. Action functions are regular functions that take\nthree arguments:\n\nOur publish-these-articles function won\u2019t need the `ModelAdmin` or the request\nobject, but we will use the queryset:\n\nNote\n\nFor the best performance, we\u2019re using the queryset\u2019s update method. Other\ntypes of actions might need to deal with each object individually; in these\ncases we\u2019d iterate over the queryset:\n\nThat\u2019s actually all there is to writing an action! However, we\u2019ll take one\nmore optional-but-useful step and give the action a \u201cnice\u201d title in the admin.\nBy default, this action would appear in the action list as \u201cMake published\u201d \u2013\nthe function name, with underscores replaced by spaces. That\u2019s fine, but we\ncan provide a better, more human-friendly name by using the `action()`\ndecorator on the `make_published` function:\n\nNote\n\nThis might look familiar; the admin\u2019s `list_display` option uses a similar\ntechnique with the `display()` decorator to provide human-readable\ndescriptions for callback functions registered there, too.\n\nThe `description` argument to the `action()` decorator is equivalent to\nsetting the `short_description` attribute on the action function directly in\nprevious versions. Setting the attribute directly is still supported for\nbackward compatibility.\n\nNext, we\u2019ll need to inform our `ModelAdmin` of the action. This works just\nlike any other configuration option. So, the complete `admin.py` with the\naction and its registration would look like:\n\nThat code will give us an admin change list that looks something like this:\n\nThat\u2019s really all there is to it! If you\u2019re itching to write your own actions,\nyou now know enough to get started. The rest of this document covers more\nadvanced techniques.\n\nIf there are foreseeable error conditions that may occur while running your\naction, you should gracefully inform the user of the problem. This means\nhandling exceptions and using `django.contrib.admin.ModelAdmin.message_user()`\nto display a user friendly description of the problem in the response.\n\nThere\u2019s a couple of extra options and possibilities you can exploit for more\nadvanced options.\n\nThe example above shows the `make_published` action defined as a function.\nThat\u2019s perfectly fine, but it\u2019s not perfect from a code design point of view:\nsince the action is tightly coupled to the `Article` object, it makes sense to\nhook the action to the `ArticleAdmin` object itself.\n\nYou can do it like this:\n\nNotice first that we\u2019ve moved `make_published` into a method and renamed the\n`modeladmin` parameter to `self`, and second that we\u2019ve now put the string\n`'make_published'` in `actions` instead of a direct function reference. This\ntells the `ModelAdmin` to look up the action as a method.\n\nDefining actions as methods gives the action more idiomatic access to the\n`ModelAdmin` itself, allowing the action to call any of the methods provided\nby the admin.\n\nFor example, we can use `self` to flash a message to the user informing them\nthat the action was successful:\n\nThis make the action match what the admin itself does after successfully\nperforming an action:\n\nBy default, after an action is performed the user is redirected back to the\noriginal change list page. However, some actions, especially more complex\nones, will need to return intermediate pages. For example, the built-in delete\naction asks for confirmation before deleting the selected objects.\n\nTo provide an intermediary page, return an `HttpResponse` (or subclass) from\nyour action. For example, you might write an export function that uses\nDjango\u2019s serialization functions to dump some selected objects as JSON:\n\nGenerally, something like the above isn\u2019t considered a great idea. Most of the\ntime, the best practice will be to return an `HttpResponseRedirect` and\nredirect the user to a view you\u2019ve written, passing the list of selected\nobjects in the GET query string. This allows you to provide complex\ninteraction logic on the intermediary pages. For example, if you wanted to\nprovide a more complete export function, you\u2019d want to let the user choose a\nformat, and possibly a list of fields to include in the export. The best thing\nto do would be to write a small action that redirects to your custom export\nview:\n\nAs you can see, the action is rather short; all the complex logic would belong\nin your export view. This would need to deal with objects of any type, hence\nthe business with the `ContentType`.\n\nWriting this view is left as an exercise to the reader.\n\nSome actions are best if they\u2019re made available to any object in the admin\nsite \u2013 the export action defined above would be a good candidate. You can make\nan action globally available using `AdminSite.add_action()`. For example:\n\nThis makes the `export_selected_objects` action globally available as an\naction named \u201cexport_selected_objects\u201d. You can explicitly give the action a\nname \u2013 good if you later want to programmatically remove the action \u2013 by\npassing a second argument to `AdminSite.add_action()`:\n\nSometimes you need to disable certain actions \u2013 especially those registered\nsite-wide \u2013 for particular objects. There\u2019s a few ways you can disable\nactions:\n\nIf you need to disable a site-wide action you can call\n`AdminSite.disable_action()`.\n\nFor example, you can use this method to remove the built-in \u201cdelete selected\nobjects\u201d action:\n\nOnce you\u2019ve done the above, that action will no longer be available site-wide.\n\nIf, however, you need to re-enable a globally-disabled action for one\nparticular model, list it explicitly in your `ModelAdmin.actions` list:\n\nIf you want no bulk actions available for a given `ModelAdmin`, set\n`ModelAdmin.actions` to `None`:\n\nThis tells the `ModelAdmin` to not display or allow any actions, including any\nsite-wide actions.\n\nFinally, you can conditionally enable or disable actions on a per-request (and\nhence per-user basis) by overriding `ModelAdmin.get_actions()`.\n\nThis returns a dictionary of actions allowed. The keys are action names, and\nthe values are `(function, name, short_description)` tuples.\n\nFor example, if you only want users whose names begin with \u2018J\u2019 to be able to\ndelete objects in bulk:\n\nActions may limit their availability to users with specific permissions by\nwrapping the action function with the `action()` decorator and passing the\n`permissions` argument:\n\nThe `make_published()` action will only be available to users that pass the\n`ModelAdmin.has_change_permission()` check.\n\nIf `permissions` has more than one permission, the action will be available as\nlong as the user passes at least one of the checks.\n\nAvailable values for `permissions` and the corresponding method checks are:\n\nYou can specify any other value as long as you implement a corresponding\n`has_<value>_permission(self, request)` method on the `ModelAdmin`.\n\nFor example:\n\nThe `permissions` argument to the `action()` decorator is equivalent to\nsetting the `allowed_permissions` attribute on the action function directly in\nprevious versions. Setting the attribute directly is still supported for\nbackward compatibility.\n\nThis decorator can be used for setting specific attributes on custom action\nfunctions that can be used with `actions`:\n\nThis is equivalent to setting some attributes (with the original, longer\nnames) on the function directly:\n\nUse of this decorator is not compulsory to make an action function, but it can\nbe useful to use it without arguments as a marker in your source to identify\nthe purpose of the function:\n\nIn this case it will add no attributes to the function.\n\n"}, {"name": "admin.action()", "path": "ref/contrib/admin/actions#django.contrib.admin.action", "type": "django.contrib.admin", "text": "\nThis decorator can be used for setting specific attributes on custom action\nfunctions that can be used with `actions`:\n\nThis is equivalent to setting some attributes (with the original, longer\nnames) on the function directly:\n\nUse of this decorator is not compulsory to make an action function, but it can\nbe useful to use it without arguments as a marker in your source to identify\nthe purpose of the function:\n\nIn this case it will add no attributes to the function.\n\n"}, {"name": "admin.AdminSite", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite", "type": "django.contrib.admin", "text": "\nA Django administrative site is represented by an instance of\n`django.contrib.admin.sites.AdminSite`; by default, an instance of this class\nis created as `django.contrib.admin.site` and you can register your models and\n`ModelAdmin` instances with it.\n\nIf you want to customize the default admin site, you can override it.\n\nWhen constructing an instance of an `AdminSite`, you can provide a unique\ninstance name using the `name` argument to the constructor. This instance name\nis used to identify the instance, especially when reversing admin URLs. If no\ninstance name is provided, a default instance name of `admin` will be used.\nSee Customizing the AdminSite class for an example of customizing the\n`AdminSite` class.\n\n"}, {"name": "admin.AdminSite.add_action()", "path": "ref/contrib/admin/actions#django.contrib.admin.AdminSite.add_action", "type": "django.contrib.admin", "text": "\nSome actions are best if they\u2019re made available to any object in the admin\nsite \u2013 the export action defined above would be a good candidate. You can make\nan action globally available using `AdminSite.add_action()`. For example:\n\nThis makes the `export_selected_objects` action globally available as an\naction named \u201cexport_selected_objects\u201d. You can explicitly give the action a\nname \u2013 good if you later want to programmatically remove the action \u2013 by\npassing a second argument to `AdminSite.add_action()`:\n\n"}, {"name": "admin.AdminSite.app_index_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.app_index_template", "type": "django.contrib.admin", "text": "\nPath to a custom template that will be used by the admin site app index view.\n\n"}, {"name": "admin.AdminSite.disable_action()", "path": "ref/contrib/admin/actions#django.contrib.admin.AdminSite.disable_action", "type": "django.contrib.admin", "text": "\nIf you need to disable a site-wide action you can call\n`AdminSite.disable_action()`.\n\nFor example, you can use this method to remove the built-in \u201cdelete selected\nobjects\u201d action:\n\nOnce you\u2019ve done the above, that action will no longer be available site-wide.\n\nIf, however, you need to re-enable a globally-disabled action for one\nparticular model, list it explicitly in your `ModelAdmin.actions` list:\n\n"}, {"name": "admin.AdminSite.each_context()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.each_context", "type": "django.contrib.admin", "text": "\nReturns a dictionary of variables to put in the template context for every\npage in the admin site.\n\nIncludes the following variables and values by default:\n\n`available_apps`: a list of applications from the application registry\navailable for the current user. Each entry in the list is a dict representing\nan application with the following keys:\n\nEach model is a dict with the following keys:\n\nThe `model` variable for each model was added.\n\n"}, {"name": "admin.AdminSite.empty_value_display", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.empty_value_display", "type": "django.contrib.admin", "text": "\nThe string to use for displaying empty values in the admin site\u2019s change list.\nDefaults to a dash. The value can also be overridden on a per `ModelAdmin`\nbasis and on a custom field within a `ModelAdmin` by setting an\n`empty_value_display` attribute on the field. See\n`ModelAdmin.empty_value_display` for examples.\n\n"}, {"name": "admin.AdminSite.enable_nav_sidebar", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.enable_nav_sidebar", "type": "django.contrib.admin", "text": "\nA boolean value that determines whether to show the navigation sidebar on\nlarger screens. By default, it is set to `True`.\n\n"}, {"name": "admin.AdminSite.final_catch_all_view", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.final_catch_all_view", "type": "django.contrib.admin", "text": "\nA boolean value that determines whether to add a final catch-all view to the\nadmin that redirects unauthenticated users to the login page. By default, it\nis set to `True`.\n\nWarning\n\nSetting this to `False` is not recommended as the view protects against a\npotential model enumeration privacy issue.\n\n"}, {"name": "admin.AdminSite.has_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.has_permission", "type": "django.contrib.admin", "text": "\nReturns `True` if the user for the given `HttpRequest` has permission to view\nat least one page in the admin site. Defaults to requiring both\n`User.is_active` and `User.is_staff` to be `True`.\n\n"}, {"name": "admin.AdminSite.index_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.index_template", "type": "django.contrib.admin", "text": "\nPath to a custom template that will be used by the admin site main index view.\n\n"}, {"name": "admin.AdminSite.index_title", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.index_title", "type": "django.contrib.admin", "text": "\nThe text to put at the top of the admin index page (a string). By default,\nthis is \u201cSite administration\u201d.\n\n"}, {"name": "admin.AdminSite.login_form", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.login_form", "type": "django.contrib.admin", "text": "\nSubclass of `AuthenticationForm` that will be used by the admin site login\nview.\n\n"}, {"name": "admin.AdminSite.login_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.login_template", "type": "django.contrib.admin", "text": "\nPath to a custom template that will be used by the admin site login view.\n\n"}, {"name": "admin.AdminSite.logout_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.logout_template", "type": "django.contrib.admin", "text": "\nPath to a custom template that will be used by the admin site logout view.\n\n"}, {"name": "admin.AdminSite.password_change_done_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.password_change_done_template", "type": "django.contrib.admin", "text": "\nPath to a custom template that will be used by the admin site password change\ndone view.\n\n"}, {"name": "admin.AdminSite.password_change_template", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.password_change_template", "type": "django.contrib.admin", "text": "\nPath to a custom template that will be used by the admin site password change\nview.\n\n"}, {"name": "admin.AdminSite.register()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.register", "type": "django.contrib.admin", "text": "\nRegisters the given model class (or iterable of classes) with the given\n`admin_class`. `admin_class` defaults to `ModelAdmin` (the default admin\noptions). If keyword arguments are given \u2013 e.g. `list_display` \u2013 they\u2019ll be\napplied as options to the admin class.\n\nRaises `ImproperlyConfigured` if a model is abstract. and\n`django.contrib.admin.sites.AlreadyRegistered` if a model is already\nregistered.\n\n"}, {"name": "admin.AdminSite.site_header", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.site_header", "type": "django.contrib.admin", "text": "\nThe text to put at the top of each admin page, as an `<h1>` (a string). By\ndefault, this is \u201cDjango administration\u201d.\n\n"}, {"name": "admin.AdminSite.site_title", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.site_title", "type": "django.contrib.admin", "text": "\nThe text to put at the end of each admin page\u2019s `<title>` (a string). By\ndefault, this is \u201cDjango site admin\u201d.\n\n"}, {"name": "admin.AdminSite.site_url", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.site_url", "type": "django.contrib.admin", "text": "\nThe URL for the \u201cView site\u201d link at the top of each admin page. By default,\n`site_url` is `/`. Set it to `None` to remove the link.\n\nFor sites running on a subpath, the `each_context()` method checks if the\ncurrent request has `request.META['SCRIPT_NAME']` set and uses that value if\n`site_url` isn\u2019t set to something other than `/`.\n\n"}, {"name": "admin.AdminSite.unregister()", "path": "ref/contrib/admin/index#django.contrib.admin.AdminSite.unregister", "type": "django.contrib.admin", "text": "\nUnregisters the given model class (or iterable of classes).\n\nRaises `django.contrib.admin.sites.NotRegistered` if a model isn\u2019t already\nregistered.\n\n"}, {"name": "admin.apps.AdminConfig", "path": "ref/contrib/admin/index#django.contrib.admin.apps.AdminConfig", "type": "django.contrib.admin", "text": "\nThis is the default `AppConfig` class for the admin. It calls `autodiscover()`\nwhen Django starts.\n\n"}, {"name": "admin.apps.SimpleAdminConfig", "path": "ref/contrib/admin/index#django.contrib.admin.apps.SimpleAdminConfig", "type": "django.contrib.admin", "text": "\nThis class works like `AdminConfig`, except it doesn\u2019t call `autodiscover()`.\n\nA dotted import path to the default admin site\u2019s class or to a callable that\nreturns a site instance. Defaults to `'django.contrib.admin.sites.AdminSite'`.\nSee Overriding the default admin site for usage.\n\n"}, {"name": "admin.apps.SimpleAdminConfig.default_site", "path": "ref/contrib/admin/index#django.contrib.admin.apps.SimpleAdminConfig.default_site", "type": "django.contrib.admin", "text": "\nA dotted import path to the default admin site\u2019s class or to a callable that\nreturns a site instance. Defaults to `'django.contrib.admin.sites.AdminSite'`.\nSee Overriding the default admin site for usage.\n\n"}, {"name": "admin.autodiscover()", "path": "ref/contrib/admin/index#django.contrib.admin.autodiscover", "type": "django.contrib.admin", "text": "\nThis function attempts to import an `admin` module in each installed\napplication. Such modules are expected to register models with the admin.\n\nTypically you won\u2019t need to call this function directly as `AdminConfig` calls\nit when Django starts.\n\n"}, {"name": "admin.display()", "path": "ref/contrib/admin/index#django.contrib.admin.display", "type": "django.contrib.admin", "text": "\nThis decorator can be used for setting specific attributes on custom display\nfunctions that can be used with `list_display` or `readonly_fields`:\n\nThis is equivalent to setting some attributes (with the original, longer\nnames) on the function directly:\n\nAlso note that the `empty_value` decorator parameter maps to the\n`empty_value_display` attribute assigned directly to the function. It cannot\nbe used in conjunction with `boolean` \u2013 they are mutually exclusive.\n\nUse of this decorator is not compulsory to make a display function, but it can\nbe useful to use it without arguments as a marker in your source to identify\nthe purpose of the function:\n\nIn this case it will add no attributes to the function.\n\n"}, {"name": "admin.InlineModelAdmin", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin", "type": "django.contrib.admin", "text": "\n\n"}, {"name": "admin.InlineModelAdmin.can_delete", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.can_delete", "type": "django.contrib.admin", "text": "\nSpecifies whether or not inline objects can be deleted in the inline. Defaults\nto `True`.\n\n"}, {"name": "admin.InlineModelAdmin.classes", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.classes", "type": "django.contrib.admin", "text": "\nA list or tuple containing extra CSS classes to apply to the fieldset that is\nrendered for the inlines. Defaults to `None`. As with classes configured in\n`fieldsets`, inlines with a `collapse` class will be initially collapsed and\ntheir header will have a small \u201cshow\u201d link.\n\n"}, {"name": "admin.InlineModelAdmin.extra", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.extra", "type": "django.contrib.admin", "text": "\nThis controls the number of extra forms the formset will display in addition\nto the initial forms. Defaults to 3. See the formsets documentation for more\ninformation.\n\nFor users with JavaScript-enabled browsers, an \u201cAdd another\u201d link is provided\nto enable any number of additional inlines to be added in addition to those\nprovided as a result of the `extra` argument.\n\nThe dynamic link will not appear if the number of currently displayed forms\nexceeds `max_num`, or if the user does not have JavaScript enabled.\n\n`InlineModelAdmin.get_extra()` also allows you to customize the number of\nextra forms.\n\n"}, {"name": "admin.InlineModelAdmin.fk_name", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.fk_name", "type": "django.contrib.admin", "text": "\nThe name of the foreign key on the model. In most cases this will be dealt\nwith automatically, but `fk_name` must be specified explicitly if there are\nmore than one foreign key to the same parent model.\n\n"}, {"name": "admin.InlineModelAdmin.form", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.form", "type": "django.contrib.admin", "text": "\nThe value for `form` defaults to `ModelForm`. This is what is passed through\nto `inlineformset_factory()` when creating the formset for this inline.\n\n"}, {"name": "admin.InlineModelAdmin.formset", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.formset", "type": "django.contrib.admin", "text": "\nThis defaults to `BaseInlineFormSet`. Using your own formset can give you many\npossibilities of customization. Inlines are built around model formsets.\n\n"}, {"name": "admin.InlineModelAdmin.get_extra()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_extra", "type": "django.contrib.admin", "text": "\nReturns the number of extra inline forms to use. By default, returns the\n`InlineModelAdmin.extra` attribute.\n\nOverride this method to programmatically determine the number of extra inline\nforms. For example, this may be based on the model instance (passed as the\nkeyword argument `obj`):\n\n"}, {"name": "admin.InlineModelAdmin.get_formset()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_formset", "type": "django.contrib.admin", "text": "\nReturns a `BaseInlineFormSet` class for use in admin add/change views. `obj`\nis the parent object being edited or `None` when adding a new parent. See the\nexample for `ModelAdmin.get_formsets_with_inlines`.\n\n"}, {"name": "admin.InlineModelAdmin.get_max_num()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_max_num", "type": "django.contrib.admin", "text": "\nReturns the maximum number of extra inline forms to use. By default, returns\nthe `InlineModelAdmin.max_num` attribute.\n\nOverride this method to programmatically determine the maximum number of\ninline forms. For example, this may be based on the model instance (passed as\nthe keyword argument `obj`):\n\n"}, {"name": "admin.InlineModelAdmin.get_min_num()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.get_min_num", "type": "django.contrib.admin", "text": "\nReturns the minimum number of inline forms to use. By default, returns the\n`InlineModelAdmin.min_num` attribute.\n\nOverride this method to programmatically determine the minimum number of\ninline forms. For example, this may be based on the model instance (passed as\nthe keyword argument `obj`).\n\n"}, {"name": "admin.InlineModelAdmin.has_add_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.has_add_permission", "type": "django.contrib.admin", "text": "\nShould return `True` if adding an inline object is permitted, `False`\notherwise. `obj` is the parent object being edited or `None` when adding a new\nparent.\n\n"}, {"name": "admin.InlineModelAdmin.has_change_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.has_change_permission", "type": "django.contrib.admin", "text": "\nShould return `True` if editing an inline object is permitted, `False`\notherwise. `obj` is the parent object being edited.\n\n"}, {"name": "admin.InlineModelAdmin.has_delete_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.has_delete_permission", "type": "django.contrib.admin", "text": "\nShould return `True` if deleting an inline object is permitted, `False`\notherwise. `obj` is the parent object being edited.\n\n"}, {"name": "admin.InlineModelAdmin.max_num", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.max_num", "type": "django.contrib.admin", "text": "\nThis controls the maximum number of forms to show in the inline. This doesn\u2019t\ndirectly correlate to the number of objects, but can if the value is small\nenough. See Limiting the number of editable objects for more information.\n\n`InlineModelAdmin.get_max_num()` also allows you to customize the maximum\nnumber of extra forms.\n\n"}, {"name": "admin.InlineModelAdmin.min_num", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.min_num", "type": "django.contrib.admin", "text": "\nThis controls the minimum number of forms to show in the inline. See\n`modelformset_factory()` for more information.\n\n`InlineModelAdmin.get_min_num()` also allows you to customize the minimum\nnumber of displayed forms.\n\n"}, {"name": "admin.InlineModelAdmin.model", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.model", "type": "django.contrib.admin", "text": "\nThe model which the inline is using. This is required.\n\n"}, {"name": "admin.InlineModelAdmin.raw_id_fields", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.raw_id_fields", "type": "django.contrib.admin", "text": "\nBy default, Django\u2019s admin uses a select-box interface (<select>) for fields\nthat are `ForeignKey`. Sometimes you don\u2019t want to incur the overhead of\nhaving to select all the related instances to display in the drop-down.\n\n`raw_id_fields` is a list of fields you would like to change into an `Input`\nwidget for either a `ForeignKey` or `ManyToManyField`:\n\n"}, {"name": "admin.InlineModelAdmin.show_change_link", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.show_change_link", "type": "django.contrib.admin", "text": "\nSpecifies whether or not inline objects that can be changed in the admin have\na link to the change form. Defaults to `False`.\n\n"}, {"name": "admin.InlineModelAdmin.template", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.template", "type": "django.contrib.admin", "text": "\nThe template used to render the inline on the page.\n\n"}, {"name": "admin.InlineModelAdmin.verbose_name", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.verbose_name", "type": "django.contrib.admin", "text": "\nAn override to the `verbose_name` from the model\u2019s inner `Meta` class.\n\n"}, {"name": "admin.InlineModelAdmin.verbose_name_plural", "path": "ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin.verbose_name_plural", "type": "django.contrib.admin", "text": "\nAn override to the `verbose_name_plural` from the model\u2019s inner `Meta` class.\nIf this isn\u2019t given and the `InlineModelAdmin.verbose_name` is defined, Django\nwill use `InlineModelAdmin.verbose_name` \\+ `'s'`.\n\nThe fallback to `InlineModelAdmin.verbose_name` was added.\n\n"}, {"name": "admin.ModelAdmin", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin", "type": "django.contrib.admin", "text": "\nThe `ModelAdmin` class is the representation of a model in the admin\ninterface. Usually, these are stored in a file named `admin.py` in your\napplication. Let\u2019s take a look at an example of the `ModelAdmin`:\n\nDo you need a `ModelAdmin` object at all?\n\nIn the preceding example, the `ModelAdmin` class doesn\u2019t define any custom\nvalues (yet). As a result, the default admin interface will be provided. If\nyou are happy with the default admin interface, you don\u2019t need to define a\n`ModelAdmin` object at all \u2013 you can register the model class without\nproviding a `ModelAdmin` description. The preceding example could be\nsimplified to:\n\n"}, {"name": "admin.ModelAdmin.actions", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions", "type": "django.contrib.admin", "text": "\nA list of actions to make available on the change list page. See Admin actions\nfor details.\n\n"}, {"name": "admin.ModelAdmin.actions_on_bottom", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions_on_bottom", "type": "django.contrib.admin", "text": "\nControls where on the page the actions bar appears. By default, the admin\nchangelist displays actions at the top of the page (`actions_on_top = True;\nactions_on_bottom = False`).\n\n"}, {"name": "admin.ModelAdmin.actions_on_top", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions_on_top", "type": "django.contrib.admin", "text": "\n\n"}, {"name": "admin.ModelAdmin.actions_selection_counter", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.actions_selection_counter", "type": "django.contrib.admin", "text": "\nControls whether a selection counter is displayed next to the action dropdown.\nBy default, the admin changelist will display it (`actions_selection_counter =\nTrue`).\n\n"}, {"name": "admin.ModelAdmin.add_form_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.add_form_template", "type": "django.contrib.admin", "text": "\nPath to a custom template, used by `add_view()`.\n\n"}, {"name": "admin.ModelAdmin.add_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.add_view", "type": "django.contrib.admin", "text": "\nDjango view for the model instance addition page. See note below.\n\n"}, {"name": "admin.ModelAdmin.autocomplete_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.autocomplete_fields", "type": "django.contrib.admin", "text": "\n`autocomplete_fields` is a list of `ForeignKey` and/or `ManyToManyField`\nfields you would like to change to Select2 autocomplete inputs.\n\nBy default, the admin uses a select-box interface (`<select>`) for those\nfields. Sometimes you don\u2019t want to incur the overhead of selecting all the\nrelated instances to display in the dropdown.\n\nThe Select2 input looks similar to the default input but comes with a search\nfeature that loads the options asynchronously. This is faster and more user-\nfriendly if the related model has many instances.\n\nYou must define `search_fields` on the related object\u2019s `ModelAdmin` because\nthe autocomplete search uses it.\n\nTo avoid unauthorized data disclosure, users must have the `view` or `change`\npermission to the related object in order to use autocomplete.\n\nOrdering and pagination of the results are controlled by the related\n`ModelAdmin`\u2019s `get_ordering()` and `get_paginator()` methods.\n\nIn the following example, `ChoiceAdmin` has an autocomplete field for the\n`ForeignKey` to the `Question`. The results are filtered by the\n`question_text` field and ordered by the `date_created` field:\n\nPerformance considerations for large datasets\n\nOrdering using `ModelAdmin.ordering` may cause performance problems as sorting\non a large queryset will be slow.\n\nAlso, if your search fields include fields that aren\u2019t indexed by the\ndatabase, you might encounter poor performance on extremely large tables.\n\nFor those cases, it\u2019s a good idea to write your own\n`ModelAdmin.get_search_results()` implementation using a full-text indexed\nsearch.\n\nYou may also want to change the `Paginator` on very large tables as the\ndefault paginator always performs a `count()` query. For example, you could\noverride the default implementation of the `Paginator.count` property.\n\n"}, {"name": "admin.ModelAdmin.change_form_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.change_form_template", "type": "django.contrib.admin", "text": "\nPath to a custom template, used by `change_view()`.\n\n"}, {"name": "admin.ModelAdmin.change_list_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.change_list_template", "type": "django.contrib.admin", "text": "\nPath to a custom template, used by `changelist_view()`.\n\n"}, {"name": "admin.ModelAdmin.change_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.change_view", "type": "django.contrib.admin", "text": "\nDjango view for the model instance editing page. See note below.\n\n"}, {"name": "admin.ModelAdmin.changelist_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.changelist_view", "type": "django.contrib.admin", "text": "\nDjango view for the model instances change list/actions page. See note below.\n\n"}, {"name": "admin.ModelAdmin.date_hierarchy", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.date_hierarchy", "type": "django.contrib.admin", "text": "\nSet `date_hierarchy` to the name of a `DateField` or `DateTimeField` in your\nmodel, and the change list page will include a date-based drilldown navigation\nby that field.\n\nExample:\n\nYou can also specify a field on a related model using the `__` lookup, for\nexample:\n\nThis will intelligently populate itself based on available data, e.g. if all\nthe dates are in one month, it\u2019ll show the day-level drill-down only.\n\nNote\n\n`date_hierarchy` uses `QuerySet.datetimes()` internally. Please refer to its\ndocumentation for some caveats when time zone support is enabled (`USE_TZ =\nTrue`).\n\n"}, {"name": "admin.ModelAdmin.delete_confirmation_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_confirmation_template", "type": "django.contrib.admin", "text": "\nPath to a custom template, used by `delete_view()` for displaying a\nconfirmation page when deleting one or more objects.\n\n"}, {"name": "admin.ModelAdmin.delete_model()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_model", "type": "django.contrib.admin", "text": "\nThe `delete_model` method is given the `HttpRequest` and a model instance.\nOverriding this method allows doing pre- or post-delete operations. Call\n`super().delete_model()` to delete the object using `Model.delete()`.\n\n"}, {"name": "admin.ModelAdmin.delete_queryset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_queryset", "type": "django.contrib.admin", "text": "\nThe `delete_queryset()` method is given the `HttpRequest` and a `QuerySet` of\nobjects to be deleted. Override this method to customize the deletion process\nfor the \u201cdelete selected objects\u201d action.\n\n"}, {"name": "admin.ModelAdmin.delete_selected_confirmation_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_selected_confirmation_template", "type": "django.contrib.admin", "text": "\nPath to a custom template, used by the `delete_selected` action method for\ndisplaying a confirmation page when deleting one or more objects. See the\nactions documentation.\n\n"}, {"name": "admin.ModelAdmin.delete_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.delete_view", "type": "django.contrib.admin", "text": "\nDjango view for the model instance(s) deletion confirmation page. See note\nbelow.\n\n"}, {"name": "admin.ModelAdmin.empty_value_display", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.empty_value_display", "type": "django.contrib.admin", "text": "\nThis attribute overrides the default display value for record\u2019s fields that\nare empty (`None`, empty string, etc.). The default value is `-` (a dash). For\nexample:\n\nYou can also override `empty_value_display` for all admin pages with\n`AdminSite.empty_value_display`, or for specific fields like this:\n\nThe `empty_value` argument to the `display()` decorator is equivalent to\nsetting the `empty_value_display` attribute on the display function directly\nin previous versions. Setting the attribute directly is still supported for\nbackward compatibility.\n\n"}, {"name": "admin.ModelAdmin.exclude", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.exclude", "type": "django.contrib.admin", "text": "\nThis attribute, if given, should be a list of field names to exclude from the\nform.\n\nFor example, let\u2019s consider the following model:\n\nIf you want a form for the `Author` model that includes only the `name` and\n`title` fields, you would specify `fields` or `exclude` like this:\n\nSince the Author model only has three fields, `name`, `title`, and\n`birth_date`, the forms resulting from the above declarations will contain\nexactly the same fields.\n\n"}, {"name": "admin.ModelAdmin.fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fields", "type": "django.contrib.admin", "text": "\nUse the `fields` option to make simple layout changes in the forms on the\n\u201cadd\u201d and \u201cchange\u201d pages such as showing only a subset of available fields,\nmodifying their order, or grouping them into rows. For example, you could\ndefine a simpler version of the admin form for the\n`django.contrib.flatpages.models.FlatPage` model as follows:\n\nIn the above example, only the fields `url`, `title` and `content` will be\ndisplayed, sequentially, in the form. `fields` can contain values defined in\n`ModelAdmin.readonly_fields` to be displayed as read-only.\n\nFor more complex layout needs, see the `fieldsets` option.\n\nThe `fields` option accepts the same types of values as `list_display`, except\nthat callables aren\u2019t accepted. Names of model and model admin methods will\nonly be used if they\u2019re listed in `readonly_fields`.\n\nTo display multiple fields on the same line, wrap those fields in their own\ntuple. In this example, the `url` and `title` fields will display on the same\nline and the `content` field will be displayed below them on its own line:\n\nNote\n\nThis `fields` option should not be confused with the `fields` dictionary key\nthat is within the `fieldsets` option, as described in the next section.\n\nIf neither `fields` nor `fieldsets` options are present, Django will default\nto displaying each field that isn\u2019t an `AutoField` and has `editable=True`, in\na single fieldset, in the same order as the fields are defined in the model.\n\n"}, {"name": "admin.ModelAdmin.fieldsets", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.fieldsets", "type": "django.contrib.admin", "text": "\nSet `fieldsets` to control the layout of admin \u201cadd\u201d and \u201cchange\u201d pages.\n\n`fieldsets` is a list of two-tuples, in which each two-tuple represents a\n`<fieldset>` on the admin form page. (A `<fieldset>` is a \u201csection\u201d of the\nform.)\n\nThe two-tuples are in the format `(name, field_options)`, where `name` is a\nstring representing the title of the fieldset and `field_options` is a\ndictionary of information about the fieldset, including a list of fields to be\ndisplayed in it.\n\nA full example, taken from the `django.contrib.flatpages.models.FlatPage`\nmodel:\n\nThis results in an admin page that looks like:\n\nIf neither `fieldsets` nor `fields` options are present, Django will default\nto displaying each field that isn\u2019t an `AutoField` and has `editable=True`, in\na single fieldset, in the same order as the fields are defined in the model.\n\nThe `field_options` dictionary can have the following keys:\n\nA tuple of field names to display in this fieldset. This key is required.\n\nExample:\n\nAs with the `fields` option, to display multiple fields on the same line, wrap\nthose fields in their own tuple. In this example, the `first_name` and\n`last_name` fields will display on the same line:\n\n`fields` can contain values defined in `readonly_fields` to be displayed as\nread-only.\n\nIf you add the name of a callable to `fields`, the same rule applies as with\nthe `fields` option: the callable must be listed in `readonly_fields`.\n\nA list or tuple containing extra CSS classes to apply to the fieldset.\n\nExample:\n\nTwo useful classes defined by the default admin site stylesheet are `collapse`\nand `wide`. Fieldsets with the `collapse` style will be initially collapsed in\nthe admin and replaced with a small \u201cclick to expand\u201d link. Fieldsets with the\n`wide` style will be given extra horizontal space.\n\nA string of optional extra text to be displayed at the top of each fieldset,\nunder the heading of the fieldset. This string is not rendered for\n`TabularInline` due to its layout.\n\nNote that this value is not HTML-escaped when it\u2019s displayed in the admin\ninterface. This lets you include HTML if you so desire. Alternatively you can\nuse plain text and `django.utils.html.escape()` to escape any HTML special\ncharacters.\n\n"}, {"name": "admin.ModelAdmin.filter_horizontal", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.filter_horizontal", "type": "django.contrib.admin", "text": "\nBy default, a `ManyToManyField` is displayed in the admin site with a `<select\nmultiple>`. However, multiple-select boxes can be difficult to use when\nselecting many items. Adding a `ManyToManyField` to this list will instead use\na nifty unobtrusive JavaScript \u201cfilter\u201d interface that allows searching within\nthe options. The unselected and selected options appear in two boxes side by\nside. See `filter_vertical` to use a vertical interface.\n\n"}, {"name": "admin.ModelAdmin.filter_vertical", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.filter_vertical", "type": "django.contrib.admin", "text": "\nSame as `filter_horizontal`, but uses a vertical display of the filter\ninterface with the box of unselected options appearing above the box of\nselected options.\n\n"}, {"name": "admin.ModelAdmin.form", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.form", "type": "django.contrib.admin", "text": "\nBy default a `ModelForm` is dynamically created for your model. It is used to\ncreate the form presented on both the add/change pages. You can easily provide\nyour own `ModelForm` to override any default form behavior on the add/change\npages. Alternatively, you can customize the default form rather than\nspecifying an entirely new one by using the `ModelAdmin.get_form()` method.\n\nFor an example see the section Adding custom validation to the admin.\n\nNote\n\nIf you define the `Meta.model` attribute on a `ModelForm`, you must also\ndefine the `Meta.fields` attribute (or the `Meta.exclude` attribute). However,\nsince the admin has its own way of defining fields, the `Meta.fields`\nattribute will be ignored.\n\nIf the `ModelForm` is only going to be used for the admin, the easiest\nsolution is to omit the `Meta.model` attribute, since `ModelAdmin` will\nprovide the correct model to use. Alternatively, you can set `fields = []` in\nthe `Meta` class to satisfy the validation on the `ModelForm`.\n\nNote\n\nIf your `ModelForm` and `ModelAdmin` both define an `exclude` option then\n`ModelAdmin` takes precedence:\n\nIn the above example, the \u201cage\u201d field will be excluded but the \u201cname\u201d field\nwill be included in the generated form.\n\n"}, {"name": "admin.ModelAdmin.formfield_for_choice_field()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_for_choice_field", "type": "django.contrib.admin", "text": "\nLike the `formfield_for_foreignkey` and `formfield_for_manytomany` methods,\nthe `formfield_for_choice_field` method can be overridden to change the\ndefault formfield for a field that has declared choices. For example, if the\nchoices available to a superuser should be different than those available to\nregular staff, you could proceed as follows:\n\nNote\n\nAny `choices` attribute set on the formfield will be limited to the form field\nonly. If the corresponding field on the model has choices set, the choices\nprovided to the form must be a valid subset of those choices, otherwise the\nform submission will fail with a `ValidationError` when the model itself is\nvalidated before saving.\n\n"}, {"name": "admin.ModelAdmin.formfield_for_foreignkey()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_for_foreignkey", "type": "django.contrib.admin", "text": "\nThe `formfield_for_foreignkey` method on a `ModelAdmin` allows you to override\nthe default formfield for a foreign keys field. For example, to return a\nsubset of objects for this foreign key field based on the user:\n\nThis uses the `HttpRequest` instance to filter the `Car` foreign key field to\nonly display the cars owned by the `User` instance.\n\nFor more complex filters, you can use `ModelForm.__init__()` method to filter\nbased on an `instance` of your model (see Fields which handle relationships).\nFor example:\n\n"}, {"name": "admin.ModelAdmin.formfield_for_manytomany()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_for_manytomany", "type": "django.contrib.admin", "text": "\nLike the `formfield_for_foreignkey` method, the `formfield_for_manytomany`\nmethod can be overridden to change the default formfield for a many to many\nfield. For example, if an owner can own multiple cars and cars can belong to\nmultiple owners \u2013 a many to many relationship \u2013 you could filter the `Car`\nforeign key field to only display the cars owned by the `User`:\n\n"}, {"name": "admin.ModelAdmin.formfield_overrides", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.formfield_overrides", "type": "django.contrib.admin", "text": "\nThis provides a quick-and-dirty way to override some of the `Field` options\nfor use in the admin. `formfield_overrides` is a dictionary mapping a field\nclass to a dict of arguments to pass to the field at construction time.\n\nSince that\u2019s a bit abstract, let\u2019s look at a concrete example. The most common\nuse of `formfield_overrides` is to add a custom widget for a certain type of\nfield. So, imagine we\u2019ve written a `RichTextEditorWidget` that we\u2019d like to\nuse for large text fields instead of the default `<textarea>`. Here\u2019s how we\u2019d\ndo that:\n\nNote that the key in the dictionary is the actual field class, not a string.\nThe value is another dictionary; these arguments will be passed to the form\nfield\u2019s `__init__()` method. See The Forms API for details.\n\nWarning\n\nIf you want to use a custom widget with a relation field (i.e. `ForeignKey` or\n`ManyToManyField`), make sure you haven\u2019t included that field\u2019s name in\n`raw_id_fields`, `radio_fields`, or `autocomplete_fields`.\n\n`formfield_overrides` won\u2019t let you change the widget on relation fields that\nhave `raw_id_fields`, `radio_fields`, or `autocomplete_fields` set. That\u2019s\nbecause `raw_id_fields`, `radio_fields`, and `autocomplete_fields` imply\ncustom widgets of their own.\n\n"}, {"name": "admin.ModelAdmin.get_actions()", "path": "ref/contrib/admin/actions#django.contrib.admin.ModelAdmin.get_actions", "type": "django.contrib.admin", "text": "\nFinally, you can conditionally enable or disable actions on a per-request (and\nhence per-user basis) by overriding `ModelAdmin.get_actions()`.\n\nThis returns a dictionary of actions allowed. The keys are action names, and\nthe values are `(function, name, short_description)` tuples.\n\nFor example, if you only want users whose names begin with \u2018J\u2019 to be able to\ndelete objects in bulk:\n\n"}, {"name": "admin.ModelAdmin.get_autocomplete_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_autocomplete_fields", "type": "django.contrib.admin", "text": "\nThe `get_autocomplete_fields()` method is given the `HttpRequest` and is\nexpected to return a `list` or `tuple` of field names that will be displayed\nwith an autocomplete widget as described above in the\n`ModelAdmin.autocomplete_fields` section.\n\n"}, {"name": "admin.ModelAdmin.get_changeform_initial_data()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changeform_initial_data", "type": "django.contrib.admin", "text": "\nA hook for the initial data on admin change forms. By default, fields are\ngiven initial values from `GET` parameters. For instance,\n`?name=initial_value` will set the `name` field\u2019s initial value to be\n`initial_value`.\n\nThis method should return a dictionary in the form `{'fieldname':\n'fieldval'}`:\n\n"}, {"name": "admin.ModelAdmin.get_changelist()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changelist", "type": "django.contrib.admin", "text": "\nReturns the `Changelist` class to be used for listing. By default,\n`django.contrib.admin.views.main.ChangeList` is used. By inheriting this class\nyou can change the behavior of the listing.\n\n"}, {"name": "admin.ModelAdmin.get_changelist_form()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changelist_form", "type": "django.contrib.admin", "text": "\nReturns a `ModelForm` class for use in the `Formset` on the changelist page.\nTo use a custom form, for example:\n\nNote\n\nIf you define the `Meta.model` attribute on a `ModelForm`, you must also\ndefine the `Meta.fields` attribute (or the `Meta.exclude` attribute). However,\n`ModelAdmin` ignores this value, overriding it with the\n`ModelAdmin.list_editable` attribute. The easiest solution is to omit the\n`Meta.model` attribute, since `ModelAdmin` will provide the correct model to\nuse.\n\n"}, {"name": "admin.ModelAdmin.get_changelist_formset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_changelist_formset", "type": "django.contrib.admin", "text": "\nReturns a ModelFormSet class for use on the changelist page if `list_editable`\nis used. To use a custom formset, for example:\n\n"}, {"name": "admin.ModelAdmin.get_deleted_objects()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_deleted_objects", "type": "django.contrib.admin", "text": "\nA hook for customizing the deletion process of the `delete_view()` and the\n\u201cdelete selected\u201d action.\n\nThe `objs` argument is a homogeneous iterable of objects (a `QuerySet` or a\nlist of model instances) to be deleted, and `request` is the `HttpRequest`.\n\nThis method must return a 4-tuple of `(deleted_objects, model_count,\nperms_needed, protected)`.\n\n`deleted_objects` is a list of strings representing all the objects that will\nbe deleted. If there are any related objects to be deleted, the list is nested\nand includes those related objects. The list is formatted in the template\nusing the `unordered_list` filter.\n\n`model_count` is a dictionary mapping each model\u2019s `verbose_name_plural` to\nthe number of objects that will be deleted.\n\n`perms_needed` is a set of `verbose_name`s of the models that the user doesn\u2019t\nhave permission to delete.\n\n`protected` is a list of strings representing of all the protected related\nobjects that can\u2019t be deleted. The list is displayed in the template.\n\n"}, {"name": "admin.ModelAdmin.get_exclude()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_exclude", "type": "django.contrib.admin", "text": "\nThe `get_exclude` method is given the `HttpRequest` and the `obj` being edited\n(or `None` on an add form) and is expected to return a list of fields, as\ndescribed in `ModelAdmin.exclude`.\n\n"}, {"name": "admin.ModelAdmin.get_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_fields", "type": "django.contrib.admin", "text": "\nThe `get_fields` method is given the `HttpRequest` and the `obj` being edited\n(or `None` on an add form) and is expected to return a list of fields, as\ndescribed above in the `ModelAdmin.fields` section.\n\n"}, {"name": "admin.ModelAdmin.get_fieldsets()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_fieldsets", "type": "django.contrib.admin", "text": "\nThe `get_fieldsets` method is given the `HttpRequest` and the `obj` being\nedited (or `None` on an add form) and is expected to return a list of two-\ntuples, in which each two-tuple represents a `<fieldset>` on the admin form\npage, as described above in the `ModelAdmin.fieldsets` section.\n\n"}, {"name": "admin.ModelAdmin.get_form()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_form", "type": "django.contrib.admin", "text": "\nReturns a `ModelForm` class for use in the admin add and change views, see\n`add_view()` and `change_view()`.\n\nThe base implementation uses `modelform_factory()` to subclass `form`,\nmodified by attributes such as `fields` and `exclude`. So, for example, if you\nwanted to offer additional fields to superusers, you could swap in a different\nbase form like so:\n\nYou may also return a custom `ModelForm` class directly.\n\n"}, {"name": "admin.ModelAdmin.get_formset_kwargs()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_formset_kwargs", "type": "django.contrib.admin", "text": "\nA hook for customizing the keyword arguments passed to the constructor of a\nformset. For example, to pass `request` to formset forms:\n\nYou can also used it to set `initial` for formset forms.\n\n"}, {"name": "admin.ModelAdmin.get_formsets_with_inlines()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_formsets_with_inlines", "type": "django.contrib.admin", "text": "\nYields (`FormSet`, `InlineModelAdmin`) pairs for use in admin add and change\nviews.\n\nFor example if you wanted to display a particular inline only in the change\nview, you could override `get_formsets_with_inlines` as follows:\n\n"}, {"name": "admin.ModelAdmin.get_inline_instances()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_inline_instances", "type": "django.contrib.admin", "text": "\nThe `get_inline_instances` method is given the `HttpRequest` and the `obj`\nbeing edited (or `None` on an add form) and is expected to return a `list` or\n`tuple` of `InlineModelAdmin` objects, as described below in the\n`InlineModelAdmin` section. For example, the following would return inlines\nwithout the default filtering based on add, change, delete, and view\npermissions:\n\nIf you override this method, make sure that the returned inlines are instances\nof the classes defined in `inlines` or you might encounter a \u201cBad Request\u201d\nerror when adding related objects.\n\n"}, {"name": "admin.ModelAdmin.get_inlines()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_inlines", "type": "django.contrib.admin", "text": "\nThe `get_inlines` method is given the `HttpRequest` and the `obj` being edited\n(or `None` on an add form) and is expected to return an iterable of inlines.\nYou can override this method to dynamically add inlines based on the request\nor model instance instead of specifying them in `ModelAdmin.inlines`.\n\n"}, {"name": "admin.ModelAdmin.get_list_display()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_display", "type": "django.contrib.admin", "text": "\nThe `get_list_display` method is given the `HttpRequest` and is expected to\nreturn a `list` or `tuple` of field names that will be displayed on the\nchangelist view as described above in the `ModelAdmin.list_display` section.\n\n"}, {"name": "admin.ModelAdmin.get_list_display_links()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_display_links", "type": "django.contrib.admin", "text": "\nThe `get_list_display_links` method is given the `HttpRequest` and the `list`\nor `tuple` returned by `ModelAdmin.get_list_display()`. It is expected to\nreturn either `None` or a `list` or `tuple` of field names on the changelist\nthat will be linked to the change view, as described in the\n`ModelAdmin.list_display_links` section.\n\n"}, {"name": "admin.ModelAdmin.get_list_filter()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_filter", "type": "django.contrib.admin", "text": "\nThe `get_list_filter` method is given the `HttpRequest` and is expected to\nreturn the same kind of sequence type as for the `list_filter` attribute.\n\n"}, {"name": "admin.ModelAdmin.get_list_select_related()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_list_select_related", "type": "django.contrib.admin", "text": "\nThe `get_list_select_related` method is given the `HttpRequest` and should\nreturn a boolean or list as `ModelAdmin.list_select_related` does.\n\n"}, {"name": "admin.ModelAdmin.get_ordering()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_ordering", "type": "django.contrib.admin", "text": "\nThe `get_ordering` method takes a `request` as parameter and is expected to\nreturn a `list` or `tuple` for ordering similar to the `ordering` attribute.\nFor example:\n\n"}, {"name": "admin.ModelAdmin.get_paginator()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_paginator", "type": "django.contrib.admin", "text": "\nReturns an instance of the paginator to use for this view. By default,\ninstantiates an instance of `paginator`.\n\n"}, {"name": "admin.ModelAdmin.get_prepopulated_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_prepopulated_fields", "type": "django.contrib.admin", "text": "\nThe `get_prepopulated_fields` method is given the `HttpRequest` and the `obj`\nbeing edited (or `None` on an add form) and is expected to return a\n`dictionary`, as described above in the `ModelAdmin.prepopulated_fields`\nsection.\n\n"}, {"name": "admin.ModelAdmin.get_queryset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_queryset", "type": "django.contrib.admin", "text": "\nThe `get_queryset` method on a `ModelAdmin` returns a `QuerySet` of all model\ninstances that can be edited by the admin site. One use case for overriding\nthis method is to show objects owned by the logged-in user:\n\n"}, {"name": "admin.ModelAdmin.get_readonly_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_readonly_fields", "type": "django.contrib.admin", "text": "\nThe `get_readonly_fields` method is given the `HttpRequest` and the `obj`\nbeing edited (or `None` on an add form) and is expected to return a `list` or\n`tuple` of field names that will be displayed as read-only, as described above\nin the `ModelAdmin.readonly_fields` section.\n\n"}, {"name": "admin.ModelAdmin.get_search_fields()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_search_fields", "type": "django.contrib.admin", "text": "\nThe `get_search_fields` method is given the `HttpRequest` and is expected to\nreturn the same kind of sequence type as for the `search_fields` attribute.\n\n"}, {"name": "admin.ModelAdmin.get_search_results()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_search_results", "type": "django.contrib.admin", "text": "\nThe `get_search_results` method modifies the list of objects displayed into\nthose that match the provided search term. It accepts the request, a queryset\nthat applies the current filters, and the user-provided search term. It\nreturns a tuple containing a queryset modified to implement the search, and a\nboolean indicating if the results may contain duplicates.\n\nThe default implementation searches the fields named in\n`ModelAdmin.search_fields`.\n\nThis method may be overridden with your own custom search method. For example,\nyou might wish to search by an integer field, or use an external tool such as\nSolr or Haystack. You must establish if the queryset changes implemented by\nyour search method may introduce duplicates into the results, and return\n`True` in the second element of the return value.\n\nFor example, to search by `name` and `age`, you could use:\n\nThis implementation is more efficient than `search_fields = ('name', '=age')`\nwhich results in a string comparison for the numeric field, for example `...\nOR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4')` on PostgreSQL.\n\n"}, {"name": "admin.ModelAdmin.get_sortable_by()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_sortable_by", "type": "django.contrib.admin", "text": "\nThe `get_sortable_by()` method is passed the `HttpRequest` and is expected to\nreturn a collection (e.g. `list`, `tuple`, or `set`) of field names that will\nbe sortable in the change list page.\n\nIts default implementation returns `sortable_by` if it\u2019s set, otherwise it\ndefers to `get_list_display()`.\n\nFor example, to prevent one or more columns from being sortable:\n\n"}, {"name": "admin.ModelAdmin.get_urls()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.get_urls", "type": "django.contrib.admin", "text": "\nThe `get_urls` method on a `ModelAdmin` returns the URLs to be used for that\nModelAdmin in the same way as a URLconf. Therefore you can extend them as\ndocumented in URL dispatcher:\n\nIf you want to use the admin layout, extend from `admin/base_site.html`:\n\nNote\n\nNotice that the custom patterns are included before the regular admin URLs:\nthe admin URL patterns are very permissive and will match nearly anything, so\nyou\u2019ll usually want to prepend your custom URLs to the built-in ones.\n\nIn this example, `my_view` will be accessed at `/admin/myapp/mymodel/my_view/`\n(assuming the admin URLs are included at `/admin/`.)\n\nHowever, the `self.my_view` function registered above suffers from two\nproblems:\n\nSince this is usually not what you want, Django provides a convenience wrapper\nto check permissions and mark the view as non-cacheable. This wrapper is\n`AdminSite.admin_view()` (i.e. `self.admin_site.admin_view` inside a\n`ModelAdmin` instance); use it like so:\n\nNotice the wrapped view in the fifth line above:\n\nThis wrapping will protect `self.my_view` from unauthorized access and will\napply the `django.views.decorators.cache.never_cache()` decorator to make sure\nit is not cached if the cache middleware is active.\n\nIf the page is cacheable, but you still want the permission check to be\nperformed, you can pass a `cacheable=True` argument to\n`AdminSite.admin_view()`:\n\n`ModelAdmin` views have `model_admin` attributes. Other `AdminSite` views have\n`admin_site` attributes.\n\n"}, {"name": "admin.ModelAdmin.has_add_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_add_permission", "type": "django.contrib.admin", "text": "\nShould return `True` if adding an object is permitted, `False` otherwise.\n\n"}, {"name": "admin.ModelAdmin.has_change_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_change_permission", "type": "django.contrib.admin", "text": "\nShould return `True` if editing `obj` is permitted, `False` otherwise. If\n`obj` is `None`, should return `True` or `False` to indicate whether editing\nof objects of this type is permitted in general (e.g., `False` will be\ninterpreted as meaning that the current user is not permitted to edit any\nobject of this type).\n\n"}, {"name": "admin.ModelAdmin.has_delete_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_delete_permission", "type": "django.contrib.admin", "text": "\nShould return `True` if deleting `obj` is permitted, `False` otherwise. If\n`obj` is `None`, should return `True` or `False` to indicate whether deleting\nobjects of this type is permitted in general (e.g., `False` will be\ninterpreted as meaning that the current user is not permitted to delete any\nobject of this type).\n\n"}, {"name": "admin.ModelAdmin.has_module_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_module_permission", "type": "django.contrib.admin", "text": "\nShould return `True` if displaying the module on the admin index page and\naccessing the module\u2019s index page is permitted, `False` otherwise. Uses\n`User.has_module_perms()` by default. Overriding it does not restrict access\nto the view, add, change, or delete views, `has_view_permission()`,\n`has_add_permission()`, `has_change_permission()`, and\n`has_delete_permission()` should be used for that.\n\n"}, {"name": "admin.ModelAdmin.has_view_permission()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_view_permission", "type": "django.contrib.admin", "text": "\nShould return `True` if viewing `obj` is permitted, `False` otherwise. If obj\nis `None`, should return `True` or `False` to indicate whether viewing of\nobjects of this type is permitted in general (e.g., `False` will be\ninterpreted as meaning that the current user is not permitted to view any\nobject of this type).\n\nThe default implementation returns `True` if the user has either the \u201cchange\u201d\nor \u201cview\u201d permission.\n\n"}, {"name": "admin.ModelAdmin.history_view()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.history_view", "type": "django.contrib.admin", "text": "\nDjango view for the page that shows the modification history for a given model\ninstance.\n\n"}, {"name": "admin.ModelAdmin.inlines", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.inlines", "type": "django.contrib.admin", "text": "\nSee `InlineModelAdmin` objects below as well as\n`ModelAdmin.get_formsets_with_inlines()`.\n\n"}, {"name": "admin.ModelAdmin.list_display", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display", "type": "django.contrib.admin", "text": "\nSet `list_display` to control which fields are displayed on the change list\npage of the admin.\n\nExample:\n\nIf you don\u2019t set `list_display`, the admin site will display a single column\nthat displays the `__str__()` representation of each object.\n\nThere are four types of values that can be used in `list_display`. All but the\nsimplest may use the `display()` decorator is used to customize how the field\nis presented:\n\nThe name of a model field. For example:\n\nA callable that accepts one argument, the model instance. For example:\n\nA string representing a `ModelAdmin` method that accepts one argument, the\nmodel instance. For example:\n\nA string representing a model attribute or method (without any required\narguments). For example:\n\nA few special cases to note about `list_display`:\n\nIf the string given is a method of the model, `ModelAdmin` or a callable,\nDjango will HTML-escape the output by default. To escape user input and allow\nyour own unescaped tags, use `format_html()`.\n\nHere\u2019s a full example model:\n\nAs some examples have already demonstrated, when using a callable, a model\nmethod, or a `ModelAdmin` method, you can customize the column\u2019s title by\nwrapping the callable with the `display()` decorator and passing the\n`description` argument.\n\nThe `description` argument to the `display()` decorator is equivalent to\nsetting the `short_description` attribute on the display function directly in\nprevious versions. Setting the attribute directly is still supported for\nbackward compatibility.\n\nIf the value of a field is `None`, an empty string, or an iterable without\nelements, Django will display `-` (a dash). You can override this with\n`AdminSite.empty_value_display`:\n\nYou can also use `ModelAdmin.empty_value_display`:\n\nOr on a field level:\n\nThe `empty_value` argument to the `display()` decorator is equivalent to\nsetting the `empty_value_display` attribute on the display function directly\nin previous versions. Setting the attribute directly is still supported for\nbackward compatibility.\n\nIf the string given is a method of the model, `ModelAdmin` or a callable that\nreturns `True`, `False`, or `None`, Django will display a pretty \u201cyes\u201d, \u201cno\u201d,\nor \u201cunknown\u201d icon if you wrap the method with the `display()` decorator\npassing the `boolean` argument with the value set to `True`:\n\nThe `boolean` argument to the `display()` decorator is equivalent to setting\nthe `boolean` attribute on the display function directly in previous versions.\nSetting the attribute directly is still supported for backward compatibility.\n\nThe `__str__()` method is just as valid in `list_display` as any other model\nmethod, so it\u2019s perfectly OK to do this:\n\nUsually, elements of `list_display` that aren\u2019t actual database fields can\u2019t\nbe used in sorting (because Django does all the sorting at the database\nlevel).\n\nHowever, if an element of `list_display` represents a certain database field,\nyou can indicate this fact by using the `display()` decorator on the method,\npassing the `ordering` argument:\n\nThe above will tell Django to order by the `first_name` field when trying to\nsort by `colored_first_name` in the admin.\n\nTo indicate descending order with the `ordering` argument you can use a hyphen\nprefix on the field name. Using the above example, this would look like:\n\nThe `ordering` argument supports query lookups to sort by values on related\nmodels. This example includes an \u201cauthor first name\u201d column in the list\ndisplay and allows sorting it by first name:\n\nQuery expressions may be used with the `ordering` argument:\n\nThe `ordering` argument to the `display()` decorator is equivalent to setting\nthe `admin_order_field` attribute on the display function directly in previous\nversions. Setting the attribute directly is still supported for backward\ncompatibility.\n\nElements of `list_display` can also be properties:\n\nNote that `@property` must be above `@display`. If you\u2019re using the old way \u2013\nsetting the display-related attributes directly rather than using the\n`display()` decorator \u2013 be aware that the `property()` function and not the\n`@property` decorator must be used:\n\nDjango will try to interpret every element of `list_display` in this order:\n\nFor example if you have `first_name` as a model field and as a `ModelAdmin`\nattribute, the model field will be used.\n\n"}, {"name": "admin.ModelAdmin.list_display_links", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display_links", "type": "django.contrib.admin", "text": "\nUse `list_display_links` to control if and which fields in `list_display`\nshould be linked to the \u201cchange\u201d page for an object.\n\nBy default, the change list page will link the first column \u2013 the first field\nspecified in `list_display` \u2013 to the change page for each item. But\n`list_display_links` lets you change this:\n\nSet it to a list or tuple of fields (in the same format as `list_display`)\nwhose columns you want converted to links.\n\nYou can specify one or many fields. As long as the fields appear in\n`list_display`, Django doesn\u2019t care how many (or how few) fields are linked.\nThe only requirement is that if you want to use `list_display_links` in this\nfashion, you must define `list_display`.\n\nIn this example, the `first_name` and `last_name` fields will be linked on the\nchange list page:\n\nIn this example, the change list page grid will have no links:\n\n"}, {"name": "admin.ModelAdmin.list_editable", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_editable", "type": "django.contrib.admin", "text": "\nSet `list_editable` to a list of field names on the model which will allow\nediting on the change list page. That is, fields listed in `list_editable`\nwill be displayed as form widgets on the change list page, allowing users to\nedit and save multiple rows at once.\n\nNote\n\n`list_editable` interacts with a couple of other options in particular ways;\nyou should note the following rules:\n\nYou\u2019ll get a validation error if either of these rules are broken.\n\n"}, {"name": "admin.ModelAdmin.list_filter", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter", "type": "django.contrib.admin", "text": "\nSet `list_filter` to activate filters in the right sidebar of the change list\npage of the admin, as illustrated in the following screenshot:\n\n`list_filter` should be a list or tuple of elements, where each element should\nbe of one of the following types:\n\na field name, where the specified field should be either a `BooleanField`,\n`CharField`, `DateField`, `DateTimeField`, `IntegerField`, `ForeignKey` or\n`ManyToManyField`, for example:\n\nField names in `list_filter` can also span relations using the `__` lookup,\nfor example:\n\na class inheriting from `django.contrib.admin.SimpleListFilter`, which you\nneed to provide the `title` and `parameter_name` attributes to and override\nthe `lookups` and `queryset` methods, e.g.:\n\nNote\n\nAs a convenience, the `HttpRequest` object is passed to the `lookups` and\n`queryset` methods, for example:\n\nAlso as a convenience, the `ModelAdmin` object is passed to the `lookups`\nmethod, for example if you want to base the lookups on the available data:\n\na tuple, where the first element is a field name and the second element is a\nclass inheriting from `django.contrib.admin.FieldListFilter`, for example:\n\nYou can limit the choices of a related model to the objects involved in that\nrelation using `RelatedOnlyFieldListFilter`:\n\nAssuming `author` is a `ForeignKey` to a `User` model, this will limit the\n`list_filter` choices to the users who have written a book instead of listing\nall users.\n\nYou can filter empty values using `EmptyFieldListFilter`, which can filter on\nboth empty strings and nulls, depending on what the field allows to store:\n\nNote\n\nThe `FieldListFilter` API is considered internal and might be changed.\n\nNote\n\nThe `GenericForeignKey` field is not supported.\n\nList filter\u2019s typically appear only if the filter has more than one choice. A\nfilter\u2019s `has_output()` method controls whether or not it appears.\n\nIt is possible to specify a custom template for rendering a list filter:\n\nSee the default template provided by Django (`admin/filter.html`) for a\nconcrete example.\n\n"}, {"name": "admin.ModelAdmin.list_max_show_all", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_max_show_all", "type": "django.contrib.admin", "text": "\nSet `list_max_show_all` to control how many items can appear on a \u201cShow all\u201d\nadmin change list page. The admin will display a \u201cShow all\u201d link on the change\nlist only if the total result count is less than or equal to this setting. By\ndefault, this is set to `200`.\n\n"}, {"name": "admin.ModelAdmin.list_per_page", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_per_page", "type": "django.contrib.admin", "text": "\nSet `list_per_page` to control how many items appear on each paginated admin\nchange list page. By default, this is set to `100`.\n\n"}, {"name": "admin.ModelAdmin.list_select_related", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_select_related", "type": "django.contrib.admin", "text": "\nSet `list_select_related` to tell Django to use `select_related()` in\nretrieving the list of objects on the admin change list page. This can save\nyou a bunch of database queries.\n\nThe value should be either a boolean, a list or a tuple. Default is `False`.\n\nWhen value is `True`, `select_related()` will always be called. When value is\nset to `False`, Django will look at `list_display` and call `select_related()`\nif any `ForeignKey` is present.\n\nIf you need more fine-grained control, use a tuple (or list) as value for\n`list_select_related`. Empty tuple will prevent Django from calling\n`select_related` at all. Any other tuple will be passed directly to\n`select_related` as parameters. For example:\n\nwill call `select_related('author', 'category')`.\n\nIf you need to specify a dynamic value based on the request, you can implement\na `get_list_select_related()` method.\n\nNote\n\n`ModelAdmin` ignores this attribute when `select_related()` was already called\non the changelist\u2019s `QuerySet`.\n\n"}, {"name": "admin.ModelAdmin.lookup_allowed()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.lookup_allowed", "type": "django.contrib.admin", "text": "\nThe objects in the changelist page can be filtered with lookups from the URL\u2019s\nquery string. This is how `list_filter` works, for example. The lookups are\nsimilar to what\u2019s used in `QuerySet.filter()` (e.g.\n`user__email=user@example.com`). Since the lookups in the query string can be\nmanipulated by the user, they must be sanitized to prevent unauthorized data\nexposure.\n\nThe `lookup_allowed()` method is given a lookup path from the query string\n(e.g. `'user__email'`) and the corresponding value (e.g.\n`'user@example.com'`), and returns a boolean indicating whether filtering the\nchangelist\u2019s `QuerySet` using the parameters is permitted. If\n`lookup_allowed()` returns `False`, `DisallowedModelAdminLookup` (subclass of\n`SuspiciousOperation`) is raised.\n\nBy default, `lookup_allowed()` allows access to a model\u2019s local fields, field\npaths used in `list_filter` (but not paths from `get_list_filter()`), and\nlookups required for `limit_choices_to` to function correctly in\n`raw_id_fields`.\n\nOverride this method to customize the lookups permitted for your `ModelAdmin`\nsubclass.\n\n"}, {"name": "admin.ModelAdmin.message_user()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.message_user", "type": "django.contrib.admin", "text": "\nSends a message to the user using the `django.contrib.messages` backend. See\nthe custom ModelAdmin example.\n\nKeyword arguments allow you to change the message level, add extra CSS tags,\nor fail silently if the `contrib.messages` framework is not installed. These\nkeyword arguments match those for `django.contrib.messages.add_message()`, see\nthat function\u2019s documentation for more details. One difference is that the\nlevel may be passed as a string label in addition to integer/constant.\n\n"}, {"name": "admin.ModelAdmin.object_history_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.object_history_template", "type": "django.contrib.admin", "text": "\nPath to a custom template, used by `history_view()`.\n\n"}, {"name": "admin.ModelAdmin.ordering", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.ordering", "type": "django.contrib.admin", "text": "\nSet `ordering` to specify how lists of objects should be ordered in the Django\nadmin views. This should be a list or tuple in the same format as a model\u2019s\n`ordering` parameter.\n\nIf this isn\u2019t provided, the Django admin will use the model\u2019s default\nordering.\n\nIf you need to specify a dynamic order (for example depending on user or\nlanguage) you can implement a `get_ordering()` method.\n\nPerformance considerations with ordering and sorting\n\nTo ensure a deterministic ordering of results, the changelist adds `pk` to the\nordering if it can\u2019t find a single or unique together set of fields that\nprovide total ordering.\n\nFor example, if the default ordering is by a non-unique `name` field, then the\nchangelist is sorted by `name` and `pk`. This could perform poorly if you have\na lot of rows and don\u2019t have an index on `name` and `pk`.\n\n"}, {"name": "admin.ModelAdmin.paginator", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.paginator", "type": "django.contrib.admin", "text": "\nThe paginator class to be used for pagination. By default,\n`django.core.paginator.Paginator` is used. If the custom paginator class\ndoesn\u2019t have the same constructor interface as\n`django.core.paginator.Paginator`, you will also need to provide an\nimplementation for `ModelAdmin.get_paginator()`.\n\n"}, {"name": "admin.ModelAdmin.popup_response_template", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.popup_response_template", "type": "django.contrib.admin", "text": "\nPath to a custom template, used by `response_add()`, `response_change()`, and\n`response_delete()`.\n\n"}, {"name": "admin.ModelAdmin.prepopulated_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.prepopulated_fields", "type": "django.contrib.admin", "text": "\nSet `prepopulated_fields` to a dictionary mapping field names to the fields it\nshould prepopulate from:\n\nWhen set, the given fields will use a bit of JavaScript to populate from the\nfields assigned. The main use for this functionality is to automatically\ngenerate the value for `SlugField` fields from one or more other fields. The\ngenerated value is produced by concatenating the values of the source fields,\nand then by transforming that result into a valid slug (e.g. substituting\ndashes for spaces and lowercasing ASCII letters).\n\nPrepopulated fields aren\u2019t modified by JavaScript after a value has been\nsaved. It\u2019s usually undesired that slugs change (which would cause an object\u2019s\nURL to change if the slug is used in it).\n\n`prepopulated_fields` doesn\u2019t accept `DateTimeField`, `ForeignKey`,\n`OneToOneField`, and `ManyToManyField` fields.\n\nIn older versions, various English stop words are removed from generated\nvalues.\n\n"}, {"name": "admin.ModelAdmin.preserve_filters", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.preserve_filters", "type": "django.contrib.admin", "text": "\nBy default, applied filters are preserved on the list view after creating,\nediting, or deleting an object. You can have filters cleared by setting this\nattribute to `False`.\n\n"}, {"name": "admin.ModelAdmin.radio_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.radio_fields", "type": "django.contrib.admin", "text": "\nBy default, Django\u2019s admin uses a select-box interface (<select>) for fields\nthat are `ForeignKey` or have `choices` set. If a field is present in\n`radio_fields`, Django will use a radio-button interface instead. Assuming\n`group` is a `ForeignKey` on the `Person` model:\n\nYou have the choice of using `HORIZONTAL` or `VERTICAL` from the\n`django.contrib.admin` module.\n\nDon\u2019t include a field in `radio_fields` unless it\u2019s a `ForeignKey` or has\n`choices` set.\n\n"}, {"name": "admin.ModelAdmin.raw_id_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.raw_id_fields", "type": "django.contrib.admin", "text": "\nBy default, Django\u2019s admin uses a select-box interface (<select>) for fields\nthat are `ForeignKey`. Sometimes you don\u2019t want to incur the overhead of\nhaving to select all the related instances to display in the drop-down.\n\n`raw_id_fields` is a list of fields you would like to change into an `Input`\nwidget for either a `ForeignKey` or `ManyToManyField`:\n\nThe `raw_id_fields` `Input` widget should contain a primary key if the field\nis a `ForeignKey` or a comma separated list of values if the field is a\n`ManyToManyField`. The `raw_id_fields` widget shows a magnifying glass button\nnext to the field which allows users to search for and select a value:\n\n"}, {"name": "admin.ModelAdmin.readonly_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.readonly_fields", "type": "django.contrib.admin", "text": "\nBy default the admin shows all fields as editable. Any fields in this option\n(which should be a `list` or `tuple`) will display its data as-is and non-\neditable; they are also excluded from the `ModelForm` used for creating and\nediting. Note that when specifying `ModelAdmin.fields` or\n`ModelAdmin.fieldsets` the read-only fields must be present to be shown (they\nare ignored otherwise).\n\nIf `readonly_fields` is used without defining explicit ordering through\n`ModelAdmin.fields` or `ModelAdmin.fieldsets` they will be added last after\nall editable fields.\n\nA read-only field can not only display data from a model\u2019s field, it can also\ndisplay the output of a model\u2019s method or a method of the `ModelAdmin` class\nitself. This is very similar to the way `ModelAdmin.list_display` behaves.\nThis provides a way to use the admin interface to provide feedback on the\nstatus of the objects being edited, for example:\n\n"}, {"name": "admin.ModelAdmin.response_add()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.response_add", "type": "django.contrib.admin", "text": "\nDetermines the `HttpResponse` for the `add_view()` stage.\n\n`response_add` is called after the admin form is submitted and just after the\nobject and all the related instances have been created and saved. You can\noverride it to change the default behavior after the object has been created.\n\n"}, {"name": "admin.ModelAdmin.response_change()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.response_change", "type": "django.contrib.admin", "text": "\nDetermines the `HttpResponse` for the `change_view()` stage.\n\n`response_change` is called after the admin form is submitted and just after\nthe object and all the related instances have been saved. You can override it\nto change the default behavior after the object has been changed.\n\n"}, {"name": "admin.ModelAdmin.response_delete()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.response_delete", "type": "django.contrib.admin", "text": "\nDetermines the `HttpResponse` for the `delete_view()` stage.\n\n`response_delete` is called after the object has been deleted. You can\noverride it to change the default behavior after the object has been deleted.\n\n`obj_display` is a string with the name of the deleted object.\n\n`obj_id` is the serialized identifier used to retrieve the object to be\ndeleted.\n\n"}, {"name": "admin.ModelAdmin.save_as", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_as", "type": "django.contrib.admin", "text": "\nSet `save_as` to enable a \u201csave as new\u201d feature on admin change forms.\n\nNormally, objects have three save options: \u201cSave\u201d, \u201cSave and continue\nediting\u201d, and \u201cSave and add another\u201d. If `save_as` is `True`, \u201cSave and add\nanother\u201d will be replaced by a \u201cSave as new\u201d button that creates a new object\n(with a new ID) rather than updating the existing object.\n\nBy default, `save_as` is set to `False`.\n\n"}, {"name": "admin.ModelAdmin.save_as_continue", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_as_continue", "type": "django.contrib.admin", "text": "\nWhen `save_as=True`, the default redirect after saving the new object is to\nthe change view for that object. If you set `save_as_continue=False`, the\nredirect will be to the changelist view.\n\nBy default, `save_as_continue` is set to `True`.\n\n"}, {"name": "admin.ModelAdmin.save_formset()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_formset", "type": "django.contrib.admin", "text": "\nThe `save_formset` method is given the `HttpRequest`, the parent `ModelForm`\ninstance and a boolean value based on whether it is adding or changing the\nparent object.\n\nFor example, to attach `request.user` to each changed formset model instance:\n\nSee also Saving objects in the formset.\n\n"}, {"name": "admin.ModelAdmin.save_model()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_model", "type": "django.contrib.admin", "text": "\nThe `save_model` method is given the `HttpRequest`, a model instance, a\n`ModelForm` instance, and a boolean value based on whether it is adding or\nchanging the object. Overriding this method allows doing pre- or post-save\noperations. Call `super().save_model()` to save the object using\n`Model.save()`.\n\nFor example to attach `request.user` to the object prior to saving:\n\n"}, {"name": "admin.ModelAdmin.save_on_top", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_on_top", "type": "django.contrib.admin", "text": "\nSet `save_on_top` to add save buttons across the top of your admin change\nforms.\n\nNormally, the save buttons appear only at the bottom of the forms. If you set\n`save_on_top`, the buttons will appear both on the top and the bottom.\n\nBy default, `save_on_top` is set to `False`.\n\n"}, {"name": "admin.ModelAdmin.save_related()", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.save_related", "type": "django.contrib.admin", "text": "\nThe `save_related` method is given the `HttpRequest`, the parent `ModelForm`\ninstance, the list of inline formsets and a boolean value based on whether the\nparent is being added or changed. Here you can do any pre- or post-save\noperations for objects related to the parent. Note that at this point the\nparent object and its form have already been saved.\n\n"}, {"name": "admin.ModelAdmin.search_fields", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_fields", "type": "django.contrib.admin", "text": "\nSet `search_fields` to enable a search box on the admin change list page. This\nshould be set to a list of field names that will be searched whenever somebody\nsubmits a search query in that text box.\n\nThese fields should be some kind of text field, such as `CharField` or\n`TextField`. You can also perform a related lookup on a `ForeignKey` or\n`ManyToManyField` with the lookup API \u201cfollow\u201d notation:\n\nFor example, if you have a blog entry with an author, the following definition\nwould enable searching blog entries by the email address of the author:\n\nWhen somebody does a search in the admin search box, Django splits the search\nquery into words and returns all objects that contain each of the words, case-\ninsensitive (using the `icontains` lookup), where each word must be in at\nleast one of `search_fields`. For example, if `search_fields` is set to\n`['first_name', 'last_name']` and a user searches for `john lennon`, Django\nwill do the equivalent of this SQL `WHERE` clause:\n\nThe search query can contain quoted phrases with spaces. For example, if a\nuser searches for `\"john winston\"` or `'john winston'`, Django will do the\nequivalent of this SQL `WHERE` clause:\n\nIf you don\u2019t want to use `icontains` as the lookup, you can use any lookup by\nappending it the field. For example, you could use `exact` by setting\n`search_fields` to `['first_name__exact']`.\n\nSome (older) shortcuts for specifying a field lookup are also available. You\ncan prefix a field in `search_fields` with the following characters and it\u2019s\nequivalent to adding `__<lookup>` to the field:\n\nIf you need to customize search you can use `ModelAdmin.get_search_results()`\nto provide additional or alternate search behavior.\n\nSupport for searching against quoted phrases with spaces was added.\n\n"}, {"name": "admin.ModelAdmin.search_help_text", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_help_text", "type": "django.contrib.admin", "text": "\nSet `search_help_text` to specify a descriptive text for the search box which\nwill be displayed below it.\n\n"}, {"name": "admin.ModelAdmin.show_full_result_count", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.show_full_result_count", "type": "django.contrib.admin", "text": "\nSet `show_full_result_count` to control whether the full count of objects\nshould be displayed on a filtered admin page (e.g. `99 results (103 total)`).\nIf this option is set to `False`, a text like `99 results (Show all)` is\ndisplayed instead.\n\nThe default of `show_full_result_count=True` generates a query to perform a\nfull count on the table which can be expensive if the table contains a large\nnumber of rows.\n\n"}, {"name": "admin.ModelAdmin.sortable_by", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.sortable_by", "type": "django.contrib.admin", "text": "\nBy default, the change list page allows sorting by all model fields (and\ncallables that use the `ordering` argument to the `display()` decorator or\nhave the `admin_order_field` attribute) specified in `list_display`.\n\nIf you want to disable sorting for some columns, set `sortable_by` to a\ncollection (e.g. `list`, `tuple`, or `set`) of the subset of `list_display`\nthat you want to be sortable. An empty collection disables sorting for all\ncolumns.\n\nIf you need to specify this list dynamically, implement a `get_sortable_by()`\nmethod instead.\n\n"}, {"name": "admin.ModelAdmin.view_on_site", "path": "ref/contrib/admin/index#django.contrib.admin.ModelAdmin.view_on_site", "type": "django.contrib.admin", "text": "\nSet `view_on_site` to control whether or not to display the \u201cView on site\u201d\nlink. This link should bring you to a URL where you can display the saved\nobject.\n\nThis value can be either a boolean flag or a callable. If `True` (the\ndefault), the object\u2019s `get_absolute_url()` method will be used to generate\nthe url.\n\nIf your model has a `get_absolute_url()` method but you don\u2019t want the \u201cView\non site\u201d button to appear, you only need to set `view_on_site` to `False`:\n\nIn case it is a callable, it accepts the model instance as a parameter. For\nexample:\n\n"}, {"name": "admin.models.LogEntry", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry", "type": "django.contrib.admin", "text": "\nThe `LogEntry` class tracks additions, changes, and deletions of objects done\nthrough the admin interface.\n\n"}, {"name": "admin.models.LogEntry.action_flag", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.action_flag", "type": "django.contrib.admin", "text": "\nThe type of action logged: `ADDITION`, `CHANGE`, `DELETION`.\n\nFor example, to get a list of all additions done through the admin:\n\n"}, {"name": "admin.models.LogEntry.action_time", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.action_time", "type": "django.contrib.admin", "text": "\nThe date and time of the action.\n\n"}, {"name": "admin.models.LogEntry.change_message", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.change_message", "type": "django.contrib.admin", "text": "\nThe detailed description of the modification. In the case of an edit, for\nexample, the message contains a list of the edited fields. The Django admin\nsite formats this content as a JSON structure, so that `get_change_message()`\ncan recompose a message translated in the current user language. Custom code\nmight set this as a plain string though. You are advised to use the\n`get_change_message()` method to retrieve this value instead of accessing it\ndirectly.\n\n"}, {"name": "admin.models.LogEntry.content_type", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.content_type", "type": "django.contrib.admin", "text": "\nThe `ContentType` of the modified object.\n\n"}, {"name": "admin.models.LogEntry.get_change_message()", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.get_change_message", "type": "django.contrib.admin", "text": "\nFormats and translates `change_message` into the current user language.\nMessages created before Django 1.10 will always be displayed in the language\nin which they were logged.\n\n"}, {"name": "admin.models.LogEntry.get_edited_object()", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.get_edited_object", "type": "django.contrib.admin", "text": "\nA shortcut that returns the referenced object.\n\n"}, {"name": "admin.models.LogEntry.object_id", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.object_id", "type": "django.contrib.admin", "text": "\nThe textual representation of the modified object\u2019s primary key.\n\n"}, {"name": "admin.models.LogEntry.object_repr", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.object_repr", "type": "django.contrib.admin", "text": "\nThe object`s `repr()` after the modification.\n\n"}, {"name": "admin.models.LogEntry.user", "path": "ref/contrib/admin/index#django.contrib.admin.models.LogEntry.user", "type": "django.contrib.admin", "text": "\nThe user (an `AUTH_USER_MODEL` instance) who performed the action.\n\n"}, {"name": "admin.register()", "path": "ref/contrib/admin/index#django.contrib.admin.register", "type": "django.contrib.admin", "text": "\nThere is also a decorator for registering your `ModelAdmin` classes:\n\nIt\u2019s given one or more model classes to register with the `ModelAdmin`. If\nyou\u2019re using a custom `AdminSite`, pass it using the `site` keyword argument:\n\nYou can\u2019t use this decorator if you have to reference your model admin class\nin its `__init__()` method, e.g. `super(PersonAdmin, self).__init__(*args,\n**kwargs)`. You can use `super().__init__(*args, **kwargs)`.\n\n"}, {"name": "admin.StackedInline", "path": "ref/contrib/admin/index#django.contrib.admin.StackedInline", "type": "django.contrib.admin", "text": "\nThe admin interface has the ability to edit models on the same page as a\nparent model. These are called inlines. Suppose you have these two models:\n\nYou can edit the books authored by an author on the author page. You add\ninlines to a model by specifying them in a `ModelAdmin.inlines`:\n\nDjango provides two subclasses of `InlineModelAdmin` and they are:\n\nThe difference between these two is merely the template used to render them.\n\n"}, {"name": "admin.TabularInline", "path": "ref/contrib/admin/index#django.contrib.admin.TabularInline", "type": "django.contrib.admin", "text": "\n\n"}, {"name": "admin.views.decorators.staff_member_required()", "path": "ref/contrib/admin/index#django.contrib.admin.views.decorators.staff_member_required", "type": "django.contrib.admin", "text": "\nThis decorator is used on the admin views that require authorization. A view\ndecorated with this function will have the following behavior:\n\nExample usage:\n\n"}, {"name": "Advanced testing topics", "path": "topics/testing/advanced", "type": "Guides", "text": "\nThe `RequestFactory` shares the same API as the test client. However, instead\nof behaving like a browser, the RequestFactory provides a way to generate a\nrequest instance that can be used as the first argument to any view. This\nmeans you can test a view function the same way as you would test any other\nfunction \u2013 as a black box, with exactly known inputs, testing for specific\noutputs.\n\nThe API for the `RequestFactory` is a slightly restricted subset of the test\nclient API:\n\nThe following is a unit test using the request factory:\n\n`RequestFactory` creates WSGI-like requests. If you want to create ASGI-like\nrequests, including having a correct ASGI `scope`, you can instead use\n`django.test.AsyncRequestFactory`.\n\nThis class is directly API-compatible with `RequestFactory`, with the only\ndifference being that it returns `ASGIRequest` instances rather than\n`WSGIRequest` instances. All of its methods are still synchronous callables.\n\nIn order to test class-based views outside of the request/response cycle you\nmust ensure that they are configured correctly, by calling `setup()` after\ninstantiation.\n\nFor example, assuming the following class-based view:\n\nYou may directly test the `get_context_data()` method by first instantiating\nthe view, then passing a `request` to `setup()`, before proceeding with your\ntest\u2019s code:\n\nThe `ALLOWED_HOSTS` setting is validated when running tests. This allows the\ntest client to differentiate between internal and external URLs.\n\nProjects that support multitenancy or otherwise alter business logic based on\nthe request\u2019s host and use custom host names in tests must include those hosts\nin `ALLOWED_HOSTS`.\n\nThe first option to do so is to add the hosts to your settings file. For\nexample, the test suite for docs.djangoproject.com includes the following:\n\nand the settings file includes a list of the domains supported by the project:\n\nAnother option is to add the required hosts to `ALLOWED_HOSTS` using\n`override_settings()` or `modify_settings()`. This option may be preferable in\nstandalone apps that can\u2019t package their own settings file or for projects\nwhere the list of domains is not static (e.g., subdomains for multitenancy).\nFor example, you could write a test for the domain `http://otherserver/` as\nfollows:\n\nDisabling `ALLOWED_HOSTS` checking (`ALLOWED_HOSTS = ['*']`) when running\ntests prevents the test client from raising a helpful error message if you\nfollow a redirect to an external URL.\n\nIf you\u2019re testing a multiple database configuration with primary/replica\n(referred to as master/slave by some databases) replication, this strategy of\ncreating test databases poses a problem. When the test databases are created,\nthere won\u2019t be any replication, and as a result, data created on the primary\nwon\u2019t be seen on the replica.\n\nTo compensate for this, Django allows you to define that a database is a test\nmirror. Consider the following (simplified) example database configuration:\n\nIn this setup, we have two database servers: `dbprimary`, described by the\ndatabase alias `default`, and `dbreplica` described by the alias `replica`. As\nyou might expect, `dbreplica` has been configured by the database\nadministrator as a read replica of `dbprimary`, so in normal activity, any\nwrite to `default` will appear on `replica`.\n\nIf Django created two independent test databases, this would break any tests\nthat expected replication to occur. However, the `replica` database has been\nconfigured as a test mirror (using the `MIRROR` test setting), indicating that\nunder testing, `replica` should be treated as a mirror of `default`.\n\nWhen the test environment is configured, a test version of `replica` will not\nbe created. Instead the connection to `replica` will be redirected to point at\n`default`. As a result, writes to `default` will appear on `replica` \u2013 but\nbecause they are actually the same database, not because there is data\nreplication between the two databases.\n\nBy default, Django will assume all databases depend on the `default` database\nand therefore always create the `default` database first. However, no\nguarantees are made on the creation order of any other databases in your test\nsetup.\n\nIf your database configuration requires a specific creation order, you can\nspecify the dependencies that exist using the `DEPENDENCIES` test setting.\nConsider the following (simplified) example database configuration:\n\nUnder this configuration, the `diamonds` database will be created first, as it\nis the only database alias without dependencies. The `default` and `clubs`\nalias will be created next (although the order of creation of this pair is not\nguaranteed), then `hearts`, and finally `spades`.\n\nIf there are any circular dependencies in the `DEPENDENCIES` definition, an\n`ImproperlyConfigured` exception will be raised.\n\nWarning\n\nThis attribute is a private API. It may be changed or removed without a\ndeprecation period in the future, for instance to accommodate changes in\napplication loading.\n\nIt\u2019s used to optimize Django\u2019s own test suite, which contains hundreds of\nmodels but no relations between models in different applications.\n\nBy default, `available_apps` is set to `None`. After each test, Django calls\n`flush` to reset the database state. This empties all tables and emits the\n`post_migrate` signal, which recreates one content type and four permissions\nfor each model. This operation gets expensive proportionally to the number of\nmodels.\n\nSetting `available_apps` to a list of applications instructs Django to behave\nas if only the models from these applications were available. The behavior of\n`TransactionTestCase` changes as follows:\n\nSince the database isn\u2019t fully flushed, if a test creates instances of models\nnot included in `available_apps`, they will leak and they may cause unrelated\ntests to fail. Be careful with tests that use sessions; the default session\nengine stores them in the database.\n\nSince `post_migrate` isn\u2019t emitted after flushing the database, its state\nafter a `TransactionTestCase` isn\u2019t the same as after a `TestCase`: it\u2019s\nmissing the rows created by listeners to `post_migrate`. Considering the order\nin which tests are executed, this isn\u2019t an issue, provided either all\n`TransactionTestCase` in a given test suite declare `available_apps`, or none\nof them.\n\n`available_apps` is mandatory in Django\u2019s own test suite.\n\nSetting `reset_sequences = True` on a `TransactionTestCase` will make sure\nsequences are always reset before the test run:\n\nUnless you are explicitly testing primary keys sequence numbers, it is\nrecommended that you do not hard code primary key values in tests.\n\nUsing `reset_sequences = True` will slow down the test, since the primary key\nreset is a relatively expensive database operation.\n\nIf you have test classes that cannot be run in parallel (e.g. because they\nshare a common resource), you can use `django.test.testcases.SerializeMixin`\nto run them sequentially. This mixin uses a filesystem `lockfile`.\n\nFor example, you can use `__file__` to determine that all test classes in the\nsame file that inherit from `SerializeMixin` will run sequentially:\n\nIf you are writing a reusable application you may want to use the Django test\nrunner to run your own test suite and thus benefit from the Django testing\ninfrastructure.\n\nA common practice is a tests directory next to the application code, with the\nfollowing structure:\n\nLet\u2019s take a look inside a couple of those files:\n\nThis is the script that you invoke to run the test suite. It sets up the\nDjango environment, creates the test database and runs the tests.\n\nFor the sake of clarity, this example contains only the bare minimum necessary\nto use the Django test runner. You may want to add command-line options for\ncontrolling verbosity, passing in specific test labels to run, etc.\n\nThis file contains the Django settings required to run your app\u2019s tests.\n\nAgain, this is a minimal example; your tests may require additional settings\nto run.\n\nSince the tests package is included in `INSTALLED_APPS` when running your\ntests, you can define test-only models in its `models.py` file.\n\nClearly, `unittest` is not the only Python testing framework. While Django\ndoesn\u2019t provide explicit support for alternative frameworks, it does provide a\nway to invoke tests constructed for an alternative framework as if they were\nnormal Django tests.\n\nWhen you run `./manage.py test`, Django looks at the `TEST_RUNNER` setting to\ndetermine what to do. By default, `TEST_RUNNER` points to\n`'django.test.runner.DiscoverRunner'`. This class defines the default Django\ntesting behavior. This behavior involves:\n\nIf you define your own test runner class and point `TEST_RUNNER` at that\nclass, Django will execute your test runner whenever you run `./manage.py\ntest`. In this way, it is possible to use any test framework that can be\nexecuted from Python code, or to modify the Django test execution process to\nsatisfy whatever testing requirements you may have.\n\nA test runner is a class defining a `run_tests()` method. Django ships with a\n`DiscoverRunner` class that defines the default Django testing behavior. This\nclass defines the `run_tests()` entry point, plus a selection of other methods\nthat are used by `run_tests()` to set up, execute and tear down the test\nsuite.\n\n`DiscoverRunner` will search for tests in any file matching `pattern`.\n\n`top_level` can be used to specify the directory containing your top-level\nPython modules. Usually Django can figure this out automatically, so it\u2019s not\nnecessary to specify this option. If specified, it should generally be the\ndirectory containing your `manage.py` file.\n\n`verbosity` determines the amount of notification and debug information that\nwill be printed to the console; `0` is no output, `1` is normal output, and\n`2` is verbose output.\n\nIf `interactive` is `True`, the test suite has permission to ask the user for\ninstructions when the test suite is executed. An example of this behavior\nwould be asking for permission to delete an existing test database. If\n`interactive` is `False`, the test suite must be able to run without any\nmanual intervention.\n\nIf `failfast` is `True`, the test suite will stop running after the first test\nfailure is detected.\n\nIf `keepdb` is `True`, the test suite will use the existing database, or\ncreate one if necessary. If `False`, a new database will be created, prompting\nthe user to remove the existing one, if present.\n\nIf `reverse` is `True`, test cases will be executed in the opposite order.\nThis could be useful to debug tests that aren\u2019t properly isolated and have\nside effects. Grouping by test class is preserved when using this option. This\noption can be used in conjunction with `--shuffle` to reverse the order for a\nparticular random seed.\n\n`debug_mode` specifies what the `DEBUG` setting should be set to prior to\nrunning tests.\n\n`parallel` specifies the number of processes. If `parallel` is greater than\n`1`, the test suite will run in `parallel` processes. If there are fewer test\ncases than configured processes, Django will reduce the number of processes\naccordingly. Each process gets its own database. This option requires the\nthird-party `tblib` package to display tracebacks correctly.\n\n`tags` can be used to specify a set of tags for filtering tests. May be\ncombined with `exclude_tags`.\n\n`exclude_tags` can be used to specify a set of tags for excluding tests. May\nbe combined with `tags`.\n\nIf `debug_sql` is `True`, failing test cases will output SQL queries logged to\nthe django.db.backends logger as well as the traceback. If `verbosity` is `2`,\nthen queries in all tests are output.\n\n`test_name_patterns` can be used to specify a set of patterns for filtering\ntest methods and classes by their names.\n\nIf `pdb` is `True`, a debugger (`pdb` or `ipdb`) will be spawned at each test\nerror or failure.\n\nIf `buffer` is `True`, outputs from passing tests will be discarded.\n\nIf `enable_faulthandler` is `True`, `faulthandler` will be enabled.\n\nIf `timing` is `True`, test timings, including database setup and total run\ntime, will be shown.\n\nIf `shuffle` is an integer, test cases will be shuffled in a random order\nprior to execution, using the integer as a random seed. If `shuffle` is\n`None`, the seed will be generated randomly. In both cases, the seed will be\nlogged and set to `self.shuffle_seed` prior to running tests. This option can\nbe used to help detect tests that aren\u2019t properly isolated. Grouping by test\nclass is preserved when using this option.\n\n`logger` can be used to pass a Python Logger object. If provided, the logger\nwill be used to log messages instead of printing to the console. The logger\nobject will respect its logging level rather than the `verbosity`.\n\nDjango may, from time to time, extend the capabilities of the test runner by\nadding new arguments. The `**kwargs` declaration allows for this expansion. If\nyou subclass `DiscoverRunner` or write your own test runner, ensure it accepts\n`**kwargs`.\n\nYour test runner may also define additional command-line options. Create or\noverride an `add_arguments(cls, parser)` class method and add custom arguments\nby calling `parser.add_argument()` inside the method, so that the `test`\ncommand will be able to use those arguments.\n\nThe `enable_faulthandler` and `timing` arguments were added.\n\nThe `logger` and `shuffle` arguments were added.\n\nThe class used to build the test suite. By default it is set to\n`unittest.TestSuite`. This can be overridden if you wish to implement\ndifferent logic for collecting tests.\n\nThis is the class of the low-level test runner which is used to execute the\nindividual tests and format the results. By default it is set to\n`unittest.TextTestRunner`. Despite the unfortunate similarity in naming\nconventions, this is not the same type of class as `DiscoverRunner`, which\ncovers a broader set of responsibilities. You can override this attribute to\nmodify the way tests are run and reported.\n\nThis is the class that loads tests, whether from TestCases or modules or\notherwise and bundles them into test suites for the runner to execute. By\ndefault it is set to `unittest.defaultTestLoader`. You can override this\nattribute if your tests are going to be loaded in unusual ways.\n\nRun the test suite.\n\n`test_labels` allows you to specify which tests to run and supports several\nformats (see `DiscoverRunner.build_suite()` for a list of supported formats).\n\nDeprecated since version 4.0: `extra_tests` is a list of extra `TestCase`\ninstances to add to the suite that is executed by the test runner. These extra\ntests are run in addition to those discovered in the modules listed in\n`test_labels`.\n\nThis method should return the number of tests that failed.\n\nOverride this class method to add custom arguments accepted by the `test`\nmanagement command. See `argparse.ArgumentParser.add_argument()` for details\nabout adding arguments to a parser.\n\nSets up the test environment by calling `setup_test_environment()` and setting\n`DEBUG` to `self.debug_mode` (defaults to `False`).\n\nConstructs a test suite that matches the test labels provided.\n\n`test_labels` is a list of strings describing the tests to be run. A test\nlabel can take one of four forms:\n\nIf `test_labels` has a value of `None`, the test runner will search for tests\nin all files below the current directory whose names match its `pattern` (see\nabove).\n\nDeprecated since version 4.0: `extra_tests` is a list of extra `TestCase`\ninstances to add to the suite that is executed by the test runner. These extra\ntests are run in addition to those discovered in the modules listed in\n`test_labels`.\n\nReturns a `TestSuite` instance ready to be run.\n\nCreates the test databases by calling `setup_databases()`.\n\nRuns the system checks on the test `databases`.\n\nRuns the test suite.\n\nReturns the result produced by the running the test suite.\n\nReturns the keyword arguments to instantiate the `DiscoverRunner.test_runner`\nwith.\n\nDestroys the test databases, restoring pre-test conditions by calling\n`teardown_databases()`.\n\nRestores the pre-test environment.\n\nComputes and returns a return code based on a test suite, and the result from\nthat test suite.\n\nIf a `logger` is set, logs the message at the given integer logging level\n(e.g. `logging.DEBUG`, `logging.INFO`, or `logging.WARNING`). Otherwise, the\nmessage is printed to the console, respecting the current `verbosity`. For\nexample, no message will be printed if the `verbosity` is 0, `INFO` and above\nwill be printed if the `verbosity` is at least 1, and `DEBUG` will be printed\nif it is at least 2. The `level` defaults to `logging.INFO`.\n\nTo assist in the creation of your own test runner, Django provides a number of\nutility methods in the `django.test.utils` module.\n\nPerforms global pre-test setup, such as installing instrumentation for the\ntemplate rendering system and setting up the dummy email outbox.\n\nIf `debug` isn\u2019t `None`, the `DEBUG` setting is updated to its value.\n\nPerforms global post-test teardown, such as removing instrumentation from the\ntemplate system and restoring normal email services.\n\nCreates the test databases.\n\nReturns a data structure that provides enough detail to undo the changes that\nhave been made. This data will be provided to the `teardown_databases()`\nfunction at the conclusion of testing.\n\nThe `aliases` argument determines which `DATABASES` aliases test databases\nshould be set up for. If it\u2019s not provided, it defaults to all of `DATABASES`\naliases.\n\nThe `serialized_aliases` argument determines what subset of `aliases` test\ndatabases should have their state serialized to allow usage of the\nserialized_rollback feature. If it\u2019s not provided, it defaults to `aliases`.\n\nThe `time_keeper` kwarg was added, and all kwargs were made keyword-only.\n\nThe `serialized_aliases` kwarg was added.\n\nDestroys the test databases, restoring pre-test conditions.\n\n`old_config` is a data structure defining the changes in the database\nconfiguration that need to be reversed. It\u2019s the return value of the\n`setup_databases()` method.\n\nThe creation module of the database backend also provides some utilities that\ncan be useful during testing.\n\nCreates a new test database and runs `migrate` against it.\n\n`verbosity` has the same behavior as in `run_tests()`.\n\n`autoclobber` describes the behavior that will occur if a database with the\nsame name as the test database is discovered:\n\n`serialize` determines if Django serializes the database into an in-memory\nJSON string before running tests (used to restore the database state between\ntests if you don\u2019t have transactions). You can set this to `False` to speed up\ncreation time if you don\u2019t have any test classes with\nserialized_rollback=True.\n\nIf you are using the default test runner, you can control this with the the\n`SERIALIZE` entry in the `TEST` dictionary.\n\n`keepdb` determines if the test run should use an existing database, or create\na new one. If `True`, the existing database will be used, or created if not\npresent. If `False`, a new database will be created, prompting the user to\nremove the existing one, if present.\n\nReturns the name of the test database that it created.\n\n`create_test_db()` has the side effect of modifying the value of `NAME` in\n`DATABASES` to match the name of the test database.\n\nDestroys the database whose name is the value of `NAME` in `DATABASES`, and\nsets `NAME` to the value of `old_database_name`.\n\nThe `verbosity` argument has the same behavior as for `DiscoverRunner`.\n\nIf the `keepdb` argument is `True`, then the connection to the database will\nbe closed, but the database will not be destroyed.\n\nCode coverage describes how much source code has been tested. It shows which\nparts of your code are being exercised by tests and which are not. It\u2019s an\nimportant part of testing applications, so it\u2019s strongly recommended to check\nthe coverage of your tests.\n\nDjango can be easily integrated with coverage.py, a tool for measuring code\ncoverage of Python programs. First, install coverage.py. Next, run the\nfollowing from your project folder containing `manage.py`:\n\nThis runs your tests and collects coverage data of the executed files in your\nproject. You can see a report of this data by typing following command:\n\nNote that some Django code was executed while running tests, but it is not\nlisted here because of the `source` flag passed to the previous command.\n\nFor more options like annotated HTML listings detailing missed lines, see the\ncoverage.py docs.\n\n"}, {"name": "Advanced tutorial: How to write reusable apps", "path": "intro/reusable-apps", "type": "Guides: Intro", "text": "\nThis advanced tutorial begins where Tutorial 7 left off. We\u2019ll be turning our\nweb-poll into a standalone Python package you can reuse in new projects and\nshare with other people.\n\nIf you haven\u2019t recently completed Tutorials 1\u20137, we encourage you to review\nthese so that your example project matches the one described below.\n\nIt\u2019s a lot of work to design, build, test and maintain a web application. Many\nPython and Django projects share common problems. Wouldn\u2019t it be great if we\ncould save some of this repeated work?\n\nReusability is the way of life in Python. The Python Package Index (PyPI) has\na vast range of packages you can use in your own Python programs. Check out\nDjango Packages for existing reusable apps you could incorporate in your\nproject. Django itself is also a normal Python package. This means that you\ncan take existing Python packages or Django apps and compose them into your\nown web project. You only need to write the parts that make your project\nunique.\n\nLet\u2019s say you were starting a new project that needed a polls app like the one\nwe\u2019ve been working on. How do you make this app reusable? Luckily, you\u2019re well\non the way already. In Tutorial 1, we saw how we could decouple polls from the\nproject-level URLconf using an `include`. In this tutorial, we\u2019ll take further\nsteps to make the app easy to use in new projects and ready to publish for\nothers to install and use.\n\nPackage? App?\n\nA Python package provides a way of grouping related Python code for easy\nreuse. A package contains one or more files of Python code (also known as\n\u201cmodules\u201d).\n\nA package can be imported with `import foo.bar` or `from foo import bar`. For\na directory (like `polls`) to form a package, it must contain a special file\n`__init__.py`, even if this file is empty.\n\nA Django application is a Python package that is specifically intended for use\nin a Django project. An application may use common Django conventions, such as\nhaving `models`, `tests`, `urls`, and `views` submodules.\n\nLater on we use the term packaging to describe the process of making a Python\npackage easy for others to install. It can be a little confusing, we know.\n\nAfter the previous tutorials, our project should look like this:\n\nYou created `mysite/templates` in Tutorial 7, and `polls/templates` in\nTutorial 3. Now perhaps it is clearer why we chose to have separate template\ndirectories for the project and application: everything that is part of the\npolls application is in `polls`. It makes the application self-contained and\neasier to drop into a new project.\n\nThe `polls` directory could now be copied into a new Django project and\nimmediately reused. It\u2019s not quite ready to be published though. For that, we\nneed to package the app to make it easy for others to install.\n\nThe current state of Python packaging is a bit muddled with various tools. For\nthis tutorial, we\u2019re going to use setuptools to build our package. It\u2019s the\nrecommended packaging tool (merged with the `distribute` fork). We\u2019ll also be\nusing pip to install and uninstall it. You should install these two packages\nnow. If you need help, you can refer to how to install Django with pip. You\ncan install `setuptools` the same way.\n\nPython packaging refers to preparing your app in a specific format that can be\neasily installed and used. Django itself is packaged very much like this. For\na small app like polls, this process isn\u2019t too difficult.\n\nFirst, create a parent directory for `polls`, outside of your Django project.\nCall this directory `django-polls`.\n\nChoosing a name for your app\n\nWhen choosing a name for your package, check resources like PyPI to avoid\nnaming conflicts with existing packages. It\u2019s often useful to prepend\n`django-` to your module name when creating a package to distribute. This\nhelps others looking for Django apps identify your app as Django specific.\n\nApplication labels (that is, the final part of the dotted path to application\npackages) must be unique in `INSTALLED_APPS`. Avoid using the same label as\nany of the Django contrib packages, for example `auth`, `admin`, or\n`messages`.\n\nCreate a file `django-polls/README.rst` with the following contents:\n\nNext we\u2019ll create `pyproject.toml`, `setup.cfg`, and `setup.py` files which\ndetail how to build and install the app. A full explanation of these files is\nbeyond the scope of this tutorial, but the setuptools documentation has a good\nexplanation. Create the `django-polls/pyproject.toml`, `django-\npolls/setup.cfg`, and `django-polls/setup.py` files with the following\ncontents:\n\nOnly Python modules and packages are included in the package by default. To\ninclude additional files, we\u2019ll need to create a `MANIFEST.in` file. The\nsetuptools docs referred to in the previous step discuss this file in more\ndetail. To include the templates, the `README.rst` and our `LICENSE` file,\ncreate a file `django-polls/MANIFEST.in` with the following contents:\n\nIt\u2019s optional, but recommended, to include detailed documentation with your\napp. Create an empty directory `django-polls/docs` for future documentation.\nAdd an additional line to `django-polls/MANIFEST.in`:\n\nNote that the `docs` directory won\u2019t be included in your package unless you\nadd some files to it. Many Django apps also provide their documentation online\nthrough sites like readthedocs.org.\n\nFor more information on packaging, see Python\u2019s Tutorial on Packaging and\nDistributing Projects.\n\nSince we moved the `polls` directory out of the project, it\u2019s no longer\nworking. We\u2019ll now fix this by installing our new `django-polls` package.\n\nInstalling as a user library\n\nThe following steps install `django-polls` as a user library. Per-user\ninstalls have a lot of advantages over installing the package system-wide,\nsuch as being usable on systems where you don\u2019t have administrator access as\nwell as preventing the package from affecting system services and other users\nof the machine.\n\nNote that per-user installations can still affect the behavior of system tools\nthat run as that user, so using a virtual environment is a more robust\nsolution (see below).\n\nTo install the package, use pip (you already installed it, right?):\n\nTo uninstall the package, use pip:\n\nNow that we\u2019ve packaged and tested `django-polls`, it\u2019s ready to share with\nthe world! If this wasn\u2019t just an example, you could now:\n\nEarlier, we installed the polls app as a user library. This has some\ndisadvantages:\n\nTypically, these situations only arise once you\u2019re maintaining several Django\nprojects. When they do, the best solution is to use venv. This tool allows you\nto maintain multiple isolated Python environments, each with its own copy of\nthe libraries and package namespace.\n\n"}, {"name": "Aggregation", "path": "topics/db/aggregation", "type": "Guides", "text": "\nThe topic guide on Django\u2019s database-abstraction API described the way that\nyou can use Django queries that create, retrieve, update and delete individual\nobjects. However, sometimes you will need to retrieve values that are derived\nby summarizing or aggregating a collection of objects. This topic guide\ndescribes the ways that aggregate values can be generated and returned using\nDjango queries.\n\nThroughout this guide, we\u2019ll refer to the following models. These models are\nused to track the inventory for a series of online bookstores:\n\nIn a hurry? Here\u2019s how to do common aggregate queries, assuming the models\nabove:\n\nDjango provides two ways to generate aggregates. The first way is to generate\nsummary values over an entire `QuerySet`. For example, say you wanted to\ncalculate the average price of all books available for sale. Django\u2019s query\nsyntax provides a means for describing the set of all books:\n\nWhat we need is a way to calculate summary values over the objects that belong\nto this `QuerySet`. This is done by appending an `aggregate()` clause onto the\n`QuerySet`:\n\nThe `all()` is redundant in this example, so this could be simplified to:\n\nThe argument to the `aggregate()` clause describes the aggregate value that we\nwant to compute - in this case, the average of the `price` field on the `Book`\nmodel. A list of the aggregate functions that are available can be found in\nthe QuerySet reference.\n\n`aggregate()` is a terminal clause for a `QuerySet` that, when invoked,\nreturns a dictionary of name-value pairs. The name is an identifier for the\naggregate value; the value is the computed aggregate. The name is\nautomatically generated from the name of the field and the aggregate function.\nIf you want to manually specify a name for the aggregate value, you can do so\nby providing that name when you specify the aggregate clause:\n\nIf you want to generate more than one aggregate, you add another argument to\nthe `aggregate()` clause. So, if we also wanted to know the maximum and\nminimum price of all books, we would issue the query:\n\nThe second way to generate summary values is to generate an independent\nsummary for each object in a `QuerySet`. For example, if you are retrieving a\nlist of books, you may want to know how many authors contributed to each book.\nEach Book has a many-to-many relationship with the Author; we want to\nsummarize this relationship for each book in the `QuerySet`.\n\nPer-object summaries can be generated using the `annotate()` clause. When an\n`annotate()` clause is specified, each object in the `QuerySet` will be\nannotated with the specified values.\n\nThe syntax for these annotations is identical to that used for the\n`aggregate()` clause. Each argument to `annotate()` describes an aggregate\nthat is to be calculated. For example, to annotate books with the number of\nauthors:\n\nAs with `aggregate()`, the name for the annotation is automatically derived\nfrom the name of the aggregate function and the name of the field being\naggregated. You can override this default name by providing an alias when you\nspecify the annotation:\n\nUnlike `aggregate()`, `annotate()` is not a terminal clause. The output of the\n`annotate()` clause is a `QuerySet`; this `QuerySet` can be modified using any\nother `QuerySet` operation, including `filter()`, `order_by()`, or even\nadditional calls to `annotate()`.\n\nCombining multiple aggregations with `annotate()` will yield the wrong results\nbecause joins are used instead of subqueries:\n\nFor most aggregates, there is no way to avoid this problem, however, the\n`Count` aggregate has a `distinct` parameter that may help:\n\nIf in doubt, inspect the SQL query!\n\nIn order to understand what happens in your query, consider inspecting the\n`query` property of your `QuerySet`.\n\nSo far, we have dealt with aggregates over fields that belong to the model\nbeing queried. However, sometimes the value you want to aggregate will belong\nto a model that is related to the model you are querying.\n\nWhen specifying the field to be aggregated in an aggregate function, Django\nwill allow you to use the same double underscore notation that is used when\nreferring to related fields in filters. Django will then handle any table\njoins that are required to retrieve and aggregate the related value.\n\nFor example, to find the price range of books offered in each store, you could\nuse the annotation:\n\nThis tells Django to retrieve the `Store` model, join (through the many-to-\nmany relationship) with the `Book` model, and aggregate on the price field of\nthe book model to produce a minimum and maximum value.\n\nThe same rules apply to the `aggregate()` clause. If you wanted to know the\nlowest and highest price of any book that is available for sale in any of the\nstores, you could use the aggregate:\n\nJoin chains can be as deep as you require. For example, to extract the age of\nthe youngest author of any book available for sale, you could issue the query:\n\nIn a way similar to Lookups that span relationships, aggregations and\nannotations on fields of models or models that are related to the one you are\nquerying can include traversing \u201creverse\u201d relationships. The lowercase name of\nrelated models and double-underscores are used here too.\n\nFor example, we can ask for all publishers, annotated with their respective\ntotal book stock counters (note how we use `'book'` to specify the `Publisher`\n-> `Book` reverse foreign key hop):\n\n(Every `Publisher` in the resulting `QuerySet` will have an extra attribute\ncalled `book__count`.)\n\nWe can also ask for the oldest book of any of those managed by every\npublisher:\n\n(The resulting dictionary will have a key called `'oldest_pubdate'`. If no\nsuch alias were specified, it would be the rather long\n`'book__pubdate__min'`.)\n\nThis doesn\u2019t apply just to foreign keys. It also works with many-to-many\nrelations. For example, we can ask for every author, annotated with the total\nnumber of pages considering all the books the author has (co-)authored (note\nhow we use `'book'` to specify the `Author` -> `Book` reverse many-to-many\nhop):\n\n(Every `Author` in the resulting `QuerySet` will have an extra attribute\ncalled `total_pages`. If no such alias were specified, it would be the rather\nlong `book__pages__sum`.)\n\nOr ask for the average rating of all the books written by author(s) we have on\nfile:\n\n(The resulting dictionary will have a key called `'average_rating'`. If no\nsuch alias were specified, it would be the rather long `'book__rating__avg'`.)\n\nAggregates can also participate in filters. Any `filter()` (or `exclude()`)\napplied to normal model fields will have the effect of constraining the\nobjects that are considered for aggregation.\n\nWhen used with an `annotate()` clause, a filter has the effect of constraining\nthe objects for which an annotation is calculated. For example, you can\ngenerate an annotated list of all books that have a title starting with\n\u201cDjango\u201d using the query:\n\nWhen used with an `aggregate()` clause, a filter has the effect of\nconstraining the objects over which the aggregate is calculated. For example,\nyou can generate the average price of all books with a title that starts with\n\u201cDjango\u201d using the query:\n\nAnnotated values can also be filtered. The alias for the annotation can be\nused in `filter()` and `exclude()` clauses in the same way as any other model\nfield.\n\nFor example, to generate a list of books that have more than one author, you\ncan issue the query:\n\nThis query generates an annotated result set, and then generates a filter\nbased upon that annotation.\n\nIf you need two annotations with two separate filters you can use the `filter`\nargument with any aggregate. For example, to generate a list of authors with a\ncount of highly rated books:\n\nEach `Author` in the result set will have the `num_books` and\n`highly_rated_books` attributes. See also Conditional aggregation.\n\nChoosing between `filter` and `QuerySet.filter()`\n\nAvoid using the `filter` argument with a single annotation or aggregation.\nIt\u2019s more efficient to use `QuerySet.filter()` to exclude rows. The\naggregation `filter` argument is only useful when using two or more\naggregations over the same relations with different conditionals.\n\nWhen developing a complex query that involves both `annotate()` and `filter()`\nclauses, pay particular attention to the order in which the clauses are\napplied to the `QuerySet`.\n\nWhen an `annotate()` clause is applied to a query, the annotation is computed\nover the state of the query up to the point where the annotation is requested.\nThe practical implication of this is that `filter()` and `annotate()` are not\ncommutative operations.\n\nGiven:\n\nHere\u2019s an example with the `Count` aggregate:\n\nBoth queries return a list of publishers that have at least one book with a\nrating exceeding 3.0, hence publisher C is excluded.\n\nIn the first query, the annotation precedes the filter, so the filter has no\neffect on the annotation. `distinct=True` is required to avoid a query bug.\n\nThe second query counts the number of books that have a rating exceeding 3.0\nfor each publisher. The filter precedes the annotation, so the filter\nconstrains the objects considered when calculating the annotation.\n\nHere\u2019s another example with the `Avg` aggregate:\n\nThe first query asks for the average rating of all a publisher\u2019s books for\npublisher\u2019s that have at least one book with a rating exceeding 3.0. The\nsecond query asks for the average of a publisher\u2019s book\u2019s ratings for only\nthose ratings exceeding 3.0.\n\nIt\u2019s difficult to intuit how the ORM will translate complex querysets into SQL\nqueries so when in doubt, inspect the SQL with `str(queryset.query)` and write\nplenty of tests.\n\nAnnotations can be used as a basis for ordering. When you define an\n`order_by()` clause, the aggregates you provide can reference any alias\ndefined as part of an `annotate()` clause in the query.\n\nFor example, to order a `QuerySet` of books by the number of authors that have\ncontributed to the book, you could use the following query:\n\nOrdinarily, annotations are generated on a per-object basis - an annotated\n`QuerySet` will return one result for each object in the original `QuerySet`.\nHowever, when a `values()` clause is used to constrain the columns that are\nreturned in the result set, the method for evaluating annotations is slightly\ndifferent. Instead of returning an annotated result for each result in the\noriginal `QuerySet`, the original results are grouped according to the unique\ncombinations of the fields specified in the `values()` clause. An annotation\nis then provided for each unique group; the annotation is computed over all\nmembers of the group.\n\nFor example, consider an author query that attempts to find out the average\nrating of books written by each author:\n\nThis will return one result for each author in the database, annotated with\ntheir average book rating.\n\nHowever, the result will be slightly different if you use a `values()` clause:\n\nIn this example, the authors will be grouped by name, so you will only get an\nannotated result for each unique author name. This means if you have two\nauthors with the same name, their results will be merged into a single result\nin the output of the query; the average will be computed as the average over\nthe books written by both authors.\n\nAs with the `filter()` clause, the order in which `annotate()` and `values()`\nclauses are applied to a query is significant. If the `values()` clause\nprecedes the `annotate()`, the annotation will be computed using the grouping\ndescribed by the `values()` clause.\n\nHowever, if the `annotate()` clause precedes the `values()` clause, the\nannotations will be generated over the entire query set. In this case, the\n`values()` clause only constrains the fields that are generated on output.\n\nFor example, if we reverse the order of the `values()` and `annotate()` clause\nfrom our previous example:\n\nThis will now yield one unique result for each author; however, only the\nauthor\u2019s name and the `average_rating` annotation will be returned in the\noutput data.\n\nYou should also note that `average_rating` has been explicitly included in the\nlist of values to be returned. This is required because of the ordering of the\n`values()` and `annotate()` clause.\n\nIf the `values()` clause precedes the `annotate()` clause, any annotations\nwill be automatically added to the result set. However, if the `values()`\nclause is applied after the `annotate()` clause, you need to explicitly\ninclude the aggregate column.\n\nFields that are mentioned in the `order_by()` part of a queryset are used when\nselecting the output data, even if they are not otherwise specified in the\n`values()` call. These extra fields are used to group \u201clike\u201d results together\nand they can make otherwise identical result rows appear to be separate. This\nshows up, particularly, when counting things.\n\nBy way of example, suppose you have a model like this:\n\nIf you want to count how many times each distinct `data` value appears in an\nordered queryset, you might try this:\n\n\u2026which will group the `Item` objects by their common `data` values and then\ncount the number of `id` values in each group. Except that it won\u2019t quite\nwork. The ordering by `name` will also play a part in the grouping, so this\nquery will group by distinct `(data, name)` pairs, which isn\u2019t what you want.\nInstead, you should construct this queryset:\n\n\u2026clearing any ordering in the query. You could also order by, say, `data`\nwithout any harmful effects, since that is already playing a role in the\nquery.\n\nThis behavior is the same as that noted in the queryset documentation for\n`distinct()` and the general rule is the same: normally you won\u2019t want extra\ncolumns playing a part in the result, so clear out the ordering, or at least\nmake sure it\u2019s restricted only to those fields you also select in a `values()`\ncall.\n\nNote\n\nYou might reasonably ask why Django doesn\u2019t remove the extraneous columns for\nyou. The main reason is consistency with `distinct()` and other places: Django\nnever removes ordering constraints that you have specified (and we can\u2019t\nchange those other methods\u2019 behavior, as that would violate our API stability\npolicy).\n\nYou can also generate an aggregate on the result of an annotation. When you\ndefine an `aggregate()` clause, the aggregates you provide can reference any\nalias defined as part of an `annotate()` clause in the query.\n\nFor example, if you wanted to calculate the average number of authors per book\nyou first annotate the set of books with the author count, then aggregate that\nauthor count, referencing the annotation field:\n\n"}, {"name": "API Reference", "path": "ref/index", "type": "API", "text": "\n\n"}, {"name": "Applications", "path": "ref/applications", "type": "API", "text": "\nDjango contains a registry of installed applications that stores configuration\nand provides introspection. It also maintains a list of available models.\n\nThis registry is called `apps` and it\u2019s available in `django.apps`:\n\nThe term project describes a Django web application. The project Python\npackage is defined primarily by a settings module, but it usually contains\nother things. For example, when you run `django-admin startproject mysite`\nyou\u2019ll get a `mysite` project directory that contains a `mysite` Python\npackage with `settings.py`, `urls.py`, `asgi.py` and `wsgi.py`. The project\npackage is often extended to include things like fixtures, CSS, and templates\nwhich aren\u2019t tied to a particular application.\n\nA project\u2019s root directory (the one that contains `manage.py`) is usually the\ncontainer for all of a project\u2019s applications which aren\u2019t installed\nseparately.\n\nThe term application describes a Python package that provides some set of\nfeatures. Applications may be reused in various projects.\n\nApplications include some combination of models, views, templates, template\ntags, static files, URLs, middleware, etc. They\u2019re generally wired into\nprojects with the `INSTALLED_APPS` setting and optionally with other\nmechanisms such as URLconfs, the `MIDDLEWARE` setting, or template\ninheritance.\n\nIt is important to understand that a Django application is a set of code that\ninteracts with various parts of the framework. There\u2019s no such thing as an\n`Application` object. However, there\u2019s a few places where Django needs to\ninteract with installed applications, mainly for configuration and also for\nintrospection. That\u2019s why the application registry maintains metadata in an\n`AppConfig` instance for each installed application.\n\nThere\u2019s no restriction that a project package can\u2019t also be considered an\napplication and have models, etc. (which would require adding it to\n`INSTALLED_APPS`).\n\nTo configure an application, create an `apps.py` module inside the\napplication, then define a subclass of `AppConfig` there.\n\nWhen `INSTALLED_APPS` contains the dotted path to an application module, by\ndefault, if Django finds exactly one `AppConfig` subclass in the `apps.py`\nsubmodule, it uses that configuration for the application. This behavior may\nbe disabled by setting `AppConfig.default` to `False`.\n\nIf the `apps.py` module contains more than one `AppConfig` subclass, Django\nwill look for a single one where `AppConfig.default` is `True`.\n\nIf no `AppConfig` subclass is found, the base `AppConfig` class will be used.\n\nAlternatively, `INSTALLED_APPS` may contain the dotted path to a configuration\nclass to specify it explicitly:\n\nIf you\u2019re creating a pluggable app called \u201cRock \u2019n\u2019 roll\u201d, here\u2019s how you\nwould provide a proper name for the admin:\n\n`RockNRollConfig` will be loaded automatically when `INSTALLED_APPS` contains\n`'rock_n_roll'`. If you need to prevent this, set `default` to `False` in the\nclass definition.\n\nYou can provide several `AppConfig` subclasses with different behaviors. To\ntell Django which one to use by default, set `default` to `True` in its\ndefinition. If your users want to pick a non-default configuration, they must\nreplace `'rock_n_roll'` with the dotted path to that specific class in their\n`INSTALLED_APPS` setting.\n\nThe `AppConfig.name` attribute tells Django which application this\nconfiguration applies to. You can define any other attribute documented in the\n`AppConfig` API reference.\n\n`AppConfig` subclasses may be defined anywhere. The `apps.py` convention\nmerely allows Django to load them automatically when `INSTALLED_APPS` contains\nthe path to an application module rather than the path to a configuration\nclass.\n\nNote\n\nIf your code imports the application registry in an application\u2019s\n`__init__.py`, the name `apps` will clash with the `apps` submodule. The best\npractice is to move that code to a submodule and import it. A workaround is to\nimport the registry under a different name:\n\nIn previous versions, a `default_app_config` variable in the application\nmodule was used to identify the default application configuration class.\n\nIf you\u2019re using \u201cRock \u2019n\u2019 roll\u201d in a project called `anthology`, but you want\nit to show up as \u201cJazz Manouche\u201d instead, you can provide your own\nconfiguration:\n\nThis example shows project-specific configuration classes located in a\nsubmodule called `apps.py`. This is a convention, not a requirement.\n`AppConfig` subclasses may be defined anywhere.\n\nIn this situation, `INSTALLED_APPS` must contain the dotted path to the\nconfiguration class because it lives outside of an application and thus cannot\nbe automatically detected.\n\nApplication configuration objects store metadata for an application. Some\nattributes can be configured in `AppConfig` subclasses. Others are set by\nDjango and read-only.\n\nFull Python path to the application, e.g. `'django.contrib.admin'`.\n\nThis attribute defines which application the configuration applies to. It must\nbe set in all `AppConfig` subclasses.\n\nIt must be unique across a Django project.\n\nShort name for the application, e.g. `'admin'`\n\nThis attribute allows relabeling an application when two applications have\nconflicting labels. It defaults to the last component of `name`. It should be\na valid Python identifier.\n\nIt must be unique across a Django project.\n\nHuman-readable name for the application, e.g. \u201cAdministration\u201d.\n\nThis attribute defaults to `label.title()`.\n\nFilesystem path to the application directory, e.g. `'/usr/lib/pythonX.Y/dist-\npackages/django/contrib/admin'`.\n\nIn most cases, Django can automatically detect and set this, but you can also\nprovide an explicit override as a class attribute on your `AppConfig`\nsubclass. In a few situations this is required; for instance if the app\npackage is a namespace package with multiple paths.\n\nSet this attribute to `False` to prevent Django from selecting a configuration\nclass automatically. This is useful when `apps.py` defines only one\n`AppConfig` subclass but you don\u2019t want Django to use it by default.\n\nSet this attribute to `True` to tell Django to select a configuration class\nautomatically. This is useful when `apps.py` defines more than one `AppConfig`\nsubclass and you want Django to use one of them by default.\n\nBy default, this attribute isn\u2019t set.\n\nThe implicit primary key type to add to models within this app. You can use\nthis to keep `AutoField` as the primary key type for third party applications.\n\nBy default, this is the value of `DEFAULT_AUTO_FIELD`.\n\nRoot module for the application, e.g. `<module 'django.contrib.admin' from\n'django/contrib/admin/__init__.py'>`.\n\nModule containing the models, e.g. `<module 'django.contrib.admin.models' from\n'django/contrib/admin/models.py'>`.\n\nIt may be `None` if the application doesn\u2019t contain a `models` module. Note\nthat the database related signals such as `pre_migrate` and `post_migrate` are\nonly emitted for applications that have a `models` module.\n\nReturns an iterable of `Model` classes for this application.\n\nRequires the app registry to be fully populated.\n\nReturns the `Model` with the given `model_name`. `model_name` is case-\ninsensitive.\n\nRaises `LookupError` if no such model exists in this application.\n\nRequires the app registry to be fully populated unless the `require_ready`\nargument is set to `False`. `require_ready` behaves exactly as in\n`apps.get_model()`.\n\nSubclasses can override this method to perform initialization tasks such as\nregistering signals. It is called as soon as the registry is fully populated.\n\nAlthough you can\u2019t import models at the module-level where `AppConfig` classes\nare defined, you can import them in `ready()`, using either an `import`\nstatement or `get_model()`.\n\nIf you\u2019re registering `model signals`, you can refer to the sender by its\nstring label instead of using the model class itself.\n\nExample:\n\nWarning\n\nAlthough you can access model classes as described above, avoid interacting\nwith the database in your `ready()` implementation. This includes model\nmethods that execute queries (`save()`, `delete()`, manager methods etc.), and\nalso raw SQL queries via `django.db.connection`. Your `ready()` method will\nrun during startup of every management command. For example, even though the\ntest database configuration is separate from the production settings,\n`manage.py test` would still execute some queries against your production\ndatabase!\n\nNote\n\nIn the usual initialization process, the `ready` method is only called once by\nDjango. But in some corner cases, particularly in tests which are fiddling\nwith installed applications, `ready` might be called more than once. In that\ncase, either write idempotent methods, or put a flag on your `AppConfig`\nclasses to prevent re-running code which should be executed exactly one time.\n\nPython packages without an `__init__.py` file are known as \u201cnamespace\npackages\u201d and may be spread across multiple directories at different locations\non `sys.path` (see PEP 420).\n\nDjango applications require a single base filesystem path where Django\n(depending on configuration) will search for templates, static assets, etc.\nThus, namespace packages may only be Django applications if one of the\nfollowing is true:\n\nIf neither of these conditions is met, Django will raise\n`ImproperlyConfigured`.\n\nThe application registry provides the following public API. Methods that\naren\u2019t listed below are considered private and may change without notice.\n\nBoolean attribute that is set to `True` after the registry is fully populated\nand all `AppConfig.ready()` methods are called.\n\nReturns an iterable of `AppConfig` instances.\n\nReturns an `AppConfig` for the application with the given `app_label`. Raises\n`LookupError` if no such application exists.\n\nChecks whether an application with the given name exists in the registry.\n`app_name` is the full name of the app, e.g. `'django.contrib.admin'`.\n\nReturns the `Model` with the given `app_label` and `model_name`. As a\nshortcut, this method also accepts a single argument in the form\n`app_label.model_name`. `model_name` is case-insensitive.\n\nRaises `LookupError` if no such application or model exists. Raises\n`ValueError` when called with a single argument that doesn\u2019t contain exactly\none dot.\n\nRequires the app registry to be fully populated unless the `require_ready`\nargument is set to `False`.\n\nSetting `require_ready` to `False` allows looking up models while the app\nregistry is being populated, specifically during the second phase where it\nimports models. Then `get_model()` has the same effect as importing the model.\nThe main use case is to configure model classes with settings, such as\n`AUTH_USER_MODEL`.\n\nWhen `require_ready` is `False`, `get_model()` returns a model class that may\nnot be fully functional (reverse accessors may be missing, for example) until\nthe app registry is fully populated. For this reason, it\u2019s best to leave\n`require_ready` to the default value of `True` whenever possible.\n\nWhen Django starts, `django.setup()` is responsible for populating the\napplication registry.\n\nConfigures Django by:\n\nThis function is called automatically:\n\nIt must be called explicitly in other cases, for instance in plain Python\nscripts.\n\nThe application registry is initialized in three stages. At each stage, Django\nprocesses all applications in the order of `INSTALLED_APPS`.\n\nFirst Django imports each item in `INSTALLED_APPS`.\n\nIf it\u2019s an application configuration class, Django imports the root package of\nthe application, defined by its `name` attribute. If it\u2019s a Python package,\nDjango looks for an application configuration in an `apps.py` submodule, or\nelse creates a default application configuration.\n\nAt this stage, your code shouldn\u2019t import any models!\n\nIn other words, your applications\u2019 root packages and the modules that define\nyour application configuration classes shouldn\u2019t import any models, even\nindirectly.\n\nStrictly speaking, Django allows importing models once their application\nconfiguration is loaded. However, in order to avoid needless constraints on\nthe order of `INSTALLED_APPS`, it\u2019s strongly recommended not import any models\nat this stage.\n\nOnce this stage completes, APIs that operate on application configurations\nsuch as `get_app_config()` become usable.\n\nThen Django attempts to import the `models` submodule of each application, if\nthere is one.\n\nYou must define or import all models in your application\u2019s `models.py` or\n`models/__init__.py`. Otherwise, the application registry may not be fully\npopulated at this point, which could cause the ORM to malfunction.\n\nOnce this stage completes, APIs that operate on models such as `get_model()`\nbecome usable.\n\nHere are some common problems that you may encounter during initialization:\n\n`AppRegistryNotReady`: This happens when importing an application\nconfiguration or a models module triggers code that depends on the app\nregistry.\n\nFor example, `gettext()` uses the app registry to look up translation catalogs\nin applications. To translate at import time, you need `gettext_lazy()`\ninstead. (Using `gettext()` would be a bug, because the translation would\nhappen at import time, rather than at each request depending on the active\nlanguage.)\n\nExecuting database queries with the ORM at import time in models modules will\nalso trigger this exception. The ORM cannot function properly until all models\nare available.\n\nThis exception also happens if you forget to call `django.setup()` in a\nstandalone Python script.\n\n`ImportError: cannot import name ...` This happens if the import sequence ends\nup in a loop.\n\nTo eliminate such problems, you should minimize dependencies between your\nmodels modules and do as little work as possible at import time. To avoid\nexecuting code at import time, you can move it into a function and cache its\nresults. The code will be executed when you first need its results. This\nconcept is known as \u201clazy evaluation\u201d.\n\n"}, {"name": "apps.AppConfig", "path": "ref/applications#django.apps.AppConfig", "type": "django.apps", "text": "\nApplication configuration objects store metadata for an application. Some\nattributes can be configured in `AppConfig` subclasses. Others are set by\nDjango and read-only.\n\n"}, {"name": "apps.AppConfig.default", "path": "ref/applications#django.apps.AppConfig.default", "type": "django.apps", "text": "\nSet this attribute to `False` to prevent Django from selecting a configuration\nclass automatically. This is useful when `apps.py` defines only one\n`AppConfig` subclass but you don\u2019t want Django to use it by default.\n\nSet this attribute to `True` to tell Django to select a configuration class\nautomatically. This is useful when `apps.py` defines more than one `AppConfig`\nsubclass and you want Django to use one of them by default.\n\nBy default, this attribute isn\u2019t set.\n\n"}, {"name": "apps.AppConfig.default_auto_field", "path": "ref/applications#django.apps.AppConfig.default_auto_field", "type": "django.apps", "text": "\nThe implicit primary key type to add to models within this app. You can use\nthis to keep `AutoField` as the primary key type for third party applications.\n\nBy default, this is the value of `DEFAULT_AUTO_FIELD`.\n\n"}, {"name": "apps.AppConfig.get_model()", "path": "ref/applications#django.apps.AppConfig.get_model", "type": "django.apps", "text": "\nReturns the `Model` with the given `model_name`. `model_name` is case-\ninsensitive.\n\nRaises `LookupError` if no such model exists in this application.\n\nRequires the app registry to be fully populated unless the `require_ready`\nargument is set to `False`. `require_ready` behaves exactly as in\n`apps.get_model()`.\n\n"}, {"name": "apps.AppConfig.get_models()", "path": "ref/applications#django.apps.AppConfig.get_models", "type": "django.apps", "text": "\nReturns an iterable of `Model` classes for this application.\n\nRequires the app registry to be fully populated.\n\n"}, {"name": "apps.AppConfig.label", "path": "ref/applications#django.apps.AppConfig.label", "type": "django.apps", "text": "\nShort name for the application, e.g. `'admin'`\n\nThis attribute allows relabeling an application when two applications have\nconflicting labels. It defaults to the last component of `name`. It should be\na valid Python identifier.\n\nIt must be unique across a Django project.\n\n"}, {"name": "apps.AppConfig.models_module", "path": "ref/applications#django.apps.AppConfig.models_module", "type": "django.apps", "text": "\nModule containing the models, e.g. `<module 'django.contrib.admin.models' from\n'django/contrib/admin/models.py'>`.\n\nIt may be `None` if the application doesn\u2019t contain a `models` module. Note\nthat the database related signals such as `pre_migrate` and `post_migrate` are\nonly emitted for applications that have a `models` module.\n\n"}, {"name": "apps.AppConfig.module", "path": "ref/applications#django.apps.AppConfig.module", "type": "django.apps", "text": "\nRoot module for the application, e.g. `<module 'django.contrib.admin' from\n'django/contrib/admin/__init__.py'>`.\n\n"}, {"name": "apps.AppConfig.name", "path": "ref/applications#django.apps.AppConfig.name", "type": "django.apps", "text": "\nFull Python path to the application, e.g. `'django.contrib.admin'`.\n\nThis attribute defines which application the configuration applies to. It must\nbe set in all `AppConfig` subclasses.\n\nIt must be unique across a Django project.\n\n"}, {"name": "apps.AppConfig.path", "path": "ref/applications#django.apps.AppConfig.path", "type": "django.apps", "text": "\nFilesystem path to the application directory, e.g. `'/usr/lib/pythonX.Y/dist-\npackages/django/contrib/admin'`.\n\nIn most cases, Django can automatically detect and set this, but you can also\nprovide an explicit override as a class attribute on your `AppConfig`\nsubclass. In a few situations this is required; for instance if the app\npackage is a namespace package with multiple paths.\n\n"}, {"name": "apps.AppConfig.ready()", "path": "ref/applications#django.apps.AppConfig.ready", "type": "django.apps", "text": "\nSubclasses can override this method to perform initialization tasks such as\nregistering signals. It is called as soon as the registry is fully populated.\n\nAlthough you can\u2019t import models at the module-level where `AppConfig` classes\nare defined, you can import them in `ready()`, using either an `import`\nstatement or `get_model()`.\n\nIf you\u2019re registering `model signals`, you can refer to the sender by its\nstring label instead of using the model class itself.\n\nExample:\n\nWarning\n\nAlthough you can access model classes as described above, avoid interacting\nwith the database in your `ready()` implementation. This includes model\nmethods that execute queries (`save()`, `delete()`, manager methods etc.), and\nalso raw SQL queries via `django.db.connection`. Your `ready()` method will\nrun during startup of every management command. For example, even though the\ntest database configuration is separate from the production settings,\n`manage.py test` would still execute some queries against your production\ndatabase!\n\nNote\n\nIn the usual initialization process, the `ready` method is only called once by\nDjango. But in some corner cases, particularly in tests which are fiddling\nwith installed applications, `ready` might be called more than once. In that\ncase, either write idempotent methods, or put a flag on your `AppConfig`\nclasses to prevent re-running code which should be executed exactly one time.\n\n"}, {"name": "apps.AppConfig.verbose_name", "path": "ref/applications#django.apps.AppConfig.verbose_name", "type": "django.apps", "text": "\nHuman-readable name for the application, e.g. \u201cAdministration\u201d.\n\nThis attribute defaults to `label.title()`.\n\n"}, {"name": "apps.apps", "path": "ref/applications#django.apps.apps", "type": "django.apps", "text": "\nThe application registry provides the following public API. Methods that\naren\u2019t listed below are considered private and may change without notice.\n\n"}, {"name": "apps.apps.get_app_config()", "path": "ref/applications#django.apps.apps.get_app_config", "type": "django.apps", "text": "\nReturns an `AppConfig` for the application with the given `app_label`. Raises\n`LookupError` if no such application exists.\n\n"}, {"name": "apps.apps.get_app_configs()", "path": "ref/applications#django.apps.apps.get_app_configs", "type": "django.apps", "text": "\nReturns an iterable of `AppConfig` instances.\n\n"}, {"name": "apps.apps.get_model()", "path": "ref/applications#django.apps.apps.get_model", "type": "django.apps", "text": "\nReturns the `Model` with the given `app_label` and `model_name`. As a\nshortcut, this method also accepts a single argument in the form\n`app_label.model_name`. `model_name` is case-insensitive.\n\nRaises `LookupError` if no such application or model exists. Raises\n`ValueError` when called with a single argument that doesn\u2019t contain exactly\none dot.\n\nRequires the app registry to be fully populated unless the `require_ready`\nargument is set to `False`.\n\nSetting `require_ready` to `False` allows looking up models while the app\nregistry is being populated, specifically during the second phase where it\nimports models. Then `get_model()` has the same effect as importing the model.\nThe main use case is to configure model classes with settings, such as\n`AUTH_USER_MODEL`.\n\nWhen `require_ready` is `False`, `get_model()` returns a model class that may\nnot be fully functional (reverse accessors may be missing, for example) until\nthe app registry is fully populated. For this reason, it\u2019s best to leave\n`require_ready` to the default value of `True` whenever possible.\n\n"}, {"name": "apps.apps.is_installed()", "path": "ref/applications#django.apps.apps.is_installed", "type": "django.apps", "text": "\nChecks whether an application with the given name exists in the registry.\n`app_name` is the full name of the app, e.g. `'django.contrib.admin'`.\n\n"}, {"name": "apps.apps.ready", "path": "ref/applications#django.apps.apps.ready", "type": "django.apps", "text": "\nBoolean attribute that is set to `True` after the registry is fully populated\nand all `AppConfig.ready()` methods are called.\n\n"}, {"name": "Asynchronous support", "path": "topics/async", "type": "Guides", "text": "\nDjango has support for writing asynchronous (\u201casync\u201d) views, along with an\nentirely async-enabled request stack if you are running under ASGI. Async\nviews will still work under WSGI, but with performance penalties, and without\nthe ability to have efficient long-running requests.\n\nWe\u2019re still working on async support for the ORM and other parts of Django.\nYou can expect to see this in future releases. For now, you can use the\n`sync_to_async()` adapter to interact with the sync parts of Django. There is\nalso a whole range of async-native Python libraries that you can integrate\nwith.\n\nAny view can be declared async by making the callable part of it return a\ncoroutine - commonly, this is done using `async def`. For a function-based\nview, this means declaring the whole view using `async def`. For a class-based\nview, this means making its `__call__()` method an `async def` (not its\n`__init__()` or `as_view()`).\n\nNote\n\nDjango uses `asyncio.iscoroutinefunction` to test if your view is asynchronous\nor not. If you implement your own method of returning a coroutine, ensure you\nset the `_is_coroutine` attribute of the view to\n`asyncio.coroutines._is_coroutine` so this function returns `True`.\n\nUnder a WSGI server, async views will run in their own, one-off event loop.\nThis means you can use async features, like concurrent async HTTP requests,\nwithout any issues, but you will not get the benefits of an async stack.\n\nThe main benefits are the ability to service hundreds of connections without\nusing Python threads. This allows you to use slow streaming, long-polling, and\nother exciting response types.\n\nIf you want to use these, you will need to deploy Django using ASGI instead.\n\nWarning\n\nYou will only get the benefits of a fully-asynchronous request stack if you\nhave no synchronous middleware loaded into your site. If there is a piece of\nsynchronous middleware, then Django must use a thread per request to safely\nemulate a synchronous environment for it.\n\nMiddleware can be built to support both sync and async contexts. Some of\nDjango\u2019s middleware is built like this, but not all. To see what middleware\nDjango has to adapt, you can turn on debug logging for the `django.request`\nlogger and look for log messages about \u201cSynchronous middleware \u2026 adapted\u201d.\n\nIn both ASGI and WSGI mode, you can still safely use asynchronous support to\nrun code concurrently rather than serially. This is especially handy when\ndealing with external APIs or data stores.\n\nIf you want to call a part of Django that is still synchronous, like the ORM,\nyou will need to wrap it in a `sync_to_async()` call. For example:\n\nYou may find it easier to move any ORM code into its own function and call\nthat entire function using `sync_to_async()`. For example:\n\nIf you accidentally try to call a part of Django that is still synchronous-\nonly from an async view, you will trigger Django\u2019s asynchronous safety\nprotection to protect your data from corruption.\n\nWhen running in a mode that does not match the view (e.g. an async view under\nWSGI, or a traditional sync view under ASGI), Django must emulate the other\ncall style to allow your code to run. This context-switch causes a small\nperformance penalty of around a millisecond.\n\nThis is also true of middleware. Django will attempt to minimize the number of\ncontext-switches between sync and async. If you have an ASGI server, but all\nyour middleware and views are synchronous, it will switch just once, before it\nenters the middleware stack.\n\nHowever, if you put synchronous middleware between an ASGI server and an\nasynchronous view, it will have to switch into sync mode for the middleware\nand then back to async mode for the view. Django will also hold the sync\nthread open for middleware exception propagation. This may not be noticeable\nat first, but adding this penalty of one thread per request can remove any\nasync performance advantage.\n\nYou should do your own performance testing to see what effect ASGI versus WSGI\nhas on your code. In some cases, there may be a performance increase even for\na purely synchronous codebase under ASGI because the request-handling code is\nstill all running asynchronously. In general you will only want to enable ASGI\nmode if you have asynchronous code in your project.\n\nCertain key parts of Django are not able to operate safely in an async\nenvironment, as they have global state that is not coroutine-aware. These\nparts of Django are classified as \u201casync-unsafe\u201d, and are protected from\nexecution in an async environment. The ORM is the main example, but there are\nother parts that are also protected in this way.\n\nIf you try to run any of these parts from a thread where there is a running\nevent loop, you will get a `SynchronousOnlyOperation` error. Note that you\ndon\u2019t have to be inside an async function directly to have this error occur.\nIf you have called a sync function directly from an async function, without\nusing `sync_to_async()` or similar, then it can also occur. This is because\nyour code is still running in a thread with an active event loop, even though\nit may not be declared as async code.\n\nIf you encounter this error, you should fix your code to not call the\noffending code from an async context. Instead, write your code that talks to\nasync-unsafe functions in its own, sync function, and call that using\n`asgiref.sync.sync_to_async()` (or any other way of running sync code in its\nown thread).\n\nThe async context can be imposed upon you by the environment in which you are\nrunning your Django code. For example, Jupyter notebooks and IPython\ninteractive shells both transparently provide an active event loop so that it\nis easier to interact with asynchronous APIs.\n\nIf you\u2019re using an IPython shell, you can disable this event loop by running:\n\nas a command at the IPython prompt. This will allow you to run synchronous\ncode without generating `SynchronousOnlyOperation` errors; however, you also\nwon\u2019t be able to `await` asynchronous APIs. To turn the event loop back on,\nrun:\n\nIf you\u2019re in an environment other than IPython (or you can\u2019t turn off\n`autoawait` in IPython for some reason), you are certain there is no chance of\nyour code being run concurrently, and you absolutely need to run your sync\ncode from an async context, then you can disable the warning by setting the\n`DJANGO_ALLOW_ASYNC_UNSAFE` environment variable to any value.\n\nWarning\n\nIf you enable this option and there is concurrent access to the async-unsafe\nparts of Django, you may suffer data loss or corruption. Be very careful and\ndo not use this in production environments.\n\nIf you need to do this from within Python, do that with `os.environ`:\n\nIt is necessary to adapt the calling style when calling sync code from an\nasync context, or vice-versa. For this there are two adapter functions, from\nthe `asgiref.sync` module: `async_to_sync()` and `sync_to_async()`. They are\nused to transition between the calling styles while preserving compatibility.\n\nThese adapter functions are widely used in Django. The asgiref package itself\nis part of the Django project, and it is automatically installed as a\ndependency when you install Django with `pip`.\n\nTakes an async function and returns a sync function that wraps it. Can be used\nas either a direct wrapper or a decorator:\n\nThe async function is run in the event loop for the current thread, if one is\npresent. If there is no current event loop, a new event loop is spun up\nspecifically for the single async invocation and shut down again once it\ncompletes. In either situation, the async function will execute on a different\nthread to the calling code.\n\nThreadlocals and contextvars values are preserved across the boundary in both\ndirections.\n\n`async_to_sync()` is essentially a more powerful version of the\n`asyncio.run()` function in Python\u2019s standard library. As well as ensuring\nthreadlocals work, it also enables the `thread_sensitive` mode of\n`sync_to_async()` when that wrapper is used below it.\n\nTakes a sync function and returns an async function that wraps it. Can be used\nas either a direct wrapper or a decorator:\n\nThreadlocals and contextvars values are preserved across the boundary in both\ndirections.\n\nSync functions tend to be written assuming they all run in the main thread, so\n`sync_to_async()` has two threading modes:\n\nWarning\n\n`asgiref` version 3.3.0 changed the default value of the `thread_sensitive`\nparameter to `True`. This is a safer default, and in many cases interacting\nwith Django the correct value, but be sure to evaluate uses of\n`sync_to_async()` if updating `asgiref` from a prior version.\n\nThread-sensitive mode is quite special, and does a lot of work to run all\nfunctions in the same thread. Note, though, that it relies on usage of\n`async_to_sync()` above it in the stack to correctly run things on the main\nthread. If you use `asyncio.run()` or similar, it will fall back to running\nthread-sensitive functions in a single, shared thread, but this will not be\nthe main thread.\n\nThe reason this is needed in Django is that many libraries, specifically\ndatabase adapters, require that they are accessed in the same thread that they\nwere created in. Also a lot of existing Django code assumes it all runs in the\nsame thread, e.g. middleware adding things to a request for later use in\nviews.\n\nRather than introduce potential compatibility issues with this code, we\ninstead opted to add this mode so that all existing Django sync code runs in\nthe same thread and thus is fully compatible with async mode. Note that sync\ncode will always be in a different thread to any async code that is calling\nit, so you should avoid passing raw database handles or other thread-sensitive\nreferences around.\n\n"}, {"name": "auth.authenticate()", "path": "topics/auth/default#django.contrib.auth.authenticate", "type": "django.contrib.auth", "text": "\nUse `authenticate()` to verify a set of credentials. It takes credentials as\nkeyword arguments, `username` and `password` for the default case, checks them\nagainst each authentication backend, and returns a `User` object if the\ncredentials are valid for a backend. If the credentials aren\u2019t valid for any\nbackend or if a backend raises `PermissionDenied`, it returns `None`. For\nexample:\n\n`request` is an optional `HttpRequest` which is passed on the `authenticate()`\nmethod of the authentication backends.\n\nNote\n\nThis is a low level way to authenticate a set of credentials; for example,\nit\u2019s used by the `RemoteUserMiddleware`. Unless you are writing your own\nauthentication system, you probably won\u2019t use this. Rather if you\u2019re looking\nfor a way to login a user, use the `LoginView`.\n\n"}, {"name": "auth.backends.AllowAllUsersModelBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.AllowAllUsersModelBackend", "type": "django.contrib.auth", "text": "\nSame as `ModelBackend` except that it doesn\u2019t reject inactive users because\n`user_can_authenticate()` always returns `True`.\n\nWhen using this backend, you\u2019ll likely want to customize the\n`AuthenticationForm` used by the `LoginView` by overriding the\n`confirm_login_allowed()` method as it rejects inactive users.\n\n"}, {"name": "auth.backends.AllowAllUsersRemoteUserBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.AllowAllUsersRemoteUserBackend", "type": "django.contrib.auth", "text": "\nSame as `RemoteUserBackend` except that it doesn\u2019t reject inactive users\nbecause `user_can_authenticate` always returns `True`.\n\n"}, {"name": "auth.backends.BaseBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend", "type": "django.contrib.auth", "text": "\nA base class that provides default implementations for all required methods.\nBy default, it will reject any user and provide no permissions.\n\nReturns an empty set.\n\nReturns an empty set.\n\nUses `get_user_permissions()` and `get_group_permissions()` to get the set of\npermission strings the `user_obj` has.\n\nUses `get_all_permissions()` to check if `user_obj` has the permission string\n`perm`.\n\n"}, {"name": "auth.backends.BaseBackend.get_all_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.get_all_permissions", "type": "django.contrib.auth", "text": "\nUses `get_user_permissions()` and `get_group_permissions()` to get the set of\npermission strings the `user_obj` has.\n\n"}, {"name": "auth.backends.BaseBackend.get_group_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.get_group_permissions", "type": "django.contrib.auth", "text": "\nReturns an empty set.\n\n"}, {"name": "auth.backends.BaseBackend.get_user_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.get_user_permissions", "type": "django.contrib.auth", "text": "\nReturns an empty set.\n\n"}, {"name": "auth.backends.BaseBackend.has_perm()", "path": "ref/contrib/auth#django.contrib.auth.backends.BaseBackend.has_perm", "type": "django.contrib.auth", "text": "\nUses `get_all_permissions()` to check if `user_obj` has the permission string\n`perm`.\n\n"}, {"name": "auth.backends.ModelBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend", "type": "django.contrib.auth", "text": "\nThis is the default authentication backend used by Django. It authenticates\nusing credentials consisting of a user identifier and password. For Django\u2019s\ndefault user model, the user identifier is the username, for custom user\nmodels it is the field specified by USERNAME_FIELD (see Customizing Users and\nauthentication).\n\nIt also handles the default permissions model as defined for `User` and\n`PermissionsMixin`.\n\n`has_perm()`, `get_all_permissions()`, `get_user_permissions()`, and\n`get_group_permissions()` allow an object to be passed as a parameter for\nobject-specific permissions, but this backend does not implement them other\nthan returning an empty set of permissions if `obj is not None`.\n\n`with_perm()` also allows an object to be passed as a parameter, but unlike\nothers methods it returns an empty queryset if `obj is not None`.\n\nTries to authenticate `username` with `password` by calling\n`User.check_password`. If no `username` is provided, it tries to fetch a\nusername from `kwargs` using the key `CustomUser.USERNAME_FIELD`. Returns an\nauthenticated user or `None`.\n\n`request` is an `HttpRequest` and may be `None` if it wasn\u2019t provided to\n`authenticate()` (which passes it on to the backend).\n\nReturns the set of permission strings the `user_obj` has from their own user\npermissions. Returns an empty set if `is_anonymous` or `is_active` is `False`.\n\nReturns the set of permission strings the `user_obj` has from the permissions\nof the groups they belong. Returns an empty set if `is_anonymous` or\n`is_active` is `False`.\n\nReturns the set of permission strings the `user_obj` has, including both user\npermissions and group permissions. Returns an empty set if `is_anonymous` or\n`is_active` is `False`.\n\nUses `get_all_permissions()` to check if `user_obj` has the permission string\n`perm`. Returns `False` if the user is not `is_active`.\n\nReturns whether the `user_obj` has any permissions on the app `app_label`.\n\nReturns whether the user is allowed to authenticate. To match the behavior of\n`AuthenticationForm` which `prohibits inactive users from logging in`, this\nmethod returns `False` for users with `is_active=False`. Custom user models\nthat don\u2019t have an `is_active` field are allowed.\n\nReturns all active users who have the permission `perm` either in the form of\n`\"<app label>.<permission codename>\"` or a `Permission` instance. Returns an\nempty queryset if no users who have the `perm` found.\n\nIf `is_active` is `True` (default), returns only active users, or if `False`,\nreturns only inactive users. Use `None` to return all users irrespective of\nactive state.\n\nIf `include_superusers` is `True` (default), the result will include\nsuperusers.\n\n"}, {"name": "auth.backends.ModelBackend.authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.authenticate", "type": "django.contrib.auth", "text": "\nTries to authenticate `username` with `password` by calling\n`User.check_password`. If no `username` is provided, it tries to fetch a\nusername from `kwargs` using the key `CustomUser.USERNAME_FIELD`. Returns an\nauthenticated user or `None`.\n\n`request` is an `HttpRequest` and may be `None` if it wasn\u2019t provided to\n`authenticate()` (which passes it on to the backend).\n\n"}, {"name": "auth.backends.ModelBackend.get_all_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.get_all_permissions", "type": "django.contrib.auth", "text": "\nReturns the set of permission strings the `user_obj` has, including both user\npermissions and group permissions. Returns an empty set if `is_anonymous` or\n`is_active` is `False`.\n\n"}, {"name": "auth.backends.ModelBackend.get_group_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.get_group_permissions", "type": "django.contrib.auth", "text": "\nReturns the set of permission strings the `user_obj` has from the permissions\nof the groups they belong. Returns an empty set if `is_anonymous` or\n`is_active` is `False`.\n\n"}, {"name": "auth.backends.ModelBackend.get_user_permissions()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.get_user_permissions", "type": "django.contrib.auth", "text": "\nReturns the set of permission strings the `user_obj` has from their own user\npermissions. Returns an empty set if `is_anonymous` or `is_active` is `False`.\n\n"}, {"name": "auth.backends.ModelBackend.has_module_perms()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.has_module_perms", "type": "django.contrib.auth", "text": "\nReturns whether the `user_obj` has any permissions on the app `app_label`.\n\n"}, {"name": "auth.backends.ModelBackend.has_perm()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.has_perm", "type": "django.contrib.auth", "text": "\nUses `get_all_permissions()` to check if `user_obj` has the permission string\n`perm`. Returns `False` if the user is not `is_active`.\n\n"}, {"name": "auth.backends.ModelBackend.user_can_authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.user_can_authenticate", "type": "django.contrib.auth", "text": "\nReturns whether the user is allowed to authenticate. To match the behavior of\n`AuthenticationForm` which `prohibits inactive users from logging in`, this\nmethod returns `False` for users with `is_active=False`. Custom user models\nthat don\u2019t have an `is_active` field are allowed.\n\n"}, {"name": "auth.backends.ModelBackend.with_perm()", "path": "ref/contrib/auth#django.contrib.auth.backends.ModelBackend.with_perm", "type": "django.contrib.auth", "text": "\nReturns all active users who have the permission `perm` either in the form of\n`\"<app label>.<permission codename>\"` or a `Permission` instance. Returns an\nempty queryset if no users who have the `perm` found.\n\nIf `is_active` is `True` (default), returns only active users, or if `False`,\nreturns only inactive users. Use `None` to return all users irrespective of\nactive state.\n\nIf `include_superusers` is `True` (default), the result will include\nsuperusers.\n\n"}, {"name": "auth.backends.RemoteUserBackend", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend", "type": "django.contrib.auth", "text": "\nUse this backend to take advantage of external-to-Django-handled\nauthentication. It authenticates using usernames passed in\n`request.META['REMOTE_USER']`. See the Authenticating against REMOTE_USER\ndocumentation.\n\nIf you need more control, you can create your own authentication backend that\ninherits from this class and override these attributes or methods:\n\n`True` or `False`. Determines whether or not a user object is created if not\nalready in the database Defaults to `True`.\n\nThe username passed as `remote_user` is considered trusted. This method\nreturns the user object with the given username, creating a new user object if\n`create_unknown_user` is `True`.\n\nReturns `None` if `create_unknown_user` is `False` and a `User` object with\nthe given username is not found in the database.\n\n`request` is an `HttpRequest` and may be `None` if it wasn\u2019t provided to\n`authenticate()` (which passes it on to the backend).\n\nPerforms any cleaning on the `username` (e.g. stripping LDAP DN information)\nprior to using it to get or create a user object. Returns the cleaned\nusername.\n\nConfigures a newly created user. This method is called immediately after a new\nuser is created, and can be used to perform custom setup actions, such as\nsetting the user\u2019s groups based on attributes in an LDAP directory. Returns\nthe user object.\n\n`request` is an `HttpRequest` and may be `None` if it wasn\u2019t provided to\n`authenticate()` (which passes it on to the backend).\n\nReturns whether the user is allowed to authenticate. This method returns\n`False` for users with `is_active=False`. Custom user models that don\u2019t have\nan `is_active` field are allowed.\n\n"}, {"name": "auth.backends.RemoteUserBackend.authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.authenticate", "type": "django.contrib.auth", "text": "\nThe username passed as `remote_user` is considered trusted. This method\nreturns the user object with the given username, creating a new user object if\n`create_unknown_user` is `True`.\n\nReturns `None` if `create_unknown_user` is `False` and a `User` object with\nthe given username is not found in the database.\n\n`request` is an `HttpRequest` and may be `None` if it wasn\u2019t provided to\n`authenticate()` (which passes it on to the backend).\n\n"}, {"name": "auth.backends.RemoteUserBackend.clean_username()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.clean_username", "type": "django.contrib.auth", "text": "\nPerforms any cleaning on the `username` (e.g. stripping LDAP DN information)\nprior to using it to get or create a user object. Returns the cleaned\nusername.\n\n"}, {"name": "auth.backends.RemoteUserBackend.configure_user()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.configure_user", "type": "django.contrib.auth", "text": "\nConfigures a newly created user. This method is called immediately after a new\nuser is created, and can be used to perform custom setup actions, such as\nsetting the user\u2019s groups based on attributes in an LDAP directory. Returns\nthe user object.\n\n`request` is an `HttpRequest` and may be `None` if it wasn\u2019t provided to\n`authenticate()` (which passes it on to the backend).\n\n"}, {"name": "auth.backends.RemoteUserBackend.create_unknown_user", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.create_unknown_user", "type": "django.contrib.auth", "text": "\n`True` or `False`. Determines whether or not a user object is created if not\nalready in the database Defaults to `True`.\n\n"}, {"name": "auth.backends.RemoteUserBackend.user_can_authenticate()", "path": "ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend.user_can_authenticate", "type": "django.contrib.auth", "text": "\nReturns whether the user is allowed to authenticate. This method returns\n`False` for users with `is_active=False`. Custom user models that don\u2019t have\nan `is_active` field are allowed.\n\n"}, {"name": "auth.context_processors.auth()", "path": "ref/templates/api#django.contrib.auth.context_processors.auth", "type": "django.contrib.auth", "text": "\n\n"}, {"name": "auth.decorators.login_required()", "path": "topics/auth/default#django.contrib.auth.decorators.login_required", "type": "django.contrib.auth", "text": "\nAs a shortcut, you can use the convenient `login_required()` decorator:\n\n`login_required()` does the following:\n\nBy default, the path that the user should be redirected to upon successful\nauthentication is stored in a query string parameter called `\"next\"`. If you\nwould prefer to use a different name for this parameter, `login_required()`\ntakes an optional `redirect_field_name` parameter:\n\nNote that if you provide a value to `redirect_field_name`, you will most\nlikely need to customize your login template as well, since the template\ncontext variable which stores the redirect path will use the value of\n`redirect_field_name` as its key rather than `\"next\"` (the default).\n\n`login_required()` also takes an optional `login_url` parameter. Example:\n\nNote that if you don\u2019t specify the `login_url` parameter, you\u2019ll need to\nensure that the `settings.LOGIN_URL` and your login view are properly\nassociated. For example, using the defaults, add the following lines to your\nURLconf:\n\nThe `settings.LOGIN_URL` also accepts view function names and named URL\npatterns. This allows you to freely remap your login view within your URLconf\nwithout having to update the setting.\n\n"}, {"name": "auth.decorators.permission_required()", "path": "topics/auth/default#django.contrib.auth.decorators.permission_required", "type": "django.contrib.auth", "text": "\nIt\u2019s a relatively common task to check whether a user has a particular\npermission. For that reason, Django provides a shortcut for that case: the\n`permission_required()` decorator.:\n\nJust like the `has_perm()` method, permission names take the form `\"<app\nlabel>.<permission codename>\"` (i.e. `polls.add_choice` for a permission on a\nmodel in the `polls` application).\n\nThe decorator may also take an iterable of permissions, in which case the user\nmust have all of the permissions in order to access the view.\n\nNote that `permission_required()` also takes an optional `login_url`\nparameter:\n\nAs in the `login_required()` decorator, `login_url` defaults to\n`settings.LOGIN_URL`.\n\nIf the `raise_exception` parameter is given, the decorator will raise\n`PermissionDenied`, prompting the 403 (HTTP Forbidden) view instead of\nredirecting to the login page.\n\nIf you want to use `raise_exception` but also give your users a chance to\nlogin first, you can add the `login_required()` decorator:\n\nThis also avoids a redirect loop when `LoginView`\u2019s\n`redirect_authenticated_user=True` and the logged-in user doesn\u2019t have all of\nthe required permissions.\n\n"}, {"name": "auth.decorators.user_passes_test()", "path": "topics/auth/default#django.contrib.auth.decorators.user_passes_test", "type": "django.contrib.auth", "text": "\nAs a shortcut, you can use the convenient `user_passes_test` decorator which\nperforms a redirect when the callable returns `False`:\n\n`user_passes_test()` takes a required argument: a callable that takes a `User`\nobject and returns `True` if the user is allowed to view the page. Note that\n`user_passes_test()` does not automatically check that the `User` is not\nanonymous.\n\n`user_passes_test()` takes two optional arguments:\n\nFor example:\n\n"}, {"name": "auth.forms.AdminPasswordChangeForm", "path": "topics/auth/default#django.contrib.auth.forms.AdminPasswordChangeForm", "type": "django.contrib.auth", "text": "\nA form used in the admin interface to change a user\u2019s password.\n\nTakes the `user` as the first positional argument.\n\n"}, {"name": "auth.forms.AuthenticationForm", "path": "topics/auth/default#django.contrib.auth.forms.AuthenticationForm", "type": "django.contrib.auth", "text": "\nA form for logging a user in.\n\nTakes `request` as its first positional argument, which is stored on the form\ninstance for use by sub-classes.\n\nBy default, `AuthenticationForm` rejects users whose `is_active` flag is set\nto `False`. You may override this behavior with a custom policy to determine\nwhich users can log in. Do this with a custom form that subclasses\n`AuthenticationForm` and overrides the `confirm_login_allowed()` method. This\nmethod should raise a `ValidationError` if the given user may not log in.\n\nFor example, to allow all users to log in regardless of \u201cactive\u201d status:\n\n(In this case, you\u2019ll also need to use an authentication backend that allows\ninactive users, such as `AllowAllUsersModelBackend`.)\n\nOr to allow only some active users to log in:\n\n"}, {"name": "auth.forms.AuthenticationForm.confirm_login_allowed()", "path": "topics/auth/default#django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed", "type": "django.contrib.auth", "text": "\nBy default, `AuthenticationForm` rejects users whose `is_active` flag is set\nto `False`. You may override this behavior with a custom policy to determine\nwhich users can log in. Do this with a custom form that subclasses\n`AuthenticationForm` and overrides the `confirm_login_allowed()` method. This\nmethod should raise a `ValidationError` if the given user may not log in.\n\nFor example, to allow all users to log in regardless of \u201cactive\u201d status:\n\n(In this case, you\u2019ll also need to use an authentication backend that allows\ninactive users, such as `AllowAllUsersModelBackend`.)\n\nOr to allow only some active users to log in:\n\n"}, {"name": "auth.forms.PasswordChangeForm", "path": "topics/auth/default#django.contrib.auth.forms.PasswordChangeForm", "type": "django.contrib.auth", "text": "\nA form for allowing a user to change their password.\n\n"}, {"name": "auth.forms.PasswordResetForm", "path": "topics/auth/default#django.contrib.auth.forms.PasswordResetForm", "type": "django.contrib.auth", "text": "\nA form for generating and emailing a one-time use link to reset a user\u2019s\npassword.\n\nUses the arguments to send an `EmailMultiAlternatives`. Can be overridden to\ncustomize how the email is sent to the user.\n\nBy default, `save()` populates the `context` with the same variables that\n`PasswordResetView` passes to its email context.\n\n"}, {"name": "auth.forms.PasswordResetForm.send_mail()", "path": "topics/auth/default#django.contrib.auth.forms.PasswordResetForm.send_mail", "type": "django.contrib.auth", "text": "\nUses the arguments to send an `EmailMultiAlternatives`. Can be overridden to\ncustomize how the email is sent to the user.\n\nBy default, `save()` populates the `context` with the same variables that\n`PasswordResetView` passes to its email context.\n\n"}, {"name": "auth.forms.SetPasswordForm", "path": "topics/auth/default#django.contrib.auth.forms.SetPasswordForm", "type": "django.contrib.auth", "text": "\nA form that lets a user change their password without entering the old\npassword.\n\n"}, {"name": "auth.forms.UserChangeForm", "path": "topics/auth/default#django.contrib.auth.forms.UserChangeForm", "type": "django.contrib.auth", "text": "\nA form used in the admin interface to change a user\u2019s information and\npermissions.\n\n"}, {"name": "auth.forms.UserCreationForm", "path": "topics/auth/default#django.contrib.auth.forms.UserCreationForm", "type": "django.contrib.auth", "text": "\nA `ModelForm` for creating a new user.\n\nIt has three fields: `username` (from the user model), `password1`, and\n`password2`. It verifies that `password1` and `password2` match, validates the\npassword using `validate_password()`, and sets the user\u2019s password using\n`set_password()`.\n\n"}, {"name": "auth.get_user()", "path": "ref/contrib/auth#django.contrib.auth.get_user", "type": "django.contrib.auth", "text": "\nReturns the user model instance associated with the given `request`\u2019s session.\n\nIt checks if the authentication backend stored in the session is present in\n`AUTHENTICATION_BACKENDS`. If so, it uses the backend\u2019s `get_user()` method to\nretrieve the user model instance and then verifies the session by calling the\nuser model\u2019s `get_session_auth_hash()` method.\n\nReturns an instance of `AnonymousUser` if the authentication backend stored in\nthe session is no longer in `AUTHENTICATION_BACKENDS`, if a user isn\u2019t\nreturned by the backend\u2019s `get_user()` method, or if the session auth hash\ndoesn\u2019t validate.\n\n"}, {"name": "auth.get_user_model()", "path": "topics/auth/customizing#django.contrib.auth.get_user_model", "type": "django.contrib.auth", "text": "\nInstead of referring to `User` directly, you should reference the user model\nusing `django.contrib.auth.get_user_model()`. This method will return the\ncurrently active user model \u2013 the custom user model if one is specified, or\n`User` otherwise.\n\nWhen you define a foreign key or many-to-many relations to the user model, you\nshould specify the custom model using the `AUTH_USER_MODEL` setting. For\nexample:\n\nWhen connecting to signals sent by the user model, you should specify the\ncustom model using the `AUTH_USER_MODEL` setting. For example:\n\nGenerally speaking, it\u2019s easiest to refer to the user model with the\n`AUTH_USER_MODEL` setting in code that\u2019s executed at import time, however,\nit\u2019s also possible to call `get_user_model()` while Django is importing\nmodels, so you could use `models.ForeignKey(get_user_model(), ...)`.\n\nIf your app is tested with multiple user models, using\n`@override_settings(AUTH_USER_MODEL=...)` for example, and you cache the\nresult of `get_user_model()` in a module-level variable, you may need to\nlisten to the `setting_changed` signal to clear the cache. For example:\n\n"}, {"name": "auth.hashers.check_password()", "path": "topics/auth/passwords#django.contrib.auth.hashers.check_password", "type": "django.contrib.auth", "text": "\nIf you\u2019d like to manually authenticate a user by comparing a plain-text\npassword to the hashed password in the database, use the convenience function\n`check_password()`. It takes two arguments: the plain-text password to check,\nand the full value of a user\u2019s `password` field in the database to check\nagainst, and returns `True` if they match, `False` otherwise.\n\n"}, {"name": "auth.hashers.is_password_usable()", "path": "topics/auth/passwords#django.contrib.auth.hashers.is_password_usable", "type": "django.contrib.auth", "text": "\nReturns `False` if the password is a result of `User.set_unusable_password()`.\n\n"}, {"name": "auth.hashers.make_password()", "path": "topics/auth/passwords#django.contrib.auth.hashers.make_password", "type": "django.contrib.auth", "text": "\nCreates a hashed password in the format used by this application. It takes one\nmandatory argument: the password in plain-text (string or bytes). Optionally,\nyou can provide a salt and a hashing algorithm to use, if you don\u2019t want to\nuse the defaults (first entry of `PASSWORD_HASHERS` setting). See Included\nhashers for the algorithm name of each hasher. If the password argument is\n`None`, an unusable password is returned (one that will never be accepted by\n`check_password()`).\n\n"}, {"name": "auth.is_active", "path": "topics/auth/customizing#django.contrib.auth.is_active", "type": "django.contrib.auth", "text": "\nReturns `True` if the user account is currently active.\n\n"}, {"name": "auth.is_staff", "path": "topics/auth/customizing#django.contrib.auth.is_staff", "type": "django.contrib.auth", "text": "\nReturns `True` if the user is allowed to have access to the admin site.\n\n"}, {"name": "auth.login()", "path": "topics/auth/default#django.contrib.auth.login", "type": "django.contrib.auth", "text": "\nTo log a user in, from a view, use `login()`. It takes an `HttpRequest` object\nand a `User` object. `login()` saves the user\u2019s ID in the session, using\nDjango\u2019s session framework.\n\nNote that any data set during the anonymous session is retained in the session\nafter a user logs in.\n\nThis example shows how you might use both `authenticate()` and `login()`:\n\n"}, {"name": "auth.logout()", "path": "topics/auth/default#django.contrib.auth.logout", "type": "django.contrib.auth", "text": "\nTo log out a user who has been logged in via `django.contrib.auth.login()`,\nuse `django.contrib.auth.logout()` within your view. It takes an `HttpRequest`\nobject and has no return value. Example:\n\nNote that `logout()` doesn\u2019t throw any errors if the user wasn\u2019t logged in.\n\nWhen you call `logout()`, the session data for the current request is\ncompletely cleaned out. All existing data is removed. This is to prevent\nanother person from using the same web browser to log in and have access to\nthe previous user\u2019s session data. If you want to put anything into the session\nthat will be available to the user immediately after logging out, do that\nafter calling `django.contrib.auth.logout()`.\n\n"}, {"name": "auth.middleware.AuthenticationMiddleware", "path": "ref/middleware#django.contrib.auth.middleware.AuthenticationMiddleware", "type": "django.contrib.auth", "text": "\n\n"}, {"name": "auth.middleware.PersistentRemoteUserMiddleware", "path": "ref/middleware#django.contrib.auth.middleware.PersistentRemoteUserMiddleware", "type": "django.contrib.auth", "text": "\n\n"}, {"name": "auth.middleware.RemoteUserMiddleware", "path": "ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware", "type": "django.contrib.auth", "text": "\n\n"}, {"name": "auth.mixins.AccessMixin", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin", "type": "django.contrib.auth", "text": "\nDefault return value for `get_login_url()`. Defaults to `None` in which case\n`get_login_url()` falls back to `settings.LOGIN_URL`.\n\nDefault return value for `get_permission_denied_message()`. Defaults to an\nempty string.\n\nDefault return value for `get_redirect_field_name()`. Defaults to `\"next\"`.\n\nIf this attribute is set to `True`, a `PermissionDenied` exception is raised\nwhen the conditions are not met. When `False` (the default), anonymous users\nare redirected to the login page.\n\nReturns the URL that users who don\u2019t pass the test will be redirected to.\nReturns `login_url` if set, or `settings.LOGIN_URL` otherwise.\n\nWhen `raise_exception` is `True`, this method can be used to control the error\nmessage passed to the error handler for display to the user. Returns the\n`permission_denied_message` attribute by default.\n\nReturns the name of the query parameter that will contain the URL the user\nshould be redirected to after a successful login. If you set this to `None`, a\nquery parameter won\u2019t be added. Returns the `redirect_field_name` attribute by\ndefault.\n\nDepending on the value of `raise_exception`, the method either raises a\n`PermissionDenied` exception or redirects the user to the `login_url`,\noptionally including the `redirect_field_name` if it is set.\n\n"}, {"name": "auth.mixins.AccessMixin.get_login_url()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.get_login_url", "type": "django.contrib.auth", "text": "\nReturns the URL that users who don\u2019t pass the test will be redirected to.\nReturns `login_url` if set, or `settings.LOGIN_URL` otherwise.\n\n"}, {"name": "auth.mixins.AccessMixin.get_permission_denied_message()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.get_permission_denied_message", "type": "django.contrib.auth", "text": "\nWhen `raise_exception` is `True`, this method can be used to control the error\nmessage passed to the error handler for display to the user. Returns the\n`permission_denied_message` attribute by default.\n\n"}, {"name": "auth.mixins.AccessMixin.get_redirect_field_name()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.get_redirect_field_name", "type": "django.contrib.auth", "text": "\nReturns the name of the query parameter that will contain the URL the user\nshould be redirected to after a successful login. If you set this to `None`, a\nquery parameter won\u2019t be added. Returns the `redirect_field_name` attribute by\ndefault.\n\n"}, {"name": "auth.mixins.AccessMixin.handle_no_permission()", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.handle_no_permission", "type": "django.contrib.auth", "text": "\nDepending on the value of `raise_exception`, the method either raises a\n`PermissionDenied` exception or redirects the user to the `login_url`,\noptionally including the `redirect_field_name` if it is set.\n\n"}, {"name": "auth.mixins.AccessMixin.login_url", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.login_url", "type": "django.contrib.auth", "text": "\nDefault return value for `get_login_url()`. Defaults to `None` in which case\n`get_login_url()` falls back to `settings.LOGIN_URL`.\n\n"}, {"name": "auth.mixins.AccessMixin.permission_denied_message", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.permission_denied_message", "type": "django.contrib.auth", "text": "\nDefault return value for `get_permission_denied_message()`. Defaults to an\nempty string.\n\n"}, {"name": "auth.mixins.AccessMixin.raise_exception", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.raise_exception", "type": "django.contrib.auth", "text": "\nIf this attribute is set to `True`, a `PermissionDenied` exception is raised\nwhen the conditions are not met. When `False` (the default), anonymous users\nare redirected to the login page.\n\n"}, {"name": "auth.mixins.AccessMixin.redirect_field_name", "path": "topics/auth/default#django.contrib.auth.mixins.AccessMixin.redirect_field_name", "type": "django.contrib.auth", "text": "\nDefault return value for `get_redirect_field_name()`. Defaults to `\"next\"`.\n\n"}, {"name": "auth.mixins.LoginRequiredMixin", "path": "topics/auth/default#django.contrib.auth.mixins.LoginRequiredMixin", "type": "django.contrib.auth", "text": "\nIf a view is using this mixin, all requests by non-authenticated users will be\nredirected to the login page or shown an HTTP 403 Forbidden error, depending\non the `raise_exception` parameter.\n\nYou can set any of the parameters of `AccessMixin` to customize the handling\nof unauthorized users:\n\n"}, {"name": "auth.mixins.PermissionRequiredMixin", "path": "topics/auth/default#django.contrib.auth.mixins.PermissionRequiredMixin", "type": "django.contrib.auth", "text": "\nThis mixin, just like the `permission_required` decorator, checks whether the\nuser accessing a view has all given permissions. You should specify the\npermission (or an iterable of permissions) using the `permission_required`\nparameter:\n\nYou can set any of the parameters of `AccessMixin` to customize the handling\nof unauthorized users.\n\nYou may also override these methods:\n\nReturns an iterable of permission names used by the mixin. Defaults to the\n`permission_required` attribute, converted to a tuple if necessary.\n\nReturns a boolean denoting whether the current user has permission to execute\nthe decorated view. By default, this returns the result of calling\n`has_perms()` with the list of permissions returned by\n`get_permission_required()`.\n\n"}, {"name": "auth.mixins.PermissionRequiredMixin.get_permission_required()", "path": "topics/auth/default#django.contrib.auth.mixins.PermissionRequiredMixin.get_permission_required", "type": "django.contrib.auth", "text": "\nReturns an iterable of permission names used by the mixin. Defaults to the\n`permission_required` attribute, converted to a tuple if necessary.\n\n"}, {"name": "auth.mixins.PermissionRequiredMixin.has_permission()", "path": "topics/auth/default#django.contrib.auth.mixins.PermissionRequiredMixin.has_permission", "type": "django.contrib.auth", "text": "\nReturns a boolean denoting whether the current user has permission to execute\nthe decorated view. By default, this returns the result of calling\n`has_perms()` with the list of permissions returned by\n`get_permission_required()`.\n\n"}, {"name": "auth.mixins.UserPassesTestMixin", "path": "topics/auth/default#django.contrib.auth.mixins.UserPassesTestMixin", "type": "django.contrib.auth", "text": "\nWhen using class-based views, you can use the `UserPassesTestMixin` to do\nthis.\n\nYou have to override the `test_func()` method of the class to provide the test\nthat is performed. Furthermore, you can set any of the parameters of\n`AccessMixin` to customize the handling of unauthorized users:\n\nYou can also override the `get_test_func()` method to have the mixin use a\ndifferently named function for its checks (instead of `test_func()`).\n\nStacking `UserPassesTestMixin`\n\nDue to the way `UserPassesTestMixin` is implemented, you cannot stack them in\nyour inheritance list. The following does NOT work:\n\nIf `TestMixin1` would call `super()` and take that result into account,\n`TestMixin1` wouldn\u2019t work standalone anymore.\n\n"}, {"name": "auth.mixins.UserPassesTestMixin.get_test_func()", "path": "topics/auth/default#django.contrib.auth.mixins.UserPassesTestMixin.get_test_func", "type": "django.contrib.auth", "text": "\nYou can also override the `get_test_func()` method to have the mixin use a\ndifferently named function for its checks (instead of `test_func()`).\n\n"}, {"name": "auth.mixins.UserPassesTestMixin.test_func()", "path": "topics/auth/default#django.contrib.auth.mixins.UserPassesTestMixin.test_func", "type": "django.contrib.auth", "text": "\nYou have to override the `test_func()` method of the class to provide the test\nthat is performed. Furthermore, you can set any of the parameters of\n`AccessMixin` to customize the handling of unauthorized users:\n\n"}, {"name": "auth.models.AbstractBaseUser", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser", "type": "django.contrib.auth", "text": "\nReturns the value of the field nominated by `USERNAME_FIELD`.\n\nNormalizes the username by calling `normalize_username()`. If you override\nthis method, be sure to call `super()` to retain the normalization.\n\nReturns the name of the email field specified by the `EMAIL_FIELD` attribute.\nDefaults to `'email'` if `EMAIL_FIELD` isn\u2019t specified.\n\nApplies NFKC Unicode normalization to usernames so that visually identical\ncharacters with different Unicode code points are considered identical.\n\nRead-only attribute which is always `True` (as opposed to\n`AnonymousUser.is_authenticated` which is always `False`). This is a way to\ntell if the user has been authenticated. This does not imply any permissions\nand doesn\u2019t check if the user is active or has a valid session. Even though\nnormally you will check this attribute on `request.user` to find out whether\nit has been populated by the `AuthenticationMiddleware` (representing the\ncurrently logged-in user), you should know this attribute is `True` for any\n`User` instance.\n\nRead-only attribute which is always `False`. This is a way of differentiating\n`User` and `AnonymousUser` objects. Generally, you should prefer using\n`is_authenticated` to this attribute.\n\nSets the user\u2019s password to the given raw string, taking care of the password\nhashing. Doesn\u2019t save the `AbstractBaseUser` object.\n\nWhen the raw_password is `None`, the password will be set to an unusable\npassword, as if `set_unusable_password()` were used.\n\nReturns `True` if the given raw string is the correct password for the user.\n(This takes care of the password hashing in making the comparison.)\n\nMarks the user as having no password set. This isn\u2019t the same as having a\nblank string for a password. `check_password()` for this user will never\nreturn `True`. Doesn\u2019t save the `AbstractBaseUser` object.\n\nYou may need this if authentication for your application takes place against\nan existing external source such as an LDAP directory.\n\nReturns `False` if `set_unusable_password()` has been called for this user.\n\nReturns an HMAC of the password field. Used for Session invalidation on\npassword change.\n\n"}, {"name": "auth.models.AbstractBaseUser.check_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.check_password", "type": "django.contrib.auth", "text": "\nReturns `True` if the given raw string is the correct password for the user.\n(This takes care of the password hashing in making the comparison.)\n\n"}, {"name": "auth.models.AbstractBaseUser.clean()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.clean", "type": "django.contrib.auth", "text": "\nNormalizes the username by calling `normalize_username()`. If you override\nthis method, be sure to call `super()` to retain the normalization.\n\n"}, {"name": "auth.models.AbstractBaseUser.get_session_auth_hash()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash", "type": "django.contrib.auth", "text": "\nReturns an HMAC of the password field. Used for Session invalidation on\npassword change.\n\n"}, {"name": "auth.models.AbstractBaseUser.get_username()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_username", "type": "django.contrib.auth", "text": "\nReturns the value of the field nominated by `USERNAME_FIELD`.\n\n"}, {"name": "auth.models.AbstractBaseUser.has_usable_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.has_usable_password", "type": "django.contrib.auth", "text": "\nReturns `False` if `set_unusable_password()` has been called for this user.\n\n"}, {"name": "auth.models.AbstractBaseUser.is_anonymous", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.is_anonymous", "type": "django.contrib.auth", "text": "\nRead-only attribute which is always `False`. This is a way of differentiating\n`User` and `AnonymousUser` objects. Generally, you should prefer using\n`is_authenticated` to this attribute.\n\n"}, {"name": "auth.models.AbstractBaseUser.is_authenticated", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.is_authenticated", "type": "django.contrib.auth", "text": "\nRead-only attribute which is always `True` (as opposed to\n`AnonymousUser.is_authenticated` which is always `False`). This is a way to\ntell if the user has been authenticated. This does not imply any permissions\nand doesn\u2019t check if the user is active or has a valid session. Even though\nnormally you will check this attribute on `request.user` to find out whether\nit has been populated by the `AuthenticationMiddleware` (representing the\ncurrently logged-in user), you should know this attribute is `True` for any\n`User` instance.\n\n"}, {"name": "auth.models.AbstractBaseUser.set_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.set_password", "type": "django.contrib.auth", "text": "\nSets the user\u2019s password to the given raw string, taking care of the password\nhashing. Doesn\u2019t save the `AbstractBaseUser` object.\n\nWhen the raw_password is `None`, the password will be set to an unusable\npassword, as if `set_unusable_password()` were used.\n\n"}, {"name": "auth.models.AbstractBaseUser.set_unusable_password()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.set_unusable_password", "type": "django.contrib.auth", "text": "\nMarks the user as having no password set. This isn\u2019t the same as having a\nblank string for a password. `check_password()` for this user will never\nreturn `True`. Doesn\u2019t save the `AbstractBaseUser` object.\n\nYou may need this if authentication for your application takes place against\nan existing external source such as an LDAP directory.\n\n"}, {"name": "auth.models.AbstractUser", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractUser", "type": "django.contrib.auth", "text": "\nNormalizes the email by calling `BaseUserManager.normalize_email()`. If you\noverride this method, be sure to call `super()` to retain the normalization.\n\n"}, {"name": "auth.models.AbstractUser.clean()", "path": "topics/auth/customizing#django.contrib.auth.models.AbstractUser.clean", "type": "django.contrib.auth", "text": "\nNormalizes the email by calling `BaseUserManager.normalize_email()`. If you\noverride this method, be sure to call `super()` to retain the normalization.\n\n"}, {"name": "auth.models.AnonymousUser", "path": "ref/contrib/auth#django.contrib.auth.models.AnonymousUser", "type": "django.contrib.auth", "text": "\n`django.contrib.auth.models.AnonymousUser` is a class that implements the\n`django.contrib.auth.models.User` interface, with these differences:\n\n"}, {"name": "auth.models.BaseUserManager", "path": "topics/auth/customizing#django.contrib.auth.models.BaseUserManager", "type": "django.contrib.auth", "text": "\nNormalizes email addresses by lowercasing the domain portion of the email\naddress.\n\nRetrieves a user instance using the contents of the field nominated by\n`USERNAME_FIELD`.\n\nReturns a random password with the given length and given string of allowed\ncharacters. Note that the default value of `allowed_chars` doesn\u2019t contain\nletters that can cause user confusion, including:\n\n"}, {"name": "auth.models.BaseUserManager.get_by_natural_key()", "path": "topics/auth/customizing#django.contrib.auth.models.BaseUserManager.get_by_natural_key", "type": "django.contrib.auth", "text": "\nRetrieves a user instance using the contents of the field nominated by\n`USERNAME_FIELD`.\n\n"}, {"name": "auth.models.BaseUserManager.make_random_password()", "path": "topics/auth/customizing#django.contrib.auth.models.BaseUserManager.make_random_password", "type": "django.contrib.auth", "text": "\nReturns a random password with the given length and given string of allowed\ncharacters. Note that the default value of `allowed_chars` doesn\u2019t contain\nletters that can cause user confusion, including:\n\n"}, {"name": "auth.models.CustomUser", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser", "type": "django.contrib.auth", "text": "\nA string describing the name of the field on the user model that is used as\nthe unique identifier. This will usually be a username of some kind, but it\ncan also be an email address, or any other unique identifier. The field must\nbe unique (i.e., have `unique=True` set in its definition), unless you use a\ncustom authentication backend that can support non-unique usernames.\n\nIn the following example, the field `identifier` is used as the identifying\nfield:\n\nA string describing the name of the email field on the `User` model. This\nvalue is returned by `get_email_field_name()`.\n\nA list of the field names that will be prompted for when creating a user via\nthe `createsuperuser` management command. The user will be prompted to supply\na value for each of these fields. It must include any field for which `blank`\nis `False` or undefined and may include additional fields you want prompted\nfor when a user is created interactively. `REQUIRED_FIELDS` has no effect in\nother parts of Django, like creating a user in the admin.\n\nFor example, here is the partial definition for a user model that defines two\nrequired fields - a date of birth and height:\n\nNote\n\n`REQUIRED_FIELDS` must contain all required fields on your user model, but\nshould not contain the `USERNAME_FIELD` or `password` as these fields will\nalways be prompted for.\n\nA boolean attribute that indicates whether the user is considered \u201cactive\u201d.\nThis attribute is provided as an attribute on `AbstractBaseUser` defaulting to\n`True`. How you choose to implement it will depend on the details of your\nchosen auth backends. See the documentation of the `is_active attribute on the\nbuilt-in user model` for details.\n\nOptional. A longer formal identifier for the user such as their full name. If\nimplemented, this appears alongside the username in an object\u2019s history in\n`django.contrib.admin`.\n\nOptional. A short, informal identifier for the user such as their first name.\nIf implemented, this replaces the username in the greeting to the user in the\nheader of `django.contrib.admin`.\n\nImporting `AbstractBaseUser`\n\n`AbstractBaseUser` and `BaseUserManager` are importable from\n`django.contrib.auth.base_user` so that they can be imported without including\n`django.contrib.auth` in `INSTALLED_APPS`.\n\n"}, {"name": "auth.models.CustomUser.EMAIL_FIELD", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.EMAIL_FIELD", "type": "django.contrib.auth", "text": "\nA string describing the name of the email field on the `User` model. This\nvalue is returned by `get_email_field_name()`.\n\n"}, {"name": "auth.models.CustomUser.get_full_name()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.get_full_name", "type": "django.contrib.auth", "text": "\nOptional. A longer formal identifier for the user such as their full name. If\nimplemented, this appears alongside the username in an object\u2019s history in\n`django.contrib.admin`.\n\n"}, {"name": "auth.models.CustomUser.get_short_name()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.get_short_name", "type": "django.contrib.auth", "text": "\nOptional. A short, informal identifier for the user such as their first name.\nIf implemented, this replaces the username in the greeting to the user in the\nheader of `django.contrib.admin`.\n\n"}, {"name": "auth.models.CustomUser.is_active", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.is_active", "type": "django.contrib.auth", "text": "\nA boolean attribute that indicates whether the user is considered \u201cactive\u201d.\nThis attribute is provided as an attribute on `AbstractBaseUser` defaulting to\n`True`. How you choose to implement it will depend on the details of your\nchosen auth backends. See the documentation of the `is_active attribute on the\nbuilt-in user model` for details.\n\n"}, {"name": "auth.models.CustomUser.REQUIRED_FIELDS", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS", "type": "django.contrib.auth", "text": "\nA list of the field names that will be prompted for when creating a user via\nthe `createsuperuser` management command. The user will be prompted to supply\na value for each of these fields. It must include any field for which `blank`\nis `False` or undefined and may include additional fields you want prompted\nfor when a user is created interactively. `REQUIRED_FIELDS` has no effect in\nother parts of Django, like creating a user in the admin.\n\nFor example, here is the partial definition for a user model that defines two\nrequired fields - a date of birth and height:\n\nNote\n\n`REQUIRED_FIELDS` must contain all required fields on your user model, but\nshould not contain the `USERNAME_FIELD` or `password` as these fields will\nalways be prompted for.\n\n"}, {"name": "auth.models.CustomUser.USERNAME_FIELD", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUser.USERNAME_FIELD", "type": "django.contrib.auth", "text": "\nA string describing the name of the field on the user model that is used as\nthe unique identifier. This will usually be a username of some kind, but it\ncan also be an email address, or any other unique identifier. The field must\nbe unique (i.e., have `unique=True` set in its definition), unless you use a\ncustom authentication backend that can support non-unique usernames.\n\nIn the following example, the field `identifier` is used as the identifying\nfield:\n\n"}, {"name": "auth.models.CustomUserManager", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUserManager", "type": "django.contrib.auth", "text": "\nThe prototype of `create_user()` should accept the username field, plus all\nrequired fields as arguments. For example, if your user model uses `email` as\nthe username field, and has `date_of_birth` as a required field, then\n`create_user` should be defined as:\n\nThe prototype of `create_superuser()` should accept the username field, plus\nall required fields as arguments. For example, if your user model uses `email`\nas the username field, and has `date_of_birth` as a required field, then\n`create_superuser` should be defined as:\n\n"}, {"name": "auth.models.CustomUserManager.create_superuser()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUserManager.create_superuser", "type": "django.contrib.auth", "text": "\nThe prototype of `create_superuser()` should accept the username field, plus\nall required fields as arguments. For example, if your user model uses `email`\nas the username field, and has `date_of_birth` as a required field, then\n`create_superuser` should be defined as:\n\n"}, {"name": "auth.models.CustomUserManager.create_user()", "path": "topics/auth/customizing#django.contrib.auth.models.CustomUserManager.create_user", "type": "django.contrib.auth", "text": "\nThe prototype of `create_user()` should accept the username field, plus all\nrequired fields as arguments. For example, if your user model uses `email` as\nthe username field, and has `date_of_birth` as a required field, then\n`create_user` should be defined as:\n\n"}, {"name": "auth.models.Group", "path": "ref/contrib/auth#django.contrib.auth.models.Group", "type": "django.contrib.auth", "text": "\n\n"}, {"name": "auth.models.Group.name", "path": "ref/contrib/auth#django.contrib.auth.models.Group.name", "type": "django.contrib.auth", "text": "\nRequired. 150 characters or fewer. Any characters are permitted. Example:\n`'Awesome Users'`.\n\n"}, {"name": "auth.models.Group.permissions", "path": "ref/contrib/auth#django.contrib.auth.models.Group.permissions", "type": "django.contrib.auth", "text": "\nMany-to-many field to `Permission`:\n\n"}, {"name": "auth.models.Permission", "path": "ref/contrib/auth#django.contrib.auth.models.Permission", "type": "django.contrib.auth", "text": "\n\n"}, {"name": "auth.models.Permission.codename", "path": "ref/contrib/auth#django.contrib.auth.models.Permission.codename", "type": "django.contrib.auth", "text": "\nRequired. 100 characters or fewer. Example: `'can_vote'`.\n\n"}, {"name": "auth.models.Permission.content_type", "path": "ref/contrib/auth#django.contrib.auth.models.Permission.content_type", "type": "django.contrib.auth", "text": "\nRequired. A reference to the `django_content_type` database table, which\ncontains a record for each installed model.\n\n"}, {"name": "auth.models.Permission.name", "path": "ref/contrib/auth#django.contrib.auth.models.Permission.name", "type": "django.contrib.auth", "text": "\nRequired. 255 characters or fewer. Example: `'Can vote'`.\n\n"}, {"name": "auth.models.PermissionsMixin", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin", "type": "django.contrib.auth", "text": "\nBoolean. Designates that this user has all permissions without explicitly\nassigning them.\n\nReturns a set of permission strings that the user has directly.\n\nIf `obj` is passed in, only returns the user permissions for this specific\nobject.\n\nReturns a set of permission strings that the user has, through their groups.\n\nIf `obj` is passed in, only returns the group permissions for this specific\nobject.\n\nReturns a set of permission strings that the user has, both through group and\nuser permissions.\n\nIf `obj` is passed in, only returns the permissions for this specific object.\n\nReturns `True` if the user has the specified permission, where `perm` is in\nthe format `\"<app label>.<permission codename>\"` (see permissions). If\n`User.is_active` and `is_superuser` are both `True`, this method always\nreturns `True`.\n\nIf `obj` is passed in, this method won\u2019t check for a permission for the model,\nbut for this specific object.\n\nReturns `True` if the user has each of the specified permissions, where each\nperm is in the format `\"<app label>.<permission codename>\"`. If\n`User.is_active` and `is_superuser` are both `True`, this method always\nreturns `True`.\n\nIf `obj` is passed in, this method won\u2019t check for permissions for the model,\nbut for the specific object.\n\nReturns `True` if the user has any permissions in the given package (the\nDjango app label). If `User.is_active` and `is_superuser` are both `True`,\nthis method always returns `True`.\n\n"}, {"name": "auth.models.PermissionsMixin.get_all_permissions()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.get_all_permissions", "type": "django.contrib.auth", "text": "\nReturns a set of permission strings that the user has, both through group and\nuser permissions.\n\nIf `obj` is passed in, only returns the permissions for this specific object.\n\n"}, {"name": "auth.models.PermissionsMixin.get_group_permissions()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.get_group_permissions", "type": "django.contrib.auth", "text": "\nReturns a set of permission strings that the user has, through their groups.\n\nIf `obj` is passed in, only returns the group permissions for this specific\nobject.\n\n"}, {"name": "auth.models.PermissionsMixin.get_user_permissions()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.get_user_permissions", "type": "django.contrib.auth", "text": "\nReturns a set of permission strings that the user has directly.\n\nIf `obj` is passed in, only returns the user permissions for this specific\nobject.\n\n"}, {"name": "auth.models.PermissionsMixin.has_module_perms()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.has_module_perms", "type": "django.contrib.auth", "text": "\nReturns `True` if the user has any permissions in the given package (the\nDjango app label). If `User.is_active` and `is_superuser` are both `True`,\nthis method always returns `True`.\n\n"}, {"name": "auth.models.PermissionsMixin.has_perm()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.has_perm", "type": "django.contrib.auth", "text": "\nReturns `True` if the user has the specified permission, where `perm` is in\nthe format `\"<app label>.<permission codename>\"` (see permissions). If\n`User.is_active` and `is_superuser` are both `True`, this method always\nreturns `True`.\n\nIf `obj` is passed in, this method won\u2019t check for a permission for the model,\nbut for this specific object.\n\n"}, {"name": "auth.models.PermissionsMixin.has_perms()", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.has_perms", "type": "django.contrib.auth", "text": "\nReturns `True` if the user has each of the specified permissions, where each\nperm is in the format `\"<app label>.<permission codename>\"`. If\n`User.is_active` and `is_superuser` are both `True`, this method always\nreturns `True`.\n\nIf `obj` is passed in, this method won\u2019t check for permissions for the model,\nbut for the specific object.\n\n"}, {"name": "auth.models.PermissionsMixin.is_superuser", "path": "topics/auth/customizing#django.contrib.auth.models.PermissionsMixin.is_superuser", "type": "django.contrib.auth", "text": "\nBoolean. Designates that this user has all permissions without explicitly\nassigning them.\n\n"}, {"name": "auth.models.User", "path": "ref/contrib/auth#django.contrib.auth.models.User", "type": "django.contrib.auth", "text": "\n\n"}, {"name": "auth.models.User.check_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.check_password", "type": "django.contrib.auth", "text": "\nReturns `True` if the given raw string is the correct password for the user.\n(This takes care of the password hashing in making the comparison.)\n\n"}, {"name": "auth.models.User.date_joined", "path": "ref/contrib/auth#django.contrib.auth.models.User.date_joined", "type": "django.contrib.auth", "text": "\nA datetime designating when the account was created. Is set to the current\ndate/time by default when the account is created.\n\n"}, {"name": "auth.models.User.email", "path": "ref/contrib/auth#django.contrib.auth.models.User.email", "type": "django.contrib.auth", "text": "\nOptional (`blank=True`). Email address.\n\n"}, {"name": "auth.models.User.email_user()", "path": "ref/contrib/auth#django.contrib.auth.models.User.email_user", "type": "django.contrib.auth", "text": "\nSends an email to the user. If `from_email` is `None`, Django uses the\n`DEFAULT_FROM_EMAIL`. Any `**kwargs` are passed to the underlying\n`send_mail()` call.\n\n"}, {"name": "auth.models.User.first_name", "path": "ref/contrib/auth#django.contrib.auth.models.User.first_name", "type": "django.contrib.auth", "text": "\nOptional (`blank=True`). 150 characters or fewer.\n\n"}, {"name": "auth.models.User.get_all_permissions()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_all_permissions", "type": "django.contrib.auth", "text": "\nReturns a set of permission strings that the user has, both through group and\nuser permissions.\n\nIf `obj` is passed in, only returns the permissions for this specific object.\n\n"}, {"name": "auth.models.User.get_full_name()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_full_name", "type": "django.contrib.auth", "text": "\nReturns the `first_name` plus the `last_name`, with a space in between.\n\n"}, {"name": "auth.models.User.get_group_permissions()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_group_permissions", "type": "django.contrib.auth", "text": "\nReturns a set of permission strings that the user has, through their groups.\n\nIf `obj` is passed in, only returns the group permissions for this specific\nobject.\n\n"}, {"name": "auth.models.User.get_short_name()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_short_name", "type": "django.contrib.auth", "text": "\nReturns the `first_name`.\n\n"}, {"name": "auth.models.User.get_user_permissions()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_user_permissions", "type": "django.contrib.auth", "text": "\nReturns a set of permission strings that the user has directly.\n\nIf `obj` is passed in, only returns the user permissions for this specific\nobject.\n\n"}, {"name": "auth.models.User.get_username()", "path": "ref/contrib/auth#django.contrib.auth.models.User.get_username", "type": "django.contrib.auth", "text": "\nReturns the username for the user. Since the `User` model can be swapped out,\nyou should use this method instead of referencing the username attribute\ndirectly.\n\n"}, {"name": "auth.models.User.groups", "path": "ref/contrib/auth#django.contrib.auth.models.User.groups", "type": "django.contrib.auth", "text": "\nMany-to-many relationship to `Group`\n\n"}, {"name": "auth.models.User.has_module_perms()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_module_perms", "type": "django.contrib.auth", "text": "\nReturns `True` if the user has any permissions in the given package (the\nDjango app label). If the user is inactive, this method will always return\n`False`. For an active superuser, this method will always return `True`.\n\n"}, {"name": "auth.models.User.has_perm()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_perm", "type": "django.contrib.auth", "text": "\nReturns `True` if the user has the specified permission, where perm is in the\nformat `\"<app label>.<permission codename>\"`. (see documentation on\npermissions). If the user is inactive, this method will always return `False`.\nFor an active superuser, this method will always return `True`.\n\nIf `obj` is passed in, this method won\u2019t check for a permission for the model,\nbut for this specific object.\n\n"}, {"name": "auth.models.User.has_perms()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_perms", "type": "django.contrib.auth", "text": "\nReturns `True` if the user has each of the specified permissions, where each\nperm is in the format `\"<app label>.<permission codename>\"`. If the user is\ninactive, this method will always return `False`. For an active superuser,\nthis method will always return `True`.\n\nIf `obj` is passed in, this method won\u2019t check for permissions for the model,\nbut for the specific object.\n\n"}, {"name": "auth.models.User.has_usable_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.has_usable_password", "type": "django.contrib.auth", "text": "\nReturns `False` if `set_unusable_password()` has been called for this user.\n\n"}, {"name": "auth.models.User.is_active", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_active", "type": "django.contrib.auth", "text": "\nBoolean. Designates whether this user account should be considered active. We\nrecommend that you set this flag to `False` instead of deleting accounts; that\nway, if your applications have any foreign keys to users, the foreign keys\nwon\u2019t break.\n\nThis doesn\u2019t necessarily control whether or not the user can log in.\nAuthentication backends aren\u2019t required to check for the `is_active` flag but\nthe default backend (`ModelBackend`) and the `RemoteUserBackend` do. You can\nuse `AllowAllUsersModelBackend` or `AllowAllUsersRemoteUserBackend` if you\nwant to allow inactive users to login. In this case, you\u2019ll also want to\ncustomize the `AuthenticationForm` used by the `LoginView` as it rejects\ninactive users. Be aware that the permission-checking methods such as\n`has_perm()` and the authentication in the Django admin all return `False` for\ninactive users.\n\n"}, {"name": "auth.models.User.is_anonymous", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_anonymous", "type": "django.contrib.auth", "text": "\nRead-only attribute which is always `False`. This is a way of differentiating\n`User` and `AnonymousUser` objects. Generally, you should prefer using\n`is_authenticated` to this attribute.\n\n"}, {"name": "auth.models.User.is_authenticated", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_authenticated", "type": "django.contrib.auth", "text": "\nRead-only attribute which is always `True` (as opposed to\n`AnonymousUser.is_authenticated` which is always `False`). This is a way to\ntell if the user has been authenticated. This does not imply any permissions\nand doesn\u2019t check if the user is active or has a valid session. Even though\nnormally you will check this attribute on `request.user` to find out whether\nit has been populated by the `AuthenticationMiddleware` (representing the\ncurrently logged-in user), you should know this attribute is `True` for any\n`User` instance.\n\n"}, {"name": "auth.models.User.is_staff", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_staff", "type": "django.contrib.auth", "text": "\nBoolean. Designates whether this user can access the admin site.\n\n"}, {"name": "auth.models.User.is_superuser", "path": "ref/contrib/auth#django.contrib.auth.models.User.is_superuser", "type": "django.contrib.auth", "text": "\nBoolean. Designates that this user has all permissions without explicitly\nassigning them.\n\n"}, {"name": "auth.models.User.last_login", "path": "ref/contrib/auth#django.contrib.auth.models.User.last_login", "type": "django.contrib.auth", "text": "\nA datetime of the user\u2019s last login.\n\n"}, {"name": "auth.models.User.last_name", "path": "ref/contrib/auth#django.contrib.auth.models.User.last_name", "type": "django.contrib.auth", "text": "\nOptional (`blank=True`). 150 characters or fewer.\n\n"}, {"name": "auth.models.User.password", "path": "ref/contrib/auth#django.contrib.auth.models.User.password", "type": "django.contrib.auth", "text": "\nRequired. A hash of, and metadata about, the password. (Django doesn\u2019t store\nthe raw password.) Raw passwords can be arbitrarily long and can contain any\ncharacter. See the password documentation.\n\n"}, {"name": "auth.models.User.set_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.set_password", "type": "django.contrib.auth", "text": "\nSets the user\u2019s password to the given raw string, taking care of the password\nhashing. Doesn\u2019t save the `User` object.\n\nWhen the `raw_password` is `None`, the password will be set to an unusable\npassword, as if `set_unusable_password()` were used.\n\n"}, {"name": "auth.models.User.set_unusable_password()", "path": "ref/contrib/auth#django.contrib.auth.models.User.set_unusable_password", "type": "django.contrib.auth", "text": "\nMarks the user as having no password set. This isn\u2019t the same as having a\nblank string for a password. `check_password()` for this user will never\nreturn `True`. Doesn\u2019t save the `User` object.\n\nYou may need this if authentication for your application takes place against\nan existing external source such as an LDAP directory.\n\n"}, {"name": "auth.models.User.user_permissions", "path": "ref/contrib/auth#django.contrib.auth.models.User.user_permissions", "type": "django.contrib.auth", "text": "\nMany-to-many relationship to `Permission`\n\n"}, {"name": "auth.models.User.username", "path": "ref/contrib/auth#django.contrib.auth.models.User.username", "type": "django.contrib.auth", "text": "\nRequired. 150 characters or fewer. Usernames may contain alphanumeric, `_`,\n`@`, `+`, `.` and `-` characters.\n\nThe `max_length` should be sufficient for many use cases. If you need a longer\nlength, please use a custom user model. If you use MySQL with the `utf8mb4`\nencoding (recommended for proper Unicode support), specify at most\n`max_length=191` because MySQL can only create unique indexes with 191\ncharacters in that case by default.\n\n"}, {"name": "auth.models.UserManager", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager", "type": "django.contrib.auth", "text": "\nThe `User` model has a custom manager that has the following helper methods\n(in addition to the methods provided by `BaseUserManager`):\n\nCreates, saves and returns a `User`.\n\nThe `username` and `password` are set as given. The domain portion of `email`\nis automatically converted to lowercase, and the returned `User` object will\nhave `is_active` set to `True`.\n\nIf no password is provided, `set_unusable_password()` will be called.\n\nThe `extra_fields` keyword arguments are passed through to the `User`\u2019s\n`__init__` method to allow setting arbitrary fields on a custom user model.\n\nSee Creating users for example usage.\n\nSame as `create_user()`, but sets `is_staff` and `is_superuser` to `True`.\n\nReturns users that have the given permission `perm` either in the `\"<app\nlabel>.<permission codename>\"` format or as a `Permission` instance. Returns\nan empty queryset if no users who have the `perm` found.\n\nIf `is_active` is `True` (default), returns only active users, or if `False`,\nreturns only inactive users. Use `None` to return all users irrespective of\nactive state.\n\nIf `include_superusers` is `True` (default), the result will include\nsuperusers.\n\nIf `backend` is passed in and it\u2019s defined in `AUTHENTICATION_BACKENDS`, then\nthis method will use it. Otherwise, it will use the `backend` in\n`AUTHENTICATION_BACKENDS`, if there is only one, or raise an exception.\n\n"}, {"name": "auth.models.UserManager.create_superuser()", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager.create_superuser", "type": "django.contrib.auth", "text": "\nSame as `create_user()`, but sets `is_staff` and `is_superuser` to `True`.\n\n"}, {"name": "auth.models.UserManager.create_user()", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager.create_user", "type": "django.contrib.auth", "text": "\nCreates, saves and returns a `User`.\n\nThe `username` and `password` are set as given. The domain portion of `email`\nis automatically converted to lowercase, and the returned `User` object will\nhave `is_active` set to `True`.\n\nIf no password is provided, `set_unusable_password()` will be called.\n\nThe `extra_fields` keyword arguments are passed through to the `User`\u2019s\n`__init__` method to allow setting arbitrary fields on a custom user model.\n\nSee Creating users for example usage.\n\n"}, {"name": "auth.models.UserManager.with_perm()", "path": "ref/contrib/auth#django.contrib.auth.models.UserManager.with_perm", "type": "django.contrib.auth", "text": "\nReturns users that have the given permission `perm` either in the `\"<app\nlabel>.<permission codename>\"` format or as a `Permission` instance. Returns\nan empty queryset if no users who have the `perm` found.\n\nIf `is_active` is `True` (default), returns only active users, or if `False`,\nreturns only inactive users. Use `None` to return all users irrespective of\nactive state.\n\nIf `include_superusers` is `True` (default), the result will include\nsuperusers.\n\nIf `backend` is passed in and it\u2019s defined in `AUTHENTICATION_BACKENDS`, then\nthis method will use it. Otherwise, it will use the `backend` in\n`AUTHENTICATION_BACKENDS`, if there is only one, or raise an exception.\n\n"}, {"name": "auth.password_validation.CommonPasswordValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.CommonPasswordValidator", "type": "django.contrib.auth", "text": "\nValidates whether the password is not a common password. This converts the\npassword to lowercase (to do a case-insensitive comparison) and checks it\nagainst a list of 20,000 common password created by Royce Williams.\n\nThe `password_list_path` can be set to the path of a custom file of common\npasswords. This file should contain one lowercase password per line and may be\nplain text or gzipped.\n\n"}, {"name": "auth.password_validation.get_password_validators()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.get_password_validators", "type": "django.contrib.auth", "text": "\nReturns a set of validator objects based on the `validator_config` parameter.\nBy default, all functions use the validators defined in\n`AUTH_PASSWORD_VALIDATORS`, but by calling this function with an alternate set\nof validators and then passing the result into the `password_validators`\nparameter of the other functions, your custom set of validators will be used\ninstead. This is useful when you have a typical set of validators to use for\nmost scenarios, but also have a special situation that requires a custom set.\nIf you always use the same set of validators, there is no need to use this\nfunction, as the configuration from `AUTH_PASSWORD_VALIDATORS` is used by\ndefault.\n\nThe structure of `validator_config` is identical to the structure of\n`AUTH_PASSWORD_VALIDATORS`. The return value of this function can be passed\ninto the `password_validators` parameter of the functions listed above.\n\n"}, {"name": "auth.password_validation.MinimumLengthValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.MinimumLengthValidator", "type": "django.contrib.auth", "text": "\nValidates whether the password meets a minimum length. The minimum length can\nbe customized with the `min_length` parameter.\n\n"}, {"name": "auth.password_validation.NumericPasswordValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.NumericPasswordValidator", "type": "django.contrib.auth", "text": "\nValidates whether the password is not entirely numeric.\n\n"}, {"name": "auth.password_validation.password_changed()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.password_changed", "type": "django.contrib.auth", "text": "\nInforms all validators that the password has been changed. This can be used by\nvalidators such as one that prevents password reuse. This should be called\nonce the password has been successfully changed.\n\nFor subclasses of `AbstractBaseUser`, the password field will be marked as\n\u201cdirty\u201d when calling `set_password()` which triggers a call to\n`password_changed()` after the user is saved.\n\n"}, {"name": "auth.password_validation.password_validators_help_text_html()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.password_validators_help_text_html", "type": "django.contrib.auth", "text": "\nReturns an HTML string with all help texts in an `<ul>`. This is helpful when\nadding password validation to forms, as you can pass the output directly to\nthe `help_text` parameter of a form field.\n\n"}, {"name": "auth.password_validation.password_validators_help_texts()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.password_validators_help_texts", "type": "django.contrib.auth", "text": "\nReturns a list of the help texts of all validators. These explain the password\nrequirements to the user.\n\n"}, {"name": "auth.password_validation.UserAttributeSimilarityValidator", "path": "topics/auth/passwords#django.contrib.auth.password_validation.UserAttributeSimilarityValidator", "type": "django.contrib.auth", "text": "\nValidates whether the password is sufficiently different from certain\nattributes of the user.\n\nThe `user_attributes` parameter should be an iterable of names of user\nattributes to compare to. If this argument is not provided, the default is\nused: `'username', 'first_name', 'last_name', 'email'`. Attributes that don\u2019t\nexist are ignored.\n\nThe minimum similarity of a rejected password can be set on a scale of 0 to 1\nwith the `max_similarity` parameter. A setting of 0 rejects all passwords,\nwhereas a setting of 1 rejects only passwords that are identical to an\nattribute\u2019s value.\n\n"}, {"name": "auth.password_validation.validate_password()", "path": "topics/auth/passwords#django.contrib.auth.password_validation.validate_password", "type": "django.contrib.auth", "text": "\nValidates a password. If all validators find the password valid, returns\n`None`. If one or more validators reject the password, raises a\n`ValidationError` with all the error messages from the validators.\n\nThe `user` object is optional: if it\u2019s not provided, some validators may not\nbe able to perform any validation and will accept any password.\n\n"}, {"name": "auth.signals.user_logged_in()", "path": "ref/contrib/auth#django.contrib.auth.signals.user_logged_in", "type": "django.contrib.auth", "text": "\nSent when a user logs in successfully.\n\nArguments sent with this signal:\n\n"}, {"name": "auth.signals.user_logged_out()", "path": "ref/contrib/auth#django.contrib.auth.signals.user_logged_out", "type": "django.contrib.auth", "text": "\nSent when the logout method is called.\n\n"}, {"name": "auth.signals.user_login_failed()", "path": "ref/contrib/auth#django.contrib.auth.signals.user_login_failed", "type": "django.contrib.auth", "text": "\nSent when the user failed to login successfully\n\n"}, {"name": "auth.update_session_auth_hash()", "path": "topics/auth/default#django.contrib.auth.update_session_auth_hash", "type": "django.contrib.auth", "text": "\nThis function takes the current request and the updated user object from which\nthe new session hash will be derived and updates the session hash\nappropriately. It also rotates the session key so that a stolen session cookie\nwill be invalidated.\n\nExample usage:\n\n"}, {"name": "auth.validators.ASCIIUsernameValidator", "path": "ref/contrib/auth#django.contrib.auth.validators.ASCIIUsernameValidator", "type": "django.contrib.auth", "text": "\nA field validator allowing only ASCII letters and numbers, in addition to `@`,\n`.`, `+`, `-`, and `_`.\n\n"}, {"name": "auth.validators.UnicodeUsernameValidator", "path": "ref/contrib/auth#django.contrib.auth.validators.UnicodeUsernameValidator", "type": "django.contrib.auth", "text": "\nA field validator allowing Unicode characters, in addition to `@`, `.`, `+`,\n`-`, and `_`. The default validator for `User.username`.\n\n"}, {"name": "auth.views.LoginView", "path": "topics/auth/default#django.contrib.auth.views.LoginView", "type": "django.contrib.auth", "text": "\nURL name: `login`\n\nSee the URL documentation for details on using named URL patterns.\n\nMethods and Attributes\n\nThe name of a template to display for the view used to log the user in.\nDefaults to `registration/login.html`.\n\nThe URL to redirect to after login. Defaults to `LOGIN_REDIRECT_URL`.\n\nThe name of a `GET` field containing the URL to redirect to after login.\nDefaults to `next`. Overrides the `get_default_redirect_url()` URL if the\ngiven `GET` parameter is passed.\n\nA callable (typically a form class) to use for authentication. Defaults to\n`AuthenticationForm`.\n\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\nA boolean that controls whether or not authenticated users accessing the login\npage will be redirected as if they had just successfully logged in. Defaults\nto `False`.\n\nWarning\n\nIf you enable `redirect_authenticated_user`, other websites will be able to\ndetermine if their visitors are authenticated on your site by requesting\nredirect URLs to image files on your website. To avoid this \u201csocial media\nfingerprinting\u201d information leakage, host all images and your favicon on a\nseparate domain.\n\nEnabling `redirect_authenticated_user` can also result in a redirect loop when\nusing the `permission_required()` decorator unless the `raise_exception`\nparameter is used.\n\nA `set` of hosts, in addition to `request.get_host()`, that are safe for\nredirecting after login. Defaults to an empty `set`.\n\nReturns the URL to redirect to after login. The default implementation\nresolves and returns `next_page` if set, or `LOGIN_REDIRECT_URL` otherwise.\n\nHere\u2019s what `LoginView` does:\n\nIt\u2019s your responsibility to provide the html for the login template , called\n`registration/login.html` by default. This template gets passed four template\ncontext variables:\n\nIf you\u2019d prefer not to call the template `registration/login.html`, you can\npass the `template_name` parameter via the extra arguments to the `as_view`\nmethod in your URLconf. For example, this URLconf line would use\n`myapp/login.html` instead:\n\nYou can also specify the name of the `GET` field which contains the URL to\nredirect to after login using `redirect_field_name`. By default, the field is\ncalled `next`.\n\nHere\u2019s a sample `registration/login.html` template you can use as a starting\npoint. It assumes you have a `base.html` template that defines a `content`\nblock:\n\nIf you have customized authentication (see Customizing Authentication) you can\nuse a custom authentication form by setting the `authentication_form`\nattribute. This form must accept a `request` keyword argument in its\n`__init__()` method and provide a `get_user()` method which returns the\nauthenticated user object (this method is only ever called after successful\nform validation).\n\n"}, {"name": "auth.views.LoginView.authentication_form", "path": "topics/auth/default#django.contrib.auth.views.LoginView.authentication_form", "type": "django.contrib.auth", "text": "\nA callable (typically a form class) to use for authentication. Defaults to\n`AuthenticationForm`.\n\n"}, {"name": "auth.views.LoginView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.LoginView.extra_context", "type": "django.contrib.auth", "text": "\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.LoginView.get_default_redirect_url()", "path": "topics/auth/default#django.contrib.auth.views.LoginView.get_default_redirect_url", "type": "django.contrib.auth", "text": "\nReturns the URL to redirect to after login. The default implementation\nresolves and returns `next_page` if set, or `LOGIN_REDIRECT_URL` otherwise.\n\n"}, {"name": "auth.views.LoginView.next_page", "path": "topics/auth/default#django.contrib.auth.views.LoginView.next_page", "type": "django.contrib.auth", "text": "\nThe URL to redirect to after login. Defaults to `LOGIN_REDIRECT_URL`.\n\n"}, {"name": "auth.views.LoginView.redirect_authenticated_user", "path": "topics/auth/default#django.contrib.auth.views.LoginView.redirect_authenticated_user", "type": "django.contrib.auth", "text": "\nA boolean that controls whether or not authenticated users accessing the login\npage will be redirected as if they had just successfully logged in. Defaults\nto `False`.\n\nWarning\n\nIf you enable `redirect_authenticated_user`, other websites will be able to\ndetermine if their visitors are authenticated on your site by requesting\nredirect URLs to image files on your website. To avoid this \u201csocial media\nfingerprinting\u201d information leakage, host all images and your favicon on a\nseparate domain.\n\nEnabling `redirect_authenticated_user` can also result in a redirect loop when\nusing the `permission_required()` decorator unless the `raise_exception`\nparameter is used.\n\n"}, {"name": "auth.views.LoginView.redirect_field_name", "path": "topics/auth/default#django.contrib.auth.views.LoginView.redirect_field_name", "type": "django.contrib.auth", "text": "\nThe name of a `GET` field containing the URL to redirect to after login.\nDefaults to `next`. Overrides the `get_default_redirect_url()` URL if the\ngiven `GET` parameter is passed.\n\n"}, {"name": "auth.views.LoginView.success_url_allowed_hosts", "path": "topics/auth/default#django.contrib.auth.views.LoginView.success_url_allowed_hosts", "type": "django.contrib.auth", "text": "\nA `set` of hosts, in addition to `request.get_host()`, that are safe for\nredirecting after login. Defaults to an empty `set`.\n\n"}, {"name": "auth.views.LoginView.template_name", "path": "topics/auth/default#django.contrib.auth.views.LoginView.template_name", "type": "django.contrib.auth", "text": "\nThe name of a template to display for the view used to log the user in.\nDefaults to `registration/login.html`.\n\n"}, {"name": "auth.views.logout_then_login()", "path": "topics/auth/default#django.contrib.auth.views.logout_then_login", "type": "django.contrib.auth", "text": "\nLogs a user out, then redirects to the login page.\n\nURL name: No default URL provided\n\nOptional arguments:\n\n"}, {"name": "auth.views.LogoutView", "path": "topics/auth/default#django.contrib.auth.views.LogoutView", "type": "django.contrib.auth", "text": "\nLogs a user out.\n\nURL name: `logout`\n\nAttributes:\n\nThe URL to redirect to after logout. Defaults to `LOGOUT_REDIRECT_URL`.\n\nThe full name of a template to display after logging the user out. Defaults to\n`registration/logged_out.html`.\n\nThe name of a `GET` field containing the URL to redirect to after log out.\nDefaults to `'next'`. Overrides the `next_page` URL if the given `GET`\nparameter is passed.\n\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\nA `set` of hosts, in addition to `request.get_host()`, that are safe for\nredirecting after logout. Defaults to an empty `set`.\n\nTemplate context:\n\n"}, {"name": "auth.views.LogoutView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.extra_context", "type": "django.contrib.auth", "text": "\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.LogoutView.next_page", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.next_page", "type": "django.contrib.auth", "text": "\nThe URL to redirect to after logout. Defaults to `LOGOUT_REDIRECT_URL`.\n\n"}, {"name": "auth.views.LogoutView.redirect_field_name", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.redirect_field_name", "type": "django.contrib.auth", "text": "\nThe name of a `GET` field containing the URL to redirect to after log out.\nDefaults to `'next'`. Overrides the `next_page` URL if the given `GET`\nparameter is passed.\n\n"}, {"name": "auth.views.LogoutView.success_url_allowed_hosts", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.success_url_allowed_hosts", "type": "django.contrib.auth", "text": "\nA `set` of hosts, in addition to `request.get_host()`, that are safe for\nredirecting after logout. Defaults to an empty `set`.\n\n"}, {"name": "auth.views.LogoutView.template_name", "path": "topics/auth/default#django.contrib.auth.views.LogoutView.template_name", "type": "django.contrib.auth", "text": "\nThe full name of a template to display after logging the user out. Defaults to\n`registration/logged_out.html`.\n\n"}, {"name": "auth.views.PasswordChangeDoneView", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeDoneView", "type": "django.contrib.auth", "text": "\nURL name: `password_change_done`\n\nThe page shown after a user has changed their password.\n\nAttributes:\n\nThe full name of a template to use. Defaults to\n`registration/password_change_done.html` if not supplied.\n\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.PasswordChangeDoneView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeDoneView.extra_context", "type": "django.contrib.auth", "text": "\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.PasswordChangeDoneView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeDoneView.template_name", "type": "django.contrib.auth", "text": "\nThe full name of a template to use. Defaults to\n`registration/password_change_done.html` if not supplied.\n\n"}, {"name": "auth.views.PasswordChangeView", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView", "type": "django.contrib.auth", "text": "\nURL name: `password_change`\n\nAllows a user to change their password.\n\nAttributes:\n\nThe URL to redirect to after a successful password change. Defaults to\n`'password_change_done'`.\n\nA custom \u201cchange password\u201d form which must accept a `user` keyword argument.\nThe form is responsible for actually changing the user\u2019s password. Defaults to\n`PasswordChangeForm`.\n\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\nTemplate context:\n\n"}, {"name": "auth.views.PasswordChangeView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView.extra_context", "type": "django.contrib.auth", "text": "\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.PasswordChangeView.form_class", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView.form_class", "type": "django.contrib.auth", "text": "\nA custom \u201cchange password\u201d form which must accept a `user` keyword argument.\nThe form is responsible for actually changing the user\u2019s password. Defaults to\n`PasswordChangeForm`.\n\n"}, {"name": "auth.views.PasswordChangeView.success_url", "path": "topics/auth/default#django.contrib.auth.views.PasswordChangeView.success_url", "type": "django.contrib.auth", "text": "\nThe URL to redirect to after a successful password change. Defaults to\n`'password_change_done'`.\n\n"}, {"name": "auth.views.PasswordResetCompleteView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetCompleteView", "type": "django.contrib.auth", "text": "\nURL name: `password_reset_complete`\n\nPresents a view which informs the user that the password has been successfully\nchanged.\n\nAttributes:\n\nThe full name of a template to display the view. Defaults to\n`registration/password_reset_complete.html`.\n\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.PasswordResetCompleteView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetCompleteView.extra_context", "type": "django.contrib.auth", "text": "\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.PasswordResetCompleteView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetCompleteView.template_name", "type": "django.contrib.auth", "text": "\nThe full name of a template to display the view. Defaults to\n`registration/password_reset_complete.html`.\n\n"}, {"name": "auth.views.PasswordResetConfirmView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView", "type": "django.contrib.auth", "text": "\nURL name: `password_reset_confirm`\n\nPresents a form for entering a new password.\n\nKeyword arguments from the URL:\n\nAttributes:\n\nThe full name of a template to display the confirm password view. Default\nvalue is `registration/password_reset_confirm.html`.\n\nInstance of the class to check the password. This will default to\n`default_token_generator`, it\u2019s an instance of\n`django.contrib.auth.tokens.PasswordResetTokenGenerator`.\n\nA boolean indicating if the user should be automatically authenticated after a\nsuccessful password reset. Defaults to `False`.\n\nA dotted path to the authentication backend to use when authenticating a user\nif `post_reset_login` is `True`. Required only if you have multiple\n`AUTHENTICATION_BACKENDS` configured. Defaults to `None`.\n\nForm that will be used to set the password. Defaults to `SetPasswordForm`.\n\nURL to redirect after the password reset done. Defaults to\n`'password_reset_complete'`.\n\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\nToken parameter displayed as a component of password reset URLs. Defaults to\n`'set-password'`.\n\nTemplate context:\n\n"}, {"name": "auth.views.PasswordResetConfirmView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.extra_context", "type": "django.contrib.auth", "text": "\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.PasswordResetConfirmView.form_class", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.form_class", "type": "django.contrib.auth", "text": "\nForm that will be used to set the password. Defaults to `SetPasswordForm`.\n\n"}, {"name": "auth.views.PasswordResetConfirmView.post_reset_login", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.post_reset_login", "type": "django.contrib.auth", "text": "\nA boolean indicating if the user should be automatically authenticated after a\nsuccessful password reset. Defaults to `False`.\n\n"}, {"name": "auth.views.PasswordResetConfirmView.post_reset_login_backend", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.post_reset_login_backend", "type": "django.contrib.auth", "text": "\nA dotted path to the authentication backend to use when authenticating a user\nif `post_reset_login` is `True`. Required only if you have multiple\n`AUTHENTICATION_BACKENDS` configured. Defaults to `None`.\n\n"}, {"name": "auth.views.PasswordResetConfirmView.reset_url_token", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.reset_url_token", "type": "django.contrib.auth", "text": "\nToken parameter displayed as a component of password reset URLs. Defaults to\n`'set-password'`.\n\n"}, {"name": "auth.views.PasswordResetConfirmView.success_url", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.success_url", "type": "django.contrib.auth", "text": "\nURL to redirect after the password reset done. Defaults to\n`'password_reset_complete'`.\n\n"}, {"name": "auth.views.PasswordResetConfirmView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.template_name", "type": "django.contrib.auth", "text": "\nThe full name of a template to display the confirm password view. Default\nvalue is `registration/password_reset_confirm.html`.\n\n"}, {"name": "auth.views.PasswordResetConfirmView.token_generator", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetConfirmView.token_generator", "type": "django.contrib.auth", "text": "\nInstance of the class to check the password. This will default to\n`default_token_generator`, it\u2019s an instance of\n`django.contrib.auth.tokens.PasswordResetTokenGenerator`.\n\n"}, {"name": "auth.views.PasswordResetDoneView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetDoneView", "type": "django.contrib.auth", "text": "\nURL name: `password_reset_done`\n\nThe page shown after a user has been emailed a link to reset their password.\nThis view is called by default if the `PasswordResetView` doesn\u2019t have an\nexplicit `success_url` URL set.\n\nNote\n\nIf the email address provided does not exist in the system, the user is\ninactive, or has an unusable password, the user will still be redirected to\nthis view but no email will be sent.\n\nAttributes:\n\nThe full name of a template to use. Defaults to\n`registration/password_reset_done.html` if not supplied.\n\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.PasswordResetDoneView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetDoneView.extra_context", "type": "django.contrib.auth", "text": "\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.PasswordResetDoneView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetDoneView.template_name", "type": "django.contrib.auth", "text": "\nThe full name of a template to use. Defaults to\n`registration/password_reset_done.html` if not supplied.\n\n"}, {"name": "auth.views.PasswordResetView", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView", "type": "django.contrib.auth", "text": "\nURL name: `password_reset`\n\nAllows a user to reset their password by generating a one-time use link that\ncan be used to reset the password, and sending that link to the user\u2019s\nregistered email address.\n\nIf the email address provided does not exist in the system, this view won\u2019t\nsend an email, but the user won\u2019t receive any error message either. This\nprevents information leaking to potential attackers. If you want to provide an\nerror message in this case, you can subclass `PasswordResetForm` and use the\n`form_class` attribute.\n\nNote\n\nBe aware that sending an email costs extra time, hence you may be vulnerable\nto an email address enumeration timing attack due to a difference between the\nduration of a reset request for an existing email address and the duration of\na reset request for a nonexistent email address. To reduce the overhead, you\ncan use a 3rd party package that allows to send emails asynchronously, e.g.\ndjango-mailer.\n\nUsers flagged with an unusable password (see `set_unusable_password()` aren\u2019t\nallowed to request a password reset to prevent misuse when using an external\nauthentication source like LDAP. Note that they won\u2019t receive any error\nmessage since this would expose their account\u2019s existence but no mail will be\nsent either.\n\nAttributes:\n\nThe full name of a template to use for displaying the password reset form.\nDefaults to `registration/password_reset_form.html` if not supplied.\n\nForm that will be used to get the email of the user to reset the password for.\nDefaults to `PasswordResetForm`.\n\nThe full name of a template to use for generating the email with the reset\npassword link. Defaults to `registration/password_reset_email.html` if not\nsupplied.\n\nThe full name of a template to use for the subject of the email with the reset\npassword link. Defaults to `registration/password_reset_subject.txt` if not\nsupplied.\n\nInstance of the class to check the one time link. This will default to\n`default_token_generator`, it\u2019s an instance of\n`django.contrib.auth.tokens.PasswordResetTokenGenerator`.\n\nThe URL to redirect to after a successful password reset request. Defaults to\n`'password_reset_done'`.\n\nA valid email address. By default Django uses the `DEFAULT_FROM_EMAIL`.\n\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\nThe full name of a template to use for generating a text/html multipart email\nwith the password reset link. By default, HTML email is not sent.\n\nA dictionary of context data that will be available in the email template. It\ncan be used to override default template context values listed below e.g.\n`domain`.\n\nTemplate context:\n\nEmail template context:\n\nSample `registration/password_reset_email.html` (email body template):\n\nThe same template context is used for subject template. Subject must be single\nline plain text string.\n\n"}, {"name": "auth.views.PasswordResetView.email_template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.email_template_name", "type": "django.contrib.auth", "text": "\nThe full name of a template to use for generating the email with the reset\npassword link. Defaults to `registration/password_reset_email.html` if not\nsupplied.\n\n"}, {"name": "auth.views.PasswordResetView.extra_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.extra_context", "type": "django.contrib.auth", "text": "\nA dictionary of context data that will be added to the default context data\npassed to the template.\n\n"}, {"name": "auth.views.PasswordResetView.extra_email_context", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.extra_email_context", "type": "django.contrib.auth", "text": "\nA dictionary of context data that will be available in the email template. It\ncan be used to override default template context values listed below e.g.\n`domain`.\n\n"}, {"name": "auth.views.PasswordResetView.form_class", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.form_class", "type": "django.contrib.auth", "text": "\nForm that will be used to get the email of the user to reset the password for.\nDefaults to `PasswordResetForm`.\n\n"}, {"name": "auth.views.PasswordResetView.from_email", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.from_email", "type": "django.contrib.auth", "text": "\nA valid email address. By default Django uses the `DEFAULT_FROM_EMAIL`.\n\n"}, {"name": "auth.views.PasswordResetView.html_email_template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.html_email_template_name", "type": "django.contrib.auth", "text": "\nThe full name of a template to use for generating a text/html multipart email\nwith the password reset link. By default, HTML email is not sent.\n\n"}, {"name": "auth.views.PasswordResetView.subject_template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.subject_template_name", "type": "django.contrib.auth", "text": "\nThe full name of a template to use for the subject of the email with the reset\npassword link. Defaults to `registration/password_reset_subject.txt` if not\nsupplied.\n\n"}, {"name": "auth.views.PasswordResetView.success_url", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.success_url", "type": "django.contrib.auth", "text": "\nThe URL to redirect to after a successful password reset request. Defaults to\n`'password_reset_done'`.\n\n"}, {"name": "auth.views.PasswordResetView.template_name", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.template_name", "type": "django.contrib.auth", "text": "\nThe full name of a template to use for displaying the password reset form.\nDefaults to `registration/password_reset_form.html` if not supplied.\n\n"}, {"name": "auth.views.PasswordResetView.token_generator", "path": "topics/auth/default#django.contrib.auth.views.PasswordResetView.token_generator", "type": "django.contrib.auth", "text": "\nInstance of the class to check the one time link. This will default to\n`default_token_generator`, it\u2019s an instance of\n`django.contrib.auth.tokens.PasswordResetTokenGenerator`.\n\n"}, {"name": "auth.views.redirect_to_login()", "path": "topics/auth/default#django.contrib.auth.views.redirect_to_login", "type": "django.contrib.auth", "text": "\nRedirects to the login page, and then back to another URL after a successful\nlogin.\n\nRequired arguments:\n\nOptional arguments:\n\n"}, {"name": "Base views", "path": "ref/class-based-views/base", "type": "API", "text": "\nThe following three classes provide much of the functionality needed to create\nDjango views. You may think of them as parent views, which can be used by\nthemselves or inherited from. They may not provide all the capabilities\nrequired for projects, in which case there are Mixins and Generic class-based\nviews.\n\nMany of Django\u2019s built-in class-based views inherit from other class-based\nviews or various mixins. Because this inheritance chain is very important, the\nancestor classes are documented under the section title of Ancestors (MRO).\nMRO is an acronym for Method Resolution Order.\n\nThe master class-based base view. All other class-based views inherit from\nthis base class. It isn\u2019t strictly a generic view and thus can also be\nimported from `django.views`.\n\nMethod Flowchart\n\nExample views.py:\n\nExample urls.py:\n\nAttributes\n\nThe list of HTTP method names that this view will accept.\n\nDefault:\n\nMethods\n\nReturns a callable view that takes a request and returns a response:\n\nThe returned view has `view_class` and `view_initkwargs` attributes.\n\nWhen the view is called during the request/response cycle, the `setup()`\nmethod assigns the `HttpRequest` to the view\u2019s `request` attribute, and any\npositional and/or keyword arguments captured from the URL pattern to the\n`args` and `kwargs` attributes, respectively. Then `dispatch()` is called.\n\nPerforms key view initialization prior to `dispatch()`.\n\nIf overriding this method, you must call `super()`.\n\nThe `view` part of the view \u2013 the method that accepts a `request` argument\nplus arguments, and returns an HTTP response.\n\nThe default implementation will inspect the HTTP method and attempt to\ndelegate to a method that matches the HTTP method; a `GET` will be delegated\nto `get()`, a `POST` to `post()`, and so on.\n\nBy default, a `HEAD` request will be delegated to `get()`. If you need to\nhandle `HEAD` requests in a different way than `GET`, you can override the\n`head()` method. See Supporting other HTTP methods for an example.\n\nIf the view was called with an HTTP method it doesn\u2019t support, this method is\ncalled instead.\n\nThe default implementation returns `HttpResponseNotAllowed` with a list of\nallowed methods in plain text.\n\nHandles responding to requests for the OPTIONS HTTP verb. Returns a response\nwith the `Allow` header containing a list of the view\u2019s allowed HTTP method\nnames.\n\nRenders a given template, with the context containing parameters captured in\nthe URL.\n\nAncestors (MRO)\n\nThis view inherits methods and attributes from the following views:\n\nMethod Flowchart\n\nExample views.py:\n\nExample urls.py:\n\nContext\n\nRedirects to a given URL.\n\nThe given URL may contain dictionary-style string formatting, which will be\ninterpolated against the parameters captured in the URL. Because keyword\ninterpolation is always done (even if no arguments are passed in), any `\"%\"`\ncharacters in the URL must be written as `\"%%\"` so that Python will convert\nthem to a single percent sign on output.\n\nIf the given URL is `None`, Django will return an `HttpResponseGone` (410).\n\nAncestors (MRO)\n\nThis view inherits methods and attributes from the following view:\n\nMethod Flowchart\n\nExample views.py:\n\nExample urls.py:\n\nAttributes\n\nThe URL to redirect to, as a string. Or `None` to raise a 410 (Gone) HTTP\nerror.\n\nThe name of the URL pattern to redirect to. Reversing will be done using the\nsame args and kwargs as are passed in for this view.\n\nWhether the redirect should be permanent. The only difference here is the HTTP\nstatus code returned. If `True`, then the redirect will use status code 301.\nIf `False`, then the redirect will use status code 302. By default,\n`permanent` is `False`.\n\nWhether to pass along the GET query string to the new location. If `True`,\nthen the query string is appended to the URL. If `False`, then the query\nstring is discarded. By default, `query_string` is `False`.\n\nMethods\n\nConstructs the target URL for redirection.\n\nThe `args` and `kwargs` arguments are positional and/or keyword arguments\ncaptured from the URL pattern, respectively.\n\nThe default implementation uses `url` as a starting string and performs\nexpansion of `%` named parameters in that string using the named groups\ncaptured in the URL.\n\nIf `url` is not set, `get_redirect_url()` tries to reverse the `pattern_name`\nusing what was captured in the URL (both named and unnamed groups are used).\n\nIf requested by `query_string`, it will also append the query string to the\ngenerated URL. Subclasses may implement any behavior they wish, as long as the\nmethod returns a redirect-ready URL string.\n\n"}, {"name": "Built-in class-based generic views", "path": "topics/class-based-views/generic-display", "type": "Guides", "text": "\nWriting web applications can be monotonous, because we repeat certain patterns\nagain and again. Django tries to take away some of that monotony at the model\nand template layers, but web developers also experience this boredom at the\nview level.\n\nDjango\u2019s generic views were developed to ease that pain. They take certain\ncommon idioms and patterns found in view development and abstract them so that\nyou can quickly write common views of data without having to write too much\ncode.\n\nWe can recognize certain common tasks, like displaying a list of objects, and\nwrite code that displays a list of any object. Then the model in question can\nbe passed as an extra argument to the URLconf.\n\nDjango ships with generic views to do the following:\n\nTaken together, these views provide interfaces to perform the most common\ntasks developers encounter.\n\nThere\u2019s no question that using generic views can speed up development\nsubstantially. In most projects, however, there comes a moment when the\ngeneric views no longer suffice. Indeed, the most common question asked by new\nDjango developers is how to make generic views handle a wider array of\nsituations.\n\nThis is one of the reasons generic views were redesigned for the 1.3 release -\npreviously, they were view functions with a bewildering array of options; now,\nrather than passing in a large amount of configuration in the URLconf, the\nrecommended way to extend generic views is to subclass them, and override\ntheir attributes or methods.\n\nThat said, generic views will have a limit. If you find you\u2019re struggling to\nimplement your view as a subclass of a generic view, then you may find it more\neffective to write just the code you need, using your own class-based or\nfunctional views.\n\nMore examples of generic views are available in some third party applications,\nor you could write your own as needed.\n\n`TemplateView` certainly is useful, but Django\u2019s generic views really shine\nwhen it comes to presenting views of your database content. Because it\u2019s such\na common task, Django comes with a handful of built-in generic views to help\ngenerate list and detail views of objects.\n\nLet\u2019s start by looking at some examples of showing a list of objects or an\nindividual object.\n\nWe\u2019ll be using these models:\n\nNow we need to define a view:\n\nFinally hook that view into your urls:\n\nThat\u2019s all the Python code we need to write. We still need to write a\ntemplate, however. We could explicitly tell the view which template to use by\nadding a `template_name` attribute to the view, but in the absence of an\nexplicit template Django will infer one from the object\u2019s name. In this case,\nthe inferred template will be `\"books/publisher_list.html\"` \u2013 the \u201cbooks\u201d part\ncomes from the name of the app that defines the model, while the \u201cpublisher\u201d\nbit is the lowercased version of the model\u2019s name.\n\nNote\n\nThus, when (for example) the `APP_DIRS` option of a `DjangoTemplates` backend\nis set to True in `TEMPLATES`, a template location could be:\n/path/to/project/books/templates/books/publisher_list.html\n\nThis template will be rendered against a context containing a variable called\n`object_list` that contains all the publisher objects. A template might look\nlike this:\n\nThat\u2019s really all there is to it. All the cool features of generic views come\nfrom changing the attributes set on the generic view. The generic views\nreference documents all the generic views and their options in detail; the\nrest of this document will consider some of the common ways you might\ncustomize and extend generic views.\n\nYou might have noticed that our sample publisher list template stores all the\npublishers in a variable named `object_list`. While this works just fine, it\nisn\u2019t all that \u201cfriendly\u201d to template authors: they have to \u201cjust know\u201d that\nthey\u2019re dealing with publishers here.\n\nWell, if you\u2019re dealing with a model object, this is already done for you.\nWhen you are dealing with an object or queryset, Django is able to populate\nthe context using the lowercased version of the model class\u2019 name. This is\nprovided in addition to the default `object_list` entry, but contains exactly\nthe same data, i.e. `publisher_list`.\n\nIf this still isn\u2019t a good match, you can manually set the name of the context\nvariable. The `context_object_name` attribute on a generic view specifies the\ncontext variable to use:\n\nProviding a useful `context_object_name` is always a good idea. Your coworkers\nwho design templates will thank you.\n\nOften you need to present some extra information beyond that provided by the\ngeneric view. For example, think of showing a list of all the books on each\npublisher detail page. The `DetailView` generic view provides the publisher to\nthe context, but how do we get additional information in that template?\n\nThe answer is to subclass `DetailView` and provide your own implementation of\nthe `get_context_data` method. The default implementation adds the object\nbeing displayed to the template, but you can override it to send more:\n\nNote\n\nGenerally, `get_context_data` will merge the context data of all parent\nclasses with those of the current class. To preserve this behavior in your own\nclasses where you want to alter the context, you should be sure to call\n`get_context_data` on the super class. When no two classes try to define the\nsame key, this will give the expected results. However if any class attempts\nto override a key after parent classes have set it (after the call to super),\nany children of that class will also need to explicitly set it after super if\nthey want to be sure to override all parents. If you\u2019re having trouble, review\nthe method resolution order of your view.\n\nAnother consideration is that the context data from class-based generic views\nwill override data provided by context processors; see `get_context_data()`\nfor an example.\n\nNow let\u2019s take a closer look at the `model` argument we\u2019ve been using all\nalong. The `model` argument, which specifies the database model that the view\nwill operate upon, is available on all the generic views that operate on a\nsingle object or a collection of objects. However, the `model` argument is not\nthe only way to specify the objects that the view will operate upon \u2013 you can\nalso specify the list of objects using the `queryset` argument:\n\nSpecifying `model = Publisher` is shorthand for saying `queryset =\nPublisher.objects.all()`. However, by using `queryset` to define a filtered\nlist of objects you can be more specific about the objects that will be\nvisible in the view (see Making queries for more information about `QuerySet`\nobjects, and see the class-based views reference for the complete details).\n\nTo pick an example, we might want to order a list of books by publication\ndate, with the most recent first:\n\nThat\u2019s a pretty minimal example, but it illustrates the idea nicely. You\u2019ll\nusually want to do more than just reorder objects. If you want to present a\nlist of books by a particular publisher, you can use the same technique:\n\nNotice that along with a filtered `queryset`, we\u2019re also using a custom\ntemplate name. If we didn\u2019t, the generic view would use the same template as\nthe \u201cvanilla\u201d object list, which might not be what we want.\n\nAlso notice that this isn\u2019t a very elegant way of doing publisher-specific\nbooks. If we want to add another publisher page, we\u2019d need another handful of\nlines in the URLconf, and more than a few publishers would get unreasonable.\nWe\u2019ll deal with this problem in the next section.\n\nNote\n\nIf you get a 404 when requesting `/books/acme/`, check to ensure you actually\nhave a Publisher with the name \u2018ACME Publishing\u2019. Generic views have an\n`allow_empty` parameter for this case. See the class-based-views reference for\nmore details.\n\nAnother common need is to filter down the objects given in a list page by some\nkey in the URL. Earlier we hard-coded the publisher\u2019s name in the URLconf, but\nwhat if we wanted to write a view that displayed all the books by some\narbitrary publisher?\n\nHandily, the `ListView` has a `get_queryset()` method we can override. By\ndefault, it returns the value of the `queryset` attribute, but we can use it\nto add more logic.\n\nThe key part to making this work is that when class-based views are called,\nvarious useful things are stored on `self`; as well as the request\n(`self.request`) this includes the positional (`self.args`) and name-based\n(`self.kwargs`) arguments captured according to the URLconf.\n\nHere, we have a URLconf with a single captured group:\n\nNext, we\u2019ll write the `PublisherBookListView` view itself:\n\nUsing `get_queryset` to add logic to the queryset selection is as convenient\nas it is powerful. For instance, if we wanted, we could use\n`self.request.user` to filter using the current user, or other more complex\nlogic.\n\nWe can also add the publisher into the context at the same time, so we can use\nit in the template:\n\nThe last common pattern we\u2019ll look at involves doing some extra work before or\nafter calling the generic view.\n\nImagine we had a `last_accessed` field on our `Author` model that we were\nusing to keep track of the last time anybody looked at that author:\n\nThe generic `DetailView` class wouldn\u2019t know anything about this field, but\nonce again we could write a custom view to keep that field updated.\n\nFirst, we\u2019d need to add an author detail bit in the URLconf to point to a\ncustom view:\n\nThen we\u2019d write our new view \u2013 `get_object` is the method that retrieves the\nobject \u2013 so we override it and wrap the call:\n\nNote\n\nThe URLconf here uses the named group `pk` \\- this name is the default name\nthat `DetailView` uses to find the value of the primary key used to filter the\nqueryset.\n\nIf you want to call the group something else, you can set `pk_url_kwarg` on\nthe view.\n\n"}, {"name": "Built-in class-based views API", "path": "ref/class-based-views/index", "type": "API", "text": "\nClass-based views API reference. For introductory material, see the Class-\nbased views topic guide.\n\nEach request served by a class-based view has an independent state; therefore,\nit is safe to store state variables on the instance (i.e., `self.foo = 3` is a\nthread-safe operation).\n\nA class-based view is deployed into a URL pattern using the `as_view()`\nclassmethod:\n\nThread safety with view arguments\n\nArguments passed to a view are shared between every instance of a view. This\nmeans that you shouldn\u2019t use a list, dictionary, or any other mutable object\nas an argument to a view. If you do and the shared object is modified, the\nactions of one user visiting your view could have an effect on subsequent\nusers visiting the same view.\n\nArguments passed into `as_view()` will be assigned onto the instance that is\nused to service a request. Using the previous example, this means that every\nrequest on `MyView` is able to use `self.size`. Arguments must correspond to\nattributes that already exist on the class (return `True` on a `hasattr`\ncheck).\n\nBase class-based views can be thought of as parent views, which can be used by\nthemselves or inherited from. They may not provide all the capabilities\nrequired for projects, in which case there are Mixins which extend what base\nviews can do.\n\nDjango\u2019s generic views are built off of those base views, and were developed\nas a shortcut for common usage patterns such as displaying the details of an\nobject. They take certain common idioms and patterns found in view development\nand abstract them so that you can quickly write common views of data without\nhaving to repeat yourself.\n\nMost generic views require the `queryset` key, which is a `QuerySet` instance;\nsee Making queries for more information about `QuerySet` objects.\n\n"}, {"name": "Built-in template tags and filters", "path": "ref/templates/builtins", "type": "API", "text": "\nThis document describes Django\u2019s built-in template tags and filters. It is\nrecommended that you use the automatic documentation, if available, as this\nwill also include documentation for any custom tags or filters installed.\n\nControls the current auto-escaping behavior. This tag takes either `on` or\n`off` as an argument and that determines whether auto-escaping is in effect\ninside the block. The block is closed with an `endautoescape` ending tag.\n\nWhen auto-escaping is in effect, all variable content has HTML escaping\napplied to it before placing the result into the output (but after any filters\nhave been applied). This is equivalent to manually applying the `escape`\nfilter to each variable.\n\nThe only exceptions are variables that are already marked as \u201csafe\u201d from\nescaping, either by the code that populated the variable, or because it has\nhad the `safe` or `escape` filters applied.\n\nSample usage:\n\nDefines a block that can be overridden by child templates. See Template\ninheritance for more information.\n\nIgnores everything between `{% comment %}` and `{% endcomment %}`. An optional\nnote may be inserted in the first tag. For example, this is useful when\ncommenting out code for documenting why the code was disabled.\n\nSample usage:\n\n`comment` tags cannot be nested.\n\nThis tag is used for CSRF protection, as described in the documentation for\nCross Site Request Forgeries.\n\nProduces one of its arguments each time this tag is encountered. The first\nargument is produced on the first encounter, the second argument on the second\nencounter, and so forth. Once all arguments are exhausted, the tag cycles to\nthe first argument and produces it again.\n\nThis tag is particularly useful in a loop:\n\nThe first iteration produces HTML that refers to class `row1`, the second to\n`row2`, the third to `row1` again, and so on for each iteration of the loop.\n\nYou can use variables, too. For example, if you have two template variables,\n`rowvalue1` and `rowvalue2`, you can alternate between their values like this:\n\nVariables included in the cycle will be escaped. You can disable auto-escaping\nwith:\n\nYou can mix variables and strings:\n\nIn some cases you might want to refer to the current value of a cycle without\nadvancing to the next value. To do this, give the `{% cycle %}` tag a name,\nusing \u201cas\u201d, like this:\n\nFrom then on, you can insert the current value of the cycle wherever you\u2019d\nlike in your template by referencing the cycle name as a context variable. If\nyou want to move the cycle to the next value independently of the original\n`cycle` tag, you can use another `cycle` tag and specify the name of the\nvariable. So, the following template:\n\nwould output:\n\nYou can use any number of values in a `cycle` tag, separated by spaces. Values\nenclosed in single quotes (`'`) or double quotes (`\"`) are treated as string\nliterals, while values without quotes are treated as template variables.\n\nBy default, when you use the `as` keyword with the cycle tag, the usage of `{%\ncycle %}` that initiates the cycle will itself produce the first value in the\ncycle. This could be a problem if you want to use the value in a nested loop\nor an included template. If you only want to declare the cycle but not produce\nthe first value, you can add a `silent` keyword as the last keyword in the\ntag. For example:\n\nThis will output a list of `<tr>` elements with `class` alternating between\n`row1` and `row2`. The subtemplate will have access to `rowcolors` in its\ncontext and the value will match the class of the `<tr>` that encloses it. If\nthe `silent` keyword were to be omitted, `row1` and `row2` would be emitted as\nnormal text, outside the `<tr>` element.\n\nWhen the silent keyword is used on a cycle definition, the silence\nautomatically applies to all subsequent uses of that specific cycle tag. The\nfollowing template would output nothing, even though the second call to `{%\ncycle %}` doesn\u2019t specify `silent`:\n\nYou can use the `resetcycle` tag to make a `{% cycle %}` tag restart from its\nfirst value when it\u2019s next encountered.\n\nOutputs a whole load of debugging information, including the current context\nand imported modules.\n\nSignals that this template extends a parent template.\n\nThis tag can be used in two ways:\n\nSee Template inheritance for more information.\n\nNormally the template name is relative to the template loader\u2019s root\ndirectory. A string argument may also be a relative path starting with `./` or\n`../`. For example, assume the following directory structure:\n\nIn `template.html`, the following paths would be valid:\n\nFilters the contents of the block through one or more filters. Multiple\nfilters can be specified with pipes and filters can have arguments, just as in\nvariable syntax.\n\nNote that the block includes all the text between the `filter` and `endfilter`\ntags.\n\nSample usage:\n\nNote\n\nThe `escape` and `safe` filters are not acceptable arguments. Instead, use the\n`autoescape` tag to manage autoescaping for blocks of template code.\n\nOutputs the first argument variable that is not \u201cfalse\u201d (i.e. exists, is not\nempty, is not a false boolean value, and is not a zero numeric value). Outputs\nnothing if all the passed variables are \u201cfalse\u201d.\n\nSample usage:\n\nThis is equivalent to:\n\nYou can also use a literal string as a fallback value in case all passed\nvariables are False:\n\nThis tag auto-escapes variable values. You can disable auto-escaping with:\n\nOr if only some variables should be escaped, you can use:\n\nYou can use the syntax `{% firstof var1 var2 var3 as value %}` to store the\noutput inside a variable.\n\nLoops over each item in an array, making the item available in a context\nvariable. For example, to display a list of athletes provided in\n`athlete_list`:\n\nYou can loop over a list in reverse by using `{% for obj in list reversed %}`.\n\nIf you need to loop over a list of lists, you can unpack the values in each\nsublist into individual variables. For example, if your context contains a\nlist of (x,y) coordinates called `points`, you could use the following to\noutput the list of points:\n\nThis can also be useful if you need to access the items in a dictionary. For\nexample, if your context contained a dictionary `data`, the following would\ndisplay the keys and values of the dictionary:\n\nKeep in mind that for the dot operator, dictionary key lookup takes precedence\nover method lookup. Therefore if the `data` dictionary contains a key named\n`'items'`, `data.items` will return `data['items']` instead of `data.items()`.\nAvoid adding keys that are named like dictionary methods if you want to use\nthose methods in a template (`items`, `values`, `keys`, etc.). Read more about\nthe lookup order of the dot operator in the documentation of template\nvariables.\n\nThe for loop sets a number of variables available within the loop:\n\nThe `for` tag can take an optional `{% empty %}` clause whose text is\ndisplayed if the given array is empty or could not be found:\n\nThe above is equivalent to \u2013 but shorter, cleaner, and possibly faster than \u2013\nthe following:\n\nThe `{% if %}` tag evaluates a variable, and if that variable is \u201ctrue\u201d (i.e.\nexists, is not empty, and is not a false boolean value) the contents of the\nblock are output:\n\nIn the above, if `athlete_list` is not empty, the number of athletes will be\ndisplayed by the `{{ athlete_list|length }}` variable.\n\nAs you can see, the `if` tag may take one or several `{% elif %}` clauses, as\nwell as an `{% else %}` clause that will be displayed if all previous\nconditions fail. These clauses are optional.\n\n`if` tags may use `and`, `or` or `not` to test a number of variables or to\nnegate a given variable:\n\nUse of both `and` and `or` clauses within the same tag is allowed, with `and`\nhaving higher precedence than `or` e.g.:\n\nwill be interpreted like:\n\nUse of actual parentheses in the `if` tag is invalid syntax. If you need them\nto indicate precedence, you should use nested `if` tags.\n\n`if` tags may also use the operators `==`, `!=`, `<`, `>`, `<=`, `>=`, `in`,\n`not in`, `is`, and `is not` which work as follows:\n\nEquality. Example:\n\nInequality. Example:\n\nLess than. Example:\n\nGreater than. Example:\n\nLess than or equal to. Example:\n\nGreater than or equal to. Example:\n\nContained within. This operator is supported by many Python containers to test\nwhether the given value is in the container. The following are some examples\nof how `x in y` will be interpreted:\n\nNot contained within. This is the negation of the `in` operator.\n\nObject identity. Tests if two values are the same object. Example:\n\nNegated object identity. Tests if two values are not the same object. This is\nthe negation of the `is` operator. Example:\n\nYou can also use filters in the `if` expression. For example:\n\nAll of the above can be combined to form complex expressions. For such\nexpressions, it can be important to know how the operators are grouped when\nthe expression is evaluated - that is, the precedence rules. The precedence of\nthe operators, from lowest to highest, is as follows:\n\n(This follows Python exactly). So, for example, the following complex `if`\ntag:\n\n\u2026will be interpreted as:\n\nIf you need different precedence, you will need to use nested `if` tags.\nSometimes that is better for clarity anyway, for the sake of those who do not\nknow the precedence rules.\n\nThe comparison operators cannot be \u2018chained\u2019 like in Python or in mathematical\nnotation. For example, instead of using:\n\nyou should use:\n\nCheck if a value has changed from the last iteration of a loop.\n\nThe `{% ifchanged %}` block tag is used within a loop. It has two possible\nuses.\n\nChecks its own rendered contents against its previous state and only displays\nthe content if it has changed. For example, this displays a list of days, only\ndisplaying the month if it changes:\n\nIf given one or more variables, check whether any variable has changed. For\nexample, the following shows the date every time it changes, while showing the\nhour if either the hour or the date has changed:\n\nThe `ifchanged` tag can also take an optional `{% else %}` clause that will be\ndisplayed if the value has not changed:\n\nLoads a template and renders it with the current context. This is a way of\n\u201cincluding\u201d other templates within a template.\n\nThe template name can either be a variable or a hard-coded (quoted) string, in\neither single or double quotes.\n\nThis example includes the contents of the template `\"foo/bar.html\"`:\n\nNormally the template name is relative to the template loader\u2019s root\ndirectory. A string argument may also be a relative path starting with `./` or\n`../` as described in the `extends` tag.\n\nThis example includes the contents of the template whose name is contained in\nthe variable `template_name`:\n\nThe variable may also be any object with a `render()` method that accepts a\ncontext. This allows you to reference a compiled `Template` in your context.\n\nAdditionally, the variable may be an iterable of template names, in which case\nthe first that can be loaded will be used, as per `select_template()`.\n\nAn included template is rendered within the context of the template that\nincludes it. This example produces the output `\"Hello, John!\"`:\n\nTemplate:\n\nThe `name_snippet.html` template:\n\nYou can pass additional context to the template using keyword arguments:\n\nIf you want to render the context only with the variables provided (or even no\nvariables at all), use the `only` option. No other variables are available to\nthe included template:\n\nNote\n\nThe `include` tag should be considered as an implementation of \u201crender this\nsubtemplate and include the HTML\u201d, not as \u201cparse this subtemplate and include\nits contents as if it were part of the parent\u201d. This means that there is no\nshared state between included templates \u2013 each include is a completely\nindependent rendering process.\n\nBlocks are evaluated before they are included. This means that a template that\nincludes blocks from another will contain blocks that have already been\nevaluated and rendered \\- not blocks that can be overridden by, for example,\nan extending template.\n\nLoads a custom template tag set.\n\nFor example, the following template would load all the tags and filters\nregistered in `somelibrary` and `otherlibrary` located in package `package`:\n\nYou can also selectively load individual filters or tags from a library, using\nthe `from` argument. In this example, the template tags/filters named `foo`\nand `bar` will be loaded from `somelibrary`:\n\nSee Custom tag and filter libraries for more information.\n\nDisplays random \u201clorem ipsum\u201d Latin text. This is useful for providing sample\ndata in templates.\n\nUsage:\n\nThe `{% lorem %}` tag can be used with zero, one, two or three arguments. The\narguments are:\n\nExamples:\n\nDisplays the current date and/or time, using a format according to the given\nstring. Such string can contain format specifiers characters as described in\nthe `date` filter section.\n\nExample:\n\nNote that you can backslash-escape a format string if you want to use the\n\u201craw\u201d value. In this example, both \u201co\u201d and \u201cf\u201d are backslash-escaped, because\notherwise each is a format string that displays the year and the time,\nrespectively:\n\nThis would display as \u201cIt is the 4th of September\u201d.\n\nNote\n\nThe format passed can also be one of the predefined ones `DATE_FORMAT`,\n`DATETIME_FORMAT`, `SHORT_DATE_FORMAT` or `SHORT_DATETIME_FORMAT`. The\npredefined formats may vary depending on the current locale and if Format\nlocalization is enabled, e.g.:\n\nYou can also use the syntax `{% now \"Y\" as current_year %}` to store the\noutput (as a string) inside a variable. This is useful if you want to use `{%\nnow %}` inside a template tag like `blocktranslate` for example:\n\nRegroups a list of alike objects by a common attribute.\n\nThis complex tag is best illustrated by way of an example: say that `cities`\nis a list of cities represented by dictionaries containing `\"name\"`,\n`\"population\"`, and `\"country\"` keys:\n\n\u2026and you\u2019d like to display a hierarchical list that is ordered by country,\nlike this:\n\nYou can use the `{% regroup %}` tag to group the list of cities by country.\nThe following snippet of template code would accomplish this:\n\nLet\u2019s walk through this example. `{% regroup %}` takes three arguments: the\nlist you want to regroup, the attribute to group by, and the name of the\nresulting list. Here, we\u2019re regrouping the `cities` list by the `country`\nattribute and calling the result `country_list`.\n\n`{% regroup %}` produces a list (in this case, `country_list`) of group\nobjects. Group objects are instances of `namedtuple()` with two fields:\n\nBecause `{% regroup %}` produces `namedtuple()` objects, you can also write\nthe previous example as:\n\nNote that `{% regroup %}` does not order its input! Our example relies on the\nfact that the `cities` list was ordered by `country` in the first place. If\nthe `cities` list did not order its members by `country`, the regrouping would\nnaively display more than one group for a single country. For example, say the\n`cities` list was set to this (note that the countries are not grouped\ntogether):\n\nWith this input for `cities`, the example `{% regroup %}` template code above\nwould result in the following output:\n\nThe easiest solution to this gotcha is to make sure in your view code that the\ndata is ordered according to how you want to display it.\n\nAnother solution is to sort the data in the template using the `dictsort`\nfilter, if your data is in a list of dictionaries:\n\nAny valid template lookup is a legal grouping attribute for the regroup tag,\nincluding methods, attributes, dictionary keys and list items. For example, if\nthe \u201ccountry\u201d field is a foreign key to a class with an attribute\n\u201cdescription,\u201d you could use:\n\nOr, if `country` is a field with `choices`, it will have a `get_FOO_display()`\nmethod available as an attribute, allowing you to group on the display string\nrather than the `choices` key:\n\n`{{ country.grouper }}` will now display the value fields from the `choices`\nset rather than the keys.\n\nResets a previous cycle so that it restarts from its first item at its next\nencounter. Without arguments, `{% resetcycle %}` will reset the last `{% cycle\n%}` defined in the template.\n\nExample usage:\n\nThis example would return this HTML:\n\nNotice how the first block ends with `class=\"odd\"` and the new one starts with\n`class=\"odd\"`. Without the `{% resetcycle %}` tag, the second block would\nstart with `class=\"even\"`.\n\nYou can also reset named cycle tags:\n\nIn this example, we have both the alternating odd/even rows and a \u201cmajor\u201d row\nevery fifth row. Only the five-row cycle is reset when a category changes.\n\nRemoves whitespace between HTML tags. This includes tab characters and\nnewlines.\n\nExample usage:\n\nThis example would return this HTML:\n\nOnly space between tags is removed \u2013 not space between tags and text. In this\nexample, the space around `Hello` won\u2019t be stripped:\n\nOutputs one of the syntax characters used to compose template tags.\n\nThe template system has no concept of \u201cescaping\u201d individual characters.\nHowever, you can use the `{% templatetag %}` tag to display one of the\ntemplate tag character combinations.\n\nThe argument tells which template bit to output:\n\nSample usage:\n\nSee also the `verbatim` tag for another way of including these characters.\n\nReturns an absolute path reference (a URL without the domain name) matching a\ngiven view and optional parameters. Any special characters in the resulting\npath will be encoded using `iri_to_uri()`.\n\nThis is a way to output links without violating the DRY principle by having to\nhard-code URLs in your templates:\n\nThe first argument is a URL pattern name. It can be a quoted literal or any\nother context variable. Additional arguments are optional and should be space-\nseparated values that will be used as arguments in the URL. The example above\nshows passing positional arguments. Alternatively you may use keyword syntax:\n\nDo not mix both positional and keyword syntax in a single call. All arguments\nrequired by the URLconf should be present.\n\nFor example, suppose you have a view, `app_views.client`, whose URLconf takes\na client ID (here, `client()` is a method inside the views file\n`app_views.py`). The URLconf line might look like this:\n\nIf this app\u2019s URLconf is included into the project\u2019s URLconf under a path such\nas this:\n\n\u2026then, in a template, you can create a link to this view like this:\n\nThe template tag will output the string `/clients/client/123/`.\n\nNote that if the URL you\u2019re reversing doesn\u2019t exist, you\u2019ll get an\n`NoReverseMatch` exception raised, which will cause your site to display an\nerror page.\n\nIf you\u2019d like to retrieve a URL without displaying it, you can use a slightly\ndifferent call:\n\nThe scope of the variable created by the `as var` syntax is the `{% block %}`\nin which the `{% url %}` tag appears.\n\nThis `{% url ... as var %}` syntax will not cause an error if the view is\nmissing. In practice you\u2019ll use this to link to views that are optional:\n\nIf you\u2019d like to retrieve a namespaced URL, specify the fully qualified name:\n\nThis will follow the normal namespaced URL resolution strategy, including\nusing any hints provided by the context as to the current application.\n\nWarning\n\nDon\u2019t forget to put quotes around the URL pattern `name`, otherwise the value\nwill be interpreted as a context variable!\n\nStops the template engine from rendering the contents of this block tag.\n\nA common use is to allow a JavaScript template layer that collides with\nDjango\u2019s syntax. For example:\n\nYou can also designate a specific closing tag, allowing the use of `{%\nendverbatim %}` as part of the unrendered contents:\n\nFor creating bar charts and such, this tag calculates the ratio of a given\nvalue to a maximum value, and then applies that ratio to a constant.\n\nFor example:\n\nIf `this_value` is 175, `max_value` is 200, and `max_width` is 100, the image\nin the above example will be 88 pixels wide (because 175/200 = .875; .875 *\n100 = 87.5 which is rounded up to 88).\n\nIn some cases you might want to capture the result of `widthratio` in a\nvariable. It can be useful, for instance, in a `blocktranslate` like this:\n\nCaches a complex variable under a simpler name. This is useful when accessing\nan \u201cexpensive\u201d method (e.g., one that hits the database) multiple times.\n\nFor example:\n\nThe populated variable (in the example above, `total`) is only available\nbetween the `{% with %}` and `{% endwith %}` tags.\n\nYou can assign more than one context variable:\n\nNote\n\nThe previous more verbose format is still supported: `{% with\nbusiness.employees.count as total %}`\n\nAdds the argument to the value.\n\nFor example:\n\nIf `value` is `4`, then the output will be `6`.\n\nThis filter will first try to coerce both values to integers. If this fails,\nit\u2019ll attempt to add the values together anyway. This will work on some data\ntypes (strings, list, etc.) and fail on others. If it fails, the result will\nbe an empty string.\n\nFor example, if we have:\n\nand `first` is `[1, 2, 3]` and `second` is `[4, 5, 6]`, then the output will\nbe `[1, 2, 3, 4, 5, 6]`.\n\nWarning\n\nStrings that can be coerced to integers will be summed, not concatenated, as\nin the first example above.\n\nAdds slashes before quotes. Useful for escaping strings in CSV, for example.\n\nFor example:\n\nIf `value` is `\"I'm using Django\"`, the output will be `\"I\\'m using Django\"`.\n\nCapitalizes the first character of the value. If the first character is not a\nletter, this filter has no effect.\n\nFor example:\n\nIf `value` is `\"django\"`, the output will be `\"Django\"`.\n\nCenters the value in a field of a given width.\n\nFor example:\n\nIf `value` is `\"Django\"`, the output will be `\" Django \"`.\n\nRemoves all values of arg from the given string.\n\nFor example:\n\nIf `value` is `\"String with spaces\"`, the output will be `\"Stringwithspaces\"`.\n\nFormats a date according to the given format.\n\nUses a similar format to PHP\u2019s date() function with some differences.\n\nNote\n\nThese format characters are not used in Django outside of templates. They were\ndesigned to be compatible with PHP to ease transitioning for designers.\n\nAvailable format strings:\n\nFor example:\n\nIf `value` is a `datetime` object (e.g., the result of\n`datetime.datetime.now()`), the output will be the string `'Wed 09 Jan 2008'`.\n\nThe format passed can be one of the predefined ones `DATE_FORMAT`,\n`DATETIME_FORMAT`, `SHORT_DATE_FORMAT` or `SHORT_DATETIME_FORMAT`, or a custom\nformat that uses the format specifiers shown in the table above. Note that\npredefined formats may vary depending on the current locale.\n\nAssuming that `USE_L10N` is `True` and `LANGUAGE_CODE` is, for example,\n`\"es\"`, then for:\n\nthe output would be the string `\"09/01/2008\"` (the `\"SHORT_DATE_FORMAT\"`\nformat specifier for the `es` locale as shipped with Django is `\"d/m/Y\"`).\n\nWhen used without a format string, the `DATE_FORMAT` format specifier is used.\nAssuming the same settings as the previous example:\n\noutputs `9 de Enero de 2008` (the `DATE_FORMAT` format specifier for the `es`\nlocale is `r'j \\d\\e F \\d\\e Y'`). Both \u201cd\u201d and \u201ce\u201d are backslash-escaped,\nbecause otherwise each is a format string that displays the day and the\ntimezone name, respectively.\n\nYou can combine `date` with the `time` filter to render a full representation\nof a `datetime` value. E.g.:\n\nIf value evaluates to `False`, uses the given default. Otherwise, uses the\nvalue.\n\nFor example:\n\nIf `value` is `\"\"` (the empty string), the output will be `nothing`.\n\nIf (and only if) value is `None`, uses the given default. Otherwise, uses the\nvalue.\n\nNote that if an empty string is given, the default value will not be used. Use\nthe `default` filter if you want to fallback for empty strings.\n\nFor example:\n\nIf `value` is `None`, the output will be `nothing`.\n\nTakes a list of dictionaries and returns that list sorted by the key given in\nthe argument.\n\nFor example:\n\nIf `value` is:\n\nthen the output would be:\n\nYou can also do more complicated things like:\n\nIf `books` is:\n\nthen the output would be:\n\n`dictsort` can also order a list of lists (or any other object implementing\n`__getitem__()`) by elements at specified index. For example:\n\nIf `value` is:\n\nthen the output would be:\n\nYou must pass the index as an integer rather than a string. The following\nproduce empty output:\n\nTakes a list of dictionaries and returns that list sorted in reverse order by\nthe key given in the argument. This works exactly the same as the above\nfilter, but the returned value will be in reverse order.\n\nReturns `True` if the value is divisible by the argument.\n\nFor example:\n\nIf `value` is `21`, the output would be `True`.\n\nEscapes a string\u2019s HTML. Specifically, it makes these replacements:\n\nApplying `escape` to a variable that would normally have auto-escaping applied\nto the result will only result in one round of escaping being done. So it is\nsafe to use this function even in auto-escaping environments. If you want\nmultiple escaping passes to be applied, use the `force_escape` filter.\n\nFor example, you can apply `escape` to fields when `autoescape` is off:\n\nEscapes characters for use in JavaScript strings. This does not make the\nstring safe for use in HTML or JavaScript template literals, but does protect\nyou from syntax errors when using templates to generate JavaScript/JSON.\n\nFor example:\n\nIf `value` is `\"testing\\r\\njavascript 'string\\\" <b>escaping</b>\"`, the output\nwill be `\"testing\\\\u000D\\\\u000Ajavascript \\\\u0027string\\\\u0022\n\\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"`.\n\nFormats the value like a \u2018human-readable\u2019 file size (i.e. `'13 KB'`, `'4.1\nMB'`, `'102 bytes'`, etc.).\n\nFor example:\n\nIf `value` is 123456789, the output would be `117.7 MB`.\n\nFile sizes and SI units\n\nStrictly speaking, `filesizeformat` does not conform to the International\nSystem of Units which recommends using KiB, MiB, GiB, etc. when byte sizes are\ncalculated in powers of 1024 (which is the case here). Instead, Django uses\ntraditional unit names (KB, MB, GB, etc.) corresponding to names that are more\ncommonly used.\n\nReturns the first item in a list.\n\nFor example:\n\nIf `value` is the list `['a', 'b', 'c']`, the output will be `'a'`.\n\nWhen used without an argument, rounds a floating-point number to one decimal\nplace \u2013 but only if there\u2019s a decimal part to be displayed. For example:\n\nIf used with a numeric integer argument, `floatformat` rounds a number to that\nmany decimal places. For example:\n\nParticularly useful is passing 0 (zero) as the argument which will round the\nfloat to the nearest integer.\n\nIf the argument passed to `floatformat` is negative, it will round a number to\nthat many decimal places \u2013 but only if there\u2019s a decimal part to be displayed.\nFor example:\n\nIf the argument passed to `floatformat` has the `g` suffix, it will force\ngrouping by the `THOUSAND_SEPARATOR` for the active locale. For example, when\nthe active locale is `en` (English):\n\nOutput is always localized (independently of the `{% localize off %}` tag)\nunless the argument passed to `floatformat` has the `u` suffix, which will\nforce disabling localization. For example, when the active locale is `pl`\n(Polish):\n\nUsing `floatformat` with no argument is equivalent to using `floatformat` with\nan argument of `-1`.\n\nThe `g` suffix to force grouping by thousand separators was added.\n\n`floatformat` template filter no longer depends on the `USE_L10N` setting and\nalways returns localized output.\n\nThe `u` suffix to force disabling localization was added.\n\nApplies HTML escaping to a string (see the `escape` filter for details). This\nfilter is applied immediately and returns a new, escaped string. This is\nuseful in the rare cases where you need multiple escaping or want to apply\nother filters to the escaped results. Normally, you want to use the `escape`\nfilter.\n\nFor example, if you want to catch the `<p>` HTML elements created by the\n`linebreaks` filter:\n\nGiven a whole number, returns the requested digit, where 1 is the right-most\ndigit, 2 is the second-right-most digit, etc. Returns the original value for\ninvalid input (if input or argument is not an integer, or if argument is less\nthan 1). Otherwise, output is always an integer.\n\nFor example:\n\nIf `value` is `123456789`, the output will be `8`.\n\nConverts an IRI (Internationalized Resource Identifier) to a string that is\nsuitable for including in a URL. This is necessary if you\u2019re trying to use\nstrings containing non-ASCII characters in a URL.\n\nIt\u2019s safe to use this filter on a string that has already gone through the\n`urlencode` filter.\n\nFor example:\n\nIf `value` is `\"?test=1&me=2\"`, the output will be `\"?test=1&amp;me=2\"`.\n\nJoins a list with a string, like Python\u2019s `str.join(list)`\n\nFor example:\n\nIf `value` is the list `['a', 'b', 'c']`, the output will be the string `\"a //\nb // c\"`.\n\nSafely outputs a Python object as JSON, wrapped in a `<script>` tag, ready for\nuse with JavaScript.\n\nArgument: HTML \u201cid\u201d of the `<script>` tag.\n\nFor example:\n\nIf `value` is the dictionary `{'hello': 'world'}`, the output will be:\n\nThe resulting data can be accessed in JavaScript like this:\n\nXSS attacks are mitigated by escaping the characters \u201c<\u201d, \u201c>\u201d and \u201c&\u201d. For\nexample if `value` is `{'hello': 'world</script>&amp;'}`, the output is:\n\nThis is compatible with a strict Content Security Policy that prohibits in-\npage script execution. It also maintains a clean separation between passive\ndata and executable code.\n\nReturns the last item in a list.\n\nFor example:\n\nIf `value` is the list `['a', 'b', 'c', 'd']`, the output will be the string\n`\"d\"`.\n\nReturns the length of the value. This works for both strings and lists.\n\nFor example:\n\nIf `value` is `['a', 'b', 'c', 'd']` or `\"abcd\"`, the output will be `4`.\n\nThe filter returns `0` for an undefined variable.\n\nReturns `True` if the value\u2019s length is the argument, or `False` otherwise.\n\nFor example:\n\nIf `value` is `['a', 'b', 'c', 'd']` or `\"abcd\"`, the output will be `True`.\n\nReplaces line breaks in plain text with appropriate HTML; a single newline\nbecomes an HTML line break (`<br>`) and a new line followed by a blank line\nbecomes a paragraph break (`</p>`).\n\nFor example:\n\nIf `value` is `Joel\\nis a slug`, the output will be `<p>Joel<br>is a\nslug</p>`.\n\nConverts all newlines in a piece of plain text to HTML line breaks (`<br>`).\n\nFor example:\n\nIf `value` is `Joel\\nis a slug`, the output will be `Joel<br>is a slug`.\n\nDisplays text with line numbers.\n\nFor example:\n\nIf `value` is:\n\nthe output will be:\n\nLeft-aligns the value in a field of a given width.\n\nArgument: field size\n\nFor example:\n\nIf `value` is `Django`, the output will be `\"Django \"`.\n\nConverts a string into all lowercase.\n\nFor example:\n\nIf `value` is `Totally LOVING this Album!`, the output will be `totally loving\nthis album!`.\n\nReturns the value turned into a list. For a string, it\u2019s a list of characters.\nFor an integer, the argument is cast to a string before creating a list.\n\nFor example:\n\nIf `value` is the string `\"Joel\"`, the output would be the list `['J', 'o',\n'e', 'l']`. If `value` is `123`, the output will be the list `['1', '2',\n'3']`.\n\nConverts a phone number (possibly containing letters) to its numerical\nequivalent.\n\nThe input doesn\u2019t have to be a valid phone number. This will happily convert\nany string.\n\nFor example:\n\nIf `value` is `800-COLLECT`, the output will be `800-2655328`.\n\nReturns a plural suffix if the value is not `1`, `'1'`, or an object of length\n1. By default, this suffix is `'s'`.\n\nExample:\n\nIf `num_messages` is `1`, the output will be `You have 1 message.` If\n`num_messages` is `2` the output will be `You have 2 messages.`\n\nFor words that require a suffix other than `'s'`, you can provide an alternate\nsuffix as a parameter to the filter.\n\nExample:\n\nFor words that don\u2019t pluralize by simple suffix, you can specify both a\nsingular and plural suffix, separated by a comma.\n\nExample:\n\nNote\n\nUse `blocktranslate` to pluralize translated strings.\n\nA wrapper around `pprint.pprint()` \u2013 for debugging, really.\n\nReturns a random item from the given list.\n\nFor example:\n\nIf `value` is the list `['a', 'b', 'c', 'd']`, the output could be `\"b\"`.\n\nRight-aligns the value in a field of a given width.\n\nArgument: field size\n\nFor example:\n\nIf `value` is `Django`, the output will be `\" Django\"`.\n\nMarks a string as not requiring further HTML escaping prior to output. When\nautoescaping is off, this filter has no effect.\n\nNote\n\nIf you are chaining filters, a filter applied after `safe` can make the\ncontents unsafe again. For example, the following code prints the variable as\nis, unescaped:\n\nApplies the `safe` filter to each element of a sequence. Useful in conjunction\nwith other filters that operate on sequences, such as `join`. For example:\n\nYou couldn\u2019t use the `safe` filter directly in this case, as it would first\nconvert the variable into a string, rather than working with the individual\nelements of the sequence.\n\nReturns a slice of the list.\n\nUses the same syntax as Python\u2019s list slicing. See\nhttps://diveinto.org/python3/native-datatypes.html#slicinglists for an\nintroduction.\n\nExample:\n\nIf `some_list` is `['a', 'b', 'c']`, the output will be `['a', 'b']`.\n\nConverts to ASCII. Converts spaces to hyphens. Removes characters that aren\u2019t\nalphanumerics, underscores, or hyphens. Converts to lowercase. Also strips\nleading and trailing whitespace.\n\nFor example:\n\nIf `value` is `\"Joel is a slug\"`, the output will be `\"joel-is-a-slug\"`.\n\nFormats the variable according to the argument, a string formatting specifier.\nThis specifier uses the printf-style String Formatting syntax, with the\nexception that the leading \u201c%\u201d is dropped.\n\nFor example:\n\nIf `value` is `10`, the output will be `1.000000E+01`.\n\nMakes all possible efforts to strip all [X]HTML tags.\n\nFor example:\n\nIf `value` is `\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`, the\noutput will be `\"Joel is a slug\"`.\n\nNo safety guarantee\n\nNote that `striptags` doesn\u2019t give any guarantee about its output being HTML\nsafe, particularly with non valid HTML input. So NEVER apply the `safe` filter\nto a `striptags` output. If you are looking for something more robust, you can\nuse the `bleach` Python library, notably its clean method.\n\nFormats a time according to the given format.\n\nGiven format can be the predefined one `TIME_FORMAT`, or a custom format, same\nas the `date` filter. Note that the predefined format is locale-dependent.\n\nFor example:\n\nIf `value` is equivalent to `datetime.datetime.now()`, the output will be the\nstring `\"01:23\"`.\n\nNote that you can backslash-escape a format string if you want to use the\n\u201craw\u201d value. In this example, both \u201ch\u201d and \u201cm\u201d are backslash-escaped, because\notherwise each is a format string that displays the hour and the month,\nrespectively:\n\nThis would display as \u201c01h 23m\u201d.\n\nAnother example:\n\nAssuming that `USE_L10N` is `True` and `LANGUAGE_CODE` is, for example,\n`\"de\"`, then for:\n\nthe output will be the string `\"01:23\"` (The `\"TIME_FORMAT\"` format specifier\nfor the `de` locale as shipped with Django is `\"H:i\"`).\n\nThe `time` filter will only accept parameters in the format string that relate\nto the time of day, not the date. If you need to format a `date` value, use\nthe `date` filter instead (or along with `time` if you need to render a full\n`datetime` value).\n\nThere is one exception the above rule: When passed a `datetime` value with\nattached timezone information (a time-zone-aware `datetime` instance) the\n`time` filter will accept the timezone-related format specifiers `'e'`, `'O'`\n, `'T'` and `'Z'`.\n\nWhen used without a format string, the `TIME_FORMAT` format specifier is used:\n\nis the same as:\n\nFormats a date as the time since that date (e.g., \u201c4 days, 6 hours\u201d).\n\nTakes an optional argument that is a variable containing the date to use as\nthe comparison point (without the argument, the comparison point is now). For\nexample, if `blog_date` is a date instance representing midnight on 1 June\n2006, and `comment_date` is a date instance for 08:00 on 1 June 2006, then the\nfollowing would return \u201c8 hours\u201d:\n\nComparing offset-naive and offset-aware datetimes will return an empty string.\n\nMinutes is the smallest unit used, and \u201c0 minutes\u201d will be returned for any\ndate that is in the future relative to the comparison point.\n\nSimilar to `timesince`, except that it measures the time from now until the\ngiven date or datetime. For example, if today is 1 June 2006 and\n`conference_date` is a date instance holding 29 June 2006, then `{{\nconference_date|timeuntil }}` will return \u201c4 weeks\u201d.\n\nTakes an optional argument that is a variable containing the date to use as\nthe comparison point (instead of now). If `from_date` contains 22 June 2006,\nthen the following will return \u201c1 week\u201d:\n\nComparing offset-naive and offset-aware datetimes will return an empty string.\n\nMinutes is the smallest unit used, and \u201c0 minutes\u201d will be returned for any\ndate that is in the past relative to the comparison point.\n\nConverts a string into titlecase by making words start with an uppercase\ncharacter and the remaining characters lowercase. This tag makes no effort to\nkeep \u201ctrivial words\u201d in lowercase.\n\nFor example:\n\nIf `value` is `\"my FIRST post\"`, the output will be `\"My First Post\"`.\n\nTruncates a string if it is longer than the specified number of characters.\nTruncated strings will end with a translatable ellipsis character (\u201c\u2026\u201d).\n\nArgument: Number of characters to truncate to\n\nFor example:\n\nIf `value` is `\"Joel is a slug\"`, the output will be `\"Joel i\u2026\"`.\n\nSimilar to `truncatechars`, except that it is aware of HTML tags. Any tags\nthat are opened in the string and not closed before the truncation point are\nclosed immediately after the truncation.\n\nFor example:\n\nIf `value` is `\"<p>Joel is a slug</p>\"`, the output will be `\"<p>Joel\ni\u2026</p>\"`.\n\nNewlines in the HTML content will be preserved.\n\nTruncates a string after a certain number of words.\n\nArgument: Number of words to truncate after\n\nFor example:\n\nIf `value` is `\"Joel is a slug\"`, the output will be `\"Joel is \u2026\"`.\n\nNewlines within the string will be removed.\n\nSimilar to `truncatewords`, except that it is aware of HTML tags. Any tags\nthat are opened in the string and not closed before the truncation point, are\nclosed immediately after the truncation.\n\nThis is less efficient than `truncatewords`, so should only be used when it is\nbeing passed HTML text.\n\nFor example:\n\nIf `value` is `\"<p>Joel is a slug</p>\"`, the output will be `\"<p>Joel is\n\u2026</p>\"`.\n\nNewlines in the HTML content will be preserved.\n\nRecursively takes a self-nested list and returns an HTML unordered list \u2013\nWITHOUT opening and closing <ul> tags.\n\nThe list is assumed to be in the proper format. For example, if `var` contains\n`['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]`, then `{{\nvar|unordered_list }}` would return:\n\nConverts a string into all uppercase.\n\nFor example:\n\nIf `value` is `\"Joel is a slug\"`, the output will be `\"JOEL IS A SLUG\"`.\n\nEscapes a value for use in a URL.\n\nFor example:\n\nIf `value` is `\"https://www.example.org/foo?a=b&c=d\"`, the output will be\n`\"https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\"`.\n\nAn optional argument containing the characters which should not be escaped can\nbe provided.\n\nIf not provided, the \u2018/\u2019 character is assumed safe. An empty string can be\nprovided when all characters should be escaped. For example:\n\nIf `value` is `\"https://www.example.org/\"`, the output will be\n`\"https%3A%2F%2Fwww.example.org%2F\"`.\n\nConverts URLs and email addresses in text into clickable links.\n\nThis template tag works on links prefixed with `http://`, `https://`, or\n`www.`. For example, `https://goo.gl/aia1t` will get converted but\n`goo.gl/aia1t` won\u2019t.\n\nIt also supports domain-only links ending in one of the original top level\ndomains (`.com`, `.edu`, `.gov`, `.int`, `.mil`, `.net`, and `.org`). For\nexample, `djangoproject.com` gets converted.\n\nLinks can have trailing punctuation (periods, commas, close-parens) and\nleading punctuation (opening parens), and `urlize` will still do the right\nthing.\n\nLinks generated by `urlize` have a `rel=\"nofollow\"` attribute added to them.\n\nFor example:\n\nIf `value` is `\"Check out www.djangoproject.com\"`, the output will be `\"Check\nout <a href=\"http://www.djangoproject.com\"\nrel=\"nofollow\">www.djangoproject.com</a>\"`.\n\nIn addition to web links, `urlize` also converts email addresses into\n`mailto:` links. If `value` is `\"Send questions to foo@example.com\"`, the\noutput will be `\"Send questions to <a\nhref=\"mailto:foo@example.com\">foo@example.com</a>\"`.\n\nThe `urlize` filter also takes an optional parameter `autoescape`. If\n`autoescape` is `True`, the link text and URLs will be escaped using Django\u2019s\nbuilt-in `escape` filter. The default value for `autoescape` is `True`.\n\nNote\n\nIf `urlize` is applied to text that already contains HTML markup, or to email\naddresses that contain single quotes (`'`), things won\u2019t work as expected.\nApply this filter only to plain text.\n\nConverts URLs and email addresses into clickable links just like urlize, but\ntruncates URLs longer than the given character limit.\n\nArgument: Number of characters that link text should be truncated to,\nincluding the ellipsis that\u2019s added if truncation is necessary.\n\nFor example:\n\nIf `value` is `\"Check out www.djangoproject.com\"`, the output would be `'Check\nout <a href=\"http://www.djangoproject.com\"\nrel=\"nofollow\">www.djangoproj\u2026</a>'`.\n\nAs with urlize, this filter should only be applied to plain text.\n\nReturns the number of words.\n\nFor example:\n\nIf `value` is `\"Joel is a slug\"`, the output will be `4`.\n\nWraps words at specified line length.\n\nArgument: number of characters at which to wrap the text\n\nFor example:\n\nIf `value` is `Joel is a slug`, the output would be:\n\nMaps values for `True`, `False`, and (optionally) `None`, to the strings\n\u201cyes\u201d, \u201cno\u201d, \u201cmaybe\u201d, or a custom mapping passed as a comma-separated list,\nand returns one of those strings according to the value:\n\nFor example:\n\nDjango provides template tags and filters to control each aspect of\ninternationalization in templates. They allow for granular control of\ntranslations, formatting, and time zone conversions.\n\nThis library allows specifying translatable text in templates. To enable it,\nset `USE_I18N` to `True`, then load it with `{% load i18n %}`.\n\nSee Internationalization: in template code.\n\nThis library provides control over the localization of values in templates.\nYou only need to load the library using `{% load l10n %}`, but you\u2019ll often\nset `USE_L10N` to `True` so that localization is active by default.\n\nSee Controlling localization in templates.\n\nThis library provides control over time zone conversions in templates. Like\n`l10n`, you only need to load the library using `{% load tz %}`, but you\u2019ll\nusually also set `USE_TZ` to `True` so that conversion to local time happens\nby default.\n\nSee Time zone aware output in templates.\n\nDjango comes with a couple of other template-tag libraries that you have to\nenable explicitly in your `INSTALLED_APPS` setting and enable in your template\nwith the `{% load %}` tag.\n\nA set of Django template filters useful for adding a \u201chuman touch\u201d to data.\nSee django.contrib.humanize.\n\nTo link to static files that are saved in `STATIC_ROOT` Django ships with a\n`static` template tag. If the `django.contrib.staticfiles` app is installed,\nthe tag will serve files using `url()` method of the storage specified by\n`STATICFILES_STORAGE`. For example:\n\nIt is also able to consume standard context variables, e.g. assuming a\n`user_stylesheet` variable is passed to the template:\n\nIf you\u2019d like to retrieve a static URL without displaying it, you can use a\nslightly different call:\n\nUsing Jinja2 templates?\n\nSee `Jinja2` for information on using the `static` tag with Jinja2.\n\nYou should prefer the `static` template tag, but if you need more control over\nexactly where and how `STATIC_URL` is injected into the template, you can use\nthe `get_static_prefix` template tag:\n\nThere\u2019s also a second form you can use to avoid extra processing if you need\nthe value multiple times:\n\nSimilar to the `get_static_prefix`, `get_media_prefix` populates a template\nvariable with the media prefix `MEDIA_URL`, e.g.:\n\nBy storing the value in a data attribute, we ensure it\u2019s escaped appropriately\nif we want to use it in a JavaScript context.\n\n"}, {"name": "Built-in Views", "path": "ref/views", "type": "API", "text": "\nSeveral of Django\u2019s built-in views are documented in Writing views as well as\nelsewhere in the documentation.\n\nThere may be files other than your project\u2019s static assets that, for\nconvenience, you\u2019d like to have Django serve for you in local development. The\n`serve()` view can be used to serve any directory you give it. (This view is\nnot hardened for production use and should be used only as a development aid;\nyou should serve these files in production using a real front-end web server).\n\nThe most likely example is user-uploaded content in `MEDIA_ROOT`.\n`django.contrib.staticfiles` is intended for static assets and has no built-in\nhandling for user-uploaded files, but you can have Django serve your\n`MEDIA_ROOT` by appending something like this to your URLconf:\n\nNote, the snippet assumes your `MEDIA_URL` has a value of `'media/'`. This\nwill call the `serve()` view, passing in the path from the URLconf and the\n(required) `document_root` parameter.\n\nSince it can become a bit cumbersome to define this URL pattern, Django ships\nwith a small URL helper function `static()` that takes as parameters the\nprefix such as `MEDIA_URL` and a dotted path to a view, such as\n`'django.views.static.serve'`. Any other function parameter will be\ntransparently passed to the view.\n\nDjango comes with a few views by default for handling HTTP errors. To override\nthese with your own custom views, see Customizing error views.\n\nWhen you raise `Http404` from within a view, Django loads a special view\ndevoted to handling 404 errors. By default, it\u2019s the view\n`django.views.defaults.page_not_found()`, which either produces a \u201cNot Found\u201d\nmessage or loads and renders the template `404.html` if you created it in your\nroot template directory.\n\nThe default 404 view will pass two variables to the template: `request_path`,\nwhich is the URL that resulted in the error, and `exception`, which is a\nuseful representation of the exception that triggered the view (e.g.\ncontaining any message passed to a specific `Http404` instance).\n\nThree things to note about 404 views:\n\nSimilarly, Django executes special-case behavior in the case of runtime errors\nin view code. If a view results in an exception, Django will, by default, call\nthe view `django.views.defaults.server_error`, which either produces a \u201cServer\nError\u201d message or loads and renders the template `500.html` if you created it\nin your root template directory.\n\nThe default 500 view passes no variables to the `500.html` template and is\nrendered with an empty `Context` to lessen the chance of additional errors.\n\nIf `DEBUG` is set to `True` (in your settings module), then your 500 view will\nnever be used, and the traceback will be displayed instead, with some debug\ninformation.\n\nIn the same vein as the 404 and 500 views, Django has a view to handle 403\nForbidden errors. If a view results in a 403 exception then Django will, by\ndefault, call the view `django.views.defaults.permission_denied`.\n\nThis view loads and renders the template `403.html` in your root template\ndirectory, or if this file does not exist, instead serves the text \u201c403\nForbidden\u201d, as per RFC 7231#section-6.5.3 (the HTTP 1.1 Specification). The\ntemplate context contains `exception`, which is the string representation of\nthe exception that triggered the view.\n\n`django.views.defaults.permission_denied` is triggered by a `PermissionDenied`\nexception. To deny access in a view you can use code like this:\n\nWhen a `SuspiciousOperation` is raised in Django, it may be handled by a\ncomponent of Django (for example resetting the session data). If not\nspecifically handled, Django will consider the current request a \u2018bad request\u2019\ninstead of a server error.\n\n`django.views.defaults.bad_request`, is otherwise very similar to the\n`server_error` view, but returns with the status code 400 indicating that the\nerror condition was the result of a client operation. By default, nothing\nrelated to the exception that triggered the view is passed to the template\ncontext, as the exception message might contain sensitive information like\nfilesystem paths.\n\n`bad_request` views are also only used when `DEBUG` is `False`.\n\n"}, {"name": "Class-based views", "path": "topics/class-based-views/index", "type": "Guides", "text": "\nA view is a callable which takes a request and returns a response. This can be\nmore than just a function, and Django provides an example of some classes\nwhich can be used as views. These allow you to structure your views and reuse\ncode by harnessing inheritance and mixins. There are also some generic views\nfor tasks which we\u2019ll get to later, but you may want to design your own\nstructure of reusable views which suits your use case. For full details, see\nthe class-based views reference documentation.\n\nDjango provides base view classes which will suit a wide range of\napplications. All views inherit from the `View` class, which handles linking\nthe view into the URLs, HTTP method dispatching and other common features.\n`RedirectView` provides a HTTP redirect, and `TemplateView` extends the base\nclass to make it also render a template.\n\nThe most direct way to use generic views is to create them directly in your\nURLconf. If you\u2019re only changing a few attributes on a class-based view, you\ncan pass them into the `as_view()` method call itself:\n\nAny arguments passed to `as_view()` will override attributes set on the class.\nIn this example, we set `template_name` on the `TemplateView`. A similar\noverriding pattern can be used for the `url` attribute on `RedirectView`.\n\nThe second, more powerful way to use generic views is to inherit from an\nexisting view and override attributes (such as the `template_name`) or methods\n(such as `get_context_data`) in your subclass to provide new values or\nmethods. Consider, for example, a view that just displays one template,\n`about.html`. Django has a generic view to do this - `TemplateView` \\- so we\ncan subclass it, and override the template name:\n\nThen we need to add this new view into our URLconf. `TemplateView` is a class,\nnot a function, so we point the URL to the `as_view()` class method instead,\nwhich provides a function-like entry to class-based views:\n\nFor more information on how to use the built in generic views, consult the\nnext topic on generic class-based views.\n\nSuppose somebody wants to access our book library over HTTP using the views as\nan API. The API client would connect every now and then and download book data\nfor the books published since last visit. But if no new books appeared since\nthen, it is a waste of CPU time and bandwidth to fetch the books from the\ndatabase, render a full response and send it to the client. It might be\npreferable to ask the API when the most recent book was published.\n\nWe map the URL to book list view in the URLconf:\n\nAnd the view:\n\nIf the view is accessed from a `GET` request, an object list is returned in\nthe response (using the `book_list.html` template). But if the client issues a\n`HEAD` request, the response has an empty body and the `Last-Modified` header\nindicates when the most recent book was published. Based on this information,\nthe client may or may not download the full object list.\n\n"}, {"name": "Class-based views mixins", "path": "ref/class-based-views/mixins", "type": "API", "text": "\nClass-based views API reference. For introductory material, see Using mixins\nwith class-based views.\n\n"}, {"name": "Clickjacking Protection", "path": "ref/clickjacking", "type": "API", "text": "\nThe clickjacking middleware and decorators provide easy-to-use protection\nagainst clickjacking. This type of attack occurs when a malicious site tricks\na user into clicking on a concealed element of another site which they have\nloaded in a hidden frame or iframe.\n\nSuppose an online store has a page where a logged in user can click \u201cBuy Now\u201d\nto purchase an item. A user has chosen to stay logged into the store all the\ntime for convenience. An attacker site might create an \u201cI Like Ponies\u201d button\non one of their own pages, and load the store\u2019s page in a transparent iframe\nsuch that the \u201cBuy Now\u201d button is invisibly overlaid on the \u201cI Like Ponies\u201d\nbutton. If the user visits the attacker\u2019s site, clicking \u201cI Like Ponies\u201d will\ncause an inadvertent click on the \u201cBuy Now\u201d button and an unknowing purchase\nof the item.\n\nModern browsers honor the X-Frame-Options HTTP header that indicates whether\nor not a resource is allowed to load within a frame or iframe. If the response\ncontains the header with a value of `SAMEORIGIN` then the browser will only\nload the resource in a frame if the request originated from the same site. If\nthe header is set to `DENY` then the browser will block the resource from\nloading in a frame no matter which site made the request.\n\nDjango provides a few ways to include this header in responses from your site:\n\nThe `X-Frame-Options` HTTP header will only be set by the middleware or view\ndecorators if it is not already present in the response.\n\nTo set the same `X-Frame-Options` value for all responses in your site, put\n`'django.middleware.clickjacking.XFrameOptionsMiddleware'` to `MIDDLEWARE`:\n\nThis middleware is enabled in the settings file generated by `startproject`.\n\nBy default, the middleware will set the `X-Frame-Options` header to `DENY` for\nevery outgoing `HttpResponse`. If you want any other value for this header\ninstead, set the `X_FRAME_OPTIONS` setting:\n\nWhen using the middleware there may be some views where you do not want the\n`X-Frame-Options` header set. For those cases, you can use a view decorator\nthat tells the middleware not to set the header:\n\nNote\n\nIf you want to submit a form or access a session cookie within a frame or\niframe, you may need to modify the `CSRF_COOKIE_SAMESITE` or\n`SESSION_COOKIE_SAMESITE` settings.\n\nTo set the `X-Frame-Options` header on a per view basis, Django provides these\ndecorators:\n\nNote that you can use the decorators in conjunction with the middleware. Use\nof a decorator overrides the middleware.\n\nThe `X-Frame-Options` header will only protect against clickjacking in a\nmodern browser. Older browsers will quietly ignore the header and need other\nclickjacking prevention techniques.\n\nA complete list of browsers supporting `X-Frame-Options`.\n\n"}, {"name": "Conditional Expressions", "path": "ref/models/conditional-expressions", "type": "API", "text": "\nConditional expressions let you use `if` \u2026 `elif` \u2026 `else` logic within\nfilters, annotations, aggregations, and updates. A conditional expression\nevaluates a series of conditions for each row of a table and returns the\nmatching result expression. Conditional expressions can also be combined and\nnested like other expressions.\n\nWe\u2019ll be using the following model in the subsequent examples:\n\nA `When()` object is used to encapsulate a condition and its result for use in\nthe conditional expression. Using a `When()` object is similar to using the\n`filter()` method. The condition can be specified using field lookups, `Q`\nobjects, or `Expression` objects that have an `output_field` that is a\n`BooleanField`. The result is provided using the `then` keyword.\n\nSupport for lookup expressions was added.\n\nSome examples:\n\nKeep in mind that each of these values can be an expression.\n\nNote\n\nSince the `then` keyword argument is reserved for the result of the `When()`,\nthere is a potential conflict if a `Model` has a field named `then`. This can\nbe resolved in two ways:\n\nSupport for using the `condition` argument with `lookups` was added.\n\nA `Case()` expression is like the `if` \u2026 `elif` \u2026 `else` statement in\n`Python`. Each `condition` in the provided `When()` objects is evaluated in\norder, until one evaluates to a truthful value. The `result` expression from\nthe matching `When()` object is returned.\n\nAn example:\n\n`Case()` accepts any number of `When()` objects as individual arguments. Other\noptions are provided using keyword arguments. If none of the conditions\nevaluate to `TRUE`, then the expression given with the `default` keyword\nargument is returned. If a `default` argument isn\u2019t provided, `None` is used.\n\nIf we wanted to change our previous query to get the discount based on how\nlong the `Client` has been with us, we could do so using lookups:\n\nNote\n\nRemember that the conditions are evaluated in order, so in the above example\nwe get the correct result even though the second condition matches both Jane\nDoe and Jack Black. This works just like an `if` \u2026 `elif` \u2026 `else` statement\nin `Python`.\n\n`Case()` also works in a `filter()` clause. For example, to find gold clients\nthat registered more than a month ago and platinum clients that registered\nmore than a year ago:\n\nConditional expressions can be used in annotations, aggregations, filters,\nlookups, and updates. They can also be combined and nested with other\nexpressions. This allows you to make powerful conditional queries.\n\nLet\u2019s say we want to change the `account_type` for our clients to match their\nregistration dates. We can do this using a conditional expression and the\n`update()` method:\n\nWhat if we want to find out how many clients there are for each\n`account_type`? We can use the `filter` argument of aggregate functions to\nachieve this:\n\nThis aggregate produces a query with the SQL 2003 `FILTER WHERE` syntax on\ndatabases that support it:\n\nOn other databases, this is emulated using a `CASE` statement:\n\nThe two SQL statements are functionally equivalent but the more explicit\n`FILTER` may perform better.\n\nWhen a conditional expression returns a boolean value, it is possible to use\nit directly in filters. This means that it will not be added to the `SELECT`\ncolumns, but you can still use it to filter results:\n\nIn SQL terms, that evaluates to:\n\n"}, {"name": "Conditional View Processing", "path": "topics/conditional-view-processing", "type": "Guides", "text": "\nHTTP clients can send a number of headers to tell the server about copies of a\nresource that they have already seen. This is commonly used when retrieving a\nweb page (using an HTTP `GET` request) to avoid sending all the data for\nsomething the client has already retrieved. However, the same headers can be\nused for all HTTP methods (`POST`, `PUT`, `DELETE`, etc.).\n\nFor each page (response) that Django sends back from a view, it might provide\ntwo HTTP headers: the `ETag` header and the `Last-Modified` header. These\nheaders are optional on HTTP responses. They can be set by your view function,\nor you can rely on the `ConditionalGetMiddleware` middleware to set the `ETag`\nheader.\n\nWhen the client next requests the same resource, it might send along a header\nsuch as either If-modified-since or If-unmodified-since, containing the date\nof the last modification time it was sent, or either If-match or If-none-\nmatch, containing the last `ETag` it was sent. If the current version of the\npage matches the `ETag` sent by the client, or if the resource has not been\nmodified, a 304 status code can be sent back, instead of a full response,\ntelling the client that nothing has changed. Depending on the header, if the\npage has been modified or does not match the `ETag` sent by the client, a 412\nstatus code (Precondition Failed) may be returned.\n\nWhen you need more fine-grained control you may use per-view conditional\nprocessing functions.\n\nSometimes (in fact, quite often) you can create functions to rapidly compute\nthe ETag value or the last-modified time for a resource, without needing to do\nall the computations needed to construct the full view. Django can then use\nthese functions to provide an \u201cearly bailout\u201d option for the view processing.\nTelling the client that the content has not been modified since the last\nrequest, perhaps.\n\nThese two functions are passed as parameters to the\n`django.views.decorators.http.condition` decorator. This decorator uses the\ntwo functions (you only need to supply one, if you can\u2019t compute both\nquantities easily and quickly) to work out if the headers in the HTTP request\nmatch those on the resource. If they don\u2019t match, a new copy of the resource\nmust be computed and your normal view is called.\n\nThe `condition` decorator\u2019s signature looks like this:\n\nThe two functions, to compute the ETag and the last modified time, will be\npassed the incoming `request` object and the same parameters, in the same\norder, as the view function they are helping to wrap. The function passed\n`last_modified_func` should return a standard datetime value specifying the\nlast time the resource was modified, or `None` if the resource doesn\u2019t exist.\nThe function passed to the `etag` decorator should return a string\nrepresenting the ETag for the resource, or `None` if it doesn\u2019t exist.\n\nThe decorator sets the `ETag` and `Last-Modified` headers on the response if\nthey are not already set by the view and if the request\u2019s method is safe\n(`GET` or `HEAD`).\n\nUsing this feature usefully is probably best explained with an example.\nSuppose you have this pair of models, representing a small blog system:\n\nIf the front page, displaying the latest blog entries, only changes when you\nadd a new blog entry, you can compute the last modified time very quickly. You\nneed the latest `published` date for every entry associated with that blog.\nOne way to do this would be:\n\nYou can then use this function to provide early detection of an unchanged page\nfor your front page view:\n\nBe careful with the order of decorators\n\nWhen `condition()` returns a conditional response, any decorators below it\nwill be skipped and won\u2019t apply to the response. Therefore, any decorators\nthat need to apply to both the regular view response and a conditional\nresponse must be above `condition()`. In particular, `vary_on_cookie()`,\n`vary_on_headers()`, and `cache_control()` should come first because RFC 7232\nrequires that the headers they set be present on 304 responses.\n\nAs a general rule, if you can provide functions to compute both the ETag and\nthe last modified time, you should do so. You don\u2019t know which headers any\ngiven HTTP client will send you, so be prepared to handle both. However,\nsometimes only one value is easy to compute and Django provides decorators\nthat handle only ETag or only last-modified computations.\n\nThe `django.views.decorators.http.etag` and\n`django.views.decorators.http.last_modified` decorators are passed the same\ntype of functions as the `condition` decorator. Their signatures are:\n\nWe could write the earlier example, which only uses a last-modified function,\nusing one of these decorators:\n\n\u2026or:\n\nIt might look nicer to some people to try and chain the `etag` and\n`last_modified` decorators if you want to test both preconditions. However,\nthis would lead to incorrect behavior.\n\nThe first decorator doesn\u2019t know anything about the second and might answer\nthat the response is not modified even if the second decorators would\ndetermine otherwise. The `condition` decorator uses both callback functions\nsimultaneously to work out the right action to take.\n\nThe `condition` decorator is useful for more than only `GET` and `HEAD`\nrequests (`HEAD` requests are the same as `GET` in this situation). It can\nalso be used to provide checking for `POST`, `PUT` and `DELETE` requests. In\nthese situations, the idea isn\u2019t to return a \u201cnot modified\u201d response, but to\ntell the client that the resource they are trying to change has been altered\nin the meantime.\n\nFor example, consider the following exchange between the client and server:\n\nThe important thing this example shows is that the same functions can be used\nto compute the ETag and last modification values in all situations. In fact,\nyou should use the same functions, so that the same values are returned every\ntime.\n\nValidator headers with non-safe request methods\n\nThe `condition` decorator only sets validator headers (`ETag` and `Last-\nModified`) for safe HTTP methods, i.e. `GET` and `HEAD`. If you wish to return\nthem in other cases, set them in your view. See RFC 7231#section-4.3.4 to\nlearn about the distinction between setting a validator header in response to\nrequests made with `PUT` versus `POST`.\n\nDjango provides conditional `GET` handling via\n`django.middleware.http.ConditionalGetMiddleware`. While being suitable for\nmany situations, the middleware has limitations for advanced usage:\n\nYou should choose the most appropriate tool for your particular problem here.\nIf you have a way to compute ETags and modification times quickly and if some\nview takes a while to generate the content, you should consider using the\n`condition` decorator described in this document. If everything already runs\nfairly quickly, stick to using the middleware and the amount of network\ntraffic sent back to the clients will still be reduced if the view hasn\u2019t\nchanged.\n\n"}, {"name": "conf.settings.configure()", "path": "topics/settings#django.conf.settings.configure", "type": "django.conf", "text": "\n\n"}, {"name": "conf.urls.handler400", "path": "ref/urls#django.conf.urls.handler400", "type": "django.conf", "text": "\n\n"}, {"name": "conf.urls.handler403", "path": "ref/urls#django.conf.urls.handler403", "type": "django.conf", "text": "\n\n"}, {"name": "conf.urls.handler404", "path": "ref/urls#django.conf.urls.handler404", "type": "django.conf", "text": "\n\n"}, {"name": "conf.urls.handler500", "path": "ref/urls#django.conf.urls.handler500", "type": "django.conf", "text": "\n\n"}, {"name": "conf.urls.i18n.i18n_patterns()", "path": "topics/i18n/translation#django.conf.urls.i18n.i18n_patterns", "type": "django.conf", "text": "\n\n"}, {"name": "conf.urls.static.static()", "path": "ref/urls#django.conf.urls.static.static", "type": "django.conf", "text": "\n\n"}, {"name": "Constraints reference", "path": "ref/models/constraints", "type": "API", "text": "\nThe classes defined in this module create database constraints. They are added\nin the model `Meta.constraints` option.\n\nReferencing built-in constraints\n\nConstraints are defined in `django.db.models.constraints`, but for convenience\nthey\u2019re imported into `django.db.models`. The standard convention is to use\n`from django.db import models` and refer to the constraints as\n`models.<Foo>Constraint`.\n\nConstraints in abstract base classes\n\nYou must always specify a unique name for the constraint. As such, you cannot\nnormally specify a constraint on an abstract base class, since the\n`Meta.constraints` option is inherited by subclasses, with exactly the same\nvalues for the attributes (including `name`) each time. To work around name\ncollisions, part of the name may contain `'%(app_label)s'` and `'%(class)s'`,\nwhich are replaced, respectively, by the lowercased app label and class name\nof the concrete model. For example `CheckConstraint(check=Q(age__gte=18),\nname='%(app_label)s_%(class)s_is_adult')`.\n\nValidation of Constraints\n\nIn general constraints are not checked during `full_clean()`, and do not raise\n`ValidationError`s. Rather you\u2019ll get a database integrity error on `save()`.\n`UniqueConstraint`s without a `condition` (i.e. non-partial unique\nconstraints) and `expressions` (i.e. non-functional unique constraints) are\ndifferent in this regard, in that they leverage the existing\n`validate_unique()` logic, and thus enable two-stage validation. In addition\nto `IntegrityError` on `save()`, `ValidationError` is also raised during model\nvalidation when the `UniqueConstraint` is violated.\n\nCreates a check constraint in the database.\n\nA `Q` object or boolean `Expression` that specifies the check you want the\nconstraint to enforce.\n\nFor example, `CheckConstraint(check=Q(age__gte=18), name='age_gte_18')`\nensures the age field is never less than 18.\n\nThe name of the constraint. You must always specify a unique name for the\nconstraint.\n\nCreates a unique constraint in the database.\n\nPositional argument `*expressions` allows creating functional unique\nconstraints on expressions and database functions.\n\nFor example:\n\ncreates a unique constraint on the lowercased value of the `name` field in\ndescending order and the `category` field in the default ascending order.\n\nFunctional unique constraints have the same database restrictions as\n`Index.expressions`.\n\nA list of field names that specifies the unique set of columns you want the\nconstraint to enforce.\n\nFor example, `UniqueConstraint(fields=['room', 'date'],\nname='unique_booking')` ensures each room can only be booked once for each\ndate.\n\nThe name of the constraint. You must always specify a unique name for the\nconstraint.\n\nA `Q` object that specifies the condition you want the constraint to enforce.\n\nFor example:\n\nensures that each user only has one draft.\n\nThese conditions have the same database restrictions as `Index.condition`.\n\nSet this parameter to create a deferrable unique constraint. Accepted values\nare `Deferrable.DEFERRED` or `Deferrable.IMMEDIATE`. For example:\n\nBy default constraints are not deferred. A deferred constraint will not be\nenforced until the end of the transaction. An immediate constraint will be\nenforced immediately after every command.\n\nMySQL, MariaDB, and SQLite.\n\nDeferrable unique constraints are ignored on MySQL, MariaDB, and SQLite as\nneither supports them.\n\nWarning\n\nDeferred unique constraints may lead to a performance penalty.\n\nA list or tuple of the names of the fields to be included in the covering\nunique index as non-key columns. This allows index-only scans to be used for\nqueries that select only included fields (`include`) and filter only by unique\nfields (`fields`).\n\nFor example:\n\nwill allow filtering on `room` and `date`, also selecting `full_name`, while\nfetching data only from the index.\n\n`include` is supported only on PostgreSQL.\n\nNon-key columns have the same database restrictions as `Index.include`.\n\nThe names of the PostgreSQL operator classes to use for this unique index. If\nyou require a custom operator class, you must provide one for each field in\nthe index.\n\nFor example:\n\ncreates a unique index on `username` using `varchar_pattern_ops`.\n\n`opclasses` are ignored for databases besides PostgreSQL.\n\n"}, {"name": "contenttypes.admin.GenericInlineModelAdmin", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin", "type": "django.contrib.contenttypes", "text": "\nThe `GenericInlineModelAdmin` class inherits all properties from an\n`InlineModelAdmin` class. However, it adds a couple of its own for working\nwith the generic relation:\n\nThe name of the `ContentType` foreign key field on the model. Defaults to\n`content_type`.\n\nThe name of the integer field that represents the ID of the related object.\nDefaults to `object_id`.\n\n"}, {"name": "contenttypes.admin.GenericInlineModelAdmin.ct_field", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin.ct_field", "type": "django.contrib.contenttypes", "text": "\nThe name of the `ContentType` foreign key field on the model. Defaults to\n`content_type`.\n\n"}, {"name": "contenttypes.admin.GenericInlineModelAdmin.ct_fk_field", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericInlineModelAdmin.ct_fk_field", "type": "django.contrib.contenttypes", "text": "\nThe name of the integer field that represents the ID of the related object.\nDefaults to `object_id`.\n\n"}, {"name": "contenttypes.admin.GenericStackedInline", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericStackedInline", "type": "django.contrib.contenttypes", "text": "\nSubclasses of `GenericInlineModelAdmin` with stacked and tabular layouts,\nrespectively.\n\n"}, {"name": "contenttypes.admin.GenericTabularInline", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.admin.GenericTabularInline", "type": "django.contrib.contenttypes", "text": "\n\n"}, {"name": "contenttypes.fields.GenericForeignKey", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey", "type": "django.contrib.contenttypes", "text": "\nThere are three parts to setting up a `GenericForeignKey`:\n\nIf `False`, the field will be able to reference proxy models. Default is\n`True`. This mirrors the `for_concrete_model` argument to `get_for_model()`.\n\n"}, {"name": "contenttypes.fields.GenericForeignKey.for_concrete_model", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericForeignKey.for_concrete_model", "type": "django.contrib.contenttypes", "text": "\nIf `False`, the field will be able to reference proxy models. Default is\n`True`. This mirrors the `for_concrete_model` argument to `get_for_model()`.\n\n"}, {"name": "contenttypes.fields.GenericRelation", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation", "type": "django.contrib.contenttypes", "text": "\nThe relation on the related object back to this object doesn\u2019t exist by\ndefault. Setting `related_query_name` creates a relation from the related\nobject back to this one. This allows querying and filtering from the related\nobject.\n\n"}, {"name": "contenttypes.fields.GenericRelation.related_query_name", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.fields.GenericRelation.related_query_name", "type": "django.contrib.contenttypes", "text": "\nThe relation on the related object back to this object doesn\u2019t exist by\ndefault. Setting `related_query_name` creates a relation from the related\nobject back to this one. This allows querying and filtering from the related\nobject.\n\n"}, {"name": "contenttypes.forms.BaseGenericInlineFormSet", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.forms.BaseGenericInlineFormSet", "type": "django.contrib.contenttypes", "text": "\n\n"}, {"name": "contenttypes.forms.generic_inlineformset_factory()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.forms.generic_inlineformset_factory", "type": "django.contrib.contenttypes", "text": "\nReturns a `GenericInlineFormSet` using `modelformset_factory()`.\n\nYou must provide `ct_field` and `fk_field` if they are different from the\ndefaults, `content_type` and `object_id` respectively. Other parameters are\nsimilar to those documented in `modelformset_factory()` and\n`inlineformset_factory()`.\n\nThe `for_concrete_model` argument corresponds to the `for_concrete_model`\nargument on `GenericForeignKey`.\n\nThe `absolute_max` and `can_delete_extra` arguments were added.\n\n"}, {"name": "contenttypes.models.ContentType", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType", "type": "django.contrib.contenttypes", "text": "\nEach instance of `ContentType` has two fields which, taken together, uniquely\ndescribe an installed model:\n\nThe name of the application the model is part of. This is taken from the\n`app_label` attribute of the model, and includes only the last part of the\napplication\u2019s Python import path; `django.contrib.contenttypes`, for example,\nbecomes an `app_label` of `contenttypes`.\n\nThe name of the model class.\n\nAdditionally, the following property is available:\n\nThe human-readable name of the content type. This is taken from the\n`verbose_name` attribute of the model.\n\n"}, {"name": "contenttypes.models.ContentType.app_label", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.app_label", "type": "django.contrib.contenttypes", "text": "\nThe name of the application the model is part of. This is taken from the\n`app_label` attribute of the model, and includes only the last part of the\napplication\u2019s Python import path; `django.contrib.contenttypes`, for example,\nbecomes an `app_label` of `contenttypes`.\n\n"}, {"name": "contenttypes.models.ContentType.get_object_for_this_type()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.get_object_for_this_type", "type": "django.contrib.contenttypes", "text": "\nTakes a set of valid lookup arguments for the model the `ContentType`\nrepresents, and does `a get() lookup` on that model, returning the\ncorresponding object.\n\n"}, {"name": "contenttypes.models.ContentType.model", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.model", "type": "django.contrib.contenttypes", "text": "\nThe name of the model class.\n\n"}, {"name": "contenttypes.models.ContentType.model_class()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.model_class", "type": "django.contrib.contenttypes", "text": "\nReturns the model class represented by this `ContentType` instance.\n\n"}, {"name": "contenttypes.models.ContentType.name", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentType.name", "type": "django.contrib.contenttypes", "text": "\nThe human-readable name of the content type. This is taken from the\n`verbose_name` attribute of the model.\n\n"}, {"name": "contenttypes.models.ContentTypeManager", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager", "type": "django.contrib.contenttypes", "text": "\n`ContentType` also has a custom manager, `ContentTypeManager`, which adds the\nfollowing methods:\n\nClears an internal cache used by `ContentType` to keep track of models for\nwhich it has created `ContentType` instances. You probably won\u2019t ever need to\ncall this method yourself; Django will call it automatically when it\u2019s needed.\n\nLookup a `ContentType` by ID. Since this method uses the same shared cache as\n`get_for_model()`, it\u2019s preferred to use this method over the usual\n`ContentType.objects.get(pk=id)`\n\nTakes either a model class or an instance of a model, and returns the\n`ContentType` instance representing that model. `for_concrete_model=False`\nallows fetching the `ContentType` of a proxy model.\n\nTakes a variadic number of model classes, and returns a dictionary mapping the\nmodel classes to the `ContentType` instances representing them.\n`for_concrete_models=False` allows fetching the `ContentType` of proxy models.\n\nReturns the `ContentType` instance uniquely identified by the given\napplication label and model name. The primary purpose of this method is to\nallow `ContentType` objects to be referenced via a natural key during\ndeserialization.\n\n"}, {"name": "contenttypes.models.ContentTypeManager.clear_cache()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.clear_cache", "type": "django.contrib.contenttypes", "text": "\nClears an internal cache used by `ContentType` to keep track of models for\nwhich it has created `ContentType` instances. You probably won\u2019t ever need to\ncall this method yourself; Django will call it automatically when it\u2019s needed.\n\n"}, {"name": "contenttypes.models.ContentTypeManager.get_by_natural_key()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_by_natural_key", "type": "django.contrib.contenttypes", "text": "\nReturns the `ContentType` instance uniquely identified by the given\napplication label and model name. The primary purpose of this method is to\nallow `ContentType` objects to be referenced via a natural key during\ndeserialization.\n\n"}, {"name": "contenttypes.models.ContentTypeManager.get_for_id()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_id", "type": "django.contrib.contenttypes", "text": "\nLookup a `ContentType` by ID. Since this method uses the same shared cache as\n`get_for_model()`, it\u2019s preferred to use this method over the usual\n`ContentType.objects.get(pk=id)`\n\n"}, {"name": "contenttypes.models.ContentTypeManager.get_for_model()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_model", "type": "django.contrib.contenttypes", "text": "\nTakes either a model class or an instance of a model, and returns the\n`ContentType` instance representing that model. `for_concrete_model=False`\nallows fetching the `ContentType` of a proxy model.\n\n"}, {"name": "contenttypes.models.ContentTypeManager.get_for_models()", "path": "ref/contrib/contenttypes#django.contrib.contenttypes.models.ContentTypeManager.get_for_models", "type": "django.contrib.contenttypes", "text": "\nTakes a variadic number of model classes, and returns a dictionary mapping the\nmodel classes to the `ContentType` instances representing them.\n`for_concrete_models=False` allows fetching the `ContentType` of proxy models.\n\n"}, {"name": "contrib packages", "path": "ref/contrib/index", "type": "API", "text": "\nDjango aims to follow Python\u2019s \u201cbatteries included\u201d philosophy. It ships with\na variety of extra, optional tools that solve common web development problems.\n\nThis code lives in `django/contrib` in the Django distribution. This document\ngives a rundown of the packages in `contrib`, along with any dependencies\nthose packages have.\n\nNote\n\nFor most of these add-ons \u2013 specifically, the add-ons that include either\nmodels or template tags \u2013 you\u2019ll need to add the package name (e.g.,\n`'django.contrib.redirects'`) to your `INSTALLED_APPS` setting and re-run\n`manage.py migrate`.\n\nThe automatic Django administrative interface. For more information, see\nTutorial 2 and the admin documentation.\n\nRequires the auth and contenttypes contrib packages to be installed.\n\nDjango\u2019s authentication framework.\n\nSee User authentication in Django.\n\nA light framework for hooking into \u201ctypes\u201d of content, where each installed\nDjango model is a separate content type.\n\nSee the contenttypes documentation.\n\nA framework for managing \u201cflat\u201d HTML content in a database.\n\nSee the flatpages documentation.\n\nRequires the sites contrib package to be installed as well.\n\nA world-class geospatial framework built on top of Django, that enables\nstorage, manipulation and display of spatial data.\n\nSee the GeoDjango documentation for more.\n\nA set of Django template filters useful for adding a \u201chuman touch\u201d to data.\n\nSee the humanize documentation.\n\nA framework for storing and retrieving temporary cookie- or session-based\nmessages\n\nSee the messages documentation.\n\nA collection of PostgreSQL specific features.\n\nSee the contrib.postgres documentation.\n\nA framework for managing redirects.\n\nSee the redirects documentation.\n\nA framework for storing data in anonymous sessions.\n\nSee the sessions documentation.\n\nA light framework that lets you operate multiple websites off of the same\ndatabase and Django installation. It gives you hooks for associating objects\nto one or more sites.\n\nSee the sites documentation.\n\nA framework for generating Google sitemap XML files.\n\nSee the sitemaps documentation.\n\nA framework for generating syndication feeds, in RSS and Atom, quite easily.\n\nSee the syndication documentation.\n\nIf you have an idea for functionality to include in `contrib`, let us know!\nCode it up, and post it to the django-users mailing list.\n\n"}, {"name": "core.cache.cache", "path": "topics/cache#django.core.cache.cache", "type": "django.core", "text": "\nAs a shortcut, the default cache is available as `django.core.cache.cache`:\n\nThis object is equivalent to `caches['default']`.\n\n"}, {"name": "core.cache.caches", "path": "topics/cache#django.core.cache.caches", "type": "django.core", "text": "\nYou can access the caches configured in the `CACHES` setting through a dict-\nlike object: `django.core.cache.caches`. Repeated requests for the same alias\nin the same thread will return the same object.\n\nIf the named key does not exist, `InvalidCacheBackendError` will be raised.\n\nTo provide thread-safety, a different instance of the cache backend will be\nreturned for each thread.\n\n"}, {"name": "core.cache.utils.make_template_fragment_key()", "path": "topics/cache#django.core.cache.utils.make_template_fragment_key", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.add()", "path": "topics/cache#django.core.caches.cache.add", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.clear()", "path": "topics/cache#django.core.caches.cache.clear", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.close()", "path": "topics/cache#django.core.caches.cache.close", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.decr()", "path": "topics/cache#django.core.caches.cache.decr", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.delete()", "path": "topics/cache#django.core.caches.cache.delete", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.delete_many()", "path": "topics/cache#django.core.caches.cache.delete_many", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.get()", "path": "topics/cache#django.core.caches.cache.get", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.get_many()", "path": "topics/cache#django.core.caches.cache.get_many", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.get_or_set()", "path": "topics/cache#django.core.caches.cache.get_or_set", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.incr()", "path": "topics/cache#django.core.caches.cache.incr", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.set()", "path": "topics/cache#django.core.caches.cache.set", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.set_many()", "path": "topics/cache#django.core.caches.cache.set_many", "type": "django.core", "text": "\n\n"}, {"name": "core.caches.cache.touch()", "path": "topics/cache#django.core.caches.cache.touch", "type": "django.core", "text": "\n\n"}, {"name": "core.checks.CheckMessage", "path": "ref/checks#django.core.checks.CheckMessage", "type": "django.core", "text": "\n\n"}, {"name": "core.checks.Critical", "path": "ref/checks#django.core.checks.Critical", "type": "django.core", "text": "\n\n"}, {"name": "core.checks.Debug", "path": "ref/checks#django.core.checks.Debug", "type": "django.core", "text": "\n\n"}, {"name": "core.checks.Error", "path": "ref/checks#django.core.checks.Error", "type": "django.core", "text": "\n\n"}, {"name": "core.checks.Info", "path": "ref/checks#django.core.checks.Info", "type": "django.core", "text": "\n\n"}, {"name": "core.checks.register()", "path": "topics/checks#django.core.checks.register", "type": "django.core", "text": "\n\n"}, {"name": "core.checks.Warning", "path": "ref/checks#django.core.checks.Warning", "type": "django.core", "text": "\n\n"}, {"name": "core.exceptions.NON_FIELD_ERRORS", "path": "ref/exceptions#django.core.exceptions.NON_FIELD_ERRORS", "type": "django.core", "text": "\n\n"}, {"name": "core.files.base.ContentFile", "path": "ref/files/file#django.core.files.base.ContentFile", "type": "django.core", "text": "\nThe `ContentFile` class inherits from `File`, but unlike `File` it operates on\nstring content (bytes also supported), rather than an actual file. For\nexample:\n\n"}, {"name": "core.files.File", "path": "ref/files/file#django.core.files.File", "type": "django.core", "text": "\nThe `File` class is a thin wrapper around a Python file object with some\nDjango-specific additions. Internally, Django uses this class when it needs to\nrepresent a file.\n\n`File` objects have the following attributes and methods:\n\nThe name of the file including the relative path from `MEDIA_ROOT`.\n\nThe size of the file in bytes.\n\nThe underlying file object that this class wraps.\n\nBe careful with this attribute in subclasses.\n\nSome subclasses of `File`, including `ContentFile` and `FieldFile`, may\nreplace this attribute with an object other than a Python file object. In\nthese cases, this attribute may itself be a `File` subclass (and not\nnecessarily the same subclass). Whenever possible, use the attributes and\nmethods of the subclass itself rather than the those of the subclass\u2019s `file`\nattribute.\n\nThe read/write mode for the file.\n\nOpen or reopen the file (which also does `File.seek(0)`). The `mode` argument\nallows the same values as Python\u2019s built-in `open()`.\n\nWhen reopening a file, `mode` will override whatever mode the file was\noriginally opened with; `None` means to reopen with the original mode.\n\nIt can be used as a context manager, e.g. `with file.open() as f:`.\n\nIterate over the file yielding one line at a time.\n\nIterate over the file yielding \u201cchunks\u201d of a given size. `chunk_size` defaults\nto 64 KB.\n\nThis is especially useful with very large files since it allows them to be\nstreamed off disk and avoids storing the whole file in memory.\n\nReturns `True` if the file is large enough to require multiple chunks to\naccess all of its content give some `chunk_size`.\n\nClose the file.\n\nIn addition to the listed methods, `File` exposes the following attributes and\nmethods of its `file` object: `encoding`, `fileno`, `flush`, `isatty`,\n`newlines`, `read`, `readinto`, `readline`, `readlines`, `seek`, `tell`,\n`truncate`, `write`, `writelines`, `readable()`, `writable()`, and\n`seekable()`.\n\n"}, {"name": "core.files.File.__iter__()", "path": "ref/files/file#django.core.files.File.__iter__", "type": "django.core", "text": "\nIterate over the file yielding one line at a time.\n\n"}, {"name": "core.files.File.chunks()", "path": "ref/files/file#django.core.files.File.chunks", "type": "django.core", "text": "\nIterate over the file yielding \u201cchunks\u201d of a given size. `chunk_size` defaults\nto 64 KB.\n\nThis is especially useful with very large files since it allows them to be\nstreamed off disk and avoids storing the whole file in memory.\n\n"}, {"name": "core.files.File.close()", "path": "ref/files/file#django.core.files.File.close", "type": "django.core", "text": "\nClose the file.\n\n"}, {"name": "core.files.File.delete()", "path": "ref/files/file#django.core.files.File.delete", "type": "django.core", "text": "\nRemoves the file from the model instance and deletes the underlying file. If\n`save` is `True`, the model\u2019s `save()` method will be called once the file is\ndeleted.\n\n"}, {"name": "core.files.File.file", "path": "ref/files/file#django.core.files.File.file", "type": "django.core", "text": "\nThe underlying file object that this class wraps.\n\nBe careful with this attribute in subclasses.\n\nSome subclasses of `File`, including `ContentFile` and `FieldFile`, may\nreplace this attribute with an object other than a Python file object. In\nthese cases, this attribute may itself be a `File` subclass (and not\nnecessarily the same subclass). Whenever possible, use the attributes and\nmethods of the subclass itself rather than the those of the subclass\u2019s `file`\nattribute.\n\n"}, {"name": "core.files.File.mode", "path": "ref/files/file#django.core.files.File.mode", "type": "django.core", "text": "\nThe read/write mode for the file.\n\n"}, {"name": "core.files.File.multiple_chunks()", "path": "ref/files/file#django.core.files.File.multiple_chunks", "type": "django.core", "text": "\nReturns `True` if the file is large enough to require multiple chunks to\naccess all of its content give some `chunk_size`.\n\n"}, {"name": "core.files.File.name", "path": "ref/files/file#django.core.files.File.name", "type": "django.core", "text": "\nThe name of the file including the relative path from `MEDIA_ROOT`.\n\n"}, {"name": "core.files.File.open()", "path": "ref/files/file#django.core.files.File.open", "type": "django.core", "text": "\nOpen or reopen the file (which also does `File.seek(0)`). The `mode` argument\nallows the same values as Python\u2019s built-in `open()`.\n\nWhen reopening a file, `mode` will override whatever mode the file was\noriginally opened with; `None` means to reopen with the original mode.\n\nIt can be used as a context manager, e.g. `with file.open() as f:`.\n\n"}, {"name": "core.files.File.save()", "path": "ref/files/file#django.core.files.File.save", "type": "django.core", "text": "\nSaves a new file with the file name and contents provided. This will not\nreplace the existing file, but will create a new file and update the object to\npoint to it. If `save` is `True`, the model\u2019s `save()` method will be called\nonce the file is saved. That is, these two lines:\n\nare equivalent to:\n\nNote that the `content` argument must be an instance of either `File` or of a\nsubclass of `File`, such as `ContentFile`.\n\n"}, {"name": "core.files.File.size", "path": "ref/files/file#django.core.files.File.size", "type": "django.core", "text": "\nThe size of the file in bytes.\n\n"}, {"name": "core.files.images.ImageFile", "path": "ref/files/file#django.core.files.images.ImageFile", "type": "django.core", "text": "\nDjango provides a built-in class specifically for images.\n`django.core.files.images.ImageFile` inherits all the attributes and methods\nof `File`, and additionally provides the following:\n\nWidth of the image in pixels.\n\nHeight of the image in pixels.\n\n"}, {"name": "core.files.images.ImageFile.height", "path": "ref/files/file#django.core.files.images.ImageFile.height", "type": "django.core", "text": "\nHeight of the image in pixels.\n\n"}, {"name": "core.files.images.ImageFile.width", "path": "ref/files/file#django.core.files.images.ImageFile.width", "type": "django.core", "text": "\nWidth of the image in pixels.\n\n"}, {"name": "core.files.storage._open()", "path": "howto/custom-file-storage#django.core.files.storage._open", "type": "django.core", "text": "\n\n"}, {"name": "core.files.storage._save()", "path": "howto/custom-file-storage#django.core.files.storage._save", "type": "django.core", "text": "\n\n"}, {"name": "core.files.storage.DefaultStorage", "path": "ref/files/storage#django.core.files.storage.DefaultStorage", "type": "django.core", "text": "\n`DefaultStorage` provides lazy access to the current default storage system as\ndefined by `DEFAULT_FILE_STORAGE`. `DefaultStorage` uses `get_storage_class()`\ninternally.\n\n"}, {"name": "core.files.storage.FileSystemStorage", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage", "type": "django.core", "text": "\nThe `FileSystemStorage` class implements basic file storage on a local\nfilesystem. It inherits from `Storage` and provides implementations for all\nthe public methods thereof.\n\nAbsolute path to the directory that will hold the files. Defaults to the value\nof your `MEDIA_ROOT` setting.\n\nURL that serves the files stored at this location. Defaults to the value of\nyour `MEDIA_URL` setting.\n\nThe file system permissions that the file will receive when it is saved.\nDefaults to `FILE_UPLOAD_PERMISSIONS`.\n\nThe file system permissions that the directory will receive when it is saved.\nDefaults to `FILE_UPLOAD_DIRECTORY_PERMISSIONS`.\n\nNote\n\nThe `FileSystemStorage.delete()` method will not raise an exception if the\ngiven file name does not exist.\n\nReturns a `datetime` of the system\u2019s ctime, i.e. `os.path.getctime()`. On some\nsystems (like Unix), this is the time of the last metadata change, and on\nothers (like Windows), it\u2019s the creation time of the file.\n\n"}, {"name": "core.files.storage.FileSystemStorage.base_url", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.base_url", "type": "django.core", "text": "\nURL that serves the files stored at this location. Defaults to the value of\nyour `MEDIA_URL` setting.\n\n"}, {"name": "core.files.storage.FileSystemStorage.directory_permissions_mode", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.directory_permissions_mode", "type": "django.core", "text": "\nThe file system permissions that the directory will receive when it is saved.\nDefaults to `FILE_UPLOAD_DIRECTORY_PERMISSIONS`.\n\n"}, {"name": "core.files.storage.FileSystemStorage.file_permissions_mode", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.file_permissions_mode", "type": "django.core", "text": "\nThe file system permissions that the file will receive when it is saved.\nDefaults to `FILE_UPLOAD_PERMISSIONS`.\n\n"}, {"name": "core.files.storage.FileSystemStorage.get_created_time()", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.get_created_time", "type": "django.core", "text": "\nReturns a `datetime` of the system\u2019s ctime, i.e. `os.path.getctime()`. On some\nsystems (like Unix), this is the time of the last metadata change, and on\nothers (like Windows), it\u2019s the creation time of the file.\n\n"}, {"name": "core.files.storage.FileSystemStorage.location", "path": "ref/files/storage#django.core.files.storage.FileSystemStorage.location", "type": "django.core", "text": "\nAbsolute path to the directory that will hold the files. Defaults to the value\nof your `MEDIA_ROOT` setting.\n\n"}, {"name": "core.files.storage.get_alternative_name()", "path": "howto/custom-file-storage#django.core.files.storage.get_alternative_name", "type": "django.core", "text": "\n\n"}, {"name": "core.files.storage.get_available_name()", "path": "howto/custom-file-storage#django.core.files.storage.get_available_name", "type": "django.core", "text": "\n\n"}, {"name": "core.files.storage.get_storage_class()", "path": "ref/files/storage#django.core.files.storage.get_storage_class", "type": "django.core", "text": "\nReturns a class or module which implements the storage API.\n\nWhen called without the `import_path` parameter `get_storage_class` will\nreturn the current default storage system as defined by\n`DEFAULT_FILE_STORAGE`. If `import_path` is provided, `get_storage_class` will\nattempt to import the class or module from the given path and will return it\nif successful. An exception will be raised if the import is unsuccessful.\n\n"}, {"name": "core.files.storage.get_valid_name()", "path": "howto/custom-file-storage#django.core.files.storage.get_valid_name", "type": "django.core", "text": "\n\n"}, {"name": "core.files.storage.Storage", "path": "ref/files/storage#django.core.files.storage.Storage", "type": "django.core", "text": "\nThe `Storage` class provides a standardized API for storing files, along with\na set of default behaviors that all other storage systems can inherit or\noverride as necessary.\n\nNote\n\nWhen methods return naive `datetime` objects, the effective timezone used will\nbe the current value of `os.environ['TZ']`; note that this is usually set from\nDjango\u2019s `TIME_ZONE`.\n\nDeletes the file referenced by `name`. If deletion is not supported on the\ntarget storage system this will raise `NotImplementedError` instead.\n\nReturns `True` if a file referenced by the given name already exists in the\nstorage system, or `False` if the name is available for a new file.\n\nReturns a `datetime` of the last accessed time of the file. For storage\nsystems unable to return the last accessed time this will raise\n`NotImplementedError`.\n\nIf `USE_TZ` is `True`, returns an aware `datetime`, otherwise returns a naive\n`datetime` in the local timezone.\n\nReturns an alternative filename based on the `file_root` and `file_ext`\nparameters, an underscore plus a random 7 character alphanumeric string is\nappended to the filename before the extension.\n\nReturns a filename based on the `name` parameter that\u2019s free and available for\nnew content to be written to on the target storage system.\n\nThe length of the filename will not exceed `max_length`, if provided. If a\nfree unique filename cannot be found, a `SuspiciousFileOperation` exception\nwill be raised.\n\nIf a file with `name` already exists, `get_alternative_name()` is called to\nobtain an alternative name.\n\nReturns a `datetime` of the creation time of the file. For storage systems\nunable to return the creation time this will raise `NotImplementedError`.\n\nIf `USE_TZ` is `True`, returns an aware `datetime`, otherwise returns a naive\n`datetime` in the local timezone.\n\nReturns a `datetime` of the last modified time of the file. For storage\nsystems unable to return the last modified time this will raise\n`NotImplementedError`.\n\nIf `USE_TZ` is `True`, returns an aware `datetime`, otherwise returns a naive\n`datetime` in the local timezone.\n\nReturns a filename based on the `name` parameter that\u2019s suitable for use on\nthe target storage system.\n\nValidates the `filename` by calling `get_valid_name()` and returns a filename\nto be passed to the `save()` method.\n\nThe `filename` argument may include a path as returned by\n`FileField.upload_to`. In that case, the path won\u2019t be passed to\n`get_valid_name()` but will be prepended back to the resulting name.\n\nThe default implementation uses `os.path` operations. Override this method if\nthat\u2019s not appropriate for your storage.\n\nLists the contents of the specified path, returning a 2-tuple of lists; the\nfirst item being directories, the second item being files. For storage systems\nthat aren\u2019t able to provide such a listing, this will raise a\n`NotImplementedError` instead.\n\nOpens the file given by `name`. Note that although the returned file is\nguaranteed to be a `File` object, it might actually be some subclass. In the\ncase of remote file storage this means that reading/writing could be quite\nslow, so be warned.\n\nThe local filesystem path where the file can be opened using Python\u2019s standard\n`open()`. For storage systems that aren\u2019t accessible from the local\nfilesystem, this will raise `NotImplementedError` instead.\n\nSaves a new file using the storage system, preferably with the name specified.\nIf there already exists a file with this name `name`, the storage system may\nmodify the filename as necessary to get a unique name. The actual name of the\nstored file will be returned.\n\nThe `max_length` argument is passed along to `get_available_name()`.\n\nThe `content` argument must be an instance of `django.core.files.File` or a\nfile-like object that can be wrapped in `File`.\n\nReturns the total size, in bytes, of the file referenced by `name`. For\nstorage systems that aren\u2019t able to return the file size this will raise\n`NotImplementedError` instead.\n\nReturns the URL where the contents of the file referenced by `name` can be\naccessed. For storage systems that don\u2019t support access by URL this will raise\n`NotImplementedError` instead.\n\n"}, {"name": "core.files.storage.Storage.delete()", "path": "ref/files/storage#django.core.files.storage.Storage.delete", "type": "django.core", "text": "\nDeletes the file referenced by `name`. If deletion is not supported on the\ntarget storage system this will raise `NotImplementedError` instead.\n\n"}, {"name": "core.files.storage.Storage.exists()", "path": "ref/files/storage#django.core.files.storage.Storage.exists", "type": "django.core", "text": "\nReturns `True` if a file referenced by the given name already exists in the\nstorage system, or `False` if the name is available for a new file.\n\n"}, {"name": "core.files.storage.Storage.generate_filename()", "path": "ref/files/storage#django.core.files.storage.Storage.generate_filename", "type": "django.core", "text": "\nValidates the `filename` by calling `get_valid_name()` and returns a filename\nto be passed to the `save()` method.\n\nThe `filename` argument may include a path as returned by\n`FileField.upload_to`. In that case, the path won\u2019t be passed to\n`get_valid_name()` but will be prepended back to the resulting name.\n\nThe default implementation uses `os.path` operations. Override this method if\nthat\u2019s not appropriate for your storage.\n\n"}, {"name": "core.files.storage.Storage.get_accessed_time()", "path": "ref/files/storage#django.core.files.storage.Storage.get_accessed_time", "type": "django.core", "text": "\nReturns a `datetime` of the last accessed time of the file. For storage\nsystems unable to return the last accessed time this will raise\n`NotImplementedError`.\n\nIf `USE_TZ` is `True`, returns an aware `datetime`, otherwise returns a naive\n`datetime` in the local timezone.\n\n"}, {"name": "core.files.storage.Storage.get_alternative_name()", "path": "ref/files/storage#django.core.files.storage.Storage.get_alternative_name", "type": "django.core", "text": "\nReturns an alternative filename based on the `file_root` and `file_ext`\nparameters, an underscore plus a random 7 character alphanumeric string is\nappended to the filename before the extension.\n\n"}, {"name": "core.files.storage.Storage.get_available_name()", "path": "ref/files/storage#django.core.files.storage.Storage.get_available_name", "type": "django.core", "text": "\nReturns a filename based on the `name` parameter that\u2019s free and available for\nnew content to be written to on the target storage system.\n\nThe length of the filename will not exceed `max_length`, if provided. If a\nfree unique filename cannot be found, a `SuspiciousFileOperation` exception\nwill be raised.\n\nIf a file with `name` already exists, `get_alternative_name()` is called to\nobtain an alternative name.\n\n"}, {"name": "core.files.storage.Storage.get_created_time()", "path": "ref/files/storage#django.core.files.storage.Storage.get_created_time", "type": "django.core", "text": "\nReturns a `datetime` of the creation time of the file. For storage systems\nunable to return the creation time this will raise `NotImplementedError`.\n\nIf `USE_TZ` is `True`, returns an aware `datetime`, otherwise returns a naive\n`datetime` in the local timezone.\n\n"}, {"name": "core.files.storage.Storage.get_modified_time()", "path": "ref/files/storage#django.core.files.storage.Storage.get_modified_time", "type": "django.core", "text": "\nReturns a `datetime` of the last modified time of the file. For storage\nsystems unable to return the last modified time this will raise\n`NotImplementedError`.\n\nIf `USE_TZ` is `True`, returns an aware `datetime`, otherwise returns a naive\n`datetime` in the local timezone.\n\n"}, {"name": "core.files.storage.Storage.get_valid_name()", "path": "ref/files/storage#django.core.files.storage.Storage.get_valid_name", "type": "django.core", "text": "\nReturns a filename based on the `name` parameter that\u2019s suitable for use on\nthe target storage system.\n\n"}, {"name": "core.files.storage.Storage.listdir()", "path": "ref/files/storage#django.core.files.storage.Storage.listdir", "type": "django.core", "text": "\nLists the contents of the specified path, returning a 2-tuple of lists; the\nfirst item being directories, the second item being files. For storage systems\nthat aren\u2019t able to provide such a listing, this will raise a\n`NotImplementedError` instead.\n\n"}, {"name": "core.files.storage.Storage.open()", "path": "ref/files/storage#django.core.files.storage.Storage.open", "type": "django.core", "text": "\nOpens the file given by `name`. Note that although the returned file is\nguaranteed to be a `File` object, it might actually be some subclass. In the\ncase of remote file storage this means that reading/writing could be quite\nslow, so be warned.\n\n"}, {"name": "core.files.storage.Storage.path()", "path": "ref/files/storage#django.core.files.storage.Storage.path", "type": "django.core", "text": "\nThe local filesystem path where the file can be opened using Python\u2019s standard\n`open()`. For storage systems that aren\u2019t accessible from the local\nfilesystem, this will raise `NotImplementedError` instead.\n\n"}, {"name": "core.files.storage.Storage.save()", "path": "ref/files/storage#django.core.files.storage.Storage.save", "type": "django.core", "text": "\nSaves a new file using the storage system, preferably with the name specified.\nIf there already exists a file with this name `name`, the storage system may\nmodify the filename as necessary to get a unique name. The actual name of the\nstored file will be returned.\n\nThe `max_length` argument is passed along to `get_available_name()`.\n\nThe `content` argument must be an instance of `django.core.files.File` or a\nfile-like object that can be wrapped in `File`.\n\n"}, {"name": "core.files.storage.Storage.size()", "path": "ref/files/storage#django.core.files.storage.Storage.size", "type": "django.core", "text": "\nReturns the total size, in bytes, of the file referenced by `name`. For\nstorage systems that aren\u2019t able to return the file size this will raise\n`NotImplementedError` instead.\n\n"}, {"name": "core.files.storage.Storage.url()", "path": "ref/files/storage#django.core.files.storage.Storage.url", "type": "django.core", "text": "\nReturns the URL where the contents of the file referenced by `name` can be\naccessed. For storage systems that don\u2019t support access by URL this will raise\n`NotImplementedError` instead.\n\n"}, {"name": "core.files.uploadedfile.InMemoryUploadedFile", "path": "ref/files/uploads#django.core.files.uploadedfile.InMemoryUploadedFile", "type": "django.core", "text": "\nA file uploaded into memory (i.e. stream-to-memory). This class is used by the\n`MemoryFileUploadHandler`.\n\n"}, {"name": "core.files.uploadedfile.TemporaryUploadedFile", "path": "ref/files/uploads#django.core.files.uploadedfile.TemporaryUploadedFile", "type": "django.core", "text": "\nA file uploaded to a temporary location (i.e. stream-to-disk). This class is\nused by the `TemporaryFileUploadHandler`. In addition to the methods from\n`UploadedFile`, it has one additional method:\n\n"}, {"name": "core.files.uploadedfile.TemporaryUploadedFile.temporary_file_path()", "path": "ref/files/uploads#django.core.files.uploadedfile.TemporaryUploadedFile.temporary_file_path", "type": "django.core", "text": "\nReturns the full path to the temporary uploaded file.\n\n"}, {"name": "core.files.uploadedfile.UploadedFile", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile", "type": "django.core", "text": "\n\n"}, {"name": "core.files.uploadedfile.UploadedFile.charset", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.charset", "type": "django.core", "text": "\nFor text/* content-types, the character set (i.e. `utf8`) supplied by the\nbrowser. Again, \u201ctrust but verify\u201d is the best policy here.\n\n"}, {"name": "core.files.uploadedfile.UploadedFile.chunks()", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.chunks", "type": "django.core", "text": "\nA generator returning chunks of the file. If `multiple_chunks()` is `True`,\nyou should use this method in a loop instead of `read()`.\n\nIn practice, it\u2019s often easiest to use `chunks()` all the time. Looping over\n`chunks()` instead of using `read()` ensures that large files don\u2019t overwhelm\nyour system\u2019s memory.\n\n"}, {"name": "core.files.uploadedfile.UploadedFile.content_type", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.content_type", "type": "django.core", "text": "\nThe content-type header uploaded with the file (e.g. text/plain or\napplication/pdf). Like any data supplied by the user, you shouldn\u2019t trust that\nthe uploaded file is actually this type. You\u2019ll still need to validate that\nthe file contains the content that the content-type header claims \u2013 \u201ctrust but\nverify.\u201d\n\n"}, {"name": "core.files.uploadedfile.UploadedFile.content_type_extra", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.content_type_extra", "type": "django.core", "text": "\nA dictionary containing extra parameters passed to the `content-type` header.\nThis is typically provided by services, such as Google App Engine, that\nintercept and handle file uploads on your behalf. As a result your handler may\nnot receive the uploaded file content, but instead a URL or other pointer to\nthe file (see RFC 2388).\n\n"}, {"name": "core.files.uploadedfile.UploadedFile.multiple_chunks()", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.multiple_chunks", "type": "django.core", "text": "\nReturns `True` if the uploaded file is big enough to require reading in\nmultiple chunks. By default this will be any file larger than 2.5 megabytes,\nbut that\u2019s configurable; see below.\n\n"}, {"name": "core.files.uploadedfile.UploadedFile.name", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.name", "type": "django.core", "text": "\nThe name of the uploaded file (e.g. `my_file.txt`).\n\n"}, {"name": "core.files.uploadedfile.UploadedFile.read()", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.read", "type": "django.core", "text": "\nRead the entire uploaded data from the file. Be careful with this method: if\nthe uploaded file is huge it can overwhelm your system if you try to read it\ninto memory. You\u2019ll probably want to use `chunks()` instead; see below.\n\n"}, {"name": "core.files.uploadedfile.UploadedFile.size", "path": "ref/files/uploads#django.core.files.uploadedfile.UploadedFile.size", "type": "django.core", "text": "\nThe size, in bytes, of the uploaded file.\n\n"}, {"name": "core.files.uploadhandler.FileUploadHandler", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler", "type": "django.core", "text": "\n\n"}, {"name": "core.files.uploadhandler.FileUploadHandler.chunk_size", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.chunk_size", "type": "django.core", "text": "\nSize, in bytes, of the \u201cchunks\u201d Django should store into memory and feed into\nthe handler. That is, this attribute controls the size of chunks fed into\n`FileUploadHandler.receive_data_chunk`.\n\nFor maximum performance the chunk sizes should be divisible by `4` and should\nnot exceed 2 GB (231 bytes) in size. When there are multiple chunk sizes\nprovided by multiple handlers, Django will use the smallest chunk size defined\nby any handler.\n\nThe default is 64*210 bytes, or 64 KB.\n\n"}, {"name": "core.files.uploadhandler.FileUploadHandler.file_complete()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.file_complete", "type": "django.core", "text": "\nCalled when a file has finished uploading.\n\nThe handler should return an `UploadedFile` object that will be stored in\n`request.FILES`. Handlers may also return `None` to indicate that the\n`UploadedFile` object should come from subsequent upload handlers.\n\n"}, {"name": "core.files.uploadhandler.FileUploadHandler.handle_raw_input()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.handle_raw_input", "type": "django.core", "text": "\nAllows the handler to completely override the parsing of the raw HTTP input.\n\n`input_data` is a file-like object that supports `read()`-ing.\n\n`META` is the same object as `request.META`.\n\n`content_length` is the length of the data in `input_data`. Don\u2019t read more\nthan `content_length` bytes from `input_data`.\n\n`boundary` is the MIME boundary for this request.\n\n`encoding` is the encoding of the request.\n\nReturn `None` if you want upload handling to continue, or a tuple of `(POST,\nFILES)` if you want to return the new data structures suitable for the request\ndirectly.\n\n"}, {"name": "core.files.uploadhandler.FileUploadHandler.new_file()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.new_file", "type": "django.core", "text": "\nCallback signaling that a new file upload is starting. This is called before\nany data has been fed to any upload handlers.\n\n`field_name` is a string name of the file `<input>` field.\n\n`file_name` is the filename provided by the browser.\n\n`content_type` is the MIME type provided by the browser \u2013 E.g. `'image/jpeg'`.\n\n`content_length` is the length of the image given by the browser. Sometimes\nthis won\u2019t be provided and will be `None`.\n\n`charset` is the character set (i.e. `utf8`) given by the browser. Like\n`content_length`, this sometimes won\u2019t be provided.\n\n`content_type_extra` is extra information about the file from the `content-\ntype` header. See `UploadedFile.content_type_extra`.\n\nThis method may raise a `StopFutureHandlers` exception to prevent future\nhandlers from handling this file.\n\n"}, {"name": "core.files.uploadhandler.FileUploadHandler.receive_data_chunk()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.receive_data_chunk", "type": "django.core", "text": "\nReceives a \u201cchunk\u201d of data from the file upload.\n\n`raw_data` is a bytestring containing the uploaded data.\n\n`start` is the position in the file where this `raw_data` chunk begins.\n\nThe data you return will get fed into the subsequent upload handlers\u2019\n`receive_data_chunk` methods. In this way, one handler can be a \u201cfilter\u201d for\nother handlers.\n\nReturn `None` from `receive_data_chunk` to short-circuit remaining upload\nhandlers from getting this chunk. This is useful if you\u2019re storing the\nuploaded data yourself and don\u2019t want future handlers to store a copy of the\ndata.\n\nIf you raise a `StopUpload` or a `SkipFile` exception, the upload will abort\nor the file will be completely skipped.\n\n"}, {"name": "core.files.uploadhandler.FileUploadHandler.upload_complete()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.upload_complete", "type": "django.core", "text": "\nCallback signaling that the entire upload (all files) has completed.\n\n"}, {"name": "core.files.uploadhandler.FileUploadHandler.upload_interrupted()", "path": "ref/files/uploads#django.core.files.uploadhandler.FileUploadHandler.upload_interrupted", "type": "django.core", "text": "\nCallback signaling that the upload was interrupted, e.g. when the user closed\ntheir browser during file upload.\n\n"}, {"name": "core.files.uploadhandler.MemoryFileUploadHandler", "path": "ref/files/uploads#django.core.files.uploadhandler.MemoryFileUploadHandler", "type": "django.core", "text": "\n\n"}, {"name": "core.files.uploadhandler.TemporaryFileUploadHandler", "path": "ref/files/uploads#django.core.files.uploadhandler.TemporaryFileUploadHandler", "type": "django.core", "text": "\n\n"}, {"name": "core.mail.backends.smtp.EmailBackend", "path": "topics/email#django.core.mail.backends.smtp.EmailBackend", "type": "django.core", "text": "\nThis is the default backend. Email will be sent through a SMTP server.\n\nThe value for each argument is retrieved from the matching setting if the\nargument is `None`:\n\nThe SMTP backend is the default configuration inherited by Django. If you want\nto specify it explicitly, put the following in your settings:\n\nIf unspecified, the default `timeout` will be the one provided by\n`socket.getdefaulttimeout()`, which defaults to `None` (no timeout).\n\n"}, {"name": "core.mail.django.core.mail.outbox", "path": "topics/testing/tools#django.core.mail.django.core.mail.outbox", "type": "django.core", "text": "\n\n"}, {"name": "core.mail.EmailMessage", "path": "topics/email#django.core.mail.EmailMessage", "type": "django.core", "text": "\n\n"}, {"name": "core.mail.get_connection()", "path": "topics/email#django.core.mail.get_connection", "type": "django.core", "text": "\n\n"}, {"name": "core.mail.mail_admins()", "path": "topics/email#django.core.mail.mail_admins", "type": "django.core", "text": "\n\n"}, {"name": "core.mail.mail_managers()", "path": "topics/email#django.core.mail.mail_managers", "type": "django.core", "text": "\n\n"}, {"name": "core.mail.send_mail()", "path": "topics/email#django.core.mail.send_mail", "type": "django.core", "text": "\n\n"}, {"name": "core.mail.send_mass_mail()", "path": "topics/email#django.core.mail.send_mass_mail", "type": "django.core", "text": "\n\n"}, {"name": "core.management.AppCommand", "path": "howto/custom-management-commands#django.core.management.AppCommand", "type": "django.core", "text": "\n\n"}, {"name": "core.management.AppCommand.handle_app_config()", "path": "howto/custom-management-commands#django.core.management.AppCommand.handle_app_config", "type": "django.core", "text": "\nPerform the command\u2019s actions for `app_config`, which will be an `AppConfig`\ninstance corresponding to an application label given on the command line.\n\n"}, {"name": "core.management.BaseCommand", "path": "howto/custom-management-commands#django.core.management.BaseCommand", "type": "django.core", "text": "\n\n"}, {"name": "core.management.BaseCommand.add_arguments()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.add_arguments", "type": "django.core", "text": "\nEntry point to add parser arguments to handle command line arguments passed to\nthe command. Custom commands should override this method to add both\npositional and optional arguments accepted by the command. Calling `super()`\nis not needed when directly subclassing `BaseCommand`.\n\n"}, {"name": "core.management.BaseCommand.check()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.check", "type": "django.core", "text": "\nUses the system check framework to inspect the entire Django project for\npotential problems. Serious problems are raised as a `CommandError`; warnings\nare output to stderr; minor notifications are output to stdout.\n\nIf `app_configs` and `tags` are both `None`, all system checks are performed.\n`tags` can be a list of check tags, like `compatibility` or `models`.\n\n"}, {"name": "core.management.BaseCommand.create_parser()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.create_parser", "type": "django.core", "text": "\nReturns a `CommandParser` instance, which is an `ArgumentParser` subclass with\na few customizations for Django.\n\nYou can customize the instance by overriding this method and calling `super()`\nwith `kwargs` of `ArgumentParser` parameters.\n\n"}, {"name": "core.management.BaseCommand.execute()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.execute", "type": "django.core", "text": "\nTries to execute this command, performing system checks if needed (as\ncontrolled by the `requires_system_checks` attribute). If the command raises a\n`CommandError`, it\u2019s intercepted and printed to stderr.\n\n"}, {"name": "core.management.BaseCommand.get_version()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.get_version", "type": "django.core", "text": "\nReturns the Django version, which should be correct for all built-in Django\ncommands. User-supplied commands can override this method to return their own\nversion.\n\n"}, {"name": "core.management.BaseCommand.handle()", "path": "howto/custom-management-commands#django.core.management.BaseCommand.handle", "type": "django.core", "text": "\nThe actual logic of the command. Subclasses must implement this method.\n\nIt may return a string which will be printed to `stdout` (wrapped by `BEGIN;`\nand `COMMIT;` if `output_transaction` is `True`).\n\n"}, {"name": "core.management.BaseCommand.help", "path": "howto/custom-management-commands#django.core.management.BaseCommand.help", "type": "django.core", "text": "\nA short description of the command, which will be printed in the help message\nwhen the user runs the command `python manage.py help <command>`.\n\n"}, {"name": "core.management.BaseCommand.missing_args_message", "path": "howto/custom-management-commands#django.core.management.BaseCommand.missing_args_message", "type": "django.core", "text": "\nIf your command defines mandatory positional arguments, you can customize the\nmessage error returned in the case of missing arguments. The default is output\nby `argparse` (\u201ctoo few arguments\u201d).\n\n"}, {"name": "core.management.BaseCommand.output_transaction", "path": "howto/custom-management-commands#django.core.management.BaseCommand.output_transaction", "type": "django.core", "text": "\nA boolean indicating whether the command outputs SQL statements; if `True`,\nthe output will automatically be wrapped with `BEGIN;` and `COMMIT;`. Default\nvalue is `False`.\n\n"}, {"name": "core.management.BaseCommand.requires_migrations_checks", "path": "howto/custom-management-commands#django.core.management.BaseCommand.requires_migrations_checks", "type": "django.core", "text": "\nA boolean; if `True`, the command prints a warning if the set of migrations on\ndisk don\u2019t match the migrations in the database. A warning doesn\u2019t prevent the\ncommand from executing. Default value is `False`.\n\n"}, {"name": "core.management.BaseCommand.requires_system_checks", "path": "howto/custom-management-commands#django.core.management.BaseCommand.requires_system_checks", "type": "django.core", "text": "\nA list or tuple of tags, e.g. `[Tags.staticfiles, Tags.models]`. System checks\nregistered in the chosen tags will be checked for errors prior to executing\nthe command. The value `'__all__'` can be used to specify that all system\nchecks should be performed. Default value is `'__all__'`.\n\nIn older versions, the `requires_system_checks` attribute expects a boolean\nvalue instead of a list or tuple of tags.\n\n"}, {"name": "core.management.BaseCommand.style", "path": "howto/custom-management-commands#django.core.management.BaseCommand.style", "type": "django.core", "text": "\nAn instance attribute that helps create colored output when writing to\n`stdout` or `stderr`. For example:\n\nSee Syntax coloring to learn how to modify the color palette and to see the\navailable styles (use uppercased versions of the \u201croles\u201d described in that\nsection).\n\nIf you pass the `--no-color` option when running your command, all\n`self.style()` calls will return the original string uncolored.\n\n"}, {"name": "core.management.BaseCommand.suppressed_base_arguments", "path": "howto/custom-management-commands#django.core.management.BaseCommand.suppressed_base_arguments", "type": "django.core", "text": "\nThe default command options to suppress in the help output. This should be a\nset of option names (e.g. `'--verbosity'`). The default values for the\nsuppressed options are still passed.\n\n"}, {"name": "core.management.call_command()", "path": "ref/django-admin#django.core.management.call_command", "type": "django.core", "text": "\n\n"}, {"name": "core.management.LabelCommand", "path": "howto/custom-management-commands#django.core.management.LabelCommand", "type": "django.core", "text": "\n\n"}, {"name": "core.management.LabelCommand.handle_label()", "path": "howto/custom-management-commands#django.core.management.LabelCommand.handle_label", "type": "django.core", "text": "\nPerform the command\u2019s actions for `label`, which will be the string as given\non the command line.\n\n"}, {"name": "core.management.LabelCommand.label", "path": "howto/custom-management-commands#django.core.management.LabelCommand.label", "type": "django.core", "text": "\nA string describing the arbitrary arguments passed to the command. The string\nis used in the usage text and error messages of the command. Defaults to\n`'label'`.\n\n"}, {"name": "core.paginator.Page", "path": "ref/paginator#django.core.paginator.Page", "type": "django.core", "text": "\nA page acts like a sequence of `Page.object_list` when using `len()` or\niterating it directly.\n\n"}, {"name": "core.paginator.Page.end_index()", "path": "ref/paginator#django.core.paginator.Page.end_index", "type": "django.core", "text": "\nReturns the 1-based index of the last object on the page, relative to all of\nthe objects in the paginator\u2019s list. For example, when paginating a list of 5\nobjects with 2 objects per page, the second page\u2019s `end_index()` would return\n`4`.\n\n"}, {"name": "core.paginator.Page.has_next()", "path": "ref/paginator#django.core.paginator.Page.has_next", "type": "django.core", "text": "\nReturns `True` if there\u2019s a next page.\n\n"}, {"name": "core.paginator.Page.has_other_pages()", "path": "ref/paginator#django.core.paginator.Page.has_other_pages", "type": "django.core", "text": "\nReturns `True` if there\u2019s a next or previous page.\n\n"}, {"name": "core.paginator.Page.has_previous()", "path": "ref/paginator#django.core.paginator.Page.has_previous", "type": "django.core", "text": "\nReturns `True` if there\u2019s a previous page.\n\n"}, {"name": "core.paginator.Page.next_page_number()", "path": "ref/paginator#django.core.paginator.Page.next_page_number", "type": "django.core", "text": "\nReturns the next page number. Raises `InvalidPage` if next page doesn\u2019t exist.\n\n"}, {"name": "core.paginator.Page.number", "path": "ref/paginator#django.core.paginator.Page.number", "type": "django.core", "text": "\nThe 1-based page number for this page.\n\n"}, {"name": "core.paginator.Page.object_list", "path": "ref/paginator#django.core.paginator.Page.object_list", "type": "django.core", "text": "\nThe list of objects on this page.\n\n"}, {"name": "core.paginator.Page.paginator", "path": "ref/paginator#django.core.paginator.Page.paginator", "type": "django.core", "text": "\nThe associated `Paginator` object.\n\n"}, {"name": "core.paginator.Page.previous_page_number()", "path": "ref/paginator#django.core.paginator.Page.previous_page_number", "type": "django.core", "text": "\nReturns the previous page number. Raises `InvalidPage` if previous page\ndoesn\u2019t exist.\n\n"}, {"name": "core.paginator.Page.start_index()", "path": "ref/paginator#django.core.paginator.Page.start_index", "type": "django.core", "text": "\nReturns the 1-based index of the first object on the page, relative to all of\nthe objects in the paginator\u2019s list. For example, when paginating a list of 5\nobjects with 2 objects per page, the second page\u2019s `start_index()` would\nreturn `3`.\n\n"}, {"name": "core.paginator.Paginator", "path": "ref/paginator#django.core.paginator.Paginator", "type": "django.core", "text": "\nA paginator acts like a sequence of `Page` when using `len()` or iterating it\ndirectly.\n\n"}, {"name": "core.paginator.Paginator.allow_empty_first_page", "path": "ref/paginator#django.core.paginator.Paginator.allow_empty_first_page", "type": "django.core", "text": "\nOptional. Whether or not the first page is allowed to be empty. If `False` and\n`object_list` is empty, then an `EmptyPage` error will be raised.\n\n"}, {"name": "core.paginator.Paginator.count", "path": "ref/paginator#django.core.paginator.Paginator.count", "type": "django.core", "text": "\nThe total number of objects, across all pages.\n\nNote\n\nWhen determining the number of objects contained in `object_list`, `Paginator`\nwill first try calling `object_list.count()`. If `object_list` has no\n`count()` method, then `Paginator` will fall back to using `len(object_list)`.\nThis allows objects, such as `QuerySet`, to use a more efficient `count()`\nmethod when available.\n\n"}, {"name": "core.paginator.Paginator.ELLIPSIS", "path": "ref/paginator#django.core.paginator.Paginator.ELLIPSIS", "type": "django.core", "text": "\nA translatable string used as a substitute for elided page numbers in the page\nrange returned by `get_elided_page_range()`. Default is `'\u2026'`.\n\n"}, {"name": "core.paginator.Paginator.get_elided_page_range()", "path": "ref/paginator#django.core.paginator.Paginator.get_elided_page_range", "type": "django.core", "text": "\nReturns a 1-based list of page numbers similar to `Paginator.page_range`, but\nmay add an ellipsis to either or both sides of the current page number when\n`Paginator.num_pages` is large.\n\nThe number of pages to include on each side of the current page number is\ndetermined by the `on_each_side` argument which defaults to 3.\n\nThe number of pages to include at the beginning and end of page range is\ndetermined by the `on_ends` argument which defaults to 2.\n\nFor example, with the default values for `on_each_side` and `on_ends`, if the\ncurrent page is 10 and there are 50 pages, the page range will be `[1, 2, '\u2026',\n7, 8, 9, 10, 11, 12, 13, '\u2026', 49, 50]`. This will result in pages 7, 8, and 9\nto the left of and 11, 12, and 13 to the right of the current page as well as\npages 1 and 2 at the start and 49 and 50 at the end.\n\nRaises `InvalidPage` if the given page number doesn\u2019t exist.\n\n"}, {"name": "core.paginator.Paginator.get_page()", "path": "ref/paginator#django.core.paginator.Paginator.get_page", "type": "django.core", "text": "\nReturns a `Page` object with the given 1-based index, while also handling out\nof range and invalid page numbers.\n\nIf the page isn\u2019t a number, it returns the first page. If the page number is\nnegative or greater than the number of pages, it returns the last page.\n\nRaises an `EmptyPage` exception only if you specify `Paginator(...,\nallow_empty_first_page=False)` and the `object_list` is empty.\n\n"}, {"name": "core.paginator.Paginator.num_pages", "path": "ref/paginator#django.core.paginator.Paginator.num_pages", "type": "django.core", "text": "\nThe total number of pages.\n\n"}, {"name": "core.paginator.Paginator.object_list", "path": "ref/paginator#django.core.paginator.Paginator.object_list", "type": "django.core", "text": "\nRequired. A list, tuple, `QuerySet`, or other sliceable object with a\n`count()` or `__len__()` method. For consistent pagination, `QuerySet`s should\nbe ordered, e.g. with an `order_by()` clause or with a default `ordering` on\nthe model.\n\nPerformance issues paginating large `QuerySet`s\n\nIf you\u2019re using a `QuerySet` with a very large number of items, requesting\nhigh page numbers might be slow on some databases, because the resulting\n`LIMIT`/`OFFSET` query needs to count the number of `OFFSET` records which\ntakes longer as the page number gets higher.\n\n"}, {"name": "core.paginator.Paginator.orphans", "path": "ref/paginator#django.core.paginator.Paginator.orphans", "type": "django.core", "text": "\nOptional. Use this when you don\u2019t want to have a last page with very few\nitems. If the last page would normally have a number of items less than or\nequal to `orphans`, then those items will be added to the previous page (which\nbecomes the last page) instead of leaving the items on a page by themselves.\nFor example, with 23 items, `per_page=10`, and `orphans=3`, there will be two\npages; the first page with 10 items and the second (and last) page with 13\nitems. `orphans` defaults to zero, which means pages are never combined and\nthe last page may have one item.\n\n"}, {"name": "core.paginator.Paginator.page()", "path": "ref/paginator#django.core.paginator.Paginator.page", "type": "django.core", "text": "\nReturns a `Page` object with the given 1-based index. Raises\n`PageNotAnInteger` if the `number` cannot be converted to an integer by\ncalling `int()`. Raises `EmptyPage` if the given page number doesn\u2019t exist.\n\n"}, {"name": "core.paginator.Paginator.page_range", "path": "ref/paginator#django.core.paginator.Paginator.page_range", "type": "django.core", "text": "\nA 1-based range iterator of page numbers, e.g. yielding `[1, 2, 3, 4]`.\n\n"}, {"name": "core.paginator.Paginator.per_page", "path": "ref/paginator#django.core.paginator.Paginator.per_page", "type": "django.core", "text": "\nRequired. The maximum number of items to include on a page, not including\norphans (see the `orphans` optional argument below).\n\n"}, {"name": "core.serializers.get_serializer()", "path": "topics/serialization#django.core.serializers.get_serializer", "type": "django.core", "text": "\n\n"}, {"name": "core.serializers.json.DjangoJSONEncoder", "path": "topics/serialization#django.core.serializers.json.DjangoJSONEncoder", "type": "django.core", "text": "\n\n"}, {"name": "core.signals.got_request_exception", "path": "ref/signals#django.core.signals.got_request_exception", "type": "django.core", "text": "\n\n"}, {"name": "core.signals.request_finished", "path": "ref/signals#django.core.signals.request_finished", "type": "django.core", "text": "\n\n"}, {"name": "core.signals.request_started", "path": "ref/signals#django.core.signals.request_started", "type": "django.core", "text": "\n\n"}, {"name": "core.signing.dumps()", "path": "topics/signing#django.core.signing.dumps", "type": "django.core", "text": "\nReturns URL-safe, signed base64 compressed JSON string. Serialized object is\nsigned using `TimestampSigner`.\n\n"}, {"name": "core.signing.loads()", "path": "topics/signing#django.core.signing.loads", "type": "django.core", "text": "\nReverse of `dumps()`, raises `BadSignature` if signature fails. Checks\n`max_age` (in seconds) if given.\n\n"}, {"name": "core.signing.Signer", "path": "topics/signing#django.core.signing.Signer", "type": "django.core", "text": "\nReturns a signer which uses `key` to generate signatures and `sep` to separate\nvalues. `sep` cannot be in the URL safe base64 alphabet. This alphabet\ncontains alphanumeric characters, hyphens, and underscores. `algorithm` must\nbe an algorithm supported by `hashlib`, it defaults to `'sha256'`.\n\n"}, {"name": "core.signing.TimestampSigner", "path": "topics/signing#django.core.signing.TimestampSigner", "type": "django.core", "text": "\nSign `value` and append current timestamp to it.\n\nChecks if `value` was signed less than `max_age` seconds ago, otherwise raises\n`SignatureExpired`. The `max_age` parameter can accept an integer or a\n`datetime.timedelta` object.\n\nEncode, optionally compress, append current timestamp, and sign complex data\nstructure (e.g. list, tuple, or dictionary).\n\nChecks if `signed_obj` was signed less than `max_age` seconds ago, otherwise\nraises `SignatureExpired`. The `max_age` parameter can accept an integer or a\n`datetime.timedelta` object.\n\n"}, {"name": "core.signing.TimestampSigner.sign()", "path": "topics/signing#django.core.signing.TimestampSigner.sign", "type": "django.core", "text": "\nSign `value` and append current timestamp to it.\n\n"}, {"name": "core.signing.TimestampSigner.sign_object()", "path": "topics/signing#django.core.signing.TimestampSigner.sign_object", "type": "django.core", "text": "\nEncode, optionally compress, append current timestamp, and sign complex data\nstructure (e.g. list, tuple, or dictionary).\n\n"}, {"name": "core.signing.TimestampSigner.unsign()", "path": "topics/signing#django.core.signing.TimestampSigner.unsign", "type": "django.core", "text": "\nChecks if `value` was signed less than `max_age` seconds ago, otherwise raises\n`SignatureExpired`. The `max_age` parameter can accept an integer or a\n`datetime.timedelta` object.\n\n"}, {"name": "core.signing.TimestampSigner.unsign_object()", "path": "topics/signing#django.core.signing.TimestampSigner.unsign_object", "type": "django.core", "text": "\nChecks if `signed_obj` was signed less than `max_age` seconds ago, otherwise\nraises `SignatureExpired`. The `max_age` parameter can accept an integer or a\n`datetime.timedelta` object.\n\n"}, {"name": "core.validators.DecimalValidator", "path": "ref/validators#django.core.validators.DecimalValidator", "type": "django.core", "text": "\nRaises `ValidationError` with the following codes:\n\n"}, {"name": "core.validators.EmailValidator", "path": "ref/validators#django.core.validators.EmailValidator", "type": "django.core", "text": "\nThe error message used by `ValidationError` if validation fails. Defaults to\n`\"Enter a valid email address\"`.\n\nThe error code used by `ValidationError` if validation fails. Defaults to\n`\"invalid\"`.\n\nAllowlist of email domains. By default, a regular expression (the\n`domain_regex` attribute) is used to validate whatever appears after the `@`\nsign. However, if that string appears in the `allowlist`, this validation is\nbypassed. If not provided, the default `allowlist` is `['localhost']`. Other\ndomains that don\u2019t contain a dot won\u2019t pass validation, so you\u2019d need to add\nthem to the `allowlist` as necessary.\n\nDeprecated since version 3.2: The `whitelist` parameter is deprecated. Use\n`allowlist` instead. The undocumented `domain_whitelist` attribute is\ndeprecated. Use `domain_allowlist` instead.\n\n"}, {"name": "core.validators.EmailValidator.allowlist", "path": "ref/validators#django.core.validators.EmailValidator.allowlist", "type": "django.core", "text": "\nAllowlist of email domains. By default, a regular expression (the\n`domain_regex` attribute) is used to validate whatever appears after the `@`\nsign. However, if that string appears in the `allowlist`, this validation is\nbypassed. If not provided, the default `allowlist` is `['localhost']`. Other\ndomains that don\u2019t contain a dot won\u2019t pass validation, so you\u2019d need to add\nthem to the `allowlist` as necessary.\n\n"}, {"name": "core.validators.EmailValidator.code", "path": "ref/validators#django.core.validators.EmailValidator.code", "type": "django.core", "text": "\nThe error code used by `ValidationError` if validation fails. Defaults to\n`\"invalid\"`.\n\n"}, {"name": "core.validators.EmailValidator.message", "path": "ref/validators#django.core.validators.EmailValidator.message", "type": "django.core", "text": "\nThe error message used by `ValidationError` if validation fails. Defaults to\n`\"Enter a valid email address\"`.\n\n"}, {"name": "core.validators.FileExtensionValidator", "path": "ref/validators#django.core.validators.FileExtensionValidator", "type": "django.core", "text": "\nRaises a `ValidationError` with a code of `'invalid_extension'` if the\nextension of `value.name` (`value` is a `File`) isn\u2019t found in\n`allowed_extensions`. The extension is compared case-insensitively with\n`allowed_extensions`.\n\nWarning\n\nDon\u2019t rely on validation of the file extension to determine a file\u2019s type.\nFiles can be renamed to have any extension no matter what data they contain.\n\n"}, {"name": "core.validators.int_list_validator()", "path": "ref/validators#django.core.validators.int_list_validator", "type": "django.core", "text": "\nReturns a `RegexValidator` instance that ensures a string consists of integers\nseparated by `sep`. It allows negative integers when `allow_negative` is\n`True`.\n\n"}, {"name": "core.validators.MaxLengthValidator", "path": "ref/validators#django.core.validators.MaxLengthValidator", "type": "django.core", "text": "\nRaises a `ValidationError` with a code of `'max_length'` if the length of\n`value` is greater than `limit_value`, which may be a callable.\n\n"}, {"name": "core.validators.MaxValueValidator", "path": "ref/validators#django.core.validators.MaxValueValidator", "type": "django.core", "text": "\nRaises a `ValidationError` with a code of `'max_value'` if `value` is greater\nthan `limit_value`, which may be a callable.\n\n"}, {"name": "core.validators.MinLengthValidator", "path": "ref/validators#django.core.validators.MinLengthValidator", "type": "django.core", "text": "\nRaises a `ValidationError` with a code of `'min_length'` if the length of\n`value` is less than `limit_value`, which may be a callable.\n\n"}, {"name": "core.validators.MinValueValidator", "path": "ref/validators#django.core.validators.MinValueValidator", "type": "django.core", "text": "\nRaises a `ValidationError` with a code of `'min_value'` if `value` is less\nthan `limit_value`, which may be a callable.\n\n"}, {"name": "core.validators.ProhibitNullCharactersValidator", "path": "ref/validators#django.core.validators.ProhibitNullCharactersValidator", "type": "django.core", "text": "\nRaises a `ValidationError` if `str(value)` contains one or more nulls\ncharacters (`'\\x00'`).\n\nThe error message used by `ValidationError` if validation fails. Defaults to\n`\"Null characters are not allowed.\"`.\n\nThe error code used by `ValidationError` if validation fails. Defaults to\n`\"null_characters_not_allowed\"`.\n\n"}, {"name": "core.validators.ProhibitNullCharactersValidator.code", "path": "ref/validators#django.core.validators.ProhibitNullCharactersValidator.code", "type": "django.core", "text": "\nThe error code used by `ValidationError` if validation fails. Defaults to\n`\"null_characters_not_allowed\"`.\n\n"}, {"name": "core.validators.ProhibitNullCharactersValidator.message", "path": "ref/validators#django.core.validators.ProhibitNullCharactersValidator.message", "type": "django.core", "text": "\nThe error message used by `ValidationError` if validation fails. Defaults to\n`\"Null characters are not allowed.\"`.\n\n"}, {"name": "core.validators.RegexValidator", "path": "ref/validators#django.core.validators.RegexValidator", "type": "django.core", "text": "\nA `RegexValidator` searches the provided `value` for a given regular\nexpression with `re.search()`. By default, raises a `ValidationError` with\n`message` and `code` if a match is not found. Its behavior can be inverted by\nsetting `inverse_match` to `True`, in which case the `ValidationError` is\nraised when a match is found.\n\nThe regular expression pattern to search for within the provided `value`,\nusing `re.search()`. This may be a string or a pre-compiled regular expression\ncreated with `re.compile()`. Defaults to the empty string, which will be found\nin every possible `value`.\n\nThe error message used by `ValidationError` if validation fails. Defaults to\n`\"Enter a valid value\"`.\n\nThe error code used by `ValidationError` if validation fails. Defaults to\n`\"invalid\"`.\n\nThe match mode for `regex`. Defaults to `False`.\n\nThe regex flags used when compiling the regular expression string `regex`. If\n`regex` is a pre-compiled regular expression, and `flags` is overridden,\n`TypeError` is raised. Defaults to `0`.\n\n"}, {"name": "core.validators.RegexValidator.code", "path": "ref/validators#django.core.validators.RegexValidator.code", "type": "django.core", "text": "\nThe error code used by `ValidationError` if validation fails. Defaults to\n`\"invalid\"`.\n\n"}, {"name": "core.validators.RegexValidator.flags", "path": "ref/validators#django.core.validators.RegexValidator.flags", "type": "django.core", "text": "\nThe regex flags used when compiling the regular expression string `regex`. If\n`regex` is a pre-compiled regular expression, and `flags` is overridden,\n`TypeError` is raised. Defaults to `0`.\n\n"}, {"name": "core.validators.RegexValidator.inverse_match", "path": "ref/validators#django.core.validators.RegexValidator.inverse_match", "type": "django.core", "text": "\nThe match mode for `regex`. Defaults to `False`.\n\n"}, {"name": "core.validators.RegexValidator.message", "path": "ref/validators#django.core.validators.RegexValidator.message", "type": "django.core", "text": "\nThe error message used by `ValidationError` if validation fails. Defaults to\n`\"Enter a valid value\"`.\n\n"}, {"name": "core.validators.RegexValidator.regex", "path": "ref/validators#django.core.validators.RegexValidator.regex", "type": "django.core", "text": "\nThe regular expression pattern to search for within the provided `value`,\nusing `re.search()`. This may be a string or a pre-compiled regular expression\ncreated with `re.compile()`. Defaults to the empty string, which will be found\nin every possible `value`.\n\n"}, {"name": "core.validators.URLValidator", "path": "ref/validators#django.core.validators.URLValidator", "type": "django.core", "text": "\nA `RegexValidator` subclass that ensures a value looks like a URL, and raises\nan error code of `'invalid'` if it doesn\u2019t.\n\nLoopback addresses and reserved IP spaces are considered valid. Literal IPv6\naddresses (RFC 3986#section-3.2.2) and Unicode domains are both supported.\n\nIn addition to the optional arguments of its parent `RegexValidator` class,\n`URLValidator` accepts an extra optional attribute:\n\nURL/URI scheme list to validate against. If not provided, the default list is\n`['http', 'https', 'ftp', 'ftps']`. As a reference, the IANA website provides\na full list of valid URI schemes.\n\n"}, {"name": "core.validators.URLValidator.schemes", "path": "ref/validators#django.core.validators.URLValidator.schemes", "type": "django.core", "text": "\nURL/URI scheme list to validate against. If not provided, the default list is\n`['http', 'https', 'ftp', 'ftps']`. As a reference, the IANA website provides\na full list of valid URI schemes.\n\n"}, {"name": "core.validators.validate_comma_separated_integer_list", "path": "ref/validators#django.core.validators.validate_comma_separated_integer_list", "type": "django.core", "text": "\nA `RegexValidator` instance that ensures a value is a comma-separated list of\nintegers.\n\n"}, {"name": "core.validators.validate_email", "path": "ref/validators#django.core.validators.validate_email", "type": "django.core", "text": "\nAn `EmailValidator` instance without any customizations.\n\n"}, {"name": "core.validators.validate_image_file_extension", "path": "ref/validators#django.core.validators.validate_image_file_extension", "type": "django.core", "text": "\nUses Pillow to ensure that `value.name` (`value` is a `File`) has a valid\nimage extension.\n\n"}, {"name": "core.validators.validate_ipv46_address", "path": "ref/validators#django.core.validators.validate_ipv46_address", "type": "django.core", "text": "\nUses both `validate_ipv4_address` and `validate_ipv6_address` to ensure a\nvalue is either a valid IPv4 or IPv6 address.\n\n"}, {"name": "core.validators.validate_ipv4_address", "path": "ref/validators#django.core.validators.validate_ipv4_address", "type": "django.core", "text": "\nA `RegexValidator` instance that ensures a value looks like an IPv4 address.\n\n"}, {"name": "core.validators.validate_ipv6_address", "path": "ref/validators#django.core.validators.validate_ipv6_address", "type": "django.core", "text": "\nUses `django.utils.ipv6` to check the validity of an IPv6 address.\n\n"}, {"name": "core.validators.validate_slug", "path": "ref/validators#django.core.validators.validate_slug", "type": "django.core", "text": "\nA `RegexValidator` instance that ensures a value consists of only letters,\nnumbers, underscores or hyphens.\n\n"}, {"name": "core.validators.validate_unicode_slug", "path": "ref/validators#django.core.validators.validate_unicode_slug", "type": "django.core", "text": "\nA `RegexValidator` instance that ensures a value consists of only Unicode\nletters, numbers, underscores, or hyphens.\n\n"}, {"name": "Creating forms from models", "path": "topics/forms/modelforms", "type": "Guides", "text": "\nIf you\u2019re building a database-driven app, chances are you\u2019ll have forms that\nmap closely to Django models. For instance, you might have a `BlogComment`\nmodel, and you want to create a form that lets people submit comments. In this\ncase, it would be redundant to define the field types in your form, because\nyou\u2019ve already defined the fields in your model.\n\nFor this reason, Django provides a helper class that lets you create a `Form`\nclass from a Django model.\n\nFor example:\n\nThe generated `Form` class will have a form field for every model field\nspecified, in the order specified in the `fields` attribute.\n\nEach model field has a corresponding default form field. For example, a\n`CharField` on a model is represented as a `CharField` on a form. A model\n`ManyToManyField` is represented as a `MultipleChoiceField`. Here is the full\nlist of conversions:\n\nAs you might expect, the `ForeignKey` and `ManyToManyField` model field types\nare special cases:\n\nIn addition, each generated form field has attributes set as follows:\n\nFinally, note that you can override the form field used for a given model\nfield. See Overriding the default fields below.\n\nConsider this set of models:\n\nWith these models, the `ModelForm` subclasses above would be roughly\nequivalent to this (the only difference being the `save()` method, which we\u2019ll\ndiscuss in a moment.):\n\nThere are two main steps involved in validating a `ModelForm`:\n\nJust like normal form validation, model form validation is triggered\nimplicitly when calling `is_valid()` or accessing the `errors` attribute and\nexplicitly when calling `full_clean()`, although you will typically not use\nthe latter method in practice.\n\n`Model` validation (`Model.full_clean()`) is triggered from within the form\nvalidation step, right after the form\u2019s `clean()` method is called.\n\nWarning\n\nThe cleaning process modifies the model instance passed to the `ModelForm`\nconstructor in various ways. For instance, any date fields on the model are\nconverted into actual date objects. Failed validation may leave the underlying\nmodel instance in an inconsistent state and therefore it\u2019s not recommended to\nreuse it.\n\nYou can override the `clean()` method on a model form to provide additional\nvalidation in the same way you can on a normal form.\n\nA model form instance attached to a model object will contain an `instance`\nattribute that gives its methods access to that specific model instance.\n\nWarning\n\nThe `ModelForm.clean()` method sets a flag that makes the model validation\nstep validate the uniqueness of model fields that are marked as `unique`,\n`unique_together` or `unique_for_date|month|year`.\n\nIf you would like to override the `clean()` method and maintain this\nvalidation, you must call the parent class\u2019s `clean()` method.\n\nAs part of the validation process, `ModelForm` will call the `clean()` method\nof each field on your model that has a corresponding field on your form. If\nyou have excluded any model fields, validation will not be run on those\nfields. See the form validation documentation for more on how field cleaning\nand validation work.\n\nThe model\u2019s `clean()` method will be called before any uniqueness checks are\nmade. See Validating objects for more information on the model\u2019s `clean()`\nhook.\n\nError messages defined at the `form field` level or at the form Meta level\nalways take precedence over the error messages defined at the `model field`\nlevel.\n\nError messages defined on `model fields` are only used when the\n`ValidationError` is raised during the model validation step and no\ncorresponding error messages are defined at the form level.\n\nYou can override the error messages from `NON_FIELD_ERRORS` raised by model\nvalidation by adding the `NON_FIELD_ERRORS` key to the `error_messages`\ndictionary of the `ModelForm`\u2019s inner `Meta` class:\n\nEvery `ModelForm` also has a `save()` method. This method creates and saves a\ndatabase object from the data bound to the form. A subclass of `ModelForm` can\naccept an existing model instance as the keyword argument `instance`; if this\nis supplied, `save()` will update that instance. If it\u2019s not supplied,\n`save()` will create a new instance of the specified model:\n\nNote that if the form hasn\u2019t been validated, calling `save()` will do so by\nchecking `form.errors`. A `ValueError` will be raised if the data in the form\ndoesn\u2019t validate \u2013 i.e., if `form.errors` evaluates to `True`.\n\nIf an optional field doesn\u2019t appear in the form\u2019s data, the resulting model\ninstance uses the model field `default`, if there is one, for that field. This\nbehavior doesn\u2019t apply to fields that use `CheckboxInput`,\n`CheckboxSelectMultiple`, or `SelectMultiple` (or any custom widget whose\n`value_omitted_from_data()` method always returns `False`) since an unchecked\ncheckbox and unselected `<select multiple>` don\u2019t appear in the data of an\nHTML form submission. Use a custom form field or widget if you\u2019re designing an\nAPI and want the default fallback behavior for a field that uses one of these\nwidgets.\n\nThis `save()` method accepts an optional `commit` keyword argument, which\naccepts either `True` or `False`. If you call `save()` with `commit=False`,\nthen it will return an object that hasn\u2019t yet been saved to the database. In\nthis case, it\u2019s up to you to call `save()` on the resulting model instance.\nThis is useful if you want to do custom processing on the object before saving\nit, or if you want to use one of the specialized model saving options.\n`commit` is `True` by default.\n\nAnother side effect of using `commit=False` is seen when your model has a\nmany-to-many relation with another model. If your model has a many-to-many\nrelation and you specify `commit=False` when you save a form, Django cannot\nimmediately save the form data for the many-to-many relation. This is because\nit isn\u2019t possible to save many-to-many data for an instance until the instance\nexists in the database.\n\nTo work around this problem, every time you save a form using `commit=False`,\nDjango adds a `save_m2m()` method to your `ModelForm` subclass. After you\u2019ve\nmanually saved the instance produced by the form, you can invoke `save_m2m()`\nto save the many-to-many form data. For example:\n\nCalling `save_m2m()` is only required if you use `save(commit=False)`. When\nyou use a `save()` on a form, all data \u2013 including many-to-many data \u2013 is\nsaved without the need for any additional method calls. For example:\n\nOther than the `save()` and `save_m2m()` methods, a `ModelForm` works exactly\nthe same way as any other `forms` form. For example, the `is_valid()` method\nis used to check for validity, the `is_multipart()` method is used to\ndetermine whether a form requires multipart file upload (and hence whether\n`request.FILES` must be passed to the form), etc. See Binding uploaded files\nto a form for more information.\n\nIt is strongly recommended that you explicitly set all fields that should be\nedited in the form using the `fields` attribute. Failure to do so can easily\nlead to security problems when a form unexpectedly allows a user to set\ncertain fields, especially when new fields are added to a model. Depending on\nhow the form is rendered, the problem may not even be visible on the web page.\n\nThe alternative approach would be to include all fields automatically, or\nremove only some. This fundamental approach is known to be much less secure\nand has led to serious exploits on major websites (e.g. GitHub).\n\nThere are, however, two shortcuts available for cases where you can guarantee\nthese security concerns do not apply to you:\n\nSet the `fields` attribute to the special value `'__all__'` to indicate that\nall fields in the model should be used. For example:\n\nSet the `exclude` attribute of the `ModelForm`\u2019s inner `Meta` class to a list\nof fields to be excluded from the form.\n\nFor example:\n\nSince the `Author` model has the 3 fields `name`, `title` and `birth_date`,\nthis will result in the fields `name` and `birth_date` being present on the\nform.\n\nIf either of these are used, the order the fields appear in the form will be\nthe order the fields are defined in the model, with `ManyToManyField`\ninstances appearing last.\n\nIn addition, Django applies the following rule: if you set `editable=False` on\nthe model field, any form created from the model via `ModelForm` will not\ninclude that field.\n\nNote\n\nAny fields not included in a form by the above logic will not be set by the\nform\u2019s `save()` method. Also, if you manually add the excluded fields back to\nthe form, they will not be initialized from the model instance.\n\nDjango will prevent any attempt to save an incomplete model, so if the model\ndoes not allow the missing fields to be empty, and does not provide a default\nvalue for the missing fields, any attempt to `save()` a `ModelForm` with\nmissing fields will fail. To avoid this failure, you must instantiate your\nmodel with initial values for the missing, but required fields:\n\nAlternatively, you can use `save(commit=False)` and manually set any extra\nrequired fields:\n\nSee the section on saving forms for more details on using\n`save(commit=False)`.\n\nThe default field types, as described in the Field types table above, are\nsensible defaults. If you have a `DateField` in your model, chances are you\u2019d\nwant that to be represented as a `DateField` in your form. But `ModelForm`\ngives you the flexibility of changing the form field for a given model.\n\nTo specify a custom widget for a field, use the `widgets` attribute of the\ninner `Meta` class. This should be a dictionary mapping field names to widget\nclasses or instances.\n\nFor example, if you want the `CharField` for the `name` attribute of `Author`\nto be represented by a `<textarea>` instead of its default `<input\ntype=\"text\">`, you can override the field\u2019s widget:\n\nThe `widgets` dictionary accepts either widget instances (e.g.,\n`Textarea(...)`) or classes (e.g., `Textarea`). Note that the `widgets`\ndictionary is ignored for a model field with a non-empty `choices` attribute.\nIn this case, you must override the form field to use a different widget.\n\nSimilarly, you can specify the `labels`, `help_texts` and `error_messages`\nattributes of the inner `Meta` class if you want to further customize a field.\n\nFor example if you wanted to customize the wording of all user facing strings\nfor the `name` field:\n\nYou can also specify `field_classes` to customize the type of fields\ninstantiated by the form.\n\nFor example, if you wanted to use `MySlugFormField` for the `slug` field, you\ncould do the following:\n\nFinally, if you want complete control over of a field \u2013 including its type,\nvalidators, required, etc. \u2013 you can do this by declaratively specifying\nfields like you would in a regular `Form`.\n\nIf you want to specify a field\u2019s validators, you can do so by defining the\nfield declaratively and setting its `validators` parameter:\n\nNote\n\nWhen you explicitly instantiate a form field like this, it is important to\nunderstand how `ModelForm` and regular `Form` are related.\n\n`ModelForm` is a regular `Form` which can automatically generate certain\nfields. The fields that are automatically generated depend on the content of\nthe `Meta` class and on which fields have already been defined declaratively.\nBasically, `ModelForm` will only generate fields that are missing from the\nform, or in other words, fields that weren\u2019t defined declaratively.\n\nFields defined declaratively are left as-is, therefore any customizations made\nto `Meta` attributes such as `widgets`, `labels`, `help_texts`, or\n`error_messages` are ignored; these only apply to fields that are generated\nautomatically.\n\nSimilarly, fields defined declaratively do not draw their attributes like\n`max_length` or `required` from the corresponding model. If you want to\nmaintain the behavior specified in the model, you must set the relevant\narguments explicitly when declaring the form field.\n\nFor example, if the `Article` model looks like this:\n\nand you want to do some custom validation for `headline`, while keeping the\n`blank` and `help_text` values as specified, you might define `ArticleForm`\nlike this:\n\nYou must ensure that the type of the form field can be used to set the\ncontents of the corresponding model field. When they are not compatible, you\nwill get a `ValueError` as no implicit conversion takes place.\n\nSee the form field documentation for more information on fields and their\narguments.\n\nBy default, the fields in a `ModelForm` will not localize their data. To\nenable localization for fields, you can use the `localized_fields` attribute\non the `Meta` class.\n\nIf `localized_fields` is set to the special value `'__all__'`, all fields will\nbe localized.\n\nAs with basic forms, you can extend and reuse `ModelForms` by inheriting them.\nThis is useful if you need to declare extra fields or extra methods on a\nparent class for use in a number of forms derived from models. For example,\nusing the previous `ArticleForm` class:\n\nThis creates a form that behaves identically to `ArticleForm`, except there\u2019s\nsome extra validation and cleaning for the `pub_date` field.\n\nYou can also subclass the parent\u2019s `Meta` inner class if you want to change\nthe `Meta.fields` or `Meta.exclude` lists:\n\nThis adds the extra method from the `EnhancedArticleForm` and modifies the\noriginal `ArticleForm.Meta` to remove one field.\n\nThere are a couple of things to note, however.\n\nIt\u2019s possible to declaratively remove a `Field` inherited from a parent class\nby setting the name to be `None` on the subclass.\n\nYou can only use this technique to opt out from a field defined declaratively\nby a parent class; it won\u2019t prevent the `ModelForm` metaclass from generating\na default field. To opt-out from default fields, see Selecting the fields to\nuse.\n\nAs with regular forms, it\u2019s possible to specify initial data for forms by\nspecifying an `initial` parameter when instantiating the form. Initial values\nprovided this way will override both initial values from the form field and\nvalues from an attached model instance. For example:\n\nYou can create forms from a given model using the standalone function\n`modelform_factory()`, instead of using a class definition. This may be more\nconvenient if you do not have many customizations to make:\n\nThis can also be used to make modifications to existing forms, for example by\nspecifying the widgets to be used for a given field:\n\nThe fields to include can be specified using the `fields` and `exclude`\nkeyword arguments, or the corresponding attributes on the `ModelForm` inner\n`Meta` class. Please see the `ModelForm` Selecting the fields to use\ndocumentation.\n\n\u2026 or enable localization for specific fields:\n\nLike regular formsets, Django provides a couple of enhanced formset classes to\nmake working with Django models more convenient. Let\u2019s reuse the `Author`\nmodel from above:\n\nUsing `fields` restricts the formset to use only the given fields.\nAlternatively, you can take an \u201copt-out\u201d approach, specifying which fields to\nexclude:\n\nThis will create a formset that is capable of working with the data associated\nwith the `Author` model. It works just like a regular formset:\n\nNote\n\n`modelformset_factory()` uses `formset_factory()` to generate formsets. This\nmeans that a model formset is an extension of a basic formset that knows how\nto interact with a particular model.\n\nNote\n\nWhen using multi-table inheritance, forms generated by a formset factory will\ncontain a parent link field (by default `<parent_model_name>_ptr`) instead of\nan `id` field.\n\nBy default, when you create a formset from a model, the formset will use a\nqueryset that includes all objects in the model (e.g.,\n`Author.objects.all()`). You can override this behavior by using the\n`queryset` argument:\n\nAlternatively, you can create a subclass that sets `self.queryset` in\n`__init__`:\n\nThen, pass your `BaseAuthorFormSet` class to the factory function:\n\nIf you want to return a formset that doesn\u2019t include any pre-existing\ninstances of the model, you can specify an empty QuerySet:\n\nBy default, when you use `modelformset_factory`, a model form will be created\nusing `modelform_factory()`. Often, it can be useful to specify a custom model\nform. For example, you can create a custom model form that has custom\nvalidation:\n\nThen, pass your model form to the factory function:\n\nIt is not always necessary to define a custom model form. The\n`modelformset_factory` function has several arguments which are passed through\nto `modelform_factory`, which are described below.\n\nUsing the `widgets` parameter, you can specify a dictionary of values to\ncustomize the `ModelForm`\u2019s widget class for a particular field. This works\nthe same way as the `widgets` dictionary on the inner `Meta` class of a\n`ModelForm` works:\n\nUsing the `localized_fields` parameter, you can enable localization for fields\nin the form.\n\nIf `localized_fields` is set to the special value `'__all__'`, all fields will\nbe localized.\n\nAs with regular formsets, it\u2019s possible to specify initial data for forms in\nthe formset by specifying an `initial` parameter when instantiating the model\nformset class returned by `modelformset_factory()`. However, with model\nformsets, the initial values only apply to extra forms, those that aren\u2019t\nattached to an existing model instance. If the length of `initial` exceeds the\nnumber of extra forms, the excess initial data is ignored. If the extra forms\nwith initial data aren\u2019t changed by the user, they won\u2019t be validated or\nsaved.\n\nAs with a `ModelForm`, you can save the data as a model object. This is done\nwith the formset\u2019s `save()` method:\n\nThe `save()` method returns the instances that have been saved to the\ndatabase. If a given instance\u2019s data didn\u2019t change in the bound data, the\ninstance won\u2019t be saved to the database and won\u2019t be included in the return\nvalue (`instances`, in the above example).\n\nWhen fields are missing from the form (for example because they have been\nexcluded), these fields will not be set by the `save()` method. You can find\nmore information about this restriction, which also holds for regular\n`ModelForms`, in Selecting the fields to use.\n\nPass `commit=False` to return the unsaved model instances:\n\nThis gives you the ability to attach data to the instances before saving them\nto the database. If your formset contains a `ManyToManyField`, you\u2019ll also\nneed to call `formset.save_m2m()` to ensure the many-to-many relationships are\nsaved properly.\n\nAfter calling `save()`, your model formset will have three new attributes\ncontaining the formset\u2019s changes:\n\nAs with regular formsets, you can use the `max_num` and `extra` parameters to\n`modelformset_factory()` to limit the number of extra forms displayed.\n\n`max_num` does not prevent existing objects from being displayed:\n\nAlso, `extra=0` doesn\u2019t prevent creation of new model instances as you can add\nadditional forms with JavaScript or send additional POST data. Formsets don\u2019t\nyet provide functionality for an \u201cedit only\u201d view that prevents creation of\nnew instances.\n\nIf the value of `max_num` is greater than the number of existing related\nobjects, up to `extra` additional blank forms will be added to the formset, so\nlong as the total number of forms does not exceed `max_num`:\n\nA `max_num` value of `None` (the default) puts a high limit on the number of\nforms displayed (1000). In practice this is equivalent to no limit.\n\nModel formsets are very similar to formsets. Let\u2019s say we want to present a\nformset to edit `Author` model instances:\n\nAs you can see, the view logic of a model formset isn\u2019t drastically different\nthan that of a \u201cnormal\u201d formset. The only difference is that we call\n`formset.save()` to save the data into the database. (This was described\nabove, in Saving objects in the formset.)\n\nJust like with `ModelForms`, by default the `clean()` method of a\n`ModelFormSet` will validate that none of the items in the formset violate the\nunique constraints on your model (either `unique`, `unique_together` or\n`unique_for_date|month|year`). If you want to override the `clean()` method on\na `ModelFormSet` and maintain this validation, you must call the parent\nclass\u2019s `clean` method:\n\nAlso note that by the time you reach this step, individual model instances\nhave already been created for each `Form`. Modifying a value in\n`form.cleaned_data` is not sufficient to affect the saved value. If you wish\nto modify a value in `ModelFormSet.clean()` you must modify `form.instance`:\n\nAs stated earlier, you can override the default queryset used by the model\nformset:\n\nNote that we pass the `queryset` argument in both the `POST` and `GET` cases\nin this example.\n\nThere are three ways to render a formset in a Django template.\n\nFirst, you can let the formset do most of the work:\n\nSecond, you can manually render the formset, but let the form deal with\nitself:\n\nWhen you manually render the forms yourself, be sure to render the management\nform as shown above. See the management form documentation.\n\nThird, you can manually render each field:\n\nIf you opt to use this third method and you don\u2019t iterate over the fields with\na `{% for %}` loop, you\u2019ll need to render the primary key field. For example,\nif you were rendering the `name` and `age` fields of a model:\n\nNotice how we need to explicitly render `{{ form.id }}`. This ensures that the\nmodel formset, in the `POST` case, will work correctly. (This example assumes\na primary key named `id`. If you\u2019ve explicitly defined your own primary key\nthat isn\u2019t called `id`, make sure it gets rendered.)\n\nInline formsets is a small abstraction layer on top of model formsets. These\nsimplify the case of working with related objects via a foreign key. Suppose\nyou have these two models:\n\nIf you want to create a formset that allows you to edit books belonging to a\nparticular author, you could do this:\n\n`BookFormSet`\u2019s prefix is `'book_set'` (`<model name>_set` ). If `Book`\u2019s\n`ForeignKey` to `Author` has a `related_name`, that\u2019s used instead.\n\nNote\n\n`inlineformset_factory()` uses `modelformset_factory()` and marks\n`can_delete=True`.\n\nSee also\n\nManually rendered can_delete and can_order.\n\nWhen overriding methods on `InlineFormSet`, you should subclass\n`BaseInlineFormSet` rather than `BaseModelFormSet`.\n\nFor example, if you want to override `clean()`:\n\nSee also Overriding clean() on a ModelFormSet.\n\nThen when you create your inline formset, pass in the optional argument\n`formset`:\n\nIf your model contains more than one foreign key to the same model, you\u2019ll\nneed to resolve the ambiguity manually using `fk_name`. For example, consider\nthe following model:\n\nTo resolve this, you can use `fk_name` to `inlineformset_factory()`:\n\nYou may want to provide a view that allows a user to edit the related objects\nof a model. Here\u2019s how you can do that:\n\nNotice how we pass `instance` in both the `POST` and `GET` cases.\n\n`inlineformset_factory` uses `modelformset_factory` and passes most of its\narguments to `modelformset_factory`. This means you can use the `widgets`\nparameter in much the same way as passing it to `modelformset_factory`. See\nSpecifying widgets to use in the form with widgets above.\n\n"}, {"name": "Cross Site Request Forgery protection", "path": "ref/csrf", "type": "API", "text": "\nThe CSRF middleware and template tag provides easy-to-use protection against\nCross Site Request Forgeries. This type of attack occurs when a malicious\nwebsite contains a link, a form button or some JavaScript that is intended to\nperform some action on your website, using the credentials of a logged-in user\nwho visits the malicious site in their browser. A related type of attack,\n\u2018login CSRF\u2019, where an attacking site tricks a user\u2019s browser into logging\ninto a site with someone else\u2019s credentials, is also covered.\n\nThe first defense against CSRF attacks is to ensure that GET requests (and\nother \u2018safe\u2019 methods, as defined by RFC 7231#section-4.2.1) are side effect\nfree. Requests via \u2018unsafe\u2019 methods, such as POST, PUT, and DELETE, can then\nbe protected by following the steps below.\n\nTo take advantage of CSRF protection in your views, follow these steps:\n\nThe CSRF middleware is activated by default in the `MIDDLEWARE` setting. If\nyou override that setting, remember that\n`'django.middleware.csrf.CsrfViewMiddleware'` should come before any view\nmiddleware that assume that CSRF attacks have been dealt with.\n\nIf you disabled it, which is not recommended, you can use `csrf_protect()` on\nparticular views you want to protect (see below).\n\nIn any template that uses a POST form, use the `csrf_token` tag inside the\n`<form>` element if the form is for an internal URL, e.g.:\n\nThis should not be done for POST forms that target external URLs, since that\nwould cause the CSRF token to be leaked, leading to a vulnerability.\n\nWhile the above method can be used for AJAX POST requests, it has some\ninconveniences: you have to remember to pass the CSRF token in as POST data\nwith every POST request. For this reason, there is an alternative method: on\neach XMLHttpRequest, set a custom `X-CSRFToken` header (as specified by the\n`CSRF_HEADER_NAME` setting) to the value of the CSRF token. This is often\neasier because many JavaScript frameworks provide hooks that allow headers to\nbe set on every request.\n\nFirst, you must get the CSRF token. How to do that depends on whether or not\nthe `CSRF_USE_SESSIONS` and `CSRF_COOKIE_HTTPONLY` settings are enabled.\n\nThe recommended source for the token is the `csrftoken` cookie, which will be\nset if you\u2019ve enabled CSRF protection for your views as outlined above.\n\nThe CSRF token cookie is named `csrftoken` by default, but you can control the\ncookie name via the `CSRF_COOKIE_NAME` setting.\n\nYou can acquire the token like this:\n\nThe above code could be simplified by using the JavaScript Cookie library to\nreplace `getCookie`:\n\nNote\n\nThe CSRF token is also present in the DOM, but only if explicitly included\nusing `csrf_token` in a template. The cookie contains the canonical token; the\n`CsrfViewMiddleware` will prefer the cookie to the token in the DOM.\nRegardless, you\u2019re guaranteed to have the cookie if the token is present in\nthe DOM, so you should use the cookie!\n\nWarning\n\nIf your view is not rendering a template containing the `csrf_token` template\ntag, Django might not set the CSRF token cookie. This is common in cases where\nforms are dynamically added to the page. To address this case, Django provides\na view decorator which forces setting of the cookie: `ensure_csrf_cookie()`.\n\nIf you activate `CSRF_USE_SESSIONS` or `CSRF_COOKIE_HTTPONLY`, you must\ninclude the CSRF token in your HTML and read the token from the DOM with\nJavaScript:\n\nFinally, you\u2019ll need to set the header on your AJAX request. Using the fetch()\nAPI:\n\nDjango\u2019s `Jinja2` template backend adds `{{ csrf_input }}` to the context of\nall templates which is equivalent to `{% csrf_token %}` in the Django template\nlanguage. For example:\n\nRather than adding `CsrfViewMiddleware` as a blanket protection, you can use\nthe `csrf_protect` decorator, which has exactly the same functionality, on\nparticular views that need the protection. It must be used both on views that\ninsert the CSRF token in the output, and on those that accept the POST form\ndata. (These are often the same view function, but not always).\n\nUse of the decorator by itself is not recommended, since if you forget to use\nit, you will have a security hole. The \u2018belt and braces\u2019 strategy of using\nboth is fine, and will incur minimal overhead.\n\nDecorator that provides the protection of `CsrfViewMiddleware` to a view.\n\nUsage:\n\nIf you are using class-based views, you can refer to Decorating class-based\nviews.\n\nBy default, a \u2018403 Forbidden\u2019 response is sent to the user if an incoming\nrequest fails the checks performed by `CsrfViewMiddleware`. This should\nusually only be seen when there is a genuine Cross Site Request Forgery, or\nwhen, due to a programming error, the CSRF token has not been included with a\nPOST form.\n\nThe error page, however, is not very friendly, so you may want to provide your\nown view for handling this condition. To do this, set the `CSRF_FAILURE_VIEW`\nsetting.\n\nCSRF failures are logged as warnings to the django.security.csrf logger.\n\nThe CSRF protection is based on the following things:\n\nA CSRF cookie that is based on a random secret value, which other sites will\nnot have access to.\n\nThis cookie is set by `CsrfViewMiddleware`. It is sent with every response\nthat has called `django.middleware.csrf.get_token()` (the function used\ninternally to retrieve the CSRF token), if it wasn\u2019t already set on the\nrequest.\n\nIn order to protect against BREACH attacks, the token is not simply the\nsecret; a random mask is prepended to the secret and used to scramble it.\n\nFor security reasons, the value of the secret is changed each time a user logs\nin.\n\nA hidden form field with the name \u2018csrfmiddlewaretoken\u2019 present in all\noutgoing POST forms. The value of this field is, again, the value of the\nsecret, with a mask which is both added to it and used to scramble it. The\nmask is regenerated on every call to `get_token()` so that the form field\nvalue is changed in every such response.\n\nThis part is done by the template tag.\n\nFor all incoming requests that are not using HTTP GET, HEAD, OPTIONS or TRACE,\na CSRF cookie must be present, and the \u2018csrfmiddlewaretoken\u2019 field must be\npresent and correct. If it isn\u2019t, the user will get a 403 error.\n\nWhen validating the \u2018csrfmiddlewaretoken\u2019 field value, only the secret, not\nthe full token, is compared with the secret in the cookie value. This allows\nthe use of ever-changing tokens. While each request may use its own token, the\nsecret remains common to all.\n\nThis check is done by `CsrfViewMiddleware`.\n\nIn addition, for HTTPS requests, if the `Origin` header isn\u2019t provided,\n`CsrfViewMiddleware` performs strict referer checking. This means that even if\na subdomain can set or modify cookies on your domain, it can\u2019t force a user to\npost to your application since that request won\u2019t come from your own exact\ndomain.\n\nThis also addresses a man-in-the-middle attack that\u2019s possible under HTTPS\nwhen using a session independent secret, due to the fact that HTTP `Set-\nCookie` headers are (unfortunately) accepted by clients even when they are\ntalking to a site under HTTPS. (Referer checking is not done for HTTP requests\nbecause the presence of the `Referer` header isn\u2019t reliable enough under\nHTTP.)\n\nIf the `CSRF_COOKIE_DOMAIN` setting is set, the referer is compared against\nit. You can allow cross-subdomain requests by including a leading dot. For\nexample, `CSRF_COOKIE_DOMAIN = '.example.com'` will allow POST requests from\n`www.example.com` and `api.example.com`. If the setting is not set, then the\nreferer must match the HTTP `Host` header.\n\nExpanding the accepted referers beyond the current host or cookie domain can\nbe done with the `CSRF_TRUSTED_ORIGINS` setting.\n\n`Origin` checking was added, as described above.\n\nThis ensures that only forms that have originated from trusted domains can be\nused to POST data back.\n\nIt deliberately ignores GET requests (and other requests that are defined as\n\u2018safe\u2019 by RFC 7231#section-4.2.1). These requests ought never to have any\npotentially dangerous side effects, and so a CSRF attack with a GET request\nought to be harmless. RFC 7231#section-4.2.1 defines POST, PUT, and DELETE as\n\u2018unsafe\u2019, and all other methods are also assumed to be unsafe, for maximum\nprotection.\n\nThe CSRF protection cannot protect against man-in-the-middle attacks, so use\nHTTPS with HTTP Strict Transport Security. It also assumes validation of the\nHOST header and that there aren\u2019t any cross-site scripting vulnerabilities on\nyour site (because XSS vulnerabilities already let an attacker do anything a\nCSRF vulnerability allows and much worse).\n\nRemoving the `Referer` header\n\nTo avoid disclosing the referrer URL to third-party sites, you might want to\ndisable the referer on your site\u2019s `<a>` tags. For example, you might use the\n`<meta name=\"referrer\" content=\"no-referrer\">` tag or include the `Referrer-\nPolicy: no-referrer` header. Due to the CSRF protection\u2019s strict referer\nchecking on HTTPS requests, those techniques cause a CSRF failure on requests\nwith \u2018unsafe\u2019 methods. Instead, use alternatives like `<a rel=\"noreferrer\"\n...>\"` for links to third-party sites.\n\nIf the `csrf_token` template tag is used by a template (or the `get_token`\nfunction is called some other way), `CsrfViewMiddleware` will add a cookie and\na `Vary: Cookie` header to the response. This means that the middleware will\nplay well with the cache middleware if it is used as instructed\n(`UpdateCacheMiddleware` goes before all other middleware).\n\nHowever, if you use cache decorators on individual views, the CSRF middleware\nwill not yet have been able to set the Vary header or the CSRF cookie, and the\nresponse will be cached without either one. In this case, on any views that\nwill require a CSRF token to be inserted you should use the\n`django.views.decorators.csrf.csrf_protect()` decorator first:\n\nIf you are using class-based views, you can refer to Decorating class-based\nviews.\n\nThe `CsrfViewMiddleware` will usually be a big hindrance to testing view\nfunctions, due to the need for the CSRF token which must be sent with every\nPOST request. For this reason, Django\u2019s HTTP client for tests has been\nmodified to set a flag on requests which relaxes the middleware and the\n`csrf_protect` decorator so that they no longer rejects requests. In every\nother respect (e.g. sending cookies etc.), they behave the same.\n\nIf, for some reason, you want the test client to perform CSRF checks, you can\ncreate an instance of the test client that enforces CSRF checks:\n\nSubdomains within a site will be able to set cookies on the client for the\nwhole domain. By setting the cookie and using a corresponding token,\nsubdomains will be able to circumvent the CSRF protection. The only way to\navoid this is to ensure that subdomains are controlled by trusted users (or,\nare at least unable to set cookies). Note that even without CSRF, there are\nother vulnerabilities, such as session fixation, that make giving subdomains\nto untrusted parties a bad idea, and these vulnerabilities cannot easily be\nfixed with current browsers.\n\nCertain views can have unusual requirements that mean they don\u2019t fit the\nnormal pattern envisaged here. A number of utilities can be useful in these\nsituations. The scenarios they might be needed in are described in the\nfollowing section.\n\nThe examples below assume you are using function-based views. If you are\nworking with class-based views, you can refer to Decorating class-based views.\n\nThis decorator marks a view as being exempt from the protection ensured by the\nmiddleware. Example:\n\nNormally the `csrf_token` template tag will not work if\n`CsrfViewMiddleware.process_view` or an equivalent like `csrf_protect` has not\nrun. The view decorator `requires_csrf_token` can be used to ensure the\ntemplate tag does work. This decorator works similarly to `csrf_protect`, but\nnever rejects an incoming request.\n\nExample:\n\nThis decorator forces a view to send the CSRF cookie.\n\nMost views requires CSRF protection, but a few do not.\n\nSolution: rather than disabling the middleware and applying `csrf_protect` to\nall the views that need it, enable the middleware and use `csrf_exempt()`.\n\nThere are cases when `CsrfViewMiddleware.process_view` may not have run before\nyour view is run - 404 and 500 handlers, for example - but you still need the\nCSRF token in a form.\n\nSolution: use `requires_csrf_token()`\n\nThere may be some views that are unprotected and have been exempted by\n`csrf_exempt`, but still need to include the CSRF token.\n\nSolution: use `csrf_exempt()` followed by `requires_csrf_token()`. (i.e.\n`requires_csrf_token` should be the innermost decorator).\n\nA view needs CSRF protection under one set of conditions only, and mustn\u2019t\nhave it for the rest of the time.\n\nSolution: use `csrf_exempt()` for the whole view function, and\n`csrf_protect()` for the path within it that needs protection. Example:\n\nA page makes a POST request via AJAX, and the page does not have an HTML form\nwith a `csrf_token` that would cause the required CSRF cookie to be sent.\n\nSolution: use `ensure_csrf_cookie()` on the view that sends the page.\n\nBecause it is possible for the developer to turn off the `CsrfViewMiddleware`,\nall relevant views in contrib apps use the `csrf_protect` decorator to ensure\nthe security of these applications against CSRF. It is recommended that the\ndevelopers of other reusable apps that want the same guarantees also use the\n`csrf_protect` decorator on their views.\n\nA number of settings can be used to control Django\u2019s CSRF behavior:\n\nNo, this is by design. Without a man-in-the-middle attack, there is no way for\nan attacker to send a CSRF token cookie to a victim\u2019s browser, so a successful\nattack would need to obtain the victim\u2019s browser\u2019s cookie via XSS or similar,\nin which case an attacker usually doesn\u2019t need CSRF attacks.\n\nSome security audit tools flag this as a problem but as mentioned before, an\nattacker cannot steal a user\u2019s browser\u2019s CSRF cookie. \u201cStealing\u201d or modifying\nyour own token using Firebug, Chrome dev tools, etc. isn\u2019t a vulnerability.\n\nNo, this is by design. Not linking CSRF protection to a session allows using\nthe protection on sites such as a pastebin that allow submissions from\nanonymous users which don\u2019t have a session.\n\nIf you wish to store the CSRF token in the user\u2019s session, use the\n`CSRF_USE_SESSIONS` setting.\n\nFor security reasons, CSRF tokens are rotated each time a user logs in. Any\npage with a form generated before a login will have an old, invalid CSRF token\nand need to be reloaded. This might happen if a user uses the back button\nafter a login or if they log in a different browser tab.\n\n"}, {"name": "Cryptographic signing", "path": "topics/signing", "type": "Guides", "text": "\nThe golden rule of web application security is to never trust data from\nuntrusted sources. Sometimes it can be useful to pass data through an\nuntrusted medium. Cryptographically signed values can be passed through an\nuntrusted channel safe in the knowledge that any tampering will be detected.\n\nDjango provides both a low-level API for signing values and a high-level API\nfor setting and reading signed cookies, one of the most common uses of signing\nin web applications.\n\nYou may also find signing useful for the following:\n\nWhen you create a new Django project using `startproject`, the `settings.py`\nfile is generated automatically and gets a random `SECRET_KEY` value. This\nvalue is the key to securing signed data \u2013 it is vital you keep this secure,\nor attackers could use it to generate their own signed values.\n\nDjango\u2019s signing methods live in the `django.core.signing` module. To sign a\nvalue, first instantiate a `Signer` instance:\n\nThe signature is appended to the end of the string, following the colon. You\ncan retrieve the original value using the `unsign` method:\n\nIf you pass a non-string value to `sign`, the value will be forced to string\nbefore being signed, and the `unsign` result will give you that string value:\n\nIf you wish to protect a list, tuple, or dictionary you can do so using the\n`sign_object()` and `unsign_object()` methods:\n\nSee Protecting complex data structures for more details.\n\nIf the signature or value have been altered in any way, a\n`django.core.signing.BadSignature` exception will be raised:\n\nBy default, the `Signer` class uses the `SECRET_KEY` setting to generate\nsignatures. You can use a different secret by passing it to the `Signer`\nconstructor:\n\nReturns a signer which uses `key` to generate signatures and `sep` to separate\nvalues. `sep` cannot be in the URL safe base64 alphabet. This alphabet\ncontains alphanumeric characters, hyphens, and underscores. `algorithm` must\nbe an algorithm supported by `hashlib`, it defaults to `'sha256'`.\n\nThe `sign_object()` and `unsign_object()` methods were added.\n\nIf you do not wish for every occurrence of a particular string to have the\nsame signature hash, you can use the optional `salt` argument to the `Signer`\nclass. Using a salt will seed the signing hash function with both the salt and\nyour `SECRET_KEY`:\n\nUsing salt in this way puts the different signatures into different\nnamespaces. A signature that comes from one namespace (a particular salt\nvalue) cannot be used to validate the same plaintext string in a different\nnamespace that is using a different salt setting. The result is to prevent an\nattacker from using a signed string generated in one place in the code as\ninput to another piece of code that is generating (and verifying) signatures\nusing a different salt.\n\nUnlike your `SECRET_KEY`, your salt argument does not need to stay secret.\n\nThe `sign_object()` and `unsign_object()` methods were added.\n\n`TimestampSigner` is a subclass of `Signer` that appends a signed timestamp to\nthe value. This allows you to confirm that a signed value was created within a\nspecified period of time:\n\nSign `value` and append current timestamp to it.\n\nChecks if `value` was signed less than `max_age` seconds ago, otherwise raises\n`SignatureExpired`. The `max_age` parameter can accept an integer or a\n`datetime.timedelta` object.\n\nEncode, optionally compress, append current timestamp, and sign complex data\nstructure (e.g. list, tuple, or dictionary).\n\nChecks if `signed_obj` was signed less than `max_age` seconds ago, otherwise\nraises `SignatureExpired`. The `max_age` parameter can accept an integer or a\n`datetime.timedelta` object.\n\nIf you wish to protect a list, tuple or dictionary you can do so using the\n`Signer.sign_object()` and `unsign_object()` methods, or signing module\u2019s\n`dumps()` or `loads()` functions (which are shortcuts for\n`TimestampSigner(salt='django.core.signing').sign_object()/unsign_object()`).\nThese use JSON serialization under the hood. JSON ensures that even if your\n`SECRET_KEY` is stolen an attacker will not be able to execute arbitrary\ncommands by exploiting the pickle format:\n\nBecause of the nature of JSON (there is no native distinction between lists\nand tuples) if you pass in a tuple, you will get a list from\n`signing.loads(object)`:\n\nReturns URL-safe, signed base64 compressed JSON string. Serialized object is\nsigned using `TimestampSigner`.\n\nReverse of `dumps()`, raises `BadSignature` if signature fails. Checks\n`max_age` (in seconds) if given.\n\nThe `sign_object()` and `unsign_object()` methods were added.\n\n"}, {"name": "Customizing authentication in Django", "path": "topics/auth/customizing", "type": "Guides", "text": "\nThe authentication that comes with Django is good enough for most common\ncases, but you may have needs not met by the out-of-the-box defaults.\nCustomizing authentication in your projects requires understanding what points\nof the provided system are extensible or replaceable. This document provides\ndetails about how the auth system can be customized.\n\nAuthentication backends provide an extensible system for when a username and\npassword stored with the user model need to be authenticated against a\ndifferent service than Django\u2019s default.\n\nYou can give your models custom permissions that can be checked through\nDjango\u2019s authorization system.\n\nYou can extend the default `User` model, or substitute a completely customized\nmodel.\n\nThere may be times you have the need to hook into another authentication\nsource \u2013 that is, another source of usernames and passwords or authentication\nmethods.\n\nFor example, your company may already have an LDAP setup that stores a\nusername and password for every employee. It\u2019d be a hassle for both the\nnetwork administrator and the users themselves if users had separate accounts\nin LDAP and the Django-based applications.\n\nSo, to handle situations like this, the Django authentication system lets you\nplug in other authentication sources. You can override Django\u2019s default\ndatabase-based scheme, or you can use the default system in tandem with other\nsystems.\n\nSee the authentication backend reference for information on the authentication\nbackends included with Django.\n\nBehind the scenes, Django maintains a list of \u201cauthentication backends\u201d that\nit checks for authentication. When somebody calls\n`django.contrib.auth.authenticate()` \u2013 as described in How to log a user in \u2013\nDjango tries authenticating across all of its authentication backends. If the\nfirst authentication method fails, Django tries the second one, and so on,\nuntil all backends have been attempted.\n\nThe list of authentication backends to use is specified in the\n`AUTHENTICATION_BACKENDS` setting. This should be a list of Python path names\nthat point to Python classes that know how to authenticate. These classes can\nbe anywhere on your Python path.\n\nBy default, `AUTHENTICATION_BACKENDS` is set to:\n\nThat\u2019s the basic authentication backend that checks the Django users database\nand queries the built-in permissions. It does not provide protection against\nbrute force attacks via any rate limiting mechanism. You may either implement\nyour own rate limiting mechanism in a custom auth backend, or use the\nmechanisms provided by most web servers.\n\nThe order of `AUTHENTICATION_BACKENDS` matters, so if the same username and\npassword is valid in multiple backends, Django will stop processing at the\nfirst positive match.\n\nIf a backend raises a `PermissionDenied` exception, authentication will\nimmediately fail. Django won\u2019t check the backends that follow.\n\nNote\n\nOnce a user has authenticated, Django stores which backend was used to\nauthenticate the user in the user\u2019s session, and re-uses the same backend for\nthe duration of that session whenever access to the currently authenticated\nuser is needed. This effectively means that authentication sources are cached\non a per-session basis, so if you change `AUTHENTICATION_BACKENDS`, you\u2019ll\nneed to clear out session data if you need to force users to re-authenticate\nusing different methods. A simple way to do that is to execute\n`Session.objects.all().delete()`.\n\nAn authentication backend is a class that implements two required methods:\n`get_user(user_id)` and `authenticate(request, **credentials)`, as well as a\nset of optional permission related authorization methods.\n\nThe `get_user` method takes a `user_id` \u2013 which could be a username, database\nID or whatever, but has to be the primary key of your user object \u2013 and\nreturns a user object or `None`.\n\nThe `authenticate` method takes a `request` argument and credentials as\nkeyword arguments. Most of the time, it\u2019ll look like this:\n\nBut it could also authenticate a token, like so:\n\nEither way, `authenticate()` should check the credentials it gets and return a\nuser object that matches those credentials if the credentials are valid. If\nthey\u2019re not valid, it should return `None`.\n\n`request` is an `HttpRequest` and may be `None` if it wasn\u2019t provided to\n`authenticate()` (which passes it on to the backend).\n\nThe Django admin is tightly coupled to the Django User object. The best way to\ndeal with this is to create a Django `User` object for each user that exists\nfor your backend (e.g., in your LDAP directory, your external SQL database,\netc.) You can either write a script to do this in advance, or your\n`authenticate` method can do it the first time a user logs in.\n\nHere\u2019s an example backend that authenticates against a username and password\nvariable defined in your `settings.py` file and creates a Django `User` object\nthe first time a user authenticates:\n\nCustom auth backends can provide their own permissions.\n\nThe user model and its manager will delegate permission lookup functions\n(`get_user_permissions()`, `get_group_permissions()`, `get_all_permissions()`,\n`has_perm()`, `has_module_perms()`, and `with_perm()`) to any authentication\nbackend that implements these functions.\n\nThe permissions given to the user will be the superset of all permissions\nreturned by all backends. That is, Django grants a permission to a user that\nany one backend grants.\n\nIf a backend raises a `PermissionDenied` exception in `has_perm()` or\n`has_module_perms()`, the authorization will immediately fail and Django won\u2019t\ncheck the backends that follow.\n\nA backend could implement permissions for the magic admin like this:\n\nThis gives full permissions to the user granted access in the above example.\nNotice that in addition to the same arguments given to the associated\n`django.contrib.auth.models.User` functions, the backend auth functions all\ntake the user object, which may be an anonymous user, as an argument.\n\nA full authorization implementation can be found in the `ModelBackend` class\nin django/contrib/auth/backends.py, which is the default backend and queries\nthe `auth_permission` table most of the time.\n\nAn anonymous user is one that is not authenticated i.e. they have provided no\nvalid authentication details. However, that does not necessarily mean they are\nnot authorized to do anything. At the most basic level, most websites\nauthorize anonymous users to browse most of the site, and many allow anonymous\nposting of comments etc.\n\nDjango\u2019s permission framework does not have a place to store permissions for\nanonymous users. However, the user object passed to an authentication backend\nmay be an `django.contrib.auth.models.AnonymousUser` object, allowing the\nbackend to specify custom authorization behavior for anonymous users. This is\nespecially useful for the authors of re-usable apps, who can delegate all\nquestions of authorization to the auth backend, rather than needing settings,\nfor example, to control anonymous access.\n\nAn inactive user is one that has its `is_active` field set to `False`. The\n`ModelBackend` and `RemoteUserBackend` authentication backends prohibits these\nusers from authenticating. If a custom user model doesn\u2019t have an `is_active`\nfield, all users will be allowed to authenticate.\n\nYou can use `AllowAllUsersModelBackend` or `AllowAllUsersRemoteUserBackend` if\nyou want to allow inactive users to authenticate.\n\nThe support for anonymous users in the permission system allows for a scenario\nwhere anonymous users have permissions to do something while inactive\nauthenticated users do not.\n\nDo not forget to test for the `is_active` attribute of the user in your own\nbackend permission methods.\n\nDjango\u2019s permission framework has a foundation for object permissions, though\nthere is no implementation for it in the core. That means that checking for\nobject permissions will always return `False` or an empty list (depending on\nthe check performed). An authentication backend will receive the keyword\nparameters `obj` and `user_obj` for each object related authorization method\nand can return the object level permission as appropriate.\n\nTo create custom permissions for a given model object, use the `permissions`\nmodel Meta attribute.\n\nThis example `Task` model creates two custom permissions, i.e., actions users\ncan or cannot do with `Task` instances, specific to your application:\n\nThe only thing this does is create those extra permissions when you run\n`manage.py migrate` (the function that creates permissions is connected to the\n`post_migrate` signal). Your code is in charge of checking the value of these\npermissions when a user is trying to access the functionality provided by the\napplication (changing the status of tasks or closing tasks.) Continuing the\nabove example, the following checks if a user may close tasks:\n\nThere are two ways to extend the default `User` model without substituting\nyour own model. If the changes you need are purely behavioral, and don\u2019t\nrequire any change to what is stored in the database, you can create a proxy\nmodel based on `User`. This allows for any of the features offered by proxy\nmodels including default ordering, custom managers, or custom model methods.\n\nIf you wish to store information related to `User`, you can use a\n`OneToOneField` to a model containing the fields for additional information.\nThis one-to-one model is often called a profile model, as it might store non-\nauth related information about a site user. For example you might create an\nEmployee model:\n\nAssuming an existing Employee Fred Smith who has both a User and Employee\nmodel, you can access the related information using Django\u2019s standard related\nmodel conventions:\n\nTo add a profile model\u2019s fields to the user page in the admin, define an\n`InlineModelAdmin` (for this example, we\u2019ll use a `StackedInline`) in your\napp\u2019s `admin.py` and add it to a `UserAdmin` class which is registered with\nthe `User` class:\n\nThese profile models are not special in any way - they are just Django models\nthat happen to have a one-to-one link with a user model. As such, they aren\u2019t\nauto created when a user is created, but a\n`django.db.models.signals.post_save` could be used to create or update related\nmodels as appropriate.\n\nUsing related models results in additional queries or joins to retrieve the\nrelated data. Depending on your needs, a custom user model that includes the\nrelated fields may be your better option, however, existing relations to the\ndefault user model within your project\u2019s apps may justify the extra database\nload.\n\nSome kinds of projects may have authentication requirements for which Django\u2019s\nbuilt-in `User` model is not always appropriate. For instance, on some sites\nit makes more sense to use an email address as your identification token\ninstead of a username.\n\nDjango allows you to override the default user model by providing a value for\nthe `AUTH_USER_MODEL` setting that references a custom model:\n\nThis dotted pair describes the `label` of the Django app (which must be in\nyour `INSTALLED_APPS`), and the name of the Django model that you wish to use\nas your user model.\n\nIf you\u2019re starting a new project, it\u2019s highly recommended to set up a custom\nuser model, even if the default `User` model is sufficient for you. This model\nbehaves identically to the default user model, but you\u2019ll be able to customize\nit in the future if the need arises:\n\nDon\u2019t forget to point `AUTH_USER_MODEL` to it. Do this before creating any\nmigrations or running `manage.py migrate` for the first time.\n\nAlso, register the model in the app\u2019s `admin.py`:\n\nChanging `AUTH_USER_MODEL` after you\u2019ve created database tables is\nsignificantly more difficult since it affects foreign keys and many-to-many\nrelationships, for example.\n\nThis change can\u2019t be done automatically and requires manually fixing your\nschema, moving your data from the old user table, and possibly manually\nreapplying some migrations. See #25313 for an outline of the steps.\n\nDue to limitations of Django\u2019s dynamic dependency feature for swappable\nmodels, the model referenced by `AUTH_USER_MODEL` must be created in the first\nmigration of its app (usually called `0001_initial`); otherwise, you\u2019ll have\ndependency issues.\n\nIn addition, you may run into a `CircularDependencyError` when running your\nmigrations as Django won\u2019t be able to automatically break the dependency loop\ndue to the dynamic dependency. If you see this error, you should break the\nloop by moving the models depended on by your user model into a second\nmigration. (You can try making two normal models that have a `ForeignKey` to\neach other and seeing how `makemigrations` resolves that circular dependency\nif you want to see how it\u2019s usually done.)\n\nReusable apps shouldn\u2019t implement a custom user model. A project may use many\napps, and two reusable apps that implemented a custom user model couldn\u2019t be\nused together. If you need to store per user information in your app, use a\n`ForeignKey` or `OneToOneField` to `settings.AUTH_USER_MODEL` as described\nbelow.\n\nIf you reference `User` directly (for example, by referring to it in a foreign\nkey), your code will not work in projects where the `AUTH_USER_MODEL` setting\nhas been changed to a different user model.\n\nInstead of referring to `User` directly, you should reference the user model\nusing `django.contrib.auth.get_user_model()`. This method will return the\ncurrently active user model \u2013 the custom user model if one is specified, or\n`User` otherwise.\n\nWhen you define a foreign key or many-to-many relations to the user model, you\nshould specify the custom model using the `AUTH_USER_MODEL` setting. For\nexample:\n\nWhen connecting to signals sent by the user model, you should specify the\ncustom model using the `AUTH_USER_MODEL` setting. For example:\n\nGenerally speaking, it\u2019s easiest to refer to the user model with the\n`AUTH_USER_MODEL` setting in code that\u2019s executed at import time, however,\nit\u2019s also possible to call `get_user_model()` while Django is importing\nmodels, so you could use `models.ForeignKey(get_user_model(), ...)`.\n\nIf your app is tested with multiple user models, using\n`@override_settings(AUTH_USER_MODEL=...)` for example, and you cache the\nresult of `get_user_model()` in a module-level variable, you may need to\nlisten to the `setting_changed` signal to clear the cache. For example:\n\nWhen you start your project with a custom user model, stop to consider if this\nis the right choice for your project.\n\nKeeping all user related information in one model removes the need for\nadditional or more complex database queries to retrieve related models. On the\nother hand, it may be more suitable to store app-specific user information in\na model that has a relation with your custom user model. That allows each app\nto specify its own user data requirements without potentially conflicting or\nbreaking assumptions by other apps. It also means that you would keep your\nuser model as simple as possible, focused on authentication, and following the\nminimum requirements Django expects custom user models to meet.\n\nIf you use the default authentication backend, then your model must have a\nsingle unique field that can be used for identification purposes. This can be\na username, an email address, or any other unique attribute. A non-unique\nusername field is allowed if you use a custom authentication backend that can\nsupport it.\n\nThe easiest way to construct a compliant custom user model is to inherit from\n`AbstractBaseUser`. `AbstractBaseUser` provides the core implementation of a\nuser model, including hashed passwords and tokenized password resets. You must\nthen provide some key implementation details:\n\nA string describing the name of the field on the user model that is used as\nthe unique identifier. This will usually be a username of some kind, but it\ncan also be an email address, or any other unique identifier. The field must\nbe unique (i.e., have `unique=True` set in its definition), unless you use a\ncustom authentication backend that can support non-unique usernames.\n\nIn the following example, the field `identifier` is used as the identifying\nfield:\n\nA string describing the name of the email field on the `User` model. This\nvalue is returned by `get_email_field_name()`.\n\nA list of the field names that will be prompted for when creating a user via\nthe `createsuperuser` management command. The user will be prompted to supply\na value for each of these fields. It must include any field for which `blank`\nis `False` or undefined and may include additional fields you want prompted\nfor when a user is created interactively. `REQUIRED_FIELDS` has no effect in\nother parts of Django, like creating a user in the admin.\n\nFor example, here is the partial definition for a user model that defines two\nrequired fields - a date of birth and height:\n\nNote\n\n`REQUIRED_FIELDS` must contain all required fields on your user model, but\nshould not contain the `USERNAME_FIELD` or `password` as these fields will\nalways be prompted for.\n\nA boolean attribute that indicates whether the user is considered \u201cactive\u201d.\nThis attribute is provided as an attribute on `AbstractBaseUser` defaulting to\n`True`. How you choose to implement it will depend on the details of your\nchosen auth backends. See the documentation of the `is_active attribute on the\nbuilt-in user model` for details.\n\nOptional. A longer formal identifier for the user such as their full name. If\nimplemented, this appears alongside the username in an object\u2019s history in\n`django.contrib.admin`.\n\nOptional. A short, informal identifier for the user such as their first name.\nIf implemented, this replaces the username in the greeting to the user in the\nheader of `django.contrib.admin`.\n\nImporting `AbstractBaseUser`\n\n`AbstractBaseUser` and `BaseUserManager` are importable from\n`django.contrib.auth.base_user` so that they can be imported without including\n`django.contrib.auth` in `INSTALLED_APPS`.\n\nThe following attributes and methods are available on any subclass of\n`AbstractBaseUser`:\n\nReturns the value of the field nominated by `USERNAME_FIELD`.\n\nNormalizes the username by calling `normalize_username()`. If you override\nthis method, be sure to call `super()` to retain the normalization.\n\nReturns the name of the email field specified by the `EMAIL_FIELD` attribute.\nDefaults to `'email'` if `EMAIL_FIELD` isn\u2019t specified.\n\nApplies NFKC Unicode normalization to usernames so that visually identical\ncharacters with different Unicode code points are considered identical.\n\nRead-only attribute which is always `True` (as opposed to\n`AnonymousUser.is_authenticated` which is always `False`). This is a way to\ntell if the user has been authenticated. This does not imply any permissions\nand doesn\u2019t check if the user is active or has a valid session. Even though\nnormally you will check this attribute on `request.user` to find out whether\nit has been populated by the `AuthenticationMiddleware` (representing the\ncurrently logged-in user), you should know this attribute is `True` for any\n`User` instance.\n\nRead-only attribute which is always `False`. This is a way of differentiating\n`User` and `AnonymousUser` objects. Generally, you should prefer using\n`is_authenticated` to this attribute.\n\nSets the user\u2019s password to the given raw string, taking care of the password\nhashing. Doesn\u2019t save the `AbstractBaseUser` object.\n\nWhen the raw_password is `None`, the password will be set to an unusable\npassword, as if `set_unusable_password()` were used.\n\nReturns `True` if the given raw string is the correct password for the user.\n(This takes care of the password hashing in making the comparison.)\n\nMarks the user as having no password set. This isn\u2019t the same as having a\nblank string for a password. `check_password()` for this user will never\nreturn `True`. Doesn\u2019t save the `AbstractBaseUser` object.\n\nYou may need this if authentication for your application takes place against\nan existing external source such as an LDAP directory.\n\nReturns `False` if `set_unusable_password()` has been called for this user.\n\nReturns an HMAC of the password field. Used for Session invalidation on\npassword change.\n\n`AbstractUser` subclasses `AbstractBaseUser`:\n\nNormalizes the email by calling `BaseUserManager.normalize_email()`. If you\noverride this method, be sure to call `super()` to retain the normalization.\n\nYou should also define a custom manager for your user model. If your user\nmodel defines `username`, `email`, `is_staff`, `is_active`, `is_superuser`,\n`last_login`, and `date_joined` fields the same as Django\u2019s default user, you\ncan install Django\u2019s `UserManager`; however, if your user model defines\ndifferent fields, you\u2019ll need to define a custom manager that extends\n`BaseUserManager` providing two additional methods:\n\nThe prototype of `create_user()` should accept the username field, plus all\nrequired fields as arguments. For example, if your user model uses `email` as\nthe username field, and has `date_of_birth` as a required field, then\n`create_user` should be defined as:\n\nThe prototype of `create_superuser()` should accept the username field, plus\nall required fields as arguments. For example, if your user model uses `email`\nas the username field, and has `date_of_birth` as a required field, then\n`create_superuser` should be defined as:\n\nFor a `ForeignKey` in `USERNAME_FIELD` or `REQUIRED_FIELDS`, these methods\nreceive the value of the `to_field` (the `primary_key` by default) of an\nexisting instance.\n\n`BaseUserManager` provides the following utility methods:\n\nNormalizes email addresses by lowercasing the domain portion of the email\naddress.\n\nRetrieves a user instance using the contents of the field nominated by\n`USERNAME_FIELD`.\n\nReturns a random password with the given length and given string of allowed\ncharacters. Note that the default value of `allowed_chars` doesn\u2019t contain\nletters that can cause user confusion, including:\n\nIf you\u2019re entirely happy with Django\u2019s `User` model, but you want to add some\nadditional profile information, you could subclass\n`django.contrib.auth.models.AbstractUser` and add your custom profile fields,\nalthough we\u2019d recommend a separate model as described in the \u201cModel design\nconsiderations\u201d note of Specifying a custom user model. `AbstractUser`\nprovides the full implementation of the default `User` as an abstract model.\n\nDjango\u2019s built-in forms and views make certain assumptions about the user\nmodel that they are working with.\n\nThe following forms are compatible with any subclass of `AbstractBaseUser`:\n\nThe following forms make assumptions about the user model and can be used as-\nis if those assumptions are met:\n\nFinally, the following forms are tied to `User` and need to be rewritten or\nextended to work with a custom user model:\n\nIf your custom user model is a subclass of `AbstractUser`, then you can extend\nthese forms in this manner:\n\nIf you want your custom user model to also work with the admin, your user\nmodel must define some additional attributes and methods. These methods allow\nthe admin to control access of the user to admin content:\n\nReturns `True` if the user is allowed to have access to the admin site.\n\nReturns `True` if the user account is currently active.\n\nReturns `True` if the user has the named permission. If `obj` is provided, the\npermission needs to be checked against a specific object instance.\n\nReturns `True` if the user has permission to access models in the given app.\n\nYou will also need to register your custom user model with the admin. If your\ncustom user model extends `django.contrib.auth.models.AbstractUser`, you can\nuse Django\u2019s existing `django.contrib.auth.admin.UserAdmin` class. However, if\nyour user model extends `AbstractBaseUser`, you\u2019ll need to define a custom\n`ModelAdmin` class. It may be possible to subclass the default\n`django.contrib.auth.admin.UserAdmin`; however, you\u2019ll need to override any of\nthe definitions that refer to fields on\n`django.contrib.auth.models.AbstractUser` that aren\u2019t on your custom user\nclass.\n\nNote\n\nIf you are using a custom `ModelAdmin` which is a subclass of\n`django.contrib.auth.admin.UserAdmin`, then you need to add your custom fields\nto `fieldsets` (for fields to be used in editing users) and to `add_fieldsets`\n(for fields to be used when creating a user). For example:\n\nSee a full example for more details.\n\nTo make it easy to include Django\u2019s permission framework into your own user\nclass, Django provides `PermissionsMixin`. This is an abstract model you can\ninclude in the class hierarchy for your user model, giving you all the methods\nand database fields necessary to support Django\u2019s permission model.\n\n`PermissionsMixin` provides the following methods and attributes:\n\nBoolean. Designates that this user has all permissions without explicitly\nassigning them.\n\nReturns a set of permission strings that the user has directly.\n\nIf `obj` is passed in, only returns the user permissions for this specific\nobject.\n\nReturns a set of permission strings that the user has, through their groups.\n\nIf `obj` is passed in, only returns the group permissions for this specific\nobject.\n\nReturns a set of permission strings that the user has, both through group and\nuser permissions.\n\nIf `obj` is passed in, only returns the permissions for this specific object.\n\nReturns `True` if the user has the specified permission, where `perm` is in\nthe format `\"<app label>.<permission codename>\"` (see permissions). If\n`User.is_active` and `is_superuser` are both `True`, this method always\nreturns `True`.\n\nIf `obj` is passed in, this method won\u2019t check for a permission for the model,\nbut for this specific object.\n\nReturns `True` if the user has each of the specified permissions, where each\nperm is in the format `\"<app label>.<permission codename>\"`. If\n`User.is_active` and `is_superuser` are both `True`, this method always\nreturns `True`.\n\nIf `obj` is passed in, this method won\u2019t check for permissions for the model,\nbut for the specific object.\n\nReturns `True` if the user has any permissions in the given package (the\nDjango app label). If `User.is_active` and `is_superuser` are both `True`,\nthis method always returns `True`.\n\n`PermissionsMixin` and `ModelBackend`\n\nIf you don\u2019t include the `PermissionsMixin`, you must ensure you don\u2019t invoke\nthe permissions methods on `ModelBackend`. `ModelBackend` assumes that certain\nfields are available on your user model. If your user model doesn\u2019t provide\nthose fields, you\u2019ll receive database errors when you check permissions.\n\nOne limitation of custom user models is that installing a custom user model\nwill break any proxy model extending `User`. Proxy models must be based on a\nconcrete base class; by defining a custom user model, you remove the ability\nof Django to reliably identify the base class.\n\nIf your project uses proxy models, you must either modify the proxy to extend\nthe user model that\u2019s in use in your project, or merge your proxy\u2019s behavior\ninto your `User` subclass.\n\nHere is an example of an admin-compliant custom user app. This user model uses\nan email address as the username, and has a required date of birth; it\nprovides no permission checking beyond an `admin` flag on the user account.\nThis model would be compatible with all the built-in auth forms and views,\nexcept for the user creation forms. This example illustrates how most of the\ncomponents work together, but is not intended to be copied directly into\nprojects for production use.\n\nThis code would all live in a `models.py` file for a custom authentication\napp:\n\nThen, to register this custom user model with Django\u2019s admin, the following\ncode would be required in the app\u2019s `admin.py` file:\n\nFinally, specify the custom model as the default user model for your project\nusing the `AUTH_USER_MODEL` setting in your `settings.py`:\n\nIn older versions, `ReadOnlyPasswordHashField` is not `disabled` by default\nand `UserChangeForm.clean_password()` is required to return the initial value,\nwhatever the user provides.\n\n"}, {"name": "Database access optimization", "path": "topics/db/optimization", "type": "Guides", "text": "\nDjango\u2019s database layer provides various ways to help developers get the most\nout of their databases. This document gathers together links to the relevant\ndocumentation, and adds various tips, organized under a number of headings\nthat outline the steps to take when attempting to optimize your database\nusage.\n\nAs general programming practice, this goes without saying. Find out what\nqueries you are doing and what they are costing you. Use `QuerySet.explain()`\nto understand how specific `QuerySet`s are executed by your database. You may\nalso want to use an external project like django-debug-toolbar, or a tool that\nmonitors your database directly.\n\nRemember that you may be optimizing for speed or memory or both, depending on\nyour requirements. Sometimes optimizing for one will be detrimental to the\nother, but sometimes they will help each other. Also, work that is done by the\ndatabase process might not have the same cost (to you) as the same amount of\nwork done in your Python process. It is up to you to decide what your\npriorities are, where the balance must lie, and profile all of these as\nrequired since this will depend on your application and server.\n\nWith everything that follows, remember to profile after every change to ensure\nthat the change is a benefit, and a big enough benefit given the decrease in\nreadability of your code. All of the suggestions below come with the caveat\nthat in your circumstances the general principle might not apply, or might\neven be reversed.\n\n\u2026including:\n\nWe will assume you have done the things listed above. The rest of this\ndocument focuses on how to use Django in such a way that you are not doing\nunnecessary work. This document also does not address other optimization\ntechniques that apply to all expensive operations, such as general purpose\ncaching.\n\nUnderstanding QuerySets is vital to getting good performance with simple code.\nIn particular:\n\nTo avoid performance problems, it is important to understand:\n\nAs well as caching of the whole `QuerySet`, there is caching of the result of\nattributes on ORM objects. In general, attributes that are not callable will\nbe cached. For example, assuming the example blog models:\n\nBut in general, callable attributes cause DB lookups every time:\n\nBe careful when reading template code - the template system does not allow use\nof parentheses, but will call callables automatically, hiding the above\ndistinction.\n\nBe careful with your own custom properties - it is up to you to implement\ncaching when required, for example using the `cached_property` decorator.\n\nTo make use of the caching behavior of `QuerySet`, you may need to use the\n`with` template tag.\n\nWhen you have a lot of objects, the caching behavior of the `QuerySet` can\ncause a large amount of memory to be used. In this case, `iterator()` may\nhelp.\n\n`QuerySet.explain()` gives you detailed information about how the database\nexecutes a query, including indexes and joins that are used. These details may\nhelp you find queries that could be rewritten more efficiently, or identify\nindexes that could be added to improve performance.\n\nFor instance:\n\nIf these aren\u2019t enough to generate the SQL you need:\n\nA less portable but more powerful method is the `RawSQL` expression, which\nallows some SQL to be explicitly added to the query. If that still isn\u2019t\npowerful enough:\n\nWrite your own custom SQL to retrieve data or populate models. Use\n`django.db.connection.queries` to find out what Django is writing for you and\nstart from there.\n\nThere are two reasons to use a column with `unique` or `db_index` when using\n`get()` to retrieve individual objects. First, the query will be quicker\nbecause of the underlying database index. Also, the query could run much\nslower if multiple objects match the lookup; having a unique constraint on the\ncolumn guarantees this will never happen.\n\nSo using the example blog models:\n\nwill be quicker than:\n\nbecause `id` is indexed by the database and is guaranteed to be unique.\n\nDoing the following is potentially quite slow:\n\nFirst of all, `headline` is not indexed, which will make the underlying\ndatabase fetch slower.\n\nSecond, the lookup doesn\u2019t guarantee that only one object will be returned. If\nthe query matches more than one object, it will retrieve and transfer all of\nthem from the database. This penalty could be substantial if hundreds or\nthousands of records are returned. The penalty will be compounded if the\ndatabase lives on a separate server, where network overhead and latency also\nplay a factor.\n\nHitting the database multiple times for different parts of a single \u2018set\u2019 of\ndata that you will need all parts of is, in general, less efficient than\nretrieving it all in one query. This is particularly important if you have a\nquery that is executed in a loop, and could therefore end up doing many\ndatabase queries, when only one was needed. So:\n\nUnderstand `select_related()` and `prefetch_related()` thoroughly, and use\nthem:\n\nWhen you only want a `dict` or `list` of values, and don\u2019t need ORM model\nobjects, make appropriate usage of `values()`. These can be useful for\nreplacing model objects in template code - as long as the dicts you supply\nhave the same attributes as those used in the template, you are fine.\n\nUse `defer()` and `only()` if there are database columns you know that you\nwon\u2019t need (or won\u2019t need in most cases) to avoid loading them. Note that if\nyou do use them, the ORM will have to go and get them in a separate query,\nmaking this a pessimization if you use it inappropriately.\n\nDon\u2019t be too aggressive in deferring fields without profiling as the database\nhas to read most of the non-text, non-VARCHAR data from the disk for a single\nrow in the results, even if it ends up only using a few columns. The `defer()`\nand `only()` methods are most useful when you can avoid loading a lot of text\ndata or for fields that might take a lot of processing to convert back to\nPython. As always, profile first, then optimize.\n\n\u2026if you only want to find out if `obj` is in the queryset, rather than `if obj\nin queryset`.\n\n\u2026if you only want the count, rather than doing `len(queryset)`.\n\n\u2026if you only want to find out if at least one result exists, rather than `if\nqueryset`.\n\nBut:\n\nIf you are going to need other data from the QuerySet, evaluate it\nimmediately.\n\nFor example, assuming an Email model that has a `subject` attribute and a\nmany-to-many relation to User, the following code is optimal:\n\nIt is optimal because:\n\nIn total, this code does either one or zero database queries. The only\ndeliberate optimization performed is using the `emails` variable. Using\n`QuerySet.exists()` for the `if` or `QuerySet.count()` for the count would\neach cause additional queries.\n\nRather than retrieve a load of objects, set some values, and save them\nindividual, use a bulk SQL UPDATE statement, via QuerySet.update(). Similarly,\ndo bulk deletes where possible.\n\nNote, however, that these bulk update methods cannot call the `save()` or\n`delete()` methods of individual instances, which means that any custom\nbehavior you have added for these methods will not be executed, including\nanything driven from the normal database object signals.\n\nIf you only need a foreign key value, use the foreign key value that is\nalready on the object you\u2019ve got, rather than getting the whole related object\nand taking its primary key. i.e. do:\n\ninstead of:\n\nOrdering is not free; each field to order by is an operation the database must\nperform. If a model has a default ordering (`Meta.ordering`) and you don\u2019t\nneed it, remove it on a `QuerySet` by calling `order_by()` with no parameters.\n\nAdding an index to your database may help to improve ordering performance.\n\nUse bulk methods to reduce the number of SQL statements.\n\nWhen creating objects, where possible, use the `bulk_create()` method to\nreduce the number of SQL queries. For example:\n\n\u2026is preferable to:\n\nNote that there are a number of `caveats to this method`, so make sure it\u2019s\nappropriate for your use case.\n\nWhen updating objects, where possible, use the `bulk_update()` method to\nreduce the number of SQL queries. Given a list or queryset of objects:\n\nThe following example:\n\n\u2026is preferable to:\n\nNote that there are a number of `caveats to this method`, so make sure it\u2019s\nappropriate for your use case.\n\nWhen inserting objects into `ManyToManyFields`, use `add()` with multiple\nobjects to reduce the number of SQL queries. For example:\n\n\u2026is preferable to:\n\n\u2026where `Bands` and `Artists` have a many-to-many relationship.\n\nWhen inserting different pairs of objects into `ManyToManyField` or when the\ncustom `through` table is defined, use `bulk_create()` method to reduce the\nnumber of SQL queries. For example:\n\n\u2026is preferable to:\n\n\u2026where `Pizza` and `Topping` have a many-to-many relationship. Note that there\nare a number of `caveats to this method`, so make sure it\u2019s appropriate for\nyour use case.\n\nWhen removing objects from `ManyToManyFields`, use `remove()` with multiple\nobjects to reduce the number of SQL queries. For example:\n\n\u2026is preferable to:\n\n\u2026where `Bands` and `Artists` have a many-to-many relationship.\n\nWhen removing different pairs of objects from `ManyToManyFields`, use\n`delete()` on a `Q` expression with multiple `through` model instances to\nreduce the number of SQL queries. For example:\n\n\u2026is preferable to:\n\n\u2026where `Pizza` and `Topping` have a many-to-many relationship.\n\n"}, {"name": "Database Functions", "path": "ref/models/database-functions", "type": "API", "text": "\nThe classes documented below provide a way for users to use functions provided\nby the underlying database as annotations, aggregations, or filters in Django.\nFunctions are also expressions, so they can be used and combined with other\nexpressions like aggregate functions.\n\nWe\u2019ll be using the following model in examples of each function:\n\nWe don\u2019t usually recommend allowing `null=True` for `CharField` since this\nallows the field to have two \u201cempty values\u201d, but it\u2019s important for the\n`Coalesce` example below.\n\nForces the result type of `expression` to be the one from `output_field`.\n\nUsage example:\n\nAccepts a list of at least two field names or expressions and returns the\nfirst non-null value (note that an empty string is not considered a null\nvalue). Each argument must be of a similar type, so mixing text and numbers\nwill result in a database error.\n\nUsage examples:\n\nWarning\n\nA Python value passed to `Coalesce` on MySQL may be converted to an incorrect\ntype unless explicitly cast to the correct database type:\n\nTakes an expression and a collation name to query against.\n\nFor example, to filter case-insensitively in SQLite:\n\nIt can also be used when ordering, for example with PostgreSQL:\n\nAccepts a list of at least two field names or expressions and returns the\ngreatest value. Each argument must be of a similar type, so mixing text and\nnumbers will result in a database error.\n\nUsage example:\n\n`annotated_comment.last_updated` will be the most recent of `blog.modified`\nand `comment.modified`.\n\nWarning\n\nThe behavior of `Greatest` when one or more expression may be `null` varies\nbetween databases:\n\nThe PostgreSQL behavior can be emulated using `Coalesce` if you know a\nsensible minimum value to provide as a default.\n\nTakes a list of key-value pairs and returns a JSON object containing those\npairs.\n\nUsage example:\n\nAccepts a list of at least two field names or expressions and returns the\nleast value. Each argument must be of a similar type, so mixing text and\nnumbers will result in a database error.\n\nWarning\n\nThe behavior of `Least` when one or more expression may be `null` varies\nbetween databases:\n\nThe PostgreSQL behavior can be emulated using `Coalesce` if you know a\nsensible maximum value to provide as a default.\n\nAccepts two expressions and returns `None` if they are equal, otherwise\nreturns `expression1`.\n\nCaveats on Oracle\n\nDue to an Oracle convention, this function returns the empty string instead of\n`None` when the expressions are of type `CharField`.\n\nPassing `Value(None)` to `expression1` is prohibited on Oracle since Oracle\ndoesn\u2019t accept `NULL` as the first argument.\n\nWe\u2019ll be using the following model in examples of each function:\n\nExtracts a component of a date as a number.\n\nTakes an `expression` representing a `DateField`, `DateTimeField`,\n`TimeField`, or `DurationField` and a `lookup_name`, and returns the part of\nthe date referenced by `lookup_name` as an `IntegerField`. Django usually uses\nthe databases\u2019 extract function, so you may use any `lookup_name` that your\ndatabase supports. A `tzinfo` subclass, usually provided by `zoneinfo`, can be\npassed to extract a value in a specific timezone.\n\nGiven the datetime `2015-06-15 23:30:01.000321+00:00`, the built-in\n`lookup_name`s return:\n\nIf a different timezone like `Australia/Melbourne` is active in Django, then\nthe datetime is converted to the timezone before the value is extracted. The\ntimezone offset for Melbourne in the example date above is +10:00. The values\nreturned when this timezone is active will be the same as above except for:\n\n`week_day` values\n\nThe `week_day` `lookup_type` is calculated differently from most databases and\nfrom Python\u2019s standard functions. This function will return `1` for Sunday,\n`2` for Monday, through `7` for Saturday.\n\nThe equivalent calculation in Python is:\n\n`week` values\n\nThe `week` `lookup_type` is calculated based on ISO-8601, i.e., a week starts\non a Monday. The first week of a year is the one that contains the year\u2019s\nfirst Thursday, i.e. the first week has the majority (four or more) of its\ndays in the year. The value returned is in the range 1 to 52 or 53.\n\nEach `lookup_name` above has a corresponding `Extract` subclass (listed below)\nthat should typically be used instead of the more verbose equivalent, e.g. use\n`ExtractYear(...)` rather than `Extract(..., lookup_name='year')`.\n\nUsage example:\n\nReturns the ISO-8601 week-numbering year.\n\nReturns the ISO-8601 week day with day 1 being Monday and day 7 being Sunday.\n\nThese are logically equivalent to `Extract('date_field', lookup_name)`. Each\nclass is also a `Transform` registered on `DateField` and `DateTimeField` as\n`__(lookup_name)`, e.g. `__year`.\n\nSince `DateField`s don\u2019t have a time component, only `Extract` subclasses that\ndeal with date-parts can be used with `DateField`:\n\nIn addition to the following, all extracts for `DateField` listed above may\nalso be used on `DateTimeField`s .\n\nThese are logically equivalent to `Extract('datetime_field', lookup_name)`.\nEach class is also a `Transform` registered on `DateTimeField` as\n`__(lookup_name)`, e.g. `__minute`.\n\n`DateTimeField` examples:\n\nWhen `USE_TZ` is `True` then datetimes are stored in the database in UTC. If a\ndifferent timezone is active in Django, the datetime is converted to that\ntimezone before the value is extracted. The example below converts to the\nMelbourne timezone (UTC +10:00), which changes the day, weekday, and hour\nvalues that are returned:\n\nExplicitly passing the timezone to the `Extract` function behaves in the same\nway, and takes priority over an active timezone:\n\nReturns the database server\u2019s current date and time when the query is\nexecuted, typically using the SQL `CURRENT_TIMESTAMP`.\n\nUsage example:\n\nPostgreSQL considerations\n\nOn PostgreSQL, the SQL `CURRENT_TIMESTAMP` returns the time that the current\ntransaction started. Therefore for cross-database compatibility, `Now()` uses\n`STATEMENT_TIMESTAMP` instead. If you need the transaction timestamp, use\n`django.contrib.postgres.functions.TransactionNow`.\n\nTruncates a date up to a significant component.\n\nWhen you only care if something happened in a particular year, hour, or day,\nbut not the exact second, then `Trunc` (and its subclasses) can be useful to\nfilter or aggregate your data. For example, you can use `Trunc` to calculate\nthe number of sales per day.\n\n`Trunc` takes a single `expression`, representing a `DateField`, `TimeField`,\nor `DateTimeField`, a `kind` representing a date or time part, and an\n`output_field` that\u2019s either `DateTimeField()`, `TimeField()`, or\n`DateField()`. It returns a datetime, date, or time depending on\n`output_field`, with fields up to `kind` set to their minimum value. If\n`output_field` is omitted, it will default to the `output_field` of\n`expression`. A `tzinfo` subclass, usually provided by `zoneinfo`, can be\npassed to truncate a value in a specific timezone.\n\nDeprecated since version 4.0: The `is_dst` parameter indicates whether or not\n`pytz` should interpret nonexistent and ambiguous datetimes in daylight saving\ntime. By default (when `is_dst=None`), `pytz` raises an exception for such\ndatetimes.\n\nThe `is_dst` parameter is deprecated and will be removed in Django 5.0.\n\nGiven the datetime `2015-06-15 14:30:50.000321+00:00`, the built-in `kind`s\nreturn:\n\nIf a different timezone like `Australia/Melbourne` is active in Django, then\nthe datetime is converted to the new timezone before the value is truncated.\nThe timezone offset for Melbourne in the example date above is +10:00. The\nvalues returned when this timezone is active will be:\n\nThe year has an offset of +11:00 because the result transitioned into daylight\nsaving time.\n\nEach `kind` above has a corresponding `Trunc` subclass (listed below) that\nshould typically be used instead of the more verbose equivalent, e.g. use\n`TruncYear(...)` rather than `Trunc(..., kind='year')`.\n\nThe subclasses are all defined as transforms, but they aren\u2019t registered with\nany fields, because the lookup names are already reserved by the `Extract`\nsubclasses.\n\nUsage example:\n\nTruncates to midnight on the Monday of the week.\n\nDeprecated since version 4.0: The `is_dst` parameter is deprecated and will be\nremoved in Django 5.0.\n\nThese are logically equivalent to `Trunc('date_field', kind)`. They truncate\nall parts of the date up to `kind` which allows grouping or filtering dates\nwith less precision. `expression` can have an `output_field` of either\n`DateField` or `DateTimeField`.\n\nSince `DateField`s don\u2019t have a time component, only `Trunc` subclasses that\ndeal with date-parts can be used with `DateField`:\n\nThe `tzinfo` parameter was added.\n\n`TruncDate` casts `expression` to a date rather than using the built-in SQL\ntruncate function. It\u2019s also registered as a transform on `DateTimeField` as\n`__date`.\n\nThe `tzinfo` parameter was added.\n\n`TruncTime` casts `expression` to a time rather than using the built-in SQL\ntruncate function. It\u2019s also registered as a transform on `DateTimeField` as\n`__time`.\n\nDeprecated since version 4.0: The `is_dst` parameter is deprecated and will be\nremoved in Django 5.0.\n\nThese are logically equivalent to `Trunc('datetime_field', kind)`. They\ntruncate all parts of the date up to `kind` and allow grouping or filtering\ndatetimes with less precision. `expression` must have an `output_field` of\n`DateTimeField`.\n\nUsage example:\n\nDeprecated since version 4.0: The `is_dst` parameter is deprecated and will be\nremoved in Django 5.0.\n\nThese are logically equivalent to `Trunc('time_field', kind)`. They truncate\nall parts of the time up to `kind` which allows grouping or filtering times\nwith less precision. `expression` can have an `output_field` of either\n`TimeField` or `DateTimeField`.\n\nSince `TimeField`s don\u2019t have a date component, only `Trunc` subclasses that\ndeal with time-parts can be used with `TimeField`:\n\nWe\u2019ll be using the following model in math function examples:\n\nReturns the absolute value of a numeric field or expression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the arccosine of a numeric field or expression. The expression value\nmust be within the range -1 to 1.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the arcsine of a numeric field or expression. The expression value\nmust be in the range -1 to 1.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the arctangent of a numeric field or expression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the arctangent of `expression1 / expression2`.\n\nUsage example:\n\nReturns the smallest integer greater than or equal to a numeric field or\nexpression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the cosine of a numeric field or expression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the cotangent of a numeric field or expression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nConverts a numeric field or expression from radians to degrees.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the value of `e` (the natural logarithm base) raised to the power of a\nnumeric field or expression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the largest integer value not greater than a numeric field or\nexpression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the natural logarithm a numeric field or expression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nAccepts two numeric fields or expressions and returns the logarithm of the\nfirst to base of the second.\n\nUsage example:\n\nAccepts two numeric fields or expressions and returns the remainder of the\nfirst divided by the second (modulo operation).\n\nUsage example:\n\nReturns the value of the mathematical constant `\u03c0`.\n\nAccepts two numeric fields or expressions and returns the value of the first\nraised to the power of the second.\n\nUsage example:\n\nConverts a numeric field or expression from degrees to radians.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns a random value in the range `0.0 \u2264 x < 1.0`.\n\nRounds a numeric field or expression to `precision` (must be an integer)\ndecimal places. By default, it rounds to the nearest integer. Whether half\nvalues are rounded up or down depends on the database.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nThe `precision` argument was added.\n\nReturns the sign (-1, 0, 1) of a numeric field or expression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the sine of a numeric field or expression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the square root of a nonnegative numeric field or expression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nReturns the tangent of a numeric field or expression.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nAccepts a numeric field or expression and returns the text representation of\nthe expression as a single character. It works the same as Python\u2019s `chr()`\nfunction.\n\nLike `Length`, it can be registered as a transform on `IntegerField`. The\ndefault lookup name is `chr`.\n\nUsage example:\n\nAccepts a list of at least two text fields or expressions and returns the\nconcatenated text. Each argument must be of a text or char type. If you want\nto concatenate a `TextField()` with a `CharField()`, then be sure to tell\nDjango that the `output_field` should be a `TextField()`. Specifying an\n`output_field` is also required when concatenating a `Value` as in the example\nbelow.\n\nThis function will never have a null result. On backends where a null argument\nresults in the entire expression being null, Django will ensure that each null\npart is converted to an empty string first.\n\nUsage example:\n\nReturns the first `length` characters of the given text field or expression.\n\nUsage example:\n\nAccepts a single text field or expression and returns the number of characters\nthe value has. If the expression is null, then the length will also be null.\n\nUsage example:\n\nIt can also be registered as a transform. For example:\n\nAccepts a single text field or expression and returns the lowercase\nrepresentation.\n\nIt can also be registered as a transform as described in `Length`.\n\nUsage example:\n\nReturns the value of the given text field or expression padded on the left\nside with `fill_text` so that the resulting value is `length` characters long.\nThe default `fill_text` is a space.\n\nUsage example:\n\nSimilar to `Trim`, but removes only leading spaces.\n\nAccepts a single text field or expression and returns the MD5 hash of the\nstring.\n\nIt can also be registered as a transform as described in `Length`.\n\nUsage example:\n\nAccepts a single text field or expression and returns the Unicode code point\nvalue for the first character of that expression. It works similar to Python\u2019s\n`ord()` function, but an exception isn\u2019t raised if the expression is more than\none character long.\n\nIt can also be registered as a transform as described in `Length`. The default\nlookup name is `ord`.\n\nUsage example:\n\nReturns the value of the given text field or expression repeated `number`\ntimes.\n\nUsage example:\n\nReplaces all occurrences of `text` with `replacement` in `expression`. The\ndefault replacement text is the empty string. The arguments to the function\nare case-sensitive.\n\nUsage example:\n\nAccepts a single text field or expression and returns the characters of that\nexpression in reverse order.\n\nIt can also be registered as a transform as described in `Length`. The default\nlookup name is `reverse`.\n\nUsage example:\n\nReturns the last `length` characters of the given text field or expression.\n\nUsage example:\n\nSimilar to `LPad`, but pads on the right side.\n\nSimilar to `Trim`, but removes only trailing spaces.\n\nAccepts a single text field or expression and returns the particular hash of\nthe string.\n\nThey can also be registered as transforms as described in `Length`.\n\nUsage example:\n\nPostgreSQL\n\nThe pgcrypto extension must be installed. You can use the `CryptoExtension`\nmigration operation to install it.\n\nOracle\n\nOracle doesn\u2019t support the `SHA224` function.\n\nReturns a positive integer corresponding to the 1-indexed position of the\nfirst occurrence of `substring` inside `string`, or 0 if `substring` is not\nfound.\n\nUsage example:\n\nWarning\n\nIn MySQL, a database table\u2019s collation determines whether string comparisons\n(such as the `expression` and `substring` of this function) are case-\nsensitive. Comparisons are case-insensitive by default.\n\nReturns a substring of length `length` from the field or expression starting\nat position `pos`. The position is 1-indexed, so the position must be greater\nthan 0. If `length` is `None`, then the rest of the string will be returned.\n\nUsage example:\n\nReturns the value of the given text field or expression with leading and\ntrailing spaces removed.\n\nUsage example:\n\nAccepts a single text field or expression and returns the uppercase\nrepresentation.\n\nIt can also be registered as a transform as described in `Length`.\n\nUsage example:\n\nThere are a number of functions to use in a `Window` expression for computing\nthe rank of elements or the `Ntile` of some rows.\n\nCalculates the cumulative distribution of a value within a window or\npartition. The cumulative distribution is defined as the number of rows\npreceding or peered with the current row divided by the total number of rows\nin the frame.\n\nEquivalent to `Rank` but does not have gaps.\n\nReturns the value evaluated at the row that\u2019s the first row of the window\nframe, or `None` if no such value exists.\n\nCalculates the value offset by `offset`, and if no row exists there, returns\n`default`.\n\n`default` must have the same type as the `expression`, however, this is only\nvalidated by the database and not in Python.\n\nMariaDB and `default`\n\nMariaDB doesn\u2019t support the `default` parameter.\n\nComparable to `FirstValue`, it calculates the last value in a given frame\nclause.\n\nCalculates the leading value in a given frame. Both `offset` and `default` are\nevaluated with respect to the current row.\n\n`default` must have the same type as the `expression`, however, this is only\nvalidated by the database and not in Python.\n\nMariaDB and `default`\n\nMariaDB doesn\u2019t support the `default` parameter.\n\nComputes the row relative to the offset `nth` (must be a positive value)\nwithin the window. Returns `None` if no row exists.\n\nSome databases may handle a nonexistent nth-value differently. For example,\nOracle returns an empty string rather than `None` for character-based\nexpressions. Django doesn\u2019t do any conversions in these cases.\n\nCalculates a partition for each of the rows in the frame clause, distributing\nnumbers as evenly as possible between 1 and `num_buckets`. If the rows don\u2019t\ndivide evenly into a number of buckets, one or more buckets will be\nrepresented more frequently.\n\nComputes the percentile rank of the rows in the frame clause. This computation\nis equivalent to evaluating:\n\nThe following table explains the calculation for the percentile rank of a row:\n\nComparable to `RowNumber`, this function ranks rows in the window. The\ncomputed rank contains gaps. Use `DenseRank` to compute rank without gaps.\n\nComputes the row number according to the ordering of either the frame clause\nor the ordering of the whole query if there is no partitioning of the window\nframe.\n\n"}, {"name": "Database instrumentation", "path": "topics/db/instrumentation", "type": "Guides", "text": "\nTo help you understand and control the queries issued by your code, Django\nprovides a hook for installing wrapper functions around the execution of\ndatabase queries. For example, wrappers can count queries, measure query\nduration, log queries, or even prevent query execution (e.g. to make sure that\nno queries are issued while rendering a template with prefetched data).\n\nThe wrappers are modeled after middleware \u2013 they are callables which take\nanother callable as one of their arguments. They call that callable to invoke\nthe (possibly wrapped) database query, and they can do what they want around\nthat call. They are, however, created and installed by user code, and so don\u2019t\nneed a separate factory like middleware do.\n\nInstalling a wrapper is done in a context manager \u2013 so the wrappers are\ntemporary and specific to some flow in your code.\n\nAs mentioned above, an example of a wrapper is a query execution blocker. It\ncould look like this:\n\nAnd it would be used in a view to block queries from the template like so:\n\nThe parameters sent to the wrappers are:\n\nUsing the parameters, a slightly more complex version of the blocker could\ninclude the connection name in the error message:\n\nFor a more complete example, a query logger could look like this:\n\nTo use this, you would create a logger object and install it as a wrapper:\n\nReturns a context manager which, when entered, installs a wrapper around\ndatabase query executions, and when exited, removes the wrapper. The wrapper\nis installed on the thread-local connection object.\n\n`wrapper` is a callable taking five arguments. It is called for every query\nexecution in the scope of the context manager, with arguments `execute`,\n`sql`, `params`, `many`, and `context` as described above. It\u2019s expected to\ncall `execute(sql, params, many, context)` and return the return value of that\ncall.\n\n"}, {"name": "Database migration operations", "path": "ref/contrib/postgres/operations", "type": "API", "text": "\nAll of these operations are available from the\n`django.contrib.postgres.operations` module.\n\nYou can create a PostgreSQL extension in your database using a migration file.\nThis example creates an hstore extension, but the same principles apply for\nother extensions.\n\nSet up the hstore extension in PostgreSQL before the first `CreateModel` or\n`AddField` operation that involves `HStoreField` by adding a migration with\nthe `HStoreExtension` operation. For example:\n\nThe operation skips adding the extension if it already exists.\n\nFor most extensions, this requires a database user with superuser privileges.\nIf the Django database user doesn\u2019t have the appropriate privileges, you\u2019ll\nhave to create the extension outside of Django migrations with a user that has\nthem. In that case, connect to your Django database and run the query `CREATE\nEXTENSION IF NOT EXISTS hstore;`.\n\nIn older versions, the pre-existence of the extension isn\u2019t checked.\n\nAn `Operation` subclass which installs a PostgreSQL extension. For common\nextensions, use one of the more specific subclasses below.\n\nThis is a required argument. The name of the extension to be installed.\n\nInstalls the `bloom` extension.\n\nInstalls the `btree_gin` extension.\n\nInstalls the `btree_gist` extension.\n\nInstalls the `citext` extension.\n\nInstalls the `pgcrypto` extension.\n\nInstalls the `hstore` extension and also sets up the connection to interpret\nhstore data for possible use in subsequent migrations.\n\nInstalls the `pg_trgm` extension.\n\nInstalls the `unaccent` extension.\n\nIf you need to filter or order a column using a particular collation that your\noperating system provides but PostgreSQL does not, you can manage collations\nin your database using a migration file. These collations can then be used\nwith the `db_collation` parameter on `CharField`, `TextField`, and their\nsubclasses.\n\nFor example, to create a collation for German phone book ordering:\n\nCreates a collation with the given `name`, `locale` and `provider`.\n\nSet the `deterministic` parameter to `False` to create a non-deterministic\ncollation, such as for case-insensitive filtering.\n\nRemoves the collations named `name`.\n\nWhen reversed this is creating a collation with the provided `locale`,\n`provider`, and `deterministic` arguments. Therefore, `locale` is required to\nmake this operation reversible.\n\nRestrictions\n\nNon-deterministic collations are supported only on PostgreSQL 12+.\n\nPostgreSQL supports the `CONCURRENTLY` option to `CREATE INDEX` and `DROP\nINDEX` statements to add and remove indexes without locking out writes. This\noption is useful for adding or removing an index in a live production\ndatabase.\n\nLike `AddIndex`, but creates an index with the `CONCURRENTLY` option. This has\na few caveats to be aware of when using this option, see the PostgreSQL\ndocumentation of building indexes concurrently.\n\nLike `RemoveIndex`, but removes the index with the `CONCURRENTLY` option. This\nhas a few caveats to be aware of when using this option, see the PostgreSQL\ndocumentation.\n\nNote\n\nThe `CONCURRENTLY` option is not supported inside a transaction (see non-\natomic migration).\n\nPostgreSQL supports the `NOT VALID` option with the `ADD CONSTRAINT` statement\nto add check constraints without enforcing validation on existing rows. This\noption is useful if you want to skip the potentially lengthy scan of the table\nto verify that all existing rows satisfy the constraint.\n\nTo validate check constraints created with the `NOT VALID` option at a later\npoint of time, use the `ValidateConstraint` operation.\n\nSee the PostgreSQL documentation for more details.\n\nLike `AddConstraint`, but avoids validating the constraint on existing rows.\n\nScans through the table and validates the given check constraint on existing\nrows.\n\nNote\n\n`AddConstraintNotValid` and `ValidateConstraint` operations should be\nperformed in two separate migrations. Performing both operations in the same\natomic migration has the same effect as `AddConstraint`, whereas performing\nthem in a single non-atomic migration, may leave your database in an\ninconsistent state if the `ValidateConstraint` operation fails.\n\n"}, {"name": "Database transactions", "path": "topics/db/transactions", "type": "Guides", "text": "\nDjango gives you a few ways to control how database transactions are managed.\n\nDjango\u2019s default behavior is to run in autocommit mode. Each query is\nimmediately committed to the database, unless a transaction is active. See\nbelow for details.\n\nDjango uses transactions or savepoints automatically to guarantee the\nintegrity of ORM operations that require multiple queries, especially delete()\nand update() queries.\n\nDjango\u2019s `TestCase` class also wraps each test in a transaction for\nperformance reasons.\n\nA common way to handle transactions on the web is to wrap each request in a\ntransaction. Set `ATOMIC_REQUESTS` to `True` in the configuration of each\ndatabase for which you want to enable this behavior.\n\nIt works like this. Before calling a view function, Django starts a\ntransaction. If the response is produced without problems, Django commits the\ntransaction. If the view produces an exception, Django rolls back the\ntransaction.\n\nYou may perform subtransactions using savepoints in your view code, typically\nwith the `atomic()` context manager. However, at the end of the view, either\nall or none of the changes will be committed.\n\nWarning\n\nWhile the simplicity of this transaction model is appealing, it also makes it\ninefficient when traffic increases. Opening a transaction for every view has\nsome overhead. The impact on performance depends on the query patterns of your\napplication and on how well your database handles locking.\n\nPer-request transactions and streaming responses\n\nWhen a view returns a `StreamingHttpResponse`, reading the contents of the\nresponse will often execute code to generate the content. Since the view has\nalready returned, such code runs outside of the transaction.\n\nGenerally speaking, it isn\u2019t advisable to write to the database while\ngenerating a streaming response, since there\u2019s no sensible way to handle\nerrors after starting to send the response.\n\nIn practice, this feature wraps every view function in the `atomic()`\ndecorator described below.\n\nNote that only the execution of your view is enclosed in the transactions.\nMiddleware runs outside of the transaction, and so does the rendering of\ntemplate responses.\n\nWhen `ATOMIC_REQUESTS` is enabled, it\u2019s still possible to prevent views from\nrunning in a transaction.\n\nThis decorator will negate the effect of `ATOMIC_REQUESTS` for a given view:\n\nIt only works if it\u2019s applied to the view itself.\n\nDjango provides a single API to control database transactions.\n\nAtomicity is the defining property of database transactions. `atomic` allows\nus to create a block of code within which the atomicity on the database is\nguaranteed. If the block of code is successfully completed, the changes are\ncommitted to the database. If there is an exception, the changes are rolled\nback.\n\n`atomic` blocks can be nested. In this case, when an inner block completes\nsuccessfully, its effects can still be rolled back if an exception is raised\nin the outer block at a later point.\n\nIt is sometimes useful to ensure an `atomic` block is always the outermost\n`atomic` block, ensuring that any database changes are committed when the\nblock is exited without errors. This is known as durability and can be\nachieved by setting `durable=True`. If the `atomic` block is nested within\nanother it raises a `RuntimeError`.\n\n`atomic` is usable both as a decorator:\n\nand as a context manager:\n\nWrapping `atomic` in a try/except block allows for natural handling of\nintegrity errors:\n\nIn this example, even if `generate_relationships()` causes a database error by\nbreaking an integrity constraint, you can execute queries in `add_children()`,\nand the changes from `create_parent()` are still there and bound to the same\ntransaction. Note that any operations attempted in `generate_relationships()`\nwill already have been rolled back safely when `handle_exception()` is called,\nso the exception handler can also operate on the database if necessary.\n\nAvoid catching exceptions inside `atomic`!\n\nWhen exiting an `atomic` block, Django looks at whether it\u2019s exited normally\nor with an exception to determine whether to commit or roll back. If you catch\nand handle exceptions inside an `atomic` block, you may hide from Django the\nfact that a problem has happened. This can result in unexpected behavior.\n\nThis is mostly a concern for `DatabaseError` and its subclasses such as\n`IntegrityError`. After such an error, the transaction is broken and Django\nwill perform a rollback at the end of the `atomic` block. If you attempt to\nrun database queries before the rollback happens, Django will raise a\n`TransactionManagementError`. You may also encounter this behavior when an\nORM-related signal handler raises an exception.\n\nThe correct way to catch database errors is around an `atomic` block as shown\nabove. If necessary, add an extra `atomic` block for this purpose. This\npattern has another advantage: it delimits explicitly which operations will be\nrolled back if an exception occurs.\n\nIf you catch exceptions raised by raw SQL queries, Django\u2019s behavior is\nunspecified and database-dependent.\n\nYou may need to manually revert model state when rolling back a transaction.\n\nThe values of a model\u2019s fields won\u2019t be reverted when a transaction rollback\nhappens. This could lead to an inconsistent model state unless you manually\nrestore the original field values.\n\nFor example, given `MyModel` with an `active` field, this snippet ensures that\nthe `if obj.active` check at the end uses the correct value if updating\n`active` to `True` fails in the transaction:\n\nIn order to guarantee atomicity, `atomic` disables some APIs. Attempting to\ncommit, roll back, or change the autocommit state of the database connection\nwithin an `atomic` block will raise an exception.\n\n`atomic` takes a `using` argument which should be the name of a database. If\nthis argument isn\u2019t provided, Django uses the `\"default\"` database.\n\nUnder the hood, Django\u2019s transaction management code:\n\nYou can disable the creation of savepoints for inner blocks by setting the\n`savepoint` argument to `False`. If an exception occurs, Django will perform\nthe rollback when exiting the first parent block with a savepoint if there is\none, and the outermost block otherwise. Atomicity is still guaranteed by the\nouter transaction. This option should only be used if the overhead of\nsavepoints is noticeable. It has the drawback of breaking the error handling\ndescribed above.\n\nYou may use `atomic` when autocommit is turned off. It will only use\nsavepoints, even for the outermost block.\n\nPerformance considerations\n\nOpen transactions have a performance cost for your database server. To\nminimize this overhead, keep your transactions as short as possible. This is\nespecially important if you\u2019re using `atomic()` in long-running processes,\noutside of Django\u2019s request / response cycle.\n\nWarning\n\n`django.test.TestCase` disables the durability check to allow testing durable\natomic blocks in a transaction for performance reasons. Use\n`django.test.TransactionTestCase` for testing durability.\n\nThe `durable` argument was added.\n\nIn the SQL standards, each SQL query starts a transaction, unless one is\nalready active. Such transactions must then be explicitly committed or rolled\nback.\n\nThis isn\u2019t always convenient for application developers. To alleviate this\nproblem, most databases provide an autocommit mode. When autocommit is turned\non and no transaction is active, each SQL query gets wrapped in its own\ntransaction. In other words, not only does each such query start a\ntransaction, but the transaction also gets automatically committed or rolled\nback, depending on whether the query succeeded.\n\nPEP 249, the Python Database API Specification v2.0, requires autocommit to be\ninitially turned off. Django overrides this default and turns autocommit on.\n\nTo avoid this, you can deactivate the transaction management, but it isn\u2019t\nrecommended.\n\nYou can totally disable Django\u2019s transaction management for a given database\nby setting `AUTOCOMMIT` to `False` in its configuration. If you do this,\nDjango won\u2019t enable autocommit, and won\u2019t perform any commits. You\u2019ll get the\nregular behavior of the underlying database library.\n\nThis requires you to commit explicitly every transaction, even those started\nby Django or by third-party libraries. Thus, this is best used in situations\nwhere you want to run your own transaction-controlling middleware or do\nsomething really strange.\n\nSometimes you need to perform an action related to the current database\ntransaction, but only if the transaction successfully commits. Examples might\ninclude a Celery task, an email notification, or a cache invalidation.\n\nDjango provides the `on_commit()` function to register callback functions that\nshould be executed after a transaction is successfully committed:\n\nPass any function (that takes no arguments) to `on_commit()`:\n\nYou can also wrap your function in a lambda:\n\nThe function you pass in will be called immediately after a hypothetical\ndatabase write made where `on_commit()` is called would be successfully\ncommitted.\n\nIf you call `on_commit()` while there isn\u2019t an active transaction, the\ncallback will be executed immediately.\n\nIf that hypothetical database write is instead rolled back (typically when an\nunhandled exception is raised in an `atomic()` block), your function will be\ndiscarded and never called.\n\nSavepoints (i.e. nested `atomic()` blocks) are handled correctly. That is, an\n`on_commit()` callable registered after a savepoint (in a nested `atomic()`\nblock) will be called after the outer transaction is committed, but not if a\nrollback to that savepoint or any previous savepoint occurred during the\ntransaction:\n\nOn the other hand, when a savepoint is rolled back (due to an exception being\nraised), the inner callable will not be called:\n\nOn-commit functions for a given transaction are executed in the order they\nwere registered.\n\nIf one on-commit function within a given transaction raises an uncaught\nexception, no later registered functions in that same transaction will run.\nThis is the same behavior as if you\u2019d executed the functions sequentially\nyourself without `on_commit()`.\n\nYour callbacks are executed after a successful commit, so a failure in a\ncallback will not cause the transaction to roll back. They are executed\nconditionally upon the success of the transaction, but they are not part of\nthe transaction. For the intended use cases (mail notifications, Celery tasks,\netc.), this should be fine. If it\u2019s not (if your follow-up action is so\ncritical that its failure should mean the failure of the transaction itself),\nthen you don\u2019t want to use the `on_commit()` hook. Instead, you may want two-\nphase commit such as the psycopg Two-Phase Commit protocol support and the\noptional Two-Phase Commit Extensions in the Python DB-API specification.\n\nCallbacks are not run until autocommit is restored on the connection following\nthe commit (because otherwise any queries done in a callback would open an\nimplicit transaction, preventing the connection from going back into\nautocommit mode).\n\nWhen in autocommit mode and outside of an `atomic()` block, the function will\nrun immediately, not on commit.\n\nOn-commit functions only work with autocommit mode and the `atomic()` (or\n`ATOMIC_REQUESTS`) transaction API. Calling `on_commit()` when autocommit is\ndisabled and you are not within an atomic block will result in an error.\n\nDjango\u2019s `TestCase` class wraps each test in a transaction and rolls back that\ntransaction after each test, in order to provide test isolation. This means\nthat no transaction is ever actually committed, thus your `on_commit()`\ncallbacks will never be run.\n\nYou can overcome this limitation by using\n`TestCase.captureOnCommitCallbacks()`. This captures your `on_commit()`\ncallbacks in a list, allowing you to make assertions on them, or emulate the\ntransaction committing by calling them.\n\nAnother way to overcome the limitation is to use `TransactionTestCase` instead\nof `TestCase`. This will mean your transactions are committed, and the\ncallbacks will run. However `TransactionTestCase` flushes the database between\ntests, which is significantly slower than `TestCase`\u2019s isolation.\n\nA rollback hook is harder to implement robustly than a commit hook, since a\nvariety of things can cause an implicit rollback.\n\nFor instance, if your database connection is dropped because your process was\nkilled without a chance to shut down gracefully, your rollback hook will never\nrun.\n\nBut there is a solution: instead of doing something during the atomic block\n(transaction) and then undoing it if the transaction fails, use `on_commit()`\nto delay doing it in the first place until after the transaction succeeds.\nIt\u2019s a lot easier to undo something you never did in the first place!\n\nWarning\n\nAlways prefer `atomic()` if possible at all. It accounts for the\nidiosyncrasies of each database and prevents invalid operations.\n\nThe low level APIs are only useful if you\u2019re implementing your own transaction\nmanagement.\n\nDjango provides an API in the `django.db.transaction` module to manage the\nautocommit state of each database connection.\n\nThese functions take a `using` argument which should be the name of a\ndatabase. If it isn\u2019t provided, Django uses the `\"default\"` database.\n\nAutocommit is initially turned on. If you turn it off, it\u2019s your\nresponsibility to restore it.\n\nOnce you turn autocommit off, you get the default behavior of your database\nadapter, and Django won\u2019t help you. Although that behavior is specified in PEP\n249, implementations of adapters aren\u2019t always consistent with one another.\nReview the documentation of the adapter you\u2019re using carefully.\n\nYou must ensure that no transaction is active, usually by issuing a `commit()`\nor a `rollback()`, before turning autocommit back on.\n\nDjango will refuse to turn autocommit off when an `atomic()` block is active,\nbecause that would break atomicity.\n\nA transaction is an atomic set of database queries. Even if your program\ncrashes, the database guarantees that either all the changes will be applied,\nor none of them.\n\nDjango doesn\u2019t provide an API to start a transaction. The expected way to\nstart a transaction is to disable autocommit with `set_autocommit()`.\n\nOnce you\u2019re in a transaction, you can choose either to apply the changes\nyou\u2019ve performed until this point with `commit()`, or to cancel them with\n`rollback()`. These functions are defined in `django.db.transaction`.\n\nThese functions take a `using` argument which should be the name of a\ndatabase. If it isn\u2019t provided, Django uses the `\"default\"` database.\n\nDjango will refuse to commit or to rollback when an `atomic()` block is\nactive, because that would break atomicity.\n\nA savepoint is a marker within a transaction that enables you to roll back\npart of a transaction, rather than the full transaction. Savepoints are\navailable with the SQLite, PostgreSQL, Oracle, and MySQL (when using the\nInnoDB storage engine) backends. Other backends provide the savepoint\nfunctions, but they\u2019re empty operations \u2013 they don\u2019t actually do anything.\n\nSavepoints aren\u2019t especially useful if you are using autocommit, the default\nbehavior of Django. However, once you open a transaction with `atomic()`, you\nbuild up a series of database operations awaiting a commit or rollback. If you\nissue a rollback, the entire transaction is rolled back. Savepoints provide\nthe ability to perform a fine-grained rollback, rather than the full rollback\nthat would be performed by `transaction.rollback()`.\n\nWhen the `atomic()` decorator is nested, it creates a savepoint to allow\npartial commit or rollback. You\u2019re strongly encouraged to use `atomic()`\nrather than the functions described below, but they\u2019re still part of the\npublic API, and there\u2019s no plan to deprecate them.\n\nEach of these functions takes a `using` argument which should be the name of a\ndatabase for which the behavior applies. If no `using` argument is provided\nthen the `\"default\"` database is used.\n\nSavepoints are controlled by three functions in `django.db.transaction`:\n\nCreates a new savepoint. This marks a point in the transaction that is known\nto be in a \u201cgood\u201d state. Returns the savepoint ID (`sid`).\n\nReleases savepoint `sid`. The changes performed since the savepoint was\ncreated become part of the transaction.\n\nRolls back the transaction to savepoint `sid`.\n\nThese functions do nothing if savepoints aren\u2019t supported or if the database\nis in autocommit mode.\n\nIn addition, there\u2019s a utility function:\n\nResets the counter used to generate unique savepoint IDs.\n\nThe following example demonstrates the use of savepoints:\n\nSavepoints may be used to recover from a database error by performing a\npartial rollback. If you\u2019re doing this inside an `atomic()` block, the entire\nblock will still be rolled back, because it doesn\u2019t know you\u2019ve handled the\nsituation at a lower level! To prevent this, you can control the rollback\nbehavior with the following functions.\n\nSetting the rollback flag to `True` forces a rollback when exiting the\ninnermost atomic block. This may be useful to trigger a rollback without\nraising an exception.\n\nSetting it to `False` prevents such a rollback. Before doing that, make sure\nyou\u2019ve rolled back the transaction to a known-good savepoint within the\ncurrent atomic block! Otherwise you\u2019re breaking atomicity and data corruption\nmay occur.\n\nWhile SQLite supports savepoints, a flaw in the design of the `sqlite3` module\nmakes them hardly usable.\n\nWhen autocommit is enabled, savepoints don\u2019t make sense. When it\u2019s disabled,\n`sqlite3` commits implicitly before savepoint statements. (In fact, it commits\nbefore any statement other than `SELECT`, `INSERT`, `UPDATE`, `DELETE` and\n`REPLACE`.) This bug has two consequences:\n\nIf you\u2019re using MySQL, your tables may or may not support transactions; it\ndepends on your MySQL version and the table types you\u2019re using. (By \u201ctable\ntypes,\u201d we mean something like \u201cInnoDB\u201d or \u201cMyISAM\u201d.) MySQL transaction\npeculiarities are outside the scope of this article, but the MySQL site has\ninformation on MySQL transactions.\n\nIf your MySQL setup does not support transactions, then Django will always\nfunction in autocommit mode: statements will be executed and committed as soon\nas they\u2019re called. If your MySQL setup does support transactions, Django will\nhandle transactions as explained in this document.\n\nNote\n\nThis section is relevant only if you\u2019re implementing your own transaction\nmanagement. This problem cannot occur in Django\u2019s default mode and `atomic()`\nhandles it automatically.\n\nInside a transaction, when a call to a PostgreSQL cursor raises an exception\n(typically `IntegrityError`), all subsequent SQL in the same transaction will\nfail with the error \u201ccurrent transaction is aborted, queries ignored until end\nof transaction block\u201d. While the basic use of `save()` is unlikely to raise an\nexception in PostgreSQL, there are more advanced usage patterns which might,\nsuch as saving objects with unique fields, saving using the\nforce_insert/force_update flag, or invoking custom SQL.\n\nThere are several ways to recover from this sort of error.\n\nThe first option is to roll back the entire transaction. For example:\n\nCalling `transaction.rollback()` rolls back the entire transaction. Any\nuncommitted database operations will be lost. In this example, the changes\nmade by `a.save()` would be lost, even though that operation raised no error\nitself.\n\nYou can use savepoints to control the extent of a rollback. Before performing\na database operation that could fail, you can set or update the savepoint;\nthat way, if the operation fails, you can roll back the single offending\noperation, rather than the entire transaction. For example:\n\nIn this example, `a.save()` will not be undone in the case where `b.save()`\nraises an exception.\n\n"}, {"name": "Databases", "path": "ref/databases", "type": "API", "text": "\nDjango officially supports the following databases:\n\nThere are also a number of database backends provided by third parties.\n\nDjango attempts to support as many features as possible on all database\nbackends. However, not all database backends are alike, and we\u2019ve had to make\ndesign decisions on which features to support and which assumptions we can\nmake safely.\n\nThis file describes some of the features that might be relevant to Django\nusage. It is not intended as a replacement for server-specific documentation\nor reference manuals.\n\nPersistent connections avoid the overhead of re-establishing a connection to\nthe database in each request. They\u2019re controlled by the `CONN_MAX_AGE`\nparameter which defines the maximum lifetime of a connection. It can be set\nindependently for each database.\n\nThe default value is `0`, preserving the historical behavior of closing the\ndatabase connection at the end of each request. To enable persistent\nconnections, set `CONN_MAX_AGE` to a positive integer of seconds. For\nunlimited persistent connections, set it to `None`.\n\nDjango opens a connection to the database when it first makes a database\nquery. It keeps this connection open and reuses it in subsequent requests.\nDjango closes the connection once it exceeds the maximum age defined by\n`CONN_MAX_AGE` or when it isn\u2019t usable any longer.\n\nIn detail, Django automatically opens a connection to the database whenever it\nneeds one and doesn\u2019t have one already \u2014 either because this is the first\nconnection, or because the previous connection was closed.\n\nAt the beginning of each request, Django closes the connection if it has\nreached its maximum age. If your database terminates idle connections after\nsome time, you should set `CONN_MAX_AGE` to a lower value, so that Django\ndoesn\u2019t attempt to use a connection that has been terminated by the database\nserver. (This problem may only affect very low traffic sites.)\n\nAt the end of each request, Django closes the connection if it has reached its\nmaximum age or if it is in an unrecoverable error state. If any database\nerrors have occurred while processing the requests, Django checks whether the\nconnection still works, and closes it if it doesn\u2019t. Thus, database errors\naffect at most one request; if the connection becomes unusable, the next\nrequest gets a fresh connection.\n\nSince each thread maintains its own connection, your database must support at\nleast as many simultaneous connections as you have worker threads.\n\nSometimes a database won\u2019t be accessed by the majority of your views, for\nexample because it\u2019s the database of an external system, or thanks to caching.\nIn such cases, you should set `CONN_MAX_AGE` to a low value or even `0`,\nbecause it doesn\u2019t make sense to maintain a connection that\u2019s unlikely to be\nreused. This will help keep the number of simultaneous connections to this\ndatabase small.\n\nThe development server creates a new thread for each request it handles,\nnegating the effect of persistent connections. Don\u2019t enable them during\ndevelopment.\n\nWhen Django establishes a connection to the database, it sets up appropriate\nparameters, depending on the backend being used. If you enable persistent\nconnections, this setup is no longer repeated every request. If you modify\nparameters such as the connection\u2019s isolation level or time zone, you should\neither restore Django\u2019s defaults at the end of each request, force an\nappropriate value at the beginning of each request, or disable persistent\nconnections.\n\nDjango assumes that all databases use UTF-8 encoding. Using other encodings\nmay result in unexpected behavior such as \u201cvalue too long\u201d errors from your\ndatabase for data that is valid in Django. See the database specific notes\nbelow for information on how to set up your database correctly.\n\nDjango supports PostgreSQL 10 and higher. psycopg2 2.5.4 or higher is\nrequired, though the latest release is recommended.\n\nSee `HOST` for details.\n\nTo connect using a service name from the connection service file and a\npassword from the password file, you must specify them in the `OPTIONS` part\nof your database configuration in `DATABASES`:\n\nSupport for connecting by a service name, and specifying a password file was\nadded.\n\nDjango needs the following parameters for its database connections:\n\nIf these parameters already have the correct values, Django won\u2019t set them for\nevery new connection, which improves performance slightly. You can configure\nthem directly in `postgresql.conf` or more conveniently per database user with\nALTER ROLE.\n\nDjango will work just fine without this optimization, but each new connection\nwill do some additional queries to set these parameters.\n\nLike PostgreSQL itself, Django defaults to the `READ COMMITTED` isolation\nlevel. If you need a higher isolation level such as `REPEATABLE READ` or\n`SERIALIZABLE`, set it in the `OPTIONS` part of your database configuration in\n`DATABASES`:\n\nNote\n\nUnder higher isolation levels, your application should be prepared to handle\nexceptions raised on serialization failures. This option is designed for\nadvanced uses.\n\nWhen specifying `db_index=True` on your model fields, Django typically outputs\na single `CREATE INDEX` statement. However, if the database type for the field\nis either `varchar` or `text` (e.g., used by `CharField`, `FileField`, and\n`TextField`), then Django will create an additional index that uses an\nappropriate PostgreSQL operator class for the column. The extra index is\nnecessary to correctly perform lookups that use the `LIKE` operator in their\nSQL, as is done with the `contains` and `startswith` lookup types.\n\nIf you need to add a PostgreSQL extension (like `hstore`, `postgis`, etc.)\nusing a migration, use the `CreateExtension` operation.\n\nWhen using `QuerySet.iterator()`, Django opens a server-side cursor. By\ndefault, PostgreSQL assumes that only the first 10% of the results of cursor\nqueries will be fetched. The query planner spends less time planning the query\nand starts returning results faster, but this could diminish performance if\nmore than 10% of the results are retrieved. PostgreSQL\u2019s assumptions on the\nnumber of rows retrieved for a cursor query is controlled with the\ncursor_tuple_fraction option.\n\nUsing a connection pooler in transaction pooling mode (e.g. PgBouncer)\nrequires disabling server-side cursors for that connection.\n\nServer-side cursors are local to a connection and remain open at the end of a\ntransaction when `AUTOCOMMIT` is `True`. A subsequent transaction may attempt\nto fetch more results from a server-side cursor. In transaction pooling mode,\nthere\u2019s no guarantee that subsequent transactions will use the same\nconnection. If a different connection is used, an error is raised when the\ntransaction references the server-side cursor, because server-side cursors are\nonly accessible in the connection in which they were created.\n\nOne solution is to disable server-side cursors for a connection in `DATABASES`\nby setting `DISABLE_SERVER_SIDE_CURSORS` to `True`.\n\nTo benefit from server-side cursors in transaction pooling mode, you could set\nup another connection to the database in order to perform queries that use\nserver-side cursors. This connection needs to either be directly to the\ndatabase or to a connection pooler in session pooling mode.\n\nAnother option is to wrap each `QuerySet` using server-side cursors in an\n`atomic()` block, because it disables `autocommit` for the duration of the\ntransaction. This way, the server-side cursor will only live for the duration\nof the transaction.\n\nDjango uses PostgreSQL\u2019s SERIAL data type to store auto-incrementing primary\nkeys. A `SERIAL` column is populated with values from a sequence that keeps\ntrack of the next available value. Manually assigning a value to an auto-\nincrementing field doesn\u2019t update the field\u2019s sequence, which might later\ncause a conflict. For example:\n\nIf you need to specify such values, reset the sequence afterward to avoid\nreusing a value that\u2019s already in the table. The `sqlsequencereset` management\ncommand generates the SQL statements to do that.\n\nYou can use the `TEST['TEMPLATE']` setting to specify a template (e.g.\n`'template0'`) from which to create a test database.\n\nYou can speed up test execution times by configuring PostgreSQL to be non-\ndurable.\n\nWarning\n\nThis is dangerous: it will make your database more susceptible to data loss or\ncorruption in the case of a server crash or power loss. Only use this on a\ndevelopment machine where you can easily restore the entire contents of all\ndatabases in the cluster.\n\nDjango supports MariaDB 10.2 and higher.\n\nTo use MariaDB, use the MySQL backend, which is shared between the two. See\nthe MySQL notes for more details.\n\nDjango supports MySQL 5.7 and higher.\n\nDjango\u2019s `inspectdb` feature uses the `information_schema` database, which\ncontains detailed data on all database schemas.\n\nDjango expects the database to support Unicode (UTF-8 encoding) and delegates\nto it the task of enforcing transactions and referential integrity. It is\nimportant to be aware of the fact that the two latter ones aren\u2019t actually\nenforced by MySQL when using the MyISAM storage engine, see the next section.\n\nMySQL has several storage engines. You can change the default storage engine\nin the server configuration.\n\nMySQL\u2019s default storage engine is InnoDB. This engine is fully transactional\nand supports foreign key references. It\u2019s the recommended choice. However, the\nInnoDB autoincrement counter is lost on a MySQL restart because it does not\nremember the `AUTO_INCREMENT` value, instead recreating it as \u201cmax(id)+1\u201d.\nThis may result in an inadvertent reuse of `AutoField` values.\n\nThe main drawbacks of MyISAM are that it doesn\u2019t support transactions or\nenforce foreign-key constraints.\n\nMySQL has a couple drivers that implement the Python Database API described in\nPEP 249:\n\nThese drivers are thread-safe and provide connection pooling.\n\nIn addition to a DB API driver, Django needs an adapter to access the database\ndrivers from its ORM. Django provides an adapter for mysqlclient while MySQL\nConnector/Python includes its own.\n\nDjango requires mysqlclient 1.4.0 or later.\n\nMySQL Connector/Python is available from the download page. The Django adapter\nis available in versions 1.1.X and later. It may not support the most recent\nreleases of Django.\n\nIf you plan on using Django\u2019s timezone support, use mysql_tzinfo_to_sql to\nload time zone tables into the MySQL database. This needs to be done just once\nfor your MySQL server, not per database.\n\nYou can create your database using the command-line tools and this SQL:\n\nThis ensures all tables and columns will use UTF-8 by default.\n\nThe collation setting for a column controls the order in which data is sorted\nas well as what strings compare as equal. You can specify the `db_collation`\nparameter to set the collation name of the column for `CharField` and\n`TextField`.\n\nThe collation can also be set on a database-wide level and per-table. This is\ndocumented thoroughly in the MySQL documentation. In such cases, you must set\nthe collation by directly manipulating the database settings or tables. Django\ndoesn\u2019t provide an API to change them.\n\nBy default, with a UTF-8 database, MySQL will use the `utf8_general_ci`\ncollation. This results in all string equality comparisons being done in a\ncase-insensitive manner. That is, `\"Fred\"` and `\"freD\"` are considered equal\nat the database level. If you have a unique constraint on a field, it would be\nillegal to try to insert both `\"aa\"` and `\"AA\"` into the same column, since\nthey compare as equal (and, hence, non-unique) with the default collation. If\nyou want case-sensitive comparisons on a particular column or table, change\nthe column or table to use the `utf8_bin` collation.\n\nPlease note that according to MySQL Unicode Character Sets, comparisons for\nthe `utf8_general_ci` collation are faster, but slightly less correct, than\ncomparisons for `utf8_unicode_ci`. If this is acceptable for your application,\nyou should use `utf8_general_ci` because it is faster. If this is not\nacceptable (for example, if you require German dictionary order), use\n`utf8_unicode_ci` because it is more accurate.\n\nWarning\n\nModel formsets validate unique fields in a case-sensitive manner. Thus when\nusing a case-insensitive collation, a formset with unique field values that\ndiffer only by case will pass validation, but upon calling `save()`, an\n`IntegrityError` will be raised.\n\nSupport for setting a database collation for the field was added.\n\nRefer to the settings documentation.\n\nConnection settings are used in this order:\n\nIn other words, if you set the name of the database in `OPTIONS`, this will\ntake precedence over `NAME`, which would override anything in a MySQL option\nfile.\n\nHere\u2019s a sample configuration which uses a MySQL option file:\n\nSeveral other MySQLdb connection options may be useful, such as `ssl`,\n`init_command`, and `sql_mode`.\n\nFrom MySQL 5.7 onward, the default value of the `sql_mode` option contains\n`STRICT_TRANS_TABLES`. That option escalates warnings into errors when data\nare truncated upon insertion, so Django highly recommends activating a strict\nmode for MySQL to prevent data loss (either `STRICT_TRANS_TABLES` or\n`STRICT_ALL_TABLES`).\n\nIf you need to customize the SQL mode, you can set the `sql_mode` variable\nlike other MySQL options: either in a config file or with the entry\n`'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"` in the `OPTIONS` part\nof your database configuration in `DATABASES`.\n\nWhen running concurrent loads, database transactions from different sessions\n(say, separate threads handling different requests) may interact with each\nother. These interactions are affected by each session\u2019s transaction isolation\nlevel. You can set a connection\u2019s isolation level with an `'isolation_level'`\nentry in the `OPTIONS` part of your database configuration in `DATABASES`.\nValid values for this entry are the four standard isolation levels:\n\nor `None` to use the server\u2019s configured isolation level. However, Django\nworks best with and defaults to read committed rather than MySQL\u2019s default,\nrepeatable read. Data loss is possible with repeatable read. In particular,\nyou may see cases where `get_or_create()` will raise an `IntegrityError` but\nthe object won\u2019t appear in a subsequent `get()` call.\n\nWhen Django generates the schema, it doesn\u2019t specify a storage engine, so\ntables will be created with whatever default storage engine your database\nserver is configured for. The easiest solution is to set your database\nserver\u2019s default storage engine to the desired engine.\n\nIf you\u2019re using a hosting service and can\u2019t change your server\u2019s default\nstorage engine, you have a couple of options.\n\nAfter the tables are created, execute an `ALTER TABLE` statement to convert a\ntable to a new storage engine (such as InnoDB):\n\nThis can be tedious if you have a lot of tables.\n\nAnother option is to use the `init_command` option for MySQLdb prior to\ncreating your tables:\n\nThis sets the default storage engine upon connecting to the database. After\nyour tables have been created, you should remove this option as it adds a\nquery that is only needed during table creation to each database connection.\n\nThere are known issues in even the latest versions of MySQL that can cause the\ncase of a table name to be altered when certain SQL statements are executed\nunder certain conditions. It is recommended that you use lowercase table\nnames, if possible, to avoid any problems that might arise from this behavior.\nDjango uses lowercase table names when it auto-generates table names from\nmodels, so this is mainly a consideration if you are overriding the table name\nvia the `db_table` parameter.\n\nBoth the Django ORM and MySQL (when using the InnoDB storage engine) support\ndatabase savepoints.\n\nIf you use the MyISAM storage engine please be aware of the fact that you will\nreceive database-generated errors if you try to use the savepoint-related\nmethods of the transactions API. The reason for this is that detecting the\nstorage engine of a MySQL database/table is an expensive operation so it was\ndecided it isn\u2019t worth to dynamically convert these methods in no-op\u2019s based\nin the results of such detection.\n\nAny fields that are stored with `VARCHAR` column types may have their\n`max_length` restricted to 255 characters if you are using `unique=True` for\nthe field. This affects `CharField`, `SlugField`. See the MySQL documentation\nfor more details.\n\nMySQL can index only the first N chars of a `BLOB` or `TEXT` column. Since\n`TextField` doesn\u2019t have a defined length, you can\u2019t mark it as `unique=True`.\nMySQL will report: \u201cBLOB/TEXT column \u2018<db_column>\u2019 used in key specification\nwithout a key length\u201d.\n\nMySQL can store fractional seconds, provided that the column definition\nincludes a fractional indication (e.g. `DATETIME(6)`).\n\nDjango will not upgrade existing columns to include fractional seconds if the\ndatabase server supports it. If you want to enable them on an existing\ndatabase, it\u2019s up to you to either manually update the column on the target\ndatabase, by executing a command like:\n\nor using a `RunSQL` operation in a data migration.\n\nIf you are using a legacy database that contains `TIMESTAMP` columns, you must\nset `USE_TZ = False` to avoid data corruption. `inspectdb` maps these columns\nto `DateTimeField` and if you enable timezone support, both MySQL and Django\nwill attempt to convert the values from UTC to local time.\n\nMySQL and MariaDB do not support some options to the `SELECT ... FOR UPDATE`\nstatement. If `select_for_update()` is used with an unsupported option, then a\n`NotSupportedError` is raised.\n\nWhen using `select_for_update()` on MySQL, make sure you filter a queryset\nagainst at least a set of fields contained in unique constraints or only\nagainst fields covered by indexes. Otherwise, an exclusive write lock will be\nacquired over the full table for the duration of the transaction.\n\nWhen performing a query on a string type, but with an integer value, MySQL\nwill coerce the types of all values in the table to an integer before\nperforming the comparison. If your table contains the values `'abc'`, `'def'`\nand you query for `WHERE mycolumn=0`, both rows will match. Similarly, `WHERE\nmycolumn=1` will match the value `'abc1'`. Therefore, string type fields\nincluded in Django will always cast the value to a string before using it in a\nquery.\n\nIf you implement custom model fields that inherit from `Field` directly, are\noverriding `get_prep_value()`, or use `RawSQL`, `extra()`, or `raw()`, you\nshould ensure that you perform appropriate typecasting.\n\nDjango supports SQLite 3.9.0 and later.\n\nSQLite provides an excellent development alternative for applications that are\npredominantly read-only or require a smaller installation footprint. As with\nall database servers, though, there are some differences that are specific to\nSQLite that you should be aware of.\n\nFor all SQLite versions, there is some slightly counter-intuitive behavior\nwhen attempting to match some types of strings. These are triggered when using\nthe `iexact` or `contains` filters in Querysets. The behavior splits into two\ncases:\n\n1\\. For substring matching, all matches are done case-insensitively. That is a\nfilter such as `filter(name__contains=\"aa\")` will match a name of `\"Aabb\"`.\n\n2\\. For strings containing characters outside the ASCII range, all exact\nstring matches are performed case-sensitively, even when the case-insensitive\noptions are passed into the query. So the `iexact` filter will behave exactly\nthe same as the `exact` filter in these cases.\n\nSome possible workarounds for this are documented at sqlite.org, but they\naren\u2019t utilized by the default SQLite backend in Django, as incorporating them\nwould be fairly difficult to do robustly. Thus, Django exposes the default\nSQLite behavior and you should be aware of this when doing case-insensitive or\nsubstring filtering.\n\nSQLite has no real decimal internal type. Decimal values are internally\nconverted to the `REAL` data type (8-byte IEEE floating point number), as\nexplained in the SQLite datatypes documentation, so they don\u2019t support\ncorrectly-rounded decimal floating point arithmetic.\n\nSQLite is meant to be a lightweight database, and thus can\u2019t support a high\nlevel of concurrency. `OperationalError: database is locked` errors indicate\nthat your application is experiencing more concurrency than `sqlite` can\nhandle in default configuration. This error means that one thread or process\nhas an exclusive lock on the database connection and another thread timed out\nwaiting for the lock the be released.\n\nPython\u2019s SQLite wrapper has a default timeout value that determines how long\nthe second thread is allowed to wait on the lock before it times out and\nraises the `OperationalError: database is locked` error.\n\nIf you\u2019re getting this error, you can solve it by:\n\nIncrease the default timeout value by setting the `timeout` database option:\n\nThis will make SQLite wait a bit longer before throwing \u201cdatabase is locked\u201d\nerrors; it won\u2019t really do anything to solve them.\n\nSQLite does not support the `SELECT ... FOR UPDATE` syntax. Calling it will\nhave no effect.\n\nFor most backends, raw queries (`Manager.raw()` or `cursor.execute()`) can use\nthe \u201cpyformat\u201d parameter style, where placeholders in the query are given as\n`'%(name)s'` and the parameters are passed as a dictionary rather than a list.\nSQLite does not support this.\n\nThere are special considerations described in Isolation In SQLite when\nmodifying a table while iterating over it using `QuerySet.iterator()`. If a\nrow is added, changed, or deleted within the loop, then that row may or may\nnot appear, or may appear twice, in subsequent results fetched from the\niterator. Your code must handle this.\n\nTo use `JSONField` on SQLite, you need to enable the JSON1 extension on\nPython\u2019s `sqlite3` library. If the extension is not enabled on your\ninstallation, a system error (`fields.E180`) will be raised.\n\nTo enable the JSON1 extension you can follow the instruction on the wiki page.\n\nDjango supports Oracle Database Server versions 19c and higher. Version 7.0 or\nhigher of the cx_Oracle Python driver is required.\n\nIn order for the `python manage.py migrate` command to work, your Oracle\ndatabase user must have privileges to run the following commands:\n\nTo run a project\u2019s test suite, the user usually needs these additional\nprivileges:\n\nWhile the `RESOURCE` role has the required `CREATE TABLE`, `CREATE SEQUENCE`,\n`CREATE PROCEDURE`, and `CREATE TRIGGER` privileges, and a user granted\n`RESOURCE WITH ADMIN OPTION` can grant `RESOURCE`, such a user cannot grant\nthe individual privileges (e.g. `CREATE TABLE`), and thus `RESOURCE WITH ADMIN\nOPTION` is not usually sufficient for running tests.\n\nSome test suites also create views or materialized views; to run these, the\nuser also needs `CREATE VIEW WITH ADMIN OPTION` and `CREATE MATERIALIZED VIEW\nWITH ADMIN OPTION` privileges. In particular, this is needed for Django\u2019s own\ntest suite.\n\nAll of these privileges are included in the DBA role, which is appropriate for\nuse on a private developer\u2019s database.\n\nThe Oracle database backend uses the `SYS.DBMS_LOB` and `SYS.DBMS_RANDOM`\npackages, so your user will require execute permissions on it. It\u2019s normally\naccessible to all users by default, but in case it is not, you\u2019ll need to\ngrant permissions like so:\n\nTo connect using the service name of your Oracle database, your `settings.py`\nfile should look something like this:\n\nIn this case, you should leave both `HOST` and `PORT` empty. However, if you\ndon\u2019t use a `tnsnames.ora` file or a similar naming method and want to connect\nusing the SID (\u201cxe\u201d in this example), then fill in both `HOST` and `PORT` like\nso:\n\nYou should either supply both `HOST` and `PORT`, or leave both as empty\nstrings. Django will use a different connect descriptor depending on that\nchoice.\n\nA Full DSN or Easy Connect string can be used in `NAME` if both `HOST` and\n`PORT` are empty. This format is required when using RAC or pluggable\ndatabases without `tnsnames.ora`, for example.\n\nExample of an Easy Connect string:\n\nExample of a full DSN string:\n\nIf you plan to run Django in a multithreaded environment (e.g. Apache using\nthe default MPM module on any modern operating system), then you must set the\n`threaded` option of your Oracle database configuration to `True`:\n\nFailure to do this may result in crashes and other odd behavior.\n\nBy default, the Oracle backend uses a `RETURNING INTO` clause to efficiently\nretrieve the value of an `AutoField` when inserting new rows. This behavior\nmay result in a `DatabaseError` in certain unusual setups, such as when\ninserting into a remote table, or into a view with an `INSTEAD OF` trigger.\nThe `RETURNING INTO` clause can be disabled by setting the\n`use_returning_into` option of the database configuration to `False`:\n\nIn this case, the Oracle backend will use a separate `SELECT` query to\nretrieve `AutoField` values.\n\nOracle imposes a name length limit of 30 characters. To accommodate this, the\nbackend truncates database identifiers to fit, replacing the final four\ncharacters of the truncated name with a repeatable MD5 hash value.\nAdditionally, the backend turns database identifiers to all-uppercase.\n\nTo prevent these transformations (this is usually required only when dealing\nwith legacy databases or accessing tables which belong to other users), use a\nquoted name as the value for `db_table`:\n\nQuoted names can also be used with Django\u2019s other supported database backends;\nexcept for Oracle, however, the quotes have no effect.\n\nWhen running `migrate`, an `ORA-06552` error may be encountered if certain\nOracle keywords are used as the name of a model field or the value of a\n`db_column` option. Django quotes all identifiers used in queries to prevent\nmost such problems, but this error can still occur when an Oracle datatype is\nused as a column name. In particular, take care to avoid using the names\n`date`, `timestamp`, `number` or `float` as a field name.\n\nDjango generally prefers to use the empty string (`''`) rather than `NULL`,\nbut Oracle treats both identically. To get around this, the Oracle backend\nignores an explicit `null` option on fields that have the empty string as a\npossible value and generates DDL as if `null=True`. When fetching from the\ndatabase, it is assumed that a `NULL` value in one of these fields really\nmeans the empty string, and the data is silently converted to reflect this\nassumption.\n\nThe Oracle backend stores `TextFields` as `NCLOB` columns. Oracle imposes some\nlimitations on the usage of such LOB columns in general:\n\nDjango comes with built-in database backends. You may subclass an existing\ndatabase backends to modify its behavior, features, or configuration.\n\nConsider, for example, that you need to change a single database feature.\nFirst, you have to create a new directory with a `base` module in it. For\nexample:\n\nThe `base.py` module must contain a class named `DatabaseWrapper` that\nsubclasses an existing engine from the `django.db.backends` module. Here\u2019s an\nexample of subclassing the PostgreSQL engine to change a feature class\n`allows_group_by_selected_pks_on_model`:\n\nFinally, you must specify a `DATABASE-ENGINE` in your `settings.py` file:\n\nYou can see the current list of database engines by looking in\ndjango/db/backends.\n\nIn addition to the officially supported databases, there are backends provided\nby 3rd parties that allow you to use other databases with Django:\n\nThe Django versions and ORM features supported by these unofficial backends\nvary considerably. Queries regarding the specific capabilities of these\nunofficial backends, along with any support queries, should be directed to the\nsupport channels provided by each 3rd party project.\n\n"}, {"name": "Date-based mixins", "path": "ref/class-based-views/mixins-date-based", "type": "API", "text": "\nNote\n\nAll the date formatting attributes in these mixins use `strftime()` format\ncharacters. Do not try to use the format characters from the `now` template\ntag as they are not compatible.\n\nA mixin that can be used to retrieve and provide parsing information for a\nyear component of a date.\n\nMethods and Attributes\n\nThe `strftime()` format to use when parsing the year. By default, this is\n`'%Y'`.\n\nOptional The value for the year, as a string. By default, set to `None`, which\nmeans the year will be determined using other means.\n\nReturns the `strftime()` format to use when parsing the year. Returns\n`year_format` by default.\n\nReturns the year for which this view will display data, as a string. Tries the\nfollowing sources, in order:\n\nRaises a 404 if no valid year specification can be found.\n\nReturns a date object containing the first day of the year after the date\nprovided. This function can also return `None` or raise an `Http404`\nexception, depending on the values of `allow_empty` and `allow_future`.\n\nReturns a date object containing the first day of the year before the date\nprovided. This function can also return `None` or raise an `Http404`\nexception, depending on the values of `allow_empty` and `allow_future`.\n\nA mixin that can be used to retrieve and provide parsing information for a\nmonth component of a date.\n\nMethods and Attributes\n\nThe `strftime()` format to use when parsing the month. By default, this is\n`'%b'`.\n\nOptional The value for the month, as a string. By default, set to `None`,\nwhich means the month will be determined using other means.\n\nReturns the `strftime()` format to use when parsing the month. Returns\n`month_format` by default.\n\nReturns the month for which this view will display data, as a string. Tries\nthe following sources, in order:\n\nRaises a 404 if no valid month specification can be found.\n\nReturns a date object containing the first day of the month after the date\nprovided. This function can also return `None` or raise an `Http404`\nexception, depending on the values of `allow_empty` and `allow_future`.\n\nReturns a date object containing the first day of the month before the date\nprovided. This function can also return `None` or raise an `Http404`\nexception, depending on the values of `allow_empty` and `allow_future`.\n\nA mixin that can be used to retrieve and provide parsing information for a day\ncomponent of a date.\n\nMethods and Attributes\n\nThe `strftime()` format to use when parsing the day. By default, this is\n`'%d'`.\n\nOptional The value for the day, as a string. By default, set to `None`, which\nmeans the day will be determined using other means.\n\nReturns the `strftime()` format to use when parsing the day. Returns\n`day_format` by default.\n\nReturns the day for which this view will display data, as a string. Tries the\nfollowing sources, in order:\n\nRaises a 404 if no valid day specification can be found.\n\nReturns a date object containing the next valid day after the date provided.\nThis function can also return `None` or raise an `Http404` exception,\ndepending on the values of `allow_empty` and `allow_future`.\n\nReturns a date object containing the previous valid day. This function can\nalso return `None` or raise an `Http404` exception, depending on the values of\n`allow_empty` and `allow_future`.\n\nA mixin that can be used to retrieve and provide parsing information for a\nweek component of a date.\n\nMethods and Attributes\n\nThe `strftime()` format to use when parsing the week. By default, this is\n`'%U'`, which means the week starts on Sunday. Set it to `'%W'` or `'%V'` (ISO\n8601 week) if your week starts on Monday.\n\nSupport for the `'%V'` week format was added.\n\nOptional The value for the week, as a string. By default, set to `None`, which\nmeans the week will be determined using other means.\n\nReturns the `strftime()` format to use when parsing the week. Returns\n`week_format` by default.\n\nReturns the week for which this view will display data, as a string. Tries the\nfollowing sources, in order:\n\nRaises a 404 if no valid week specification can be found.\n\nReturns a date object containing the first day of the week after the date\nprovided. This function can also return `None` or raise an `Http404`\nexception, depending on the values of `allow_empty` and `allow_future`.\n\nReturns a date object containing the first day of the week before the date\nprovided. This function can also return `None` or raise an `Http404`\nexception, depending on the values of `allow_empty` and `allow_future`.\n\nA mixin class providing common behavior for all date-based views.\n\nMethods and Attributes\n\nThe name of the `DateField` or `DateTimeField` in the `QuerySet`\u2019s model that\nthe date-based archive should use to determine the list of objects to display\non the page.\n\nWhen time zone support is enabled and `date_field` is a `DateTimeField`, dates\nare assumed to be in the current time zone. Otherwise, the queryset could\ninclude objects from the previous or the next day in the end user\u2019s time zone.\n\nWarning\n\nIn this situation, if you have implemented per-user time zone selection, the\nsame URL may show a different set of objects, depending on the end user\u2019s time\nzone. To avoid this, you should use a `DateField` as the `date_field`\nattribute.\n\nA boolean specifying whether to include \u201cfuture\u201d objects on this page, where\n\u201cfuture\u201d means objects in which the field specified in `date_field` is greater\nthan the current date/time. By default, this is `False`.\n\nReturns the name of the field that contains the date data that this view will\noperate on. Returns `date_field` by default.\n\nDetermine whether to include \u201cfuture\u201d objects on this page, where \u201cfuture\u201d\nmeans objects in which the field specified in `date_field` is greater than the\ncurrent date/time. Returns `allow_future` by default.\n\nA base class that provides common behavior for all date-based views. There\nwon\u2019t normally be a reason to instantiate `BaseDateListView`; instantiate one\nof the subclasses instead.\n\nWhile this view (and its subclasses) are executing, `self.object_list` will\ncontain the list of objects that the view is operating upon, and\n`self.date_list` will contain the list of dates for which data is available.\n\nMixins\n\nMethods and Attributes\n\nA boolean specifying whether to display the page if no objects are available.\nIf this is `True` and no objects are available, the view will display an empty\npage instead of raising a 404.\n\nThis is identical to\n`django.views.generic.list.MultipleObjectMixin.allow_empty`, except for the\ndefault value, which is `False`.\n\nOptional A string defining the aggregation period for `date_list`. It must be\none of `'year'` (default), `'month'`, or `'day'`.\n\nReturns a 3-tuple containing (`date_list`, `object_list`, `extra_context`).\n\n`date_list` is the list of dates for which data is available. `object_list` is\nthe list of objects. `extra_context` is a dictionary of context data that will\nbe added to any context data provided by the `MultipleObjectMixin`.\n\nReturns a queryset, filtered using the query arguments defined by `lookup`.\nEnforces any restrictions on the queryset, such as `allow_empty` and\n`allow_future`.\n\nReturns the aggregation period for `date_list`. Returns `date_list_period` by\ndefault.\n\nReturns the list of dates of type `date_type` for which `queryset` contains\nentries. For example, `get_date_list(qs, 'year')` will return the list of\nyears for which `qs` has entries. If `date_type` isn\u2019t provided, the result of\n`get_date_list_period()` is used. `date_type` and `ordering` are passed to\n`QuerySet.dates()`.\n\n"}, {"name": "db.backends.base.DatabaseWrapper.execute_wrapper()", "path": "topics/db/instrumentation#django.db.backends.base.DatabaseWrapper.execute_wrapper", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.add_constraint()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_constraint", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.add_field()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_field", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.add_index()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_index", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_table()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_table", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_tablespace()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_tablespace", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_field()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_field", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_index_together()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_index_together", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.alter_unique_together()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_unique_together", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.create_model()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.create_model", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.delete_model()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.delete_model", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.execute()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.execute", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.remove_constraint()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_constraint", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.BaseDatabaseSchemaEditor.remove_index()", "path": "ref/schema-editor#django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_index", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.base.schema.SchemaEditor.connection", "path": "ref/schema-editor#django.db.backends.base.schema.SchemaEditor.connection", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.backends.signals.connection_created", "path": "ref/signals#django.db.backends.signals.connection_created", "type": "django.db.backends", "text": "\n\n"}, {"name": "db.connection.creation.create_test_db()", "path": "topics/testing/advanced#django.db.connection.creation.create_test_db", "type": "django.db.connection", "text": "\nCreates a new test database and runs `migrate` against it.\n\n`verbosity` has the same behavior as in `run_tests()`.\n\n`autoclobber` describes the behavior that will occur if a database with the\nsame name as the test database is discovered:\n\n`serialize` determines if Django serializes the database into an in-memory\nJSON string before running tests (used to restore the database state between\ntests if you don\u2019t have transactions). You can set this to `False` to speed up\ncreation time if you don\u2019t have any test classes with\nserialized_rollback=True.\n\nIf you are using the default test runner, you can control this with the the\n`SERIALIZE` entry in the `TEST` dictionary.\n\n`keepdb` determines if the test run should use an existing database, or create\na new one. If `True`, the existing database will be used, or created if not\npresent. If `False`, a new database will be created, prompting the user to\nremove the existing one, if present.\n\nReturns the name of the test database that it created.\n\n`create_test_db()` has the side effect of modifying the value of `NAME` in\n`DATABASES` to match the name of the test database.\n\n"}, {"name": "db.connection.creation.destroy_test_db()", "path": "topics/testing/advanced#django.db.connection.creation.destroy_test_db", "type": "django.db.connection", "text": "\nDestroys the database whose name is the value of `NAME` in `DATABASES`, and\nsets `NAME` to the value of `old_database_name`.\n\nThe `verbosity` argument has the same behavior as for `DiscoverRunner`.\n\nIf the `keepdb` argument is `True`, then the connection to the database will\nbe closed, but the database will not be destroyed.\n\n"}, {"name": "db.migrations.Migration.initial", "path": "topics/migrations#django.db.migrations.Migration.initial", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.AddConstraint", "path": "ref/migration-operations#django.db.migrations.operations.AddConstraint", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.AddField", "path": "ref/migration-operations#django.db.migrations.operations.AddField", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.AddIndex", "path": "ref/migration-operations#django.db.migrations.operations.AddIndex", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.AlterField", "path": "ref/migration-operations#django.db.migrations.operations.AlterField", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.AlterIndexTogether", "path": "ref/migration-operations#django.db.migrations.operations.AlterIndexTogether", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.AlterModelManagers", "path": "ref/migration-operations#django.db.migrations.operations.AlterModelManagers", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.AlterModelOptions", "path": "ref/migration-operations#django.db.migrations.operations.AlterModelOptions", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.AlterModelTable", "path": "ref/migration-operations#django.db.migrations.operations.AlterModelTable", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.AlterOrderWithRespectTo", "path": "ref/migration-operations#django.db.migrations.operations.AlterOrderWithRespectTo", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.AlterUniqueTogether", "path": "ref/migration-operations#django.db.migrations.operations.AlterUniqueTogether", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.CreateModel", "path": "ref/migration-operations#django.db.migrations.operations.CreateModel", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.DeleteModel", "path": "ref/migration-operations#django.db.migrations.operations.DeleteModel", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.RemoveConstraint", "path": "ref/migration-operations#django.db.migrations.operations.RemoveConstraint", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.RemoveField", "path": "ref/migration-operations#django.db.migrations.operations.RemoveField", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.RemoveIndex", "path": "ref/migration-operations#django.db.migrations.operations.RemoveIndex", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.RenameField", "path": "ref/migration-operations#django.db.migrations.operations.RenameField", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.RenameModel", "path": "ref/migration-operations#django.db.migrations.operations.RenameModel", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.RunPython", "path": "ref/migration-operations#django.db.migrations.operations.RunPython", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.RunSQL", "path": "ref/migration-operations#django.db.migrations.operations.RunSQL", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.migrations.operations.RunSQL.noop", "path": "ref/migration-operations#django.db.migrations.operations.RunSQL.noop", "type": "django.db.migrations", "text": "\nPass the `RunSQL.noop` attribute to `sql` or `reverse_sql` when you want the\noperation not to do anything in the given direction. This is especially useful\nin making the operation reversible.\n\n"}, {"name": "db.migrations.operations.SeparateDatabaseAndState", "path": "ref/migration-operations#django.db.migrations.operations.SeparateDatabaseAndState", "type": "django.db.migrations", "text": "\n\n"}, {"name": "db.models.Aggregate", "path": "ref/models/expressions#django.db.models.Aggregate", "type": "django.db.models", "text": "\nA class attribute, as a format string, that describes the SQL that is\ngenerated for this aggregate. Defaults to\n`'%(function)s(%(distinct)s%(expressions)s)'`.\n\nA class attribute describing the aggregate function that will be generated.\nSpecifically, the `function` will be interpolated as the `function`\nplaceholder within `template`. Defaults to `None`.\n\nDefaults to `True` since most aggregate functions can be used as the source\nexpression in `Window`.\n\nA class attribute determining whether or not this aggregate function allows\npassing a `distinct` keyword argument. If set to `False` (default),\n`TypeError` is raised if `distinct=True` is passed.\n\nOverride `empty_result_set_value` to `None` since most aggregate functions\nresult in `NULL` when applied to an empty result set.\n\n"}, {"name": "db.models.Aggregate.allow_distinct", "path": "ref/models/expressions#django.db.models.Aggregate.allow_distinct", "type": "django.db.models", "text": "\nA class attribute determining whether or not this aggregate function allows\npassing a `distinct` keyword argument. If set to `False` (default),\n`TypeError` is raised if `distinct=True` is passed.\n\n"}, {"name": "db.models.Aggregate.empty_result_set_value", "path": "ref/models/expressions#django.db.models.Aggregate.empty_result_set_value", "type": "django.db.models", "text": "\nOverride `empty_result_set_value` to `None` since most aggregate functions\nresult in `NULL` when applied to an empty result set.\n\n"}, {"name": "db.models.Aggregate.function", "path": "ref/models/expressions#django.db.models.Aggregate.function", "type": "django.db.models", "text": "\nA class attribute describing the aggregate function that will be generated.\nSpecifically, the `function` will be interpolated as the `function`\nplaceholder within `template`. Defaults to `None`.\n\n"}, {"name": "db.models.Aggregate.template", "path": "ref/models/expressions#django.db.models.Aggregate.template", "type": "django.db.models", "text": "\nA class attribute, as a format string, that describes the SQL that is\ngenerated for this aggregate. Defaults to\n`'%(function)s(%(distinct)s%(expressions)s)'`.\n\n"}, {"name": "db.models.Aggregate.window_compatible", "path": "ref/models/expressions#django.db.models.Aggregate.window_compatible", "type": "django.db.models", "text": "\nDefaults to `True` since most aggregate functions can be used as the source\nexpression in `Window`.\n\n"}, {"name": "db.models.as_sql()", "path": "ref/models/lookups#django.db.models.as_sql", "type": "django.db.models", "text": "\nGenerates the SQL fragment for the expression. Returns a tuple `(sql,\nparams)`, where `sql` is the SQL string, and `params` is the list or tuple of\nquery parameters. The `compiler` is an `SQLCompiler` object, which has a\n`compile()` method that can be used to compile other expressions. The\n`connection` is the connection used to execute the query.\n\nCalling `expression.as_sql()` is usually incorrect - instead\n`compiler.compile(expression)` should be used. The `compiler.compile()` method\nwill take care of calling vendor-specific methods of the expression.\n\nCustom keyword arguments may be defined on this method if it\u2019s likely that\n`as_vendorname()` methods or subclasses will need to supply data to override\nthe generation of the SQL string. See `Func.as_sql()` for example usage.\n\n"}, {"name": "db.models.as_vendorname()", "path": "ref/models/lookups#django.db.models.as_vendorname", "type": "django.db.models", "text": "\nWorks like `as_sql()` method. When an expression is compiled by\n`compiler.compile()`, Django will first try to call `as_vendorname()`, where\n`vendorname` is the vendor name of the backend used for executing the query.\nThe `vendorname` is one of `postgresql`, `oracle`, `sqlite`, or `mysql` for\nDjango\u2019s built-in backends.\n\n"}, {"name": "db.models.AutoField", "path": "ref/models/fields#django.db.models.AutoField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Avg", "path": "ref/models/querysets#django.db.models.Avg", "type": "django.db.models", "text": "\nReturns the mean value of the given expression, which must be numeric unless\nyou specify a different `output_field`.\n\nHas one optional argument:\n\nIf `distinct=True`, `Avg` returns the mean value of unique values. This is the\nSQL equivalent of `AVG(DISTINCT <field>)`. The default value is `False`.\n\n"}, {"name": "db.models.Avg.distinct", "path": "ref/models/querysets#django.db.models.Avg.distinct", "type": "django.db.models", "text": "\nIf `distinct=True`, `Avg` returns the mean value of unique values. This is the\nSQL equivalent of `AVG(DISTINCT <field>)`. The default value is `False`.\n\n"}, {"name": "db.models.BigAutoField", "path": "ref/models/fields#django.db.models.BigAutoField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.BigIntegerField", "path": "ref/models/fields#django.db.models.BigIntegerField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.BinaryField", "path": "ref/models/fields#django.db.models.BinaryField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.BinaryField.max_length", "path": "ref/models/fields#django.db.models.BinaryField.max_length", "type": "django.db.models", "text": "\nThe maximum length (in bytes) of the field. The maximum length is enforced in\nDjango\u2019s validation using `MaxLengthValidator`.\n\n"}, {"name": "db.models.BooleanField", "path": "ref/models/fields#django.db.models.BooleanField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.CASCADE", "path": "ref/models/fields#django.db.models.CASCADE", "type": "django.db.models", "text": "\nCascade deletes. Django emulates the behavior of the SQL constraint ON DELETE\nCASCADE and also deletes the object containing the ForeignKey.\n\n`Model.delete()` isn\u2019t called on related models, but the `pre_delete` and\n`post_delete` signals are sent for all deleted objects.\n\n"}, {"name": "db.models.CharField", "path": "ref/models/fields#django.db.models.CharField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.CharField.db_collation", "path": "ref/models/fields#django.db.models.CharField.db_collation", "type": "django.db.models", "text": "\nOptional. The database collation name of the field.\n\nNote\n\nCollation names are not standardized. As such, this will not be portable\nacross multiple database backends.\n\nOracle\n\nOracle supports collations only when the `MAX_STRING_SIZE` database\ninitialization parameter is set to `EXTENDED`.\n\n"}, {"name": "db.models.CharField.max_length", "path": "ref/models/fields#django.db.models.CharField.max_length", "type": "django.db.models", "text": "\nRequired. The maximum length (in characters) of the field. The max_length is\nenforced at the database level and in Django\u2019s validation using\n`MaxLengthValidator`.\n\nNote\n\nIf you are writing an application that must be portable to multiple database\nbackends, you should be aware that there are restrictions on `max_length` for\nsome backends. Refer to the database backend notes for details.\n\n"}, {"name": "db.models.CheckConstraint", "path": "ref/models/constraints#django.db.models.CheckConstraint", "type": "django.db.models", "text": "\nCreates a check constraint in the database.\n\n"}, {"name": "db.models.CheckConstraint.check", "path": "ref/models/constraints#django.db.models.CheckConstraint.check", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.CheckConstraint.name", "path": "ref/models/constraints#django.db.models.CheckConstraint.name", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Count", "path": "ref/models/querysets#django.db.models.Count", "type": "django.db.models", "text": "\nReturns the number of objects that are related through the provided\nexpression.\n\nHas one optional argument:\n\nIf `distinct=True`, the count will only include unique instances. This is the\nSQL equivalent of `COUNT(DISTINCT <field>)`. The default value is `False`.\n\nNote\n\nThe `default` argument is not supported.\n\n"}, {"name": "db.models.Count.distinct", "path": "ref/models/querysets#django.db.models.Count.distinct", "type": "django.db.models", "text": "\nIf `distinct=True`, the count will only include unique instances. This is the\nSQL equivalent of `COUNT(DISTINCT <field>)`. The default value is `False`.\n\n"}, {"name": "db.models.CursorWrapper.callproc()", "path": "topics/db/sql#django.db.models.CursorWrapper.callproc", "type": "django.db.models", "text": "\nCalls a database stored procedure with the given name. A sequence (`params`)\nor dictionary (`kparams`) of input parameters may be provided. Most databases\ndon\u2019t support `kparams`. Of Django\u2019s built-in backends, only Oracle supports\nit.\n\nFor example, given this stored procedure in an Oracle database:\n\nThis will call it:\n\n"}, {"name": "db.models.DateField", "path": "ref/models/fields#django.db.models.DateField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.DateField.auto_now", "path": "ref/models/fields#django.db.models.DateField.auto_now", "type": "django.db.models", "text": "\nAutomatically set the field to now every time the object is saved. Useful for\n\u201clast-modified\u201d timestamps. Note that the current date is always used; it\u2019s\nnot just a default value that you can override.\n\nThe field is only automatically updated when calling `Model.save()`. The field\nisn\u2019t updated when making updates to other fields in other ways such as\n`QuerySet.update()`, though you can specify a custom value for the field in an\nupdate like that.\n\n"}, {"name": "db.models.DateField.auto_now_add", "path": "ref/models/fields#django.db.models.DateField.auto_now_add", "type": "django.db.models", "text": "\nAutomatically set the field to now when the object is first created. Useful\nfor creation of timestamps. Note that the current date is always used; it\u2019s\nnot just a default value that you can override. So even if you set a value for\nthis field when creating the object, it will be ignored. If you want to be\nable to modify this field, set the following instead of `auto_now_add=True`:\n\n"}, {"name": "db.models.DateTimeField", "path": "ref/models/fields#django.db.models.DateTimeField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.DecimalField", "path": "ref/models/fields#django.db.models.DecimalField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.DecimalField.decimal_places", "path": "ref/models/fields#django.db.models.DecimalField.decimal_places", "type": "django.db.models", "text": "\nThe number of decimal places to store with the number.\n\n"}, {"name": "db.models.DecimalField.max_digits", "path": "ref/models/fields#django.db.models.DecimalField.max_digits", "type": "django.db.models", "text": "\nThe maximum number of digits allowed in the number. Note that this number must\nbe greater than or equal to `decimal_places`.\n\n"}, {"name": "db.models.DO_NOTHING", "path": "ref/models/fields#django.db.models.DO_NOTHING", "type": "django.db.models", "text": "\nTake no action. If your database backend enforces referential integrity, this\nwill cause an `IntegrityError` unless you manually add an SQL `ON DELETE`\nconstraint to the database field.\n\n"}, {"name": "db.models.DurationField", "path": "ref/models/fields#django.db.models.DurationField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.EmailField", "path": "ref/models/fields#django.db.models.EmailField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Exists", "path": "ref/models/expressions#django.db.models.Exists", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Expression", "path": "ref/models/expressions#django.db.models.Expression", "type": "django.db.models", "text": "\nTells Django that this expression contains an aggregate and that a `GROUP BY`\nclause needs to be added to the query.\n\nTells Django that this expression contains a `Window` expression. It\u2019s used,\nfor example, to disallow window function expressions in queries that modify\ndata.\n\nTells Django that this expression can be referenced in `QuerySet.filter()`.\nDefaults to `True`.\n\nTells Django that this expression can be used as the source expression in\n`Window`. Defaults to `False`.\n\nTells Django which value should be returned when the expression is used to\napply a function over an empty result set. Defaults to `NotImplemented` which\nforces the expression to be computed on the database.\n\nProvides the chance to do any pre-processing or validation of the expression\nbefore it\u2019s added to the query. `resolve_expression()` must also be called on\nany nested expressions. A `copy()` of `self` should be returned with any\nnecessary transformations.\n\n`query` is the backend query implementation.\n\n`allow_joins` is a boolean that allows or denies the use of joins in the\nquery.\n\n`reuse` is a set of reusable joins for multi-join scenarios.\n\n`summarize` is a boolean that, when `True`, signals that the query being\ncomputed is a terminal aggregate query.\n\n`for_save` is a boolean that, when `True`, signals that the query being\nexecuted is performing a create or update.\n\nReturns an ordered list of inner expressions. For example:\n\nTakes a list of expressions and stores them such that\n`get_source_expressions()` can return them.\n\nReturns a clone (copy) of `self`, with any column aliases relabeled. Column\naliases are renamed when subqueries are created. `relabeled_clone()` should\nalso be called on any nested expressions and assigned to the clone.\n\n`change_map` is a dictionary mapping old aliases to new aliases.\n\nExample:\n\nA hook allowing the expression to coerce `value` into a more appropriate type.\n\n`expression` is the same as `self`.\n\nResponsible for returning the list of columns references by this expression.\n`get_group_by_cols()` should be called on any nested expressions. `F()`\nobjects, in particular, hold a reference to a column. The `alias` parameter\nwill be `None` unless the expression has been annotated and is used for\ngrouping.\n\nReturns the expression ready to be sorted in ascending order.\n\n`nulls_first` and `nulls_last` define how null values are sorted. See Using\nF() to sort null values for example usage.\n\nReturns the expression ready to be sorted in descending order.\n\n`nulls_first` and `nulls_last` define how null values are sorted. See Using\nF() to sort null values for example usage.\n\nReturns `self` with any modifications required to reverse the sort order\nwithin an `order_by` call. As an example, an expression implementing `NULLS\nLAST` would change its value to be `NULLS FIRST`. Modifications are only\nrequired for expressions that implement sort order like `OrderBy`. This method\nis called when `reverse()` is called on a queryset.\n\n"}, {"name": "db.models.Expression.asc()", "path": "ref/models/expressions#django.db.models.Expression.asc", "type": "django.db.models", "text": "\nReturns the expression ready to be sorted in ascending order.\n\n`nulls_first` and `nulls_last` define how null values are sorted. See Using\nF() to sort null values for example usage.\n\n"}, {"name": "db.models.Expression.contains_aggregate", "path": "ref/models/expressions#django.db.models.Expression.contains_aggregate", "type": "django.db.models", "text": "\nTells Django that this expression contains an aggregate and that a `GROUP BY`\nclause needs to be added to the query.\n\n"}, {"name": "db.models.Expression.contains_over_clause", "path": "ref/models/expressions#django.db.models.Expression.contains_over_clause", "type": "django.db.models", "text": "\nTells Django that this expression contains a `Window` expression. It\u2019s used,\nfor example, to disallow window function expressions in queries that modify\ndata.\n\n"}, {"name": "db.models.Expression.convert_value()", "path": "ref/models/expressions#django.db.models.Expression.convert_value", "type": "django.db.models", "text": "\nA hook allowing the expression to coerce `value` into a more appropriate type.\n\n`expression` is the same as `self`.\n\n"}, {"name": "db.models.Expression.desc()", "path": "ref/models/expressions#django.db.models.Expression.desc", "type": "django.db.models", "text": "\nReturns the expression ready to be sorted in descending order.\n\n`nulls_first` and `nulls_last` define how null values are sorted. See Using\nF() to sort null values for example usage.\n\n"}, {"name": "db.models.Expression.empty_result_set_value", "path": "ref/models/expressions#django.db.models.Expression.empty_result_set_value", "type": "django.db.models", "text": "\nTells Django which value should be returned when the expression is used to\napply a function over an empty result set. Defaults to `NotImplemented` which\nforces the expression to be computed on the database.\n\n"}, {"name": "db.models.Expression.filterable", "path": "ref/models/expressions#django.db.models.Expression.filterable", "type": "django.db.models", "text": "\nTells Django that this expression can be referenced in `QuerySet.filter()`.\nDefaults to `True`.\n\n"}, {"name": "db.models.Expression.get_group_by_cols()", "path": "ref/models/expressions#django.db.models.Expression.get_group_by_cols", "type": "django.db.models", "text": "\nResponsible for returning the list of columns references by this expression.\n`get_group_by_cols()` should be called on any nested expressions. `F()`\nobjects, in particular, hold a reference to a column. The `alias` parameter\nwill be `None` unless the expression has been annotated and is used for\ngrouping.\n\n"}, {"name": "db.models.Expression.get_source_expressions()", "path": "ref/models/expressions#django.db.models.Expression.get_source_expressions", "type": "django.db.models", "text": "\nReturns an ordered list of inner expressions. For example:\n\n"}, {"name": "db.models.Expression.relabeled_clone()", "path": "ref/models/expressions#django.db.models.Expression.relabeled_clone", "type": "django.db.models", "text": "\nReturns a clone (copy) of `self`, with any column aliases relabeled. Column\naliases are renamed when subqueries are created. `relabeled_clone()` should\nalso be called on any nested expressions and assigned to the clone.\n\n`change_map` is a dictionary mapping old aliases to new aliases.\n\nExample:\n\n"}, {"name": "db.models.Expression.resolve_expression()", "path": "ref/models/expressions#django.db.models.Expression.resolve_expression", "type": "django.db.models", "text": "\nProvides the chance to do any pre-processing or validation of the expression\nbefore it\u2019s added to the query. `resolve_expression()` must also be called on\nany nested expressions. A `copy()` of `self` should be returned with any\nnecessary transformations.\n\n`query` is the backend query implementation.\n\n`allow_joins` is a boolean that allows or denies the use of joins in the\nquery.\n\n`reuse` is a set of reusable joins for multi-join scenarios.\n\n`summarize` is a boolean that, when `True`, signals that the query being\ncomputed is a terminal aggregate query.\n\n`for_save` is a boolean that, when `True`, signals that the query being\nexecuted is performing a create or update.\n\n"}, {"name": "db.models.Expression.reverse_ordering()", "path": "ref/models/expressions#django.db.models.Expression.reverse_ordering", "type": "django.db.models", "text": "\nReturns `self` with any modifications required to reverse the sort order\nwithin an `order_by` call. As an example, an expression implementing `NULLS\nLAST` would change its value to be `NULLS FIRST`. Modifications are only\nrequired for expressions that implement sort order like `OrderBy`. This method\nis called when `reverse()` is called on a queryset.\n\n"}, {"name": "db.models.Expression.set_source_expressions()", "path": "ref/models/expressions#django.db.models.Expression.set_source_expressions", "type": "django.db.models", "text": "\nTakes a list of expressions and stores them such that\n`get_source_expressions()` can return them.\n\n"}, {"name": "db.models.Expression.window_compatible", "path": "ref/models/expressions#django.db.models.Expression.window_compatible", "type": "django.db.models", "text": "\nTells Django that this expression can be used as the source expression in\n`Window`. Defaults to `False`.\n\n"}, {"name": "db.models.expressions.Case", "path": "ref/models/conditional-expressions#django.db.models.expressions.Case", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.expressions.RawSQL", "path": "ref/models/expressions#django.db.models.expressions.RawSQL", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.expressions.RowRange", "path": "ref/models/expressions#django.db.models.expressions.RowRange", "type": "django.db.models", "text": "\nThis attribute is set to `'ROWS'`.\n\n"}, {"name": "db.models.expressions.RowRange.frame_type", "path": "ref/models/expressions#django.db.models.expressions.RowRange.frame_type", "type": "django.db.models", "text": "\nThis attribute is set to `'ROWS'`.\n\n"}, {"name": "db.models.expressions.ValueRange", "path": "ref/models/expressions#django.db.models.expressions.ValueRange", "type": "django.db.models", "text": "\nThis attribute is set to `'RANGE'`.\n\nPostgreSQL has limited support for `ValueRange` and only supports use of the\nstandard start and end points, such as `CURRENT ROW` and `UNBOUNDED\nFOLLOWING`.\n\n"}, {"name": "db.models.expressions.ValueRange.frame_type", "path": "ref/models/expressions#django.db.models.expressions.ValueRange.frame_type", "type": "django.db.models", "text": "\nThis attribute is set to `'RANGE'`.\n\n"}, {"name": "db.models.expressions.When", "path": "ref/models/conditional-expressions#django.db.models.expressions.When", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.expressions.Window", "path": "ref/models/expressions#django.db.models.expressions.Window", "type": "django.db.models", "text": "\nDefaults to `False`. The SQL standard disallows referencing window functions\nin the `WHERE` clause and Django raises an exception when constructing a\n`QuerySet` that would do that.\n\nDefaults to `%(expression)s OVER (%(window)s)'`. If only the `expression`\nargument is provided, the window clause will be blank.\n\n"}, {"name": "db.models.expressions.Window.filterable", "path": "ref/models/expressions#django.db.models.expressions.Window.filterable", "type": "django.db.models", "text": "\nDefaults to `False`. The SQL standard disallows referencing window functions\nin the `WHERE` clause and Django raises an exception when constructing a\n`QuerySet` that would do that.\n\n"}, {"name": "db.models.expressions.Window.template", "path": "ref/models/expressions#django.db.models.expressions.Window.template", "type": "django.db.models", "text": "\nDefaults to `%(expression)s OVER (%(window)s)'`. If only the `expression`\nargument is provided, the window clause will be blank.\n\n"}, {"name": "db.models.ExpressionWrapper", "path": "ref/models/expressions#django.db.models.ExpressionWrapper", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.F", "path": "ref/models/expressions#django.db.models.F", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field", "path": "ref/models/fields#django.db.models.Field", "type": "django.db.models", "text": "\n`Field` is an abstract class that represents a database table column. Django\nuses fields to create the database table (`db_type()`), to map Python types to\ndatabase (`get_prep_value()`) and vice-versa (`from_db_value()`).\n\nA field is thus a fundamental piece in different Django APIs, notably,\n`models` and `querysets`.\n\nIn models, a field is instantiated as a class attribute and represents a\nparticular table column, see Models. It has attributes such as `null` and\n`unique`, and methods that Django uses to map the field value to database-\nspecific values.\n\nA `Field` is a subclass of `RegisterLookupMixin` and thus both `Transform` and\n`Lookup` can be registered on it to be used in `QuerySet`s (e.g.\n`field_name__exact=\"foo\"`). All built-in lookups are registered by default.\n\nAll of Django\u2019s built-in fields, such as `CharField`, are particular\nimplementations of `Field`. If you need a custom field, you can either\nsubclass any of the built-in fields or write a `Field` from scratch. In either\ncase, see How to create custom model fields.\n\nA verbose description of the field, e.g. for the `django.contrib.admindocs`\napplication.\n\nThe description can be of the form:\n\nwhere the arguments are interpolated from the field\u2019s `__dict__`.\n\nA class implementing the descriptor protocol that is instantiated and assigned\nto the model instance attribute. The constructor must accept a single\nargument, the `Field` instance. Overriding this class attribute allows for\ncustomizing the get and set behavior.\n\nTo map a `Field` to a database-specific type, Django exposes several methods:\n\nReturns a string naming this field for backend specific purposes. By default,\nit returns the class name.\n\nSee Emulating built-in field types for usage in custom fields.\n\nReturns the database column data type for the `Field`, taking into account the\n`connection`.\n\nSee Custom database types for usage in custom fields.\n\nReturns the database column data type for fields such as `ForeignKey` and\n`OneToOneField` that point to the `Field`, taking into account the\n`connection`.\n\nSee Custom database types for usage in custom fields.\n\nThere are three main situations where Django needs to interact with the\ndatabase backend and fields:\n\nWhen querying, `get_db_prep_value()` and `get_prep_value()` are used:\n\n`value` is the current value of the model\u2019s attribute, and the method should\nreturn data in a format that has been prepared for use as a parameter in a\nquery.\n\nSee Converting Python objects to query values for usage.\n\nConverts `value` to a backend-specific value. By default it returns `value` if\n`prepared=True` and `get_prep_value()` if is `False`.\n\nSee Converting query values to database values for usage.\n\nWhen loading data, `from_db_value()` is used:\n\nConverts a value as returned by the database to a Python object. It is the\nreverse of `get_prep_value()`.\n\nThis method is not used for most built-in fields as the database backend\nalready returns the correct Python type, or the backend itself does the\nconversion.\n\n`expression` is the same as `self`.\n\nSee Converting values to Python objects for usage.\n\nNote\n\nFor performance reasons, `from_db_value` is not implemented as a no-op on\nfields which do not require it (all Django fields). Consequently you may not\ncall `super` in your definition.\n\nWhen saving, `pre_save()` and `get_db_prep_save()` are used:\n\nSame as the `get_db_prep_value()`, but called when the field value must be\nsaved to the database. By default returns `get_db_prep_value()`.\n\nMethod called prior to `get_db_prep_save()` to prepare the value before being\nsaved (e.g. for `DateField.auto_now`).\n\n`model_instance` is the instance this field belongs to and `add` is whether\nthe instance is being saved to the database for the first time.\n\nIt should return the value of the appropriate attribute from `model_instance`\nfor this field. The attribute name is in `self.attname` (this is set up by\n`Field`).\n\nSee Preprocessing values before saving for usage.\n\nFields often receive their values as a different type, either from\nserialization or from forms.\n\nConverts the value into the correct Python object. It acts as the reverse of\n`value_to_string()`, and is also called in `clean()`.\n\nSee Converting values to Python objects for usage.\n\nBesides saving to the database, the field also needs to know how to serialize\nits value:\n\nReturns the field\u2019s value for the given model instance.\n\nThis method is often used by `value_to_string()`.\n\nConverts `obj` to a string. Used to serialize the value of the field.\n\nSee Converting field data for serialization for usage.\n\nWhen using `model forms`, the `Field` needs to know which form field it should\nbe represented by:\n\nReturns the default `django.forms.Field` of this field for `ModelForm`.\n\nBy default, if both `form_class` and `choices_form_class` are `None`, it uses\n`CharField`. If the field has `choices` and `choices_form_class` isn\u2019t\nspecified, it uses `TypedChoiceField`.\n\nSee Specifying the form field for a model field for usage.\n\nReturns a 4-tuple with enough information to recreate the field:\n\nThis method must be added to fields prior to 1.7 to migrate its data using\nMigrations.\n\n"}, {"name": "db.models.Field.auto_created", "path": "ref/models/fields#django.db.models.Field.auto_created", "type": "django.db.models", "text": "\nBoolean flag that indicates if the field was automatically created, such as\nthe `OneToOneField` used by model inheritance.\n\n"}, {"name": "db.models.Field.blank", "path": "ref/models/fields#django.db.models.Field.blank", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.choices", "path": "ref/models/fields#django.db.models.Field.choices", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.concrete", "path": "ref/models/fields#django.db.models.Field.concrete", "type": "django.db.models", "text": "\nBoolean flag that indicates if the field has a database column associated with\nit.\n\n"}, {"name": "db.models.Field.db_column", "path": "ref/models/fields#django.db.models.Field.db_column", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.db_index", "path": "ref/models/fields#django.db.models.Field.db_index", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.db_tablespace", "path": "ref/models/fields#django.db.models.Field.db_tablespace", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.db_type()", "path": "ref/models/fields#django.db.models.Field.db_type", "type": "django.db.models", "text": "\nReturns the database column data type for the `Field`, taking into account the\n`connection`.\n\nSee Custom database types for usage in custom fields.\n\n"}, {"name": "db.models.Field.deconstruct()", "path": "ref/models/fields#django.db.models.Field.deconstruct", "type": "django.db.models", "text": "\nReturns a 4-tuple with enough information to recreate the field:\n\nThis method must be added to fields prior to 1.7 to migrate its data using\nMigrations.\n\n"}, {"name": "db.models.Field.default", "path": "ref/models/fields#django.db.models.Field.default", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.description", "path": "ref/models/fields#django.db.models.Field.description", "type": "django.db.models", "text": "\nA verbose description of the field, e.g. for the `django.contrib.admindocs`\napplication.\n\nThe description can be of the form:\n\nwhere the arguments are interpolated from the field\u2019s `__dict__`.\n\n"}, {"name": "db.models.Field.descriptor_class", "path": "ref/models/fields#django.db.models.Field.descriptor_class", "type": "django.db.models", "text": "\nA class implementing the descriptor protocol that is instantiated and assigned\nto the model instance attribute. The constructor must accept a single\nargument, the `Field` instance. Overriding this class attribute allows for\ncustomizing the get and set behavior.\n\n"}, {"name": "db.models.Field.editable", "path": "ref/models/fields#django.db.models.Field.editable", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.error_messages", "path": "ref/models/fields#django.db.models.Field.error_messages", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.formfield()", "path": "ref/models/fields#django.db.models.Field.formfield", "type": "django.db.models", "text": "\nReturns the default `django.forms.Field` of this field for `ModelForm`.\n\nBy default, if both `form_class` and `choices_form_class` are `None`, it uses\n`CharField`. If the field has `choices` and `choices_form_class` isn\u2019t\nspecified, it uses `TypedChoiceField`.\n\nSee Specifying the form field for a model field for usage.\n\n"}, {"name": "db.models.Field.from_db_value()", "path": "ref/models/fields#django.db.models.Field.from_db_value", "type": "django.db.models", "text": "\nConverts a value as returned by the database to a Python object. It is the\nreverse of `get_prep_value()`.\n\nThis method is not used for most built-in fields as the database backend\nalready returns the correct Python type, or the backend itself does the\nconversion.\n\n`expression` is the same as `self`.\n\nSee Converting values to Python objects for usage.\n\nNote\n\nFor performance reasons, `from_db_value` is not implemented as a no-op on\nfields which do not require it (all Django fields). Consequently you may not\ncall `super` in your definition.\n\n"}, {"name": "db.models.Field.get_db_prep_save()", "path": "ref/models/fields#django.db.models.Field.get_db_prep_save", "type": "django.db.models", "text": "\nSame as the `get_db_prep_value()`, but called when the field value must be\nsaved to the database. By default returns `get_db_prep_value()`.\n\n"}, {"name": "db.models.Field.get_db_prep_value()", "path": "ref/models/fields#django.db.models.Field.get_db_prep_value", "type": "django.db.models", "text": "\nConverts `value` to a backend-specific value. By default it returns `value` if\n`prepared=True` and `get_prep_value()` if is `False`.\n\nSee Converting query values to database values for usage.\n\n"}, {"name": "db.models.Field.get_internal_type()", "path": "ref/models/fields#django.db.models.Field.get_internal_type", "type": "django.db.models", "text": "\nReturns a string naming this field for backend specific purposes. By default,\nit returns the class name.\n\nSee Emulating built-in field types for usage in custom fields.\n\n"}, {"name": "db.models.Field.get_prep_value()", "path": "ref/models/fields#django.db.models.Field.get_prep_value", "type": "django.db.models", "text": "\n`value` is the current value of the model\u2019s attribute, and the method should\nreturn data in a format that has been prepared for use as a parameter in a\nquery.\n\nSee Converting Python objects to query values for usage.\n\n"}, {"name": "db.models.Field.help_text", "path": "ref/models/fields#django.db.models.Field.help_text", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.hidden", "path": "ref/models/fields#django.db.models.Field.hidden", "type": "django.db.models", "text": "\nBoolean flag that indicates if a field is used to back another non-hidden\nfield\u2019s functionality (e.g. the `content_type` and `object_id` fields that\nmake up a `GenericForeignKey`). The `hidden` flag is used to distinguish what\nconstitutes the public subset of fields on the model from all the fields on\nthe model.\n\nNote\n\n`Options.get_fields()` excludes hidden fields by default. Pass in\n`include_hidden=True` to return hidden fields in the results.\n\n"}, {"name": "db.models.Field.is_relation", "path": "ref/models/fields#django.db.models.Field.is_relation", "type": "django.db.models", "text": "\nBoolean flag that indicates if a field contains references to one or more\nother models for its functionality (e.g. `ForeignKey`, `ManyToManyField`,\n`OneToOneField`, etc.).\n\n"}, {"name": "db.models.Field.many_to_many", "path": "ref/models/fields#django.db.models.Field.many_to_many", "type": "django.db.models", "text": "\nBoolean flag that is `True` if the field has a many-to-many relation; `False`\notherwise. The only field included with Django where this is `True` is\n`ManyToManyField`.\n\n"}, {"name": "db.models.Field.many_to_one", "path": "ref/models/fields#django.db.models.Field.many_to_one", "type": "django.db.models", "text": "\nBoolean flag that is `True` if the field has a many-to-one relation, such as a\n`ForeignKey`; `False` otherwise.\n\n"}, {"name": "db.models.Field.model", "path": "ref/models/fields#django.db.models.Field.model", "type": "django.db.models", "text": "\nReturns the model on which the field is defined. If a field is defined on a\nsuperclass of a model, `model` will refer to the superclass, not the class of\nthe instance.\n\n"}, {"name": "db.models.Field.null", "path": "ref/models/fields#django.db.models.Field.null", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.one_to_many", "path": "ref/models/fields#django.db.models.Field.one_to_many", "type": "django.db.models", "text": "\nBoolean flag that is `True` if the field has a one-to-many relation, such as a\n`GenericRelation` or the reverse of a `ForeignKey`; `False` otherwise.\n\n"}, {"name": "db.models.Field.one_to_one", "path": "ref/models/fields#django.db.models.Field.one_to_one", "type": "django.db.models", "text": "\nBoolean flag that is `True` if the field has a one-to-one relation, such as a\n`OneToOneField`; `False` otherwise.\n\n"}, {"name": "db.models.Field.pre_save()", "path": "ref/models/fields#django.db.models.Field.pre_save", "type": "django.db.models", "text": "\nMethod called prior to `get_db_prep_save()` to prepare the value before being\nsaved (e.g. for `DateField.auto_now`).\n\n`model_instance` is the instance this field belongs to and `add` is whether\nthe instance is being saved to the database for the first time.\n\nIt should return the value of the appropriate attribute from `model_instance`\nfor this field. The attribute name is in `self.attname` (this is set up by\n`Field`).\n\nSee Preprocessing values before saving for usage.\n\n"}, {"name": "db.models.Field.primary_key", "path": "ref/models/fields#django.db.models.Field.primary_key", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.rel_db_type()", "path": "ref/models/fields#django.db.models.Field.rel_db_type", "type": "django.db.models", "text": "\nReturns the database column data type for fields such as `ForeignKey` and\n`OneToOneField` that point to the `Field`, taking into account the\n`connection`.\n\nSee Custom database types for usage in custom fields.\n\n"}, {"name": "db.models.Field.related_model", "path": "ref/models/fields#django.db.models.Field.related_model", "type": "django.db.models", "text": "\nPoints to the model the field relates to. For example, `Author` in\n`ForeignKey(Author, on_delete=models.CASCADE)`. The `related_model` for a\n`GenericForeignKey` is always `None`.\n\n"}, {"name": "db.models.Field.to_python()", "path": "ref/models/fields#django.db.models.Field.to_python", "type": "django.db.models", "text": "\nConverts the value into the correct Python object. It acts as the reverse of\n`value_to_string()`, and is also called in `clean()`.\n\nSee Converting values to Python objects for usage.\n\n"}, {"name": "db.models.Field.unique", "path": "ref/models/fields#django.db.models.Field.unique", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.unique_for_date", "path": "ref/models/fields#django.db.models.Field.unique_for_date", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.unique_for_month", "path": "ref/models/fields#django.db.models.Field.unique_for_month", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.unique_for_year", "path": "ref/models/fields#django.db.models.Field.unique_for_year", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.validators", "path": "ref/models/fields#django.db.models.Field.validators", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Field.value_from_object()", "path": "ref/models/fields#django.db.models.Field.value_from_object", "type": "django.db.models", "text": "\nReturns the field\u2019s value for the given model instance.\n\nThis method is often used by `value_to_string()`.\n\n"}, {"name": "db.models.Field.value_to_string()", "path": "ref/models/fields#django.db.models.Field.value_to_string", "type": "django.db.models", "text": "\nConverts `obj` to a string. Used to serialize the value of the field.\n\nSee Converting field data for serialization for usage.\n\n"}, {"name": "db.models.Field.verbose_name", "path": "ref/models/fields#django.db.models.Field.verbose_name", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.fields.files.FieldFile", "path": "ref/models/fields#django.db.models.fields.files.FieldFile", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.fields.files.FieldFile.close()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.close", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.fields.files.FieldFile.delete()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.delete", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.fields.files.FieldFile.name", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.name", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.fields.files.FieldFile.open()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.open", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.fields.files.FieldFile.path", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.path", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.fields.files.FieldFile.save()", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.save", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.fields.files.FieldFile.size", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.size", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.fields.files.FieldFile.url", "path": "ref/models/fields#django.db.models.fields.files.FieldFile.url", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.fields.related.RelatedManager", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager", "type": "django.db.models", "text": "\nA \u201crelated manager\u201d is a manager used in a one-to-many or many-to-many related\ncontext. This happens in two cases:\n\nThe \u201cother side\u201d of a `ForeignKey` relation. That is:\n\nIn the above example, the methods below will be available on the manager\n`blog.entry_set`.\n\nBoth sides of a `ManyToManyField` relation:\n\nIn this example, the methods below will be available both on\n`topping.pizza_set` and on `pizza.toppings`.\n\nAdds the specified model objects to the related object set.\n\nExample:\n\nIn the example above, in the case of a `ForeignKey` relationship,\n`QuerySet.update()` is used to perform the update. This requires the objects\nto already be saved.\n\nYou can use the `bulk=False` argument to instead have the related manager\nperform the update by calling `e.save()`.\n\nUsing `add()` with a many-to-many relationship, however, will not call any\n`save()` methods (the `bulk` argument doesn\u2019t exist), but rather create the\nrelationships using `QuerySet.bulk_create()`. If you need to execute some\ncustom logic when a relationship is created, listen to the `m2m_changed`\nsignal, which will trigger `pre_add` and `post_add` actions.\n\nUsing `add()` on a relation that already exists won\u2019t duplicate the relation,\nbut it will still trigger signals.\n\nFor many-to-many relationships `add()` accepts either model instances or field\nvalues, normally primary keys, as the `*objs` argument.\n\nUse the `through_defaults` argument to specify values for the new intermediate\nmodel instance(s), if needed. You can use callables as values in the\n`through_defaults` dictionary and they will be evaluated once before creating\nany intermediate instance(s).\n\nCreates a new object, saves it and puts it in the related object set. Returns\nthe newly created object:\n\nThis is equivalent to (but simpler than):\n\nNote that there\u2019s no need to specify the keyword argument of the model that\ndefines the relationship. In the above example, we don\u2019t pass the parameter\n`blog` to `create()`. Django figures out that the new `Entry` object\u2019s `blog`\nfield should be set to `b`.\n\nUse the `through_defaults` argument to specify values for the new intermediate\nmodel instance, if needed. You can use callables as values in the\n`through_defaults` dictionary.\n\nRemoves the specified model objects from the related object set:\n\nSimilar to `add()`, `e.save()` is called in the example above to perform the\nupdate. Using `remove()` with a many-to-many relationship, however, will\ndelete the relationships using `QuerySet.delete()` which means no model\n`save()` methods are called; listen to the `m2m_changed` signal if you wish to\nexecute custom code when a relationship is deleted.\n\nFor many-to-many relationships `remove()` accepts either model instances or\nfield values, normally primary keys, as the `*objs` argument.\n\nFor `ForeignKey` objects, this method only exists if `null=True`. If the\nrelated field can\u2019t be set to `None` (`NULL`), then an object can\u2019t be removed\nfrom a relation without being added to another. In the above example, removing\n`e` from `b.entry_set()` is equivalent to doing `e.blog = None`, and because\nthe `blog` `ForeignKey` doesn\u2019t have `null=True`, this is invalid.\n\nFor `ForeignKey` objects, this method accepts a `bulk` argument to control how\nto perform the operation. If `True` (the default), `QuerySet.update()` is\nused. If `bulk=False`, the `save()` method of each individual model instance\nis called instead. This triggers the `pre_save` and `post_save` signals and\ncomes at the expense of performance.\n\nFor many-to-many relationships, the `bulk` keyword argument doesn\u2019t exist.\n\nRemoves all objects from the related object set:\n\nNote this doesn\u2019t delete the related objects \u2013 it just disassociates them.\n\nJust like `remove()`, `clear()` is only available on `ForeignKey`s where\n`null=True` and it also accepts the `bulk` keyword argument.\n\nFor many-to-many relationships, the `bulk` keyword argument doesn\u2019t exist.\n\nReplace the set of related objects:\n\nThis method accepts a `clear` argument to control how to perform the\noperation. If `False` (the default), the elements missing from the new set are\nremoved using `remove()` and only the new ones are added. If `clear=True`, the\n`clear()` method is called instead and the whole set is added at once.\n\nFor `ForeignKey` objects, the `bulk` argument is passed on to `add()` and\n`remove()`.\n\nFor many-to-many relationships, the `bulk` keyword argument doesn\u2019t exist.\n\nNote that since `set()` is a compound operation, it is subject to race\nconditions. For instance, new objects may be added to the database in between\nthe call to `clear()` and the call to `add()`.\n\nFor many-to-many relationships `set()` accepts a list of either model\ninstances or field values, normally primary keys, as the `objs` argument.\n\nUse the `through_defaults` argument to specify values for the new intermediate\nmodel instance(s), if needed. You can use callables as values in the\n`through_defaults` dictionary and they will be evaluated once before creating\nany intermediate instance(s).\n\nNote\n\nNote that `add()`, `create()`, `remove()`, `clear()`, and `set()` all apply\ndatabase changes immediately for all types of related fields. In other words,\nthere is no need to call `save()` on either end of the relationship.\n\nIf you use `prefetch_related()`, the `add()`, `remove()`, `clear()`, and\n`set()` methods clear the prefetched cache.\n\n"}, {"name": "db.models.fields.related.RelatedManager.add()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.add", "type": "django.db.models", "text": "\nAdds the specified model objects to the related object set.\n\nExample:\n\nIn the example above, in the case of a `ForeignKey` relationship,\n`QuerySet.update()` is used to perform the update. This requires the objects\nto already be saved.\n\nYou can use the `bulk=False` argument to instead have the related manager\nperform the update by calling `e.save()`.\n\nUsing `add()` with a many-to-many relationship, however, will not call any\n`save()` methods (the `bulk` argument doesn\u2019t exist), but rather create the\nrelationships using `QuerySet.bulk_create()`. If you need to execute some\ncustom logic when a relationship is created, listen to the `m2m_changed`\nsignal, which will trigger `pre_add` and `post_add` actions.\n\nUsing `add()` on a relation that already exists won\u2019t duplicate the relation,\nbut it will still trigger signals.\n\nFor many-to-many relationships `add()` accepts either model instances or field\nvalues, normally primary keys, as the `*objs` argument.\n\nUse the `through_defaults` argument to specify values for the new intermediate\nmodel instance(s), if needed. You can use callables as values in the\n`through_defaults` dictionary and they will be evaluated once before creating\nany intermediate instance(s).\n\n"}, {"name": "db.models.fields.related.RelatedManager.clear()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.clear", "type": "django.db.models", "text": "\nRemoves all objects from the related object set:\n\nNote this doesn\u2019t delete the related objects \u2013 it just disassociates them.\n\nJust like `remove()`, `clear()` is only available on `ForeignKey`s where\n`null=True` and it also accepts the `bulk` keyword argument.\n\nFor many-to-many relationships, the `bulk` keyword argument doesn\u2019t exist.\n\n"}, {"name": "db.models.fields.related.RelatedManager.create()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.create", "type": "django.db.models", "text": "\nCreates a new object, saves it and puts it in the related object set. Returns\nthe newly created object:\n\nThis is equivalent to (but simpler than):\n\nNote that there\u2019s no need to specify the keyword argument of the model that\ndefines the relationship. In the above example, we don\u2019t pass the parameter\n`blog` to `create()`. Django figures out that the new `Entry` object\u2019s `blog`\nfield should be set to `b`.\n\nUse the `through_defaults` argument to specify values for the new intermediate\nmodel instance, if needed. You can use callables as values in the\n`through_defaults` dictionary.\n\n"}, {"name": "db.models.fields.related.RelatedManager.remove()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.remove", "type": "django.db.models", "text": "\nRemoves the specified model objects from the related object set:\n\nSimilar to `add()`, `e.save()` is called in the example above to perform the\nupdate. Using `remove()` with a many-to-many relationship, however, will\ndelete the relationships using `QuerySet.delete()` which means no model\n`save()` methods are called; listen to the `m2m_changed` signal if you wish to\nexecute custom code when a relationship is deleted.\n\nFor many-to-many relationships `remove()` accepts either model instances or\nfield values, normally primary keys, as the `*objs` argument.\n\nFor `ForeignKey` objects, this method only exists if `null=True`. If the\nrelated field can\u2019t be set to `None` (`NULL`), then an object can\u2019t be removed\nfrom a relation without being added to another. In the above example, removing\n`e` from `b.entry_set()` is equivalent to doing `e.blog = None`, and because\nthe `blog` `ForeignKey` doesn\u2019t have `null=True`, this is invalid.\n\nFor `ForeignKey` objects, this method accepts a `bulk` argument to control how\nto perform the operation. If `True` (the default), `QuerySet.update()` is\nused. If `bulk=False`, the `save()` method of each individual model instance\nis called instead. This triggers the `pre_save` and `post_save` signals and\ncomes at the expense of performance.\n\nFor many-to-many relationships, the `bulk` keyword argument doesn\u2019t exist.\n\n"}, {"name": "db.models.fields.related.RelatedManager.set()", "path": "ref/models/relations#django.db.models.fields.related.RelatedManager.set", "type": "django.db.models", "text": "\nReplace the set of related objects:\n\nThis method accepts a `clear` argument to control how to perform the\noperation. If `False` (the default), the elements missing from the new set are\nremoved using `remove()` and only the new ones are added. If `clear=True`, the\n`clear()` method is called instead and the whole set is added at once.\n\nFor `ForeignKey` objects, the `bulk` argument is passed on to `add()` and\n`remove()`.\n\nFor many-to-many relationships, the `bulk` keyword argument doesn\u2019t exist.\n\nNote that since `set()` is a compound operation, it is subject to race\nconditions. For instance, new objects may be added to the database in between\nthe call to `clear()` and the call to `add()`.\n\nFor many-to-many relationships `set()` accepts a list of either model\ninstances or field values, normally primary keys, as the `objs` argument.\n\nUse the `through_defaults` argument to specify values for the new intermediate\nmodel instance(s), if needed. You can use callables as values in the\n`through_defaults` dictionary and they will be evaluated once before creating\nany intermediate instance(s).\n\n"}, {"name": "db.models.FileField", "path": "ref/models/fields#django.db.models.FileField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.FileField.storage", "path": "ref/models/fields#django.db.models.FileField.storage", "type": "django.db.models", "text": "\nA storage object, or a callable which returns a storage object. This handles\nthe storage and retrieval of your files. See Managing files for details on how\nto provide this object.\n\n"}, {"name": "db.models.FileField.upload_to", "path": "ref/models/fields#django.db.models.FileField.upload_to", "type": "django.db.models", "text": "\nThis attribute provides a way of setting the upload directory and file name,\nand can be set in two ways. In both cases, the value is passed to the\n`Storage.save()` method.\n\nIf you specify a string value or a `Path`, it may contain `strftime()`\nformatting, which will be replaced by the date/time of the file upload (so\nthat uploaded files don\u2019t fill up the given directory). For example:\n\nIf you are using the default `FileSystemStorage`, the string value will be\nappended to your `MEDIA_ROOT` path to form the location on the local\nfilesystem where uploaded files will be stored. If you are using a different\nstorage, check that storage\u2019s documentation to see how it handles `upload_to`.\n\n`upload_to` may also be a callable, such as a function. This will be called to\nobtain the upload path, including the filename. This callable must accept two\narguments and return a Unix-style path (with forward slashes) to be passed\nalong to the storage system. The two arguments are:\n\nAn instance of the model where the `FileField` is defined. More specifically,\nthis is the particular instance where the current file is being attached.\n\nIn most cases, this object will not have been saved to the database yet, so if\nit uses the default `AutoField`, it might not yet have a value for its primary\nkey field.\n\nFor example:\n\n"}, {"name": "db.models.FilePathField", "path": "ref/models/fields#django.db.models.FilePathField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.FilePathField.allow_files", "path": "ref/models/fields#django.db.models.FilePathField.allow_files", "type": "django.db.models", "text": "\nOptional. Either `True` or `False`. Default is `True`. Specifies whether files\nin the specified location should be included. Either this or `allow_folders`\nmust be `True`.\n\n"}, {"name": "db.models.FilePathField.allow_folders", "path": "ref/models/fields#django.db.models.FilePathField.allow_folders", "type": "django.db.models", "text": "\nOptional. Either `True` or `False`. Default is `False`. Specifies whether\nfolders in the specified location should be included. Either this or\n`allow_files` must be `True`.\n\n"}, {"name": "db.models.FilePathField.match", "path": "ref/models/fields#django.db.models.FilePathField.match", "type": "django.db.models", "text": "\nOptional. A regular expression, as a string, that `FilePathField` will use to\nfilter filenames. Note that the regex will be applied to the base filename,\nnot the full path. Example: `\"foo.*\\.txt$\"`, which will match a file called\n`foo23.txt` but not `bar.txt` or `foo23.png`.\n\n"}, {"name": "db.models.FilePathField.path", "path": "ref/models/fields#django.db.models.FilePathField.path", "type": "django.db.models", "text": "\nRequired. The absolute filesystem path to a directory from which this\n`FilePathField` should get its choices. Example: `\"/home/images\"`.\n\n`path` may also be a callable, such as a function to dynamically set the path\nat runtime. Example:\n\n"}, {"name": "db.models.FilePathField.recursive", "path": "ref/models/fields#django.db.models.FilePathField.recursive", "type": "django.db.models", "text": "\nOptional. Either `True` or `False`. Default is `False`. Specifies whether all\nsubdirectories of `path` should be included\n\n"}, {"name": "db.models.FilteredRelation", "path": "ref/models/querysets#django.db.models.FilteredRelation", "type": "django.db.models", "text": "\nThe name of the field on which you\u2019d like to filter the relation.\n\nA `Q` object to control the filtering.\n\n"}, {"name": "db.models.FilteredRelation.condition", "path": "ref/models/querysets#django.db.models.FilteredRelation.condition", "type": "django.db.models", "text": "\nA `Q` object to control the filtering.\n\n"}, {"name": "db.models.FilteredRelation.relation_name", "path": "ref/models/querysets#django.db.models.FilteredRelation.relation_name", "type": "django.db.models", "text": "\nThe name of the field on which you\u2019d like to filter the relation.\n\n"}, {"name": "db.models.FloatField", "path": "ref/models/fields#django.db.models.FloatField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.ForeignKey", "path": "ref/models/fields#django.db.models.ForeignKey", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.ForeignKey.db_constraint", "path": "ref/models/fields#django.db.models.ForeignKey.db_constraint", "type": "django.db.models", "text": "\nControls whether or not a constraint should be created in the database for\nthis foreign key. The default is `True`, and that\u2019s almost certainly what you\nwant; setting this to `False` can be very bad for data integrity. That said,\nhere are some scenarios where you might want to do this:\n\nIf this is set to `False`, accessing a related object that doesn\u2019t exist will\nraise its `DoesNotExist` exception.\n\n"}, {"name": "db.models.ForeignKey.limit_choices_to", "path": "ref/models/fields#django.db.models.ForeignKey.limit_choices_to", "type": "django.db.models", "text": "\nSets a limit to the available choices for this field when this field is\nrendered using a `ModelForm` or the admin (by default, all objects in the\nqueryset are available to choose). Either a dictionary, a `Q` object, or a\ncallable returning a dictionary or `Q` object can be used.\n\nFor example:\n\ncauses the corresponding field on the `ModelForm` to list only `Users` that\nhave `is_staff=True`. This may be helpful in the Django admin.\n\nThe callable form can be helpful, for instance, when used in conjunction with\nthe Python `datetime` module to limit selections by date range. For example:\n\nIf `limit_choices_to` is or returns a `Q object`, which is useful for complex\nqueries, then it will only have an effect on the choices available in the\nadmin when the field is not listed in `raw_id_fields` in the `ModelAdmin` for\nthe model.\n\nNote\n\nIf a callable is used for `limit_choices_to`, it will be invoked every time a\nnew form is instantiated. It may also be invoked when a model is validated,\nfor example by management commands or the admin. The admin constructs\nquerysets to validate its form inputs in various edge cases multiple times, so\nthere is a possibility your callable may be invoked several times.\n\n"}, {"name": "db.models.ForeignKey.on_delete", "path": "ref/models/fields#django.db.models.ForeignKey.on_delete", "type": "django.db.models", "text": "\nWhen an object referenced by a `ForeignKey` is deleted, Django will emulate\nthe behavior of the SQL constraint specified by the `on_delete` argument. For\nexample, if you have a nullable `ForeignKey` and you want it to be set null\nwhen the referenced object is deleted:\n\n`on_delete` doesn\u2019t create an SQL constraint in the database. Support for\ndatabase-level cascade options may be implemented later.\n\n"}, {"name": "db.models.ForeignKey.related_name", "path": "ref/models/fields#django.db.models.ForeignKey.related_name", "type": "django.db.models", "text": "\nThe name to use for the relation from the related object back to this one.\nIt\u2019s also the default value for `related_query_name` (the name to use for the\nreverse filter name from the target model). See the related objects\ndocumentation for a full explanation and example. Note that you must set this\nvalue when defining relations on abstract models; and when you do so some\nspecial syntax is available.\n\nIf you\u2019d prefer Django not to create a backwards relation, set `related_name`\nto `'+'` or end it with `'+'`. For example, this will ensure that the `User`\nmodel won\u2019t have a backwards relation to this model:\n\n"}, {"name": "db.models.ForeignKey.related_query_name", "path": "ref/models/fields#django.db.models.ForeignKey.related_query_name", "type": "django.db.models", "text": "\nThe name to use for the reverse filter name from the target model. It defaults\nto the value of `related_name` or `default_related_name` if set, otherwise it\ndefaults to the name of the model:\n\nLike `related_name`, `related_query_name` supports app label and class\ninterpolation via some special syntax.\n\n"}, {"name": "db.models.ForeignKey.swappable", "path": "ref/models/fields#django.db.models.ForeignKey.swappable", "type": "django.db.models", "text": "\nControls the migration framework\u2019s reaction if this `ForeignKey` is pointing\nat a swappable model. If it is `True` \\- the default - then if the\n`ForeignKey` is pointing at a model which matches the current value of\n`settings.AUTH_USER_MODEL` (or another swappable model setting) the\nrelationship will be stored in the migration using a reference to the setting,\nnot to the model directly.\n\nYou only want to override this to be `False` if you are sure your model should\nalways point toward the swapped-in model - for example, if it is a profile\nmodel designed specifically for your custom user model.\n\nSetting it to `False` does not mean you can reference a swappable model even\nif it is swapped out - `False` means that the migrations made with this\nForeignKey will always reference the exact model you specify (so it will fail\nhard if the user tries to run with a User model you don\u2019t support, for\nexample).\n\nIf in doubt, leave it to its default of `True`.\n\n"}, {"name": "db.models.ForeignKey.to_field", "path": "ref/models/fields#django.db.models.ForeignKey.to_field", "type": "django.db.models", "text": "\nThe field on the related object that the relation is to. By default, Django\nuses the primary key of the related object. If you reference a different\nfield, that field must have `unique=True`.\n\n"}, {"name": "db.models.Func", "path": "ref/models/expressions#django.db.models.Func", "type": "django.db.models", "text": "\nA class attribute describing the function that will be generated.\nSpecifically, the `function` will be interpolated as the `function`\nplaceholder within `template`. Defaults to `None`.\n\nA class attribute, as a format string, that describes the SQL that is\ngenerated for this function. Defaults to `'%(function)s(%(expressions)s)'`.\n\nIf you\u2019re constructing SQL like `strftime('%W', 'date')` and need a literal\n`%` character in the query, quadruple it (`%%%%`) in the `template` attribute\nbecause the string is interpolated twice: once during the template\ninterpolation in `as_sql()` and once in the SQL interpolation with the query\nparameters in the database cursor.\n\nA class attribute that denotes the character used to join the list of\n`expressions` together. Defaults to `', '`.\n\nA class attribute that denotes the number of arguments the function accepts.\nIf this attribute is set and the function is called with a different number of\nexpressions, `TypeError` will be raised. Defaults to `None`.\n\nGenerates the SQL fragment for the database function. Returns a tuple `(sql,\nparams)`, where `sql` is the SQL string, and `params` is the list or tuple of\nquery parameters.\n\nThe `as_vendor()` methods should use the `function`, `template`, `arg_joiner`,\nand any other `**extra_context` parameters to customize the SQL as needed. For\nexample:\n\nTo avoid an SQL injection vulnerability, `extra_context` must not contain\nuntrusted user input as these values are interpolated into the SQL string\nrather than passed as query parameters, where the database driver would escape\nthem.\n\n"}, {"name": "db.models.Func.arg_joiner", "path": "ref/models/expressions#django.db.models.Func.arg_joiner", "type": "django.db.models", "text": "\nA class attribute that denotes the character used to join the list of\n`expressions` together. Defaults to `', '`.\n\n"}, {"name": "db.models.Func.arity", "path": "ref/models/expressions#django.db.models.Func.arity", "type": "django.db.models", "text": "\nA class attribute that denotes the number of arguments the function accepts.\nIf this attribute is set and the function is called with a different number of\nexpressions, `TypeError` will be raised. Defaults to `None`.\n\n"}, {"name": "db.models.Func.as_sql()", "path": "ref/models/expressions#django.db.models.Func.as_sql", "type": "django.db.models", "text": "\nGenerates the SQL fragment for the database function. Returns a tuple `(sql,\nparams)`, where `sql` is the SQL string, and `params` is the list or tuple of\nquery parameters.\n\nThe `as_vendor()` methods should use the `function`, `template`, `arg_joiner`,\nand any other `**extra_context` parameters to customize the SQL as needed. For\nexample:\n\nTo avoid an SQL injection vulnerability, `extra_context` must not contain\nuntrusted user input as these values are interpolated into the SQL string\nrather than passed as query parameters, where the database driver would escape\nthem.\n\n"}, {"name": "db.models.Func.function", "path": "ref/models/expressions#django.db.models.Func.function", "type": "django.db.models", "text": "\nA class attribute describing the function that will be generated.\nSpecifically, the `function` will be interpolated as the `function`\nplaceholder within `template`. Defaults to `None`.\n\n"}, {"name": "db.models.Func.template", "path": "ref/models/expressions#django.db.models.Func.template", "type": "django.db.models", "text": "\nA class attribute, as a format string, that describes the SQL that is\ngenerated for this function. Defaults to `'%(function)s(%(expressions)s)'`.\n\nIf you\u2019re constructing SQL like `strftime('%W', 'date')` and need a literal\n`%` character in the query, quadruple it (`%%%%`) in the `template` attribute\nbecause the string is interpolated twice: once during the template\ninterpolation in `as_sql()` and once in the SQL interpolation with the query\nparameters in the database cursor.\n\n"}, {"name": "db.models.functions.Abs", "path": "ref/models/database-functions#django.db.models.functions.Abs", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ACos", "path": "ref/models/database-functions#django.db.models.functions.ACos", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ASin", "path": "ref/models/database-functions#django.db.models.functions.ASin", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ATan", "path": "ref/models/database-functions#django.db.models.functions.ATan", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ATan2", "path": "ref/models/database-functions#django.db.models.functions.ATan2", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Cast", "path": "ref/models/database-functions#django.db.models.functions.Cast", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Ceil", "path": "ref/models/database-functions#django.db.models.functions.Ceil", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Chr", "path": "ref/models/database-functions#django.db.models.functions.Chr", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Coalesce", "path": "ref/models/database-functions#django.db.models.functions.Coalesce", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Collate", "path": "ref/models/database-functions#django.db.models.functions.Collate", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Concat", "path": "ref/models/database-functions#django.db.models.functions.Concat", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Cos", "path": "ref/models/database-functions#django.db.models.functions.Cos", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Cot", "path": "ref/models/database-functions#django.db.models.functions.Cot", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.CumeDist", "path": "ref/models/database-functions#django.db.models.functions.CumeDist", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Degrees", "path": "ref/models/database-functions#django.db.models.functions.Degrees", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.DenseRank", "path": "ref/models/database-functions#django.db.models.functions.DenseRank", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Exp", "path": "ref/models/database-functions#django.db.models.functions.Exp", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Extract", "path": "ref/models/database-functions#django.db.models.functions.Extract", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ExtractDay", "path": "ref/models/database-functions#django.db.models.functions.ExtractDay", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ExtractHour", "path": "ref/models/database-functions#django.db.models.functions.ExtractHour", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ExtractIsoWeekDay", "path": "ref/models/database-functions#django.db.models.functions.ExtractIsoWeekDay", "type": "django.db.models", "text": "\nReturns the ISO-8601 week day with day 1 being Monday and day 7 being Sunday.\n\n"}, {"name": "db.models.functions.ExtractIsoYear", "path": "ref/models/database-functions#django.db.models.functions.ExtractIsoYear", "type": "django.db.models", "text": "\nReturns the ISO-8601 week-numbering year.\n\n"}, {"name": "db.models.functions.ExtractMinute", "path": "ref/models/database-functions#django.db.models.functions.ExtractMinute", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ExtractMonth", "path": "ref/models/database-functions#django.db.models.functions.ExtractMonth", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ExtractQuarter", "path": "ref/models/database-functions#django.db.models.functions.ExtractQuarter", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ExtractSecond", "path": "ref/models/database-functions#django.db.models.functions.ExtractSecond", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ExtractWeek", "path": "ref/models/database-functions#django.db.models.functions.ExtractWeek", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ExtractWeekDay", "path": "ref/models/database-functions#django.db.models.functions.ExtractWeekDay", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.ExtractYear", "path": "ref/models/database-functions#django.db.models.functions.ExtractYear", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.FirstValue", "path": "ref/models/database-functions#django.db.models.functions.FirstValue", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Floor", "path": "ref/models/database-functions#django.db.models.functions.Floor", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Greatest", "path": "ref/models/database-functions#django.db.models.functions.Greatest", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.JSONObject", "path": "ref/models/database-functions#django.db.models.functions.JSONObject", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Lag", "path": "ref/models/database-functions#django.db.models.functions.Lag", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.LastValue", "path": "ref/models/database-functions#django.db.models.functions.LastValue", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Lead", "path": "ref/models/database-functions#django.db.models.functions.Lead", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Least", "path": "ref/models/database-functions#django.db.models.functions.Least", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Left", "path": "ref/models/database-functions#django.db.models.functions.Left", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Length", "path": "ref/models/database-functions#django.db.models.functions.Length", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Ln", "path": "ref/models/database-functions#django.db.models.functions.Ln", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Log", "path": "ref/models/database-functions#django.db.models.functions.Log", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Lower", "path": "ref/models/database-functions#django.db.models.functions.Lower", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.LPad", "path": "ref/models/database-functions#django.db.models.functions.LPad", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.LTrim", "path": "ref/models/database-functions#django.db.models.functions.LTrim", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.MD5", "path": "ref/models/database-functions#django.db.models.functions.MD5", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Mod", "path": "ref/models/database-functions#django.db.models.functions.Mod", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Now", "path": "ref/models/database-functions#django.db.models.functions.Now", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.NthValue", "path": "ref/models/database-functions#django.db.models.functions.NthValue", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Ntile", "path": "ref/models/database-functions#django.db.models.functions.Ntile", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.NullIf", "path": "ref/models/database-functions#django.db.models.functions.NullIf", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Ord", "path": "ref/models/database-functions#django.db.models.functions.Ord", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.PercentRank", "path": "ref/models/database-functions#django.db.models.functions.PercentRank", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Pi", "path": "ref/models/database-functions#django.db.models.functions.Pi", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Power", "path": "ref/models/database-functions#django.db.models.functions.Power", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Radians", "path": "ref/models/database-functions#django.db.models.functions.Radians", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Random", "path": "ref/models/database-functions#django.db.models.functions.Random", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Rank", "path": "ref/models/database-functions#django.db.models.functions.Rank", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Repeat", "path": "ref/models/database-functions#django.db.models.functions.Repeat", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Replace", "path": "ref/models/database-functions#django.db.models.functions.Replace", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Reverse", "path": "ref/models/database-functions#django.db.models.functions.Reverse", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Right", "path": "ref/models/database-functions#django.db.models.functions.Right", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Round", "path": "ref/models/database-functions#django.db.models.functions.Round", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.RowNumber", "path": "ref/models/database-functions#django.db.models.functions.RowNumber", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.RPad", "path": "ref/models/database-functions#django.db.models.functions.RPad", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.RTrim", "path": "ref/models/database-functions#django.db.models.functions.RTrim", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.SHA1", "path": "ref/models/database-functions#django.db.models.functions.SHA1", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.SHA224", "path": "ref/models/database-functions#django.db.models.functions.SHA224", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.SHA256", "path": "ref/models/database-functions#django.db.models.functions.SHA256", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.SHA384", "path": "ref/models/database-functions#django.db.models.functions.SHA384", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.SHA512", "path": "ref/models/database-functions#django.db.models.functions.SHA512", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Sign", "path": "ref/models/database-functions#django.db.models.functions.Sign", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Sin", "path": "ref/models/database-functions#django.db.models.functions.Sin", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Sqrt", "path": "ref/models/database-functions#django.db.models.functions.Sqrt", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.StrIndex", "path": "ref/models/database-functions#django.db.models.functions.StrIndex", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Substr", "path": "ref/models/database-functions#django.db.models.functions.Substr", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Tan", "path": "ref/models/database-functions#django.db.models.functions.Tan", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Trim", "path": "ref/models/database-functions#django.db.models.functions.Trim", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Trunc", "path": "ref/models/database-functions#django.db.models.functions.Trunc", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.TruncDate", "path": "ref/models/database-functions#django.db.models.functions.TruncDate", "type": "django.db.models", "text": "\nThe `tzinfo` parameter was added.\n\n"}, {"name": "db.models.functions.TruncDay", "path": "ref/models/database-functions#django.db.models.functions.TruncDay", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.TruncHour", "path": "ref/models/database-functions#django.db.models.functions.TruncHour", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.TruncMinute", "path": "ref/models/database-functions#django.db.models.functions.TruncMinute", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.TruncMonth", "path": "ref/models/database-functions#django.db.models.functions.TruncMonth", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.TruncQuarter", "path": "ref/models/database-functions#django.db.models.functions.TruncQuarter", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.TruncSecond", "path": "ref/models/database-functions#django.db.models.functions.TruncSecond", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.TruncTime", "path": "ref/models/database-functions#django.db.models.functions.TruncTime", "type": "django.db.models", "text": "\nThe `tzinfo` parameter was added.\n\n"}, {"name": "db.models.functions.TruncWeek", "path": "ref/models/database-functions#django.db.models.functions.TruncWeek", "type": "django.db.models", "text": "\nTruncates to midnight on the Monday of the week.\n\n"}, {"name": "db.models.functions.TruncYear", "path": "ref/models/database-functions#django.db.models.functions.TruncYear", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.functions.Upper", "path": "ref/models/database-functions#django.db.models.functions.Upper", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.GenericIPAddressField", "path": "ref/models/fields#django.db.models.GenericIPAddressField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.GenericIPAddressField.protocol", "path": "ref/models/fields#django.db.models.GenericIPAddressField.protocol", "type": "django.db.models", "text": "\nLimits valid inputs to the specified protocol. Accepted values are `'both'`\n(default), `'IPv4'` or `'IPv6'`. Matching is case insensitive.\n\n"}, {"name": "db.models.GenericIPAddressField.unpack_ipv4", "path": "ref/models/fields#django.db.models.GenericIPAddressField.unpack_ipv4", "type": "django.db.models", "text": "\nUnpacks IPv4 mapped addresses like `::ffff:192.0.2.1`. If this option is\nenabled that address would be unpacked to `192.0.2.1`. Default is disabled.\nCan only be used when `protocol` is set to `'both'`.\n\n"}, {"name": "db.models.get_lookup()", "path": "ref/models/lookups#django.db.models.get_lookup", "type": "django.db.models", "text": "\nMust return the lookup named `lookup_name`. For instance, by returning\n`self.output_field.get_lookup(lookup_name)`.\n\n"}, {"name": "db.models.get_transform()", "path": "ref/models/lookups#django.db.models.get_transform", "type": "django.db.models", "text": "\nMust return the lookup named `transform_name`. For instance, by returning\n`self.output_field.get_transform(transform_name)`.\n\n"}, {"name": "db.models.ImageField", "path": "ref/models/fields#django.db.models.ImageField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.ImageField.height_field", "path": "ref/models/fields#django.db.models.ImageField.height_field", "type": "django.db.models", "text": "\nName of a model field which will be auto-populated with the height of the\nimage each time the model instance is saved.\n\n"}, {"name": "db.models.ImageField.width_field", "path": "ref/models/fields#django.db.models.ImageField.width_field", "type": "django.db.models", "text": "\nName of a model field which will be auto-populated with the width of the image\neach time the model instance is saved.\n\n"}, {"name": "db.models.Index", "path": "ref/models/indexes#django.db.models.Index", "type": "django.db.models", "text": "\nCreates an index (B-Tree) in the database.\n\n"}, {"name": "db.models.Index.condition", "path": "ref/models/indexes#django.db.models.Index.condition", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Index.db_tablespace", "path": "ref/models/indexes#django.db.models.Index.db_tablespace", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Index.expressions", "path": "ref/models/indexes#django.db.models.Index.expressions", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Index.fields", "path": "ref/models/indexes#django.db.models.Index.fields", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Index.include", "path": "ref/models/indexes#django.db.models.Index.include", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Index.name", "path": "ref/models/indexes#django.db.models.Index.name", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Index.opclasses", "path": "ref/models/indexes#django.db.models.Index.opclasses", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.IntegerField", "path": "ref/models/fields#django.db.models.IntegerField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.JSONField", "path": "ref/models/fields#django.db.models.JSONField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.JSONField.decoder", "path": "ref/models/fields#django.db.models.JSONField.decoder", "type": "django.db.models", "text": "\nAn optional `json.JSONDecoder` subclass to deserialize the value retrieved\nfrom the database. The value will be in the format chosen by the custom\nencoder (most often a string). Your deserialization may need to account for\nthe fact that you can\u2019t be certain of the input type. For example, you run the\nrisk of returning a `datetime` that was actually a string that just happened\nto be in the same format chosen for `datetime`s.\n\nDefaults to `json.JSONDecoder`.\n\n"}, {"name": "db.models.JSONField.encoder", "path": "ref/models/fields#django.db.models.JSONField.encoder", "type": "django.db.models", "text": "\nAn optional `json.JSONEncoder` subclass to serialize data types not supported\nby the standard JSON serializer (e.g. `datetime.datetime` or `UUID`). For\nexample, you can use the `DjangoJSONEncoder` class.\n\nDefaults to `json.JSONEncoder`.\n\n"}, {"name": "db.models.Lookup", "path": "ref/models/lookups#django.db.models.Lookup", "type": "django.db.models", "text": "\nA `Lookup` is a generic class to implement lookups. A lookup is a query\nexpression with a left-hand side, `lhs`; a right-hand side, `rhs`; and a\n`lookup_name` that is used to produce a boolean comparison between `lhs` and\n`rhs` such as `lhs in rhs` or `lhs > rhs`.\n\nThe primary notation to use a lookup in an expression is\n`<lhs>__<lookup_name>=<rhs>`. Lookups can also be used directly in `QuerySet`\nfilters:\n\n\u2026or annotations:\n\nThe left-hand side - what is being looked up. The object typically follows the\nQuery Expression API. It may also be a plain value.\n\nThe right-hand side - what `lhs` is being compared against. It can be a plain\nvalue, or something that compiles into SQL, typically an `F()` object or a\n`QuerySet`.\n\nThe name of this lookup, used to identify it on parsing query expressions. It\ncannot contain the string `\"__\"`.\n\nReturns a tuple `(lhs_string, lhs_params)`, as returned by\n`compiler.compile(lhs)`. This method can be overridden to tune how the `lhs`\nis processed.\n\n`compiler` is an `SQLCompiler` object, to be used like `compiler.compile(lhs)`\nfor compiling `lhs`. The `connection` can be used for compiling vendor\nspecific SQL. If `lhs` is not `None`, use it as the processed `lhs` instead of\n`self.lhs`.\n\nBehaves the same way as `process_lhs()`, for the right-hand side.\n\nSupport for using lookups in `QuerySet` annotations, aggregations, and\ndirectly in filters was added.\n\n"}, {"name": "db.models.Lookup.lhs", "path": "ref/models/lookups#django.db.models.Lookup.lhs", "type": "django.db.models", "text": "\nThe left-hand side - what is being looked up. The object typically follows the\nQuery Expression API. It may also be a plain value.\n\n"}, {"name": "db.models.Lookup.lookup_name", "path": "ref/models/lookups#django.db.models.Lookup.lookup_name", "type": "django.db.models", "text": "\nThe name of this lookup, used to identify it on parsing query expressions. It\ncannot contain the string `\"__\"`.\n\n"}, {"name": "db.models.Lookup.process_lhs()", "path": "ref/models/lookups#django.db.models.Lookup.process_lhs", "type": "django.db.models", "text": "\nReturns a tuple `(lhs_string, lhs_params)`, as returned by\n`compiler.compile(lhs)`. This method can be overridden to tune how the `lhs`\nis processed.\n\n`compiler` is an `SQLCompiler` object, to be used like `compiler.compile(lhs)`\nfor compiling `lhs`. The `connection` can be used for compiling vendor\nspecific SQL. If `lhs` is not `None`, use it as the processed `lhs` instead of\n`self.lhs`.\n\n"}, {"name": "db.models.Lookup.process_rhs()", "path": "ref/models/lookups#django.db.models.Lookup.process_rhs", "type": "django.db.models", "text": "\nBehaves the same way as `process_lhs()`, for the right-hand side.\n\n"}, {"name": "db.models.Lookup.rhs", "path": "ref/models/lookups#django.db.models.Lookup.rhs", "type": "django.db.models", "text": "\nThe right-hand side - what `lhs` is being compared against. It can be a plain\nvalue, or something that compiles into SQL, typically an `F()` object or a\n`QuerySet`.\n\n"}, {"name": "db.models.lookups.RegisterLookupMixin", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin", "type": "django.db.models", "text": "\nA mixin that implements the lookup API on a class.\n\nRegisters a new lookup in the class. For example\n`DateField.register_lookup(YearExact)` will register `YearExact` lookup on\n`DateField`. It overrides a lookup that already exists with the same name.\n`lookup_name` will be used for this lookup if provided, otherwise\n`lookup.lookup_name` will be used.\n\nReturns the `Lookup` named `lookup_name` registered in the class. The default\nimplementation looks recursively on all parent classes and checks if any has a\nregistered lookup named `lookup_name`, returning the first match.\n\nReturns a dictionary of each lookup name registered in the class mapped to the\n`Lookup` class.\n\nReturns a `Transform` named `transform_name`. The default implementation looks\nrecursively on all parent classes to check if any has the registered transform\nnamed `transform_name`, returning the first match.\n\n"}, {"name": "db.models.lookups.RegisterLookupMixin.get_lookup()", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin.get_lookup", "type": "django.db.models", "text": "\nReturns the `Lookup` named `lookup_name` registered in the class. The default\nimplementation looks recursively on all parent classes and checks if any has a\nregistered lookup named `lookup_name`, returning the first match.\n\n"}, {"name": "db.models.lookups.RegisterLookupMixin.get_lookups()", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin.get_lookups", "type": "django.db.models", "text": "\nReturns a dictionary of each lookup name registered in the class mapped to the\n`Lookup` class.\n\n"}, {"name": "db.models.lookups.RegisterLookupMixin.get_transform()", "path": "ref/models/lookups#django.db.models.lookups.RegisterLookupMixin.get_transform", "type": "django.db.models", "text": "\nReturns a `Transform` named `transform_name`. The default implementation looks\nrecursively on all parent classes to check if any has the registered transform\nnamed `transform_name`, returning the first match.\n\n"}, {"name": "db.models.Manager", "path": "topics/db/managers#django.db.models.Manager", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Manager.raw()", "path": "topics/db/sql#django.db.models.Manager.raw", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.ManyToManyField", "path": "ref/models/fields#django.db.models.ManyToManyField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.ManyToManyField.db_constraint", "path": "ref/models/fields#django.db.models.ManyToManyField.db_constraint", "type": "django.db.models", "text": "\nControls whether or not constraints should be created in the database for the\nforeign keys in the intermediary table. The default is `True`, and that\u2019s\nalmost certainly what you want; setting this to `False` can be very bad for\ndata integrity. That said, here are some scenarios where you might want to do\nthis:\n\nIt is an error to pass both `db_constraint` and `through`.\n\n"}, {"name": "db.models.ManyToManyField.db_table", "path": "ref/models/fields#django.db.models.ManyToManyField.db_table", "type": "django.db.models", "text": "\nThe name of the table to create for storing the many-to-many data. If this is\nnot provided, Django will assume a default name based upon the names of: the\ntable for the model defining the relationship and the name of the field\nitself.\n\n"}, {"name": "db.models.ManyToManyField.limit_choices_to", "path": "ref/models/fields#django.db.models.ManyToManyField.limit_choices_to", "type": "django.db.models", "text": "\nSame as `ForeignKey.limit_choices_to`.\n\n"}, {"name": "db.models.ManyToManyField.related_name", "path": "ref/models/fields#django.db.models.ManyToManyField.related_name", "type": "django.db.models", "text": "\nSame as `ForeignKey.related_name`.\n\n"}, {"name": "db.models.ManyToManyField.related_query_name", "path": "ref/models/fields#django.db.models.ManyToManyField.related_query_name", "type": "django.db.models", "text": "\nSame as `ForeignKey.related_query_name`.\n\n"}, {"name": "db.models.ManyToManyField.swappable", "path": "ref/models/fields#django.db.models.ManyToManyField.swappable", "type": "django.db.models", "text": "\nControls the migration framework\u2019s reaction if this `ManyToManyField` is\npointing at a swappable model. If it is `True` \\- the default - then if the\n`ManyToManyField` is pointing at a model which matches the current value of\n`settings.AUTH_USER_MODEL` (or another swappable model setting) the\nrelationship will be stored in the migration using a reference to the setting,\nnot to the model directly.\n\nYou only want to override this to be `False` if you are sure your model should\nalways point toward the swapped-in model - for example, if it is a profile\nmodel designed specifically for your custom user model.\n\nIf in doubt, leave it to its default of `True`.\n\n"}, {"name": "db.models.ManyToManyField.symmetrical", "path": "ref/models/fields#django.db.models.ManyToManyField.symmetrical", "type": "django.db.models", "text": "\nOnly used in the definition of ManyToManyFields on self. Consider the\nfollowing model:\n\nWhen Django processes this model, it identifies that it has a\n`ManyToManyField` on itself, and as a result, it doesn\u2019t add a `person_set`\nattribute to the `Person` class. Instead, the `ManyToManyField` is assumed to\nbe symmetrical \u2013 that is, if I am your friend, then you are my friend.\n\nIf you do not want symmetry in many-to-many relationships with `self`, set\n`symmetrical` to `False`. This will force Django to add the descriptor for the\nreverse relationship, allowing `ManyToManyField` relationships to be non-\nsymmetrical.\n\n"}, {"name": "db.models.ManyToManyField.through", "path": "ref/models/fields#django.db.models.ManyToManyField.through", "type": "django.db.models", "text": "\nDjango will automatically generate a table to manage many-to-many\nrelationships. However, if you want to manually specify the intermediary\ntable, you can use the `through` option to specify the Django model that\nrepresents the intermediate table that you want to use.\n\nThe most common use for this option is when you want to associate extra data\nwith a many-to-many relationship.\n\nNote\n\nIf you don\u2019t want multiple associations between the same instances, add a\n`UniqueConstraint` including the from and to fields. Django\u2019s automatically\ngenerated many-to-many tables include such a constraint.\n\nNote\n\nRecursive relationships using an intermediary model can\u2019t determine the\nreverse accessors names, as they would be the same. You need to set a\n`related_name` to at least one of them. If you\u2019d prefer Django not to create a\nbackwards relation, set `related_name` to `'+'`.\n\nIf you don\u2019t specify an explicit `through` model, there is still an implicit\n`through` model class you can use to directly access the table created to hold\nthe association. It has three fields to link the models.\n\nIf the source and target models differ, the following fields are generated:\n\nIf the `ManyToManyField` points from and to the same model, the following\nfields are generated:\n\nThis class can be used to query associated records for a given model instance\nlike a normal model:\n\n"}, {"name": "db.models.ManyToManyField.through_fields", "path": "ref/models/fields#django.db.models.ManyToManyField.through_fields", "type": "django.db.models", "text": "\nOnly used when a custom intermediary model is specified. Django will normally\ndetermine which fields of the intermediary model to use in order to establish\na many-to-many relationship automatically. However, consider the following\nmodels:\n\n`Membership` has two foreign keys to `Person` (`person` and `inviter`), which\nmakes the relationship ambiguous and Django can\u2019t know which one to use. In\nthis case, you must explicitly specify which foreign keys Django should use\nusing `through_fields`, as in the example above.\n\n`through_fields` accepts a 2-tuple `('field1', 'field2')`, where `field1` is\nthe name of the foreign key to the model the `ManyToManyField` is defined on\n(`group` in this case), and `field2` the name of the foreign key to the target\nmodel (`person` in this case).\n\nWhen you have more than one foreign key on an intermediary model to any (or\neven both) of the models participating in a many-to-many relationship, you\nmust specify `through_fields`. This also applies to recursive relationships\nwhen an intermediary model is used and there are more than two foreign keys to\nthe model, or you want to explicitly specify which two Django should use.\n\n"}, {"name": "db.models.Max", "path": "ref/models/querysets#django.db.models.Max", "type": "django.db.models", "text": "\nReturns the maximum value of the given expression.\n\n"}, {"name": "db.models.Min", "path": "ref/models/querysets#django.db.models.Min", "type": "django.db.models", "text": "\nReturns the minimum value of the given expression.\n\n"}, {"name": "db.models.Model", "path": "ref/models/instances#django.db.models.Model", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.__eq__()", "path": "ref/models/instances#django.db.models.Model.__eq__", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.__hash__()", "path": "ref/models/instances#django.db.models.Model.__hash__", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.__str__()", "path": "ref/models/instances#django.db.models.Model.__str__", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model._base_manager", "path": "topics/db/managers#django.db.models.Model._base_manager", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model._default_manager", "path": "topics/db/managers#django.db.models.Model._default_manager", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model._state", "path": "ref/models/instances#django.db.models.Model._state", "type": "django.db.models", "text": "\nThe `_state` attribute refers to a `ModelState` object that tracks the\nlifecycle of the model instance.\n\nThe `ModelState` object has two attributes: `adding`, a flag which is `True`\nif the model has not been saved to the database yet, and `db`, a string\nreferring to the database alias the instance was loaded from or saved to.\n\nNewly instantiated instances have `adding=True` and `db=None`, since they are\nyet to be saved. Instances fetched from a `QuerySet` will have `adding=False`\nand `db` set to the alias of the associated database.\n\n"}, {"name": "db.models.Model.clean()", "path": "ref/models/instances#django.db.models.Model.clean", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.clean_fields()", "path": "ref/models/instances#django.db.models.Model.clean_fields", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.delete()", "path": "ref/models/instances#django.db.models.Model.delete", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.full_clean()", "path": "ref/models/instances#django.db.models.Model.full_clean", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.get_absolute_url()", "path": "ref/models/instances#django.db.models.Model.get_absolute_url", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.get_deferred_fields()", "path": "ref/models/instances#django.db.models.Model.get_deferred_fields", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.get_FOO_display()", "path": "ref/models/instances#django.db.models.Model.get_FOO_display", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.get_next_by_FOO()", "path": "ref/models/instances#django.db.models.Model.get_next_by_FOO", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.get_previous_by_FOO()", "path": "ref/models/instances#django.db.models.Model.get_previous_by_FOO", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.objects", "path": "ref/models/class#django.db.models.Model.objects", "type": "django.db.models", "text": "\nEach non-abstract `Model` class must have a `Manager` instance added to it.\nDjango ensures that in your model class you have at least a default `Manager`\nspecified. If you don\u2019t add your own `Manager`, Django will add an attribute\n`objects` containing default `Manager` instance. If you add your own `Manager`\ninstance attribute, the default one does not appear. Consider the following\nexample:\n\nFor more details on model managers see Managers and Retrieving objects.\n\n"}, {"name": "db.models.Model.pk", "path": "ref/models/instances#django.db.models.Model.pk", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.refresh_from_db()", "path": "ref/models/instances#django.db.models.Model.refresh_from_db", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.save()", "path": "ref/models/instances#django.db.models.Model.save", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Model.validate_unique()", "path": "ref/models/instances#django.db.models.Model.validate_unique", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.OneToOneField", "path": "ref/models/fields#django.db.models.OneToOneField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.OneToOneField.parent_link", "path": "ref/models/fields#django.db.models.OneToOneField.parent_link", "type": "django.db.models", "text": "\nWhen `True` and used in a model which inherits from another concrete model,\nindicates that this field should be used as the link back to the parent class,\nrather than the extra `OneToOneField` which would normally be implicitly\ncreated by subclassing.\n\n"}, {"name": "db.models.Options.abstract", "path": "ref/models/options#django.db.models.Options.abstract", "type": "django.db.models", "text": "\nIf `abstract = True`, this model will be an abstract base class.\n\n"}, {"name": "db.models.Options.app_label", "path": "ref/models/options#django.db.models.Options.app_label", "type": "django.db.models", "text": "\nIf a model is defined outside of an application in `INSTALLED_APPS`, it must\ndeclare which app it belongs to:\n\nIf you want to represent a model with the format `app_label.object_name` or\n`app_label.model_name` you can use `model._meta.label` or\n`model._meta.label_lower` respectively.\n\n"}, {"name": "db.models.Options.base_manager_name", "path": "ref/models/options#django.db.models.Options.base_manager_name", "type": "django.db.models", "text": "\nThe attribute name of the manager, for example, `'objects'`, to use for the\nmodel\u2019s `_base_manager`.\n\n"}, {"name": "db.models.Options.constraints", "path": "ref/models/options#django.db.models.Options.constraints", "type": "django.db.models", "text": "\nA list of constraints that you want to define on the model:\n\n"}, {"name": "db.models.Options.db_table", "path": "ref/models/options#django.db.models.Options.db_table", "type": "django.db.models", "text": "\nThe name of the database table to use for the model:\n\n"}, {"name": "db.models.Options.db_tablespace", "path": "ref/models/options#django.db.models.Options.db_tablespace", "type": "django.db.models", "text": "\nThe name of the database tablespace to use for this model. The default is the\nproject\u2019s `DEFAULT_TABLESPACE` setting, if set. If the backend doesn\u2019t support\ntablespaces, this option is ignored.\n\n"}, {"name": "db.models.Options.default_manager_name", "path": "ref/models/options#django.db.models.Options.default_manager_name", "type": "django.db.models", "text": "\nThe name of the manager to use for the model\u2019s `_default_manager`.\n\n"}, {"name": "db.models.Options.default_permissions", "path": "ref/models/options#django.db.models.Options.default_permissions", "type": "django.db.models", "text": "\nDefaults to `('add', 'change', 'delete', 'view')`. You may customize this\nlist, for example, by setting this to an empty list if your app doesn\u2019t\nrequire any of the default permissions. It must be specified on the model\nbefore the model is created by `migrate` in order to prevent any omitted\npermissions from being created.\n\n"}, {"name": "db.models.Options.default_related_name", "path": "ref/models/options#django.db.models.Options.default_related_name", "type": "django.db.models", "text": "\nThe name that will be used by default for the relation from a related object\nback to this one. The default is `<model_name>_set`.\n\nThis option also sets `related_query_name`.\n\nAs the reverse name for a field should be unique, be careful if you intend to\nsubclass your model. To work around name collisions, part of the name should\ncontain `'%(app_label)s'` and `'%(model_name)s'`, which are replaced\nrespectively by the name of the application the model is in, and the name of\nthe model, both lowercased. See the paragraph on related names for abstract\nmodels.\n\n"}, {"name": "db.models.Options.get_latest_by", "path": "ref/models/options#django.db.models.Options.get_latest_by", "type": "django.db.models", "text": "\nThe name of a field or a list of field names in the model, typically\n`DateField`, `DateTimeField`, or `IntegerField`. This specifies the default\nfield(s) to use in your model `Manager`\u2019s `latest()` and `earliest()` methods.\n\nExample:\n\nSee the `latest()` docs for more.\n\n"}, {"name": "db.models.Options.index_together", "path": "ref/models/options#django.db.models.Options.index_together", "type": "django.db.models", "text": "\nUse the `indexes` option instead.\n\nThe newer `indexes` option provides more functionality than `index_together`.\n`index_together` may be deprecated in the future.\n\nSets of field names that, taken together, are indexed:\n\nThis list of fields will be indexed together (i.e. the appropriate `CREATE\nINDEX` statement will be issued.)\n\nFor convenience, `index_together` can be a single list when dealing with a\nsingle set of fields:\n\n"}, {"name": "db.models.Options.indexes", "path": "ref/models/options#django.db.models.Options.indexes", "type": "django.db.models", "text": "\nA list of indexes that you want to define on the model:\n\n"}, {"name": "db.models.Options.label", "path": "ref/models/options#django.db.models.Options.label", "type": "django.db.models", "text": "\nRepresentation of the object, returns `app_label.object_name`, e.g.\n`'polls.Question'`.\n\n"}, {"name": "db.models.Options.label_lower", "path": "ref/models/options#django.db.models.Options.label_lower", "type": "django.db.models", "text": "\nRepresentation of the model, returns `app_label.model_name`, e.g.\n`'polls.question'`.\n\n"}, {"name": "db.models.Options.managed", "path": "ref/models/options#django.db.models.Options.managed", "type": "django.db.models", "text": "\nDefaults to `True`, meaning Django will create the appropriate database tables\nin `migrate` or as part of migrations and remove them as part of a `flush`\nmanagement command. That is, Django manages the database tables\u2019 lifecycles.\n\nIf `False`, no database table creation, modification, or deletion operations\nwill be performed for this model. This is useful if the model represents an\nexisting table or a database view that has been created by some other means.\nThis is the only difference when `managed=False`. All other aspects of model\nhandling are exactly the same as normal. This includes\n\nIf a model with `managed=False` contains a `ManyToManyField` that points to\nanother unmanaged model, then the intermediate table for the many-to-many join\nwill also not be created. However, the intermediary table between one managed\nand one unmanaged model will be created.\n\nIf you need to change this default behavior, create the intermediary table as\nan explicit model (with `managed` set as needed) and use the\n`ManyToManyField.through` attribute to make the relation use your custom\nmodel.\n\nFor tests involving models with `managed=False`, it\u2019s up to you to ensure the\ncorrect tables are created as part of the test setup.\n\nIf you\u2019re interested in changing the Python-level behavior of a model class,\nyou could use `managed=False` and create a copy of an existing model. However,\nthere\u2019s a better approach for that situation: Proxy models.\n\n"}, {"name": "db.models.options.Options", "path": "ref/models/meta#django.db.models.options.Options", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.options.Options.get_field()", "path": "ref/models/meta#django.db.models.options.Options.get_field", "type": "django.db.models", "text": "\nReturns the field instance given a name of a field.\n\n`field_name` can be the name of a field on the model, a field on an abstract\nor inherited model, or a field defined on another model that points to the\nmodel. In the latter case, the `field_name` will be (in order of preference)\nthe `related_query_name` set by the user, the `related_name` set by the user,\nor the name automatically generated by Django.\n\n`Hidden fields` cannot be retrieved by name.\n\nIf a field with the given name is not found a `FieldDoesNotExist` exception\nwill be raised.\n\n"}, {"name": "db.models.options.Options.get_fields()", "path": "ref/models/meta#django.db.models.options.Options.get_fields", "type": "django.db.models", "text": "\nReturns a tuple of fields associated with a model. `get_fields()` accepts two\nparameters that can be used to control which fields are returned:\n\n"}, {"name": "db.models.Options.order_with_respect_to", "path": "ref/models/options#django.db.models.Options.order_with_respect_to", "type": "django.db.models", "text": "\nMakes this object orderable with respect to the given field, usually a\n`ForeignKey`. This can be used to make related objects orderable with respect\nto a parent object. For example, if an `Answer` relates to a `Question`\nobject, and a question has more than one answer, and the order of answers\nmatters, you\u2019d do this:\n\nWhen `order_with_respect_to` is set, two additional methods are provided to\nretrieve and to set the order of the related objects: `get_RELATED_order()`\nand `set_RELATED_order()`, where `RELATED` is the lowercased model name. For\nexample, assuming that a `Question` object has multiple related `Answer`\nobjects, the list returned contains the primary keys of the related `Answer`\nobjects:\n\nThe order of a `Question` object\u2019s related `Answer` objects can be set by\npassing in a list of `Answer` primary keys:\n\nThe related objects also get two methods, `get_next_in_order()` and\n`get_previous_in_order()`, which can be used to access those objects in their\nproper order. Assuming the `Answer` objects are ordered by `id`:\n\n"}, {"name": "db.models.Options.ordering", "path": "ref/models/options#django.db.models.Options.ordering", "type": "django.db.models", "text": "\nThe default ordering for the object, for use when obtaining lists of objects:\n\nThis is a tuple or list of strings and/or query expressions. Each string is a\nfield name with an optional \u201c-\u201d prefix, which indicates descending order.\nFields without a leading \u201c-\u201d will be ordered ascending. Use the string \u201c?\u201d to\norder randomly.\n\nFor example, to order by a `pub_date` field ascending, use this:\n\nTo order by `pub_date` descending, use this:\n\nTo order by `pub_date` descending, then by `author` ascending, use this:\n\nYou can also use query expressions. To order by `author` ascending and make\nnull values sort last, use this:\n\n"}, {"name": "db.models.Options.permissions", "path": "ref/models/options#django.db.models.Options.permissions", "type": "django.db.models", "text": "\nExtra permissions to enter into the permissions table when creating this\nobject. Add, change, delete, and view permissions are automatically created\nfor each model. This example specifies an extra permission,\n`can_deliver_pizzas`:\n\nThis is a list or tuple of 2-tuples in the format `(permission_code,\nhuman_readable_permission_name)`.\n\n"}, {"name": "db.models.Options.proxy", "path": "ref/models/options#django.db.models.Options.proxy", "type": "django.db.models", "text": "\nIf `proxy = True`, a model which subclasses another model will be treated as a\nproxy model.\n\n"}, {"name": "db.models.Options.required_db_features", "path": "ref/models/options#django.db.models.Options.required_db_features", "type": "django.db.models", "text": "\nList of database features that the current connection should have so that the\nmodel is considered during the migration phase. For example, if you set this\nlist to `['gis_enabled']`, the model will only be synchronized on GIS-enabled\ndatabases. It\u2019s also useful to skip some models when testing with several\ndatabase backends. Avoid relations between models that may or may not be\ncreated as the ORM doesn\u2019t handle this.\n\n"}, {"name": "db.models.Options.required_db_vendor", "path": "ref/models/options#django.db.models.Options.required_db_vendor", "type": "django.db.models", "text": "\nName of a supported database vendor that this model is specific to. Current\nbuilt-in vendor names are: `sqlite`, `postgresql`, `mysql`, `oracle`. If this\nattribute is not empty and the current connection vendor doesn\u2019t match it, the\nmodel will not be synchronized.\n\n"}, {"name": "db.models.Options.select_on_save", "path": "ref/models/options#django.db.models.Options.select_on_save", "type": "django.db.models", "text": "\nDetermines if Django will use the pre-1.6 `django.db.models.Model.save()`\nalgorithm. The old algorithm uses `SELECT` to determine if there is an\nexisting row to be updated. The new algorithm tries an `UPDATE` directly. In\nsome rare cases the `UPDATE` of an existing row isn\u2019t visible to Django. An\nexample is the PostgreSQL `ON UPDATE` trigger which returns `NULL`. In such\ncases the new algorithm will end up doing an `INSERT` even when a row exists\nin the database.\n\nUsually there is no need to set this attribute. The default is `False`.\n\nSee `django.db.models.Model.save()` for more about the old and new saving\nalgorithm.\n\n"}, {"name": "db.models.Options.unique_together", "path": "ref/models/options#django.db.models.Options.unique_together", "type": "django.db.models", "text": "\nUse `UniqueConstraint` with the `constraints` option instead.\n\n`UniqueConstraint` provides more functionality than `unique_together`.\n`unique_together` may be deprecated in the future.\n\nSets of field names that, taken together, must be unique:\n\nThis is a list of lists that must be unique when considered together. It\u2019s\nused in the Django admin and is enforced at the database level (i.e., the\nappropriate `UNIQUE` statements are included in the `CREATE TABLE` statement).\n\nFor convenience, `unique_together` can be a single list when dealing with a\nsingle set of fields:\n\nA `ManyToManyField` cannot be included in unique_together. (It\u2019s not clear\nwhat that would even mean!) If you need to validate uniqueness related to a\n`ManyToManyField`, try using a signal or an explicit `through` model.\n\nThe `ValidationError` raised during model validation when the constraint is\nviolated has the `unique_together` error code.\n\n"}, {"name": "db.models.Options.verbose_name", "path": "ref/models/options#django.db.models.Options.verbose_name", "type": "django.db.models", "text": "\nA human-readable name for the object, singular:\n\nIf this isn\u2019t given, Django will use a munged version of the class name:\n`CamelCase` becomes `camel case`.\n\n"}, {"name": "db.models.Options.verbose_name_plural", "path": "ref/models/options#django.db.models.Options.verbose_name_plural", "type": "django.db.models", "text": "\nThe plural name for the object:\n\nIf this isn\u2019t given, Django will use `verbose_name` \\+ `\"s\"`.\n\n"}, {"name": "db.models.OuterRef", "path": "ref/models/expressions#django.db.models.OuterRef", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.output_field", "path": "ref/models/lookups#django.db.models.output_field", "type": "django.db.models", "text": "\nDefines the type of class returned by the `get_lookup()` method. It must be a\n`Field` instance.\n\n"}, {"name": "db.models.PositiveBigIntegerField", "path": "ref/models/fields#django.db.models.PositiveBigIntegerField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.PositiveIntegerField", "path": "ref/models/fields#django.db.models.PositiveIntegerField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.PositiveSmallIntegerField", "path": "ref/models/fields#django.db.models.PositiveSmallIntegerField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Prefetch", "path": "ref/models/querysets#django.db.models.Prefetch", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.prefetch_related_objects()", "path": "ref/models/querysets#django.db.models.prefetch_related_objects", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.PROTECT", "path": "ref/models/fields#django.db.models.PROTECT", "type": "django.db.models", "text": "\nPrevent deletion of the referenced object by raising `ProtectedError`, a\nsubclass of `django.db.IntegrityError`.\n\n"}, {"name": "db.models.Q", "path": "ref/models/querysets#django.db.models.Q", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet", "path": "ref/models/querysets#django.db.models.query.QuerySet", "type": "django.db.models", "text": "\nUsually when you\u2019ll interact with a `QuerySet` you\u2019ll use it by chaining\nfilters. To make this work, most `QuerySet` methods return new querysets.\nThese methods are covered in detail later in this section.\n\nThe `QuerySet` class has two public attributes you can use for introspection:\n\n`True` if the `QuerySet` is ordered \u2014 i.e. has an `order_by()` clause or a\ndefault ordering on the model. `False` otherwise.\n\nThe database that will be used if this query is executed now.\n\nNote\n\nThe `query` parameter to `QuerySet` exists so that specialized query\nsubclasses can reconstruct internal query state. The value of the parameter is\nan opaque representation of that query state and is not part of a public API.\n\n"}, {"name": "db.models.query.QuerySet.aggregate()", "path": "ref/models/querysets#django.db.models.query.QuerySet.aggregate", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.alias()", "path": "ref/models/querysets#django.db.models.query.QuerySet.alias", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.all()", "path": "ref/models/querysets#django.db.models.query.QuerySet.all", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.annotate()", "path": "ref/models/querysets#django.db.models.query.QuerySet.annotate", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.bulk_create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.bulk_create", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.bulk_update()", "path": "ref/models/querysets#django.db.models.query.QuerySet.bulk_update", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.contains()", "path": "ref/models/querysets#django.db.models.query.QuerySet.contains", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.count()", "path": "ref/models/querysets#django.db.models.query.QuerySet.count", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.create", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.dates()", "path": "ref/models/querysets#django.db.models.query.QuerySet.dates", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.datetimes()", "path": "ref/models/querysets#django.db.models.query.QuerySet.datetimes", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.db", "path": "ref/models/querysets#django.db.models.query.QuerySet.db", "type": "django.db.models", "text": "\nThe database that will be used if this query is executed now.\n\n"}, {"name": "db.models.query.QuerySet.defer()", "path": "ref/models/querysets#django.db.models.query.QuerySet.defer", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.delete()", "path": "ref/models/querysets#django.db.models.query.QuerySet.delete", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.difference()", "path": "ref/models/querysets#django.db.models.query.QuerySet.difference", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.distinct()", "path": "ref/models/querysets#django.db.models.query.QuerySet.distinct", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.earliest()", "path": "ref/models/querysets#django.db.models.query.QuerySet.earliest", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.exclude()", "path": "ref/models/querysets#django.db.models.query.QuerySet.exclude", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.exists()", "path": "ref/models/querysets#django.db.models.query.QuerySet.exists", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.explain()", "path": "ref/models/querysets#django.db.models.query.QuerySet.explain", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.extra()", "path": "ref/models/querysets#django.db.models.query.QuerySet.extra", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.filter()", "path": "ref/models/querysets#django.db.models.query.QuerySet.filter", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.first()", "path": "ref/models/querysets#django.db.models.query.QuerySet.first", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.get()", "path": "ref/models/querysets#django.db.models.query.QuerySet.get", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.get_or_create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.get_or_create", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.in_bulk()", "path": "ref/models/querysets#django.db.models.query.QuerySet.in_bulk", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.intersection()", "path": "ref/models/querysets#django.db.models.query.QuerySet.intersection", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.iterator()", "path": "ref/models/querysets#django.db.models.query.QuerySet.iterator", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.last()", "path": "ref/models/querysets#django.db.models.query.QuerySet.last", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.latest()", "path": "ref/models/querysets#django.db.models.query.QuerySet.latest", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.none()", "path": "ref/models/querysets#django.db.models.query.QuerySet.none", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.only()", "path": "ref/models/querysets#django.db.models.query.QuerySet.only", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.order_by()", "path": "ref/models/querysets#django.db.models.query.QuerySet.order_by", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.ordered", "path": "ref/models/querysets#django.db.models.query.QuerySet.ordered", "type": "django.db.models", "text": "\n`True` if the `QuerySet` is ordered \u2014 i.e. has an `order_by()` clause or a\ndefault ordering on the model. `False` otherwise.\n\n"}, {"name": "db.models.query.QuerySet.prefetch_related()", "path": "ref/models/querysets#django.db.models.query.QuerySet.prefetch_related", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.raw()", "path": "ref/models/querysets#django.db.models.query.QuerySet.raw", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.reverse()", "path": "ref/models/querysets#django.db.models.query.QuerySet.reverse", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.select_for_update()", "path": "ref/models/querysets#django.db.models.query.QuerySet.select_for_update", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.select_related()", "path": "ref/models/querysets#django.db.models.query.QuerySet.select_related", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.union()", "path": "ref/models/querysets#django.db.models.query.QuerySet.union", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.update()", "path": "ref/models/querysets#django.db.models.query.QuerySet.update", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.update_or_create()", "path": "ref/models/querysets#django.db.models.query.QuerySet.update_or_create", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.using()", "path": "ref/models/querysets#django.db.models.query.QuerySet.using", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.values()", "path": "ref/models/querysets#django.db.models.query.QuerySet.values", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.query.QuerySet.values_list()", "path": "ref/models/querysets#django.db.models.query.QuerySet.values_list", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.RESTRICT", "path": "ref/models/fields#django.db.models.RESTRICT", "type": "django.db.models", "text": "\nPrevent deletion of the referenced object by raising `RestrictedError` (a\nsubclass of `django.db.IntegrityError`). Unlike `PROTECT`, deletion of the\nreferenced object is allowed if it also references a different object that is\nbeing deleted in the same operation, but via a `CASCADE` relationship.\n\nConsider this set of models:\n\n`Artist` can be deleted even if that implies deleting an `Album` which is\nreferenced by a `Song`, because `Song` also references `Artist` itself through\na cascading relationship. For example:\n\n"}, {"name": "db.models.SET()", "path": "ref/models/fields#django.db.models.SET", "type": "django.db.models", "text": "\nSet the `ForeignKey` to the value passed to `SET()`, or if a callable is\npassed in, the result of calling it. In most cases, passing a callable will be\nnecessary to avoid executing queries at the time your models.py is imported:\n\n"}, {"name": "db.models.SET_DEFAULT", "path": "ref/models/fields#django.db.models.SET_DEFAULT", "type": "django.db.models", "text": "\nSet the `ForeignKey` to its default value; a default for the `ForeignKey` must\nbe set.\n\n"}, {"name": "db.models.SET_NULL", "path": "ref/models/fields#django.db.models.SET_NULL", "type": "django.db.models", "text": "\nSet the `ForeignKey` null; this is only possible if `null` is `True`.\n\n"}, {"name": "db.models.signals.class_prepared", "path": "ref/signals#django.db.models.signals.class_prepared", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.signals.m2m_changed", "path": "ref/signals#django.db.models.signals.m2m_changed", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.signals.post_delete", "path": "ref/signals#django.db.models.signals.post_delete", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.signals.post_init", "path": "ref/signals#django.db.models.signals.post_init", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.signals.post_migrate", "path": "ref/signals#django.db.models.signals.post_migrate", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.signals.post_save", "path": "ref/signals#django.db.models.signals.post_save", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.signals.pre_delete", "path": "ref/signals#django.db.models.signals.pre_delete", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.signals.pre_init", "path": "ref/signals#django.db.models.signals.pre_init", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.signals.pre_migrate", "path": "ref/signals#django.db.models.signals.pre_migrate", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.signals.pre_save", "path": "ref/signals#django.db.models.signals.pre_save", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.SlugField", "path": "ref/models/fields#django.db.models.SlugField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.SlugField.allow_unicode", "path": "ref/models/fields#django.db.models.SlugField.allow_unicode", "type": "django.db.models", "text": "\nIf `True`, the field accepts Unicode letters in addition to ASCII letters.\nDefaults to `False`.\n\n"}, {"name": "db.models.SmallAutoField", "path": "ref/models/fields#django.db.models.SmallAutoField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.SmallIntegerField", "path": "ref/models/fields#django.db.models.SmallIntegerField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.StdDev", "path": "ref/models/querysets#django.db.models.StdDev", "type": "django.db.models", "text": "\nReturns the standard deviation of the data in the provided expression.\n\nHas one optional argument:\n\nBy default, `StdDev` returns the population standard deviation. However, if\n`sample=True`, the return value will be the sample standard deviation.\n\n"}, {"name": "db.models.StdDev.sample", "path": "ref/models/querysets#django.db.models.StdDev.sample", "type": "django.db.models", "text": "\nBy default, `StdDev` returns the population standard deviation. However, if\n`sample=True`, the return value will be the sample standard deviation.\n\n"}, {"name": "db.models.Subquery", "path": "ref/models/expressions#django.db.models.Subquery", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Sum", "path": "ref/models/querysets#django.db.models.Sum", "type": "django.db.models", "text": "\nComputes the sum of all values of the given expression.\n\nHas one optional argument:\n\nIf `distinct=True`, `Sum` returns the sum of unique values. This is the SQL\nequivalent of `SUM(DISTINCT <field>)`. The default value is `False`.\n\n"}, {"name": "db.models.Sum.distinct", "path": "ref/models/querysets#django.db.models.Sum.distinct", "type": "django.db.models", "text": "\nIf `distinct=True`, `Sum` returns the sum of unique values. This is the SQL\nequivalent of `SUM(DISTINCT <field>)`. The default value is `False`.\n\n"}, {"name": "db.models.TextField", "path": "ref/models/fields#django.db.models.TextField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.TextField.db_collation", "path": "ref/models/fields#django.db.models.TextField.db_collation", "type": "django.db.models", "text": "\nThe database collation name of the field.\n\nNote\n\nCollation names are not standardized. As such, this will not be portable\nacross multiple database backends.\n\nOracle\n\nOracle does not support collations for a `TextField`.\n\n"}, {"name": "db.models.TimeField", "path": "ref/models/fields#django.db.models.TimeField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Transform", "path": "ref/models/lookups#django.db.models.Transform", "type": "django.db.models", "text": "\nA `Transform` is a generic class to implement field transformations. A\nprominent example is `__year` that transforms a `DateField` into a\n`IntegerField`.\n\nThe notation to use a `Transform` in a lookup expression is\n`<expression>__<transformation>` (e.g. `date__year`).\n\nThis class follows the Query Expression API, which implies that you can use\n`<expression>__<transform1>__<transform2>`. It\u2019s a specialized Func()\nexpression that only accepts one argument. It can also be used on the right\nhand side of a filter or directly as an annotation.\n\nA boolean indicating whether this transformation should apply to both `lhs`\nand `rhs`. Bilateral transformations will be applied to `rhs` in the same\norder as they appear in the lookup expression. By default it is set to\n`False`. For example usage, see How to write custom lookups.\n\nThe left-hand side - what is being transformed. It must follow the Query\nExpression API.\n\nThe name of the lookup, used for identifying it on parsing query expressions.\nIt cannot contain the string `\"__\"`.\n\nDefines the class this transformation outputs. It must be a `Field` instance.\nBy default is the same as its `lhs.output_field`.\n\n"}, {"name": "db.models.Transform.bilateral", "path": "ref/models/lookups#django.db.models.Transform.bilateral", "type": "django.db.models", "text": "\nA boolean indicating whether this transformation should apply to both `lhs`\nand `rhs`. Bilateral transformations will be applied to `rhs` in the same\norder as they appear in the lookup expression. By default it is set to\n`False`. For example usage, see How to write custom lookups.\n\n"}, {"name": "db.models.Transform.lhs", "path": "ref/models/lookups#django.db.models.Transform.lhs", "type": "django.db.models", "text": "\nThe left-hand side - what is being transformed. It must follow the Query\nExpression API.\n\n"}, {"name": "db.models.Transform.lookup_name", "path": "ref/models/lookups#django.db.models.Transform.lookup_name", "type": "django.db.models", "text": "\nThe name of the lookup, used for identifying it on parsing query expressions.\nIt cannot contain the string `\"__\"`.\n\n"}, {"name": "db.models.Transform.output_field", "path": "ref/models/lookups#django.db.models.Transform.output_field", "type": "django.db.models", "text": "\nDefines the class this transformation outputs. It must be a `Field` instance.\nBy default is the same as its `lhs.output_field`.\n\n"}, {"name": "db.models.UniqueConstraint", "path": "ref/models/constraints#django.db.models.UniqueConstraint", "type": "django.db.models", "text": "\nCreates a unique constraint in the database.\n\n"}, {"name": "db.models.UniqueConstraint.condition", "path": "ref/models/constraints#django.db.models.UniqueConstraint.condition", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.UniqueConstraint.deferrable", "path": "ref/models/constraints#django.db.models.UniqueConstraint.deferrable", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.UniqueConstraint.expressions", "path": "ref/models/constraints#django.db.models.UniqueConstraint.expressions", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.UniqueConstraint.fields", "path": "ref/models/constraints#django.db.models.UniqueConstraint.fields", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.UniqueConstraint.include", "path": "ref/models/constraints#django.db.models.UniqueConstraint.include", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.UniqueConstraint.name", "path": "ref/models/constraints#django.db.models.UniqueConstraint.name", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.UniqueConstraint.opclasses", "path": "ref/models/constraints#django.db.models.UniqueConstraint.opclasses", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.URLField", "path": "ref/models/fields#django.db.models.URLField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.UUIDField", "path": "ref/models/fields#django.db.models.UUIDField", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Value", "path": "ref/models/expressions#django.db.models.Value", "type": "django.db.models", "text": "\n\n"}, {"name": "db.models.Variance", "path": "ref/models/querysets#django.db.models.Variance", "type": "django.db.models", "text": "\nReturns the variance of the data in the provided expression.\n\nHas one optional argument:\n\nBy default, `Variance` returns the population variance. However, if\n`sample=True`, the return value will be the sample variance.\n\n"}, {"name": "db.models.Variance.sample", "path": "ref/models/querysets#django.db.models.Variance.sample", "type": "django.db.models", "text": "\nBy default, `Variance` returns the population variance. However, if\n`sample=True`, the return value will be the sample variance.\n\n"}, {"name": "db.transaction.atomic()", "path": "topics/db/transactions#django.db.transaction.atomic", "type": "django.db.transaction", "text": "\nAtomicity is the defining property of database transactions. `atomic` allows\nus to create a block of code within which the atomicity on the database is\nguaranteed. If the block of code is successfully completed, the changes are\ncommitted to the database. If there is an exception, the changes are rolled\nback.\n\n`atomic` blocks can be nested. In this case, when an inner block completes\nsuccessfully, its effects can still be rolled back if an exception is raised\nin the outer block at a later point.\n\nIt is sometimes useful to ensure an `atomic` block is always the outermost\n`atomic` block, ensuring that any database changes are committed when the\nblock is exited without errors. This is known as durability and can be\nachieved by setting `durable=True`. If the `atomic` block is nested within\nanother it raises a `RuntimeError`.\n\n`atomic` is usable both as a decorator:\n\nand as a context manager:\n\nWrapping `atomic` in a try/except block allows for natural handling of\nintegrity errors:\n\nIn this example, even if `generate_relationships()` causes a database error by\nbreaking an integrity constraint, you can execute queries in `add_children()`,\nand the changes from `create_parent()` are still there and bound to the same\ntransaction. Note that any operations attempted in `generate_relationships()`\nwill already have been rolled back safely when `handle_exception()` is called,\nso the exception handler can also operate on the database if necessary.\n\nAvoid catching exceptions inside `atomic`!\n\nWhen exiting an `atomic` block, Django looks at whether it\u2019s exited normally\nor with an exception to determine whether to commit or roll back. If you catch\nand handle exceptions inside an `atomic` block, you may hide from Django the\nfact that a problem has happened. This can result in unexpected behavior.\n\nThis is mostly a concern for `DatabaseError` and its subclasses such as\n`IntegrityError`. After such an error, the transaction is broken and Django\nwill perform a rollback at the end of the `atomic` block. If you attempt to\nrun database queries before the rollback happens, Django will raise a\n`TransactionManagementError`. You may also encounter this behavior when an\nORM-related signal handler raises an exception.\n\nThe correct way to catch database errors is around an `atomic` block as shown\nabove. If necessary, add an extra `atomic` block for this purpose. This\npattern has another advantage: it delimits explicitly which operations will be\nrolled back if an exception occurs.\n\nIf you catch exceptions raised by raw SQL queries, Django\u2019s behavior is\nunspecified and database-dependent.\n\nYou may need to manually revert model state when rolling back a transaction.\n\nThe values of a model\u2019s fields won\u2019t be reverted when a transaction rollback\nhappens. This could lead to an inconsistent model state unless you manually\nrestore the original field values.\n\nFor example, given `MyModel` with an `active` field, this snippet ensures that\nthe `if obj.active` check at the end uses the correct value if updating\n`active` to `True` fails in the transaction:\n\nIn order to guarantee atomicity, `atomic` disables some APIs. Attempting to\ncommit, roll back, or change the autocommit state of the database connection\nwithin an `atomic` block will raise an exception.\n\n`atomic` takes a `using` argument which should be the name of a database. If\nthis argument isn\u2019t provided, Django uses the `\"default\"` database.\n\nUnder the hood, Django\u2019s transaction management code:\n\nYou can disable the creation of savepoints for inner blocks by setting the\n`savepoint` argument to `False`. If an exception occurs, Django will perform\nthe rollback when exiting the first parent block with a savepoint if there is\none, and the outermost block otherwise. Atomicity is still guaranteed by the\nouter transaction. This option should only be used if the overhead of\nsavepoints is noticeable. It has the drawback of breaking the error handling\ndescribed above.\n\nYou may use `atomic` when autocommit is turned off. It will only use\nsavepoints, even for the outermost block.\n\n"}, {"name": "db.transaction.clean_savepoints()", "path": "topics/db/transactions#django.db.transaction.clean_savepoints", "type": "django.db.transaction", "text": "\nResets the counter used to generate unique savepoint IDs.\n\n"}, {"name": "db.transaction.commit()", "path": "topics/db/transactions#django.db.transaction.commit", "type": "django.db.transaction", "text": "\n\n"}, {"name": "db.transaction.get_autocommit()", "path": "topics/db/transactions#django.db.transaction.get_autocommit", "type": "django.db.transaction", "text": "\n\n"}, {"name": "db.transaction.get_rollback()", "path": "topics/db/transactions#django.db.transaction.get_rollback", "type": "django.db.transaction", "text": "\n\n"}, {"name": "db.transaction.non_atomic_requests()", "path": "topics/db/transactions#django.db.transaction.non_atomic_requests", "type": "django.db.transaction", "text": "\nThis decorator will negate the effect of `ATOMIC_REQUESTS` for a given view:\n\nIt only works if it\u2019s applied to the view itself.\n\n"}, {"name": "db.transaction.on_commit()", "path": "topics/db/transactions#django.db.transaction.on_commit", "type": "django.db.transaction", "text": "\n\n"}, {"name": "db.transaction.rollback()", "path": "topics/db/transactions#django.db.transaction.rollback", "type": "django.db.transaction", "text": "\n\n"}, {"name": "db.transaction.savepoint()", "path": "topics/db/transactions#django.db.transaction.savepoint", "type": "django.db.transaction", "text": "\nCreates a new savepoint. This marks a point in the transaction that is known\nto be in a \u201cgood\u201d state. Returns the savepoint ID (`sid`).\n\n"}, {"name": "db.transaction.savepoint_commit()", "path": "topics/db/transactions#django.db.transaction.savepoint_commit", "type": "django.db.transaction", "text": "\nReleases savepoint `sid`. The changes performed since the savepoint was\ncreated become part of the transaction.\n\n"}, {"name": "db.transaction.savepoint_rollback()", "path": "topics/db/transactions#django.db.transaction.savepoint_rollback", "type": "django.db.transaction", "text": "\nRolls back the transaction to savepoint `sid`.\n\n"}, {"name": "db.transaction.set_autocommit()", "path": "topics/db/transactions#django.db.transaction.set_autocommit", "type": "django.db.transaction", "text": "\n\n"}, {"name": "db.transaction.set_rollback()", "path": "topics/db/transactions#django.db.transaction.set_rollback", "type": "django.db.transaction", "text": "\n\n"}, {"name": "Deploying GeoDjango", "path": "ref/contrib/gis/deployment", "type": "API", "text": "\nBasically, the deployment of a GeoDjango application is not different from the\ndeployment of a normal Django application. Please consult Django\u2019s deployment\ndocumentation.\n\nWarning\n\nGeoDjango uses the GDAL geospatial library which is not thread safe at this\ntime. Thus, it is highly recommended to not use threading when deploying \u2013 in\nother words, use an appropriate configuration of Apache.\n\nFor example, when configuring your application with `mod_wsgi`, set the\n`WSGIDaemonProcess` attribute `threads` to `1`, unless Apache may crash when\nrunning your GeoDjango application. Increase the number of `processes`\ninstead.\n\n"}, {"name": "Deployment checklist", "path": "howto/deployment/checklist", "type": "Guides: How-tos", "text": "\nThe internet is a hostile environment. Before deploying your Django project,\nyou should take some time to review your settings, with security, performance,\nand operations in mind.\n\nDjango includes many security features. Some are built-in and always enabled.\nOthers are optional because they aren\u2019t always appropriate, or because they\u2019re\ninconvenient for development. For example, forcing HTTPS may not be suitable\nfor all websites, and it\u2019s impractical for local development.\n\nPerformance optimizations are another category of trade-offs with convenience.\nFor instance, caching is useful in production, less so for local development.\nError reporting needs are also widely different.\n\nThe following checklist includes settings that:\n\nMany of these settings are sensitive and should be treated as confidential. If\nyou\u2019re releasing the source code for your project, a common practice is to\npublish suitable settings for development, and to use a private settings\nmodule for production.\n\nSome of the checks described below can be automated using the `check --deploy`\noption. Be sure to run it against your production settings file as described\nin the option\u2019s documentation.\n\nThe secret key must be a large random value and it must be kept secret.\n\nMake sure that the key used in production isn\u2019t used anywhere else and avoid\ncommitting it to source control. This reduces the number of vectors from which\nan attacker may acquire the key.\n\nInstead of hardcoding the secret key in your settings module, consider loading\nit from an environment variable:\n\nor from a file:\n\nYou must never enable debug in production.\n\nYou\u2019re certainly developing your project with `DEBUG = True`, since this\nenables handy features like full tracebacks in your browser.\n\nFor a production environment, though, this is a really bad idea, because it\nleaks lots of information about your project: excerpts of your source code,\nlocal variables, settings, libraries used, etc.\n\nWhen `DEBUG = False`, Django doesn\u2019t work at all without a suitable value for\n`ALLOWED_HOSTS`.\n\nThis setting is required to protect your site against some CSRF attacks. If\nyou use a wildcard, you must perform your own validation of the `Host` HTTP\nheader, or otherwise ensure that you aren\u2019t vulnerable to this category of\nattacks.\n\nYou should also configure the web server that sits in front of Django to\nvalidate the host. It should respond with a static error page or ignore\nrequests for incorrect hosts instead of forwarding the request to Django. This\nway you\u2019ll avoid spurious errors in your Django logs (or emails if you have\nerror reporting configured that way). For example, on nginx you might set up a\ndefault server to return \u201c444 No Response\u201d on an unrecognized host:\n\nIf you\u2019re using a cache, connection parameters may be different in development\nand in production. Django defaults to per-process local-memory caching which\nmay not be desirable.\n\nCache servers often have weak authentication. Make sure they only accept\nconnections from your application servers.\n\nDatabase connection parameters are probably different in development and in\nproduction.\n\nDatabase passwords are very sensitive. You should protect them exactly like\n`SECRET_KEY`.\n\nFor maximum security, make sure database servers only accept connections from\nyour application servers.\n\nIf you haven\u2019t set up backups for your database, do it right now!\n\nIf your site sends emails, these values need to be set correctly.\n\nBy default, Django sends email from webmaster@localhost and root@localhost.\nHowever, some mail providers reject email from these addresses. To use\ndifferent sender addresses, modify the `DEFAULT_FROM_EMAIL` and `SERVER_EMAIL`\nsettings.\n\nStatic files are automatically served by the development server. In\nproduction, you must define a `STATIC_ROOT` directory where `collectstatic`\nwill copy them.\n\nSee How to manage static files (e.g. images, JavaScript, CSS) for more\ninformation.\n\nMedia files are uploaded by your users. They\u2019re untrusted! Make sure your web\nserver never attempts to interpret them. For instance, if a user uploads a\n`.php` file, the web server shouldn\u2019t execute it.\n\nNow is a good time to check your backup strategy for these files.\n\nAny website which allows users to log in should enforce site-wide HTTPS to\navoid transmitting access tokens in clear. In Django, access tokens include\nthe login/password, the session cookie, and password reset tokens. (You can\u2019t\ndo much to protect password reset tokens if you\u2019re sending them by email.)\n\nProtecting sensitive areas such as the user account or the admin isn\u2019t\nsufficient, because the same session cookie is used for HTTP and HTTPS. Your\nweb server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS\nrequests to Django.\n\nOnce you\u2019ve set up HTTPS, enable the following settings.\n\nSet this to `True` to avoid transmitting the CSRF cookie over HTTP\naccidentally.\n\nSet this to `True` to avoid transmitting the session cookie over HTTP\naccidentally.\n\nSetting `DEBUG = False` disables several features that are only useful in\ndevelopment. In addition, you can tune the following settings.\n\nConsider using cached sessions to improve performance.\n\nIf using database-backed sessions, regularly clear old sessions to avoid\nstoring unnecessary data.\n\nEnabling persistent database connections can result in a nice speed-up when\nconnecting to the database accounts for a significant part of the request\nprocessing time.\n\nThis helps a lot on virtualized hosts with limited network performance.\n\nEnabling the cached template loader often improves performance drastically, as\nit avoids compiling each template every time it needs to be rendered. See the\ntemplate loaders docs for more information.\n\nBy the time you push your code to production, it\u2019s hopefully robust, but you\ncan\u2019t rule out unexpected errors. Thankfully, Django can capture errors and\nnotify you accordingly.\n\nReview your logging configuration before putting your website in production,\nand check that it works as expected as soon as you have received some traffic.\n\nSee Logging for details on logging.\n\n`ADMINS` will be notified of 500 errors by email.\n\n`MANAGERS` will be notified of 404 errors. `IGNORABLE_404_URLS` can help\nfilter out spurious reports.\n\nSee How to manage error reporting for details on error reporting by email.\n\nError reporting by email doesn\u2019t scale very well\n\nConsider using an error monitoring system such as Sentry before your inbox is\nflooded by reports. Sentry can also aggregate logs.\n\nDjango includes default views and templates for several HTTP error codes. You\nmay want to override the default templates by creating the following templates\nin your root template directory: `404.html`, `500.html`, `403.html`, and\n`400.html`. The default error views that use these templates should suffice\nfor 99% of web applications, but you can customize them as well.\n\n"}, {"name": "dispatch.receiver()", "path": "topics/signals#django.dispatch.receiver", "type": "django.dispatch", "text": "\n\n"}, {"name": "dispatch.Signal", "path": "topics/signals#django.dispatch.Signal", "type": "django.dispatch", "text": "\n\n"}, {"name": "dispatch.Signal.connect()", "path": "topics/signals#django.dispatch.Signal.connect", "type": "django.dispatch", "text": "\n\n"}, {"name": "dispatch.Signal.disconnect()", "path": "topics/signals#django.dispatch.Signal.disconnect", "type": "django.dispatch", "text": "\n\n"}, {"name": "dispatch.Signal.send()", "path": "topics/signals#django.dispatch.Signal.send", "type": "django.dispatch", "text": "\n\n"}, {"name": "dispatch.Signal.send_robust()", "path": "topics/signals#django.dispatch.Signal.send_robust", "type": "django.dispatch", "text": "\n\n"}, {"name": "Django at a glance", "path": "intro/overview", "type": "Guides: Intro", "text": "\nBecause Django was developed in a fast-paced newsroom environment, it was\ndesigned to make common web development tasks fast and easy. Here\u2019s an\ninformal overview of how to write a database-driven web app with Django.\n\nThe goal of this document is to give you enough technical specifics to\nunderstand how Django works, but this isn\u2019t intended to be a tutorial or\nreference \u2013 but we\u2019ve got both! When you\u2019re ready to start a project, you can\nstart with the tutorial or dive right into more detailed documentation.\n\nAlthough you can use Django without a database, it comes with an object-\nrelational mapper in which you describe your database layout in Python code.\n\nThe data-model syntax offers many rich ways of representing your models \u2013 so\nfar, it\u2019s been solving many years\u2019 worth of database-schema problems. Here\u2019s a\nquick example:\n\nNext, run the Django command-line utilities to create the database tables\nautomatically:\n\nThe `makemigrations` command looks at all your available models and creates\nmigrations for whichever tables don\u2019t already exist. `migrate` runs the\nmigrations and creates tables in your database, as well as optionally\nproviding much richer schema control.\n\nWith that, you\u2019ve got a free, and rich, Python API to access your data. The\nAPI is created on the fly, no code generation necessary:\n\nOnce your models are defined, Django can automatically create a professional,\nproduction ready administrative interface \u2013 a website that lets authenticated\nusers add, change and delete objects. The only step required is to register\nyour model in the admin site:\n\nThe philosophy here is that your site is edited by a staff, or a client, or\nmaybe just you \u2013 and you don\u2019t want to have to deal with creating backend\ninterfaces only to manage content.\n\nOne typical workflow in creating Django apps is to create models and get the\nadmin sites up and running as fast as possible, so your staff (or clients) can\nstart populating data. Then, develop the way data is presented to the public.\n\nA clean, elegant URL scheme is an important detail in a high-quality web\napplication. Django encourages beautiful URL design and doesn\u2019t put any cruft\nin URLs, like `.php` or `.asp`.\n\nTo design URLs for an app, you create a Python module called a URLconf. A\ntable of contents for your app, it contains a mapping between URL patterns and\nPython callback functions. URLconfs also serve to decouple URLs from Python\ncode.\n\nHere\u2019s what a URLconf might look like for the `Reporter`/`Article` example\nabove:\n\nThe code above maps URL paths to Python callback functions (\u201cviews\u201d). The path\nstrings use parameter tags to \u201ccapture\u201d values from the URLs. When a user\nrequests a page, Django runs through each path, in order, and stops at the\nfirst one that matches the requested URL. (If none of them matches, Django\ncalls a special-case 404 view.) This is blazingly fast, because the paths are\ncompiled into regular expressions at load time.\n\nOnce one of the URL patterns matches, Django calls the given view, which is a\nPython function. Each view gets passed a request object \u2013 which contains\nrequest metadata \u2013 and the values captured in the pattern.\n\nFor example, if a user requested the URL \u201c/articles/2005/05/39323/\u201d, Django\nwould call the function `news.views.article_detail(request, year=2005,\nmonth=5, pk=39323)`.\n\nEach view is responsible for doing one of two things: Returning an\n`HttpResponse` object containing the content for the requested page, or\nraising an exception such as `Http404`. The rest is up to you.\n\nGenerally, a view retrieves data according to the parameters, loads a template\nand renders the template with the retrieved data. Here\u2019s an example view for\n`year_archive` from above:\n\nThis example uses Django\u2019s template system, which has several powerful\nfeatures but strives to stay simple enough for non-programmers to use.\n\nThe code above loads the `news/year_archive.html` template.\n\nDjango has a template search path, which allows you to minimize redundancy\namong templates. In your Django settings, you specify a list of directories to\ncheck for templates with `DIRS`. If a template doesn\u2019t exist in the first\ndirectory, it checks the second, and so on.\n\nLet\u2019s say the `news/year_archive.html` template was found. Here\u2019s what that\nmight look like:\n\nVariables are surrounded by double-curly braces. `{{ article.headline }}`\nmeans \u201cOutput the value of the article\u2019s headline attribute.\u201d But dots aren\u2019t\nused only for attribute lookup. They also can do dictionary-key lookup, index\nlookup and function calls.\n\nNote `{{ article.pub_date|date:\"F j, Y\" }}` uses a Unix-style \u201cpipe\u201d (the \u201c|\u201d\ncharacter). This is called a template filter, and it\u2019s a way to filter the\nvalue of a variable. In this case, the date filter formats a Python datetime\nobject in the given format (as found in PHP\u2019s date function).\n\nYou can chain together as many filters as you\u2019d like. You can write custom\ntemplate filters. You can write custom template tags, which run custom Python\ncode behind the scenes.\n\nFinally, Django uses the concept of \u201ctemplate inheritance\u201d. That\u2019s what the\n`{% extends \"base.html\" %}` does. It means \u201cFirst load the template called\n\u2018base\u2019, which has defined a bunch of blocks, and fill the blocks with the\nfollowing blocks.\u201d In short, that lets you dramatically cut down on redundancy\nin templates: each template has to define only what\u2019s unique to that template.\n\nHere\u2019s what the \u201cbase.html\u201d template, including the use of static files, might\nlook like:\n\nSimplistically, it defines the look-and-feel of the site (with the site\u2019s\nlogo), and provides \u201choles\u201d for child templates to fill. This means that a\nsite redesign can be done by changing a single file \u2013 the base template.\n\nIt also lets you create multiple versions of a site, with different base\ntemplates, while reusing child templates. Django\u2019s creators have used this\ntechnique to create strikingly different mobile versions of sites by only\ncreating a new base template.\n\nNote that you don\u2019t have to use Django\u2019s template system if you prefer another\nsystem. While Django\u2019s template system is particularly well-integrated with\nDjango\u2019s model layer, nothing forces you to use it. For that matter, you don\u2019t\nhave to use Django\u2019s database API, either. You can use another database\nabstraction layer, you can read XML files, you can read files off disk, or\nanything you want. Each piece of Django \u2013 models, views, templates \u2013 is\ndecoupled from the next.\n\nThis has been only a quick overview of Django\u2019s functionality. Some more\nuseful features:\n\nThe next steps are for you to download Django, read the tutorial and join the\ncommunity. Thanks for your interest!\n\n"}, {"name": "Django Exceptions", "path": "ref/exceptions", "type": "API", "text": "\nDjango raises some of its own exceptions as well as standard Python\nexceptions.\n\nDjango core exception classes are defined in `django.core.exceptions`.\n\nThis exception is raised when attempting to use models before the app loading\nprocess, which initializes the ORM, is complete.\n\nThe base class for `Model.DoesNotExist` exceptions. A `try/except` for\n`ObjectDoesNotExist` will catch `DoesNotExist` exceptions for all models.\n\nSee `get()`.\n\n`EmptyResultSet` may be raised during query generation if a query won\u2019t return\nany results. Most Django projects won\u2019t encounter this exception, but it might\nbe useful for implementing custom lookups and expressions.\n\nThe `FieldDoesNotExist` exception is raised by a model\u2019s `_meta.get_field()`\nmethod when the requested field does not exist on the model or on the model\u2019s\nparents.\n\nThe base class for `Model.MultipleObjectsReturned` exceptions. A `try/except`\nfor `MultipleObjectsReturned` will catch `MultipleObjectsReturned` exceptions\nfor all models.\n\nSee `get()`.\n\nThe `SuspiciousOperation` exception is raised when a user has performed an\noperation that should be considered suspicious from a security perspective,\nsuch as tampering with a session cookie. Subclasses of `SuspiciousOperation`\ninclude:\n\nIf a `SuspiciousOperation` exception reaches the ASGI/WSGI handler level it is\nlogged at the `Error` level and results in a `HttpResponseBadRequest`. See the\nlogging documentation for more information.\n\nThe `PermissionDenied` exception is raised when a user does not have\npermission to perform the action requested.\n\nThe `ViewDoesNotExist` exception is raised by `django.urls` when a requested\nview does not exist.\n\nThe `MiddlewareNotUsed` exception is raised when a middleware is not used in\nthe server configuration.\n\nThe `ImproperlyConfigured` exception is raised when Django is somehow\nimproperly configured \u2013 for example, if a value in `settings.py` is incorrect\nor unparseable.\n\nThe `FieldError` exception is raised when there is a problem with a model\nfield. This can happen for several reasons:\n\nThe `ValidationError` exception is raised when data fails form or model field\nvalidation. For more information about validation, see Form and Field\nValidation, Model Field Validation and the Validator Reference.\n\n`ValidationError`s that don\u2019t belong to a particular field in a form or model\nare classified as `NON_FIELD_ERRORS`. This constant is used as a key in\ndictionaries that otherwise map fields to their respective list of errors.\n\nThe `BadRequest` exception is raised when the request cannot be processed due\nto a client error. If a `BadRequest` exception reaches the ASGI/WSGI handler\nlevel it results in a `HttpResponseBadRequest`.\n\nThe `RequestAborted` exception is raised when an HTTP body being read in by\nthe handler is cut off midstream and the client connection closes, or when the\nclient does not send data and hits a timeout where the server closes the\nconnection.\n\nIt is internal to the HTTP handler modules and you are unlikely to see it\nelsewhere. If you are modifying HTTP handling code, you should raise this when\nyou encounter an aborted request to make sure the socket is closed cleanly.\n\nThe `SynchronousOnlyOperation` exception is raised when code that is only\nallowed in synchronous Python code is called from an asynchronous context (a\nthread with a running asynchronous event loop). These parts of Django are\ngenerally heavily reliant on thread-safety to function and don\u2019t work\ncorrectly under coroutines sharing the same thread.\n\nIf you are trying to call code that is synchronous-only from an asynchronous\nthread, then create a synchronous thread and call it in that. You can\naccomplish this is with `asgiref.sync.sync_to_async()`.\n\nURL Resolver exceptions are defined in `django.urls`.\n\nThe `Resolver404` exception is raised by `resolve()` if the path passed to\n`resolve()` doesn\u2019t map to a view. It\u2019s a subclass of `django.http.Http404`.\n\nThe `NoReverseMatch` exception is raised by `django.urls` when a matching URL\nin your URLconf cannot be identified based on the parameters supplied.\n\nDatabase exceptions may be imported from `django.db`.\n\nDjango wraps the standard database exceptions so that your Django code has a\nguaranteed common implementation of these classes.\n\nThe Django wrappers for database exceptions behave exactly the same as the\nunderlying database exceptions. See PEP 249, the Python Database API\nSpecification v2.0, for further information.\n\nAs per PEP 3134, a `__cause__` attribute is set with the original (underlying)\ndatabase exception, allowing access to any additional information provided.\n\nRaised to prevent deletion of referenced objects when using\n`django.db.models.PROTECT`. `models.ProtectedError` is a subclass of\n`IntegrityError`.\n\nRaised to prevent deletion of referenced objects when using\n`django.db.models.RESTRICT`. `models.RestrictedError` is a subclass of\n`IntegrityError`.\n\nHTTP exceptions may be imported from `django.http`.\n\n`UnreadablePostError` is raised when a user cancels an upload.\n\nSessions exceptions are defined in `django.contrib.sessions.exceptions`.\n\n`SessionInterrupted` is raised when a session is destroyed in a concurrent\nrequest. It\u2019s a subclass of `BadRequest`.\n\nTransaction exceptions are defined in `django.db.transaction`.\n\n`TransactionManagementError` is raised for any and all problems related to\ndatabase transactions.\n\nExceptions provided by the `django.test` package.\n\n`RedirectCycleError` is raised when the test client detects a loop or an\noverly long chain of redirects.\n\nDjango raises built-in Python exceptions when appropriate as well. See the\nPython documentation for further information on the Built-in Exceptions.\n\n"}, {"name": "Django settings", "path": "topics/settings", "type": "Guides", "text": "\nA Django settings file contains all the configuration of your Django\ninstallation. This document explains how settings work and which settings are\navailable.\n\nA settings file is just a Python module with module-level variables.\n\nHere are a couple of example settings:\n\nNote\n\nIf you set `DEBUG` to `False`, you also need to properly set the\n`ALLOWED_HOSTS` setting.\n\nBecause a settings file is a Python module, the following apply:\n\nIt can assign settings dynamically using normal Python syntax. For example:\n\nWhen you use Django, you have to tell it which settings you\u2019re using. Do this\nby using an environment variable, `DJANGO_SETTINGS_MODULE`.\n\nThe value of `DJANGO_SETTINGS_MODULE` should be in Python path syntax, e.g.\n`mysite.settings`. Note that the settings module should be on the Python\nimport search path.\n\nWhen using django-admin, you can either set the environment variable once, or\nexplicitly pass in the settings module each time you run the utility.\n\nExample (Unix Bash shell):\n\nExample (Windows shell):\n\nUse the `--settings` command-line argument to specify the settings manually:\n\nIn your live server environment, you\u2019ll need to tell your WSGI application\nwhat settings file to use. Do that with `os.environ`:\n\nRead the Django mod_wsgi documentation for more information and other common\nelements to a Django WSGI application.\n\nA Django settings file doesn\u2019t have to define any settings if it doesn\u2019t need\nto. Each setting has a sensible default value. These defaults live in the\nmodule `django/conf/global_settings.py`.\n\nHere\u2019s the algorithm Django uses in compiling settings:\n\nNote that a settings file should not import from `global_settings`, because\nthat\u2019s redundant.\n\nThe command `python manage.py diffsettings` displays differences between the\ncurrent settings file and Django\u2019s default settings.\n\nFor more, see the `diffsettings` documentation.\n\nIn your Django apps, use settings by importing the object\n`django.conf.settings`. Example:\n\nNote that `django.conf.settings` isn\u2019t a module \u2013 it\u2019s an object. So importing\nindividual settings is not possible:\n\nAlso note that your code should not import from either `global_settings` or\nyour own settings file. `django.conf.settings` abstracts the concepts of\ndefault settings and site-specific settings; it presents a single interface.\nIt also decouples the code that uses settings from the location of your\nsettings.\n\nYou shouldn\u2019t alter settings in your applications at runtime. For example,\ndon\u2019t do this in a view:\n\nThe only place you should assign to settings is in a settings file.\n\nBecause a settings file contains sensitive information, such as the database\npassword, you should make every attempt to limit access to it. For example,\nchange its file permissions so that only you and your web server\u2019s user can\nread it. This is especially important in a shared-hosting environment.\n\nFor a full list of available settings, see the settings reference.\n\nThere\u2019s nothing stopping you from creating your own settings, for your own\nDjango apps, but follow these guidelines:\n\nFor settings that are sequences, Django itself uses lists, but this is only a\nconvention.\n\nIn some cases, you might want to bypass the `DJANGO_SETTINGS_MODULE`\nenvironment variable. For example, if you\u2019re using the template system by\nitself, you likely don\u2019t want to have to set up an environment variable\npointing to a settings module.\n\nIn these cases, you can configure Django\u2019s settings manually. Do this by\ncalling:\n\nExample:\n\nPass `configure()` as many keyword arguments as you\u2019d like, with each keyword\nargument representing a setting and its value. Each argument name should be\nall uppercase, with the same name as the settings described above. If a\nparticular setting is not passed to `configure()` and is needed at some later\npoint, Django will use the default setting value.\n\nConfiguring Django in this fashion is mostly necessary \u2013 and, indeed,\nrecommended \u2013 when you\u2019re using a piece of the framework inside a larger\napplication.\n\nConsequently, when configured via `settings.configure()`, Django will not make\nany modifications to the process environment variables (see the documentation\nof `TIME_ZONE` for why this would normally occur). It\u2019s assumed that you\u2019re\nalready in full control of your environment in these cases.\n\nIf you\u2019d like default values to come from somewhere other than\n`django.conf.global_settings`, you can pass in a module or class that provides\nthe default settings as the `default_settings` argument (or as the first\npositional argument) in the call to `configure()`.\n\nIn this example, default settings are taken from `myapp_defaults`, and the\n`DEBUG` setting is set to `True`, regardless of its value in `myapp_defaults`:\n\nThe following example, which uses `myapp_defaults` as a positional argument,\nis equivalent:\n\nNormally, you will not need to override the defaults in this fashion. The\nDjango defaults are sufficiently tame that you can safely use them. Be aware\nthat if you do pass in a new default module, it entirely replaces the Django\ndefaults, so you must specify a value for every possible setting that might be\nused in that code you are importing. Check in\n`django.conf.settings.global_settings` for the full list.\n\nIf you\u2019re not setting the `DJANGO_SETTINGS_MODULE` environment variable, you\nmust call `configure()` at some point before using any code that reads\nsettings.\n\nIf you don\u2019t set `DJANGO_SETTINGS_MODULE` and don\u2019t call `configure()`, Django\nwill raise an `ImportError` exception the first time a setting is accessed.\n\nIf you set `DJANGO_SETTINGS_MODULE`, access settings values somehow, then call\n`configure()`, Django will raise a `RuntimeError` indicating that settings\nhave already been configured. There is a property for this purpose:\n\nFor example:\n\nAlso, it\u2019s an error to call `configure()` more than once, or to call\n`configure()` after any setting has been accessed.\n\nIt boils down to this: Use exactly one of either `configure()` or\n`DJANGO_SETTINGS_MODULE`. Not both, and not neither.\n\nIf you\u2019re using components of Django \u201cstandalone\u201d \u2013 for example, writing a\nPython script which loads some Django templates and renders them, or uses the\nORM to fetch some data \u2013 there\u2019s one more step you\u2019ll need in addition to\nconfiguring settings.\n\nAfter you\u2019ve either set `DJANGO_SETTINGS_MODULE` or called `configure()`,\nyou\u2019ll need to call `django.setup()` to load your settings and populate\nDjango\u2019s application registry. For example:\n\nNote that calling `django.setup()` is only necessary if your code is truly\nstandalone. When invoked by your web server, or through django-admin, Django\nwill handle this for you.\n\n`django.setup()` may only be called once.\n\nTherefore, avoid putting reusable application logic in standalone scripts so\nthat you have to import from the script elsewhere in your application. If you\ncan\u2019t avoid that, put the call to `django.setup()` inside an `if` block:\n\nSee also\n\n"}, {"name": "Django shortcut functions", "path": "topics/http/shortcuts", "type": "Guides", "text": "\nThe package `django.shortcuts` collects helper functions and classes that\n\u201cspan\u201d multiple levels of MVC. In other words, these functions/classes\nintroduce controlled coupling for convenience\u2019s sake.\n\nCombines a given template with a given context dictionary and returns an\n`HttpResponse` object with that rendered text.\n\nDjango does not provide a shortcut function which returns a `TemplateResponse`\nbecause the constructor of `TemplateResponse` offers the same level of\nconvenience as `render()`.\n\nThe following example renders the template `myapp/index.html` with the MIME\ntype application/xhtml+xml:\n\nThis example is equivalent to:\n\nReturns an `HttpResponseRedirect` to the appropriate URL for the arguments\npassed.\n\nThe arguments could be:\n\nBy default issues a temporary redirect; pass `permanent=True` to issue a\npermanent redirect.\n\nYou can use the `redirect()` function in a number of ways.\n\nBy passing some object; that object\u2019s `get_absolute_url()` method will be\ncalled to figure out the redirect URL:\n\nBy passing the name of a view and optionally some positional or keyword\narguments; the URL will be reverse resolved using the `reverse()` method:\n\nBy passing a hardcoded URL to redirect to:\n\nThis also works with full URLs:\n\nBy default, `redirect()` returns a temporary redirect. All of the above forms\naccept a `permanent` argument; if set to `True` a permanent redirect will be\nreturned:\n\nCalls `get()` on a given model manager, but it raises `Http404` instead of the\nmodel\u2019s `DoesNotExist` exception.\n\nThe following example gets the object with the primary key of 1 from\n`MyModel`:\n\nThis example is equivalent to:\n\nThe most common use case is to pass a `Model`, as shown above. However, you\ncan also pass a `QuerySet` instance:\n\nThe above example is a bit contrived since it\u2019s equivalent to doing:\n\nbut it can be useful if you are passed the `queryset` variable from somewhere\nelse.\n\nFinally, you can also use a `Manager`. This is useful for example if you have\na custom manager:\n\nYou can also use `related managers`:\n\nNote: As with `get()`, a `MultipleObjectsReturned` exception will be raised if\nmore than one object is found.\n\nReturns the result of `filter()` on a given model manager cast to a list,\nraising `Http404` if the resulting list is empty.\n\nThe following example gets all published objects from `MyModel`:\n\nThis example is equivalent to:\n\n"}, {"name": "Django Utils", "path": "ref/utils", "type": "API", "text": "\nThis document covers all stable modules in `django.utils`. Most of the modules\nin `django.utils` are designed for internal use and only the following parts\ncan be considered stable and thus backwards compatible as per the internal\nrelease deprecation policy.\n\nThis module contains helper functions for controlling HTTP caching. It does so\nby managing the `Vary` header of responses. It includes functions to patch the\nheader of response objects directly and decorators that change functions to do\nthat header-patching themselves.\n\nFor information on the `Vary` header, see RFC 7231#section-7.1.4.\n\nEssentially, the `Vary` HTTP header defines which headers a cache should take\ninto account when building its cache key. Requests with the same path but\ndifferent header content for headers named in `Vary` need to get different\ncache keys to prevent delivery of wrong content.\n\nFor example, internationalization middleware would need to distinguish caches\nby the `Accept-language` header.\n\nThis function patches the `Cache-Control` header by adding all keyword\narguments to it. The transformation is as follows:\n\nReturns the max-age from the response Cache-Control header as an integer (or\n`None` if it wasn\u2019t found or wasn\u2019t an integer).\n\nAdds some useful headers to the given `HttpResponse` object:\n\nEach header is only added if it isn\u2019t already set.\n\n`cache_timeout` is in seconds. The `CACHE_MIDDLEWARE_SECONDS` setting is used\nby default.\n\nAdds a `Cache-Control: max-age=0, no-cache, no-store, must-revalidate,\nprivate` header to a response to indicate that a page should never be cached.\n\nAdds (or updates) the `Vary` header in the given `HttpResponse` object.\n`newheaders` is a list of header names that should be in `Vary`. If headers\ncontains an asterisk, then `Vary` header will consist of a single asterisk\n`'*'`, according to RFC 7231#section-7.1.4. Otherwise, existing headers in\n`Vary` aren\u2019t removed.\n\nReturns a cache key based on the request path. It can be used in the request\nphase because it pulls the list of headers to take into account from the\nglobal path registry and uses those to build a cache key to check against.\n\nIf there is no headerlist stored, the page needs to be rebuilt, so this\nfunction returns `None`.\n\nLearns what headers to take into account for some request path from the\nresponse object. It stores those headers in a global path registry so that\nlater access to that path will know what headers to take into account without\nbuilding the response object itself. The headers are named in the `Vary`\nheader of the response, but we want to prevent response generation.\n\nThe list of headers to use for cache key generation is stored in the same\ncache as the pages themselves. If the cache ages some data out of the cache,\nthis means that we have to build the response once to get at the Vary header\nand so at the list of headers to use for the cache key.\n\nThe functions defined in this module share the following properties:\n\nParses a string and returns a `datetime.date`.\n\nParses a string and returns a `datetime.time`.\n\nUTC offsets aren\u2019t supported; if `value` describes one, the result is `None`.\n\nParses a string and returns a `datetime.datetime`.\n\nUTC offsets are supported; if `value` describes one, the result\u2019s `tzinfo`\nattribute is a `datetime.timezone` instance.\n\nParses a string and returns a `datetime.timedelta`.\n\nExpects data in the format `\"DD HH:MM:SS.uuuuuu\"`, `\"DD HH:MM:SS,uuuuuu\"`, or\nas specified by ISO 8601 (e.g. `P4DT1H15M20S` which is equivalent to `4\n1:15:20`) or PostgreSQL\u2019s day-time interval format (e.g. `3 days 04:05:06`).\n\nConverts a function decorator into a method decorator. It can be used to\ndecorate methods or classes; in the latter case, `name` is the name of the\nmethod to be decorated and is required.\n\n`decorator` may also be a list or tuple of functions. They are wrapped in\nreverse order so that the call order is the order in which the functions\nappear in the list/tuple.\n\nSee decorating class based views for example usage.\n\nGiven a middleware class, returns a view decorator. This lets you use\nmiddleware functionality on a per-view basis. The middleware is created with\nno params passed.\n\nIt assumes middleware that\u2019s compatible with the old style of Django 1.9 and\nearlier (having methods like `process_request()`, `process_exception()`, and\n`process_response()`).\n\nLike `decorator_from_middleware`, but returns a function that accepts the\narguments to be passed to the middleware_class. For example, the\n`cache_page()` decorator is created from the `CacheMiddleware` like this:\n\nMarks a middleware as synchronous-only. (The default in Django, but this\nallows you to future-proof if the default ever changes in a future release.)\n\nMarks a middleware as asynchronous-only. Django will wrap it in an\nasynchronous event loop when it is called from the WSGI request path.\n\nMarks a middleware as sync and async compatible, this allows to avoid\nconverting requests. You must implement detection of the current request type\nto use this decorator. See asynchronous middleware documentation for details.\n\nReturns a `str` object representing arbitrary object `s`. Treats bytestrings\nusing the `encoding` codec.\n\nIf `strings_only` is `True`, don\u2019t convert (some) non-string-like objects.\n\nDetermine if the object instance is of a protected type.\n\nObjects of protected types are preserved as-is when passed to\n`force_str(strings_only=True)`.\n\nSimilar to `smart_str()`, except that lazy instances are resolved to strings,\nrather than kept as lazy objects.\n\nIf `strings_only` is `True`, don\u2019t convert (some) non-string-like objects.\n\nReturns a bytestring version of arbitrary object `s`, encoded as specified in\n`encoding`.\n\nIf `strings_only` is `True`, don\u2019t convert (some) non-string-like objects.\n\nSimilar to `smart_bytes`, except that lazy instances are resolved to\nbytestrings, rather than kept as lazy objects.\n\nIf `strings_only` is `True`, don\u2019t convert (some) non-string-like objects.\n\nConvert an Internationalized Resource Identifier (IRI) portion to a URI\nportion that is suitable for inclusion in a URL.\n\nThis is the algorithm from section 3.1 of RFC 3987#section-3.1, slightly\nsimplified since the input is assumed to be a string rather than an arbitrary\nbyte stream.\n\nTakes an IRI (string or UTF-8 bytes) and returns a string containing the\nencoded result.\n\nConverts a Uniform Resource Identifier into an Internationalized Resource\nIdentifier.\n\nThis is an algorithm from section 3.2 of RFC 3987#section-3.2.\n\nTakes a URI in ASCII bytes and returns a string containing the encoded result.\n\nConvert a file system path to a URI portion that is suitable for inclusion in\na URL. The path is assumed to be either UTF-8 bytes, string, or a `Path`.\n\nThis method will encode certain characters that would normally be recognized\nas special characters for URIs. Note that this method does not encode the \u2018\ncharacter, as it is a valid character within URIs. See `encodeURIComponent()`\nJavaScript function for more details.\n\nReturns an ASCII string containing the encoded result.\n\nEscapes the unsafe characters from the path portion of a Uniform Resource\nIdentifier (URI).\n\nSample usage:\n\nFor simplifying the selection of a generator use `feedgenerator.DefaultFeed`\nwhich is currently `Rss201rev2Feed`\n\nFor definitions of the different versions of RSS, see:\nhttps://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-\nrss\n\nCreates a TagURI.\n\nSee\nhttps://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28/howto-\natom-id\n\nBase class for all syndication feeds. Subclasses should provide write().\n\nInitialize the feed with the given dictionary of metadata, which applies to\nthe entire feed.\n\nAny extra keyword arguments you pass to `__init__` will be stored in\n`self.feed`.\n\nAll parameters should be strings, except `categories`, which should be a\nsequence of strings.\n\nAdds an item to the feed. All args are expected to be strings except `pubdate`\nand `updateddate`, which are `datetime.datetime` objects, and `enclosures`,\nwhich is a list of `Enclosure` instances.\n\nReturn extra attributes to place on the root (i.e. feed/channel) element.\nCalled from `write()`.\n\nAdd elements in the root (i.e. feed/channel) element. Called from `write()`.\n\nReturn extra attributes to place on each item (i.e. item/entry) element.\n\nAdd elements on each item (i.e. item/entry) element.\n\nOutputs the feed in the given encoding to `outfile`, which is a file-like\nobject. Subclasses should override this.\n\nReturns the feed in the given encoding as a string.\n\nReturns the latest `pubdate` or `updateddate` for all items in the feed. If no\nitems have either of these attributes this returns the current UTC date/time.\n\nRepresents an RSS enclosure\n\nSpec: https://cyber.harvard.edu/rss/rss.html\n\nSpec: http://backend.userland.com/rss091\n\nSpec: RFC 4287\n\nThe `@cached_property` decorator caches the result of a method with a single\n`self` argument as a property. The cached result will persist as long as the\ninstance does, so if the instance is passed around and the function\nsubsequently invoked, the cached result will be returned.\n\nConsider a typical case, where a view might need to call a model\u2019s method to\nperform some computation, before placing the model instance into the context,\nwhere the template might invoke the method once more:\n\nAnd in the template you would have:\n\nHere, `friends()` will be called twice. Since the instance `person` in the\nview and the template are the same, decorating the `friends()` method with\n`@cached_property` can avoid that:\n\nNote that as the method is now a property, in Python code it will need to be\naccessed appropriately:\n\nThe cached value can be treated like an ordinary attribute of the instance:\n\nBecause of the way the descriptor protocol works, using `del` (or `delattr`)\non a `cached_property` that hasn\u2019t been accessed raises `AttributeError`.\n\nAs well as offering potential performance advantages, `@cached_property` can\nensure that an attribute\u2019s value does not change unexpectedly over the life of\nan instance. This could occur with a method whose computation is based on\n`datetime.now()`, or if a change were saved to the database by some other\nprocess in the brief interval between subsequent invocations of a method on\nthe same instance.\n\nYou can make cached properties of methods. For example, if you had an\nexpensive `get_friends()` method and wanted to allow calling it without\nretrieving the cached value, you could write:\n\nWhile `person.get_friends()` will recompute the friends on each call, the\nvalue of the cached property will persist until you delete it as described\nabove:\n\nSimilar to `@classmethod`, the `@classproperty` decorator converts the result\nof a method with a single `cls` argument into a property that can be accessed\ndirectly from the class.\n\nDjango offers many utility functions (particularly in `django.utils`) that\ntake a string as their first argument and do something to that string. These\nfunctions are used by template filters as well as directly in other code.\n\nIf you write your own similar functions and deal with translations, you\u2019ll\nface the problem of what to do when the first argument is a lazy translation\nobject. You don\u2019t want to convert it to a string immediately, because you\nmight be using this function outside of a view (and hence the current thread\u2019s\nlocale setting will not be correct).\n\nFor cases like this, use the `django.utils.functional.keep_lazy()` decorator.\nIt modifies the function so that if it\u2019s called with a lazy translation as one\nof its arguments, the function evaluation is delayed until it needs to be\nconverted to a string.\n\nFor example:\n\nThe `keep_lazy()` decorator takes a number of extra arguments (`*args`)\nspecifying the type(s) that the original function can return. A common use\ncase is to have functions that return text. For these, you can pass the `str`\ntype to `keep_lazy` (or use the `keep_lazy_text()` decorator described in the\nnext section).\n\nUsing this decorator means you can write your function and assume that the\ninput is a proper string, then add support for lazy translation objects at the\nend.\n\nA shortcut for `keep_lazy(str)(func)`.\n\nIf you have a function that returns text and you want to be able to take lazy\narguments while delaying their evaluation, you can use this decorator:\n\nUsually you should build up HTML using Django\u2019s templates to make use of its\nautoescape mechanism, using the utilities in `django.utils.safestring` where\nappropriate. This module provides some additional low level utilities for\nescaping HTML.\n\nReturns the given text with ampersands, quotes and angle brackets encoded for\nuse in HTML. The input is first coerced to a string and the output has\n`mark_safe()` applied.\n\nSimilar to `escape()`, except that it doesn\u2019t operate on pre-escaped strings,\nso it will not double escape.\n\nThis is similar to `str.format()`, except that it is appropriate for building\nup HTML fragments. All args and kwargs are passed through\n`conditional_escape()` before being passed to `str.format()`.\n\nFor the case of building up small HTML fragments, this function is to be\npreferred over string interpolation using `%` or `str.format()` directly,\nbecause it applies escaping to all arguments - just like the template system\napplies escaping by default.\n\nSo, instead of writing:\n\nYou should instead use:\n\nThis has the advantage that you don\u2019t need to apply `escape()` to each\nargument and risk a bug and an XSS vulnerability if you forget one.\n\nNote that although this function uses `str.format()` to do the interpolation,\nsome of the formatting options provided by `str.format()` (e.g. number\nformatting) will not work, since all arguments are passed through\n`conditional_escape()` which (ultimately) calls `force_str()` on the values.\n\nA wrapper of `format_html()`, for the common case of a group of arguments that\nneed to be formatted using the same format string, and then joined using\n`sep`. `sep` is also passed through `conditional_escape()`.\n\n`args_generator` should be an iterator that returns the sequence of `args`\nthat will be passed to `format_html()`. For example:\n\nTries to remove anything that looks like an HTML tag from the string, that is\nanything contained within `<>`.\n\nAbsolutely NO guarantee is provided about the resulting string being HTML\nsafe. So NEVER mark safe the result of a `strip_tag` call without escaping it\nfirst, for example with `escape()`.\n\nFor example:\n\nIf `value` is `\"<b>Joel</b> <button>is</button> a <span>slug</span>\"` the\nreturn value will be `\"Joel is a slug\"`.\n\nIf you are looking for a more robust solution, take a look at the bleach\nPython library.\n\nThe `__html__()` method on a class helps non-Django templates detect classes\nwhose output doesn\u2019t require HTML escaping.\n\nThis decorator defines the `__html__()` method on the decorated class by\nwrapping `__str__()` in `mark_safe()`. Ensure the `__str__()` method does\nindeed return text that doesn\u2019t require HTML escaping.\n\nA version of Python\u2019s `urllib.parse.urlencode()` function that can operate on\n`MultiValueDict` and non-string values.\n\nFormats the time to match the RFC 1123#section-5.2.14 date format as specified\nby HTTP RFC 7231#section-7.1.1.1.\n\nAccepts a floating point number expressed in seconds since the epoch in\nUTC\u2013such as that outputted by `time.time()`. If set to `None`, defaults to the\ncurrent time.\n\nOutputs a string in the format `Wdy, DD Mon YYYY HH:MM:SS GMT`.\n\nConverts a base 36 string to an integer.\n\nConverts a positive integer to a base 36 string.\n\nEncodes a bytestring to a base64 string for use in URLs, stripping any\ntrailing equal signs.\n\nDecodes a base64 encoded string, adding back any trailing equal signs that\nmight have been stripped.\n\nFunctions for working with Python modules.\n\nImports a dotted module path and returns the attribute/class designated by the\nlast name in the path. Raises `ImportError` if the import failed. For example:\n\nis equivalent to:\n\nFunctions and classes for working with \u201csafe strings\u201d: strings that can be\ndisplayed safely without further escaping in HTML. Marking something as a\n\u201csafe string\u201d means that the producer of the string has already turned\ncharacters that should not be interpreted by the HTML engine (e.g. \u2018<\u2019) into\nthe appropriate entities.\n\nA `str` subclass that has been specifically marked as \u201csafe\u201d (requires no\nfurther escaping) for HTML output purposes.\n\nExplicitly mark a string as safe for (HTML) output purposes. The returned\nobject can be used everywhere a string is appropriate.\n\nCan be called multiple times on a single string.\n\nCan also be used as a decorator.\n\nFor building up fragments of HTML, you should normally be using\n`django.utils.html.format_html()` instead.\n\nString marked safe will become unsafe again if modified. For example:\n\nA version of `str.format()` for when `format_string`, `args`, and/or `kwargs`\ncontain lazy objects. The first argument is the string to be formatted. For\nexample:\n\nThis example allows translators to translate part of the URL. If \u201cperson\u201d is\ntranslated to \u201cpersona\u201d, the regular expression will match\n`persona/(?P<pk>\\d+)/$`, e.g. `persona/5/`.\n\nConverts a string to a URL slug by:\n\nFor example:\n\nIf you want to allow Unicode characters, pass `allow_unicode=True`. For\nexample:\n\nIn older versions, leading and trailing dashes and underscores are not\nremoved.\n\n`tzinfo` instance that represents UTC.\n\nReturns a `tzinfo` instance that represents a time zone with a fixed offset\nfrom UTC.\n\n`offset` is a `datetime.timedelta` or an integer number of minutes. Use\npositive values for time zones east of UTC and negative values for west of\nUTC.\n\nReturns a `tzinfo` instance that represents the default time zone.\n\nReturns the name of the default time zone.\n\nReturns a `tzinfo` instance that represents the current time zone.\n\nReturns the name of the current time zone.\n\nSets the current time zone. The `timezone` argument must be an instance of a\n`tzinfo` subclass or a time zone name.\n\nUnsets the current time zone.\n\nThis is a Python context manager that sets the current time zone on entry with\n`activate()`, and restores the previously active time zone on exit. If the\n`timezone` argument is `None`, the current time zone is unset on entry with\n`deactivate()` instead.\n\n`override` is also usable as a function decorator.\n\nConverts an aware `datetime` to a different time zone, by default the current\ntime zone.\n\nWhen `value` is omitted, it defaults to `now()`.\n\nThis function doesn\u2019t work on naive datetimes; use `make_aware()` instead.\n\nUses `localtime()` to convert an aware `datetime` to a `date()` in a different\ntime zone, by default the current time zone.\n\nWhen `value` is omitted, it defaults to `now()`.\n\nThis function doesn\u2019t work on naive datetimes.\n\nReturns a `datetime` that represents the current point in time. Exactly what\u2019s\nreturned depends on the value of `USE_TZ`:\n\nReturns `True` if `value` is aware, `False` if it is naive. This function\nassumes that `value` is a `datetime`.\n\nReturns `True` if `value` is naive, `False` if it is aware. This function\nassumes that `value` is a `datetime`.\n\nReturns an aware `datetime` that represents the same point in time as `value`\nin `timezone`, `value` being a naive `datetime`. If `timezone` is set to\n`None`, it defaults to the current time zone.\n\nDeprecated since version 4.0: When using `pytz`, the `pytz.AmbiguousTimeError`\nexception is raised if you try to make `value` aware during a DST transition\nwhere the same time occurs twice (when reverting from DST). Setting `is_dst`\nto `True` or `False` will avoid the exception by choosing if the time is pre-\ntransition or post-transition respectively.\n\nWhen using `pytz`, the `pytz.NonExistentTimeError` exception is raised if you\ntry to make `value` aware during a DST transition such that the time never\noccurred. For example, if the 2:00 hour is skipped during a DST transition,\ntrying to make 2:30 aware in that time zone will raise an exception. To avoid\nthat you can use `is_dst` to specify how `make_aware()` should interpret such\na nonexistent time. If `is_dst=True` then the above time would be interpreted\nas 2:30 DST time (equivalent to 1:30 local time). Conversely, if\n`is_dst=False` the time would be interpreted as 2:30 standard time (equivalent\nto 3:30 local time).\n\nThe `is_dst` parameter has no effect when using non-`pytz` timezone\nimplementations.\n\nThe `is_dst` parameter is deprecated and will be removed in Django 5.0.\n\nReturns a naive `datetime` that represents in `timezone` the same point in\ntime as `value`, `value` being an aware `datetime`. If `timezone` is set to\n`None`, it defaults to the current time zone.\n\nFor a complete discussion on the usage of the following see the translation\ndocumentation.\n\nTranslates `message` and returns it as a string.\n\nTranslates `message` given the `context` and returns it as a string.\n\nFor more information, see Contextual markers.\n\nSame as the non-lazy versions above, but using lazy execution.\n\nSee lazy translations documentation.\n\nMarks strings for translation but doesn\u2019t translate them now. This can be used\nto store strings in global variables that should stay in the base language\n(because they might be used externally) and will be translated later.\n\nTranslates `singular` and `plural` and returns the appropriate string based on\n`number`.\n\nTranslates `singular` and `plural` and returns the appropriate string based on\n`number` and the `context`.\n\nSame as the non-lazy versions above, but using lazy execution.\n\nSee lazy translations documentation.\n\nFetches the translation object for a given language and activates it as the\ncurrent translation object for the current thread.\n\nDeactivates the currently active translation object so that further _ calls\nwill resolve against the default translation object, again.\n\nMakes the active translation object a `NullTranslations()` instance. This is\nuseful when we want delayed translations to appear as the original string for\nsome reason.\n\nA Python context manager that uses `django.utils.translation.activate()` to\nfetch the translation object for a given language, activates it as the\ntranslation object for the current thread and reactivates the previous active\nlanguage on exit. Optionally, it can deactivate the temporary translation on\nexit with `django.utils.translation.deactivate()` if the `deactivate` argument\nis `True`. If you pass `None` as the language argument, a `NullTranslations()`\ninstance is activated within the context.\n\n`override` is also usable as a function decorator.\n\nChecks whether there is a global language file for the given language code\n(e.g. \u2018fr\u2019, \u2018pt_BR\u2019). This is used to decide whether a user-provided language\nis available.\n\nReturns the currently selected language code. Returns `None` if translations\nare temporarily deactivated (by `deactivate_all()` or when `None` is passed to\n`override()`).\n\nReturns selected language\u2019s BiDi layout:\n\nAnalyzes the request to find what language the user wants the system to show.\nOnly languages listed in settings.LANGUAGES are taken into account. If the\nuser requests a sublanguage where we have a main language, we send out the\nmain language.\n\nIf `check_path` is `True`, the function first checks the requested URL for\nwhether its path begins with a language code listed in the `LANGUAGES`\nsetting.\n\nReturns `lang_code` if it\u2019s in the `LANGUAGES` setting, possibly selecting a\nmore generic variant. For example, `'es'` is returned if `lang_code` is `'es-\nar'` and `'es'` is in `LANGUAGES` but `'es-ar'` isn\u2019t.\n\nIf `strict` is `False` (the default), a country-specific variant may be\nreturned when neither the language code nor its generic variant is found. For\nexample, if only `'es-co'` is in `LANGUAGES`, that\u2019s returned for `lang_code`s\nlike `'es'` and `'es-ar'`. Those matches aren\u2019t returned if `strict=True`.\n\nRaises `LookupError` if nothing is found.\n\nTurns a language name (en-us) into a locale name (en_US).\n\nTurns a Django template into something that is understood by `xgettext`. It\ndoes so by translating the Django translation tags into standard `gettext`\nfunction invocations.\n\n"}, {"name": "django-admin and manage.py", "path": "ref/django-admin", "type": "API", "text": "\n`django-admin` is Django\u2019s command-line utility for administrative tasks. This\ndocument outlines all it can do.\n\nIn addition, `manage.py` is automatically created in each Django project. It\ndoes the same thing as `django-admin` but also sets the\n`DJANGO_SETTINGS_MODULE` environment variable so that it points to your\nproject\u2019s `settings.py` file.\n\nThe `django-admin` script should be on your system path if you installed\nDjango via `pip`. If it\u2019s not in your path, ensure you have your virtual\nenvironment activated.\n\nGenerally, when working on a single Django project, it\u2019s easier to use\n`manage.py` than `django-admin`. If you need to switch between multiple Django\nsettings files, use `django-admin` with `DJANGO_SETTINGS_MODULE` or the\n`--settings` command line option.\n\nThe command-line examples throughout this document use `django-admin` to be\nconsistent, but any example can use `manage.py` or `python -m django` just as\nwell.\n\n`command` should be one of the commands listed in this document. `options`,\nwhich is optional, should be zero or more of the options available for the\ngiven command.\n\nRun `django-admin help` to display usage information and a list of the\ncommands provided by each application.\n\nRun `django-admin help --commands` to display a list of all available\ncommands.\n\nRun `django-admin help <command>` to display a description of the given\ncommand and a list of its available options.\n\nMany commands take a list of \u201capp names.\u201d An \u201capp name\u201d is the basename of the\npackage containing your models. For example, if your `INSTALLED_APPS` contains\nthe string `'mysite.blog'`, the app name is `blog`.\n\nRun `django-admin version` to display the current Django version.\n\nThe output follows the schema described in PEP 440:\n\nUse `--verbosity`, where it is supported, to specify the amount of\nnotification and debug information that `django-admin` prints to the console.\n\nUses the system check framework to inspect the entire Django project for\ncommon problems.\n\nBy default, all apps will be checked. You can check a subset of apps by\nproviding a list of app labels as arguments:\n\nThe system check framework performs many different types of checks that are\ncategorized with tags. You can use these tags to restrict the checks performed\nto just those in a particular category. For example, to perform only models\nand compatibility checks, run:\n\nSpecifies the database to run checks requiring database access:\n\nBy default, these checks will not be run.\n\nLists all available tags.\n\nActivates some additional checks that are only relevant in a deployment\nsetting.\n\nYou can use this option in your local development environment, but since your\nlocal development settings module may not have many of your production\nsettings, you will probably want to point the `check` command at a different\nsettings module, either by setting the `DJANGO_SETTINGS_MODULE` environment\nvariable, or by passing the `--settings` option:\n\nOr you could run it directly on a production or staging deployment to verify\nthat the correct settings are in use (omitting `--settings`). You could even\nmake it part of your integration test suite.\n\nSpecifies the message level that will cause the command to exit with a non-\nzero status. Default is `ERROR`.\n\nCompiles `.po` files created by `makemessages` to `.mo` files for use with the\nbuilt-in gettext support. See Internationalization and localization.\n\nSpecifies the locale(s) to process. If not provided, all locales are\nprocessed.\n\nSpecifies the locale(s) to exclude from processing. If not provided, no\nlocales are excluded.\n\nIncludes fuzzy translations into compiled files.\n\nExample usage:\n\nIgnores directories matching the given `glob`-style pattern. Use multiple\ntimes to ignore more.\n\nExample usage:\n\nCreates the cache tables for use with the database cache backend using the\ninformation from your settings file. See Django\u2019s cache framework for more\ninformation.\n\nSpecifies the database in which the cache table(s) will be created. Defaults\nto `default`.\n\nPrints the SQL that would be run without actually running it, so you can\ncustomize it or use the migrations framework.\n\nRuns the command-line client for the database engine specified in your\n`ENGINE` setting, with the connection parameters specified in your `USER`,\n`PASSWORD`, etc., settings.\n\nThis command assumes the programs are on your `PATH` so that a call to the\nprogram name (`psql`, `mysql`, `sqlite3`, `sqlplus`) will find the program in\nthe right place. There\u2019s no way to specify the location of the program\nmanually.\n\nSpecifies the database onto which to open a shell. Defaults to `default`.\n\nAny arguments following a `--` divider will be passed on to the underlying\ncommand-line client. For example, with PostgreSQL you can use the `psql`\ncommand\u2019s `-c` flag to execute a raw SQL query directly:\n\nOn MySQL/MariaDB, you can do this with the `mysql` command\u2019s `-e` flag:\n\nNote\n\nBe aware that not all options set in the `OPTIONS` part of your database\nconfiguration in `DATABASES` are passed to the command-line client, e.g.\n`'isolation_level'`.\n\nDisplays differences between the current settings file and Django\u2019s default\nsettings (or another settings file specified by `--default`).\n\nSettings that don\u2019t appear in the defaults are followed by `\"###\"`. For\nexample, the default settings don\u2019t define `ROOT_URLCONF`, so `ROOT_URLCONF`\nis followed by `\"###\"` in the output of `diffsettings`.\n\nDisplays all settings, even if they have Django\u2019s default value. Such settings\nare prefixed by `\"###\"`.\n\nThe settings module to compare the current settings against. Leave empty to\ncompare against Django\u2019s default settings.\n\nSpecifies the output format. Available values are `hash` and `unified`. `hash`\nis the default mode that displays the output that\u2019s described above. `unified`\ndisplays the output similar to `diff -u`. Default settings are prefixed with a\nminus sign, followed by the changed setting prefixed with a plus sign.\n\nOutputs to standard output all data in the database associated with the named\napplication(s).\n\nIf no application name is provided, all installed applications will be dumped.\n\nThe output of `dumpdata` can be used as input for `loaddata`.\n\nNote that `dumpdata` uses the default manager on the model for selecting the\nrecords to dump. If you\u2019re using a custom manager as the default manager and\nit filters some of the available records, not all of the objects will be\ndumped.\n\nUses Django\u2019s base manager, dumping records which might otherwise be filtered\nor modified by a custom manager.\n\nSpecifies the serialization format of the output. Defaults to JSON. Supported\nformats are listed in Serialization formats.\n\nSpecifies the number of indentation spaces to use in the output. Defaults to\n`None` which displays all data on single line.\n\nPrevents specific applications or models (specified in the form of\n`app_label.ModelName`) from being dumped. If you specify a model name, then\nonly that model will be excluded, rather than the entire application. You can\nalso mix application names and model names.\n\nIf you want to exclude multiple applications, pass `--exclude` more than once:\n\nSpecifies the database from which data will be dumped. Defaults to `default`.\n\nUses the `natural_key()` model method to serialize any foreign key and many-\nto-many relationship to objects of the type that defines the method. If you\u2019re\ndumping `contrib.auth` `Permission` objects or `contrib.contenttypes`\n`ContentType` objects, you should probably use this flag. See the natural keys\ndocumentation for more details on this and the next option.\n\nOmits the primary key in the serialized data of this object since it can be\ncalculated during deserialization.\n\nOutputs only the objects specified by a comma separated list of primary keys.\nThis is only available when dumping one model. By default, all the records of\nthe model are output.\n\nSpecifies a file to write the serialized data to. By default, the data goes to\nstandard output.\n\nWhen this option is set and `--verbosity` is greater than 0 (the default), a\nprogress bar is shown in the terminal.\n\nThe output file can be compressed with one of the `bz2`, `gz`, `lzma`, or `xz`\nformats by ending the filename with the corresponding extension. For example,\nto output the data as a compressed JSON file:\n\nRemoves all data from the database and re-executes any post-synchronization\nhandlers. The table of which migrations have been applied is not cleared.\n\nIf you would rather start from an empty database and re-run all migrations,\nyou should drop and recreate the database and then run `migrate` instead.\n\nSuppresses all user prompts.\n\nSpecifies the database to flush. Defaults to `default`.\n\nIntrospects the database tables in the database pointed-to by the `NAME`\nsetting and outputs a Django model module (a `models.py` file) to standard\noutput.\n\nYou may choose what tables or views to inspect by passing their names as\narguments. If no arguments are provided, models are created for views only if\nthe `--include-views` option is used. Models for partition tables are created\non PostgreSQL if the `--include-partitions` option is used.\n\nUse this if you have a legacy database with which you\u2019d like to use Django.\nThe script will inspect the database and create a model for each table within\nit.\n\nAs you might expect, the created models will have an attribute for every field\nin the table. Note that `inspectdb` has a few special cases in its field-name\noutput:\n\nThis feature is meant as a shortcut, not as definitive model generation. After\nyou run it, you\u2019ll want to look over the generated models yourself to make\ncustomizations. In particular, you\u2019ll need to rearrange models\u2019 order, so that\nmodels that refer to other models are ordered properly.\n\nDjango doesn\u2019t create database defaults when a `default` is specified on a\nmodel field. Similarly, database defaults aren\u2019t translated to model field\ndefaults or detected in any fashion by `inspectdb`.\n\nBy default, `inspectdb` creates unmanaged models. That is, `managed = False`\nin the model\u2019s `Meta` class tells Django not to manage each table\u2019s creation,\nmodification, and deletion. If you do want to allow Django to manage the\ntable\u2019s lifecycle, you\u2019ll need to change the `managed` option to `True` (or\nremove it because `True` is its default value).\n\nSpecifies the database to introspect. Defaults to `default`.\n\nIf this option is provided, models are also created for partitions.\n\nOnly support for PostgreSQL is implemented.\n\nIf this option is provided, models are also created for database views.\n\nSearches for and loads the contents of the named fixture into the database.\n\nSpecifies the database into which the data will be loaded. Defaults to\n`default`.\n\nIgnores fields and models that may have been removed since the fixture was\noriginally generated.\n\nSpecifies a single app to look for fixtures in rather than looking in all\napps.\n\nSpecifies the serialization format (e.g., `json` or `xml`) for fixtures read\nfrom stdin.\n\nExcludes loading the fixtures from the given applications and/or models (in\nthe form of `app_label` or `app_label.ModelName`). Use the option multiple\ntimes to exclude more than one app or model.\n\nA fixture is a collection of files that contain the serialized contents of the\ndatabase. Each fixture has a unique name, and the files that comprise the\nfixture can be distributed over multiple directories, in multiple\napplications.\n\nDjango will search in three locations for fixtures:\n\nDjango will load any and all fixtures it finds in these locations that match\nthe provided fixture names.\n\nIf the named fixture has a file extension, only fixtures of that type will be\nloaded. For example:\n\nwould only load JSON fixtures called `mydata`. The fixture extension must\ncorrespond to the registered name of a serializer (e.g., `json` or `xml`).\n\nIf you omit the extensions, Django will search all available fixture types for\na matching fixture. For example:\n\nwould look for any fixture of any fixture type called `mydata`. If a fixture\ndirectory contained `mydata.json`, that fixture would be loaded as a JSON\nfixture.\n\nThe fixtures that are named can include directory components. These\ndirectories will be included in the search path. For example:\n\nwould search `<app_label>/fixtures/foo/bar/mydata.json` for each installed\napplication, `<dirname>/foo/bar/mydata.json` for each directory in\n`FIXTURE_DIRS`, and the literal path `foo/bar/mydata.json`.\n\nWhen fixture files are processed, the data is saved to the database as is.\nModel defined `save()` methods are not called, and any `pre_save` or\n`post_save` signals will be called with `raw=True` since the instance only\ncontains attributes that are local to the model. You may, for example, want to\ndisable handlers that access related fields that aren\u2019t present during fixture\nloading and would otherwise raise an exception:\n\nYou could also write a decorator to encapsulate this logic:\n\nJust be aware that this logic will disable the signals whenever fixtures are\ndeserialized, not just during `loaddata`.\n\nNote that the order in which fixture files are processed is undefined.\nHowever, all fixture data is installed as a single transaction, so data in one\nfixture can reference data in another fixture. If the database backend\nsupports row-level constraints, these constraints will be checked at the end\nof the transaction.\n\nThe `dumpdata` command can be used to generate input for `loaddata`.\n\nFixtures may be compressed in `zip`, `gz`, `bz2`, `lzma`, or `xz` format. For\nexample:\n\nwould look for any of `mydata.json`, `mydata.json.zip`, `mydata.json.gz`,\n`mydata.json.bz2`, `mydata.json.lzma`, or `mydata.json.xz`. The first file\ncontained within a compressed archive is used.\n\nNote that if two fixtures with the same name but different fixture type are\ndiscovered (for example, if `mydata.json` and `mydata.xml.gz` were found in\nthe same fixture directory), fixture installation will be aborted, and any\ndata installed in the call to `loaddata` will be removed from the database.\n\nMySQL with MyISAM and fixtures\n\nThe MyISAM storage engine of MySQL doesn\u2019t support transactions or\nconstraints, so if you use MyISAM, you won\u2019t get validation of fixture data,\nor a rollback if multiple transaction files are found.\n\nSupport for XZ archives (`.xz`) and LZMA archives (`.lzma`) was added.\n\nIf you\u2019re in a multi-database setup, you might have fixture data that you want\nto load onto one database, but not onto another. In this situation, you can\nadd a database identifier into the names of your fixtures.\n\nFor example, if your `DATABASES` setting has a \u2018master\u2019 database defined, name\nthe fixture `mydata.master.json` or `mydata.master.json.gz` and the fixture\nwill only be loaded when you specify you want to load data into the `master`\ndatabase.\n\nYou can use a dash as the fixture name to load input from `sys.stdin`. For\nexample:\n\nWhen reading from `stdin`, the `--format` option is required to specify the\nserialization format of the input (e.g., `json` or `xml`).\n\nLoading from `stdin` is useful with standard input and output redirections.\nFor example:\n\nRuns over the entire source tree of the current directory and pulls out all\nstrings marked for translation. It creates (or updates) a message file in the\nconf/locale (in the Django tree) or locale (for project and application)\ndirectory. After making changes to the messages files you need to compile them\nwith `compilemessages` for use with the builtin gettext support. See the i18n\ndocumentation for details.\n\nThis command doesn\u2019t require configured settings. However, when settings\naren\u2019t configured, the command can\u2019t ignore the `MEDIA_ROOT` and `STATIC_ROOT`\ndirectories or include `LOCALE_PATHS`.\n\nUpdates the message files for all available languages.\n\nSpecifies a list of file extensions to examine (default: `html`, `txt`, `py`\nor `js` if `--domain` is `js`).\n\nExample usage:\n\nSeparate multiple extensions with commas or use `-e` or `--extension` multiple\ntimes:\n\nSpecifies the locale(s) to process.\n\nSpecifies the locale(s) to exclude from processing. If not provided, no\nlocales are excluded.\n\nExample usage:\n\nSpecifies the domain of the messages files. Supported options are:\n\nFollows symlinks to directories when looking for new translation strings.\n\nExample usage:\n\nIgnores files or directories matching the given `glob`-style pattern. Use\nmultiple times to ignore more.\n\nThese patterns are used by default: `'CVS'`, `'.*'`, `'*~'`, `'*.pyc'`.\n\nExample usage:\n\nDisables the default values of `--ignore`.\n\nDisables breaking long message lines into several lines in language files.\n\nSuppresses writing \u2018`#: filename:line`\u2019 comment lines in language files. Using\nthis option makes it harder for technically skilled translators to understand\neach message\u2019s context.\n\nControls `#: filename:line` comment lines in language files. If the option is:\n\nRequires `gettext` 0.19 or newer.\n\nPrevents deleting the temporary `.pot` files generated before creating the\n`.po` file. This is useful for debugging errors which may prevent the final\nlanguage files from being created.\n\nSee also\n\nSee Customizing the makemessages command for instructions on how to customize\nthe keywords that `makemessages` passes to `xgettext`.\n\nCreates new migrations based on the changes detected to your models.\nMigrations, their relationship with apps and more are covered in depth in the\nmigrations documentation.\n\nProviding one or more app names as arguments will limit the migrations created\nto the app(s) specified and any dependencies needed (the table at the other\nend of a `ForeignKey`, for example).\n\nTo add migrations to an app that doesn\u2019t have a `migrations` directory, run\n`makemigrations` with the app\u2019s `app_label`.\n\nSuppresses all user prompts. If a suppressed prompt cannot be resolved\nautomatically, the command will exit with error code 3.\n\nOutputs an empty migration for the specified apps, for manual editing. This is\nfor advanced users and should not be used unless you are familiar with the\nmigration format, migration operations, and the dependencies between your\nmigrations.\n\nShows what migrations would be made without actually writing any migrations\nfiles to disk. Using this option along with `--verbosity 3` will also show the\ncomplete migrations files that would be written.\n\nEnables fixing of migration conflicts.\n\nAllows naming the generated migration(s) instead of using a generated name.\nThe name must be a valid Python identifier.\n\nGenerate migration files without Django version and timestamp header.\n\nMakes `makemigrations` exit with a non-zero status when model changes without\nmigrations are detected.\n\nSupport for calling `makemigrations` without an active database connection was\nadded. In that case, check for a consistent migration history is skipped.\n\nSynchronizes the database state with the current set of models and migrations.\nMigrations, their relationship with apps and more are covered in depth in the\nmigrations documentation.\n\nThe behavior of this command changes depending on the arguments provided:\n\nWarning\n\nWhen unapplying migrations, all dependent migrations will also be unapplied,\nregardless of `<app_label>`. You can use `--plan` to check which migrations\nwill be unapplied.\n\nSpecifies the database to migrate. Defaults to `default`.\n\nMarks the migrations up to the target one (following the rules above) as\napplied, but without actually running the SQL to change your database schema.\n\nThis is intended for advanced users to manipulate the current migration state\ndirectly if they\u2019re manually applying changes; be warned that using `--fake`\nruns the risk of putting the migration state table into a state where manual\nrecovery will be needed to make migrations run correctly.\n\nAllows Django to skip an app\u2019s initial migration if all database tables with\nthe names of all models created by all `CreateModel` operations in that\nmigration already exist. This option is intended for use when first running\nmigrations against a database that preexisted the use of migrations. This\noption does not, however, check for matching database schema beyond matching\ntable names and so is only safe to use if you are confident that your existing\nschema matches what is recorded in your initial migration.\n\nShows the migration operations that will be performed for the given `migrate`\ncommand.\n\nAllows creating tables for apps without migrations. While this isn\u2019t\nrecommended, the migrations framework is sometimes too slow on large projects\nwith hundreds of models.\n\nSuppresses all user prompts. An example prompt is asking about removing stale\ncontent types.\n\nMakes `migrate` exit with a non-zero status when unapplied migrations are\ndetected.\n\nStarts a lightweight development web server on the local machine. By default,\nthe server runs on port 8000 on the IP address `127.0.0.1`. You can pass in an\nIP address and port number explicitly.\n\nIf you run this script as a user with normal privileges (recommended), you\nmight not have access to start a port on a low port number. Low port numbers\nare reserved for the superuser (root).\n\nThis server uses the WSGI application object specified by the\n`WSGI_APPLICATION` setting.\n\nDO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through\nsecurity audits or performance tests. (And that\u2019s how it\u2019s gonna stay. We\u2019re\nin the business of making web frameworks, not web servers, so improving this\nserver to be able to handle a production environment is outside the scope of\nDjango.)\n\nThe development server automatically reloads Python code for each request, as\nneeded. You don\u2019t need to restart the server for code changes to take effect.\nHowever, some actions like adding files don\u2019t trigger a restart, so you\u2019ll\nhave to restart the server in these cases.\n\nIf you\u2019re using Linux or MacOS and install both pywatchman and the Watchman\nservice, kernel signals will be used to autoreload the server (rather than\npolling file modification timestamps each second). This offers better\nperformance on large projects, reduced response time after code changes, more\nrobust change detection, and a reduction in power usage. Django supports\n`pywatchman` 1.2.0 and higher.\n\nLarge directories with many files may cause performance issues\n\nWhen using Watchman with a project that includes large non-Python directories\nlike `node_modules`, it\u2019s advisable to ignore this directory for optimal\nperformance. See the watchman documentation for information on how to do this.\n\nWatchman timeout\n\nThe default timeout of `Watchman` client is 5 seconds. You can change it by\nsetting the `DJANGO_WATCHMAN_TIMEOUT` environment variable.\n\nWhen you start the server, and each time you change Python code while the\nserver is running, the system check framework will check your entire Django\nproject for some common errors (see the `check` command). If any errors are\nfound, they will be printed to standard output. You can use the `--skip-\nchecks` option to skip running system checks.\n\nYou can run as many concurrent servers as you want, as long as they\u2019re on\nseparate ports by executing `django-admin runserver` more than once.\n\nNote that the default IP address, `127.0.0.1`, is not accessible from other\nmachines on your network. To make your development server viewable to other\nmachines on the network, use its own IP address (e.g. `192.168.2.1`) or\n`0.0.0.0` or `::` (with IPv6 enabled).\n\nYou can provide an IPv6 address surrounded by brackets (e.g.\n`[200a::1]:8000`). This will automatically enable IPv6 support.\n\nA hostname containing ASCII-only characters can also be used.\n\nIf the staticfiles contrib app is enabled (default in new projects) the\n`runserver` command will be overridden with its own runserver command.\n\nLogging of each request and response of the server is sent to the\ndjango.server logger.\n\nDisables the auto-reloader. This means any Python code changes you make while\nthe server is running will not take effect if the particular Python modules\nhave already been loaded into memory.\n\nDisables use of threading in the development server. The server is\nmultithreaded by default.\n\nUses IPv6 for the development server. This changes the default IP address from\n`127.0.0.1` to `::1`.\n\nSupport for the `--skip-checks` option was added.\n\nPort 8000 on IP address `127.0.0.1`:\n\nPort 8000 on IP address `1.2.3.4`:\n\nPort 7000 on IP address `127.0.0.1`:\n\nPort 7000 on IP address `1.2.3.4`:\n\nPort 8000 on IPv6 address `::1`:\n\nPort 7000 on IPv6 address `::1`:\n\nPort 7000 on IPv6 address `2001:0db8:1234:5678::9`:\n\nPort 8000 on IPv4 address of host `localhost`:\n\nPort 8000 on IPv6 address of host `localhost`:\n\nBy default, the development server doesn\u2019t serve any static files for your\nsite (such as CSS files, images, things under `MEDIA_URL` and so forth). If\nyou want to configure Django to serve static media, read How to manage static\nfiles (e.g. images, JavaScript, CSS).\n\nSends a test email (to confirm email sending through Django is working) to the\nrecipient(s) specified. For example:\n\nThere are a couple of options, and you may use any combination of them\ntogether:\n\nMails the email addresses specified in `MANAGERS` using `mail_managers()`.\n\nMails the email addresses specified in `ADMINS` using `mail_admins()`.\n\nStarts the Python interactive interpreter.\n\nSpecifies the shell to use. By default, Django will use IPython or bpython if\neither is installed. If both are installed, specify which one you want like\nso:\n\nIPython:\n\nbpython:\n\nIf you have a \u201crich\u201d shell installed but want to force use of the \u201cplain\u201d\nPython interpreter, use `python` as the interface name, like so:\n\nDisables reading the startup script for the \u201cplain\u201d Python interpreter. By\ndefault, the script pointed to by the `PYTHONSTARTUP` environment variable or\nthe `~/.pythonrc.py` script is read.\n\nLets you pass a command as a string to execute it as Django, like so:\n\nYou can also pass code in on standard input to execute it. For example:\n\nOn Windows, the REPL is output due to implementation limits of\n`select.select()` on that platform.\n\nShows all migrations in a project. You can choose from one of two formats:\n\nLists all of the apps Django knows about, the migrations available for each\napp, and whether or not each migration is applied (marked by an `[X]` next to\nthe migration name). For a `--verbosity` of 2 and above, the applied datetimes\nare also shown.\n\nApps without migrations are also listed, but have `(no migrations)` printed\nunder them.\n\nThis is the default output format.\n\nShows the migration plan Django will follow to apply migrations. Like\n`--list`, applied migrations are marked by an `[X]`. For a `--verbosity` of 2\nand above, all dependencies of a migration will also be shown.\n\n`app_label`s arguments limit the output, however, dependencies of provided\napps may also be included.\n\nSpecifies the database to examine. Defaults to `default`.\n\nPrints the SQL statements that would be executed for the `flush` command.\n\nSpecifies the database for which to print the SQL. Defaults to `default`.\n\nPrints the SQL for the named migration. This requires an active database\nconnection, which it will use to resolve constraint names; this means you must\ngenerate the SQL against a copy of the database you wish to later apply it on.\n\nNote that `sqlmigrate` doesn\u2019t colorize its output.\n\nGenerates the SQL for unapplying the migration. By default, the SQL created is\nfor running the migration in the forwards direction.\n\nSpecifies the database for which to generate the SQL. Defaults to `default`.\n\nPrints the SQL statements for resetting sequences for the given app name(s).\n\nSequences are indexes used by some database engines to track the next\navailable number for automatically incremented fields.\n\nUse this command to generate SQL which will fix cases where a sequence is out\nof sync with its automatically incremented field data.\n\nSpecifies the database for which to print the SQL. Defaults to `default`.\n\nSquashes the migrations for `app_label` up to and including `migration_name`\ndown into fewer migrations, if possible. The resulting squashed migrations can\nlive alongside the unsquashed ones safely. For more information, please read\nSquashing migrations.\n\nWhen `start_migration_name` is given, Django will only include migrations\nstarting from and including this migration. This helps to mitigate the\nsquashing limitation of `RunPython` and\n`django.db.migrations.operations.RunSQL` migration operations.\n\nDisables the optimizer when generating a squashed migration. By default,\nDjango will try to optimize the operations in your migrations to reduce the\nsize of the resulting file. Use this option if this process is failing or\ncreating incorrect migrations, though please also file a Django bug report\nabout the behavior, as optimization is meant to be safe.\n\nSuppresses all user prompts.\n\nSets the name of the squashed migration. When omitted, the name is based on\nthe first and last migration, with `_squashed_` in between.\n\nGenerate squashed migration file without Django version and timestamp header.\n\nCreates a Django app directory structure for the given app name in the current\ndirectory or the given destination.\n\nBy default, the new directory contains a `models.py` file and other app\ntemplate files. If only the app name is given, the app directory will be\ncreated in the current working directory.\n\nIf the optional destination is provided, Django will use that existing\ndirectory rather than creating a new one. You can use \u2018.\u2019 to denote the\ncurrent working directory.\n\nFor example:\n\nProvides the path to a directory with a custom app template file, or a path to\nan uncompressed archive (`.tar`) or a compressed archive (`.tar.gz`,\n`.tar.bz2`, `.tar.xz`, `.tar.lzma`, `.tgz`, `.tbz2`, `.txz`, `.tlz`, `.zip`)\ncontaining the app template files.\n\nFor example, this would look for an app template in the given directory when\ncreating the `myapp` app:\n\nDjango will also accept URLs (`http`, `https`, `ftp`) to compressed archives\nwith the app template files, downloading and extracting them on the fly.\n\nFor example, taking advantage of GitHub\u2019s feature to expose repositories as\nzip files, you can use a URL like:\n\nSpecifies which file extensions in the app template should be rendered with\nthe template engine. Defaults to `py`.\n\nSpecifies which files in the app template (in addition to those matching\n`--extension`) should be rendered with the template engine. Defaults to an\nempty list.\n\nSpecifies which directories in the app template should be excluded, in\naddition to `.git` and `__pycache__`. If this option is not provided,\ndirectories named `__pycache__` or starting with `.` will be excluded.\n\nThe `template context` used for all matching files is:\n\nWarning\n\nWhen the app template files are rendered with the Django template engine (by\ndefault all `*.py` files), Django will also replace all stray template\nvariables contained. For example, if one of the Python files contains a\ndocstring explaining a particular feature related to template rendering, it\nmight result in an incorrect example.\n\nTo work around this problem, you can use the `templatetag` template tag to\n\u201cescape\u201d the various parts of the template syntax.\n\nIn addition, to allow Python template files that contain Django template\nlanguage syntax while also preventing packaging systems from trying to byte-\ncompile invalid `*.py` files, template files ending with `.py-tpl` will be\nrenamed to `.py`.\n\nCreates a Django project directory structure for the given project name in the\ncurrent directory or the given destination.\n\nBy default, the new directory contains `manage.py` and a project package\n(containing a `settings.py` and other files).\n\nIf only the project name is given, both the project directory and project\npackage will be named `<projectname>` and the project directory will be\ncreated in the current working directory.\n\nIf the optional destination is provided, Django will use that existing\ndirectory as the project directory, and create `manage.py` and the project\npackage within it. Use \u2018.\u2019 to denote the current working directory.\n\nFor example:\n\nSpecifies a directory, file path, or URL of a custom project template. See the\n`startapp --template` documentation for examples and usage.\n\nSpecifies which file extensions in the project template should be rendered\nwith the template engine. Defaults to `py`.\n\nSpecifies which files in the project template (in addition to those matching\n`--extension`) should be rendered with the template engine. Defaults to an\nempty list.\n\nSpecifies which directories in the project template should be excluded, in\naddition to `.git` and `__pycache__`. If this option is not provided,\ndirectories named `__pycache__` or starting with `.` will be excluded.\n\nThe `template context` used is:\n\nPlease also see the rendering warning as mentioned for `startapp`.\n\nRuns tests for all installed apps. See Testing in Django for more information.\n\nStops running tests and reports the failure immediately after a test fails.\n\nControls the test runner class that is used to execute tests. This value\noverrides the value provided by the `TEST_RUNNER` setting.\n\nSuppresses all user prompts. A typical prompt is a warning about deleting an\nexisting test database.\n\nThe `test` command receives options on behalf of the specified `--testrunner`.\nThese are the options of the default test runner: `DiscoverRunner`.\n\nPreserves the test database between test runs. This has the advantage of\nskipping both the create and destroy actions which can greatly decrease the\ntime to run tests, especially those in a large test suite. If the test\ndatabase does not exist, it will be created on the first run and then\npreserved for each subsequent run. Unless the `MIGRATE` test setting is\n`False`, any unapplied migrations will also be applied to the test database\nbefore running the test suite.\n\nRandomizes the order of tests before running them. This can help detect tests\nthat aren\u2019t properly isolated. The test order generated by this option is a\ndeterministic function of the integer seed given. When no seed is passed, a\nseed is chosen randomly and printed to the console. To repeat a particular\ntest order, pass a seed. The test orders generated by this option preserve\nDjango\u2019s guarantees on test order. They also keep tests grouped by test case\nclass.\n\nThe shuffled orderings also have a special consistency property useful when\nnarrowing down isolation issues. Namely, for a given seed and when running a\nsubset of tests, the new order will be the original shuffling restricted to\nthe smaller set. Similarly, when adding tests while keeping the seed the same,\nthe order of the original tests will be the same in the new order.\n\nSorts test cases in the opposite execution order. This may help in debugging\nthe side effects of tests that aren\u2019t properly isolated. Grouping by test\nclass is preserved when using this option. This can be used in conjunction\nwith `--shuffle` to reverse the order for a particular seed.\n\nSets the `DEBUG` setting to `True` prior to running tests. This may help\ntroubleshoot test failures.\n\nEnables SQL logging for failing tests. If `--verbosity` is `2`, then queries\nin passing tests are also output.\n\nRuns tests in separate parallel processes. Since modern processors have\nmultiple cores, this allows running tests significantly faster.\n\nUsing `--parallel` without a value, or with the value `auto`, runs one test\nprocess per core according to `multiprocessing.cpu_count()`. You can override\nthis by passing the desired number of processes, e.g. `--parallel 4`, or by\nsetting the `DJANGO_TEST_PROCESSES` environment variable.\n\nDjango distributes test cases \u2014 `unittest.TestCase` subclasses \u2014 to\nsubprocesses. If there are fewer test cases than configured processes, Django\nwill reduce the number of processes accordingly.\n\nEach process gets its own database. You must ensure that different test cases\ndon\u2019t access the same resources. For instance, test cases that touch the\nfilesystem should create a temporary directory for their own use.\n\nNote\n\nIf you have test classes that cannot be run in parallel, you can use\n`SerializeMixin` to run them sequentially. See Enforce running test classes\nsequentially.\n\nThis option requires the third-party `tblib` package to display tracebacks\ncorrectly:\n\nThis feature isn\u2019t available on Windows. It doesn\u2019t work with the Oracle\ndatabase backend either.\n\nIf you want to use `pdb` while debugging tests, you must disable parallel\nexecution (`--parallel=1`). You\u2019ll see something like `bdb.BdbQuit` if you\ndon\u2019t.\n\nWarning\n\nWhen test parallelization is enabled and a test fails, Django may be unable to\ndisplay the exception traceback. This can make debugging difficult. If you\nencounter this problem, run the affected test without parallelization to see\nthe traceback of the failure.\n\nThis is a known limitation. It arises from the need to serialize objects in\norder to exchange them between processes. See What can be pickled and\nunpickled? for details.\n\nSupport for the value `auto` was added.\n\nRuns only tests marked with the specified tags. May be specified multiple\ntimes and combined with `test --exclude-tag`.\n\nTests that fail to load are always considered matching.\n\nIn older versions, tests that failed to load did not match tags.\n\nExcludes tests marked with the specified tags. May be specified multiple times\nand combined with `test --tag`.\n\nRuns test methods and classes matching test name patterns, in the same way as\n`unittest's -k option`. Can be specified multiple times.\n\nSpawns a `pdb` debugger at each test error or failure. If you have it\ninstalled, `ipdb` is used instead.\n\nDiscards output (`stdout` and `stderr`) for passing tests, in the same way as\n`unittest's --buffer option`.\n\nDjango automatically calls `faulthandler.enable()` when starting the tests,\nwhich allows it to print a traceback if the interpreter crashes. Pass `--no-\nfaulthandler` to disable this behavior.\n\nOutputs timings, including database setup and total run time.\n\nRuns a Django development server (as in `runserver`) using data from the given\nfixture(s).\n\nFor example, this command:\n\n\u2026would perform the following steps:\n\nThis is useful in a number of ways:\n\nNote that this server does not automatically detect changes to your Python\nsource code (as `runserver` does). It does, however, detect changes to\ntemplates.\n\nSpecifies a different port, or IP address and port, from the default of\n`127.0.0.1:8000`. This value follows exactly the same format and serves\nexactly the same function as the argument to the `runserver` command.\n\nExamples:\n\nTo run the test server on port 7000 with `fixture1` and `fixture2`:\n\n(The above statements are equivalent. We include both of them to demonstrate\nthat it doesn\u2019t matter whether the options come before or after the fixture\narguments.)\n\nTo run on 1.2.3.4:7000 with a `test` fixture:\n\nSuppresses all user prompts. A typical prompt is a warning about deleting an\nexisting test database.\n\nSome commands are only available when the `django.contrib` application that\nimplements them has been `enabled`. This section describes them grouped by\ntheir application.\n\nThis command is only available if Django\u2019s authentication system\n(`django.contrib.auth`) is installed.\n\nAllows changing a user\u2019s password. It prompts you to enter a new password\ntwice for the given user. If the entries are identical, this immediately\nbecomes the new password. If you do not supply a user, the command will\nattempt to change the password whose username matches the current user.\n\nSpecifies the database to query for the user. Defaults to `default`.\n\nExample usage:\n\nThis command is only available if Django\u2019s authentication system\n(`django.contrib.auth`) is installed.\n\nCreates a superuser account (a user who has all permissions). This is useful\nif you need to create an initial superuser account or if you need to\nprogrammatically generate superuser accounts for your site(s).\n\nWhen run interactively, this command will prompt for a password for the new\nsuperuser account. When run non-interactively, you can provide a password by\nsetting the `DJANGO_SUPERUSER_PASSWORD` environment variable. Otherwise, no\npassword will be set, and the superuser account will not be able to log in\nuntil a password has been manually set for it.\n\nIn non-interactive mode, the `USERNAME_FIELD` and required fields (listed in\n`REQUIRED_FIELDS`) fall back to `DJANGO_SUPERUSER_<uppercase_field_name>`\nenvironment variables, unless they are overridden by a command line argument.\nFor example, to provide an `email` field, you can use `DJANGO_SUPERUSER_EMAIL`\nenvironment variable.\n\nSuppresses all user prompts. If a suppressed prompt cannot be resolved\nautomatically, the command will exit with error code 1.\n\nThe username and email address for the new account can be supplied by using\nthe `--username` and `--email` arguments on the command line. If either of\nthose is not supplied, `createsuperuser` will prompt for it when running\ninteractively.\n\nSpecifies the database into which the superuser object will be saved.\n\nYou can subclass the management command and override `get_input_data()` if you\nwant to customize data input and validation. Consult the source code for\ndetails on the existing implementation and the method\u2019s parameters. For\nexample, it could be useful if you have a `ForeignKey` in `REQUIRED_FIELDS`\nand want to allow creating an instance instead of entering the primary key of\nan existing instance.\n\nThis command is only available if Django\u2019s contenttypes app\n(`django.contrib.contenttypes`) is installed.\n\nDeletes stale content types (from deleted models) in your database. Any\nobjects that depend on the deleted content types will also be deleted. A list\nof deleted objects will be displayed before you confirm it\u2019s okay to proceed\nwith the deletion.\n\nSpecifies the database to use. Defaults to `default`.\n\nDeletes stale content types including ones from previously installed apps that\nhave been removed from `INSTALLED_APPS`. Defaults to `False`.\n\nThis command is only available if GeoDjango (`django.contrib.gis`) is\ninstalled.\n\nPlease refer to its `description` in the GeoDjango documentation.\n\nCan be run as a cron job or directly to clean out expired sessions.\n\nThis command is only available if the Sitemaps framework\n(`django.contrib.sitemaps`) is installed.\n\nPlease refer to its `description` in the Sitemaps documentation.\n\nThis command is only available if the static files application\n(`django.contrib.staticfiles`) is installed.\n\nPlease refer to its `description` in the staticfiles documentation.\n\nThis command is only available if the static files application\n(`django.contrib.staticfiles`) is installed.\n\nPlease refer to its `description` in the staticfiles documentation.\n\nAlthough some commands may allow their own custom options, every command\nallows for the following options by default:\n\nAdds the given filesystem path to the Python import search path. If this isn\u2019t\nprovided, `django-admin` will use the `PYTHONPATH` environment variable.\n\nThis option is unnecessary in `manage.py`, because it takes care of setting\nthe Python path for you.\n\nExample usage:\n\nSpecifies the settings module to use. The settings module should be in Python\npackage syntax, e.g. `mysite.settings`. If this isn\u2019t provided, `django-admin`\nwill use the `DJANGO_SETTINGS_MODULE` environment variable.\n\nThis option is unnecessary in `manage.py`, because it uses `settings.py` from\nthe current project by default.\n\nExample usage:\n\nDisplays a full stack trace when a `CommandError` is raised. By default,\n`django-admin` will show an error message when a `CommandError` occurs and a\nfull stack trace for any other exception.\n\nThis option is ignored by `runserver`.\n\nExample usage:\n\nSpecifies the amount of notification and debug information that a command\nshould print to the console.\n\nThis option is ignored by `runserver`.\n\nExample usage:\n\nDisables colorized command output. Some commands format their output to be\ncolorized. For example, errors will be printed to the console in red and SQL\nstatements will be syntax highlighted.\n\nExample usage:\n\nForces colorization of the command output if it would otherwise be disabled as\ndiscussed in Syntax coloring. For example, you may want to pipe colored output\nto another command.\n\nSkips running system checks prior to running the command. This option is only\navailable if the `requires_system_checks` command attribute is not an empty\nlist or tuple.\n\nExample usage:\n\nThe `django-admin` / `manage.py` commands will use pretty color-coded output\nif your terminal supports ANSI-colored output. It won\u2019t use the color codes if\nyou\u2019re piping the command\u2019s output to another program unless the `--force-\ncolor` option is used.\n\nOn Windows 10, the Windows Terminal application, VS Code, and PowerShell\n(where virtual terminal processing is enabled) allow colored output, and are\nsupported by default.\n\nUnder Windows, the legacy `cmd.exe` native console doesn\u2019t support ANSI escape\nsequences so by default there is no color output. In this case either of two\nthird-party libraries are needed:\n\nInstall colorama, a Python package that translates ANSI color codes into\nWindows API calls. Django commands will detect its presence and will make use\nof its services to color output just like on Unix-based platforms. `colorama`\ncan be installed via pip:\n\nOther modern terminal environments on Windows, that support terminal colors,\nbut which are not automatically detected as supported by Django, may \u201cfake\u201d\nthe installation of `ANSICON` by setting the appropriate environmental\nvariable, `ANSICON=\"on\"`.\n\nUpdated support for syntax coloring on Windows.\n\nThe colors used for syntax highlighting can be customized. Django ships with\nthree color palettes:\n\nYou select a palette by setting a `DJANGO_COLORS` environment variable to\nspecify the palette you want to use. For example, to specify the `light`\npalette under a Unix or OS/X BASH shell, you would run the following at a\ncommand prompt:\n\nYou can also customize the colors that are used. Django specifies a number of\nroles in which color is used:\n\nEach of these roles can be assigned a specific foreground and background\ncolor, from the following list:\n\nEach of these colors can then be modified by using the following display\noptions:\n\nA color specification follows one of the following patterns:\n\nwhere `role` is the name of a valid color role, `fg` is the foreground color,\n`bg` is the background color and each `option` is one of the color modifying\noptions. Multiple color specifications are then separated by a semicolon. For\nexample:\n\nwould specify that errors be displayed using blinking yellow on blue, and\nnotices displayed using magenta. All other color roles would be left\nuncolored.\n\nColors can also be specified by extending a base palette. If you put a palette\nname in a color specification, all the colors implied by that palette will be\nloaded. So:\n\nwould specify the use of all the colors in the light color palette, except for\nthe colors for errors and notices which would be overridden as specified.\n\nIf you use the Bash shell, consider installing the Django bash completion\nscript, which lives in `extras/django_bash_completion` in the Django source\ndistribution. It enables tab-completion of `django-admin` and `manage.py`\ncommands, so you can, for instance\u2026\n\nSee How to create custom django-admin commands for how to add customized\nactions.\n\nTo call a management command from code use `call_command`.\n\nExamples:\n\nNote that command options that take no arguments are passed as keywords with\n`True` or `False`, as you can see with the `interactive` option above.\n\nNamed arguments can be passed by using either one of the following syntaxes:\n\nSome command options have different names when using `call_command()` instead\nof `django-admin` or `manage.py`. For example, `django-admin createsuperuser\n--no-input` translates to `call_command('createsuperuser',\ninteractive=False)`. To find what keyword argument name to use for\n`call_command()`, check the command\u2019s source code for the `dest` argument\npassed to `parser.add_argument()`.\n\nCommand options which take multiple options are passed a list:\n\nThe return value of the `call_command()` function is the same as the return\nvalue of the `handle()` method of the command.\n\nNote that you can redirect standard output and error streams as all commands\nsupport the `stdout` and `stderr` options. For example, you could write:\n\n"}, {"name": "django.contrib.auth", "path": "ref/contrib/auth", "type": "API", "text": "\nThis document provides API reference material for the components of Django\u2019s\nauthentication system. For more details on the usage of these components or\nhow to customize authentication and authorization see the authentication topic\nguide.\n\n`User` objects have the following fields:\n\nRequired. 150 characters or fewer. Usernames may contain alphanumeric, `_`,\n`@`, `+`, `.` and `-` characters.\n\nThe `max_length` should be sufficient for many use cases. If you need a longer\nlength, please use a custom user model. If you use MySQL with the `utf8mb4`\nencoding (recommended for proper Unicode support), specify at most\n`max_length=191` because MySQL can only create unique indexes with 191\ncharacters in that case by default.\n\nOptional (`blank=True`). 150 characters or fewer.\n\nOptional (`blank=True`). 150 characters or fewer.\n\nOptional (`blank=True`). Email address.\n\nRequired. A hash of, and metadata about, the password. (Django doesn\u2019t store\nthe raw password.) Raw passwords can be arbitrarily long and can contain any\ncharacter. See the password documentation.\n\nMany-to-many relationship to `Group`\n\nMany-to-many relationship to `Permission`\n\nBoolean. Designates whether this user can access the admin site.\n\nBoolean. Designates whether this user account should be considered active. We\nrecommend that you set this flag to `False` instead of deleting accounts; that\nway, if your applications have any foreign keys to users, the foreign keys\nwon\u2019t break.\n\nThis doesn\u2019t necessarily control whether or not the user can log in.\nAuthentication backends aren\u2019t required to check for the `is_active` flag but\nthe default backend (`ModelBackend`) and the `RemoteUserBackend` do. You can\nuse `AllowAllUsersModelBackend` or `AllowAllUsersRemoteUserBackend` if you\nwant to allow inactive users to login. In this case, you\u2019ll also want to\ncustomize the `AuthenticationForm` used by the `LoginView` as it rejects\ninactive users. Be aware that the permission-checking methods such as\n`has_perm()` and the authentication in the Django admin all return `False` for\ninactive users.\n\nBoolean. Designates that this user has all permissions without explicitly\nassigning them.\n\nA datetime of the user\u2019s last login.\n\nA datetime designating when the account was created. Is set to the current\ndate/time by default when the account is created.\n\nRead-only attribute which is always `True` (as opposed to\n`AnonymousUser.is_authenticated` which is always `False`). This is a way to\ntell if the user has been authenticated. This does not imply any permissions\nand doesn\u2019t check if the user is active or has a valid session. Even though\nnormally you will check this attribute on `request.user` to find out whether\nit has been populated by the `AuthenticationMiddleware` (representing the\ncurrently logged-in user), you should know this attribute is `True` for any\n`User` instance.\n\nRead-only attribute which is always `False`. This is a way of differentiating\n`User` and `AnonymousUser` objects. Generally, you should prefer using\n`is_authenticated` to this attribute.\n\nReturns the username for the user. Since the `User` model can be swapped out,\nyou should use this method instead of referencing the username attribute\ndirectly.\n\nReturns the `first_name` plus the `last_name`, with a space in between.\n\nReturns the `first_name`.\n\nSets the user\u2019s password to the given raw string, taking care of the password\nhashing. Doesn\u2019t save the `User` object.\n\nWhen the `raw_password` is `None`, the password will be set to an unusable\npassword, as if `set_unusable_password()` were used.\n\nReturns `True` if the given raw string is the correct password for the user.\n(This takes care of the password hashing in making the comparison.)\n\nMarks the user as having no password set. This isn\u2019t the same as having a\nblank string for a password. `check_password()` for this user will never\nreturn `True`. Doesn\u2019t save the `User` object.\n\nYou may need this if authentication for your application takes place against\nan existing external source such as an LDAP directory.\n\nReturns `False` if `set_unusable_password()` has been called for this user.\n\nReturns a set of permission strings that the user has directly.\n\nIf `obj` is passed in, only returns the user permissions for this specific\nobject.\n\nReturns a set of permission strings that the user has, through their groups.\n\nIf `obj` is passed in, only returns the group permissions for this specific\nobject.\n\nReturns a set of permission strings that the user has, both through group and\nuser permissions.\n\nIf `obj` is passed in, only returns the permissions for this specific object.\n\nReturns `True` if the user has the specified permission, where perm is in the\nformat `\"<app label>.<permission codename>\"`. (see documentation on\npermissions). If the user is inactive, this method will always return `False`.\nFor an active superuser, this method will always return `True`.\n\nIf `obj` is passed in, this method won\u2019t check for a permission for the model,\nbut for this specific object.\n\nReturns `True` if the user has each of the specified permissions, where each\nperm is in the format `\"<app label>.<permission codename>\"`. If the user is\ninactive, this method will always return `False`. For an active superuser,\nthis method will always return `True`.\n\nIf `obj` is passed in, this method won\u2019t check for permissions for the model,\nbut for the specific object.\n\nReturns `True` if the user has any permissions in the given package (the\nDjango app label). If the user is inactive, this method will always return\n`False`. For an active superuser, this method will always return `True`.\n\nSends an email to the user. If `from_email` is `None`, Django uses the\n`DEFAULT_FROM_EMAIL`. Any `**kwargs` are passed to the underlying\n`send_mail()` call.\n\nThe `User` model has a custom manager that has the following helper methods\n(in addition to the methods provided by `BaseUserManager`):\n\nCreates, saves and returns a `User`.\n\nThe `username` and `password` are set as given. The domain portion of `email`\nis automatically converted to lowercase, and the returned `User` object will\nhave `is_active` set to `True`.\n\nIf no password is provided, `set_unusable_password()` will be called.\n\nThe `extra_fields` keyword arguments are passed through to the `User`\u2019s\n`__init__` method to allow setting arbitrary fields on a custom user model.\n\nSee Creating users for example usage.\n\nSame as `create_user()`, but sets `is_staff` and `is_superuser` to `True`.\n\nReturns users that have the given permission `perm` either in the `\"<app\nlabel>.<permission codename>\"` format or as a `Permission` instance. Returns\nan empty queryset if no users who have the `perm` found.\n\nIf `is_active` is `True` (default), returns only active users, or if `False`,\nreturns only inactive users. Use `None` to return all users irrespective of\nactive state.\n\nIf `include_superusers` is `True` (default), the result will include\nsuperusers.\n\nIf `backend` is passed in and it\u2019s defined in `AUTHENTICATION_BACKENDS`, then\nthis method will use it. Otherwise, it will use the `backend` in\n`AUTHENTICATION_BACKENDS`, if there is only one, or raise an exception.\n\n`django.contrib.auth.models.AnonymousUser` is a class that implements the\n`django.contrib.auth.models.User` interface, with these differences:\n\nIn practice, you probably won\u2019t need to use `AnonymousUser` objects on your\nown, but they\u2019re used by web requests, as explained in the next section.\n\n`Permission` objects have the following fields:\n\nRequired. 255 characters or fewer. Example: `'Can vote'`.\n\nRequired. A reference to the `django_content_type` database table, which\ncontains a record for each installed model.\n\nRequired. 100 characters or fewer. Example: `'can_vote'`.\n\n`Permission` objects have the standard data-access methods like any other\nDjango model.\n\n`Group` objects have the following fields:\n\nRequired. 150 characters or fewer. Any characters are permitted. Example:\n`'Awesome Users'`.\n\nMany-to-many field to `Permission`:\n\nA field validator allowing only ASCII letters and numbers, in addition to `@`,\n`.`, `+`, `-`, and `_`.\n\nA field validator allowing Unicode characters, in addition to `@`, `.`, `+`,\n`-`, and `_`. The default validator for `User.username`.\n\nThe auth framework uses the following signals that can be used for\nnotification when a user logs in or out.\n\nSent when a user logs in successfully.\n\nArguments sent with this signal:\n\nSent when the logout method is called.\n\nSent when the user failed to login successfully\n\nThis section details the authentication backends that come with Django. For\ninformation on how to use them and how to write your own authentication\nbackends, see the Other authentication sources section of the User\nauthentication guide.\n\nThe following backends are available in `django.contrib.auth.backends`:\n\nA base class that provides default implementations for all required methods.\nBy default, it will reject any user and provide no permissions.\n\nReturns an empty set.\n\nReturns an empty set.\n\nUses `get_user_permissions()` and `get_group_permissions()` to get the set of\npermission strings the `user_obj` has.\n\nUses `get_all_permissions()` to check if `user_obj` has the permission string\n`perm`.\n\nThis is the default authentication backend used by Django. It authenticates\nusing credentials consisting of a user identifier and password. For Django\u2019s\ndefault user model, the user identifier is the username, for custom user\nmodels it is the field specified by USERNAME_FIELD (see Customizing Users and\nauthentication).\n\nIt also handles the default permissions model as defined for `User` and\n`PermissionsMixin`.\n\n`has_perm()`, `get_all_permissions()`, `get_user_permissions()`, and\n`get_group_permissions()` allow an object to be passed as a parameter for\nobject-specific permissions, but this backend does not implement them other\nthan returning an empty set of permissions if `obj is not None`.\n\n`with_perm()` also allows an object to be passed as a parameter, but unlike\nothers methods it returns an empty queryset if `obj is not None`.\n\nTries to authenticate `username` with `password` by calling\n`User.check_password`. If no `username` is provided, it tries to fetch a\nusername from `kwargs` using the key `CustomUser.USERNAME_FIELD`. Returns an\nauthenticated user or `None`.\n\n`request` is an `HttpRequest` and may be `None` if it wasn\u2019t provided to\n`authenticate()` (which passes it on to the backend).\n\nReturns the set of permission strings the `user_obj` has from their own user\npermissions. Returns an empty set if `is_anonymous` or `is_active` is `False`.\n\nReturns the set of permission strings the `user_obj` has from the permissions\nof the groups they belong. Returns an empty set if `is_anonymous` or\n`is_active` is `False`.\n\nReturns the set of permission strings the `user_obj` has, including both user\npermissions and group permissions. Returns an empty set if `is_anonymous` or\n`is_active` is `False`.\n\nUses `get_all_permissions()` to check if `user_obj` has the permission string\n`perm`. Returns `False` if the user is not `is_active`.\n\nReturns whether the `user_obj` has any permissions on the app `app_label`.\n\nReturns whether the user is allowed to authenticate. To match the behavior of\n`AuthenticationForm` which `prohibits inactive users from logging in`, this\nmethod returns `False` for users with `is_active=False`. Custom user models\nthat don\u2019t have an `is_active` field are allowed.\n\nReturns all active users who have the permission `perm` either in the form of\n`\"<app label>.<permission codename>\"` or a `Permission` instance. Returns an\nempty queryset if no users who have the `perm` found.\n\nIf `is_active` is `True` (default), returns only active users, or if `False`,\nreturns only inactive users. Use `None` to return all users irrespective of\nactive state.\n\nIf `include_superusers` is `True` (default), the result will include\nsuperusers.\n\nSame as `ModelBackend` except that it doesn\u2019t reject inactive users because\n`user_can_authenticate()` always returns `True`.\n\nWhen using this backend, you\u2019ll likely want to customize the\n`AuthenticationForm` used by the `LoginView` by overriding the\n`confirm_login_allowed()` method as it rejects inactive users.\n\nUse this backend to take advantage of external-to-Django-handled\nauthentication. It authenticates using usernames passed in\n`request.META['REMOTE_USER']`. See the Authenticating against REMOTE_USER\ndocumentation.\n\nIf you need more control, you can create your own authentication backend that\ninherits from this class and override these attributes or methods:\n\n`True` or `False`. Determines whether or not a user object is created if not\nalready in the database Defaults to `True`.\n\nThe username passed as `remote_user` is considered trusted. This method\nreturns the user object with the given username, creating a new user object if\n`create_unknown_user` is `True`.\n\nReturns `None` if `create_unknown_user` is `False` and a `User` object with\nthe given username is not found in the database.\n\n`request` is an `HttpRequest` and may be `None` if it wasn\u2019t provided to\n`authenticate()` (which passes it on to the backend).\n\nPerforms any cleaning on the `username` (e.g. stripping LDAP DN information)\nprior to using it to get or create a user object. Returns the cleaned\nusername.\n\nConfigures a newly created user. This method is called immediately after a new\nuser is created, and can be used to perform custom setup actions, such as\nsetting the user\u2019s groups based on attributes in an LDAP directory. Returns\nthe user object.\n\n`request` is an `HttpRequest` and may be `None` if it wasn\u2019t provided to\n`authenticate()` (which passes it on to the backend).\n\nReturns whether the user is allowed to authenticate. This method returns\n`False` for users with `is_active=False`. Custom user models that don\u2019t have\nan `is_active` field are allowed.\n\nSame as `RemoteUserBackend` except that it doesn\u2019t reject inactive users\nbecause `user_can_authenticate` always returns `True`.\n\nReturns the user model instance associated with the given `request`\u2019s session.\n\nIt checks if the authentication backend stored in the session is present in\n`AUTHENTICATION_BACKENDS`. If so, it uses the backend\u2019s `get_user()` method to\nretrieve the user model instance and then verifies the session by calling the\nuser model\u2019s `get_session_auth_hash()` method.\n\nReturns an instance of `AnonymousUser` if the authentication backend stored in\nthe session is no longer in `AUTHENTICATION_BACKENDS`, if a user isn\u2019t\nreturned by the backend\u2019s `get_user()` method, or if the session auth hash\ndoesn\u2019t validate.\n\n"}, {"name": "django.contrib.humanize", "path": "ref/contrib/humanize", "type": "API", "text": "\nA set of Django template filters useful for adding a \u201chuman touch\u201d to data.\n\nTo activate these filters, add `'django.contrib.humanize'` to your\n`INSTALLED_APPS` setting. Once you\u2019ve done that, use `{% load humanize %}` in\na template, and you\u2019ll have access to the following filters.\n\nFor numbers 1-9, returns the number spelled out. Otherwise, returns the\nnumber. This follows Associated Press style.\n\nExamples:\n\nYou can pass in either an integer or a string representation of an integer.\n\nConverts an integer or float (or a string representation of either) to a\nstring containing commas every three digits.\n\nExamples:\n\nFormat localization will be respected if enabled, e.g. with the `'de'`\nlanguage:\n\nConverts a large integer (or a string representation of an integer) to a\nfriendly text representation. Translates `1.0` as a singular phrase and all\nother numeric values as plural, this may be incorrect for some languages.\nWorks best for numbers over 1 million.\n\nExamples:\n\nValues up to 10^100 (Googol) are supported.\n\nFormat localization will be respected if enabled, e.g. with the `'de'`\nlanguage:\n\nFor dates that are the current day or within one day, return \u201ctoday\u201d,\n\u201ctomorrow\u201d or \u201cyesterday\u201d, as appropriate. Otherwise, format the date using\nthe passed in format string.\n\nArgument: Date formatting string as described in the `date` tag.\n\nExamples (when \u2018today\u2019 is 17 Feb 2007):\n\nFor datetime values, returns a string representing how many seconds, minutes\nor hours ago it was \u2013 falling back to the `timesince` format if the value is\nmore than a day old. In case the datetime value is in the future the return\nvalue will automatically use an appropriate phrase.\n\nExamples (when \u2018now\u2019 is 17 Feb 2007 16:30:00):\n\nConverts an integer to its ordinal as a string.\n\nExamples:\n\nYou can pass in either an integer or a string representation of an integer.\n\n"}, {"name": "django.contrib.postgres", "path": "ref/contrib/postgres/index", "type": "API", "text": "\nPostgreSQL has a number of features which are not shared by the other\ndatabases Django supports. This optional module contains model fields and form\nfields for a number of PostgreSQL specific data types.\n\nNote\n\nDjango is, and will continue to be, a database-agnostic web framework. We\nwould encourage those writing reusable applications for the Django community\nto write database-agnostic code where practical. However, we recognize that\nreal world projects written using Django need not be database-agnostic. In\nfact, once a project reaches a given size changing the underlying data store\nis already a significant challenge and is likely to require changing the code\nbase in some ways to handle differences between the data stores.\n\nDjango provides support for a number of data types which will only work with\nPostgreSQL. There is no fundamental reason why (for example) a `contrib.mysql`\nmodule does not exist, except that PostgreSQL has the richest feature set of\nthe supported databases so its users have the most to gain.\n\n"}, {"name": "django.urls functions for use in URLconfs", "path": "ref/urls", "type": "API", "text": "\nReturns an element for inclusion in `urlpatterns`. For example:\n\nThe `route` argument should be a string or `gettext_lazy()` (see Translating\nURL patterns) that contains a URL pattern. The string may contain angle\nbrackets (like `<username>` above) to capture part of the URL and send it as a\nkeyword argument to the view. The angle brackets may include a converter\nspecification (like the `int` part of `<int:section>`) which limits the\ncharacters matched and may also change the type of the variable passed to the\nview. For example, `<int:section>` matches a string of decimal digits and\nconverts the value to an `int`. See How Django processes a request for more\ndetails.\n\nThe `view` argument is a view function or the result of `as_view()` for class-\nbased views. It can also be an `django.urls.include()`.\n\nThe `kwargs` argument allows you to pass additional arguments to the view\nfunction or method. See Passing extra options to view functions for an\nexample.\n\nSee Naming URL patterns for why the `name` argument is useful.\n\nReturns an element for inclusion in `urlpatterns`. For example:\n\nThe `route` argument should be a string or `gettext_lazy()` (see Translating\nURL patterns) that contains a regular expression compatible with Python\u2019s `re`\nmodule. Strings typically use raw string syntax (`r''`) so that they can\ncontain sequences like `\\d` without the need to escape the backslash with\nanother backslash. When a match is made, captured groups from the regular\nexpression are passed to the view \u2013 as named arguments if the groups are\nnamed, and as positional arguments otherwise. The values are passed as\nstrings, without any type conversion.\n\nThe `view`, `kwargs` and `name` arguments are the same as for `path()`.\n\nA function that takes a full Python import path to another URLconf module that\nshould be \u201cincluded\u201d in this place. Optionally, the application namespace and\ninstance namespace where the entries will be included into can also be\nspecified.\n\nUsually, the application namespace should be specified by the included module.\nIf an application namespace is set, the `namespace` argument can be used to\nset a different instance namespace.\n\n`include()` also accepts as an argument either an iterable that returns URL\npatterns or a 2-tuple containing such iterable plus the names of the\napplication namespaces.\n\nSee Including other URLconfs and URL namespaces and included URLconfs.\n\nThe function for registering a converter for use in `path()` `route`s.\n\nThe `converter` argument is a converter class, and `type_name` is the\nconverter name to use in path patterns. See Registering custom path converters\nfor an example.\n\nHelper function to return a URL pattern for serving files in debug mode:\n\nA callable, or a string representing the full Python import path to the view\nthat should be called if the HTTP client has sent a request that caused an\nerror condition and a response with a status code of 400.\n\nBy default, this is `django.views.defaults.bad_request()`. If you implement a\ncustom view, be sure it accepts `request` and `exception` arguments and\nreturns an `HttpResponseBadRequest`.\n\nA callable, or a string representing the full Python import path to the view\nthat should be called if the user doesn\u2019t have the permissions required to\naccess a resource.\n\nBy default, this is `django.views.defaults.permission_denied()`. If you\nimplement a custom view, be sure it accepts `request` and `exception`\narguments and returns an `HttpResponseForbidden`.\n\nA callable, or a string representing the full Python import path to the view\nthat should be called if none of the URL patterns match.\n\nBy default, this is `django.views.defaults.page_not_found()`. If you implement\na custom view, be sure it accepts `request` and `exception` arguments and\nreturns an `HttpResponseNotFound`.\n\nA callable, or a string representing the full Python import path to the view\nthat should be called in case of server errors. Server errors happen when you\nhave runtime errors in view code.\n\nBy default, this is `django.views.defaults.server_error()`. If you implement a\ncustom view, be sure it accepts a `request` argument and returns an\n`HttpResponseServerError`.\n\n"}, {"name": "django.urls utility functions", "path": "ref/urlresolvers", "type": "API", "text": "\nIf you need to use something similar to the `url` template tag in your code,\nDjango provides the following function:\n\n`viewname` can be a URL pattern name or the callable view object. For example,\ngiven the following `url`:\n\nyou can use any of the following to reverse the URL:\n\nIf the URL accepts arguments, you may pass them in `args`. For example:\n\nYou can also pass `kwargs` instead of `args`. For example:\n\n`args` and `kwargs` cannot be passed to `reverse()` at the same time.\n\nIf no match can be made, `reverse()` raises a `NoReverseMatch` exception.\n\nThe `reverse()` function can reverse a large variety of regular expression\npatterns for URLs, but not every possible one. The main restriction at the\nmoment is that the pattern cannot contain alternative choices using the\nvertical bar (`\"|\"`) character. You can quite happily use such patterns for\nmatching against incoming URLs and sending them off to views, but you cannot\nreverse such patterns.\n\nThe `current_app` argument allows you to provide a hint to the resolver\nindicating the application to which the currently executing view belongs. This\n`current_app` argument is used as a hint to resolve application namespaces\ninto URLs on specific application instances, according to the namespaced URL\nresolution strategy.\n\nThe `urlconf` argument is the URLconf module containing the URL patterns to\nuse for reversing. By default, the root URLconf for the current thread is\nused.\n\nNote\n\nThe string returned by `reverse()` is already urlquoted. For example:\n\nApplying further encoding (such as `urllib.parse.quote()`) to the output of\n`reverse()` may produce undesirable results.\n\nA lazily evaluated version of reverse().\n\nIt is useful for when you need to use a URL reversal before your project\u2019s\nURLConf is loaded. Some common cases where this function is necessary are:\n\nThe `resolve()` function can be used for resolving URL paths to the\ncorresponding view functions. It has the following signature:\n\n`path` is the URL path you want to resolve. As with `reverse()`, you don\u2019t\nneed to worry about the `urlconf` parameter. The function returns a\n`ResolverMatch` object that allows you to access various metadata about the\nresolved URL.\n\nIf the URL does not resolve, the function raises a `Resolver404` exception (a\nsubclass of `Http404`) .\n\nThe view function that would be used to serve the URL\n\nThe arguments that would be passed to the view function, as parsed from the\nURL.\n\nThe keyword arguments that would be passed to the view function, as parsed\nfrom the URL.\n\nThe name of the URL pattern that matches the URL.\n\nThe route of the matching URL pattern.\n\nFor example, if `path('users/<id>/', ...)` is the matching pattern, `route`\nwill contain `'users/<id>/'`.\n\nThe list of URL patterns tried before the URL either matched one or exhausted\navailable patterns.\n\nThe application namespace for the URL pattern that matches the URL.\n\nThe list of individual namespace components in the full application namespace\nfor the URL pattern that matches the URL. For example, if the `app_name` is\n`'foo:bar'`, then `app_names` will be `['foo', 'bar']`.\n\nThe instance namespace for the URL pattern that matches the URL.\n\nThe list of individual namespace components in the full instance namespace for\nthe URL pattern that matches the URL. i.e., if the namespace is `foo:bar`,\nthen namespaces will be `['foo', 'bar']`.\n\nThe name of the view that matches the URL, including the namespace if there is\none.\n\nA `ResolverMatch` object can then be interrogated to provide information about\nthe URL pattern that matches a URL:\n\nA `ResolverMatch` object can also be assigned to a triple:\n\nOne possible use of `resolve()` would be to test whether a view would raise a\n`Http404` error before redirecting to it:\n\nNormally, you should always use `reverse()` to define URLs within your\napplication. However, if your application constructs part of the URL hierarchy\nitself, you may occasionally need to generate URLs. In that case, you need to\nbe able to find the base URL of the Django project within its web server\n(normally, `reverse()` takes care of this for you). In that case, you can call\n`get_script_prefix()`, which will return the script prefix portion of the URL\nfor your Django project. If your Django project is at the root of its web\nserver, this is always `\"/\"`.\n\n"}, {"name": "Django\u2019s cache framework", "path": "topics/cache", "type": "Guides", "text": "\nA fundamental trade-off in dynamic websites is, well, they\u2019re dynamic. Each\ntime a user requests a page, the web server makes all sorts of calculations \u2013\nfrom database queries to template rendering to business logic \u2013 to create the\npage that your site\u2019s visitor sees. This is a lot more expensive, from a\nprocessing-overhead perspective, than your standard read-a-file-off-the-\nfilesystem server arrangement.\n\nFor most web applications, this overhead isn\u2019t a big deal. Most web\napplications aren\u2019t `washingtonpost.com` or `slashdot.org`; they\u2019re small- to\nmedium-sized sites with so-so traffic. But for medium- to high-traffic sites,\nit\u2019s essential to cut as much overhead as possible.\n\nThat\u2019s where caching comes in.\n\nTo cache something is to save the result of an expensive calculation so that\nyou don\u2019t have to perform the calculation next time. Here\u2019s some pseudocode\nexplaining how this would work for a dynamically generated web page:\n\nDjango comes with a robust cache system that lets you save dynamic pages so\nthey don\u2019t have to be calculated for each request. For convenience, Django\noffers different levels of cache granularity: You can cache the output of\nspecific views, you can cache only the pieces that are difficult to produce,\nor you can cache your entire site.\n\nDjango also works well with \u201cdownstream\u201d caches, such as Squid and browser-\nbased caches. These are the types of caches that you don\u2019t directly control\nbut to which you can provide hints (via HTTP headers) about which parts of\nyour site should be cached, and how.\n\nSee also\n\nThe Cache Framework design philosophy explains a few of the design decisions\nof the framework.\n\nThe cache system requires a small amount of setup. Namely, you have to tell it\nwhere your cached data should live \u2013 whether in a database, on the filesystem\nor directly in memory. This is an important decision that affects your cache\u2019s\nperformance; yes, some cache types are faster than others.\n\nYour cache preference goes in the `CACHES` setting in your settings file.\nHere\u2019s an explanation of all available values for `CACHES`.\n\nMemcached is an entirely memory-based cache server, originally developed to\nhandle high loads at LiveJournal.com and subsequently open-sourced by Danga\nInteractive. It is used by sites such as Facebook and Wikipedia to reduce\ndatabase access and dramatically increase site performance.\n\nMemcached runs as a daemon and is allotted a specified amount of RAM. All it\ndoes is provide a fast interface for adding, retrieving and deleting data in\nthe cache. All data is stored directly in memory, so there\u2019s no overhead of\ndatabase or filesystem usage.\n\nAfter installing Memcached itself, you\u2019ll need to install a Memcached binding.\nThere are several Python Memcached bindings available; the two supported by\nDjango are pylibmc and pymemcache.\n\nTo use Memcached with Django:\n\nIn this example, Memcached is running on localhost (127.0.0.1) port 11211,\nusing the `pymemcache` binding:\n\nIn this example, Memcached is available through a local Unix socket file\n`/tmp/memcached.sock` using the `pymemcache` binding:\n\nOne excellent feature of Memcached is its ability to share a cache over\nmultiple servers. This means you can run Memcached daemons on multiple\nmachines, and the program will treat the group of machines as a single cache,\nwithout the need to duplicate cache values on each machine. To take advantage\nof this feature, include all server addresses in `LOCATION`, either as a\nsemicolon or comma delimited string, or as a list.\n\nIn this example, the cache is shared over Memcached instances running on IP\naddress 172.19.26.240 and 172.19.26.242, both on port 11211:\n\nIn the following example, the cache is shared over Memcached instances running\non the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port 11212),\nand 172.19.26.244 (port 11213):\n\nA final point about Memcached is that memory-based caching has a disadvantage:\nbecause the cached data is stored in memory, the data will be lost if your\nserver crashes. Clearly, memory isn\u2019t intended for permanent data storage, so\ndon\u2019t rely on memory-based caching as your only data storage. Without a doubt,\nnone of the Django caching backends should be used for permanent storage \u2013\nthey\u2019re all intended to be solutions for caching, not storage \u2013 but we point\nthis out here because memory-based caching is particularly temporary.\n\nThe `PyMemcacheCache` backend was added.\n\nDeprecated since version 3.2: The `MemcachedCache` backend is deprecated as\n`python-memcached` has some problems and seems to be unmaintained. Use\n`PyMemcacheCache` or `PyLibMCCache` instead.\n\nRedis is an in-memory database that can be used for caching. To begin you\u2019ll\nneed a Redis server running either locally or on a remote machine.\n\nAfter setting up the Redis server, you\u2019ll need to install Python bindings for\nRedis. redis-py is the binding supported natively by Django. Installing the\nadditional hiredis-py package is also recommended.\n\nTo use Redis as your cache backend with Django:\n\nFor example, if Redis is running on localhost (127.0.0.1) port 6379:\n\nOften Redis servers are protected with authentication. In order to supply a\nusername and password, add them in the `LOCATION` along with the URL:\n\nIf you have multiple Redis servers set up in the replication mode, you can\nspecify the servers either as a semicolon or comma delimited string, or as a\nlist. While using multiple servers, write operations are performed on the\nfirst server (leader). Read operations are performed on the other servers\n(replicas) chosen at random:\n\nDjango can store its cached data in your database. This works best if you\u2019ve\ngot a fast, well-indexed database server.\n\nTo use a database table as your cache backend:\n\nIn this example, the cache table\u2019s name is `my_cache_table`:\n\nUnlike other cache backends, the database cache does not support automatic\nculling of expired entries at the database level. Instead, expired cache\nentries are culled each time `add()`, `set()`, or `touch()` is called.\n\nBefore using the database cache, you must create the cache table with this\ncommand:\n\nThis creates a table in your database that is in the proper format that\nDjango\u2019s database-cache system expects. The name of the table is taken from\n`LOCATION`.\n\nIf you are using multiple database caches, `createcachetable` creates one\ntable for each cache.\n\nIf you are using multiple databases, `createcachetable` observes the\n`allow_migrate()` method of your database routers (see below).\n\nLike `migrate`, `createcachetable` won\u2019t touch an existing table. It will only\ncreate missing tables.\n\nTo print the SQL that would be run, rather than run it, use the\n`createcachetable --dry-run` option.\n\nIf you use database caching with multiple databases, you\u2019ll also need to set\nup routing instructions for your database cache table. For the purposes of\nrouting, the database cache table appears as a model named `CacheEntry`, in an\napplication named `django_cache`. This model won\u2019t appear in the models cache,\nbut the model details can be used for routing purposes.\n\nFor example, the following router would direct all cache read operations to\n`cache_replica`, and all write operations to `cache_primary`. The cache table\nwill only be synchronized onto `cache_primary`:\n\nIf you don\u2019t specify routing directions for the database cache model, the\ncache backend will use the `default` database.\n\nAnd if you don\u2019t use the database cache backend, you don\u2019t need to worry about\nproviding routing instructions for the database cache model.\n\nThe file-based backend serializes and stores each cache value as a separate\nfile. To use this backend set `BACKEND` to\n`\"django.core.cache.backends.filebased.FileBasedCache\"` and `LOCATION` to a\nsuitable directory. For example, to store cached data in\n`/var/tmp/django_cache`, use this setting:\n\nIf you\u2019re on Windows, put the drive letter at the beginning of the path, like\nthis:\n\nThe directory path should be absolute \u2013 that is, it should start at the root\nof your filesystem. It doesn\u2019t matter whether you put a slash at the end of\nthe setting.\n\nMake sure the directory pointed-to by this setting either exists and is\nreadable and writable, or that it can be created by the system user under\nwhich your web server runs. Continuing the above example, if your server runs\nas the user `apache`, make sure the directory `/var/tmp/django_cache` exists\nand is readable and writable by the user `apache`, or that it can be created\nby the user `apache`.\n\nWarning\n\nWhen the cache `LOCATION` is contained within `MEDIA_ROOT`, `STATIC_ROOT`, or\n`STATICFILES_FINDERS`, sensitive data may be exposed.\n\nAn attacker who gains access to the cache file can not only falsify HTML\ncontent, which your site will trust, but also remotely execute arbitrary code,\nas the data is serialized using `pickle`.\n\nThis is the default cache if another is not specified in your settings file.\nIf you want the speed advantages of in-memory caching but don\u2019t have the\ncapability of running Memcached, consider the local-memory cache backend. This\ncache is per-process (see below) and thread-safe. To use it, set `BACKEND` to\n`\"django.core.cache.backends.locmem.LocMemCache\"`. For example:\n\nThe cache `LOCATION` is used to identify individual memory stores. If you only\nhave one `locmem` cache, you can omit the `LOCATION`; however, if you have\nmore than one local memory cache, you will need to assign a name to at least\none of them in order to keep them separate.\n\nThe cache uses a least-recently-used (LRU) culling strategy.\n\nNote that each process will have its own private cache instance, which means\nno cross-process caching is possible. This also means the local memory cache\nisn\u2019t particularly memory-efficient, so it\u2019s probably not a good choice for\nproduction environments. It\u2019s nice for development.\n\nFinally, Django comes with a \u201cdummy\u201d cache that doesn\u2019t actually cache \u2013 it\njust implements the cache interface without doing anything.\n\nThis is useful if you have a production site that uses heavy-duty caching in\nvarious places but a development/test environment where you don\u2019t want to\ncache and don\u2019t want to have to change your code to special-case the latter.\nTo activate dummy caching, set `BACKEND` like so:\n\nWhile Django includes support for a number of cache backends out-of-the-box,\nsometimes you might want to use a customized cache backend. To use an external\ncache backend with Django, use the Python import path as the `BACKEND` of the\n`CACHES` setting, like so:\n\nIf you\u2019re building your own backend, you can use the standard cache backends\nas reference implementations. You\u2019ll find the code in the\n`django/core/cache/backends/` directory of the Django source.\n\nNote: Without a really compelling reason, such as a host that doesn\u2019t support\nthem, you should stick to the cache backends included with Django. They\u2019ve\nbeen well-tested and are well-documented.\n\nEach cache backend can be given additional arguments to control caching\nbehavior. These arguments are provided as additional keys in the `CACHES`\nsetting. Valid arguments are as follows:\n\n`OPTIONS`: Any options that should be passed to the cache backend. The list of\nvalid options will vary with each backend, and cache backends backed by a\nthird-party library will pass their options directly to the underlying cache\nlibrary.\n\nCache backends that implement their own culling strategy (i.e., the `locmem`,\n`filesystem` and `database` backends) will honor the following options:\n\n`CULL_FREQUENCY`: The fraction of entries that are culled when `MAX_ENTRIES`\nis reached. The actual ratio is `1 / CULL_FREQUENCY`, so set `CULL_FREQUENCY`\nto `2` to cull half the entries when `MAX_ENTRIES` is reached. This argument\nshould be an integer and defaults to `3`.\n\nA value of `0` for `CULL_FREQUENCY` means that the entire cache will be dumped\nwhen `MAX_ENTRIES` is reached. On some backends (`database` in particular)\nthis makes culling much faster at the expense of more cache misses.\n\nThe Memcached and Redis backends pass the contents of `OPTIONS` as keyword\narguments to the client constructors, allowing for more advanced control of\nclient behavior. For example usage, see below.\n\n`KEY_PREFIX`: A string that will be automatically included (prepended by\ndefault) to all cache keys used by the Django server.\n\nSee the cache documentation for more information.\n\n`VERSION`: The default version number for cache keys generated by the Django\nserver.\n\nSee the cache documentation for more information.\n\n`KEY_FUNCTION` A string containing a dotted path to a function that defines\nhow to compose a prefix, version and key into a final cache key.\n\nSee the cache documentation for more information.\n\nIn this example, a filesystem backend is being configured with a timeout of 60\nseconds, and a maximum capacity of 1000 items:\n\nHere\u2019s an example configuration for a `pylibmc` based backend that enables the\nbinary protocol, SASL authentication, and the `ketama` behavior mode:\n\nHere\u2019s an example configuration for a `pymemcache` based backend that enables\nclient pooling (which may improve performance by keeping clients connected),\ntreats memcache/network errors as cache misses, and sets the `TCP_NODELAY`\nflag on the connection\u2019s socket:\n\nHere\u2019s an example configuration for a `redis` based backend that selects\ndatabase `10` (by default Redis ships with 16 logical databases), specifies a\nparser class (`redis.connection.HiredisParser` will be used by default if the\n`hiredis-py` package is installed), and sets a custom connection pool class\n(`redis.ConnectionPool` is used by default):\n\nOnce the cache is set up, the simplest way to use caching is to cache your\nentire site. You\u2019ll need to add\n`'django.middleware.cache.UpdateCacheMiddleware'` and\n`'django.middleware.cache.FetchFromCacheMiddleware'` to your `MIDDLEWARE`\nsetting, as in this example:\n\nNote\n\nNo, that\u2019s not a typo: the \u201cupdate\u201d middleware must be first in the list, and\nthe \u201cfetch\u201d middleware must be last. The details are a bit obscure, but see\nOrder of MIDDLEWARE below if you\u2019d like the full story.\n\nThen, add the following required settings to your Django settings file:\n\n`FetchFromCacheMiddleware` caches GET and HEAD responses with status 200,\nwhere the request and response headers allow. Responses to requests for the\nsame URL with different query parameters are considered to be unique pages and\nare cached separately. This middleware expects that a HEAD request is answered\nwith the same response headers as the corresponding GET request; in which case\nit can return a cached GET response for HEAD request.\n\nAdditionally, `UpdateCacheMiddleware` automatically sets a few headers in each\n`HttpResponse` which affect downstream caches:\n\nSee Middleware for more on middleware.\n\nIf a view sets its own cache expiry time (i.e. it has a `max-age` section in\nits `Cache-Control` header) then the page will be cached until the expiry\ntime, rather than `CACHE_MIDDLEWARE_SECONDS`. Using the decorators in\n`django.views.decorators.cache` you can easily set a view\u2019s expiry time (using\nthe `cache_control()` decorator) or disable caching for a view (using the\n`never_cache()` decorator). See the using other headers section for more on\nthese decorators.\n\nIf `USE_I18N` is set to `True` then the generated cache key will include the\nname of the active language \u2013 see also How Django discovers language\npreference). This allows you to easily cache multilingual sites without having\nto create the cache key yourself.\n\nCache keys also include the current time zone when `USE_TZ` is set to `True`.\n\nA more granular way to use the caching framework is by caching the output of\nindividual views. `django.views.decorators.cache` defines a `cache_page`\ndecorator that will automatically cache the view\u2019s response for you:\n\n`cache_page` takes a single argument: the cache timeout, in seconds. In the\nabove example, the result of the `my_view()` view will be cached for 15\nminutes. (Note that we\u2019ve written it as `60 * 15` for the purpose of\nreadability. `60 * 15` will be evaluated to `900` \u2013 that is, 15 minutes\nmultiplied by 60 seconds per minute.)\n\nThe cache timeout set by `cache_page` takes precedence over the `max-age`\ndirective from the `Cache-Control` header.\n\nThe per-view cache, like the per-site cache, is keyed off of the URL. If\nmultiple URLs point at the same view, each URL will be cached separately.\nContinuing the `my_view` example, if your URLconf looks like this:\n\nthen requests to `/foo/1/` and `/foo/23/` will be cached separately, as you\nmay expect. But once a particular URL (e.g., `/foo/23/`) has been requested,\nsubsequent requests to that URL will use the cache.\n\n`cache_page` can also take an optional keyword argument, `cache`, which\ndirects the decorator to use a specific cache (from your `CACHES` setting)\nwhen caching view results. By default, the `default` cache will be used, but\nyou can specify any cache you want:\n\nYou can also override the cache prefix on a per-view basis. `cache_page` takes\nan optional keyword argument, `key_prefix`, which works in the same way as the\n`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the middleware. It can be used like\nthis:\n\nThe `key_prefix` and `cache` arguments may be specified together. The\n`key_prefix` argument and the `KEY_PREFIX` specified under `CACHES` will be\nconcatenated.\n\nAdditionally, `cache_page` automatically sets `Cache-Control` and `Expires`\nheaders in the response which affect downstream caches.\n\nThe examples in the previous section have hard-coded the fact that the view is\ncached, because `cache_page` alters the `my_view` function in place. This\napproach couples your view to the cache system, which is not ideal for several\nreasons. For instance, you might want to reuse the view functions on another,\ncache-less site, or you might want to distribute the views to people who might\nwant to use them without being cached. The solution to these problems is to\nspecify the per-view cache in the URLconf rather than next to the view\nfunctions themselves.\n\nYou can do so by wrapping the view function with `cache_page` when you refer\nto it in the URLconf. Here\u2019s the old URLconf from earlier:\n\nHere\u2019s the same thing, with `my_view` wrapped in `cache_page`:\n\nIf you\u2019re after even more control, you can also cache template fragments using\nthe `cache` template tag. To give your template access to this tag, put `{%\nload cache %}` near the top of your template.\n\nThe `{% cache %}` template tag caches the contents of the block for a given\namount of time. It takes at least two arguments: the cache timeout, in\nseconds, and the name to give the cache fragment. The fragment is cached\nforever if timeout is `None`. The name will be taken as is, do not use a\nvariable. For example:\n\nSometimes you might want to cache multiple copies of a fragment depending on\nsome dynamic data that appears inside the fragment. For example, you might\nwant a separate cached copy of the sidebar used in the previous example for\nevery user of your site. Do this by passing one or more additional arguments,\nwhich may be variables with or without filters, to the `{% cache %}` template\ntag to uniquely identify the cache fragment:\n\nIf `USE_I18N` is set to `True` the per-site middleware cache will respect the\nactive language. For the `cache` template tag you could use one of the\ntranslation-specific variables available in templates to achieve the same\nresult:\n\nThe cache timeout can be a template variable, as long as the template variable\nresolves to an integer value. For example, if the template variable\n`my_timeout` is set to the value `600`, then the following two examples are\nequivalent:\n\nThis feature is useful in avoiding repetition in templates. You can set the\ntimeout in a variable, in one place, and reuse that value.\n\nBy default, the cache tag will try to use the cache called\n\u201ctemplate_fragments\u201d. If no such cache exists, it will fall back to using the\ndefault cache. You may select an alternate cache backend to use with the\n`using` keyword argument, which must be the last argument to the tag.\n\nIt is considered an error to specify a cache name that is not configured.\n\nIf you want to obtain the cache key used for a cached fragment, you can use\n`make_template_fragment_key`. `fragment_name` is the same as second argument\nto the `cache` template tag; `vary_on` is a list of all additional arguments\npassed to the tag. This function can be useful for invalidating or overwriting\na cached item, for example:\n\nSometimes, caching an entire rendered page doesn\u2019t gain you very much and is,\nin fact, inconvenient overkill.\n\nPerhaps, for instance, your site includes a view whose results depend on\nseveral expensive queries, the results of which change at different intervals.\nIn this case, it would not be ideal to use the full-page caching that the per-\nsite or per-view cache strategies offer, because you wouldn\u2019t want to cache\nthe entire result (since some of the data changes often), but you\u2019d still want\nto cache the results that rarely change.\n\nFor cases like this, Django exposes a low-level cache API. You can use this\nAPI to store objects in the cache with any level of granularity you like. You\ncan cache any Python object that can be pickled safely: strings, dictionaries,\nlists of model objects, and so forth. (Most common Python objects can be\npickled; refer to the Python documentation for more information about\npickling.)\n\nYou can access the caches configured in the `CACHES` setting through a dict-\nlike object: `django.core.cache.caches`. Repeated requests for the same alias\nin the same thread will return the same object.\n\nIf the named key does not exist, `InvalidCacheBackendError` will be raised.\n\nTo provide thread-safety, a different instance of the cache backend will be\nreturned for each thread.\n\nAs a shortcut, the default cache is available as `django.core.cache.cache`:\n\nThis object is equivalent to `caches['default']`.\n\nThe basic interface is:\n\n`key` should be a `str`, and `value` can be any picklable Python object.\n\nThe `timeout` argument is optional and defaults to the `timeout` argument of\nthe appropriate backend in the `CACHES` setting (explained above). It\u2019s the\nnumber of seconds the value should be stored in the cache. Passing in `None`\nfor `timeout` will cache the value forever. A `timeout` of `0` won\u2019t cache the\nvalue.\n\nIf the object doesn\u2019t exist in the cache, `cache.get()` returns `None`:\n\nIf you need to determine whether the object exists in the cache and you have\nstored a literal value `None`, use a sentinel object as the default:\n\n`MemcachedCache`\n\nDue to a `python-memcached` limitation, it\u2019s not possible to distinguish\nbetween stored `None` value and a cache miss signified by a return value of\n`None` on the deprecated `MemcachedCache` backend.\n\n`cache.get()` can take a `default` argument. This specifies which value to\nreturn if the object doesn\u2019t exist in the cache:\n\nTo add a key only if it doesn\u2019t already exist, use the `add()` method. It\ntakes the same parameters as `set()`, but it will not attempt to update the\ncache if the key specified is already present:\n\nIf you need to know whether `add()` stored a value in the cache, you can check\nthe return value. It will return `True` if the value was stored, `False`\notherwise.\n\nIf you want to get a key\u2019s value or set a value if the key isn\u2019t in the cache,\nthere is the `get_or_set()` method. It takes the same parameters as `get()`\nbut the default is set as the new cache value for that key, rather than\nreturned:\n\nYou can also pass any callable as a default value:\n\nThere\u2019s also a `get_many()` interface that only hits the cache once.\n`get_many()` returns a dictionary with all the keys you asked for that\nactually exist in the cache (and haven\u2019t expired):\n\nTo set multiple values more efficiently, use `set_many()` to pass a dictionary\nof key-value pairs:\n\nLike `cache.set()`, `set_many()` takes an optional `timeout` parameter.\n\nOn supported backends (memcached), `set_many()` returns a list of keys that\nfailed to be inserted.\n\nYou can delete keys explicitly with `delete()` to clear the cache for a\nparticular object:\n\n`delete()` returns `True` if the key was successfully deleted, `False`\notherwise.\n\nIf you want to clear a bunch of keys at once, `delete_many()` can take a list\nof keys to be cleared:\n\nFinally, if you want to delete all the keys in the cache, use `cache.clear()`.\nBe careful with this; `clear()` will remove everything from the cache, not\njust the keys set by your application.\n\n`cache.touch()` sets a new expiration for a key. For example, to update a key\nto expire 10 seconds from now:\n\nLike other methods, the `timeout` argument is optional and defaults to the\n`TIMEOUT` option of the appropriate backend in the `CACHES` setting.\n\n`touch()` returns `True` if the key was successfully touched, `False`\notherwise.\n\nYou can also increment or decrement a key that already exists using the\n`incr()` or `decr()` methods, respectively. By default, the existing cache\nvalue will be incremented or decremented by 1. Other increment/decrement\nvalues can be specified by providing an argument to the increment/decrement\ncall. A ValueError will be raised if you attempt to increment or decrement a\nnonexistent cache key.:\n\nNote\n\n`incr()`/`decr()` methods are not guaranteed to be atomic. On those backends\nthat support atomic increment/decrement (most notably, the memcached backend),\nincrement and decrement operations will be atomic. However, if the backend\ndoesn\u2019t natively provide an increment/decrement operation, it will be\nimplemented using a two-step retrieve/update.\n\nYou can close the connection to your cache with `close()` if implemented by\nthe cache backend.\n\nNote\n\nFor caches that don\u2019t implement `close` methods it is a no-op.\n\nNote\n\nThe async variants of base methods are prefixed with `a`, e.g. `cache.aadd()`\nor `cache.adelete_many()`. See Asynchronous support for more details.\n\nThe async variants of methods were added to the `BaseCache`.\n\nIf you are sharing a cache instance between servers, or between your\nproduction and development environments, it\u2019s possible for data cached by one\nserver to be used by another server. If the format of cached data is different\nbetween servers, this can lead to some very hard to diagnose problems.\n\nTo prevent this, Django provides the ability to prefix all cache keys used by\na server. When a particular cache key is saved or retrieved, Django will\nautomatically prefix the cache key with the value of the `KEY_PREFIX` cache\nsetting.\n\nBy ensuring each Django instance has a different `KEY_PREFIX`, you can ensure\nthat there will be no collisions in cache values.\n\nWhen you change running code that uses cached values, you may need to purge\nany existing cached values. The easiest way to do this is to flush the entire\ncache, but this can lead to the loss of cache values that are still valid and\nuseful.\n\nDjango provides a better way to target individual cache values. Django\u2019s cache\nframework has a system-wide version identifier, specified using the `VERSION`\ncache setting. The value of this setting is automatically combined with the\ncache prefix and the user-provided cache key to obtain the final cache key.\n\nBy default, any key request will automatically include the site default cache\nkey version. However, the primitive cache functions all include a `version`\nargument, so you can specify a particular cache key version to set or get. For\nexample:\n\nThe version of a specific key can be incremented and decremented using the\n`incr_version()` and `decr_version()` methods. This enables specific keys to\nbe bumped to a new version, leaving other keys unaffected. Continuing our\nprevious example:\n\nAs described in the previous two sections, the cache key provided by a user is\nnot used verbatim \u2013 it is combined with the cache prefix and key version to\nprovide a final cache key. By default, the three parts are joined using colons\nto produce a final string:\n\nIf you want to combine the parts in different ways, or apply other processing\nto the final key (e.g., taking a hash digest of the key parts), you can\nprovide a custom key function.\n\nThe `KEY_FUNCTION` cache setting specifies a dotted-path to a function\nmatching the prototype of `make_key()` above. If provided, this custom key\nfunction will be used instead of the default key combining function.\n\nMemcached, the most commonly-used production cache backend, does not allow\ncache keys longer than 250 characters or containing whitespace or control\ncharacters, and using such keys will cause an exception. To encourage cache-\nportable code and minimize unpleasant surprises, the other built-in cache\nbackends issue a warning (`django.core.cache.backends.base.CacheKeyWarning`)\nif a key is used that would cause an error on memcached.\n\nIf you are using a production backend that can accept a wider range of keys (a\ncustom backend, or one of the non-memcached built-in backends), and want to\nuse this wider range without warnings, you can silence `CacheKeyWarning` with\nthis code in the `management` module of one of your `INSTALLED_APPS`:\n\nIf you want to instead provide custom key validation logic for one of the\nbuilt-in backends, you can subclass it, override just the `validate_key`\nmethod, and follow the instructions for using a custom cache backend. For\ninstance, to do this for the `locmem` backend, put this code in a module:\n\n\u2026and use the dotted Python path to this class in the `BACKEND` portion of your\n`CACHES` setting.\n\nDjango has developing support for asynchronous cache backends, but does not\nyet support asynchronous caching. It will be coming in a future release.\n\n`django.core.cache.backends.base.BaseCache` has async variants of all base\nmethods. By convention, the asynchronous versions of all methods are prefixed\nwith `a`. By default, the arguments for both variants are the same:\n\nSo far, this document has focused on caching your own data. But another type\nof caching is relevant to web development, too: caching performed by\n\u201cdownstream\u201d caches. These are systems that cache pages for users even before\nthe request reaches your website.\n\nHere are a few examples of downstream caches:\n\nDownstream caching is a nice efficiency boost, but there\u2019s a danger to it:\nMany web pages\u2019 contents differ based on authentication and a host of other\nvariables, and cache systems that blindly save pages based purely on URLs\ncould expose incorrect or sensitive data to subsequent visitors to those\npages.\n\nFor example, if you operate a web email system, then the contents of the\n\u201cinbox\u201d page depend on which user is logged in. If an ISP blindly cached your\nsite, then the first user who logged in through that ISP would have their\nuser-specific inbox page cached for subsequent visitors to the site. That\u2019s\nnot cool.\n\nFortunately, HTTP provides a solution to this problem. A number of HTTP\nheaders exist to instruct downstream caches to differ their cache contents\ndepending on designated variables, and to tell caching mechanisms not to cache\nparticular pages. We\u2019ll look at some of these headers in the sections that\nfollow.\n\nThe `Vary` header defines which request headers a cache mechanism should take\ninto account when building its cache key. For example, if the contents of a\nweb page depend on a user\u2019s language preference, the page is said to \u201cvary on\nlanguage.\u201d\n\nBy default, Django\u2019s cache system creates its cache keys using the requested\nfully-qualified URL \u2013 e.g.,\n`\"https://www.example.com/stories/2005/?order_by=author\"`. This means every\nrequest to that URL will use the same cached version, regardless of user-agent\ndifferences such as cookies or language preferences. However, if this page\nproduces different content based on some difference in request headers \u2013 such\nas a cookie, or a language, or a user-agent \u2013 you\u2019ll need to use the `Vary`\nheader to tell caching mechanisms that the page output depends on those\nthings.\n\nTo do this in Django, use the convenient\n`django.views.decorators.vary.vary_on_headers()` view decorator, like so:\n\nIn this case, a caching mechanism (such as Django\u2019s own cache middleware) will\ncache a separate version of the page for each unique user-agent.\n\nThe advantage to using the `vary_on_headers` decorator rather than manually\nsetting the `Vary` header (using something like `response.headers['Vary'] =\n'user-agent'`) is that the decorator adds to the `Vary` header (which may\nalready exist), rather than setting it from scratch and potentially overriding\nanything that was already in there.\n\nYou can pass multiple headers to `vary_on_headers()`:\n\nThis tells downstream caches to vary on both, which means each combination of\nuser-agent and cookie will get its own cache value. For example, a request\nwith the user-agent `Mozilla` and the cookie value `foo=bar` will be\nconsidered different from a request with the user-agent `Mozilla` and the\ncookie value `foo=ham`.\n\nBecause varying on cookie is so common, there\u2019s a\n`django.views.decorators.vary.vary_on_cookie()` decorator. These two views are\nequivalent:\n\nThe headers you pass to `vary_on_headers` are not case sensitive; `\"User-\nAgent\"` is the same thing as `\"user-agent\"`.\n\nYou can also use a helper function, `django.utils.cache.patch_vary_headers()`,\ndirectly. This function sets, or adds to, the `Vary header`. For example:\n\n`patch_vary_headers` takes an `HttpResponse` instance as its first argument\nand a list/tuple of case-insensitive header names as its second argument.\n\nFor more on Vary headers, see the official Vary spec.\n\nOther problems with caching are the privacy of data and the question of where\ndata should be stored in a cascade of caches.\n\nA user usually faces two kinds of caches: their own browser cache (a private\ncache) and their provider\u2019s cache (a public cache). A public cache is used by\nmultiple users and controlled by someone else. This poses problems with\nsensitive data\u2013you don\u2019t want, say, your bank account number stored in a\npublic cache. So web applications need a way to tell caches which data is\nprivate and which is public.\n\nThe solution is to indicate a page\u2019s cache should be \u201cprivate.\u201d To do this in\nDjango, use the `cache_control()` view decorator. Example:\n\nThis decorator takes care of sending out the appropriate HTTP header behind\nthe scenes.\n\nNote that the cache control settings \u201cprivate\u201d and \u201cpublic\u201d are mutually\nexclusive. The decorator ensures that the \u201cpublic\u201d directive is removed if\n\u201cprivate\u201d should be set (and vice versa). An example use of the two directives\nwould be a blog site that offers both private and public entries. Public\nentries may be cached on any shared cache. The following code uses\n`patch_cache_control()`, the manual way to modify the cache control header (it\nis internally called by the `cache_control()` decorator):\n\nYou can control downstream caches in other ways as well (see RFC 7234 for\ndetails on HTTP caching). For example, even if you don\u2019t use Django\u2019s server-\nside cache framework, you can still tell clients to cache a view for a certain\namount of time with the max-age directive:\n\n(If you do use the caching middleware, it already sets the `max-age` with the\nvalue of the `CACHE_MIDDLEWARE_SECONDS` setting. In that case, the custom\n`max_age` from the `cache_control()` decorator will take precedence, and the\nheader values will be merged correctly.)\n\nAny valid `Cache-Control` response directive is valid in `cache_control()`.\nHere are some more examples:\n\nThe full list of known directives can be found in the IANA registry (note that\nnot all of them apply to responses).\n\nIf you want to use headers to disable caching altogether, `never_cache()` is a\nview decorator that adds headers to ensure the response won\u2019t be cached by\nbrowsers or other caches. Example:\n\nIf you use caching middleware, it\u2019s important to put each half in the right\nplace within the `MIDDLEWARE` setting. That\u2019s because the cache middleware\nneeds to know which headers by which to vary the cache storage. Middleware\nalways adds something to the `Vary` response header when it can.\n\n`UpdateCacheMiddleware` runs during the response phase, where middleware is\nrun in reverse order, so an item at the top of the list runs last during the\nresponse phase. Thus, you need to make sure that `UpdateCacheMiddleware`\nappears before any other middleware that might add something to the `Vary`\nheader. The following middleware modules do so:\n\n`FetchFromCacheMiddleware`, on the other hand, runs during the request phase,\nwhere middleware is applied first-to-last, so an item at the top of the list\nruns first during the request phase. The `FetchFromCacheMiddleware` also needs\nto run after other middleware updates the `Vary` header, so\n`FetchFromCacheMiddleware` must be after any item that does so.\n\n"}, {"name": "Editing mixins", "path": "ref/class-based-views/mixins-editing", "type": "API", "text": "\nThe following mixins are used to construct Django\u2019s editing views:\n\nNote\n\nExamples of how these are combined into editing views can be found at the\ndocumentation on Generic editing views.\n\nA mixin class that provides facilities for creating and displaying forms.\n\nMixins\n\nMethods and Attributes\n\nA dictionary containing initial data for the form.\n\nThe form class to instantiate.\n\nThe URL to redirect to when the form is successfully processed.\n\nThe `prefix` for the generated form.\n\nRetrieve initial data for the form. By default, returns a copy of `initial`.\n\nRetrieve the form class to instantiate. By default `form_class`.\n\nInstantiate an instance of `form_class` using `get_form_kwargs()`. If\n`form_class` isn\u2019t provided `get_form_class()` will be used.\n\nBuild the keyword arguments required to instantiate the form.\n\nThe `initial` argument is set to `get_initial()`. If the request is a `POST`\nor `PUT`, the request data (`request.POST` and `request.FILES`) will also be\nprovided.\n\nDetermine the `prefix` for the generated form. Returns `prefix` by default.\n\nDetermine the URL to redirect to when the form is successfully validated.\nReturns `success_url` by default.\n\nRedirects to `get_success_url()`.\n\nRenders a response, providing the invalid form as context.\n\nCalls `get_form()` and adds the result to the context data with the name\n\u2018form\u2019.\n\nA form mixin that works on `ModelForms`, rather than a standalone form.\n\nSince this is a subclass of `SingleObjectMixin`, instances of this mixin have\naccess to the `model` and `queryset` attributes, describing the type of object\nthat the `ModelForm` is manipulating.\n\nIf you specify both the `fields` and `form_class` attributes, an\n`ImproperlyConfigured` exception will be raised.\n\nMixins\n\nMethods and Attributes\n\nA model class. Can be explicitly provided, otherwise will be determined by\nexamining `self.object` or `queryset`.\n\nA list of names of fields. This is interpreted the same way as the\n`Meta.fields` attribute of `ModelForm`.\n\nThis is a required attribute if you are generating the form class\nautomatically (e.g. using `model`). Omitting this attribute will result in an\n`ImproperlyConfigured` exception.\n\nThe URL to redirect to when the form is successfully processed.\n\n`success_url` may contain dictionary string formatting, which will be\ninterpolated against the object\u2019s field attributes. For example, you could use\n`success_url=\"/polls/{slug}/\"` to redirect to a URL composed out of the `slug`\nfield on a model.\n\nRetrieve the form class to instantiate. If `form_class` is provided, that\nclass will be used. Otherwise, a `ModelForm` will be instantiated using the\nmodel associated with the `queryset`, or with the `model`, depending on which\nattribute is provided.\n\nAdd the current instance (`self.object`) to the standard `get_form_kwargs()`.\n\nDetermine the URL to redirect to when the form is successfully validated.\nReturns `django.views.generic.edit.ModelFormMixin.success_url` if it is\nprovided; otherwise, attempts to use the `get_absolute_url()` of the object.\n\nSaves the form instance, sets the current object for the view, and redirects\nto `get_success_url()`.\n\nRenders a response, providing the invalid form as context.\n\nA mixin that provides basic HTTP GET and POST workflow.\n\nNote\n\nThis is named \u2018ProcessFormView\u2019 and inherits directly from\n`django.views.generic.base.View`, but breaks if used independently, so it is\nmore of a mixin.\n\nExtends\n\nMethods and Attributes\n\nRenders a response using a context created with `get_context_data()`.\n\nConstructs a form, checks the form for validity, and handles it accordingly.\n\nThe `PUT` action is also handled and passes all parameters through to\n`post()`.\n\nEnables handling of the `DELETE` HTTP action.\n\nMethods and Attributes\n\nThe url to redirect to when the nominated object has been successfully\ndeleted.\n\n`success_url` may contain dictionary string formatting, which will be\ninterpolated against the object\u2019s field attributes. For example, you could use\n`success_url=\"/parent/{parent_id}/\"` to redirect to a URL composed out of the\n`parent_id` field on a model.\n\nRetrieves the target object and calls its `delete()` method, then redirects to\nthe success URL.\n\nReturns the url to redirect to when the nominated object has been successfully\ndeleted. Returns `success_url` by default.\n\n"}, {"name": "Examples of model relationship API usage", "path": "topics/db/examples/index", "type": "Guides", "text": "\n\n"}, {"name": "External packages", "path": "topics/external-packages", "type": "Guides", "text": "\nDjango ships with a variety of extra, optional tools that solve common\nproblems (`contrib.*`). For easier maintenance and to trim the size of the\ncodebase, a few of those applications have been moved out to separate\nprojects.\n\n`django-localflavor` is a collection of utilities for particular countries and\ncultures.\n\n`django-contrib-comments` can be used to attach comments to any model, so you\ncan use it for comments on blog entries, photos, book chapters, or anything\nelse. Most users will be better served with a custom solution, or a hosted\nproduct like Disqus.\n\n`django-formtools` is a collection of assorted utilities to work with forms.\n\n"}, {"name": "File handling", "path": "ref/files/index", "type": "API", "text": "\n\n"}, {"name": "File storage API", "path": "ref/files/storage", "type": "API", "text": "\nDjango provides two convenient ways to access the current storage class:\n\n`DefaultStorage` provides lazy access to the current default storage system as\ndefined by `DEFAULT_FILE_STORAGE`. `DefaultStorage` uses `get_storage_class()`\ninternally.\n\nReturns a class or module which implements the storage API.\n\nWhen called without the `import_path` parameter `get_storage_class` will\nreturn the current default storage system as defined by\n`DEFAULT_FILE_STORAGE`. If `import_path` is provided, `get_storage_class` will\nattempt to import the class or module from the given path and will return it\nif successful. An exception will be raised if the import is unsuccessful.\n\nThe `FileSystemStorage` class implements basic file storage on a local\nfilesystem. It inherits from `Storage` and provides implementations for all\nthe public methods thereof.\n\nAbsolute path to the directory that will hold the files. Defaults to the value\nof your `MEDIA_ROOT` setting.\n\nURL that serves the files stored at this location. Defaults to the value of\nyour `MEDIA_URL` setting.\n\nThe file system permissions that the file will receive when it is saved.\nDefaults to `FILE_UPLOAD_PERMISSIONS`.\n\nThe file system permissions that the directory will receive when it is saved.\nDefaults to `FILE_UPLOAD_DIRECTORY_PERMISSIONS`.\n\nNote\n\nThe `FileSystemStorage.delete()` method will not raise an exception if the\ngiven file name does not exist.\n\nReturns a `datetime` of the system\u2019s ctime, i.e. `os.path.getctime()`. On some\nsystems (like Unix), this is the time of the last metadata change, and on\nothers (like Windows), it\u2019s the creation time of the file.\n\nThe `Storage` class provides a standardized API for storing files, along with\na set of default behaviors that all other storage systems can inherit or\noverride as necessary.\n\nNote\n\nWhen methods return naive `datetime` objects, the effective timezone used will\nbe the current value of `os.environ['TZ']`; note that this is usually set from\nDjango\u2019s `TIME_ZONE`.\n\nDeletes the file referenced by `name`. If deletion is not supported on the\ntarget storage system this will raise `NotImplementedError` instead.\n\nReturns `True` if a file referenced by the given name already exists in the\nstorage system, or `False` if the name is available for a new file.\n\nReturns a `datetime` of the last accessed time of the file. For storage\nsystems unable to return the last accessed time this will raise\n`NotImplementedError`.\n\nIf `USE_TZ` is `True`, returns an aware `datetime`, otherwise returns a naive\n`datetime` in the local timezone.\n\nReturns an alternative filename based on the `file_root` and `file_ext`\nparameters, an underscore plus a random 7 character alphanumeric string is\nappended to the filename before the extension.\n\nReturns a filename based on the `name` parameter that\u2019s free and available for\nnew content to be written to on the target storage system.\n\nThe length of the filename will not exceed `max_length`, if provided. If a\nfree unique filename cannot be found, a `SuspiciousFileOperation` exception\nwill be raised.\n\nIf a file with `name` already exists, `get_alternative_name()` is called to\nobtain an alternative name.\n\nReturns a `datetime` of the creation time of the file. For storage systems\nunable to return the creation time this will raise `NotImplementedError`.\n\nIf `USE_TZ` is `True`, returns an aware `datetime`, otherwise returns a naive\n`datetime` in the local timezone.\n\nReturns a `datetime` of the last modified time of the file. For storage\nsystems unable to return the last modified time this will raise\n`NotImplementedError`.\n\nIf `USE_TZ` is `True`, returns an aware `datetime`, otherwise returns a naive\n`datetime` in the local timezone.\n\nReturns a filename based on the `name` parameter that\u2019s suitable for use on\nthe target storage system.\n\nValidates the `filename` by calling `get_valid_name()` and returns a filename\nto be passed to the `save()` method.\n\nThe `filename` argument may include a path as returned by\n`FileField.upload_to`. In that case, the path won\u2019t be passed to\n`get_valid_name()` but will be prepended back to the resulting name.\n\nThe default implementation uses `os.path` operations. Override this method if\nthat\u2019s not appropriate for your storage.\n\nLists the contents of the specified path, returning a 2-tuple of lists; the\nfirst item being directories, the second item being files. For storage systems\nthat aren\u2019t able to provide such a listing, this will raise a\n`NotImplementedError` instead.\n\nOpens the file given by `name`. Note that although the returned file is\nguaranteed to be a `File` object, it might actually be some subclass. In the\ncase of remote file storage this means that reading/writing could be quite\nslow, so be warned.\n\nThe local filesystem path where the file can be opened using Python\u2019s standard\n`open()`. For storage systems that aren\u2019t accessible from the local\nfilesystem, this will raise `NotImplementedError` instead.\n\nSaves a new file using the storage system, preferably with the name specified.\nIf there already exists a file with this name `name`, the storage system may\nmodify the filename as necessary to get a unique name. The actual name of the\nstored file will be returned.\n\nThe `max_length` argument is passed along to `get_available_name()`.\n\nThe `content` argument must be an instance of `django.core.files.File` or a\nfile-like object that can be wrapped in `File`.\n\nReturns the total size, in bytes, of the file referenced by `name`. For\nstorage systems that aren\u2019t able to return the file size this will raise\n`NotImplementedError` instead.\n\nReturns the URL where the contents of the file referenced by `name` can be\naccessed. For storage systems that don\u2019t support access by URL this will raise\n`NotImplementedError` instead.\n\n"}, {"name": "File Uploads", "path": "topics/http/file-uploads", "type": "Guides", "text": "\nWhen Django handles a file upload, the file data ends up placed in\n`request.FILES` (for more on the `request` object see the documentation for\nrequest and response objects). This document explains how files are stored on\ndisk and in memory, and how to customize the default behavior.\n\nWarning\n\nThere are security risks if you are accepting uploaded content from untrusted\nusers! See the security guide\u2019s topic on User-uploaded content for mitigation\ndetails.\n\nConsider a form containing a `FileField`:\n\nA view handling this form will receive the file data in `request.FILES`, which\nis a dictionary containing a key for each `FileField` (or `ImageField`, or\nother `FileField` subclass) in the form. So the data from the above form would\nbe accessible as `request.FILES['file']`.\n\nNote that `request.FILES` will only contain data if the request method was\n`POST`, at least one file field was actually posted, and the `<form>` that\nposted the request has the attribute `enctype=\"multipart/form-data\"`.\nOtherwise, `request.FILES` will be empty.\n\nMost of the time, you\u2019ll pass the file data from `request` into the form as\ndescribed in Binding uploaded files to a form. This would look something like:\n\nNotice that we have to pass `request.FILES` into the form\u2019s constructor; this\nis how file data gets bound into a form.\n\nHere\u2019s a common way you might handle an uploaded file:\n\nLooping over `UploadedFile.chunks()` instead of using `read()` ensures that\nlarge files don\u2019t overwhelm your system\u2019s memory.\n\nThere are a few other methods and attributes available on `UploadedFile`\nobjects; see `UploadedFile` for a complete reference.\n\nIf you\u2019re saving a file on a `Model` with a `FileField`, using a `ModelForm`\nmakes this process much easier. The file object will be saved to the location\nspecified by the `upload_to` argument of the corresponding `FileField` when\ncalling `form.save()`:\n\nIf you are constructing an object manually, you can assign the file object\nfrom `request.FILES` to the file field in the model:\n\nIf you want to upload multiple files using one form field, set the `multiple`\nHTML attribute of field\u2019s widget:\n\nThen override the `post` method of your `FormView` subclass to handle multiple\nfile uploads:\n\nWhen a user uploads a file, Django passes off the file data to an upload\nhandler \u2013 a small class that handles file data as it gets uploaded. Upload\nhandlers are initially defined in the `FILE_UPLOAD_HANDLERS` setting, which\ndefaults to:\n\nTogether `MemoryFileUploadHandler` and `TemporaryFileUploadHandler` provide\nDjango\u2019s default file upload behavior of reading small files into memory and\nlarge ones onto disk.\n\nYou can write custom handlers that customize how Django handles files. You\ncould, for example, use custom handlers to enforce user-level quotas, compress\ndata on the fly, render progress bars, and even send data to another storage\nlocation directly without storing it locally. See Writing custom upload\nhandlers for details on how you can customize or completely replace upload\nbehavior.\n\nBefore you save uploaded files, the data needs to be stored somewhere.\n\nBy default, if an uploaded file is smaller than 2.5 megabytes, Django will\nhold the entire contents of the upload in memory. This means that saving the\nfile involves only a read from memory and a write to disk and thus is very\nfast.\n\nHowever, if an uploaded file is too large, Django will write the uploaded file\nto a temporary file stored in your system\u2019s temporary directory. On a Unix-\nlike platform this means you can expect Django to generate a file called\nsomething like `/tmp/tmpzfp6I6.upload`. If an upload is large enough, you can\nwatch this file grow in size as Django streams the data onto disk.\n\nThese specifics \u2013 2.5 megabytes; `/tmp`; etc. \u2013 are \u201creasonable defaults\u201d\nwhich can be customized as described in the next section.\n\nThere are a few settings which control Django\u2019s file upload behavior. See File\nUpload Settings for details.\n\nSometimes particular views require different upload behavior. In these cases,\nyou can override upload handlers on a per-request basis by modifying\n`request.upload_handlers`. By default, this list will contain the upload\nhandlers given by `FILE_UPLOAD_HANDLERS`, but you can modify the list as you\nwould any other list.\n\nFor instance, suppose you\u2019ve written a `ProgressBarUploadHandler` that\nprovides feedback on upload progress to some sort of AJAX widget. You\u2019d add\nthis handler to your upload handlers like this:\n\nYou\u2019d probably want to use `list.insert()` in this case (instead of\n`append()`) because a progress bar handler would need to run before any other\nhandlers. Remember, the upload handlers are processed in order.\n\nIf you want to replace the upload handlers completely, you can assign a new\nlist:\n\nNote\n\nYou can only modify upload handlers before accessing `request.POST` or\n`request.FILES` \u2013 it doesn\u2019t make sense to change upload handlers after upload\nhandling has already started. If you try to modify `request.upload_handlers`\nafter reading from `request.POST` or `request.FILES` Django will throw an\nerror.\n\nThus, you should always modify uploading handlers as early in your view as\npossible.\n\nAlso, `request.POST` is accessed by `CsrfViewMiddleware` which is enabled by\ndefault. This means you will need to use `csrf_exempt()` on your view to allow\nyou to change the upload handlers. You will then need to use `csrf_protect()`\non the function that actually processes the request. Note that this means that\nthe handlers may start receiving the file upload before the CSRF checks have\nbeen done. Example code:\n\nIf you are using a class-based view, you will need to use `csrf_exempt()` on\nits `dispatch()` method and `csrf_protect()` on the method that actually\nprocesses the request. Example code:\n\n"}, {"name": "flatpages.middleware.FlatpageFallbackMiddleware", "path": "ref/contrib/flatpages#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware", "type": "django.contrib.flatpages", "text": "\nEach time any Django application raises a 404 error, this middleware checks\nthe flatpages database for the requested URL as a last resort. Specifically,\nit checks for a flatpage with the given URL with a site ID that corresponds to\nthe `SITE_ID` setting.\n\nIf it finds a match, it follows this algorithm:\n\nThe middleware will only add a trailing slash and redirect (by looking at the\n`APPEND_SLASH` setting) if the resulting URL refers to a valid flatpage.\nRedirects are permanent (301 status code).\n\nIf it doesn\u2019t find a match, the request continues to be processed as usual.\n\nThe middleware only gets activated for 404s \u2013 not for 500s or responses of any\nother status code.\n\n"}, {"name": "flatpages.models.FlatPage", "path": "ref/contrib/flatpages#django.contrib.flatpages.models.FlatPage", "type": "django.contrib.flatpages", "text": "\nFlatpages are represented by a standard Django model, which lives in\ndjango/contrib/flatpages/models.py. You can access flatpage objects via the\nDjango database API.\n\n"}, {"name": "flatpages.sitemaps.FlatPageSitemap", "path": "ref/contrib/flatpages#django.contrib.flatpages.sitemaps.FlatPageSitemap", "type": "django.contrib.flatpages", "text": "\nThe `sitemaps.FlatPageSitemap` class looks at all publicly visible `flatpages`\ndefined for the current `SITE_ID` (see the `sites documentation`) and creates\nan entry in the sitemap. These entries include only the `location` attribute \u2013\nnot `lastmod`, `changefreq` or `priority`.\n\n"}, {"name": "Form and field validation", "path": "ref/forms/validation", "type": "API", "text": "\nForm validation happens when the data is cleaned. If you want to customize\nthis process, there are various places to make changes, each one serving a\ndifferent purpose. Three types of cleaning methods are run during form\nprocessing. These are normally executed when you call the `is_valid()` method\non a form. There are other things that can also trigger cleaning and\nvalidation (accessing the `errors` attribute or calling `full_clean()`\ndirectly), but normally they won\u2019t be needed.\n\nIn general, any cleaning method can raise `ValidationError` if there is a\nproblem with the data it is processing, passing the relevant information to\nthe `ValidationError` constructor. See below for the best practice in raising\n`ValidationError`. If no `ValidationError` is raised, the method should return\nthe cleaned (normalized) data as a Python object.\n\nMost validation can be done using validators \\- helpers that can be reused.\nValidators are functions (or callables) that take a single argument and raise\n`ValidationError` on invalid input. Validators are run after the field\u2019s\n`to_python` and `validate` methods have been called.\n\nValidation of a form is split into several steps, which can be customized or\noverridden:\n\nThe `clean_<fieldname>()` method is called on a form subclass \u2013 where\n`<fieldname>` is replaced with the name of the form field attribute. This\nmethod does any cleaning that is specific to that particular attribute,\nunrelated to the type of field that it is. This method is not passed any\nparameters. You will need to look up the value of the field in\n`self.cleaned_data` and remember that it will be a Python object at this\npoint, not the original string submitted in the form (it will be in\n`cleaned_data` because the general field `clean()` method, above, has already\ncleaned the data once).\n\nFor example, if you wanted to validate that the contents of a `CharField`\ncalled `serialnumber` was unique, `clean_serialnumber()` would be the right\nplace to do this. You don\u2019t need a specific field (it\u2019s a `CharField`), but\nyou want a formfield-specific piece of validation and, possibly,\ncleaning/normalizing the data.\n\nThe return value of this method replaces the existing value in `cleaned_data`,\nso it must be the field\u2019s value from `cleaned_data` (even if this method\ndidn\u2019t change it) or a new cleaned value.\n\nThe form subclass\u2019s `clean()` method can perform validation that requires\naccess to multiple form fields. This is where you might put in checks such as\n\u201cif field `A` is supplied, field `B` must contain a valid email address\u201d. This\nmethod can return a completely different dictionary if it wishes, which will\nbe used as the `cleaned_data`.\n\nSince the field validation methods have been run by the time `clean()` is\ncalled, you also have access to the form\u2019s `errors` attribute which contains\nall the errors raised by cleaning of individual fields.\n\nNote that any errors raised by your `Form.clean()` override will not be\nassociated with any field in particular. They go into a special \u201cfield\u201d\n(called `__all__`), which you can access via the `non_field_errors()` method\nif you need to. If you want to attach errors to a specific field in the form,\nyou need to call `add_error()`.\n\nAlso note that there are special considerations when overriding the `clean()`\nmethod of a `ModelForm` subclass. (see the ModelForm documentation for more\ninformation)\n\nThese methods are run in the order given above, one field at a time. That is,\nfor each field in the form (in the order they are declared in the form\ndefinition), the `Field.clean()` method (or its override) is run, then\n`clean_<fieldname>()`. Finally, once those two methods are run for every\nfield, the `Form.clean()` method, or its override, is executed whether or not\nthe previous methods have raised errors.\n\nExamples of each of these methods are provided below.\n\nAs mentioned, any of these methods can raise a `ValidationError`. For any\nfield, if the `Field.clean()` method raises a `ValidationError`, any field-\nspecific cleaning method is not called. However, the cleaning methods for all\nremaining fields are still executed.\n\nIn order to make error messages flexible and easy to override, consider the\nfollowing guidelines:\n\nProvide a descriptive error `code` to the constructor:\n\nDon\u2019t coerce variables into the message; use placeholders and the `params`\nargument of the constructor:\n\nUse mapping keys instead of positional formatting. This enables putting the\nvariables in any order or omitting them altogether when rewriting the message:\n\nWrap the message with `gettext` to enable translation:\n\nPutting it all together:\n\nFollowing these guidelines is particularly necessary if you write reusable\nforms, form fields, and model fields.\n\nWhile not recommended, if you are at the end of the validation chain (i.e.\nyour form `clean()` method) and you know you will never need to override your\nerror message you can still opt for the less verbose:\n\nThe `Form.errors.as_data()` and `Form.errors.as_json()` methods greatly\nbenefit from fully featured `ValidationError`s (with a `code` name and a\n`params` dictionary).\n\nIf you detect multiple errors during a cleaning method and wish to signal all\nof them to the form submitter, it is possible to pass a list of errors to the\n`ValidationError` constructor.\n\nAs above, it is recommended to pass a list of `ValidationError` instances with\n`code`s and `params` but a list of strings will also work:\n\nThe previous sections explained how validation works in general for forms.\nSince it can sometimes be easier to put things into place by seeing each\nfeature in use, here are a series of small examples that use each of the\nprevious features.\n\nDjango\u2019s form (and model) fields support use of utility functions and classes\nknown as validators. A validator is a callable object or function that takes a\nvalue and returns nothing if the value is valid or raises a `ValidationError`\nif not. These can be passed to a field\u2019s constructor, via the field\u2019s\n`validators` argument, or defined on the `Field` class itself with the\n`default_validators` attribute.\n\nValidators can be used to validate values inside the field, let\u2019s have a look\nat Django\u2019s `SlugField`:\n\nAs you can see, `SlugField` is a `CharField` with a customized validator that\nvalidates that submitted text obeys to some character rules. This can also be\ndone on field definition so:\n\nis equivalent to:\n\nCommon cases such as validating against an email or a regular expression can\nbe handled using existing validator classes available in Django. For example,\n`validators.validate_slug` is an instance of a `RegexValidator` constructed\nwith the first argument being the pattern: `^[-a-zA-Z0-9_]+$`. See the section\non writing validators to see a list of what is already available and for an\nexample of how to write a validator.\n\nLet\u2019s first create a custom form field that validates its input is a string\ncontaining comma-separated email addresses. The full class looks like this:\n\nEvery form that uses this field will have these methods run before anything\nelse can be done with the field\u2019s data. This is cleaning that is specific to\nthis type of field, regardless of how it is subsequently used.\n\nLet\u2019s create a `ContactForm` to demonstrate how you\u2019d use this field:\n\nUse `MultiEmailField` like any other form field. When the `is_valid()` method\nis called on the form, the `MultiEmailField.clean()` method will be run as\npart of the cleaning process and it will, in turn, call the custom\n`to_python()` and `validate()` methods.\n\nContinuing on from the previous example, suppose that in our `ContactForm`, we\nwant to make sure that the `recipients` field always contains the address\n`\"fred@example.com\"`. This is validation that is specific to our form, so we\ndon\u2019t want to put it into the general `MultiEmailField` class. Instead, we\nwrite a cleaning method that operates on the `recipients` field, like so:\n\nSuppose we add another requirement to our contact form: if the `cc_myself`\nfield is `True`, the `subject` must contain the word `\"help\"`. We are\nperforming validation on more than one field at a time, so the form\u2019s\n`clean()` method is a good spot to do this. Notice that we are talking about\nthe `clean()` method on the form here, whereas earlier we were writing a\n`clean()` method on a field. It\u2019s important to keep the field and form\ndifference clear when working out where to validate things. Fields are single\ndata points, forms are a collection of fields.\n\nBy the time the form\u2019s `clean()` method is called, all the individual field\nclean methods will have been run (the previous two sections), so\n`self.cleaned_data` will be populated with any data that has survived so far.\nSo you also need to remember to allow for the fact that the fields you are\nwanting to validate might not have survived the initial individual field\nchecks.\n\nThere are two ways to report any errors from this step. Probably the most\ncommon method is to display the error at the top of the form. To create such\nan error, you can raise a `ValidationError` from the `clean()` method. For\nexample:\n\nIn this code, if the validation error is raised, the form will display an\nerror message at the top of the form (normally) describing the problem. Such\nerrors are non-field errors, which are displayed in the template with `{{\nform.non_field_errors }}`.\n\nThe call to `super().clean()` in the example code ensures that any validation\nlogic in parent classes is maintained. If your form inherits another that\ndoesn\u2019t return a `cleaned_data` dictionary in its `clean()` method (doing so\nis optional), then don\u2019t assign `cleaned_data` to the result of the `super()`\ncall and use `self.cleaned_data` instead:\n\nThe second approach for reporting validation errors might involve assigning\nthe error message to one of the fields. In this case, let\u2019s assign an error\nmessage to both the \u201csubject\u201d and \u201ccc_myself\u201d rows in the form display. Be\ncareful when doing this in practice, since it can lead to confusing form\noutput. We\u2019re showing what is possible here and leaving it up to you and your\ndesigners to work out what works effectively in your particular situation. Our\nnew code (replacing the previous sample) looks like this:\n\nThe second argument of `add_error()` can be a string, or preferably an\ninstance of `ValidationError`. See Raising ValidationError for more details.\nNote that `add_error()` automatically removes the field from `cleaned_data`.\n\n"}, {"name": "Form Assets (the Media class)", "path": "topics/forms/media", "type": "Guides", "text": "\nRendering an attractive and easy-to-use web form requires more than just HTML\n- it also requires CSS stylesheets, and if you want to use fancy widgets, you\nmay also need to include some JavaScript on each page. The exact combination\nof CSS and JavaScript that is required for any given page will depend upon the\nwidgets that are in use on that page.\n\nThis is where asset definitions come in. Django allows you to associate\ndifferent files \u2013 like stylesheets and scripts \u2013 with the forms and widgets\nthat require those assets. For example, if you want to use a calendar to\nrender DateFields, you can define a custom Calendar widget. This widget can\nthen be associated with the CSS and JavaScript that is required to render the\ncalendar. When the Calendar widget is used on a form, Django is able to\nidentify the CSS and JavaScript files that are required, and provide the list\nof file names in a form suitable for inclusion on your web page.\n\nAssets and Django Admin\n\nThe Django Admin application defines a number of customized widgets for\ncalendars, filtered selections, and so on. These widgets define asset\nrequirements, and the Django Admin uses the custom widgets in place of the\nDjango defaults. The Admin templates will only include those files that are\nrequired to render the widgets on any given page.\n\nIf you like the widgets that the Django Admin application uses, feel free to\nuse them in your own application! They\u2019re all stored in\n`django.contrib.admin.widgets`.\n\nWhich JavaScript toolkit?\n\nMany JavaScript toolkits exist, and many of them include widgets (such as\ncalendar widgets) that can be used to enhance your application. Django has\ndeliberately avoided blessing any one JavaScript toolkit. Each toolkit has its\nown relative strengths and weaknesses - use whichever toolkit suits your\nrequirements. Django is able to integrate with any JavaScript toolkit.\n\nThe easiest way to define assets is as a static definition. Using this method,\nthe declaration is an inner `Media` class. The properties of the inner class\ndefine the requirements.\n\nHere\u2019s an example:\n\nThis code defines a `CalendarWidget`, which will be based on `TextInput`.\nEvery time the CalendarWidget is used on a form, that form will be directed to\ninclude the CSS file `pretty.css`, and the JavaScript files `animations.js`\nand `actions.js`.\n\nThis static definition is converted at runtime into a widget property named\n`media`. The list of assets for a `CalendarWidget` instance can be retrieved\nthrough this property:\n\nHere\u2019s a list of all possible `Media` options. There are no required options.\n\nA dictionary describing the CSS files required for various forms of output\nmedia.\n\nThe values in the dictionary should be a tuple/list of file names. See the\nsection on paths for details of how to specify paths to these files.\n\nThe keys in the dictionary are the output media types. These are the same\ntypes accepted by CSS files in media declarations: \u2018all\u2019, \u2018aural\u2019, \u2018braille\u2019,\n\u2018embossed\u2019, \u2018handheld\u2019, \u2018print\u2019, \u2018projection\u2019, \u2018screen\u2019, \u2018tty\u2019 and \u2018tv\u2019. If\nyou need to have different stylesheets for different media types, provide a\nlist of CSS files for each output medium. The following example would provide\ntwo CSS options \u2013 one for the screen, and one for print:\n\nIf a group of CSS files are appropriate for multiple output media types, the\ndictionary key can be a comma separated list of output media types. In the\nfollowing example, TV\u2019s and projectors will have the same media requirements:\n\nIf this last CSS definition were to be rendered, it would become the following\nHTML:\n\nA tuple describing the required JavaScript files. See the section on paths for\ndetails of how to specify paths to these files.\n\nA boolean defining inheritance behavior for `Media` declarations.\n\nBy default, any object using a static `Media` definition will inherit all the\nassets associated with the parent widget. This occurs regardless of how the\nparent defines its own requirements. For example, if we were to extend our\nbasic Calendar widget from the example above:\n\nThe FancyCalendar widget inherits all the assets from its parent widget. If\nyou don\u2019t want `Media` to be inherited in this way, add an `extend=False`\ndeclaration to the `Media` declaration:\n\nIf you require even more control over inheritance, define your assets using a\ndynamic property. Dynamic properties give you complete control over which\nfiles are inherited, and which are not.\n\nIf you need to perform some more sophisticated manipulation of asset\nrequirements, you can define the `media` property directly. This is done by\ndefining a widget property that returns an instance of `forms.Media`. The\nconstructor for `forms.Media` accepts `css` and `js` keyword arguments in the\nsame format as that used in a static media definition.\n\nFor example, the static definition for our Calendar Widget could also be\ndefined in a dynamic fashion:\n\nSee the section on Media objects for more details on how to construct return\nvalues for dynamic `media` properties.\n\nPaths used to specify assets can be either relative or absolute. If a path\nstarts with `/`, `http://` or `https://`, it will be interpreted as an\nabsolute path, and left as-is. All other paths will be prepended with the\nvalue of the appropriate prefix. If the `django.contrib.staticfiles` app is\ninstalled, it will be used to serve assets.\n\nWhether or not you use `django.contrib.staticfiles`, the `STATIC_URL` and\n`STATIC_ROOT` settings are required to render a complete web page.\n\nTo find the appropriate prefix to use, Django will check if the `STATIC_URL`\nsetting is not `None` and automatically fall back to using `MEDIA_URL`. For\nexample, if the `MEDIA_URL` for your site was `'http://uploads.example.com/'`\nand `STATIC_URL` was `None`:\n\nBut if `STATIC_URL` is `'http://static.example.com/'`:\n\nOr if `staticfiles` is configured using the `ManifestStaticFilesStorage`:\n\nWhen you interrogate the `media` attribute of a widget or form, the value that\nis returned is a `forms.Media` object. As we have already seen, the string\nrepresentation of a `Media` object is the HTML required to include the\nrelevant files in the `<head>` block of your HTML page.\n\nHowever, `Media` objects have some other interesting properties.\n\nIf you only want files of a particular type, you can use the subscript\noperator to filter out a medium of interest. For example:\n\nWhen you use the subscript operator, the value that is returned is a new\n`Media` object \u2013 but one that only contains the media of interest.\n\n`Media` objects can also be added together. When two `Media` objects are\nadded, the resulting `Media` object contains the union of the assets specified\nby both:\n\nThe order in which assets are inserted into the DOM is often important. For\nexample, you may have a script that depends on jQuery. Therefore, combining\n`Media` objects attempts to preserve the relative order in which assets are\ndefined in each `Media` class.\n\nFor example:\n\nCombining `Media` objects with assets in a conflicting order results in a\n`MediaOrderConflictWarning`.\n\nWidgets aren\u2019t the only objects that can have `media` definitions \u2013 forms can\nalso define `media`. The rules for `media` definitions on forms are the same\nas the rules for widgets: declarations can be static or dynamic; path and\ninheritance rules for those declarations are exactly the same.\n\nRegardless of whether you define a `media` declaration, all Form objects have\na `media` property. The default value for this property is the result of\nadding the `media` definitions for all widgets that are part of the form:\n\nIf you want to associate additional assets with a form \u2013 for example, CSS for\nform layout \u2013 add a `Media` declaration to the form:\n\n"}, {"name": "Form fields", "path": "ref/forms/fields", "type": "API", "text": "\nWhen you create a `Form` class, the most important part is defining the fields\nof the form. Each field has custom validation logic, along with a few other\nhooks.\n\nAlthough the primary way you\u2019ll use `Field` classes is in `Form` classes, you\ncan also instantiate them and use them directly to get a better idea of how\nthey work. Each `Field` instance has a `clean()` method, which takes a single\nargument and either raises a `django.core.exceptions.ValidationError`\nexception or returns the clean value:\n\nEach `Field` class constructor takes at least these arguments. Some `Field`\nclasses take additional, field-specific arguments, but the following should\nalways be accepted:\n\nBy default, each `Field` class assumes the value is required, so if you pass\nan empty value \u2013 either `None` or the empty string (`\"\"`) \u2013 then `clean()`\nwill raise a `ValidationError` exception:\n\nTo specify that a field is not required, pass `required=False` to the `Field`\nconstructor:\n\nIf a `Field` has `required=False` and you pass `clean()` an empty value, then\n`clean()` will return a normalized empty value rather than raising\n`ValidationError`. For `CharField`, this will return `empty_value` which\ndefaults to an empty string. For other `Field` classes, it might be `None`.\n(This varies from field to field.)\n\nWidgets of required form fields have the `required` HTML attribute. Set the\n`Form.use_required_attribute` attribute to `False` to disable it. The\n`required` attribute isn\u2019t included on forms of formsets because the browser\nvalidation may not be correct when adding and deleting formsets.\n\nThe `label` argument lets you specify the \u201chuman-friendly\u201d label for this\nfield. This is used when the `Field` is displayed in a `Form`.\n\nAs explained in \u201cOutputting forms as HTML\u201d above, the default label for a\n`Field` is generated from the field name by converting all underscores to\nspaces and upper-casing the first letter. Specify `label` if that default\nbehavior doesn\u2019t result in an adequate label.\n\nHere\u2019s a full example `Form` that implements `label` for two of its fields.\nWe\u2019ve specified `auto_id=False` to simplify the output:\n\nThe `label_suffix` argument lets you override the form\u2019s `label_suffix` on a\nper-field basis:\n\nThe `initial` argument lets you specify the initial value to use when\nrendering this `Field` in an unbound `Form`.\n\nTo specify dynamic initial data, see the `Form.initial` parameter.\n\nThe use-case for this is when you want to display an \u201cempty\u201d form in which a\nfield is initialized to a particular value. For example:\n\nYou may be thinking, why not just pass a dictionary of the initial values as\ndata when displaying the form? Well, if you do that, you\u2019ll trigger\nvalidation, and the HTML output will include any validation errors:\n\nThis is why `initial` values are only displayed for unbound forms. For bound\nforms, the HTML output will use the bound data.\n\nAlso note that `initial` values are not used as \u201cfallback\u201d data in validation\nif a particular field\u2019s value is not given. `initial` values are only intended\nfor initial form display:\n\nInstead of a constant, you can also pass any callable:\n\nThe callable will be evaluated only when the unbound form is displayed, not\nwhen it is defined.\n\nThe `widget` argument lets you specify a `Widget` class to use when rendering\nthis `Field`. See Widgets for more information.\n\nThe `help_text` argument lets you specify descriptive text for this `Field`.\nIf you provide `help_text`, it will be displayed next to the `Field` when the\n`Field` is rendered by one of the convenience `Form` methods (e.g.,\n`as_ul()`).\n\nLike the model field\u2019s `help_text`, this value isn\u2019t HTML-escaped in\nautomatically-generated forms.\n\nHere\u2019s a full example `Form` that implements `help_text` for two of its\nfields. We\u2019ve specified `auto_id=False` to simplify the output:\n\nThe `error_messages` argument lets you override the default messages that the\nfield will raise. Pass in a dictionary with keys matching the error messages\nyou want to override. For example, here is the default error message:\n\nAnd here is a custom error message:\n\nIn the built-in Field classes section below, each `Field` defines the error\nmessage keys it uses.\n\nThe `validators` argument lets you provide a list of validation functions for\nthis field.\n\nSee the validators documentation for more information.\n\nThe `localize` argument enables the localization of form data input, as well\nas the rendered output.\n\nSee the format localization documentation for more information.\n\nThe `disabled` boolean argument, when set to `True`, disables a form field\nusing the `disabled` HTML attribute so that it won\u2019t be editable by users.\nEven if a user tampers with the field\u2019s value submitted to the server, it will\nbe ignored in favor of the value from the form\u2019s initial data.\n\nThe `has_changed()` method is used to determine if the field value has changed\nfrom the initial value. Returns `True` or `False`.\n\nSee the `Form.has_changed()` documentation for more information.\n\nNaturally, the `forms` library comes with a set of `Field` classes that\nrepresent common validation needs. This section documents each built-in field.\n\nFor each field, we describe the default widget used if you don\u2019t specify\n`widget`. We also specify the value returned when you provide an empty value\n(see the section on `required` above to understand what that means).\n\nNote\n\nSince all `Field` subclasses have `required=True` by default, the validation\ncondition here is important. If you want to include a boolean in your form\nthat can be either `True` or `False` (e.g. a checked or unchecked checkbox),\nyou must remember to pass in `required=False` when creating the\n`BooleanField`.\n\nHas four optional arguments for validation:\n\nIf provided, these arguments ensure that the string is at most or at least the\ngiven length.\n\nIf `True` (default), the value will be stripped of leading and trailing\nwhitespace.\n\nThe value to use to represent \u201cempty\u201d. Defaults to an empty string.\n\nThe `invalid_choice` error message may contain `%(value)s`, which will be\nreplaced with the selected choice.\n\nTakes one extra argument:\n\nEither an iterable of 2-tuples to use as choices for this field, enumeration\nchoices, or a callable that returns such an iterable. This argument accepts\nthe same formats as the `choices` argument to a model field. See the model\nfield reference documentation on choices for more details. If the argument is\na callable, it is evaluated each time the field\u2019s form is initialized, in\naddition to during rendering. Defaults to an empty list.\n\nTakes one optional argument:\n\nA list of formats used to attempt to convert a string to a valid\n`datetime.date` object.\n\nIf no `input_formats` argument is provided, the default input formats are\ntaken from `DATE_INPUT_FORMATS` if `USE_L10N` is `False`, or from the active\nlocale format `DATE_INPUT_FORMATS` key if localization is enabled. See also\nformat localization.\n\nTakes one optional argument:\n\nA list of formats used to attempt to convert a string to a valid\n`datetime.datetime` object, in addition to ISO 8601 formats.\n\nThe field always accepts strings in ISO 8601 formatted dates or similar\nrecognized by `parse_datetime()`. Some examples are:\n\nIf no `input_formats` argument is provided, the default input formats are\ntaken from `DATETIME_INPUT_FORMATS` and `DATE_INPUT_FORMATS` if `USE_L10N` is\n`False`, or from the active locale format `DATETIME_INPUT_FORMATS` and\n`DATE_INPUT_FORMATS` keys if localization is enabled. See also format\nlocalization.\n\nThe `max_value` and `min_value` error messages may contain `%(limit_value)s`,\nwhich will be substituted by the appropriate limit. Similarly, the\n`max_digits`, `max_decimal_places` and `max_whole_digits` error messages may\ncontain `%(max)s`.\n\nTakes four optional arguments:\n\nThese control the range of values permitted in the field, and should be given\nas `decimal.Decimal` values.\n\nThe maximum number of digits (those before the decimal point plus those after\nthe decimal point, with leading zeros stripped) permitted in the value.\n\nThe maximum number of decimal places permitted.\n\nAccepts any format understood by `parse_duration()`.\n\nHas three optional arguments `max_length`, `min_length`, and `empty_value`\nwhich work just as they do for `CharField`.\n\nHas two optional arguments for validation, `max_length` and\n`allow_empty_file`. If provided, these ensure that the file name is at most\nthe given length, and that validation will succeed even if the file content is\nempty.\n\nTo learn more about the `UploadedFile` object, see the file uploads\ndocumentation.\n\nWhen you use a `FileField` in a form, you must also remember to bind the file\ndata to the form.\n\nThe `max_length` error refers to the length of the filename. In the error\nmessage for that key, `%(max)d` will be replaced with the maximum filename\nlength and `%(length)d` will be replaced with the current filename length.\n\nThe field allows choosing from files inside a certain directory. It takes five\nextra arguments; only `path` is required:\n\nThe absolute path to the directory whose contents you want listed. This\ndirectory must exist.\n\nIf `False` (the default) only the direct contents of `path` will be offered as\nchoices. If `True`, the directory will be descended into recursively and all\ndescendants will be listed as choices.\n\nA regular expression pattern; only files with names matching this expression\nwill be allowed as choices.\n\nOptional. Either `True` or `False`. Default is `True`. Specifies whether files\nin the specified location should be included. Either this or `allow_folders`\nmust be `True`.\n\nOptional. Either `True` or `False`. Default is `False`. Specifies whether\nfolders in the specified location should be included. Either this or\n`allow_files` must be `True`.\n\nTakes two optional arguments for validation, `max_value` and `min_value`.\nThese control the range of values permitted in the field.\n\nA field containing either an IPv4 or an IPv6 address.\n\nThe IPv6 address normalization follows RFC 4291#section-2.2 section 2.2,\nincluding using the IPv4 format suggested in paragraph 3 of that section, like\n`::ffff:192.0.2.0`. For example, `2001:0::0:01` would be normalized to\n`2001::1`, and `::ffff:0a0a:0a0a` to `::ffff:10.10.10.10`. All characters are\nconverted to lowercase.\n\nTakes two optional arguments:\n\nLimits valid inputs to the specified protocol. Accepted values are `both`\n(default), `IPv4` or `IPv6`. Matching is case insensitive.\n\nUnpacks IPv4 mapped addresses like `::ffff:192.0.2.1`. If this option is\nenabled that address would be unpacked to `192.0.2.1`. Default is disabled.\nCan only be used when `protocol` is set to `'both'`.\n\nUsing an `ImageField` requires that Pillow is installed with support for the\nimage formats you use. If you encounter a `corrupt image` error when you\nupload an image, it usually means that Pillow doesn\u2019t understand its format.\nTo fix this, install the appropriate library and reinstall Pillow.\n\nWhen you use an `ImageField` on a form, you must also remember to bind the\nfile data to the form.\n\nAfter the field has been cleaned and validated, the `UploadedFile` object will\nhave an additional `image` attribute containing the Pillow Image instance used\nto check if the file was a valid image. Pillow closes the underlying file\ndescriptor after verifying an image, so while non-image data attributes, such\nas `format`, `height`, and `width`, are available, methods that access the\nunderlying image data, such as `getdata()` or `getpixel()`, cannot be used\nwithout reopening the file. For example:\n\nAdditionally, `UploadedFile.content_type` will be updated with the image\u2019s\ncontent type if Pillow can determine it, otherwise it will be set to `None`.\n\nThe `max_value` and `min_value` error messages may contain `%(limit_value)s`,\nwhich will be substituted by the appropriate limit.\n\nTakes two optional arguments for validation:\n\nThese control the range of values permitted in the field.\n\nA field which accepts JSON encoded data for a `JSONField`.\n\nTakes two optional arguments:\n\nA `json.JSONEncoder` subclass to serialize data types not supported by the\nstandard JSON serializer (e.g. `datetime.datetime` or `UUID`). For example,\nyou can use the `DjangoJSONEncoder` class.\n\nDefaults to `json.JSONEncoder`.\n\nA `json.JSONDecoder` subclass to deserialize the input. Your deserialization\nmay need to account for the fact that you can\u2019t be certain of the input type.\nFor example, you run the risk of returning a `datetime` that was actually a\nstring that just happened to be in the same format chosen for `datetime`s.\n\nThe `decoder` can be used to validate the input. If `json.JSONDecodeError` is\nraised during the deserialization, a `ValidationError` will be raised.\n\nDefaults to `json.JSONDecoder`.\n\nNote\n\nIf you use a `ModelForm`, the `encoder` and `decoder` from `JSONField` will be\nused.\n\nUser friendly forms\n\n`JSONField` is not particularly user friendly in most cases. However, it is a\nuseful way to format data from a client-side widget for submission to the\nserver.\n\nThe `invalid_choice` error message may contain `%(value)s`, which will be\nreplaced with the selected choice.\n\nTakes one extra required argument, `choices`, as for `ChoiceField`.\n\n`NullBooleanField` may be used with widgets such as `Select` or `RadioSelect`\nby providing the widget `choices`:\n\nTakes one required argument:\n\nA regular expression specified either as a string or a compiled regular\nexpression object.\n\nAlso takes `max_length`, `min_length`, `strip`, and `empty_value` which work\njust as they do for `CharField`.\n\nDefaults to `False`. If enabled, stripping will be applied before the regex\nvalidation.\n\nThis field is intended for use in representing a model `SlugField` in forms.\n\nTakes two optional parameters:\n\nA boolean instructing the field to accept Unicode letters in addition to ASCII\nletters. Defaults to `False`.\n\nThe value to use to represent \u201cempty\u201d. Defaults to an empty string.\n\nTakes one optional argument:\n\nA list of formats used to attempt to convert a string to a valid\n`datetime.time` object.\n\nIf no `input_formats` argument is provided, the default input formats are\ntaken from `TIME_INPUT_FORMATS` if `USE_L10N` is `False`, or from the active\nlocale format `TIME_INPUT_FORMATS` key if localization is enabled. See also\nformat localization.\n\nJust like a `ChoiceField`, except `TypedChoiceField` takes two extra\narguments, `coerce` and `empty_value`.\n\nTakes extra arguments:\n\nA function that takes one argument and returns a coerced value. Examples\ninclude the built-in `int`, `float`, `bool` and other types. Defaults to an\nidentity function. Note that coercion happens after input validation, so it is\npossible to coerce to a value not present in `choices`.\n\nThe value to use to represent \u201cempty.\u201d Defaults to the empty string; `None` is\nanother common choice here. Note that this value will not be coerced by the\nfunction given in the `coerce` argument, so choose it accordingly.\n\nJust like a `MultipleChoiceField`, except `TypedMultipleChoiceField` takes two\nextra arguments, `coerce` and `empty_value`.\n\nThe `invalid_choice` error message may contain `%(value)s`, which will be\nreplaced with the selected choice.\n\nTakes two extra arguments, `coerce` and `empty_value`, as for\n`TypedChoiceField`.\n\nHas three optional arguments `max_length`, `min_length`, and `empty_value`\nwhich work just as they do for `CharField`.\n\nThis field will accept any string format accepted as the `hex` argument to the\n`UUID` constructor.\n\nTakes one extra required argument:\n\nThe list of fields that should be used to validate the field\u2019s value (in the\norder in which they are provided).\n\nAggregates the logic of multiple fields that together produce a single value.\n\nThis field is abstract and must be subclassed. In contrast with the single-\nvalue fields, subclasses of `MultiValueField` must not implement `clean()` but\ninstead - implement `compress()`.\n\nTakes one extra required argument:\n\nA tuple of fields whose values are cleaned and subsequently combined into a\nsingle value. Each value of the field is cleaned by the corresponding field in\n`fields` \u2013 the first value is cleaned by the first field, the second value is\ncleaned by the second field, etc. Once all fields are cleaned, the list of\nclean values is combined into a single value by `compress()`.\n\nAlso takes some optional arguments:\n\nDefaults to `True`, in which case a `required` validation error will be raised\nif no value is supplied for any field.\n\nWhen set to `False`, the `Field.required` attribute can be set to `False` for\nindividual fields to make them optional. If no value is supplied for a\nrequired field, an `incomplete` validation error will be raised.\n\nA default `incomplete` error message can be defined on the `MultiValueField`\nsubclass, or different messages can be defined on each individual field. For\nexample:\n\nMust be a subclass of `django.forms.MultiWidget`. Default value is\n`TextInput`, which probably is not very useful in this case.\n\nTakes a list of valid values and returns a \u201ccompressed\u201d version of those\nvalues \u2013 in a single value. For example, `SplitDateTimeField` is a subclass\nwhich combines a time field and a date field into a `datetime` object.\n\nThis method must be implemented in the subclasses.\n\nTakes two optional arguments:\n\nA list of formats used to attempt to convert a string to a valid\n`datetime.date` object.\n\nIf no `input_date_formats` argument is provided, the default input formats for\n`DateField` are used.\n\nA list of formats used to attempt to convert a string to a valid\n`datetime.time` object.\n\nIf no `input_time_formats` argument is provided, the default input formats for\n`TimeField` are used.\n\nTwo fields are available for representing relationships between models:\n`ModelChoiceField` and `ModelMultipleChoiceField`. Both of these fields\nrequire a single `queryset` parameter that is used to create the choices for\nthe field. Upon form validation, these fields will place either one model\nobject (in the case of `ModelChoiceField`) or multiple model objects (in the\ncase of `ModelMultipleChoiceField`) into the `cleaned_data` dictionary of the\nform.\n\nFor more complex uses, you can specify `queryset=None` when declaring the form\nfield and then populate the `queryset` in the form\u2019s `__init__()` method:\n\nBoth `ModelChoiceField` and `ModelMultipleChoiceField` have an `iterator`\nattribute which specifies the class used to iterate over the queryset when\ngenerating choices. See Iterating relationship choices for details.\n\nThe `invalid_choice` error message may contain `%(value)s`, which will be\nreplaced with the selected choice.\n\nAllows the selection of a single model object, suitable for representing a\nforeign key. Note that the default widget for `ModelChoiceField` becomes\nimpractical when the number of entries increases. You should avoid using it\nfor more than 100 items.\n\nA single argument is required:\n\nA `QuerySet` of model objects from which the choices for the field are derived\nand which is used to validate the user\u2019s selection. It\u2019s evaluated when the\nform is rendered.\n\n`ModelChoiceField` also takes two optional arguments:\n\nBy default the `<select>` widget used by `ModelChoiceField` will have an empty\nchoice at the top of the list. You can change the text of this label (which is\n`\"---------\"` by default) with the `empty_label` attribute, or you can disable\nthe empty label entirely by setting `empty_label` to `None`:\n\nNote that if a `ModelChoiceField` is required and has a default initial value,\nno empty choice is created (regardless of the value of `empty_label`).\n\nThis optional argument is used to specify the field to use as the value of the\nchoices in the field\u2019s widget. Be sure it\u2019s a unique field for the model,\notherwise the selected value could match more than one object. By default it\nis set to `None`, in which case the primary key of each object will be used.\nFor example:\n\nwould yield:\n\nand:\n\nwould yield:\n\n`ModelChoiceField` also has the attribute:\n\nThe iterator class used to generate field choices from `queryset`. By default,\n`ModelChoiceIterator`.\n\nThe `__str__()` method of the model will be called to generate string\nrepresentations of the objects for use in the field\u2019s choices. To provide\ncustomized representations, subclass `ModelChoiceField` and override\n`label_from_instance`. This method will receive a model object and should\nreturn a string suitable for representing it. For example:\n\nSupport for containing `%(value)s` in the `invalid_choice` error message was\nadded.\n\nThe `invalid_choice` message may contain `%(value)s` and the\n`invalid_pk_value` message may contain `%(pk)s`, which will be substituted by\nthe appropriate values.\n\nAllows the selection of one or more model objects, suitable for representing a\nmany-to-many relation. As with `ModelChoiceField`, you can use\n`label_from_instance` to customize the object representations.\n\nA single argument is required:\n\nSame as `ModelChoiceField.queryset`.\n\nTakes one optional argument:\n\nSame as `ModelChoiceField.to_field_name`.\n\n`ModelMultipleChoiceField` also has the attribute:\n\nSame as `ModelChoiceField.iterator`.\n\nBy default, `ModelChoiceField` and `ModelMultipleChoiceField` use\n`ModelChoiceIterator` to generate their field `choices`.\n\nWhen iterated, `ModelChoiceIterator` yields 2-tuple choices containing\n`ModelChoiceIteratorValue` instances as the first `value` element in each\nchoice. `ModelChoiceIteratorValue` wraps the choice value while maintaining a\nreference to the source model instance that can be used in custom widget\nimplementations, for example, to add data-* attributes to `<option>` elements.\n\nFor example, consider the following models:\n\nYou can use a `Select` widget subclass to include the value of `Topping.price`\nas the HTML attribute `data-price` for each `<option>` element:\n\nThis will render the `Pizza.topping` select as:\n\nFor more advanced usage you may subclass `ModelChoiceIterator` in order to\ncustomize the yielded 2-tuple choices.\n\nThe default class assigned to the `iterator` attribute of `ModelChoiceField`\nand `ModelMultipleChoiceField`. An iterable that yields 2-tuple choices from\nthe queryset.\n\nA single argument is required:\n\nThe instance of `ModelChoiceField` or `ModelMultipleChoiceField` to iterate\nand yield choices.\n\n`ModelChoiceIterator` has the following method:\n\nYields 2-tuple choices, in the `(value, label)` format used by\n`ChoiceField.choices`. The first `value` element is a\n`ModelChoiceIteratorValue` instance.\n\nTwo arguments are required:\n\nThe value of the choice. This value is used to render the `value` attribute of\nan HTML `<option>` element.\n\nThe model instance from the queryset. The instance can be accessed in custom\n`ChoiceWidget.create_option()` implementations to adjust the rendered HTML.\n\n`ModelChoiceIteratorValue` has the following method:\n\nReturn `value` as a string to be rendered in HTML.\n\nIf the built-in `Field` classes don\u2019t meet your needs, you can create custom\n`Field` classes. To do this, create a subclass of `django.forms.Field`. Its\nonly requirements are that it implement a `clean()` method and that its\n`__init__()` method accept the core arguments mentioned above (`required`,\n`label`, `initial`, `widget`, `help_text`).\n\nYou can also customize how a field will be accessed by overriding\n`get_bound_field()`.\n\n"}, {"name": "Form handling with class-based views", "path": "topics/class-based-views/generic-editing", "type": "Guides", "text": "\nForm processing generally has 3 paths:\n\nImplementing this yourself often results in a lot of repeated boilerplate code\n(see Using a form in a view). To help avoid this, Django provides a collection\nof generic class-based views for form processing.\n\nGiven a contact form:\n\nThe view can be constructed using a `FormView`:\n\nNotes:\n\nGeneric views really shine when working with models. These generic views will\nautomatically create a `ModelForm`, so long as they can work out which model\nclass to use:\n\nModel form views provide a `form_valid()` implementation that saves the model\nautomatically. You can override this if you have any special requirements; see\nbelow for examples.\n\nYou don\u2019t even need to provide a `success_url` for `CreateView` or\n`UpdateView` \\- they will use `get_absolute_url()` on the model object if\navailable.\n\nIf you want to use a custom `ModelForm` (for instance to add extra\nvalidation), set `form_class` on your view.\n\nNote\n\nWhen specifying a custom form class, you must still specify the model, even\nthough the `form_class` may be a `ModelForm`.\n\nFirst we need to add `get_absolute_url()` to our `Author` class:\n\nThen we can use `CreateView` and friends to do the actual work. Notice how\nwe\u2019re just configuring the generic class-based views here; we don\u2019t have to\nwrite any logic ourselves:\n\nNote\n\nWe have to use `reverse_lazy()` instead of `reverse()`, as the urls are not\nloaded when the file is imported.\n\nThe `fields` attribute works the same way as the `fields` attribute on the\ninner `Meta` class on `ModelForm`. Unless you define the form class in another\nway, the attribute is required and the view will raise an\n`ImproperlyConfigured` exception if it\u2019s not.\n\nIf you specify both the `fields` and `form_class` attributes, an\n`ImproperlyConfigured` exception will be raised.\n\nFinally, we hook these new views into the URLconf:\n\nNote\n\nThese views inherit `SingleObjectTemplateResponseMixin` which uses\n`template_name_suffix` to construct the `template_name` based on the model.\n\nIn this example:\n\nIf you wish to have separate templates for `CreateView` and `UpdateView`, you\ncan set either `template_name` or `template_name_suffix` on your view class.\n\nTo track the user that created an object using a `CreateView`, you can use a\ncustom `ModelForm` to do this. First, add the foreign key relation to the\nmodel:\n\nIn the view, ensure that you don\u2019t include `created_by` in the list of fields\nto edit, and override `form_valid()` to add the user:\n\n`LoginRequiredMixin` prevents users who aren\u2019t logged in from accessing the\nform. If you omit that, you\u2019ll need to handle unauthorized users in\n`form_valid()`.\n\nHere is an example showing how you might go about implementing a form that\nworks with an API-based workflow as well as \u2018normal\u2019 form POSTs:\n\n"}, {"name": "Format localization", "path": "topics/i18n/formatting", "type": "Guides", "text": "\nDjango\u2019s formatting system is capable of displaying dates, times and numbers\nin templates using the format specified for the current locale. It also\nhandles localized input in forms.\n\nWhen it\u2019s enabled, two users accessing the same content may see dates, times\nand numbers formatted in different ways, depending on the formats for their\ncurrent locale.\n\nThe formatting system is disabled by default. To enable it, it\u2019s necessary to\nset `USE_L10N = True` in your settings file.\n\nNote\n\nTo enable number formatting with thousand separators, it is necessary to set\n`USE_THOUSAND_SEPARATOR = True` in your settings file. Alternatively, you\ncould use `intcomma` to format numbers in your template.\n\nNote\n\nThere is a related `USE_I18N` setting that controls if Django should activate\ntranslation. See Translation for more details.\n\nWhen formatting is enabled, Django can use localized formats when parsing\ndates, times and numbers in forms. That means it tries different formats for\ndifferent locales when guessing the format used by the user when inputting\ndata on forms.\n\nNote\n\nDjango uses different formats for displaying data to those it uses for parsing\ndata. Most notably, the formats for parsing dates can\u2019t use the `%a`\n(abbreviated weekday name), `%A` (full weekday name), `%b` (abbreviated month\nname), `%B` (full month name), or `%p` (AM/PM).\n\nTo enable a form field to localize input and output data use its `localize`\nargument:\n\nWhen you have enabled formatting with `USE_L10N`, Django will try to use a\nlocale specific format whenever it outputs a value in a template.\n\nHowever, it may not always be appropriate to use localized values \u2013 for\nexample, if you\u2019re outputting JavaScript or XML that is designed to be\nmachine-readable, you will always want unlocalized values. You may also want\nto use localization in selected templates, rather than using localization\neverywhere.\n\nTo allow for fine control over the use of localization, Django provides the\n`l10n` template library that contains the following tags and filters.\n\nEnables or disables localization of template variables in the contained block.\n\nThis tag allows a more fine grained control of localization than `USE_L10N`.\n\nTo activate or deactivate localization for a template block, use:\n\nNote\n\nThe value of `USE_L10N` isn\u2019t respected inside of a `{% localize %}` block.\n\nSee `localize` and `unlocalize` for template filters that will do the same job\non a per-variable basis.\n\nForces localization of a single value.\n\nFor example:\n\nTo disable localization on a single value, use `unlocalize`. To control\nlocalization over a large section of a template, use the `localize` template\ntag.\n\nForces a single value to be printed without localization.\n\nFor example:\n\nTo force localization of a single value, use `localize`. To control\nlocalization over a large section of a template, use the `localize` template\ntag.\n\nReturns a string representation for unlocalized numbers (`int`, `float`, or\n`Decimal`).\n\nDjango provides format definitions for many locales, but sometimes you might\nwant to create your own, because a format file doesn\u2019t exist for your locale,\nor because you want to overwrite some of the values.\n\nTo use custom formats, specify the path where you\u2019ll place format files first.\nTo do that, set your `FORMAT_MODULE_PATH` setting to the package where format\nfiles will exist, for instance:\n\nFiles are not placed directly in this directory, but in a directory named as\nthe locale, and must be named `formats.py`. Be careful not to put sensitive\ninformation in these files as values inside can be exposed if you pass the\nstring to `django.utils.formats.get_format()` (used by the `date` template\nfilter).\n\nTo customize the English formats, a structure like this would be needed:\n\nwhere `formats.py` contains custom format definitions. For example:\n\nto use a non-breaking space (Unicode `00A0`) as a thousand separator, instead\nof the default for English, a comma.\n\nSome locales use context-sensitive formats for numbers, which Django\u2019s\nlocalization system cannot handle automatically.\n\nThe Swiss number formatting depends on the type of number that is being\nformatted. For monetary values, a comma is used as the thousand separator and\na decimal point for the decimal separator. For all other numbers, a comma is\nused as decimal separator and a space as thousand separator. The locale format\nprovided by Django uses the generic separators, a comma for decimal and a\nspace for thousand separators.\n\n"}, {"name": "Forms", "path": "ref/forms/index", "type": "API", "text": "\nDetailed form API reference. For introductory material, see the Working with\nforms topic guide.\n\n"}, {"name": "forms.BooleanField", "path": "ref/forms/fields#django.forms.BooleanField", "type": "django.forms", "text": "\nNote\n\nSince all `Field` subclasses have `required=True` by default, the validation\ncondition here is important. If you want to include a boolean in your form\nthat can be either `True` or `False` (e.g. a checked or unchecked checkbox),\nyou must remember to pass in `required=False` when creating the\n`BooleanField`.\n\n"}, {"name": "forms.BoundField", "path": "ref/forms/api#django.forms.BoundField", "type": "django.forms", "text": "\nUsed to display HTML or access attributes for a single field of a `Form`\ninstance.\n\nThe `__str__()` method of this object displays the HTML for this field.\n\n"}, {"name": "forms.BoundField.as_hidden()", "path": "ref/forms/api#django.forms.BoundField.as_hidden", "type": "django.forms", "text": "\nReturns a string of HTML for representing this as an `<input type=\"hidden\">`.\n\n`**kwargs` are passed to `as_widget()`.\n\nThis method is primarily used internally. You should use a widget instead.\n\n"}, {"name": "forms.BoundField.as_widget()", "path": "ref/forms/api#django.forms.BoundField.as_widget", "type": "django.forms", "text": "\nRenders the field by rendering the passed widget, adding any HTML attributes\npassed as `attrs`. If no widget is specified, then the field\u2019s default widget\nwill be used.\n\n`only_initial` is used by Django internals and should not be set explicitly.\n\n"}, {"name": "forms.BoundField.auto_id", "path": "ref/forms/api#django.forms.BoundField.auto_id", "type": "django.forms", "text": "\nThe HTML ID attribute for this `BoundField`. Returns an empty string if\n`Form.auto_id` is `False`.\n\n"}, {"name": "forms.BoundField.css_classes()", "path": "ref/forms/api#django.forms.BoundField.css_classes", "type": "django.forms", "text": "\nWhen you use Django\u2019s rendering shortcuts, CSS classes are used to indicate\nrequired form fields or fields that contain errors. If you\u2019re manually\nrendering a form, you can access these CSS classes using the `css_classes`\nmethod:\n\nIf you want to provide some additional classes in addition to the error and\nrequired classes that may be required, you can provide those classes as an\nargument:\n\n"}, {"name": "forms.BoundField.data", "path": "ref/forms/api#django.forms.BoundField.data", "type": "django.forms", "text": "\nThis property returns the data for this `BoundField` extracted by the widget\u2019s\n`value_from_datadict()` method, or `None` if it wasn\u2019t given:\n\n"}, {"name": "forms.BoundField.errors", "path": "ref/forms/api#django.forms.BoundField.errors", "type": "django.forms", "text": "\nA list-like object that is displayed as an HTML `<ul class=\"errorlist\">` when\nprinted:\n\n"}, {"name": "forms.BoundField.field", "path": "ref/forms/api#django.forms.BoundField.field", "type": "django.forms", "text": "\nThe form `Field` instance from the form class that this `BoundField` wraps.\n\n"}, {"name": "forms.BoundField.form", "path": "ref/forms/api#django.forms.BoundField.form", "type": "django.forms", "text": "\nThe `Form` instance this `BoundField` is bound to.\n\n"}, {"name": "forms.BoundField.help_text", "path": "ref/forms/api#django.forms.BoundField.help_text", "type": "django.forms", "text": "\nThe `help_text` of the field.\n\n"}, {"name": "forms.BoundField.html_name", "path": "ref/forms/api#django.forms.BoundField.html_name", "type": "django.forms", "text": "\nThe name that will be used in the widget\u2019s HTML `name` attribute. It takes the\nform `prefix` into account.\n\n"}, {"name": "forms.BoundField.id_for_label", "path": "ref/forms/api#django.forms.BoundField.id_for_label", "type": "django.forms", "text": "\nUse this property to render the ID of this field. For example, if you are\nmanually constructing a `<label>` in your template (despite the fact that\n`label_tag()` will do this for you):\n\nBy default, this will be the field\u2019s name prefixed by `id_` (\u201c`id_my_field`\u201d\nfor the example above). You may modify the ID by setting `attrs` on the\nfield\u2019s widget. For example, declaring a field like this:\n\nand using the template above, would render something like:\n\n"}, {"name": "forms.BoundField.initial", "path": "ref/forms/api#django.forms.BoundField.initial", "type": "django.forms", "text": "\nUse `BoundField.initial` to retrieve initial data for a form field. It\nretrieves the data from `Form.initial` if present, otherwise trying\n`Field.initial`. Callable values are evaluated. See Initial form values for\nmore examples.\n\n`BoundField.initial` caches its return value, which is useful especially when\ndealing with callables whose return values can change (e.g. `datetime.now` or\n`uuid.uuid4`):\n\nUsing `BoundField.initial` is recommended over `get_initial_for_field()`.\n\n"}, {"name": "forms.BoundField.is_hidden", "path": "ref/forms/api#django.forms.BoundField.is_hidden", "type": "django.forms", "text": "\nReturns `True` if this `BoundField`\u2019s widget is hidden.\n\n"}, {"name": "forms.BoundField.label", "path": "ref/forms/api#django.forms.BoundField.label", "type": "django.forms", "text": "\nThe `label` of the field. This is used in `label_tag()`.\n\n"}, {"name": "forms.BoundField.label_tag()", "path": "ref/forms/api#django.forms.BoundField.label_tag", "type": "django.forms", "text": "\nRenders a label tag for the form field using the template specified by\n`Form.template_name_label`.\n\nThe available context is:\n\nTip\n\nIn your template `field` is the instance of the `BoundField`. Therefore\n`field.field` accesses `BoundField.field` being the field you declare, e.g.\n`forms.CharField`.\n\nTo separately render the label tag of a form field, you can call its\n`label_tag()` method:\n\nIf you\u2019d like to customize the rendering this can be achieved by overriding\nthe `Form.template_name_label` attribute or more generally by overriding the\ndefault template, see also Overriding built-in form templates.\n\nThe label is now rendered using the template engine.\n\n"}, {"name": "forms.BoundField.name", "path": "ref/forms/api#django.forms.BoundField.name", "type": "django.forms", "text": "\nThe name of this field in the form:\n\n"}, {"name": "forms.BoundField.value()", "path": "ref/forms/api#django.forms.BoundField.value", "type": "django.forms", "text": "\nUse this method to render the raw value of this field as it would be rendered\nby a `Widget`:\n\n"}, {"name": "forms.BoundField.widget_type", "path": "ref/forms/api#django.forms.BoundField.widget_type", "type": "django.forms", "text": "\nReturns the lowercased class name of the wrapped field\u2019s widget, with any\ntrailing `input` or `widget` removed. This may be used when building forms\nwhere the layout is dependent upon the widget type. For example:\n\n"}, {"name": "forms.CharField", "path": "ref/forms/fields#django.forms.CharField", "type": "django.forms", "text": "\nHas four optional arguments for validation:\n\nIf provided, these arguments ensure that the string is at most or at least the\ngiven length.\n\nIf `True` (default), the value will be stripped of leading and trailing\nwhitespace.\n\nThe value to use to represent \u201cempty\u201d. Defaults to an empty string.\n\n"}, {"name": "forms.CharField.empty_value", "path": "ref/forms/fields#django.forms.CharField.empty_value", "type": "django.forms", "text": "\nThe value to use to represent \u201cempty\u201d. Defaults to an empty string.\n\n"}, {"name": "forms.CharField.max_length", "path": "ref/forms/fields#django.forms.CharField.max_length", "type": "django.forms", "text": "\n\n"}, {"name": "forms.CharField.min_length", "path": "ref/forms/fields#django.forms.CharField.min_length", "type": "django.forms", "text": "\nIf provided, these arguments ensure that the string is at most or at least the\ngiven length.\n\n"}, {"name": "forms.CharField.strip", "path": "ref/forms/fields#django.forms.CharField.strip", "type": "django.forms", "text": "\nIf `True` (default), the value will be stripped of leading and trailing\nwhitespace.\n\n"}, {"name": "forms.CheckboxInput", "path": "ref/forms/widgets#django.forms.CheckboxInput", "type": "django.forms", "text": "\nTakes one optional argument:\n\nA callable that takes the value of the `CheckboxInput` and returns `True` if\nthe checkbox should be checked for that value.\n\n"}, {"name": "forms.CheckboxInput.check_test", "path": "ref/forms/widgets#django.forms.CheckboxInput.check_test", "type": "django.forms", "text": "\nA callable that takes the value of the `CheckboxInput` and returns `True` if\nthe checkbox should be checked for that value.\n\n"}, {"name": "forms.CheckboxSelectMultiple", "path": "ref/forms/widgets#django.forms.CheckboxSelectMultiple", "type": "django.forms", "text": "\nSimilar to `SelectMultiple`, but rendered as a list of checkboxes:\n\nThe outer `<div>` container receives the `id` attribute of the widget, if\ndefined, or `BoundField.auto_id` otherwise.\n\nSo they are announced more concisely by screen readers, checkboxes were\nchanged to render in `<div>` tags.\n\n"}, {"name": "forms.ChoiceField", "path": "ref/forms/fields#django.forms.ChoiceField", "type": "django.forms", "text": "\nThe `invalid_choice` error message may contain `%(value)s`, which will be\nreplaced with the selected choice.\n\nTakes one extra argument:\n\nEither an iterable of 2-tuples to use as choices for this field, enumeration\nchoices, or a callable that returns such an iterable. This argument accepts\nthe same formats as the `choices` argument to a model field. See the model\nfield reference documentation on choices for more details. If the argument is\na callable, it is evaluated each time the field\u2019s form is initialized, in\naddition to during rendering. Defaults to an empty list.\n\n"}, {"name": "forms.ChoiceField.choices", "path": "ref/forms/fields#django.forms.ChoiceField.choices", "type": "django.forms", "text": "\nEither an iterable of 2-tuples to use as choices for this field, enumeration\nchoices, or a callable that returns such an iterable. This argument accepts\nthe same formats as the `choices` argument to a model field. See the model\nfield reference documentation on choices for more details. If the argument is\na callable, it is evaluated each time the field\u2019s form is initialized, in\naddition to during rendering. Defaults to an empty list.\n\n"}, {"name": "forms.ClearableFileInput", "path": "ref/forms/widgets#django.forms.ClearableFileInput", "type": "django.forms", "text": "\n\n"}, {"name": "forms.ComboField", "path": "ref/forms/fields#django.forms.ComboField", "type": "django.forms", "text": "\nTakes one extra required argument:\n\nThe list of fields that should be used to validate the field\u2019s value (in the\norder in which they are provided).\n\n"}, {"name": "forms.ComboField.fields", "path": "ref/forms/fields#django.forms.ComboField.fields", "type": "django.forms", "text": "\nThe list of fields that should be used to validate the field\u2019s value (in the\norder in which they are provided).\n\n"}, {"name": "forms.DateField", "path": "ref/forms/fields#django.forms.DateField", "type": "django.forms", "text": "\nTakes one optional argument:\n\nA list of formats used to attempt to convert a string to a valid\n`datetime.date` object.\n\nIf no `input_formats` argument is provided, the default input formats are\ntaken from `DATE_INPUT_FORMATS` if `USE_L10N` is `False`, or from the active\nlocale format `DATE_INPUT_FORMATS` key if localization is enabled. See also\nformat localization.\n\n"}, {"name": "forms.DateField.input_formats", "path": "ref/forms/fields#django.forms.DateField.input_formats", "type": "django.forms", "text": "\nA list of formats used to attempt to convert a string to a valid\n`datetime.date` object.\n\n"}, {"name": "forms.DateInput", "path": "ref/forms/widgets#django.forms.DateInput", "type": "django.forms", "text": "\nTakes same arguments as `TextInput`, with one more optional argument:\n\nThe format in which this field\u2019s initial value will be displayed.\n\nIf no `format` argument is provided, the default format is the first format\nfound in `DATE_INPUT_FORMATS` and respects Format localization.\n\n"}, {"name": "forms.DateInput.format", "path": "ref/forms/widgets#django.forms.DateInput.format", "type": "django.forms", "text": "\nThe format in which this field\u2019s initial value will be displayed.\n\n"}, {"name": "forms.DateTimeField", "path": "ref/forms/fields#django.forms.DateTimeField", "type": "django.forms", "text": "\nTakes one optional argument:\n\nA list of formats used to attempt to convert a string to a valid\n`datetime.datetime` object, in addition to ISO 8601 formats.\n\nThe field always accepts strings in ISO 8601 formatted dates or similar\nrecognized by `parse_datetime()`. Some examples are:\n\nIf no `input_formats` argument is provided, the default input formats are\ntaken from `DATETIME_INPUT_FORMATS` and `DATE_INPUT_FORMATS` if `USE_L10N` is\n`False`, or from the active locale format `DATETIME_INPUT_FORMATS` and\n`DATE_INPUT_FORMATS` keys if localization is enabled. See also format\nlocalization.\n\n"}, {"name": "forms.DateTimeField.input_formats", "path": "ref/forms/fields#django.forms.DateTimeField.input_formats", "type": "django.forms", "text": "\nA list of formats used to attempt to convert a string to a valid\n`datetime.datetime` object, in addition to ISO 8601 formats.\n\n"}, {"name": "forms.DateTimeInput", "path": "ref/forms/widgets#django.forms.DateTimeInput", "type": "django.forms", "text": "\nTakes same arguments as `TextInput`, with one more optional argument:\n\nThe format in which this field\u2019s initial value will be displayed.\n\nIf no `format` argument is provided, the default format is the first format\nfound in `DATETIME_INPUT_FORMATS` and respects Format localization.\n\nBy default, the microseconds part of the time value is always set to `0`. If\nmicroseconds are required, use a subclass with the `supports_microseconds`\nattribute set to `True`.\n\n"}, {"name": "forms.DateTimeInput.format", "path": "ref/forms/widgets#django.forms.DateTimeInput.format", "type": "django.forms", "text": "\nThe format in which this field\u2019s initial value will be displayed.\n\n"}, {"name": "forms.DecimalField", "path": "ref/forms/fields#django.forms.DecimalField", "type": "django.forms", "text": "\nThe `max_value` and `min_value` error messages may contain `%(limit_value)s`,\nwhich will be substituted by the appropriate limit. Similarly, the\n`max_digits`, `max_decimal_places` and `max_whole_digits` error messages may\ncontain `%(max)s`.\n\nTakes four optional arguments:\n\nThese control the range of values permitted in the field, and should be given\nas `decimal.Decimal` values.\n\nThe maximum number of digits (those before the decimal point plus those after\nthe decimal point, with leading zeros stripped) permitted in the value.\n\nThe maximum number of decimal places permitted.\n\n"}, {"name": "forms.DecimalField.decimal_places", "path": "ref/forms/fields#django.forms.DecimalField.decimal_places", "type": "django.forms", "text": "\nThe maximum number of decimal places permitted.\n\n"}, {"name": "forms.DecimalField.max_digits", "path": "ref/forms/fields#django.forms.DecimalField.max_digits", "type": "django.forms", "text": "\nThe maximum number of digits (those before the decimal point plus those after\nthe decimal point, with leading zeros stripped) permitted in the value.\n\n"}, {"name": "forms.DecimalField.max_value", "path": "ref/forms/fields#django.forms.DecimalField.max_value", "type": "django.forms", "text": "\n\n"}, {"name": "forms.DecimalField.min_value", "path": "ref/forms/fields#django.forms.DecimalField.min_value", "type": "django.forms", "text": "\nThese control the range of values permitted in the field, and should be given\nas `decimal.Decimal` values.\n\n"}, {"name": "forms.DurationField", "path": "ref/forms/fields#django.forms.DurationField", "type": "django.forms", "text": "\nAccepts any format understood by `parse_duration()`.\n\n"}, {"name": "forms.EmailField", "path": "ref/forms/fields#django.forms.EmailField", "type": "django.forms", "text": "\nHas three optional arguments `max_length`, `min_length`, and `empty_value`\nwhich work just as they do for `CharField`.\n\n"}, {"name": "forms.EmailInput", "path": "ref/forms/widgets#django.forms.EmailInput", "type": "django.forms", "text": "\n\n"}, {"name": "forms.ErrorList", "path": "ref/forms/api#django.forms.ErrorList", "type": "django.forms", "text": "\nBy default, forms use `django.forms.utils.ErrorList` to format validation\nerrors. `ErrorList` is a list like object where `initlist` is the list of\nerrors. In addition this class has the following attributes and methods.\n\nThe CSS classes to be used when rendering the error list. Any provided classes\nare added to the default `errorlist` class.\n\nSpecifies the renderer to use for `ErrorList`. Defaults to `None` which means\nto use the default renderer specified by the `FORM_RENDERER` setting.\n\nThe name of the template used when calling `__str__` or `render()`. By default\nthis is `'django/forms/errors/list/default.html'` which is a proxy for the\n`'ul.html'` template.\n\nThe name of the template used when calling `as_text()`. By default this is\n`'django/forms/errors/list/text.html'`. This template renders the errors as a\nlist of bullet points.\n\nThe name of the template used when calling `as_ul()`. By default this is\n`'django/forms/errors/list/ul.html'`. This template renders the errors in\n`<li>` tags with a wrapping `<ul>` with the CSS classes as defined by\n`error_class`.\n\nReturn context for rendering of errors in a template.\n\nThe available context is:\n\nThe render method is called by `__str__` as well as by the `as_ul()` method.\n\nAll arguments are optional and will default to:\n\nRenders the error list using the template defined by `template_name_text`.\n\nRenders the error list using the template defined by `template_name_ul`.\n\nIf you\u2019d like to customize the rendering of errors this can be achieved by\noverriding the `template_name` attribute or more generally by overriding the\ndefault template, see also Overriding built-in form templates.\n\n"}, {"name": "forms.ErrorList.as_text()", "path": "ref/forms/api#django.forms.ErrorList.as_text", "type": "django.forms", "text": "\nRenders the error list using the template defined by `template_name_text`.\n\n"}, {"name": "forms.ErrorList.as_ul()", "path": "ref/forms/api#django.forms.ErrorList.as_ul", "type": "django.forms", "text": "\nRenders the error list using the template defined by `template_name_ul`.\n\n"}, {"name": "forms.ErrorList.error_class", "path": "ref/forms/api#django.forms.ErrorList.error_class", "type": "django.forms", "text": "\nThe CSS classes to be used when rendering the error list. Any provided classes\nare added to the default `errorlist` class.\n\n"}, {"name": "forms.ErrorList.get_context()", "path": "ref/forms/api#django.forms.ErrorList.get_context", "type": "django.forms", "text": "\nReturn context for rendering of errors in a template.\n\nThe available context is:\n\n"}, {"name": "forms.ErrorList.render()", "path": "ref/forms/api#django.forms.ErrorList.render", "type": "django.forms", "text": "\nThe render method is called by `__str__` as well as by the `as_ul()` method.\n\nAll arguments are optional and will default to:\n\n"}, {"name": "forms.ErrorList.renderer", "path": "ref/forms/api#django.forms.ErrorList.renderer", "type": "django.forms", "text": "\nSpecifies the renderer to use for `ErrorList`. Defaults to `None` which means\nto use the default renderer specified by the `FORM_RENDERER` setting.\n\n"}, {"name": "forms.ErrorList.template_name", "path": "ref/forms/api#django.forms.ErrorList.template_name", "type": "django.forms", "text": "\nThe name of the template used when calling `__str__` or `render()`. By default\nthis is `'django/forms/errors/list/default.html'` which is a proxy for the\n`'ul.html'` template.\n\n"}, {"name": "forms.ErrorList.template_name_text", "path": "ref/forms/api#django.forms.ErrorList.template_name_text", "type": "django.forms", "text": "\nThe name of the template used when calling `as_text()`. By default this is\n`'django/forms/errors/list/text.html'`. This template renders the errors as a\nlist of bullet points.\n\n"}, {"name": "forms.ErrorList.template_name_ul", "path": "ref/forms/api#django.forms.ErrorList.template_name_ul", "type": "django.forms", "text": "\nThe name of the template used when calling `as_ul()`. By default this is\n`'django/forms/errors/list/ul.html'`. This template renders the errors in\n`<li>` tags with a wrapping `<ul>` with the CSS classes as defined by\n`error_class`.\n\n"}, {"name": "forms.Field", "path": "ref/forms/fields#django.forms.Field", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.clean()", "path": "ref/forms/fields#django.forms.Field.clean", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.disabled", "path": "ref/forms/fields#django.forms.Field.disabled", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.error_messages", "path": "ref/forms/fields#django.forms.Field.error_messages", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.get_bound_field()", "path": "ref/forms/api#django.forms.Field.get_bound_field", "type": "django.forms", "text": "\nTakes an instance of `Form` and the name of the field. The return value will\nbe used when accessing the field in a template. Most likely it will be an\ninstance of a subclass of `BoundField`.\n\n"}, {"name": "forms.Field.has_changed()", "path": "ref/forms/fields#django.forms.Field.has_changed", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.help_text", "path": "ref/forms/fields#django.forms.Field.help_text", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.initial", "path": "ref/forms/fields#django.forms.Field.initial", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.label", "path": "ref/forms/fields#django.forms.Field.label", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.label_suffix", "path": "ref/forms/fields#django.forms.Field.label_suffix", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.localize", "path": "ref/forms/fields#django.forms.Field.localize", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.required", "path": "ref/forms/fields#django.forms.Field.required", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.validators", "path": "ref/forms/fields#django.forms.Field.validators", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Field.widget", "path": "ref/forms/fields#django.forms.Field.widget", "type": "django.forms", "text": "\n\n"}, {"name": "forms.FileField", "path": "ref/forms/fields#django.forms.FileField", "type": "django.forms", "text": "\nHas two optional arguments for validation, `max_length` and\n`allow_empty_file`. If provided, these ensure that the file name is at most\nthe given length, and that validation will succeed even if the file content is\nempty.\n\nTo learn more about the `UploadedFile` object, see the file uploads\ndocumentation.\n\nWhen you use a `FileField` in a form, you must also remember to bind the file\ndata to the form.\n\nThe `max_length` error refers to the length of the filename. In the error\nmessage for that key, `%(max)d` will be replaced with the maximum filename\nlength and `%(length)d` will be replaced with the current filename length.\n\n"}, {"name": "forms.FileInput", "path": "ref/forms/widgets#django.forms.FileInput", "type": "django.forms", "text": "\n\n"}, {"name": "forms.FilePathField", "path": "ref/forms/fields#django.forms.FilePathField", "type": "django.forms", "text": "\nThe field allows choosing from files inside a certain directory. It takes five\nextra arguments; only `path` is required:\n\nThe absolute path to the directory whose contents you want listed. This\ndirectory must exist.\n\nIf `False` (the default) only the direct contents of `path` will be offered as\nchoices. If `True`, the directory will be descended into recursively and all\ndescendants will be listed as choices.\n\nA regular expression pattern; only files with names matching this expression\nwill be allowed as choices.\n\nOptional. Either `True` or `False`. Default is `True`. Specifies whether files\nin the specified location should be included. Either this or `allow_folders`\nmust be `True`.\n\nOptional. Either `True` or `False`. Default is `False`. Specifies whether\nfolders in the specified location should be included. Either this or\n`allow_files` must be `True`.\n\n"}, {"name": "forms.FilePathField.allow_files", "path": "ref/forms/fields#django.forms.FilePathField.allow_files", "type": "django.forms", "text": "\nOptional. Either `True` or `False`. Default is `True`. Specifies whether files\nin the specified location should be included. Either this or `allow_folders`\nmust be `True`.\n\n"}, {"name": "forms.FilePathField.allow_folders", "path": "ref/forms/fields#django.forms.FilePathField.allow_folders", "type": "django.forms", "text": "\nOptional. Either `True` or `False`. Default is `False`. Specifies whether\nfolders in the specified location should be included. Either this or\n`allow_files` must be `True`.\n\n"}, {"name": "forms.FilePathField.match", "path": "ref/forms/fields#django.forms.FilePathField.match", "type": "django.forms", "text": "\nA regular expression pattern; only files with names matching this expression\nwill be allowed as choices.\n\n"}, {"name": "forms.FilePathField.path", "path": "ref/forms/fields#django.forms.FilePathField.path", "type": "django.forms", "text": "\nThe absolute path to the directory whose contents you want listed. This\ndirectory must exist.\n\n"}, {"name": "forms.FilePathField.recursive", "path": "ref/forms/fields#django.forms.FilePathField.recursive", "type": "django.forms", "text": "\nIf `False` (the default) only the direct contents of `path` will be offered as\nchoices. If `True`, the directory will be descended into recursively and all\ndescendants will be listed as choices.\n\n"}, {"name": "forms.FloatField", "path": "ref/forms/fields#django.forms.FloatField", "type": "django.forms", "text": "\nTakes two optional arguments for validation, `max_value` and `min_value`.\nThese control the range of values permitted in the field.\n\n"}, {"name": "forms.Form", "path": "ref/forms/api#django.forms.Form", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.add_error()", "path": "ref/forms/api#django.forms.Form.add_error", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.as_p()", "path": "ref/forms/api#django.forms.Form.as_p", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.as_table()", "path": "ref/forms/api#django.forms.Form.as_table", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.as_ul()", "path": "ref/forms/api#django.forms.Form.as_ul", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.auto_id", "path": "ref/forms/api#django.forms.Form.auto_id", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.changed_data", "path": "ref/forms/api#django.forms.Form.changed_data", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.clean()", "path": "ref/forms/api#django.forms.Form.clean", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.cleaned_data", "path": "ref/forms/api#django.forms.Form.cleaned_data", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.default_renderer", "path": "ref/forms/api#django.forms.Form.default_renderer", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.error_css_class", "path": "ref/forms/api#django.forms.Form.error_css_class", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.errors", "path": "ref/forms/api#django.forms.Form.errors", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.errors.as_data()", "path": "ref/forms/api#django.forms.Form.errors.as_data", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.errors.as_json()", "path": "ref/forms/api#django.forms.Form.errors.as_json", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.errors.get_json_data()", "path": "ref/forms/api#django.forms.Form.errors.get_json_data", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.field_order", "path": "ref/forms/api#django.forms.Form.field_order", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.fields", "path": "ref/forms/api#django.forms.Form.fields", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.get_context()", "path": "ref/forms/api#django.forms.Form.get_context", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.get_initial_for_field()", "path": "ref/forms/api#django.forms.Form.get_initial_for_field", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.has_changed()", "path": "ref/forms/api#django.forms.Form.has_changed", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.has_error()", "path": "ref/forms/api#django.forms.Form.has_error", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.initial", "path": "ref/forms/api#django.forms.Form.initial", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.is_bound", "path": "ref/forms/api#django.forms.Form.is_bound", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.is_multipart()", "path": "ref/forms/api#django.forms.Form.is_multipart", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.is_valid()", "path": "ref/forms/api#django.forms.Form.is_valid", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.label_suffix", "path": "ref/forms/api#django.forms.Form.label_suffix", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.non_field_errors()", "path": "ref/forms/api#django.forms.Form.non_field_errors", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.order_fields()", "path": "ref/forms/api#django.forms.Form.order_fields", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.prefix", "path": "ref/forms/api#django.forms.Form.prefix", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.render()", "path": "ref/forms/api#django.forms.Form.render", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.required_css_class", "path": "ref/forms/api#django.forms.Form.required_css_class", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.template_name", "path": "ref/forms/api#django.forms.Form.template_name", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.template_name_label", "path": "ref/forms/api#django.forms.Form.template_name_label", "type": "django.forms", "text": "\n\n"}, {"name": "forms.Form.use_required_attribute", "path": "ref/forms/api#django.forms.Form.use_required_attribute", "type": "django.forms", "text": "\n\n"}, {"name": "forms.formsets.BaseFormSet", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet", "type": "django.forms", "text": "\n\n"}, {"name": "forms.formsets.BaseFormSet.as_p()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.as_p", "type": "django.forms", "text": "\nRenders the formset with the `template_name_p` template.\n\n"}, {"name": "forms.formsets.BaseFormSet.as_table()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.as_table", "type": "django.forms", "text": "\nRenders the formset with the `template_name_table` template.\n\n"}, {"name": "forms.formsets.BaseFormSet.as_ul()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.as_ul", "type": "django.forms", "text": "\nRenders the formset with the `template_name_ul` template.\n\n"}, {"name": "forms.formsets.BaseFormSet.can_delete", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.can_delete", "type": "django.forms", "text": "\n\n"}, {"name": "forms.formsets.BaseFormSet.can_delete_extra", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.can_delete_extra", "type": "django.forms", "text": "\n\n"}, {"name": "forms.formsets.BaseFormSet.can_order", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.can_order", "type": "django.forms", "text": "\n\n"}, {"name": "forms.formsets.BaseFormSet.deletion_widget", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.deletion_widget", "type": "django.forms", "text": "\n\n"}, {"name": "forms.formsets.BaseFormSet.get_context()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.get_context", "type": "django.forms", "text": "\nReturns the context for rendering a formset in a template.\n\nThe available context is:\n\n"}, {"name": "forms.formsets.BaseFormSet.get_deletion_widget()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.get_deletion_widget", "type": "django.forms", "text": "\n\n"}, {"name": "forms.formsets.BaseFormSet.get_ordering_widget()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.get_ordering_widget", "type": "django.forms", "text": "\n\n"}, {"name": "forms.formsets.BaseFormSet.ordering_widget", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.ordering_widget", "type": "django.forms", "text": "\n\n"}, {"name": "forms.formsets.BaseFormSet.render()", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.render", "type": "django.forms", "text": "\nThe render method is called by `__str__` as well as the `as_p()`, `as_ul()`,\nand `as_table()` methods. All arguments are optional and will default to:\n\n"}, {"name": "forms.formsets.BaseFormSet.renderer", "path": "topics/forms/formsets#django.forms.formsets.BaseFormSet.renderer", "type": "django.forms", "text": "\nSpecifies the renderer to use for the formset. Defaults to the renderer\nspecified by the `FORM_RENDERER` setting.\n\n"}, {"name