[{"name": "_api", "path": "_api_api", "type": "_api", "text": "matplotlib._api Helper functions for managing the Matplotlib API. This documentation is only relevant for Matplotlib developers, not for users.  Warning This module and its submodules are for internal use only. Do not use them in your own code. We may change the API at any time with no warning.    matplotlib._api.caching_module_getattr(cls)[source]\n \nHelper decorator for implementing module-level __getattr__ as a class. This decorator must be used at the module toplevel as follows: @caching_module_getattr\nclass __getattr__:  # The class *must* be named ``__getattr__``.\n    @property  # Only properties are taken into account.\n    def name(self): ...\n The __getattr__ class will be replaced by a __getattr__ function such that trying to access name on the module will resolve the corresponding property (which may be decorated e.g. with _api.deprecated for deprecating module globals). The properties are all implicitly cached. Moreover, a suitable AttributeError is generated and raised if no property with the given name exists. \n   matplotlib._api.check_getitem(_mapping, **kwargs)[source]\n \nkwargs must consist of a single key, value pair. If key is in _mapping, return _mapping[value]; else, raise an appropriate ValueError. Examples >>> _api.check_getitem({\"foo\": \"bar\"}, arg=arg)\n \n   matplotlib._api.check_in_list(_values, *, _print_supported_values=True, **kwargs)[source]\n \nFor each key, value pair in kwargs, check that value is in _values.  Parameters \n \n_valuesiterable\n\n\nSequence of values to check on.  \n_print_supported_valuesbool, default: True\n\n\nWhether to print _values when raising ValueError.  \n**kwargsdict\n\n\nkey, value pairs as keyword arguments to find in _values.    Raises \n ValueError\n\nIf any value in kwargs is not found in _values.     Examples >>> _api.check_in_list([\"foo\", \"bar\"], arg=arg, other_arg=other_arg)\n \n   matplotlib._api.check_isinstance(_types, **kwargs)[source]\n \nFor each key, value pair in kwargs, check that value is an instance of one of _types; if not, raise an appropriate TypeError. As a special case, a None entry in _types is treated as NoneType. Examples >>> _api.check_isinstance((SomeClass, None), arg=arg)\n \n   matplotlib._api.check_shape(_shape, **kwargs)[source]\n \nFor each key, value pair in kwargs, check that value has the shape _shape, if not, raise an appropriate ValueError. None in the shape is treated as a \"free\" size that can have any length. e.g. (None, 2) -> (N, 2) The values checked must be numpy arrays. Examples To check for (N, 2) shaped arrays >>> _api.check_shape((None, 2), arg=arg, other_arg=other_arg)\n \n   classmatplotlib._api.classproperty(fget, fset=None, fdel=None, doc=None)[source]\n \nBases: object Like property, but also triggers on access via the class, and it is the class that's passed as argument. Examples class C:\n    @classproperty\n    def foo(cls):\n        return cls.__name__\n\nassert C.foo == \"C\"\n   propertyfget\n\n \n   matplotlib._api.select_matching_signature(funcs, *args, **kwargs)[source]\n \nSelect and call the function that accepts *args, **kwargs. funcs is a list of functions which should not raise any exception (other than TypeError if the arguments passed do not match their signature). select_matching_signature tries to call each of the functions in funcs with *args, **kwargs (in the order in which they are given). Calls that fail with a TypeError are silently skipped. As soon as a call succeeds, select_matching_signature returns its return value. If no function accepts *args, **kwargs, then the TypeError raised by the last failing call is re-raised. Callers should normally make sure that any *args, **kwargs can only bind a single func (to avoid any ambiguity), although this is not checked by select_matching_signature. Notes select_matching_signature is intended to help implementing signature-overloaded functions. In general, such functions should be avoided, except for back-compatibility concerns. A typical use pattern is def my_func(*args, **kwargs):\n    params = select_matching_signature(\n        [lambda old1, old2: locals(), lambda new: locals()],\n        *args, **kwargs)\n    if \"old1\" in params:\n        warn_deprecated(...)\n        old1, old2 = params.values()  # note that locals() is ordered.\n    else:\n        new, = params.values()\n    # do things with params\n which allows my_func to be called either with two parameters (old1 and old2) or a single one (new). Note that the new signature is given last, so that callers get a TypeError corresponding to the new signature if the arguments they passed in do not match any signature. \n   matplotlib._api.warn_external(message, category=None)[source]\n \nwarnings.warn wrapper that sets stacklevel to \"outside Matplotlib\". The original emitter of the warning can be obtained by patching this function back to warnings.warn, i.e. _api.warn_external =\nwarnings.warn (or functools.partial(warnings.warn, stacklevel=2), etc.). \n Helper functions for deprecating parts of the Matplotlib API. This documentation is only relevant for Matplotlib developers, not for users.  Warning This module is for internal use only. Do not use it in your own code. We may change the API at any time with no warning.    exceptionmatplotlib._api.deprecation.MatplotlibDeprecationWarning[source]\n \nBases: DeprecationWarning A class for issuing deprecation warnings for Matplotlib users. \n   matplotlib._api.deprecation.delete_parameter(since, name, func=None, **kwargs)[source]\n \nDecorator indicating that parameter name of func is being deprecated. The actual implementation of func should keep the name parameter in its signature, or accept a **kwargs argument (through which name would be passed). Parameters that come after the deprecated parameter effectively become keyword-only (as they cannot be passed positionally without triggering the DeprecationWarning on the deprecated parameter), and should be marked as such after the deprecation period has passed and the deprecated parameter is removed. Parameters other than since, name, and func are keyword-only and forwarded to warn_deprecated. Examples @_api.delete_parameter(\"3.1\", \"unused\")\ndef func(used_arg, other_arg, unused, more_args): ...\n \n   matplotlib._api.deprecation.deprecate_method_override(method, obj, *, allow_empty=False, **kwargs)[source]\n \nReturn obj.method with a deprecation if it was overridden, else None.  Parameters \n method\n\nAn unbound method, i.e. an expression of the form Class.method_name. Remember that within the body of a method, one can always use __class__ to refer to the class that is currently being defined.  obj\n\nEither an object of the class where method is defined, or a subclass of that class.  \nallow_emptybool, default: False\n\n\nWhether to allow overrides by \"empty\" methods without emitting a warning.  **kwargs\n\nAdditional parameters passed to warn_deprecated to generate the deprecation warning; must at least include the \"since\" key.     \n   classmatplotlib._api.deprecation.deprecate_privatize_attribute(*args, **kwargs)[source]\n \nBases: object Helper to deprecate public access to an attribute (or method). This helper should only be used at class scope, as follows: class Foo:\n    attr = _deprecate_privatize_attribute(*args, **kwargs)\n where all parameters are forwarded to deprecated. This form makes attr a property which forwards read and write access to self._attr (same name but with a leading underscore), with a deprecation warning. Note that the attribute name is derived from the name this helper is assigned to. This helper also works for deprecating methods. \n   matplotlib._api.deprecation.deprecated(since, *, message='', name='', alternative='', pending=False, obj_type=None, addendum='', removal='')[source]\n \nDecorator to mark a function, a class, or a property as deprecated. When deprecating a classmethod, a staticmethod, or a property, the @deprecated decorator should go under @classmethod and @staticmethod (i.e., deprecated should directly decorate the underlying callable), but over @property. When deprecating a class C intended to be used as a base class in a multiple inheritance hierarchy, C must define an __init__ method (if C instead inherited its __init__ from its own base class, then @deprecated would mess up __init__ inheritance when installing its own (deprecation-emitting) C.__init__). Parameters are the same as for warn_deprecated, except that obj_type defaults to 'class' if decorating a class, 'attribute' if decorating a property, and 'function' otherwise. Examples @deprecated('1.4.0')\ndef the_function_to_deprecate():\n    pass\n \n   matplotlib._api.deprecation.make_keyword_only(since, name, func=None)[source]\n \nDecorator indicating that passing parameter name (or any of the following ones) positionally to func is being deprecated. When used on a method that has a pyplot wrapper, this should be the outermost decorator, so that boilerplate.py can access the original signature. \n   matplotlib._api.deprecation.mplDeprecation[source]\n \nalias of matplotlib._api.deprecation.MatplotlibDeprecationWarning \n   matplotlib._api.deprecation.rename_parameter(since, old, new, func=None)[source]\n \nDecorator indicating that parameter old of func is renamed to new. The actual implementation of func should use new, not old. If old is passed to func, a DeprecationWarning is emitted, and its value is used, even if new is also passed by keyword (this is to simplify pyplot wrapper functions, which always pass new explicitly to the Axes method). If new is also passed but positionally, a TypeError will be raised by the underlying function during argument binding. Examples @_api.rename_parameter(\"3.1\", \"bad_name\", \"good_name\")\ndef func(good_name): ...\n \n   matplotlib._api.deprecation.suppress_matplotlib_deprecation_warning()\n\n   matplotlib._api.deprecation.warn_deprecated(since, *, message='', name='', alternative='', pending=False, obj_type='', addendum='', removal='')[source]\n \nDisplay a standardized deprecation.  Parameters \n \nsincestr\n\n\nThe release at which this API became deprecated.  \nmessagestr, optional\n\n\nOverride the default deprecation message. The %(since)s, %(name)s, %(alternative)s, %(obj_type)s, %(addendum)s, and %(removal)s format specifiers will be replaced by the values of the respective arguments passed to this function.  \nnamestr, optional\n\n\nThe name of the deprecated object.  \nalternativestr, optional\n\n\nAn alternative API that the user may use in place of the deprecated API. The deprecation warning will tell the user about this alternative if provided.  \npendingbool, optional\n\n\nIf True, uses a PendingDeprecationWarning instead of a DeprecationWarning. Cannot be used together with removal.  \nobj_typestr, optional\n\n\nThe object type being deprecated.  \naddendumstr, optional\n\n\nAdditional text appended directly to the final message.  \nremovalstr, optional\n\n\nThe expected removal version. With the default (an empty string), a removal version is automatically computed from since. Set to other Falsy values to not schedule a removal date. Cannot be used together with pending.     Examples # To warn of the deprecation of \"matplotlib.name_of_module\"\nwarn_deprecated('1.4.0', name='matplotlib.name_of_module',\n                obj_type='module')\n \n\n"}, {"name": "_api.caching_module_getattr()", "path": "_api_api#matplotlib._api.caching_module_getattr", "type": "_api", "text": "  matplotlib._api.caching_module_getattr(cls)[source]\n \nHelper decorator for implementing module-level __getattr__ as a class. This decorator must be used at the module toplevel as follows: @caching_module_getattr\nclass __getattr__:  # The class *must* be named ``__getattr__``.\n    @property  # Only properties are taken into account.\n    def name(self): ...\n The __getattr__ class will be replaced by a __getattr__ function such that trying to access name on the module will resolve the corresponding property (which may be decorated e.g. with _api.deprecated for deprecating module globals). The properties are all implicitly cached. Moreover, a suitable AttributeError is generated and raised if no property with the given name exists. \n"}, {"name": "_api.check_getitem()", "path": "_api_api#matplotlib._api.check_getitem", "type": "_api", "text": "  matplotlib._api.check_getitem(_mapping, **kwargs)[source]\n \nkwargs must consist of a single key, value pair. If key is in _mapping, return _mapping[value]; else, raise an appropriate ValueError. Examples >>> _api.check_getitem({\"foo\": \"bar\"}, arg=arg)\n \n"}, {"name": "_api.check_in_list()", "path": "_api_api#matplotlib._api.check_in_list", "type": "_api", "text": "  matplotlib._api.check_in_list(_values, *, _print_supported_values=True, **kwargs)[source]\n \nFor each key, value pair in kwargs, check that value is in _values.  Parameters \n \n_valuesiterable\n\n\nSequence of values to check on.  \n_print_supported_valuesbool, default: True\n\n\nWhether to print _values when raising ValueError.  \n**kwargsdict\n\n\nkey, value pairs as keyword arguments to find in _values.    Raises \n ValueError\n\nIf any value in kwargs is not found in _values.     Examples >>> _api.check_in_list([\"foo\", \"bar\"], arg=arg, other_arg=other_arg)\n \n"}, {"name": "_api.check_isinstance()", "path": "_api_api#matplotlib._api.check_isinstance", "type": "_api", "text": "  matplotlib._api.check_isinstance(_types, **kwargs)[source]\n \nFor each key, value pair in kwargs, check that value is an instance of one of _types; if not, raise an appropriate TypeError. As a special case, a None entry in _types is treated as NoneType. Examples >>> _api.check_isinstance((SomeClass, None), arg=arg)\n \n"}, {"name": "_api.check_shape()", "path": "_api_api#matplotlib._api.check_shape", "type": "_api", "text": "  matplotlib._api.check_shape(_shape, **kwargs)[source]\n \nFor each key, value pair in kwargs, check that value has the shape _shape, if not, raise an appropriate ValueError. None in the shape is treated as a \"free\" size that can have any length. e.g. (None, 2) -> (N, 2) The values checked must be numpy arrays. Examples To check for (N, 2) shaped arrays >>> _api.check_shape((None, 2), arg=arg, other_arg=other_arg)\n \n"}, {"name": "_api.classproperty", "path": "_api_api#matplotlib._api.classproperty", "type": "_api", "text": "  classmatplotlib._api.classproperty(fget, fset=None, fdel=None, doc=None)[source]\n \nBases: object Like property, but also triggers on access via the class, and it is the class that's passed as argument. Examples class C:\n    @classproperty\n    def foo(cls):\n        return cls.__name__\n\nassert C.foo == \"C\"\n   propertyfget\n\n \n"}, {"name": "_api.deprecation.delete_parameter()", "path": "_api_api#matplotlib._api.deprecation.delete_parameter", "type": "_api", "text": "  matplotlib._api.deprecation.delete_parameter(since, name, func=None, **kwargs)[source]\n \nDecorator indicating that parameter name of func is being deprecated. The actual implementation of func should keep the name parameter in its signature, or accept a **kwargs argument (through which name would be passed). Parameters that come after the deprecated parameter effectively become keyword-only (as they cannot be passed positionally without triggering the DeprecationWarning on the deprecated parameter), and should be marked as such after the deprecation period has passed and the deprecated parameter is removed. Parameters other than since, name, and func are keyword-only and forwarded to warn_deprecated. Examples @_api.delete_parameter(\"3.1\", \"unused\")\ndef func(used_arg, other_arg, unused, more_args): ...\n \n"}, {"name": "_api.deprecation.deprecate_method_override()", "path": "_api_api#matplotlib._api.deprecation.deprecate_method_override", "type": "_api", "text": "  matplotlib._api.deprecation.deprecate_method_override(method, obj, *, allow_empty=False, **kwargs)[source]\n \nReturn obj.method with a deprecation if it was overridden, else None.  Parameters \n method\n\nAn unbound method, i.e. an expression of the form Class.method_name. Remember that within the body of a method, one can always use __class__ to refer to the class that is currently being defined.  obj\n\nEither an object of the class where method is defined, or a subclass of that class.  \nallow_emptybool, default: False\n\n\nWhether to allow overrides by \"empty\" methods without emitting a warning.  **kwargs\n\nAdditional parameters passed to warn_deprecated to generate the deprecation warning; must at least include the \"since\" key.     \n"}, {"name": "_api.deprecation.deprecate_privatize_attribute", "path": "_api_api#matplotlib._api.deprecation.deprecate_privatize_attribute", "type": "_api", "text": "  classmatplotlib._api.deprecation.deprecate_privatize_attribute(*args, **kwargs)[source]\n \nBases: object Helper to deprecate public access to an attribute (or method). This helper should only be used at class scope, as follows: class Foo:\n    attr = _deprecate_privatize_attribute(*args, **kwargs)\n where all parameters are forwarded to deprecated. This form makes attr a property which forwards read and write access to self._attr (same name but with a leading underscore), with a deprecation warning. Note that the attribute name is derived from the name this helper is assigned to. This helper also works for deprecating methods. \n"}, {"name": "_api.deprecation.deprecated()", "path": "_api_api#matplotlib._api.deprecation.deprecated", "type": "_api", "text": "  matplotlib._api.deprecation.deprecated(since, *, message='', name='', alternative='', pending=False, obj_type=None, addendum='', removal='')[source]\n \nDecorator to mark a function, a class, or a property as deprecated. When deprecating a classmethod, a staticmethod, or a property, the @deprecated decorator should go under @classmethod and @staticmethod (i.e., deprecated should directly decorate the underlying callable), but over @property. When deprecating a class C intended to be used as a base class in a multiple inheritance hierarchy, C must define an __init__ method (if C instead inherited its __init__ from its own base class, then @deprecated would mess up __init__ inheritance when installing its own (deprecation-emitting) C.__init__). Parameters are the same as for warn_deprecated, except that obj_type defaults to 'class' if decorating a class, 'attribute' if decorating a property, and 'function' otherwise. Examples @deprecated('1.4.0')\ndef the_function_to_deprecate():\n    pass\n \n"}, {"name": "_api.deprecation.make_keyword_only()", "path": "_api_api#matplotlib._api.deprecation.make_keyword_only", "type": "_api", "text": "  matplotlib._api.deprecation.make_keyword_only(since, name, func=None)[source]\n \nDecorator indicating that passing parameter name (or any of the following ones) positionally to func is being deprecated. When used on a method that has a pyplot wrapper, this should be the outermost decorator, so that boilerplate.py can access the original signature. \n"}, {"name": "_api.deprecation.MatplotlibDeprecationWarning", "path": "_api_api#matplotlib._api.deprecation.MatplotlibDeprecationWarning", "type": "_api", "text": "  exceptionmatplotlib._api.deprecation.MatplotlibDeprecationWarning[source]\n \nBases: DeprecationWarning A class for issuing deprecation warnings for Matplotlib users. \n"}, {"name": "_api.deprecation.mplDeprecation", "path": "_api_api#matplotlib._api.deprecation.mplDeprecation", "type": "_api", "text": "  matplotlib._api.deprecation.mplDeprecation[source]\n \nalias of matplotlib._api.deprecation.MatplotlibDeprecationWarning \n"}, {"name": "_api.deprecation.rename_parameter()", "path": "_api_api#matplotlib._api.deprecation.rename_parameter", "type": "_api", "text": "  matplotlib._api.deprecation.rename_parameter(since, old, new, func=None)[source]\n \nDecorator indicating that parameter old of func is renamed to new. The actual implementation of func should use new, not old. If old is passed to func, a DeprecationWarning is emitted, and its value is used, even if new is also passed by keyword (this is to simplify pyplot wrapper functions, which always pass new explicitly to the Axes method). If new is also passed but positionally, a TypeError will be raised by the underlying function during argument binding. Examples @_api.rename_parameter(\"3.1\", \"bad_name\", \"good_name\")\ndef func(good_name): ...\n \n"}, {"name": "_api.deprecation.suppress_matplotlib_deprecation_warning()", "path": "_api_api#matplotlib._api.deprecation.suppress_matplotlib_deprecation_warning", "type": "_api", "text": "  matplotlib._api.deprecation.suppress_matplotlib_deprecation_warning()\n\n"}, {"name": "_api.deprecation.warn_deprecated()", "path": "_api_api#matplotlib._api.deprecation.warn_deprecated", "type": "_api", "text": "  matplotlib._api.deprecation.warn_deprecated(since, *, message='', name='', alternative='', pending=False, obj_type='', addendum='', removal='')[source]\n \nDisplay a standardized deprecation.  Parameters \n \nsincestr\n\n\nThe release at which this API became deprecated.  \nmessagestr, optional\n\n\nOverride the default deprecation message. The %(since)s, %(name)s, %(alternative)s, %(obj_type)s, %(addendum)s, and %(removal)s format specifiers will be replaced by the values of the respective arguments passed to this function.  \nnamestr, optional\n\n\nThe name of the deprecated object.  \nalternativestr, optional\n\n\nAn alternative API that the user may use in place of the deprecated API. The deprecation warning will tell the user about this alternative if provided.  \npendingbool, optional\n\n\nIf True, uses a PendingDeprecationWarning instead of a DeprecationWarning. Cannot be used together with removal.  \nobj_typestr, optional\n\n\nThe object type being deprecated.  \naddendumstr, optional\n\n\nAdditional text appended directly to the final message.  \nremovalstr, optional\n\n\nThe expected removal version. With the default (an empty string), a removal version is automatically computed from since. Set to other Falsy values to not schedule a removal date. Cannot be used together with pending.     Examples # To warn of the deprecation of \"matplotlib.name_of_module\"\nwarn_deprecated('1.4.0', name='matplotlib.name_of_module',\n                obj_type='module')\n \n"}, {"name": "_api.select_matching_signature()", "path": "_api_api#matplotlib._api.select_matching_signature", "type": "_api", "text": "  matplotlib._api.select_matching_signature(funcs, *args, **kwargs)[source]\n \nSelect and call the function that accepts *args, **kwargs. funcs is a list of functions which should not raise any exception (other than TypeError if the arguments passed do not match their signature). select_matching_signature tries to call each of the functions in funcs with *args, **kwargs (in the order in which they are given). Calls that fail with a TypeError are silently skipped. As soon as a call succeeds, select_matching_signature returns its return value. If no function accepts *args, **kwargs, then the TypeError raised by the last failing call is re-raised. Callers should normally make sure that any *args, **kwargs can only bind a single func (to avoid any ambiguity), although this is not checked by select_matching_signature. Notes select_matching_signature is intended to help implementing signature-overloaded functions. In general, such functions should be avoided, except for back-compatibility concerns. A typical use pattern is def my_func(*args, **kwargs):\n    params = select_matching_signature(\n        [lambda old1, old2: locals(), lambda new: locals()],\n        *args, **kwargs)\n    if \"old1\" in params:\n        warn_deprecated(...)\n        old1, old2 = params.values()  # note that locals() is ordered.\n    else:\n        new, = params.values()\n    # do things with params\n which allows my_func to be called either with two parameters (old1 and old2) or a single one (new). Note that the new signature is given last, so that callers get a TypeError corresponding to the new signature if the arguments they passed in do not match any signature. \n"}, {"name": "_api.warn_external()", "path": "_api_api#matplotlib._api.warn_external", "type": "_api", "text": "  matplotlib._api.warn_external(message, category=None)[source]\n \nwarnings.warn wrapper that sets stacklevel to \"outside Matplotlib\". The original emitter of the warning can be obtained by patching this function back to warnings.warn, i.e. _api.warn_external =\nwarnings.warn (or functools.partial(warnings.warn, stacklevel=2), etc.). \n"}, {"name": "_enums", "path": "_enums_api", "type": "_enums", "text": "matplotlib._enums Enums representing sets of strings that Matplotlib uses as input parameters. Matplotlib often uses simple data types like strings or tuples to define a concept; e.g. the line capstyle can be specified as one of 'butt', 'round', or 'projecting'. The classes in this module are used internally and serve to document these concepts formally. As an end-user you will not use these classes directly, but only the values they define.   classmatplotlib._enums.JoinStyle(value)[source]\n \nDefine how the connection between two line segments is drawn. For a visual impression of each JoinStyle, view these docs online, or run JoinStyle.demo. Lines in Matplotlib are typically defined by a 1D Path and a finite linewidth, where the underlying 1D Path represents the center of the stroked line. By default, GraphicsContextBase defines the boundaries of a stroked line to simply be every point within some radius, linewidth/2, away from any point of the center line. However, this results in corners appearing \"rounded\", which may not be the desired behavior if you are drawing, for example, a polygon or pointed star. Supported values:  'miter'\n\nthe \"arrow-tip\" style. Each boundary of the filled-in area will extend in a straight line parallel to the tangent vector of the centerline at the point it meets the corner, until they meet in a sharp point.  'round'\n\nstokes every point within a radius of linewidth/2 of the center lines.  'bevel'\n\nthe \"squared-off\" style. It can be thought of as a rounded corner where the \"circular\" part of the corner has been cut off.    Note Very long miter tips are cut off (to form a bevel) after a backend-dependent limit called the \"miter limit\", which specifies the maximum allowed ratio of miter length to line width. For example, the PDF backend uses the default value of 10 specified by the PDF standard, while the SVG backend does not even specify the miter limit, resulting in a default value of 4 per the SVG specification. Matplotlib does not currently allow the user to adjust this parameter. A more detailed description of the effect of a miter limit can be found in the Mozilla Developer Docs  (Source code, png, pdf)      staticdemo()[source]\n \nDemonstrate how each JoinStyle looks for various join angles. \n \n   classmatplotlib._enums.CapStyle(value)[source]\n \nDefine how the two endpoints (caps) of an unclosed line are drawn. How to draw the start and end points of lines that represent a closed curve (i.e. that end in a CLOSEPOLY) is controlled by the line's JoinStyle. For all other lines, how the start and end points are drawn is controlled by the CapStyle. For a visual impression of each CapStyle, view these docs online or run CapStyle.demo. Supported values:  'butt'\n\nthe line is squared off at its endpoint.  'projecting'\n\nthe line is squared off as in butt, but the filled in area extends beyond the endpoint a distance of linewidth/2.  'round'\n\nlike butt, but a semicircular cap is added to the end of the line, of radius linewidth/2.   (Source code, png, pdf)      staticdemo()[source]\n \nDemonstrate how each CapStyle looks for a thick line segment. \n \n\n"}, {"name": "_enums.CapStyle", "path": "_enums_api#matplotlib._enums.CapStyle", "type": "_enums", "text": "  classmatplotlib._enums.CapStyle(value)[source]\n \nDefine how the two endpoints (caps) of an unclosed line are drawn. How to draw the start and end points of lines that represent a closed curve (i.e. that end in a CLOSEPOLY) is controlled by the line's JoinStyle. For all other lines, how the start and end points are drawn is controlled by the CapStyle. For a visual impression of each CapStyle, view these docs online or run CapStyle.demo. Supported values:  'butt'\n\nthe line is squared off at its endpoint.  'projecting'\n\nthe line is squared off as in butt, but the filled in area extends beyond the endpoint a distance of linewidth/2.  'round'\n\nlike butt, but a semicircular cap is added to the end of the line, of radius linewidth/2.   (Source code, png, pdf)      staticdemo()[source]\n \nDemonstrate how each CapStyle looks for a thick line segment. \n \n"}, {"name": "_enums.CapStyle.demo()", "path": "_enums_api#matplotlib._enums.CapStyle.demo", "type": "_enums", "text": "  staticdemo()[source]\n \nDemonstrate how each CapStyle looks for a thick line segment. \n"}, {"name": "_enums.JoinStyle", "path": "_enums_api#matplotlib._enums.JoinStyle", "type": "_enums", "text": "  classmatplotlib._enums.JoinStyle(value)[source]\n \nDefine how the connection between two line segments is drawn. For a visual impression of each JoinStyle, view these docs online, or run JoinStyle.demo. Lines in Matplotlib are typically defined by a 1D Path and a finite linewidth, where the underlying 1D Path represents the center of the stroked line. By default, GraphicsContextBase defines the boundaries of a stroked line to simply be every point within some radius, linewidth/2, away from any point of the center line. However, this results in corners appearing \"rounded\", which may not be the desired behavior if you are drawing, for example, a polygon or pointed star. Supported values:  'miter'\n\nthe \"arrow-tip\" style. Each boundary of the filled-in area will extend in a straight line parallel to the tangent vector of the centerline at the point it meets the corner, until they meet in a sharp point.  'round'\n\nstokes every point within a radius of linewidth/2 of the center lines.  'bevel'\n\nthe \"squared-off\" style. It can be thought of as a rounded corner where the \"circular\" part of the corner has been cut off.    Note Very long miter tips are cut off (to form a bevel) after a backend-dependent limit called the \"miter limit\", which specifies the maximum allowed ratio of miter length to line width. For example, the PDF backend uses the default value of 10 specified by the PDF standard, while the SVG backend does not even specify the miter limit, resulting in a default value of 4 per the SVG specification. Matplotlib does not currently allow the user to adjust this parameter. A more detailed description of the effect of a miter limit can be found in the Mozilla Developer Docs  (Source code, png, pdf)      staticdemo()[source]\n \nDemonstrate how each JoinStyle looks for various join angles. \n \n"}, {"name": "_enums.JoinStyle.demo()", "path": "_enums_api#matplotlib._enums.JoinStyle.demo", "type": "_enums", "text": "  staticdemo()[source]\n \nDemonstrate how each JoinStyle looks for various join angles. \n"}, {"name": "afm", "path": "afm_api", "type": "afm", "text": "matplotlib.afm A python interface to Adobe Font Metrics Files. Although a number of other Python implementations exist, and may be more complete than this, it was decided not to go with them because they were either:  copyrighted or used a non-BSD compatible license had too many dependencies and a free standing lib was needed did more than needed and it was easier to write afresh rather than figure out how to get just what was needed.  It is pretty easy to use, and has no external dependencies: >>> import matplotlib as mpl\n>>> from pathlib import Path\n>>> afm_path = Path(mpl.get_data_path(), 'fonts', 'afm', 'ptmr8a.afm')\n>>>\n>>> from matplotlib.afm import AFM\n>>> with afm_path.open('rb') as fh:\n...     afm = AFM(fh)\n>>> afm.string_width_height('What the heck?')\n(6220.0, 694)\n>>> afm.get_fontname()\n'Times-Roman'\n>>> afm.get_kern_dist('A', 'f')\n0\n>>> afm.get_kern_dist('A', 'y')\n-92.0\n>>> afm.get_bbox_char('!')\n[130, -9, 238, 676]\n As in the Adobe Font Metrics File Format Specification, all dimensions are given in units of 1/1000 of the scale factor (point size) of the font being used.   classmatplotlib.afm.AFM(fh)[source]\n \nBases: object Parse the AFM file in file object fh.   propertyfamily_name\n \nThe font family name, e.g., 'Times'. \n   get_angle()[source]\n \nReturn the fontangle as float. \n   get_bbox_char(c, isord=False)[source]\n\n   get_capheight()[source]\n \nReturn the cap height as float. \n   get_familyname()[source]\n \nReturn the font family name, e.g., 'Times'. \n   get_fontname()[source]\n \nReturn the font name, e.g., 'Times-Roman'. \n   get_fullname()[source]\n \nReturn the font full name, e.g., 'Times-Roman'. \n   get_height_char(c, isord=False)[source]\n \nGet the bounding box (ink) height of character c (space is 0). \n   get_horizontal_stem_width()[source]\n \nReturn the standard horizontal stem width as float, or None if not specified in AFM file. \n   get_kern_dist(c1, c2)[source]\n \nReturn the kerning pair distance (possibly 0) for chars c1 and c2. \n   get_kern_dist_from_name(name1, name2)[source]\n \nReturn the kerning pair distance (possibly 0) for chars name1 and name2. \n   get_name_char(c, isord=False)[source]\n \nGet the name of the character, i.e., ';' is 'semicolon'. \n   get_str_bbox(s)[source]\n \nReturn the string bounding box. \n   get_str_bbox_and_descent(s)[source]\n \nReturn the string bounding box and the maximal descent. \n   get_underline_thickness()[source]\n \nReturn the underline thickness as float. \n   get_vertical_stem_width()[source]\n \nReturn the standard vertical stem width as float, or None if not specified in AFM file. \n   get_weight()[source]\n \nReturn the font weight, e.g., 'Bold' or 'Roman'. \n   get_width_char(c, isord=False)[source]\n \nGet the width of the character from the character metric WX field. \n   get_width_from_char_name(name)[source]\n \nGet the width of the character from a type1 character name. \n   get_xheight()[source]\n \nReturn the xheight as float. \n   propertypostscript_name\n\n   string_width_height(s)[source]\n \nReturn the string width (including kerning) and string height as a (w, h) tuple. \n \n   classmatplotlib.afm.CharMetrics(width, name, bbox)[source]\n \nBases: tuple Represents the character metrics of a single character. Notes The fields do currently only describe a subset of character metrics information defined in the AFM standard. Create new instance of CharMetrics(width, name, bbox)   bbox\n \nThe bbox of the character (B) as a tuple (llx, lly, urx, ury). \n   name\n \nThe character name (N). \n   width\n \nThe character width (WX). \n \n   classmatplotlib.afm.CompositePart(name, dx, dy)[source]\n \nBases: tuple Represents the information on a composite element of a composite char. Create new instance of CompositePart(name, dx, dy)   dx\n \nx-displacement of the part from the origin. \n   dy\n \ny-displacement of the part from the origin. \n   name\n \nName of the part, e.g. 'acute'. \n \n\n"}, {"name": "afm.AFM", "path": "afm_api#matplotlib.afm.AFM", "type": "afm", "text": "  classmatplotlib.afm.AFM(fh)[source]\n \nBases: object Parse the AFM file in file object fh.   propertyfamily_name\n \nThe font family name, e.g., 'Times'. \n   get_angle()[source]\n \nReturn the fontangle as float. \n   get_bbox_char(c, isord=False)[source]\n\n   get_capheight()[source]\n \nReturn the cap height as float. \n   get_familyname()[source]\n \nReturn the font family name, e.g., 'Times'. \n   get_fontname()[source]\n \nReturn the font name, e.g., 'Times-Roman'. \n   get_fullname()[source]\n \nReturn the font full name, e.g., 'Times-Roman'. \n   get_height_char(c, isord=False)[source]\n \nGet the bounding box (ink) height of character c (space is 0). \n   get_horizontal_stem_width()[source]\n \nReturn the standard horizontal stem width as float, or None if not specified in AFM file. \n   get_kern_dist(c1, c2)[source]\n \nReturn the kerning pair distance (possibly 0) for chars c1 and c2. \n   get_kern_dist_from_name(name1, name2)[source]\n \nReturn the kerning pair distance (possibly 0) for chars name1 and name2. \n   get_name_char(c, isord=False)[source]\n \nGet the name of the character, i.e., ';' is 'semicolon'. \n   get_str_bbox(s)[source]\n \nReturn the string bounding box. \n   get_str_bbox_and_descent(s)[source]\n \nReturn the string bounding box and the maximal descent. \n   get_underline_thickness()[source]\n \nReturn the underline thickness as float. \n   get_vertical_stem_width()[source]\n \nReturn the standard vertical stem width as float, or None if not specified in AFM file. \n   get_weight()[source]\n \nReturn the font weight, e.g., 'Bold' or 'Roman'. \n   get_width_char(c, isord=False)[source]\n \nGet the width of the character from the character metric WX field. \n   get_width_from_char_name(name)[source]\n \nGet the width of the character from a type1 character name. \n   get_xheight()[source]\n \nReturn the xheight as float. \n   propertypostscript_name\n\n   string_width_height(s)[source]\n \nReturn the string width (including kerning) and string height as a (w, h) tuple. \n \n"}, {"name": "afm.AFM.get_angle()", "path": "afm_api#matplotlib.afm.AFM.get_angle", "type": "afm", "text": "  get_angle()[source]\n \nReturn the fontangle as float. \n"}, {"name": "afm.AFM.get_bbox_char()", "path": "afm_api#matplotlib.afm.AFM.get_bbox_char", "type": "afm", "text": "  get_bbox_char(c, isord=False)[source]\n\n"}, {"name": "afm.AFM.get_capheight()", "path": "afm_api#matplotlib.afm.AFM.get_capheight", "type": "afm", "text": "  get_capheight()[source]\n \nReturn the cap height as float. \n"}, {"name": "afm.AFM.get_familyname()", "path": "afm_api#matplotlib.afm.AFM.get_familyname", "type": "afm", "text": "  get_familyname()[source]\n \nReturn the font family name, e.g., 'Times'. \n"}, {"name": "afm.AFM.get_fontname()", "path": "afm_api#matplotlib.afm.AFM.get_fontname", "type": "afm", "text": "  get_fontname()[source]\n \nReturn the font name, e.g., 'Times-Roman'. \n"}, {"name": "afm.AFM.get_fullname()", "path": "afm_api#matplotlib.afm.AFM.get_fullname", "type": "afm", "text": "  get_fullname()[source]\n \nReturn the font full name, e.g., 'Times-Roman'. \n"}, {"name": "afm.AFM.get_height_char()", "path": "afm_api#matplotlib.afm.AFM.get_height_char", "type": "afm", "text": "  get_height_char(c, isord=False)[source]\n \nGet the bounding box (ink) height of character c (space is 0). \n"}, {"name": "afm.AFM.get_horizontal_stem_width()", "path": "afm_api#matplotlib.afm.AFM.get_horizontal_stem_width", "type": "afm", "text": "  get_horizontal_stem_width()[source]\n \nReturn the standard horizontal stem width as float, or None if not specified in AFM file. \n"}, {"name": "afm.AFM.get_kern_dist()", "path": "afm_api#matplotlib.afm.AFM.get_kern_dist", "type": "afm", "text": "  get_kern_dist(c1, c2)[source]\n \nReturn the kerning pair distance (possibly 0) for chars c1 and c2. \n"}, {"name": "afm.AFM.get_kern_dist_from_name()", "path": "afm_api#matplotlib.afm.AFM.get_kern_dist_from_name", "type": "afm", "text": "  get_kern_dist_from_name(name1, name2)[source]\n \nReturn the kerning pair distance (possibly 0) for chars name1 and name2. \n"}, {"name": "afm.AFM.get_name_char()", "path": "afm_api#matplotlib.afm.AFM.get_name_char", "type": "afm", "text": "  get_name_char(c, isord=False)[source]\n \nGet the name of the character, i.e., ';' is 'semicolon'. \n"}, {"name": "afm.AFM.get_str_bbox()", "path": "afm_api#matplotlib.afm.AFM.get_str_bbox", "type": "afm", "text": "  get_str_bbox(s)[source]\n \nReturn the string bounding box. \n"}, {"name": "afm.AFM.get_str_bbox_and_descent()", "path": "afm_api#matplotlib.afm.AFM.get_str_bbox_and_descent", "type": "afm", "text": "  get_str_bbox_and_descent(s)[source]\n \nReturn the string bounding box and the maximal descent. \n"}, {"name": "afm.AFM.get_underline_thickness()", "path": "afm_api#matplotlib.afm.AFM.get_underline_thickness", "type": "afm", "text": "  get_underline_thickness()[source]\n \nReturn the underline thickness as float. \n"}, {"name": "afm.AFM.get_vertical_stem_width()", "path": "afm_api#matplotlib.afm.AFM.get_vertical_stem_width", "type": "afm", "text": "  get_vertical_stem_width()[source]\n \nReturn the standard vertical stem width as float, or None if not specified in AFM file. \n"}, {"name": "afm.AFM.get_weight()", "path": "afm_api#matplotlib.afm.AFM.get_weight", "type": "afm", "text": "  get_weight()[source]\n \nReturn the font weight, e.g., 'Bold' or 'Roman'. \n"}, {"name": "afm.AFM.get_width_char()", "path": "afm_api#matplotlib.afm.AFM.get_width_char", "type": "afm", "text": "  get_width_char(c, isord=False)[source]\n \nGet the width of the character from the character metric WX field. \n"}, {"name": "afm.AFM.get_width_from_char_name()", "path": "afm_api#matplotlib.afm.AFM.get_width_from_char_name", "type": "afm", "text": "  get_width_from_char_name(name)[source]\n \nGet the width of the character from a type1 character name. \n"}, {"name": "afm.AFM.get_xheight()", "path": "afm_api#matplotlib.afm.AFM.get_xheight", "type": "afm", "text": "  get_xheight()[source]\n \nReturn the xheight as float. \n"}, {"name": "afm.AFM.string_width_height()", "path": "afm_api#matplotlib.afm.AFM.string_width_height", "type": "afm", "text": "  string_width_height(s)[source]\n \nReturn the string width (including kerning) and string height as a (w, h) tuple. \n"}, {"name": "afm.CharMetrics", "path": "afm_api#matplotlib.afm.CharMetrics", "type": "afm", "text": "  classmatplotlib.afm.CharMetrics(width, name, bbox)[source]\n \nBases: tuple Represents the character metrics of a single character. Notes The fields do currently only describe a subset of character metrics information defined in the AFM standard. Create new instance of CharMetrics(width, name, bbox)   bbox\n \nThe bbox of the character (B) as a tuple (llx, lly, urx, ury). \n   name\n \nThe character name (N). \n   width\n \nThe character width (WX). \n \n"}, {"name": "afm.CharMetrics.bbox", "path": "afm_api#matplotlib.afm.CharMetrics.bbox", "type": "afm", "text": "  bbox\n \nThe bbox of the character (B) as a tuple (llx, lly, urx, ury). \n"}, {"name": "afm.CharMetrics.name", "path": "afm_api#matplotlib.afm.CharMetrics.name", "type": "afm", "text": "  name\n \nThe character name (N). \n"}, {"name": "afm.CharMetrics.width", "path": "afm_api#matplotlib.afm.CharMetrics.width", "type": "afm", "text": "  width\n \nThe character width (WX). \n"}, {"name": "afm.CompositePart", "path": "afm_api#matplotlib.afm.CompositePart", "type": "afm", "text": "  classmatplotlib.afm.CompositePart(name, dx, dy)[source]\n \nBases: tuple Represents the information on a composite element of a composite char. Create new instance of CompositePart(name, dx, dy)   dx\n \nx-displacement of the part from the origin. \n   dy\n \ny-displacement of the part from the origin. \n   name\n \nName of the part, e.g. 'acute'. \n \n"}, {"name": "afm.CompositePart.dx", "path": "afm_api#matplotlib.afm.CompositePart.dx", "type": "afm", "text": "  dx\n \nx-displacement of the part from the origin. \n"}, {"name": "afm.CompositePart.dy", "path": "afm_api#matplotlib.afm.CompositePart.dy", "type": "afm", "text": "  dy\n \ny-displacement of the part from the origin. \n"}, {"name": "afm.CompositePart.name", "path": "afm_api#matplotlib.afm.CompositePart.name", "type": "afm", "text": "  name\n \nName of the part, e.g. 'acute'. \n"}, {"name": "animation", "path": "animation_api", "type": "animation", "text": "matplotlib.animation Table of Contents  Inheritance Diagrams Animation Writer Classes Helper Classes   Inheritance Diagrams                    Animation The easiest way to make a live animation in Matplotlib is to use one of the Animation classes.  \nAnimation A base class for Animations.  \nFuncAnimation Makes an animation by repeatedly calling a function func.  \nArtistAnimation Animation using a fixed set of Artist objects.   In both cases it is critical to keep a reference to the instance object. The animation is advanced by a timer (typically from the host GUI framework) which the Animation object holds the only reference to. If you do not hold a reference to the Animation object, it (and hence the timers) will be garbage collected which will stop the animation. To save an animation use Animation.save, Animation.to_html5_video, or Animation.to_jshtml. See Helper Classes below for details about what movie formats are supported.  FuncAnimation The inner workings of FuncAnimation is more-or-less: for d in frames:\n   artists = func(d, *fargs)\n   fig.canvas.draw_idle()\n   fig.canvas.start_event_loop(interval)\n with details to handle 'blitting' (to dramatically improve the live performance), to be non-blocking, not repeatedly start/stop the GUI event loop, handle repeats, multiple animated axes, and easily save the animation to a movie file. 'Blitting' is a standard technique in computer graphics. The general gist is to take an existing bit map (in our case a mostly rasterized figure) and then 'blit' one more artist on top. Thus, by managing a saved 'clean' bitmap, we can only re-draw the few artists that are changing at each frame and possibly save significant amounts of time. When we use blitting (by passing blit=True), the core loop of FuncAnimation gets a bit more complicated: ax = fig.gca()\n\ndef update_blit(artists):\n    fig.canvas.restore_region(bg_cache)\n    for a in artists:\n        a.axes.draw_artist(a)\n\n    ax.figure.canvas.blit(ax.bbox)\n\nartists = init_func()\n\nfor a in artists:\n   a.set_animated(True)\n\nfig.canvas.draw()\nbg_cache = fig.canvas.copy_from_bbox(ax.bbox)\n\nfor f in frames:\n    artists = func(f, *fargs)\n    update_blit(artists)\n    fig.canvas.start_event_loop(interval)\n This is of course leaving out many details (such as updating the background when the figure is resized or fully re-drawn). However, this hopefully minimalist example gives a sense of how init_func and func are used inside of FuncAnimation and the theory of how 'blitting' works. The expected signature on func and init_func is very simple to keep FuncAnimation out of your book keeping and plotting logic, but this means that the callable objects you pass in must know what artists they should be working on. There are several approaches to handling this, of varying complexity and encapsulation. The simplest approach, which works quite well in the case of a script, is to define the artist at a global scope and let Python sort things out. For example import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\n\nfig, ax = plt.subplots()\nxdata, ydata = [], []\nln, = plt.plot([], [], 'ro')\n\ndef init():\n    ax.set_xlim(0, 2*np.pi)\n    ax.set_ylim(-1, 1)\n    return ln,\n\ndef update(frame):\n    xdata.append(frame)\n    ydata.append(np.sin(frame))\n    ln.set_data(xdata, ydata)\n    return ln,\n\nani = FuncAnimation(fig, update, frames=np.linspace(0, 2*np.pi, 128),\n                    init_func=init, blit=True)\nplt.show()\n The second method is to use functools.partial to 'bind' artists to function. A third method is to use closures to build up the required artists and functions. A fourth method is to create a class.  Examples  Decay The Bayes update The double pendulum problem Animated histogram Rain simulation Animated 3D random walk Animated line plot Oscilloscope MATPLOTLIB UNCHAINED     ArtistAnimation  Examples  Animated image using a precomputed list of images      Writer Classes The provided writers fall into a few broad categories. The Pillow writer relies on the Pillow library to write the animation, keeping all data in memory.  \nPillowWriter    The HTML writer generates JavaScript-based animations.  \nHTMLWriter Writer for JavaScript-based HTML movies.   The pipe-based writers stream the captured frames over a pipe to an external process. The pipe-based variants tend to be more performant, but may not work on all systems.  \nFFMpegWriter Pipe-based ffmpeg writer.  \nImageMagickWriter Pipe-based animated gif.   The file-based writers save temporary files for each frame which are stitched into a single file at the end. Although slower, these writers can be easier to debug.  \nFFMpegFileWriter File-based ffmpeg writer.  \nImageMagickFileWriter File-based animated gif writer.   Fundamentally, a MovieWriter provides a way to grab sequential frames from the same underlying Figure object. The base class MovieWriter implements 3 methods and a context manager. The only difference between the pipe-based and file-based writers is in the arguments to their respective setup methods. The setup() method is used to prepare the writer (possibly opening a pipe), successive calls to grab_frame() capture a single frame at a time and finish() finalizes the movie and writes the output file to disk. For example moviewriter = MovieWriter(...)\nmoviewriter.setup(fig, 'my_movie.ext', dpi=100)\nfor j in range(n):\n    update_figure(j)\n    moviewriter.grab_frame()\nmoviewriter.finish()\n If using the writer classes directly (not through Animation.save), it is strongly encouraged to use the saving context manager with moviewriter.saving(fig, 'myfile.mp4', dpi=100):\n    for j in range(n):\n        update_figure(j)\n        moviewriter.grab_frame()\n to ensures that setup and cleanup are performed as necessary.  Examples  Frame grabbing     Helper Classes  Animation Base Classes  \nAnimation A base class for Animations.  \nTimedAnimation Animation subclass for time-based animation.     Writer Registry A module-level registry is provided to map between the name of the writer and the class to allow a string to be passed to Animation.save instead of a writer instance.  \nMovieWriterRegistry Registry of available writer classes by human readable name.     Writer Base Classes To reduce code duplication base classes  \nAbstractMovieWriter Abstract base class for writing movies.  \nMovieWriter Base class for writing movies.  \nFileMovieWriter MovieWriter for writing to individual files and stitching at the end.   and mixins  \nFFMpegBase Mixin class for FFMpeg output.  \nImageMagickBase Mixin class for ImageMagick output.   are provided. See the source code for how to easily implement new MovieWriter classes.  \n"}, {"name": "animation.AbstractMovieWriter", "path": "_as_gen/matplotlib.animation.abstractmoviewriter", "type": "animation", "text": "matplotlib.animation.AbstractMovieWriter   classmatplotlib.animation.AbstractMovieWriter(fps=5, metadata=None, codec=None, bitrate=None)[source]\n \nAbstract base class for writing movies. Fundamentally, what a MovieWriter does is provide is a way to grab frames by calling grab_frame(). setup() is called to start the process and finish() is called afterwards. This class is set up to provide for writing movie frame data to a pipe. saving() is provided as a context manager to facilitate this process as: with moviewriter.saving(fig, outfile='myfile.mp4', dpi=100):\n    # Iterate over frames\n    moviewriter.grab_frame(**savefig_kwargs)\n The use of the context manager ensures that setup() and finish() are performed as necessary. An instance of a concrete subclass of this class can be given as the writer argument of Animation.save().   __init__(fps=5, metadata=None, codec=None, bitrate=None)[source]\n\n Methods  \n__init__([fps, metadata, codec, bitrate])   \nfinish() Finish any processing for writing the movie.  \ngrab_frame(**savefig_kwargs) Grab the image information from the figure and save as a movie frame.  \nsaving(fig, outfile, dpi, *args, **kwargs) Context manager to facilitate writing the movie file.  \nsetup(fig, outfile[, dpi]) Setup for writing the movie file.   Attributes  \nframe_size A tuple (width, height) in pixels of a movie frame.     abstractfinish()[source]\n \nFinish any processing for writing the movie. \n   propertyframe_size\n \nA tuple (width, height) in pixels of a movie frame. \n   abstractgrab_frame(**savefig_kwargs)[source]\n \nGrab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure. \n   saving(fig, outfile, dpi, *args, **kwargs)\n \nContext manager to facilitate writing the movie file. *args, **kw are any parameters that should be passed to setup. \n   abstractsetup(fig, outfile, dpi=None)[source]\n \nSetup for writing the movie file.  Parameters \n \nfigFigure\n\n\nThe figure object that contains the information for frames.  \noutfilestr\n\n\nThe filename of the resulting movie file.  \ndpifloat, default: fig.dpi\n\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file.     \n \n\n"}, {"name": "animation.AbstractMovieWriter.__init__()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.__init__", "type": "animation", "text": "  __init__(fps=5, metadata=None, codec=None, bitrate=None)[source]\n\n"}, {"name": "animation.AbstractMovieWriter.finish()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.finish", "type": "animation", "text": "  abstractfinish()[source]\n \nFinish any processing for writing the movie. \n"}, {"name": "animation.AbstractMovieWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.grab_frame", "type": "animation", "text": "  abstractgrab_frame(**savefig_kwargs)[source]\n \nGrab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure. \n"}, {"name": "animation.AbstractMovieWriter.saving()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.saving", "type": "animation", "text": "  saving(fig, outfile, dpi, *args, **kwargs)\n \nContext manager to facilitate writing the movie file. *args, **kw are any parameters that should be passed to setup. \n"}, {"name": "animation.AbstractMovieWriter.setup()", "path": "_as_gen/matplotlib.animation.abstractmoviewriter#matplotlib.animation.AbstractMovieWriter.setup", "type": "animation", "text": "  abstractsetup(fig, outfile, dpi=None)[source]\n \nSetup for writing the movie file.  Parameters \n \nfigFigure\n\n\nThe figure object that contains the information for frames.  \noutfilestr\n\n\nThe filename of the resulting movie file.  \ndpifloat, default: fig.dpi\n\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file.     \n"}, {"name": "animation.Animation", "path": "_as_gen/matplotlib.animation.animation", "type": "animation", "text": "matplotlib.animation.Animation   classmatplotlib.animation.Animation(fig, event_source=None, blit=False)[source]\n \nA base class for Animations. This class is not usable as is, and should be subclassed to provide needed behavior.  Note You must store the created Animation in a variable that lives as long as the animation should run. Otherwise, the Animation object will be garbage-collected and the animation stops.   Parameters \n \nfigFigure\n\n\nThe figure object used to get needed events, such as draw or resize.  \nevent_sourceobject, optional\n\n\nA class that can run a callback when desired events are generated, as well as be stopped and started. Examples include timers (see TimedAnimation) and file system notifications.  \nblitbool, default: False\n\n\nWhether blitting is used to optimize drawing.      See also  \nFuncAnimation, ArtistAnimation\n\n    __init__(fig, event_source=None, blit=False)[source]\n\n Methods  \n__init__(fig[, event_source, blit])   \nnew_frame_seq() Return a new sequence of frame information.  \nnew_saved_frame_seq() Return a new sequence of saved/cached frame information.  \npause() Pause the animation.  \nresume() Resume the animation.  \nsave(filename[, writer, fps, dpi, codec, ...]) Save the animation as a movie file by drawing every frame.  \nto_html5_video([embed_limit]) Convert the animation to an HTML5 <video> tag.  \nto_jshtml([fps, embed_frames, default_mode]) Generate HTML representation of the animation.     new_frame_seq()[source]\n \nReturn a new sequence of frame information. \n   new_saved_frame_seq()[source]\n \nReturn a new sequence of saved/cached frame information. \n   pause()[source]\n \nPause the animation. \n   resume()[source]\n \nResume the animation. \n   save(filename, writer=None, fps=None, dpi=None, codec=None, bitrate=None, extra_args=None, metadata=None, extra_anim=None, savefig_kwargs=None, *, progress_callback=None)[source]\n \nSave the animation as a movie file by drawing every frame.  Parameters \n \nfilenamestr\n\n\nThe output filename, e.g., mymovie.mp4.  \nwriterMovieWriter or str, default: rcParams[\"animation.writer\"] (default: 'ffmpeg')\n\n\nA MovieWriter instance to use or a key that identifies a class to use, such as 'ffmpeg'.  \nfpsint, optional\n\n\nMovie frame rate (per second). If not set, the frame rate from the animation's frame interval.  \ndpifloat, default: rcParams[\"savefig.dpi\"] (default: 'figure')\n\n\nControls the dots per inch for the movie frames. Together with the figure's size in inches, this controls the size of the movie.  \ncodecstr, default: rcParams[\"animation.codec\"] (default: 'h264').\n\n\nThe video codec to use. Not all codecs are supported by a given MovieWriter.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nDictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.  \nextra_animlist, default: []\n\n\nAdditional Animation objects that should be included in the saved movie file. These need to be from the same matplotlib.figure.Figure instance. Also, animation frames will just be simply combined, so there should be a 1:1 correspondence between the frames from the different animations.  \nsavefig_kwargsdict, default: {}\n\n\nKeyword arguments passed to each savefig call used to save the individual frames.  \nprogress_callbackfunction, optional\n\n\nA callback function that will be called for every frame to notify the saving progress. It must have the signature def func(current_frame: int, total_frames: int) -> Any\n where current_frame is the current frame number and total_frames is the total number of frames to be saved. total_frames is set to None, if the total number of frames can not be determined. Return values may exist but are ignored. Example code to write the progress to stdout: progress_callback =                    lambda i, n: print(f'Saving frame {i} of {n}')\n     Notes fps, codec, bitrate, extra_args and metadata are used to construct a MovieWriter instance and can only be passed if writer is a string. If they are passed as non-None and writer is a MovieWriter, a RuntimeError will be raised. \n   to_html5_video(embed_limit=None)[source]\n \nConvert the animation to an HTML5 <video> tag. This saves the animation as an h264 video, encoded in base64 directly into the HTML5 video tag. This respects rcParams[\"animation.writer\"] (default: 'ffmpeg') and rcParams[\"animation.bitrate\"] (default: -1). This also makes use of the interval to control the speed, and uses the repeat parameter to decide whether to loop.  Parameters \n \nembed_limitfloat, optional\n\n\nLimit, in MB, of the returned animation. No animation is created if the limit is exceeded. Defaults to rcParams[\"animation.embed_limit\"] (default: 20.0) = 20.0.    Returns \n str\n\nAn HTML5 video tag with the animation embedded as base64 encoded h264 video. If the embed_limit is exceeded, this returns the string \"Video too large to embed.\"     \n   to_jshtml(fps=None, embed_frames=True, default_mode=None)[source]\n \nGenerate HTML representation of the animation.  Parameters \n \nfpsint, optional\n\n\nMovie frame rate (per second). If not set, the frame rate from the animation's frame interval.  \nembed_framesbool, optional\n\n\ndefault_modestr, optional\n\n\nWhat to do when the animation ends. Must be one of {'loop',\n'once', 'reflect'}. Defaults to 'loop' if self.repeat is True, otherwise 'once'.     \n \n\n"}, {"name": "animation.Animation.__init__()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.__init__", "type": "animation", "text": "  __init__(fig, event_source=None, blit=False)[source]\n\n"}, {"name": "animation.Animation.new_frame_seq()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.new_frame_seq", "type": "animation", "text": "  new_frame_seq()[source]\n \nReturn a new sequence of frame information. \n"}, {"name": "animation.Animation.new_saved_frame_seq()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.new_saved_frame_seq", "type": "animation", "text": "  new_saved_frame_seq()[source]\n \nReturn a new sequence of saved/cached frame information. \n"}, {"name": "animation.Animation.pause()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.pause", "type": "animation", "text": "  pause()[source]\n \nPause the animation. \n"}, {"name": "animation.Animation.resume()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.resume", "type": "animation", "text": "  resume()[source]\n \nResume the animation. \n"}, {"name": "animation.Animation.save()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.save", "type": "animation", "text": "  save(filename, writer=None, fps=None, dpi=None, codec=None, bitrate=None, extra_args=None, metadata=None, extra_anim=None, savefig_kwargs=None, *, progress_callback=None)[source]\n \nSave the animation as a movie file by drawing every frame.  Parameters \n \nfilenamestr\n\n\nThe output filename, e.g., mymovie.mp4.  \nwriterMovieWriter or str, default: rcParams[\"animation.writer\"] (default: 'ffmpeg')\n\n\nA MovieWriter instance to use or a key that identifies a class to use, such as 'ffmpeg'.  \nfpsint, optional\n\n\nMovie frame rate (per second). If not set, the frame rate from the animation's frame interval.  \ndpifloat, default: rcParams[\"savefig.dpi\"] (default: 'figure')\n\n\nControls the dots per inch for the movie frames. Together with the figure's size in inches, this controls the size of the movie.  \ncodecstr, default: rcParams[\"animation.codec\"] (default: 'h264').\n\n\nThe video codec to use. Not all codecs are supported by a given MovieWriter.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nDictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.  \nextra_animlist, default: []\n\n\nAdditional Animation objects that should be included in the saved movie file. These need to be from the same matplotlib.figure.Figure instance. Also, animation frames will just be simply combined, so there should be a 1:1 correspondence between the frames from the different animations.  \nsavefig_kwargsdict, default: {}\n\n\nKeyword arguments passed to each savefig call used to save the individual frames.  \nprogress_callbackfunction, optional\n\n\nA callback function that will be called for every frame to notify the saving progress. It must have the signature def func(current_frame: int, total_frames: int) -> Any\n where current_frame is the current frame number and total_frames is the total number of frames to be saved. total_frames is set to None, if the total number of frames can not be determined. Return values may exist but are ignored. Example code to write the progress to stdout: progress_callback =                    lambda i, n: print(f'Saving frame {i} of {n}')\n     Notes fps, codec, bitrate, extra_args and metadata are used to construct a MovieWriter instance and can only be passed if writer is a string. If they are passed as non-None and writer is a MovieWriter, a RuntimeError will be raised. \n"}, {"name": "animation.Animation.to_html5_video()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.to_html5_video", "type": "animation", "text": "  to_html5_video(embed_limit=None)[source]\n \nConvert the animation to an HTML5 <video> tag. This saves the animation as an h264 video, encoded in base64 directly into the HTML5 video tag. This respects rcParams[\"animation.writer\"] (default: 'ffmpeg') and rcParams[\"animation.bitrate\"] (default: -1). This also makes use of the interval to control the speed, and uses the repeat parameter to decide whether to loop.  Parameters \n \nembed_limitfloat, optional\n\n\nLimit, in MB, of the returned animation. No animation is created if the limit is exceeded. Defaults to rcParams[\"animation.embed_limit\"] (default: 20.0) = 20.0.    Returns \n str\n\nAn HTML5 video tag with the animation embedded as base64 encoded h264 video. If the embed_limit is exceeded, this returns the string \"Video too large to embed.\"     \n"}, {"name": "animation.Animation.to_jshtml()", "path": "_as_gen/matplotlib.animation.animation#matplotlib.animation.Animation.to_jshtml", "type": "animation", "text": "  to_jshtml(fps=None, embed_frames=True, default_mode=None)[source]\n \nGenerate HTML representation of the animation.  Parameters \n \nfpsint, optional\n\n\nMovie frame rate (per second). If not set, the frame rate from the animation's frame interval.  \nembed_framesbool, optional\n\n\ndefault_modestr, optional\n\n\nWhat to do when the animation ends. Must be one of {'loop',\n'once', 'reflect'}. Defaults to 'loop' if self.repeat is True, otherwise 'once'.     \n"}, {"name": "animation.ArtistAnimation", "path": "_as_gen/matplotlib.animation.artistanimation", "type": "animation", "text": "matplotlib.animation.ArtistAnimation   classmatplotlib.animation.ArtistAnimation(fig, artists, *args, **kwargs)[source]\n \nAnimation using a fixed set of Artist objects. Before creating an instance, all plotting should have taken place and the relevant artists saved.  Note You must store the created Animation in a variable that lives as long as the animation should run. Otherwise, the Animation object will be garbage-collected and the animation stops.   Parameters \n \nfigFigure\n\n\nThe figure object used to get needed events, such as draw or resize.  \nartistslist\n\n\nEach list entry is a collection of Artist objects that are made visible on the corresponding frame. Other artists are made invisible.  \nintervalint, default: 200\n\n\nDelay between frames in milliseconds.  \nrepeat_delayint, default: 0\n\n\nThe delay in milliseconds between consecutive animation runs, if repeat is True.  \nrepeatbool, default: True\n\n\nWhether the animation repeats when the sequence of frames is completed.  \nblitbool, default: False\n\n\nWhether blitting is used to optimize drawing.       __init__(fig, artists, *args, **kwargs)[source]\n\n Methods  \n__init__(fig, artists, *args, **kwargs)   \nnew_frame_seq() Return a new sequence of frame information.  \nnew_saved_frame_seq() Return a new sequence of saved/cached frame information.  \npause() Pause the animation.  \nresume() Resume the animation.  \nsave(filename[, writer, fps, dpi, codec, ...]) Save the animation as a movie file by drawing every frame.  \nto_html5_video([embed_limit]) Convert the animation to an HTML5 <video> tag.  \nto_jshtml([fps, embed_frames, default_mode]) Generate HTML representation of the animation.   \n\n"}, {"name": "animation.ArtistAnimation.__init__()", "path": "_as_gen/matplotlib.animation.artistanimation#matplotlib.animation.ArtistAnimation.__init__", "type": "animation", "text": "  __init__(fig, artists, *args, **kwargs)[source]\n\n"}, {"name": "animation.FFMpegBase", "path": "_as_gen/matplotlib.animation.ffmpegbase", "type": "animation", "text": "matplotlib.animation.FFMpegBase   classmatplotlib.animation.FFMpegBase[source]\n \nMixin class for FFMpeg output. To be useful this must be multiply-inherited from with a MovieWriterBase sub-class.   __init__(*args, **kwargs)\n\n Methods  \n__init__(*args, **kwargs)    Attributes  \noutput_args      propertyoutput_args\n\n \n\n"}, {"name": "animation.FFMpegBase.__init__()", "path": "_as_gen/matplotlib.animation.ffmpegbase#matplotlib.animation.FFMpegBase.__init__", "type": "animation", "text": "  __init__(*args, **kwargs)\n\n"}, {"name": "animation.FFMpegFileWriter", "path": "_as_gen/matplotlib.animation.ffmpegfilewriter", "type": "animation", "text": "matplotlib.animation.FFMpegFileWriter   classmatplotlib.animation.FFMpegFileWriter(*args, **kwargs)[source]\n \nFile-based ffmpeg writer. Frames are written to temporary files on disk and then stitched together at the end.   __init__(*args, **kwargs)[source]\n\n Methods  \n__init__(*args, **kwargs)   \nbin_path() Return the binary path to the commandline tool used by a specific subclass.  \ncleanup() [Deprecated]  \nfinish() Finish any processing for writing the movie.  \ngrab_frame(**savefig_kwargs) Grab the image information from the figure and save as a movie frame.  \nisAvailable() Return whether a MovieWriter subclass is actually available.  \nsaving(fig, outfile, dpi, *args, **kwargs) Context manager to facilitate writing the movie file.  \nsetup(fig, outfile[, dpi, frame_prefix]) Setup for writing the movie file.   Attributes  \nframe_format Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.  \nframe_size A tuple (width, height) in pixels of a movie frame.  \noutput_args   \nsupported_formats      supported_formats=['png', 'jpeg', 'tiff', 'raw', 'rgba']\n\n \n\n"}, {"name": "animation.FFMpegFileWriter.__init__()", "path": "_as_gen/matplotlib.animation.ffmpegfilewriter#matplotlib.animation.FFMpegFileWriter.__init__", "type": "animation", "text": "  __init__(*args, **kwargs)[source]\n\n"}, {"name": "animation.FFMpegFileWriter.supported_formats", "path": "_as_gen/matplotlib.animation.ffmpegfilewriter#matplotlib.animation.FFMpegFileWriter.supported_formats", "type": "animation", "text": "  supported_formats=['png', 'jpeg', 'tiff', 'raw', 'rgba']\n\n"}, {"name": "animation.FFMpegWriter", "path": "_as_gen/matplotlib.animation.ffmpegwriter", "type": "animation", "text": "matplotlib.animation.FFMpegWriter   classmatplotlib.animation.FFMpegWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)[source]\n \nPipe-based ffmpeg writer. Frames are streamed directly to ffmpeg via a pipe and written in a single pass.  Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.       __init__(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)[source]\n \n Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.     \n Methods  \n__init__([fps, codec, bitrate, extra_args, ...]) \n Parameters    \nbin_path() Return the binary path to the commandline tool used by a specific subclass.  \ncleanup() [Deprecated]  \nfinish() Finish any processing for writing the movie.  \ngrab_frame(**savefig_kwargs) Grab the image information from the figure and save as a movie frame.  \nisAvailable() Return whether a MovieWriter subclass is actually available.  \nsaving(fig, outfile, dpi, *args, **kwargs) Context manager to facilitate writing the movie file.  \nsetup(fig, outfile[, dpi]) Setup for writing the movie file.   Attributes  \nframe_size A tuple (width, height) in pixels of a movie frame.  \noutput_args   \nsupported_formats    \n\n"}, {"name": "animation.FFMpegWriter.__init__()", "path": "_as_gen/matplotlib.animation.ffmpegwriter#matplotlib.animation.FFMpegWriter.__init__", "type": "animation", "text": "  __init__(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)[source]\n \n Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.     \n"}, {"name": "animation.FileMovieWriter", "path": "_as_gen/matplotlib.animation.filemoviewriter", "type": "animation", "text": "matplotlib.animation.FileMovieWriter   classmatplotlib.animation.FileMovieWriter(*args, **kwargs)[source]\n \nMovieWriter for writing to individual files and stitching at the end. This must be sub-classed to be useful.  Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.       __init__(*args, **kwargs)[source]\n \n Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.     \n Methods  \n__init__(*args, **kwargs) \n Parameters    \nbin_path() Return the binary path to the commandline tool used by a specific subclass.  \ncleanup() [Deprecated]  \nfinish() Finish any processing for writing the movie.  \ngrab_frame(**savefig_kwargs) Grab the image information from the figure and save as a movie frame.  \nisAvailable() Return whether a MovieWriter subclass is actually available.  \nsaving(fig, outfile, dpi, *args, **kwargs) Context manager to facilitate writing the movie file.  \nsetup(fig, outfile[, dpi, frame_prefix]) Setup for writing the movie file.   Attributes  \nframe_format Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.  \nframe_size A tuple (width, height) in pixels of a movie frame.  \nsupported_formats      finish()[source]\n \nFinish any processing for writing the movie. \n   propertyframe_format\n \nFormat (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses. \n   grab_frame(**savefig_kwargs)[source]\n \nGrab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure. \n   setup(fig, outfile, dpi=None, frame_prefix=None)[source]\n \nSetup for writing the movie file.  Parameters \n \nfigFigure\n\n\nThe figure to grab the rendered frames from.  \noutfilestr\n\n\nThe filename of the resulting movie file.  \ndpifloat, default: fig.dpi\n\n\nThe dpi of the output file. This, with the figure size, controls the size in pixels of the resulting movie file.  \nframe_prefixstr, optional\n\n\nThe filename prefix to use for temporary files. If None (the default), files are written to a temporary directory which is deleted by cleanup; if not None, no temporary files are deleted.     \n \n\n"}, {"name": "animation.FileMovieWriter.__init__()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.__init__", "type": "animation", "text": "  __init__(*args, **kwargs)[source]\n \n Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.     \n"}, {"name": "animation.FileMovieWriter.finish()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.finish", "type": "animation", "text": "  finish()[source]\n \nFinish any processing for writing the movie. \n"}, {"name": "animation.FileMovieWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.grab_frame", "type": "animation", "text": "  grab_frame(**savefig_kwargs)[source]\n \nGrab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure. \n"}, {"name": "animation.FileMovieWriter.setup()", "path": "_as_gen/matplotlib.animation.filemoviewriter#matplotlib.animation.FileMovieWriter.setup", "type": "animation", "text": "  setup(fig, outfile, dpi=None, frame_prefix=None)[source]\n \nSetup for writing the movie file.  Parameters \n \nfigFigure\n\n\nThe figure to grab the rendered frames from.  \noutfilestr\n\n\nThe filename of the resulting movie file.  \ndpifloat, default: fig.dpi\n\n\nThe dpi of the output file. This, with the figure size, controls the size in pixels of the resulting movie file.  \nframe_prefixstr, optional\n\n\nThe filename prefix to use for temporary files. If None (the default), files are written to a temporary directory which is deleted by cleanup; if not None, no temporary files are deleted.     \n"}, {"name": "animation.FuncAnimation", "path": "_as_gen/matplotlib.animation.funcanimation", "type": "animation", "text": "matplotlib.animation.FuncAnimation   classmatplotlib.animation.FuncAnimation(fig, func, frames=None, init_func=None, fargs=None, save_count=None, *, cache_frame_data=True, **kwargs)[source]\n \nMakes an animation by repeatedly calling a function func.  Note You must store the created Animation in a variable that lives as long as the animation should run. Otherwise, the Animation object will be garbage-collected and the animation stops.   Parameters \n \nfigFigure\n\n\nThe figure object used to get needed events, such as draw or resize.  \nfunccallable\n\n\nThe function to call at each frame. The first argument will be the next value in frames. Any additional positional arguments can be supplied via the fargs parameter. The required signature is: def func(frame, *fargs) -> iterable_of_artists\n If blit == True, func must return an iterable of all artists that were modified or created. This information is used by the blitting algorithm to determine which parts of the figure have to be updated. The return value is unused if blit == False and may be omitted in that case.  \nframesiterable, int, generator function, or None, optional\n\n\nSource of data to pass func and each frame of the animation  If an iterable, then simply use the values provided. If the iterable has a length, it will override the save_count kwarg. If an integer, then equivalent to passing range(frames)\n \nIf a generator function, then must have the signature: def gen_function() -> obj\n  If None, then equivalent to passing itertools.count.  In all of these cases, the values in frames is simply passed through to the user-supplied func and thus can be of any type.  \ninit_funccallable, optional\n\n\nA function used to draw a clear frame. If not given, the results of drawing from the first item in the frames sequence will be used. This function will be called once before the first frame. The required signature is: def init_func() -> iterable_of_artists\n If blit == True, init_func must return an iterable of artists to be re-drawn. This information is used by the blitting algorithm to determine which parts of the figure have to be updated. The return value is unused if blit == False and may be omitted in that case.  \nfargstuple or None, optional\n\n\nAdditional arguments to pass to each call to func.  \nsave_countint, default: 100\n\n\nFallback for the number of values from frames to cache. This is only used if the number of frames cannot be inferred from frames, i.e. when it's an iterator without length or a generator.  \nintervalint, default: 200\n\n\nDelay between frames in milliseconds.  \nrepeat_delayint, default: 0\n\n\nThe delay in milliseconds between consecutive animation runs, if repeat is True.  \nrepeatbool, default: True\n\n\nWhether the animation repeats when the sequence of frames is completed.  \nblitbool, default: False\n\n\nWhether blitting is used to optimize drawing. Note: when using blitting, any animated artists will be drawn according to their zorder; however, they will be drawn on top of any previous artists, regardless of their zorder.  \ncache_frame_databool, default: True\n\n\nWhether frame data is cached. Disabling cache might be helpful when frames contain large objects.       __init__(fig, func, frames=None, init_func=None, fargs=None, save_count=None, *, cache_frame_data=True, **kwargs)[source]\n\n Methods  \n__init__(fig, func[, frames, init_func, ...])   \nnew_frame_seq() Return a new sequence of frame information.  \nnew_saved_frame_seq() Return a new sequence of saved/cached frame information.  \npause() Pause the animation.  \nresume() Resume the animation.  \nsave(filename[, writer, fps, dpi, codec, ...]) Save the animation as a movie file by drawing every frame.  \nto_html5_video([embed_limit]) Convert the animation to an HTML5 <video> tag.  \nto_jshtml([fps, embed_frames, default_mode]) Generate HTML representation of the animation.     new_frame_seq()[source]\n \nReturn a new sequence of frame information. \n   new_saved_frame_seq()[source]\n \nReturn a new sequence of saved/cached frame information. \n \n\n"}, {"name": "animation.FuncAnimation.__init__()", "path": "_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation.__init__", "type": "animation", "text": "  __init__(fig, func, frames=None, init_func=None, fargs=None, save_count=None, *, cache_frame_data=True, **kwargs)[source]\n\n"}, {"name": "animation.FuncAnimation.new_frame_seq()", "path": "_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation.new_frame_seq", "type": "animation", "text": "  new_frame_seq()[source]\n \nReturn a new sequence of frame information. \n"}, {"name": "animation.FuncAnimation.new_saved_frame_seq()", "path": "_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation.new_saved_frame_seq", "type": "animation", "text": "  new_saved_frame_seq()[source]\n \nReturn a new sequence of saved/cached frame information. \n"}, {"name": "animation.HTMLWriter", "path": "_as_gen/matplotlib.animation.htmlwriter", "type": "animation", "text": "matplotlib.animation.HTMLWriter   classmatplotlib.animation.HTMLWriter(fps=30, codec=None, bitrate=None, extra_args=None, metadata=None, embed_frames=False, default_mode='loop', embed_limit=None)[source]\n \nWriter for JavaScript-based HTML movies.  Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.       __init__(fps=30, codec=None, bitrate=None, extra_args=None, metadata=None, embed_frames=False, default_mode='loop', embed_limit=None)[source]\n \n Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.     \n Methods  \n__init__([fps, codec, bitrate, extra_args, ...]) \n Parameters    \nbin_path() Return the binary path to the commandline tool used by a specific subclass.  \ncleanup() [Deprecated]  \nfinish() Finish any processing for writing the movie.  \ngrab_frame(**savefig_kwargs) Grab the image information from the figure and save as a movie frame.  \nisAvailable() Return whether a MovieWriter subclass is actually available.  \nsaving(fig, outfile, dpi, *args, **kwargs) Context manager to facilitate writing the movie file.  \nsetup(fig, outfile, dpi[, frame_dir]) Setup for writing the movie file.   Attributes  \nframe_format Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.  \nframe_size A tuple (width, height) in pixels of a movie frame.  \nsupported_formats      finish()[source]\n \nFinish any processing for writing the movie. \n   grab_frame(**savefig_kwargs)[source]\n \nGrab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure. \n   classmethodisAvailable()[source]\n \nReturn whether a MovieWriter subclass is actually available. \n   setup(fig, outfile, dpi, frame_dir=None)[source]\n \nSetup for writing the movie file.  Parameters \n \nfigFigure\n\n\nThe figure to grab the rendered frames from.  \noutfilestr\n\n\nThe filename of the resulting movie file.  \ndpifloat, default: fig.dpi\n\n\nThe dpi of the output file. This, with the figure size, controls the size in pixels of the resulting movie file.  \nframe_prefixstr, optional\n\n\nThe filename prefix to use for temporary files. If None (the default), files are written to a temporary directory which is deleted by cleanup; if not None, no temporary files are deleted.     \n   supported_formats=['png', 'jpeg', 'tiff', 'svg']\n\n \n\n"}, {"name": "animation.HTMLWriter.__init__()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.__init__", "type": "animation", "text": "  __init__(fps=30, codec=None, bitrate=None, extra_args=None, metadata=None, embed_frames=False, default_mode='loop', embed_limit=None)[source]\n \n Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.     \n"}, {"name": "animation.HTMLWriter.finish()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.finish", "type": "animation", "text": "  finish()[source]\n \nFinish any processing for writing the movie. \n"}, {"name": "animation.HTMLWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.grab_frame", "type": "animation", "text": "  grab_frame(**savefig_kwargs)[source]\n \nGrab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure. \n"}, {"name": "animation.HTMLWriter.isAvailable()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.isAvailable", "type": "animation", "text": "  classmethodisAvailable()[source]\n \nReturn whether a MovieWriter subclass is actually available. \n"}, {"name": "animation.HTMLWriter.setup()", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.setup", "type": "animation", "text": "  setup(fig, outfile, dpi, frame_dir=None)[source]\n \nSetup for writing the movie file.  Parameters \n \nfigFigure\n\n\nThe figure to grab the rendered frames from.  \noutfilestr\n\n\nThe filename of the resulting movie file.  \ndpifloat, default: fig.dpi\n\n\nThe dpi of the output file. This, with the figure size, controls the size in pixels of the resulting movie file.  \nframe_prefixstr, optional\n\n\nThe filename prefix to use for temporary files. If None (the default), files are written to a temporary directory which is deleted by cleanup; if not None, no temporary files are deleted.     \n"}, {"name": "animation.HTMLWriter.supported_formats", "path": "_as_gen/matplotlib.animation.htmlwriter#matplotlib.animation.HTMLWriter.supported_formats", "type": "animation", "text": "  supported_formats=['png', 'jpeg', 'tiff', 'svg']\n\n"}, {"name": "animation.ImageMagickBase", "path": "_as_gen/matplotlib.animation.imagemagickbase", "type": "animation", "text": "matplotlib.animation.ImageMagickBase   classmatplotlib.animation.ImageMagickBase[source]\n \nMixin class for ImageMagick output. To be useful this must be multiply-inherited from with a MovieWriterBase sub-class.   __init__(*args, **kwargs)\n\n Methods  \n__init__(*args, **kwargs)   \nbin_path()   \nisAvailable()    Attributes  \ndelay   \noutput_args      classmethodbin_path()[source]\n\n   propertydelay\n\n   classmethodisAvailable()[source]\n\n   propertyoutput_args\n\n \n\n"}, {"name": "animation.ImageMagickBase.__init__()", "path": "_as_gen/matplotlib.animation.imagemagickbase#matplotlib.animation.ImageMagickBase.__init__", "type": "animation", "text": "  __init__(*args, **kwargs)\n\n"}, {"name": "animation.ImageMagickBase.bin_path()", "path": "_as_gen/matplotlib.animation.imagemagickbase#matplotlib.animation.ImageMagickBase.bin_path", "type": "animation", "text": "  classmethodbin_path()[source]\n\n"}, {"name": "animation.ImageMagickBase.isAvailable()", "path": "_as_gen/matplotlib.animation.imagemagickbase#matplotlib.animation.ImageMagickBase.isAvailable", "type": "animation", "text": "  classmethodisAvailable()[source]\n\n"}, {"name": "animation.ImageMagickFileWriter", "path": "_as_gen/matplotlib.animation.imagemagickfilewriter", "type": "animation", "text": "matplotlib.animation.ImageMagickFileWriter   classmatplotlib.animation.ImageMagickFileWriter(*args, **kwargs)[source]\n \nFile-based animated gif writer. Frames are written to temporary files on disk and then stitched together at the end.   __init__(*args, **kwargs)[source]\n\n Methods  \n__init__(*args, **kwargs)   \nbin_path() Return the binary path to the commandline tool used by a specific subclass.  \ncleanup() [Deprecated]  \nfinish() Finish any processing for writing the movie.  \ngrab_frame(**savefig_kwargs) Grab the image information from the figure and save as a movie frame.  \nisAvailable() Return whether a MovieWriter subclass is actually available.  \nsaving(fig, outfile, dpi, *args, **kwargs) Context manager to facilitate writing the movie file.  \nsetup(fig, outfile[, dpi, frame_prefix]) Setup for writing the movie file.   Attributes  \ndelay   \nframe_format Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.  \nframe_size A tuple (width, height) in pixels of a movie frame.  \noutput_args   \nsupported_formats      supported_formats=['png', 'jpeg', 'tiff', 'raw', 'rgba']\n\n \n\n"}, {"name": "animation.ImageMagickFileWriter.__init__()", "path": "_as_gen/matplotlib.animation.imagemagickfilewriter#matplotlib.animation.ImageMagickFileWriter.__init__", "type": "animation", "text": "  __init__(*args, **kwargs)[source]\n\n"}, {"name": "animation.ImageMagickFileWriter.supported_formats", "path": "_as_gen/matplotlib.animation.imagemagickfilewriter#matplotlib.animation.ImageMagickFileWriter.supported_formats", "type": "animation", "text": "  supported_formats=['png', 'jpeg', 'tiff', 'raw', 'rgba']\n\n"}, {"name": "animation.ImageMagickWriter", "path": "_as_gen/matplotlib.animation.imagemagickwriter", "type": "animation", "text": "matplotlib.animation.ImageMagickWriter   classmatplotlib.animation.ImageMagickWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)[source]\n \nPipe-based animated gif. Frames are streamed directly to ImageMagick via a pipe and written in a single pass.  Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.       __init__(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)[source]\n \n Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.     \n Methods  \n__init__([fps, codec, bitrate, extra_args, ...]) \n Parameters    \nbin_path() Return the binary path to the commandline tool used by a specific subclass.  \ncleanup() [Deprecated]  \nfinish() Finish any processing for writing the movie.  \ngrab_frame(**savefig_kwargs) Grab the image information from the figure and save as a movie frame.  \nisAvailable() Return whether a MovieWriter subclass is actually available.  \nsaving(fig, outfile, dpi, *args, **kwargs) Context manager to facilitate writing the movie file.  \nsetup(fig, outfile[, dpi]) Setup for writing the movie file.   Attributes  \ndelay   \nframe_size A tuple (width, height) in pixels of a movie frame.  \noutput_args   \nsupported_formats    \n\n"}, {"name": "animation.ImageMagickWriter.__init__()", "path": "_as_gen/matplotlib.animation.imagemagickwriter#matplotlib.animation.ImageMagickWriter.__init__", "type": "animation", "text": "  __init__(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)[source]\n \n Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.     \n"}, {"name": "animation.MovieWriter", "path": "_as_gen/matplotlib.animation.moviewriter", "type": "animation", "text": "matplotlib.animation.MovieWriter   classmatplotlib.animation.MovieWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)[source]\n \nBase class for writing movies. This is a base class for MovieWriter subclasses that write a movie frame data to a pipe. You cannot instantiate this class directly. See examples for how to use its subclasses.  Attributes \n \nframe_formatstr\n\n\nThe format used in writing frame data, defaults to 'rgba'.  \nfigFigure\n\n\nThe figure to capture data from. This must be provided by the sub-classes.      Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.       __init__(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)[source]\n \n Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.     \n Methods  \n__init__([fps, codec, bitrate, extra_args, ...]) \n Parameters    \nbin_path() Return the binary path to the commandline tool used by a specific subclass.  \ncleanup() [Deprecated]  \nfinish() Finish any processing for writing the movie.  \ngrab_frame(**savefig_kwargs) Grab the image information from the figure and save as a movie frame.  \nisAvailable() Return whether a MovieWriter subclass is actually available.  \nsaving(fig, outfile, dpi, *args, **kwargs) Context manager to facilitate writing the movie file.  \nsetup(fig, outfile[, dpi]) Setup for writing the movie file.   Attributes  \nframe_size A tuple (width, height) in pixels of a movie frame.  \nsupported_formats      classmethodbin_path()[source]\n \nReturn the binary path to the commandline tool used by a specific subclass. This is a class method so that the tool can be looked for before making a particular MovieWriter subclass available. \n   cleanup()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n   finish()[source]\n \nFinish any processing for writing the movie. \n   grab_frame(**savefig_kwargs)[source]\n \nGrab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure. \n   classmethodisAvailable()[source]\n \nReturn whether a MovieWriter subclass is actually available. \n   setup(fig, outfile, dpi=None)[source]\n \nSetup for writing the movie file.  Parameters \n \nfigFigure\n\n\nThe figure object that contains the information for frames.  \noutfilestr\n\n\nThe filename of the resulting movie file.  \ndpifloat, default: fig.dpi\n\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file.     \n   supported_formats=['rgba']\n\n \n\n"}, {"name": "animation.MovieWriter.__init__()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.__init__", "type": "animation", "text": "  __init__(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)[source]\n \n Parameters \n \nfpsint, default: 5\n\n\nMovie frame rate (per second).  \ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')\n\n\nThe codec to use.  \nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)\n\n\nThe bitrate of the movie, in kilobits per second. Higher values means higher quality movies, but increase the file size. A value of -1 lets the underlying movie encoder select the bitrate.  \nextra_argslist of str or None, optional\n\n\nExtra command-line arguments passed to the underlying movie encoder. The default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the builtin writers.  \nmetadatadict[str, str], default: {}\n\n\nA dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.     \n"}, {"name": "animation.MovieWriter.bin_path()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.bin_path", "type": "animation", "text": "  classmethodbin_path()[source]\n \nReturn the binary path to the commandline tool used by a specific subclass. This is a class method so that the tool can be looked for before making a particular MovieWriter subclass available. \n"}, {"name": "animation.MovieWriter.cleanup()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.cleanup", "type": "animation", "text": "  cleanup()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "animation.MovieWriter.finish()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.finish", "type": "animation", "text": "  finish()[source]\n \nFinish any processing for writing the movie. \n"}, {"name": "animation.MovieWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.grab_frame", "type": "animation", "text": "  grab_frame(**savefig_kwargs)[source]\n \nGrab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure. \n"}, {"name": "animation.MovieWriter.isAvailable()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.isAvailable", "type": "animation", "text": "  classmethodisAvailable()[source]\n \nReturn whether a MovieWriter subclass is actually available. \n"}, {"name": "animation.MovieWriter.setup()", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.setup", "type": "animation", "text": "  setup(fig, outfile, dpi=None)[source]\n \nSetup for writing the movie file.  Parameters \n \nfigFigure\n\n\nThe figure object that contains the information for frames.  \noutfilestr\n\n\nThe filename of the resulting movie file.  \ndpifloat, default: fig.dpi\n\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file.     \n"}, {"name": "animation.MovieWriter.supported_formats", "path": "_as_gen/matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter.supported_formats", "type": "animation", "text": "  supported_formats=['rgba']\n\n"}, {"name": "animation.MovieWriterRegistry", "path": "_as_gen/matplotlib.animation.moviewriterregistry", "type": "animation", "text": "matplotlib.animation.MovieWriterRegistry   classmatplotlib.animation.MovieWriterRegistry[source]\n \nRegistry of available writer classes by human readable name.   __init__()[source]\n\n Methods  \n__init__()   \nis_available(name) Check if given writer is available by name.  \nlist() Get a list of available MovieWriters.  \nregister(name) Decorator for registering a class under a name.     is_available(name)[source]\n \nCheck if given writer is available by name.  Parameters \n \nnamestr\n\n  Returns \n bool\n   \n   list()[source]\n \nGet a list of available MovieWriters. \n   register(name)[source]\n \nDecorator for registering a class under a name. Example use: @registry.register(name)\nclass Foo:\n    pass\n \n \n\n"}, {"name": "animation.MovieWriterRegistry.__init__()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.__init__", "type": "animation", "text": "  __init__()[source]\n\n"}, {"name": "animation.MovieWriterRegistry.is_available()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.is_available", "type": "animation", "text": "  is_available(name)[source]\n \nCheck if given writer is available by name.  Parameters \n \nnamestr\n\n  Returns \n bool\n   \n"}, {"name": "animation.MovieWriterRegistry.list()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.list", "type": "animation", "text": "  list()[source]\n \nGet a list of available MovieWriters. \n"}, {"name": "animation.MovieWriterRegistry.register()", "path": "_as_gen/matplotlib.animation.moviewriterregistry#matplotlib.animation.MovieWriterRegistry.register", "type": "animation", "text": "  register(name)[source]\n \nDecorator for registering a class under a name. Example use: @registry.register(name)\nclass Foo:\n    pass\n \n"}, {"name": "animation.PillowWriter", "path": "_as_gen/matplotlib.animation.pillowwriter", "type": "animation", "text": "matplotlib.animation.PillowWriter   classmatplotlib.animation.PillowWriter(fps=5, metadata=None, codec=None, bitrate=None)[source]\n \n  __init__(fps=5, metadata=None, codec=None, bitrate=None)[source]\n\n Methods  \n__init__([fps, metadata, codec, bitrate])   \nfinish() Finish any processing for writing the movie.  \ngrab_frame(**savefig_kwargs) Grab the image information from the figure and save as a movie frame.  \nisAvailable()   \nsaving(fig, outfile, dpi, *args, **kwargs) Context manager to facilitate writing the movie file.  \nsetup(fig, outfile[, dpi]) Setup for writing the movie file.   Attributes  \nframe_size A tuple (width, height) in pixels of a movie frame.     finish()[source]\n \nFinish any processing for writing the movie. \n   grab_frame(**savefig_kwargs)[source]\n \nGrab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure. \n   classmethodisAvailable()[source]\n\n   setup(fig, outfile, dpi=None)[source]\n \nSetup for writing the movie file.  Parameters \n \nfigFigure\n\n\nThe figure object that contains the information for frames.  \noutfilestr\n\n\nThe filename of the resulting movie file.  \ndpifloat, default: fig.dpi\n\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file.     \n \n\n"}, {"name": "animation.PillowWriter.__init__()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.__init__", "type": "animation", "text": "  __init__(fps=5, metadata=None, codec=None, bitrate=None)[source]\n\n"}, {"name": "animation.PillowWriter.finish()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.finish", "type": "animation", "text": "  finish()[source]\n \nFinish any processing for writing the movie. \n"}, {"name": "animation.PillowWriter.grab_frame()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.grab_frame", "type": "animation", "text": "  grab_frame(**savefig_kwargs)[source]\n \nGrab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the savefig call that saves the figure. \n"}, {"name": "animation.PillowWriter.isAvailable()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.isAvailable", "type": "animation", "text": "  classmethodisAvailable()[source]\n\n"}, {"name": "animation.PillowWriter.setup()", "path": "_as_gen/matplotlib.animation.pillowwriter#matplotlib.animation.PillowWriter.setup", "type": "animation", "text": "  setup(fig, outfile, dpi=None)[source]\n \nSetup for writing the movie file.  Parameters \n \nfigFigure\n\n\nThe figure object that contains the information for frames.  \noutfilestr\n\n\nThe filename of the resulting movie file.  \ndpifloat, default: fig.dpi\n\n\nThe DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file.     \n"}, {"name": "animation.TimedAnimation", "path": "_as_gen/matplotlib.animation.timedanimation", "type": "animation", "text": "matplotlib.animation.TimedAnimation   classmatplotlib.animation.TimedAnimation(fig, interval=200, repeat_delay=0, repeat=True, event_source=None, *args, **kwargs)[source]\n \nAnimation subclass for time-based animation. A new frame is drawn every interval milliseconds.  Note You must store the created Animation in a variable that lives as long as the animation should run. Otherwise, the Animation object will be garbage-collected and the animation stops.   Parameters \n \nfigFigure\n\n\nThe figure object used to get needed events, such as draw or resize.  \nintervalint, default: 200\n\n\nDelay between frames in milliseconds.  \nrepeat_delayint, default: 0\n\n\nThe delay in milliseconds between consecutive animation runs, if repeat is True.  \nrepeatbool, default: True\n\n\nWhether the animation repeats when the sequence of frames is completed.  \nblitbool, default: False\n\n\nWhether blitting is used to optimize drawing.       __init__(fig, interval=200, repeat_delay=0, repeat=True, event_source=None, *args, **kwargs)[source]\n\n Methods  \n__init__(fig[, interval, repeat_delay, ...])   \nnew_frame_seq() Return a new sequence of frame information.  \nnew_saved_frame_seq() Return a new sequence of saved/cached frame information.  \npause() Pause the animation.  \nresume() Resume the animation.  \nsave(filename[, writer, fps, dpi, codec, ...]) Save the animation as a movie file by drawing every frame.  \nto_html5_video([embed_limit]) Convert the animation to an HTML5 <video> tag.  \nto_jshtml([fps, embed_frames, default_mode]) Generate HTML representation of the animation.   \n\n"}, {"name": "animation.TimedAnimation.__init__()", "path": "_as_gen/matplotlib.animation.timedanimation#matplotlib.animation.TimedAnimation.__init__", "type": "animation", "text": "  __init__(fig, interval=200, repeat_delay=0, repeat=True, event_source=None, *args, **kwargs)[source]\n\n"}, {"name": "artist", "path": "artist_api", "type": "artist", "text": "matplotlib.artist  Inheritance Diagrams                                                                                 \nArtist class   classmatplotlib.artist.Artist[source]\n \nAbstract base class for objects that render into a FigureCanvas. Typically, all visible elements in a figure are subclasses of Artist. \n  Interactive  \nArtist.add_callback Add a callback function that will be called whenever one of the Artist's properties changes.  \nArtist.remove_callback Remove a callback based on its observer id.  \nArtist.pchanged Call all of the registered callbacks.  \nArtist.get_cursor_data Return the cursor data for a given event.  \nArtist.format_cursor_data Return a string representation of data.  \nArtist.mouseover If this property is set to True, the artist will be queried for custom context information when the mouse cursor moves over it.  \nArtist.contains Test whether the artist contains the mouse event.  \nArtist.pick Process a pick event.  \nArtist.pickable Return whether the artist is pickable.  \nArtist.set_picker Define the picking behavior of the artist.  \nArtist.get_picker Return the picking behavior of the artist.     Clipping  \nArtist.set_clip_on Set whether the artist uses clipping.  \nArtist.get_clip_on Return whether the artist uses clipping.  \nArtist.set_clip_box Set the artist's clip Bbox.  \nArtist.get_clip_box Return the clipbox.  \nArtist.set_clip_path Set the artist's clip path.  \nArtist.get_clip_path Return the clip path.     Bulk Properties  \nArtist.update Update this artist's properties from the dict props.  \nArtist.update_from Copy properties from other to self.  \nArtist.properties Return a dictionary of all the properties of the artist.  \nArtist.set Set multiple properties at once.     Drawing  \nArtist.draw Draw the Artist (and its children) using the given renderer.  \nArtist.set_animated Set whether the artist is intended to be used in an animation.  \nArtist.get_animated Return whether the artist is animated.  \nArtist.set_alpha Set the alpha value used for blending - not supported on all backends.  \nArtist.get_alpha Return the alpha value used for blending - not supported on all backends.  \nArtist.set_snap Set the snapping behavior.  \nArtist.get_snap Return the snap setting.  \nArtist.set_visible Set the artist's visibility.  \nArtist.get_visible Return the visibility.  \nArtist.zorder   \nArtist.set_zorder Set the zorder for the artist.  \nArtist.get_zorder Return the artist's zorder.  \nArtist.set_agg_filter Set the agg filter.  \nArtist.set_sketch_params Set the sketch parameters.  \nArtist.get_sketch_params Return the sketch parameters for the artist.  \nArtist.set_rasterized Force rasterized (bitmap) drawing for vector graphics output.  \nArtist.get_rasterized Return whether the artist is to be rasterized.  \nArtist.set_path_effects Set the path effects.  \nArtist.get_path_effects   \nArtist.get_agg_filter Return filter function to be used for agg filter.  \nArtist.get_window_extent Get the artist's bounding box in display space.  \nArtist.get_transformed_clip_path_and_affine Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.     Figure and Axes  \nArtist.remove Remove the artist from the figure if possible.  \nArtist.axes The Axes instance the artist resides in, or None.  \nArtist.set_figure Set the Figure instance the artist belongs to.  \nArtist.get_figure Return the Figure instance the artist belongs to.     Children  \nArtist.get_children Return a list of the child Artists of this Artist.  \nArtist.findobj Find artist objects.     Transform  \nArtist.set_transform Set the artist transform.  \nArtist.get_transform Return the Transform instance used by this artist.  \nArtist.is_transform_set Return whether the Artist has an explicitly set transform.     Units  \nArtist.convert_xunits Convert x using the unit type of the xaxis.  \nArtist.convert_yunits Convert y using the unit type of the yaxis.  \nArtist.have_units Return whether units are set on any axis.     Metadata  \nArtist.set_gid Set the (group) id for the artist.  \nArtist.get_gid Return the group id.  \nArtist.set_label Set a label that will be displayed in the legend.  \nArtist.get_label Return the label used for this artist in the legend.  \nArtist.set_url Set the url for the artist.  \nArtist.get_url Return the url.     Miscellaneous  \nArtist.sticky_edges x and y sticky edge lists for autoscaling.  \nArtist.set_in_layout Set if artist is to be included in layout calculations, E.g.  \nArtist.get_in_layout Return boolean flag, True if artist is included in layout calculations.  \nArtist.stale Whether the artist is 'stale' and needs to be re-drawn for the output to match the internal state of the artist.      Functions  \nallow_rasterization Decorator for Artist.draw method.  \nget Return the value of an Artist's property, or print all of them.  \ngetp Return the value of an Artist's property, or print all of them.  \nsetp Set one or more properties on an Artist, or list allowed values.  \nkwdoc Inspect an Artist class (using ArtistInspector) and return information about its settable properties and their current values.  \nArtistInspector A helper class to inspect an Artist and return information about its settable properties and their current values.   \n"}, {"name": "artist.allow_rasterization", "path": "_as_gen/matplotlib.artist.allow_rasterization", "type": "artist", "text": "matplotlib.artist.allow_rasterization   matplotlib.artist.allow_rasterization(draw)[source]\n \nDecorator for Artist.draw method. Provides routines that run before and after the draw call. The before and after functions are useful for changing artist-dependent renderer attributes or making other setup function calls, such as starting and flushing a mixed-mode renderer. \n\n"}, {"name": "artist.Artist", "path": "artist_api#matplotlib.artist.Artist", "type": "artist", "text": "  classmatplotlib.artist.Artist[source]\n \nAbstract base class for objects that render into a FigureCanvas. Typically, all visible elements in a figure are subclasses of Artist. \n"}, {"name": "artist.Artist.add_callback", "path": "_as_gen/matplotlib.artist.artist.add_callback", "type": "artist", "text": "matplotlib.artist.Artist.add_callback   Artist.add_callback(func)[source]\n \nAdd a callback function that will be called whenever one of the Artist's properties changes.  Parameters \n \nfunccallable\n\n\nThe callback function. It must have the signature: def func(artist: Artist) -> Any\n where artist is the calling Artist. Return values may exist but are ignored.    Returns \n int\n\nThe observer id associated with the callback. This id can be used for removing the callback with remove_callback later.      See also  remove_callback\n  \n\n"}, {"name": "artist.Artist.axes", "path": "_as_gen/matplotlib.artist.artist.axes", "type": "artist", "text": "matplotlib.artist.Artist.axes   propertyArtist.axes\n \nThe Axes instance the artist resides in, or None. \n\n"}, {"name": "artist.Artist.contains", "path": "_as_gen/matplotlib.artist.artist.contains", "type": "artist", "text": "matplotlib.artist.Artist.contains   Artist.contains(mouseevent)[source]\n \nTest whether the artist contains the mouse event.  Parameters \n \nmouseeventmatplotlib.backend_bases.MouseEvent\n\n  Returns \n \ncontainsbool\n\n\nWhether any values are within the radius.  \ndetailsdict\n\n\nAn artist-specific dictionary of details of the event context, such as which points are contained in the pick radius. See the individual Artist subclasses for details.     \n\n"}, {"name": "artist.Artist.convert_xunits", "path": "_as_gen/matplotlib.artist.artist.convert_xunits", "type": "artist", "text": "matplotlib.artist.Artist.convert_xunits   Artist.convert_xunits(x)[source]\n \nConvert x using the unit type of the xaxis. If the artist is not in contained in an Axes or if the xaxis does not have units, x itself is returned. \n\n"}, {"name": "artist.Artist.convert_yunits", "path": "_as_gen/matplotlib.artist.artist.convert_yunits", "type": "artist", "text": "matplotlib.artist.Artist.convert_yunits   Artist.convert_yunits(y)[source]\n \nConvert y using the unit type of the yaxis. If the artist is not in contained in an Axes or if the yaxis does not have units, y itself is returned. \n\n"}, {"name": "artist.Artist.draw", "path": "_as_gen/matplotlib.artist.artist.draw", "type": "artist", "text": "matplotlib.artist.Artist.draw   Artist.draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n\n"}, {"name": "artist.Artist.findobj", "path": "_as_gen/matplotlib.artist.artist.findobj", "type": "artist", "text": "matplotlib.artist.Artist.findobj   Artist.findobj(match=None, include_self=True)[source]\n \nFind artist objects. Recursively find all Artist instances contained in the artist.  Parameters \n match\n\nA filter criterion for the matches. This can be  \nNone: Return all objects contained in artist. A function with signature def match(artist: Artist) -> bool. The result will only contain artists for which the function returns True. A class instance: e.g., Line2D. The result will only contain artists of this class or its subclasses (isinstance check).   \ninclude_selfbool\n\n\nInclude self in the list to be checked for a match.    Returns \n list of Artist\n\n   \n\n"}, {"name": "artist.Artist.format_cursor_data", "path": "_as_gen/matplotlib.artist.artist.format_cursor_data", "type": "artist", "text": "matplotlib.artist.Artist.format_cursor_data   Artist.format_cursor_data(data)[source]\n \nReturn a string representation of data.  Note This method is intended to be overridden by artist subclasses. As an end-user of Matplotlib you will most likely not call this method yourself.  The default implementation converts ints and floats and arrays of ints and floats into a comma-separated string enclosed in square brackets, unless the artist has an associated colorbar, in which case scalar values are formatted using the colorbar's formatter.  See also  get_cursor_data\n  \n\n"}, {"name": "artist.Artist.get_agg_filter", "path": "_as_gen/matplotlib.artist.artist.get_agg_filter", "type": "artist", "text": "matplotlib.artist.Artist.get_agg_filter   Artist.get_agg_filter()[source]\n \nReturn filter function to be used for agg filter. \n\n"}, {"name": "artist.Artist.get_alpha", "path": "_as_gen/matplotlib.artist.artist.get_alpha", "type": "artist", "text": "matplotlib.artist.Artist.get_alpha   Artist.get_alpha()[source]\n \nReturn the alpha value used for blending - not supported on all backends. \n\n"}, {"name": "artist.Artist.get_animated", "path": "_as_gen/matplotlib.artist.artist.get_animated", "type": "artist", "text": "matplotlib.artist.Artist.get_animated   Artist.get_animated()[source]\n \nReturn whether the artist is animated. \n\n"}, {"name": "artist.Artist.get_children", "path": "_as_gen/matplotlib.artist.artist.get_children", "type": "artist", "text": "matplotlib.artist.Artist.get_children   Artist.get_children()[source]\n \nReturn a list of the child Artists of this Artist. \n\n"}, {"name": "artist.Artist.get_clip_box", "path": "_as_gen/matplotlib.artist.artist.get_clip_box", "type": "artist", "text": "matplotlib.artist.Artist.get_clip_box   Artist.get_clip_box()[source]\n \nReturn the clipbox. \n\n"}, {"name": "artist.Artist.get_clip_on", "path": "_as_gen/matplotlib.artist.artist.get_clip_on", "type": "artist", "text": "matplotlib.artist.Artist.get_clip_on   Artist.get_clip_on()[source]\n \nReturn whether the artist uses clipping. \n\n"}, {"name": "artist.Artist.get_clip_path", "path": "_as_gen/matplotlib.artist.artist.get_clip_path", "type": "artist", "text": "matplotlib.artist.Artist.get_clip_path   Artist.get_clip_path()[source]\n \nReturn the clip path. \n\n"}, {"name": "artist.Artist.get_cursor_data", "path": "_as_gen/matplotlib.artist.artist.get_cursor_data", "type": "artist", "text": "matplotlib.artist.Artist.get_cursor_data   Artist.get_cursor_data(event)[source]\n \nReturn the cursor data for a given event.  Note This method is intended to be overridden by artist subclasses. As an end-user of Matplotlib you will most likely not call this method yourself.  Cursor data can be used by Artists to provide additional context information for a given event. The default implementation just returns None. Subclasses can override the method and return arbitrary data. However, when doing so, they must ensure that format_cursor_data can convert the data to a string representation. The only current use case is displaying the z-value of an AxesImage in the status bar of a plot window, while moving the mouse.  Parameters \n \neventmatplotlib.backend_bases.MouseEvent\n\n    See also  format_cursor_data\n  \n\n"}, {"name": "artist.Artist.get_figure", "path": "_as_gen/matplotlib.artist.artist.get_figure", "type": "artist", "text": "matplotlib.artist.Artist.get_figure   Artist.get_figure()[source]\n \nReturn the Figure instance the artist belongs to. \n\n"}, {"name": "artist.Artist.get_gid", "path": "_as_gen/matplotlib.artist.artist.get_gid", "type": "artist", "text": "matplotlib.artist.Artist.get_gid   Artist.get_gid()[source]\n \nReturn the group id. \n\n"}, {"name": "artist.Artist.get_in_layout", "path": "_as_gen/matplotlib.artist.artist.get_in_layout", "type": "artist", "text": "matplotlib.artist.Artist.get_in_layout   Artist.get_in_layout()[source]\n \nReturn boolean flag, True if artist is included in layout calculations. E.g. Constrained Layout Guide, Figure.tight_layout(), and fig.savefig(fname, bbox_inches='tight'). \n\n"}, {"name": "artist.Artist.get_label", "path": "_as_gen/matplotlib.artist.artist.get_label", "type": "artist", "text": "matplotlib.artist.Artist.get_label   Artist.get_label()[source]\n \nReturn the label used for this artist in the legend. \n\n"}, {"name": "artist.Artist.get_path_effects", "path": "_as_gen/matplotlib.artist.artist.get_path_effects", "type": "artist", "text": "matplotlib.artist.Artist.get_path_effects   Artist.get_path_effects()[source]\n\n\n"}, {"name": "artist.Artist.get_picker", "path": "_as_gen/matplotlib.artist.artist.get_picker", "type": "artist", "text": "matplotlib.artist.Artist.get_picker   Artist.get_picker()[source]\n \nReturn the picking behavior of the artist. The possible values are described in set_picker.  See also  \nset_picker, pickable, pick\n\n  \n\n"}, {"name": "artist.Artist.get_rasterized", "path": "_as_gen/matplotlib.artist.artist.get_rasterized", "type": "artist", "text": "matplotlib.artist.Artist.get_rasterized   Artist.get_rasterized()[source]\n \nReturn whether the artist is to be rasterized. \n\n"}, {"name": "artist.Artist.get_sketch_params", "path": "_as_gen/matplotlib.artist.artist.get_sketch_params", "type": "artist", "text": "matplotlib.artist.Artist.get_sketch_params   Artist.get_sketch_params()[source]\n \nReturn the sketch parameters for the artist.  Returns \n tuple or None\n\nA 3-tuple with the following elements:  \nscale: The amplitude of the wiggle perpendicular to the source line. \nlength: The length of the wiggle along the line. \nrandomness: The scale factor by which the length is shrunken or expanded.  Returns None if no sketch parameters were set.     \n\n"}, {"name": "artist.Artist.get_snap", "path": "_as_gen/matplotlib.artist.artist.get_snap", "type": "artist", "text": "matplotlib.artist.Artist.get_snap   Artist.get_snap()[source]\n \nReturn the snap setting. See set_snap for details. \n\n"}, {"name": "artist.Artist.get_transform", "path": "_as_gen/matplotlib.artist.artist.get_transform", "type": "artist", "text": "matplotlib.artist.Artist.get_transform   Artist.get_transform()[source]\n \nReturn the Transform instance used by this artist. \n\n"}, {"name": "artist.Artist.get_transformed_clip_path_and_affine", "path": "_as_gen/matplotlib.artist.artist.get_transformed_clip_path_and_affine", "type": "artist", "text": "matplotlib.artist.Artist.get_transformed_clip_path_and_affine   Artist.get_transformed_clip_path_and_affine()[source]\n \nReturn the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation. \n\n"}, {"name": "artist.Artist.get_url", "path": "_as_gen/matplotlib.artist.artist.get_url", "type": "artist", "text": "matplotlib.artist.Artist.get_url   Artist.get_url()[source]\n \nReturn the url. \n\n"}, {"name": "artist.Artist.get_visible", "path": "_as_gen/matplotlib.artist.artist.get_visible", "type": "artist", "text": "matplotlib.artist.Artist.get_visible   Artist.get_visible()[source]\n \nReturn the visibility. \n\n"}, {"name": "artist.Artist.get_window_extent", "path": "_as_gen/matplotlib.artist.artist.get_window_extent", "type": "artist", "text": "matplotlib.artist.Artist.get_window_extent   Artist.get_window_extent(renderer)[source]\n \nGet the artist's bounding box in display space. The bounding box' width and height are nonnegative. Subclasses should override for inclusion in the bounding box \"tight\" calculation. Default is to return an empty bounding box at 0, 0. Be careful when using this function, the results will not update if the artist window extent of the artist changes. The extent can change due to any changes in the transform stack, such as changing the axes limits, the figure size, or the canvas used (as is done when saving a figure). This can lead to unexpected behavior where interactive figures will look fine on the screen, but will save incorrectly. \n\n"}, {"name": "artist.Artist.get_zorder", "path": "_as_gen/matplotlib.artist.artist.get_zorder", "type": "artist", "text": "matplotlib.artist.Artist.get_zorder   Artist.get_zorder()[source]\n \nReturn the artist's zorder. \n\n"}, {"name": "artist.Artist.have_units", "path": "_as_gen/matplotlib.artist.artist.have_units", "type": "artist", "text": "matplotlib.artist.Artist.have_units   Artist.have_units()[source]\n \nReturn whether units are set on any axis. \n\n"}, {"name": "artist.Artist.is_transform_set", "path": "_as_gen/matplotlib.artist.artist.is_transform_set", "type": "artist", "text": "matplotlib.artist.Artist.is_transform_set   Artist.is_transform_set()[source]\n \nReturn whether the Artist has an explicitly set transform. This is True after set_transform has been called. \n\n"}, {"name": "artist.Artist.mouseover", "path": "_as_gen/matplotlib.artist.artist.mouseover", "type": "artist", "text": "matplotlib.artist.Artist.mouseover   propertyArtist.mouseover\n \nIf this property is set to True, the artist will be queried for custom context information when the mouse cursor moves over it. See also get_cursor_data(), ToolCursorPosition and NavigationToolbar2. \n\n"}, {"name": "artist.Artist.pchanged", "path": "_as_gen/matplotlib.artist.artist.pchanged", "type": "artist", "text": "matplotlib.artist.Artist.pchanged   Artist.pchanged()[source]\n \nCall all of the registered callbacks. This function is triggered internally when a property is changed.  See also  add_callback\nremove_callback\n  \n\n"}, {"name": "artist.Artist.pick", "path": "_as_gen/matplotlib.artist.artist.pick", "type": "artist", "text": "matplotlib.artist.Artist.pick   Artist.pick(mouseevent)[source]\n \nProcess a pick event. Each child artist will fire a pick event if mouseevent is over the artist and the artist has picker set.  See also  \nset_picker, get_picker, pickable\n\n  \n\n"}, {"name": "artist.Artist.pickable", "path": "_as_gen/matplotlib.artist.artist.pickable", "type": "artist", "text": "matplotlib.artist.Artist.pickable   Artist.pickable()[source]\n \nReturn whether the artist is pickable.  See also  \nset_picker, get_picker, pick\n\n  \n\n"}, {"name": "artist.Artist.properties", "path": "_as_gen/matplotlib.artist.artist.properties", "type": "artist", "text": "matplotlib.artist.Artist.properties   Artist.properties()[source]\n \nReturn a dictionary of all the properties of the artist. \n\n"}, {"name": "artist.Artist.remove", "path": "_as_gen/matplotlib.artist.artist.remove", "type": "artist", "text": "matplotlib.artist.Artist.remove   Artist.remove()[source]\n \nRemove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with FigureCanvasBase.draw_idle. Call relim to update the axes limits if desired. Note: relim will not see collections even if the collection was added to the axes with autolim = True. Note: there is no support for removing the artist's legend entry. \n\n"}, {"name": "artist.Artist.remove_callback", "path": "_as_gen/matplotlib.artist.artist.remove_callback", "type": "artist", "text": "matplotlib.artist.Artist.remove_callback   Artist.remove_callback(oid)[source]\n \nRemove a callback based on its observer id.  See also  add_callback\n  \n\n"}, {"name": "artist.Artist.set", "path": "_as_gen/matplotlib.artist.artist.set", "type": "artist", "text": "matplotlib.artist.Artist.set   Artist.set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nin_layout bool  \nlabel object  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float   \n\n"}, {"name": "artist.Artist.set_agg_filter", "path": "_as_gen/matplotlib.artist.artist.set_agg_filter", "type": "artist", "text": "matplotlib.artist.Artist.set_agg_filter   Artist.set_agg_filter(filter_func)[source]\n \nSet the agg filter.  Parameters \n \nfilter_funccallable\n\n\nA filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array.     \n\n"}, {"name": "artist.Artist.set_alpha", "path": "_as_gen/matplotlib.artist.artist.set_alpha", "type": "artist", "text": "matplotlib.artist.Artist.set_alpha   Artist.set_alpha(alpha)[source]\n \nSet the alpha value used for blending - not supported on all backends.  Parameters \n \nalphascalar or None\n\n\nalpha must be within the 0-1 range, inclusive.     \n\n"}, {"name": "artist.Artist.set_animated", "path": "_as_gen/matplotlib.artist.artist.set_animated", "type": "artist", "text": "matplotlib.artist.Artist.set_animated   Artist.set_animated(b)[source]\n \nSet whether the artist is intended to be used in an animation. If True, the artist is excluded from regular drawing of the figure. You have to call Figure.draw_artist / Axes.draw_artist explicitly on the artist. This appoach is used to speed up animations using blitting. See also matplotlib.animation and Faster rendering by using blitting.  Parameters \n \nbbool\n\n   \n\n"}, {"name": "artist.Artist.set_clip_box", "path": "_as_gen/matplotlib.artist.artist.set_clip_box", "type": "artist", "text": "matplotlib.artist.Artist.set_clip_box   Artist.set_clip_box(clipbox)[source]\n \nSet the artist's clip Bbox.  Parameters \n \nclipboxBbox\n\n   \n\n"}, {"name": "artist.Artist.set_clip_on", "path": "_as_gen/matplotlib.artist.artist.set_clip_on", "type": "artist", "text": "matplotlib.artist.Artist.set_clip_on   Artist.set_clip_on(b)[source]\n \nSet whether the artist uses clipping. When False artists will be visible outside of the axes which can lead to unexpected results.  Parameters \n \nbbool\n\n   \n\n"}, {"name": "artist.Artist.set_clip_path", "path": "_as_gen/matplotlib.artist.artist.set_clip_path", "type": "artist", "text": "matplotlib.artist.Artist.set_clip_path   Artist.set_clip_path(path, transform=None)[source]\n \nSet the artist's clip path.  Parameters \n \npathPatch or Path or TransformedPath or None\n\n\nThe clip path. If given a Path, transform must be provided as well. If None, a previously set clip path is removed.  \ntransformTransform, optional\n\n\nOnly used if path is a Path, in which case the given Path is converted to a TransformedPath using transform.     Notes For efficiency, if path is a Rectangle this method will set the clipping box to the corresponding rectangle and set the clipping path to None. For technical reasons (support of set), a tuple (path, transform) is also accepted as a single positional parameter. \n\n"}, {"name": "artist.Artist.set_figure", "path": "_as_gen/matplotlib.artist.artist.set_figure", "type": "artist", "text": "matplotlib.artist.Artist.set_figure   Artist.set_figure(fig)[source]\n \nSet the Figure instance the artist belongs to.  Parameters \n \nfigFigure\n\n   \n\n"}, {"name": "artist.Artist.set_gid", "path": "_as_gen/matplotlib.artist.artist.set_gid", "type": "artist", "text": "matplotlib.artist.Artist.set_gid   Artist.set_gid(gid)[source]\n \nSet the (group) id for the artist.  Parameters \n \ngidstr\n\n   \n\n"}, {"name": "artist.Artist.set_in_layout", "path": "_as_gen/matplotlib.artist.artist.set_in_layout", "type": "artist", "text": "matplotlib.artist.Artist.set_in_layout   Artist.set_in_layout(in_layout)[source]\n \nSet if artist is to be included in layout calculations, E.g. Constrained Layout Guide, Figure.tight_layout(), and fig.savefig(fname, bbox_inches='tight').  Parameters \n \nin_layoutbool\n\n   \n\n"}, {"name": "artist.Artist.set_label", "path": "_as_gen/matplotlib.artist.artist.set_label", "type": "artist", "text": "matplotlib.artist.Artist.set_label   Artist.set_label(s)[source]\n \nSet a label that will be displayed in the legend.  Parameters \n \nsobject\n\n\ns will be converted to a string by calling str.     \n\n"}, {"name": "artist.Artist.set_path_effects", "path": "_as_gen/matplotlib.artist.artist.set_path_effects", "type": "artist", "text": "matplotlib.artist.Artist.set_path_effects   Artist.set_path_effects(path_effects)[source]\n \nSet the path effects.  Parameters \n \npath_effectsAbstractPathEffect\n\n   \n\n"}, {"name": "artist.Artist.set_picker", "path": "_as_gen/matplotlib.artist.artist.set_picker", "type": "artist", "text": "matplotlib.artist.Artist.set_picker   Artist.set_picker(picker)[source]\n \nDefine the picking behavior of the artist.  Parameters \n \npickerNone or bool or float or callable\n\n\nThis can be one of the following:  \nNone: Picking is disabled for this artist (default). A boolean: If True then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist. A float: If picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if its data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event \nA function: If picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event: hit, props = picker(artist, mouseevent)\n to determine the hit test. if the mouse event is over the artist, return hit=True and props is a dictionary of properties you want added to the PickEvent attributes.       \n\n"}, {"name": "artist.Artist.set_rasterized", "path": "_as_gen/matplotlib.artist.artist.set_rasterized", "type": "artist", "text": "matplotlib.artist.Artist.set_rasterized   Artist.set_rasterized(rasterized)[source]\n \nForce rasterized (bitmap) drawing for vector graphics output. Rasterized drawing is not supported by all artists. If you try to enable this on an artist that does not support it, the command has no effect and a warning will be issued. This setting is ignored for pixel-based output. See also Rasterization for vector graphics.  Parameters \n \nrasterizedbool\n\n   \n\n"}, {"name": "artist.Artist.set_sketch_params", "path": "_as_gen/matplotlib.artist.artist.set_sketch_params", "type": "artist", "text": "matplotlib.artist.Artist.set_sketch_params   Artist.set_sketch_params(scale=None, length=None, randomness=None)[source]\n \nSet the sketch parameters.  Parameters \n \nscalefloat, optional\n\n\nThe amplitude of the wiggle perpendicular to the source line, in pixels. If scale is None, or not provided, no sketch filter will be provided.  \nlengthfloat, optional\n\n\nThe length of the wiggle along the line, in pixels (default 128.0)  \nrandomnessfloat, optional\n\n\nThe scale factor by which the length is shrunken or expanded (default 16.0) The PGF backend uses this argument as an RNG seed and not as described above. Using the same seed yields the same random shape.     \n\n"}, {"name": "artist.Artist.set_snap", "path": "_as_gen/matplotlib.artist.artist.set_snap", "type": "artist", "text": "matplotlib.artist.Artist.set_snap   Artist.set_snap(snap)[source]\n \nSet the snapping behavior. Snapping aligns positions with the pixel grid, which results in clearer images. For example, if a black line of 1px width was defined at a position in between two pixels, the resulting image would contain the interpolated value of that line in the pixel grid, which would be a grey value on both adjacent pixel positions. In contrast, snapping will move the line to the nearest integer pixel value, so that the resulting image will really contain a 1px wide black line. Snapping is currently only supported by the Agg and MacOSX backends.  Parameters \n \nsnapbool or None\n\n\nPossible values:  \nTrue: Snap vertices to the nearest pixel center. \nFalse: Do not modify vertex positions. \nNone: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center.      \n\n"}, {"name": "artist.Artist.set_transform", "path": "_as_gen/matplotlib.artist.artist.set_transform", "type": "artist", "text": "matplotlib.artist.Artist.set_transform   Artist.set_transform(t)[source]\n \nSet the artist transform.  Parameters \n \ntTransform\n\n   \n\n"}, {"name": "artist.Artist.set_url", "path": "_as_gen/matplotlib.artist.artist.set_url", "type": "artist", "text": "matplotlib.artist.Artist.set_url   Artist.set_url(url)[source]\n \nSet the url for the artist.  Parameters \n \nurlstr\n\n   \n\n"}, {"name": "artist.Artist.set_visible", "path": "_as_gen/matplotlib.artist.artist.set_visible", "type": "artist", "text": "matplotlib.artist.Artist.set_visible   Artist.set_visible(b)[source]\n \nSet the artist's visibility.  Parameters \n \nbbool\n\n   \n\n"}, {"name": "artist.Artist.set_zorder", "path": "_as_gen/matplotlib.artist.artist.set_zorder", "type": "artist", "text": "matplotlib.artist.Artist.set_zorder   Artist.set_zorder(level)[source]\n \nSet the zorder for the artist. Artists with lower zorder values are drawn first.  Parameters \n \nlevelfloat\n\n   \n\n"}, {"name": "artist.Artist.stale", "path": "_as_gen/matplotlib.artist.artist.stale", "type": "artist", "text": "matplotlib.artist.Artist.stale   propertyArtist.stale\n \nWhether the artist is 'stale' and needs to be re-drawn for the output to match the internal state of the artist. \n\n"}, {"name": "artist.Artist.sticky_edges", "path": "_as_gen/matplotlib.artist.artist.sticky_edges", "type": "artist", "text": "matplotlib.artist.Artist.sticky_edges   propertyArtist.sticky_edges\n \nx and y sticky edge lists for autoscaling. When performing autoscaling, if a data limit coincides with a value in the corresponding sticky_edges list, then no margin will be added--the view limit \"sticks\" to the edge. A typical use case is histograms, where one usually expects no margin on the bottom edge (0) of the histogram. Moreover, margin expansion \"bumps\" against sticky edges and cannot cross them. For example, if the upper data limit is 1.0, the upper view limit computed by simple margin application is 1.2, but there is a sticky edge at 1.1, then the actual upper view limit will be 1.1. This attribute cannot be assigned to; however, the x and y lists can be modified in place as needed. Examples >>> artist.sticky_edges.x[:] = (xmin, xmax)\n>>> artist.sticky_edges.y[:] = (ymin, ymax)\n \n\n"}, {"name": "artist.Artist.update", "path": "_as_gen/matplotlib.artist.artist.update", "type": "artist", "text": "matplotlib.artist.Artist.update   Artist.update(props)[source]\n \nUpdate this artist's properties from the dict props.  Parameters \n \npropsdict\n\n   \n\n"}, {"name": "artist.Artist.update_from", "path": "_as_gen/matplotlib.artist.artist.update_from", "type": "artist", "text": "matplotlib.artist.Artist.update_from   Artist.update_from(other)[source]\n \nCopy properties from other to self. \n\n"}, {"name": "artist.Artist.zorder", "path": "_as_gen/matplotlib.artist.artist.zorder", "type": "artist", "text": "matplotlib.artist.Artist.zorder   Artist.zorder=0\n\n\n"}, {"name": "artist.ArtistInspector", "path": "_as_gen/matplotlib.artist.artistinspector", "type": "artist", "text": "matplotlib.artist.ArtistInspector   classmatplotlib.artist.ArtistInspector(o)[source]\n \nA helper class to inspect an Artist and return information about its settable properties and their current values. Initialize the artist inspector with an Artist or an iterable of Artists. If an iterable is used, we assume it is a homogeneous sequence (all Artists are of the same type) and it is your responsibility to make sure this is so.   __init__(o)[source]\n \nInitialize the artist inspector with an Artist or an iterable of Artists. If an iterable is used, we assume it is a homogeneous sequence (all Artists are of the same type) and it is your responsibility to make sure this is so. \n Methods  \n__init__(o) Initialize the artist inspector with an Artist or an iterable of Artists.  \naliased_name(s) Return 'PROPNAME or alias' if s has an alias, else return 'PROPNAME'.  \naliased_name_rest(s, target) Return 'PROPNAME or alias' if s has an alias, else return 'PROPNAME', formatted for reST.  \nget_aliases() Get a dict mapping property fullnames to sets of aliases for each alias in the ArtistInspector.  \nget_setters() Get the attribute strings with setters for object.  \nget_valid_values(attr) Get the legal arguments for the setter associated with attr.  \nis_alias(o) Return whether method object o is an alias for another method.  \npprint_getters() Return the getters and actual values as list of strings.  \npprint_setters([prop, leadingspace]) If prop is None, return a list of strings of all settable properties and their valid values.  \npprint_setters_rest([prop, leadingspace]) If prop is None, return a list of reST-formatted strings of all settable properties and their valid values.  \nproperties() Return a dictionary mapping property name -> value.     aliased_name(s)[source]\n \nReturn 'PROPNAME or alias' if s has an alias, else return 'PROPNAME'. e.g., for the line markerfacecolor property, which has an alias, return 'markerfacecolor or mfc' and for the transform property, which does not, return 'transform'. \n   aliased_name_rest(s, target)[source]\n \nReturn 'PROPNAME or alias' if s has an alias, else return 'PROPNAME', formatted for reST. e.g., for the line markerfacecolor property, which has an alias, return 'markerfacecolor or mfc' and for the transform property, which does not, return 'transform'. \n   get_aliases()[source]\n \nGet a dict mapping property fullnames to sets of aliases for each alias in the ArtistInspector. e.g., for lines: {'markerfacecolor': {'mfc'},\n 'linewidth'      : {'lw'},\n}\n \n   get_setters()[source]\n \nGet the attribute strings with setters for object. For example, for a line, return ['markerfacecolor', 'linewidth',\n....]. \n   get_valid_values(attr)[source]\n \nGet the legal arguments for the setter associated with attr. This is done by querying the docstring of the setter for a line that begins with \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a numpydoc-style documentation for the setter's first argument. \n   is_alias(o)[source]\n \nReturn whether method object o is an alias for another method. \n   pprint_getters()[source]\n \nReturn the getters and actual values as list of strings. \n   pprint_setters(prop=None, leadingspace=2)[source]\n \nIf prop is None, return a list of strings of all settable properties and their valid values. If prop is not None, it is a valid property name and that property will be returned as a string of property : valid values. \n   pprint_setters_rest(prop=None, leadingspace=4)[source]\n \nIf prop is None, return a list of reST-formatted strings of all settable properties and their valid values. If prop is not None, it is a valid property name and that property will be returned as a string of \"property : valid\" values. \n   properties()[source]\n \nReturn a dictionary mapping property name -> value. \n \n\n"}, {"name": "artist.ArtistInspector.__init__()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.__init__", "type": "artist", "text": "  __init__(o)[source]\n \nInitialize the artist inspector with an Artist or an iterable of Artists. If an iterable is used, we assume it is a homogeneous sequence (all Artists are of the same type) and it is your responsibility to make sure this is so. \n"}, {"name": "artist.ArtistInspector.aliased_name()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.aliased_name", "type": "artist", "text": "  aliased_name(s)[source]\n \nReturn 'PROPNAME or alias' if s has an alias, else return 'PROPNAME'. e.g., for the line markerfacecolor property, which has an alias, return 'markerfacecolor or mfc' and for the transform property, which does not, return 'transform'. \n"}, {"name": "artist.ArtistInspector.aliased_name_rest()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.aliased_name_rest", "type": "artist", "text": "  aliased_name_rest(s, target)[source]\n \nReturn 'PROPNAME or alias' if s has an alias, else return 'PROPNAME', formatted for reST. e.g., for the line markerfacecolor property, which has an alias, return 'markerfacecolor or mfc' and for the transform property, which does not, return 'transform'. \n"}, {"name": "artist.ArtistInspector.get_aliases()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.get_aliases", "type": "artist", "text": "  get_aliases()[source]\n \nGet a dict mapping property fullnames to sets of aliases for each alias in the ArtistInspector. e.g., for lines: {'markerfacecolor': {'mfc'},\n 'linewidth'      : {'lw'},\n}\n \n"}, {"name": "artist.ArtistInspector.get_setters()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.get_setters", "type": "artist", "text": "  get_setters()[source]\n \nGet the attribute strings with setters for object. For example, for a line, return ['markerfacecolor', 'linewidth',\n....]. \n"}, {"name": "artist.ArtistInspector.get_valid_values()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.get_valid_values", "type": "artist", "text": "  get_valid_values(attr)[source]\n \nGet the legal arguments for the setter associated with attr. This is done by querying the docstring of the setter for a line that begins with \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a numpydoc-style documentation for the setter's first argument. \n"}, {"name": "artist.ArtistInspector.is_alias()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.is_alias", "type": "artist", "text": "  is_alias(o)[source]\n \nReturn whether method object o is an alias for another method. \n"}, {"name": "artist.ArtistInspector.pprint_getters()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.pprint_getters", "type": "artist", "text": "  pprint_getters()[source]\n \nReturn the getters and actual values as list of strings. \n"}, {"name": "artist.ArtistInspector.pprint_setters()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.pprint_setters", "type": "artist", "text": "  pprint_setters(prop=None, leadingspace=2)[source]\n \nIf prop is None, return a list of strings of all settable properties and their valid values. If prop is not None, it is a valid property name and that property will be returned as a string of property : valid values. \n"}, {"name": "artist.ArtistInspector.pprint_setters_rest()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.pprint_setters_rest", "type": "artist", "text": "  pprint_setters_rest(prop=None, leadingspace=4)[source]\n \nIf prop is None, return a list of reST-formatted strings of all settable properties and their valid values. If prop is not None, it is a valid property name and that property will be returned as a string of \"property : valid\" values. \n"}, {"name": "artist.ArtistInspector.properties()", "path": "_as_gen/matplotlib.artist.artistinspector#matplotlib.artist.ArtistInspector.properties", "type": "artist", "text": "  properties()[source]\n \nReturn a dictionary mapping property name -> value. \n"}, {"name": "artist.get", "path": "_as_gen/matplotlib.artist.get", "type": "artist", "text": "matplotlib.artist.get   matplotlib.artist.get(obj, property=None)[source]\n \nReturn the value of an Artist's property, or print all of them.  Parameters \n \nobjArtist\n\n\nThe queried artist; e.g., a Line2D, a Text, or an Axes.  \npropertystr or None, default: None\n\n\nIf property is 'somename', this function returns obj.get_somename(). If it's None (or unset), it prints all gettable properties from obj. Many properties have aliases for shorter typing, e.g. 'lw' is an alias for 'linewidth'. In the output, aliases and full property names will be listed as: property or alias = value e.g.: linewidth or lw = 2      See also  setp\n  \n\n"}, {"name": "artist.getp", "path": "_as_gen/matplotlib.artist.getp", "type": "artist", "text": "matplotlib.artist.getp   matplotlib.artist.getp(obj, property=None)[source]\n \nReturn the value of an Artist's property, or print all of them.  Parameters \n \nobjArtist\n\n\nThe queried artist; e.g., a Line2D, a Text, or an Axes.  \npropertystr or None, default: None\n\n\nIf property is 'somename', this function returns obj.get_somename(). If it's None (or unset), it prints all gettable properties from obj. Many properties have aliases for shorter typing, e.g. 'lw' is an alias for 'linewidth'. In the output, aliases and full property names will be listed as: property or alias = value e.g.: linewidth or lw = 2      See also  setp\n  \n\n"}, {"name": "artist.kwdoc", "path": "_as_gen/matplotlib.artist.kwdoc", "type": "artist", "text": "matplotlib.artist.kwdoc   matplotlib.artist.kwdoc(artist)[source]\n \nInspect an Artist class (using ArtistInspector) and return information about its settable properties and their current values.  Parameters \n \nartistArtist or an iterable of Artists\n\n  Returns \n str\n\nThe settable properties of artist, as plain text if rcParams[\"docstring.hardcopy\"] (default: False) is False and as a rst table (intended for use in Sphinx) if it is True.     \n\n"}, {"name": "artist.setp", "path": "_as_gen/matplotlib.artist.setp", "type": "artist", "text": "matplotlib.artist.setp   matplotlib.artist.setp(obj, *args, file=None, **kwargs)[source]\n \nSet one or more properties on an Artist, or list allowed values.  Parameters \n \nobjArtist or list of Artist\n\n\nThe artist(s) whose properties are being set or queried. When setting properties, all artists are affected; when querying the allowed values, only the first instance in the sequence is queried. For example, two lines can be made thicker and red with a single call: >>> x = arange(0, 1, 0.01)\n>>> lines = plot(x, sin(2*pi*x), x, sin(4*pi*x))\n>>> setp(lines, linewidth=2, color='r')\n  \nfilefile-like, default: sys.stdout\n\n\nWhere setp writes its output when asked to list allowed values. >>> with open('output.log') as file:\n...     setp(line, file=file)\n The default, None, means sys.stdout.  *args, **kwargs\n\nThe properties to set. The following combinations are supported:  \nSet the linestyle of a line to be dashed: >>> line, = plot([1, 2, 3])\n>>> setp(line, linestyle='--')\n  \nSet multiple properties at once: >>> setp(line, linewidth=2, color='r')\n  \nList allowed values for a line's linestyle: >>> setp(line, 'linestyle')\nlinestyle: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n  \nList all properties that can be set, and their allowed values: >>> setp(line)\nagg_filter: a filter function, ...\n[long output listing omitted]\n   setp also supports MATLAB style string/value pairs. For example, the following are equivalent: >>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style\n>>> setp(lines, linewidth=2, color='r')        # Python style\n      See also  getp\n  \n\n"}, {"name": "axes", "path": "axes_api", "type": "axes", "text": "matplotlib.axes Table of Contents  Inheritance The Axes class Subplots \nPlotting  Basic Spans Spectral Statistics Binned Contours 2D arrays Unstructured triangles Text and annotations Vector fields   Clearing Appearance Property cycle \nAxis / limits  Axis limits and direction Axis labels, title, and legend Axis scales Autoscaling and margins Aspect ratio Ticks and tick labels   Units Adding artists Twinning and sharing Axes position Async/event based Interactive Children Drawing Projection Other   Inheritance       The Axes class   classmatplotlib.axes.Axes(fig, rect, *, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs)[source]\n \nBases: matplotlib.axes._base._AxesBase The Axes contains most of the figure elements: Axis, Tick, Line2D, Text, Polygon, etc., and sets the coordinate system. The Axes instance supports callbacks through a callbacks attribute which is a CallbackRegistry instance. The events you can connect to are 'xlim_changed' and 'ylim_changed' and the callback will be called with func(ax) where ax is the Axes instance.  Attributes \n \ndataLimBbox\n\n\nThe bounding box enclosing all data displayed in the Axes.  \nviewLimBbox\n\n\nThe view limits in data coordinates.     Build an Axes in a figure.  Parameters \n \nfigFigure\n\n\nThe Axes is built in the Figure fig.  \nrect[left, bottom, width, height]\n\n\nThe Axes is built in the rectangle rect. rect is in Figure coordinates.  \nsharex, shareyAxes, optional\n\n\nThe x or y axis is shared with the x or y axis in the input Axes.  \nframeonbool, default: True\n\n\nWhether the Axes frame is visible.  \nbox_aspectfloat, optional\n\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.  **kwargs\n\nOther optional keyword arguments:   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float      Returns \n Axes\n\nThe new Axes object.     \n   Subplots  \nSubplotBase Base class for subplots, which are Axes instances with additional methods to facilitate generating and manipulating a set of Axes within a figure.  \nsubplot_class_factory      Plotting  Basic  \nAxes.plot Plot y versus x as lines and/or markers.  \nAxes.errorbar Plot y versus x as lines and/or markers with attached errorbars.  \nAxes.scatter A scatter plot of y vs.  \nAxes.plot_date Plot coercing the axis to treat floats as dates.  \nAxes.step Make a step plot.  \nAxes.loglog Make a plot with log scaling on both the x and y axis.  \nAxes.semilogx Make a plot with log scaling on the x axis.  \nAxes.semilogy Make a plot with log scaling on the y axis.  \nAxes.fill_between Fill the area between two horizontal curves.  \nAxes.fill_betweenx Fill the area between two vertical curves.  \nAxes.bar Make a bar plot.  \nAxes.barh Make a horizontal bar plot.  \nAxes.bar_label Label a bar plot.  \nAxes.stem Create a stem plot.  \nAxes.eventplot Plot identical parallel lines at the given positions.  \nAxes.pie Plot a pie chart.  \nAxes.stackplot Draw a stacked area plot.  \nAxes.broken_barh Plot a horizontal sequence of rectangles.  \nAxes.vlines Plot vertical lines at each x from ymin to ymax.  \nAxes.hlines Plot horizontal lines at each y from xmin to xmax.  \nAxes.fill Plot filled polygons.     Spans  \nAxes.axhline Add a horizontal line across the axis.  \nAxes.axhspan Add a horizontal span (rectangle) across the Axes.  \nAxes.axvline Add a vertical line across the Axes.  \nAxes.axvspan Add a vertical span (rectangle) across the Axes.  \nAxes.axline Add an infinitely long straight line.     Spectral  \nAxes.acorr Plot the autocorrelation of x.  \nAxes.angle_spectrum Plot the angle spectrum.  \nAxes.cohere Plot the coherence between x and y.  \nAxes.csd Plot the cross-spectral density.  \nAxes.magnitude_spectrum Plot the magnitude spectrum.  \nAxes.phase_spectrum Plot the phase spectrum.  \nAxes.psd Plot the power spectral density.  \nAxes.specgram Plot a spectrogram.  \nAxes.xcorr Plot the cross correlation between x and y.     Statistics  \nAxes.boxplot Draw a box and whisker plot.  \nAxes.violinplot Make a violin plot.  \nAxes.violin Drawing function for violin plots.  \nAxes.bxp Drawing function for box and whisker plots.     Binned  \nAxes.hexbin Make a 2D hexagonal binning plot of points x, y.  \nAxes.hist Plot a histogram.  \nAxes.hist2d Make a 2D histogram plot.  \nAxes.stairs A stepwise constant function as a line with bounding edges or a filled plot.     Contours  \nAxes.clabel Label a contour plot.  \nAxes.contour Plot contour lines.  \nAxes.contourf Plot filled contours.     2D arrays  \nAxes.imshow Display data as an image, i.e., on a 2D regular raster.  \nAxes.matshow Plot the values of a 2D matrix or array as color-coded image.  \nAxes.pcolor Create a pseudocolor plot with a non-regular rectangular grid.  \nAxes.pcolorfast Create a pseudocolor plot with a non-regular rectangular grid.  \nAxes.pcolormesh Create a pseudocolor plot with a non-regular rectangular grid.  \nAxes.spy Plot the sparsity pattern of a 2D array.     Unstructured triangles  \nAxes.tripcolor Create a pseudocolor plot of an unstructured triangular grid.  \nAxes.triplot Draw a unstructured triangular grid as lines and/or markers.  \nAxes.tricontour Draw contour lines on an unstructured triangular grid.  \nAxes.tricontourf Draw contour regions on an unstructured triangular grid.     Text and annotations  \nAxes.annotate Annotate the point xy with text text.  \nAxes.text Add text to the Axes.  \nAxes.table Add a table to an Axes.  \nAxes.arrow Add an arrow to the Axes.  \nAxes.inset_axes Add a child inset Axes to this existing Axes.  \nAxes.indicate_inset Add an inset indicator to the Axes.  \nAxes.indicate_inset_zoom Add an inset indicator rectangle to the Axes based on the axis limits for an inset_ax and draw connectors between inset_ax and the rectangle.  \nAxes.secondary_xaxis Add a second x-axis to this Axes.  \nAxes.secondary_yaxis Add a second y-axis to this Axes.     Vector fields  \nAxes.barbs Plot a 2D field of barbs.  \nAxes.quiver Plot a 2D field of arrows.  \nAxes.quiverkey Add a key to a quiver plot.  \nAxes.streamplot Draw streamlines of a vector flow.      Clearing  \nAxes.cla Clear the Axes.  \nAxes.clear Clear the Axes.     Appearance  \nAxes.axis Convenience method to get or set some axis properties.  \nAxes.set_axis_off Turn the x- and y-axis off.  \nAxes.set_axis_on Turn the x- and y-axis on.  \nAxes.set_frame_on Set whether the Axes rectangle patch is drawn.  \nAxes.get_frame_on Get whether the Axes rectangle patch is drawn.  \nAxes.set_axisbelow Set whether axis ticks and gridlines are above or below most artists.  \nAxes.get_axisbelow Get whether axis ticks and gridlines are above or below most artists.  \nAxes.grid Configure the grid lines.  \nAxes.get_facecolor Get the facecolor of the Axes.  \nAxes.set_facecolor Set the facecolor of the Axes.     Property cycle  \nAxes.set_prop_cycle Set the property cycle of the Axes.     Axis / limits  \nAxes.get_xaxis Return the XAxis instance.  \nAxes.get_yaxis Return the YAxis instance.    Axis limits and direction  \nAxes.invert_xaxis Invert the x-axis.  \nAxes.xaxis_inverted Return whether the xaxis is oriented in the \"inverse\" direction.  \nAxes.invert_yaxis Invert the y-axis.  \nAxes.yaxis_inverted Return whether the yaxis is oriented in the \"inverse\" direction.  \nAxes.set_xlim Set the x-axis view limits.  \nAxes.get_xlim Return the x-axis view limits.  \nAxes.set_ylim Set the y-axis view limits.  \nAxes.get_ylim Return the y-axis view limits.  \nAxes.update_datalim Extend the dataLim Bbox to include the given points.  \nAxes.set_xbound Set the lower and upper numerical bounds of the x-axis.  \nAxes.get_xbound Return the lower and upper x-axis bounds, in increasing order.  \nAxes.set_ybound Set the lower and upper numerical bounds of the y-axis.  \nAxes.get_ybound Return the lower and upper y-axis bounds, in increasing order.     Axis labels, title, and legend  \nAxes.set_xlabel Set the label for the x-axis.  \nAxes.get_xlabel Get the xlabel text string.  \nAxes.set_ylabel Set the label for the y-axis.  \nAxes.get_ylabel Get the ylabel text string.  \nAxes.set_title Set a title for the Axes.  \nAxes.get_title Get an Axes title.  \nAxes.legend Place a legend on the Axes.  \nAxes.get_legend Return the Legend instance, or None if no legend is defined.  \nAxes.get_legend_handles_labels Return handles and labels for legend     Axis scales  \nAxes.set_xscale Set the x-axis scale.  \nAxes.get_xscale Return the xaxis' scale (as a str).  \nAxes.set_yscale Set the y-axis scale.  \nAxes.get_yscale Return the yaxis' scale (as a str).     Autoscaling and margins  \nAxes.use_sticky_edges When autoscaling, whether to obey all Artist.sticky_edges.  \nAxes.margins Set or retrieve autoscaling margins.  \nAxes.set_xmargin Set padding of X data limits prior to autoscaling.  \nAxes.set_ymargin Set padding of Y data limits prior to autoscaling.  \nAxes.relim Recompute the data limits based on current artists.  \nAxes.autoscale Autoscale the axis view to the data (toggle).  \nAxes.autoscale_view Autoscale the view limits using the data limits.  \nAxes.set_autoscale_on Set whether autoscaling is applied to each axis on the next draw or call to Axes.autoscale_view.  \nAxes.get_autoscale_on Return True if each axis is autoscaled, False otherwise.  \nAxes.set_autoscalex_on Set whether the x-axis is autoscaled on the next draw or call to Axes.autoscale_view.  \nAxes.get_autoscalex_on Return whether the x-axis is autoscaled.  \nAxes.set_autoscaley_on Set whether the y-axis is autoscaled on the next draw or call to Axes.autoscale_view.  \nAxes.get_autoscaley_on Return whether the y-axis is autoscaled.     Aspect ratio  \nAxes.apply_aspect Adjust the Axes for a specified data aspect ratio.  \nAxes.set_aspect Set the aspect ratio of the axes scaling, i.e. y/x-scale.  \nAxes.get_aspect Return the aspect ratio of the axes scaling.  \nAxes.set_box_aspect Set the Axes box aspect, i.e. the ratio of height to width.  \nAxes.get_box_aspect Return the Axes box aspect, i.e. the ratio of height to width.  \nAxes.set_adjustable Set how the Axes adjusts to achieve the required aspect ratio.  \nAxes.get_adjustable Return whether the Axes will adjust its physical dimension ('box') or its data limits ('datalim') to achieve the desired aspect ratio.     Ticks and tick labels  \nAxes.set_xticks Set the xaxis' tick locations and optionally labels.  \nAxes.get_xticks Return the xaxis' tick locations in data coordinates.  \nAxes.set_xticklabels Set the xaxis' labels with list of string labels.  \nAxes.get_xticklabels Get the xaxis' tick labels.  \nAxes.get_xmajorticklabels Return the xaxis' major tick labels, as a list of Text.  \nAxes.get_xminorticklabels Return the xaxis' minor tick labels, as a list of Text.  \nAxes.get_xgridlines Return the xaxis' grid lines as a list of Line2Ds.  \nAxes.get_xticklines Return the xaxis' tick lines as a list of Line2Ds.  \nAxes.xaxis_date Set up axis ticks and labels to treat data along the xaxis as dates.  \nAxes.set_yticks Set the yaxis' tick locations and optionally labels.  \nAxes.get_yticks Return the yaxis' tick locations in data coordinates.  \nAxes.set_yticklabels Set the yaxis' labels with list of string labels.  \nAxes.get_yticklabels Get the yaxis' tick labels.  \nAxes.get_ymajorticklabels Return the yaxis' major tick labels, as a list of Text.  \nAxes.get_yminorticklabels Return the yaxis' minor tick labels, as a list of Text.  \nAxes.get_ygridlines Return the yaxis' grid lines as a list of Line2Ds.  \nAxes.get_yticklines Return the yaxis' tick lines as a list of Line2Ds.  \nAxes.yaxis_date Set up axis ticks and labels to treat data along the yaxis as dates.  \nAxes.minorticks_off Remove minor ticks from the Axes.  \nAxes.minorticks_on Display minor ticks on the Axes.  \nAxes.ticklabel_format Configure the ScalarFormatter used by default for linear axes.  \nAxes.tick_params Change the appearance of ticks, tick labels, and gridlines.  \nAxes.locator_params Control behavior of major tick locators.      Units  \nAxes.convert_xunits Convert x using the unit type of the xaxis.  \nAxes.convert_yunits Convert y using the unit type of the yaxis.  \nAxes.have_units Return whether units are set on any axis.     Adding artists  \nAxes.add_artist Add an Artist to the Axes; return the artist.  \nAxes.add_child_axes Add an AxesBase to the Axes' children; return the child Axes.  \nAxes.add_collection Add a Collection to the Axes; return the collection.  \nAxes.add_container Add a Container to the axes' containers; return the container.  \nAxes.add_image Add an AxesImage to the Axes; return the image.  \nAxes.add_line Add a Line2D to the Axes; return the line.  \nAxes.add_patch Add a Patch to the Axes; return the patch.  \nAxes.add_table Add a Table to the Axes; return the table.     Twinning and sharing  \nAxes.twinx Create a twin Axes sharing the xaxis.  \nAxes.twiny Create a twin Axes sharing the yaxis.  \nAxes.sharex Share the x-axis with other.  \nAxes.sharey Share the y-axis with other.  \nAxes.get_shared_x_axes Return a reference to the shared axes Grouper object for x axes.  \nAxes.get_shared_y_axes Return a reference to the shared axes Grouper object for y axes.     Axes position  \nAxes.get_anchor Get the anchor location.  \nAxes.set_anchor Define the anchor location.  \nAxes.get_axes_locator Return the axes_locator.  \nAxes.set_axes_locator Set the Axes locator.  \nAxes.reset_position Reset the active position to the original position.  \nAxes.get_position Return the position of the Axes within the figure as a Bbox.  \nAxes.set_position Set the Axes position.     Async/event based  \nAxes.stale Whether the artist is 'stale' and needs to be re-drawn for the output to match the internal state of the artist.  \nAxes.pchanged Call all of the registered callbacks.  \nAxes.add_callback Add a callback function that will be called whenever one of the Artist's properties changes.  \nAxes.remove_callback Remove a callback based on its observer id.     Interactive  \nAxes.can_pan Return whether this Axes supports any pan/zoom button functionality.  \nAxes.can_zoom Return whether this Axes supports the zoom box button functionality.  \nAxes.get_navigate Get whether the Axes responds to navigation commands.  \nAxes.set_navigate Set whether the Axes responds to navigation toolbar commands.  \nAxes.get_navigate_mode Get the navigation toolbar button status: 'PAN', 'ZOOM', or None.  \nAxes.set_navigate_mode Set the navigation toolbar button status.  \nAxes.start_pan Called when a pan operation has started.  \nAxes.drag_pan Called when the mouse moves during a pan operation.  \nAxes.end_pan Called when a pan operation completes (when the mouse button is up.)  \nAxes.format_coord Return a format string formatting the x, y coordinates.  \nAxes.format_cursor_data Return a string representation of data.  \nAxes.format_xdata Return x formatted as an x-value.  \nAxes.format_ydata Return y formatted as an y-value.  \nAxes.mouseover If this property is set to True, the artist will be queried for custom context information when the mouse cursor moves over it.  \nAxes.in_axes Return whether the given event (in display coords) is in the Axes.  \nAxes.contains Test whether the artist contains the mouse event.  \nAxes.contains_point Return whether point (pair of pixel coordinates) is inside the axes patch.  \nAxes.get_cursor_data Return the cursor data for a given event.     Children  \nAxes.get_children Return a list of the child Artists of this Artist.  \nAxes.get_images Return a list of AxesImages contained by the Axes.  \nAxes.get_lines Return a list of lines contained by the Axes.  \nAxes.findobj Find artist objects.     Drawing  \nAxes.draw Draw the Artist (and its children) using the given renderer.  \nAxes.draw_artist Efficiently redraw a single artist.  \nAxes.redraw_in_frame Efficiently redraw Axes data, but not axis ticks, labels, etc.  \nAxes.get_renderer_cache   \nAxes.get_rasterization_zorder Return the zorder value below which artists will be rasterized.  \nAxes.set_rasterization_zorder Set the zorder threshold for rasterization for vector graphics output.  \nAxes.get_window_extent Return the Axes bounding box in display space; args and kwargs are empty.  \nAxes.get_tightbbox Return the tight bounding box of the axes, including axis and their decorators (xlabel, title, etc).     Projection Methods used by Axis that must be overridden for non-rectilinear Axes.  \nAxes.name   \nAxes.get_xaxis_transform Get the transformation used for drawing x-axis labels, ticks and gridlines.  \nAxes.get_yaxis_transform Get the transformation used for drawing y-axis labels, ticks and gridlines.  \nAxes.get_data_ratio Return the aspect ratio of the scaled data.  \nAxes.get_xaxis_text1_transform \n Returns    \nAxes.get_xaxis_text2_transform \n Returns    \nAxes.get_yaxis_text1_transform \n Returns    \nAxes.get_yaxis_text2_transform \n Returns       Other  \nAxes.zorder   \nAxes.get_default_bbox_extra_artists Return a default list of artists that are used for the bounding box calculation.  \nAxes.get_transformed_clip_path_and_affine Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.  \nAxes.has_data Return whether any artists have been added to the Axes.  \nAxes.set Set multiple properties at once.   \n"}, {"name": "axes.Axes", "path": "axes_api#matplotlib.axes.Axes", "type": "axes", "text": "  classmatplotlib.axes.Axes(fig, rect, *, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs)[source]\n \nBases: matplotlib.axes._base._AxesBase The Axes contains most of the figure elements: Axis, Tick, Line2D, Text, Polygon, etc., and sets the coordinate system. The Axes instance supports callbacks through a callbacks attribute which is a CallbackRegistry instance. The events you can connect to are 'xlim_changed' and 'ylim_changed' and the callback will be called with func(ax) where ax is the Axes instance.  Attributes \n \ndataLimBbox\n\n\nThe bounding box enclosing all data displayed in the Axes.  \nviewLimBbox\n\n\nThe view limits in data coordinates.     Build an Axes in a figure.  Parameters \n \nfigFigure\n\n\nThe Axes is built in the Figure fig.  \nrect[left, bottom, width, height]\n\n\nThe Axes is built in the rectangle rect. rect is in Figure coordinates.  \nsharex, shareyAxes, optional\n\n\nThe x or y axis is shared with the x or y axis in the input Axes.  \nframeonbool, default: True\n\n\nWhether the Axes frame is visible.  \nbox_aspectfloat, optional\n\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.  **kwargs\n\nOther optional keyword arguments:   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float      Returns \n Axes\n\nThe new Axes object.     \n"}, {"name": "axes.Axes.acorr", "path": "_as_gen/matplotlib.axes.axes.acorr", "type": "axes", "text": "matplotlib.axes.Axes.acorr   Axes.acorr(x, *, data=None, **kwargs)[source]\n \nPlot the autocorrelation of x.  Parameters \n \nxarray-like\n\n\ndetrendcallable, default: mlab.detrend_none (no detrending)\n\n\nA detrending function applied to x. It must have the signature detrend(x: np.ndarray) -> np.ndarray\n  \nnormedbool, default: True\n\n\nIf True, input vectors are normalised to unit length.  \nusevlinesbool, default: True\n\n\nDetermines the plot style. If True, vertical lines are plotted from 0 to the acorr value using Axes.vlines. Additionally, a horizontal line is plotted at y=0 using Axes.axhline. If False, markers are plotted at the acorr values using Axes.plot.  \nmaxlagsint, default: 10\n\n\nNumber of lags to show. If None, will return all 2 * len(x) - 1 lags.    Returns \n \nlagsarray (length 2*maxlags+1)\n\n\nThe lag vector.  \ncarray (length 2*maxlags+1)\n\n\nThe auto correlation vector.  \nlineLineCollection or Line2D\n\n\nArtist added to the Axes of the correlation:  \nLineCollection if usevlines is True. \nLine2D if usevlines is False.   \nbLine2D or None\n\n\nHorizontal line at 0 if usevlines is True None usevlines is False.    Other Parameters \n \nlinestyleLine2D property, optional\n\n\nThe linestyle for plotting the data points. Only used if usevlines is False.  \nmarkerstr, default: 'o'\n\n\nThe marker for plotting the data points. Only used if usevlines is False.  \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x  **kwargs\n\nAdditional parameters are passed to Axes.vlines and Axes.axhline if usevlines is True; otherwise they are passed to Axes.plot.     Notes The cross correlation is performed with numpy.correlate with mode = \"full\". \n  Examples using matplotlib.axes.Axes.acorr\n \n   Cross- and Auto-Correlation Demo   \n\n"}, {"name": "axes.Axes.add_artist", "path": "_as_gen/matplotlib.axes.axes.add_artist", "type": "axes", "text": "matplotlib.axes.Axes.add_artist   Axes.add_artist(a)[source]\n \nAdd an Artist to the Axes; return the artist. Use add_artist only for artists for which there is no dedicated \"add\" method; and if necessary, use a method such as update_datalim to manually update the dataLim if the artist is to be included in autoscaling. If no transform has been specified when creating the artist (e.g. artist.get_transform() == None) then the transform is set to ax.transData. \n  Examples using matplotlib.axes.Axes.add_artist\n \n   Scatter plots with a legend   \n\n   BboxImage Demo   \n\n   Bar of pie   \n\n   Annotating Plots   \n\n   AnnotationBbox demo   \n\n   Using a text as a Path   \n\n   Ellipse Demo   \n\n   Anchored Direction Arrow   \n\n   Axes Grid2   \n\n   Inset Locator Demo2   \n\n   Simple Anchored Artists   \n\n   Anatomy of a figure   \n\n   Anchored Artists   \n\n   Artist tests   \n\n   Anchored Box04   \n\n   Annotate Explain   \n\n   Connect Simple01   \n\n   Simple Annotate01   \n\n   Simple Legend02   \n\n   Legend guide   \n\n   Annotations   \n\n"}, {"name": "axes.Axes.add_callback", "path": "_as_gen/matplotlib.axes.axes.add_callback", "type": "axes", "text": "matplotlib.axes.Axes.add_callback   Axes.add_callback(func)[source]\n \nAdd a callback function that will be called whenever one of the Artist's properties changes.  Parameters \n \nfunccallable\n\n\nThe callback function. It must have the signature: def func(artist: Artist) -> Any\n where artist is the calling Artist. Return values may exist but are ignored.    Returns \n int\n\nThe observer id associated with the callback. This id can be used for removing the callback with remove_callback later.      See also  remove_callback\n  \n\n"}, {"name": "axes.Axes.add_child_axes", "path": "_as_gen/matplotlib.axes.axes.add_child_axes", "type": "axes", "text": "matplotlib.axes.Axes.add_child_axes   Axes.add_child_axes(ax)[source]\n \nAdd an AxesBase to the Axes' children; return the child Axes. This is the lowlevel version. See axes.Axes.inset_axes. \n\n"}, {"name": "axes.Axes.add_collection", "path": "_as_gen/matplotlib.axes.axes.add_collection", "type": "axes", "text": "matplotlib.axes.Axes.add_collection   Axes.add_collection(collection, autolim=True)[source]\n \nAdd a Collection to the Axes; return the collection. \n  Examples using matplotlib.axes.Axes.add_collection\n \n   EventCollection Demo   \n\n   Using span_where   \n\n   Creating boxes from error bars using PatchCollection   \n\n   Reference for Matplotlib artists   \n\n   Line, Poly and RegularPoly Collection with autoscaling   \n\n   Ellipse Collection   \n\n   Line Collection   \n\n   Circles, Wedges and Polygons   \n\n   Lasso Demo   \n\n   MRI With EEG   \n\n   Artist tests   \n\n   Autoscaling   \n\n"}, {"name": "axes.Axes.add_container", "path": "_as_gen/matplotlib.axes.axes.add_container", "type": "axes", "text": "matplotlib.axes.Axes.add_container   Axes.add_container(container)[source]\n \nAdd a Container to the axes' containers; return the container. \n\n"}, {"name": "axes.Axes.add_image", "path": "_as_gen/matplotlib.axes.axes.add_image", "type": "axes", "text": "matplotlib.axes.Axes.add_image   Axes.add_image(image)[source]\n \nAdd an AxesImage to the Axes; return the image. \n  Examples using matplotlib.axes.Axes.add_image\n \n   Image Nonuniform   \n\n"}, {"name": "axes.Axes.add_line", "path": "_as_gen/matplotlib.axes.axes.add_line", "type": "axes", "text": "matplotlib.axes.Axes.add_line   Axes.add_line(line)[source]\n \nAdd a Line2D to the Axes; return the line. \n  Examples using matplotlib.axes.Axes.add_line\n \n   Artist within an artist   \n\n   Reference for Matplotlib artists   \n\n   Artist tests   \n\n   Artist tutorial   \n\n"}, {"name": "axes.Axes.add_patch", "path": "_as_gen/matplotlib.axes.axes.add_patch", "type": "axes", "text": "matplotlib.axes.Axes.add_patch   Axes.add_patch(p)[source]\n \nAdd a Patch to the Axes; return the patch. \n  Examples using matplotlib.axes.Axes.add_patch\n \n   Curve with error band   \n\n   Image Demo   \n\n   Axes box aspect   \n\n   Controlling view limits using margins and sticky_edges   \n\n   Boxplots   \n\n   Plot a confidence ellipse of a two-dimensional dataset   \n\n   Annotating Plots   \n\n   Precise text layout   \n\n   Compound path   \n\n   Dolphins   \n\n   Mmh Donuts!!!   \n\n   Drawing fancy boxes   \n\n   Hatch style reference   \n\n   PathPatch object   \n\n   Bezier Curve   \n\n   ggplot style sheet   \n\n   Inset Locator Demo   \n\n   Firefox   \n\n   Integral as the area under a curve   \n\n   Looking Glass   \n\n   Path Editor   \n\n   Poly Editor   \n\n   Trifinder Event Demo   \n\n   Viewlims   \n\n   Changing colors of lines intersecting a box   \n\n   Building histograms using Rectangles and PolyCollections   \n\n   Packed-bubble chart   \n\n   SVG Filter Pie   \n\n   TickedStroke patheffect   \n\n   Draw flat objects in 3D plot   \n\n   Artist tests   \n\n   Ellipse With Units   \n\n   Artist tutorial   \n\n   Legend guide   \n\n   Path Tutorial   \n\n   Transformations Tutorial   \n\n   Specifying Colors   \n\n   Text properties and layout   \n\n"}, {"name": "axes.Axes.add_table", "path": "_as_gen/matplotlib.axes.axes.add_table", "type": "axes", "text": "matplotlib.axes.Axes.add_table   Axes.add_table(tab)[source]\n \nAdd a Table to the Axes; return the table. \n\n"}, {"name": "axes.Axes.angle_spectrum", "path": "_as_gen/matplotlib.axes.axes.angle_spectrum", "type": "axes", "text": "matplotlib.axes.Axes.angle_spectrum   Axes.angle_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, *, data=None, **kwargs)[source]\n \nPlot the angle spectrum. Compute the angle spectrum (wrapped phase spectrum) of x. Data is padded to a length of pad_to and the windowing function window is applied to the signal.  Parameters \n \nx1-D array or sequence\n\n\nArray or sequence containing the data.  \nFsfloat, default: 2\n\n\nThe sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.  \nwindowcallable or ndarray, default: window_hanning\n\n\nA function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.  \nsides{'default', 'onesided', 'twosided'}, optional\n\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.  \npad_toint, optional\n\n\nThe number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to the length of the input signal (i.e. no padding).  \nFcint, default: 0\n\n\nThe center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.    Returns \n \nspectrum1-D array\n\n\nThe values for the angle spectrum in radians (real valued).  \nfreqs1-D array\n\n\nThe frequencies corresponding to the elements in spectrum.  \nlineLine2D\n\n\nThe line created by this function.    Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x  **kwargs\n\nKeyword arguments control the Line2D properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float        See also  magnitude_spectrum\n\nPlots the magnitudes of the corresponding frequencies.  phase_spectrum\n\nPlots the unwrapped version of this function.  specgram\n\nCan plot the angle spectrum of segments within the signal in a colormap.    \n\n"}, {"name": "axes.Axes.annotate", "path": "_as_gen/matplotlib.axes.axes.annotate", "type": "axes", "text": "matplotlib.axes.Axes.annotate   Axes.annotate(text, xy, *args, **kwargs)[source]\n \nAnnotate the point xy with text text. In the simplest form, the text is placed at xy. Optionally, the text can be displayed in another position xytext. An arrow pointing from the text to the annotated point xy can then be added by defining arrowprops.  Parameters \n \ntextstr\n\n\nThe text of the annotation.  \nxy(float, float)\n\n\nThe point (x, y) to annotate. The coordinate system is determined by xycoords.  \nxytext(float, float), default: xy\n\n\nThe position (x, y) to place the text at. The coordinate system is determined by textcoords.  \nxycoordsstr or Artist or Transform or callable or (float, float), default: 'data'\n\n\nThe coordinate system that xy is given in. The following types of values are supported:  \nOne of the following strings:   \nValue Description   \n'figure points' Points from the lower left of the figure  \n'figure pixels' Pixels from the lower left of the figure  \n'figure fraction' Fraction of figure from lower left  \n'subfigure points' Points from the lower left of the subfigure  \n'subfigure pixels' Pixels from the lower left of the subfigure  \n'subfigure fraction' Fraction of subfigure from lower left  \n'axes points' Points from lower left corner of axes  \n'axes pixels' Pixels from lower left corner of axes  \n'axes fraction' Fraction of axes from lower left  \n'data' Use the coordinate system of the object being annotated (default)  \n'polar' (theta, r) if not native 'data' coordinates   Note that 'subfigure pixels' and 'figure pixels' are the same for the parent figure, so users who want code that is usable in a subfigure can use 'subfigure pixels'.  An Artist: xy is interpreted as a fraction of the artist's Bbox. E.g. (0, 0) would be the lower left corner of the bounding box and (0.5, 1) would be the center top of the bounding box. A Transform to transform xy to screen coordinates. \nA function with one of the following signatures: def transform(renderer) -> Bbox\ndef transform(renderer) -> Transform\n where renderer is a RendererBase subclass. The result of the function is interpreted like the Artist and Transform cases above.  A tuple (xcoords, ycoords) specifying separate coordinate systems for x and y. xcoords and ycoords must each be of one of the above described types.  See Advanced Annotations for more details.  \ntextcoordsstr or Artist or Transform or callable or (float, float), default: value of xycoords\n\n\nThe coordinate system that xytext is given in. All xycoords values are valid as well as the following strings:   \nValue Description   \n'offset points' Offset (in points) from the xy value  \n'offset pixels' Offset (in pixels) from the xy value    \narrowpropsdict, optional\n\n\nThe properties used to draw a FancyArrowPatch arrow between the positions xy and xytext. Defaults to None, i.e. no arrow is drawn. For historical reasons there are two different ways to specify arrows, \"simple\" and \"fancy\": Simple arrow: If arrowprops does not contain the key 'arrowstyle' the allowed keys are:   \nKey Description   \nwidth The width of the arrow in points  \nheadwidth The width of the base of the arrow head in points  \nheadlength The length of the arrow head in points  \nshrink Fraction of total length to shrink from both ends  \n? Any key to matplotlib.patches.FancyArrowPatch   The arrow is attached to the edge of the text box, the exact position (corners or centers) depending on where it's pointing to. Fancy arrow: This is used if 'arrowstyle' is provided in the arrowprops. Valid keys are the following FancyArrowPatch parameters:   \nKey Description   \narrowstyle the arrow style  \nconnectionstyle the connection style  \nrelpos see below; default is (0.5, 0.5)  \npatchA default is bounding box of the text  \npatchB default is None  \nshrinkA default is 2 points  \nshrinkB default is 2 points  \nmutation_scale default is text size (in points)  \nmutation_aspect default is 1.  \n? any key for matplotlib.patches.PathPatch   The exact starting point position of the arrow is defined by relpos. It's a tuple of relative coordinates of the text box, where (0, 0) is the lower left corner and (1, 1) is the upper right corner. Values <0 and >1 are supported and specify points outside the text box. By default (0.5, 0.5) the starting point is centered in the text box.  \nannotation_clipbool or None, default: None\n\n\nWhether to draw the annotation when the annotation point xy is outside the axes area.  If True, the annotation will only be drawn when xy is within the axes. If False, the annotation will always be drawn. If None, the annotation will only be drawn when xy is within the axes and xycoords is 'data'.   **kwargs\n\nAdditional kwargs are passed to Text.    Returns \n Annotation\n    See also  Advanced Annotations\n  \n  Examples using matplotlib.axes.Axes.annotate\n \n   Broken Barh   \n\n   Hat graph   \n\n   Creating a timeline with lines, dates, and text   \n\n   Combining two subplots using subplots and GridSpec   \n\n   Labeling a pie and a donut   \n\n   Scale invariant angle label   \n\n   Annotating Plots   \n\n   Annotation arrow style reference   \n\n   Rendering math equations using TeX   \n\n   Annotate Transform   \n\n   Annotating a plot   \n\n   Annotation Polar   \n\n   Text Commands   \n\n   Mmh Donuts!!!   \n\n   axis_direction demo   \n\n   Simple Axis Pad   \n\n   XKCD   \n\n   Patheffect Demo   \n\n   Annotation with units   \n\n   Annotate Explain   \n\n   Annotate Simple01   \n\n   Annotate Simple02   \n\n   Annotate Simple03   \n\n   Annotate Simple04   \n\n   Annotate Simple Coord01   \n\n   Annotate Simple Coord02   \n\n   Annotate Simple Coord03   \n\n   Connection styles for annotations   \n\n   Simple Annotate01   \n\n   Basic Usage   \n\n   Faster rendering by using blitting   \n\n   Transformations Tutorial   \n\n   Text in Matplotlib Plots   \n\n   Annotations   \n\n"}, {"name": "axes.Axes.apply_aspect", "path": "_as_gen/matplotlib.axes.axes.apply_aspect", "type": "axes", "text": "matplotlib.axes.Axes.apply_aspect   Axes.apply_aspect(position=None)[source]\n \nAdjust the Axes for a specified data aspect ratio. Depending on get_adjustable this will modify either the Axes box (position) or the view limits. In the former case, get_anchor will affect the position.  See also  matplotlib.axes.Axes.set_aspect\n\nFor a description of aspect ratio handling.  matplotlib.axes.Axes.set_adjustable\n\nSet how the Axes adjusts to achieve the required aspect ratio.  matplotlib.axes.Axes.set_anchor\n\nSet the position in case of extra space.    Notes This is called automatically when each Axes is drawn. You may need to call it yourself if you need to update the Axes position and/or view limits before the Figure is drawn. \n\n"}, {"name": "axes.Axes.arrow", "path": "_as_gen/matplotlib.axes.axes.arrow", "type": "axes", "text": "matplotlib.axes.Axes.arrow   Axes.arrow(x, y, dx, dy, **kwargs)[source]\n \nAdd an arrow to the Axes. This draws an arrow from (x, y) to (x+dx, y+dy).  Parameters \n \nx, yfloat\n\n\nThe x and y coordinates of the arrow base.  \ndx, dyfloat\n\n\nThe length of the arrow along x and y direction.  \nwidthfloat, default: 0.001\n\n\nWidth of full arrow tail.  \nlength_includes_headbool, default: False\n\n\nTrue if head is to be counted in calculating the length.  \nhead_widthfloat or None, default: 3*width\n\n\nTotal width of the full arrow head.  \nhead_lengthfloat or None, default: 1.5*head_width\n\n\nLength of arrow head.  \nshape{'full', 'left', 'right'}, default: 'full'\n\n\nDraw the left-half, right-half, or full arrow.  \noverhangfloat, default: 0\n\n\nFraction that the arrow is swept back (0 overhang means triangular shape). Can be negative or greater than one.  \nhead_starts_at_zerobool, default: False\n\n\nIf True, the head starts being drawn at coordinate 0 instead of ending at coordinate 0.  **kwargs\n\nPatch properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha unknown  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float      Returns \n FancyArrow\n\nThe created FancyArrow object.     Notes The resulting arrow is affected by the Axes aspect ratio and limits. This may produce an arrow whose head is not square with its stem. To create an arrow whose head is square with its stem, use annotate() for example: >>> ax.annotate(\"\", xy=(0.5, 0.5), xytext=(0, 0),\n...             arrowprops=dict(arrowstyle=\"->\"))\n \n  Examples using matplotlib.axes.Axes.arrow\n \n   Arrow Demo   \n\n"}, {"name": "axes.Axes.autoscale", "path": "_as_gen/matplotlib.axes.axes.autoscale", "type": "axes", "text": "matplotlib.axes.Axes.autoscale   Axes.autoscale(enable=True, axis='both', tight=None)[source]\n \nAutoscale the axis view to the data (toggle). Convenience method for simple axis view autoscaling. It turns autoscaling on or off, and then, if autoscaling for either axis is on, it performs the autoscaling on the specified axis or Axes.  Parameters \n \nenablebool or None, default: True\n\n\nTrue turns autoscaling on, False turns it off. None leaves the autoscaling state unchanged.  \naxis{'both', 'x', 'y'}, default: 'both'\n\n\nWhich axis to operate on.  \ntightbool or None, default: None\n\n\nIf True, first set the margins to zero. Then, this argument is forwarded to autoscale_view (regardless of its value); see the description of its behavior there.     \n  Examples using matplotlib.axes.Axes.autoscale\n \n   Axes box aspect   \n\n   Autoscaling   \n\n"}, {"name": "axes.Axes.autoscale_view", "path": "_as_gen/matplotlib.axes.axes.autoscale_view", "type": "axes", "text": "matplotlib.axes.Axes.autoscale_view   Axes.autoscale_view(tight=None, scalex=True, scaley=True)[source]\n \nAutoscale the view limits using the data limits.  Parameters \n \ntightbool or None\n\n\nIf True, only expand the axis limits using the margins. Note that unlike for autoscale, tight=True does not set the margins to zero. If False and rcParams[\"axes.autolimit_mode\"] (default: 'data') is 'round_numbers', then after expansion by the margins, further expand the axis limits using the axis major locator. If None (the default), reuse the value set in the previous call to autoscale_view (the initial value is False, but the default style sets rcParams[\"axes.autolimit_mode\"] (default: 'data') to 'data', in which case this behaves like True).  \nscalexbool, default: True\n\n\nWhether to autoscale the x axis.  \nscaleybool, default: True\n\n\nWhether to autoscale the y axis.     Notes The autoscaling preserves any preexisting axis direction reversal. The data limits are not updated automatically when artist data are changed after the artist has been added to an Axes instance. In that case, use matplotlib.axes.Axes.relim() prior to calling autoscale_view. If the views of the Axes are fixed, e.g. via set_xlim, they will not be changed by autoscale_view(). See matplotlib.axes.Axes.autoscale() for an alternative. \n  Examples using matplotlib.axes.Axes.autoscale_view\n \n   Line, Poly and RegularPoly Collection with autoscaling   \n\n   Compound path   \n\n   Ellipse Collection   \n\n   Packed-bubble chart   \n\n   Group barchart with units   \n\n   Textbox   \n\n   Autoscaling   \n\n"}, {"name": "axes.Axes.axhline", "path": "_as_gen/matplotlib.axes.axes.axhline", "type": "axes", "text": "matplotlib.axes.Axes.axhline   Axes.axhline(y=0, xmin=0, xmax=1, **kwargs)[source]\n \nAdd a horizontal line across the axis.  Parameters \n \nyfloat, default: 0\n\n\ny position in data coordinates of the horizontal line.  \nxminfloat, default: 0\n\n\nShould be between 0 and 1, 0 being the far left of the plot, 1 the far right of the plot.  \nxmaxfloat, default: 1\n\n\nShould be between 0 and 1, 0 being the far left of the plot, 1 the far right of the plot.    Returns \n Line2D\n  Other Parameters \n **kwargs\n\nValid keyword arguments are Line2D properties, with the exception of 'transform':   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float        See also  hlines\n\nAdd horizontal lines in data coordinates.  axhspan\n\nAdd a horizontal span (rectangle) across the axis.  axline\n\nAdd a line with an arbitrary slope.    Examples  \ndraw a thick red hline at 'y' = 0 that spans the xrange: >>> axhline(linewidth=4, color='r')\n  \ndraw a default hline at 'y' = 1 that spans the xrange: >>> axhline(y=1)\n  \ndraw a default hline at 'y' = .5 that spans the middle half of the xrange: >>> axhline(y=.5, xmin=0.25, xmax=0.75)\n   \n  Examples using matplotlib.axes.Axes.axhline\n \n   Bar Label Demo   \n\n   Filling the area between lines   \n\n   Using span_where   \n\n   axhspan Demo   \n\n   Plot a confidence ellipse of a two-dimensional dataset   \n\n   Multiline   \n\n   Usetex Baseline Test   \n\n   Cross hair cursor   \n\n   Transformations Tutorial   \n\n"}, {"name": "axes.Axes.axhspan", "path": "_as_gen/matplotlib.axes.axes.axhspan", "type": "axes", "text": "matplotlib.axes.Axes.axhspan   Axes.axhspan(ymin, ymax, xmin=0, xmax=1, **kwargs)[source]\n \nAdd a horizontal span (rectangle) across the Axes. The rectangle spans from ymin to ymax vertically, and, by default, the whole x-axis horizontally. The x-span can be set using xmin (default: 0) and xmax (default: 1) which are in axis units; e.g. xmin = 0.5 always refers to the middle of the x-axis regardless of the limits set by set_xlim.  Parameters \n \nyminfloat\n\n\nLower y-coordinate of the span, in data units.  \nymaxfloat\n\n\nUpper y-coordinate of the span, in data units.  \nxminfloat, default: 0\n\n\nLower x-coordinate of the span, in x-axis (0-1) units.  \nxmaxfloat, default: 1\n\n\nUpper x-coordinate of the span, in x-axis (0-1) units.    Returns \n Polygon\n\nHorizontal span (rectangle) from (xmin, ymin) to (xmax, ymax).    Other Parameters \n \n**kwargsPolygon properties\n\n\n  \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nclosed bool  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nxy (N, 2) array-like  \nzorder float        See also  axvspan\n\nAdd a vertical span across the Axes.    \n  Examples using matplotlib.axes.Axes.axhspan\n \n   axhspan Demo   \n\n   Transformations Tutorial   \n\n"}, {"name": "axes.Axes.axis", "path": "_as_gen/matplotlib.axes.axes.axis", "type": "axes", "text": "matplotlib.axes.Axes.axis   Axes.axis(*args, emit=True, **kwargs)[source]\n \nConvenience method to get or set some axis properties. Call signatures: xmin, xmax, ymin, ymax = axis()\nxmin, xmax, ymin, ymax = axis([xmin, xmax, ymin, ymax])\nxmin, xmax, ymin, ymax = axis(option)\nxmin, xmax, ymin, ymax = axis(**kwargs)\n  Parameters \n \nxmin, xmax, ymin, ymaxfloat, optional\n\n\nThe axis limits to be set. This can also be achieved using ax.set(xlim=(xmin, xmax), ylim=(ymin, ymax))\n  \noptionbool or str\n\n\nIf a bool, turns axis lines and labels on or off. If a string, possible values are:   \nValue Description   \n'on' Turn on axis lines and labels. Same as True.  \n'off' Turn off axis lines and labels. Same as False.  \n'equal' Set equal scaling (i.e., make circles circular) by changing axis limits. This is the same as ax.set_aspect('equal', adjustable='datalim'). Explicit data limits may not be respected in this case.  \n'scaled' Set equal scaling (i.e., make circles circular) by changing dimensions of the plot box. This is the same as ax.set_aspect('equal', adjustable='box', anchor='C'). Additionally, further autoscaling will be disabled.  \n'tight' Set limits just large enough to show all data, then disable further autoscaling.  \n'auto' Automatic scaling (fill plot box with data).  \n'image' 'scaled' with axis limits equal to data limits.  \n'square' Square plot; similar to 'scaled', but initially forcing xmax-xmin == ymax-ymin.    \nemitbool, default: True\n\n\nWhether observers are notified of the axis limit change. This option is passed on to set_xlim and set_ylim.    Returns \n \nxmin, xmax, ymin, ymaxfloat\n\n\nThe axis limits.      See also  matplotlib.axes.Axes.set_xlim\nmatplotlib.axes.Axes.set_ylim\n  \n  Examples using matplotlib.axes.Axes.axis\n \n   Clipping images with patches   \n\n   Basic pie chart   \n\n   Bar of pie   \n\n   Hatch style reference   \n\n   PathPatch object   \n\n   ggplot style sheet   \n\n   Parasite Simple2   \n\n   Simple Axisline4   \n\n   Axis Direction   \n\n   axis_direction demo   \n\n   Axis line styles   \n\n   mpl_toolkits.axisartist.floating_axes features   \n\n   Parasite Axes demo   \n\n   Parasite axis demo   \n\n   Ticklabel alignment   \n\n   Ticklabel direction   \n\n   Simple Axis Direction01   \n\n   Simple Axis Direction03   \n\n   Simple Axis Pad   \n\n   Custom spines with axisartist   \n\n   Simple Axisline   \n\n   Simple Axisline3   \n\n   Packed-bubble chart   \n\n   TickedStroke patheffect   \n\n   MRI   \n\n   MRI With EEG   \n\n   Basic Usage   \n\n   Specifying Colors   \n\n   Text in Matplotlib Plots   \n\n"}, {"name": "axes.Axes.axline", "path": "_as_gen/matplotlib.axes.axes.axline", "type": "axes", "text": "matplotlib.axes.Axes.axline   Axes.axline(xy1, xy2=None, *, slope=None, **kwargs)[source]\n \nAdd an infinitely long straight line. The line can be defined either by two points xy1 and xy2, or by one point xy1 and a slope. This draws a straight line \"on the screen\", regardless of the x and y scales, and is thus also suitable for drawing exponential decays in semilog plots, power laws in loglog plots, etc. However, slope should only be used with linear scales; It has no clear meaning for all other scales, and thus the behavior is undefined. Please specify the line using the points xy1, xy2 for non-linear scales. The transform keyword argument only applies to the points xy1, xy2. The slope (if given) is always in data coordinates. This can be used e.g. with ax.transAxes for drawing grid lines with a fixed slope.  Parameters \n \nxy1, xy2(float, float)\n\n\nPoints for the line to pass through. Either xy2 or slope has to be given.  \nslopefloat, optional\n\n\nThe slope of the line. Either xy2 or slope has to be given.    Returns \n Line2D\n  Other Parameters \n **kwargs\n\nValid kwargs are Line2D properties   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float        See also  axhline\n\nfor horizontal lines  axvline\n\nfor vertical lines    Examples Draw a thick red line passing through (0, 0) and (1, 1): >>> axline((0, 0), (1, 1), linewidth=4, color='r')\n \n  Examples using matplotlib.axes.Axes.axline\n \n   axhspan Demo   \n\n   Anscombe's quartet   \n\n"}, {"name": "axes.Axes.axvline", "path": "_as_gen/matplotlib.axes.axes.axvline", "type": "axes", "text": "matplotlib.axes.Axes.axvline   Axes.axvline(x=0, ymin=0, ymax=1, **kwargs)[source]\n \nAdd a vertical line across the Axes.  Parameters \n \nxfloat, default: 0\n\n\nx position in data coordinates of the vertical line.  \nyminfloat, default: 0\n\n\nShould be between 0 and 1, 0 being the bottom of the plot, 1 the top of the plot.  \nymaxfloat, default: 1\n\n\nShould be between 0 and 1, 0 being the bottom of the plot, 1 the top of the plot.    Returns \n Line2D\n  Other Parameters \n **kwargs\n\nValid keyword arguments are Line2D properties, with the exception of 'transform':   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float        See also  vlines\n\nAdd vertical lines in data coordinates.  axvspan\n\nAdd a vertical span (rectangle) across the axis.  axline\n\nAdd a line with an arbitrary slope.    Examples  \ndraw a thick red vline at x = 0 that spans the yrange: >>> axvline(linewidth=4, color='r')\n  \ndraw a default vline at x = 1 that spans the yrange: >>> axvline(x=1)\n  \ndraw a default vline at x = .5 that spans the middle half of the yrange: >>> axvline(x=.5, ymin=0.25, ymax=0.75)\n   \n  Examples using matplotlib.axes.Axes.axvline\n \n   axhspan Demo   \n\n   Plot a confidence ellipse of a two-dimensional dataset   \n\n   Usetex Baseline Test   \n\n   Cross hair cursor   \n\n   SkewT-logP diagram: using transforms and custom projections   \n\n   The Lifecycle of a Plot   \n\n   Transformations Tutorial   \n\n"}, {"name": "axes.Axes.axvspan", "path": "_as_gen/matplotlib.axes.axes.axvspan", "type": "axes", "text": "matplotlib.axes.Axes.axvspan   Axes.axvspan(xmin, xmax, ymin=0, ymax=1, **kwargs)[source]\n \nAdd a vertical span (rectangle) across the Axes. The rectangle spans from xmin to xmax horizontally, and, by default, the whole y-axis vertically. The y-span can be set using ymin (default: 0) and ymax (default: 1) which are in axis units; e.g. ymin = 0.5 always refers to the middle of the y-axis regardless of the limits set by set_ylim.  Parameters \n \nxminfloat\n\n\nLower x-coordinate of the span, in data units.  \nxmaxfloat\n\n\nUpper x-coordinate of the span, in data units.  \nyminfloat, default: 0\n\n\nLower y-coordinate of the span, in y-axis units (0-1).  \nymaxfloat, default: 1\n\n\nUpper y-coordinate of the span, in y-axis units (0-1).    Returns \n Polygon\n\nVertical span (rectangle) from (xmin, ymin) to (xmax, ymax).    Other Parameters \n \n**kwargsPolygon properties\n\n\n  \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nclosed bool  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nxy (N, 2) array-like  \nzorder float        See also  axhspan\n\nAdd a horizontal span across the Axes.    Examples Draw a vertical, green, translucent rectangle from x = 1.25 to x = 1.55 that spans the yrange of the Axes. >>> axvspan(1.25, 1.55, facecolor='g', alpha=0.5)\n \n  Examples using matplotlib.axes.Axes.axvspan\n \n   axhspan Demo   \n\n   Transformations Tutorial   \n\n"}, {"name": "axes.Axes.bar", "path": "_as_gen/matplotlib.axes.axes.bar", "type": "axes", "text": "matplotlib.axes.Axes.bar   Axes.bar(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)[source]\n \nMake a bar plot. The bars are positioned at x with the given alignment. Their dimensions are given by height and width. The vertical baseline is bottom (default 0). Many parameters can take either a single value applying to all bars or a sequence of values, one for each bar.  Parameters \n \nxfloat or array-like\n\n\nThe x coordinates of the bars. See also align for the alignment of the bars to the coordinates.  \nheightfloat or array-like\n\n\nThe height(s) of the bars.  \nwidthfloat or array-like, default: 0.8\n\n\nThe width(s) of the bars.  \nbottomfloat or array-like, default: 0\n\n\nThe y coordinate(s) of the bars bases.  \nalign{'center', 'edge'}, default: 'center'\n\n\nAlignment of the bars to the x coordinates:  'center': Center the base on the x positions. 'edge': Align the left edges of the bars with the x positions.  To align the bars on the right edge pass a negative width and align='edge'.    Returns \n BarContainer\n\nContainer with all the bars and optionally errorbars.    Other Parameters \n \ncolorcolor or list of color, optional\n\n\nThe colors of the bar faces.  \nedgecolorcolor or list of color, optional\n\n\nThe colors of the bar edges.  \nlinewidthfloat or array-like, optional\n\n\nWidth of the bar edge(s). If 0, don't draw edges.  \ntick_labelstr or list of str, optional\n\n\nThe tick labels of the bars. Default: None (Use default numeric labels.)  \nxerr, yerrfloat or array-like of shape(N,) or shape(2, N), optional\n\n\nIf not None, add horizontal / vertical errorbars to the bar tips. The values are +/- sizes relative to the data:  scalar: symmetric +/- values for all bars shape(N,): symmetric +/- values for each bar shape(2, N): Separate - and + values for each bar. First row contains the lower errors, the second row contains the upper errors. \nNone: No errorbar. (Default)  See Different ways of specifying error bars for an example on the usage of xerr and yerr.  \necolorcolor or list of color, default: 'black'\n\n\nThe line color of the errorbars.  \ncapsizefloat, default: rcParams[\"errorbar.capsize\"] (default: 0.0)\n\n\nThe length of the error bar caps in points.  \nerror_kwdict, optional\n\n\nDictionary of kwargs to be passed to the errorbar method. Values of ecolor or capsize defined here take precedence over the independent kwargs.  \nlogbool, default: False\n\n\nIf True, set the y-axis to be log scale.  \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).  \n**kwargsRectangle properties\n\n\n  \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nangle unknown  \nanimated bool  \nantialiased or aa bool or None  \nbounds (left, bottom, width, height)  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nheight unknown  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth unknown  \nx unknown  \nxy (float, float)  \ny unknown  \nzorder float        See also  barh\n\nPlot a horizontal bar plot.    Notes Stacked bars can be achieved by passing individual bottom values per bar. See Stacked bar chart. \n  Examples using matplotlib.axes.Axes.bar\n \n   Bar Label Demo   \n\n   Stacked bar chart   \n\n   Grouped bar chart with labels   \n\n   Hat graph   \n\n   Bar of pie   \n\n   Nested pie charts   \n\n   Bar chart on polar axis   \n\n   Legend Demo   \n\n   ggplot style sheet   \n\n   mpl_toolkits.axisartist.floating_axes features   \n\n   XKCD   \n\n   Create 2D bar graphs in different planes   \n\n   Log Bar   \n\n   Custom Ticker1   \n\n   Group barchart with units   \n\n   Basic Usage   \n\n   Artist tutorial   \n\n   Path Tutorial   \n\n   bar(x, height) / barh(y, width)   \n\n"}, {"name": "axes.Axes.bar_label", "path": "_as_gen/matplotlib.axes.axes.bar_label", "type": "axes", "text": "matplotlib.axes.Axes.bar_label   Axes.bar_label(container, labels=None, *, fmt='%g', label_type='edge', padding=0, **kwargs)[source]\n \nLabel a bar plot. Adds labels to bars in the given BarContainer. You may need to adjust the axis limits to fit the labels.  Parameters \n \ncontainerBarContainer\n\n\nContainer with all the bars and optionally errorbars, likely returned from bar or barh.  \nlabelsarray-like, optional\n\n\nA list of label texts, that should be displayed. If not given, the label texts will be the data values formatted with fmt.  \nfmtstr, default: '%g'\n\n\nA format string for the label.  \nlabel_type{'edge', 'center'}, default: 'edge'\n\n\nThe label type. Possible values:  'edge': label placed at the end-point of the bar segment, and the value displayed will be the position of that end-point. 'center': label placed in the center of the bar segment, and the value displayed will be the length of that segment. (useful for stacked bars, i.e., Bar Label Demo)   \npaddingfloat, default: 0\n\n\nDistance of label from the end of the bar, in points.  **kwargs\n\nAny remaining keyword arguments are passed through to Axes.annotate.    Returns \n list of Text\n\n\nA list of Text instances for the labels.     \n  Examples using matplotlib.axes.Axes.bar_label\n \n   Bar Label Demo   \n\n   Grouped bar chart with labels   \n\n"}, {"name": "axes.Axes.barbs", "path": "_as_gen/matplotlib.axes.axes.barbs", "type": "axes", "text": "matplotlib.axes.Axes.barbs   Axes.barbs(*args, data=None, **kwargs)[source]\n \nPlot a 2D field of barbs. Call signature: barbs([X, Y], U, V, [C], **kw)\n Where X, Y define the barb locations, U, V define the barb directions, and C optionally sets the color. All arguments may be 1D or 2D. U, V, C may be masked arrays, but masked X, Y are not supported at present. Barbs are traditionally used in meteorology as a way to plot the speed and direction of wind observations, but can technically be used to plot any two dimensional vector quantity. As opposed to arrows, which give vector magnitude by the length of the arrow, the barbs give more quantitative information about the vector magnitude by putting slanted lines or a triangle for various increments in magnitude, as show schematically below: :                   /\\    \\\n:                  /  \\    \\\n:                 /    \\    \\    \\\n:                /      \\    \\    \\\n:               ------------------------------\n The largest increment is given by a triangle (or \"flag\"). After those come full lines (barbs). The smallest increment is a half line. There is only, of course, ever at most 1 half line. If the magnitude is small and only needs a single half-line and no full lines or triangles, the half-line is offset from the end of the barb so that it can be easily distinguished from barbs with a single full line. The magnitude for the barb shown above would nominally be 65, using the standard increments of 50, 10, and 5. See also https://en.wikipedia.org/wiki/Wind_barb.  Parameters \n \nX, Y1D or 2D array-like, optional\n\n\nThe x and y coordinates of the barb locations. See pivot for how the barbs are drawn to the x, y positions. If not given, they will be generated as a uniform integer meshgrid based on the dimensions of U and V. If X and Y are 1D but U, V are 2D, X, Y are expanded to 2D using X, Y = np.meshgrid(X, Y). In this case len(X) and len(Y) must match the column and row dimensions of U and V.  \nU, V1D or 2D array-like\n\n\nThe x and y components of the barb shaft.  \nC1D or 2D array-like, optional\n\n\nNumeric data that defines the barb colors by colormapping via norm and cmap. This does not support explicit colors. If you want to set colors directly, use barbcolor instead.  \nlengthfloat, default: 7\n\n\nLength of the barb in points; the other parts of the barb are scaled against this.  \npivot{'tip', 'middle'} or float, default: 'tip'\n\n\nThe part of the arrow that is anchored to the X, Y grid. The barb rotates about this point. This can also be a number, which shifts the start of the barb that many points away from grid point.  \nbarbcolorcolor or color sequence\n\n\nThe color of all parts of the barb except for the flags. This parameter is analogous to the edgecolor parameter for polygons, which can be used instead. However this parameter will override facecolor.  \nflagcolorcolor or color sequence\n\n\nThe color of any flags on the barb. This parameter is analogous to the facecolor parameter for polygons, which can be used instead. However, this parameter will override facecolor. If this is not set (and C has not either) then flagcolor will be set to match barbcolor so that the barb has a uniform color. If C has been set, flagcolor has no effect.  \nsizesdict, optional\n\n\nA dictionary of coefficients specifying the ratio of a given feature to the length of the barb. Only those values one wishes to override need to be included. These features include:  'spacing' - space between features (flags, full/half barbs) 'height' - height (distance from shaft to top) of a flag or full barb 'width' - width of a flag, twice the width of a full barb 'emptybarb' - radius of the circle used for low magnitudes   \nfill_emptybool, default: False\n\n\nWhether the empty barbs (circles) that are drawn should be filled with the flag color. If they are not filled, the center is transparent.  \nroundingbool, default: True\n\n\nWhether the vector magnitude should be rounded when allocating barb components. If True, the magnitude is rounded to the nearest multiple of the half-barb increment. If False, the magnitude is simply truncated to the next lowest multiple.  \nbarb_incrementsdict, optional\n\n\nA dictionary of increments specifying values to associate with different parts of the barb. Only those values one wishes to override need to be included.  'half' - half barbs (Default is 5) 'full' - full barbs (Default is 10) 'flag' - flags (default is 50)   \nflip_barbbool or array-like of bool, default: False\n\n\nWhether the lines and flags should point opposite to normal. Normal behavior is for the barbs and lines to point right (comes from wind barbs having these features point towards low pressure in the Northern Hemisphere). A single value is applied to all barbs. Individual barbs can be flipped by passing a bool array of the same size as U and V.    Returns \n \nbarbsBarbs\n\n  Other Parameters \n \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).  **kwargs\n\nThe barbs can further be customized using PolyCollection keyword arguments:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha array-like or scalar or None  \nanimated bool  \nantialiased or aa or antialiaseds bool or list of bools  \narray array-like or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclim (vmin: float, vmax: float)  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncmap Colormap or str or None  \ncolor color or list of rgba tuples  \nedgecolor or ec or edgecolors color or list of colors or 'face'  \nfacecolor or facecolors or fc color or list of colors  \nfigure Figure  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or dashes or linestyles or ls str or tuple or list thereof  \nlinewidth or linewidths or lw float or list of floats  \nnorm Normalize or None  \noffset_transform Transform  \noffsets (N, 2) or (2,) array-like  \npath_effects AbstractPathEffect  \npaths list of array-like  \npicker None or bool or float or callable  \npickradius float  \nrasterized bool  \nsizes ndarray or None  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nurls list of str or None  \nverts list of array-like  \nverts_and_codes unknown  \nvisible bool  \nzorder float       \n  Examples using matplotlib.axes.Axes.barbs\n \n   Wind Barbs   \n\n   barbs(X, Y, U, V)   \n\n"}, {"name": "axes.Axes.barh", "path": "_as_gen/matplotlib.axes.axes.barh", "type": "axes", "text": "matplotlib.axes.Axes.barh   Axes.barh(y, width, height=0.8, left=None, *, align='center', **kwargs)[source]\n \nMake a horizontal bar plot. The bars are positioned at y with the given alignment. Their dimensions are given by width and height. The horizontal baseline is left (default 0). Many parameters can take either a single value applying to all bars or a sequence of values, one for each bar.  Parameters \n \nyfloat or array-like\n\n\nThe y coordinates of the bars. See also align for the alignment of the bars to the coordinates.  \nwidthfloat or array-like\n\n\nThe width(s) of the bars.  \nheightfloat or array-like, default: 0.8\n\n\nThe heights of the bars.  \nleftfloat or array-like, default: 0\n\n\nThe x coordinates of the left sides of the bars.  \nalign{'center', 'edge'}, default: 'center'\n\n\nAlignment of the base to the y coordinates*:  'center': Center the bars on the y positions. 'edge': Align the bottom edges of the bars with the y positions.  To align the bars on the top edge pass a negative height and align='edge'.    Returns \n BarContainer\n\nContainer with all the bars and optionally errorbars.    Other Parameters \n \ncolorcolor or list of color, optional\n\n\nThe colors of the bar faces.  \nedgecolorcolor or list of color, optional\n\n\nThe colors of the bar edges.  \nlinewidthfloat or array-like, optional\n\n\nWidth of the bar edge(s). If 0, don't draw edges.  \ntick_labelstr or list of str, optional\n\n\nThe tick labels of the bars. Default: None (Use default numeric labels.)  \nxerr, yerrfloat or array-like of shape(N,) or shape(2, N), optional\n\n\nIf not None, add horizontal / vertical errorbars to the bar tips. The values are +/- sizes relative to the data:  scalar: symmetric +/- values for all bars shape(N,): symmetric +/- values for each bar shape(2, N): Separate - and + values for each bar. First row contains the lower errors, the second row contains the upper errors. \nNone: No errorbar. (default)  See Different ways of specifying error bars for an example on the usage of xerr and yerr.  \necolorcolor or list of color, default: 'black'\n\n\nThe line color of the errorbars.  \ncapsizefloat, default: rcParams[\"errorbar.capsize\"] (default: 0.0)\n\n\nThe length of the error bar caps in points.  \nerror_kwdict, optional\n\n\nDictionary of kwargs to be passed to the errorbar method. Values of ecolor or capsize defined here take precedence over the independent kwargs.  \nlogbool, default: False\n\n\nIf True, set the x-axis to be log scale.  \n**kwargsRectangle properties\n\n\n  \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nangle unknown  \nanimated bool  \nantialiased or aa bool or None  \nbounds (left, bottom, width, height)  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nheight unknown  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth unknown  \nx unknown  \nxy (float, float)  \ny unknown  \nzorder float        See also  bar\n\nPlot a vertical bar plot.    Notes Stacked bars can be achieved by passing individual left values per bar. See Discrete distribution as horizontal bar chart . \n  Examples using matplotlib.axes.Axes.barh\n \n   Bar Label Demo   \n\n   Horizontal bar chart   \n\n   Producing multiple histograms side by side   \n\n   The Lifecycle of a Plot   \n\n"}, {"name": "axes.Axes.boxplot", "path": "_as_gen/matplotlib.axes.axes.boxplot", "type": "axes", "text": "matplotlib.axes.Axes.boxplot   Axes.boxplot(x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, bootstrap=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_ticks=True, autorange=False, zorder=None, *, data=None)[source]\n \nDraw a box and whisker plot. The box extends from the first quartile (Q1) to the third quartile (Q3) of the data, with a line at the median. The whiskers extend from the box by 1.5x the inter-quartile range (IQR). Flier points are those past the end of the whiskers. See https://en.wikipedia.org/wiki/Box_plot for reference.      Q1-1.5IQR   Q1   median  Q3   Q3+1.5IQR\n                  |-----:-----|\n  o      |--------|     :     |--------|    o  o\n                  |-----:-----|\nflier             <----------->            fliers\n                       IQR\n  Parameters \n \nxArray or a sequence of vectors.\n\n\nThe input data. If a 2D array, a boxplot is drawn for each column in x. If a sequence of 1D arrays, a boxplot is drawn for each array in x.  \nnotchbool, default: False\n\n\nWhether to draw a notched boxplot (True), or a rectangular boxplot (False). The notches represent the confidence interval (CI) around the median. The documentation for bootstrap describes how the locations of the notches are computed by default, but their locations may also be overridden by setting the conf_intervals parameter.  Note In cases where the values of the CI are less than the lower quartile or greater than the upper quartile, the notches will extend beyond the box, giving it a distinctive \"flipped\" appearance. This is expected behavior and consistent with other statistical visualization packages.   \nsymstr, optional\n\n\nThe default symbol for flier points. An empty string ('') hides the fliers. If None, then the fliers default to 'b+'. More control is provided by the flierprops parameter.  \nvertbool, default: True\n\n\nIf True, draws vertical boxes. If False, draw horizontal boxes.  \nwhisfloat or (float, float), default: 1.5\n\n\nThe position of the whiskers. If a float, the lower whisker is at the lowest datum above Q1 - whis*(Q3-Q1), and the upper whisker at the highest datum below Q3 + whis*(Q3-Q1), where Q1 and Q3 are the first and third quartiles. The default value of whis = 1.5 corresponds to Tukey's original definition of boxplots. If a pair of floats, they indicate the percentiles at which to draw the whiskers (e.g., (5, 95)). In particular, setting this to (0, 100) results in whiskers covering the whole range of the data. In the edge case where Q1 == Q3, whis is automatically set to (0, 100) (cover the whole range of the data) if autorange is True. Beyond the whiskers, data are considered outliers and are plotted as individual points.  \nbootstrapint, optional\n\n\nSpecifies whether to bootstrap the confidence intervals around the median for notched boxplots. If bootstrap is None, no bootstrapping is performed, and notches are calculated using a Gaussian-based asymptotic approximation (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and Kendall and Stuart, 1967). Otherwise, bootstrap specifies the number of times to bootstrap the median to determine its 95% confidence intervals. Values between 1000 and 10000 are recommended.  \nusermedians1D array-like, optional\n\n\nA 1D array-like of length len(x). Each entry that is not None forces the value of the median for the corresponding dataset. For entries that are None, the medians are computed by Matplotlib as normal.  \nconf_intervalsarray-like, optional\n\n\nA 2D array-like of shape (len(x), 2). Each entry that is not None forces the location of the corresponding notch (which is only drawn if notch is True). For entries that are None, the notches are computed by the method specified by the other parameters (e.g., bootstrap).  \npositionsarray-like, optional\n\n\nThe positions of the boxes. The ticks and limits are automatically set to match the positions. Defaults to range(1, N+1) where N is the number of boxes to be drawn.  \nwidthsfloat or array-like\n\n\nThe widths of the boxes. The default is 0.5, or 0.15*(distance\nbetween extreme positions), if that is smaller.  \npatch_artistbool, default: False\n\n\nIf False produces boxes with the Line2D artist. Otherwise, boxes are drawn with Patch artists.  \nlabelssequence, optional\n\n\nLabels for each dataset (one per dataset).  \nmanage_ticksbool, default: True\n\n\nIf True, the tick locations and labels will be adjusted to match the boxplot positions.  \nautorangebool, default: False\n\n\nWhen True and the data are distributed such that the 25th and 75th percentiles are equal, whis is set to (0, 100) such that the whisker ends are at the minimum and maximum of the data.  \nmeanlinebool, default: False\n\n\nIf True (and showmeans is True), will try to render the mean as a line spanning the full width of the box according to meanprops (see below). Not recommended if shownotches is also True. Otherwise, means will be shown as points.  \nzorderfloat, default: Line2D.zorder = 2\n\n\nThe zorder of the boxplot.    Returns \n dict\n\nA dictionary mapping each component of the boxplot to a list of the Line2D instances created. That dictionary has the following keys (assuming vertical boxplots):  \nboxes: the main body of the boxplot showing the quartiles and the median's confidence intervals if enabled. \nmedians: horizontal lines at the median of each box. \nwhiskers: the vertical lines extending to the most extreme, non-outlier data points. \ncaps: the horizontal lines at the ends of the whiskers. \nfliers: points representing data that extend beyond the whiskers (fliers). \nmeans: points or lines representing the means.     Other Parameters \n \nshowcapsbool, default: True\n\n\nShow the caps on the ends of whiskers.  \nshowboxbool, default: True\n\n\nShow the central box.  \nshowfliersbool, default: True\n\n\nShow the outliers beyond the caps.  \nshowmeansbool, default: False\n\n\nShow the arithmetic means.  \ncappropsdict, default: None\n\n\nThe style of the caps.  \nboxpropsdict, default: None\n\n\nThe style of the box.  \nwhiskerpropsdict, default: None\n\n\nThe style of the whiskers.  \nflierpropsdict, default: None\n\n\nThe style of the fliers.  \nmedianpropsdict, default: None\n\n\nThe style of the median.  \nmeanpropsdict, default: None\n\n\nThe style of the mean.  \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).      See also  violinplot\n\nDraw an estimate of the probability density function.    \n  Examples using matplotlib.axes.Axes.boxplot\n \n   Box plots with custom fill colors   \n\n   Boxplots   \n\n   Boxplot Demo   \n\n   boxplot(X)   \n\n"}, {"name": "axes.Axes.broken_barh", "path": "_as_gen/matplotlib.axes.axes.broken_barh", "type": "axes", "text": "matplotlib.axes.Axes.broken_barh   Axes.broken_barh(xranges, yrange, *, data=None, **kwargs)[source]\n \nPlot a horizontal sequence of rectangles. A rectangle is drawn for each element of xranges. All rectangles have the same vertical position and size defined by yrange. This is a convenience function for instantiating a BrokenBarHCollection, adding it to the Axes and autoscaling the view.  Parameters \n \nxrangessequence of tuples (xmin, xwidth)\n\n\nThe x-positions and extends of the rectangles. For each tuple (xmin, xwidth) a rectangle is drawn from xmin to xmin + xwidth.  \nyrange(ymin, yheight)\n\n\nThe y-position and extend for all the rectangles.    Returns \n BrokenBarHCollection\n  Other Parameters \n \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).  \n**kwargsBrokenBarHCollection properties\n\n\nEach kwarg can be either a single argument applying to all rectangles, e.g.: facecolors='black'\n or a sequence of arguments over which is cycled, e.g.: facecolors=('black', 'blue')\n would create interleaving black and blue rectangles. Supported keywords:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha array-like or scalar or None  \nanimated bool  \nantialiased or aa or antialiaseds bool or list of bools  \narray array-like or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclim (vmin: float, vmax: float)  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncmap Colormap or str or None  \ncolor color or list of rgba tuples  \nedgecolor or ec or edgecolors color or list of colors or 'face'  \nfacecolor or facecolors or fc color or list of colors  \nfigure Figure  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or dashes or linestyles or ls str or tuple or list thereof  \nlinewidth or linewidths or lw float or list of floats  \nnorm Normalize or None  \noffset_transform Transform  \noffsets (N, 2) or (2,) array-like  \npath_effects AbstractPathEffect  \npaths list of array-like  \npicker None or bool or float or callable  \npickradius float  \nrasterized bool  \nsizes ndarray or None  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nurls list of str or None  \nverts list of array-like  \nverts_and_codes unknown  \nvisible bool  \nzorder float       \n  Examples using matplotlib.axes.Axes.broken_barh\n \n   Broken Barh   \n\n"}, {"name": "axes.Axes.bxp", "path": "_as_gen/matplotlib.axes.axes.bxp", "type": "axes", "text": "matplotlib.axes.Axes.bxp   Axes.bxp(bxpstats, positions=None, widths=None, vert=True, patch_artist=False, shownotches=False, showmeans=False, showcaps=True, showbox=True, showfliers=True, boxprops=None, whiskerprops=None, flierprops=None, medianprops=None, capprops=None, meanprops=None, meanline=False, manage_ticks=True, zorder=None)[source]\n \nDrawing function for box and whisker plots. Make a box and whisker plot for each column of x or each vector in sequence x. The box extends from the lower to upper quartile values of the data, with a line at the median. The whiskers extend from the box to show the range of the data. Flier points are those past the end of the whiskers.  Parameters \n \nbxpstatslist of dicts\n\n\nA list of dictionaries containing stats for each boxplot. Required keys are:  \nmed: Median (scalar). \nq1, q3: First & third quartiles (scalars). \nwhislo, whishi: Lower & upper whisker positions (scalars).  Optional keys are:  \nmean: Mean (scalar). Needed if showmeans=True. \nfliers: Data beyond the whiskers (array-like). Needed if showfliers=True. \ncilo, cihi: Lower & upper confidence intervals about the median. Needed if shownotches=True. \nlabel: Name of the dataset (str). If available, this will be used a tick label for the boxplot   \npositionsarray-like, default: [1, 2, ..., n]\n\n\nThe positions of the boxes. The ticks and limits are automatically set to match the positions.  \nwidthsfloat or array-like, default: None\n\n\nThe widths of the boxes. The default is clip(0.15*(distance between extreme positions), 0.15, 0.5).  \nvertbool, default: True\n\n\nIf True (default), makes the boxes vertical. If False, makes horizontal boxes.  \npatch_artistbool, default: False\n\n\nIf False produces boxes with the Line2D artist. If True produces boxes with the Patch artist.  \nshownotches, showmeans, showcaps, showbox, showfliersbool\n\n\nWhether to draw the CI notches, the mean value (both default to False), the caps, the box, and the fliers (all three default to True).  \nboxprops, whiskerprops, capprops, flierprops, medianprops, meanpropsdict, optional\n\n\nArtist properties for the boxes, whiskers, caps, fliers, medians, and means.  \nmeanlinebool, default: False\n\n\nIf True (and showmeans is True), will try to render the mean as a line spanning the full width of the box according to meanprops. Not recommended if shownotches is also True. Otherwise, means will be shown as points.  \nmanage_ticksbool, default: True\n\n\nIf True, the tick locations and labels will be adjusted to match the boxplot positions.  \nzorderfloat, default: Line2D.zorder = 2\n\n\nThe zorder of the resulting boxplot.    Returns \n dict\n\nA dictionary mapping each component of the boxplot to a list of the Line2D instances created. That dictionary has the following keys (assuming vertical boxplots):  \nboxes: main bodies of the boxplot showing the quartiles, and the median's confidence intervals if enabled. \nmedians: horizontal lines at the median of each box. \nwhiskers: vertical lines up to the last non-outlier data. \ncaps: horizontal lines at the ends of the whiskers. \nfliers: points representing data beyond the whiskers (fliers). \nmeans: points or lines representing the means.      Examples (Source code, png, pdf)    (png, pdf)    \n\n"}, {"name": "axes.Axes.can_pan", "path": "_as_gen/matplotlib.axes.axes.can_pan", "type": "axes", "text": "matplotlib.axes.Axes.can_pan   Axes.can_pan()[source]\n \nReturn whether this Axes supports any pan/zoom button functionality. \n\n"}, {"name": "axes.Axes.can_zoom", "path": "_as_gen/matplotlib.axes.axes.can_zoom", "type": "axes", "text": "matplotlib.axes.Axes.can_zoom   Axes.can_zoom()[source]\n \nReturn whether this Axes supports the zoom box button functionality. \n\n"}, {"name": "axes.Axes.cla", "path": "_as_gen/matplotlib.axes.axes.cla", "type": "axes", "text": "matplotlib.axes.Axes.cla   Axes.cla()[source]\n \nClear the Axes. \n  Examples using matplotlib.axes.Axes.cla\n \n   pyplot animation   \n\n   Data Browser   \n\n"}, {"name": "axes.Axes.clabel", "path": "_as_gen/matplotlib.axes.axes.clabel", "type": "axes", "text": "matplotlib.axes.Axes.clabel   Axes.clabel(CS, levels=None, **kwargs)[source]\n \nLabel a contour plot. Adds labels to line contours in given ContourSet.  Parameters \n \nCSContourSet instance\n\n\nLine contours to label.  \nlevelsarray-like, optional\n\n\nA list of level values, that should be labeled. The list must be a subset of CS.levels. If not given, all levels are labeled.  **kwargs\n\nAll other parameters are documented in clabel.     \n  Examples using matplotlib.axes.Axes.clabel\n \n   Contour Demo   \n\n   Contour Label Demo   \n\n   Contourf Demo   \n\n   Contouring the solution space of optimizations   \n\n   Patheffect Demo   \n\n   TickedStroke patheffect   \n\n"}, {"name": "axes.Axes.clear", "path": "_as_gen/matplotlib.axes.axes.clear", "type": "axes", "text": "matplotlib.axes.Axes.clear   Axes.clear()[source]\n \nClear the Axes. \n\n"}, {"name": "axes.Axes.cohere", "path": "_as_gen/matplotlib.axes.axes.cohere", "type": "axes", "text": "matplotlib.axes.Axes.cohere   Axes.cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend=<function detrend_none>, window=<function window_hanning>, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, *, data=None, **kwargs)[source]\n \nPlot the coherence between x and y. Plot the coherence between x and y. Coherence is the normalized cross spectral density:  \\[C_{xy} = \\frac{|P_{xy}|^2}{P_{xx}P_{yy}}\\]  Parameters \n \nFsfloat, default: 2\n\n\nThe sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.  \nwindowcallable or ndarray, default: window_hanning\n\n\nA function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.  \nsides{'default', 'onesided', 'twosided'}, optional\n\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.  \npad_toint, optional\n\n\nThe number of points to which the data segment is padded when performing the FFT. This can be different from NFFT, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to NFFT  \nNFFTint, default: 256\n\n\nThe number of data points used in each block for the FFT. A power 2 is most efficient. This should NOT be used to get zero padding, or the scaling of the result will be incorrect; use pad_to for this instead.  \ndetrend{'none', 'mean', 'linear'} or callable, default: 'none'\n\n\nThe function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the detrend parameter is a vector, in Matplotlib it is a function. The mlab module defines detrend_none, detrend_mean, and detrend_linear, but you can use a custom function as well. You can also use a string to choose one of the functions: 'none' calls detrend_none. 'mean' calls detrend_mean. 'linear' calls detrend_linear.  \nscale_by_freqbool, default: True\n\n\nWhether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.  \nnoverlapint, default: 0 (no overlap)\n\n\nThe number of points of overlap between blocks.  \nFcint, default: 0\n\n\nThe center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.    Returns \n \nCxy1-D array\n\n\nThe coherence vector.  \nfreqs1-D array\n\n\nThe frequencies for the elements in Cxy.    Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, y  **kwargs\n\nKeyword arguments control the Line2D properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float       References Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John Wiley & Sons (1986) \n\n"}, {"name": "axes.Axes.contains", "path": "_as_gen/matplotlib.axes.axes.contains", "type": "axes", "text": "matplotlib.axes.Axes.contains   Axes.contains(mouseevent)[source]\n \nTest whether the artist contains the mouse event.  Parameters \n \nmouseeventmatplotlib.backend_bases.MouseEvent\n\n  Returns \n \ncontainsbool\n\n\nWhether any values are within the radius.  \ndetailsdict\n\n\nAn artist-specific dictionary of details of the event context, such as which points are contained in the pick radius. See the individual Artist subclasses for details.     \n\n"}, {"name": "axes.Axes.contains_point", "path": "_as_gen/matplotlib.axes.axes.contains_point", "type": "axes", "text": "matplotlib.axes.Axes.contains_point   Axes.contains_point(point)[source]\n \nReturn whether point (pair of pixel coordinates) is inside the axes patch. \n\n"}, {"name": "axes.Axes.contour", "path": "_as_gen/matplotlib.axes.axes.contour", "type": "axes", "text": "matplotlib.axes.Axes.contour   Axes.contour(*args, data=None, **kwargs)[source]\n \nPlot contour lines. Call signature: contour([X, Y,] Z, [levels], **kwargs)\n contour and contourf draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.  Parameters \n \nX, Yarray-like, optional\n\n\nThe coordinates of the values in Z. X and Y must both be 2D with the same shape as Z (e.g. created via numpy.meshgrid), or they must both be 1-D such that len(X) == N is the number of columns in Z and len(Y) == M is the number of rows in Z. X and Y must both be ordered monotonically. If not given, they are assumed to be integer indices, i.e. X = range(N), Y = range(M).  \nZ(M, N) array-like\n\n\nThe height values over which the contour is drawn.  \nlevelsint or array-like, optional\n\n\nDetermines the number and positions of the contour lines / regions. If an int n, use MaxNLocator, which tries to automatically choose no more than n+1 \"nice\" contour levels between vmin and vmax. If array-like, draw contour lines at the specified levels. The values must be in increasing order.    Returns \n QuadContourSet\n  Other Parameters \n \ncorner_maskbool, default: rcParams[\"contour.corner_mask\"] (default: True)\n\n\nEnable/disable corner masking, which only has an effect if Z is a masked array. If False, any quad touching a masked point is masked out. If True, only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual.  \ncolorscolor string or sequence of colors, optional\n\n\nThe colors of the levels, i.e. the lines for contour and the areas for contourf. The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated. As a shortcut, single color strings may be used in place of one-element lists, i.e. 'red' instead of ['red'] to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors. By default (value None), the colormap specified by cmap will be used.  \nalphafloat, default: 1\n\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).  \ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nA Colormap instance or registered colormap name. The colormap maps the level values to colors. If both colors and cmap are given, an error is raised.  \nnormNormalize, optional\n\n\nIf a colormap is used, the Normalize instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used.  \nvmin, vmaxfloat, optional\n\n\nIf not None, either or both of these values will be supplied to the Normalize instance, overriding the default color scaling based on levels.  \norigin{None, 'upper', 'lower', 'image'}, default: None\n\n\nDetermines the orientation and exact position of Z by specifying the position of Z[0, 0]. This is only relevant, if X, Y are not given.  \nNone: Z[0, 0] is at X=0, Y=0 in the lower left corner. 'lower': Z[0, 0] is at X=0.5, Y=0.5 in the lower left corner. 'upper': Z[0, 0] is at X=N+0.5, Y=0.5 in the upper left corner. 'image': Use the value from rcParams[\"image.origin\"] (default: 'upper').   \nextent(x0, x1, y0, y1), optional\n\n\nIf origin is not None, then extent is interpreted as in imshow: it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If origin is None, then (x0, y0) is the position of Z[0, 0], and (x1, y1) is the position of Z[-1, -1]. This argument is ignored if X and Y are specified in the call to contour.  \nlocatorticker.Locator subclass, optional\n\n\nThe locator is used to determine the contour levels if they are not given explicitly via levels. Defaults to MaxNLocator.  \nextend{'neither', 'both', 'min', 'max'}, default: 'neither'\n\n\nDetermines the contourf-coloring of values that are outside the levels range. If 'neither', values outside the levels range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the levels range. Values below min(levels) and above max(levels) are mapped to the under/over values of the Colormap. Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using Colormap.set_under and Colormap.set_over.  Note An existing QuadContourSet does not get notified if properties of its colormap are changed. Therefore, an explicit call QuadContourSet.changed() is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the QuadContourSet because it internally calls QuadContourSet.changed().  Example: x = np.arange(1, 10)\ny = x.reshape(-1, 1)\nh = x * y\n\ncs = plt.contourf(h, levels=[10, 30, 50],\n    colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')\ncs.cmap.set_over('red')\ncs.cmap.set_under('blue')\ncs.changed()\n  \nxunits, yunitsregistered units, optional\n\n\nOverride axis units by specifying an instance of a matplotlib.units.ConversionInterface.  \nantialiasedbool, optional\n\n\nEnable antialiasing, overriding the defaults. For filled contours, the default is True. For line contours, it is taken from rcParams[\"lines.antialiased\"] (default: True).  \nnchunkint >= 0, optional\n\n\nIf 0, no subdivision of the domain. Specify a positive integer to divide the domain into subdomains of nchunk by nchunk quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM. It can however introduce rendering artifacts at chunk boundaries depending on the backend, the antialiased flag and value of alpha.  \nlinewidthsfloat or array-like, default: rcParams[\"contour.linewidth\"] (default: None)\n\n\nOnly applies to contour. The line width of the contour lines. If a number, all levels will be plotted with this linewidth. If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified. If None, this falls back to rcParams[\"lines.linewidth\"] (default: 1.5).  \nlinestyles{None, 'solid', 'dashed', 'dashdot', 'dotted'}, optional\n\n\nOnly applies to contour. If linestyles is None, the default is 'solid' unless the lines are monochrome. In that case, negative contours will take their linestyle from rcParams[\"contour.negative_linestyle\"] (default: 'dashed') setting. linestyles can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.  \nhatcheslist[str], optional\n\n\nOnly applies to contourf. A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only.  \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).     Notes  \ncontourf differs from the MATLAB version in that it does not draw the polygon edges. To draw edges, add line contours with calls to contour. \ncontourf fills intervals that are closed at the top; that is, for boundaries z1 and z2, the filled region is: z1 < Z <= z2\n except for the lowest interval, which is closed on both sides (i.e. it includes the lowest value).  \ncontour and contourf use a marching squares algorithm to compute contour locations. More information can be found in the source src/_contour.h.  \n  Examples using matplotlib.axes.Axes.contour\n \n   Contour Corner Mask   \n\n   Contour Demo   \n\n   Contour Label Demo   \n\n   Contourf Demo   \n\n   Contourf Hatching   \n\n   Contouring the solution space of optimizations   \n\n   Blend transparency with color in 2D images   \n\n   Contour plot of irregularly spaced data   \n\n   Patheffect Demo   \n\n   TickedStroke patheffect   \n\n   Demonstrates plotting contour (level) curves in 3D   \n\n   Demonstrates plotting contour (level) curves in 3D using the extend3d option   \n\n   Projecting contour profiles onto a graph   \n\n   contour(X, Y, Z)   \n\n"}, {"name": "axes.Axes.contourf", "path": "_as_gen/matplotlib.axes.axes.contourf", "type": "axes", "text": "matplotlib.axes.Axes.contourf   Axes.contourf(*args, data=None, **kwargs)[source]\n \nPlot filled contours. Call signature: contourf([X, Y,] Z, [levels], **kwargs)\n contour and contourf draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.  Parameters \n \nX, Yarray-like, optional\n\n\nThe coordinates of the values in Z. X and Y must both be 2D with the same shape as Z (e.g. created via numpy.meshgrid), or they must both be 1-D such that len(X) == N is the number of columns in Z and len(Y) == M is the number of rows in Z. X and Y must both be ordered monotonically. If not given, they are assumed to be integer indices, i.e. X = range(N), Y = range(M).  \nZ(M, N) array-like\n\n\nThe height values over which the contour is drawn.  \nlevelsint or array-like, optional\n\n\nDetermines the number and positions of the contour lines / regions. If an int n, use MaxNLocator, which tries to automatically choose no more than n+1 \"nice\" contour levels between vmin and vmax. If array-like, draw contour lines at the specified levels. The values must be in increasing order.    Returns \n QuadContourSet\n  Other Parameters \n \ncorner_maskbool, default: rcParams[\"contour.corner_mask\"] (default: True)\n\n\nEnable/disable corner masking, which only has an effect if Z is a masked array. If False, any quad touching a masked point is masked out. If True, only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual.  \ncolorscolor string or sequence of colors, optional\n\n\nThe colors of the levels, i.e. the lines for contour and the areas for contourf. The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated. As a shortcut, single color strings may be used in place of one-element lists, i.e. 'red' instead of ['red'] to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors. By default (value None), the colormap specified by cmap will be used.  \nalphafloat, default: 1\n\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).  \ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nA Colormap instance or registered colormap name. The colormap maps the level values to colors. If both colors and cmap are given, an error is raised.  \nnormNormalize, optional\n\n\nIf a colormap is used, the Normalize instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used.  \nvmin, vmaxfloat, optional\n\n\nIf not None, either or both of these values will be supplied to the Normalize instance, overriding the default color scaling based on levels.  \norigin{None, 'upper', 'lower', 'image'}, default: None\n\n\nDetermines the orientation and exact position of Z by specifying the position of Z[0, 0]. This is only relevant, if X, Y are not given.  \nNone: Z[0, 0] is at X=0, Y=0 in the lower left corner. 'lower': Z[0, 0] is at X=0.5, Y=0.5 in the lower left corner. 'upper': Z[0, 0] is at X=N+0.5, Y=0.5 in the upper left corner. 'image': Use the value from rcParams[\"image.origin\"] (default: 'upper').   \nextent(x0, x1, y0, y1), optional\n\n\nIf origin is not None, then extent is interpreted as in imshow: it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If origin is None, then (x0, y0) is the position of Z[0, 0], and (x1, y1) is the position of Z[-1, -1]. This argument is ignored if X and Y are specified in the call to contour.  \nlocatorticker.Locator subclass, optional\n\n\nThe locator is used to determine the contour levels if they are not given explicitly via levels. Defaults to MaxNLocator.  \nextend{'neither', 'both', 'min', 'max'}, default: 'neither'\n\n\nDetermines the contourf-coloring of values that are outside the levels range. If 'neither', values outside the levels range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the levels range. Values below min(levels) and above max(levels) are mapped to the under/over values of the Colormap. Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using Colormap.set_under and Colormap.set_over.  Note An existing QuadContourSet does not get notified if properties of its colormap are changed. Therefore, an explicit call QuadContourSet.changed() is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the QuadContourSet because it internally calls QuadContourSet.changed().  Example: x = np.arange(1, 10)\ny = x.reshape(-1, 1)\nh = x * y\n\ncs = plt.contourf(h, levels=[10, 30, 50],\n    colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')\ncs.cmap.set_over('red')\ncs.cmap.set_under('blue')\ncs.changed()\n  \nxunits, yunitsregistered units, optional\n\n\nOverride axis units by specifying an instance of a matplotlib.units.ConversionInterface.  \nantialiasedbool, optional\n\n\nEnable antialiasing, overriding the defaults. For filled contours, the default is True. For line contours, it is taken from rcParams[\"lines.antialiased\"] (default: True).  \nnchunkint >= 0, optional\n\n\nIf 0, no subdivision of the domain. Specify a positive integer to divide the domain into subdomains of nchunk by nchunk quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM. It can however introduce rendering artifacts at chunk boundaries depending on the backend, the antialiased flag and value of alpha.  \nlinewidthsfloat or array-like, default: rcParams[\"contour.linewidth\"] (default: None)\n\n\nOnly applies to contour. The line width of the contour lines. If a number, all levels will be plotted with this linewidth. If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified. If None, this falls back to rcParams[\"lines.linewidth\"] (default: 1.5).  \nlinestyles{None, 'solid', 'dashed', 'dashdot', 'dotted'}, optional\n\n\nOnly applies to contour. If linestyles is None, the default is 'solid' unless the lines are monochrome. In that case, negative contours will take their linestyle from rcParams[\"contour.negative_linestyle\"] (default: 'dashed') setting. linestyles can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.  \nhatcheslist[str], optional\n\n\nOnly applies to contourf. A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only.  \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).     Notes  \ncontourf differs from the MATLAB version in that it does not draw the polygon edges. To draw edges, add line contours with calls to contour. \ncontourf fills intervals that are closed at the top; that is, for boundaries z1 and z2, the filled region is: z1 < Z <= z2\n except for the lowest interval, which is closed on both sides (i.e. it includes the lowest value).  \ncontour and contourf use a marching squares algorithm to compute contour locations. More information can be found in the source src/_contour.h.  \n  Examples using matplotlib.axes.Axes.contourf\n \n   Contour Corner Mask   \n\n   Contourf Demo   \n\n   Contourf Hatching   \n\n   Contourf and log color scale   \n\n   Contour plot of irregularly spaced data   \n\n   pcolormesh   \n\n   Frontpage contour example   \n\n   3D box surface plot   \n\n   Filled contours   \n\n   Projecting filled contour onto a graph   \n\n   contourf(X, Y, Z)   \n\n"}, {"name": "axes.Axes.convert_xunits", "path": "_as_gen/matplotlib.axes.axes.convert_xunits", "type": "axes", "text": "matplotlib.axes.Axes.convert_xunits   Axes.convert_xunits(x)[source]\n \nConvert x using the unit type of the xaxis. If the artist is not in contained in an Axes or if the xaxis does not have units, x itself is returned. \n\n"}, {"name": "axes.Axes.convert_yunits", "path": "_as_gen/matplotlib.axes.axes.convert_yunits", "type": "axes", "text": "matplotlib.axes.Axes.convert_yunits   Axes.convert_yunits(y)[source]\n \nConvert y using the unit type of the yaxis. If the artist is not in contained in an Axes or if the yaxis does not have units, y itself is returned. \n\n"}, {"name": "axes.Axes.csd", "path": "_as_gen/matplotlib.axes.axes.csd", "type": "axes", "text": "matplotlib.axes.Axes.csd   Axes.csd(x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, *, data=None, **kwargs)[source]\n \nPlot the cross-spectral density. The cross spectral density \\(P_{xy}\\) by Welch's average periodogram method. The vectors x and y are divided into NFFT length segments. Each segment is detrended by function detrend and windowed by function window. noverlap gives the length of the overlap between segments. The product of the direct FFTs of x and y are averaged over each segment to compute \\(P_{xy}\\), with a scaling to correct for power loss due to windowing. If len(x) < NFFT or len(y) < NFFT, they will be zero padded to NFFT.  Parameters \n \nx, y1-D arrays or sequences\n\n\nArrays or sequences containing the data.  \nFsfloat, default: 2\n\n\nThe sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.  \nwindowcallable or ndarray, default: window_hanning\n\n\nA function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.  \nsides{'default', 'onesided', 'twosided'}, optional\n\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.  \npad_toint, optional\n\n\nThe number of points to which the data segment is padded when performing the FFT. This can be different from NFFT, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to NFFT  \nNFFTint, default: 256\n\n\nThe number of data points used in each block for the FFT. A power 2 is most efficient. This should NOT be used to get zero padding, or the scaling of the result will be incorrect; use pad_to for this instead.  \ndetrend{'none', 'mean', 'linear'} or callable, default: 'none'\n\n\nThe function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the detrend parameter is a vector, in Matplotlib it is a function. The mlab module defines detrend_none, detrend_mean, and detrend_linear, but you can use a custom function as well. You can also use a string to choose one of the functions: 'none' calls detrend_none. 'mean' calls detrend_mean. 'linear' calls detrend_linear.  \nscale_by_freqbool, default: True\n\n\nWhether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.  \nnoverlapint, default: 0 (no overlap)\n\n\nThe number of points of overlap between segments.  \nFcint, default: 0\n\n\nThe center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.  \nreturn_linebool, default: False\n\n\nWhether to include the line object plotted in the returned values.    Returns \n \nPxy1-D array\n\n\nThe values for the cross spectrum \\(P_{xy}\\) before scaling (complex valued).  \nfreqs1-D array\n\n\nThe frequencies corresponding to the elements in Pxy.  \nlineLine2D\n\n\nThe line created by this function. Only returned if return_line is True.    Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, y  **kwargs\n\nKeyword arguments control the Line2D properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float        See also  psd\n\nis equivalent to setting y = x.    Notes For plotting, the power is plotted as \\(10 \\log_{10}(P_{xy})\\) for decibels, though \\(P_{xy}\\) itself is returned. References Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John Wiley & Sons (1986) \n  Examples using matplotlib.axes.Axes.csd\n \n   CSD Demo   \n\n"}, {"name": "axes.Axes.drag_pan", "path": "_as_gen/matplotlib.axes.axes.drag_pan", "type": "axes", "text": "matplotlib.axes.Axes.drag_pan   Axes.drag_pan(button, key, x, y)[source]\n \nCalled when the mouse moves during a pan operation.  Parameters \n \nbuttonMouseButton\n\n\nThe pressed mouse button.  \nkeystr or None\n\n\nThe pressed key, if any.  \nx, yfloat\n\n\nThe mouse coordinates in display coords.     Notes This is intended to be overridden by new projection types. \n\n"}, {"name": "axes.Axes.draw", "path": "_as_gen/matplotlib.axes.axes.draw", "type": "axes", "text": "matplotlib.axes.Axes.draw   Axes.draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n\n"}, {"name": "axes.Axes.draw_artist", "path": "_as_gen/matplotlib.axes.axes.draw_artist", "type": "axes", "text": "matplotlib.axes.Axes.draw_artist   Axes.draw_artist(a)[source]\n \nEfficiently redraw a single artist. This method can only be used after an initial draw of the figure, because that creates and caches the renderer needed here. \n  Examples using matplotlib.axes.Axes.draw_artist\n \n   Faster rendering by using blitting   \n\n"}, {"name": "axes.Axes.end_pan", "path": "_as_gen/matplotlib.axes.axes.end_pan", "type": "axes", "text": "matplotlib.axes.Axes.end_pan   Axes.end_pan()[source]\n \nCalled when a pan operation completes (when the mouse button is up.) Notes This is intended to be overridden by new projection types. \n\n"}, {"name": "axes.Axes.errorbar", "path": "_as_gen/matplotlib.axes.axes.errorbar", "type": "axes", "text": "matplotlib.axes.Axes.errorbar   Axes.errorbar(x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None, capsize=None, barsabove=False, lolims=False, uplims=False, xlolims=False, xuplims=False, errorevery=1, capthick=None, *, data=None, **kwargs)[source]\n \nPlot y versus x as lines and/or markers with attached errorbars. x, y define the data locations, xerr, yerr define the errorbar sizes. By default, this draws the data markers/lines as well the errorbars. Use fmt='none' to draw errorbars without any data markers.  Parameters \n \nx, yfloat or array-like\n\n\nThe data positions.  \nxerr, yerrfloat or array-like, shape(N,) or shape(2, N), optional\n\n\nThe errorbar sizes:  scalar: Symmetric +/- values for all data points. shape(N,): Symmetric +/-values for each data point. shape(2, N): Separate - and + values for each bar. First row contains the lower errors, the second row contains the upper errors. \nNone: No errorbar.  Note that all error arrays should have positive values. See Different ways of specifying error bars for an example on the usage of xerr and yerr.  \nfmtstr, default: ''\n\n\nThe format for the data points / data lines. See plot for details. Use 'none' (case insensitive) to plot errorbars without any data markers.  \necolorcolor, default: None\n\n\nThe color of the errorbar lines. If None, use the color of the line connecting the markers.  \nelinewidthfloat, default: None\n\n\nThe linewidth of the errorbar lines. If None, the linewidth of the current style is used.  \ncapsizefloat, default: rcParams[\"errorbar.capsize\"] (default: 0.0)\n\n\nThe length of the error bar caps in points.  \ncapthickfloat, default: None\n\n\nAn alias to the keyword argument markeredgewidth (a.k.a. mew). This setting is a more sensible name for the property that controls the thickness of the error bar cap in points. For backwards compatibility, if mew or markeredgewidth are given, then they will over-ride capthick. This may change in future releases.  \nbarsabovebool, default: False\n\n\nIf True, will plot the errorbars above the plot symbols. Default is below.  \nlolims, uplims, xlolims, xuplimsbool, default: False\n\n\nThese arguments can be used to indicate that a value gives only upper/lower limits. In that case a caret symbol is used to indicate this. lims-arguments may be scalars, or array-likes of the same length as xerr and yerr. To use limits with inverted axes, set_xlim or set_ylim must be called before errorbar(). Note the tricky parameter names: setting e.g. lolims to True means that the y-value is a lower limit of the True value, so, only an upward-pointing arrow will be drawn!  \nerroreveryint or (int, int), default: 1\n\n\ndraws error bars on a subset of the data. errorevery =N draws error bars on the points (x[::N], y[::N]). errorevery =(start, N) draws error bars on the points (x[start::N], y[start::N]). e.g. errorevery=(6, 3) adds error bars to the data at (x[6], x[9], x[12], x[15], ...). Used to avoid overlapping error bars when two series share x-axis values.    Returns \n ErrorbarContainer\n\nThe container contains:  plotline: Line2D instance of x, y plot markers and/or line. caplines: A tuple of Line2D instances of the error bar caps. barlinecols: A tuple of LineCollection with the horizontal and vertical error ranges.     Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, y, xerr, yerr  **kwargs\n\nAll other keyword arguments are passed on to the plot call drawing the markers. For example, this code makes big red squares with thick green edges: x, y, yerr = rand(3, 10)\nerrorbar(x, y, yerr, marker='s', mfc='red',\n         mec='green', ms=20, mew=4)\n where mfc, mec, ms and mew are aliases for the longer property names, markerfacecolor, markeredgecolor, markersize and markeredgewidth. Valid kwargs for the marker properties are Line2D properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float       \n  Examples using matplotlib.axes.Axes.errorbar\n \n   Errorbar subsampling   \n\n   Errorbar function   \n\n   Different ways of specifying error bars   \n\n   Including upper and lower limits in error bars   \n\n   Creating boxes from error bars using PatchCollection   \n\n   Legend Demo   \n\n   Parasite Simple2   \n\n   3D errorbars   \n\n   Log Demo   \n\n   errorbar(x, y, yerr, xerr)   \n\n"}, {"name": "axes.Axes.eventplot", "path": "_as_gen/matplotlib.axes.axes.eventplot", "type": "axes", "text": "matplotlib.axes.Axes.eventplot   Axes.eventplot(positions, orientation='horizontal', lineoffsets=1, linelengths=1, linewidths=None, colors=None, linestyles='solid', *, data=None, **kwargs)[source]\n \nPlot identical parallel lines at the given positions. This type of plot is commonly used in neuroscience for representing neural events, where it is usually called a spike raster, dot raster, or raster plot. However, it is useful in any situation where you wish to show the timing or position of multiple sets of discrete events, such as the arrival times of people to a business on each day of the month or the date of hurricanes each year of the last century.  Parameters \n \npositionsarray-like or list of array-like\n\n\nA 1D array-like defines the positions of one sequence of events. Multiple groups of events may be passed as a list of array-likes. Each group can be styled independently by passing lists of values to lineoffsets, linelengths, linewidths, colors and linestyles. Note that positions can be a 2D array, but in practice different event groups usually have different counts so that one will use a list of different-length arrays rather than a 2D array.  \norientation{'horizontal', 'vertical'}, default: 'horizontal'\n\n\nThe direction of the event sequence:  'horizontal': the events are arranged horizontally. The indicator lines are vertical. 'vertical': the events are arranged vertically. The indicator lines are horizontal.   \nlineoffsetsfloat or array-like, default: 1\n\n\nThe offset of the center of the lines from the origin, in the direction orthogonal to orientation. If positions is 2D, this can be a sequence with length matching the length of positions.  \nlinelengthsfloat or array-like, default: 1\n\n\nThe total height of the lines (i.e. the lines stretches from lineoffset - linelength/2 to lineoffset + linelength/2). If positions is 2D, this can be a sequence with length matching the length of positions.  \nlinewidthsfloat or array-like, default: rcParams[\"lines.linewidth\"] (default: 1.5)\n\n\nThe line width(s) of the event lines, in points. If positions is 2D, this can be a sequence with length matching the length of positions.  \ncolorscolor or list of colors, default: rcParams[\"lines.color\"] (default: 'C0')\n\n\nThe color(s) of the event lines. If positions is 2D, this can be a sequence with length matching the length of positions.  \nlinestylesstr or tuple or list of such values, default: 'solid'\n\n\nDefault is 'solid'. Valid strings are ['solid', 'dashed', 'dashdot', 'dotted', '-', '--', '-.', ':']. Dash tuples should be of the form: (offset, onoffseq),\n where onoffseq is an even length tuple of on and off ink in points. If positions is 2D, this can be a sequence with length matching the length of positions.  \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): positions, lineoffsets, linelengths, linewidths, colors, linestyles  **kwargs\n\nOther keyword arguments are line collection properties. See LineCollection for a list of the valid properties.    Returns \n list of EventCollection\n\n\nThe EventCollection that were added.     Notes For linelengths, linewidths, colors, and linestyles, if only a single value is given, that value is applied to all lines. If an array-like is given, it must have the same length as positions, and each value will be applied to the corresponding row of the array. Examples (Source code, png, pdf)    \n  Examples using matplotlib.axes.Axes.eventplot\n \n   eventplot(D)   \n\n"}, {"name": "axes.Axes.fill", "path": "_as_gen/matplotlib.axes.axes.fill", "type": "axes", "text": "matplotlib.axes.Axes.fill   Axes.fill(*args, data=None, **kwargs)[source]\n \nPlot filled polygons.  Parameters \n \n*argssequence of x, y, [color]\n\n\nEach polygon is defined by the lists of x and y positions of its nodes, optionally followed by a color specifier. See matplotlib.colors for supported color specifiers. The standard color cycle is used for polygons without a color specifier. You can plot multiple polygons by providing multiple x, y, [color] groups. For example, each of the following is legal: ax.fill(x, y)                    # a polygon with default color\nax.fill(x, y, \"b\")               # a blue polygon\nax.fill(x, y, x2, y2)            # two polygons\nax.fill(x, y, \"b\", x2, y2, \"r\")  # a blue and a red polygon\n  \ndataindexable object, optional\n\n\nAn object with labelled data. If given, provide the label names to plot in x and y, e.g.: ax.fill(\"time\", \"signal\",\n        data={\"time\": [0, 1, 2], \"signal\": [0, 1, 0]})\n    Returns \n list of Polygon\n\n  Other Parameters \n \n**kwargsPolygon properties\n\n   Notes Use fill_between() if you would like to fill the region between two curves. \n  Examples using matplotlib.axes.Axes.fill\n \n   Filled polygon   \n\n   Radar chart (aka spider or star chart)   \n\n   Ellipse With Units   \n\n"}, {"name": "axes.Axes.fill_between", "path": "_as_gen/matplotlib.axes.axes.fill_between", "type": "axes", "text": "matplotlib.axes.Axes.fill_between   Axes.fill_between(x, y1, y2=0, where=None, interpolate=False, step=None, *, data=None, **kwargs)[source]\n \nFill the area between two horizontal curves. The curves are defined by the points (x, y1) and (x, y2). This creates one or multiple polygons describing the filled area. You may exclude some horizontal sections from filling using where. By default, the edges connect the given points directly. Use step if the filling should be a step function, i.e. constant in between x.  Parameters \n \nxarray (length N)\n\n\nThe x coordinates of the nodes defining the curves.  \ny1array (length N) or scalar\n\n\nThe y coordinates of the nodes defining the first curve.  \ny2array (length N) or scalar, default: 0\n\n\nThe y coordinates of the nodes defining the second curve.  \nwherearray of bool (length N), optional\n\n\nDefine where to exclude some horizontal regions from being filled. The filled regions are defined by the coordinates x[where]. More precisely, fill between x[i] and x[i+1] if where[i] and where[i+1]. Note that this definition implies that an isolated True value between two False values in where will not result in filling. Both sides of the True position remain unfilled due to the adjacent False values.  \ninterpolatebool, default: False\n\n\nThis option is only relevant if where is used and the two curves are crossing each other. Semantically, where is often used for y1 > y2 or similar. By default, the nodes of the polygon defining the filled region will only be placed at the positions in the x array. Such a polygon cannot describe the above semantics close to the intersection. The x-sections containing the intersection are simply clipped. Setting interpolate to True will calculate the actual intersection point and extend the filled region up to this point.  \nstep{'pre', 'post', 'mid'}, optional\n\n\nDefine step if the filling should be a step function, i.e. constant in between x. The value determines where the step will occur:  'pre': The y value is continued constantly to the left from every x position, i.e. the interval (x[i-1], x[i]] has the value y[i]. 'post': The y value is continued constantly to the right from every x position, i.e. the interval [x[i], x[i+1]) has the value y[i]. 'mid': Steps occur half-way between the x positions.     Returns \n PolyCollection\n\nA PolyCollection containing the plotted polygons.    Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, y1, y2, where  **kwargs\n\nAll other keyword arguments are passed on to PolyCollection. They control the Polygon properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha array-like or scalar or None  \nanimated bool  \nantialiased or aa or antialiaseds bool or list of bools  \narray array-like or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclim (vmin: float, vmax: float)  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncmap Colormap or str or None  \ncolor color or list of rgba tuples  \nedgecolor or ec or edgecolors color or list of colors or 'face'  \nfacecolor or facecolors or fc color or list of colors  \nfigure Figure  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or dashes or linestyles or ls str or tuple or list thereof  \nlinewidth or linewidths or lw float or list of floats  \nnorm Normalize or None  \noffset_transform Transform  \noffsets (N, 2) or (2,) array-like  \npath_effects AbstractPathEffect  \npaths list of array-like  \npicker None or bool or float or callable  \npickradius float  \nrasterized bool  \nsizes ndarray or None  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nurls list of str or None  \nverts list of array-like  \nverts_and_codes unknown  \nvisible bool  \nzorder float        See also  fill_between\n\nFill between two sets of y-values.  fill_betweenx\n\nFill between two sets of x-values.    \n  Examples using matplotlib.axes.Axes.fill_between\n \n   Fill Between and Alpha   \n\n   Filling the area between lines   \n\n   fill_between(x, y1, y2)   \n\n"}, {"name": "axes.Axes.fill_betweenx", "path": "_as_gen/matplotlib.axes.axes.fill_betweenx", "type": "axes", "text": "matplotlib.axes.Axes.fill_betweenx   Axes.fill_betweenx(y, x1, x2=0, where=None, step=None, interpolate=False, *, data=None, **kwargs)[source]\n \nFill the area between two vertical curves. The curves are defined by the points (y, x1) and (y, x2). This creates one or multiple polygons describing the filled area. You may exclude some vertical sections from filling using where. By default, the edges connect the given points directly. Use step if the filling should be a step function, i.e. constant in between y.  Parameters \n \nyarray (length N)\n\n\nThe y coordinates of the nodes defining the curves.  \nx1array (length N) or scalar\n\n\nThe x coordinates of the nodes defining the first curve.  \nx2array (length N) or scalar, default: 0\n\n\nThe x coordinates of the nodes defining the second curve.  \nwherearray of bool (length N), optional\n\n\nDefine where to exclude some vertical regions from being filled. The filled regions are defined by the coordinates y[where]. More precisely, fill between y[i] and y[i+1] if where[i] and where[i+1]. Note that this definition implies that an isolated True value between two False values in where will not result in filling. Both sides of the True position remain unfilled due to the adjacent False values.  \ninterpolatebool, default: False\n\n\nThis option is only relevant if where is used and the two curves are crossing each other. Semantically, where is often used for x1 > x2 or similar. By default, the nodes of the polygon defining the filled region will only be placed at the positions in the y array. Such a polygon cannot describe the above semantics close to the intersection. The y-sections containing the intersection are simply clipped. Setting interpolate to True will calculate the actual intersection point and extend the filled region up to this point.  \nstep{'pre', 'post', 'mid'}, optional\n\n\nDefine step if the filling should be a step function, i.e. constant in between y. The value determines where the step will occur:  'pre': The y value is continued constantly to the left from every x position, i.e. the interval (x[i-1], x[i]] has the value y[i]. 'post': The y value is continued constantly to the right from every x position, i.e. the interval [x[i], x[i+1]) has the value y[i]. 'mid': Steps occur half-way between the x positions.     Returns \n PolyCollection\n\nA PolyCollection containing the plotted polygons.    Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): y, x1, x2, where  **kwargs\n\nAll other keyword arguments are passed on to PolyCollection. They control the Polygon properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha array-like or scalar or None  \nanimated bool  \nantialiased or aa or antialiaseds bool or list of bools  \narray array-like or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclim (vmin: float, vmax: float)  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncmap Colormap or str or None  \ncolor color or list of rgba tuples  \nedgecolor or ec or edgecolors color or list of colors or 'face'  \nfacecolor or facecolors or fc color or list of colors  \nfigure Figure  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or dashes or linestyles or ls str or tuple or list thereof  \nlinewidth or linewidths or lw float or list of floats  \nnorm Normalize or None  \noffset_transform Transform  \noffsets (N, 2) or (2,) array-like  \npath_effects AbstractPathEffect  \npaths list of array-like  \npicker None or bool or float or callable  \npickradius float  \nrasterized bool  \nsizes ndarray or None  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nurls list of str or None  \nverts list of array-like  \nverts_and_codes unknown  \nvisible bool  \nzorder float        See also  fill_between\n\nFill between two sets of y-values.  fill_betweenx\n\nFill between two sets of x-values.    \n  Examples using matplotlib.axes.Axes.fill_betweenx\n \n   Fill Betweenx Demo   \n\n"}, {"name": "axes.Axes.findobj", "path": "_as_gen/matplotlib.axes.axes.findobj", "type": "axes", "text": "matplotlib.axes.Axes.findobj   Axes.findobj(match=None, include_self=True)[source]\n \nFind artist objects. Recursively find all Artist instances contained in the artist.  Parameters \n match\n\nA filter criterion for the matches. This can be  \nNone: Return all objects contained in artist. A function with signature def match(artist: Artist) -> bool. The result will only contain artists for which the function returns True. A class instance: e.g., Line2D. The result will only contain artists of this class or its subclasses (isinstance check).   \ninclude_selfbool\n\n\nInclude self in the list to be checked for a match.    Returns \n list of Artist\n\n   \n\n"}, {"name": "axes.Axes.format_coord", "path": "_as_gen/matplotlib.axes.axes.format_coord", "type": "axes", "text": "matplotlib.axes.Axes.format_coord   Axes.format_coord(x, y)[source]\n \nReturn a format string formatting the x, y coordinates. \n\n"}, {"name": "axes.Axes.format_cursor_data", "path": "_as_gen/matplotlib.axes.axes.format_cursor_data", "type": "axes", "text": "matplotlib.axes.Axes.format_cursor_data   Axes.format_cursor_data(data)[source]\n \nReturn a string representation of data.  Note This method is intended to be overridden by artist subclasses. As an end-user of Matplotlib you will most likely not call this method yourself.  The default implementation converts ints and floats and arrays of ints and floats into a comma-separated string enclosed in square brackets, unless the artist has an associated colorbar, in which case scalar values are formatted using the colorbar's formatter.  See also  get_cursor_data\n  \n\n"}, {"name": "axes.Axes.format_xdata", "path": "_as_gen/matplotlib.axes.axes.format_xdata", "type": "axes", "text": "matplotlib.axes.Axes.format_xdata   Axes.format_xdata(x)[source]\n \nReturn x formatted as an x-value. This function will use the fmt_xdata attribute if it is not None, else will fall back on the xaxis major formatter. \n\n"}, {"name": "axes.Axes.format_ydata", "path": "_as_gen/matplotlib.axes.axes.format_ydata", "type": "axes", "text": "matplotlib.axes.Axes.format_ydata   Axes.format_ydata(y)[source]\n \nReturn y formatted as an y-value. This function will use the fmt_ydata attribute if it is not None, else will fall back on the yaxis major formatter. \n\n"}, {"name": "axes.Axes.get_adjustable", "path": "_as_gen/matplotlib.axes.axes.get_adjustable", "type": "axes", "text": "matplotlib.axes.Axes.get_adjustable   Axes.get_adjustable()[source]\n \nReturn whether the Axes will adjust its physical dimension ('box') or its data limits ('datalim') to achieve the desired aspect ratio.  See also  matplotlib.axes.Axes.set_adjustable\n\nSet how the Axes adjusts to achieve the required aspect ratio.  matplotlib.axes.Axes.set_aspect\n\nFor a description of aspect handling.    \n\n"}, {"name": "axes.Axes.get_anchor", "path": "_as_gen/matplotlib.axes.axes.get_anchor", "type": "axes", "text": "matplotlib.axes.Axes.get_anchor   Axes.get_anchor()[source]\n \nGet the anchor location.  See also  matplotlib.axes.Axes.set_anchor\n\nfor a description of the anchor.  matplotlib.axes.Axes.set_aspect\n\nfor a description of aspect handling.    \n\n"}, {"name": "axes.Axes.get_aspect", "path": "_as_gen/matplotlib.axes.axes.get_aspect", "type": "axes", "text": "matplotlib.axes.Axes.get_aspect   Axes.get_aspect()[source]\n \nReturn the aspect ratio of the axes scaling. This is either \"auto\" or a float giving the ratio of y/x-scale. \n\n"}, {"name": "axes.Axes.get_autoscale_on", "path": "_as_gen/matplotlib.axes.axes.get_autoscale_on", "type": "axes", "text": "matplotlib.axes.Axes.get_autoscale_on   Axes.get_autoscale_on()[source]\n \nReturn True if each axis is autoscaled, False otherwise. \n\n"}, {"name": "axes.Axes.get_autoscalex_on", "path": "_as_gen/matplotlib.axes.axes.get_autoscalex_on", "type": "axes", "text": "matplotlib.axes.Axes.get_autoscalex_on   Axes.get_autoscalex_on()[source]\n \nReturn whether the x-axis is autoscaled. \n\n"}, {"name": "axes.Axes.get_autoscaley_on", "path": "_as_gen/matplotlib.axes.axes.get_autoscaley_on", "type": "axes", "text": "matplotlib.axes.Axes.get_autoscaley_on   Axes.get_autoscaley_on()[source]\n \nReturn whether the y-axis is autoscaled. \n\n"}, {"name": "axes.Axes.get_axes_locator", "path": "_as_gen/matplotlib.axes.axes.get_axes_locator", "type": "axes", "text": "matplotlib.axes.Axes.get_axes_locator   Axes.get_axes_locator()[source]\n \nReturn the axes_locator. \n\n"}, {"name": "axes.Axes.get_axisbelow", "path": "_as_gen/matplotlib.axes.axes.get_axisbelow", "type": "axes", "text": "matplotlib.axes.Axes.get_axisbelow   Axes.get_axisbelow()[source]\n \nGet whether axis ticks and gridlines are above or below most artists.  Returns \n bool or 'line'\n    See also  set_axisbelow\n  \n\n"}, {"name": "axes.Axes.get_box_aspect", "path": "_as_gen/matplotlib.axes.axes.get_box_aspect", "type": "axes", "text": "matplotlib.axes.Axes.get_box_aspect   Axes.get_box_aspect()[source]\n \nReturn the Axes box aspect, i.e. the ratio of height to width. The box aspect is None (i.e. chosen depending on the available figure space) unless explicitly specified.  See also  matplotlib.axes.Axes.set_box_aspect\n\nfor a description of box aspect.  matplotlib.axes.Axes.set_aspect\n\nfor a description of aspect handling.    \n\n"}, {"name": "axes.Axes.get_children", "path": "_as_gen/matplotlib.axes.axes.get_children", "type": "axes", "text": "matplotlib.axes.Axes.get_children   Axes.get_children()[source]\n \nReturn a list of the child Artists of this Artist. \n\n"}, {"name": "axes.Axes.get_cursor_data", "path": "_as_gen/matplotlib.axes.axes.get_cursor_data", "type": "axes", "text": "matplotlib.axes.Axes.get_cursor_data   Axes.get_cursor_data(event)[source]\n \nReturn the cursor data for a given event.  Note This method is intended to be overridden by artist subclasses. As an end-user of Matplotlib you will most likely not call this method yourself.  Cursor data can be used by Artists to provide additional context information for a given event. The default implementation just returns None. Subclasses can override the method and return arbitrary data. However, when doing so, they must ensure that format_cursor_data can convert the data to a string representation. The only current use case is displaying the z-value of an AxesImage in the status bar of a plot window, while moving the mouse.  Parameters \n \neventmatplotlib.backend_bases.MouseEvent\n\n    See also  format_cursor_data\n  \n\n"}, {"name": "axes.Axes.get_data_ratio", "path": "_as_gen/matplotlib.axes.axes.get_data_ratio", "type": "axes", "text": "matplotlib.axes.Axes.get_data_ratio   Axes.get_data_ratio()[source]\n \nReturn the aspect ratio of the scaled data. Notes This method is intended to be overridden by new projection types. \n\n"}, {"name": "axes.Axes.get_default_bbox_extra_artists", "path": "_as_gen/matplotlib.axes.axes.get_default_bbox_extra_artists", "type": "axes", "text": "matplotlib.axes.Axes.get_default_bbox_extra_artists   Axes.get_default_bbox_extra_artists()[source]\n \nReturn a default list of artists that are used for the bounding box calculation. Artists are excluded either by not being visible or artist.set_in_layout(False). \n\n"}, {"name": "axes.Axes.get_facecolor", "path": "_as_gen/matplotlib.axes.axes.get_facecolor", "type": "axes", "text": "matplotlib.axes.Axes.get_facecolor   Axes.get_facecolor()[source]\n \nGet the facecolor of the Axes. \n\n"}, {"name": "axes.Axes.get_frame_on", "path": "_as_gen/matplotlib.axes.axes.get_frame_on", "type": "axes", "text": "matplotlib.axes.Axes.get_frame_on   Axes.get_frame_on()[source]\n \nGet whether the Axes rectangle patch is drawn. \n\n"}, {"name": "axes.Axes.get_images", "path": "_as_gen/matplotlib.axes.axes.get_images", "type": "axes", "text": "matplotlib.axes.Axes.get_images   Axes.get_images()[source]\n \nReturn a list of AxesImages contained by the Axes. \n\n"}, {"name": "axes.Axes.get_legend", "path": "_as_gen/matplotlib.axes.axes.get_legend", "type": "axes", "text": "matplotlib.axes.Axes.get_legend   Axes.get_legend()[source]\n \nReturn the Legend instance, or None if no legend is defined. \n\n"}, {"name": "axes.Axes.get_legend_handles_labels", "path": "_as_gen/matplotlib.axes.axes.get_legend_handles_labels", "type": "axes", "text": "matplotlib.axes.Axes.get_legend_handles_labels   Axes.get_legend_handles_labels(legend_handler_map=None)[source]\n \nReturn handles and labels for legend ax.legend() is equivalent to h, l = ax.get_legend_handles_labels()\nax.legend(h, l)\n \n  Examples using matplotlib.axes.Axes.get_legend_handles_labels\n \n   Legend guide   \n\n"}, {"name": "axes.Axes.get_lines", "path": "_as_gen/matplotlib.axes.axes.get_lines", "type": "axes", "text": "matplotlib.axes.Axes.get_lines   Axes.get_lines()[source]\n \nReturn a list of lines contained by the Axes. \n\n"}, {"name": "axes.Axes.get_navigate", "path": "_as_gen/matplotlib.axes.axes.get_navigate", "type": "axes", "text": "matplotlib.axes.Axes.get_navigate   Axes.get_navigate()[source]\n \nGet whether the Axes responds to navigation commands. \n\n"}, {"name": "axes.Axes.get_navigate_mode", "path": "_as_gen/matplotlib.axes.axes.get_navigate_mode", "type": "axes", "text": "matplotlib.axes.Axes.get_navigate_mode   Axes.get_navigate_mode()[source]\n \nGet the navigation toolbar button status: 'PAN', 'ZOOM', or None. \n\n"}, {"name": "axes.Axes.get_position", "path": "_as_gen/matplotlib.axes.axes.get_position", "type": "axes", "text": "matplotlib.axes.Axes.get_position   Axes.get_position(original=False)[source]\n \nReturn the position of the Axes within the figure as a Bbox.  Parameters \n \noriginalbool\n\n\nIf True, return the original position. Otherwise return the active position. For an explanation of the positions see set_position.    Returns \n Bbox\n   \n  Examples using matplotlib.axes.Axes.get_position\n \n   Contour Demo   \n\n"}, {"name": "axes.Axes.get_rasterization_zorder", "path": "_as_gen/matplotlib.axes.axes.get_rasterization_zorder", "type": "axes", "text": "matplotlib.axes.Axes.get_rasterization_zorder   Axes.get_rasterization_zorder()[source]\n \nReturn the zorder value below which artists will be rasterized. \n\n"}, {"name": "axes.Axes.get_renderer_cache", "path": "_as_gen/matplotlib.axes.axes.get_renderer_cache", "type": "axes", "text": "matplotlib.axes.Axes.get_renderer_cache   Axes.get_renderer_cache()[source]\n\n\n"}, {"name": "axes.Axes.get_shared_x_axes", "path": "_as_gen/matplotlib.axes.axes.get_shared_x_axes", "type": "axes", "text": "matplotlib.axes.Axes.get_shared_x_axes   Axes.get_shared_x_axes()[source]\n \nReturn a reference to the shared axes Grouper object for x axes. \n\n"}, {"name": "axes.Axes.get_shared_y_axes", "path": "_as_gen/matplotlib.axes.axes.get_shared_y_axes", "type": "axes", "text": "matplotlib.axes.Axes.get_shared_y_axes   Axes.get_shared_y_axes()[source]\n \nReturn a reference to the shared axes Grouper object for y axes. \n\n"}, {"name": "axes.Axes.get_tightbbox", "path": "_as_gen/matplotlib.axes.axes.get_tightbbox", "type": "axes", "text": "matplotlib.axes.Axes.get_tightbbox   Axes.get_tightbbox(renderer, call_axes_locator=True, bbox_extra_artists=None, *, for_layout_only=False)[source]\n \nReturn the tight bounding box of the axes, including axis and their decorators (xlabel, title, etc). Artists that have artist.set_in_layout(False) are not included in the bbox.  Parameters \n \nrendererRendererBase subclass\n\n\nrenderer that will be used to draw the figures (i.e. fig.canvas.get_renderer())  \nbbox_extra_artistslist of Artist or None\n\n\nList of artists to include in the tight bounding box. If None (default), then all artist children of the Axes are included in the tight bounding box.  \ncall_axes_locatorbool, default: True\n\n\nIf call_axes_locator is False, it does not call the _axes_locator attribute, which is necessary to get the correct bounding box. call_axes_locator=False can be used if the caller is only interested in the relative size of the tightbbox compared to the Axes bbox.  \nfor_layout_onlydefault: False\n\n\nThe bounding box will not include the x-extent of the title and the xlabel, or the y-extent of the ylabel.    Returns \n BboxBase\n\nBounding box in figure pixel coordinates.      See also  matplotlib.axes.Axes.get_window_extent\nmatplotlib.axis.Axis.get_tightbbox\nmatplotlib.spines.Spine.get_window_extent\n  \n\n"}, {"name": "axes.Axes.get_title", "path": "_as_gen/matplotlib.axes.axes.get_title", "type": "axes", "text": "matplotlib.axes.Axes.get_title   Axes.get_title(loc='center')[source]\n \nGet an Axes title. Get one of the three available Axes titles. The available titles are positioned above the Axes in the center, flush with the left edge, and flush with the right edge.  Parameters \n \nloc{'center', 'left', 'right'}, str, default: 'center'\n\n\nWhich title to return.    Returns \n str\n\nThe title text string.     \n\n"}, {"name": "axes.Axes.get_transformed_clip_path_and_affine", "path": "_as_gen/matplotlib.axes.axes.get_transformed_clip_path_and_affine", "type": "axes", "text": "matplotlib.axes.Axes.get_transformed_clip_path_and_affine   Axes.get_transformed_clip_path_and_affine()[source]\n \nReturn the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation. \n\n"}, {"name": "axes.Axes.get_window_extent", "path": "_as_gen/matplotlib.axes.axes.get_window_extent", "type": "axes", "text": "matplotlib.axes.Axes.get_window_extent   Axes.get_window_extent(*args, **kwargs)[source]\n \nReturn the Axes bounding box in display space; args and kwargs are empty. This bounding box does not include the spines, ticks, ticklables, or other labels. For a bounding box including these elements use get_tightbbox.  See also  matplotlib.axes.Axes.get_tightbbox\nmatplotlib.axis.Axis.get_tightbbox\nmatplotlib.spines.Spine.get_window_extent\n  \n\n"}, {"name": "axes.Axes.get_xaxis", "path": "_as_gen/matplotlib.axes.axes.get_xaxis", "type": "axes", "text": "matplotlib.axes.Axes.get_xaxis   Axes.get_xaxis()[source]\n \nReturn the XAxis instance. The use of this function is discouraged. You should instead directly access the attribute ax.xaxis. \n\n"}, {"name": "axes.Axes.get_xaxis_text1_transform", "path": "_as_gen/matplotlib.axes.axes.get_xaxis_text1_transform", "type": "axes", "text": "matplotlib.axes.Axes.get_xaxis_text1_transform   Axes.get_xaxis_text1_transform(pad_points)[source]\n \n Returns \n \ntransformTransform\n\n\nThe transform used for drawing x-axis labels, which will add pad_points of padding (in points) between the axis and the label. The x-direction is in data coordinates and the y-direction is in axis coordinates  \nvalign{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n\nThe text vertical alignment.  \nhalign{'center', 'left', 'right'}\n\n\nThe text horizontal alignment.     Notes This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations. \n\n"}, {"name": "axes.Axes.get_xaxis_text2_transform", "path": "_as_gen/matplotlib.axes.axes.get_xaxis_text2_transform", "type": "axes", "text": "matplotlib.axes.Axes.get_xaxis_text2_transform   Axes.get_xaxis_text2_transform(pad_points)[source]\n \n Returns \n \ntransformTransform\n\n\nThe transform used for drawing secondary x-axis labels, which will add pad_points of padding (in points) between the axis and the label. The x-direction is in data coordinates and the y-direction is in axis coordinates  \nvalign{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n\nThe text vertical alignment.  \nhalign{'center', 'left', 'right'}\n\n\nThe text horizontal alignment.     Notes This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations. \n\n"}, {"name": "axes.Axes.get_xaxis_transform", "path": "_as_gen/matplotlib.axes.axes.get_xaxis_transform", "type": "axes", "text": "matplotlib.axes.Axes.get_xaxis_transform   Axes.get_xaxis_transform(which='grid')[source]\n \nGet the transformation used for drawing x-axis labels, ticks and gridlines. The x-direction is in data coordinates and the y-direction is in axis coordinates.  Note This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.  \n  Examples using matplotlib.axes.Axes.get_xaxis_transform\n \n   Filling the area between lines   \n\n   hlines and vlines   \n\n   Boxplots   \n\n   Scale invariant angle label   \n\n   Centered spines with arrows   \n\n   Transformations Tutorial   \n\n"}, {"name": "axes.Axes.get_xbound", "path": "_as_gen/matplotlib.axes.axes.get_xbound", "type": "axes", "text": "matplotlib.axes.Axes.get_xbound   Axes.get_xbound()[source]\n \nReturn the lower and upper x-axis bounds, in increasing order.  See also  set_xbound\n\nget_xlim, set_xlim\n\n\ninvert_xaxis, xaxis_inverted\n\n  \n\n"}, {"name": "axes.Axes.get_xgridlines", "path": "_as_gen/matplotlib.axes.axes.get_xgridlines", "type": "axes", "text": "matplotlib.axes.Axes.get_xgridlines   Axes.get_xgridlines()[source]\n \nReturn the xaxis' grid lines as a list of Line2Ds. \n\n"}, {"name": "axes.Axes.get_xlabel", "path": "_as_gen/matplotlib.axes.axes.get_xlabel", "type": "axes", "text": "matplotlib.axes.Axes.get_xlabel   Axes.get_xlabel()[source]\n \nGet the xlabel text string. \n\n"}, {"name": "axes.Axes.get_xlim", "path": "_as_gen/matplotlib.axes.axes.get_xlim", "type": "axes", "text": "matplotlib.axes.Axes.get_xlim   Axes.get_xlim()[source]\n \nReturn the x-axis view limits.  Returns \n \nleft, right(float, float)\n\n\nThe current x-axis limits in data coordinates.      See also  set_xlim\n\nset_xbound, get_xbound\n\n\ninvert_xaxis, xaxis_inverted\n\n  Notes The x-axis may be inverted, in which case the left value will be greater than the right value. \n  Examples using matplotlib.axes.Axes.get_xlim\n \n   Decay   \n\n"}, {"name": "axes.Axes.get_xmajorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_xmajorticklabels", "type": "axes", "text": "matplotlib.axes.Axes.get_xmajorticklabels   Axes.get_xmajorticklabels()[source]\n \nReturn the xaxis' major tick labels, as a list of Text. \n\n"}, {"name": "axes.Axes.get_xminorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_xminorticklabels", "type": "axes", "text": "matplotlib.axes.Axes.get_xminorticklabels   Axes.get_xminorticklabels()[source]\n \nReturn the xaxis' minor tick labels, as a list of Text. \n\n"}, {"name": "axes.Axes.get_xscale", "path": "_as_gen/matplotlib.axes.axes.get_xscale", "type": "axes", "text": "matplotlib.axes.Axes.get_xscale   Axes.get_xscale()[source]\n \nReturn the xaxis' scale (as a str). \n\n"}, {"name": "axes.Axes.get_xticklabels", "path": "_as_gen/matplotlib.axes.axes.get_xticklabels", "type": "axes", "text": "matplotlib.axes.Axes.get_xticklabels   Axes.get_xticklabels(minor=False, which=None)[source]\n \nGet the xaxis' tick labels.  Parameters \n \nminorbool\n\n\nWhether to return the minor or the major ticklabels.  \nwhichNone, ('minor', 'major', 'both')\n\n\nOverrides minor. Selects which ticklabels to return    Returns \n list of Text\n\n   Notes The tick label strings are not populated until a draw method has been called. See also: draw and draw. \n  Examples using matplotlib.axes.Axes.get_xticklabels\n \n   Creating a timeline with lines, dates, and text   \n\n   Creating annotated heatmaps   \n\n   Aligning Labels   \n\n   Boxplots   \n\n   Date tick labels   \n\n   Formatting date ticks using ConciseDateFormatter   \n\n   Evans test   \n\n   The Lifecycle of a Plot   \n\n"}, {"name": "axes.Axes.get_xticklines", "path": "_as_gen/matplotlib.axes.axes.get_xticklines", "type": "axes", "text": "matplotlib.axes.Axes.get_xticklines   Axes.get_xticklines(minor=False)[source]\n \nReturn the xaxis' tick lines as a list of Line2Ds. \n\n"}, {"name": "axes.Axes.get_xticks", "path": "_as_gen/matplotlib.axes.axes.get_xticks", "type": "axes", "text": "matplotlib.axes.Axes.get_xticks   Axes.get_xticks(*, minor=False)[source]\n \nReturn the xaxis' tick locations in data coordinates. \n\n"}, {"name": "axes.Axes.get_yaxis", "path": "_as_gen/matplotlib.axes.axes.get_yaxis", "type": "axes", "text": "matplotlib.axes.Axes.get_yaxis   Axes.get_yaxis()[source]\n \nReturn the YAxis instance. The use of this function is discouraged. You should instead directly access the attribute ax.yaxis. \n\n"}, {"name": "axes.Axes.get_yaxis_text1_transform", "path": "_as_gen/matplotlib.axes.axes.get_yaxis_text1_transform", "type": "axes", "text": "matplotlib.axes.Axes.get_yaxis_text1_transform   Axes.get_yaxis_text1_transform(pad_points)[source]\n \n Returns \n \ntransformTransform\n\n\nThe transform used for drawing y-axis labels, which will add pad_points of padding (in points) between the axis and the label. The x-direction is in axis coordinates and the y-direction is in data coordinates  \nvalign{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n\nThe text vertical alignment.  \nhalign{'center', 'left', 'right'}\n\n\nThe text horizontal alignment.     Notes This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations. \n\n"}, {"name": "axes.Axes.get_yaxis_text2_transform", "path": "_as_gen/matplotlib.axes.axes.get_yaxis_text2_transform", "type": "axes", "text": "matplotlib.axes.Axes.get_yaxis_text2_transform   Axes.get_yaxis_text2_transform(pad_points)[source]\n \n Returns \n \ntransformTransform\n\n\nThe transform used for drawing secondart y-axis labels, which will add pad_points of padding (in points) between the axis and the label. The x-direction is in axis coordinates and the y-direction is in data coordinates  \nvalign{'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n\n\nThe text vertical alignment.  \nhalign{'center', 'left', 'right'}\n\n\nThe text horizontal alignment.     Notes This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations. \n\n"}, {"name": "axes.Axes.get_yaxis_transform", "path": "_as_gen/matplotlib.axes.axes.get_yaxis_transform", "type": "axes", "text": "matplotlib.axes.Axes.get_yaxis_transform   Axes.get_yaxis_transform(which='grid')[source]\n \nGet the transformation used for drawing y-axis labels, ticks and gridlines. The x-direction is in axis coordinates and the y-direction is in data coordinates.  Note This transformation is primarily used by the Axis class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.  \n  Examples using matplotlib.axes.Axes.get_yaxis_transform\n \n   Centered spines with arrows   \n\n   Connect Simple01   \n\n   Transformations Tutorial   \n\n"}, {"name": "axes.Axes.get_ybound", "path": "_as_gen/matplotlib.axes.axes.get_ybound", "type": "axes", "text": "matplotlib.axes.Axes.get_ybound   Axes.get_ybound()[source]\n \nReturn the lower and upper y-axis bounds, in increasing order.  See also  set_ybound\n\nget_ylim, set_ylim\n\n\ninvert_yaxis, yaxis_inverted\n\n  \n\n"}, {"name": "axes.Axes.get_ygridlines", "path": "_as_gen/matplotlib.axes.axes.get_ygridlines", "type": "axes", "text": "matplotlib.axes.Axes.get_ygridlines   Axes.get_ygridlines()[source]\n \nReturn the yaxis' grid lines as a list of Line2Ds. \n\n"}, {"name": "axes.Axes.get_ylabel", "path": "_as_gen/matplotlib.axes.axes.get_ylabel", "type": "axes", "text": "matplotlib.axes.Axes.get_ylabel   Axes.get_ylabel()[source]\n \nGet the ylabel text string. \n\n"}, {"name": "axes.Axes.get_ylim", "path": "_as_gen/matplotlib.axes.axes.get_ylim", "type": "axes", "text": "matplotlib.axes.Axes.get_ylim   Axes.get_ylim()[source]\n \nReturn the y-axis view limits.  Returns \n \nbottom, top(float, float)\n\n\nThe current y-axis limits in data coordinates.      See also  set_ylim\n\nset_ybound, get_ybound\n\n\ninvert_yaxis, yaxis_inverted\n\n  Notes The y-axis may be inverted, in which case the bottom value will be greater than the top value. \n  Examples using matplotlib.axes.Axes.get_ylim\n \n   Line, Poly and RegularPoly Collection with autoscaling   \n\n"}, {"name": "axes.Axes.get_ymajorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_ymajorticklabels", "type": "axes", "text": "matplotlib.axes.Axes.get_ymajorticklabels   Axes.get_ymajorticklabels()[source]\n \nReturn the yaxis' major tick labels, as a list of Text. \n\n"}, {"name": "axes.Axes.get_yminorticklabels", "path": "_as_gen/matplotlib.axes.axes.get_yminorticklabels", "type": "axes", "text": "matplotlib.axes.Axes.get_yminorticklabels   Axes.get_yminorticklabels()[source]\n \nReturn the yaxis' minor tick labels, as a list of Text. \n\n"}, {"name": "axes.Axes.get_yscale", "path": "_as_gen/matplotlib.axes.axes.get_yscale", "type": "axes", "text": "matplotlib.axes.Axes.get_yscale   Axes.get_yscale()[source]\n \nReturn the yaxis' scale (as a str). \n\n"}, {"name": "axes.Axes.get_yticklabels", "path": "_as_gen/matplotlib.axes.axes.get_yticklabels", "type": "axes", "text": "matplotlib.axes.Axes.get_yticklabels   Axes.get_yticklabels(minor=False, which=None)[source]\n \nGet the yaxis' tick labels.  Parameters \n \nminorbool\n\n\nWhether to return the minor or the major ticklabels.  \nwhichNone, ('minor', 'major', 'both')\n\n\nOverrides minor. Selects which ticklabels to return    Returns \n list of Text\n\n   Notes The tick label strings are not populated until a draw method has been called. See also: draw and draw. \n  Examples using matplotlib.axes.Axes.get_yticklabels\n \n   Fill Between and Alpha   \n\n   Programmatically controlling subplot adjustment   \n\n"}, {"name": "axes.Axes.get_yticklines", "path": "_as_gen/matplotlib.axes.axes.get_yticklines", "type": "axes", "text": "matplotlib.axes.Axes.get_yticklines   Axes.get_yticklines(minor=False)[source]\n \nReturn the yaxis' tick lines as a list of Line2Ds. \n\n"}, {"name": "axes.Axes.get_yticks", "path": "_as_gen/matplotlib.axes.axes.get_yticks", "type": "axes", "text": "matplotlib.axes.Axes.get_yticks   Axes.get_yticks(*, minor=False)[source]\n \nReturn the yaxis' tick locations in data coordinates. \n\n"}, {"name": "axes.Axes.grid", "path": "_as_gen/matplotlib.axes.axes.grid", "type": "axes", "text": "matplotlib.axes.Axes.grid   Axes.grid(visible=None, which='major', axis='both', **kwargs)[source]\n \nConfigure the grid lines.  Parameters \n \nvisiblebool or None, optional\n\n\nWhether to show the grid lines. If any kwargs are supplied, it is assumed you want the grid on and visible will be set to True. If visible is None and there are no kwargs, this toggles the visibility of the lines.  \nwhich{'major', 'minor', 'both'}, optional\n\n\nThe grid lines to apply the changes on.  \naxis{'both', 'x', 'y'}, optional\n\n\nThe axis to apply the changes on.  \n**kwargsLine2D properties\n\n\nDefine the line properties of the grid, e.g.: grid(color='r', linestyle='-', linewidth=2)\n Valid keyword arguments are:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float       Notes The axis is drawn as a unit, so the effective zorder for drawing the grid is determined by the zorder of each axis, not by the zorder of the Line2D objects comprising the grid. Therefore, to set grid zorder, use set_axisbelow or, for more control, call the set_zorder method of each axis. \n  Examples using matplotlib.axes.Axes.grid\n \n   Broken Barh   \n\n   CSD Demo   \n\n   Fill Between and Alpha   \n\n   Psd Demo   \n\n   Scatter Demo2   \n\n   Scatter plots with a legend   \n\n   Simple Plot   \n\n   Cross- and Auto-Correlation Demo   \n\n   Contour Corner Mask   \n\n   Creating annotated heatmaps   \n\n   Image Demo   \n\n   Watermark image   \n\n   Axes Props   \n\n   Figure labels: suptitle, supxlabel, supylabel   \n\n   Invert Axes   \n\n   Using histograms to plot a cumulative distribution   \n\n   Polar plot   \n\n   Date tick labels   \n\n   Multiline   \n\n   Text watermark   \n\n   PathPatch object   \n\n   Anatomy of a figure   \n\n   Bachelor's degrees by gender   \n\n   Decay   \n\n   The double pendulum problem   \n\n   Custom projection   \n\n   Patheffect Demo   \n\n   Pythonic Matplotlib   \n\n   2D and 3D Axes in same Figure   \n\n   Log Demo   \n\n   Log Axis   \n\n   Scales   \n\n   Symlog Demo   \n\n   Artist tests   \n\n   Basic Usage   \n\n"}, {"name": "axes.Axes.has_data", "path": "_as_gen/matplotlib.axes.axes.has_data", "type": "axes", "text": "matplotlib.axes.Axes.has_data   Axes.has_data()[source]\n \nReturn whether any artists have been added to the Axes. This should not be used to determine whether the dataLim need to be updated, and may not actually be useful for anything. \n\n"}, {"name": "axes.Axes.have_units", "path": "_as_gen/matplotlib.axes.axes.have_units", "type": "axes", "text": "matplotlib.axes.Axes.have_units   Axes.have_units()[source]\n \nReturn whether units are set on any axis. \n\n"}, {"name": "axes.Axes.hexbin", "path": "_as_gen/matplotlib.axes.axes.hexbin", "type": "axes", "text": "matplotlib.axes.Axes.hexbin   Axes.hexbin(x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', extent=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors='face', reduce_C_function=<function mean>, mincnt=None, marginals=False, *, data=None, **kwargs)[source]\n \nMake a 2D hexagonal binning plot of points x, y. If C is None, the value of the hexagon is determined by the number of points in the hexagon. Otherwise, C specifies values at the coordinate (x[i], y[i]). For each hexagon, these values are reduced using reduce_C_function.  Parameters \n \nx, yarray-like\n\n\nThe data positions. x and y must be of the same length.  \nCarray-like, optional\n\n\nIf given, these values are accumulated in the bins. Otherwise, every point has a value of 1. Must be of the same length as x and y.  \ngridsizeint or (int, int), default: 100\n\n\nIf a single int, the number of hexagons in the x-direction. The number of hexagons in the y-direction is chosen such that the hexagons are approximately regular. Alternatively, if a tuple (nx, ny), the number of hexagons in the x-direction and the y-direction.  \nbins'log' or int or sequence, default: None\n\n\nDiscretization of the hexagon values.  If None, no binning is applied; the color of each hexagon directly corresponds to its count value. If 'log', use a logarithmic scale for the colormap. Internally, \\(log_{10}(i+1)\\) is used to determine the hexagon color. This is equivalent to norm=LogNorm(). If an integer, divide the counts in the specified number of bins, and color the hexagons accordingly. If a sequence of values, the values of the lower bound of the bins to be used.   \nxscale{'linear', 'log'}, default: 'linear'\n\n\nUse a linear or log10 scale on the horizontal axis.  \nyscale{'linear', 'log'}, default: 'linear'\n\n\nUse a linear or log10 scale on the vertical axis.  \nmincntint > 0, default: None\n\n\nIf not None, only display cells with more than mincnt number of points in the cell.  \nmarginalsbool, default: False\n\n\nIf marginals is True, plot the marginal density as colormapped rectangles along the bottom of the x-axis and left of the y-axis.  \nextent4-tuple of float, default: None\n\n\nThe limits of the bins (xmin, xmax, ymin, ymax). The default assigns the limits based on gridsize, x, y, xscale and yscale. If xscale or yscale is set to 'log', the limits are expected to be the exponent for a power of 10. E.g. for x-limits of 1 and 50 in 'linear' scale and y-limits of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).    Returns \n PolyCollection\n\nA PolyCollection defining the hexagonal bins.  \nPolyCollection.get_offsets contains a Mx2 array containing the x, y positions of the M hexagon centers. \nPolyCollection.get_array contains the values of the M hexagons.  If marginals is True, horizontal bar and vertical bar (both PolyCollections) will be attached to the return collection as attributes hbar and vbar.    Other Parameters \n \ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nThe Colormap instance or registered colormap name used to map the bin values to colors.  \nnormNormalize, optional\n\n\nThe Normalize instance scales the bin values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling.  \nvmin, vmaxfloat, default: None\n\n\nThe colorbar range. If None, suitable min/max values are automatically chosen by the Normalize instance (defaults to the respective min/max values of the bins in case of the default linear scaling). It is an error to use vmin/vmax when norm is given.  \nalphafloat between 0 and 1, optional\n\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).  \nlinewidthsfloat, default: None\n\n\nIf None, defaults to 1.0.  \nedgecolors{'face', 'none', None} or color, default: 'face'\n\n\nThe color of the hexagon edges. Possible values are:  'face': Draw the edges in the same color as the fill color. 'none': No edges are drawn. This can sometimes lead to unsightly unpainted pixels between the hexagons. \nNone: Draw outlines in the default color. An explicit color.   \nreduce_C_functioncallable, default: numpy.mean\n\n\nThe function to aggregate C within the bins. It is ignored if C is not given. This must have the signature: def reduce_C_function(C: array) -> float\n Commonly used functions are:  \nnumpy.mean: average of the points \nnumpy.sum: integral of the point values \nnumpy.amax: value taken from the largest point   \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, y, C  \n**kwargsPolyCollection properties\n\n\nAll other keyword arguments are passed on to PolyCollection:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha array-like or scalar or None  \nanimated bool  \nantialiased or aa or antialiaseds bool or list of bools  \narray array-like or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclim (vmin: float, vmax: float)  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncmap Colormap or str or None  \ncolor color or list of rgba tuples  \nedgecolor or ec or edgecolors color or list of colors or 'face'  \nfacecolor or facecolors or fc color or list of colors  \nfigure Figure  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or dashes or linestyles or ls str or tuple or list thereof  \nlinewidth or linewidths or lw float or list of floats  \nnorm Normalize or None  \noffset_transform Transform  \noffsets (N, 2) or (2,) array-like  \npath_effects AbstractPathEffect  \npaths list of array-like  \npicker None or bool or float or callable  \npickradius float  \nrasterized bool  \nsizes ndarray or None  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nurls list of str or None  \nverts list of array-like  \nverts_and_codes unknown  \nvisible bool  \nzorder float        See also  hist2d\n\n2D histogram rectangular bins    \n  Examples using matplotlib.axes.Axes.hexbin\n \n   Hexagonal binned plot   \n\n   hexbin(x, y, C)   \n\n"}, {"name": "axes.Axes.hist", "path": "_as_gen/matplotlib.axes.axes.hist", "type": "axes", "text": "matplotlib.axes.Axes.hist   Axes.hist(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)[source]\n \nPlot a histogram. Compute and draw the histogram of x. The return value is a tuple (n, bins, patches) or ([n0, n1, ...], bins, [patches0, patches1, ...]) if the input contains multiple data. See the documentation of the weights parameter to draw a histogram of already-binned data. Multiple data can be provided via x as a list of datasets of potentially different length ([x0, x1, ...]), or as a 2D ndarray in which each column is a dataset. Note that the ndarray form is transposed relative to the list form. Masked arrays are not supported. The bins, range, weights, and density parameters behave as in numpy.histogram.  Parameters \n \nx(n,) array or sequence of (n,) arrays\n\n\nInput values, this takes either a single array or a sequence of arrays which are not required to be of the same length.  \nbinsint or sequence or str, default: rcParams[\"hist.bins\"] (default: 10)\n\n\nIf bins is an integer, it defines the number of equal-width bins in the range. If bins is a sequence, it defines the bin edges, including the left edge of the first bin and the right edge of the last bin; in this case, bins may be unequally spaced. All but the last (righthand-most) bin is half-open. In other words, if bins is: [1, 2, 3, 4]\n then the first bin is [1, 2) (including 1, but excluding 2) and the second [2, 3). The last bin, however, is [3, 4], which includes 4. If bins is a string, it is one of the binning strategies supported by numpy.histogram_bin_edges: 'auto', 'fd', 'doane', 'scott', 'stone', 'rice', 'sturges', or 'sqrt'.  \nrangetuple or None, default: None\n\n\nThe lower and upper range of the bins. Lower and upper outliers are ignored. If not provided, range is (x.min(), x.max()). Range has no effect if bins is a sequence. If bins is a sequence or range is specified, autoscaling is based on the specified bin range instead of the range of x.  \ndensitybool, default: False\n\n\nIf True, draw and return a probability density: each bin will display the bin's raw count divided by the total number of counts and the bin width (density = counts / (sum(counts) * np.diff(bins))), so that the area under the histogram integrates to 1 (np.sum(density * np.diff(bins)) == 1). If stacked is also True, the sum of the histograms is normalized to 1.  \nweights(n,) array-like or None, default: None\n\n\nAn array of weights, of the same shape as x. Each value in x only contributes its associated weight towards the bin count (instead of 1). If density is True, the weights are normalized, so that the integral of the density over the range remains 1. This parameter can be used to draw a histogram of data that has already been binned, e.g. using numpy.histogram (by treating each bin as a single point with a weight equal to its count) counts, bins = np.histogram(data)\nplt.hist(bins[:-1], bins, weights=counts)\n (or you may alternatively use bar()).  \ncumulativebool or -1, default: False\n\n\nIf True, then a histogram is computed where each bin gives the counts in that bin plus all bins for smaller values. The last bin gives the total number of datapoints. If density is also True then the histogram is normalized such that the last bin equals 1. If cumulative is a number less than 0 (e.g., -1), the direction of accumulation is reversed. In this case, if density is also True, then the histogram is normalized such that the first bin equals 1.  \nbottomarray-like, scalar, or None, default: None\n\n\nLocation of the bottom of each bin, ie. bins are drawn from bottom to bottom + hist(x, bins) If a scalar, the bottom of each bin is shifted by the same amount. If an array, each bin is shifted independently and the length of bottom must match the number of bins. If None, defaults to 0.  \nhisttype{'bar', 'barstacked', 'step', 'stepfilled'}, default: 'bar'\n\n\nThe type of histogram to draw.  'bar' is a traditional bar-type histogram. If multiple data are given the bars are arranged side by side. 'barstacked' is a bar-type histogram where multiple data are stacked on top of each other. 'step' generates a lineplot that is by default unfilled. 'stepfilled' generates a lineplot that is by default filled.   \nalign{'left', 'mid', 'right'}, default: 'mid'\n\n\nThe horizontal alignment of the histogram bars.  'left': bars are centered on the left bin edges. 'mid': bars are centered between the bin edges. 'right': bars are centered on the right bin edges.   \norientation{'vertical', 'horizontal'}, default: 'vertical'\n\n\nIf 'horizontal', barh will be used for bar-type histograms and the bottom kwarg will be the left edges.  \nrwidthfloat or None, default: None\n\n\nThe relative width of the bars as a fraction of the bin width. If None, automatically compute the width. Ignored if histtype is 'step' or 'stepfilled'.  \nlogbool, default: False\n\n\nIf True, the histogram axis will be set to a log scale.  \ncolorcolor or array-like of colors or None, default: None\n\n\nColor or sequence of colors, one per dataset. Default (None) uses the standard line color sequence.  \nlabelstr or None, default: None\n\n\nString, or sequence of strings to match multiple datasets. Bar charts yield multiple patches per dataset, but only the first gets the label, so that legend will work as expected.  \nstackedbool, default: False\n\n\nIf True, multiple data are stacked on top of each other If False multiple data are arranged side by side if histtype is 'bar' or on top of each other if histtype is 'step'    Returns \n \nnarray or list of arrays\n\n\nThe values of the histogram bins. See density and weights for a description of the possible semantics. If input x is an array, then this is an array of length nbins. If input is a sequence of arrays [data1, data2, ...], then this is a list of arrays with the values of the histograms for each of the arrays in the same order. The dtype of the array n (or of its element arrays) will always be float even if no weighting or normalization is used.  \nbinsarray\n\n\nThe edges of the bins. Length nbins + 1 (nbins left edges and right edge of last bin). Always a single array even when multiple data sets are passed in.  \npatchesBarContainer or list of a single Polygon or list of such objects\n\n\nContainer of individual artists used to create the histogram or list of such containers if there are multiple input datasets.    Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, weights  **kwargs\n\nPatch properties      See also  hist2d\n\n2D histogram with rectangular bins  hexbin\n\n2D histogram with hexagonal bins    Notes For large numbers of bins (>1000), 'step' and 'stepfilled' can be significantly faster than 'bar' and 'barstacked'. \n  Examples using matplotlib.axes.Axes.hist\n \n   Scatter plot with histograms   \n\n   Axes Demo   \n\n   Using histograms to plot a cumulative distribution   \n\n   Some features of the histogram (hist) function   \n\n   The histogram (hist) function with multiple data sets   \n\n   Placing text boxes   \n\n   Simple axes labels   \n\n   Bayesian Methods for Hackers style sheet   \n\n   Scatter Histogram (Locatable Axes)   \n\n   Animated histogram   \n\n   Frontpage histogram example   \n\n   MRI With EEG   \n\n   Basic Usage   \n\n   Artist tutorial   \n\n   Path Tutorial   \n\n   Transformations Tutorial   \n\n   hist(x)   \n\n"}, {"name": "axes.Axes.hist2d", "path": "_as_gen/matplotlib.axes.axes.hist2d", "type": "axes", "text": "matplotlib.axes.Axes.hist2d   Axes.hist2d(x, y, bins=10, range=None, density=False, weights=None, cmin=None, cmax=None, *, data=None, **kwargs)[source]\n \nMake a 2D histogram plot.  Parameters \n \nx, yarray-like, shape (n, )\n\n\nInput values  \nbinsNone or int or [int, int] or array-like or [array, array]\n\n\nThe bin specification:  If int, the number of bins for the two dimensions (nx=ny=bins). If [int, int], the number of bins in each dimension (nx, ny = bins). If array-like, the bin edges for the two dimensions (x_edges=y_edges=bins). If [array, array], the bin edges in each dimension (x_edges, y_edges = bins).  The default value is 10.  \nrangearray-like shape(2, 2), optional\n\n\nThe leftmost and rightmost edges of the bins along each dimension (if not specified explicitly in the bins parameters): [[xmin,\nxmax], [ymin, ymax]]. All values outside of this range will be considered outliers and not tallied in the histogram.  \ndensitybool, default: False\n\n\nNormalize histogram. See the documentation for the density parameter of hist for more details.  \nweightsarray-like, shape (n, ), optional\n\n\nAn array of values w_i weighing each sample (x_i, y_i).  \ncmin, cmaxfloat, default: None\n\n\nAll bins that has count less than cmin or more than cmax will not be displayed (set to NaN before passing to imshow) and these count values in the return value count histogram will also be set to nan upon return.    Returns \n \nh2D array\n\n\nThe bi-dimensional histogram of samples x and y. Values in x are histogrammed along the first dimension and values in y are histogrammed along the second dimension.  \nxedges1D array\n\n\nThe bin edges along the x axis.  \nyedges1D array\n\n\nThe bin edges along the y axis.  \nimageQuadMesh\n\n  Other Parameters \n \ncmapColormap or str, optional\n\n\nA colors.Colormap instance. If not set, use rc settings.  \nnormNormalize, optional\n\n\nA colors.Normalize instance is used to scale luminance data to [0, 1]. If not set, defaults to colors.Normalize().  \nvmin/vmaxNone or scalar, optional\n\n\nArguments passed to the Normalize instance.  \nalpha0 <= scalar <= 1 or None, optional\n\n\nThe alpha blending value.  \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, y, weights  **kwargs\n\nAdditional parameters are passed along to the pcolormesh method and QuadMesh constructor.      See also  hist\n\n1D histogram plotting  hexbin\n\n2D histogram with hexagonal bins    Notes  Currently hist2d calculates its own axis limits, and any limits previously set are ignored. Rendering the histogram with a logarithmic color scale is accomplished by passing a colors.LogNorm instance to the norm keyword argument. Likewise, power-law normalization (similar in effect to gamma correction) can be accomplished with colors.PowerNorm.  \n  Examples using matplotlib.axes.Axes.hist2d\n \n   Histograms   \n\n   Exploring normalizations   \n\n   hist2d(x, y)   \n\n"}, {"name": "axes.Axes.hlines", "path": "_as_gen/matplotlib.axes.axes.hlines", "type": "axes", "text": "matplotlib.axes.Axes.hlines   Axes.hlines(y, xmin, xmax, colors=None, linestyles='solid', label='', *, data=None, **kwargs)[source]\n \nPlot horizontal lines at each y from xmin to xmax.  Parameters \n \nyfloat or array-like\n\n\ny-indexes where to plot the lines.  \nxmin, xmaxfloat or array-like\n\n\nRespective beginning and end of each line. If scalars are provided, all lines will have same length.  \ncolorslist of colors, default: rcParams[\"lines.color\"] (default: 'C0')\n\n\nlinestyles{'solid', 'dashed', 'dashdot', 'dotted'}, optional\n\n\nlabelstr, default: ''\n\n  Returns \n LineCollection\n  Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): y, xmin, xmax, colors  \n**kwargsLineCollection properties.\n\n    See also  vlines\n\nvertical lines  axhline\n\nhorizontal line across the Axes    \n  Examples using matplotlib.axes.Axes.hlines\n \n   hlines and vlines   \n\n   Specifying Colors   \n\n"}, {"name": "axes.Axes.imshow", "path": "_as_gen/matplotlib.axes.axes.imshow", "type": "axes", "text": "matplotlib.axes.Axes.imshow   Axes.imshow(X, cmap=None, norm=None, *, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, interpolation_stage=None, filternorm=True, filterrad=4.0, resample=None, url=None, data=None, **kwargs)[source]\n \nDisplay data as an image, i.e., on a 2D regular raster. The input may either be actual RGB(A) data, or 2D scalar data, which will be rendered as a pseudocolor image. For displaying a grayscale image set up the colormapping using the parameters cmap='gray', vmin=0, vmax=255. The number of pixels used to render an image is set by the Axes size and the dpi of the figure. This can lead to aliasing artifacts when the image is resampled because the displayed image size will usually not match the size of X (see Image antialiasing). The resampling can be controlled via the interpolation parameter and/or rcParams[\"image.interpolation\"] (default: 'antialiased').  Parameters \n \nXarray-like or PIL image\n\n\nThe image data. Supported array shapes are:  (M, N): an image with scalar data. The values are mapped to colors using normalization and a colormap. See parameters norm, cmap, vmin, vmax. (M, N, 3): an image with RGB values (0-1 float or 0-255 int). (M, N, 4): an image with RGBA values (0-1 float or 0-255 int), i.e. including transparency.  The first two dimensions (M, N) define the rows and columns of the image. Out-of-range RGB(A) values are clipped.  \ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nThe Colormap instance or registered colormap name used to map scalar data to colors. This parameter is ignored for RGB(A) data.  \nnormNormalize, optional\n\n\nThe Normalize instance used to scale scalar data to the [0, 1] range before mapping to colors using cmap. By default, a linear scaling mapping the lowest value to 0 and the highest to 1 is used. This parameter is ignored for RGB(A) data.  \naspect{'equal', 'auto'} or float, default: rcParams[\"image.aspect\"] (default: 'equal')\n\n\nThe aspect ratio of the Axes. This parameter is particularly relevant for images since it determines whether data pixels are square. This parameter is a shortcut for explicitly calling Axes.set_aspect. See there for further details.  'equal': Ensures an aspect ratio of 1. Pixels will be square (unless pixel sizes are explicitly made non-square in data coordinates using extent). 'auto': The Axes is kept fixed and the aspect is adjusted so that the data fit in the Axes. In general, this will result in non-square pixels.   \ninterpolationstr, default: rcParams[\"image.interpolation\"] (default: 'antialiased')\n\n\nThe interpolation method used. Supported values are 'none', 'antialiased', 'nearest', 'bilinear', 'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite', 'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos', 'blackman'. If interpolation is 'none', then no interpolation is performed on the Agg, ps, pdf and svg backends. Other backends will fall back to 'nearest'. Note that most SVG renderers perform interpolation at rendering and that the default interpolation method they implement may differ. If interpolation is the default 'antialiased', then 'nearest' interpolation is used if the image is upsampled by more than a factor of three (i.e. the number of display pixels is at least three times the size of the data array). If the upsampling rate is smaller than 3, or the image is downsampled, then 'hanning' interpolation is used to act as an anti-aliasing filter, unless the image happens to be upsampled by exactly a factor of two or one. See Interpolations for imshow for an overview of the supported interpolation methods, and Image antialiasing for a discussion of image antialiasing. Some interpolation methods require an additional radius parameter, which can be set by filterrad. Additionally, the antigrain image resize filter is controlled by the parameter filternorm.  \ninterpolation_stage{'data', 'rgba'}, default: 'data'\n\n\nIf 'data', interpolation is carried out on the data provided by the user. If 'rgba', the interpolation is carried out after the colormapping has been applied (visual interpolation).  \nalphafloat or array-like, optional\n\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque). If alpha is an array, the alpha blending values are applied pixel by pixel, and alpha must have the same shape as X.  \nvmin, vmaxfloat, optional\n\n\nWhen using scalar data and no explicit norm, vmin and vmax define the data range that the colormap covers. By default, the colormap covers the complete value range of the supplied data. It is an error to use vmin/vmax when norm is given. When using RGB(A) data, parameters vmin/vmax are ignored.  \norigin{'upper', 'lower'}, default: rcParams[\"image.origin\"] (default: 'upper')\n\n\nPlace the [0, 0] index of the array in the upper left or lower left corner of the Axes. The convention (the default) 'upper' is typically used for matrices and images. Note that the vertical axis points upward for 'lower' but downward for 'upper'. See the origin and extent in imshow tutorial for examples and a more detailed description.  \nextentfloats (left, right, bottom, top), optional\n\n\nThe bounding box in data coordinates that the image will fill. The image is stretched individually along x and y to fill the box. The default extent is determined by the following conditions. Pixels have unit size in data coordinates. Their centers are on integer coordinates, and their center coordinates range from 0 to columns-1 horizontally and from 0 to rows-1 vertically. Note that the direction of the vertical axis and thus the default values for top and bottom depend on origin:  For origin == 'upper' the default is (-0.5, numcols-0.5, numrows-0.5, -0.5). For origin == 'lower' the default is (-0.5, numcols-0.5, -0.5, numrows-0.5).  See the origin and extent in imshow tutorial for examples and a more detailed description.  \nfilternormbool, default: True\n\n\nA parameter for the antigrain image resize filter (see the antigrain documentation). If filternorm is set, the filter normalizes integer values and corrects the rounding errors. It doesn't do anything with the source floating point values, it corrects only integers according to the rule of 1.0 which means that any sum of pixel weights must be equal to 1.0. So, the filter function must produce a graph of the proper shape.  \nfilterradfloat > 0, default: 4.0\n\n\nThe filter radius for filters that have a radius parameter, i.e. when interpolation is one of: 'sinc', 'lanczos' or 'blackman'.  \nresamplebool, default: rcParams[\"image.resample\"] (default: True)\n\n\nWhen True, use a full resampling method. When False, only resample when the output image is larger than the input image.  \nurlstr, optional\n\n\nSet the url of the created AxesImage. See Artist.set_url.    Returns \n AxesImage\n  Other Parameters \n \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).  \n**kwargsArtist properties\n\n\nThese parameters are passed on to the constructor of the AxesImage artist.      See also  matshow\n\nPlot a matrix or an array as an image.    Notes Unless extent is used, pixel centers will be located at integer coordinates. In other words: the origin will coincide with the center of pixel (0, 0). There are two common representations for RGB images with an alpha channel:  Straight (unassociated) alpha: R, G, and B channels represent the color of the pixel, disregarding its opacity. Premultiplied (associated) alpha: R, G, and B channels represent the color of the pixel, adjusted for its opacity by multiplication.  imshow expects RGB images adopting the straight (unassociated) alpha representation. \n  Examples using matplotlib.axes.Axes.imshow\n \n   Bar chart with gradients   \n\n   Barcode   \n\n   Contour Demo   \n\n   Creating annotated heatmaps   \n\n   Image antialiasing   \n\n   Clipping images with patches   \n\n   Image Demo   \n\n   Image Masked   \n\n   Blend transparency with color in 2D images   \n\n   Modifying the coordinate formatter   \n\n   Interpolations for imshow   \n\n   Pcolor Demo   \n\n   Streamplot   \n\n   Axes box aspect   \n\n   Zoom region inset axes   \n\n   Using a text as a Path   \n\n   Colorbar   \n\n   Creating a colormap from a list of colors   \n\n   Anchored Direction Arrow   \n\n   Axes Grid2   \n\n   HBoxDivider demo   \n\n   Adding a colorbar to inset axes   \n\n   Colorbar with AxesDivider   \n\n   Controlling the position and size of colorbars with Inset Axes   \n\n   Inset Locator Demo2   \n\n   Simple ImageGrid   \n\n   Simple ImageGrid 2   \n\n   Simple Colorbar   \n\n   Shaded & power normalized rendering   \n\n   pyplot animation   \n\n   Animated image using a precomputed list of images   \n\n   Image Slices Viewer   \n\n   Viewlims   \n\n   Patheffect Demo   \n\n   MRI   \n\n   MRI With EEG   \n\n   Topographic hillshading   \n\n   Dropped spines   \n\n   Colorbar Tick Labelling   \n\n   Interactive Adjustment of Colormap Range   \n\n   Artist tutorial   \n\n   Tight Layout guide   \n\n   Choosing Colormaps in Matplotlib   \n\n   imshow(Z)   \n\n"}, {"name": "axes.Axes.in_axes", "path": "_as_gen/matplotlib.axes.axes.in_axes", "type": "axes", "text": "matplotlib.axes.Axes.in_axes   Axes.in_axes(mouseevent)[source]\n \nReturn whether the given event (in display coords) is in the Axes. \n\n"}, {"name": "axes.Axes.indicate_inset", "path": "_as_gen/matplotlib.axes.axes.indicate_inset", "type": "axes", "text": "matplotlib.axes.Axes.indicate_inset   Axes.indicate_inset(bounds, inset_ax=None, *, transform=None, facecolor='none', edgecolor='0.5', alpha=0.5, zorder=4.99, **kwargs)[source]\n \nAdd an inset indicator to the Axes. This is a rectangle on the plot at the position indicated by bounds that optionally has lines that connect the rectangle to an inset Axes (Axes.inset_axes).  Parameters \n \nbounds[x0, y0, width, height]\n\n\nLower-left corner of rectangle to be marked, and its width and height.  \ninset_axAxes\n\n\nAn optional inset Axes to draw connecting lines to. Two lines are drawn connecting the indicator box to the inset Axes on corners chosen so as to not overlap with the indicator box.  \ntransformTransform\n\n\nTransform for the rectangle coordinates. Defaults to ax.transAxes, i.e. the units of rect are in Axes-relative coordinates.  \nfacecolorcolor, default: 'none'\n\n\nFacecolor of the rectangle.  \nedgecolorcolor, default: '0.5'\n\n\nColor of the rectangle and color of the connecting lines.  \nalphafloat, default: 0.5\n\n\nTransparency of the rectangle and connector lines.  \nzorderfloat, default: 4.99\n\n\nDrawing order of the rectangle and connector lines. The default, 4.99, is just below the default level of inset Axes.  **kwargs\n\nOther keyword arguments are passed on to the Rectangle patch:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nangle unknown  \nanimated bool  \nantialiased or aa bool or None  \nbounds (left, bottom, width, height)  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nheight unknown  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth unknown  \nx unknown  \nxy (float, float)  \ny unknown  \nzorder float      Returns \n \nrectangle_patchpatches.Rectangle\n\n\nThe indicator frame.  \nconnector_lines4-tuple of patches.ConnectionPatch\n\n\nThe four connector lines connecting to (lower_left, upper_left, lower_right upper_right) corners of inset_ax. Two lines are set with visibility to False, but the user can set the visibility to True if the automatic choice is not deemed correct.      Warning This method is experimental as of 3.0, and the API may change.  \n\n"}, {"name": "axes.Axes.indicate_inset_zoom", "path": "_as_gen/matplotlib.axes.axes.indicate_inset_zoom", "type": "axes", "text": "matplotlib.axes.Axes.indicate_inset_zoom   Axes.indicate_inset_zoom(inset_ax, **kwargs)[source]\n \nAdd an inset indicator rectangle to the Axes based on the axis limits for an inset_ax and draw connectors between inset_ax and the rectangle.  Parameters \n \ninset_axAxes\n\n\nInset Axes to draw connecting lines to. Two lines are drawn connecting the indicator box to the inset Axes on corners chosen so as to not overlap with the indicator box.  **kwargs\n\nOther keyword arguments are passed on to Axes.indicate_inset    Returns \n \nrectangle_patchpatches.Rectangle\n\n\nRectangle artist.  \nconnector_lines4-tuple of patches.ConnectionPatch\n\n\nEach of four connector lines coming from the rectangle drawn on this axis, in the order lower left, upper left, lower right, upper right. Two are set with visibility to False, but the user can set the visibility to True if the automatic choice is not deemed correct.      Warning This method is experimental as of 3.0, and the API may change.  \n  Examples using matplotlib.axes.Axes.indicate_inset_zoom\n \n   Zoom region inset axes   \n\n"}, {"name": "axes.Axes.inset_axes", "path": "_as_gen/matplotlib.axes.axes.inset_axes", "type": "axes", "text": "matplotlib.axes.Axes.inset_axes   Axes.inset_axes(bounds, *, transform=None, zorder=5, **kwargs)[source]\n \nAdd a child inset Axes to this existing Axes.  Parameters \n \nbounds[x0, y0, width, height]\n\n\nLower-left corner of inset Axes, and its width and height.  \ntransformTransform\n\n\nDefaults to ax.transAxes, i.e. the units of rect are in Axes-relative coordinates.  \nzordernumber\n\n\nDefaults to 5 (same as Axes.legend). Adjust higher or lower to change whether it is above or below data plotted on the parent Axes.  **kwargs\n\nOther keyword arguments are passed on to the child Axes.    Returns \n ax\n\nThe created Axes instance.      Warning This method is experimental as of 3.0, and the API may change.  Examples This example makes two inset Axes, the first is in Axes-relative coordinates, and the second in data-coordinates: fig, ax = plt.subplots()\nax.plot(range(10))\naxin1 = ax.inset_axes([0.8, 0.1, 0.15, 0.15])\naxin2 = ax.inset_axes(\n        [5, 7, 2.3, 2.3], transform=ax.transData)\n \n  Examples using matplotlib.axes.Axes.inset_axes\n \n   Placing Colorbars   \n\n   Zoom region inset axes   \n\n"}, {"name": "axes.Axes.invert_xaxis", "path": "_as_gen/matplotlib.axes.axes.invert_xaxis", "type": "axes", "text": "matplotlib.axes.Axes.invert_xaxis   Axes.invert_xaxis()[source]\n \nInvert the x-axis.  See also  xaxis_inverted\n\nget_xlim, set_xlim\n\n\nget_xbound, set_xbound\n\n  \n\n"}, {"name": "axes.Axes.invert_yaxis", "path": "_as_gen/matplotlib.axes.axes.invert_yaxis", "type": "axes", "text": "matplotlib.axes.Axes.invert_yaxis   Axes.invert_yaxis()[source]\n \nInvert the y-axis.  See also  yaxis_inverted\n\nget_ylim, set_ylim\n\n\nget_ybound, set_ybound\n\n  \n  Examples using matplotlib.axes.Axes.invert_yaxis\n \n   Bar Label Demo   \n\n   Horizontal bar chart   \n\n   Marker reference   \n\n"}, {"name": "axes.Axes.legend", "path": "_as_gen/matplotlib.axes.axes.legend", "type": "axes", "text": "matplotlib.axes.Axes.legend   Axes.legend(*args, **kwargs)[source]\n \nPlace a legend on the Axes. Call signatures: legend()\nlegend(handles, labels)\nlegend(handles=handles)\nlegend(labels)\n The call signatures correspond to the following different ways to use this method: 1. Automatic detection of elements to be shown in the legend The elements to be added to the legend are automatically determined, when you do not pass in any extra arguments. In this case, the labels are taken from the artist. You can specify them either at artist creation or by calling the set_label() method on the artist: ax.plot([1, 2, 3], label='Inline label')\nax.legend()\n or: line, = ax.plot([1, 2, 3])\nline.set_label('Label via method')\nax.legend()\n Specific lines can be excluded from the automatic legend element selection by defining a label starting with an underscore. This is default for all artists, so calling Axes.legend without any arguments and without setting the labels manually will result in no legend being drawn. 2. Explicitly listing the artists and labels in the legend For full control of which artists have a legend entry, it is possible to pass an iterable of legend artists followed by an iterable of legend labels respectively: ax.legend([line1, line2, line3], ['label1', 'label2', 'label3'])\n 3. Explicitly listing the artists in the legend This is similar to 2, but the labels are taken from the artists' label properties. Example: line1, = ax.plot([1, 2, 3], label='label1')\nline2, = ax.plot([1, 2, 3], label='label2')\nax.legend(handles=[line1, line2])\n 4. Labeling existing plot elements  Discouraged This call signature is discouraged, because the relation between plot elements and labels is only implicit by their order and can easily be mixed up.  To make a legend for all artists on an Axes, call this function with an iterable of strings, one for each legend item. For example: ax.plot([1, 2, 3])\nax.plot([5, 6, 7])\nax.legend(['First line', 'Second line'])\n  Parameters \n \nhandlessequence of Artist, optional\n\n\nA list of Artists (lines, patches) to be added to the legend. Use this together with labels, if you need full control on what is shown in the legend and the automatic mechanism described above is not sufficient. The length of handles and labels should be the same in this case. If they are not, they are truncated to the smaller length.  \nlabelslist of str, optional\n\n\nA list of labels to show next to the artists. Use this together with handles, if you need full control on what is shown in the legend and the automatic mechanism described above is not sufficient.    Returns \n Legend\n  Other Parameters \n \nlocstr or pair of floats, default: rcParams[\"legend.loc\"] (default: 'best') ('best' for axes, 'upper right' for figures)\n\n\nThe location of the legend. The strings 'upper left', 'upper right', 'lower left', 'lower right' place the legend at the corresponding corner of the axes/figure. The strings 'upper center', 'lower center', 'center left', 'center right' place the legend at the center of the corresponding edge of the axes/figure. The string 'center' places the legend at the center of the axes/figure. The string 'best' places the legend at the location, among the nine locations defined so far, with the minimum overlap with other drawn artists. This option can be quite slow for plots with large amounts of data; your plotting speed may benefit from providing a specific location. The location can also be a 2-tuple giving the coordinates of the lower-left corner of the legend in axes coordinates (in which case bbox_to_anchor will be ignored). For back-compatibility, 'center right' (but no other location) can also be spelled 'right', and each \"string\" locations can also be given as a numeric value:   \nLocation String Location Code   \n'best' 0  \n'upper right' 1  \n'upper left' 2  \n'lower left' 3  \n'lower right' 4  \n'right' 5  \n'center left' 6  \n'center right' 7  \n'lower center' 8  \n'upper center' 9  \n'center' 10    \nbbox_to_anchorBboxBase, 2-tuple, or 4-tuple of floats\n\n\nBox that is used to position the legend in conjunction with loc. Defaults to axes.bbox (if called as a method to Axes.legend) or figure.bbox (if Figure.legend). This argument allows arbitrary placement of the legend. Bbox coordinates are interpreted in the coordinate system given by bbox_transform, with the default transform Axes or Figure coordinates, depending on which legend is called. If a 4-tuple or BboxBase is given, then it specifies the bbox (x, y, width, height) that the legend is placed in. To put the legend in the best location in the bottom right quadrant of the axes (or figure): loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n A 2-tuple (x, y) places the corner of the legend specified by loc at x, y. For example, to put the legend's upper right-hand corner in the center of the axes (or figure) the following keywords can be used: loc='upper right', bbox_to_anchor=(0.5, 0.5)\n  \nncolint, default: 1\n\n\nThe number of columns that the legend has.  \npropNone or matplotlib.font_manager.FontProperties or dict\n\n\nThe font properties of the legend. If None (default), the current matplotlib.rcParams will be used.  \nfontsizeint or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}\n\n\nThe font size of the legend. If the value is numeric the size will be the absolute font size in points. String values are relative to the current default font size. This argument is only used if prop is not specified.  \nlabelcolorstr or list, default: rcParams[\"legend.labelcolor\"] (default: 'None')\n\n\nThe color of the text in the legend. Either a valid color string (for example, 'red'), or a list of color strings. The labelcolor can also be made to match the color of the line or marker using 'linecolor', 'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec'). Labelcolor can be set globally using rcParams[\"legend.labelcolor\"] (default: 'None'). If None, use rcParams[\"text.color\"] (default: 'black').  \nnumpointsint, default: rcParams[\"legend.numpoints\"] (default: 1)\n\n\nThe number of marker points in the legend when creating a legend entry for a Line2D (line).  \nscatterpointsint, default: rcParams[\"legend.scatterpoints\"] (default: 1)\n\n\nThe number of marker points in the legend when creating a legend entry for a PathCollection (scatter plot).  \nscatteryoffsetsiterable of floats, default: [0.375, 0.5, 0.3125]\n\n\nThe vertical offset (relative to the font size) for the markers created for a scatter plot legend entry. 0.0 is at the base the legend text, and 1.0 is at the top. To draw all markers at the same height, set to [0.5].  \nmarkerscalefloat, default: rcParams[\"legend.markerscale\"] (default: 1.0)\n\n\nThe relative size of legend markers compared with the originally drawn ones.  \nmarkerfirstbool, default: True\n\n\nIf True, legend marker is placed to the left of the legend label. If False, legend marker is placed to the right of the legend label.  \nframeonbool, default: rcParams[\"legend.frameon\"] (default: True)\n\n\nWhether the legend should be drawn on a patch (frame).  \nfancyboxbool, default: rcParams[\"legend.fancybox\"] (default: True)\n\n\nWhether round edges should be enabled around the FancyBboxPatch which makes up the legend's background.  \nshadowbool, default: rcParams[\"legend.shadow\"] (default: False)\n\n\nWhether to draw a shadow behind the legend.  \nframealphafloat, default: rcParams[\"legend.framealpha\"] (default: 0.8)\n\n\nThe alpha transparency of the legend's background. If shadow is activated and framealpha is None, the default value is ignored.  \nfacecolor\"inherit\" or color, default: rcParams[\"legend.facecolor\"] (default: 'inherit')\n\n\nThe legend's background color. If \"inherit\", use rcParams[\"axes.facecolor\"] (default: 'white').  \nedgecolor\"inherit\" or color, default: rcParams[\"legend.edgecolor\"] (default: '0.8')\n\n\nThe legend's background patch edge color. If \"inherit\", use take rcParams[\"axes.edgecolor\"] (default: 'black').  \nmode{\"expand\", None}\n\n\nIf mode is set to \"expand\" the legend will be horizontally expanded to fill the axes area (or bbox_to_anchor if defines the legend's size).  \nbbox_transformNone or matplotlib.transforms.Transform\n\n\nThe transform for the bounding box (bbox_to_anchor). For a value of None (default) the Axes' transAxes transform will be used.  \ntitlestr or None\n\n\nThe legend's title. Default is no title (None).  \ntitle_fontpropertiesNone or matplotlib.font_manager.FontProperties or dict\n\n\nThe font properties of the legend's title. If None (default), the title_fontsize argument will be used if present; if title_fontsize is also None, the current rcParams[\"legend.title_fontsize\"] (default: None) will be used.  \ntitle_fontsizeint or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}, default: rcParams[\"legend.title_fontsize\"] (default: None)\n\n\nThe font size of the legend's title. Note: This cannot be combined with title_fontproperties. If you want to set the fontsize alongside other font properties, use the size parameter in title_fontproperties.  \nborderpadfloat, default: rcParams[\"legend.borderpad\"] (default: 0.4)\n\n\nThe fractional whitespace inside the legend border, in font-size units.  \nlabelspacingfloat, default: rcParams[\"legend.labelspacing\"] (default: 0.5)\n\n\nThe vertical space between the legend entries, in font-size units.  \nhandlelengthfloat, default: rcParams[\"legend.handlelength\"] (default: 2.0)\n\n\nThe length of the legend handles, in font-size units.  \nhandleheightfloat, default: rcParams[\"legend.handleheight\"] (default: 0.7)\n\n\nThe height of the legend handles, in font-size units.  \nhandletextpadfloat, default: rcParams[\"legend.handletextpad\"] (default: 0.8)\n\n\nThe pad between the legend handle and text, in font-size units.  \nborderaxespadfloat, default: rcParams[\"legend.borderaxespad\"] (default: 0.5)\n\n\nThe pad between the axes and legend border, in font-size units.  \ncolumnspacingfloat, default: rcParams[\"legend.columnspacing\"] (default: 2.0)\n\n\nThe spacing between columns, in font-size units.  \nhandler_mapdict or None\n\n\nThe custom dictionary mapping instances or types to a legend handler. This handler_map updates the default handler map found at matplotlib.legend.Legend.get_legend_handler_map.      See also  Figure.legend\n  Notes Some artists are not supported by this function. See Legend guide for details. Examples (Source code, png, pdf)    \n  Examples using matplotlib.axes.Axes.legend\n \n   Bar Label Demo   \n\n   Stacked bar chart   \n\n   Grouped bar chart with labels   \n\n   Plotting categorical variables   \n\n   Fill Between and Alpha   \n\n   Hat graph   \n\n   Customizing dashed line styles   \n\n   Lines with a ticked patheffect   \n\n   prop_cycle property markevery in rcParams   \n\n   Scatter plots with a legend   \n\n   Stackplots and streamgraphs   \n\n   Stairs Demo   \n\n   Contourf Hatching   \n\n   Tricontour Demo   \n\n   Secondary Axis   \n\n   Plot a confidence ellipse of a two-dimensional dataset   \n\n   Using histograms to plot a cumulative distribution   \n\n   The histogram (hist) function with multiple data sets   \n\n   Bar of pie   \n\n   Labeling a pie and a donut   \n\n   Polar Legend   \n\n   Composing Custom Legends   \n\n   Legend using pre-defined labels   \n\n   Legend Demo   \n\n   Mathtext   \n\n   Rendering math equations using TeX   \n\n   Parasite Axes demo   \n\n   Parasite axis demo   \n\n   Anatomy of a figure   \n\n   Legend Picking   \n\n   Patheffect Demo   \n\n   TickedStroke patheffect   \n\n   Plot 2D data on 3D plot   \n\n   Parametric Curve   \n\n   Multiple Yaxis With Spines   \n\n   Group barchart with units   \n\n   Simple Legend01   \n\n   Simple Legend02   \n\n   Basic Usage   \n\n   Legend guide   \n\n   Constrained Layout Guide   \n\n   Tight Layout guide   \n\n   Specifying Colors   \n\n"}, {"name": "axes.Axes.locator_params", "path": "_as_gen/matplotlib.axes.axes.locator_params", "type": "axes", "text": "matplotlib.axes.Axes.locator_params   Axes.locator_params(axis='both', tight=None, **kwargs)[source]\n \nControl behavior of major tick locators. Because the locator is involved in autoscaling, autoscale_view is called automatically after the parameters are changed.  Parameters \n \naxis{'both', 'x', 'y'}, default: 'both'\n\n\nThe axis on which to operate.  \ntightbool or None, optional\n\n\nParameter passed to autoscale_view. Default is None, for no change.    Other Parameters \n **kwargs\n\nRemaining keyword arguments are passed to directly to the set_params() method of the locator. Supported keywords depend on the type of the locator. See for example set_params for the ticker.MaxNLocator used by default for linear axes.     Examples When plotting small subplots, one might want to reduce the maximum number of ticks and use tight bounds, for example: ax.locator_params(tight=True, nbins=4)\n \n  Examples using matplotlib.axes.Axes.locator_params\n \n   Contourf Demo   \n\n   Constrained Layout Guide   \n\n   Tight Layout guide   \n\n"}, {"name": "axes.Axes.loglog", "path": "_as_gen/matplotlib.axes.axes.loglog", "type": "axes", "text": "matplotlib.axes.Axes.loglog   Axes.loglog(*args, **kwargs)[source]\n \nMake a plot with log scaling on both the x and y axis. Call signatures: loglog([x], y, [fmt], data=None, **kwargs)\nloglog([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n This is just a thin wrapper around plot which additionally changes both the x-axis and the y-axis to log scaling. All of the concepts and parameters of plot can be used here as well. The additional parameters base, subs and nonpositive control the x/y-axis properties. They are just forwarded to Axes.set_xscale and Axes.set_yscale. To use different properties on the x-axis and the y-axis, use e.g. ax.set_xscale(\"log\", base=10); ax.set_yscale(\"log\", base=2).  Parameters \n \nbasefloat, default: 10\n\n\nBase of the logarithm.  \nsubssequence, optional\n\n\nThe location of the minor ticks. If None, reasonable locations are automatically chosen depending on the number of decades in the plot. See Axes.set_xscale/Axes.set_yscale for details.  \nnonpositive{'mask', 'clip'}, default: 'mask'\n\n\nNon-positive values can be masked as invalid, or clipped to a very small positive number.  **kwargs\n\nAll parameters supported by plot.    Returns \n list of Line2D\n\n\nObjects representing the plotted data.     \n  Examples using matplotlib.axes.Axes.loglog\n \n   Secondary Axis   \n\n   Log Demo   \n\n"}, {"name": "axes.Axes.magnitude_spectrum", "path": "_as_gen/matplotlib.axes.axes.magnitude_spectrum", "type": "axes", "text": "matplotlib.axes.Axes.magnitude_spectrum   Axes.magnitude_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, scale=None, *, data=None, **kwargs)[source]\n \nPlot the magnitude spectrum. Compute the magnitude spectrum of x. Data is padded to a length of pad_to and the windowing function window is applied to the signal.  Parameters \n \nx1-D array or sequence\n\n\nArray or sequence containing the data.  \nFsfloat, default: 2\n\n\nThe sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.  \nwindowcallable or ndarray, default: window_hanning\n\n\nA function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.  \nsides{'default', 'onesided', 'twosided'}, optional\n\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.  \npad_toint, optional\n\n\nThe number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to the length of the input signal (i.e. no padding).  \nscale{'default', 'linear', 'dB'}\n\n\nThe scaling of the values in the spec. 'linear' is no scaling. 'dB' returns the values in dB scale, i.e., the dB amplitude (20 * log10). 'default' is 'linear'.  \nFcint, default: 0\n\n\nThe center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.    Returns \n \nspectrum1-D array\n\n\nThe values for the magnitude spectrum before scaling (real valued).  \nfreqs1-D array\n\n\nThe frequencies corresponding to the elements in spectrum.  \nlineLine2D\n\n\nThe line created by this function.    Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x  **kwargs\n\nKeyword arguments control the Line2D properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float        See also  psd\n\nPlots the power spectral density.  angle_spectrum\n\nPlots the angles of the corresponding frequencies.  phase_spectrum\n\nPlots the phase (unwrapped angle) of the corresponding frequencies.  specgram\n\nCan plot the magnitude spectrum of segments within the signal in a colormap.    \n\n"}, {"name": "axes.Axes.margins", "path": "_as_gen/matplotlib.axes.axes.margins", "type": "axes", "text": "matplotlib.axes.Axes.margins   Axes.margins(*margins, x=None, y=None, tight=True)[source]\n \nSet or retrieve autoscaling margins. The padding added to each limit of the Axes is the margin times the data interval. All input parameters must be floats within the range [0, 1]. Passing both positional and keyword arguments is invalid and will raise a TypeError. If no arguments (positional or otherwise) are provided, the current margins will remain in place and simply be returned. Specifying any margin changes only the autoscaling; for example, if xmargin is not None, then xmargin times the X data interval will be added to each end of that interval before it is used in autoscaling.  Parameters \n \n*marginsfloat, optional\n\n\nIf a single positional argument is provided, it specifies both margins of the x-axis and y-axis limits. If two positional arguments are provided, they will be interpreted as xmargin, ymargin. If setting the margin on a single axis is desired, use the keyword arguments described below.  \nx, yfloat, optional\n\n\nSpecific margin values for the x-axis and y-axis, respectively. These cannot be used with positional arguments, but can be used individually to alter on e.g., only the y-axis.  \ntightbool or None, default: True\n\n\nThe tight parameter is passed to autoscale_view(), which is executed after a margin is changed; the default here is True, on the assumption that when margins are specified, no additional padding to match tick marks is usually desired. Set tight to None will preserve the previous setting.    Returns \n \nxmargin, ymarginfloat\n\n   Notes If a previously used Axes method such as pcolor() has set use_sticky_edges to True, only the limits not set by the \"sticky artists\" will be modified. To force all of the margins to be set, set use_sticky_edges to False before calling margins(). \n  Examples using matplotlib.axes.Axes.margins\n \n   Marker reference   \n\n   Creating a timeline with lines, dates, and text   \n\n   Trigradient Demo   \n\n   Controlling view limits using margins and sticky_edges   \n\n   Scale invariant angle label   \n\n   ggplot style sheet   \n\n   Autoscaling   \n\n"}, {"name": "axes.Axes.matshow", "path": "_as_gen/matplotlib.axes.axes.matshow", "type": "axes", "text": "matplotlib.axes.Axes.matshow   Axes.matshow(Z, **kwargs)[source]\n \nPlot the values of a 2D matrix or array as color-coded image. The matrix will be shown the way it would be printed, with the first row at the top. Row and column numbering is zero-based.  Parameters \n \nZ(M, N) array-like\n\n\nThe matrix to be displayed.    Returns \n AxesImage\n  Other Parameters \n \n**kwargsimshow arguments\n\n    See also  imshow\n\nMore general function to plot data on a 2D regular raster.    Notes This is just a convenience function wrapping imshow to set useful defaults for displaying a matrix. In particular:  Set origin='upper'. Set interpolation='nearest'. Set aspect='equal'. Ticks are placed to the left and above. Ticks are formatted to show integer indices.  \n\n"}, {"name": "axes.Axes.minorticks_off", "path": "_as_gen/matplotlib.axes.axes.minorticks_off", "type": "axes", "text": "matplotlib.axes.Axes.minorticks_off   Axes.minorticks_off()[source]\n \nRemove minor ticks from the Axes. \n\n"}, {"name": "axes.Axes.minorticks_on", "path": "_as_gen/matplotlib.axes.axes.minorticks_on", "type": "axes", "text": "matplotlib.axes.Axes.minorticks_on   Axes.minorticks_on()[source]\n \nDisplay minor ticks on the Axes. Displaying minor ticks may reduce performance; you may turn them off using minorticks_off() if drawing speed is a problem. \n  Examples using matplotlib.axes.Axes.minorticks_on\n \n   MRI With EEG   \n\n"}, {"name": "axes.Axes.mouseover", "path": "_as_gen/matplotlib.axes.axes.mouseover", "type": "axes", "text": "matplotlib.axes.Axes.mouseover   propertyAxes.mouseover\n \nIf this property is set to True, the artist will be queried for custom context information when the mouse cursor moves over it. See also get_cursor_data(), ToolCursorPosition and NavigationToolbar2. \n\n"}, {"name": "axes.Axes.name", "path": "_as_gen/matplotlib.axes.axes.name", "type": "axes", "text": "matplotlib.axes.Axes.name   Axes.name='rectilinear'\n\n\n"}, {"name": "axes.Axes.pchanged", "path": "_as_gen/matplotlib.axes.axes.pchanged", "type": "axes", "text": "matplotlib.axes.Axes.pchanged   Axes.pchanged()[source]\n \nCall all of the registered callbacks. This function is triggered internally when a property is changed.  See also  add_callback\nremove_callback\n  \n\n"}, {"name": "axes.Axes.pcolor", "path": "_as_gen/matplotlib.axes.axes.pcolor", "type": "axes", "text": "matplotlib.axes.Axes.pcolor   Axes.pcolor(*args, shading=None, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, data=None, **kwargs)[source]\n \nCreate a pseudocolor plot with a non-regular rectangular grid. Call signature: pcolor([X, Y,] C, **kwargs)\n X and Y can be used to specify the corners of the quadrilaterals.  Hint pcolor() can be very slow for large arrays. In most cases you should use the similar but much faster pcolormesh instead. See Differences between pcolor() and pcolormesh() for a discussion of the differences.   Parameters \n \nC2D array-like\n\n\nThe color-mapped values.  \nX, Yarray-like, optional\n\n\nThe coordinates of the corners of quadrilaterals of a pcolormesh: (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])\n                      +-----+\n                      |     |\n                      +-----+\n    (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])\n Note that the column index corresponds to the x-coordinate, and the row index corresponds to y. For details, see the Notes section below. If shading='flat' the dimensions of X and Y should be one greater than those of C, and the quadrilateral is colored due to the value at C[i, j]. If X, Y and C have equal dimensions, a warning will be raised and the last row and column of C will be ignored. If shading='nearest', the dimensions of X and Y should be the same as those of C (if not, a ValueError will be raised). The color C[i, j] will be centered on (X[i, j], Y[i, j]). If X and/or Y are 1-D arrays or column vectors they will be expanded as needed into the appropriate 2D arrays, making a rectangular grid.  \nshading{'flat', 'nearest', 'auto'}, default: rcParams[\"pcolor.shading\"] (default: 'auto')\n\n\nThe fill style for the quadrilateral. Possible values:  'flat': A solid color is used for each quad. The color of the quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by C[i, j]. The dimensions of X and Y should be one greater than those of C; if they are the same as C, then a deprecation warning is raised, and the last row and column of C are dropped. 'nearest': Each grid point will have a color centered on it, extending halfway between the adjacent grid centers. The dimensions of X and Y must be the same as C. 'auto': Choose 'flat' if dimensions of X and Y are one larger than C. Choose 'nearest' if dimensions are the same.  See pcolormesh grids and shading for more description.  \ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nA Colormap instance or registered colormap name. The colormap maps the C values to colors.  \nnormNormalize, optional\n\n\nThe Normalize instance scales the data values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling.  \nvmin, vmaxfloat, default: None\n\n\nThe colorbar range. If None, suitable min/max values are automatically chosen by the Normalize instance (defaults to the respective min/max values of C in case of the default linear scaling). It is an error to use vmin/vmax when norm is given.  \nedgecolors{'none', None, 'face', color, color sequence}, optional\n\n\nThe color of the edges. Defaults to 'none'. Possible values:  'none' or '': No edge. \nNone: rcParams[\"patch.edgecolor\"] (default: 'black') will be used. Note that currently rcParams[\"patch.force_edgecolor\"] (default: False) has to be True for this to work. 'face': Use the adjacent face color. A color or sequence of colors will set the edge color.  The singular form edgecolor works as an alias.  \nalphafloat, default: None\n\n\nThe alpha blending value of the face color, between 0 (transparent) and 1 (opaque). Note: The edgecolor is currently not affected by this.  \nsnapbool, default: False\n\n\nWhether to snap the mesh to pixel boundaries.    Returns \n matplotlib.collections.Collection\n  Other Parameters \n \nantialiasedsbool, default: False\n\n\nThe default antialiaseds is False if the default edgecolors=\"none\" is used. This eliminates artificial lines at patch boundaries, and works regardless of the value of alpha. If edgecolors is not \"none\", then the default antialiaseds is taken from rcParams[\"patch.antialiased\"] (default: True). Stroking the edges may be preferred if alpha is 1, but will cause artifacts otherwise.  \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).  **kwargs\n\nAdditionally, the following arguments are allowed. They are passed along to the PolyCollection constructor:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha array-like or scalar or None  \nanimated bool  \nantialiased or aa or antialiaseds bool or list of bools  \narray array-like or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclim (vmin: float, vmax: float)  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncmap Colormap or str or None  \ncolor color or list of rgba tuples  \nedgecolor or ec or edgecolors color or list of colors or 'face'  \nfacecolor or facecolors or fc color or list of colors  \nfigure Figure  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or dashes or linestyles or ls str or tuple or list thereof  \nlinewidth or linewidths or lw float or list of floats  \nnorm Normalize or None  \noffset_transform Transform  \noffsets (N, 2) or (2,) array-like  \npath_effects AbstractPathEffect  \npaths list of array-like  \npicker None or bool or float or callable  \npickradius float  \nrasterized bool  \nsizes ndarray or None  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nurls list of str or None  \nverts list of array-like  \nverts_and_codes unknown  \nvisible bool  \nzorder float        See also  pcolormesh\n\nfor an explanation of the differences between pcolor and pcolormesh.  imshow\n\nIf X and Y are each equidistant, imshow can be a faster alternative.    Notes Masked arrays X, Y and C may be masked arrays. If either C[i, j], or one of the vertices surrounding C[i, j] (X or Y at [i, j], [i+1, j], [i, j+1], [i+1, j+1]) is masked, nothing is plotted. Grid orientation The grid orientation follows the standard matrix convention: An array C with shape (nrows, ncolumns) is plotted with the column number as X and the row number as Y. \n  Examples using matplotlib.axes.Axes.pcolor\n \n   Pcolor Demo   \n\n   Controlling view limits using margins and sticky_edges   \n\n"}, {"name": "axes.Axes.pcolorfast", "path": "_as_gen/matplotlib.axes.axes.pcolorfast", "type": "axes", "text": "matplotlib.axes.Axes.pcolorfast   Axes.pcolorfast(*args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, data=None, **kwargs)[source]\n \nCreate a pseudocolor plot with a non-regular rectangular grid. Call signature: ax.pcolorfast([X, Y], C, /, **kwargs)\n This method is similar to pcolor and pcolormesh. It's designed to provide the fastest pcolor-type plotting with the Agg backend. To achieve this, it uses different algorithms internally depending on the complexity of the input grid (regular rectangular, non-regular rectangular or arbitrary quadrilateral).  Warning This method is experimental. Compared to pcolor or pcolormesh it has some limitations:  It supports only flat shading (no outlines) It lacks support for log scaling of the axes. It does not have a have a pyplot wrapper.    Parameters \n \nCarray-like\n\n\nThe image data. Supported array shapes are:  (M, N): an image with scalar data. The data is visualized using a colormap. (M, N, 3): an image with RGB values (0-1 float or 0-255 int). (M, N, 4): an image with RGBA values (0-1 float or 0-255 int), i.e. including transparency.  The first two dimensions (M, N) define the rows and columns of the image. This parameter can only be passed positionally.  \nX, Ytuple or array-like, default: (0, N), (0, M)\n\n\nX and Y are used to specify the coordinates of the quadrilaterals. There are different ways to do this:  \nUse tuples X=(xmin, xmax) and Y=(ymin, ymax) to define a uniform rectangular grid. The tuples define the outer edges of the grid. All individual quadrilaterals will be of the same size. This is the fastest version.  \nUse 1D arrays X, Y to specify a non-uniform rectangular grid. In this case X and Y have to be monotonic 1D arrays of length N+1 and M+1, specifying the x and y boundaries of the cells. The speed is intermediate. Note: The grid is checked, and if found to be uniform the fast version is used.  \nUse 2D arrays X, Y if you need an arbitrary quadrilateral grid (i.e. if the quadrilaterals are not rectangular). In this case X and Y are 2D arrays with shape (M + 1, N + 1), specifying the x and y coordinates of the corners of the colored quadrilaterals. This is the most general, but the slowest to render. It may produce faster and more compact output using ps, pdf, and svg backends, however.   These arguments can only be passed positionally.  \ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nA Colormap instance or registered colormap name. The colormap maps the C values to colors.  \nnormNormalize, optional\n\n\nThe Normalize instance scales the data values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling.  \nvmin, vmaxfloat, default: None\n\n\nThe colorbar range. If None, suitable min/max values are automatically chosen by the Normalize instance (defaults to the respective min/max values of C in case of the default linear scaling). It is an error to use vmin/vmax when norm is given.  \nalphafloat, default: None\n\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).  \nsnapbool, default: False\n\n\nWhether to snap the mesh to pixel boundaries.    Returns \n \nAxesImage or PcolorImage or QuadMesh\n\n\nThe return type depends on the type of grid:  \nAxesImage for a regular rectangular grid. \nPcolorImage for a non-regular rectangular grid. \nQuadMesh for a non-rectangular grid.     Other Parameters \n \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).  **kwargs\n\nSupported additional parameters depend on the type of grid. See return types of image for further description.     \n  Examples using matplotlib.axes.Axes.pcolorfast\n \n   Pcolor Demo   \n\n"}, {"name": "axes.Axes.pcolormesh", "path": "_as_gen/matplotlib.axes.axes.pcolormesh", "type": "axes", "text": "matplotlib.axes.Axes.pcolormesh   Axes.pcolormesh(*args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, shading=None, antialiased=False, data=None, **kwargs)[source]\n \nCreate a pseudocolor plot with a non-regular rectangular grid. Call signature: pcolormesh([X, Y,] C, **kwargs)\n X and Y can be used to specify the corners of the quadrilaterals.  Hint pcolormesh is similar to pcolor. It is much faster and preferred in most cases. For a detailed discussion on the differences see Differences between pcolor() and pcolormesh().   Parameters \n \nC2D array-like\n\n\nThe color-mapped values.  \nX, Yarray-like, optional\n\n\nThe coordinates of the corners of quadrilaterals of a pcolormesh: (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])\n                      +-----+\n                      |     |\n                      +-----+\n    (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])\n Note that the column index corresponds to the x-coordinate, and the row index corresponds to y. For details, see the Notes section below. If shading='flat' the dimensions of X and Y should be one greater than those of C, and the quadrilateral is colored due to the value at C[i, j]. If X, Y and C have equal dimensions, a warning will be raised and the last row and column of C will be ignored. If shading='nearest' or 'gouraud', the dimensions of X and Y should be the same as those of C (if not, a ValueError will be raised). For 'nearest' the color C[i, j] is centered on (X[i, j], Y[i, j]). For 'gouraud', a smooth interpolation is caried out between the quadrilateral corners. If X and/or Y are 1-D arrays or column vectors they will be expanded as needed into the appropriate 2D arrays, making a rectangular grid.  \ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nA Colormap instance or registered colormap name. The colormap maps the C values to colors.  \nnormNormalize, optional\n\n\nThe Normalize instance scales the data values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling.  \nvmin, vmaxfloat, default: None\n\n\nThe colorbar range. If None, suitable min/max values are automatically chosen by the Normalize instance (defaults to the respective min/max values of C in case of the default linear scaling). It is an error to use vmin/vmax when norm is given.  \nedgecolors{'none', None, 'face', color, color sequence}, optional\n\n\nThe color of the edges. Defaults to 'none'. Possible values:  'none' or '': No edge. \nNone: rcParams[\"patch.edgecolor\"] (default: 'black') will be used. Note that currently rcParams[\"patch.force_edgecolor\"] (default: False) has to be True for this to work. 'face': Use the adjacent face color. A color or sequence of colors will set the edge color.  The singular form edgecolor works as an alias.  \nalphafloat, default: None\n\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).  \nshading{'flat', 'nearest', 'gouraud', 'auto'}, optional\n\n\nThe fill style for the quadrilateral; defaults to 'flat' or rcParams[\"pcolor.shading\"] (default: 'auto'). Possible values:  'flat': A solid color is used for each quad. The color of the quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by C[i, j]. The dimensions of X and Y should be one greater than those of C; if they are the same as C, then a deprecation warning is raised, and the last row and column of C are dropped. 'nearest': Each grid point will have a color centered on it, extending halfway between the adjacent grid centers. The dimensions of X and Y must be the same as C. 'gouraud': Each quad will be Gouraud shaded: The color of the corners (i', j') are given by C[i', j']. The color values of the area in between is interpolated from the corner values. The dimensions of X and Y must be the same as C. When Gouraud shading is used, edgecolors is ignored. 'auto': Choose 'flat' if dimensions of X and Y are one larger than C. Choose 'nearest' if dimensions are the same.  See pcolormesh grids and shading for more description.  \nsnapbool, default: False\n\n\nWhether to snap the mesh to pixel boundaries.  \nrasterizedbool, optional\n\n\nRasterize the pcolormesh when drawing vector graphics. This can speed up rendering and produce smaller files for large data sets. See also Rasterization for vector graphics.    Returns \n matplotlib.collections.QuadMesh\n  Other Parameters \n \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).  **kwargs\n\nAdditionally, the following arguments are allowed. They are passed along to the QuadMesh constructor:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha array-like or scalar or None  \nanimated bool  \nantialiased or aa or antialiaseds bool or list of bools  \narray (M, N) array-like or M*N array-like  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclim (vmin: float, vmax: float)  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncmap Colormap or str or None  \ncolor color or list of rgba tuples  \nedgecolor or ec or edgecolors color or list of colors or 'face'  \nfacecolor or facecolors or fc color or list of colors  \nfigure Figure  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or dashes or linestyles or ls str or tuple or list thereof  \nlinewidth or linewidths or lw float or list of floats  \nnorm Normalize or None  \noffset_transform Transform  \noffsets (N, 2) or (2,) array-like  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nurls list of str or None  \nvisible bool  \nzorder float        See also  pcolor\n\nAn alternative implementation with slightly different features. For a detailed discussion on the differences see Differences between pcolor() and pcolormesh().  imshow\n\nIf X and Y are each equidistant, imshow can be a faster alternative.    Notes Masked arrays C may be a masked array. If C[i, j] is masked, the corresponding quadrilateral will be transparent. Masking of X and Y is not supported. Use pcolor if you need this functionality. Grid orientation The grid orientation follows the standard matrix convention: An array C with shape (nrows, ncolumns) is plotted with the column number as X and the row number as Y. Differences between pcolor() and pcolormesh() Both methods are used to create a pseudocolor plot of a 2D array using quadrilaterals. The main difference lies in the created object and internal data handling: While pcolor returns a PolyCollection, pcolormesh returns a QuadMesh. The latter is more specialized for the given purpose and thus is faster. It should almost always be preferred. There is also a slight difference in the handling of masked arrays. Both pcolor and pcolormesh support masked arrays for C. However, only pcolor supports masked arrays for X and Y. The reason lies in the internal handling of the masked values. pcolor leaves out the respective polygons from the PolyCollection. pcolormesh sets the facecolor of the masked elements to transparent. You can see the difference when using edgecolors. While all edges are drawn irrespective of masking in a QuadMesh, the edge between two adjacent masked quadrilaterals in pcolor is not drawn as the corresponding polygons do not exist in the PolyCollection. Another difference is the support of Gouraud shading in pcolormesh, which is not available with pcolor. \n  Examples using matplotlib.axes.Axes.pcolormesh\n \n   Pcolor Demo   \n\n   pcolormesh grids and shading   \n\n   pcolormesh   \n\n   Placing Colorbars   \n\n   Figure subfigures   \n\n   Rasterization for vector graphics   \n\n   Constrained Layout Guide   \n\n   Colormap Normalization   \n\n   pcolormesh(X, Y, Z)   \n\n"}, {"name": "axes.Axes.phase_spectrum", "path": "_as_gen/matplotlib.axes.axes.phase_spectrum", "type": "axes", "text": "matplotlib.axes.Axes.phase_spectrum   Axes.phase_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, *, data=None, **kwargs)[source]\n \nPlot the phase spectrum. Compute the phase spectrum (unwrapped angle spectrum) of x. Data is padded to a length of pad_to and the windowing function window is applied to the signal.  Parameters \n \nx1-D array or sequence\n\n\nArray or sequence containing the data  \nFsfloat, default: 2\n\n\nThe sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.  \nwindowcallable or ndarray, default: window_hanning\n\n\nA function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.  \nsides{'default', 'onesided', 'twosided'}, optional\n\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.  \npad_toint, optional\n\n\nThe number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to the length of the input signal (i.e. no padding).  \nFcint, default: 0\n\n\nThe center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.    Returns \n \nspectrum1-D array\n\n\nThe values for the phase spectrum in radians (real valued).  \nfreqs1-D array\n\n\nThe frequencies corresponding to the elements in spectrum.  \nlineLine2D\n\n\nThe line created by this function.    Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x  **kwargs\n\nKeyword arguments control the Line2D properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float        See also  magnitude_spectrum\n\nPlots the magnitudes of the corresponding frequencies.  angle_spectrum\n\nPlots the wrapped version of this function.  specgram\n\nCan plot the phase spectrum of segments within the signal in a colormap.    \n\n"}, {"name": "axes.Axes.pie", "path": "_as_gen/matplotlib.axes.axes.pie", "type": "axes", "text": "matplotlib.axes.Axes.pie   Axes.pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=0, radius=1, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False, rotatelabels=False, *, normalize=True, data=None)[source]\n \nPlot a pie chart. Make a pie chart of array x. The fractional area of each wedge is given by x/sum(x). If sum(x) < 1, then the values of x give the fractional area directly and the array will not be normalized. The resulting pie will have an empty wedge of size 1 - sum(x). The wedges are plotted counterclockwise, by default starting from the x-axis.  Parameters \n \nx1D array-like\n\n\nThe wedge sizes.  \nexplodearray-like, default: None\n\n\nIf not None, is a len(x) array which specifies the fraction of the radius with which to offset each wedge.  \nlabelslist, default: None\n\n\nA sequence of strings providing the labels for each wedge  \ncolorsarray-like, default: None\n\n\nA sequence of colors through which the pie chart will cycle. If None, will use the colors in the currently active cycle.  \nautopctNone or str or callable, default: None\n\n\nIf not None, is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be fmt % pct. If it is a function, it will be called.  \npctdistancefloat, default: 0.6\n\n\nThe ratio between the center of each pie slice and the start of the text generated by autopct. Ignored if autopct is None.  \nshadowbool, default: False\n\n\nDraw a shadow beneath the pie.  \nnormalizebool, default: True\n\n\nWhen True, always make a full pie by normalizing x so that sum(x) == 1. False makes a partial pie if sum(x) <= 1 and raises a ValueError for sum(x) > 1.  \nlabeldistancefloat or None, default: 1.1\n\n\nThe radial distance at which the pie labels are drawn. If set to None, label are not drawn, but are stored for use in legend()  \nstartanglefloat, default: 0 degrees\n\n\nThe angle by which the start of the pie is rotated, counterclockwise from the x-axis.  \nradiusfloat, default: 1\n\n\nThe radius of the pie.  \ncounterclockbool, default: True\n\n\nSpecify fractions direction, clockwise or counterclockwise.  \nwedgepropsdict, default: None\n\n\nDict of arguments passed to the wedge objects making the pie. For example, you can pass in wedgeprops = {'linewidth': 3} to set the width of the wedge border lines equal to 3. For more details, look at the doc/arguments of the wedge object. By default clip_on=False.  \ntextpropsdict, default: None\n\n\nDict of arguments to pass to the text objects.  \ncenter(float, float), default: (0, 0)\n\n\nThe coordinates of the center of the chart.  \nframebool, default: False\n\n\nPlot Axes frame with the chart if true.  \nrotatelabelsbool, default: False\n\n\nRotate each label to the angle of the corresponding slice if true.  \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, explode, labels, colors    Returns \n \npatcheslist\n\n\nA sequence of matplotlib.patches.Wedge instances  \ntextslist\n\n\nA list of the label Text instances.  \nautotextslist\n\n\nA list of Text instances for the numeric labels. This will only be returned if the parameter autopct is not None.     Notes The pie chart will probably look best if the figure and Axes are square, or the Axes aspect is equal. This method sets the aspect ratio of the axis to \"equal\". The Axes aspect ratio can be controlled with Axes.set_aspect. \n  Examples using matplotlib.axes.Axes.pie\n \n   Basic pie chart   \n\n   Bar of pie   \n\n   Nested pie charts   \n\n   Labeling a pie and a donut   \n\n   SVG Filter Pie   \n\n   pie(x)   \n\n"}, {"name": "axes.Axes.plot", "path": "_as_gen/matplotlib.axes.axes.plot", "type": "axes", "text": "matplotlib.axes.Axes.plot   Axes.plot(*args, scalex=True, scaley=True, data=None, **kwargs)[source]\n \nPlot y versus x as lines and/or markers. Call signatures: plot([x], y, [fmt], *, data=None, **kwargs)\nplot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n The coordinates of the points or line nodes are given by x, y. The optional parameter fmt is a convenient way for defining basic formatting like color, marker and linestyle. It's a shortcut string notation described in the Notes section below. >>> plot(x, y)        # plot x and y using default line style and color\n>>> plot(x, y, 'bo')  # plot x and y using blue circle markers\n>>> plot(y)           # plot y using x as index array 0..N-1\n>>> plot(y, 'r+')     # ditto, but with red plusses\n You can use Line2D properties as keyword arguments for more control on the appearance. Line properties and fmt can be mixed. The following two calls yield identical results: >>> plot(x, y, 'go--', linewidth=2, markersize=12)\n>>> plot(x, y, color='green', marker='o', linestyle='dashed',\n...      linewidth=2, markersize=12)\n When conflicting with fmt, keyword arguments take precedence. Plotting labelled data There's a convenient way for plotting objects with labelled data (i.e. data that can be accessed by index obj['y']). Instead of giving the data in x and y, you can provide the object in the data parameter and just give the labels for x and y: >>> plot('xlabel', 'ylabel', data=obj)\n All indexable objects are supported. This could e.g. be a dict, a pandas.DataFrame or a structured numpy array. Plotting multiple sets of data There are various ways to plot multiple sets of data.  \nThe most straight forward way is just to call plot multiple times. Example: >>> plot(x1, y1, 'bo')\n>>> plot(x2, y2, 'go')\n  \nIf x and/or y are 2D arrays a separate data set will be drawn for every column. If both x and y are 2D, they must have the same shape. If only one of them is 2D with shape (N, m) the other must have length N and will be used for every data set m. Example: >>> x = [1, 2, 3]\n>>> y = np.array([[1, 2], [3, 4], [5, 6]])\n>>> plot(x, y)\n is equivalent to: >>> for col in range(y.shape[1]):\n...     plot(x, y[:, col])\n  \nThe third way is to specify multiple sets of [x], y, [fmt] groups: >>> plot(x1, y1, 'g^', x2, y2, 'g-')\n In this case, any additional keyword argument applies to all datasets. Also this syntax cannot be combined with the data parameter.   By default, each line is assigned a different style specified by a 'style cycle'. The fmt and line property parameters are only necessary if you want explicit deviations from these defaults. Alternatively, you can also change the style cycle using rcParams[\"axes.prop_cycle\"] (default: cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'])).  Parameters \n \nx, yarray-like or scalar\n\n\nThe horizontal / vertical coordinates of the data points. x values are optional and default to range(len(y)). Commonly, these parameters are 1D arrays. They can also be scalars, or two-dimensional (in that case, the columns represent separate data sets). These arguments cannot be passed as keywords.  \nfmtstr, optional\n\n\nA format string, e.g. 'ro' for red circles. See the Notes section for a full description of the format strings. Format strings are just an abbreviation for quickly setting basic line properties. All of these and more can also be controlled by keyword arguments. This argument cannot be passed as keyword.  \ndataindexable object, optional\n\n\nAn object with labelled data. If given, provide the label names to plot in x and y.  Note Technically there's a slight ambiguity in calls where the second label is a valid fmt. plot('n', 'o', data=obj) could be plt(x, y) or plt(y, fmt). In such cases, the former interpretation is chosen, but a warning is issued. You may suppress the warning by adding an empty format string plot('n', 'o', '', data=obj).     Returns \n list of Line2D\n\n\nA list of lines representing the plotted data.    Other Parameters \n \nscalex, scaleybool, default: True\n\n\nThese parameters determine if the view limits are adapted to the data limits. The values are passed on to autoscale_view.  \n**kwargsLine2D properties, optional\n\n\nkwargs are used to specify properties like a line label (for auto legends), linewidth, antialiasing, marker face color. Example: >>> plot([1, 2, 3], [1, 2, 3], 'go-', label='line 1', linewidth=2)\n>>> plot([1, 2, 3], [1, 4, 9], 'rs', label='line 2')\n If you specify multiple lines with one plot call, the kwargs apply to all those lines. In case the label object is iterable, each element is used as labels for each set of data. Here is a list of available Line2D properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float        See also  scatter\n\nXY scatter plot with markers of varying size and/or color ( sometimes also called bubble chart).    Notes Format Strings A format string consists of a part for color, marker and line: fmt = '[marker][line][color]'\n Each of them is optional. If not provided, the value from the style cycle is used. Exception: If line is given, but no marker, the data will be a line without markers. Other combinations such as [color][marker][line] are also supported, but note that their parsing may be ambiguous. Markers   \ncharacter description   \n'.' point marker  \n',' pixel marker  \n'o' circle marker  \n'v' triangle_down marker  \n'^' triangle_up marker  \n'<' triangle_left marker  \n'>' triangle_right marker  \n'1' tri_down marker  \n'2' tri_up marker  \n'3' tri_left marker  \n'4' tri_right marker  \n'8' octagon marker  \n's' square marker  \n'p' pentagon marker  \n'P' plus (filled) marker  \n'*' star marker  \n'h' hexagon1 marker  \n'H' hexagon2 marker  \n'+' plus marker  \n'x' x marker  \n'X' x (filled) marker  \n'D' diamond marker  \n'd' thin_diamond marker  \n'|' vline marker  \n'_' hline marker   Line Styles   \ncharacter description   \n'-' solid line style  \n'--' dashed line style  \n'-.' dash-dot line style  \n':' dotted line style   Example format strings: 'b'    # blue markers with default shape\n'or'   # red circles\n'-g'   # green solid line\n'--'   # dashed line with default color\n'^k:'  # black triangle_up markers connected by a dotted line\n Colors The supported color abbreviations are the single letter codes   \ncharacter color   \n'b' blue  \n'g' green  \n'r' red  \n'c' cyan  \n'm' magenta  \n'y' yellow  \n'k' black  \n'w' white   and the 'CN' colors that index into the default property cycle. If the color is the only part of the format string, you can additionally use any matplotlib.colors spec, e.g. full names ('green') or hex strings ('#008000'). \n  Examples using matplotlib.axes.Axes.plot\n \n   Plotting categorical variables   \n\n   CSD Demo   \n\n   Curve with error band   \n\n   EventCollection Demo   \n\n   Fill Between and Alpha   \n\n   Filling the area between lines   \n\n   Fill Betweenx Demo   \n\n   Customizing dashed line styles   \n\n   Lines with a ticked patheffect   \n\n   Marker reference   \n\n   Markevery Demo   \n\n   prop_cycle property markevery in rcParams   \n\n   Psd Demo   \n\n   Simple Plot   \n\n   Using span_where   \n\n   Creating a timeline with lines, dates, and text   \n\n   hlines and vlines   \n\n   Contour Corner Mask   \n\n   Contour plot of irregularly spaced data   \n\n   pcolormesh grids and shading   \n\n   Streamplot   \n\n   Spectrogram Demo   \n\n   Watermark image   \n\n   Aligning Labels   \n\n   Axes box aspect   \n\n   Axes Demo   \n\n   Controlling view limits using margins and sticky_edges   \n\n   Axes Props   \n\n   axhspan Demo   \n\n   Broken Axis   \n\n   Resizing axes with constrained layout   \n\n   Resizing axes with tight layout   \n\n   Figure labels: suptitle, supxlabel, supylabel   \n\n   Invert Axes   \n\n   Secondary Axis   \n\n   Sharing axis limits and views   \n\n   Figure subfigures   \n\n   Multiple subplots   \n\n   Creating multiple subplots using plt.subplots   \n\n   Plots with different scales   \n\n   Boxplots   \n\n   Using histograms to plot a cumulative distribution   \n\n   Some features of the histogram (hist) function   \n\n   Polar plot   \n\n   Polar Legend   \n\n   Using accented text in matplotlib   \n\n   Scale invariant angle label   \n\n   Annotating Plots   \n\n   Composing Custom Legends   \n\n   Date tick labels   \n\n   Custom tick formatter for time series   \n\n   AnnotationBbox demo   \n\n   Labeling ticks using engineering notation   \n\n   Annotation arrow style reference   \n\n   Legend using pre-defined labels   \n\n   Legend Demo   \n\n   Mathtext   \n\n   Math fontfamily   \n\n   Multiline   \n\n   Rendering math equations using TeX   \n\n   Text Rotation Relative To Line   \n\n   Title positioning   \n\n   Text watermark   \n\n   Annotate Transform   \n\n   Annotating a plot   \n\n   Annotation Polar   \n\n   Programmatically controlling subplot adjustment   \n\n   Dollar Ticks   \n\n   Simple axes labels   \n\n   Text Commands   \n\n   Color Demo   \n\n   Color by y-value   \n\n   PathPatch object   \n\n   Bezier Curve   \n\n   Dark background style sheet   \n\n   FiveThirtyEight style sheet   \n\n   ggplot style sheet   \n\n   Axes with a fixed physical size   \n\n   Parasite Simple   \n\n   Simple Axisline4   \n\n   Axis line styles   \n\n   Parasite Axes demo   \n\n   Parasite axis demo   \n\n   Custom spines with axisartist   \n\n   Simple Axisline   \n\n   Anatomy of a figure   \n\n   Bachelor's degrees by gender   \n\n   Integral as the area under a curve   \n\n   XKCD   \n\n   Decay   \n\n   The Bayes update   \n\n   The double pendulum problem   \n\n   Animated 3D random walk   \n\n   Animated line plot   \n\n   MATPLOTLIB UNCHAINED   \n\n   Mouse move and click events   \n\n   Data Browser   \n\n   Keypress event   \n\n   Legend Picking   \n\n   Looking Glass   \n\n   Path Editor   \n\n   Pick Event Demo2   \n\n   Resampling Data   \n\n   Timers   \n\n   Frontpage histogram example   \n\n   Frontpage plot example   \n\n   Changing colors of lines intersecting a box   \n\n   Cross hair cursor   \n\n   Custom projection   \n\n   Patheffect Demo   \n\n   Pythonic Matplotlib   \n\n   SVG Filter Line   \n\n   TickedStroke patheffect   \n\n   Zorder Demo   \n\n   Plot 2D data on 3D plot   \n\n   3D box surface plot   \n\n   Parametric Curve   \n\n   Lorenz Attractor   \n\n   2D and 3D Axes in same Figure   \n\n   Loglog Aspect   \n\n   Scales   \n\n   Symlog Demo   \n\n   Anscombe's quartet   \n\n   Radar chart (aka spider or star chart)   \n\n   Centered spines with arrows   \n\n   Multiple Yaxis With Spines   \n\n   Spine Placement   \n\n   Spines   \n\n   Custom spine bounds   \n\n   Centering labels between ticks   \n\n   Formatting date ticks using ConciseDateFormatter   \n\n   Date Demo Convert   \n\n   Date Index Formatter   \n\n   Date Precision and Epochs   \n\n   Major and minor ticks   \n\n   The default tick formatter   \n\n   Set default y-axis tick labels on the right   \n\n   Setting tick labels from a list of values   \n\n   Set default x-axis tick labels on the top   \n\n   Evans test   \n\n   CanvasAgg demo   \n\n   Annotate Explain   \n\n   Connect Simple01   \n\n   Connection styles for annotations   \n\n   Nested GridSpecs   \n\n   Pgf Fonts   \n\n   Pgf Texsystem   \n\n   Simple Annotate01   \n\n   Simple Legend01   \n\n   Simple Legend02   \n\n   Annotated Cursor   \n\n   Check Buttons   \n\n   Cursor   \n\n   Multicursor   \n\n   Radio Buttons   \n\n   Rectangle and ellipse selectors   \n\n   Span Selector   \n\n   Textbox   \n\n   Basic Usage   \n\n   Artist tutorial   \n\n   Legend guide   \n\n   Styling with cycler   \n\n   Constrained Layout Guide   \n\n   Tight Layout guide   \n\n   Arranging multiple Axes in a Figure   \n\n   Autoscaling   \n\n   Faster rendering by using blitting   \n\n   Path Tutorial   \n\n   Transformations Tutorial   \n\n   Specifying Colors   \n\n   Text in Matplotlib Plots   \n\n   plot(x, y)   \n\n   fill_between(x, y1, y2)   \n\n   tricontour(x, y, z)   \n\n   tricontourf(x, y, z)   \n\n   tripcolor(x, y, z)   \n\n"}, {"name": "axes.Axes.plot_date", "path": "_as_gen/matplotlib.axes.axes.plot_date", "type": "axes", "text": "matplotlib.axes.Axes.plot_date   Axes.plot_date(x, y, fmt='o', tz=None, xdate=True, ydate=False, *, data=None, **kwargs)[source]\n \nPlot coercing the axis to treat floats as dates.  Discouraged This method exists for historic reasons and will be deprecated in the future.  \ndatetime-like data should directly be plotted using plot. If you need to plot plain numeric data as Matplotlib date format or need to set a timezone, call ax.xaxis.axis_date / ax.yaxis.axis_date before plot. See Axis.axis_date.   Similar to plot, this plots y vs. x as lines or markers. However, the axis labels are formatted as dates depending on xdate and ydate. Note that plot will work with datetime and numpy.datetime64 objects without resorting to this method.  Parameters \n \nx, yarray-like\n\n\nThe coordinates of the data points. If xdate or ydate is True, the respective values x or y are interpreted as Matplotlib dates.  \nfmtstr, optional\n\n\nThe plot format string. For details, see the corresponding parameter in plot.  \ntztimezone string or datetime.tzinfo, default: rcParams[\"timezone\"] (default: 'UTC')\n\n\nThe time zone to use in labeling dates.  \nxdatebool, default: True\n\n\nIf True, the x-axis will be interpreted as Matplotlib dates.  \nydatebool, default: False\n\n\nIf True, the y-axis will be interpreted as Matplotlib dates.    Returns \n list of Line2D\n\n\nObjects representing the plotted data.    Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, y  **kwargs\n\nKeyword arguments control the Line2D properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float        See also  matplotlib.dates\n\nHelper functions on dates.  matplotlib.dates.date2num\n\nConvert dates to num.  matplotlib.dates.num2date\n\nConvert num to dates.  matplotlib.dates.drange\n\nCreate an equally spaced sequence of dates.    Notes If you are using custom date tickers and formatters, it may be necessary to set the formatters/locators after the call to plot_date. plot_date will set the default tick locator to AutoDateLocator (if the tick locator is not already set to a DateLocator instance) and the default tick formatter to AutoDateFormatter (if the tick formatter is not already set to a DateFormatter instance). \n\n"}, {"name": "axes.Axes.psd", "path": "_as_gen/matplotlib.axes.axes.psd", "type": "axes", "text": "matplotlib.axes.Axes.psd   Axes.psd(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, *, data=None, **kwargs)[source]\n \nPlot the power spectral density. The power spectral density \\(P_{xx}\\) by Welch's average periodogram method. The vector x is divided into NFFT length segments. Each segment is detrended by function detrend and windowed by function window. noverlap gives the length of the overlap between segments. The \\(|\\mathrm{fft}(i)|^2\\) of each segment \\(i\\) are averaged to compute \\(P_{xx}\\), with a scaling to correct for power loss due to windowing. If len(x) < NFFT, it will be zero padded to NFFT.  Parameters \n \nx1-D array or sequence\n\n\nArray or sequence containing the data  \nFsfloat, default: 2\n\n\nThe sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.  \nwindowcallable or ndarray, default: window_hanning\n\n\nA function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.  \nsides{'default', 'onesided', 'twosided'}, optional\n\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.  \npad_toint, optional\n\n\nThe number of points to which the data segment is padded when performing the FFT. This can be different from NFFT, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to NFFT  \nNFFTint, default: 256\n\n\nThe number of data points used in each block for the FFT. A power 2 is most efficient. This should NOT be used to get zero padding, or the scaling of the result will be incorrect; use pad_to for this instead.  \ndetrend{'none', 'mean', 'linear'} or callable, default: 'none'\n\n\nThe function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the detrend parameter is a vector, in Matplotlib it is a function. The mlab module defines detrend_none, detrend_mean, and detrend_linear, but you can use a custom function as well. You can also use a string to choose one of the functions: 'none' calls detrend_none. 'mean' calls detrend_mean. 'linear' calls detrend_linear.  \nscale_by_freqbool, default: True\n\n\nWhether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.  \nnoverlapint, default: 0 (no overlap)\n\n\nThe number of points of overlap between segments.  \nFcint, default: 0\n\n\nThe center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.  \nreturn_linebool, default: False\n\n\nWhether to include the line object plotted in the returned values.    Returns \n \nPxx1-D array\n\n\nThe values for the power spectrum \\(P_{xx}\\) before scaling (real valued).  \nfreqs1-D array\n\n\nThe frequencies corresponding to the elements in Pxx.  \nlineLine2D\n\n\nThe line created by this function. Only returned if return_line is True.    Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x  **kwargs\n\nKeyword arguments control the Line2D properties:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float        See also  specgram\n\nDiffers in the default overlap; in not returning the mean of the segment periodograms; in returning the times of the segments; and in plotting a colormap instead of a line.  magnitude_spectrum\n\nPlots the magnitude spectrum.  csd\n\nPlots the spectral density between two signals.    Notes For plotting, the power is plotted as \\(10\\log_{10}(P_{xx})\\) for decibels, though Pxx itself is returned. References Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John Wiley & Sons (1986) \n  Examples using matplotlib.axes.Axes.psd\n \n   Psd Demo   \n\n"}, {"name": "axes.Axes.quiver", "path": "_as_gen/matplotlib.axes.axes.quiver", "type": "axes", "text": "matplotlib.axes.Axes.quiver   Axes.quiver(*args, data=None, **kwargs)[source]\n \nPlot a 2D field of arrows. Call signature: quiver([X, Y], U, V, [C], **kw)\n X, Y define the arrow locations, U, V define the arrow directions, and C optionally sets the color. Each arrow is internally represented by a filled polygon with a default edge linewidth of 0. As a result, an arrow is rather a filled area, not a line with a head, and PolyCollection properties like linewidth, linestyle, facecolor, etc. act accordingly. Arrow size The default settings auto-scales the length of the arrows to a reasonable size. To change this behavior see the scale and scale_units parameters. Arrow shape The defaults give a slightly swept-back arrow; to make the head a triangle, make headaxislength the same as headlength. To make the arrow more pointed, reduce headwidth or increase headlength and headaxislength. To make the head smaller relative to the shaft, scale down all the head parameters. You will probably do best to leave minshaft alone. Arrow outline linewidths and edgecolors can be used to customize the arrow outlines.  Parameters \n \nX, Y1D or 2D array-like, optional\n\n\nThe x and y coordinates of the arrow locations. If not given, they will be generated as a uniform integer meshgrid based on the dimensions of U and V. If X and Y are 1D but U, V are 2D, X, Y are expanded to 2D using X, Y = np.meshgrid(X, Y). In this case len(X) and len(Y) must match the column and row dimensions of U and V.  \nU, V1D or 2D array-like\n\n\nThe x and y direction components of the arrow vectors. They must have the same number of elements, matching the number of arrow locations. U and V may be masked. Only locations unmasked in U, V, and C will be drawn.  \nC1D or 2D array-like, optional\n\n\nNumeric data that defines the arrow colors by colormapping via norm and cmap. This does not support explicit colors. If you want to set colors directly, use color instead. The size of C must match the number of arrow locations.  \nunits{'width', 'height', 'dots', 'inches', 'x', 'y', 'xy'}, default: 'width'\n\n\nThe arrow dimensions (except for length) are measured in multiples of this unit. The following values are supported:  'width', 'height': The width or height of the axis. 'dots', 'inches': Pixels or inches based on the figure dpi. 'x', 'y', 'xy': X, Y or \\(\\sqrt{X^2 + Y^2}\\) in data units.  The arrows scale differently depending on the units. For 'x' or 'y', the arrows get larger as one zooms in; for other units, the arrow size is independent of the zoom state. For 'width or 'height', the arrow size increases with the width and height of the axes, respectively, when the window is resized; for 'dots' or 'inches', resizing does not change the arrows.  \nangles{'uv', 'xy'} or array-like, default: 'uv'\n\n\nMethod for determining the angle of the arrows.  \n'uv': The arrow axis aspect ratio is 1 so that if U == V the orientation of the arrow on the plot is 45 degrees counter-clockwise from the horizontal axis (positive to the right). Use this if the arrows symbolize a quantity that is not based on X, Y data coordinates.  'xy': Arrows point from (x, y) to (x+u, y+v). Use this for plotting a gradient field, for example. \nAlternatively, arbitrary angles may be specified explicitly as an array of values in degrees, counter-clockwise from the horizontal axis. In this case U, V is only used to determine the length of the arrows.   Note: inverting a data axis will correspondingly invert the arrows only with angles='xy'.  \nscalefloat, optional\n\n\nNumber of data units per arrow length unit, e.g., m/s per plot width; a smaller scale parameter makes the arrow longer. Default is None. If None, a simple autoscaling algorithm is used, based on the average vector length and the number of vectors. The arrow length unit is given by the scale_units parameter.  \nscale_units{'width', 'height', 'dots', 'inches', 'x', 'y', 'xy'}, optional\n\n\nIf the scale kwarg is None, the arrow length unit. Default is None. e.g. scale_units is 'inches', scale is 2.0, and (u, v) = (1, 0), then the vector will be 0.5 inches long. If scale_units is 'width' or 'height', then the vector will be half the width/height of the axes. If scale_units is 'x' then the vector will be 0.5 x-axis units. To plot vectors in the x-y plane, with u and v having the same units as x and y, use angles='xy', scale_units='xy', scale=1.  \nwidthfloat, optional\n\n\nShaft width in arrow units; default depends on choice of units, above, and number of vectors; a typical starting value is about 0.005 times the width of the plot.  \nheadwidthfloat, default: 3\n\n\nHead width as multiple of shaft width.  \nheadlengthfloat, default: 5\n\n\nHead length as multiple of shaft width.  \nheadaxislengthfloat, default: 4.5\n\n\nHead length at shaft intersection.  \nminshaftfloat, default: 1\n\n\nLength below which arrow scales, in units of head length. Do not set this to less than 1, or small arrows will look terrible!  \nminlengthfloat, default: 1\n\n\nMinimum length as a multiple of shaft width; if an arrow length is less than this, plot a dot (hexagon) of this diameter instead.  \npivot{'tail', 'mid', 'middle', 'tip'}, default: 'tail'\n\n\nThe part of the arrow that is anchored to the X, Y grid. The arrow rotates about this point. 'mid' is a synonym for 'middle'.  \ncolorcolor or color sequence, optional\n\n\nExplicit color(s) for the arrows. If C has been set, color has no effect. This is a synonym for the PolyCollection facecolor parameter.    Returns \n Quiver\n  Other Parameters \n \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).  \n**kwargsPolyCollection properties, optional\n\n\nAll other keyword arguments are passed on to PolyCollection:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha array-like or scalar or None  \nanimated bool  \nantialiased or aa or antialiaseds bool or list of bools  \narray array-like or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclim (vmin: float, vmax: float)  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncmap Colormap or str or None  \ncolor color or list of rgba tuples  \nedgecolor or ec or edgecolors color or list of colors or 'face'  \nfacecolor or facecolors or fc color or list of colors  \nfigure Figure  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or dashes or linestyles or ls str or tuple or list thereof  \nlinewidth or linewidths or lw float or list of floats  \nnorm Normalize or None  \noffset_transform Transform  \noffsets (N, 2) or (2,) array-like  \npath_effects AbstractPathEffect  \npaths list of array-like  \npicker None or bool or float or callable  \npickradius float  \nrasterized bool  \nsizes ndarray or None  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nurls list of str or None  \nverts list of array-like  \nverts_and_codes unknown  \nvisible bool  \nzorder float        See also  Axes.quiverkey\n\nAdd a key to a quiver plot.    \n  Examples using matplotlib.axes.Axes.quiver\n \n   Advanced quiver and quiverkey functions   \n\n   Quiver Simple Demo   \n\n   Trigradient Demo   \n\n   3D quiver plot   \n\n   quiver(X, Y, U, V)   \n\n"}, {"name": "axes.Axes.quiverkey", "path": "_as_gen/matplotlib.axes.axes.quiverkey", "type": "axes", "text": "matplotlib.axes.Axes.quiverkey   Axes.quiverkey(Q, X, Y, U, label, **kwargs)[source]\n \nAdd a key to a quiver plot. The positioning of the key depends on X, Y, coordinates, and labelpos. If labelpos is 'N' or 'S', X, Y give the position of the middle of the key arrow. If labelpos is 'E', X, Y positions the head, and if labelpos is 'W', X, Y positions the tail; in either of these two cases, X, Y is somewhere in the middle of the arrow+label key object.  Parameters \n \nQmatplotlib.quiver.Quiver\n\n\nA Quiver object as returned by a call to quiver().  \nX, Yfloat\n\n\nThe location of the key.  \nUfloat\n\n\nThe length of the key.  \nlabelstr\n\n\nThe key label (e.g., length and units of the key).  \nanglefloat, default: 0\n\n\nThe angle of the key arrow, in degrees anti-clockwise from the x-axis.  \ncoordinates{'axes', 'figure', 'data', 'inches'}, default: 'axes'\n\n\nCoordinate system and units for X, Y: 'axes' and 'figure' are normalized coordinate systems with (0, 0) in the lower left and (1, 1) in the upper right; 'data' are the axes data coordinates (used for the locations of the vectors in the quiver plot itself); 'inches' is position in the figure in inches, with (0, 0) at the lower left corner.  \ncolorcolor\n\n\nOverrides face and edge colors from Q.  \nlabelpos{'N', 'S', 'E', 'W'}\n\n\nPosition the label above, below, to the right, to the left of the arrow, respectively.  \nlabelsepfloat, default: 0.1\n\n\nDistance in inches between the arrow and the label.  \nlabelcolorcolor, default: rcParams[\"text.color\"] (default: 'black')\n\n\nLabel color.  \nfontpropertiesdict, optional\n\n\nA dictionary with keyword arguments accepted by the FontProperties initializer: family, style, variant, size, weight.  **kwargs\n\nAny additional keyword arguments are used to override vector properties taken from Q.     \n  Examples using matplotlib.axes.Axes.quiverkey\n \n   Advanced quiver and quiverkey functions   \n\n   Quiver Simple Demo   \n\n"}, {"name": "axes.Axes.redraw_in_frame", "path": "_as_gen/matplotlib.axes.axes.redraw_in_frame", "type": "axes", "text": "matplotlib.axes.Axes.redraw_in_frame   Axes.redraw_in_frame()[source]\n \nEfficiently redraw Axes data, but not axis ticks, labels, etc. This method can only be used after an initial draw which caches the renderer. \n\n"}, {"name": "axes.Axes.relim", "path": "_as_gen/matplotlib.axes.axes.relim", "type": "axes", "text": "matplotlib.axes.Axes.relim   Axes.relim(visible_only=False)[source]\n \nRecompute the data limits based on current artists. At present, Collection instances are not supported.  Parameters \n \nvisible_onlybool, default: False\n\n\nWhether to exclude invisible artists.     \n  Examples using matplotlib.axes.Axes.relim\n \n   Packed-bubble chart   \n\n   Textbox   \n\n"}, {"name": "axes.Axes.remove_callback", "path": "_as_gen/matplotlib.axes.axes.remove_callback", "type": "axes", "text": "matplotlib.axes.Axes.remove_callback   Axes.remove_callback(oid)[source]\n \nRemove a callback based on its observer id.  See also  add_callback\n  \n\n"}, {"name": "axes.Axes.reset_position", "path": "_as_gen/matplotlib.axes.axes.reset_position", "type": "axes", "text": "matplotlib.axes.Axes.reset_position   Axes.reset_position()[source]\n \nReset the active position to the original position. This resets the a possible position change due to aspect constraints. For an explanation of the positions see set_position. \n\n"}, {"name": "axes.Axes.scatter", "path": "_as_gen/matplotlib.axes.axes.scatter", "type": "axes", "text": "matplotlib.axes.Axes.scatter   Axes.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs)[source]\n \nA scatter plot of y vs. x with varying marker size and/or color.  Parameters \n \nx, yfloat or array-like, shape (n, )\n\n\nThe data positions.  \nsfloat or array-like, shape (n, ), optional\n\n\nThe marker size in points**2. Default is rcParams['lines.markersize'] ** 2.  \ncarray-like or list of colors or color, optional\n\n\nThe marker colors. Possible values:  A scalar or sequence of n numbers to be mapped to colors using cmap and norm. A 2D array in which the rows are RGB or RGBA. A sequence of colors of length n. A single color format string.  Note that c should not be a single numeric RGB or RGBA sequence because that is indistinguishable from an array of values to be colormapped. If you want to specify the same RGB or RGBA value for all points, use a 2D array with a single row. Otherwise, value- matching will have precedence in case of a size matching with x and y. If you wish to specify a single color for all points prefer the color keyword argument. Defaults to None. In that case the marker color is determined by the value of color, facecolor or facecolors. In case those are not specified or None, the marker color is determined by the next color of the Axes' current \"shape and fill\" color cycle. This cycle defaults to rcParams[\"axes.prop_cycle\"] (default: cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'])).  \nmarkerMarkerStyle, default: rcParams[\"scatter.marker\"] (default: 'o')\n\n\nThe marker style. marker can be either an instance of the class or the text shorthand for a particular marker. See matplotlib.markers for more information about marker styles.  \ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nA Colormap instance or registered colormap name. cmap is only used if c is an array of floats.  \nnormNormalize, default: None\n\n\nIf c is an array of floats, norm is used to scale the color data, c, in the range 0 to 1, in order to map into the colormap cmap. If None, use the default colors.Normalize.  \nvmin, vmaxfloat, default: None\n\n\nvmin and vmax are used in conjunction with the default norm to map the color array c to the colormap cmap. If None, the respective min and max of the color array is used. It is an error to use vmin/vmax when norm is given.  \nalphafloat, default: None\n\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).  \nlinewidthsfloat or array-like, default: rcParams[\"lines.linewidth\"] (default: 1.5)\n\n\nThe linewidth of the marker edges. Note: The default edgecolors is 'face'. You may want to change this as well.  \nedgecolors{'face', 'none', None} or color or sequence of color, default: rcParams[\"scatter.edgecolors\"] (default: 'face')\n\n\nThe edge color of the marker. Possible values:  'face': The edge color will always be the same as the face color. 'none': No patch boundary will be drawn. A color or sequence of colors.  For non-filled markers, edgecolors is ignored. Instead, the color is determined like with 'face', i.e. from c, colors, or facecolors.  \nplotnonfinitebool, default: False\n\n\nWhether to plot points with nonfinite c (i.e. inf, -inf or nan). If True the points are drawn with the bad colormap color (see Colormap.set_bad).    Returns \n PathCollection\n  Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, y, s, linewidths, edgecolors, c, facecolor, facecolors, color  \n**kwargsCollection properties\n\n    See also  plot\n\nTo plot scatter plots when markers are identical in size and color.    Notes  The plot function will be faster for scatterplots where markers don't vary in size or color. Any or all of x, y, s, and c may be masked arrays, in which case all masks will be combined and only unmasked points will be plotted. Fundamentally, scatter works with 1D arrays; x, y, s, and c may be input as N-D arrays, but within scatter they will be flattened. The exception is c, which will be flattened only if its size matches the size of x and y.  \n  Examples using matplotlib.axes.Axes.scatter\n \n   Scatter Custom Symbol   \n\n   Scatter Demo2   \n\n   Scatter plot with histograms   \n\n   Scatter plot with pie chart markers   \n\n   Scatter plots with a legend   \n\n   Advanced quiver and quiverkey functions   \n\n   Axes box aspect   \n\n   Axis Label Position   \n\n   Plot a confidence ellipse of a two-dimensional dataset   \n\n   Violin plot customization   \n\n   Scatter plot on polar axis   \n\n   Legend Demo   \n\n   Scatter Histogram (Locatable Axes)   \n\n   mpl_toolkits.axisartist.floating_axes features   \n\n   Rain simulation   \n\n   Zoom Window   \n\n   Plotting with keywords   \n\n   Zorder Demo   \n\n   Plot 2D data on 3D plot   \n\n   3D scatterplot   \n\n   Automatically setting tick positions   \n\n   Unit handling   \n\n   Annotate Text Arrow   \n\n   Polygon Selector   \n\n   Basic Usage   \n\n   Choosing Colormaps in Matplotlib   \n\n   scatter(x, y)   \n\n"}, {"name": "axes.Axes.secondary_xaxis", "path": "_as_gen/matplotlib.axes.axes.secondary_xaxis", "type": "axes", "text": "matplotlib.axes.Axes.secondary_xaxis   Axes.secondary_xaxis(location, *, functions=None, **kwargs)[source]\n \nAdd a second x-axis to this Axes. For example if we want to have a second scale for the data plotted on the xaxis.  Parameters \n \nlocation{'top', 'bottom', 'left', 'right'} or float\n\n\nThe position to put the secondary axis. Strings can be 'top' or 'bottom' for orientation='x' and 'right' or 'left' for orientation='y'. A float indicates the relative position on the parent axes to put the new axes, 0.0 being the bottom (or left) and 1.0 being the top (or right).  \nfunctions2-tuple of func, or Transform with an inverse\n\n\nIf a 2-tuple of functions, the user specifies the transform function and its inverse. i.e. functions=(lambda x: 2 / x, lambda x: 2 / x) would be an reciprocal transform with a factor of 2. The user can also directly supply a subclass of transforms.Transform so long as it has an inverse. See Secondary Axis for examples of making these conversions.    Returns \n \naxaxes._secondary_axes.SecondaryAxis\n\n  Other Parameters \n \n**kwargsAxes properties.\n\n\nOther miscellaneous axes parameters.      Warning This method is experimental as of 3.1, and the API may change.  Examples The main axis shows frequency, and the secondary axis shows period. (Source code, png, pdf)    \n  Examples using matplotlib.axes.Axes.secondary_xaxis\n \n   Secondary Axis   \n\n   Basic Usage   \n\n"}, {"name": "axes.Axes.secondary_yaxis", "path": "_as_gen/matplotlib.axes.axes.secondary_yaxis", "type": "axes", "text": "matplotlib.axes.Axes.secondary_yaxis   Axes.secondary_yaxis(location, *, functions=None, **kwargs)[source]\n \nAdd a second y-axis to this Axes. For example if we want to have a second scale for the data plotted on the yaxis.  Parameters \n \nlocation{'top', 'bottom', 'left', 'right'} or float\n\n\nThe position to put the secondary axis. Strings can be 'top' or 'bottom' for orientation='x' and 'right' or 'left' for orientation='y'. A float indicates the relative position on the parent axes to put the new axes, 0.0 being the bottom (or left) and 1.0 being the top (or right).  \nfunctions2-tuple of func, or Transform with an inverse\n\n\nIf a 2-tuple of functions, the user specifies the transform function and its inverse. i.e. functions=(lambda x: 2 / x, lambda x: 2 / x) would be an reciprocal transform with a factor of 2. The user can also directly supply a subclass of transforms.Transform so long as it has an inverse. See Secondary Axis for examples of making these conversions.    Returns \n \naxaxes._secondary_axes.SecondaryAxis\n\n  Other Parameters \n \n**kwargsAxes properties.\n\n\nOther miscellaneous axes parameters.      Warning This method is experimental as of 3.1, and the API may change.  Examples Add a secondary Axes that converts from radians to degrees (Source code, png, pdf)    \n  Examples using matplotlib.axes.Axes.secondary_yaxis\n \n   Secondary Axis   \n\n"}, {"name": "axes.Axes.semilogx", "path": "_as_gen/matplotlib.axes.axes.semilogx", "type": "axes", "text": "matplotlib.axes.Axes.semilogx   Axes.semilogx(*args, **kwargs)[source]\n \nMake a plot with log scaling on the x axis. Call signatures: semilogx([x], y, [fmt], data=None, **kwargs)\nsemilogx([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n This is just a thin wrapper around plot which additionally changes the x-axis to log scaling. All of the concepts and parameters of plot can be used here as well. The additional parameters base, subs, and nonpositive control the x-axis properties. They are just forwarded to Axes.set_xscale.  Parameters \n \nbasefloat, default: 10\n\n\nBase of the x logarithm.  \nsubsarray-like, optional\n\n\nThe location of the minor xticks. If None, reasonable locations are automatically chosen depending on the number of decades in the plot. See Axes.set_xscale for details.  \nnonpositive{'mask', 'clip'}, default: 'mask'\n\n\nNon-positive values in x can be masked as invalid, or clipped to a very small positive number.  **kwargs\n\nAll parameters supported by plot.    Returns \n list of Line2D\n\n\nObjects representing the plotted data.     \n  Examples using matplotlib.axes.Axes.semilogx\n \n   Log Demo   \n\n   Log Axis   \n\n   Transformations Tutorial   \n\n"}, {"name": "axes.Axes.semilogy", "path": "_as_gen/matplotlib.axes.axes.semilogy", "type": "axes", "text": "matplotlib.axes.Axes.semilogy   Axes.semilogy(*args, **kwargs)[source]\n \nMake a plot with log scaling on the y axis. Call signatures: semilogy([x], y, [fmt], data=None, **kwargs)\nsemilogy([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n This is just a thin wrapper around plot which additionally changes the y-axis to log scaling. All of the concepts and parameters of plot can be used here as well. The additional parameters base, subs, and nonpositive control the y-axis properties. They are just forwarded to Axes.set_yscale.  Parameters \n \nbasefloat, default: 10\n\n\nBase of the y logarithm.  \nsubsarray-like, optional\n\n\nThe location of the minor yticks. If None, reasonable locations are automatically chosen depending on the number of decades in the plot. See Axes.set_yscale for details.  \nnonpositive{'mask', 'clip'}, default: 'mask'\n\n\nNon-positive values in y can be masked as invalid, or clipped to a very small positive number.  **kwargs\n\nAll parameters supported by plot.    Returns \n list of Line2D\n\n\nObjects representing the plotted data.     \n  Examples using matplotlib.axes.Axes.semilogy\n \n   Log Demo   \n\n   SkewT-logP diagram: using transforms and custom projections   \n\n"}, {"name": "axes.Axes.set", "path": "_as_gen/matplotlib.axes.axes.set", "type": "axes", "text": "matplotlib.axes.Axes.set   Axes.set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n  Examples using matplotlib.axes.Axes.set\n \n   Curve with error band   \n\n   Bar chart with gradients   \n\n   Simple Plot   \n\n   Creating a timeline with lines, dates, and text   \n\n   Contour plot of irregularly spaced data   \n\n   Streamplot   \n\n   Axes Demo   \n\n   Creating multiple subplots using plt.subplots   \n\n   Boxplots   \n\n   Hexagonal binned plot   \n\n   Nested pie charts   \n\n   Annotating Plots   \n\n   Arrow Demo   \n\n   Usetex Baseline Test   \n\n   Text Commands   \n\n   Drawing fancy boxes   \n\n   Adding a colorbar to inset axes   \n\n   Inset Locator Demo   \n\n   Animated 3D random walk   \n\n   Zoom Window   \n\n   Manual Contour   \n\n   Plotting with keywords   \n\n   3D box surface plot   \n\n   Projecting contour profiles onto a graph   \n\n   Projecting filled contour onto a graph   \n\n   Generate polygons to fill under 3D line graph   \n\n   3D stem   \n\n   3D voxel / volumetric plot with rgb colors   \n\n   Log Demo   \n\n   Annotate Explain   \n\n   Connection styles for annotations   \n\n   Nested GridSpecs   \n\n   Simple Annotate01   \n\n   Mouse Cursor   \n\n   The Lifecycle of a Plot   \n\n   Arranging multiple Axes in a Figure   \n\n   plot(x, y)   \n\n   scatter(x, y)   \n\n   bar(x, height) / barh(y, width)   \n\n   stem(x, y)   \n\n   step(x, y)   \n\n   fill_between(x, y1, y2)   \n\n   barbs(X, Y, U, V)   \n\n   quiver(X, Y, U, V)   \n\n   hist(x)   \n\n   boxplot(X)   \n\n   errorbar(x, y, yerr, xerr)   \n\n   violinplot(D)   \n\n   eventplot(D)   \n\n   hist2d(x, y)   \n\n   hexbin(x, y, C)   \n\n   pie(x)   \n\n   tricontour(x, y, z)   \n\n   tricontourf(x, y, z)   \n\n   tripcolor(x, y, z)   \n\n   triplot(x, y)   \n\n"}, {"name": "axes.Axes.set_adjustable", "path": "_as_gen/matplotlib.axes.axes.set_adjustable", "type": "axes", "text": "matplotlib.axes.Axes.set_adjustable   Axes.set_adjustable(adjustable, share=False)[source]\n \nSet how the Axes adjusts to achieve the required aspect ratio.  Parameters \n \nadjustable{'box', 'datalim'}\n\n\nIf 'box', change the physical dimensions of the Axes. If 'datalim', change the x or y data limits.  \nsharebool, default: False\n\n\nIf True, apply the settings to all shared Axes.      See also  matplotlib.axes.Axes.set_aspect\n\nFor a description of aspect handling.    Notes Shared Axes (of which twinned Axes are a special case) impose restrictions on how aspect ratios can be imposed. For twinned Axes, use 'datalim'. For Axes that share both x and y, use 'box'. Otherwise, either 'datalim' or 'box' may be used. These limitations are partly a requirement to avoid over-specification, and partly a result of the particular implementation we are currently using, in which the adjustments for aspect ratios are done sequentially and independently on each Axes as it is drawn. \n  Examples using matplotlib.axes.Axes.set_adjustable\n \n   Loglog Aspect   \n\n"}, {"name": "axes.Axes.set_anchor", "path": "_as_gen/matplotlib.axes.axes.set_anchor", "type": "axes", "text": "matplotlib.axes.Axes.set_anchor   Axes.set_anchor(anchor, share=False)[source]\n \nDefine the anchor location. The actual drawing area (active position) of the Axes may be smaller than the Bbox (original position) when a fixed aspect is required. The anchor defines where the drawing area will be located within the available space.  Parameters \n \nanchor(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n\nEither an (x, y) pair of relative coordinates (0 is left or bottom, 1 is right or top), 'C' (center), or a cardinal direction ('SW', southwest, is bottom left, etc.). str inputs are shorthands for (x, y) coordinates, as shown in the following table: .. code-block:: none\n  \n'NW' (0.0, 1.0) 'N' (0.5, 1.0) 'NE' (1.0, 1.0)  \n'W' (0.0, 0.5) 'C' (0.5, 0.5) 'E' (1.0, 0.5)  \n'SW' (0.0, 0.0) 'S' (0.5, 0.0) 'SE' (1.0, 0.0)    \nsharebool, default: False\n\n\nIf True, apply the settings to all shared Axes.      See also  matplotlib.axes.Axes.set_aspect\n\nfor a description of aspect handling.    \n\n"}, {"name": "axes.Axes.set_aspect", "path": "_as_gen/matplotlib.axes.axes.set_aspect", "type": "axes", "text": "matplotlib.axes.Axes.set_aspect   Axes.set_aspect(aspect, adjustable=None, anchor=None, share=False)[source]\n \nSet the aspect ratio of the axes scaling, i.e. y/x-scale.  Parameters \n \naspect{'auto', 'equal'} or float\n\n\nPossible values:  'auto': fill the position rectangle with data. 'equal': same as aspect=1, i.e. same scaling for x and y. \nfloat: The displayed size of 1 unit in y-data coordinates will be aspect times the displayed size of 1 unit in x-data coordinates; e.g. for aspect=2 a square in data coordinates will be rendered with a height of twice its width.   \nadjustableNone or {'box', 'datalim'}, optional\n\n\nIf not None, this defines which parameter will be adjusted to meet the required aspect. See set_adjustable for further details.  \nanchorNone or str or (float, float), optional\n\n\nIf not None, this defines where the Axes will be drawn if there is extra space due to aspect constraints. The most common way to to specify the anchor are abbreviations of cardinal directions:   \nvalue description   \n'C' centered  \n'SW' lower left corner  \n'S' middle of bottom edge  \n'SE' lower right corner  \netc.    See set_anchor for further details.  \nsharebool, default: False\n\n\nIf True, apply the settings to all shared Axes.      See also  matplotlib.axes.Axes.set_adjustable\n\nSet how the Axes adjusts to achieve the required aspect ratio.  matplotlib.axes.Axes.set_anchor\n\nSet the position in case of extra space.    \n  Examples using matplotlib.axes.Axes.set_aspect\n \n   Bar chart with gradients   \n\n   Streamplot   \n\n   Tricontour Demo   \n\n   Tricontour Smooth Delaunay   \n\n   Tricontour Smooth User   \n\n   Trigradient Demo   \n\n   Tripcolor Demo   \n\n   Triplot Demo   \n\n   Axes box aspect   \n\n   Controlling view limits using margins and sticky_edges   \n\n   Placing Colorbars   \n\n   Multiline   \n\n   Mmh Donuts!!!   \n\n   Inset Locator Demo2   \n\n   Scatter Histogram (Locatable Axes)   \n\n   Simple Anchored Artists   \n\n   axis_direction demo   \n\n   Simple Axis Pad   \n\n   The double pendulum problem   \n\n   Anchored Artists   \n\n   Rasterization for vector graphics   \n\n   Loglog Aspect   \n\n   Annotate Text Arrow   \n\n   Transformations Tutorial   \n\n   Colormap Normalization   \n\n"}, {"name": "axes.Axes.set_autoscale_on", "path": "_as_gen/matplotlib.axes.axes.set_autoscale_on", "type": "axes", "text": "matplotlib.axes.Axes.set_autoscale_on   Axes.set_autoscale_on(b)[source]\n \nSet whether autoscaling is applied to each axis on the next draw or call to Axes.autoscale_view.  Parameters \n \nbbool\n\n   \n  Examples using matplotlib.axes.Axes.set_autoscale_on\n \n   Resampling Data   \n\n"}, {"name": "axes.Axes.set_autoscalex_on", "path": "_as_gen/matplotlib.axes.axes.set_autoscalex_on", "type": "axes", "text": "matplotlib.axes.Axes.set_autoscalex_on   Axes.set_autoscalex_on(b)[source]\n \nSet whether the x-axis is autoscaled on the next draw or call to Axes.autoscale_view.  Parameters \n \nbbool\n\n   \n\n"}, {"name": "axes.Axes.set_autoscaley_on", "path": "_as_gen/matplotlib.axes.axes.set_autoscaley_on", "type": "axes", "text": "matplotlib.axes.Axes.set_autoscaley_on   Axes.set_autoscaley_on(b)[source]\n \nSet whether the y-axis is autoscaled on the next draw or call to Axes.autoscale_view.  Parameters \n \nbbool\n\n   \n\n"}, {"name": "axes.Axes.set_axes_locator", "path": "_as_gen/matplotlib.axes.axes.set_axes_locator", "type": "axes", "text": "matplotlib.axes.Axes.set_axes_locator   Axes.set_axes_locator(locator)[source]\n \nSet the Axes locator.  Parameters \n \nlocatorCallable[[Axes, Renderer], Bbox]\n\n   \n  Examples using matplotlib.axes.Axes.set_axes_locator\n \n   HBoxDivider demo   \n\n"}, {"name": "axes.Axes.set_axis_off", "path": "_as_gen/matplotlib.axes.axes.set_axis_off", "type": "axes", "text": "matplotlib.axes.Axes.set_axis_off   Axes.set_axis_off()[source]\n \nTurn the x- and y-axis off. This affects the axis lines, ticks, ticklabels, grid and axis labels. \n  Examples using matplotlib.axes.Axes.set_axis_off\n \n   Marker reference   \n\n   Barcode   \n\n   Blend transparency with color in 2D images   \n\n   Nested pie charts   \n\n   Annotation arrow style reference   \n\n   Precise text layout   \n\n   Drawing fancy boxes   \n\n   Choosing Colormaps in Matplotlib   \n\n   Text properties and layout   \n\n"}, {"name": "axes.Axes.set_axis_on", "path": "_as_gen/matplotlib.axes.axes.set_axis_on", "type": "axes", "text": "matplotlib.axes.Axes.set_axis_on   Axes.set_axis_on()[source]\n \nTurn the x- and y-axis on. This affects the axis lines, ticks, ticklabels, grid and axis labels. \n\n"}, {"name": "axes.Axes.set_axisbelow", "path": "_as_gen/matplotlib.axes.axes.set_axisbelow", "type": "axes", "text": "matplotlib.axes.Axes.set_axisbelow   Axes.set_axisbelow(b)[source]\n \nSet whether axis ticks and gridlines are above or below most artists. This controls the zorder of the ticks and gridlines. For more information on the zorder see Zorder Demo.  Parameters \n \nbbool or 'line'\n\n\nPossible values:  \nTrue (zorder = 0.5): Ticks and gridlines are below all Artists. 'line' (zorder = 1.5): Ticks and gridlines are above patches (e.g. rectangles, with default zorder = 1) but still below lines and markers (with their default zorder = 2). \nFalse (zorder = 2.5): Ticks and gridlines are above patches and lines / markers.       See also  get_axisbelow\n  \n\n"}, {"name": "axes.Axes.set_box_aspect", "path": "_as_gen/matplotlib.axes.axes.set_box_aspect", "type": "axes", "text": "matplotlib.axes.Axes.set_box_aspect   Axes.set_box_aspect(aspect=None)[source]\n \nSet the Axes box aspect, i.e. the ratio of height to width. This defines the aspect of the Axes in figure space and is not to be confused with the data aspect (see set_aspect).  Parameters \n \naspectfloat or None\n\n\nChanges the physical dimensions of the Axes, such that the ratio of the Axes height to the Axes width in physical units is equal to aspect. Defining a box aspect will change the adjustable property to 'datalim' (see set_adjustable). None will disable a fixed box aspect so that height and width of the Axes are chosen independently.      See also  matplotlib.axes.Axes.set_aspect\n\nfor a description of aspect handling.    \n  Examples using matplotlib.axes.Axes.set_box_aspect\n \n   Axes box aspect   \n\n"}, {"name": "axes.Axes.set_facecolor", "path": "_as_gen/matplotlib.axes.axes.set_facecolor", "type": "axes", "text": "matplotlib.axes.Axes.set_facecolor   Axes.set_facecolor(color)[source]\n \nSet the facecolor of the Axes.  Parameters \n \ncolorcolor\n\n   \n  Examples using matplotlib.axes.Axes.set_facecolor\n \n   Color Demo   \n\n"}, {"name": "axes.Axes.set_frame_on", "path": "_as_gen/matplotlib.axes.axes.set_frame_on", "type": "axes", "text": "matplotlib.axes.Axes.set_frame_on   Axes.set_frame_on(b)[source]\n \nSet whether the Axes rectangle patch is drawn.  Parameters \n \nbbool\n\n   \n\n"}, {"name": "axes.Axes.set_navigate", "path": "_as_gen/matplotlib.axes.axes.set_navigate", "type": "axes", "text": "matplotlib.axes.Axes.set_navigate   Axes.set_navigate(b)[source]\n \nSet whether the Axes responds to navigation toolbar commands.  Parameters \n \nbbool\n\n   \n\n"}, {"name": "axes.Axes.set_navigate_mode", "path": "_as_gen/matplotlib.axes.axes.set_navigate_mode", "type": "axes", "text": "matplotlib.axes.Axes.set_navigate_mode   Axes.set_navigate_mode(b)[source]\n \nSet the navigation toolbar button status.  Warning this is not a user-API function.  \n\n"}, {"name": "axes.Axes.set_position", "path": "_as_gen/matplotlib.axes.axes.set_position", "type": "axes", "text": "matplotlib.axes.Axes.set_position   Axes.set_position(pos, which='both')[source]\n \nSet the Axes position. Axes have two position attributes. The 'original' position is the position allocated for the Axes. The 'active' position is the position the Axes is actually drawn at. These positions are usually the same unless a fixed aspect is set to the Axes. See Axes.set_aspect for details.  Parameters \n \npos[left, bottom, width, height] or Bbox\n\n\nThe new position of the in Figure coordinates.  \nwhich{'both', 'active', 'original'}, default: 'both'\n\n\nDetermines which position variables to change.      See also  matplotlib.transforms.Bbox.from_bounds\nmatplotlib.transforms.Bbox.from_extents\n  \n  Examples using matplotlib.axes.Axes.set_position\n \n   Contour Demo   \n\n"}, {"name": "axes.Axes.set_prop_cycle", "path": "_as_gen/matplotlib.axes.axes.set_prop_cycle", "type": "axes", "text": "matplotlib.axes.Axes.set_prop_cycle   Axes.set_prop_cycle(*args, **kwargs)[source]\n \nSet the property cycle of the Axes. The property cycle controls the style properties such as color, marker and linestyle of future plot commands. The style properties of data already added to the Axes are not modified. Call signatures: set_prop_cycle(cycler)\nset_prop_cycle(label=values[, label2=values2[, ...]])\nset_prop_cycle(label, values)\n Form 1 sets given Cycler object. Form 2 creates a Cycler which cycles over one or more properties simultaneously and set it as the property cycle of the Axes. If multiple properties are given, their value lists must have the same length. This is just a shortcut for explicitly creating a cycler and passing it to the function, i.e. it's short for set_prop_cycle(cycler(label=values label2=values2, ...)). Form 3 creates a Cycler for a single property and set it as the property cycle of the Axes. This form exists for compatibility with the original cycler.cycler interface. Its use is discouraged in favor of the kwarg form, i.e. set_prop_cycle(label=values).  Parameters \n \ncyclerCycler\n\n\nSet the given Cycler. None resets to the cycle defined by the current style.  \nlabelstr\n\n\nThe property key. Must be a valid Artist property. For example, 'color' or 'linestyle'. Aliases are allowed, such as 'c' for 'color' and 'lw' for 'linewidth'.  \nvaluesiterable\n\n\nFinite-length iterable of the property values. These values are validated and will raise a ValueError if invalid.      See also  matplotlib.rcsetup.cycler\n\nConvenience function for creating validated cyclers for properties.  cycler.cycler\n\nThe original function for creating unvalidated cyclers.    Examples Setting the property cycle for a single property: >>> ax.set_prop_cycle(color=['red', 'green', 'blue'])\n Setting the property cycle for simultaneously cycling over multiple properties (e.g. red circle, green plus, blue cross): >>> ax.set_prop_cycle(color=['red', 'green', 'blue'],\n...                   marker=['o', '+', 'x'])\n \n  Examples using matplotlib.axes.Axes.set_prop_cycle\n \n   Bachelor's degrees by gender   \n\n   Styling with cycler   \n\n"}, {"name": "axes.Axes.set_rasterization_zorder", "path": "_as_gen/matplotlib.axes.axes.set_rasterization_zorder", "type": "axes", "text": "matplotlib.axes.Axes.set_rasterization_zorder   Axes.set_rasterization_zorder(z)[source]\n \nSet the zorder threshold for rasterization for vector graphics output. All artists with a zorder below the given value will be rasterized if they support rasterization. This setting is ignored for pixel-based output. See also Rasterization for vector graphics.  Parameters \n \nzfloat or None\n\n\nThe zorder below which artists are rasterized. If None rasterization based on zorder is deactivated.     \n  Examples using matplotlib.axes.Axes.set_rasterization_zorder\n \n   Rasterization for vector graphics   \n\n"}, {"name": "axes.Axes.set_title", "path": "_as_gen/matplotlib.axes.axes.set_title", "type": "axes", "text": "matplotlib.axes.Axes.set_title   Axes.set_title(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)[source]\n \nSet a title for the Axes. Set one of the three available Axes titles. The available titles are positioned above the Axes in the center, flush with the left edge, and flush with the right edge.  Parameters \n \nlabelstr\n\n\nText to use for the title  \nfontdictdict\n\n\nA dictionary controlling the appearance of the title text, the default fontdict is: {'fontsize': rcParams['axes.titlesize'],\n 'fontweight': rcParams['axes.titleweight'],\n 'color': rcParams['axes.titlecolor'],\n 'verticalalignment': 'baseline',\n 'horizontalalignment': loc}\n  \nloc{'center', 'left', 'right'}, default: rcParams[\"axes.titlelocation\"] (default: 'center')\n\n\nWhich title to set.  \nyfloat, default: rcParams[\"axes.titley\"] (default: None)\n\n\nVertical Axes loation for the title (1.0 is the top). If None (the default), y is determined automatically to avoid decorators on the Axes.  \npadfloat, default: rcParams[\"axes.titlepad\"] (default: 6.0)\n\n\nThe offset of the title from the top of the Axes, in points.    Returns \n Text\n\nThe matplotlib text instance representing the title    Other Parameters \n \n**kwargsText properties\n\n\nOther keyword arguments are text properties, see Text for a list of valid text properties.     \n  Examples using matplotlib.axes.Axes.set_title\n \n   Bar Label Demo   \n\n   Stacked bar chart   \n\n   Grouped bar chart with labels   \n\n   Horizontal bar chart   \n\n   Errorbar subsampling   \n\n   EventCollection Demo   \n\n   Fill Between and Alpha   \n\n   Filling the area between lines   \n\n   Fill Betweenx Demo   \n\n   Hat graph   \n\n   Markevery Demo   \n\n   Psd Demo   \n\n   Scatter Demo2   \n\n   Using span_where   \n\n   Stackplots and streamgraphs   \n\n   hlines and vlines   \n\n   Contour Corner Mask   \n\n   Contour Demo   \n\n   Contour Label Demo   \n\n   Contourf Demo   \n\n   Creating annotated heatmaps   \n\n   Image antialiasing   \n\n   Image Demo   \n\n   Image Masked   \n\n   Image Nonuniform   \n\n   Interpolations for imshow   \n\n   Contour plot of irregularly spaced data   \n\n   Pcolor Demo   \n\n   pcolormesh grids and shading   \n\n   pcolormesh   \n\n   Streamplot   \n\n   Advanced quiver and quiverkey functions   \n\n   Tricontour Demo   \n\n   Tricontour Smooth Delaunay   \n\n   Tricontour Smooth User   \n\n   Trigradient Demo   \n\n   Tripcolor Demo   \n\n   Triplot Demo   \n\n   Axes Demo   \n\n   Controlling view limits using margins and sticky_edges   \n\n   Resizing axes with constrained layout   \n\n   Resizing axes with tight layout   \n\n   Figure labels: suptitle, supxlabel, supylabel   \n\n   Invert Axes   \n\n   Secondary Axis   \n\n   Figure subfigures   \n\n   Creating multiple subplots using plt.subplots   \n\n   Box plots with custom fill colors   \n\n   Plot a confidence ellipse of a two-dimensional dataset   \n\n   Violin plot customization   \n\n   Different ways of specifying error bars   \n\n   Including upper and lower limits in error bars   \n\n   Hexagonal binned plot   \n\n   Using histograms to plot a cumulative distribution   \n\n   Some features of the histogram (hist) function   \n\n   The histogram (hist) function with multiple data sets   \n\n   Bar of pie   \n\n   Labeling a pie and a donut   \n\n   Polar plot   \n\n   Using accented text in matplotlib   \n\n   Scale invariant angle label   \n\n   Date tick labels   \n\n   Custom tick formatter for time series   \n\n   Labeling ticks using engineering notation   \n\n   Using a ttf font file in Matplotlib   \n\n   Labelling subplots   \n\n   Legend Demo   \n\n   Mathtext   \n\n   Math fontfamily   \n\n   Multiline   \n\n   Rendering math equations using TeX   \n\n   Title positioning   \n\n   Boxplot Demo   \n\n   Simple axes labels   \n\n   Text Commands   \n\n   Color Demo   \n\n   Creating a colormap from a list of colors   \n\n   Line, Poly and RegularPoly Collection with autoscaling   \n\n   Compound path   \n\n   Mmh Donuts!!!   \n\n   Line Collection   \n\n   Bezier Curve   \n\n   Bayesian Methods for Hackers style sheet   \n\n   Dark background style sheet   \n\n   FiveThirtyEight style sheet   \n\n   Make Room For Ylabel Using Axesgrid   \n\n   Axis Direction   \n\n   Anatomy of a figure   \n\n   XKCD   \n\n   pyplot animation   \n\n   Data Browser   \n\n   Image Slices Viewer   \n\n   Keypress event   \n\n   Lasso Demo   \n\n   Legend Picking   \n\n   Looking Glass   \n\n   Path Editor   \n\n   Pick Event Demo2   \n\n   Poly Editor   \n\n   Trifinder Event Demo   \n\n   Viewlims   \n\n   Cross hair cursor   \n\n   Packed-bubble chart   \n\n   Pythonic Matplotlib   \n\n   Rasterization for vector graphics   \n\n   Zorder Demo   \n\n   Demo of 3D bar charts   \n\n   Lorenz Attractor   \n\n   3D wireframe plots in one direction   \n\n   Loglog Aspect   \n\n   Exploring normalizations   \n\n   Scales   \n\n   Radar chart (aka spider or star chart)   \n\n   Topographic hillshading   \n\n   Spine Placement   \n\n   Spines   \n\n   Dropped spines   \n\n   Colorbar Tick Labelling   \n\n   Date Precision and Epochs   \n\n   Set default x-axis tick labels on the top   \n\n   Artist tests   \n\n   Group barchart with units   \n\n   Evans test   \n\n   Interactive Adjustment of Colormap Range   \n\n   Annotated Cursor   \n\n   Rectangle and ellipse selectors   \n\n   Span Selector   \n\n   Basic Usage   \n\n   Image tutorial   \n\n   Artist tutorial   \n\n   Styling with cycler   \n\n   Constrained Layout Guide   \n\n   Tight Layout guide   \n\n   Transformations Tutorial   \n\n   Specifying Colors   \n\n   Colormap Normalization   \n\n   Text in Matplotlib Plots   \n\n"}, {"name": "axes.Axes.set_xbound", "path": "_as_gen/matplotlib.axes.axes.set_xbound", "type": "axes", "text": "matplotlib.axes.Axes.set_xbound   Axes.set_xbound(lower=None, upper=None)[source]\n \nSet the lower and upper numerical bounds of the x-axis. This method will honor axis inversion regardless of parameter order. It will not change the autoscaling setting (get_autoscalex_on()).  Parameters \n \nlower, upperfloat or None\n\n\nThe lower and upper bounds. If None, the respective axis bound is not modified.      See also  get_xbound\n\nget_xlim, set_xlim\n\n\ninvert_xaxis, xaxis_inverted\n\n  \n\n"}, {"name": "axes.Axes.set_xlabel", "path": "_as_gen/matplotlib.axes.axes.set_xlabel", "type": "axes", "text": "matplotlib.axes.Axes.set_xlabel   Axes.set_xlabel(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)[source]\n \nSet the label for the x-axis.  Parameters \n \nxlabelstr\n\n\nThe label text.  \nlabelpadfloat, default: rcParams[\"axes.labelpad\"] (default: 4.0)\n\n\nSpacing in points from the Axes bounding box including ticks and tick labels. If None, the previous value is left as is.  \nloc{'left', 'center', 'right'}, default: rcParams[\"xaxis.labellocation\"] (default: 'center')\n\n\nThe label position. This is a high-level alternative for passing parameters x and horizontalalignment.    Other Parameters \n \n**kwargsText properties\n\n\nText properties control the appearance of the label.      See also  text\n\nDocuments the properties supported by Text.    \n  Examples using matplotlib.axes.Axes.set_xlabel\n \n   Bar Label Demo   \n\n   Horizontal bar chart   \n\n   Broken Barh   \n\n   CSD Demo   \n\n   Fill Between and Alpha   \n\n   Filling the area between lines   \n\n   Fill Betweenx Demo   \n\n   Hatch-filled histograms   \n\n   Hat graph   \n\n   Psd Demo   \n\n   Scatter Demo2   \n\n   Stackplots and streamgraphs   \n\n   hlines and vlines   \n\n   Contourf Demo   \n\n   Tricontour Demo   \n\n   Tripcolor Demo   \n\n   Triplot Demo   \n\n   Aligning Labels   \n\n   Axes Demo   \n\n   Axis Label Position   \n\n   Resizing axes with constrained layout   \n\n   Resizing axes with tight layout   \n\n   Figure labels: suptitle, supxlabel, supylabel   \n\n   Invert Axes   \n\n   Secondary Axis   \n\n   Figure subfigures   \n\n   Multiple subplots   \n\n   Plots with different scales   \n\n   Box plots with custom fill colors   \n\n   Boxplots   \n\n   Box plot vs. violin plot comparison   \n\n   Violin plot customization   \n\n   Using histograms to plot a cumulative distribution   \n\n   Some features of the histogram (hist) function   \n\n   Producing multiple histograms side by side   \n\n   Using accented text in matplotlib   \n\n   Labeling ticks using engineering notation   \n\n   Using a ttf font file in Matplotlib   \n\n   Legend Demo   \n\n   Mathtext   \n\n   Multiline   \n\n   Rendering math equations using TeX   \n\n   Title positioning   \n\n   Simple axes labels   \n\n   Text Commands   \n\n   Color Demo   \n\n   Line, Poly and RegularPoly Collection with autoscaling   \n\n   Ellipse Collection   \n\n   Dark background style sheet   \n\n   Make Room For Ylabel Using Axesgrid   \n\n   Parasite Simple   \n\n   Parasite Axes demo   \n\n   Parasite axis demo   \n\n   Ticklabel alignment   \n\n   Simple Axis Direction03   \n\n   Simple Axisline   \n\n   Anatomy of a figure   \n\n   XKCD   \n\n   Keypress event   \n\n   Pythonic Matplotlib   \n\n   Plot 2D data on 3D plot   \n\n   Create 2D bar graphs in different planes   \n\n   3D errorbars   \n\n   Lorenz Attractor   \n\n   Automatic Text Offsetting   \n\n   3D scatterplot   \n\n   3D surface with polar coordinates   \n\n   Text annotations in 3D   \n\n   Log Bar   \n\n   MRI With EEG   \n\n   Multiple Yaxis With Spines   \n\n   Centering labels between ticks   \n\n   Pgf Fonts   \n\n   Pgf Texsystem   \n\n   Slider   \n\n   Basic Usage   \n\n   Artist tutorial   \n\n   Constrained Layout Guide   \n\n   Tight Layout guide   \n\n   Arranging multiple Axes in a Figure   \n\n   Choosing Colormaps in Matplotlib   \n\n   Text in Matplotlib Plots   \n\n"}, {"name": "axes.Axes.set_xlim", "path": "_as_gen/matplotlib.axes.axes.set_xlim", "type": "axes", "text": "matplotlib.axes.Axes.set_xlim   Axes.set_xlim(left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None)[source]\n \nSet the x-axis view limits.  Parameters \n \nleftfloat, optional\n\n\nThe left xlim in data coordinates. Passing None leaves the limit unchanged. The left and right xlims may also be passed as the tuple (left, right) as the first positional argument (or as the left keyword argument).  \nrightfloat, optional\n\n\nThe right xlim in data coordinates. Passing None leaves the limit unchanged.  \nemitbool, default: True\n\n\nWhether to notify observers of limit change.  \nautobool or None, default: False\n\n\nWhether to turn on autoscaling of the x-axis. True turns on, False turns off, None leaves unchanged.  \nxmin, xmaxfloat, optional\n\n\nThey are equivalent to left and right respectively, and it is an error to pass both xmin and left or xmax and right.    Returns \n \nleft, right(float, float)\n\n\nThe new x-axis limits in data coordinates.      See also  get_xlim\n\nset_xbound, get_xbound\n\n\ninvert_xaxis, xaxis_inverted\n\n  Notes The left value may be greater than the right value, in which case the x-axis values will decrease from left to right. Examples >>> set_xlim(left, right)\n>>> set_xlim((left, right))\n>>> left, right = set_xlim(left, right)\n One limit may be left unchanged. >>> set_xlim(right=right_lim)\n Limits may be passed in reverse order to flip the direction of the x-axis. For example, suppose x represents the number of years before present. The x-axis limits might be set like the following so 5000 years ago is on the left of the plot and the present is on the right. >>> set_xlim(5000, 0)\n \n  Examples using matplotlib.axes.Axes.set_xlim\n \n   Bar Label Demo   \n\n   Broken Barh   \n\n   CSD Demo   \n\n   EventCollection Demo   \n\n   Markevery Demo   \n\n   Contouring the solution space of optimizations   \n\n   Image Nonuniform   \n\n   pcolormesh grids and shading   \n\n   Axes box aspect   \n\n   Axes Demo   \n\n   Figure labels: suptitle, supxlabel, supylabel   \n\n   Invert Axes   \n\n   Zoom region inset axes   \n\n   Boxplots   \n\n   Violin plot customization   \n\n   Including upper and lower limits in error bars   \n\n   Bar of pie   \n\n   AnnotationBbox demo   \n\n   Using a text as a Path   \n\n   Text Rotation Relative To Line   \n\n   Annotate Transform   \n\n   Mmh Donuts!!!   \n\n   Ellipse Demo   \n\n   Line Collection   \n\n   Inset Locator Demo2   \n\n   Parasite Simple2   \n\n   axis_direction demo   \n\n   Parasite Axes demo   \n\n   Parasite axis demo   \n\n   Simple Axis Pad   \n\n   Anatomy of a figure   \n\n   Bachelor's degrees by gender   \n\n   XKCD   \n\n   Decay   \n\n   Rain simulation   \n\n   Path Editor   \n\n   Poly Editor   \n\n   Resampling Data   \n\n   Zoom Window   \n\n   Frontpage contour example   \n\n   Frontpage plot example   \n\n   Custom projection   \n\n   Building histograms using Rectangles and PolyCollections   \n\n   SVG Filter Line   \n\n   TickedStroke patheffect   \n\n   Plot 2D data on 3D plot   \n\n   Draw flat objects in 3D plot   \n\n   Text annotations in 3D   \n\n   Loglog Aspect   \n\n   Scales   \n\n   MRI With EEG   \n\n   SkewT-logP diagram: using transforms and custom projections   \n\n   Multiple Yaxis With Spines   \n\n   Custom spine bounds   \n\n   Formatting date ticks using ConciseDateFormatter   \n\n   Date Demo Convert   \n\n   Annotation with units   \n\n   Artist tests   \n\n   Annotate Text Arrow   \n\n   Connect Simple01   \n\n   Annotated Cursor   \n\n   Cursor   \n\n   Span Selector   \n\n   Path Tutorial   \n\n   Transformations Tutorial   \n\n   Specifying Colors   \n\n   Choosing Colormaps in Matplotlib   \n\n"}, {"name": "axes.Axes.set_xmargin", "path": "_as_gen/matplotlib.axes.axes.set_xmargin", "type": "axes", "text": "matplotlib.axes.Axes.set_xmargin   Axes.set_xmargin(m)[source]\n \nSet padding of X data limits prior to autoscaling. m times the data interval will be added to each end of that interval before it is used in autoscaling. For example, if your data is in the range [0, 2], a factor of m = 0.1 will result in a range [-0.2, 2.2]. Negative values -0.5 < m < 0 will result in clipping of the data range. I.e. for a data range [0, 2], a factor of m = -0.1 will result in a range [0.2, 1.8].  Parameters \n \nmfloat greater than -0.5\n\n   \n  Examples using matplotlib.axes.Axes.set_xmargin\n \n   Automatically setting tick positions   \n\n"}, {"name": "axes.Axes.set_xscale", "path": "_as_gen/matplotlib.axes.axes.set_xscale", "type": "axes", "text": "matplotlib.axes.Axes.set_xscale   Axes.set_xscale(value, **kwargs)[source]\n \nSet the x-axis scale.  Parameters \n \nvalue{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase\n\n\nThe axis scale type to apply.  **kwargs\n\nDifferent keyword arguments are accepted, depending on the scale. See the respective class keyword arguments:  matplotlib.scale.LinearScale matplotlib.scale.LogScale matplotlib.scale.SymmetricalLogScale matplotlib.scale.LogitScale matplotlib.scale.FuncScale      Notes By default, Matplotlib supports the above mentioned scales. Additionally, custom scales may be registered using matplotlib.scale.register_scale. These scales can then also be used here. \n  Examples using matplotlib.axes.Axes.set_xscale\n \n   Markevery Demo   \n\n   Labeling ticks using engineering notation   \n\n   Inset Locator Demo   \n\n   Loglog Aspect   \n\n   Log Demo   \n\n   Symlog Demo   \n\n   Transformations Tutorial   \n\n"}, {"name": "axes.Axes.set_xticklabels", "path": "_as_gen/matplotlib.axes.axes.set_xticklabels", "type": "axes", "text": "matplotlib.axes.Axes.set_xticklabels   Axes.set_xticklabels(labels, *, fontdict=None, minor=False, **kwargs)[source]\n \nSet the xaxis' labels with list of string labels.  Warning This method should only be used after fixing the tick positions using Axes.set_xticks. Otherwise, the labels may end up in unexpected positions.   Parameters \n \nlabelslist of str\n\n\nThe label texts.  \nfontdictdict, optional\n\n\nA dictionary controlling the appearance of the ticklabels. The default fontdict is: {'fontsize': rcParams['axes.titlesize'],\n 'fontweight': rcParams['axes.titleweight'],\n 'verticalalignment': 'baseline',\n 'horizontalalignment': loc}\n  \nminorbool, default: False\n\n\nWhether to set the minor ticklabels rather than the major ones.    Returns \n list of Text\n\n\nThe labels.    Other Parameters \n \n**kwargsText properties.\n\n   \n  Examples using matplotlib.axes.Axes.set_xticklabels\n \n   Managing multiple figures in pyplot   \n\n   Zoom region inset axes   \n\n   Boxplots   \n\n   Rendering math equations using TeX   \n\n   XKCD   \n\n   Colorbar Tick Labelling   \n\n   Constrained Layout Guide   \n\n"}, {"name": "axes.Axes.set_xticks", "path": "_as_gen/matplotlib.axes.axes.set_xticks", "type": "axes", "text": "matplotlib.axes.Axes.set_xticks   Axes.set_xticks(ticks, labels=None, *, minor=False, **kwargs)[source]\n \nSet the xaxis' tick locations and optionally labels. If necessary, the view limits of the Axis are expanded so that all given ticks are visible.  Parameters \n \ntickslist of floats\n\n\nList of tick locations.  \nlabelslist of str, optional\n\n\nList of tick labels. If not set, the labels show the data value.  \nminorbool, default: False\n\n\nIf False, set the major ticks; if True, the minor ticks.  **kwargs\n\nText properties for the labels. These take effect only if you pass labels. In other cases, please use tick_params.     Notes The mandatory expansion of the view limits is an intentional design choice to prevent the surprise of a non-visible tick. If you need other limits, you should set the limits explicitly after setting the ticks. \n  Examples using matplotlib.axes.Axes.set_xticks\n \n   Bar Label Demo   \n\n   Grouped bar chart with labels   \n\n   Hat graph   \n\n   Psd Demo   \n\n   Creating annotated heatmaps   \n\n   Box plot vs. violin plot comparison   \n\n   Violin plot customization   \n\n   Producing multiple histograms side by side   \n\n   Multiline   \n\n   Rendering math equations using TeX   \n\n   ggplot style sheet   \n\n   Scatter Histogram (Locatable Axes)   \n\n   Simple Axisline4   \n\n   Ticklabel alignment   \n\n   Ticklabel direction   \n\n   Bachelor's degrees by gender   \n\n   Integral as the area under a curve   \n\n   Shaded & power normalized rendering   \n\n   XKCD   \n\n   Rain simulation   \n\n   MATPLOTLIB UNCHAINED   \n\n   Frontpage 3D example   \n\n   Frontpage contour example   \n\n   Frontpage histogram example   \n\n   Frontpage plot example   \n\n   Log Bar   \n\n   MRI With EEG   \n\n   Custom spine bounds   \n\n   Group barchart with units   \n\n   The Lifecycle of a Plot   \n\n"}, {"name": "axes.Axes.set_ybound", "path": "_as_gen/matplotlib.axes.axes.set_ybound", "type": "axes", "text": "matplotlib.axes.Axes.set_ybound   Axes.set_ybound(lower=None, upper=None)[source]\n \nSet the lower and upper numerical bounds of the y-axis. This method will honor axis inversion regardless of parameter order. It will not change the autoscaling setting (get_autoscaley_on()).  Parameters \n \nlower, upperfloat or None\n\n\nThe lower and upper bounds. If None, the respective axis bound is not modified.      See also  get_ybound\n\nget_ylim, set_ylim\n\n\ninvert_yaxis, yaxis_inverted\n\n  \n\n"}, {"name": "axes.Axes.set_ylabel", "path": "_as_gen/matplotlib.axes.axes.set_ylabel", "type": "axes", "text": "matplotlib.axes.Axes.set_ylabel   Axes.set_ylabel(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)[source]\n \nSet the label for the y-axis.  Parameters \n \nylabelstr\n\n\nThe label text.  \nlabelpadfloat, default: rcParams[\"axes.labelpad\"] (default: 4.0)\n\n\nSpacing in points from the Axes bounding box including ticks and tick labels. If None, the previous value is left as is.  \nloc{'bottom', 'center', 'top'}, default: rcParams[\"yaxis.labellocation\"] (default: 'center')\n\n\nThe label position. This is a high-level alternative for passing parameters y and horizontalalignment.    Other Parameters \n \n**kwargsText properties\n\n\nText properties control the appearance of the label.      See also  text\n\nDocuments the properties supported by Text.    \n  Examples using matplotlib.axes.Axes.set_ylabel\n \n   Bar Label Demo   \n\n   Stacked bar chart   \n\n   Grouped bar chart with labels   \n\n   CSD Demo   \n\n   Fill Between and Alpha   \n\n   Hatch-filled histograms   \n\n   Hat graph   \n\n   Psd Demo   \n\n   Scatter Demo2   \n\n   Stackplots and streamgraphs   \n\n   Contourf Demo   \n\n   Creating annotated heatmaps   \n\n   Tricontour Demo   \n\n   Tripcolor Demo   \n\n   Triplot Demo   \n\n   Aligning Labels   \n\n   Axes Demo   \n\n   Axis Label Position   \n\n   Resizing axes with constrained layout   \n\n   Resizing axes with tight layout   \n\n   Figure labels: suptitle, supxlabel, supylabel   \n\n   Invert Axes   \n\n   Secondary Axis   \n\n   Figure subfigures   \n\n   Multiple subplots   \n\n   Plots with different scales   \n\n   Box plots with custom fill colors   \n\n   Boxplots   \n\n   Box plot vs. violin plot comparison   \n\n   Violin plot customization   \n\n   Using histograms to plot a cumulative distribution   \n\n   Some features of the histogram (hist) function   \n\n   Producing multiple histograms side by side   \n\n   Using accented text in matplotlib   \n\n   Date tick labels   \n\n   Legend Demo   \n\n   Mathtext   \n\n   Multiline   \n\n   Rendering math equations using TeX   \n\n   Simple axes labels   \n\n   Text Commands   \n\n   Color Demo   \n\n   Line, Poly and RegularPoly Collection with autoscaling   \n\n   Ellipse Collection   \n\n   Dark background style sheet   \n\n   Make Room For Ylabel Using Axesgrid   \n\n   Parasite Simple   \n\n   Parasite Axes demo   \n\n   Parasite axis demo   \n\n   Ticklabel alignment   \n\n   Simple Axis Direction03   \n\n   Simple Axisline   \n\n   Anatomy of a figure   \n\n   XKCD   \n\n   Pythonic Matplotlib   \n\n   Plot 2D data on 3D plot   \n\n   Create 2D bar graphs in different planes   \n\n   3D errorbars   \n\n   Lorenz Attractor   \n\n   2D and 3D Axes in same Figure   \n\n   Automatic Text Offsetting   \n\n   3D scatterplot   \n\n   3D surface with polar coordinates   \n\n   Text annotations in 3D   \n\n   Log Bar   \n\n   Symlog Demo   \n\n   MRI With EEG   \n\n   Topographic hillshading   \n\n   Multiple Yaxis With Spines   \n\n   Basic Usage   \n\n   Artist tutorial   \n\n   Constrained Layout Guide   \n\n   Tight Layout guide   \n\n   Arranging multiple Axes in a Figure   \n\n   Choosing Colormaps in Matplotlib   \n\n   Text in Matplotlib Plots   \n\n"}, {"name": "axes.Axes.set_ylim", "path": "_as_gen/matplotlib.axes.axes.set_ylim", "type": "axes", "text": "matplotlib.axes.Axes.set_ylim   Axes.set_ylim(bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None)[source]\n \nSet the y-axis view limits.  Parameters \n \nbottomfloat, optional\n\n\nThe bottom ylim in data coordinates. Passing None leaves the limit unchanged. The bottom and top ylims may also be passed as the tuple (bottom, top) as the first positional argument (or as the bottom keyword argument).  \ntopfloat, optional\n\n\nThe top ylim in data coordinates. Passing None leaves the limit unchanged.  \nemitbool, default: True\n\n\nWhether to notify observers of limit change.  \nautobool or None, default: False\n\n\nWhether to turn on autoscaling of the y-axis. True turns on, False turns off, None leaves unchanged.  \nymin, ymaxfloat, optional\n\n\nThey are equivalent to bottom and top respectively, and it is an error to pass both ymin and bottom or ymax and top.    Returns \n \nbottom, top(float, float)\n\n\nThe new y-axis limits in data coordinates.      See also  get_ylim\n\nset_ybound, get_ybound\n\n\ninvert_yaxis, yaxis_inverted\n\n  Notes The bottom value may be greater than the top value, in which case the y-axis values will decrease from bottom to top. Examples >>> set_ylim(bottom, top)\n>>> set_ylim((bottom, top))\n>>> bottom, top = set_ylim(bottom, top)\n One limit may be left unchanged. >>> set_ylim(top=top_lim)\n Limits may be passed in reverse order to flip the direction of the y-axis. For example, suppose y represents depth of the ocean in m. The y-axis limits might be set like the following so 5000 m depth is at the bottom of the plot and the surface, 0 m, is at the top. >>> set_ylim(5000, 0)\n \n  Examples using matplotlib.axes.Axes.set_ylim\n \n   Broken Barh   \n\n   EventCollection Demo   \n\n   Hat graph   \n\n   Markevery Demo   \n\n   Psd Demo   \n\n   Contouring the solution space of optimizations   \n\n   Image Nonuniform   \n\n   pcolormesh grids and shading   \n\n   Axes Demo   \n\n   Broken Axis   \n\n   Figure labels: suptitle, supxlabel, supylabel   \n\n   Zoom region inset axes   \n\n   Boxplots   \n\n   AnnotationBbox demo   \n\n   Using a text as a Path   \n\n   Annotate Transform   \n\n   Annotating a plot   \n\n   Line, Poly and RegularPoly Collection with autoscaling   \n\n   Mmh Donuts!!!   \n\n   Ellipse Demo   \n\n   Line Collection   \n\n   Inset Locator Demo2   \n\n   Parasite Simple2   \n\n   axis_direction demo   \n\n   Parasite Axes demo   \n\n   Parasite axis demo   \n\n   Simple Axis Pad   \n\n   Simple Axisline   \n\n   Anatomy of a figure   \n\n   Bachelor's degrees by gender   \n\n   Integral as the area under a curve   \n\n   XKCD   \n\n   Decay   \n\n   Animated histogram   \n\n   Rain simulation   \n\n   MATPLOTLIB UNCHAINED   \n\n   Data Browser   \n\n   Path Editor   \n\n   Pick Event Demo2   \n\n   Poly Editor   \n\n   Zoom Window   \n\n   Frontpage contour example   \n\n   Frontpage plot example   \n\n   Custom projection   \n\n   Building histograms using Rectangles and PolyCollections   \n\n   Pythonic Matplotlib   \n\n   SVG Filter Line   \n\n   TickedStroke patheffect   \n\n   Plot 2D data on 3D plot   \n\n   Draw flat objects in 3D plot   \n\n   Text annotations in 3D   \n\n   Loglog Aspect   \n\n   Log Demo   \n\n   MRI With EEG   \n\n   SkewT-logP diagram: using transforms and custom projections   \n\n   Multiple Yaxis With Spines   \n\n   Custom spine bounds   \n\n   Annotation with units   \n\n   Artist tests   \n\n   Annotate Text Arrow   \n\n   Connect Simple01   \n\n   Annotated Cursor   \n\n   Cursor   \n\n   Span Selector   \n\n   Basic Usage   \n\n   Path Tutorial   \n\n   Transformations Tutorial   \n\n   Specifying Colors   \n\n   Choosing Colormaps in Matplotlib   \n\n"}, {"name": "axes.Axes.set_ymargin", "path": "_as_gen/matplotlib.axes.axes.set_ymargin", "type": "axes", "text": "matplotlib.axes.Axes.set_ymargin   Axes.set_ymargin(m)[source]\n \nSet padding of Y data limits prior to autoscaling. m times the data interval will be added to each end of that interval before it is used in autoscaling. For example, if your data is in the range [0, 2], a factor of m = 0.1 will result in a range [-0.2, 2.2]. Negative values -0.5 < m < 0 will result in clipping of the data range. I.e. for a data range [0, 2], a factor of m = -0.1 will result in a range [0.2, 1.8].  Parameters \n \nmfloat greater than -0.5\n\n   \n\n"}, {"name": "axes.Axes.set_yscale", "path": "_as_gen/matplotlib.axes.axes.set_yscale", "type": "axes", "text": "matplotlib.axes.Axes.set_yscale   Axes.set_yscale(value, **kwargs)[source]\n \nSet the y-axis scale.  Parameters \n \nvalue{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase\n\n\nThe axis scale type to apply.  **kwargs\n\nDifferent keyword arguments are accepted, depending on the scale. See the respective class keyword arguments:  matplotlib.scale.LinearScale matplotlib.scale.LogScale matplotlib.scale.SymmetricalLogScale matplotlib.scale.LogitScale matplotlib.scale.FuncScale      Notes By default, Matplotlib supports the above mentioned scales. Additionally, custom scales may be registered using matplotlib.scale.register_scale. These scales can then also be used here. \n  Examples using matplotlib.axes.Axes.set_yscale\n \n   Markevery Demo   \n\n   Artist customization in box plots   \n\n   Boxplot drawer function   \n\n   Different ways of specifying error bars   \n\n   Loglog Aspect   \n\n   Log Bar   \n\n   Log Demo   \n\n   Scales   \n\n   Symlog Demo   \n\n"}, {"name": "axes.Axes.set_yticklabels", "path": "_as_gen/matplotlib.axes.axes.set_yticklabels", "type": "axes", "text": "matplotlib.axes.Axes.set_yticklabels   Axes.set_yticklabels(labels, *, fontdict=None, minor=False, **kwargs)[source]\n \nSet the yaxis' labels with list of string labels.  Warning This method should only be used after fixing the tick positions using Axes.set_yticks. Otherwise, the labels may end up in unexpected positions.   Parameters \n \nlabelslist of str\n\n\nThe label texts.  \nfontdictdict, optional\n\n\nA dictionary controlling the appearance of the ticklabels. The default fontdict is: {'fontsize': rcParams['axes.titlesize'],\n 'fontweight': rcParams['axes.titleweight'],\n 'verticalalignment': 'baseline',\n 'horizontalalignment': loc}\n  \nminorbool, default: False\n\n\nWhether to set the minor ticklabels rather than the major ones.    Returns \n list of Text\n\n\nThe labels.    Other Parameters \n \n**kwargsText properties.\n\n   \n  Examples using matplotlib.axes.Axes.set_yticklabels\n \n   Zoom region inset axes   \n\n   Artist customization in box plots   \n\n   Boxplot drawer function   \n\n   Violin plot basics   \n\n   Rendering math equations using TeX   \n\n   Colorbar Tick Labelling   \n\n   Constrained Layout Guide   \n\n"}, {"name": "axes.Axes.set_yticks", "path": "_as_gen/matplotlib.axes.axes.set_yticks", "type": "axes", "text": "matplotlib.axes.Axes.set_yticks   Axes.set_yticks(ticks, labels=None, *, minor=False, **kwargs)[source]\n \nSet the yaxis' tick locations and optionally labels. If necessary, the view limits of the Axis are expanded so that all given ticks are visible.  Parameters \n \ntickslist of floats\n\n\nList of tick locations.  \nlabelslist of str, optional\n\n\nList of tick labels. If not set, the labels show the data value.  \nminorbool, default: False\n\n\nIf False, set the major ticks; if True, the minor ticks.  **kwargs\n\nText properties for the labels. These take effect only if you pass labels. In other cases, please use tick_params.     Notes The mandatory expansion of the view limits is an intentional design choice to prevent the surprise of a non-visible tick. If you need other limits, you should set the limits explicitly after setting the ticks. \n  Examples using matplotlib.axes.Axes.set_yticks\n \n   Bar Label Demo   \n\n   Horizontal bar chart   \n\n   Broken Barh   \n\n   Psd Demo   \n\n   Creating annotated heatmaps   \n\n   Rendering math equations using TeX   \n\n   Programmatically controlling subplot adjustment   \n\n   Make Room For Ylabel Using Axesgrid   \n\n   Scatter Histogram (Locatable Axes)   \n\n   Ticklabel alignment   \n\n   Ticklabel direction   \n\n   Bachelor's degrees by gender   \n\n   Integral as the area under a curve   \n\n   Shaded & power normalized rendering   \n\n   XKCD   \n\n   Rain simulation   \n\n   MATPLOTLIB UNCHAINED   \n\n   Frontpage 3D example   \n\n   Frontpage contour example   \n\n   Frontpage histogram example   \n\n   Frontpage plot example   \n\n   Create 2D bar graphs in different planes   \n\n   MRI With EEG   \n\n   SkewT-logP diagram: using transforms and custom projections   \n\n   Custom spine bounds   \n\n"}, {"name": "axes.Axes.sharex", "path": "_as_gen/matplotlib.axes.axes.sharex", "type": "axes", "text": "matplotlib.axes.Axes.sharex   Axes.sharex(other)[source]\n \nShare the x-axis with other. This is equivalent to passing sharex=other when constructing the axes, and cannot be used if the x-axis is already being shared with another Axes. \n\n"}, {"name": "axes.Axes.sharey", "path": "_as_gen/matplotlib.axes.axes.sharey", "type": "axes", "text": "matplotlib.axes.Axes.sharey   Axes.sharey(other)[source]\n \nShare the y-axis with other. This is equivalent to passing sharey=other when constructing the axes, and cannot be used if the y-axis is already being shared with another Axes. \n\n"}, {"name": "axes.Axes.specgram", "path": "_as_gen/matplotlib.axes.axes.specgram", "type": "axes", "text": "matplotlib.axes.Axes.specgram   Axes.specgram(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None, scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None, *, data=None, **kwargs)[source]\n \nPlot a spectrogram. Compute and plot a spectrogram of data in x. Data are split into NFFT length segments and the spectrum of each section is computed. The windowing function window is applied to each segment, and the amount of overlap of each segment is specified with noverlap. The spectrogram is plotted as a colormap (using imshow).  Parameters \n \nx1-D array or sequence\n\n\nArray or sequence containing the data.  \nFsfloat, default: 2\n\n\nThe sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit.  \nwindowcallable or ndarray, default: window_hanning\n\n\nA function or a vector of length NFFT. To create window vectors see window_hanning, window_none, numpy.blackman, numpy.hamming, numpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.  \nsides{'default', 'onesided', 'twosided'}, optional\n\n\nWhich sides of the spectrum to return. 'default' is one-sided for real data and two-sided for complex data. 'onesided' forces the return of a one-sided spectrum, while 'twosided' forces two-sided.  \npad_toint, optional\n\n\nThe number of points to which the data segment is padded when performing the FFT. This can be different from NFFT, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the n parameter in the call to fft(). The default is None, which sets pad_to equal to NFFT  \nNFFTint, default: 256\n\n\nThe number of data points used in each block for the FFT. A power 2 is most efficient. This should NOT be used to get zero padding, or the scaling of the result will be incorrect; use pad_to for this instead.  \ndetrend{'none', 'mean', 'linear'} or callable, default: 'none'\n\n\nThe function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the detrend parameter is a vector, in Matplotlib it is a function. The mlab module defines detrend_none, detrend_mean, and detrend_linear, but you can use a custom function as well. You can also use a string to choose one of the functions: 'none' calls detrend_none. 'mean' calls detrend_mean. 'linear' calls detrend_linear.  \nscale_by_freqbool, default: True\n\n\nWhether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.  \nmode{'default', 'psd', 'magnitude', 'angle', 'phase'}\n\n\nWhat sort of spectrum to use. Default is 'psd', which takes the power spectral density. 'magnitude' returns the magnitude spectrum. 'angle' returns the phase spectrum without unwrapping. 'phase' returns the phase spectrum with unwrapping.  \nnoverlapint, default: 128\n\n\nThe number of points of overlap between blocks.  \nscale{'default', 'linear', 'dB'}\n\n\nThe scaling of the values in the spec. 'linear' is no scaling. 'dB' returns the values in dB scale. When mode is 'psd', this is dB power (10 * log10). Otherwise this is dB amplitude (20 * log10). 'default' is 'dB' if mode is 'psd' or 'magnitude' and 'linear' otherwise. This must be 'linear' if mode is 'angle' or 'phase'.  \nFcint, default: 0\n\n\nThe center frequency of x, which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.  \ncmapColormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nxextentNone or (xmin, xmax)\n\n\nThe image extent along the x-axis. The default sets xmin to the left border of the first bin (spectrum column) and xmax to the right border of the last bin. Note that for noverlap>0 the width of the bins is smaller than those of the segments.  \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x  **kwargs\n\nAdditional keyword arguments are passed on to imshow which makes the specgram image. The origin keyword argument is not supported.    Returns \n \nspectrum2D array\n\n\nColumns are the periodograms of successive segments.  \nfreqs1-D array\n\n\nThe frequencies corresponding to the rows in spectrum.  \nt1-D array\n\n\nThe times corresponding to midpoints of segments (i.e., the columns in spectrum).  \nimAxesImage\n\n\nThe image created by imshow containing the spectrogram.      See also  psd\n\nDiffers in the default overlap; in returning the mean of the segment periodograms; in not returning times; and in generating a line plot instead of colormap.  magnitude_spectrum\n\nA single spectrum, similar to having a single segment when mode is 'magnitude'. Plots a line instead of a colormap.  angle_spectrum\n\nA single spectrum, similar to having a single segment when mode is 'angle'. Plots a line instead of a colormap.  phase_spectrum\n\nA single spectrum, similar to having a single segment when mode is 'phase'. Plots a line instead of a colormap.    Notes The parameters detrend and scale_by_freq do only apply when mode is set to 'psd'. \n  Examples using matplotlib.axes.Axes.specgram\n \n   Spectrogram Demo   \n\n"}, {"name": "axes.Axes.spy", "path": "_as_gen/matplotlib.axes.axes.spy", "type": "axes", "text": "matplotlib.axes.Axes.spy   Axes.spy(Z, precision=0, marker=None, markersize=None, aspect='equal', origin='upper', **kwargs)[source]\n \nPlot the sparsity pattern of a 2D array. This visualizes the non-zero values of the array. Two plotting styles are available: image and marker. Both are available for full arrays, but only the marker style works for scipy.sparse.spmatrix instances. Image style If marker and markersize are None, imshow is used. Any extra remaining keyword arguments are passed to this method. Marker style If Z is a scipy.sparse.spmatrix or marker or markersize are None, a Line2D object will be returned with the value of marker determining the marker type, and any remaining keyword arguments passed to plot.  Parameters \n \nZ(M, N) array-like\n\n\nThe array to be plotted.  \nprecisionfloat or 'present', default: 0\n\n\nIf precision is 0, any non-zero value will be plotted. Otherwise, values of \\(|Z| > precision\\) will be plotted. For scipy.sparse.spmatrix instances, you can also pass 'present'. In this case any value present in the array will be plotted, even if it is identically zero.  \naspect{'equal', 'auto', None} or float, default: 'equal'\n\n\nThe aspect ratio of the Axes. This parameter is particularly relevant for images since it determines whether data pixels are square. This parameter is a shortcut for explicitly calling Axes.set_aspect. See there for further details.  'equal': Ensures an aspect ratio of 1. Pixels will be square. 'auto': The Axes is kept fixed and the aspect is adjusted so that the data fit in the Axes. In general, this will result in non-square pixels. \nNone: Use rcParams[\"image.aspect\"] (default: 'equal').   \norigin{'upper', 'lower'}, default: rcParams[\"image.origin\"] (default: 'upper')\n\n\nPlace the [0, 0] index of the array in the upper left or lower left corner of the Axes. The convention 'upper' is typically used for matrices and images.    Returns \n \nAxesImage or Line2D\n\n\nThe return type depends on the plotting style (see above).    Other Parameters \n **kwargs\n\nThe supported additional parameters depend on the plotting style. For the image style, you can pass the following additional parameters of imshow:  cmap alpha url any Artist properties (passed on to the AxesImage)  For the marker style, you can pass any Line2D property except for linestyle:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntransform unknown  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float       \n  Examples using matplotlib.axes.Axes.spy\n \n   Spy Demos   \n\n"}, {"name": "axes.Axes.stackplot", "path": "_as_gen/matplotlib.axes.axes.stackplot", "type": "axes", "text": "matplotlib.axes.Axes.stackplot   Axes.stackplot(x, *args, labels=(), colors=None, baseline='zero', data=None, **kwargs)[source]\n \nDraw a stacked area plot.  Parameters \n \nx(N,) array-like\n\n\ny(M, N) array-like\n\n\nThe data is assumed to be unstacked. Each of the following calls is legal: stackplot(x, y)           # where y has shape (M, N)\nstackplot(x, y1, y2, y3)  # where y1, y2, y3, y4 have length N\n  \nbaseline{'zero', 'sym', 'wiggle', 'weighted_wiggle'}\n\n\nMethod used to calculate the baseline:  \n'zero': Constant zero baseline, i.e. a simple stacked plot. \n'sym': Symmetric around zero and is sometimes called 'ThemeRiver'. \n'wiggle': Minimizes the sum of the squared slopes. \n'weighted_wiggle': Does the same but weights to account for size of each layer. It is also called 'Streamgraph'-layout. More details can be found at http://leebyron.com/streamgraph/.   \nlabelslist of str, optional\n\n\nA sequence of labels to assign to each data series. If unspecified, then no labels will be applied to artists.  \ncolorslist of color, optional\n\n\nA sequence of colors to be cycled through and used to color the stacked areas. The sequence need not be exactly the same length as the number of provided y, in which case the colors will repeat from the beginning. If not specified, the colors from the Axes property cycle will be used.  \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).  **kwargs\n\nAll other keyword arguments are passed to Axes.fill_between.    Returns \n list of PolyCollection\n\n\nA list of PolyCollection instances, one for each element in the stacked area plot.     \n  Examples using matplotlib.axes.Axes.stackplot\n \n   Stackplots and streamgraphs   \n\n"}, {"name": "axes.Axes.stairs", "path": "_as_gen/matplotlib.axes.axes.stairs", "type": "axes", "text": "matplotlib.axes.Axes.stairs   Axes.stairs(values, edges=None, *, orientation='vertical', baseline=0, fill=False, data=None, **kwargs)[source]\n \nA stepwise constant function as a line with bounding edges or a filled plot.  Parameters \n \nvaluesarray-like\n\n\nThe step heights.  \nedgesarray-like\n\n\nThe edge positions, with len(edges) == len(vals) + 1, between which the curve takes on vals values.  \norientation{'vertical', 'horizontal'}, default: 'vertical'\n\n\nThe direction of the steps. Vertical means that values are along the y-axis, and edges are along the x-axis.  \nbaselinefloat, array-like or None, default: 0\n\n\nThe bottom value of the bounding edges or when fill=True, position of lower edge. If fill is True or an array is passed to baseline, a closed path is drawn.  \nfillbool, default: False\n\n\nWhether the area under the step curve should be filled.    Returns \n \nStepPatchmatplotlib.patches.StepPatch\n\n  Other Parameters \n \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).  **kwargs\n\nStepPatch properties     \n\n"}, {"name": "axes.Axes.stale", "path": "_as_gen/matplotlib.axes.axes.stale", "type": "axes", "text": "matplotlib.axes.Axes.stale   propertyAxes.stale\n \nWhether the artist is 'stale' and needs to be re-drawn for the output to match the internal state of the artist. \n\n"}, {"name": "axes.Axes.start_pan", "path": "_as_gen/matplotlib.axes.axes.start_pan", "type": "axes", "text": "matplotlib.axes.Axes.start_pan   Axes.start_pan(x, y, button)[source]\n \nCalled when a pan operation has started.  Parameters \n \nx, yfloat\n\n\nThe mouse coordinates in display coords.  \nbuttonMouseButton\n\n\nThe pressed mouse button.     Notes This is intended to be overridden by new projection types. \n\n"}, {"name": "axes.Axes.stem", "path": "_as_gen/matplotlib.axes.axes.stem", "type": "axes", "text": "matplotlib.axes.Axes.stem   Axes.stem(*args, linefmt=None, markerfmt=None, basefmt=None, bottom=0, label=None, use_line_collection=True, orientation='vertical', data=None)[source]\n \nCreate a stem plot. A stem plot draws lines perpendicular to a baseline at each location locs from the baseline to heads, and places a marker there. For vertical stem plots (the default), the locs are x positions, and the heads are y values. For horizontal stem plots, the locs are y positions, and the heads are x values. Call signature: stem([locs,] heads, linefmt=None, markerfmt=None, basefmt=None)\n The locs-positions are optional. The formats may be provided either as positional or as keyword-arguments.  Parameters \n \nlocsarray-like, default: (0, 1, ..., len(heads) - 1)\n\n\nFor vertical stem plots, the x-positions of the stems. For horizontal stem plots, the y-positions of the stems.  \nheadsarray-like\n\n\nFor vertical stem plots, the y-values of the stem heads. For horizontal stem plots, the x-values of the stem heads.  \nlinefmtstr, optional\n\n\nA string defining the color and/or linestyle of the vertical lines:   \nCharacter Line Style   \n'-' solid line  \n'--' dashed line  \n'-.' dash-dot line  \n':' dotted line   Default: 'C0-', i.e. solid line with the first color of the color cycle. Note: Markers specified through this parameter (e.g. 'x') will be silently ignored (unless using use_line_collection=False). Instead, markers should be specified using markerfmt.  \nmarkerfmtstr, optional\n\n\nA string defining the color and/or shape of the markers at the stem heads. Default: 'C0o', i.e. filled circles with the first color of the color cycle.  \nbasefmtstr, default: 'C3-' ('C2-' in classic mode)\n\n\nA format string defining the properties of the baseline.  \norientationstr, default: 'vertical'\n\n\nIf 'vertical', will produce a plot with stems oriented vertically, otherwise the stems will be oriented horizontally.  \nbottomfloat, default: 0\n\n\nThe y/x-position of the baseline (depending on orientation).  \nlabelstr, default: None\n\n\nThe label to use for the stems in legends.  \nuse_line_collectionbool, default: True\n\n\nIf True, store and plot the stem lines as a LineCollection instead of individual lines, which significantly increases performance. If False, defaults to the old behavior of using a list of Line2D objects. This parameter may be deprecated in the future.  \ndataindexable object, optional\n\n\nIf given, all parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception).    Returns \n StemContainer\n\nThe container may be treated like a tuple (markerline, stemlines, baseline)     Notes  See also The MATLAB function stem which inspired this method.  \n  Examples using matplotlib.axes.Axes.stem\n \n   Legend Demo   \n\n   3D stem   \n\n   stem(x, y)   \n\n"}, {"name": "axes.Axes.step", "path": "_as_gen/matplotlib.axes.axes.step", "type": "axes", "text": "matplotlib.axes.Axes.step   Axes.step(x, y, *args, where='pre', data=None, **kwargs)[source]\n \nMake a step plot. Call signatures: step(x, y, [fmt], *, data=None, where='pre', **kwargs)\nstep(x, y, [fmt], x2, y2, [fmt2], ..., *, where='pre', **kwargs)\n This is just a thin wrapper around plot which changes some formatting options. Most of the concepts and parameters of plot can be used here as well.  Note This method uses a standard plot with a step drawstyle: The x values are the reference positions and steps extend left/right/both directions depending on where. For the common case where you know the values and edges of the steps, use stairs instead.   Parameters \n \nxarray-like\n\n\n1D sequence of x positions. It is assumed, but not checked, that it is uniformly increasing.  \nyarray-like\n\n\n1D sequence of y levels.  \nfmtstr, optional\n\n\nA format string, e.g. 'g' for a green line. See plot for a more detailed description. Note: While full format strings are accepted, it is recommended to only specify the color. Line styles are currently ignored (use the keyword argument linestyle instead). Markers are accepted and plotted on the given positions, however, this is a rarely needed feature for step plots.  \nwhere{'pre', 'post', 'mid'}, default: 'pre'\n\n\nDefine where the steps should be placed:  'pre': The y value is continued constantly to the left from every x position, i.e. the interval (x[i-1], x[i]] has the value y[i]. 'post': The y value is continued constantly to the right from every x position, i.e. the interval [x[i], x[i+1]) has the value y[i]. 'mid': Steps occur half-way between the x positions.   \ndataindexable object, optional\n\n\nAn object with labelled data. If given, provide the label names to plot in x and y.  **kwargs\n\nAdditional parameters are the same as those for plot.    Returns \n list of Line2D\n\n\nObjects representing the plotted data.     \n  Examples using matplotlib.axes.Axes.step\n \n   step(x, y)   \n\n"}, {"name": "axes.Axes.streamplot", "path": "_as_gen/matplotlib.axes.axes.streamplot", "type": "axes", "text": "matplotlib.axes.Axes.streamplot   Axes.streamplot(x, y, u, v, density=1, linewidth=None, color=None, cmap=None, norm=None, arrowsize=1, arrowstyle='-|>', minlength=0.1, transform=None, zorder=None, start_points=None, maxlength=4.0, integration_direction='both', *, data=None)[source]\n \nDraw streamlines of a vector flow.  Parameters \n \nx, y1D/2D arrays\n\n\nEvenly spaced strictly increasing arrays to make a grid. If 2D, all rows of x must be equal and all columns of y must be equal; i.e., they must be as if generated by np.meshgrid(x_1d, y_1d).  \nu, v2D arrays\n\n\nx and y-velocities. The number of rows and columns must match the length of y and x, respectively.  \ndensityfloat or (float, float)\n\n\nControls the closeness of streamlines. When density = 1, the domain is divided into a 30x30 grid. density linearly scales this grid. Each cell in the grid can have, at most, one traversing streamline. For different densities in each direction, use a tuple (density_x, density_y).  \nlinewidthfloat or 2D array\n\n\nThe width of the stream lines. With a 2D array the line width can be varied across the grid. The array must have the same shape as u and v.  \ncolorcolor or 2D array\n\n\nThe streamline color. If given an array, its values are converted to colors using cmap and norm. The array must have the same shape as u and v.  \ncmapColormap\n\n\nColormap used to plot streamlines and arrows. This is only used if color is an array.  \nnormNormalize\n\n\nNormalize object used to scale luminance data to 0, 1. If None, stretch (min, max) to (0, 1). This is only used if color is an array.  \narrowsizefloat\n\n\nScaling factor for the arrow size.  \narrowstylestr\n\n\nArrow style specification. See FancyArrowPatch.  \nminlengthfloat\n\n\nMinimum length of streamline in axes coordinates.  \nstart_pointsNx2 array\n\n\nCoordinates of starting points for the streamlines in data coordinates (the same coordinates as the x and y arrays).  \nzorderint\n\n\nThe zorder of the stream lines and arrows. Artists with lower zorder values are drawn first.  \nmaxlengthfloat\n\n\nMaximum length of streamline in axes coordinates.  \nintegration_direction{'forward', 'backward', 'both'}, default: 'both'\n\n\nIntegrate the streamline in forward, backward or both directions.  \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, y, u, v, start_points    Returns \n StreamplotSet\n\nContainer object with attributes  \nlines: LineCollection of streamlines \narrows: PatchCollection containing FancyArrowPatch objects representing the arrows half-way along stream lines.  This container will probably change in the future to allow changes to the colormap, alpha, etc. for both lines and arrows, but these changes should be backward compatible.     \n  Examples using matplotlib.axes.Axes.streamplot\n \n   Streamplot   \n\n   streamplot(X, Y, U, V)   \n\n"}, {"name": "axes.Axes.table", "path": "_as_gen/matplotlib.axes.axes.table", "type": "axes", "text": "matplotlib.axes.Axes.table   Axes.table(cellText=None, cellColours=None, cellLoc='right', colWidths=None, rowLabels=None, rowColours=None, rowLoc='left', colLabels=None, colColours=None, colLoc='center', loc='bottom', bbox=None, edges='closed', **kwargs)[source]\n \nAdd a table to an Axes. At least one of cellText or cellColours must be specified. These parameters must be 2D lists, in which the outer lists define the rows and the inner list define the column values per row. Each row must have the same number of elements. The table can optionally have row and column headers, which are configured using rowLabels, rowColours, rowLoc and colLabels, colColours, colLoc respectively. For finer grained control over tables, use the Table class and add it to the axes with Axes.add_table.  Parameters \n \ncellText2D list of str, optional\n\n\nThe texts to place into the table cells. Note: Line breaks in the strings are currently not accounted for and will result in the text exceeding the cell boundaries.  \ncellColours2D list of colors, optional\n\n\nThe background colors of the cells.  \ncellLoc{'left', 'center', 'right'}, default: 'right'\n\n\nThe alignment of the text within the cells.  \ncolWidthslist of float, optional\n\n\nThe column widths in units of the axes. If not given, all columns will have a width of 1 / ncols.  \nrowLabelslist of str, optional\n\n\nThe text of the row header cells.  \nrowColourslist of colors, optional\n\n\nThe colors of the row header cells.  \nrowLoc{'left', 'center', 'right'}, default: 'left'\n\n\nThe text alignment of the row header cells.  \ncolLabelslist of str, optional\n\n\nThe text of the column header cells.  \ncolColourslist of colors, optional\n\n\nThe colors of the column header cells.  \ncolLoc{'left', 'center', 'right'}, default: 'left'\n\n\nThe text alignment of the column header cells.  \nlocstr, optional\n\n\nThe position of the cell with respect to ax. This must be one of the codes.  \nbboxBbox, optional\n\n\nA bounding box to draw the table into. If this is not None, this overrides loc.  \nedgessubstring of 'BRTL' or {'open', 'closed', 'horizontal', 'vertical'}\n\n\nThe cell edges to be drawn with a line. See also visible_edges.    Returns \n Table\n\nThe created table.    Other Parameters \n **kwargs\n\nTable properties.   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \nfontsize float  \ngid str  \nin_layout bool  \nlabel object  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float       \n\n"}, {"name": "axes.Axes.text", "path": "_as_gen/matplotlib.axes.axes.text", "type": "axes", "text": "matplotlib.axes.Axes.text   Axes.text(x, y, s, fontdict=None, **kwargs)[source]\n \nAdd text to the Axes. Add the text s to the Axes at location x, y in data coordinates.  Parameters \n \nx, yfloat\n\n\nThe position to place the text. By default, this is in data coordinates. The coordinate system can be changed using the transform parameter.  \nsstr\n\n\nThe text.  \nfontdictdict, default: None\n\n\nA dictionary to override the default text properties. If fontdict is None, the defaults are determined by rcParams.    Returns \n Text\n\nThe created Text instance.    Other Parameters \n \n**kwargsText properties.\n\n\nOther miscellaneous text parameters.   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbackgroundcolor color  \nbbox dict with properties for patches.FancyBboxPatch  \nclip_box unknown  \nclip_on unknown  \nclip_path unknown  \ncolor or c color  \nfigure Figure  \nfontfamily or family {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  \nfontproperties or font or font_properties font_manager.FontProperties or str or pathlib.Path  \nfontsize or size float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  \nfontstretch or stretch {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  \nfontstyle or style {'normal', 'italic', 'oblique'}  \nfontvariant or variant {'normal', 'small-caps'}  \nfontweight or weight {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  \ngid str  \nhorizontalalignment or ha {'center', 'right', 'left'}  \nin_layout bool  \nlabel object  \nlinespacing float (multiple of font size)  \nmath_fontfamily str  \nmultialignment or ma {'left', 'right', 'center'}  \nparse_math bool  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition (float, float)  \nrasterized bool  \nrotation float or {'vertical', 'horizontal'}  \nrotation_mode {None, 'default', 'anchor'}  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntext object  \ntransform Transform  \ntransform_rotates_text bool  \nurl str  \nusetex bool or None  \nverticalalignment or va {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  \nvisible bool  \nwrap bool  \nx float  \ny float  \nzorder float       Examples Individual keyword arguments can be used to override any given parameter: >>> text(x, y, s, fontsize=12)\n The default transform specifies that text is in data coords, alternatively, you can specify text in axis coords ((0, 0) is lower-left and (1, 1) is upper-right). The example below places text in the center of the Axes: >>> text(0.5, 0.5, 'matplotlib', horizontalalignment='center',\n...      verticalalignment='center', transform=ax.transAxes)\n You can put a rectangular box around the text instance (e.g., to set a background color) by using the keyword bbox. bbox is a dictionary of Rectangle properties. For example: >>> text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))\n \n  Examples using matplotlib.axes.Axes.text\n \n   Marker reference   \n\n   BboxImage Demo   \n\n   Creating annotated heatmaps   \n\n   Boxplots   \n\n   Bar of pie   \n\n   Using accented text in matplotlib   \n\n   Arrow Demo   \n\n   Annotation arrow style reference   \n\n   Labelling subplots   \n\n   Mathtext   \n\n   Math fontfamily   \n\n   Multiline   \n\n   Placing text boxes   \n\n   Rendering math equations using TeX   \n\n   Precise text layout   \n\n   Text Rotation Relative To Line   \n\n   Usetex Baseline Test   \n\n   Text watermark   \n\n   Text Commands   \n\n   Drawing fancy boxes   \n\n   Hatch style reference   \n\n   Anatomy of a figure   \n\n   Bachelor's degrees by gender   \n\n   Integral as the area under a curve   \n\n   Shaded & power normalized rendering   \n\n   The double pendulum problem   \n\n   MATPLOTLIB UNCHAINED   \n\n   Data Browser   \n\n   Pick Event Demo2   \n\n   Cross hair cursor   \n\n   Packed-bubble chart   \n\n   Rasterization for vector graphics   \n\n   Text annotations in 3D   \n\n   Anscombe's quartet   \n\n   Annotate Explain   \n\n   Annotate Text Arrow   \n\n   Connection styles for annotations   \n\n   Custom box styles   \n\n   Pgf Fonts   \n\n   Pgf Texsystem   \n\n   Simple Annotate01   \n\n   Mouse Cursor   \n\n   Basic Usage   \n\n   The Lifecycle of a Plot   \n\n   Artist tutorial   \n\n   Arranging multiple Axes in a Figure   \n\n   Path Tutorial   \n\n   Transformations Tutorial   \n\n   Specifying Colors   \n\n   Choosing Colormaps in Matplotlib   \n\n   Text in Matplotlib Plots   \n\n   Text properties and layout   \n\n"}, {"name": "axes.Axes.tick_params", "path": "_as_gen/matplotlib.axes.axes.tick_params", "type": "axes", "text": "matplotlib.axes.Axes.tick_params   Axes.tick_params(axis='both', **kwargs)[source]\n \nChange the appearance of ticks, tick labels, and gridlines. Tick properties that are not explicitly set using the keyword arguments remain unchanged unless reset is True.  Parameters \n \naxis{'x', 'y', 'both'}, default: 'both'\n\n\nThe axis to which the parameters are applied.  \nwhich{'major', 'minor', 'both'}, default: 'major'\n\n\nThe group of ticks to which the parameters are applied.  \nresetbool, default: False\n\n\nWhether to reset the ticks to defaults before updating them.    Other Parameters \n \ndirection{'in', 'out', 'inout'}\n\n\nPuts ticks inside the axes, outside the axes, or both.  \nlengthfloat\n\n\nTick length in points.  \nwidthfloat\n\n\nTick width in points.  \ncolorcolor\n\n\nTick color.  \npadfloat\n\n\nDistance in points between tick and label.  \nlabelsizefloat or str\n\n\nTick label font size in points or as a string (e.g., 'large').  \nlabelcolorcolor\n\n\nTick label color.  \ncolorscolor\n\n\nTick color and label color.  \nzorderfloat\n\n\nTick and label zorder.  \nbottom, top, left, rightbool\n\n\nWhether to draw the respective ticks.  \nlabelbottom, labeltop, labelleft, labelrightbool\n\n\nWhether to draw the respective tick labels.  \nlabelrotationfloat\n\n\nTick label rotation  \ngrid_colorcolor\n\n\nGridline color.  \ngrid_alphafloat\n\n\nTransparency of gridlines: 0 (transparent) to 1 (opaque).  \ngrid_linewidthfloat\n\n\nWidth of gridlines in points.  \ngrid_linestylestr\n\n\nAny valid Line2D line style spec.     Examples ax.tick_params(direction='out', length=6, width=2, colors='r',\n               grid_color='r', grid_alpha=0.5)\n This will make all major ticks be red, pointing out of the box, and with dimensions 6 points by 2 points. Tick labels will also be red. Gridlines will be red and translucent. \n  Examples using matplotlib.axes.Axes.tick_params\n \n   Scatter plot with histograms   \n\n   Creating annotated heatmaps   \n\n   Axes Props   \n\n   Broken Axis   \n\n   Plots with different scales   \n\n   Polar Legend   \n\n   Color Demo   \n\n   Inset Locator Demo   \n\n   Inset Locator Demo2   \n\n   Make Room For Ylabel Using Axesgrid   \n\n   Simple Axes Divider 3   \n\n   Anatomy of a figure   \n\n   Bachelor's degrees by gender   \n\n   Anscombe's quartet   \n\n   Multiple Yaxis With Spines   \n\n   Major and minor ticks   \n\n   Text in Matplotlib Plots   \n\n"}, {"name": "axes.Axes.ticklabel_format", "path": "_as_gen/matplotlib.axes.axes.ticklabel_format", "type": "axes", "text": "matplotlib.axes.Axes.ticklabel_format   Axes.ticklabel_format(*, axis='both', style='', scilimits=None, useOffset=None, useLocale=None, useMathText=None)[source]\n \nConfigure the ScalarFormatter used by default for linear axes. If a parameter is not set, the corresponding property of the formatter is left unchanged.  Parameters \n \naxis{'x', 'y', 'both'}, default: 'both'\n\n\nThe axis to configure. Only major ticks are affected.  \nstyle{'sci', 'scientific', 'plain'}\n\n\nWhether to use scientific notation. The formatter default is to use scientific notation.  \nscilimitspair of ints (m, n)\n\n\nScientific notation is used only for numbers outside the range 10m to 10n (and only if the formatter is configured to use scientific notation at all). Use (0, 0) to include all numbers. Use (m, m) where m != 0 to fix the order of magnitude to 10m. The formatter default is rcParams[\"axes.formatter.limits\"] (default: [-5, 6]).  \nuseOffsetbool or float\n\n\nIf True, the offset is calculated as needed. If False, no offset is used. If a numeric value, it sets the offset. The formatter default is rcParams[\"axes.formatter.useoffset\"] (default: True).  \nuseLocalebool\n\n\nWhether to format the number using the current locale or using the C (English) locale. This affects e.g. the decimal separator. The formatter default is rcParams[\"axes.formatter.use_locale\"] (default: False).  \nuseMathTextbool\n\n\nRender the offset and scientific notation in mathtext. The formatter default is rcParams[\"axes.formatter.use_mathtext\"] (default: False).    Raises \n AttributeError\n\nIf the current formatter is not a ScalarFormatter.     \n  Examples using matplotlib.axes.Axes.ticklabel_format\n \n   The default tick formatter   \n\n"}, {"name": "axes.Axes.tricontour", "path": "_as_gen/matplotlib.axes.axes.tricontour", "type": "axes", "text": "matplotlib.axes.Axes.tricontour   Axes.tricontour(*args, **kwargs)[source]\n \nDraw contour lines on an unstructured triangular grid. The triangulation can be specified in one of two ways; either tricontour(triangulation, ...)\n where triangulation is a Triangulation object, or tricontour(x, y, ...)\ntricontour(x, y, triangles, ...)\ntricontour(x, y, triangles=triangles, ...)\ntricontour(x, y, mask=mask, ...)\ntricontour(x, y, triangles, mask=mask, ...)\n in which case a Triangulation object will be created. See that class' docstring for an explanation of these cases. The remaining arguments may be: tricontour(..., Z)\n where Z is the array of values to contour, one per point in the triangulation. The level values are chosen automatically. tricontour(..., Z, levels)\n contour up to levels+1 automatically chosen contour levels (levels intervals). tricontour(..., Z, levels)\n draw contour lines at the values specified in sequence levels, which must be in increasing order. tricontour(Z, **kwargs)\n Use keyword arguments to control colors, linewidth, origin, cmap ... see below for more details.  Parameters \n \ntriangulationTriangulation, optional\n\n\nThe unstructured triangular grid. If specified, then x, y, triangles, and mask are not accepted.  \nx, yarray-like, optional\n\n\nThe coordinates of the values in Z.  \ntriangles(ntri, 3) array-like of int, optional\n\n\nFor each triangle, the indices of the three points that make up the triangle, ordered in an anticlockwise manner. If not specified, the Delaunay triangulation is calculated.  \nmask(ntri,) array-like of bool, optional\n\n\nWhich triangles are masked out.  \nZ2D array-like\n\n\nThe height values over which the contour is drawn.  \nlevelsint or array-like, optional\n\n\nDetermines the number and positions of the contour lines / regions. If an int n, use MaxNLocator, which tries to automatically choose no more than n+1 \"nice\" contour levels between vmin and vmax. If array-like, draw contour lines at the specified levels. The values must be in increasing order.    Returns \n TriContourSet\n  Other Parameters \n \ncolorscolor string or sequence of colors, optional\n\n\nThe colors of the levels, i.e., the contour lines. The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated. As a shortcut, single color strings may be used in place of one-element lists, i.e. 'red' instead of ['red'] to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors. By default (value None), the colormap specified by cmap will be used.  \nalphafloat, default: 1\n\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).  \ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nA Colormap instance or registered colormap name. The colormap maps the level values to colors. If both colors and cmap are given, an error is raised.  \nnormNormalize, optional\n\n\nIf a colormap is used, the Normalize instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used.  \nvmin, vmaxfloat, optional\n\n\nIf not None, either or both of these values will be supplied to the Normalize instance, overriding the default color scaling based on levels.  \norigin{None, 'upper', 'lower', 'image'}, default: None\n\n\nDetermines the orientation and exact position of Z by specifying the position of Z[0, 0]. This is only relevant, if X, Y are not given.  \nNone: Z[0, 0] is at X=0, Y=0 in the lower left corner. 'lower': Z[0, 0] is at X=0.5, Y=0.5 in the lower left corner. 'upper': Z[0, 0] is at X=N+0.5, Y=0.5 in the upper left corner. 'image': Use the value from rcParams[\"image.origin\"] (default: 'upper').   \nextent(x0, x1, y0, y1), optional\n\n\nIf origin is not None, then extent is interpreted as in imshow: it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If origin is None, then (x0, y0) is the position of Z[0, 0], and (x1, y1) is the position of Z[-1, -1]. This argument is ignored if X and Y are specified in the call to contour.  \nlocatorticker.Locator subclass, optional\n\n\nThe locator is used to determine the contour levels if they are not given explicitly via levels. Defaults to MaxNLocator.  \nextend{'neither', 'both', 'min', 'max'}, default: 'neither'\n\n\nDetermines the tricontour-coloring of values that are outside the levels range. If 'neither', values outside the levels range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the levels range. Values below min(levels) and above max(levels) are mapped to the under/over values of the Colormap. Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using Colormap.set_under and Colormap.set_over.  Note An existing TriContourSet does not get notified if properties of its colormap are changed. Therefore, an explicit call to ContourSet.changed() is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the TriContourSet because it internally calls ContourSet.changed().   \nxunits, yunitsregistered units, optional\n\n\nOverride axis units by specifying an instance of a matplotlib.units.ConversionInterface.  \nantialiasedbool, optional\n\n\nEnable antialiasing, overriding the defaults. For filled contours, the default is True. For line contours, it is taken from rcParams[\"lines.antialiased\"] (default: True).  \nlinewidthsfloat or array-like, default: rcParams[\"contour.linewidth\"] (default: None)\n\n\nThe line width of the contour lines. If a number, all levels will be plotted with this linewidth. If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified. If None, this falls back to rcParams[\"lines.linewidth\"] (default: 1.5).  \nlinestyles{None, 'solid', 'dashed', 'dashdot', 'dotted'}, optional\n\n\nIf linestyles is None, the default is 'solid' unless the lines are monochrome. In that case, negative contours will take their linestyle from rcParams[\"contour.negative_linestyle\"] (default: 'dashed') setting. linestyles can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.     \n  Examples using matplotlib.axes.Axes.tricontour\n \n   Contour plot of irregularly spaced data   \n\n   Tricontour Demo   \n\n   Tricontour Smooth Delaunay   \n\n   Tricontour Smooth User   \n\n   Trigradient Demo   \n\n   Triangular 3D contour plot   \n\n   tricontour(x, y, z)   \n\n"}, {"name": "axes.Axes.tricontourf", "path": "_as_gen/matplotlib.axes.axes.tricontourf", "type": "axes", "text": "matplotlib.axes.Axes.tricontourf   Axes.tricontourf(*args, **kwargs)[source]\n \nDraw contour regions on an unstructured triangular grid. The triangulation can be specified in one of two ways; either tricontourf(triangulation, ...)\n where triangulation is a Triangulation object, or tricontourf(x, y, ...)\ntricontourf(x, y, triangles, ...)\ntricontourf(x, y, triangles=triangles, ...)\ntricontourf(x, y, mask=mask, ...)\ntricontourf(x, y, triangles, mask=mask, ...)\n in which case a Triangulation object will be created. See that class' docstring for an explanation of these cases. The remaining arguments may be: tricontourf(..., Z)\n where Z is the array of values to contour, one per point in the triangulation. The level values are chosen automatically. tricontourf(..., Z, levels)\n contour up to levels+1 automatically chosen contour levels (levels intervals). tricontourf(..., Z, levels)\n draw contour regions at the values specified in sequence levels, which must be in increasing order. tricontourf(Z, **kwargs)\n Use keyword arguments to control colors, linewidth, origin, cmap ... see below for more details.  Parameters \n \ntriangulationTriangulation, optional\n\n\nThe unstructured triangular grid. If specified, then x, y, triangles, and mask are not accepted.  \nx, yarray-like, optional\n\n\nThe coordinates of the values in Z.  \ntriangles(ntri, 3) array-like of int, optional\n\n\nFor each triangle, the indices of the three points that make up the triangle, ordered in an anticlockwise manner. If not specified, the Delaunay triangulation is calculated.  \nmask(ntri,) array-like of bool, optional\n\n\nWhich triangles are masked out.  \nZ2D array-like\n\n\nThe height values over which the contour is drawn.  \nlevelsint or array-like, optional\n\n\nDetermines the number and positions of the contour lines / regions. If an int n, use MaxNLocator, which tries to automatically choose no more than n+1 \"nice\" contour levels between vmin and vmax. If array-like, draw contour lines at the specified levels. The values must be in increasing order.    Returns \n TriContourSet\n  Other Parameters \n \ncolorscolor string or sequence of colors, optional\n\n\nThe colors of the levels, i.e., the contour regions. The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated. As a shortcut, single color strings may be used in place of one-element lists, i.e. 'red' instead of ['red'] to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors. By default (value None), the colormap specified by cmap will be used.  \nalphafloat, default: 1\n\n\nThe alpha blending value, between 0 (transparent) and 1 (opaque).  \ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\n\n\nA Colormap instance or registered colormap name. The colormap maps the level values to colors. If both colors and cmap are given, an error is raised.  \nnormNormalize, optional\n\n\nIf a colormap is used, the Normalize instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used.  \nvmin, vmaxfloat, optional\n\n\nIf not None, either or both of these values will be supplied to the Normalize instance, overriding the default color scaling based on levels.  \norigin{None, 'upper', 'lower', 'image'}, default: None\n\n\nDetermines the orientation and exact position of Z by specifying the position of Z[0, 0]. This is only relevant, if X, Y are not given.  \nNone: Z[0, 0] is at X=0, Y=0 in the lower left corner. 'lower': Z[0, 0] is at X=0.5, Y=0.5 in the lower left corner. 'upper': Z[0, 0] is at X=N+0.5, Y=0.5 in the upper left corner. 'image': Use the value from rcParams[\"image.origin\"] (default: 'upper').   \nextent(x0, x1, y0, y1), optional\n\n\nIf origin is not None, then extent is interpreted as in imshow: it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If origin is None, then (x0, y0) is the position of Z[0, 0], and (x1, y1) is the position of Z[-1, -1]. This argument is ignored if X and Y are specified in the call to contour.  \nlocatorticker.Locator subclass, optional\n\n\nThe locator is used to determine the contour levels if they are not given explicitly via levels. Defaults to MaxNLocator.  \nextend{'neither', 'both', 'min', 'max'}, default: 'neither'\n\n\nDetermines the tricontourf-coloring of values that are outside the levels range. If 'neither', values outside the levels range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the levels range. Values below min(levels) and above max(levels) are mapped to the under/over values of the Colormap. Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using Colormap.set_under and Colormap.set_over.  Note An existing TriContourSet does not get notified if properties of its colormap are changed. Therefore, an explicit call to ContourSet.changed() is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the TriContourSet because it internally calls ContourSet.changed().   \nxunits, yunitsregistered units, optional\n\n\nOverride axis units by specifying an instance of a matplotlib.units.ConversionInterface.  \nantialiasedbool, optional\n\n\nEnable antialiasing, overriding the defaults. For filled contours, the default is True. For line contours, it is taken from rcParams[\"lines.antialiased\"] (default: True).  \nhatcheslist[str], optional\n\n\nA list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only.     Notes tricontourf fills intervals that are closed at the top; that is, for boundaries z1 and z2, the filled region is: z1 < Z <= z2\n except for the lowest interval, which is closed on both sides (i.e. it includes the lowest value). \n  Examples using matplotlib.axes.Axes.tricontourf\n \n   Contour plot of irregularly spaced data   \n\n   Tricontour Demo   \n\n   Tricontour Smooth User   \n\n   Triangular 3D filled contour plot   \n\n   tricontourf(x, y, z)   \n\n"}, {"name": "axes.Axes.tripcolor", "path": "_as_gen/matplotlib.axes.axes.tripcolor", "type": "axes", "text": "matplotlib.axes.Axes.tripcolor   Axes.tripcolor(*args, alpha=1.0, norm=None, cmap=None, vmin=None, vmax=None, shading='flat', facecolors=None, **kwargs)[source]\n \nCreate a pseudocolor plot of an unstructured triangular grid. The triangulation can be specified in one of two ways; either: tripcolor(triangulation, ...)\n where triangulation is a Triangulation object, or tripcolor(x, y, ...)\ntripcolor(x, y, triangles, ...)\ntripcolor(x, y, triangles=triangles, ...)\ntripcolor(x, y, mask=mask, ...)\ntripcolor(x, y, triangles, mask=mask, ...)\n in which case a Triangulation object will be created. See Triangulation for a explanation of these possibilities. The next argument must be C, the array of color values, either one per point in the triangulation if color values are defined at points, or one per triangle in the triangulation if color values are defined at triangles. If there are the same number of points and triangles in the triangulation it is assumed that color values are defined at points; to force the use of color values at triangles use the kwarg facecolors=C instead of just C. shading may be 'flat' (the default) or 'gouraud'. If shading is 'flat' and C values are defined at points, the color values used for each triangle are from the mean C of the triangle's three points. If shading is 'gouraud' then color values must be defined at points. The remaining kwargs are the same as for pcolor. \n  Examples using matplotlib.axes.Axes.tripcolor\n \n   Tripcolor Demo   \n\n   tripcolor(x, y, z)   \n\n"}, {"name": "axes.Axes.triplot", "path": "_as_gen/matplotlib.axes.axes.triplot", "type": "axes", "text": "matplotlib.axes.Axes.triplot   Axes.triplot(*args, **kwargs)[source]\n \nDraw a unstructured triangular grid as lines and/or markers. The triangulation to plot can be specified in one of two ways; either: triplot(triangulation, ...)\n where triangulation is a Triangulation object, or triplot(x, y, ...)\ntriplot(x, y, triangles, ...)\ntriplot(x, y, triangles=triangles, ...)\ntriplot(x, y, mask=mask, ...)\ntriplot(x, y, triangles, mask=mask, ...)\n in which case a Triangulation object will be created. See Triangulation for a explanation of these possibilities. The remaining args and kwargs are the same as for plot.  Returns \n \nlinesLine2D\n\n\nThe drawn triangles edges.  \nmarkersLine2D\n\n\nThe drawn marker nodes.     \n  Examples using matplotlib.axes.Axes.triplot\n \n   Tricontour Smooth Delaunay   \n\n   Tricontour Smooth User   \n\n   Trigradient Demo   \n\n   Triplot Demo   \n\n   Trifinder Event Demo   \n\n   triplot(x, y)   \n\n"}, {"name": "axes.Axes.twinx", "path": "_as_gen/matplotlib.axes.axes.twinx", "type": "axes", "text": "matplotlib.axes.Axes.twinx   Axes.twinx()[source]\n \nCreate a twin Axes sharing the xaxis. Create a new Axes with an invisible x-axis and an independent y-axis positioned opposite to the original one (i.e. at right). The x-axis autoscale setting will be inherited from the original Axes. To ensure that the tick marks of both y-axes align, see LinearLocator.  Returns \n Axes\n\nThe newly created Axes instance     Notes For those who are 'picking' artists while using twinx, pick events are only called for the artists in the top-most Axes. \n  Examples using matplotlib.axes.Axes.twinx\n \n   Axes box aspect   \n\n   Plots with different scales   \n\n   Parasite Simple   \n\n   Parasite axis demo   \n\n   Multiple Yaxis With Spines   \n\n   Basic Usage   \n\n"}, {"name": "axes.Axes.twiny", "path": "_as_gen/matplotlib.axes.axes.twiny", "type": "axes", "text": "matplotlib.axes.Axes.twiny   Axes.twiny()[source]\n \nCreate a twin Axes sharing the yaxis. Create a new Axes with an invisible y-axis and an independent x-axis positioned opposite to the original one (i.e. at top). The y-axis autoscale setting will be inherited from the original Axes. To ensure that the tick marks of both x-axes align, see LinearLocator.  Returns \n Axes\n\nThe newly created Axes instance     Notes For those who are 'picking' artists while using twiny, pick events are only called for the artists in the top-most Axes. \n\n"}, {"name": "axes.Axes.update_datalim", "path": "_as_gen/matplotlib.axes.axes.update_datalim", "type": "axes", "text": "matplotlib.axes.Axes.update_datalim   Axes.update_datalim(xys, updatex=True, updatey=True)[source]\n \nExtend the dataLim Bbox to include the given points. If no data is set currently, the Bbox will ignore its limits and set the bound to be the bounds of the xydata (xys). Otherwise, it will compute the bounds of the union of its current data and the data in xys.  Parameters \n \nxys2D array-like\n\n\nThe points to include in the data limits Bbox. This can be either a list of (x, y) tuples or a Nx2 array.  \nupdatex, updateybool, default: True\n\n\nWhether to update the x/y limits.     \n\n"}, {"name": "axes.Axes.use_sticky_edges", "path": "_as_gen/matplotlib.axes.axes.use_sticky_edges", "type": "axes", "text": "matplotlib.axes.Axes.use_sticky_edges   propertyAxes.use_sticky_edges\n \nWhen autoscaling, whether to obey all Artist.sticky_edges. Default is True. Setting this to False ensures that the specified margins will be applied, even if the plot includes an image, for example, which would otherwise force a view limit to coincide with its data limit. The changing this property does not change the plot until autoscale or autoscale_view is called. \n\n"}, {"name": "axes.Axes.violin", "path": "_as_gen/matplotlib.axes.axes.violin", "type": "axes", "text": "matplotlib.axes.Axes.violin   Axes.violin(vpstats, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False)[source]\n \nDrawing function for violin plots. Draw a violin plot for each column of vpstats. Each filled area extends to represent the entire data range, with optional lines at the mean, the median, the minimum, the maximum, and the quantiles values.  Parameters \n \nvpstatslist of dicts\n\n\nA list of dictionaries containing stats for each violin plot. Required keys are:  \ncoords: A list of scalars containing the coordinates that the violin's kernel density estimate were evaluated at. \nvals: A list of scalars containing the values of the kernel density estimate at each of the coordinates given in coords. \nmean: The mean value for this violin's dataset. \nmedian: The median value for this violin's dataset. \nmin: The minimum value for this violin's dataset. \nmax: The maximum value for this violin's dataset.  Optional keys are:  \nquantiles: A list of scalars containing the quantile values for this violin's dataset.   \npositionsarray-like, default: [1, 2, ..., n]\n\n\nThe positions of the violins. The ticks and limits are automatically set to match the positions.  \nvertbool, default: True.\n\n\nIf true, plots the violins vertically. Otherwise, plots the violins horizontally.  \nwidthsarray-like, default: 0.5\n\n\nEither a scalar or a vector that sets the maximal width of each violin. The default is 0.5, which uses about half of the available horizontal space.  \nshowmeansbool, default: False\n\n\nIf true, will toggle rendering of the means.  \nshowextremabool, default: True\n\n\nIf true, will toggle rendering of the extrema.  \nshowmediansbool, default: False\n\n\nIf true, will toggle rendering of the medians.    Returns \n dict\n\nA dictionary mapping each component of the violinplot to a list of the corresponding collection instances created. The dictionary has the following keys:  \nbodies: A list of the PolyCollection instances containing the filled area of each violin. \ncmeans: A LineCollection instance that marks the mean values of each of the violin's distribution. \ncmins: A LineCollection instance that marks the bottom of each violin's distribution. \ncmaxes: A LineCollection instance that marks the top of each violin's distribution. \ncbars: A LineCollection instance that marks the centers of each violin's distribution. \ncmedians: A LineCollection instance that marks the median values of each of the violin's distribution. \ncquantiles: A LineCollection instance created to identify the quantiles values of each of the violin's distribution.      \n\n"}, {"name": "axes.Axes.violinplot", "path": "_as_gen/matplotlib.axes.axes.violinplot", "type": "axes", "text": "matplotlib.axes.Axes.violinplot   Axes.violinplot(dataset, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False, quantiles=None, points=100, bw_method=None, *, data=None)[source]\n \nMake a violin plot. Make a violin plot for each column of dataset or each vector in sequence dataset. Each filled area extends to represent the entire data range, with optional lines at the mean, the median, the minimum, the maximum, and user-specified quantiles.  Parameters \n \ndatasetArray or a sequence of vectors.\n\n\nThe input data.  \npositionsarray-like, default: [1, 2, ..., n]\n\n\nThe positions of the violins. The ticks and limits are automatically set to match the positions.  \nvertbool, default: True.\n\n\nIf true, creates a vertical violin plot. Otherwise, creates a horizontal violin plot.  \nwidthsarray-like, default: 0.5\n\n\nEither a scalar or a vector that sets the maximal width of each violin. The default is 0.5, which uses about half of the available horizontal space.  \nshowmeansbool, default: False\n\n\nIf True, will toggle rendering of the means.  \nshowextremabool, default: True\n\n\nIf True, will toggle rendering of the extrema.  \nshowmediansbool, default: False\n\n\nIf True, will toggle rendering of the medians.  \nquantilesarray-like, default: None\n\n\nIf not None, set a list of floats in interval [0, 1] for each violin, which stands for the quantiles that will be rendered for that violin.  \npointsint, default: 100\n\n\nDefines the number of points to evaluate each of the gaussian kernel density estimations at.  \nbw_methodstr, scalar or callable, optional\n\n\nThe method used to calculate the estimator bandwidth. This can be 'scott', 'silverman', a scalar constant or a callable. If a scalar, this will be used directly as kde.factor. If a callable, it should take a GaussianKDE instance as its only parameter and return a scalar. If None (default), 'scott' is used.  \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): dataset    Returns \n dict\n\nA dictionary mapping each component of the violinplot to a list of the corresponding collection instances created. The dictionary has the following keys:  \nbodies: A list of the PolyCollection instances containing the filled area of each violin. \ncmeans: A LineCollection instance that marks the mean values of each of the violin's distribution. \ncmins: A LineCollection instance that marks the bottom of each violin's distribution. \ncmaxes: A LineCollection instance that marks the top of each violin's distribution. \ncbars: A LineCollection instance that marks the centers of each violin's distribution. \ncmedians: A LineCollection instance that marks the median values of each of the violin's distribution. \ncquantiles: A LineCollection instance created to identify the quantile values of each of the violin's distribution.      \n  Examples using matplotlib.axes.Axes.violinplot\n \n   Violin plot customization   \n\n   violinplot(D)   \n\n"}, {"name": "axes.Axes.vlines", "path": "_as_gen/matplotlib.axes.axes.vlines", "type": "axes", "text": "matplotlib.axes.Axes.vlines   Axes.vlines(x, ymin, ymax, colors=None, linestyles='solid', label='', *, data=None, **kwargs)[source]\n \nPlot vertical lines at each x from ymin to ymax.  Parameters \n \nxfloat or array-like\n\n\nx-indexes where to plot the lines.  \nymin, ymaxfloat or array-like\n\n\nRespective beginning and end of each line. If scalars are provided, all lines will have same length.  \ncolorslist of colors, default: rcParams[\"lines.color\"] (default: 'C0')\n\n\nlinestyles{'solid', 'dashed', 'dashdot', 'dotted'}, optional\n\n\nlabelstr, default: ''\n\n  Returns \n LineCollection\n  Other Parameters \n \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, ymin, ymax, colors  \n**kwargsLineCollection properties.\n\n    See also  hlines\n\nhorizontal lines  axvline\n\nvertical line across the Axes    \n  Examples using matplotlib.axes.Axes.vlines\n \n   Creating a timeline with lines, dates, and text   \n\n   hlines and vlines   \n\n   Violin plot customization   \n\n"}, {"name": "axes.Axes.xaxis_date", "path": "_as_gen/matplotlib.axes.axes.xaxis_date", "type": "axes", "text": "matplotlib.axes.Axes.xaxis_date   Axes.xaxis_date(tz=None)[source]\n \nSet up axis ticks and labels to treat data along the xaxis as dates.  Parameters \n \ntzstr or datetime.tzinfo, default: rcParams[\"timezone\"] (default: 'UTC')\n\n\nThe timezone used to create date labels.     \n\n"}, {"name": "axes.Axes.xaxis_inverted", "path": "_as_gen/matplotlib.axes.axes.xaxis_inverted", "type": "axes", "text": "matplotlib.axes.Axes.xaxis_inverted   Axes.xaxis_inverted()[source]\n \nReturn whether the xaxis is oriented in the \"inverse\" direction. The \"normal\" direction is increasing to the right for the x-axis and to the top for the y-axis; the \"inverse\" direction is increasing to the left for the x-axis and to the bottom for the y-axis. \n\n"}, {"name": "axes.Axes.xcorr", "path": "_as_gen/matplotlib.axes.axes.xcorr", "type": "axes", "text": "matplotlib.axes.Axes.xcorr   Axes.xcorr(x, y, normed=True, detrend=<function detrend_none>, usevlines=True, maxlags=10, *, data=None, **kwargs)[source]\n \nPlot the cross correlation between x and y. The correlation with lag k is defined as \\(\\sum_n x[n+k] \\cdot y^*[n]\\), where \\(y^*\\) is the complex conjugate of \\(y\\).  Parameters \n \nx, yarray-like of length n\n\n\ndetrendcallable, default: mlab.detrend_none (no detrending)\n\n\nA detrending function applied to x and y. It must have the signature detrend(x: np.ndarray) -> np.ndarray\n  \nnormedbool, default: True\n\n\nIf True, input vectors are normalised to unit length.  \nusevlinesbool, default: True\n\n\nDetermines the plot style. If True, vertical lines are plotted from 0 to the xcorr value using Axes.vlines. Additionally, a horizontal line is plotted at y=0 using Axes.axhline. If False, markers are plotted at the xcorr values using Axes.plot.  \nmaxlagsint, default: 10\n\n\nNumber of lags to show. If None, will return all 2 * len(x) - 1 lags.    Returns \n \nlagsarray (length 2*maxlags+1)\n\n\nThe lag vector.  \ncarray (length 2*maxlags+1)\n\n\nThe auto correlation vector.  \nlineLineCollection or Line2D\n\n\nArtist added to the Axes of the correlation:  \nLineCollection if usevlines is True. \nLine2D if usevlines is False.   \nbLine2D or None\n\n\nHorizontal line at 0 if usevlines is True None usevlines is False.    Other Parameters \n \nlinestyleLine2D property, optional\n\n\nThe linestyle for plotting the data points. Only used if usevlines is False.  \nmarkerstr, default: 'o'\n\n\nThe marker for plotting the data points. Only used if usevlines is False.  \ndataindexable object, optional\n\n\nIf given, the following parameters also accept a string s, which is interpreted as data[s] (unless this raises an exception): x, y  **kwargs\n\nAdditional parameters are passed to Axes.vlines and Axes.axhline if usevlines is True; otherwise they are passed to Axes.plot.     Notes The cross correlation is performed with numpy.correlate with mode = \"full\". \n  Examples using matplotlib.axes.Axes.xcorr\n \n   Cross- and Auto-Correlation Demo   \n\n"}, {"name": "axes.Axes.yaxis_date", "path": "_as_gen/matplotlib.axes.axes.yaxis_date", "type": "axes", "text": "matplotlib.axes.Axes.yaxis_date   Axes.yaxis_date(tz=None)[source]\n \nSet up axis ticks and labels to treat data along the yaxis as dates.  Parameters \n \ntzstr or datetime.tzinfo, default: rcParams[\"timezone\"] (default: 'UTC')\n\n\nThe timezone used to create date labels.     \n\n"}, {"name": "axes.Axes.yaxis_inverted", "path": "_as_gen/matplotlib.axes.axes.yaxis_inverted", "type": "axes", "text": "matplotlib.axes.Axes.yaxis_inverted   Axes.yaxis_inverted()[source]\n \nReturn whether the yaxis is oriented in the \"inverse\" direction. The \"normal\" direction is increasing to the right for the x-axis and to the top for the y-axis; the \"inverse\" direction is increasing to the left for the x-axis and to the bottom for the y-axis. \n\n"}, {"name": "axes.Axes.zorder", "path": "_as_gen/matplotlib.axes.axes.zorder", "type": "axes", "text": "matplotlib.axes.Axes.zorder   Axes.zorder=0\n\n\n"}, {"name": "axes.subplot_class_factory", "path": "_as_gen/matplotlib.axes.subplot_class_factory", "type": "axes", "text": "matplotlib.axes.subplot_class_factory   matplotlib.axes.subplot_class_factory(axes_class)[source]\n\n\n"}, {"name": "axes.SubplotBase", "path": "_as_gen/matplotlib.axes.subplotbase", "type": "axes", "text": "matplotlib.axes.SubplotBase   classmatplotlib.axes.SubplotBase(fig, *args, **kwargs)[source]\n \nBases: object Base class for subplots, which are Axes instances with additional methods to facilitate generating and manipulating a set of Axes within a figure.  Parameters \n \nfigmatplotlib.figure.Figure\n\n\n*argstuple (nrows, ncols, index) or int\n\n\nThe array of subplots in the figure has dimensions (nrows,\nncols), and index is the index of the subplot being created. index starts at 1 in the upper left corner and increases to the right. If nrows, ncols, and index are all single digit numbers, then args can be passed as a single 3-digit number (e.g. 234 for (2, 3, 4)).  **kwargs\n\nKeyword arguments are passed to the Axes (sub)class constructor.       change_geometry(numrows, numcols, num)[source]\n \n[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3). Notes  Deprecated since version 3.4.  \n   propertyfigbox[source]\n\n   get_geometry()[source]\n \n[Deprecated] Get the subplot geometry, e.g., (2, 2, 3). Notes  Deprecated since version 3.4.  \n   get_gridspec()[source]\n \nReturn the GridSpec instance associated with the subplot. \n   get_subplotspec()[source]\n \nReturn the SubplotSpec instance associated with the subplot. \n   is_first_col()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n   is_first_row()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n   is_last_col()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n   is_last_row()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n   label_outer()[source]\n \nOnly show \"outer\" labels and tick labels. x-labels are only kept for subplots on the last row (or first row, if labels are on the top side); y-labels only for subplots on the first column (or last column, if labels are on the right side). \n   propertynumCols[source]\n\n   propertynumRows[source]\n\n   set_subplotspec(subplotspec)[source]\n \nSet the SubplotSpec. instance associated with the subplot. \n   update_params()[source]\n \n[Deprecated] Update the subplot position from self.figure.subplotpars. Notes  Deprecated since version 3.4.  \n \n\n"}, {"name": "axes.SubplotBase.change_geometry()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.change_geometry", "type": "axes", "text": "  change_geometry(numrows, numcols, num)[source]\n \n[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3). Notes  Deprecated since version 3.4.  \n"}, {"name": "axes.SubplotBase.get_geometry()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.get_geometry", "type": "axes", "text": "  get_geometry()[source]\n \n[Deprecated] Get the subplot geometry, e.g., (2, 2, 3). Notes  Deprecated since version 3.4.  \n"}, {"name": "axes.SubplotBase.get_gridspec()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.get_gridspec", "type": "axes", "text": "  get_gridspec()[source]\n \nReturn the GridSpec instance associated with the subplot. \n"}, {"name": "axes.SubplotBase.get_subplotspec()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.get_subplotspec", "type": "axes", "text": "  get_subplotspec()[source]\n \nReturn the SubplotSpec instance associated with the subplot. \n"}, {"name": "axes.SubplotBase.is_first_col()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_first_col", "type": "axes", "text": "  is_first_col()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "axes.SubplotBase.is_first_row()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_first_row", "type": "axes", "text": "  is_first_row()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "axes.SubplotBase.is_last_col()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_last_col", "type": "axes", "text": "  is_last_col()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "axes.SubplotBase.is_last_row()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.is_last_row", "type": "axes", "text": "  is_last_row()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "axes.SubplotBase.label_outer()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.label_outer", "type": "axes", "text": "  label_outer()[source]\n \nOnly show \"outer\" labels and tick labels. x-labels are only kept for subplots on the last row (or first row, if labels are on the top side); y-labels only for subplots on the first column (or last column, if labels are on the right side). \n"}, {"name": "axes.SubplotBase.set_subplotspec()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.set_subplotspec", "type": "axes", "text": "  set_subplotspec(subplotspec)[source]\n \nSet the SubplotSpec. instance associated with the subplot. \n"}, {"name": "axes.SubplotBase.update_params()", "path": "_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase.update_params", "type": "axes", "text": "  update_params()[source]\n \n[Deprecated] Update the subplot position from self.figure.subplotpars. Notes  Deprecated since version 3.4.  \n"}, {"name": "axes_grid", "path": "toolkits/axes_grid", "type": "axes_grid", "text": "mpl_toolkits.axes_grid  Note AxesGrid has been a part of matplotlib since v 0.99. Originally, the toolkit used the axes_grid namespace. In more recent versions, the toolkit has been split into axes_grid1 and axisartist. While axes_grid is maintained for the backward compatibility, use of axes_grid1 and axisartist is recommended. For the documentation on axes_grid, see the previous version of the docs.   mpl_toolkits.axes_grid1 mpl_toolkits.axisartist \n"}, {"name": "axes_grid1", "path": "toolkits/axes_grid1", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1 mpl_toolkits.axes_grid1 provides a framework of helper classes to adjust the positioning of multiple fixed-aspect Axes (e.g., displaying images). It can be contrasted with the aspect property of Matplotlib Axes, which adjusts the position of a single Axes. See Overview of mpl_toolkits.axes_grid1 for a guide on the usage of axes_grid1.    The submodules of the axes_grid1 API are:  \naxes_grid1.anchored_artists   \naxes_grid1.axes_divider Helper classes to adjust the positions of multiple axes at drawing time.  \naxes_grid1.axes_grid   \naxes_grid1.axes_rgb   \naxes_grid1.axes_size Provides classes of simple units that will be used with AxesDivider class (or others) to determine the size of each axes.  \naxes_grid1.inset_locator A collection of functions and objects for creating or placing inset axes.  \naxes_grid1.mpl_axes   \naxes_grid1.parasite_axes   \n"}, {"name": "axes_grid1.anchored_artists", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.anchored_artists  Classes  \nAnchoredAuxTransformBox(transform, loc[, ...]) An anchored container with transformed coordinates.  \nAnchoredDirectionArrows(transform, label_x, ...) Draw two perpendicular arrows to indicate directions.  \nAnchoredDrawingArea(width, height, xdescent, ...) An anchored container with a fixed size and fillable DrawingArea.  \nAnchoredEllipse(transform, width, height, ...) Draw an anchored ellipse of a given size.  \nAnchoredSizeBar(transform, size, label, loc) Draw a horizontal scale bar with a center-aligned label underneath.   \n"}, {"name": "axes_grid1.anchored_artists.AnchoredAuxTransformBox", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredauxtransformbox", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.anchored_artists.AnchoredAuxTransformBox   classmpl_toolkits.axes_grid1.anchored_artists.AnchoredAuxTransformBox(transform, loc, pad=0.4, borderpad=0.5, prop=None, frameon=True, **kwargs)[source]\n \nBases: matplotlib.offsetbox.AnchoredOffsetbox An anchored container with transformed coordinates. Artists added to the drawing_area are scaled according to the coordinates of the transformation used. The dimensions of this artist will scale to contain the artists added.  Parameters \n \ntransformmatplotlib.transforms.Transform\n\n\nThe transformation object for the coordinate system in use, i.e., matplotlib.axes.Axes.transData.  \nlocstr\n\n\nLocation of this artist. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.  \npadfloat, default: 0.4\n\n\nPadding around the child objects, in fraction of the font size.  \nborderpadfloat, default: 0.5\n\n\nBorder padding, in fraction of the font size.  \npropmatplotlib.font_manager.FontProperties, optional\n\n\nFont property used as a reference for paddings.  \nframeonbool, default: True\n\n\nIf True, draw a box around this artists.  **kwargs\n\nKeyword arguments forwarded to AnchoredOffsetbox.     Examples To display an ellipse in the upper left, with a width of 0.1 and height of 0.4 in data coordinates: >>> box = AnchoredAuxTransformBox(ax.transData, loc='upper left')\n>>> el = Ellipse((0, 0), width=0.1, height=0.4, angle=30)\n>>> box.drawing_area.add_artist(el)\n>>> ax.add_artist(box)\n  Attributes \n \ndrawing_areamatplotlib.offsetbox.AuxTransformBox\n\n\nA container for artists to display.       set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n \n  Examples using mpl_toolkits.axes_grid1.anchored_artists.AnchoredAuxTransformBox\n \n   Annotations   \n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredAuxTransformBox.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredauxtransformbox#mpl_toolkits.axes_grid1.anchored_artists.AnchoredAuxTransformBox.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n"}, {"name": "axes_grid1.anchored_artists.AnchoredDirectionArrows", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddirectionarrows", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.anchored_artists.AnchoredDirectionArrows   classmpl_toolkits.axes_grid1.anchored_artists.AnchoredDirectionArrows(transform, label_x, label_y, length=0.15, fontsize=0.08, loc='upper left', angle=0, aspect_ratio=1, pad=0.4, borderpad=0.4, frameon=False, color='w', alpha=1, sep_x=0.01, sep_y=0, fontproperties=None, back_length=0.15, head_width=10, head_length=15, tail_width=2, text_props=None, arrow_props=None, **kwargs)[source]\n \nBases: matplotlib.offsetbox.AnchoredOffsetbox Draw two perpendicular arrows to indicate directions.  Parameters \n \ntransformmatplotlib.transforms.Transform\n\n\nThe transformation object for the coordinate system in use, i.e., matplotlib.axes.Axes.transAxes.  \nlabel_x, label_ystr\n\n\nLabel text for the x and y arrows  \nlengthfloat, default: 0.15\n\n\nLength of the arrow, given in coordinates of transform.  \nfontsizefloat, default: 0.08\n\n\nSize of label strings, given in coordinates of transform.  \nlocstr, default: 'upper left'\n\n\nLocation of this ellipse. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.  \nanglefloat, default: 0\n\n\nThe angle of the arrows in degrees.  \naspect_ratiofloat, default: 1\n\n\nThe ratio of the length of arrow_x and arrow_y. Negative numbers can be used to change the direction.  \npadfloat, default: 0.4\n\n\nPadding around the labels and arrows, in fraction of the font size.  \nborderpadfloat, default: 0.4\n\n\nBorder padding, in fraction of the font size.  \nframeonbool, default: False\n\n\nIf True, draw a box around the arrows and labels.  \ncolorstr, default: 'white'\n\n\nColor for the arrows and labels.  \nalphafloat, default: 1\n\n\nAlpha values of the arrows and labels  \nsep_x, sep_yfloat, default: 0.01 and 0 respectively\n\n\nSeparation between the arrows and labels in coordinates of transform.  \nfontpropertiesmatplotlib.font_manager.FontProperties, optional\n\n\nFont properties for the label text.  \nback_lengthfloat, default: 0.15\n\n\nFraction of the arrow behind the arrow crossing.  \nhead_widthfloat, default: 10\n\n\nWidth of arrow head, sent to ArrowStyle.  \nhead_lengthfloat, default: 15\n\n\nLength of arrow head, sent to ArrowStyle.  \ntail_widthfloat, default: 2\n\n\nWidth of arrow tail, sent to ArrowStyle.  \ntext_props, arrow_propsdict\n\n\nProperties of the text and arrows, passed to textpath.TextPath and patches.FancyArrowPatch.  **kwargs\n\nKeyword arguments forwarded to AnchoredOffsetbox.     Notes If prop is passed as a keyword argument, but fontproperties is not, then prop is be assumed to be the intended fontproperties. Using both prop and fontproperties is not supported. Examples >>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> from mpl_toolkits.axes_grid1.anchored_artists import (\n...     AnchoredDirectionArrows)\n>>> fig, ax = plt.subplots()\n>>> ax.imshow(np.random.random((10, 10)))\n>>> arrows = AnchoredDirectionArrows(ax.transAxes, '111', '110')\n>>> ax.add_artist(arrows)\n>>> fig.show()\n Using several of the optional parameters, creating downward pointing arrow and high contrast text labels. >>> import matplotlib.font_manager as fm\n>>> fontprops = fm.FontProperties(family='monospace')\n>>> arrows = AnchoredDirectionArrows(ax.transAxes, 'East', 'South',\n...                                  loc='lower left', color='k',\n...                                  aspect_ratio=-1, sep_x=0.02,\n...                                  sep_y=-0.01,\n...                                  text_props={'ec':'w', 'fc':'k'},\n...                                  fontproperties=fontprops)\n  Attributes \n \narrow_x, arrow_ymatplotlib.patches.FancyArrowPatch\n\n\nArrow x and y  \ntext_path_x, text_path_ymatplotlib.textpath.TextPath\n\n\nPath for arrow labels  \np_x, p_ymatplotlib.patches.PathPatch\n\n\nPatch for arrow labels  \nboxmatplotlib.offsetbox.AuxTransformBox\n\n\nContainer for the arrows and labels.       set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n \n  Examples using mpl_toolkits.axes_grid1.anchored_artists.AnchoredDirectionArrows\n \n   Anchored Direction Arrow   \n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredDirectionArrows.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddirectionarrows#mpl_toolkits.axes_grid1.anchored_artists.AnchoredDirectionArrows.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n"}, {"name": "axes_grid1.anchored_artists.AnchoredDrawingArea", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddrawingarea", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.anchored_artists.AnchoredDrawingArea   classmpl_toolkits.axes_grid1.anchored_artists.AnchoredDrawingArea(width, height, xdescent, ydescent, loc, pad=0.4, borderpad=0.5, prop=None, frameon=True, **kwargs)[source]\n \nBases: matplotlib.offsetbox.AnchoredOffsetbox An anchored container with a fixed size and fillable DrawingArea. Artists added to the drawing_area will have their coordinates interpreted as pixels. Any transformations set on the artists will be overridden.  Parameters \n \nwidth, heightfloat\n\n\nwidth and height of the container, in pixels.  \nxdescent, ydescentfloat\n\n\ndescent of the container in the x- and y- direction, in pixels.  \nlocstr\n\n\nLocation of this artist. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.  \npadfloat, default: 0.4\n\n\nPadding around the child objects, in fraction of the font size.  \nborderpadfloat, default: 0.5\n\n\nBorder padding, in fraction of the font size.  \npropmatplotlib.font_manager.FontProperties, optional\n\n\nFont property used as a reference for paddings.  \nframeonbool, default: True\n\n\nIf True, draw a box around this artists.  **kwargs\n\nKeyword arguments forwarded to AnchoredOffsetbox.     Examples To display blue and red circles of different sizes in the upper right of an axes ax: >>> ada = AnchoredDrawingArea(20, 20, 0, 0,\n...                           loc='upper right', frameon=False)\n>>> ada.drawing_area.add_artist(Circle((10, 10), 10, fc=\"b\"))\n>>> ada.drawing_area.add_artist(Circle((30, 10), 5, fc=\"r\"))\n>>> ax.add_artist(ada)\n  Attributes \n \ndrawing_areamatplotlib.offsetbox.DrawingArea\n\n\nA container for artists to display.       set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n \n  Examples using mpl_toolkits.axes_grid1.anchored_artists.AnchoredDrawingArea\n \n   Simple Anchored Artists   \n\n   Annotations   \n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredDrawingArea.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoreddrawingarea#mpl_toolkits.axes_grid1.anchored_artists.AnchoredDrawingArea.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n"}, {"name": "axes_grid1.anchored_artists.AnchoredEllipse", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredellipse", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.anchored_artists.AnchoredEllipse   classmpl_toolkits.axes_grid1.anchored_artists.AnchoredEllipse(transform, width, height, angle, loc, pad=0.1, borderpad=0.1, prop=None, frameon=True, **kwargs)[source]\n \nBases: matplotlib.offsetbox.AnchoredOffsetbox Draw an anchored ellipse of a given size.  Parameters \n \ntransformmatplotlib.transforms.Transform\n\n\nThe transformation object for the coordinate system in use, i.e., matplotlib.axes.Axes.transData.  \nwidth, heightfloat\n\n\nWidth and height of the ellipse, given in coordinates of transform.  \nanglefloat\n\n\nRotation of the ellipse, in degrees, anti-clockwise.  \nlocstr\n\n\nLocation of this ellipse. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.  \npadfloat, default: 0.1\n\n\nPadding around the ellipse, in fraction of the font size.  \nborderpadfloat, default: 0.1\n\n\nBorder padding, in fraction of the font size.  \nframeonbool, default: True\n\n\nIf True, draw a box around the ellipse.  \npropmatplotlib.font_manager.FontProperties, optional\n\n\nFont property used as a reference for paddings.  **kwargs\n\nKeyword arguments forwarded to AnchoredOffsetbox.    Attributes \n \nellipsematplotlib.patches.Ellipse\n\n\nEllipse patch drawn.       set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n \n  Examples using mpl_toolkits.axes_grid1.anchored_artists.AnchoredEllipse\n \n   Simple Anchored Artists   \n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredEllipse.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredellipse#mpl_toolkits.axes_grid1.anchored_artists.AnchoredEllipse.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n"}, {"name": "axes_grid1.anchored_artists.AnchoredSizeBar", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredsizebar", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.anchored_artists.AnchoredSizeBar   classmpl_toolkits.axes_grid1.anchored_artists.AnchoredSizeBar(transform, size, label, loc, pad=0.1, borderpad=0.1, sep=2, frameon=True, size_vertical=0, color='black', label_top=False, fontproperties=None, fill_bar=None, **kwargs)[source]\n \nBases: matplotlib.offsetbox.AnchoredOffsetbox Draw a horizontal scale bar with a center-aligned label underneath.  Parameters \n \ntransformmatplotlib.transforms.Transform\n\n\nThe transformation object for the coordinate system in use, i.e., matplotlib.axes.Axes.transData.  \nsizefloat\n\n\nHorizontal length of the size bar, given in coordinates of transform.  \nlabelstr\n\n\nLabel to display.  \nlocstr\n\n\nLocation of this ellipse. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.  \npadfloat, default: 0.1\n\n\nPadding around the label and size bar, in fraction of the font size.  \nborderpadfloat, default: 0.1\n\n\nBorder padding, in fraction of the font size.  \nsepfloat, default: 2\n\n\nSeparation between the label and the size bar, in points.  \nframeonbool, default: True\n\n\nIf True, draw a box around the horizontal bar and label.  \nsize_verticalfloat, default: 0\n\n\nVertical length of the size bar, given in coordinates of transform.  \ncolorstr, default: 'black'\n\n\nColor for the size bar and label.  \nlabel_topbool, default: False\n\n\nIf True, the label will be over the size bar.  \nfontpropertiesmatplotlib.font_manager.FontProperties, optional\n\n\nFont properties for the label text.  \nfill_barbool, optional\n\n\nIf True and if size_vertical is nonzero, the size bar will be filled in with the color specified by the size bar. Defaults to True if size_vertical is greater than zero and False otherwise.  **kwargs\n\nKeyword arguments forwarded to AnchoredOffsetbox.     Notes If prop is passed as a keyword argument, but fontproperties is not, then prop is be assumed to be the intended fontproperties. Using both prop and fontproperties is not supported. Examples >>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> from mpl_toolkits.axes_grid1.anchored_artists import (\n...     AnchoredSizeBar)\n>>> fig, ax = plt.subplots()\n>>> ax.imshow(np.random.random((10, 10)))\n>>> bar = AnchoredSizeBar(ax.transData, 3, '3 data units', 4)\n>>> ax.add_artist(bar)\n>>> fig.show()\n Using all the optional parameters >>> import matplotlib.font_manager as fm\n>>> fontprops = fm.FontProperties(size=14, family='monospace')\n>>> bar = AnchoredSizeBar(ax.transData, 3, '3 units', 4, pad=0.5,\n...                       sep=5, borderpad=0.5, frameon=False,\n...                       size_vertical=0.5, color='white',\n...                       fontproperties=fontprops)\n  Attributes \n \nsize_barmatplotlib.offsetbox.AuxTransformBox\n\n\nContainer for the size bar.  \ntxt_labelmatplotlib.offsetbox.TextArea\n\n\nContainer for the label of the size bar.       set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n \n  Examples using mpl_toolkits.axes_grid1.anchored_artists.AnchoredSizeBar\n \n   Inset Locator Demo2   \n\n   Simple Anchored Artists   \n\n"}, {"name": "axes_grid1.anchored_artists.AnchoredSizeBar.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.anchored_artists.anchoredsizebar#mpl_toolkits.axes_grid1.anchored_artists.AnchoredSizeBar.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n"}, {"name": "axes_grid1.axes_divider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_divider Helper classes to adjust the positions of multiple axes at drawing time.  Classes  \nAxesDivider(axes[, xref, yref]) Divider based on the pre-existing axes.  \nAxesLocator(axes_divider, nx, ny[, nx1, ny1]) A callable object which returns the position and size of a given AxesDivider cell.  \nDivider(fig, pos, horizontal, vertical[, ...]) An Axes positioning class.  \nHBoxDivider(fig, *args[, horizontal, ...]) A SubplotDivider for laying out axes horizontally, while ensuring that they have equal heights.  \nSubplotDivider(fig, *args[, horizontal, ...]) The Divider class whose rectangle area is specified as a subplot geometry.  \nVBoxDivider(fig, *args[, horizontal, ...]) A SubplotDivider for laying out axes vertically, while ensuring that they have equal widths.     Functions  \nmake_axes_area_auto_adjustable(ax[, ...])   \nmake_axes_locatable(axes)    \n"}, {"name": "axes_grid1.axes_divider.AxesDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_divider.AxesDivider   classmpl_toolkits.axes_grid1.axes_divider.AxesDivider(axes, xref=None, yref=None)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_divider.Divider Divider based on the pre-existing axes.  Parameters \n \naxesAxes\n\nxref\nyref\n     append_axes(position, size, pad=None, add_to_figure=<deprecated parameter>, **kwargs)[source]\n \nCreate an axes at the given position with the same height (or width) of the main axes.  position\n\n[\"left\"|\"right\"|\"bottom\"|\"top\"]   size and pad should be axes_grid.axes_size compatible. \n   get_anchor()[source]\n \nReturn the anchor. \n   get_aspect()[source]\n \nReturn aspect. \n   get_position()[source]\n \nReturn the position of the rectangle. \n   get_subplotspec()[source]\n\n   new_horizontal(size, pad=None, pack_start=False, **kwargs)[source]\n \nAdd a new axes on the right (or left) side of the main axes.  Parameters \n \nsizeaxes_size or float or str\n\n\nThe axes width. float or str arguments are interpreted as axes_size.from_any(size, AxesX(<main_axes>)).  \npadaxes_size or float or str\n\n\nPadding between the axes. float or str arguments are interpreted as axes_size.from_any(size, AxesX(<main_axes>)). Defaults to rcParams[\"figure.subplot.wspace\"] (default: 0.2) times the main axes width.  \npack_startbool\n\n\nIf False, the new axes is appended at the end of the list, i.e., it became the right-most axes. If True, it is inserted at the start of the list, and becomes the left-most axes.  **kwargs\n\nAll extra keywords arguments are passed to the created axes. If axes_class is given, the new axes will be created as an instance of the given class. Otherwise, the same class of the main axes will be used.     \n   new_vertical(size, pad=None, pack_start=False, **kwargs)[source]\n \nAdd a new axes on the top (or bottom) side of the main axes.  Parameters \n \nsizeaxes_size or float or str\n\n\nThe axes height. float or str arguments are interpreted as axes_size.from_any(size, AxesY(<main_axes>)).  \npadaxes_size or float or str\n\n\nPadding between the axes. float or str arguments are interpreted as axes_size.from_any(size, AxesY(<main_axes>)). Defaults to rcParams[\"figure.subplot.hspace\"] (default: 0.2) times the main axes height.  \npack_startbool\n\n\nIf False, the new axes is appended at the end of the list, i.e., it became the right-most axes. If True, it is inserted at the start of the list, and becomes the left-most axes.  **kwargs\n\nAll extra keywords arguments are passed to the created axes. If axes_class is given, the new axes will be created as an instance of the given class. Otherwise, the same class of the main axes will be used.     \n \n  Examples using mpl_toolkits.axes_grid1.axes_divider.AxesDivider\n \n   Colorbar with AxesDivider   \n\n   Make Room For Ylabel Using Axesgrid   \n\n   Scatter Histogram (Locatable Axes)   \n\n   Simple Colorbar   \n\n   Tight Layout guide   \n\n"}, {"name": "axes_grid1.axes_divider.AxesDivider.append_axes()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.append_axes", "type": "axes_grid1", "text": "  append_axes(position, size, pad=None, add_to_figure=<deprecated parameter>, **kwargs)[source]\n \nCreate an axes at the given position with the same height (or width) of the main axes.  position\n\n[\"left\"|\"right\"|\"bottom\"|\"top\"]   size and pad should be axes_grid.axes_size compatible. \n"}, {"name": "axes_grid1.axes_divider.AxesDivider.get_anchor()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_anchor", "type": "axes_grid1", "text": "  get_anchor()[source]\n \nReturn the anchor. \n"}, {"name": "axes_grid1.axes_divider.AxesDivider.get_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_aspect", "type": "axes_grid1", "text": "  get_aspect()[source]\n \nReturn aspect. \n"}, {"name": "axes_grid1.axes_divider.AxesDivider.get_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_position", "type": "axes_grid1", "text": "  get_position()[source]\n \nReturn the position of the rectangle. \n"}, {"name": "axes_grid1.axes_divider.AxesDivider.get_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.get_subplotspec", "type": "axes_grid1", "text": "  get_subplotspec()[source]\n\n"}, {"name": "axes_grid1.axes_divider.AxesDivider.new_horizontal()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.new_horizontal", "type": "axes_grid1", "text": "  new_horizontal(size, pad=None, pack_start=False, **kwargs)[source]\n \nAdd a new axes on the right (or left) side of the main axes.  Parameters \n \nsizeaxes_size or float or str\n\n\nThe axes width. float or str arguments are interpreted as axes_size.from_any(size, AxesX(<main_axes>)).  \npadaxes_size or float or str\n\n\nPadding between the axes. float or str arguments are interpreted as axes_size.from_any(size, AxesX(<main_axes>)). Defaults to rcParams[\"figure.subplot.wspace\"] (default: 0.2) times the main axes width.  \npack_startbool\n\n\nIf False, the new axes is appended at the end of the list, i.e., it became the right-most axes. If True, it is inserted at the start of the list, and becomes the left-most axes.  **kwargs\n\nAll extra keywords arguments are passed to the created axes. If axes_class is given, the new axes will be created as an instance of the given class. Otherwise, the same class of the main axes will be used.     \n"}, {"name": "axes_grid1.axes_divider.AxesDivider.new_vertical()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axesdivider#mpl_toolkits.axes_grid1.axes_divider.AxesDivider.new_vertical", "type": "axes_grid1", "text": "  new_vertical(size, pad=None, pack_start=False, **kwargs)[source]\n \nAdd a new axes on the top (or bottom) side of the main axes.  Parameters \n \nsizeaxes_size or float or str\n\n\nThe axes height. float or str arguments are interpreted as axes_size.from_any(size, AxesY(<main_axes>)).  \npadaxes_size or float or str\n\n\nPadding between the axes. float or str arguments are interpreted as axes_size.from_any(size, AxesY(<main_axes>)). Defaults to rcParams[\"figure.subplot.hspace\"] (default: 0.2) times the main axes height.  \npack_startbool\n\n\nIf False, the new axes is appended at the end of the list, i.e., it became the right-most axes. If True, it is inserted at the start of the list, and becomes the left-most axes.  **kwargs\n\nAll extra keywords arguments are passed to the created axes. If axes_class is given, the new axes will be created as an instance of the given class. Otherwise, the same class of the main axes will be used.     \n"}, {"name": "axes_grid1.axes_divider.AxesLocator", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axeslocator", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_divider.AxesLocator   classmpl_toolkits.axes_grid1.axes_divider.AxesLocator(axes_divider, nx, ny, nx1=None, ny1=None)[source]\n \nBases: object A callable object which returns the position and size of a given AxesDivider cell.  Parameters \n \naxes_dividerAxesDivider\n\n\nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.  \nny, ny1int\n\n\nSame as nx and nx1, but for row positions.       __call__(axes, renderer)[source]\n \nCall self as a function. \n   get_subplotspec()[source]\n\n \n\n"}, {"name": "axes_grid1.axes_divider.AxesLocator.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axeslocator#mpl_toolkits.axes_grid1.axes_divider.AxesLocator.__call__", "type": "axes_grid1", "text": "  __call__(axes, renderer)[source]\n \nCall self as a function. \n"}, {"name": "axes_grid1.axes_divider.AxesLocator.get_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.axeslocator#mpl_toolkits.axes_grid1.axes_divider.AxesLocator.get_subplotspec", "type": "axes_grid1", "text": "  get_subplotspec()[source]\n\n"}, {"name": "axes_grid1.axes_divider.Divider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_divider.Divider   classmpl_toolkits.axes_grid1.axes_divider.Divider(fig, pos, horizontal, vertical, aspect=None, anchor='C')[source]\n \nBases: object An Axes positioning class. The divider is initialized with lists of horizontal and vertical sizes (mpl_toolkits.axes_grid1.axes_size) based on which a given rectangular area will be divided. The new_locator method then creates a callable object that can be used as the axes_locator of the axes.  Parameters \n \nfigFigure\n\n\npostuple of 4 floats\n\n\nPosition of the rectangle that will be divided.  \nhorizontallist of axes_size\n\n\nSizes for horizontal division.  \nverticallist of axes_size\n\n\nSizes for vertical division.  \naspectbool\n\n\nWhether overall rectangular area is reduced so that the relative part of the horizontal and vertical scales have the same scale.  \nanchor{'C', 'SW', 'S', 'SE', 'E', 'NE', 'N', 'NW', 'W'}\n\n\nPlacement of the reduced rectangle, when aspect is True.       add_auto_adjustable_area(use_axes, pad=0.1, adjust_dirs=None)[source]\n\n   append_size(position, size)[source]\n\n   get_anchor()[source]\n \nReturn the anchor. \n   get_aspect()[source]\n \nReturn aspect. \n   get_horizontal()[source]\n \nReturn horizontal sizes. \n   get_horizontal_sizes(renderer)[source]\n\n   get_locator()[source]\n\n   get_position()[source]\n \nReturn the position of the rectangle. \n   get_position_runtime(ax, renderer)[source]\n\n   get_vertical()[source]\n \nReturn vertical sizes. \n   get_vertical_sizes(renderer)[source]\n\n   get_vsize_hsize()[source]\n \n[Deprecated] Notes  Deprecated since version 3.5:   \n   locate(nx, ny, nx1=None, ny1=None, axes=None, renderer=None)[source]\n \n Parameters \n \nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.  \nny, ny1int\n\n\nSame as nx and nx1, but for row positions.  axes\nrenderer\n   \n   new_locator(nx, ny, nx1=None, ny1=None)[source]\n \nReturn a new AxesLocator for the specified cell.  Parameters \n \nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.  \nny, ny1int\n\n\nSame as nx and nx1, but for row positions.     \n   set_anchor(anchor)[source]\n \n Parameters \n \nanchor(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n\nEither an (x, y) pair of relative coordinates (0 is left or bottom, 1 is right or top), 'C' (center), or a cardinal direction ('SW', southwest, is bottom left, etc.).      See also  Axes.set_anchor\n  \n   set_aspect(aspect=False)[source]\n \n Parameters \n \naspectbool\n\n   \n   set_horizontal(h)[source]\n \n Parameters \n \nhlist of axes_size\n\n\nsizes for horizontal division     \n   set_locator(_locator)[source]\n\n   set_position(pos)[source]\n \nSet the position of the rectangle.  Parameters \n \npostuple of 4 floats\n\n\nposition of the rectangle that will be divided     \n   set_vertical(v)[source]\n \n Parameters \n \nvlist of axes_size\n\n\nsizes for vertical division     \n \n\n"}, {"name": "axes_grid1.axes_divider.Divider.add_auto_adjustable_area()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.add_auto_adjustable_area", "type": "axes_grid1", "text": "  add_auto_adjustable_area(use_axes, pad=0.1, adjust_dirs=None)[source]\n\n"}, {"name": "axes_grid1.axes_divider.Divider.append_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.append_size", "type": "axes_grid1", "text": "  append_size(position, size)[source]\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_anchor()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_anchor", "type": "axes_grid1", "text": "  get_anchor()[source]\n \nReturn the anchor. \n"}, {"name": "axes_grid1.axes_divider.Divider.get_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_aspect", "type": "axes_grid1", "text": "  get_aspect()[source]\n \nReturn aspect. \n"}, {"name": "axes_grid1.axes_divider.Divider.get_horizontal()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_horizontal", "type": "axes_grid1", "text": "  get_horizontal()[source]\n \nReturn horizontal sizes. \n"}, {"name": "axes_grid1.axes_divider.Divider.get_horizontal_sizes()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_horizontal_sizes", "type": "axes_grid1", "text": "  get_horizontal_sizes(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_locator", "type": "axes_grid1", "text": "  get_locator()[source]\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_position", "type": "axes_grid1", "text": "  get_position()[source]\n \nReturn the position of the rectangle. \n"}, {"name": "axes_grid1.axes_divider.Divider.get_position_runtime()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_position_runtime", "type": "axes_grid1", "text": "  get_position_runtime(ax, renderer)[source]\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_vertical()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_vertical", "type": "axes_grid1", "text": "  get_vertical()[source]\n \nReturn vertical sizes. \n"}, {"name": "axes_grid1.axes_divider.Divider.get_vertical_sizes()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_vertical_sizes", "type": "axes_grid1", "text": "  get_vertical_sizes(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_divider.Divider.get_vsize_hsize()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.get_vsize_hsize", "type": "axes_grid1", "text": "  get_vsize_hsize()[source]\n \n[Deprecated] Notes  Deprecated since version 3.5:   \n"}, {"name": "axes_grid1.axes_divider.Divider.locate()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.locate", "type": "axes_grid1", "text": "  locate(nx, ny, nx1=None, ny1=None, axes=None, renderer=None)[source]\n \n Parameters \n \nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.  \nny, ny1int\n\n\nSame as nx and nx1, but for row positions.  axes\nrenderer\n   \n"}, {"name": "axes_grid1.axes_divider.Divider.new_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.new_locator", "type": "axes_grid1", "text": "  new_locator(nx, ny, nx1=None, ny1=None)[source]\n \nReturn a new AxesLocator for the specified cell.  Parameters \n \nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.  \nny, ny1int\n\n\nSame as nx and nx1, but for row positions.     \n"}, {"name": "axes_grid1.axes_divider.Divider.set_anchor()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_anchor", "type": "axes_grid1", "text": "  set_anchor(anchor)[source]\n \n Parameters \n \nanchor(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\n\nEither an (x, y) pair of relative coordinates (0 is left or bottom, 1 is right or top), 'C' (center), or a cardinal direction ('SW', southwest, is bottom left, etc.).      See also  Axes.set_anchor\n  \n"}, {"name": "axes_grid1.axes_divider.Divider.set_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_aspect", "type": "axes_grid1", "text": "  set_aspect(aspect=False)[source]\n \n Parameters \n \naspectbool\n\n   \n"}, {"name": "axes_grid1.axes_divider.Divider.set_horizontal()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_horizontal", "type": "axes_grid1", "text": "  set_horizontal(h)[source]\n \n Parameters \n \nhlist of axes_size\n\n\nsizes for horizontal division     \n"}, {"name": "axes_grid1.axes_divider.Divider.set_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_locator", "type": "axes_grid1", "text": "  set_locator(_locator)[source]\n\n"}, {"name": "axes_grid1.axes_divider.Divider.set_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_position", "type": "axes_grid1", "text": "  set_position(pos)[source]\n \nSet the position of the rectangle.  Parameters \n \npostuple of 4 floats\n\n\nposition of the rectangle that will be divided     \n"}, {"name": "axes_grid1.axes_divider.Divider.set_vertical()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.divider#mpl_toolkits.axes_grid1.axes_divider.Divider.set_vertical", "type": "axes_grid1", "text": "  set_vertical(v)[source]\n \n Parameters \n \nvlist of axes_size\n\n\nsizes for vertical division     \n"}, {"name": "axes_grid1.axes_divider.HBoxDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.hboxdivider", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_divider.HBoxDivider   classmpl_toolkits.axes_grid1.axes_divider.HBoxDivider(fig, *args, horizontal=None, vertical=None, aspect=None, anchor='C')[source]\n \nBases: mpl_toolkits.axes_grid1.axes_divider.SubplotDivider A SubplotDivider for laying out axes horizontally, while ensuring that they have equal heights. Examples (Source code, png, pdf)     Parameters \n \nfigmatplotlib.figure.Figure\n\n\n*argstuple (nrows, ncols, index) or int\n\n\nThe array of subplots in the figure has dimensions (nrows,\nncols), and index is the index of the subplot being created. index starts at 1 in the upper left corner and increases to the right. If nrows, ncols, and index are all single digit numbers, then args can be passed as a single 3-digit number (e.g. 234 for (2, 3, 4)).       locate(nx, ny, nx1=None, ny1=None, axes=None, renderer=None)[source]\n \n Parameters \n \nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.  \nny, ny1int\n\n\nSame as nx and nx1, but for row positions.  axes\nrenderer\n   \n   new_locator(nx, nx1=None)[source]\n \nCreate a new AxesLocator for the specified cell.  Parameters \n \nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.     \n \n  Examples using mpl_toolkits.axes_grid1.axes_divider.HBoxDivider\n \n   HBoxDivider demo   \n\n"}, {"name": "axes_grid1.axes_divider.HBoxDivider.locate()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.hboxdivider#mpl_toolkits.axes_grid1.axes_divider.HBoxDivider.locate", "type": "axes_grid1", "text": "  locate(nx, ny, nx1=None, ny1=None, axes=None, renderer=None)[source]\n \n Parameters \n \nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.  \nny, ny1int\n\n\nSame as nx and nx1, but for row positions.  axes\nrenderer\n   \n"}, {"name": "axes_grid1.axes_divider.HBoxDivider.new_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.hboxdivider#mpl_toolkits.axes_grid1.axes_divider.HBoxDivider.new_locator", "type": "axes_grid1", "text": "  new_locator(nx, nx1=None)[source]\n \nCreate a new AxesLocator for the specified cell.  Parameters \n \nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.     \n"}, {"name": "axes_grid1.axes_divider.make_axes_area_auto_adjustable", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.make_axes_area_auto_adjustable", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_divider.make_axes_area_auto_adjustable   mpl_toolkits.axes_grid1.axes_divider.make_axes_area_auto_adjustable(ax, use_axes=None, pad=0.1, adjust_dirs=None)[source]\n\n  Examples using mpl_toolkits.axes_grid1.axes_divider.make_axes_area_auto_adjustable\n \n   Make Room For Ylabel Using Axesgrid   \n\n"}, {"name": "axes_grid1.axes_divider.make_axes_locatable", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.make_axes_locatable", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_divider.make_axes_locatable   mpl_toolkits.axes_grid1.axes_divider.make_axes_locatable(axes)[source]\n\n\n"}, {"name": "axes_grid1.axes_divider.SubplotDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_divider.SubplotDivider   classmpl_toolkits.axes_grid1.axes_divider.SubplotDivider(fig, *args, horizontal=None, vertical=None, aspect=None, anchor='C')[source]\n \nBases: mpl_toolkits.axes_grid1.axes_divider.Divider The Divider class whose rectangle area is specified as a subplot geometry.  Parameters \n \nfigmatplotlib.figure.Figure\n\n\n*argstuple (nrows, ncols, index) or int\n\n\nThe array of subplots in the figure has dimensions (nrows,\nncols), and index is the index of the subplot being created. index starts at 1 in the upper left corner and increases to the right. If nrows, ncols, and index are all single digit numbers, then args can be passed as a single 3-digit number (e.g. 234 for (2, 3, 4)).       change_geometry(numrows, numcols, num)[source]\n \n[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3). Notes  Deprecated since version 3.4.  \n   propertyfigbox[source]\n\n   get_geometry()[source]\n \n[Deprecated] Get the subplot geometry, e.g., (2, 2, 3). Notes  Deprecated since version 3.4.  \n   get_position()[source]\n \nReturn the bounds of the subplot box. \n   get_subplotspec()[source]\n \nGet the SubplotSpec instance. \n   set_subplotspec(subplotspec)[source]\n \nSet the SubplotSpec instance. \n   update_params()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n \n\n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.change_geometry()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.change_geometry", "type": "axes_grid1", "text": "  change_geometry(numrows, numcols, num)[source]\n \n[Deprecated] Change subplot geometry, e.g., from (1, 1, 1) to (2, 2, 3). Notes  Deprecated since version 3.4.  \n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.get_geometry()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.get_geometry", "type": "axes_grid1", "text": "  get_geometry()[source]\n \n[Deprecated] Get the subplot geometry, e.g., (2, 2, 3). Notes  Deprecated since version 3.4.  \n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.get_position()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.get_position", "type": "axes_grid1", "text": "  get_position()[source]\n \nReturn the bounds of the subplot box. \n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.get_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.get_subplotspec", "type": "axes_grid1", "text": "  get_subplotspec()[source]\n \nGet the SubplotSpec instance. \n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.set_subplotspec()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.set_subplotspec", "type": "axes_grid1", "text": "  set_subplotspec(subplotspec)[source]\n \nSet the SubplotSpec instance. \n"}, {"name": "axes_grid1.axes_divider.SubplotDivider.update_params()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.subplotdivider#mpl_toolkits.axes_grid1.axes_divider.SubplotDivider.update_params", "type": "axes_grid1", "text": "  update_params()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "axes_grid1.axes_divider.VBoxDivider", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.vboxdivider", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_divider.VBoxDivider   classmpl_toolkits.axes_grid1.axes_divider.VBoxDivider(fig, *args, horizontal=None, vertical=None, aspect=None, anchor='C')[source]\n \nBases: mpl_toolkits.axes_grid1.axes_divider.SubplotDivider A SubplotDivider for laying out axes vertically, while ensuring that they have equal widths.  Parameters \n \nfigmatplotlib.figure.Figure\n\n\n*argstuple (nrows, ncols, index) or int\n\n\nThe array of subplots in the figure has dimensions (nrows,\nncols), and index is the index of the subplot being created. index starts at 1 in the upper left corner and increases to the right. If nrows, ncols, and index are all single digit numbers, then args can be passed as a single 3-digit number (e.g. 234 for (2, 3, 4)).       locate(nx, ny, nx1=None, ny1=None, axes=None, renderer=None)[source]\n \n Parameters \n \nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.  \nny, ny1int\n\n\nSame as nx and nx1, but for row positions.  axes\nrenderer\n   \n   new_locator(ny, ny1=None)[source]\n \nCreate a new AxesLocator for the specified cell.  Parameters \n \nny, ny1int\n\n\nIntegers specifying the row-position of the cell. When ny1 is None, a single ny-th row is specified. Otherwise location of rows spanning between ny to ny1 (but excluding ny1-th row) is specified.     \n \n\n"}, {"name": "axes_grid1.axes_divider.VBoxDivider.locate()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.vboxdivider#mpl_toolkits.axes_grid1.axes_divider.VBoxDivider.locate", "type": "axes_grid1", "text": "  locate(nx, ny, nx1=None, ny1=None, axes=None, renderer=None)[source]\n \n Parameters \n \nnx, nx1int\n\n\nIntegers specifying the column-position of the cell. When nx1 is None, a single nx-th column is specified. Otherwise location of columns spanning between nx to nx1 (but excluding nx1-th column) is specified.  \nny, ny1int\n\n\nSame as nx and nx1, but for row positions.  axes\nrenderer\n   \n"}, {"name": "axes_grid1.axes_divider.VBoxDivider.new_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_divider.vboxdivider#mpl_toolkits.axes_grid1.axes_divider.VBoxDivider.new_locator", "type": "axes_grid1", "text": "  new_locator(ny, ny1=None)[source]\n \nCreate a new AxesLocator for the specified cell.  Parameters \n \nny, ny1int\n\n\nIntegers specifying the row-position of the cell. When ny1 is None, a single ny-th row is specified. Otherwise location of rows spanning between ny to ny1 (but excluding ny1-th row) is specified.     \n"}, {"name": "axes_grid1.axes_grid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_grid  Classes  \nAxesGrid alias of mpl_toolkits.axes_grid1.axes_grid.ImageGrid  \nCbarAxes(*args, orientation, **kwargs) [Deprecated]  \nCbarAxesBase(*args, orientation, **kwargs)   \nGrid(fig, rect, nrows_ncols[, ngrids, ...]) A grid of Axes.  \nImageGrid(fig, rect, nrows_ncols[, ngrids, ...]) \n Parameters     \n"}, {"name": "axes_grid1.axes_grid.AxesGrid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.axesgrid", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_grid.AxesGrid   mpl_toolkits.axes_grid1.axes_grid.AxesGrid[source]\n \nalias of mpl_toolkits.axes_grid1.axes_grid.ImageGrid \n\n"}, {"name": "axes_grid1.axes_grid.CbarAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_grid.CbarAxes   classmpl_toolkits.axes_grid1.axes_grid.CbarAxes(*args, orientation, **kwargs)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase, mpl_toolkits.axes_grid1.mpl_axes.Axes [Deprecated] Notes  Deprecated since version 3.5:   Build an Axes in a figure.  Parameters \n \nfigFigure\n\n\nThe Axes is built in the Figure fig.  \nrect[left, bottom, width, height]\n\n\nThe Axes is built in the rectangle rect. rect is in Figure coordinates.  \nsharex, shareyAxes, optional\n\n\nThe x or y axis is shared with the x or y axis in the input Axes.  \nframeonbool, default: True\n\n\nWhether the Axes frame is visible.  \nbox_aspectfloat, optional\n\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.  **kwargs\n\nOther optional keyword arguments:   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float      Returns \n Axes\n\nThe new Axes object.       set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n \n\n"}, {"name": "axes_grid1.axes_grid.CbarAxes.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxes#mpl_toolkits.axes_grid1.axes_grid.CbarAxes.set", "type": "axes_grid1", "text": "  set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n"}, {"name": "axes_grid1.axes_grid.CbarAxesBase", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase   classmpl_toolkits.axes_grid1.axes_grid.CbarAxesBase(*args, orientation, **kwargs)[source]\n \nBases: object   cla()[source]\n\n   colorbar(mappable, *, ticks=None, **kwargs)[source]\n\n   toggle_label(b)[source]\n\n \n\n"}, {"name": "axes_grid1.axes_grid.CbarAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase#mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase.cla", "type": "axes_grid1", "text": "  cla()[source]\n\n"}, {"name": "axes_grid1.axes_grid.CbarAxesBase.colorbar()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase#mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase.colorbar", "type": "axes_grid1", "text": "  colorbar(mappable, *, ticks=None, **kwargs)[source]\n\n"}, {"name": "axes_grid1.axes_grid.CbarAxesBase.toggle_label()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.cbaraxesbase#mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase.toggle_label", "type": "axes_grid1", "text": "  toggle_label(b)[source]\n\n"}, {"name": "axes_grid1.axes_grid.Grid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_grid.Grid   classmpl_toolkits.axes_grid1.axes_grid.Grid(fig, rect, nrows_ncols, ngrids=None, direction='row', axes_pad=0.02, *, share_all=False, share_x=True, share_y=True, label_mode='L', axes_class=None, aspect=False)[source]\n \nBases: object A grid of Axes. In Matplotlib, the axes location (and size) is specified in normalized figure coordinates. This may not be ideal for images that needs to be displayed with a given aspect ratio; for example, it is difficult to display multiple images of a same size with some fixed padding between them. AxesGrid can be used in such case.  Parameters \n \nfigFigure\n\n\nThe parent figure.  \nrect(float, float, float, float) or int\n\n\nThe axes position, as a (left, bottom, width, height) tuple or as a three-digit subplot position code (e.g., \"121\").  \nnrows_ncols(int, int)\n\n\nNumber of rows and columns in the grid.  \nngridsint or None, default: None\n\n\nIf not None, only the first ngrids axes in the grid are created.  \ndirection{\"row\", \"column\"}, default: \"row\"\n\n\nWhether axes are created in row-major (\"row by row\") or column-major order (\"column by column\"). This also affects the order in which axes are accessed using indexing (grid[index]).  \naxes_padfloat or (float, float), default: 0.02\n\n\nPadding or (horizontal padding, vertical padding) between axes, in inches.  \nshare_allbool, default: False\n\n\nWhether all axes share their x- and y-axis. Overrides share_x and share_y.  \nshare_xbool, default: True\n\n\nWhether all axes of a column share their x-axis.  \nshare_ybool, default: True\n\n\nWhether all axes of a row share their y-axis.  \nlabel_mode{\"L\", \"1\", \"all\"}, default: \"L\"\n\n\nDetermines which axes will get tick labels:  \"L\": All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels. \"1\": Only the bottom left axes is labelled. \"all\": all axes are labelled.   \naxes_classsubclass of matplotlib.axes.Axes, default: None\n\n\naspectbool, default: False\n\n\nWhether the axes aspect ratio follows the aspect ratio of the data limits.       get_aspect()[source]\n \nReturn the aspect of the SubplotDivider. \n   get_axes_locator()[source]\n\n   get_axes_pad()[source]\n \nReturn the axes padding.  Returns \n hpad, vpad\n\nPadding (horizontal pad, vertical pad) in inches.     \n   get_divider()[source]\n\n   get_geometry()[source]\n \nReturn the number of rows and columns of the grid as (nrows, ncols). \n   get_vsize_hsize()[source]\n \n[Deprecated] Notes  Deprecated since version 3.5:   \n   set_aspect(aspect)[source]\n \nSet the aspect of the SubplotDivider. \n   set_axes_locator(locator)[source]\n\n   set_axes_pad(axes_pad)[source]\n \nSet the padding between the axes.  Parameters \n \naxes_pad(float, float)\n\n\nThe padding (horizontal pad, vertical pad) in inches.     \n   set_label_mode(mode)[source]\n \nDefine which axes have tick labels.  Parameters \n \nmode{\"L\", \"1\", \"all\"}\n\n\nThe label mode:  \"L\": All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels. \"1\": Only the bottom left axes is labelled. \"all\": all axes are labelled.      \n \n\n"}, {"name": "axes_grid1.axes_grid.Grid.get_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_aspect", "type": "axes_grid1", "text": "  get_aspect()[source]\n \nReturn the aspect of the SubplotDivider. \n"}, {"name": "axes_grid1.axes_grid.Grid.get_axes_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_axes_locator", "type": "axes_grid1", "text": "  get_axes_locator()[source]\n\n"}, {"name": "axes_grid1.axes_grid.Grid.get_axes_pad()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_axes_pad", "type": "axes_grid1", "text": "  get_axes_pad()[source]\n \nReturn the axes padding.  Returns \n hpad, vpad\n\nPadding (horizontal pad, vertical pad) in inches.     \n"}, {"name": "axes_grid1.axes_grid.Grid.get_divider()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_divider", "type": "axes_grid1", "text": "  get_divider()[source]\n\n"}, {"name": "axes_grid1.axes_grid.Grid.get_geometry()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_geometry", "type": "axes_grid1", "text": "  get_geometry()[source]\n \nReturn the number of rows and columns of the grid as (nrows, ncols). \n"}, {"name": "axes_grid1.axes_grid.Grid.get_vsize_hsize()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.get_vsize_hsize", "type": "axes_grid1", "text": "  get_vsize_hsize()[source]\n \n[Deprecated] Notes  Deprecated since version 3.5:   \n"}, {"name": "axes_grid1.axes_grid.Grid.set_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_aspect", "type": "axes_grid1", "text": "  set_aspect(aspect)[source]\n \nSet the aspect of the SubplotDivider. \n"}, {"name": "axes_grid1.axes_grid.Grid.set_axes_locator()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_axes_locator", "type": "axes_grid1", "text": "  set_axes_locator(locator)[source]\n\n"}, {"name": "axes_grid1.axes_grid.Grid.set_axes_pad()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_axes_pad", "type": "axes_grid1", "text": "  set_axes_pad(axes_pad)[source]\n \nSet the padding between the axes.  Parameters \n \naxes_pad(float, float)\n\n\nThe padding (horizontal pad, vertical pad) in inches.     \n"}, {"name": "axes_grid1.axes_grid.Grid.set_label_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.grid#mpl_toolkits.axes_grid1.axes_grid.Grid.set_label_mode", "type": "axes_grid1", "text": "  set_label_mode(mode)[source]\n \nDefine which axes have tick labels.  Parameters \n \nmode{\"L\", \"1\", \"all\"}\n\n\nThe label mode:  \"L\": All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels. \"1\": Only the bottom left axes is labelled. \"all\": all axes are labelled.      \n"}, {"name": "axes_grid1.axes_grid.ImageGrid", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_grid.imagegrid", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_grid.ImageGrid   classmpl_toolkits.axes_grid1.axes_grid.ImageGrid(fig, rect, nrows_ncols, ngrids=None, direction='row', axes_pad=0.02, *, share_all=False, aspect=True, label_mode='L', cbar_mode=None, cbar_location='right', cbar_pad=None, cbar_size='5%', cbar_set_cax=True, axes_class=None)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_grid.Grid  Parameters \n \nfigFigure\n\n\nThe parent figure.  \nrect(float, float, float, float) or int\n\n\nThe axes position, as a (left, bottom, width, height) tuple or as a three-digit subplot position code (e.g., \"121\").  \nnrows_ncols(int, int)\n\n\nNumber of rows and columns in the grid.  \nngridsint or None, default: None\n\n\nIf not None, only the first ngrids axes in the grid are created.  \ndirection{\"row\", \"column\"}, default: \"row\"\n\n\nWhether axes are created in row-major (\"row by row\") or column-major order (\"column by column\"). This also affects the order in which axes are accessed using indexing (grid[index]).  \naxes_padfloat or (float, float), default: 0.02in\n\n\nPadding or (horizontal padding, vertical padding) between axes, in inches.  \nshare_allbool, default: False\n\n\nWhether all axes share their x- and y-axis.  \naspectbool, default: True\n\n\nWhether the axes aspect ratio follows the aspect ratio of the data limits.  \nlabel_mode{\"L\", \"1\", \"all\"}, default: \"L\"\n\n\nDetermines which axes will get tick labels:  \"L\": All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels. \"1\": Only the bottom left axes is labelled. \"all\": all axes are labelled.   \ncbar_mode{\"each\", \"single\", \"edge\", None}, default: None\n\n\nWhether to create a colorbar for \"each\" axes, a \"single\" colorbar for the entire grid, colorbars only for axes on the \"edge\" determined by cbar_location, or no colorbars. The colorbars are stored in the cbar_axes attribute.  \ncbar_location{\"left\", \"right\", \"bottom\", \"top\"}, default: \"right\"\n\n\ncbar_padfloat, default: None\n\n\nPadding between the image axes and the colorbar axes.  \ncbar_sizesize specification (see Size.from_any), default: \"5%\"\n\n\nColorbar size.  \ncbar_set_caxbool, default: True\n\n\nIf True, each axes in the grid has a cax attribute that is bound to associated cbar_axes.  \naxes_classsubclass of matplotlib.axes.Axes, default: None\n\n   \n\n"}, {"name": "axes_grid1.axes_rgb", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_rgb  Classes  \nRGBAxes(*args[, pad]) 4-panel imshow (RGB, R, G, B).     Functions  \nmake_rgb_axes(ax[, pad, axes_class]) \n Parameters     \n"}, {"name": "axes_grid1.axes_rgb.make_rgb_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb.make_rgb_axes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_rgb.make_rgb_axes   mpl_toolkits.axes_grid1.axes_rgb.make_rgb_axes(ax, pad=0.01, axes_class=None, **kwargs)[source]\n \n Parameters \n \npadfloat\n\n\nFraction of the axes height.     \n  Examples using mpl_toolkits.axes_grid1.axes_rgb.make_rgb_axes\n \n   Showing RGB channels using RGBAxes   \n\n"}, {"name": "axes_grid1.axes_rgb.RGBAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb.rgbaxes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_rgb.RGBAxes   classmpl_toolkits.axes_grid1.axes_rgb.RGBAxes(*args, pad=0, **kwargs)[source]\n \nBases: object 4-panel imshow (RGB, R, G, B). Layout:  \nRGB R  \nG  \nB   Subclasses can override the _defaultAxesClass attribute.  Attributes \n \nRGB_defaultAxesClass\n\n\nThe axes object for the three-channel imshow.  \nR_defaultAxesClass\n\n\nThe axes object for the red channel imshow.  \nG_defaultAxesClass\n\n\nThe axes object for the green channel imshow.  \nB_defaultAxesClass\n\n\nThe axes object for the blue channel imshow.      Parameters \n \npadfloat, default: 0\n\n\nfraction of the axes height to put as padding.  \naxes_classmatplotlib.axes.Axes\n\n*args\n\nUnpacked into axes_class() init for RGB  **kwargs\n\nUnpacked into axes_class() init for RGB, R, G, B axes       imshow_rgb(r, g, b, **kwargs)[source]\n \nCreate the four images {rgb, r, g, b}.  Parameters \n \nr, g, barray-like\n\n\nThe red, green, and blue arrays.  \nkwargsimshow kwargs\n\n\nkwargs get unpacked into the imshow calls for the four images.    Returns \n \nrgbmatplotlib.image.AxesImage\n\n\nrmatplotlib.image.AxesImage\n\n\ngmatplotlib.image.AxesImage\n\n\nbmatplotlib.image.AxesImage\n\n   \n \n  Examples using mpl_toolkits.axes_grid1.axes_rgb.RGBAxes\n \n   Showing RGB channels using RGBAxes   \n\n"}, {"name": "axes_grid1.axes_rgb.RGBAxes.imshow_rgb()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_rgb.rgbaxes#mpl_toolkits.axes_grid1.axes_rgb.RGBAxes.imshow_rgb", "type": "axes_grid1", "text": "  imshow_rgb(r, g, b, **kwargs)[source]\n \nCreate the four images {rgb, r, g, b}.  Parameters \n \nr, g, barray-like\n\n\nThe red, green, and blue arrays.  \nkwargsimshow kwargs\n\n\nkwargs get unpacked into the imshow calls for the four images.    Returns \n \nrgbmatplotlib.image.AxesImage\n\n\nrmatplotlib.image.AxesImage\n\n\ngmatplotlib.image.AxesImage\n\n\nbmatplotlib.image.AxesImage\n\n   \n"}, {"name": "axes_grid1.axes_size", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size Provides classes of simple units that will be used with AxesDivider class (or others) to determine the size of each axes. The unit classes define get_size method that returns a tuple of two floats, meaning relative and absolute sizes, respectively. Note that this class is nothing more than a simple tuple of two floats. Take a look at the Divider class to see how these two values are used.  Classes  \nAdd(a, b)   \nAddList(add_list)   \nAxesX(axes[, aspect, ref_ax]) Scaled size whose relative part corresponds to the data width of the axes multiplied by the aspect.  \nAxesY(axes[, aspect, ref_ax]) Scaled size whose relative part corresponds to the data height of the axes multiplied by the aspect.  \nFixed(fixed_size) Simple fixed size with absolute part = fixed_size and relative part = 0.  \nFraction(fraction, ref_size) An instance whose size is a fraction of the ref_size.  \nGetExtentHelper(ax, direction)   \nMaxExtent(artist_list, w_or_h) Size whose absolute part is either the largest width or the largest height of the given artist_list.  \nMaxHeight(artist_list) Size whose absolute part is the largest height of the given artist_list.  \nMaxWidth(artist_list) Size whose absolute part is the largest width of the given artist_list.  \nPadded(size, pad) Return a instance where the absolute part of size is increase by the amount of pad.  \nScalable alias of mpl_toolkits.axes_grid1.axes_size.Scaled  \nScaled(scalable_size) Simple scaled(?) size with absolute part = 0 and relative part = scalable_size.  \nSizeFromFunc(func)      Functions  \nfrom_any(size[, fraction_ref]) Create a Fixed unit when the first argument is a float, or a Fraction unit if that is a string that ends with %.   \n"}, {"name": "axes_grid1.axes_size.Add", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.add", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.Add   classmpl_toolkits.axes_grid1.axes_size.Add(a, b)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size._Base   get_size(renderer)[source]\n\n \n\n"}, {"name": "axes_grid1.axes_size.Add.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.add#mpl_toolkits.axes_grid1.axes_size.Add.get_size", "type": "axes_grid1", "text": "  get_size(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_size.AddList", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.addlist", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.AddList   classmpl_toolkits.axes_grid1.axes_size.AddList(add_list)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size._Base   get_size(renderer)[source]\n\n \n\n"}, {"name": "axes_grid1.axes_size.AddList.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.addlist#mpl_toolkits.axes_grid1.axes_size.AddList.get_size", "type": "axes_grid1", "text": "  get_size(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_size.AxesX", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesx", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.AxesX   classmpl_toolkits.axes_grid1.axes_size.AxesX(axes, aspect=1.0, ref_ax=None)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size._Base Scaled size whose relative part corresponds to the data width of the axes multiplied by the aspect.   get_size(renderer)[source]\n\n \n  Examples using mpl_toolkits.axes_grid1.axes_size.AxesX\n \n   HBoxDivider demo   \n\n   Simple Axes Divider 3   \n\n"}, {"name": "axes_grid1.axes_size.AxesX.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesx#mpl_toolkits.axes_grid1.axes_size.AxesX.get_size", "type": "axes_grid1", "text": "  get_size(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_size.AxesY", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesy", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.AxesY   classmpl_toolkits.axes_grid1.axes_size.AxesY(axes, aspect=1.0, ref_ax=None)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size._Base Scaled size whose relative part corresponds to the data height of the axes multiplied by the aspect.   get_size(renderer)[source]\n\n \n  Examples using mpl_toolkits.axes_grid1.axes_size.AxesY\n \n   HBoxDivider demo   \n\n   Simple Axes Divider 3   \n\n"}, {"name": "axes_grid1.axes_size.AxesY.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.axesy#mpl_toolkits.axes_grid1.axes_size.AxesY.get_size", "type": "axes_grid1", "text": "  get_size(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_size.Fixed", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fixed", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.Fixed   classmpl_toolkits.axes_grid1.axes_size.Fixed(fixed_size)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size._Base Simple fixed size with absolute part = fixed_size and relative part = 0.   get_size(renderer)[source]\n\n \n  Examples using mpl_toolkits.axes_grid1.axes_size.Fixed\n \n   HBoxDivider demo   \n\n   Axes with a fixed physical size   \n\n   Simple Axes Divider 1   \n\n   Simple Axes Divider 3   \n\n"}, {"name": "axes_grid1.axes_size.Fixed.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fixed#mpl_toolkits.axes_grid1.axes_size.Fixed.get_size", "type": "axes_grid1", "text": "  get_size(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_size.Fraction", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fraction", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.Fraction   classmpl_toolkits.axes_grid1.axes_size.Fraction(fraction, ref_size)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size._Base An instance whose size is a fraction of the ref_size. >>> s = Fraction(0.3, AxesX(ax))\n   get_size(renderer)[source]\n\n \n\n"}, {"name": "axes_grid1.axes_size.Fraction.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.fraction#mpl_toolkits.axes_grid1.axes_size.Fraction.get_size", "type": "axes_grid1", "text": "  get_size(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_size.from_any", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.from_any", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.from_any   mpl_toolkits.axes_grid1.axes_size.from_any(size, fraction_ref=None)[source]\n \nCreate a Fixed unit when the first argument is a float, or a Fraction unit if that is a string that ends with %. The second argument is only meaningful when Fraction unit is created. >>> a = Size.from_any(1.2) # => Size.Fixed(1.2)\n>>> Size.from_any(\"50%\", a) # => Size.Fraction(0.5, a)\n \n\n"}, {"name": "axes_grid1.axes_size.GetExtentHelper", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.getextenthelper", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.GetExtentHelper   classmpl_toolkits.axes_grid1.axes_size.GetExtentHelper(ax, direction)[source]\n \nBases: object   __call__(renderer)[source]\n \nCall self as a function. \n \n\n"}, {"name": "axes_grid1.axes_size.GetExtentHelper.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.getextenthelper#mpl_toolkits.axes_grid1.axes_size.GetExtentHelper.__call__", "type": "axes_grid1", "text": "  __call__(renderer)[source]\n \nCall self as a function. \n"}, {"name": "axes_grid1.axes_size.MaxExtent", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxextent", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.MaxExtent   classmpl_toolkits.axes_grid1.axes_size.MaxExtent(artist_list, w_or_h)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size._Base Size whose absolute part is either the largest width or the largest height of the given artist_list.   add_artist(a)[source]\n\n   get_size(renderer)[source]\n\n \n\n"}, {"name": "axes_grid1.axes_size.MaxExtent.add_artist()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxextent#mpl_toolkits.axes_grid1.axes_size.MaxExtent.add_artist", "type": "axes_grid1", "text": "  add_artist(a)[source]\n\n"}, {"name": "axes_grid1.axes_size.MaxExtent.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxextent#mpl_toolkits.axes_grid1.axes_size.MaxExtent.get_size", "type": "axes_grid1", "text": "  get_size(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_size.MaxHeight", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxheight", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.MaxHeight   classmpl_toolkits.axes_grid1.axes_size.MaxHeight(artist_list)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size.MaxExtent Size whose absolute part is the largest height of the given artist_list. \n\n"}, {"name": "axes_grid1.axes_size.MaxWidth", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.maxwidth", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.MaxWidth   classmpl_toolkits.axes_grid1.axes_size.MaxWidth(artist_list)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size.MaxExtent Size whose absolute part is the largest width of the given artist_list. \n\n"}, {"name": "axes_grid1.axes_size.Padded", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.padded", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.Padded   classmpl_toolkits.axes_grid1.axes_size.Padded(size, pad)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size._Base Return a instance where the absolute part of size is increase by the amount of pad.   get_size(renderer)[source]\n\n \n\n"}, {"name": "axes_grid1.axes_size.Padded.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.padded#mpl_toolkits.axes_grid1.axes_size.Padded.get_size", "type": "axes_grid1", "text": "  get_size(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_size.Scalable", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.scalable", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.Scalable   mpl_toolkits.axes_grid1.axes_size.Scalable[source]\n \nalias of mpl_toolkits.axes_grid1.axes_size.Scaled \n\n"}, {"name": "axes_grid1.axes_size.Scaled", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.scaled", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.Scaled   classmpl_toolkits.axes_grid1.axes_size.Scaled(scalable_size)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size._Base Simple scaled(?) size with absolute part = 0 and relative part = scalable_size.   get_size(renderer)[source]\n\n \n  Examples using mpl_toolkits.axes_grid1.axes_size.Scaled\n \n   HBoxDivider demo   \n\n   Axes with a fixed physical size   \n\n   Simple Axes Divider 1   \n\n"}, {"name": "axes_grid1.axes_size.Scaled.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.scaled#mpl_toolkits.axes_grid1.axes_size.Scaled.get_size", "type": "axes_grid1", "text": "  get_size(renderer)[source]\n\n"}, {"name": "axes_grid1.axes_size.SizeFromFunc", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.sizefromfunc", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.axes_size.SizeFromFunc   classmpl_toolkits.axes_grid1.axes_size.SizeFromFunc(func)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_size._Base   get_size(renderer)[source]\n\n \n\n"}, {"name": "axes_grid1.axes_size.SizeFromFunc.get_size()", "path": "_as_gen/mpl_toolkits.axes_grid1.axes_size.sizefromfunc#mpl_toolkits.axes_grid1.axes_size.SizeFromFunc.get_size", "type": "axes_grid1", "text": "  get_size(renderer)[source]\n\n"}, {"name": "axes_grid1.inset_locator", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator A collection of functions and objects for creating or placing inset axes.  Classes  \nAnchoredLocatorBase(bbox_to_anchor, ...[, ...]) \n Parameters    \nAnchoredSizeLocator(bbox_to_anchor, x_size, ...) \n Parameters    \nAnchoredZoomLocator(parent_axes, zoom, loc) \n Parameters    \nBboxConnector(bbox1, bbox2, loc1[, loc2]) Connect two bboxes with a straight line.  \nBboxConnectorPatch(bbox1, bbox2, loc1a, ...) Connect two bboxes with a quadrilateral.  \nBboxPatch(bbox, **kwargs) Patch showing the shape bounded by a Bbox.  \nInsetPosition(parent, lbwh) An object for positioning an inset axes.     Functions  \ninset_axes(parent_axes, width, height[, ...]) Create an inset axes with a given width and height.  \nmark_inset(parent_axes, inset_axes, loc1, ...) Draw a box to mark the location of an area represented by an inset axes.  \nzoomed_inset_axes(parent_axes, zoom[, loc, ...]) Create an anchored inset axes by scaling a parent axes.   \n"}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase   classmpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase(bbox_to_anchor, offsetbox, loc, borderpad=0.5, bbox_transform=None)[source]\n \nBases: matplotlib.offsetbox.AnchoredOffsetbox  Parameters \n \nlocstr\n\n\nThe box location. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.  \npadfloat, default: 0.4\n\n\nPadding around the child as fraction of the fontsize.  \nborderpadfloat, default: 0.5\n\n\nPadding between the offsetbox frame and the bbox_to_anchor.  \nchildOffsetBox\n\n\nThe box that will be anchored.  \npropFontProperties\n\n\nThis is only used as a reference for paddings. If not given, rcParams[\"legend.fontsize\"] (default: 'medium') is used.  \nframeonbool\n\n\nWhether to draw a frame around the box.  \nbbox_to_anchorBboxBase, 2-tuple, or 4-tuple of floats\n\n\nBox that is used to position the legend in conjunction with loc.  \nbbox_transformNone or matplotlib.transforms.Transform\n\n\nThe transform for the bounding box (bbox_to_anchor).  **kwargs\n\nAll other parameters are passed on to OffsetBox.     Notes See Legend for a detailed description of the anchoring mechanism.   __call__(ax, renderer)[source]\n \nCall self as a function. \n   draw(renderer)[source]\n \nUpdate the location of children if necessary and draw them to the given renderer. \n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n \n\n"}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase#mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase.__call__", "type": "axes_grid1", "text": "  __call__(ax, renderer)[source]\n \nCall self as a function. \n"}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase.draw()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase#mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase.draw", "type": "axes_grid1", "text": "  draw(renderer)[source]\n \nUpdate the location of children if necessary and draw them to the given renderer. \n"}, {"name": "axes_grid1.inset_locator.AnchoredLocatorBase.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredlocatorbase#mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n"}, {"name": "axes_grid1.inset_locator.AnchoredSizeLocator", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredsizelocator", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator.AnchoredSizeLocator   classmpl_toolkits.axes_grid1.inset_locator.AnchoredSizeLocator(bbox_to_anchor, x_size, y_size, loc, borderpad=0.5, bbox_transform=None)[source]\n \nBases: mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase  Parameters \n \nlocstr\n\n\nThe box location. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.  \npadfloat, default: 0.4\n\n\nPadding around the child as fraction of the fontsize.  \nborderpadfloat, default: 0.5\n\n\nPadding between the offsetbox frame and the bbox_to_anchor.  \nchildOffsetBox\n\n\nThe box that will be anchored.  \npropFontProperties\n\n\nThis is only used as a reference for paddings. If not given, rcParams[\"legend.fontsize\"] (default: 'medium') is used.  \nframeonbool\n\n\nWhether to draw a frame around the box.  \nbbox_to_anchorBboxBase, 2-tuple, or 4-tuple of floats\n\n\nBox that is used to position the legend in conjunction with loc.  \nbbox_transformNone or matplotlib.transforms.Transform\n\n\nThe transform for the bounding box (bbox_to_anchor).  **kwargs\n\nAll other parameters are passed on to OffsetBox.     Notes See Legend for a detailed description of the anchoring mechanism.   get_extent(renderer)[source]\n \nReturn the extent of the box as (width, height, x, y). This is the extent of the child plus the padding. \n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n \n\n"}, {"name": "axes_grid1.inset_locator.AnchoredSizeLocator.get_extent()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredsizelocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredSizeLocator.get_extent", "type": "axes_grid1", "text": "  get_extent(renderer)[source]\n \nReturn the extent of the box as (width, height, x, y). This is the extent of the child plus the padding. \n"}, {"name": "axes_grid1.inset_locator.AnchoredSizeLocator.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredsizelocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredSizeLocator.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n"}, {"name": "axes_grid1.inset_locator.AnchoredZoomLocator", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredzoomlocator", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator.AnchoredZoomLocator   classmpl_toolkits.axes_grid1.inset_locator.AnchoredZoomLocator(parent_axes, zoom, loc, borderpad=0.5, bbox_to_anchor=None, bbox_transform=None)[source]\n \nBases: mpl_toolkits.axes_grid1.inset_locator.AnchoredLocatorBase  Parameters \n \nlocstr\n\n\nThe box location. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.  \npadfloat, default: 0.4\n\n\nPadding around the child as fraction of the fontsize.  \nborderpadfloat, default: 0.5\n\n\nPadding between the offsetbox frame and the bbox_to_anchor.  \nchildOffsetBox\n\n\nThe box that will be anchored.  \npropFontProperties\n\n\nThis is only used as a reference for paddings. If not given, rcParams[\"legend.fontsize\"] (default: 'medium') is used.  \nframeonbool\n\n\nWhether to draw a frame around the box.  \nbbox_to_anchorBboxBase, 2-tuple, or 4-tuple of floats\n\n\nBox that is used to position the legend in conjunction with loc.  \nbbox_transformNone or matplotlib.transforms.Transform\n\n\nThe transform for the bounding box (bbox_to_anchor).  **kwargs\n\nAll other parameters are passed on to OffsetBox.     Notes See Legend for a detailed description of the anchoring mechanism.   get_extent(renderer)[source]\n \nReturn the extent of the box as (width, height, x, y). This is the extent of the child plus the padding. \n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n \n\n"}, {"name": "axes_grid1.inset_locator.AnchoredZoomLocator.get_extent()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredzoomlocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredZoomLocator.get_extent", "type": "axes_grid1", "text": "  get_extent(renderer)[source]\n \nReturn the extent of the box as (width, height, x, y). This is the extent of the child plus the padding. \n"}, {"name": "axes_grid1.inset_locator.AnchoredZoomLocator.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.anchoredzoomlocator#mpl_toolkits.axes_grid1.inset_locator.AnchoredZoomLocator.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, bbox_to_anchor=<UNSET>, child=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, height=<UNSET>, in_layout=<UNSET>, label=<UNSET>, offset=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, width=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbbox_to_anchor unknown  \nchild unknown  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nheight float  \nin_layout bool  \nlabel object  \noffset (float, float) or callable  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nwidth float  \nzorder float   \n"}, {"name": "axes_grid1.inset_locator.BboxConnector", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator.BboxConnector   classmpl_toolkits.axes_grid1.inset_locator.BboxConnector(bbox1, bbox2, loc1, loc2=None, **kwargs)[source]\n \nBases: matplotlib.patches.Patch Connect two bboxes with a straight line.  Parameters \n \nbbox1, bbox2matplotlib.transforms.Bbox\n\n\nBounding boxes to connect.  \nloc1{1, 2, 3, 4}\n\n\nCorner of bbox1 to draw the line. Valid values are: 'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4\n  \nloc2{1, 2, 3, 4}, optional\n\n\nCorner of bbox2 to draw the line. If None, defaults to loc1. Valid values are: 'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4\n  **kwargs\n\nPatch properties for the line drawn. Valid arguments include:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha unknown  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float         staticconnect_bbox(bbox1, bbox2, loc1, loc2=None)[source]\n \nHelper function to obtain a Path from one bbox to another.  Parameters \n \nbbox1, bbox2matplotlib.transforms.Bbox\n\n\nBounding boxes to connect.  \nloc1{1, 2, 3, 4}\n\n\nCorner of bbox1 to use. Valid values are: 'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4\n  \nloc2{1, 2, 3, 4}, optional\n\n\nCorner of bbox2 to use. If None, defaults to loc1. Valid values are: 'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4\n    Returns \n \npathmatplotlib.path.Path\n\n\nA line segment from the loc1 corner of bbox1 to the loc2 corner of bbox2.     \n   staticget_bbox_edge_pos(bbox, loc)[source]\n \nHelper function to obtain the location of a corner of a bbox  Parameters \n \nbboxmatplotlib.transforms.Bbox\n\n\nloc{1, 2, 3, 4}\n\n\nCorner of bbox. Valid values are: 'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4\n    Returns \n \nx, yfloat\n\n\nCoordinates of the corner specified by loc.     \n   get_path()[source]\n \nReturn the path of this patch. \n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, antialiased=<UNSET>, capstyle=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>, fill=<UNSET>, gid=<UNSET>, hatch=<UNSET>, in_layout=<UNSET>, joinstyle=<UNSET>, label=<UNSET>, linestyle=<UNSET>, linewidth=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float   \n \n  Examples using mpl_toolkits.axes_grid1.inset_locator.BboxConnector\n \n   Axes Zoom Effect   \n\n"}, {"name": "axes_grid1.inset_locator.BboxConnector.connect_bbox()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.connect_bbox", "type": "axes_grid1", "text": "  staticconnect_bbox(bbox1, bbox2, loc1, loc2=None)[source]\n \nHelper function to obtain a Path from one bbox to another.  Parameters \n \nbbox1, bbox2matplotlib.transforms.Bbox\n\n\nBounding boxes to connect.  \nloc1{1, 2, 3, 4}\n\n\nCorner of bbox1 to use. Valid values are: 'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4\n  \nloc2{1, 2, 3, 4}, optional\n\n\nCorner of bbox2 to use. If None, defaults to loc1. Valid values are: 'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4\n    Returns \n \npathmatplotlib.path.Path\n\n\nA line segment from the loc1 corner of bbox1 to the loc2 corner of bbox2.     \n"}, {"name": "axes_grid1.inset_locator.BboxConnector.get_bbox_edge_pos()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.get_bbox_edge_pos", "type": "axes_grid1", "text": "  staticget_bbox_edge_pos(bbox, loc)[source]\n \nHelper function to obtain the location of a corner of a bbox  Parameters \n \nbboxmatplotlib.transforms.Bbox\n\n\nloc{1, 2, 3, 4}\n\n\nCorner of bbox. Valid values are: 'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4\n    Returns \n \nx, yfloat\n\n\nCoordinates of the corner specified by loc.     \n"}, {"name": "axes_grid1.inset_locator.BboxConnector.get_path()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.get_path", "type": "axes_grid1", "text": "  get_path()[source]\n \nReturn the path of this patch. \n"}, {"name": "axes_grid1.inset_locator.BboxConnector.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnector#mpl_toolkits.axes_grid1.inset_locator.BboxConnector.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, antialiased=<UNSET>, capstyle=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>, fill=<UNSET>, gid=<UNSET>, hatch=<UNSET>, in_layout=<UNSET>, joinstyle=<UNSET>, label=<UNSET>, linestyle=<UNSET>, linewidth=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float   \n"}, {"name": "axes_grid1.inset_locator.BboxConnectorPatch", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnectorpatch", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator.BboxConnectorPatch   classmpl_toolkits.axes_grid1.inset_locator.BboxConnectorPatch(bbox1, bbox2, loc1a, loc2a, loc1b, loc2b, **kwargs)[source]\n \nBases: mpl_toolkits.axes_grid1.inset_locator.BboxConnector Connect two bboxes with a quadrilateral. The quadrilateral is specified by two lines that start and end at corners of the bboxes. The four sides of the quadrilateral are defined by the two lines given, the line between the two corners specified in bbox1 and the line between the two corners specified in bbox2.  Parameters \n \nbbox1, bbox2matplotlib.transforms.Bbox\n\n\nBounding boxes to connect.  \nloc1a, loc2a{1, 2, 3, 4}\n\n\nCorners of bbox1 and bbox2 to draw the first line. Valid values are: 'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4\n  \nloc1b, loc2b{1, 2, 3, 4}\n\n\nCorners of bbox1 and bbox2 to draw the second line. Valid values are: 'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4\n  **kwargs\n\nPatch properties for the line drawn:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha unknown  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float         get_path()[source]\n \nReturn the path of this patch. \n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, antialiased=<UNSET>, capstyle=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>, fill=<UNSET>, gid=<UNSET>, hatch=<UNSET>, in_layout=<UNSET>, joinstyle=<UNSET>, label=<UNSET>, linestyle=<UNSET>, linewidth=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float   \n \n  Examples using mpl_toolkits.axes_grid1.inset_locator.BboxConnectorPatch\n \n   Axes Zoom Effect   \n\n"}, {"name": "axes_grid1.inset_locator.BboxConnectorPatch.get_path()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnectorpatch#mpl_toolkits.axes_grid1.inset_locator.BboxConnectorPatch.get_path", "type": "axes_grid1", "text": "  get_path()[source]\n \nReturn the path of this patch. \n"}, {"name": "axes_grid1.inset_locator.BboxConnectorPatch.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxconnectorpatch#mpl_toolkits.axes_grid1.inset_locator.BboxConnectorPatch.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, antialiased=<UNSET>, capstyle=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>, fill=<UNSET>, gid=<UNSET>, hatch=<UNSET>, in_layout=<UNSET>, joinstyle=<UNSET>, label=<UNSET>, linestyle=<UNSET>, linewidth=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float   \n"}, {"name": "axes_grid1.inset_locator.BboxPatch", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxpatch", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator.BboxPatch   classmpl_toolkits.axes_grid1.inset_locator.BboxPatch(bbox, **kwargs)[source]\n \nBases: matplotlib.patches.Patch Patch showing the shape bounded by a Bbox.  Parameters \n \nbboxmatplotlib.transforms.Bbox\n\n\nBbox to use for the extents of this patch.  **kwargs\n\nPatch properties. Valid arguments include:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha unknown  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float         get_path()[source]\n \nReturn the path of this patch. \n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, antialiased=<UNSET>, capstyle=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>, fill=<UNSET>, gid=<UNSET>, hatch=<UNSET>, in_layout=<UNSET>, joinstyle=<UNSET>, label=<UNSET>, linestyle=<UNSET>, linewidth=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float   \n \n  Examples using mpl_toolkits.axes_grid1.inset_locator.BboxPatch\n \n   Axes Zoom Effect   \n\n"}, {"name": "axes_grid1.inset_locator.BboxPatch.get_path()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxpatch#mpl_toolkits.axes_grid1.inset_locator.BboxPatch.get_path", "type": "axes_grid1", "text": "  get_path()[source]\n \nReturn the path of this patch. \n"}, {"name": "axes_grid1.inset_locator.BboxPatch.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.bboxpatch#mpl_toolkits.axes_grid1.inset_locator.BboxPatch.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, antialiased=<UNSET>, capstyle=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>, fill=<UNSET>, gid=<UNSET>, hatch=<UNSET>, in_layout=<UNSET>, joinstyle=<UNSET>, label=<UNSET>, linestyle=<UNSET>, linewidth=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float   \n"}, {"name": "axes_grid1.inset_locator.inset_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.inset_axes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator.inset_axes   mpl_toolkits.axes_grid1.inset_locator.inset_axes(parent_axes, width, height, loc='upper right', bbox_to_anchor=None, bbox_transform=None, axes_class=None, axes_kwargs=None, borderpad=0.5)[source]\n \nCreate an inset axes with a given width and height. Both sizes used can be specified either in inches or percentage. For example,: inset_axes(parent_axes, width='40%', height='30%', loc='lower left')\n creates in inset axes in the lower left corner of parent_axes which spans over 30% in height and 40% in width of the parent_axes. Since the usage of inset_axes may become slightly tricky when exceeding such standard cases, it is recommended to read the examples.  Parameters \n \nparent_axesmatplotlib.axes.Axes\n\n\nAxes to place the inset axes.  \nwidth, heightfloat or str\n\n\nSize of the inset axes to create. If a float is provided, it is the size in inches, e.g. width=1.3. If a string is provided, it is the size in relative units, e.g. width='40%'. By default, i.e. if neither bbox_to_anchor nor bbox_transform are specified, those are relative to the parent_axes. Otherwise they are to be understood relative to the bounding box provided via bbox_to_anchor.  \nlocstr, default: 'upper right'\n\n\nLocation to place the inset axes. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.  \nbbox_to_anchortuple or matplotlib.transforms.BboxBase, optional\n\n\nBbox that the inset axes will be anchored to. If None, a tuple of (0, 0, 1, 1) is used if bbox_transform is set to parent_axes.transAxes or parent_axes.figure.transFigure. Otherwise, parent_axes.bbox is used. If a tuple, can be either [left, bottom, width, height], or [left, bottom]. If the kwargs width and/or height are specified in relative units, the 2-tuple [left, bottom] cannot be used. Note that, unless bbox_transform is set, the units of the bounding box are interpreted in the pixel coordinate. When using bbox_to_anchor with tuple, it almost always makes sense to also specify a bbox_transform. This might often be the axes transform parent_axes.transAxes.  \nbbox_transformmatplotlib.transforms.Transform, optional\n\n\nTransformation for the bbox that contains the inset axes. If None, a transforms.IdentityTransform is used. The value of bbox_to_anchor (or the return value of its get_points method) is transformed by the bbox_transform and then interpreted as points in the pixel coordinate (which is dpi dependent). You may provide bbox_to_anchor in some normalized coordinate, and give an appropriate transform (e.g., parent_axes.transAxes).  \naxes_classmatplotlib.axes.Axes type, default: HostAxes\n\n\nThe type of the newly created inset axes.  \naxes_kwargsdict, optional\n\n\nKeyword arguments to pass to the constructor of the inset axes. Valid arguments include:   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float    \nborderpadfloat, default: 0.5\n\n\nPadding between inset axes and the bbox_to_anchor. The units are axes font size, i.e. for a default font size of 10 points borderpad = 0.5 is equivalent to a padding of 5 points.    Returns \n \ninset_axesaxes_class\n\n\nInset axes object created.     Notes The meaning of bbox_to_anchor and bbox_to_transform is interpreted differently from that of legend. The value of bbox_to_anchor (or the return value of its get_points method; the default is parent_axes.bbox) is transformed by the bbox_transform (the default is Identity transform) and then interpreted as points in the pixel coordinate (which is dpi dependent). Thus, following three calls are identical and creates an inset axes with respect to the parent_axes: axins = inset_axes(parent_axes, \"30%\", \"40%\")\naxins = inset_axes(parent_axes, \"30%\", \"40%\",\n                   bbox_to_anchor=parent_axes.bbox)\naxins = inset_axes(parent_axes, \"30%\", \"40%\",\n                   bbox_to_anchor=(0, 0, 1, 1),\n                   bbox_transform=parent_axes.transAxes)\n \n  Examples using mpl_toolkits.axes_grid1.inset_locator.inset_axes\n \n   Adding a colorbar to inset axes   \n\n   Controlling the position and size of colorbars with Inset Axes   \n\n   Inset Locator Demo   \n\n"}, {"name": "axes_grid1.inset_locator.InsetPosition", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.insetposition", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator.InsetPosition   classmpl_toolkits.axes_grid1.inset_locator.InsetPosition(parent, lbwh)[source]\n \nBases: object An object for positioning an inset axes. This is created by specifying the normalized coordinates in the axes, instead of the figure.  Parameters \n \nparentmatplotlib.axes.Axes\n\n\nAxes to use for normalizing coordinates.  \nlbwhiterable of four floats\n\n\nThe left edge, bottom edge, width, and height of the inset axes, in units of the normalized coordinate of the parent axes.      See also  matplotlib.axes.Axes.set_axes_locator()\n  Examples The following bounds the inset axes to a box with 20% of the parent axes's height and 40% of the width. The size of the axes specified ([0, 0, 1, 1]) ensures that the axes completely fills the bounding box: >>> parent_axes = plt.gca()\n>>> ax_ins = plt.axes([0, 0, 1, 1])\n>>> ip = InsetPosition(ax, [0.5, 0.1, 0.4, 0.2])\n>>> ax_ins.set_axes_locator(ip)\n   __call__(ax, renderer)[source]\n \nCall self as a function. \n \n\n"}, {"name": "axes_grid1.inset_locator.InsetPosition.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.insetposition#mpl_toolkits.axes_grid1.inset_locator.InsetPosition.__call__", "type": "axes_grid1", "text": "  __call__(ax, renderer)[source]\n \nCall self as a function. \n"}, {"name": "axes_grid1.inset_locator.mark_inset", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.mark_inset", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator.mark_inset   mpl_toolkits.axes_grid1.inset_locator.mark_inset(parent_axes, inset_axes, loc1, loc2, **kwargs)[source]\n \nDraw a box to mark the location of an area represented by an inset axes. This function draws a box in parent_axes at the bounding box of inset_axes, and shows a connection with the inset axes by drawing lines at the corners, giving a \"zoomed in\" effect.  Parameters \n \nparent_axesmatplotlib.axes.Axes\n\n\nAxes which contains the area of the inset axes.  \ninset_axesmatplotlib.axes.Axes\n\n\nThe inset axes.  \nloc1, loc2{1, 2, 3, 4}\n\n\nCorners to use for connecting the inset axes and the area in the parent axes.  **kwargs\n\nPatch properties for the lines and box drawn:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha unknown  \nanimated bool  \nantialiased or aa bool or None  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor color  \nedgecolor or ec color or None  \nfacecolor or fc color or None  \nfigure Figure  \nfill bool  \ngid str  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float or None  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float      Returns \n \nppmatplotlib.patches.Patch\n\n\nThe patch drawn to represent the area of the inset axes.  \np1, p2matplotlib.patches.Patch\n\n\nThe patches connecting two corners of the inset axes and its area.     \n  Examples using mpl_toolkits.axes_grid1.inset_locator.mark_inset\n \n   Inset Locator Demo2   \n\n"}, {"name": "axes_grid1.inset_locator.zoomed_inset_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.inset_locator.zoomed_inset_axes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.inset_locator.zoomed_inset_axes   mpl_toolkits.axes_grid1.inset_locator.zoomed_inset_axes(parent_axes, zoom, loc='upper right', bbox_to_anchor=None, bbox_transform=None, axes_class=None, axes_kwargs=None, borderpad=0.5)[source]\n \nCreate an anchored inset axes by scaling a parent axes. For usage, also see the examples.  Parameters \n \nparent_axesmatplotlib.axes.Axes\n\n\nAxes to place the inset axes.  \nzoomfloat\n\n\nScaling factor of the data axes. zoom > 1 will enlarge the coordinates (i.e., \"zoomed in\"), while zoom < 1 will shrink the coordinates (i.e., \"zoomed out\").  \nlocstr, default: 'upper right'\n\n\nLocation to place the inset axes. Valid locations are 'upper left', 'upper center', 'upper right', 'center left', 'center', 'center right', 'lower left', 'lower center, 'lower right'. For backward compatibility, numeric values are accepted as well. See the parameter loc of Legend for details.  \nbbox_to_anchortuple or matplotlib.transforms.BboxBase, optional\n\n\nBbox that the inset axes will be anchored to. If None, parent_axes.bbox is used. If a tuple, can be either [left, bottom, width, height], or [left, bottom]. If the kwargs width and/or height are specified in relative units, the 2-tuple [left, bottom] cannot be used. Note that the units of the bounding box are determined through the transform in use. When using bbox_to_anchor it almost always makes sense to also specify a bbox_transform. This might often be the axes transform parent_axes.transAxes.  \nbbox_transformmatplotlib.transforms.Transform, optional\n\n\nTransformation for the bbox that contains the inset axes. If None, a transforms.IdentityTransform is used (i.e. pixel coordinates). This is useful when not providing any argument to bbox_to_anchor. When using bbox_to_anchor it almost always makes sense to also specify a bbox_transform. This might often be the axes transform parent_axes.transAxes. Inversely, when specifying the axes- or figure-transform here, be aware that not specifying bbox_to_anchor will use parent_axes.bbox, the units of which are in display (pixel) coordinates.  \naxes_classmatplotlib.axes.Axes type, default: HostAxes\n\n\nThe type of the newly created inset axes.  \naxes_kwargsdict, optional\n\n\nKeyword arguments to pass to the constructor of the inset axes. Valid arguments include:   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float    \nborderpadfloat, default: 0.5\n\n\nPadding between inset axes and the bbox_to_anchor. The units are axes font size, i.e. for a default font size of 10 points borderpad = 0.5 is equivalent to a padding of 5 points.    Returns \n \ninset_axesaxes_class\n\n\nInset axes object created.     \n  Examples using mpl_toolkits.axes_grid1.inset_locator.zoomed_inset_axes\n \n   Adding a colorbar to inset axes   \n\n   Inset Locator Demo2   \n\n"}, {"name": "axes_grid1.mpl_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.mpl_axes  Classes  \nAxes(fig, rect, *[, facecolor, frameon, ...]) Build an Axes in a figure.  \nSimpleAxisArtist(axis, axisnum, spine)   \nSimpleChainedObjects(objects)    \n"}, {"name": "axes_grid1.mpl_axes.Axes", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.mpl_axes.Axes   classmpl_toolkits.axes_grid1.mpl_axes.Axes(fig, rect, *, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs)[source]\n \nBases: matplotlib.axes._axes.Axes Build an Axes in a figure.  Parameters \n \nfigFigure\n\n\nThe Axes is built in the Figure fig.  \nrect[left, bottom, width, height]\n\n\nThe Axes is built in the rectangle rect. rect is in Figure coordinates.  \nsharex, shareyAxes, optional\n\n\nThe x or y axis is shared with the x or y axis in the input Axes.  \nframeonbool, default: True\n\n\nWhether the Axes frame is visible.  \nbox_aspectfloat, optional\n\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.  **kwargs\n\nOther optional keyword arguments:   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float      Returns \n Axes\n\nThe new Axes object.       classAxisDict(axes)[source]\n \nBases: dict   __call__(*v, **kwargs)[source]\n \nCall self as a function. \n \n   propertyaxis\n \nConvenience method to get or set some axis properties. Call signatures: xmin, xmax, ymin, ymax = axis()\nxmin, xmax, ymin, ymax = axis([xmin, xmax, ymin, ymax])\nxmin, xmax, ymin, ymax = axis(option)\nxmin, xmax, ymin, ymax = axis(**kwargs)\n  Parameters \n \nxmin, xmax, ymin, ymaxfloat, optional\n\n\nThe axis limits to be set. This can also be achieved using ax.set(xlim=(xmin, xmax), ylim=(ymin, ymax))\n  \noptionbool or str\n\n\nIf a bool, turns axis lines and labels on or off. If a string, possible values are:   \nValue Description   \n'on' Turn on axis lines and labels. Same as True.  \n'off' Turn off axis lines and labels. Same as False.  \n'equal' Set equal scaling (i.e., make circles circular) by changing axis limits. This is the same as ax.set_aspect('equal', adjustable='datalim'). Explicit data limits may not be respected in this case.  \n'scaled' Set equal scaling (i.e., make circles circular) by changing dimensions of the plot box. This is the same as ax.set_aspect('equal', adjustable='box', anchor='C'). Additionally, further autoscaling will be disabled.  \n'tight' Set limits just large enough to show all data, then disable further autoscaling.  \n'auto' Automatic scaling (fill plot box with data).  \n'image' 'scaled' with axis limits equal to data limits.  \n'square' Square plot; similar to 'scaled', but initially forcing xmax-xmin == ymax-ymin.    \nemitbool, default: True\n\n\nWhether observers are notified of the axis limit change. This option is passed on to set_xlim and set_ylim.    Returns \n \nxmin, xmax, ymin, ymaxfloat\n\n\nThe axis limits.      See also  matplotlib.axes.Axes.set_xlim\nmatplotlib.axes.Axes.set_ylim\n  \n   cla()[source]\n \nClear the Axes. \n   set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n \n  Examples using mpl_toolkits.axes_grid1.mpl_axes.Axes\n \n   Axes Divider   \n\n   Axes Grid2   \n\n   Parasite Simple2   \n\n   Simple ImageGrid   \n\n   Simple ImageGrid 2   \n\n   Tight Layout guide   \n\n"}, {"name": "axes_grid1.mpl_axes.Axes.AxisDict", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.AxisDict", "type": "axes_grid1", "text": "  classAxisDict(axes)[source]\n \nBases: dict   __call__(*v, **kwargs)[source]\n \nCall self as a function. \n \n"}, {"name": "axes_grid1.mpl_axes.Axes.AxisDict.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.AxisDict.__call__", "type": "axes_grid1", "text": "  __call__(*v, **kwargs)[source]\n \nCall self as a function. \n"}, {"name": "axes_grid1.mpl_axes.Axes.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.cla", "type": "axes_grid1", "text": "  cla()[source]\n \nClear the Axes. \n"}, {"name": "axes_grid1.mpl_axes.Axes.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.axes#mpl_toolkits.axes_grid1.mpl_axes.Axes.set", "type": "axes_grid1", "text": "  set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n"}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist   classmpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist(axis, axisnum, spine)[source]\n \nBases: matplotlib.artist.Artist   propertylabel\n\n   propertymajor_ticklabels\n\n   propertymajor_ticks\n\n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nin_layout bool  \nlabel unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible unknown  \nzorder float   \n   set_label(txt)[source]\n \nSet a label that will be displayed in the legend.  Parameters \n \nsobject\n\n\ns will be converted to a string by calling str.     \n   set_visible(b)[source]\n \nSet the artist's visibility.  Parameters \n \nbbool\n\n   \n   toggle(all=None, ticks=None, ticklabels=None, label=None)[source]\n\n \n\n"}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.set()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.set", "type": "axes_grid1", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nin_layout bool  \nlabel unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nvisible unknown  \nzorder float   \n"}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.set_label()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.set_label", "type": "axes_grid1", "text": "  set_label(txt)[source]\n \nSet a label that will be displayed in the legend.  Parameters \n \nsobject\n\n\ns will be converted to a string by calling str.     \n"}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.set_visible()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.set_visible", "type": "axes_grid1", "text": "  set_visible(b)[source]\n \nSet the artist's visibility.  Parameters \n \nbbool\n\n   \n"}, {"name": "axes_grid1.mpl_axes.SimpleAxisArtist.toggle()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simpleaxisartist#mpl_toolkits.axes_grid1.mpl_axes.SimpleAxisArtist.toggle", "type": "axes_grid1", "text": "  toggle(all=None, ticks=None, ticklabels=None, label=None)[source]\n\n"}, {"name": "axes_grid1.mpl_axes.SimpleChainedObjects", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simplechainedobjects", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.mpl_axes.SimpleChainedObjects   classmpl_toolkits.axes_grid1.mpl_axes.SimpleChainedObjects(objects)[source]\n \nBases: object   __call__(*args, **kwargs)[source]\n \nCall self as a function. \n \n\n"}, {"name": "axes_grid1.mpl_axes.SimpleChainedObjects.__call__()", "path": "_as_gen/mpl_toolkits.axes_grid1.mpl_axes.simplechainedobjects#mpl_toolkits.axes_grid1.mpl_axes.SimpleChainedObjects.__call__", "type": "axes_grid1", "text": "  __call__(*args, **kwargs)[source]\n \nCall self as a function. \n"}, {"name": "axes_grid1.parasite_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes  Classes  \nHostAxes alias of mpl_toolkits.axes_grid1.parasite_axes.AxesHostAxes  \nHostAxesBase(*args, **kwargs)   \nParasiteAxes alias of mpl_toolkits.axes_grid1.parasite_axes.AxesParasite  \nParasiteAxesAuxTrans alias of mpl_toolkits.axes_grid1.parasite_axes.AxesParasiteParasiteAuxTrans  \nParasiteAxesAuxTransBase(parent_axes, ...[, ...]) [Deprecated]  \nParasiteAxesBase(parent_axes[, ...])      Functions  \nhost_axes(*args[, axes_class, figure]) Create axes that can act as a hosts to parasitic axes.  \nhost_axes_class_factory(axes_class)   \nhost_subplot(*args[, axes_class, figure]) Create a subplot that can act as a host to parasitic axes.  \nhost_subplot_class_factory(axes_class)   \nparasite_axes_auxtrans_class_factory(axes_class) [Deprecated]  \nparasite_axes_class_factory(axes_class)    \n"}, {"name": "axes_grid1.parasite_axes.host_axes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_axes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.host_axes   mpl_toolkits.axes_grid1.parasite_axes.host_axes(*args, axes_class=<class 'mpl_toolkits.axes_grid1.mpl_axes.Axes'>, figure=None, **kwargs)[source]\n \nCreate axes that can act as a hosts to parasitic axes.  Parameters \n \nfigurematplotlib.figure.Figure\n\n\nFigure to which the axes will be added. Defaults to the current figure pyplot.gcf().  *args, **kwargs\n\nWill be passed on to the underlying Axes object creation.     \n\n"}, {"name": "axes_grid1.parasite_axes.host_axes_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_axes_class_factory", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.host_axes_class_factory   mpl_toolkits.axes_grid1.parasite_axes.host_axes_class_factory(axes_class)[source]\n\n\n"}, {"name": "axes_grid1.parasite_axes.host_subplot", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_subplot", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.host_subplot   mpl_toolkits.axes_grid1.parasite_axes.host_subplot(*args, axes_class=<class 'mpl_toolkits.axes_grid1.mpl_axes.Axes'>, figure=None, **kwargs)[source]\n \nCreate a subplot that can act as a host to parasitic axes.  Parameters \n \nfigurematplotlib.figure.Figure\n\n\nFigure to which the subplot will be added. Defaults to the current figure pyplot.gcf().  *args, **kwargs\n\nWill be passed on to the underlying Axes object creation.     \n\n"}, {"name": "axes_grid1.parasite_axes.host_subplot_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.host_subplot_class_factory", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.host_subplot_class_factory   mpl_toolkits.axes_grid1.parasite_axes.host_subplot_class_factory(axes_class)[source]\n\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.HostAxes   mpl_toolkits.axes_grid1.parasite_axes.HostAxes[source]\n \nalias of mpl_toolkits.axes_grid1.parasite_axes.AxesHostAxes \n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase   classmpl_toolkits.axes_grid1.parasite_axes.HostAxesBase(*args, **kwargs)[source]\n \nBases: object   cla()[source]\n\n   draw(renderer)[source]\n\n   get_aux_axes(tr=None, viewlim_mode='equal', axes_class=<class 'mpl_toolkits.axes_grid1.mpl_axes.Axes'>)[source]\n \nAdd a parasite axes to this host. Despite this method's name, this should actually be thought of as an add_parasite_axes method. tr may be Transform, in which case the following relation will hold: parasite.transData = tr + host.transData. Alternatively, it may be None (the default), no special relationship will hold between the parasite's and the host's transData. \n   get_tightbbox(renderer, call_axes_locator=True, bbox_extra_artists=None)[source]\n\n   pick(mouseevent)[source]\n\n   twin(aux_trans=None, axes_class=None)[source]\n \nCreate a twin of Axes with no shared axis. While self will have ticks on the left and bottom axis, the returned axes will have ticks on the top and right axis. \n   twinx(axes_class=None)[source]\n \nCreate a twin of Axes with a shared x-axis but independent y-axis. The y-axis of self will have ticks on the left and the returned axes will have ticks on the right. \n   twiny(axes_class=None)[source]\n \nCreate a twin of Axes with a shared y-axis but independent x-axis. The x-axis of self will have ticks on the bottom and the returned axes will have ticks on the top. \n \n  Examples using mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase\n \n   Parasite Simple2   \n\n   Curvilinear grid demo   \n\n   mpl_toolkits.axisartist.floating_axes features   \n\n   floating_axis demo   \n\n   Parasite Axes demo   \n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.cla", "type": "axes_grid1", "text": "  cla()[source]\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.draw()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.draw", "type": "axes_grid1", "text": "  draw(renderer)[source]\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.get_aux_axes()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.get_aux_axes", "type": "axes_grid1", "text": "  get_aux_axes(tr=None, viewlim_mode='equal', axes_class=<class 'mpl_toolkits.axes_grid1.mpl_axes.Axes'>)[source]\n \nAdd a parasite axes to this host. Despite this method's name, this should actually be thought of as an add_parasite_axes method. tr may be Transform, in which case the following relation will hold: parasite.transData = tr + host.transData. Alternatively, it may be None (the default), no special relationship will hold between the parasite's and the host's transData. \n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.get_tightbbox()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.get_tightbbox", "type": "axes_grid1", "text": "  get_tightbbox(renderer, call_axes_locator=True, bbox_extra_artists=None)[source]\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.pick()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.pick", "type": "axes_grid1", "text": "  pick(mouseevent)[source]\n\n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.twin()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.twin", "type": "axes_grid1", "text": "  twin(aux_trans=None, axes_class=None)[source]\n \nCreate a twin of Axes with no shared axis. While self will have ticks on the left and bottom axis, the returned axes will have ticks on the top and right axis. \n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.twinx()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.twinx", "type": "axes_grid1", "text": "  twinx(axes_class=None)[source]\n \nCreate a twin of Axes with a shared x-axis but independent y-axis. The y-axis of self will have ticks on the left and the returned axes will have ticks on the right. \n"}, {"name": "axes_grid1.parasite_axes.HostAxesBase.twiny()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.hostaxesbase#mpl_toolkits.axes_grid1.parasite_axes.HostAxesBase.twiny", "type": "axes_grid1", "text": "  twiny(axes_class=None)[source]\n \nCreate a twin of Axes with a shared y-axis but independent x-axis. The x-axis of self will have ticks on the bottom and the returned axes will have ticks on the top. \n"}, {"name": "axes_grid1.parasite_axes.parasite_axes_auxtrans_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasite_axes_auxtrans_class_factory", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.parasite_axes_auxtrans_class_factory   mpl_toolkits.axes_grid1.parasite_axes.parasite_axes_auxtrans_class_factory(axes_class)[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n\n"}, {"name": "axes_grid1.parasite_axes.parasite_axes_class_factory", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasite_axes_class_factory", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.parasite_axes_class_factory   mpl_toolkits.axes_grid1.parasite_axes.parasite_axes_class_factory(axes_class)[source]\n\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxes", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxes", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxes   mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxes[source]\n \nalias of mpl_toolkits.axes_grid1.parasite_axes.AxesParasite \n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTrans", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtrans", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTrans   mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTrans[source]\n \nalias of mpl_toolkits.axes_grid1.parasite_axes.AxesParasiteParasiteAuxTrans \n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase   classmpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase(parent_axes, aux_transform, viewlim_mode=None, **kwargs)[source]\n \nBases: object [Deprecated] Notes  Deprecated since version 3.4:     apply_aspect(position=None)[source]\n\n   get_viewlim_mode()[source]\n\n   set_viewlim_mode(mode)[source]\n\n   update_viewlim()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n \n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.apply_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.apply_aspect", "type": "axes_grid1", "text": "  apply_aspect(position=None)[source]\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.get_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.get_viewlim_mode", "type": "axes_grid1", "text": "  get_viewlim_mode()[source]\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.set_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.set_viewlim_mode", "type": "axes_grid1", "text": "  set_viewlim_mode(mode)[source]\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.update_viewlim()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesauxtransbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesAuxTransBase.update_viewlim", "type": "axes_grid1", "text": "  update_viewlim()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase", "type": "axes_grid1", "text": "mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase   classmpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase(parent_axes, aux_transform=None, *, viewlim_mode=None, **kwargs)[source]\n \nBases: object   apply_aspect(position=None)[source]\n\n   cla()[source]\n\n   get_images_artists()[source]\n \n[Deprecated] Notes  Deprecated since version 3.5:   \n   get_viewlim_mode()[source]\n\n   pick(mouseevent)[source]\n\n   set_viewlim_mode(mode)[source]\n\n   update_viewlim()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n \n  Examples using mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase\n \n   Parasite Axes demo   \n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.apply_aspect()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.apply_aspect", "type": "axes_grid1", "text": "  apply_aspect(position=None)[source]\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.cla", "type": "axes_grid1", "text": "  cla()[source]\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.get_images_artists()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.get_images_artists", "type": "axes_grid1", "text": "  get_images_artists()[source]\n \n[Deprecated] Notes  Deprecated since version 3.5:   \n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.get_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.get_viewlim_mode", "type": "axes_grid1", "text": "  get_viewlim_mode()[source]\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.pick()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.pick", "type": "axes_grid1", "text": "  pick(mouseevent)[source]\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.set_viewlim_mode()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.set_viewlim_mode", "type": "axes_grid1", "text": "  set_viewlim_mode(mode)[source]\n\n"}, {"name": "axes_grid1.parasite_axes.ParasiteAxesBase.update_viewlim()", "path": "_as_gen/mpl_toolkits.axes_grid1.parasite_axes.parasiteaxesbase#mpl_toolkits.axes_grid1.parasite_axes.ParasiteAxesBase.update_viewlim", "type": "axes_grid1", "text": "  update_viewlim()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "axis", "path": "axis_api", "type": "axis", "text": "matplotlib.axis Table of Contents  Inheritance \nAxis objects  Formatters and Locators Axis Label Ticks, tick labels and Offset text Data and view intervals Rendering helpers Interactive Units XAxis Specific YAxis Specific Other Discouraged   Tick objects  Classes for the ticks and x and y axis.  Inheritance             \nAxis objects   classmatplotlib.axis.Axis(axes, pickradius=15)[source]\n \nBase class for XAxis and YAxis.  Attributes \n \nisDefault_labelbool\n\n\naxesmatplotlib.axes.Axes\n\n\nThe Axes instance the artist resides in, or None.  \nmajormatplotlib.axis.Ticker\n\n\nDetermines the major tick positions and their label format.  \nminormatplotlib.axis.Ticker\n\n\nDetermines the minor tick positions and their label format.  \ncallbacksmatplotlib.cbook.CallbackRegistry\n\n\nlabelText\n\n\nThe axis label.  \nlabelpadfloat\n\n\nThe distance between the axis label and the tick labels. Defaults to rcParams[\"axes.labelpad\"] (default: 4.0) = 4.  \noffsetTextText\n\n\nA Text object containing the data offset of the ticks (if any).  \npickradiusfloat\n\n\nThe acceptance radius for containment tests. See also Axis.contains.  \nmajorTickslist of Tick\n\n\nThe major ticks.  \nminorTickslist of Tick\n\n\nThe minor ticks.      Parameters \n \naxesmatplotlib.axes.Axes\n\n\nThe Axes to which the created Axis belongs.  \npickradiusfloat\n\n\nThe acceptance radius for containment tests. See also Axis.contains.     \n   classmatplotlib.axis.XAxis(*args, **kwargs)[source]\n \n Parameters \n \naxesmatplotlib.axes.Axes\n\n\nThe Axes to which the created Axis belongs.  \npickradiusfloat\n\n\nThe acceptance radius for containment tests. See also Axis.contains.     \n   classmatplotlib.axis.YAxis(*args, **kwargs)[source]\n \n Parameters \n \naxesmatplotlib.axes.Axes\n\n\nThe Axes to which the created Axis belongs.  \npickradiusfloat\n\n\nThe acceptance radius for containment tests. See also Axis.contains.     \n   classmatplotlib.axis.Ticker[source]\n \nA container for the objects defining tick position and format.  Attributes \n \nlocatormatplotlib.ticker.Locator subclass\n\n\nDetermines the positions of the ticks.  \nformattermatplotlib.ticker.Formatter subclass\n\n\nDetermines the format of the tick labels.     \n  \nAxis.clear Clear the axis.  \nAxis.cla [Deprecated] Clear this axis.  \nAxis.get_scale Return this Axis' scale (as a str).    Formatters and Locators  \nAxis.get_major_formatter Get the formatter of the major ticker.  \nAxis.get_major_locator Get the locator of the major ticker.  \nAxis.get_minor_formatter Get the formatter of the minor ticker.  \nAxis.get_minor_locator Get the locator of the minor ticker.  \nAxis.set_major_formatter Set the formatter of the major ticker.  \nAxis.set_major_locator Set the locator of the major ticker.  \nAxis.set_minor_formatter Set the formatter of the minor ticker.  \nAxis.set_minor_locator Set the locator of the minor ticker.  \nAxis.remove_overlapping_locs If minor ticker locations that overlap with major ticker locations should be trimmed.  \nAxis.get_remove_overlapping_locs   \nAxis.set_remove_overlapping_locs      Axis Label  \nAxis.set_label_coords Set the coordinates of the label.  \nAxis.set_label_position Set the label position (top or bottom)  \nAxis.set_label_text Set the text value of the axis label.  \nAxis.get_label Return the axis label as a Text instance.  \nAxis.get_label_position Return the label position (top or bottom)  \nAxis.get_label_text Get the text of the label.     Ticks, tick labels and Offset text  \nAxis.get_major_ticks Return the list of major Ticks.  \nAxis.get_majorticklabels Return this Axis' major tick labels, as a list of Text.  \nAxis.get_majorticklines Return this Axis' major tick lines as a list of Line2Ds.  \nAxis.get_majorticklocs Return this Axis' major tick locations in data coordinates.  \nAxis.get_minor_ticks Return the list of minor Ticks.  \nAxis.get_minorticklabels Return this Axis' minor tick labels, as a list of Text.  \nAxis.get_minorticklines Return this Axis' minor tick lines as a list of Line2Ds.  \nAxis.get_minorticklocs Return this Axis' minor tick locations in data coordinates.  \nAxis.get_offset_text Return the axis offsetText as a Text instance.  \nAxis.get_tick_padding   \nAxis.get_ticklabels Get this Axis' tick labels.  \nAxis.get_ticklines Return this Axis' tick lines as a list of Line2Ds.  \nAxis.get_ticklocs Return this Axis' tick locations in data coordinates.  \nAxis.get_gridlines Return this Axis' grid lines as a list of Line2Ds.  \nAxis.grid Configure the grid lines.  \nAxis.set_tick_params Set appearance parameters for ticks, ticklabels, and gridlines.  \nAxis.axis_date Set up axis ticks and labels to treat data along this Axis as dates.     Data and view intervals  \nAxis.get_data_interval Return the (min, max) data limits of this axis.  \nAxis.get_view_interval Return the (min, max) view limits of this axis.  \nAxis.get_inverted Return whether this Axis is oriented in the \"inverse\" direction.  \nAxis.set_data_interval Set the axis data limits.  \nAxis.set_view_interval Set the axis view limits.  \nAxis.set_inverted Set whether this Axis is oriented in the \"inverse\" direction.     Rendering helpers  \nAxis.get_minpos   \nAxis.get_tick_space Return the estimated number of ticks that can fit on the axis.  \nAxis.get_ticklabel_extents Get the extents of the tick labels on either side of the axes.  \nAxis.get_tightbbox Return a bounding box that encloses the axis.     Interactive  \nAxis.contains Test whether the artist contains the mouse event.  \nAxis.get_pickradius Return the depth of the axis used by the picker.  \nAxis.set_pickradius Set the depth of the axis used by the picker.     Units  \nAxis.convert_units   \nAxis.set_units Set the units for axis.  \nAxis.get_units Return the units for axis.  \nAxis.update_units Introspect data for units converter and update the axis.converter instance if necessary.     XAxis Specific  \nXAxis.axis_name Read-only name identifying the axis.  \nXAxis.get_text_heights Return how much space should be reserved for text above and below the axes, as a pair of floats.  \nXAxis.get_ticks_position Return the ticks position (\"top\", \"bottom\", \"default\", or \"unknown\").  \nXAxis.set_ticks_position Set the ticks position.  \nXAxis.set_label_position Set the label position (top or bottom)  \nXAxis.tick_bottom Move ticks and ticklabels (if present) to the bottom of the axes.  \nXAxis.tick_top Move ticks and ticklabels (if present) to the top of the axes.     YAxis Specific  \nYAxis.axis_name Read-only name identifying the axis.  \nYAxis.get_text_widths   \nYAxis.get_ticks_position Return the ticks position (\"left\", \"right\", \"default\", or \"unknown\").  \nYAxis.set_offset_position \n Parameters    \nYAxis.set_ticks_position Set the ticks position.  \nYAxis.set_label_position Set the label position (left or right)  \nYAxis.tick_left Move ticks and ticklabels (if present) to the left of the axes.  \nYAxis.tick_right Move ticks and ticklabels (if present) to the right of the axes.     Other  \nAxis.OFFSETTEXTPAD   \nAxis.axes The Axes instance the artist resides in, or None.  \nAxis.limit_range_for_scale   \nAxis.reset_ticks Re-initialize the major and minor Tick lists.  \nAxis.set_default_intervals Set the default limits for the axis data and view interval if they have not been not mutated yet.     Discouraged These methods should be used together with care, calling set_ticks to specify the desired tick locations before calling set_ticklabels to specify a matching series of labels. Calling set_ticks makes a FixedLocator; it's list of locations is then used by set_ticklabels to make an appropriate FuncFormatter.  \nAxis.set_ticks Set this Axis' tick locations and optionally labels.  \nAxis.set_ticklabels Set the text values of the tick labels.      \nTick objects   classmatplotlib.axis.Tick(axes, loc, *, size=None, width=None, color=None, tickdir=None, pad=None, labelsize=None, labelcolor=None, zorder=None, gridOn=None, tick1On=True, tick2On=True, label1On=True, label2On=False, major=True, labelrotation=0, grid_color=None, grid_linestyle=None, grid_linewidth=None, grid_alpha=None, **kw)[source]\n \nAbstract base class for the axis ticks, grid lines and labels. Ticks mark a position on an Axis. They contain two lines as markers and two labels; one each for the bottom and top positions (in case of an XAxis) or for the left and right positions (in case of a YAxis).  Attributes \n \ntick1lineLine2D\n\n\nThe left/bottom tick marker.  \ntick2lineLine2D\n\n\nThe right/top tick marker.  \ngridlineLine2D\n\n\nThe grid line associated with the label position.  \nlabel1Text\n\n\nThe left/bottom tick label.  \nlabel2Text\n\n\nThe right/top tick label.     bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points \n   classmatplotlib.axis.XTick(*args, **kwargs)[source]\n \nContains all the Artists needed to make an x tick - the tick line, the label text and the grid line bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points \n   classmatplotlib.axis.YTick(*args, **kwargs)[source]\n \nContains all the Artists needed to make a Y tick - the tick line, the label text and the grid line bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points \n  \nTick.get_loc Return the tick location (data coords) as a scalar.  \nTick.get_pad Get the value of the tick label pad in points.  \nTick.get_pad_pixels   \nTick.get_tick_padding Get the length of the tick outside of the axes.  \nTick.get_tickdir   \nTick.get_view_interval Return the view limits (min, max) of the axis the tick belongs to.  \nTick.set_label1 Set the label1 text.  \nTick.set_label2 Set the label2 text.  \nTick.set_pad Set the tick label pad in points  \nTick.set_url Set the url of label1 and label2.  \nTick.update_position Set the location of tick in data coords with scalar loc.   \n"}, {"name": "axis.Axis", "path": "axis_api#matplotlib.axis.Axis", "type": "axis", "text": "  classmatplotlib.axis.Axis(axes, pickradius=15)[source]\n \nBase class for XAxis and YAxis.  Attributes \n \nisDefault_labelbool\n\n\naxesmatplotlib.axes.Axes\n\n\nThe Axes instance the artist resides in, or None.  \nmajormatplotlib.axis.Ticker\n\n\nDetermines the major tick positions and their label format.  \nminormatplotlib.axis.Ticker\n\n\nDetermines the minor tick positions and their label format.  \ncallbacksmatplotlib.cbook.CallbackRegistry\n\n\nlabelText\n\n\nThe axis label.  \nlabelpadfloat\n\n\nThe distance between the axis label and the tick labels. Defaults to rcParams[\"axes.labelpad\"] (default: 4.0) = 4.  \noffsetTextText\n\n\nA Text object containing the data offset of the ticks (if any).  \npickradiusfloat\n\n\nThe acceptance radius for containment tests. See also Axis.contains.  \nmajorTickslist of Tick\n\n\nThe major ticks.  \nminorTickslist of Tick\n\n\nThe minor ticks.      Parameters \n \naxesmatplotlib.axes.Axes\n\n\nThe Axes to which the created Axis belongs.  \npickradiusfloat\n\n\nThe acceptance radius for containment tests. See also Axis.contains.     \n"}, {"name": "axis.Axis.axes", "path": "_as_gen/matplotlib.axis.axis.axes", "type": "axis", "text": "matplotlib.axis.Axis.axes   propertyAxis.axes\n \nThe Axes instance the artist resides in, or None. \n\n"}, {"name": "axis.Axis.axis_date", "path": "_as_gen/matplotlib.axis.axis.axis_date", "type": "axis", "text": "matplotlib.axis.Axis.axis_date   Axis.axis_date(tz=None)[source]\n \nSet up axis ticks and labels to treat data along this Axis as dates.  Parameters \n \ntzstr or datetime.tzinfo, default: rcParams[\"timezone\"] (default: 'UTC')\n\n\nThe timezone used to create date labels.     \n\n"}, {"name": "axis.Axis.cla", "path": "_as_gen/matplotlib.axis.axis.cla", "type": "axis", "text": "matplotlib.axis.Axis.cla   Axis.cla()[source]\n \n[Deprecated] Clear this axis. Notes  Deprecated since version 3.4.  \n\n"}, {"name": "axis.Axis.clear", "path": "_as_gen/matplotlib.axis.axis.clear", "type": "axis", "text": "matplotlib.axis.Axis.clear   Axis.clear()[source]\n \nClear the axis. This resets axis properties to their default values:  the label the scale locators, formatters and ticks major and minor grid units registered callbacks  \n\n"}, {"name": "axis.Axis.contains", "path": "_as_gen/matplotlib.axis.axis.contains", "type": "axis", "text": "matplotlib.axis.Axis.contains   Axis.contains(mouseevent)[source]\n \nTest whether the artist contains the mouse event.  Parameters \n \nmouseeventmatplotlib.backend_bases.MouseEvent\n\n  Returns \n \ncontainsbool\n\n\nWhether any values are within the radius.  \ndetailsdict\n\n\nAn artist-specific dictionary of details of the event context, such as which points are contained in the pick radius. See the individual Artist subclasses for details.     \n\n"}, {"name": "axis.Axis.convert_units", "path": "_as_gen/matplotlib.axis.axis.convert_units", "type": "axis", "text": "matplotlib.axis.Axis.convert_units   Axis.convert_units(x)[source]\n\n\n"}, {"name": "axis.Axis.get_data_interval", "path": "_as_gen/matplotlib.axis.axis.get_data_interval", "type": "axis", "text": "matplotlib.axis.Axis.get_data_interval   Axis.get_data_interval()[source]\n \nReturn the (min, max) data limits of this axis. \n\n"}, {"name": "axis.Axis.get_gridlines", "path": "_as_gen/matplotlib.axis.axis.get_gridlines", "type": "axis", "text": "matplotlib.axis.Axis.get_gridlines   Axis.get_gridlines()[source]\n \nReturn this Axis' grid lines as a list of Line2Ds. \n\n"}, {"name": "axis.Axis.get_inverted", "path": "_as_gen/matplotlib.axis.axis.get_inverted", "type": "axis", "text": "matplotlib.axis.Axis.get_inverted   Axis.get_inverted()[source]\n \nReturn whether this Axis is oriented in the \"inverse\" direction. The \"normal\" direction is increasing to the right for the x-axis and to the top for the y-axis; the \"inverse\" direction is increasing to the left for the x-axis and to the bottom for the y-axis. \n\n"}, {"name": "axis.Axis.get_label", "path": "_as_gen/matplotlib.axis.axis.get_label", "type": "axis", "text": "matplotlib.axis.Axis.get_label   Axis.get_label()[source]\n \nReturn the axis label as a Text instance. \n  Examples using matplotlib.axis.Axis.get_label\n \n   Parasite Simple   \n\n"}, {"name": "axis.Axis.get_label_position", "path": "_as_gen/matplotlib.axis.axis.get_label_position", "type": "axis", "text": "matplotlib.axis.Axis.get_label_position   Axis.get_label_position()[source]\n \nReturn the label position (top or bottom) \n\n"}, {"name": "axis.Axis.get_label_text", "path": "_as_gen/matplotlib.axis.axis.get_label_text", "type": "axis", "text": "matplotlib.axis.Axis.get_label_text   Axis.get_label_text()[source]\n \nGet the text of the label. \n\n"}, {"name": "axis.Axis.get_major_formatter", "path": "_as_gen/matplotlib.axis.axis.get_major_formatter", "type": "axis", "text": "matplotlib.axis.Axis.get_major_formatter   Axis.get_major_formatter()[source]\n \nGet the formatter of the major ticker. \n\n"}, {"name": "axis.Axis.get_major_locator", "path": "_as_gen/matplotlib.axis.axis.get_major_locator", "type": "axis", "text": "matplotlib.axis.Axis.get_major_locator   Axis.get_major_locator()[source]\n \nGet the locator of the major ticker. \n  Examples using matplotlib.axis.Axis.get_major_locator\n \n   Date tick labels   \n\n   Inset Locator Demo2   \n\n   Basic Usage   \n\n"}, {"name": "axis.Axis.get_major_ticks", "path": "_as_gen/matplotlib.axis.axis.get_major_ticks", "type": "axis", "text": "matplotlib.axis.Axis.get_major_ticks   Axis.get_major_ticks(numticks=None)[source]\n \nReturn the list of major Ticks. \n\n"}, {"name": "axis.Axis.get_majorticklabels", "path": "_as_gen/matplotlib.axis.axis.get_majorticklabels", "type": "axis", "text": "matplotlib.axis.Axis.get_majorticklabels   Axis.get_majorticklabels()[source]\n \nReturn this Axis' major tick labels, as a list of Text. \n\n"}, {"name": "axis.Axis.get_majorticklines", "path": "_as_gen/matplotlib.axis.axis.get_majorticklines", "type": "axis", "text": "matplotlib.axis.Axis.get_majorticklines   Axis.get_majorticklines()[source]\n \nReturn this Axis' major tick lines as a list of Line2Ds. \n\n"}, {"name": "axis.Axis.get_majorticklocs", "path": "_as_gen/matplotlib.axis.axis.get_majorticklocs", "type": "axis", "text": "matplotlib.axis.Axis.get_majorticklocs   Axis.get_majorticklocs()[source]\n \nReturn this Axis' major tick locations in data coordinates. \n\n"}, {"name": "axis.Axis.get_minor_formatter", "path": "_as_gen/matplotlib.axis.axis.get_minor_formatter", "type": "axis", "text": "matplotlib.axis.Axis.get_minor_formatter   Axis.get_minor_formatter()[source]\n \nGet the formatter of the minor ticker. \n\n"}, {"name": "axis.Axis.get_minor_locator", "path": "_as_gen/matplotlib.axis.axis.get_minor_locator", "type": "axis", "text": "matplotlib.axis.Axis.get_minor_locator   Axis.get_minor_locator()[source]\n \nGet the locator of the minor ticker. \n\n"}, {"name": "axis.Axis.get_minor_ticks", "path": "_as_gen/matplotlib.axis.axis.get_minor_ticks", "type": "axis", "text": "matplotlib.axis.Axis.get_minor_ticks   Axis.get_minor_ticks(numticks=None)[source]\n \nReturn the list of minor Ticks. \n  Examples using matplotlib.axis.Axis.get_minor_ticks\n \n   Centering labels between ticks   \n\n"}, {"name": "axis.Axis.get_minorticklabels", "path": "_as_gen/matplotlib.axis.axis.get_minorticklabels", "type": "axis", "text": "matplotlib.axis.Axis.get_minorticklabels   Axis.get_minorticklabels()[source]\n \nReturn this Axis' minor tick labels, as a list of Text. \n\n"}, {"name": "axis.Axis.get_minorticklines", "path": "_as_gen/matplotlib.axis.axis.get_minorticklines", "type": "axis", "text": "matplotlib.axis.Axis.get_minorticklines   Axis.get_minorticklines()[source]\n \nReturn this Axis' minor tick lines as a list of Line2Ds. \n\n"}, {"name": "axis.Axis.get_minorticklocs", "path": "_as_gen/matplotlib.axis.axis.get_minorticklocs", "type": "axis", "text": "matplotlib.axis.Axis.get_minorticklocs   Axis.get_minorticklocs()[source]\n \nReturn this Axis' minor tick locations in data coordinates. \n\n"}, {"name": "axis.Axis.get_minpos", "path": "_as_gen/matplotlib.axis.axis.get_minpos", "type": "axis", "text": "matplotlib.axis.Axis.get_minpos   Axis.get_minpos()[source]\n\n\n"}, {"name": "axis.Axis.get_offset_text", "path": "_as_gen/matplotlib.axis.axis.get_offset_text", "type": "axis", "text": "matplotlib.axis.Axis.get_offset_text   Axis.get_offset_text()[source]\n \nReturn the axis offsetText as a Text instance. \n\n"}, {"name": "axis.Axis.get_pickradius", "path": "_as_gen/matplotlib.axis.axis.get_pickradius", "type": "axis", "text": "matplotlib.axis.Axis.get_pickradius   Axis.get_pickradius()[source]\n \nReturn the depth of the axis used by the picker. \n\n"}, {"name": "axis.Axis.get_remove_overlapping_locs", "path": "_as_gen/matplotlib.axis.axis.get_remove_overlapping_locs", "type": "axis", "text": "matplotlib.axis.Axis.get_remove_overlapping_locs   Axis.get_remove_overlapping_locs()[source]\n\n\n"}, {"name": "axis.Axis.get_scale", "path": "_as_gen/matplotlib.axis.axis.get_scale", "type": "axis", "text": "matplotlib.axis.Axis.get_scale   Axis.get_scale()[source]\n \nReturn this Axis' scale (as a str). \n\n"}, {"name": "axis.Axis.get_tick_padding", "path": "_as_gen/matplotlib.axis.axis.get_tick_padding", "type": "axis", "text": "matplotlib.axis.Axis.get_tick_padding   Axis.get_tick_padding()[source]\n\n\n"}, {"name": "axis.Axis.get_tick_space", "path": "_as_gen/matplotlib.axis.axis.get_tick_space", "type": "axis", "text": "matplotlib.axis.Axis.get_tick_space   Axis.get_tick_space()[source]\n \nReturn the estimated number of ticks that can fit on the axis. \n\n"}, {"name": "axis.Axis.get_ticklabel_extents", "path": "_as_gen/matplotlib.axis.axis.get_ticklabel_extents", "type": "axis", "text": "matplotlib.axis.Axis.get_ticklabel_extents   Axis.get_ticklabel_extents(renderer)[source]\n \nGet the extents of the tick labels on either side of the axes. \n\n"}, {"name": "axis.Axis.get_ticklabels", "path": "_as_gen/matplotlib.axis.axis.get_ticklabels", "type": "axis", "text": "matplotlib.axis.Axis.get_ticklabels   Axis.get_ticklabels(minor=False, which=None)[source]\n \nGet this Axis' tick labels.  Parameters \n \nminorbool\n\n\nWhether to return the minor or the major ticklabels.  \nwhichNone, ('minor', 'major', 'both')\n\n\nOverrides minor. Selects which ticklabels to return    Returns \n list of Text\n\n   Notes The tick label strings are not populated until a draw method has been called. See also: draw and draw. \n  Examples using matplotlib.axis.Axis.get_ticklabels\n \n   Image Masked   \n\n   Fig Axes Customize Simple   \n\n   Artist tutorial   \n\n"}, {"name": "axis.Axis.get_ticklines", "path": "_as_gen/matplotlib.axis.axis.get_ticklines", "type": "axis", "text": "matplotlib.axis.Axis.get_ticklines   Axis.get_ticklines(minor=False)[source]\n \nReturn this Axis' tick lines as a list of Line2Ds. \n  Examples using matplotlib.axis.Axis.get_ticklines\n \n   Fig Axes Customize Simple   \n\n   Artist tutorial   \n\n"}, {"name": "axis.Axis.get_ticklocs", "path": "_as_gen/matplotlib.axis.axis.get_ticklocs", "type": "axis", "text": "matplotlib.axis.Axis.get_ticklocs   Axis.get_ticklocs(*, minor=False)[source]\n \nReturn this Axis' tick locations in data coordinates. \n  Examples using matplotlib.axis.Axis.get_ticklocs\n \n   Artist tutorial   \n\n"}, {"name": "axis.Axis.get_tightbbox", "path": "_as_gen/matplotlib.axis.axis.get_tightbbox", "type": "axis", "text": "matplotlib.axis.Axis.get_tightbbox   Axis.get_tightbbox(renderer, *, for_layout_only=False)[source]\n \nReturn a bounding box that encloses the axis. It only accounts tick labels, axis label, and offsetText. If for_layout_only is True, then the width of the label (if this is an x-axis) or the height of the label (if this is a y-axis) is collapsed to near zero. This allows tight/constrained_layout to ignore too-long labels when doing their layout. \n\n"}, {"name": "axis.Axis.get_units", "path": "_as_gen/matplotlib.axis.axis.get_units", "type": "axis", "text": "matplotlib.axis.Axis.get_units   Axis.get_units()[source]\n \nReturn the units for axis. \n\n"}, {"name": "axis.Axis.get_view_interval", "path": "_as_gen/matplotlib.axis.axis.get_view_interval", "type": "axis", "text": "matplotlib.axis.Axis.get_view_interval   Axis.get_view_interval()[source]\n \nReturn the (min, max) view limits of this axis. \n\n"}, {"name": "axis.Axis.grid", "path": "_as_gen/matplotlib.axis.axis.grid", "type": "axis", "text": "matplotlib.axis.Axis.grid   Axis.grid(visible=None, which='major', **kwargs)[source]\n \nConfigure the grid lines.  Parameters \n \nvisiblebool or None\n\n\nWhether to show the grid lines. If any kwargs are supplied, it is assumed you want the grid on and visible will be set to True. If visible is None and there are no kwargs, this toggles the visibility of the lines.  \nwhich{'major', 'minor', 'both'}\n\n\nThe grid lines to apply the changes on.  \n**kwargsLine2D properties\n\n\nDefine the line properties of the grid, e.g.: grid(color='r', linestyle='-', linewidth=2)\n     \n  Examples using matplotlib.axis.Axis.grid\n \n   Box plots with custom fill colors   \n\n   Boxplots   \n\n   Box plot vs. violin plot comparison   \n\n   Symlog Demo   \n\n"}, {"name": "axis.Axis.limit_range_for_scale", "path": "_as_gen/matplotlib.axis.axis.limit_range_for_scale", "type": "axis", "text": "matplotlib.axis.Axis.limit_range_for_scale   Axis.limit_range_for_scale(vmin, vmax)[source]\n\n\n"}, {"name": "axis.Axis.OFFSETTEXTPAD", "path": "_as_gen/matplotlib.axis.axis.offsettextpad", "type": "axis", "text": "matplotlib.axis.Axis.OFFSETTEXTPAD   Axis.OFFSETTEXTPAD=3\n\n\n"}, {"name": "axis.Axis.remove_overlapping_locs", "path": "_as_gen/matplotlib.axis.axis.remove_overlapping_locs", "type": "axis", "text": "matplotlib.axis.Axis.remove_overlapping_locs   propertyAxis.remove_overlapping_locs\n \nIf minor ticker locations that overlap with major ticker locations should be trimmed. \n\n"}, {"name": "axis.Axis.reset_ticks", "path": "_as_gen/matplotlib.axis.axis.reset_ticks", "type": "axis", "text": "matplotlib.axis.Axis.reset_ticks   Axis.reset_ticks()[source]\n \nRe-initialize the major and minor Tick lists. Each list starts with a single fresh Tick. \n\n"}, {"name": "axis.Axis.set_data_interval", "path": "_as_gen/matplotlib.axis.axis.set_data_interval", "type": "axis", "text": "matplotlib.axis.Axis.set_data_interval   Axis.set_data_interval(vmin, vmax, ignore=False)[source]\n \nSet the axis data limits. This method is for internal use. If ignore is False (the default), this method will never reduce the preexisting data limits, only expand them if vmin or vmax are not within them. Moreover, the order of vmin and vmax does not matter; the orientation of the axis will not change. If ignore is True, the data limits will be set exactly to (vmin,\nvmax) in that order. \n\n"}, {"name": "axis.Axis.set_default_intervals", "path": "_as_gen/matplotlib.axis.axis.set_default_intervals", "type": "axis", "text": "matplotlib.axis.Axis.set_default_intervals   Axis.set_default_intervals()[source]\n \nSet the default limits for the axis data and view interval if they have not been not mutated yet. \n\n"}, {"name": "axis.Axis.set_inverted", "path": "_as_gen/matplotlib.axis.axis.set_inverted", "type": "axis", "text": "matplotlib.axis.Axis.set_inverted   Axis.set_inverted(inverted)[source]\n \nSet whether this Axis is oriented in the \"inverse\" direction. The \"normal\" direction is increasing to the right for the x-axis and to the top for the y-axis; the \"inverse\" direction is increasing to the left for the x-axis and to the bottom for the y-axis. \n\n"}, {"name": "axis.Axis.set_label_coords", "path": "_as_gen/matplotlib.axis.axis.set_label_coords", "type": "axis", "text": "matplotlib.axis.Axis.set_label_coords   Axis.set_label_coords(x, y, transform=None)[source]\n \nSet the coordinates of the label. By default, the x coordinate of the y label and the y coordinate of the x label are determined by the tick label bounding boxes, but this can lead to poor alignment of multiple labels if there are multiple axes. You can also specify the coordinate system of the label with the transform. If None, the default coordinate system will be the axes coordinate system: (0, 0) is bottom left, (0.5, 0.5) is center, etc. \n\n"}, {"name": "axis.Axis.set_label_position", "path": "_as_gen/matplotlib.axis.axis.set_label_position", "type": "axis", "text": "matplotlib.axis.Axis.set_label_position   Axis.set_label_position(position)[source]\n \nSet the label position (top or bottom)  Parameters \n \nposition{'top', 'bottom'}\n\n   \n  Examples using matplotlib.axis.Axis.set_label_position\n \n   Title positioning   \n\n"}, {"name": "axis.Axis.set_label_text", "path": "_as_gen/matplotlib.axis.axis.set_label_text", "type": "axis", "text": "matplotlib.axis.Axis.set_label_text   Axis.set_label_text(label, fontdict=None, **kwargs)[source]\n \nSet the text value of the axis label.  Parameters \n \nlabelstr\n\n\nText string.  \nfontdictdict\n\n\nText properties.  **kwargs\n\nMerged into fontdict.     \n\n"}, {"name": "axis.Axis.set_major_formatter", "path": "_as_gen/matplotlib.axis.axis.set_major_formatter", "type": "axis", "text": "matplotlib.axis.Axis.set_major_formatter   Axis.set_major_formatter(formatter)[source]\n \nSet the formatter of the major ticker. In addition to a Formatter instance, this also accepts a str or function. For a str a StrMethodFormatter is used. The field used for the value must be labeled 'x' and the field used for the position must be labeled 'pos'. See the StrMethodFormatter documentation for more information. For a function, a FuncFormatter is used. The function must take two inputs (a tick value x and a position pos), and return a string containing the corresponding tick label. See the FuncFormatter documentation for more information.  Parameters \n \nformatterFormatter, str, or function\n\n   \n  Examples using matplotlib.axis.Axis.set_major_formatter\n \n   Creating a timeline with lines, dates, and text   \n\n   Date tick labels   \n\n   Custom tick formatter for time series   \n\n   Labeling ticks using engineering notation   \n\n   Dollar Ticks   \n\n   Bachelor's degrees by gender   \n\n   3D surface (colormap)   \n\n   SkewT-logP diagram: using transforms and custom projections   \n\n   Centering labels between ticks   \n\n   Custom Ticker1   \n\n   Formatting date ticks using ConciseDateFormatter   \n\n   Date Demo Convert   \n\n   Placing date ticks using recurrence rules   \n\n   Date Index Formatter   \n\n   Major and minor ticks   \n\n   Setting tick labels from a list of values   \n\n   Basic Usage   \n\n   The Lifecycle of a Plot   \n\n   Artist tutorial   \n\n   Choosing Colormaps in Matplotlib   \n\n   Text in Matplotlib Plots   \n\n"}, {"name": "axis.Axis.set_major_locator", "path": "_as_gen/matplotlib.axis.axis.set_major_locator", "type": "axis", "text": "matplotlib.axis.Axis.set_major_locator   Axis.set_major_locator(locator)[source]\n \nSet the locator of the major ticker.  Parameters \n \nlocatorLocator\n\n   \n  Examples using matplotlib.axis.Axis.set_major_locator\n \n   Hatch-filled histograms   \n\n   Creating a timeline with lines, dates, and text   \n\n   Date tick labels   \n\n   Anatomy of a figure   \n\n   3D surface (colormap)   \n\n   3D surface (checkerboard)   \n\n   Scales   \n\n   MRI With EEG   \n\n   SkewT-logP diagram: using transforms and custom projections   \n\n   Centering labels between ticks   \n\n   Formatting date ticks using ConciseDateFormatter   \n\n   Date Demo Convert   \n\n   Placing date ticks using recurrence rules   \n\n   Major and minor ticks   \n\n   Setting tick labels from a list of values   \n\n   Choosing Colormaps in Matplotlib   \n\n   Text in Matplotlib Plots   \n\n"}, {"name": "axis.Axis.set_minor_formatter", "path": "_as_gen/matplotlib.axis.axis.set_minor_formatter", "type": "axis", "text": "matplotlib.axis.Axis.set_minor_formatter   Axis.set_minor_formatter(formatter)[source]\n \nSet the formatter of the minor ticker. In addition to a Formatter instance, this also accepts a str or function. See Axis.set_major_formatter for more information.  Parameters \n \nformatterFormatter, str, or function\n\n   \n  Examples using matplotlib.axis.Axis.set_minor_formatter\n \n   Anatomy of a figure   \n\n   Scales   \n\n   SkewT-logP diagram: using transforms and custom projections   \n\n   Centering labels between ticks   \n\n"}, {"name": "axis.Axis.set_minor_locator", "path": "_as_gen/matplotlib.axis.axis.set_minor_locator", "type": "axis", "text": "matplotlib.axis.Axis.set_minor_locator   Axis.set_minor_locator(locator)[source]\n \nSet the locator of the minor ticker.  Parameters \n \nlocatorLocator\n\n   \n  Examples using matplotlib.axis.Axis.set_minor_locator\n \n   Secondary Axis   \n\n   Date tick labels   \n\n   Anatomy of a figure   \n\n   Centering labels between ticks   \n\n   Date Demo Convert   \n\n   Major and minor ticks   \n\n"}, {"name": "axis.Axis.set_pickradius", "path": "_as_gen/matplotlib.axis.axis.set_pickradius", "type": "axis", "text": "matplotlib.axis.Axis.set_pickradius   Axis.set_pickradius(pickradius)[source]\n \nSet the depth of the axis used by the picker.  Parameters \n \npickradiusfloat\n\n   \n\n"}, {"name": "axis.Axis.set_remove_overlapping_locs", "path": "_as_gen/matplotlib.axis.axis.set_remove_overlapping_locs", "type": "axis", "text": "matplotlib.axis.Axis.set_remove_overlapping_locs   Axis.set_remove_overlapping_locs(val)[source]\n\n\n"}, {"name": "axis.Axis.set_tick_params", "path": "_as_gen/matplotlib.axis.axis.set_tick_params", "type": "axis", "text": "matplotlib.axis.Axis.set_tick_params   Axis.set_tick_params(which='major', reset=False, **kw)[source]\n \nSet appearance parameters for ticks, ticklabels, and gridlines. For documentation of keyword arguments, see matplotlib.axes.Axes.tick_params(). \n  Examples using matplotlib.axis.Axis.set_tick_params\n \n   Violin plot customization   \n\n   Dollar Ticks   \n\n   Scatter Histogram (Locatable Axes)   \n\n   Pythonic Matplotlib   \n\n   Placing date ticks using recurrence rules   \n\n   Date Precision and Epochs   \n\n   Choosing Colormaps in Matplotlib   \n\n"}, {"name": "axis.Axis.set_ticklabels", "path": "_as_gen/matplotlib.axis.axis.set_ticklabels", "type": "axis", "text": "matplotlib.axis.Axis.set_ticklabels   Axis.set_ticklabels(ticklabels, *, minor=False, **kwargs)[source]\n \nSet the text values of the tick labels.  Discouraged The use of this method is discouraged, because of the dependency on tick positions. In most cases, you'll want to use set_[x/y]ticks(positions, labels) instead. If you are using this method, you should always fix the tick positions before, e.g. by using Axis.set_ticks or by explicitly setting a FixedLocator. Otherwise, ticks are free to move and the labels may end up in unexpected positions.   Parameters \n \nticklabelssequence of str or of Texts\n\n\nTexts for labeling each tick location in the sequence set by Axis.set_ticks; the number of labels must match the number of locations.  \nminorbool\n\n\nIf True, set minor ticks instead of major ticks.  **kwargs\n\nText properties.    Returns \n list of Texts\n\nFor each tick, includes tick.label1 if it is visible, then tick.label2 if it is visible, in that order.     \n\n"}, {"name": "axis.Axis.set_ticks", "path": "_as_gen/matplotlib.axis.axis.set_ticks", "type": "axis", "text": "matplotlib.axis.Axis.set_ticks   Axis.set_ticks(ticks, labels=None, *, minor=False, **kwargs)[source]\n \nSet this Axis' tick locations and optionally labels. If necessary, the view limits of the Axis are expanded so that all given ticks are visible.  Parameters \n \ntickslist of floats\n\n\nList of tick locations.  \nlabelslist of str, optional\n\n\nList of tick labels. If not set, the labels show the data value.  \nminorbool, default: False\n\n\nIf False, set the major ticks; if True, the minor ticks.  **kwargs\n\nText properties for the labels. These take effect only if you pass labels. In other cases, please use tick_params.     Notes The mandatory expansion of the view limits is an intentional design choice to prevent the surprise of a non-visible tick. If you need other limits, you should set the limits explicitly after setting the ticks. \n  Examples using matplotlib.axis.Axis.set_ticks\n \n   Spine Placement   \n\n"}, {"name": "axis.Axis.set_units", "path": "_as_gen/matplotlib.axis.axis.set_units", "type": "axis", "text": "matplotlib.axis.Axis.set_units   Axis.set_units(u)[source]\n \nSet the units for axis.  Parameters \n \nuunits tag\n\n   Notes The units of any shared axis will also be updated. \n  Examples using matplotlib.axis.Axis.set_units\n \n   Artist tests   \n\n   Group barchart with units   \n\n   Unit handling   \n\n"}, {"name": "axis.Axis.set_view_interval", "path": "_as_gen/matplotlib.axis.axis.set_view_interval", "type": "axis", "text": "matplotlib.axis.Axis.set_view_interval   Axis.set_view_interval(vmin, vmax, ignore=False)[source]\n \nSet the axis view limits. This method is for internal use; Matplotlib users should typically use e.g. set_xlim or set_ylim. If ignore is False (the default), this method will never reduce the preexisting view limits, only expand them if vmin or vmax are not within them. Moreover, the order of vmin and vmax does not matter; the orientation of the axis will not change. If ignore is True, the view limits will be set exactly to (vmin,\nvmax) in that order. \n\n"}, {"name": "axis.Axis.update_units", "path": "_as_gen/matplotlib.axis.axis.update_units", "type": "axis", "text": "matplotlib.axis.Axis.update_units   Axis.update_units(data)[source]\n \nIntrospect data for units converter and update the axis.converter instance if necessary. Return True if data is registered for unit conversion. \n\n"}, {"name": "axis.Tick", "path": "axis_api#matplotlib.axis.Tick", "type": "axis", "text": "  classmatplotlib.axis.Tick(axes, loc, *, size=None, width=None, color=None, tickdir=None, pad=None, labelsize=None, labelcolor=None, zorder=None, gridOn=None, tick1On=True, tick2On=True, label1On=True, label2On=False, major=True, labelrotation=0, grid_color=None, grid_linestyle=None, grid_linewidth=None, grid_alpha=None, **kw)[source]\n \nAbstract base class for the axis ticks, grid lines and labels. Ticks mark a position on an Axis. They contain two lines as markers and two labels; one each for the bottom and top positions (in case of an XAxis) or for the left and right positions (in case of a YAxis).  Attributes \n \ntick1lineLine2D\n\n\nThe left/bottom tick marker.  \ntick2lineLine2D\n\n\nThe right/top tick marker.  \ngridlineLine2D\n\n\nThe grid line associated with the label position.  \nlabel1Text\n\n\nThe left/bottom tick label.  \nlabel2Text\n\n\nThe right/top tick label.     bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points \n"}, {"name": "axis.Tick.get_loc", "path": "_as_gen/matplotlib.axis.tick.get_loc", "type": "axis", "text": "matplotlib.axis.Tick.get_loc   Tick.get_loc()[source]\n \nReturn the tick location (data coords) as a scalar. \n\n"}, {"name": "axis.Tick.get_pad", "path": "_as_gen/matplotlib.axis.tick.get_pad", "type": "axis", "text": "matplotlib.axis.Tick.get_pad   Tick.get_pad()[source]\n \nGet the value of the tick label pad in points. \n\n"}, {"name": "axis.Tick.get_pad_pixels", "path": "_as_gen/matplotlib.axis.tick.get_pad_pixels", "type": "axis", "text": "matplotlib.axis.Tick.get_pad_pixels   Tick.get_pad_pixels()[source]\n\n\n"}, {"name": "axis.Tick.get_tick_padding", "path": "_as_gen/matplotlib.axis.tick.get_tick_padding", "type": "axis", "text": "matplotlib.axis.Tick.get_tick_padding   Tick.get_tick_padding()[source]\n \nGet the length of the tick outside of the axes. \n\n"}, {"name": "axis.Tick.get_tickdir", "path": "_as_gen/matplotlib.axis.tick.get_tickdir", "type": "axis", "text": "matplotlib.axis.Tick.get_tickdir   Tick.get_tickdir()[source]\n\n\n"}, {"name": "axis.Tick.get_view_interval", "path": "_as_gen/matplotlib.axis.tick.get_view_interval", "type": "axis", "text": "matplotlib.axis.Tick.get_view_interval   Tick.get_view_interval()[source]\n \nReturn the view limits (min, max) of the axis the tick belongs to. \n\n"}, {"name": "axis.Tick.set_label1", "path": "_as_gen/matplotlib.axis.tick.set_label1", "type": "axis", "text": "matplotlib.axis.Tick.set_label1   Tick.set_label1(s)[source]\n \nSet the label1 text.  Parameters \n \nsstr\n\n   \n\n"}, {"name": "axis.Tick.set_label2", "path": "_as_gen/matplotlib.axis.tick.set_label2", "type": "axis", "text": "matplotlib.axis.Tick.set_label2   Tick.set_label2(s)[source]\n \nSet the label2 text.  Parameters \n \nsstr\n\n   \n\n"}, {"name": "axis.Tick.set_pad", "path": "_as_gen/matplotlib.axis.tick.set_pad", "type": "axis", "text": "matplotlib.axis.Tick.set_pad   Tick.set_pad(val)[source]\n \nSet the tick label pad in points  Parameters \n \nvalfloat\n\n   \n\n"}, {"name": "axis.Tick.set_url", "path": "_as_gen/matplotlib.axis.tick.set_url", "type": "axis", "text": "matplotlib.axis.Tick.set_url   Tick.set_url(url)[source]\n \nSet the url of label1 and label2.  Parameters \n \nurlstr\n\n   \n\n"}, {"name": "axis.Tick.update_position", "path": "_as_gen/matplotlib.axis.tick.update_position", "type": "axis", "text": "matplotlib.axis.Tick.update_position   Tick.update_position(loc)[source]\n \nSet the location of tick in data coords with scalar loc. \n\n"}, {"name": "axis.Ticker", "path": "axis_api#matplotlib.axis.Ticker", "type": "axis", "text": "  classmatplotlib.axis.Ticker[source]\n \nA container for the objects defining tick position and format.  Attributes \n \nlocatormatplotlib.ticker.Locator subclass\n\n\nDetermines the positions of the ticks.  \nformattermatplotlib.ticker.Formatter subclass\n\n\nDetermines the format of the tick labels.     \n"}, {"name": "axis.XAxis", "path": "axis_api#matplotlib.axis.XAxis", "type": "axis", "text": "  classmatplotlib.axis.XAxis(*args, **kwargs)[source]\n \n Parameters \n \naxesmatplotlib.axes.Axes\n\n\nThe Axes to which the created Axis belongs.  \npickradiusfloat\n\n\nThe acceptance radius for containment tests. See also Axis.contains.     \n"}, {"name": "axis.XAxis.axis_name", "path": "_as_gen/matplotlib.axis.xaxis.axis_name", "type": "axis", "text": "matplotlib.axis.XAxis.axis_name   XAxis.axis_name='x'\n \nRead-only name identifying the axis. \n\n"}, {"name": "axis.XAxis.get_text_heights", "path": "_as_gen/matplotlib.axis.xaxis.get_text_heights", "type": "axis", "text": "matplotlib.axis.XAxis.get_text_heights   XAxis.get_text_heights(renderer)[source]\n \nReturn how much space should be reserved for text above and below the axes, as a pair of floats. \n\n"}, {"name": "axis.XAxis.get_ticks_position", "path": "_as_gen/matplotlib.axis.xaxis.get_ticks_position", "type": "axis", "text": "matplotlib.axis.XAxis.get_ticks_position   XAxis.get_ticks_position()[source]\n \nReturn the ticks position (\"top\", \"bottom\", \"default\", or \"unknown\"). \n\n"}, {"name": "axis.XAxis.set_label_position", "path": "_as_gen/matplotlib.axis.xaxis.set_label_position", "type": "axis", "text": "matplotlib.axis.XAxis.set_label_position   XAxis.set_label_position(position)[source]\n \nSet the label position (top or bottom)  Parameters \n \nposition{'top', 'bottom'}\n\n   \n  Examples using matplotlib.axis.XAxis.set_label_position\n \n   Title positioning   \n\n"}, {"name": "axis.XAxis.set_ticks_position", "path": "_as_gen/matplotlib.axis.xaxis.set_ticks_position", "type": "axis", "text": "matplotlib.axis.XAxis.set_ticks_position   XAxis.set_ticks_position(position)[source]\n \nSet the ticks position.  Parameters \n \nposition{'top', 'bottom', 'both', 'default', 'none'}\n\n\n'both' sets the ticks to appear on both positions, but does not change the tick labels. 'default' resets the tick positions to the default: ticks on both positions, labels at bottom. 'none' can be used if you don't want any ticks. 'none' and 'both' affect only the ticks, not the labels.     \n  Examples using matplotlib.axis.XAxis.set_ticks_position\n \n   Violin plot customization   \n\n   Colorbar with AxesDivider   \n\n   Controlling the position and size of colorbars with Inset Axes   \n\n   Integral as the area under a curve   \n\n   XKCD   \n\n   Spine Placement   \n\n   Spines   \n\n   Custom spine bounds   \n\n   Dropped spines   \n\n   Choosing Colormaps in Matplotlib   \n\n"}, {"name": "axis.XAxis.tick_bottom", "path": "_as_gen/matplotlib.axis.xaxis.tick_bottom", "type": "axis", "text": "matplotlib.axis.XAxis.tick_bottom   XAxis.tick_bottom()[source]\n \nMove ticks and ticklabels (if present) to the bottom of the axes. \n  Examples using matplotlib.axis.XAxis.tick_bottom\n \n   Broken Axis   \n\n   Bachelor's degrees by gender   \n\n"}, {"name": "axis.XAxis.tick_top", "path": "_as_gen/matplotlib.axis.xaxis.tick_top", "type": "axis", "text": "matplotlib.axis.XAxis.tick_top   XAxis.tick_top()[source]\n \nMove ticks and ticklabels (if present) to the top of the axes. \n  Examples using matplotlib.axis.XAxis.tick_top\n \n   Broken Axis   \n\n   Title positioning   \n\n"}, {"name": "axis.XTick", "path": "axis_api#matplotlib.axis.XTick", "type": "axis", "text": "  classmatplotlib.axis.XTick(*args, **kwargs)[source]\n \nContains all the Artists needed to make an x tick - the tick line, the label text and the grid line bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points \n"}, {"name": "axis.YAxis", "path": "axis_api#matplotlib.axis.YAxis", "type": "axis", "text": "  classmatplotlib.axis.YAxis(*args, **kwargs)[source]\n \n Parameters \n \naxesmatplotlib.axes.Axes\n\n\nThe Axes to which the created Axis belongs.  \npickradiusfloat\n\n\nThe acceptance radius for containment tests. See also Axis.contains.     \n"}, {"name": "axis.YAxis.axis_name", "path": "_as_gen/matplotlib.axis.yaxis.axis_name", "type": "axis", "text": "matplotlib.axis.YAxis.axis_name   YAxis.axis_name='y'\n \nRead-only name identifying the axis. \n\n"}, {"name": "axis.YAxis.get_text_widths", "path": "_as_gen/matplotlib.axis.yaxis.get_text_widths", "type": "axis", "text": "matplotlib.axis.YAxis.get_text_widths   YAxis.get_text_widths(renderer)[source]\n\n\n"}, {"name": "axis.YAxis.get_ticks_position", "path": "_as_gen/matplotlib.axis.yaxis.get_ticks_position", "type": "axis", "text": "matplotlib.axis.YAxis.get_ticks_position   YAxis.get_ticks_position()[source]\n \nReturn the ticks position (\"left\", \"right\", \"default\", or \"unknown\"). \n\n"}, {"name": "axis.YAxis.set_label_position", "path": "_as_gen/matplotlib.axis.yaxis.set_label_position", "type": "axis", "text": "matplotlib.axis.YAxis.set_label_position   YAxis.set_label_position(position)[source]\n \nSet the label position (left or right)  Parameters \n \nposition{'left', 'right'}\n\n   \n\n"}, {"name": "axis.YAxis.set_offset_position", "path": "_as_gen/matplotlib.axis.yaxis.set_offset_position", "type": "axis", "text": "matplotlib.axis.YAxis.set_offset_position   YAxis.set_offset_position(position)[source]\n \n Parameters \n \nposition{'left', 'right'}\n\n   \n\n"}, {"name": "axis.YAxis.set_ticks_position", "path": "_as_gen/matplotlib.axis.yaxis.set_ticks_position", "type": "axis", "text": "matplotlib.axis.YAxis.set_ticks_position   YAxis.set_ticks_position(position)[source]\n \nSet the ticks position.  Parameters \n \nposition{'left', 'right', 'both', 'default', 'none'}\n\n\n'both' sets the ticks to appear on both positions, but does not change the tick labels. 'default' resets the tick positions to the default: ticks on both positions, labels at left. 'none' can be used if you don't want any ticks. 'none' and 'both' affect only the ticks, not the labels.     \n  Examples using matplotlib.axis.YAxis.set_ticks_position\n \n   Spine Placement   \n\n   Spines   \n\n   Custom spine bounds   \n\n   Dropped spines   \n\n"}, {"name": "axis.YAxis.tick_left", "path": "_as_gen/matplotlib.axis.yaxis.tick_left", "type": "axis", "text": "matplotlib.axis.YAxis.tick_left   YAxis.tick_left()[source]\n \nMove ticks and ticklabels (if present) to the left of the axes. \n  Examples using matplotlib.axis.YAxis.tick_left\n \n   Bachelor's degrees by gender   \n\n   Set default y-axis tick labels on the right   \n\n"}, {"name": "axis.YAxis.tick_right", "path": "_as_gen/matplotlib.axis.yaxis.tick_right", "type": "axis", "text": "matplotlib.axis.YAxis.tick_right   YAxis.tick_right()[source]\n \nMove ticks and ticklabels (if present) to the right of the axes. \n\n"}, {"name": "axis.YTick", "path": "axis_api#matplotlib.axis.YTick", "type": "axis", "text": "  classmatplotlib.axis.YTick(*args, **kwargs)[source]\n \nContains all the Artists needed to make a Y tick - the tick line, the label text and the grid line bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points \n"}, {"name": "axisartist", "path": "toolkits/axisartist", "type": "axisartist", "text": "mpl_toolkits.axisartist The axisartist namespace provides a derived Axes implementation (mpl_toolkits.axisartist.Axes), designed to support curvilinear grids. The biggest difference is that the artists that are responsible for drawing axis lines, ticks, ticklabels, and axis labels are separated out from Matplotlib's Axis class. You can find a tutorial describing usage of axisartist at the axisartist user guide.    The submodules of the axisartist API are:  \naxisartist.angle_helper   \naxisartist.axes_divider   \naxisartist.axes_grid   \naxisartist.axes_rgb   \naxisartist.axis_artist The axis_artist module implements custom artists to draw axis elements (axis lines and labels, tick lines and labels, grid lines).  \naxisartist.axisline_style   \naxisartist.axislines Axislines includes modified implementation of the Axes class.  \naxisartist.clip_path   \naxisartist.floating_axes An experimental support for curvilinear grid.  \naxisartist.grid_finder   \naxisartist.grid_helper_curvelinear An experimental support for curvilinear grid.  \naxisartist.parasite_axes   \n"}, {"name": "axisartist.angle_helper", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper  Classes  \nExtremeFinderCycle(nx, ny[, lon_cycle, ...]) This subclass handles the case where one or both coordinates should be taken modulo 360, or be restricted to not exceed a specific range.  \nFormatterDMS()   \nFormatterHMS()   \nLocatorBase(nbins[, include_last])   \nLocatorD(nbins[, include_last])   \nLocatorDM(nbins[, include_last])   \nLocatorDMS(nbins[, include_last])   \nLocatorH(nbins[, include_last])   \nLocatorHM(nbins[, include_last])   \nLocatorHMS(nbins[, include_last])      Functions  \nselect_step(v1, v2, nv[, hour, ...])   \nselect_step24(v1, v2, nv[, include_last, ...])   \nselect_step360(v1, v2, nv[, include_last, ...])   \nselect_step_degree(dv)   \nselect_step_hour(dv)   \nselect_step_sub(dv)    \n"}, {"name": "axisartist.angle_helper.ExtremeFinderCycle", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.extremefindercycle", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.ExtremeFinderCycle   classmpl_toolkits.axisartist.angle_helper.ExtremeFinderCycle(nx, ny, lon_cycle=360.0, lat_cycle=None, lon_minmax=None, lat_minmax=(- 90, 90))[source]\n \nBases: mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple This subclass handles the case where one or both coordinates should be taken modulo 360, or be restricted to not exceed a specific range.  Parameters \n \nnx, nyint\n\n\nThe number of samples in each direction.  \nlon_cycle, lat_cycle360 or None\n\n\nIf not None, values in the corresponding direction are taken modulo lon_cycle or lat_cycle; in theory this can be any number but the implementation actually assumes that it is 360 (if not None); other values give nonsensical results. This is done by \"unwrapping\" the transformed grid coordinates so that jumps are less than a half-cycle; then normalizing the span to no more than a full cycle. For example, if values are in the union of the [0, 2] and [358, 360] intervals (typically, angles measured modulo 360), the values in the second interval are normalized to [-2, 0] instead so that the values now cover [-2, 2]. If values are in a range of [5, 1000], this gets normalized to [5, 365].  \nlon_minmax, lat_minmax(float, float) or None\n\n\nIf not None, the computed bounding box is clipped to the given range in the corresponding direction.       __call__(transform_xy, x1, y1, x2, y2)[source]\n \nCompute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2). The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes. The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling. As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions. \n \n  Examples using mpl_toolkits.axisartist.angle_helper.ExtremeFinderCycle\n \n   axis_direction demo   \n\n   Curvilinear grid demo   \n\n   floating_axis demo   \n\n   Simple Axis Pad   \n\n"}, {"name": "axisartist.angle_helper.ExtremeFinderCycle.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.extremefindercycle#mpl_toolkits.axisartist.angle_helper.ExtremeFinderCycle.__call__", "type": "axisartist", "text": "  __call__(transform_xy, x1, y1, x2, y2)[source]\n \nCompute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2). The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes. The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling. As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions. \n"}, {"name": "axisartist.angle_helper.FormatterDMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.FormatterDMS   classmpl_toolkits.axisartist.angle_helper.FormatterDMS[source]\n \nBases: object   __call__(direction, factor, values)[source]\n \nCall self as a function. \n   deg_mark='^{\\\\circ}'\n\n   fmt_d='$%d^{\\\\circ}$'\n\n   fmt_d_m='$%s%d^{\\\\circ}\\\\,%02d^{\\\\prime}$'\n\n   fmt_d_m_partial='$%s%d^{\\\\circ}\\\\,%02d^{\\\\prime}\\\\,'\n\n   fmt_d_ms='$%s%d^{\\\\circ}\\\\,%02d.%s^{\\\\prime}$'\n\n   fmt_ds='$%d.%s^{\\\\circ}$'\n\n   fmt_s_partial='%02d^{\\\\prime\\\\prime}$'\n\n   fmt_ss_partial='%02d.%s^{\\\\prime\\\\prime}$'\n\n   min_mark='^{\\\\prime}'\n\n   sec_mark='^{\\\\prime\\\\prime}'\n\n \n  Examples using mpl_toolkits.axisartist.angle_helper.FormatterDMS\n \n   axis_direction demo   \n\n   Curvilinear grid demo   \n\n   mpl_toolkits.axisartist.floating_axes features   \n\n   floating_axis demo   \n\n   Simple Axis Pad   \n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.__call__", "type": "axisartist", "text": "  __call__(direction, factor, values)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.angle_helper.FormatterDMS.deg_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.deg_mark", "type": "axisartist", "text": "  deg_mark='^{\\\\circ}'\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d", "type": "axisartist", "text": "  fmt_d='$%d^{\\\\circ}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d_m", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d_m", "type": "axisartist", "text": "  fmt_d_m='$%s%d^{\\\\circ}\\\\,%02d^{\\\\prime}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d_m_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d_m_partial", "type": "axisartist", "text": "  fmt_d_m_partial='$%s%d^{\\\\circ}\\\\,%02d^{\\\\prime}\\\\,'\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_d_ms", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_d_ms", "type": "axisartist", "text": "  fmt_d_ms='$%s%d^{\\\\circ}\\\\,%02d.%s^{\\\\prime}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_ds", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_ds", "type": "axisartist", "text": "  fmt_ds='$%d.%s^{\\\\circ}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_s_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_s_partial", "type": "axisartist", "text": "  fmt_s_partial='%02d^{\\\\prime\\\\prime}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.fmt_ss_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.fmt_ss_partial", "type": "axisartist", "text": "  fmt_ss_partial='%02d.%s^{\\\\prime\\\\prime}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.min_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.min_mark", "type": "axisartist", "text": "  min_mark='^{\\\\prime}'\n\n"}, {"name": "axisartist.angle_helper.FormatterDMS.sec_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterdms#mpl_toolkits.axisartist.angle_helper.FormatterDMS.sec_mark", "type": "axisartist", "text": "  sec_mark='^{\\\\prime\\\\prime}'\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.FormatterHMS   classmpl_toolkits.axisartist.angle_helper.FormatterHMS[source]\n \nBases: mpl_toolkits.axisartist.angle_helper.FormatterDMS   __call__(direction, factor, values)[source]\n \nCall self as a function. \n   deg_mark='^\\\\mathrm{h}'\n\n   fmt_d='$%d^\\\\mathrm{h}$'\n\n   fmt_d_m='$%s%d^\\\\mathrm{h}\\\\,%02d^\\\\mathrm{m}$'\n\n   fmt_d_m_partial='$%s%d^\\\\mathrm{h}\\\\,%02d^\\\\mathrm{m}\\\\,'\n\n   fmt_d_ms='$%s%d^\\\\mathrm{h}\\\\,%02d.%s^\\\\mathrm{m}$'\n\n   fmt_ds='$%d.%s^\\\\mathrm{h}$'\n\n   fmt_s_partial='%02d^\\\\mathrm{s}$'\n\n   fmt_ss_partial='%02d.%s^\\\\mathrm{s}$'\n\n   min_mark='^\\\\mathrm{m}'\n\n   sec_mark='^\\\\mathrm{s}'\n\n \n  Examples using mpl_toolkits.axisartist.angle_helper.FormatterHMS\n \n   mpl_toolkits.axisartist.floating_axes features   \n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.__call__", "type": "axisartist", "text": "  __call__(direction, factor, values)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.angle_helper.FormatterHMS.deg_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.deg_mark", "type": "axisartist", "text": "  deg_mark='^\\\\mathrm{h}'\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d", "type": "axisartist", "text": "  fmt_d='$%d^\\\\mathrm{h}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d_m", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d_m", "type": "axisartist", "text": "  fmt_d_m='$%s%d^\\\\mathrm{h}\\\\,%02d^\\\\mathrm{m}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d_m_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d_m_partial", "type": "axisartist", "text": "  fmt_d_m_partial='$%s%d^\\\\mathrm{h}\\\\,%02d^\\\\mathrm{m}\\\\,'\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_d_ms", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_d_ms", "type": "axisartist", "text": "  fmt_d_ms='$%s%d^\\\\mathrm{h}\\\\,%02d.%s^\\\\mathrm{m}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_ds", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_ds", "type": "axisartist", "text": "  fmt_ds='$%d.%s^\\\\mathrm{h}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_s_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_s_partial", "type": "axisartist", "text": "  fmt_s_partial='%02d^\\\\mathrm{s}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.fmt_ss_partial", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.fmt_ss_partial", "type": "axisartist", "text": "  fmt_ss_partial='%02d.%s^\\\\mathrm{s}$'\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.min_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.min_mark", "type": "axisartist", "text": "  min_mark='^\\\\mathrm{m}'\n\n"}, {"name": "axisartist.angle_helper.FormatterHMS.sec_mark", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.formatterhms#mpl_toolkits.axisartist.angle_helper.FormatterHMS.sec_mark", "type": "axisartist", "text": "  sec_mark='^\\\\mathrm{s}'\n\n"}, {"name": "axisartist.angle_helper.LocatorBase", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorbase", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.LocatorBase   classmpl_toolkits.axisartist.angle_helper.LocatorBase(nbins, include_last=True)[source]\n \nBases: object   set_params(nbins=None)[source]\n\n \n  Examples using mpl_toolkits.axisartist.angle_helper.LocatorBase\n \n   axis_direction demo   \n\n   Curvilinear grid demo   \n\n   mpl_toolkits.axisartist.floating_axes features   \n\n   floating_axis demo   \n\n   Simple Axis Pad   \n\n"}, {"name": "axisartist.angle_helper.LocatorBase.set_params()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorbase#mpl_toolkits.axisartist.angle_helper.LocatorBase.set_params", "type": "axisartist", "text": "  set_params(nbins=None)[source]\n\n"}, {"name": "axisartist.angle_helper.LocatorD", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatord", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.LocatorD   classmpl_toolkits.axisartist.angle_helper.LocatorD(nbins, include_last=True)[source]\n \nBases: mpl_toolkits.axisartist.angle_helper.LocatorBase   __call__(v1, v2)[source]\n \nCall self as a function. \n \n\n"}, {"name": "axisartist.angle_helper.LocatorD.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatord#mpl_toolkits.axisartist.angle_helper.LocatorD.__call__", "type": "axisartist", "text": "  __call__(v1, v2)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.angle_helper.LocatorDM", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordm", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.LocatorDM   classmpl_toolkits.axisartist.angle_helper.LocatorDM(nbins, include_last=True)[source]\n \nBases: mpl_toolkits.axisartist.angle_helper.LocatorBase   __call__(v1, v2)[source]\n \nCall self as a function. \n \n\n"}, {"name": "axisartist.angle_helper.LocatorDM.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordm#mpl_toolkits.axisartist.angle_helper.LocatorDM.__call__", "type": "axisartist", "text": "  __call__(v1, v2)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.angle_helper.LocatorDMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordms", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.LocatorDMS   classmpl_toolkits.axisartist.angle_helper.LocatorDMS(nbins, include_last=True)[source]\n \nBases: mpl_toolkits.axisartist.angle_helper.LocatorBase   __call__(v1, v2)[source]\n \nCall self as a function. \n \n  Examples using mpl_toolkits.axisartist.angle_helper.LocatorDMS\n \n   axis_direction demo   \n\n   Curvilinear grid demo   \n\n   floating_axis demo   \n\n   Simple Axis Pad   \n\n"}, {"name": "axisartist.angle_helper.LocatorDMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatordms#mpl_toolkits.axisartist.angle_helper.LocatorDMS.__call__", "type": "axisartist", "text": "  __call__(v1, v2)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.angle_helper.LocatorH", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorh", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.LocatorH   classmpl_toolkits.axisartist.angle_helper.LocatorH(nbins, include_last=True)[source]\n \nBases: mpl_toolkits.axisartist.angle_helper.LocatorBase   __call__(v1, v2)[source]\n \nCall self as a function. \n \n\n"}, {"name": "axisartist.angle_helper.LocatorH.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorh#mpl_toolkits.axisartist.angle_helper.LocatorH.__call__", "type": "axisartist", "text": "  __call__(v1, v2)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.angle_helper.LocatorHM", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhm", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.LocatorHM   classmpl_toolkits.axisartist.angle_helper.LocatorHM(nbins, include_last=True)[source]\n \nBases: mpl_toolkits.axisartist.angle_helper.LocatorBase   __call__(v1, v2)[source]\n \nCall self as a function. \n \n\n"}, {"name": "axisartist.angle_helper.LocatorHM.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhm#mpl_toolkits.axisartist.angle_helper.LocatorHM.__call__", "type": "axisartist", "text": "  __call__(v1, v2)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.angle_helper.LocatorHMS", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhms", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.LocatorHMS   classmpl_toolkits.axisartist.angle_helper.LocatorHMS(nbins, include_last=True)[source]\n \nBases: mpl_toolkits.axisartist.angle_helper.LocatorBase   __call__(v1, v2)[source]\n \nCall self as a function. \n \n  Examples using mpl_toolkits.axisartist.angle_helper.LocatorHMS\n \n   mpl_toolkits.axisartist.floating_axes features   \n\n"}, {"name": "axisartist.angle_helper.LocatorHMS.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.locatorhms#mpl_toolkits.axisartist.angle_helper.LocatorHMS.__call__", "type": "axisartist", "text": "  __call__(v1, v2)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.angle_helper.select_step", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.select_step   mpl_toolkits.axisartist.angle_helper.select_step(v1, v2, nv, hour=False, include_last=True, threshold_factor=3600.0)[source]\n\n\n"}, {"name": "axisartist.angle_helper.select_step24", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step24", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.select_step24   mpl_toolkits.axisartist.angle_helper.select_step24(v1, v2, nv, include_last=True, threshold_factor=3600)[source]\n\n\n"}, {"name": "axisartist.angle_helper.select_step360", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step360", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.select_step360   mpl_toolkits.axisartist.angle_helper.select_step360(v1, v2, nv, include_last=True, threshold_factor=3600)[source]\n\n\n"}, {"name": "axisartist.angle_helper.select_step_degree", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step_degree", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.select_step_degree   mpl_toolkits.axisartist.angle_helper.select_step_degree(dv)[source]\n\n\n"}, {"name": "axisartist.angle_helper.select_step_hour", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step_hour", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.select_step_hour   mpl_toolkits.axisartist.angle_helper.select_step_hour(dv)[source]\n\n\n"}, {"name": "axisartist.angle_helper.select_step_sub", "path": "_as_gen/mpl_toolkits.axisartist.angle_helper.select_step_sub", "type": "axisartist", "text": "mpl_toolkits.axisartist.angle_helper.select_step_sub   mpl_toolkits.axisartist.angle_helper.select_step_sub(dv)[source]\n\n\n"}, {"name": "axisartist.axes_divider", "path": "_as_gen/mpl_toolkits.axisartist.axes_divider", "type": "axisartist", "text": "mpl_toolkits.axisartist.axes_divider\n"}, {"name": "axisartist.axes_grid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid", "type": "axisartist", "text": "mpl_toolkits.axisartist.axes_grid  Classes  \nAxesGrid alias of mpl_toolkits.axisartist.axes_grid.ImageGrid  \nCbarAxes(*args, orientation, **kwargs) [Deprecated]  \nGrid(fig, rect, nrows_ncols[, ngrids, ...]) \n Parameters    \nImageGrid(fig, rect, nrows_ncols[, ngrids, ...]) \n Parameters     \n"}, {"name": "axisartist.axes_grid.AxesGrid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.axesgrid", "type": "axisartist", "text": "mpl_toolkits.axisartist.axes_grid.AxesGrid   mpl_toolkits.axisartist.axes_grid.AxesGrid[source]\n \nalias of mpl_toolkits.axisartist.axes_grid.ImageGrid \n\n"}, {"name": "axisartist.axes_grid.CbarAxes", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.cbaraxes", "type": "axisartist", "text": "mpl_toolkits.axisartist.axes_grid.CbarAxes   classmpl_toolkits.axisartist.axes_grid.CbarAxes(*args, orientation, **kwargs)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_grid.CbarAxesBase, mpl_toolkits.axisartist.axislines.Axes [Deprecated] Notes  Deprecated since version 3.5:   Build an Axes in a figure.  Parameters \n \nfigFigure\n\n\nThe Axes is built in the Figure fig.  \nrect[left, bottom, width, height]\n\n\nThe Axes is built in the rectangle rect. rect is in Figure coordinates.  \nsharex, shareyAxes, optional\n\n\nThe x or y axis is shared with the x or y axis in the input Axes.  \nframeonbool, default: True\n\n\nWhether the Axes frame is visible.  \nbox_aspectfloat, optional\n\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.  **kwargs\n\nOther optional keyword arguments:   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float      Returns \n Axes\n\nThe new Axes object.       set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n \n\n"}, {"name": "axisartist.axes_grid.CbarAxes.set()", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.cbaraxes#mpl_toolkits.axisartist.axes_grid.CbarAxes.set", "type": "axisartist", "text": "  set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n"}, {"name": "axisartist.axes_grid.Grid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.grid", "type": "axisartist", "text": "mpl_toolkits.axisartist.axes_grid.Grid   classmpl_toolkits.axisartist.axes_grid.Grid(fig, rect, nrows_ncols, ngrids=None, direction='row', axes_pad=0.02, *, share_all=False, share_x=True, share_y=True, label_mode='L', axes_class=None, aspect=False)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_grid.Grid  Parameters \n \nfigFigure\n\n\nThe parent figure.  \nrect(float, float, float, float) or int\n\n\nThe axes position, as a (left, bottom, width, height) tuple or as a three-digit subplot position code (e.g., \"121\").  \nnrows_ncols(int, int)\n\n\nNumber of rows and columns in the grid.  \nngridsint or None, default: None\n\n\nIf not None, only the first ngrids axes in the grid are created.  \ndirection{\"row\", \"column\"}, default: \"row\"\n\n\nWhether axes are created in row-major (\"row by row\") or column-major order (\"column by column\"). This also affects the order in which axes are accessed using indexing (grid[index]).  \naxes_padfloat or (float, float), default: 0.02\n\n\nPadding or (horizontal padding, vertical padding) between axes, in inches.  \nshare_allbool, default: False\n\n\nWhether all axes share their x- and y-axis. Overrides share_x and share_y.  \nshare_xbool, default: True\n\n\nWhether all axes of a column share their x-axis.  \nshare_ybool, default: True\n\n\nWhether all axes of a row share their y-axis.  \nlabel_mode{\"L\", \"1\", \"all\"}, default: \"L\"\n\n\nDetermines which axes will get tick labels:  \"L\": All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels. \"1\": Only the bottom left axes is labelled. \"all\": all axes are labelled.   \naxes_classsubclass of matplotlib.axes.Axes, default: None\n\n\naspectbool, default: False\n\n\nWhether the axes aspect ratio follows the aspect ratio of the data limits.     \n\n"}, {"name": "axisartist.axes_grid.ImageGrid", "path": "_as_gen/mpl_toolkits.axisartist.axes_grid.imagegrid", "type": "axisartist", "text": "mpl_toolkits.axisartist.axes_grid.ImageGrid   classmpl_toolkits.axisartist.axes_grid.ImageGrid(fig, rect, nrows_ncols, ngrids=None, direction='row', axes_pad=0.02, *, share_all=False, aspect=True, label_mode='L', cbar_mode=None, cbar_location='right', cbar_pad=None, cbar_size='5%', cbar_set_cax=True, axes_class=None)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_grid.ImageGrid  Parameters \n \nfigFigure\n\n\nThe parent figure.  \nrect(float, float, float, float) or int\n\n\nThe axes position, as a (left, bottom, width, height) tuple or as a three-digit subplot position code (e.g., \"121\").  \nnrows_ncols(int, int)\n\n\nNumber of rows and columns in the grid.  \nngridsint or None, default: None\n\n\nIf not None, only the first ngrids axes in the grid are created.  \ndirection{\"row\", \"column\"}, default: \"row\"\n\n\nWhether axes are created in row-major (\"row by row\") or column-major order (\"column by column\"). This also affects the order in which axes are accessed using indexing (grid[index]).  \naxes_padfloat or (float, float), default: 0.02in\n\n\nPadding or (horizontal padding, vertical padding) between axes, in inches.  \nshare_allbool, default: False\n\n\nWhether all axes share their x- and y-axis.  \naspectbool, default: True\n\n\nWhether the axes aspect ratio follows the aspect ratio of the data limits.  \nlabel_mode{\"L\", \"1\", \"all\"}, default: \"L\"\n\n\nDetermines which axes will get tick labels:  \"L\": All axes on the left column get vertical tick labels; all axes on the bottom row get horizontal tick labels. \"1\": Only the bottom left axes is labelled. \"all\": all axes are labelled.   \ncbar_mode{\"each\", \"single\", \"edge\", None}, default: None\n\n\nWhether to create a colorbar for \"each\" axes, a \"single\" colorbar for the entire grid, colorbars only for axes on the \"edge\" determined by cbar_location, or no colorbars. The colorbars are stored in the cbar_axes attribute.  \ncbar_location{\"left\", \"right\", \"bottom\", \"top\"}, default: \"right\"\n\n\ncbar_padfloat, default: None\n\n\nPadding between the image axes and the colorbar axes.  \ncbar_sizesize specification (see Size.from_any), default: \"5%\"\n\n\nColorbar size.  \ncbar_set_caxbool, default: True\n\n\nIf True, each axes in the grid has a cax attribute that is bound to associated cbar_axes.  \naxes_classsubclass of matplotlib.axes.Axes, default: None\n\n   \n\n"}, {"name": "axisartist.axes_rgb", "path": "_as_gen/mpl_toolkits.axisartist.axes_rgb", "type": "axisartist", "text": "mpl_toolkits.axisartist.axes_rgb  Classes  \nRGBAxes(*args[, pad]) \n Parameters     \n"}, {"name": "axisartist.axes_rgb.RGBAxes", "path": "_as_gen/mpl_toolkits.axisartist.axes_rgb.rgbaxes", "type": "axisartist", "text": "mpl_toolkits.axisartist.axes_rgb.RGBAxes   classmpl_toolkits.axisartist.axes_rgb.RGBAxes(*args, pad=0, **kwargs)[source]\n \nBases: mpl_toolkits.axes_grid1.axes_rgb.RGBAxes  Parameters \n \npadfloat, default: 0\n\n\nfraction of the axes height to put as padding.  \naxes_classmatplotlib.axes.Axes\n\n*args\n\nUnpacked into axes_class() init for RGB  **kwargs\n\nUnpacked into axes_class() init for RGB, R, G, B axes     \n\n"}, {"name": "axisartist.axis_artist", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist", "type": "axisartist", "text": "mpl_toolkits.axisartist.axis_artist The axis_artist module implements custom artists to draw axis elements (axis lines and labels, tick lines and labels, grid lines). Axis lines and labels and tick lines and labels are managed by the AxisArtist class; grid lines are managed by the GridlinesCollection class. There is one AxisArtist per Axis; it can be accessed through the axis dictionary of the parent Axes (which should be a mpl_toolkits.axislines.Axes), e.g. ax.axis[\"bottom\"]. Children of the AxisArtist are accessed as attributes: .line and .label for the axis line and label, .major_ticks, .major_ticklabels, .minor_ticks, .minor_ticklabels for the tick lines and labels (e.g. ax.axis[\"bottom\"].line). Children properties (colors, fonts, line widths, etc.) can be set using setters, e.g. # Make the major ticks of the bottom axis red.\nax.axis[\"bottom\"].major_ticks.set_color(\"red\")\n However, things like the locations of ticks, and their ticklabels need to be changed from the side of the grid_helper.  axis_direction AxisArtist, AxisLabel, TickLabels have an axis_direction attribute, which adjusts the location, angle, etc. The axis_direction must be one of \"left\", \"right\", \"bottom\", \"top\", and follows the Matplotlib convention for rectangular axis. For example, for the bottom axis (the left and right is relative to the direction of the increasing coordinate),  ticklabels and axislabel are on the right ticklabels and axislabel have text angle of 0 ticklabels are baseline, center-aligned axislabel is top, center-aligned  The text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis.   \nParameter left bottom right top   \nticklabels location left right right left  \naxislabel location left right right left  \nticklabels angle 90 0 -90 180  \naxislabel angle 180 0 0 180  \nticklabel va center baseline center baseline  \naxislabel va center top center bottom  \nticklabel ha right center right center  \naxislabel ha right center right center   Ticks are by default direct opposite side of the ticklabels. To make ticks to the same side of the ticklabels, ax.axis[\"bottom\"].major_ticks.set_tick_out(True)\n The following attributes can be customized (use the set_xxx methods):  \nTicks: ticksize, tick_out \nTickLabels: pad \nAxisLabel: pad    Classes  \nAttributeCopier()   \nAxisArtist(axes, helper[, offset, ...]) An artist which draws axis (a line along which the n-th axes coord is constant) line, ticks, ticklabels, and axis label.  \nAxisLabel(*args[, axis_direction, axis]) Axis Label.  \nGridlinesCollection(*args[, which, axis]) \n Parameters    \nLabelBase(*args, **kwargs) A base class for AxisLabel and TickLabels.  \nTickLabels(*[, axis_direction]) Tick Labels.  \nTicks(ticksize[, tick_out, axis]) Ticks are derived from Line2D, and note that ticks themselves are markers.   \n"}, {"name": "axisartist.axis_artist.AttributeCopier", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.attributecopier", "type": "axisartist", "text": "mpl_toolkits.axisartist.axis_artist.AttributeCopier   classmpl_toolkits.axisartist.axis_artist.AttributeCopier[source]\n \nBases: object   get_attribute_from_ref_artist(attr_name)[source]\n\n   get_ref_artist()[source]\n \nReturn the underlying artist that actually defines some properties (e.g., color) of this artist. \n \n\n"}, {"name": "axisartist.axis_artist.AttributeCopier.get_attribute_from_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.attributecopier#mpl_toolkits.axisartist.axis_artist.AttributeCopier.get_attribute_from_ref_artist", "type": "axisartist", "text": "  get_attribute_from_ref_artist(attr_name)[source]\n\n"}, {"name": "axisartist.axis_artist.AttributeCopier.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.attributecopier#mpl_toolkits.axisartist.axis_artist.AttributeCopier.get_ref_artist", "type": "axisartist", "text": "  get_ref_artist()[source]\n \nReturn the underlying artist that actually defines some properties (e.g., color) of this artist. \n"}, {"name": "axisartist.axis_artist.AxisArtist", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist", "type": "axisartist", "text": "mpl_toolkits.axisartist.axis_artist.AxisArtist   classmpl_toolkits.axisartist.axis_artist.AxisArtist(axes, helper, offset=None, axis_direction='bottom', **kwargs)[source]\n \nBases: matplotlib.artist.Artist An artist which draws axis (a line along which the n-th axes coord is constant) line, ticks, ticklabels, and axis label.  Parameters \n \naxesmpl_toolkits.axisartist.axislines.Axes\n\n\nhelperAxisArtistHelper\n\n     propertyLABELPAD\n\n   ZORDER=2.5\n\n   draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n   get_axisline_style()[source]\n \nReturn the current axisline style. \n   get_helper()[source]\n \nReturn axis artist helper instance. \n   get_tightbbox(renderer)[source]\n \nLike Artist.get_window_extent, but includes any clipping.  Parameters \n \nrendererRendererBase subclass\n\n\nrenderer that will be used to draw the figures (i.e. fig.canvas.get_renderer())    Returns \n Bbox\n\nThe enclosing bounding box (in figure pixel coordinates).     \n   get_transform()[source]\n \nReturn the Transform instance used by this artist. \n   invert_ticklabel_direction()[source]\n\n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, axis_direction=<UNSET>, axislabel_direction=<UNSET>, axisline_style=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, ticklabel_direction=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \naxis_direction unknown  \naxislabel_direction {\"+\", \"-\"}  \naxisline_style str or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nin_layout bool  \nlabel unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nticklabel_direction {\"+\", \"-\"}  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float   \n   set_axis_direction(axis_direction)[source]\n \nAdjust the direction, text angle, text alignment of ticklabels, labels following the matplotlib convention for the rectangle axes. The axis_direction must be one of [left, right, bottom, top].   \nproperty left bottom right top   \nticklabels location \"-\" \"+\" \"+\" \"-\"  \naxislabel location \"-\" \"+\" \"+\" \"-\"  \nticklabels angle 90 0 -90 180  \nticklabel va center baseline center baseline  \nticklabel ha right center right center  \naxislabel angle 180 0 0 180  \naxislabel va center top center bottom  \naxislabel ha right center right center   Note that the direction \"+\" and \"-\" are relative to the direction of the increasing coordinate. Also, the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis. \n   set_axislabel_direction(label_direction)[source]\n \nAdjust the direction of the axislabel. Note that the label_directions '+' and '-' are relative to the direction of the increasing coordinate.  Parameters \n \nlabel_direction{\"+\", \"-\"}\n\n   \n   set_axisline_style(axisline_style=None, **kwargs)[source]\n \nSet the axisline style. The new style is completely defined by the passed attributes. Existing style attributes are forgotten.  Parameters \n \naxisline_stylestr or None\n\n\nThe line style, e.g. '->', optionally followed by a comma-separated list of attributes. Alternatively, the attributes can be provided as keywords. If None this returns a string containing the available styles.     Examples The following two commands are equal: >>> set_axisline_style(\"->,size=1.5\") >>> set_axisline_style(\"->\", size=1.5) \n   set_label(s)[source]\n \nSet a label that will be displayed in the legend.  Parameters \n \nsobject\n\n\ns will be converted to a string by calling str.     \n   set_ticklabel_direction(tick_direction)[source]\n \nAdjust the direction of the ticklabel. Note that the label_directions '+' and '-' are relative to the direction of the increasing coordinate.  Parameters \n \ntick_direction{\"+\", \"-\"}\n\n   \n   toggle(all=None, ticks=None, ticklabels=None, label=None)[source]\n \nToggle visibility of ticks, ticklabels, and (axis) label. To turn all off, axis.toggle(all=False)\n To turn all off but ticks on axis.toggle(all=False, ticks=True)\n To turn all on but (axis) label off axis.toggle(all=True, label=False))\n \n   zorder=2.5\n\n \n\n"}, {"name": "axisartist.axis_artist.AxisArtist.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.draw", "type": "axisartist", "text": "  draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n"}, {"name": "axisartist.axis_artist.AxisArtist.get_axisline_style()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_axisline_style", "type": "axisartist", "text": "  get_axisline_style()[source]\n \nReturn the current axisline style. \n"}, {"name": "axisartist.axis_artist.AxisArtist.get_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_helper", "type": "axisartist", "text": "  get_helper()[source]\n \nReturn axis artist helper instance. \n"}, {"name": "axisartist.axis_artist.AxisArtist.get_tightbbox()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_tightbbox", "type": "axisartist", "text": "  get_tightbbox(renderer)[source]\n \nLike Artist.get_window_extent, but includes any clipping.  Parameters \n \nrendererRendererBase subclass\n\n\nrenderer that will be used to draw the figures (i.e. fig.canvas.get_renderer())    Returns \n Bbox\n\nThe enclosing bounding box (in figure pixel coordinates).     \n"}, {"name": "axisartist.axis_artist.AxisArtist.get_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.get_transform", "type": "axisartist", "text": "  get_transform()[source]\n \nReturn the Transform instance used by this artist. \n"}, {"name": "axisartist.axis_artist.AxisArtist.invert_ticklabel_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.invert_ticklabel_direction", "type": "axisartist", "text": "  invert_ticklabel_direction()[source]\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set", "type": "axisartist", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, axis_direction=<UNSET>, axislabel_direction=<UNSET>, axisline_style=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, ticklabel_direction=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \naxis_direction unknown  \naxislabel_direction {\"+\", \"-\"}  \naxisline_style str or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfigure Figure  \ngid str  \nin_layout bool  \nlabel unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nticklabel_direction {\"+\", \"-\"}  \ntransform Transform  \nurl str  \nvisible bool  \nzorder float   \n"}, {"name": "axisartist.axis_artist.AxisArtist.set_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_axis_direction", "type": "axisartist", "text": "  set_axis_direction(axis_direction)[source]\n \nAdjust the direction, text angle, text alignment of ticklabels, labels following the matplotlib convention for the rectangle axes. The axis_direction must be one of [left, right, bottom, top].   \nproperty left bottom right top   \nticklabels location \"-\" \"+\" \"+\" \"-\"  \naxislabel location \"-\" \"+\" \"+\" \"-\"  \nticklabels angle 90 0 -90 180  \nticklabel va center baseline center baseline  \nticklabel ha right center right center  \naxislabel angle 180 0 0 180  \naxislabel va center top center bottom  \naxislabel ha right center right center   Note that the direction \"+\" and \"-\" are relative to the direction of the increasing coordinate. Also, the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis. \n"}, {"name": "axisartist.axis_artist.AxisArtist.set_axislabel_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_axislabel_direction", "type": "axisartist", "text": "  set_axislabel_direction(label_direction)[source]\n \nAdjust the direction of the axislabel. Note that the label_directions '+' and '-' are relative to the direction of the increasing coordinate.  Parameters \n \nlabel_direction{\"+\", \"-\"}\n\n   \n"}, {"name": "axisartist.axis_artist.AxisArtist.set_axisline_style()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_axisline_style", "type": "axisartist", "text": "  set_axisline_style(axisline_style=None, **kwargs)[source]\n \nSet the axisline style. The new style is completely defined by the passed attributes. Existing style attributes are forgotten.  Parameters \n \naxisline_stylestr or None\n\n\nThe line style, e.g. '->', optionally followed by a comma-separated list of attributes. Alternatively, the attributes can be provided as keywords. If None this returns a string containing the available styles.     Examples The following two commands are equal: >>> set_axisline_style(\"->,size=1.5\") >>> set_axisline_style(\"->\", size=1.5) \n"}, {"name": "axisartist.axis_artist.AxisArtist.set_label()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_label", "type": "axisartist", "text": "  set_label(s)[source]\n \nSet a label that will be displayed in the legend.  Parameters \n \nsobject\n\n\ns will be converted to a string by calling str.     \n"}, {"name": "axisartist.axis_artist.AxisArtist.set_ticklabel_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.set_ticklabel_direction", "type": "axisartist", "text": "  set_ticklabel_direction(tick_direction)[source]\n \nAdjust the direction of the ticklabel. Note that the label_directions '+' and '-' are relative to the direction of the increasing coordinate.  Parameters \n \ntick_direction{\"+\", \"-\"}\n\n   \n"}, {"name": "axisartist.axis_artist.AxisArtist.toggle()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.toggle", "type": "axisartist", "text": "  toggle(all=None, ticks=None, ticklabels=None, label=None)[source]\n \nToggle visibility of ticks, ticklabels, and (axis) label. To turn all off, axis.toggle(all=False)\n To turn all off but ticks on axis.toggle(all=False, ticks=True)\n To turn all on but (axis) label off axis.toggle(all=True, label=False))\n \n"}, {"name": "axisartist.axis_artist.AxisArtist.ZORDER", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.ZORDER", "type": "axisartist", "text": "  ZORDER=2.5\n\n"}, {"name": "axisartist.axis_artist.AxisArtist.zorder", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist.zorder", "type": "axisartist", "text": "  zorder=2.5\n\n"}, {"name": "axisartist.axis_artist.AxisLabel", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel", "type": "axisartist", "text": "mpl_toolkits.axisartist.axis_artist.AxisLabel   classmpl_toolkits.axisartist.axis_artist.AxisLabel(*args, axis_direction='bottom', axis=None, **kwargs)[source]\n \nBases: mpl_toolkits.axisartist.axis_artist.AttributeCopier, mpl_toolkits.axisartist.axis_artist.LabelBase Axis Label. Derived from Text. The position of the text is updated in the fly, so changing text position has no effect. Otherwise, the properties can be changed as a normal Text. To change the pad between ticklabels and axis label, use set_pad.   draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n   get_color()[source]\n \nReturn the color of the text. \n   get_pad()[source]\n \nReturn the internal pad in points. See set_pad for more details. \n   get_ref_artist()[source]\n \nReturn the underlying artist that actually defines some properties (e.g., color) of this artist. \n   get_text()[source]\n \nReturn the text string. \n   get_window_extent(renderer)[source]\n \nReturn the Bbox bounding the text, in display units. In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.  Parameters \n \nrendererRenderer, optional\n\n\nA renderer is needed to compute the bounding box. If the artist has already been drawn, the renderer is cached; thus, it is only necessary to pass this argument when calling get_window_extent before the first draw. In practice, it is usually easier to trigger a draw first (e.g. by saving the figure).  \ndpifloat, optional\n\n\nThe dpi value for computing the bbox, defaults to self.figure.dpi (not the renderer dpi); should be set e.g. if to match regions with a figure saved with a custom dpi value.     \n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, axis_direction=<UNSET>, backgroundcolor=<UNSET>, bbox=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, default_alignment=<UNSET>, default_angle=<UNSET>, fontfamily=<UNSET>, fontproperties=<UNSET>, fontsize=<UNSET>, fontstretch=<UNSET>, fontstyle=<UNSET>, fontvariant=<UNSET>, fontweight=<UNSET>, gid=<UNSET>, horizontalalignment=<UNSET>, in_layout=<UNSET>, label=<UNSET>, linespacing=<UNSET>, math_fontfamily=<UNSET>, multialignment=<UNSET>, pad=<UNSET>, parse_math=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, rasterized=<UNSET>, rotation=<UNSET>, rotation_mode=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, text=<UNSET>, transform=<UNSET>, transform_rotates_text=<UNSET>, url=<UNSET>, usetex=<UNSET>, verticalalignment=<UNSET>, visible=<UNSET>, wrap=<UNSET>, x=<UNSET>, y=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \naxis_direction unknown  \nbackgroundcolor color  \nbbox dict with properties for patches.FancyBboxPatch  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndefault_alignment unknown  \ndefault_angle unknown  \nfigure Figure  \nfontfamily or family {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  \nfontproperties or font or font_properties font_manager.FontProperties or str or pathlib.Path  \nfontsize or size float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  \nfontstretch or stretch {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  \nfontstyle or style {'normal', 'italic', 'oblique'}  \nfontvariant or variant {'normal', 'small-caps'}  \nfontweight or weight {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  \ngid str  \nhorizontalalignment or ha {'center', 'right', 'left'}  \nin_layout bool  \nlabel object  \nlinespacing float (multiple of font size)  \nmath_fontfamily str  \nmultialignment or ma {'left', 'right', 'center'}  \npad unknown  \nparse_math bool  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition (float, float)  \nrasterized bool  \nrotation float or {'vertical', 'horizontal'}  \nrotation_mode {None, 'default', 'anchor'}  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntext object  \ntransform Transform  \ntransform_rotates_text bool  \nurl str  \nusetex bool or None  \nverticalalignment or va {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  \nvisible bool  \nwrap bool  \nx float  \ny float  \nzorder float   \n   set_axis_direction(d)[source]\n \nAdjust the text angle and text alignment of axis label according to the matplotlib convention.   \nproperty left bottom right top   \naxislabel angle 180 0 0 180  \naxislabel va center top center bottom  \naxislabel ha right center right center   Note that the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis. \n   set_default_alignment(d)[source]\n\n   set_default_angle(d)[source]\n\n   set_pad(pad)[source]\n \nSet the internal pad in points. The actual pad will be the sum of the internal pad and the external pad (the latter is set automatically by the AxisArtist). \n \n\n"}, {"name": "axisartist.axis_artist.AxisLabel.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.draw", "type": "axisartist", "text": "  draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n"}, {"name": "axisartist.axis_artist.AxisLabel.get_color()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_color", "type": "axisartist", "text": "  get_color()[source]\n \nReturn the color of the text. \n"}, {"name": "axisartist.axis_artist.AxisLabel.get_pad()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_pad", "type": "axisartist", "text": "  get_pad()[source]\n \nReturn the internal pad in points. See set_pad for more details. \n"}, {"name": "axisartist.axis_artist.AxisLabel.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_ref_artist", "type": "axisartist", "text": "  get_ref_artist()[source]\n \nReturn the underlying artist that actually defines some properties (e.g., color) of this artist. \n"}, {"name": "axisartist.axis_artist.AxisLabel.get_text()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_text", "type": "axisartist", "text": "  get_text()[source]\n \nReturn the text string. \n"}, {"name": "axisartist.axis_artist.AxisLabel.get_window_extent()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.get_window_extent", "type": "axisartist", "text": "  get_window_extent(renderer)[source]\n \nReturn the Bbox bounding the text, in display units. In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.  Parameters \n \nrendererRenderer, optional\n\n\nA renderer is needed to compute the bounding box. If the artist has already been drawn, the renderer is cached; thus, it is only necessary to pass this argument when calling get_window_extent before the first draw. In practice, it is usually easier to trigger a draw first (e.g. by saving the figure).  \ndpifloat, optional\n\n\nThe dpi value for computing the bbox, defaults to self.figure.dpi (not the renderer dpi); should be set e.g. if to match regions with a figure saved with a custom dpi value.     \n"}, {"name": "axisartist.axis_artist.AxisLabel.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set", "type": "axisartist", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, axis_direction=<UNSET>, backgroundcolor=<UNSET>, bbox=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, default_alignment=<UNSET>, default_angle=<UNSET>, fontfamily=<UNSET>, fontproperties=<UNSET>, fontsize=<UNSET>, fontstretch=<UNSET>, fontstyle=<UNSET>, fontvariant=<UNSET>, fontweight=<UNSET>, gid=<UNSET>, horizontalalignment=<UNSET>, in_layout=<UNSET>, label=<UNSET>, linespacing=<UNSET>, math_fontfamily=<UNSET>, multialignment=<UNSET>, pad=<UNSET>, parse_math=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, rasterized=<UNSET>, rotation=<UNSET>, rotation_mode=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, text=<UNSET>, transform=<UNSET>, transform_rotates_text=<UNSET>, url=<UNSET>, usetex=<UNSET>, verticalalignment=<UNSET>, visible=<UNSET>, wrap=<UNSET>, x=<UNSET>, y=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \naxis_direction unknown  \nbackgroundcolor color  \nbbox dict with properties for patches.FancyBboxPatch  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndefault_alignment unknown  \ndefault_angle unknown  \nfigure Figure  \nfontfamily or family {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  \nfontproperties or font or font_properties font_manager.FontProperties or str or pathlib.Path  \nfontsize or size float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  \nfontstretch or stretch {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  \nfontstyle or style {'normal', 'italic', 'oblique'}  \nfontvariant or variant {'normal', 'small-caps'}  \nfontweight or weight {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  \ngid str  \nhorizontalalignment or ha {'center', 'right', 'left'}  \nin_layout bool  \nlabel object  \nlinespacing float (multiple of font size)  \nmath_fontfamily str  \nmultialignment or ma {'left', 'right', 'center'}  \npad unknown  \nparse_math bool  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition (float, float)  \nrasterized bool  \nrotation float or {'vertical', 'horizontal'}  \nrotation_mode {None, 'default', 'anchor'}  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntext object  \ntransform Transform  \ntransform_rotates_text bool  \nurl str  \nusetex bool or None  \nverticalalignment or va {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  \nvisible bool  \nwrap bool  \nx float  \ny float  \nzorder float   \n"}, {"name": "axisartist.axis_artist.AxisLabel.set_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_axis_direction", "type": "axisartist", "text": "  set_axis_direction(d)[source]\n \nAdjust the text angle and text alignment of axis label according to the matplotlib convention.   \nproperty left bottom right top   \naxislabel angle 180 0 0 180  \naxislabel va center top center bottom  \naxislabel ha right center right center   Note that the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis. \n"}, {"name": "axisartist.axis_artist.AxisLabel.set_default_alignment()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_default_alignment", "type": "axisartist", "text": "  set_default_alignment(d)[source]\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.set_default_angle()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_default_angle", "type": "axisartist", "text": "  set_default_angle(d)[source]\n\n"}, {"name": "axisartist.axis_artist.AxisLabel.set_pad()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.axislabel#mpl_toolkits.axisartist.axis_artist.AxisLabel.set_pad", "type": "axisartist", "text": "  set_pad(pad)[source]\n \nSet the internal pad in points. The actual pad will be the sum of the internal pad and the external pad (the latter is set automatically by the AxisArtist). \n"}, {"name": "axisartist.axis_artist.GridlinesCollection", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection", "type": "axisartist", "text": "mpl_toolkits.axisartist.axis_artist.GridlinesCollection   classmpl_toolkits.axisartist.axis_artist.GridlinesCollection(*args, which='major', axis='both', **kwargs)[source]\n \nBases: matplotlib.collections.LineCollection  Parameters \n \nwhich{\"major\", \"minor\"}\n\n\naxis{\"both\", \"x\", \"y\"}\n\n     draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, antialiased=<UNSET>, array=<UNSET>, axis=<UNSET>, capstyle=<UNSET>, clim=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, cmap=<UNSET>, color=<UNSET>, colors=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>, gid=<UNSET>, grid_helper=<UNSET>, hatch=<UNSET>, in_layout=<UNSET>, joinstyle=<UNSET>, label=<UNSET>, linestyle=<UNSET>, linewidth=<UNSET>, norm=<UNSET>, offset_transform=<UNSET>, offsets=<UNSET>, path_effects=<UNSET>, paths=<UNSET>, picker=<UNSET>, pickradius=<UNSET>, rasterized=<UNSET>, segments=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, urls=<UNSET>, verts=<UNSET>, visible=<UNSET>, which=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha array-like or scalar or None  \nanimated bool  \nantialiased or aa or antialiaseds bool or list of bools  \narray array-like or None  \naxis unknown  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclim (vmin: float, vmax: float)  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncmap Colormap or str or None  \ncolor color or list of colors  \ncolors color or list of colors  \nedgecolor or ec or edgecolors color or list of colors or 'face'  \nfacecolor or facecolors or fc color or list of colors  \nfigure Figure  \ngid str  \ngrid_helper unknown  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or dashes or linestyles or ls str or tuple or list thereof  \nlinewidth or linewidths or lw float or list of floats  \nnorm Normalize or None  \noffset_transform Transform  \noffsets (N, 2) or (2,) array-like  \npath_effects AbstractPathEffect  \npaths unknown  \npicker None or bool or float or callable  \npickradius float  \nrasterized bool  \nsegments unknown  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nurls list of str or None  \nverts unknown  \nvisible bool  \nwhich unknown  \nzorder float   \n   set_axis(axis)[source]\n\n   set_grid_helper(grid_helper)[source]\n\n   set_which(which)[source]\n\n \n\n"}, {"name": "axisartist.axis_artist.GridlinesCollection.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.draw", "type": "axisartist", "text": "  draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n"}, {"name": "axisartist.axis_artist.GridlinesCollection.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set", "type": "axisartist", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, antialiased=<UNSET>, array=<UNSET>, axis=<UNSET>, capstyle=<UNSET>, clim=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, cmap=<UNSET>, color=<UNSET>, colors=<UNSET>, edgecolor=<UNSET>, facecolor=<UNSET>, gid=<UNSET>, grid_helper=<UNSET>, hatch=<UNSET>, in_layout=<UNSET>, joinstyle=<UNSET>, label=<UNSET>, linestyle=<UNSET>, linewidth=<UNSET>, norm=<UNSET>, offset_transform=<UNSET>, offsets=<UNSET>, path_effects=<UNSET>, paths=<UNSET>, picker=<UNSET>, pickradius=<UNSET>, rasterized=<UNSET>, segments=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, urls=<UNSET>, verts=<UNSET>, visible=<UNSET>, which=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha array-like or scalar or None  \nanimated bool  \nantialiased or aa or antialiaseds bool or list of bools  \narray array-like or None  \naxis unknown  \ncapstyle CapStyle or {'butt', 'projecting', 'round'}  \nclim (vmin: float, vmax: float)  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncmap Colormap or str or None  \ncolor color or list of colors  \ncolors color or list of colors  \nedgecolor or ec or edgecolors color or list of colors or 'face'  \nfacecolor or facecolors or fc color or list of colors  \nfigure Figure  \ngid str  \ngrid_helper unknown  \nhatch {'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}  \nin_layout bool  \njoinstyle JoinStyle or {'miter', 'round', 'bevel'}  \nlabel object  \nlinestyle or dashes or linestyles or ls str or tuple or list thereof  \nlinewidth or linewidths or lw float or list of floats  \nnorm Normalize or None  \noffset_transform Transform  \noffsets (N, 2) or (2,) array-like  \npath_effects AbstractPathEffect  \npaths unknown  \npicker None or bool or float or callable  \npickradius float  \nrasterized bool  \nsegments unknown  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntransform Transform  \nurl str  \nurls list of str or None  \nverts unknown  \nvisible bool  \nwhich unknown  \nzorder float   \n"}, {"name": "axisartist.axis_artist.GridlinesCollection.set_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set_axis", "type": "axisartist", "text": "  set_axis(axis)[source]\n\n"}, {"name": "axisartist.axis_artist.GridlinesCollection.set_grid_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set_grid_helper", "type": "axisartist", "text": "  set_grid_helper(grid_helper)[source]\n\n"}, {"name": "axisartist.axis_artist.GridlinesCollection.set_which()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection.set_which", "type": "axisartist", "text": "  set_which(which)[source]\n\n"}, {"name": "axisartist.axis_artist.LabelBase", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase", "type": "axisartist", "text": "mpl_toolkits.axisartist.axis_artist.LabelBase   classmpl_toolkits.axisartist.axis_artist.LabelBase(*args, **kwargs)[source]\n \nBases: matplotlib.text.Text A base class for AxisLabel and TickLabels. The position and angle of the text are calculated by to offset_ref_angle, text_ref_angle, and offset_radius attributes. Create a Text instance at x, y with string text. Valid keyword arguments are:   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbackgroundcolor color  \nbbox dict with properties for patches.FancyBboxPatch  \nclip_box unknown  \nclip_on unknown  \nclip_path unknown  \ncolor or c color  \nfigure Figure  \nfontfamily or family {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  \nfontproperties or font or font_properties font_manager.FontProperties or str or pathlib.Path  \nfontsize or size float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  \nfontstretch or stretch {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  \nfontstyle or style {'normal', 'italic', 'oblique'}  \nfontvariant or variant {'normal', 'small-caps'}  \nfontweight or weight {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  \ngid str  \nhorizontalalignment or ha {'center', 'right', 'left'}  \nin_layout bool  \nlabel object  \nlinespacing float (multiple of font size)  \nmath_fontfamily str  \nmultialignment or ma {'left', 'right', 'center'}  \nparse_math bool  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition (float, float)  \nrasterized bool  \nrotation float or {'vertical', 'horizontal'}  \nrotation_mode {None, 'default', 'anchor'}  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntext object  \ntransform Transform  \ntransform_rotates_text bool  \nurl str  \nusetex bool or None  \nverticalalignment or va {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  \nvisible bool  \nwrap bool  \nx float  \ny float  \nzorder float     draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n   get_window_extent(renderer)[source]\n \nReturn the Bbox bounding the text, in display units. In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.  Parameters \n \nrendererRenderer, optional\n\n\nA renderer is needed to compute the bounding box. If the artist has already been drawn, the renderer is cached; thus, it is only necessary to pass this argument when calling get_window_extent before the first draw. In practice, it is usually easier to trigger a draw first (e.g. by saving the figure).  \ndpifloat, optional\n\n\nThe dpi value for computing the bbox, defaults to self.figure.dpi (not the renderer dpi); should be set e.g. if to match regions with a figure saved with a custom dpi value.     \n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, backgroundcolor=<UNSET>, bbox=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, fontfamily=<UNSET>, fontproperties=<UNSET>, fontsize=<UNSET>, fontstretch=<UNSET>, fontstyle=<UNSET>, fontvariant=<UNSET>, fontweight=<UNSET>, gid=<UNSET>, horizontalalignment=<UNSET>, in_layout=<UNSET>, label=<UNSET>, linespacing=<UNSET>, math_fontfamily=<UNSET>, multialignment=<UNSET>, parse_math=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, rasterized=<UNSET>, rotation=<UNSET>, rotation_mode=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, text=<UNSET>, transform=<UNSET>, transform_rotates_text=<UNSET>, url=<UNSET>, usetex=<UNSET>, verticalalignment=<UNSET>, visible=<UNSET>, wrap=<UNSET>, x=<UNSET>, y=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbackgroundcolor color  \nbbox dict with properties for patches.FancyBboxPatch  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \nfigure Figure  \nfontfamily or family {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  \nfontproperties or font or font_properties font_manager.FontProperties or str or pathlib.Path  \nfontsize or size float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  \nfontstretch or stretch {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  \nfontstyle or style {'normal', 'italic', 'oblique'}  \nfontvariant or variant {'normal', 'small-caps'}  \nfontweight or weight {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  \ngid str  \nhorizontalalignment or ha {'center', 'right', 'left'}  \nin_layout bool  \nlabel object  \nlinespacing float (multiple of font size)  \nmath_fontfamily str  \nmultialignment or ma {'left', 'right', 'center'}  \nparse_math bool  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition (float, float)  \nrasterized bool  \nrotation float or {'vertical', 'horizontal'}  \nrotation_mode {None, 'default', 'anchor'}  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntext object  \ntransform Transform  \ntransform_rotates_text bool  \nurl str  \nusetex bool or None  \nverticalalignment or va {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  \nvisible bool  \nwrap bool  \nx float  \ny float  \nzorder float   \n \n\n"}, {"name": "axisartist.axis_artist.LabelBase.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase#mpl_toolkits.axisartist.axis_artist.LabelBase.draw", "type": "axisartist", "text": "  draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n"}, {"name": "axisartist.axis_artist.LabelBase.get_window_extent()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase#mpl_toolkits.axisartist.axis_artist.LabelBase.get_window_extent", "type": "axisartist", "text": "  get_window_extent(renderer)[source]\n \nReturn the Bbox bounding the text, in display units. In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.  Parameters \n \nrendererRenderer, optional\n\n\nA renderer is needed to compute the bounding box. If the artist has already been drawn, the renderer is cached; thus, it is only necessary to pass this argument when calling get_window_extent before the first draw. In practice, it is usually easier to trigger a draw first (e.g. by saving the figure).  \ndpifloat, optional\n\n\nThe dpi value for computing the bbox, defaults to self.figure.dpi (not the renderer dpi); should be set e.g. if to match regions with a figure saved with a custom dpi value.     \n"}, {"name": "axisartist.axis_artist.LabelBase.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.labelbase#mpl_toolkits.axisartist.axis_artist.LabelBase.set", "type": "axisartist", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, backgroundcolor=<UNSET>, bbox=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, fontfamily=<UNSET>, fontproperties=<UNSET>, fontsize=<UNSET>, fontstretch=<UNSET>, fontstyle=<UNSET>, fontvariant=<UNSET>, fontweight=<UNSET>, gid=<UNSET>, horizontalalignment=<UNSET>, in_layout=<UNSET>, label=<UNSET>, linespacing=<UNSET>, math_fontfamily=<UNSET>, multialignment=<UNSET>, parse_math=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, rasterized=<UNSET>, rotation=<UNSET>, rotation_mode=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, text=<UNSET>, transform=<UNSET>, transform_rotates_text=<UNSET>, url=<UNSET>, usetex=<UNSET>, verticalalignment=<UNSET>, visible=<UNSET>, wrap=<UNSET>, x=<UNSET>, y=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nbackgroundcolor color  \nbbox dict with properties for patches.FancyBboxPatch  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \nfigure Figure  \nfontfamily or family {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  \nfontproperties or font or font_properties font_manager.FontProperties or str or pathlib.Path  \nfontsize or size float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  \nfontstretch or stretch {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  \nfontstyle or style {'normal', 'italic', 'oblique'}  \nfontvariant or variant {'normal', 'small-caps'}  \nfontweight or weight {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  \ngid str  \nhorizontalalignment or ha {'center', 'right', 'left'}  \nin_layout bool  \nlabel object  \nlinespacing float (multiple of font size)  \nmath_fontfamily str  \nmultialignment or ma {'left', 'right', 'center'}  \nparse_math bool  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition (float, float)  \nrasterized bool  \nrotation float or {'vertical', 'horizontal'}  \nrotation_mode {None, 'default', 'anchor'}  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntext object  \ntransform Transform  \ntransform_rotates_text bool  \nurl str  \nusetex bool or None  \nverticalalignment or va {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  \nvisible bool  \nwrap bool  \nx float  \ny float  \nzorder float   \n"}, {"name": "axisartist.axis_artist.TickLabels", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels", "type": "axisartist", "text": "mpl_toolkits.axisartist.axis_artist.TickLabels   classmpl_toolkits.axisartist.axis_artist.TickLabels(*, axis_direction='bottom', **kwargs)[source]\n \nBases: mpl_toolkits.axisartist.axis_artist.AxisLabel Tick Labels. While derived from Text, this single artist draws all ticklabels. As in AxisLabel, the position of the text is updated in the fly, so changing text position has no effect. Otherwise, the properties can be changed as a normal Text. Unlike the ticklabels of the mainline matplotlib, properties of single ticklabel alone cannot modified. To change the pad between ticks and ticklabels, use set_pad.   draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n   get_ref_artist()[source]\n \nReturn the underlying artist that actually defines some properties (e.g., color) of this artist. \n   get_texts_widths_heights_descents(renderer)[source]\n \nReturn a list of (width, height, descent) tuples for ticklabels. Empty labels are left out. \n   get_window_extents(renderer)[source]\n\n   invert_axis_direction()[source]\n\n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, axis_direction=<UNSET>, backgroundcolor=<UNSET>, bbox=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, default_alignment=<UNSET>, default_angle=<UNSET>, fontfamily=<UNSET>, fontproperties=<UNSET>, fontsize=<UNSET>, fontstretch=<UNSET>, fontstyle=<UNSET>, fontvariant=<UNSET>, fontweight=<UNSET>, gid=<UNSET>, horizontalalignment=<UNSET>, in_layout=<UNSET>, label=<UNSET>, linespacing=<UNSET>, locs_angles_labels=<UNSET>, math_fontfamily=<UNSET>, multialignment=<UNSET>, pad=<UNSET>, parse_math=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, rasterized=<UNSET>, rotation=<UNSET>, rotation_mode=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, text=<UNSET>, transform=<UNSET>, transform_rotates_text=<UNSET>, url=<UNSET>, usetex=<UNSET>, verticalalignment=<UNSET>, visible=<UNSET>, wrap=<UNSET>, x=<UNSET>, y=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \naxis_direction unknown  \nbackgroundcolor color  \nbbox dict with properties for patches.FancyBboxPatch  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndefault_alignment unknown  \ndefault_angle unknown  \nfigure Figure  \nfontfamily or family {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  \nfontproperties or font or font_properties font_manager.FontProperties or str or pathlib.Path  \nfontsize or size float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  \nfontstretch or stretch {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  \nfontstyle or style {'normal', 'italic', 'oblique'}  \nfontvariant or variant {'normal', 'small-caps'}  \nfontweight or weight {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  \ngid str  \nhorizontalalignment or ha {'center', 'right', 'left'}  \nin_layout bool  \nlabel object  \nlinespacing float (multiple of font size)  \nlocs_angles_labels unknown  \nmath_fontfamily str  \nmultialignment or ma {'left', 'right', 'center'}  \npad unknown  \nparse_math bool  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition (float, float)  \nrasterized bool  \nrotation float or {'vertical', 'horizontal'}  \nrotation_mode {None, 'default', 'anchor'}  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntext object  \ntransform Transform  \ntransform_rotates_text bool  \nurl str  \nusetex bool or None  \nverticalalignment or va {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  \nvisible bool  \nwrap bool  \nx float  \ny float  \nzorder float   \n   set_axis_direction(label_direction)[source]\n \nAdjust the text angle and text alignment of ticklabels according to the matplotlib convention. The label_direction must be one of [left, right, bottom, top].   \nproperty left bottom right top   \nticklabels angle 90 0 -90 180  \nticklabel va center baseline center baseline  \nticklabel ha right center right center   Note that the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis. \n   set_locs_angles_labels(locs_angles_labels)[source]\n\n \n\n"}, {"name": "axisartist.axis_artist.TickLabels.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.draw", "type": "axisartist", "text": "  draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n"}, {"name": "axisartist.axis_artist.TickLabels.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.get_ref_artist", "type": "axisartist", "text": "  get_ref_artist()[source]\n \nReturn the underlying artist that actually defines some properties (e.g., color) of this artist. \n"}, {"name": "axisartist.axis_artist.TickLabels.get_texts_widths_heights_descents()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.get_texts_widths_heights_descents", "type": "axisartist", "text": "  get_texts_widths_heights_descents(renderer)[source]\n \nReturn a list of (width, height, descent) tuples for ticklabels. Empty labels are left out. \n"}, {"name": "axisartist.axis_artist.TickLabels.get_window_extents()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.get_window_extents", "type": "axisartist", "text": "  get_window_extents(renderer)[source]\n\n"}, {"name": "axisartist.axis_artist.TickLabels.invert_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.invert_axis_direction", "type": "axisartist", "text": "  invert_axis_direction()[source]\n\n"}, {"name": "axisartist.axis_artist.TickLabels.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.set", "type": "axisartist", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, axis_direction=<UNSET>, backgroundcolor=<UNSET>, bbox=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, default_alignment=<UNSET>, default_angle=<UNSET>, fontfamily=<UNSET>, fontproperties=<UNSET>, fontsize=<UNSET>, fontstretch=<UNSET>, fontstyle=<UNSET>, fontvariant=<UNSET>, fontweight=<UNSET>, gid=<UNSET>, horizontalalignment=<UNSET>, in_layout=<UNSET>, label=<UNSET>, linespacing=<UNSET>, locs_angles_labels=<UNSET>, math_fontfamily=<UNSET>, multialignment=<UNSET>, pad=<UNSET>, parse_math=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, rasterized=<UNSET>, rotation=<UNSET>, rotation_mode=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, text=<UNSET>, transform=<UNSET>, transform_rotates_text=<UNSET>, url=<UNSET>, usetex=<UNSET>, verticalalignment=<UNSET>, visible=<UNSET>, wrap=<UNSET>, x=<UNSET>, y=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \naxis_direction unknown  \nbackgroundcolor color  \nbbox dict with properties for patches.FancyBboxPatch  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c color  \ndefault_alignment unknown  \ndefault_angle unknown  \nfigure Figure  \nfontfamily or family {FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}  \nfontproperties or font or font_properties font_manager.FontProperties or str or pathlib.Path  \nfontsize or size float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}  \nfontstretch or stretch {a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}  \nfontstyle or style {'normal', 'italic', 'oblique'}  \nfontvariant or variant {'normal', 'small-caps'}  \nfontweight or weight {a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}  \ngid str  \nhorizontalalignment or ha {'center', 'right', 'left'}  \nin_layout bool  \nlabel object  \nlinespacing float (multiple of font size)  \nlocs_angles_labels unknown  \nmath_fontfamily str  \nmultialignment or ma {'left', 'right', 'center'}  \npad unknown  \nparse_math bool  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition (float, float)  \nrasterized bool  \nrotation float or {'vertical', 'horizontal'}  \nrotation_mode {None, 'default', 'anchor'}  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntext object  \ntransform Transform  \ntransform_rotates_text bool  \nurl str  \nusetex bool or None  \nverticalalignment or va {'center', 'top', 'bottom', 'baseline', 'center_baseline'}  \nvisible bool  \nwrap bool  \nx float  \ny float  \nzorder float   \n"}, {"name": "axisartist.axis_artist.TickLabels.set_axis_direction()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.set_axis_direction", "type": "axisartist", "text": "  set_axis_direction(label_direction)[source]\n \nAdjust the text angle and text alignment of ticklabels according to the matplotlib convention. The label_direction must be one of [left, right, bottom, top].   \nproperty left bottom right top   \nticklabels angle 90 0 -90 180  \nticklabel va center baseline center baseline  \nticklabel ha right center right center   Note that the text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis. \n"}, {"name": "axisartist.axis_artist.TickLabels.set_locs_angles_labels()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticklabels#mpl_toolkits.axisartist.axis_artist.TickLabels.set_locs_angles_labels", "type": "axisartist", "text": "  set_locs_angles_labels(locs_angles_labels)[source]\n\n"}, {"name": "axisartist.axis_artist.Ticks", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks", "type": "axisartist", "text": "mpl_toolkits.axisartist.axis_artist.Ticks   classmpl_toolkits.axisartist.axis_artist.Ticks(ticksize, tick_out=False, *, axis=None, **kwargs)[source]\n \nBases: mpl_toolkits.axisartist.axis_artist.AttributeCopier, matplotlib.lines.Line2D Ticks are derived from Line2D, and note that ticks themselves are markers. Thus, you should use set_mec, set_mew, etc. To change the tick size (length), you need to use set_ticksize. To change the direction of the ticks (ticks are in opposite direction of ticklabels by default), use set_tick_out(False).   draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n   get_color()[source]\n \nReturn the line color. See also set_color. \n   get_markeredgecolor()[source]\n \nReturn the marker edge color. See also set_markeredgecolor. \n   get_markeredgewidth()[source]\n \nReturn the marker edge width in points. See also set_markeredgewidth. \n   get_ref_artist()[source]\n \nReturn the underlying artist that actually defines some properties (e.g., color) of this artist. \n   get_tick_out()[source]\n \nReturn whether ticks are drawn inside or outside the axes. \n   get_ticksize()[source]\n \nReturn length of the ticks in points. \n   set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, antialiased=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, dash_capstyle=<UNSET>, dash_joinstyle=<UNSET>, dashes=<UNSET>, data=<UNSET>, drawstyle=<UNSET>, fillstyle=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, linestyle=<UNSET>, linewidth=<UNSET>, locs_angles=<UNSET>, marker=<UNSET>, markeredgecolor=<UNSET>, markeredgewidth=<UNSET>, markerfacecolor=<UNSET>, markerfacecoloralt=<UNSET>, markersize=<UNSET>, markevery=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, pickradius=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, solid_capstyle=<UNSET>, solid_joinstyle=<UNSET>, tick_out=<UNSET>, ticksize=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xdata=<UNSET>, ydata=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c unknown  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nlocs_angles unknown  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntick_out unknown  \nticksize unknown  \ntransform Transform  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float   \n   set_color(color)[source]\n \nSet the color of the line.  Parameters \n \ncolorcolor\n\n   \n   set_locs_angles(locs_angles)[source]\n\n   set_tick_out(b)[source]\n \nSet whether ticks are drawn inside or outside the axes. \n   set_ticksize(ticksize)[source]\n \nSet length of the ticks in points. \n \n\n"}, {"name": "axisartist.axis_artist.Ticks.draw()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.draw", "type": "axisartist", "text": "  draw(renderer)[source]\n \nDraw the Artist (and its children) using the given renderer. This has no effect if the artist is not visible (Artist.get_visible returns False).  Parameters \n \nrendererRendererBase subclass.\n\n   Notes This method is overridden in the Artist subclasses. \n"}, {"name": "axisartist.axis_artist.Ticks.get_color()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_color", "type": "axisartist", "text": "  get_color()[source]\n \nReturn the line color. See also set_color. \n"}, {"name": "axisartist.axis_artist.Ticks.get_markeredgecolor()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_markeredgecolor", "type": "axisartist", "text": "  get_markeredgecolor()[source]\n \nReturn the marker edge color. See also set_markeredgecolor. \n"}, {"name": "axisartist.axis_artist.Ticks.get_markeredgewidth()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_markeredgewidth", "type": "axisartist", "text": "  get_markeredgewidth()[source]\n \nReturn the marker edge width in points. See also set_markeredgewidth. \n"}, {"name": "axisartist.axis_artist.Ticks.get_ref_artist()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_ref_artist", "type": "axisartist", "text": "  get_ref_artist()[source]\n \nReturn the underlying artist that actually defines some properties (e.g., color) of this artist. \n"}, {"name": "axisartist.axis_artist.Ticks.get_tick_out()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_tick_out", "type": "axisartist", "text": "  get_tick_out()[source]\n \nReturn whether ticks are drawn inside or outside the axes. \n"}, {"name": "axisartist.axis_artist.Ticks.get_ticksize()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.get_ticksize", "type": "axisartist", "text": "  get_ticksize()[source]\n \nReturn length of the ticks in points. \n"}, {"name": "axisartist.axis_artist.Ticks.set()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set", "type": "axisartist", "text": "  set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, antialiased=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, color=<UNSET>, dash_capstyle=<UNSET>, dash_joinstyle=<UNSET>, dashes=<UNSET>, data=<UNSET>, drawstyle=<UNSET>, fillstyle=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, linestyle=<UNSET>, linewidth=<UNSET>, locs_angles=<UNSET>, marker=<UNSET>, markeredgecolor=<UNSET>, markeredgewidth=<UNSET>, markerfacecolor=<UNSET>, markerfacecoloralt=<UNSET>, markersize=<UNSET>, markevery=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, pickradius=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, solid_capstyle=<UNSET>, solid_joinstyle=<UNSET>, tick_out=<UNSET>, ticksize=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xdata=<UNSET>, ydata=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanimated bool  \nantialiased or aa bool  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \ncolor or c unknown  \ndash_capstyle CapStyle or {'butt', 'projecting', 'round'}  \ndash_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ndashes sequence of floats (on/off ink in points) or (None, None)  \ndata (2, N) array or two 1D arrays  \ndrawstyle or ds {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'  \nfigure Figure  \nfillstyle {'full', 'left', 'right', 'bottom', 'top', 'none'}  \ngid str  \nin_layout bool  \nlabel object  \nlinestyle or ls {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}  \nlinewidth or lw float  \nlocs_angles unknown  \nmarker marker style string, Path or MarkerStyle  \nmarkeredgecolor or mec color  \nmarkeredgewidth or mew float  \nmarkerfacecolor or mfc color  \nmarkerfacecoloralt or mfcalt color  \nmarkersize or ms float  \nmarkevery None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]  \npath_effects AbstractPathEffect  \npicker float or callable[[Artist, Event], tuple[bool, dict]]  \npickradius float  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \nsolid_capstyle CapStyle or {'butt', 'projecting', 'round'}  \nsolid_joinstyle JoinStyle or {'miter', 'round', 'bevel'}  \ntick_out unknown  \nticksize unknown  \ntransform Transform  \nurl str  \nvisible bool  \nxdata 1D array  \nydata 1D array  \nzorder float   \n"}, {"name": "axisartist.axis_artist.Ticks.set_color()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_color", "type": "axisartist", "text": "  set_color(color)[source]\n \nSet the color of the line.  Parameters \n \ncolorcolor\n\n   \n"}, {"name": "axisartist.axis_artist.Ticks.set_locs_angles()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_locs_angles", "type": "axisartist", "text": "  set_locs_angles(locs_angles)[source]\n\n"}, {"name": "axisartist.axis_artist.Ticks.set_tick_out()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_tick_out", "type": "axisartist", "text": "  set_tick_out(b)[source]\n \nSet whether ticks are drawn inside or outside the axes. \n"}, {"name": "axisartist.axis_artist.Ticks.set_ticksize()", "path": "_as_gen/mpl_toolkits.axisartist.axis_artist.ticks#mpl_toolkits.axisartist.axis_artist.Ticks.set_ticksize", "type": "axisartist", "text": "  set_ticksize(ticksize)[source]\n \nSet length of the ticks in points. \n"}, {"name": "axisartist.axisline_style", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style", "type": "axisartist", "text": "mpl_toolkits.axisartist.axisline_style  Classes  \nAxislineStyle(stylename, **kw) A container class which defines style classes for AxisArtists.   \n"}, {"name": "axisartist.axisline_style.AxislineStyle", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle", "type": "axisartist", "text": "mpl_toolkits.axisartist.axisline_style.AxislineStyle   classmpl_toolkits.axisartist.axisline_style.AxislineStyle(stylename, **kw)[source]\n \nBases: matplotlib.patches._Style A container class which defines style classes for AxisArtists. An instance of any axisline style class is an callable object, whose call signature is __call__(self, axis_artist, path, transform)\n When called, this should return an Artist with the following methods: def set_path(self, path):\n    # set the path for axisline.\n\ndef set_line_mutation_scale(self, scale):\n    # set the scale\n\ndef draw(self, renderer):\n    # draw\n Return the instance of the subclass with the given style name.   classFilledArrow(size=1)[source]\n \nBases: mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow  Parameters \n \nsizefloat\n\n\nSize of the arrow as a fraction of the ticklabel size.       ArrowAxisClass[source]\n \nalias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.FilledArrow \n \n   classSimpleArrow(size=1)[source]\n \nBases: mpl_toolkits.axisartist.axisline_style.AxislineStyle._Base A simple arrow.  Parameters \n \nsizefloat\n\n\nSize of the arrow as a fraction of the ticklabel size.       ArrowAxisClass[source]\n \nalias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.SimpleArrow \n   new_line(axis_artist, transform)[source]\n\n \n \n\n"}, {"name": "axisartist.axisline_style.AxislineStyle.FilledArrow", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.FilledArrow", "type": "axisartist", "text": "  classFilledArrow(size=1)[source]\n \nBases: mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow  Parameters \n \nsizefloat\n\n\nSize of the arrow as a fraction of the ticklabel size.       ArrowAxisClass[source]\n \nalias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.FilledArrow \n \n"}, {"name": "axisartist.axisline_style.AxislineStyle.FilledArrow.ArrowAxisClass", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.FilledArrow.ArrowAxisClass", "type": "axisartist", "text": "  ArrowAxisClass[source]\n \nalias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.FilledArrow \n"}, {"name": "axisartist.axisline_style.AxislineStyle.SimpleArrow", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow", "type": "axisartist", "text": "  classSimpleArrow(size=1)[source]\n \nBases: mpl_toolkits.axisartist.axisline_style.AxislineStyle._Base A simple arrow.  Parameters \n \nsizefloat\n\n\nSize of the arrow as a fraction of the ticklabel size.       ArrowAxisClass[source]\n \nalias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.SimpleArrow \n   new_line(axis_artist, transform)[source]\n\n \n"}, {"name": "axisartist.axisline_style.AxislineStyle.SimpleArrow.ArrowAxisClass", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow.ArrowAxisClass", "type": "axisartist", "text": "  ArrowAxisClass[source]\n \nalias of mpl_toolkits.axisartist.axisline_style._FancyAxislineStyle.SimpleArrow \n"}, {"name": "axisartist.axisline_style.AxislineStyle.SimpleArrow.new_line()", "path": "_as_gen/mpl_toolkits.axisartist.axisline_style.axislinestyle#mpl_toolkits.axisartist.axisline_style.AxislineStyle.SimpleArrow.new_line", "type": "axisartist", "text": "  new_line(axis_artist, transform)[source]\n\n"}, {"name": "axisartist.axislines", "path": "_as_gen/mpl_toolkits.axisartist.axislines", "type": "axisartist", "text": "mpl_toolkits.axisartist.axislines Axislines includes modified implementation of the Axes class. The biggest difference is that the artists responsible for drawing the axis spine, ticks, ticklabels and axis labels are separated out from Matplotlib's Axis class. Originally, this change was motivated to support curvilinear grid. Here are a few reasons that I came up with a new axes class:  \"top\" and \"bottom\" x-axis (or \"left\" and \"right\" y-axis) can have different ticks (tick locations and labels). This is not possible with the current Matplotlib, although some twin axes trick can help. Curvilinear grid. angled ticks.  In the new axes class, xaxis and yaxis is set to not visible by default, and new set of artist (AxisArtist) are defined to draw axis line, ticks, ticklabels and axis label. Axes.axis attribute serves as a dictionary of these artists, i.e., ax.axis[\"left\"] is a AxisArtist instance responsible to draw left y-axis. The default Axes.axis contains \"bottom\", \"left\", \"top\" and \"right\". AxisArtist can be considered as a container artist and has following children artists which will draw ticks, labels, etc.  line major_ticks, major_ticklabels minor_ticks, minor_ticklabels offsetText label  Note that these are separate artists from matplotlib.axis.Axis, thus most tick-related functions in Matplotlib won't work. For example, color and markerwidth of the ax.axis[\"bottom\"].major_ticks will follow those of Axes.xaxis unless explicitly specified. In addition to AxisArtist, the Axes will have gridlines attribute, which obviously draws grid lines. The gridlines needs to be separated from the axis as some gridlines can never pass any axis.  Classes  \nAxes(*args[, grid_helper]) Build an Axes in a figure.  \nAxesZero(*args[, grid_helper]) Build an Axes in a figure.  \nAxisArtistHelper() AxisArtistHelper should define following method with given APIs. Note that the first axes argument will be axes attribute of the caller artist.::.  \nAxisArtistHelperRectlinear()   \nGridHelperBase()   \nGridHelperRectlinear(axes)    \n"}, {"name": "axisartist.axislines.Axes", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes", "type": "axisartist", "text": "mpl_toolkits.axisartist.axislines.Axes   classmpl_toolkits.axisartist.axislines.Axes(*args, grid_helper=None, **kwargs)[source]\n \nBases: matplotlib.axes._axes.Axes Build an Axes in a figure.  Parameters \n \nfigFigure\n\n\nThe Axes is built in the Figure fig.  \nrect[left, bottom, width, height]\n\n\nThe Axes is built in the rectangle rect. rect is in Figure coordinates.  \nsharex, shareyAxes, optional\n\n\nThe x or y axis is shared with the x or y axis in the input Axes.  \nframeonbool, default: True\n\n\nWhether the Axes frame is visible.  \nbox_aspectfloat, optional\n\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.  **kwargs\n\nOther optional keyword arguments:   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float      Returns \n Axes\n\nThe new Axes object.       __call__(*args, **kwargs)[source]\n \nCall self as a function. \n   propertyaxis\n \nConvenience method to get or set some axis properties. Call signatures: xmin, xmax, ymin, ymax = axis()\nxmin, xmax, ymin, ymax = axis([xmin, xmax, ymin, ymax])\nxmin, xmax, ymin, ymax = axis(option)\nxmin, xmax, ymin, ymax = axis(**kwargs)\n  Parameters \n \nxmin, xmax, ymin, ymaxfloat, optional\n\n\nThe axis limits to be set. This can also be achieved using ax.set(xlim=(xmin, xmax), ylim=(ymin, ymax))\n  \noptionbool or str\n\n\nIf a bool, turns axis lines and labels on or off. If a string, possible values are:   \nValue Description   \n'on' Turn on axis lines and labels. Same as True.  \n'off' Turn off axis lines and labels. Same as False.  \n'equal' Set equal scaling (i.e., make circles circular) by changing axis limits. This is the same as ax.set_aspect('equal', adjustable='datalim'). Explicit data limits may not be respected in this case.  \n'scaled' Set equal scaling (i.e., make circles circular) by changing dimensions of the plot box. This is the same as ax.set_aspect('equal', adjustable='box', anchor='C'). Additionally, further autoscaling will be disabled.  \n'tight' Set limits just large enough to show all data, then disable further autoscaling.  \n'auto' Automatic scaling (fill plot box with data).  \n'image' 'scaled' with axis limits equal to data limits.  \n'square' Square plot; similar to 'scaled', but initially forcing xmax-xmin == ymax-ymin.    \nemitbool, default: True\n\n\nWhether observers are notified of the axis limit change. This option is passed on to set_xlim and set_ylim.    Returns \n \nxmin, xmax, ymin, ymaxfloat\n\n\nThe axis limits.      See also  matplotlib.axes.Axes.set_xlim\nmatplotlib.axes.Axes.set_ylim\n  \n   cla()[source]\n \nClear the Axes. \n   get_children()[source]\n \nReturn a list of the child Artists of this Artist. \n   get_grid_helper()[source]\n\n   grid(visible=None, which='major', axis='both', **kwargs)[source]\n \nToggle the gridlines, and optionally set the properties of the lines. \n   invalidate_grid_helper()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n   new_fixed_axis(loc, offset=None)[source]\n\n   new_floating_axis(nth_coord, value, axis_direction='bottom')[source]\n\n   new_gridlines(grid_helper=None)[source]\n \nCreate and return a new GridlineCollection instance. which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n   set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n   toggle_axisline(b=None)[source]\n\n \n\n"}, {"name": "axisartist.axislines.Axes.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.__call__", "type": "axisartist", "text": "  __call__(*args, **kwargs)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.axislines.Axes.cla()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.cla", "type": "axisartist", "text": "  cla()[source]\n \nClear the Axes. \n"}, {"name": "axisartist.axislines.Axes.get_children()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.get_children", "type": "axisartist", "text": "  get_children()[source]\n \nReturn a list of the child Artists of this Artist. \n"}, {"name": "axisartist.axislines.Axes.get_grid_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.get_grid_helper", "type": "axisartist", "text": "  get_grid_helper()[source]\n\n"}, {"name": "axisartist.axislines.Axes.grid()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.grid", "type": "axisartist", "text": "  grid(visible=None, which='major', axis='both', **kwargs)[source]\n \nToggle the gridlines, and optionally set the properties of the lines. \n"}, {"name": "axisartist.axislines.Axes.invalidate_grid_helper()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.invalidate_grid_helper", "type": "axisartist", "text": "  invalidate_grid_helper()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "axisartist.axislines.Axes.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.new_fixed_axis", "type": "axisartist", "text": "  new_fixed_axis(loc, offset=None)[source]\n\n"}, {"name": "axisartist.axislines.Axes.new_floating_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.new_floating_axis", "type": "axisartist", "text": "  new_floating_axis(nth_coord, value, axis_direction='bottom')[source]\n\n"}, {"name": "axisartist.axislines.Axes.new_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.new_gridlines", "type": "axisartist", "text": "  new_gridlines(grid_helper=None)[source]\n \nCreate and return a new GridlineCollection instance. which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n"}, {"name": "axisartist.axislines.Axes.set()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.set", "type": "axisartist", "text": "  set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n"}, {"name": "axisartist.axislines.Axes.toggle_axisline()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.toggle_axisline", "type": "axisartist", "text": "  toggle_axisline(b=None)[source]\n\n"}, {"name": "axisartist.axislines.AxesZero", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axeszero", "type": "axisartist", "text": "mpl_toolkits.axisartist.axislines.AxesZero   classmpl_toolkits.axisartist.axislines.AxesZero(*args, grid_helper=None, **kwargs)[source]\n \nBases: mpl_toolkits.axisartist.axislines.Axes Build an Axes in a figure.  Parameters \n \nfigFigure\n\n\nThe Axes is built in the Figure fig.  \nrect[left, bottom, width, height]\n\n\nThe Axes is built in the rectangle rect. rect is in Figure coordinates.  \nsharex, shareyAxes, optional\n\n\nThe x or y axis is shared with the x or y axis in the input Axes.  \nframeonbool, default: True\n\n\nWhether the Axes frame is visible.  \nbox_aspectfloat, optional\n\n\nSet a fixed aspect for the Axes box, i.e. the ratio of height to width. See set_box_aspect for details.  **kwargs\n\nOther optional keyword arguments:   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float      Returns \n Axes\n\nThe new Axes object.       set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n \n\n"}, {"name": "axisartist.axislines.AxesZero.set()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axeszero#mpl_toolkits.axisartist.axislines.AxesZero.set", "type": "axisartist", "text": "  set(*, adjustable=<UNSET>, agg_filter=<UNSET>, alpha=<UNSET>, anchor=<UNSET>, animated=<UNSET>, aspect=<UNSET>, autoscale_on=<UNSET>, autoscalex_on=<UNSET>, autoscaley_on=<UNSET>, axes_locator=<UNSET>, axisbelow=<UNSET>, box_aspect=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, facecolor=<UNSET>, frame_on=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, navigate=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, position=<UNSET>, prop_cycle=<UNSET>, rasterization_zorder=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, title=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, xbound=<UNSET>, xlabel=<UNSET>, xlim=<UNSET>, xmargin=<UNSET>, xscale=<UNSET>, xticklabels=<UNSET>, xticks=<UNSET>, ybound=<UNSET>, ylabel=<UNSET>, ylim=<UNSET>, ymargin=<UNSET>, yscale=<UNSET>, yticklabels=<UNSET>, yticks=<UNSET>, zorder=<UNSET>)[source]\n \nSet multiple properties at once. Supported properties are   \nProperty Description   \nadjustable {'box', 'datalim'}  \nagg_filter a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array  \nalpha scalar or None  \nanchor (float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}  \nanimated bool  \naspect {'auto', 'equal'} or float  \nautoscale_on bool  \nautoscalex_on bool  \nautoscaley_on bool  \naxes_locator Callable[[Axes, Renderer], Bbox]  \naxisbelow bool or 'line'  \nbox_aspect float or None  \nclip_box Bbox  \nclip_on bool  \nclip_path Patch or (Path, Transform) or None  \nfacecolor or fc color  \nfigure Figure  \nframe_on bool  \ngid str  \nin_layout bool  \nlabel object  \nnavigate bool  \nnavigate_mode unknown  \npath_effects AbstractPathEffect  \npicker None or bool or float or callable  \nposition [left, bottom, width, height] or Bbox  \nprop_cycle unknown  \nrasterization_zorder float or None  \nrasterized bool  \nsketch_params (scale: float, length: float, randomness: float)  \nsnap bool or None  \ntitle str  \ntransform Transform  \nurl str  \nvisible bool  \nxbound unknown  \nxlabel str  \nxlim (bottom: float, top: float)  \nxmargin float greater than -0.5  \nxscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nxticklabels unknown  \nxticks unknown  \nybound unknown  \nylabel str  \nylim (bottom: float, top: float)  \nymargin float greater than -0.5  \nyscale {\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBase  \nyticklabels unknown  \nyticks unknown  \nzorder float   \n"}, {"name": "axisartist.axislines.AxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper", "type": "axisartist", "text": "mpl_toolkits.axisartist.axislines.AxisArtistHelper   classmpl_toolkits.axisartist.axislines.AxisArtistHelper[source]\n \nBases: object AxisArtistHelper should define following method with given APIs. Note that the first axes argument will be axes attribute of the caller artist.: # LINE (spinal line?)\n\ndef get_line(self, axes):\n    # path : Path\n    return path\n\ndef get_line_transform(self, axes):\n    # ...\n    # trans : transform\n    return trans\n\n# LABEL\n\ndef get_label_pos(self, axes):\n    # x, y : position\n    return (x, y), trans\n\ndef get_label_offset_transform(self,\n        axes,\n        pad_points, fontprops, renderer,\n        bboxes,\n        ):\n    # va : vertical alignment\n    # ha : horizontal alignment\n    # a : angle\n    return trans, va, ha, a\n\n# TICK\n\ndef get_tick_transform(self, axes):\n    return trans\n\ndef get_tick_iterators(self, axes):\n    # iter : iterable object that yields (c, angle, l) where\n    # c, angle, l is position, tick angle, and label\n\n    return iter_major, iter_minor\n   classFixed(loc, nth_coord=None)[source]\n \nBases: mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base Helper class for a fixed (in the axes coordinate) axis. nth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x axis, nth_coord = 1 -> y axis   get_axislabel_pos_angle(axes)[source]\n \nReturn the label reference position in transAxes. get_label_transform() returns a transform of (transAxes+offset) \n   get_axislabel_transform(axes)[source]\n\n   get_line(axes)[source]\n\n   get_line_transform(axes)[source]\n\n   get_nth_coord()[source]\n\n   get_tick_transform(axes)[source]\n\n \n   classFloating(nth_coord, value)[source]\n \nBases: mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base   get_line(axes)[source]\n\n   get_nth_coord()[source]\n\n \n \n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed", "type": "axisartist", "text": "  classFixed(loc, nth_coord=None)[source]\n \nBases: mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base Helper class for a fixed (in the axes coordinate) axis. nth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x axis, nth_coord = 1 -> y axis   get_axislabel_pos_angle(axes)[source]\n \nReturn the label reference position in transAxes. get_label_transform() returns a transform of (transAxes+offset) \n   get_axislabel_transform(axes)[source]\n\n   get_line(axes)[source]\n\n   get_line_transform(axes)[source]\n\n   get_nth_coord()[source]\n\n   get_tick_transform(axes)[source]\n\n \n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_pos_angle()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_pos_angle", "type": "axisartist", "text": "  get_axislabel_pos_angle(axes)[source]\n \nReturn the label reference position in transAxes. get_label_transform() returns a transform of (transAxes+offset) \n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_axislabel_transform", "type": "axisartist", "text": "  get_axislabel_transform(axes)[source]\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_line", "type": "axisartist", "text": "  get_line(axes)[source]\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_line_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_line_transform", "type": "axisartist", "text": "  get_line_transform(axes)[source]\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_nth_coord()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_nth_coord", "type": "axisartist", "text": "  get_nth_coord()[source]\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Fixed.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed.get_tick_transform", "type": "axisartist", "text": "  get_tick_transform(axes)[source]\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Floating", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating", "type": "axisartist", "text": "  classFloating(nth_coord, value)[source]\n \nBases: mpl_toolkits.axisartist.axislines.AxisArtistHelper._Base   get_line(axes)[source]\n\n   get_nth_coord()[source]\n\n \n"}, {"name": "axisartist.axislines.AxisArtistHelper.Floating.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating.get_line", "type": "axisartist", "text": "  get_line(axes)[source]\n\n"}, {"name": "axisartist.axislines.AxisArtistHelper.Floating.get_nth_coord()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelper#mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating.get_nth_coord", "type": "axisartist", "text": "  get_nth_coord()[source]\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear", "type": "axisartist", "text": "mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear   classmpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear[source]\n \nBases: object   classFixed(axes, loc, nth_coord=None)[source]\n \nBases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed nth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x axis, nth_coord = 1 -> y axis   get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label \n \n   classFloating(axes, nth_coord, passingthrough_point, axis_direction='bottom')[source]\n \nBases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating   get_axislabel_pos_angle(axes)[source]\n \nReturn the label reference position in transAxes. get_label_transform() returns a transform of (transAxes+offset) \n   get_axislabel_transform(axes)[source]\n\n   get_line(axes)[source]\n\n   get_line_transform(axes)[source]\n\n   get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label \n   get_tick_transform(axes)[source]\n\n \n \n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Fixed", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Fixed", "type": "axisartist", "text": "  classFixed(axes, loc, nth_coord=None)[source]\n \nBases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed nth_coord = along which coordinate value varies in 2D, nth_coord = 0 -> x axis, nth_coord = 1 -> y axis   get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label \n \n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Fixed.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Fixed.get_tick_iterators", "type": "axisartist", "text": "  get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label \n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating", "type": "axisartist", "text": "  classFloating(axes, nth_coord, passingthrough_point, axis_direction='bottom')[source]\n \nBases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating   get_axislabel_pos_angle(axes)[source]\n \nReturn the label reference position in transAxes. get_label_transform() returns a transform of (transAxes+offset) \n   get_axislabel_transform(axes)[source]\n\n   get_line(axes)[source]\n\n   get_line_transform(axes)[source]\n\n   get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label \n   get_tick_transform(axes)[source]\n\n \n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_pos_angle()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_pos_angle", "type": "axisartist", "text": "  get_axislabel_pos_angle(axes)[source]\n \nReturn the label reference position in transAxes. get_label_transform() returns a transform of (transAxes+offset) \n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_axislabel_transform", "type": "axisartist", "text": "  get_axislabel_transform(axes)[source]\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line", "type": "axisartist", "text": "  get_line(axes)[source]\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_line_transform", "type": "axisartist", "text": "  get_line_transform(axes)[source]\n\n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_iterators", "type": "axisartist", "text": "  get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label \n"}, {"name": "axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.axisartisthelperrectlinear#mpl_toolkits.axisartist.axislines.AxisArtistHelperRectlinear.Floating.get_tick_transform", "type": "axisartist", "text": "  get_tick_transform(axes)[source]\n\n"}, {"name": "axisartist.axislines.GridHelperBase", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase", "type": "axisartist", "text": "mpl_toolkits.axisartist.axislines.GridHelperBase   classmpl_toolkits.axisartist.axislines.GridHelperBase[source]\n \nBases: object   get_gridlines(which, axis)[source]\n \nReturn list of grid lines as a list of paths (list of points). which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n   invalidate()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n   new_gridlines(ax)[source]\n \nCreate and return a new GridlineCollection instance. which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n   update_lim(axes)[source]\n\n   valid()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n \n\n"}, {"name": "axisartist.axislines.GridHelperBase.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.get_gridlines", "type": "axisartist", "text": "  get_gridlines(which, axis)[source]\n \nReturn list of grid lines as a list of paths (list of points). which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n"}, {"name": "axisartist.axislines.GridHelperBase.invalidate()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.invalidate", "type": "axisartist", "text": "  invalidate()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "axisartist.axislines.GridHelperBase.new_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.new_gridlines", "type": "axisartist", "text": "  new_gridlines(ax)[source]\n \nCreate and return a new GridlineCollection instance. which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n"}, {"name": "axisartist.axislines.GridHelperBase.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.update_lim", "type": "axisartist", "text": "  update_lim(axes)[source]\n\n"}, {"name": "axisartist.axislines.GridHelperBase.valid()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperbase#mpl_toolkits.axisartist.axislines.GridHelperBase.valid", "type": "axisartist", "text": "  valid()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n"}, {"name": "axisartist.axislines.GridHelperRectlinear", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear", "type": "axisartist", "text": "mpl_toolkits.axisartist.axislines.GridHelperRectlinear   classmpl_toolkits.axisartist.axislines.GridHelperRectlinear(axes)[source]\n \nBases: mpl_toolkits.axisartist.axislines.GridHelperBase   get_gridlines(which='major', axis='both')[source]\n \nReturn list of gridline coordinates in data coordinates. which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n   new_fixed_axis(loc, nth_coord=None, axis_direction=None, offset=None, axes=None)[source]\n\n   new_floating_axis(nth_coord, value, axis_direction='bottom', axes=None)[source]\n\n \n\n"}, {"name": "axisartist.axislines.GridHelperRectlinear.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear#mpl_toolkits.axisartist.axislines.GridHelperRectlinear.get_gridlines", "type": "axisartist", "text": "  get_gridlines(which='major', axis='both')[source]\n \nReturn list of gridline coordinates in data coordinates. which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n"}, {"name": "axisartist.axislines.GridHelperRectlinear.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear#mpl_toolkits.axisartist.axislines.GridHelperRectlinear.new_fixed_axis", "type": "axisartist", "text": "  new_fixed_axis(loc, nth_coord=None, axis_direction=None, offset=None, axes=None)[source]\n\n"}, {"name": "axisartist.axislines.GridHelperRectlinear.new_floating_axis()", "path": "_as_gen/mpl_toolkits.axisartist.axislines.gridhelperrectlinear#mpl_toolkits.axisartist.axislines.GridHelperRectlinear.new_floating_axis", "type": "axisartist", "text": "  new_floating_axis(nth_coord, value, axis_direction='bottom', axes=None)[source]\n\n"}, {"name": "axisartist.clip_path", "path": "_as_gen/mpl_toolkits.axisartist.clip_path", "type": "axisartist", "text": "mpl_toolkits.axisartist.clip_path  Functions  \natan2(dy, dx)   \nclip(xlines, ylines, x0[, clip, xdir, ydir])   \nclip_line_to_rect(xline, yline, bbox)    \n"}, {"name": "axisartist.clip_path.atan2", "path": "_as_gen/mpl_toolkits.axisartist.clip_path.atan2", "type": "axisartist", "text": "mpl_toolkits.axisartist.clip_path.atan2   mpl_toolkits.axisartist.clip_path.atan2(dy, dx)[source]\n\n\n"}, {"name": "axisartist.clip_path.clip", "path": "_as_gen/mpl_toolkits.axisartist.clip_path.clip", "type": "axisartist", "text": "mpl_toolkits.axisartist.clip_path.clip   mpl_toolkits.axisartist.clip_path.clip(xlines, ylines, x0, clip='right', xdir=True, ydir=True)[source]\n\n\n"}, {"name": "axisartist.clip_path.clip_line_to_rect", "path": "_as_gen/mpl_toolkits.axisartist.clip_path.clip_line_to_rect", "type": "axisartist", "text": "mpl_toolkits.axisartist.clip_path.clip_line_to_rect   mpl_toolkits.axisartist.clip_path.clip_line_to_rect(xline, yline, bbox)[source]\n\n\n"}, {"name": "axisartist.floating_axes", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes", "type": "axisartist", "text": "mpl_toolkits.axisartist.floating_axes An experimental support for curvilinear grid.  Classes  \nExtremeFinderFixed(extremes) This subclass always returns the same bounding box.  \nFixedAxisArtistHelper(grid_helper, side[, ...]) nth_coord = along which coordinate value varies.  \nFloatingAxes alias of mpl_toolkits.axisartist.floating_axes.FloatingAxesHostAxes  \nFloatingAxesBase(*args, **kwargs)   \nFloatingAxisArtistHelper(grid_helper, ...[, ...]) nth_coord = along which coordinate value varies.  \nGridHelperCurveLinear(aux_trans, extremes[, ...]) aux_trans : a transform from the source (curved) coordinate to target (rectilinear) coordinate.     Functions  \nfloatingaxes_class_factory(axes_class)    \n"}, {"name": "axisartist.floating_axes.ExtremeFinderFixed", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.extremefinderfixed", "type": "axisartist", "text": "mpl_toolkits.axisartist.floating_axes.ExtremeFinderFixed   classmpl_toolkits.axisartist.floating_axes.ExtremeFinderFixed(extremes)[source]\n \nBases: mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple This subclass always returns the same bounding box.  Parameters \n \nextremes(float, float, float, float)\n\n\nThe bounding box that this helper always returns.       __call__(transform_xy, x1, y1, x2, y2)[source]\n \nCompute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2). The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes. The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling. As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions. \n \n\n"}, {"name": "axisartist.floating_axes.ExtremeFinderFixed.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.extremefinderfixed#mpl_toolkits.axisartist.floating_axes.ExtremeFinderFixed.__call__", "type": "axisartist", "text": "  __call__(transform_xy, x1, y1, x2, y2)[source]\n \nCompute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2). The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes. The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling. As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions. \n"}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper", "type": "axisartist", "text": "mpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper   classmpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper(grid_helper, side, nth_coord_ticks=None)[source]\n \nBases: mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper  nth_coord = along which coordinate value varies.\n\nnth_coord = 0 -> x axis, nth_coord = 1 -> y axis     get_line(axes)[source]\n\n   get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label, (optionally) tick_label \n   update_lim(axes)[source]\n\n \n\n"}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper#mpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper.get_line", "type": "axisartist", "text": "  get_line(axes)[source]\n\n"}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper#mpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper.get_tick_iterators", "type": "axisartist", "text": "  get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label, (optionally) tick_label \n"}, {"name": "axisartist.floating_axes.FixedAxisArtistHelper.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.fixedaxisartisthelper#mpl_toolkits.axisartist.floating_axes.FixedAxisArtistHelper.update_lim", "type": "axisartist", "text": "  update_lim(axes)[source]\n\n"}, {"name": "axisartist.floating_axes.FloatingAxes", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxes", "type": "axisartist", "text": "mpl_toolkits.axisartist.floating_axes.FloatingAxes   mpl_toolkits.axisartist.floating_axes.FloatingAxes[source]\n \nalias of mpl_toolkits.axisartist.floating_axes.FloatingAxesHostAxes \n\n"}, {"name": "axisartist.floating_axes.floatingaxes_class_factory", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxes_class_factory", "type": "axisartist", "text": "mpl_toolkits.axisartist.floating_axes.floatingaxes_class_factory   mpl_toolkits.axisartist.floating_axes.floatingaxes_class_factory(axes_class)[source]\n\n\n"}, {"name": "axisartist.floating_axes.FloatingAxesBase", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxesbase", "type": "axisartist", "text": "mpl_toolkits.axisartist.floating_axes.FloatingAxesBase   classmpl_toolkits.axisartist.floating_axes.FloatingAxesBase(*args, **kwargs)[source]\n \nBases: object   adjust_axes_lim()[source]\n\n   cla()[source]\n\n \n  Examples using mpl_toolkits.axisartist.floating_axes.FloatingAxesBase\n \n   mpl_toolkits.axisartist.floating_axes features   \n\n"}, {"name": "axisartist.floating_axes.FloatingAxesBase.adjust_axes_lim()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxesbase#mpl_toolkits.axisartist.floating_axes.FloatingAxesBase.adjust_axes_lim", "type": "axisartist", "text": "  adjust_axes_lim()[source]\n\n"}, {"name": "axisartist.floating_axes.FloatingAxesBase.cla()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxesbase#mpl_toolkits.axisartist.floating_axes.FloatingAxesBase.cla", "type": "axisartist", "text": "  cla()[source]\n\n"}, {"name": "axisartist.floating_axes.FloatingAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.floatingaxisartisthelper", "type": "axisartist", "text": "mpl_toolkits.axisartist.floating_axes.FloatingAxisArtistHelper   classmpl_toolkits.axisartist.floating_axes.FloatingAxisArtistHelper(grid_helper, nth_coord, value, axis_direction=None)[source]\n \nBases: mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper  nth_coord = along which coordinate value varies.\n\nnth_coord = 0 -> x axis, nth_coord = 1 -> y axis   \n\n"}, {"name": "axisartist.floating_axes.GridHelperCurveLinear", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear", "type": "axisartist", "text": "mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear   classmpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear(aux_trans, extremes, grid_locator1=None, grid_locator2=None, tick_formatter1=None, tick_formatter2=None)[source]\n \nBases: mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear aux_trans : a transform from the source (curved) coordinate to target (rectilinear) coordinate. An instance of MPL's Transform (inverse transform should be defined) or a tuple of two callable objects which defines the transform and its inverse. The callables need take two arguments of array of source coordinates and should return two target coordinates. e.g., x2, y2 = trans(x1, y1)   get_boundary()[source]\n \n[Deprecated] Return (N, 2) array of (x, y) coordinate of the boundary. Notes  Deprecated since version 3.5.  \n   get_data_boundary(side)[source]\n \nReturn v=0, nth=1. \n   get_gridlines(which='major', axis='both')[source]\n \nReturn list of grid lines as a list of paths (list of points). which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n   new_fixed_axis(loc, nth_coord=None, axis_direction=None, offset=None, axes=None)[source]\n\n \n  Examples using mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear\n \n   mpl_toolkits.axisartist.floating_axes features   \n\n"}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.get_boundary()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.get_boundary", "type": "axisartist", "text": "  get_boundary()[source]\n \n[Deprecated] Return (N, 2) array of (x, y) coordinate of the boundary. Notes  Deprecated since version 3.5.  \n"}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.get_data_boundary()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.get_data_boundary", "type": "axisartist", "text": "  get_data_boundary(side)[source]\n \nReturn v=0, nth=1. \n"}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.get_gridlines", "type": "axisartist", "text": "  get_gridlines(which='major', axis='both')[source]\n \nReturn list of grid lines as a list of paths (list of points). which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n"}, {"name": "axisartist.floating_axes.GridHelperCurveLinear.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.floating_axes.gridhelpercurvelinear#mpl_toolkits.axisartist.floating_axes.GridHelperCurveLinear.new_fixed_axis", "type": "axisartist", "text": "  new_fixed_axis(loc, nth_coord=None, axis_direction=None, offset=None, axes=None)[source]\n\n"}, {"name": "axisartist.grid_finder", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_finder  Classes  \nDictFormatter(format_dict[, formatter]) format_dict : dictionary for format strings to be used.  \nExtremeFinderSimple(nx, ny) A helper class to figure out the range of grid lines that need to be drawn.  \nFixedLocator(locs)   \nFormatterPrettyPrint([useMathText])   \nGridFinder(transform[, extreme_finder, ...]) transform : transform from the image coordinate (which will be the transData of the axes to the world coordinate.  \nMaxNLocator([nbins, steps, trim, integer, ...]) \n Parameters     \n"}, {"name": "axisartist.grid_finder.DictFormatter", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.dictformatter", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_finder.DictFormatter   classmpl_toolkits.axisartist.grid_finder.DictFormatter(format_dict, formatter=None)[source]\n \nBases: object format_dict : dictionary for format strings to be used. formatter : fall-back formatter   __call__(direction, factor, values)[source]\n \nfactor is ignored if value is found in the dictionary \n \n  Examples using mpl_toolkits.axisartist.grid_finder.DictFormatter\n \n   mpl_toolkits.axisartist.floating_axes features   \n\n"}, {"name": "axisartist.grid_finder.DictFormatter.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.dictformatter#mpl_toolkits.axisartist.grid_finder.DictFormatter.__call__", "type": "axisartist", "text": "  __call__(direction, factor, values)[source]\n \nfactor is ignored if value is found in the dictionary \n"}, {"name": "axisartist.grid_finder.ExtremeFinderSimple", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.extremefindersimple", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple   classmpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple(nx, ny)[source]\n \nBases: object A helper class to figure out the range of grid lines that need to be drawn.  Parameters \n \nnx, nyint\n\n\nThe number of samples in each direction.       __call__(transform_xy, x1, y1, x2, y2)[source]\n \nCompute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2). The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes. The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling. As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions. \n \n  Examples using mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple\n \n   axis_direction demo   \n\n   Curvilinear grid demo   \n\n   Demo CurveLinear Grid2   \n\n   floating_axis demo   \n\n   Simple Axis Pad   \n\n"}, {"name": "axisartist.grid_finder.ExtremeFinderSimple.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.extremefindersimple#mpl_toolkits.axisartist.grid_finder.ExtremeFinderSimple.__call__", "type": "axisartist", "text": "  __call__(transform_xy, x1, y1, x2, y2)[source]\n \nCompute an approximation of the bounding box obtained by applying transform_xy to the box delimited by (x1, y1, x2, y2). The intended use is to have (x1, y1, x2, y2) in axes coordinates, and have transform_xy be the transform from axes coordinates to data coordinates; this method then returns the range of data coordinates that span the actual axes. The computation is done by sampling nx * ny equispaced points in the (x1, y1, x2, y2) box and finding the resulting points with extremal coordinates; then adding some padding to take into account the finite sampling. As each sampling step covers a relative range of 1/nx or 1/ny, the padding is computed by expanding the span covered by the extremal coordinates by these fractions. \n"}, {"name": "axisartist.grid_finder.FixedLocator", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.fixedlocator", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_finder.FixedLocator   classmpl_toolkits.axisartist.grid_finder.FixedLocator(locs)[source]\n \nBases: object   __call__(v1, v2)[source]\n \nCall self as a function. \n \n  Examples using mpl_toolkits.axisartist.grid_finder.FixedLocator\n \n   mpl_toolkits.axisartist.floating_axes features   \n\n"}, {"name": "axisartist.grid_finder.FixedLocator.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.fixedlocator#mpl_toolkits.axisartist.grid_finder.FixedLocator.__call__", "type": "axisartist", "text": "  __call__(v1, v2)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.grid_finder.FormatterPrettyPrint", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.formatterprettyprint", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_finder.FormatterPrettyPrint   classmpl_toolkits.axisartist.grid_finder.FormatterPrettyPrint(useMathText=True)[source]\n \nBases: object   __call__(direction, factor, values)[source]\n \nCall self as a function. \n \n\n"}, {"name": "axisartist.grid_finder.FormatterPrettyPrint.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.formatterprettyprint#mpl_toolkits.axisartist.grid_finder.FormatterPrettyPrint.__call__", "type": "axisartist", "text": "  __call__(direction, factor, values)[source]\n \nCall self as a function. \n"}, {"name": "axisartist.grid_finder.GridFinder", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_finder.GridFinder   classmpl_toolkits.axisartist.grid_finder.GridFinder(transform, extreme_finder=None, grid_locator1=None, grid_locator2=None, tick_formatter1=None, tick_formatter2=None)[source]\n \nBases: object transform : transform from the image coordinate (which will be the transData of the axes to the world coordinate. or transform = (transform_xy, inv_transform_xy) locator1, locator2 : grid locator for 1st and 2nd axis.   get_grid_info(x1, y1, x2, y2)[source]\n \n lon_values, lat_valueslist of grid values. if integer is given,\n\n\nrough number of grids in each direction.   \n   get_transform()[source]\n\n   inv_transform_xy(x, y)[source]\n\n   set_transform(aux_trans)[source]\n\n   transform_xy(x, y)[source]\n\n   update(**kw)[source]\n\n   update_transform(aux_trans)[source]\n\n \n\n"}, {"name": "axisartist.grid_finder.GridFinder.get_grid_info()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.get_grid_info", "type": "axisartist", "text": "  get_grid_info(x1, y1, x2, y2)[source]\n \n lon_values, lat_valueslist of grid values. if integer is given,\n\n\nrough number of grids in each direction.   \n"}, {"name": "axisartist.grid_finder.GridFinder.get_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.get_transform", "type": "axisartist", "text": "  get_transform()[source]\n\n"}, {"name": "axisartist.grid_finder.GridFinder.inv_transform_xy()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.inv_transform_xy", "type": "axisartist", "text": "  inv_transform_xy(x, y)[source]\n\n"}, {"name": "axisartist.grid_finder.GridFinder.set_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.set_transform", "type": "axisartist", "text": "  set_transform(aux_trans)[source]\n\n"}, {"name": "axisartist.grid_finder.GridFinder.transform_xy()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.transform_xy", "type": "axisartist", "text": "  transform_xy(x, y)[source]\n\n"}, {"name": "axisartist.grid_finder.GridFinder.update()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.update", "type": "axisartist", "text": "  update(**kw)[source]\n\n"}, {"name": "axisartist.grid_finder.GridFinder.update_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.gridfinder#mpl_toolkits.axisartist.grid_finder.GridFinder.update_transform", "type": "axisartist", "text": "  update_transform(aux_trans)[source]\n\n"}, {"name": "axisartist.grid_finder.MaxNLocator", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.maxnlocator", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_finder.MaxNLocator   classmpl_toolkits.axisartist.grid_finder.MaxNLocator(nbins=10, steps=None, trim=True, integer=False, symmetric=False, prune=None)[source]\n \nBases: matplotlib.ticker.MaxNLocator  Parameters \n \nnbinsint or 'auto', default: 10\n\n\nMaximum number of intervals; one less than max number of ticks. If the string 'auto', the number of bins will be automatically determined based on the length of the axis.  \nstepsarray-like, optional\n\n\nSequence of nice numbers starting with 1 and ending with 10; e.g., [1, 2, 4, 5, 10], where the values are acceptable tick multiples. i.e. for the example, 20, 40, 60 would be an acceptable set of ticks, as would 0.4, 0.6, 0.8, because they are multiples of 2. However, 30, 60, 90 would not be allowed because 3 does not appear in the list of steps.  \nintegerbool, default: False\n\n\nIf True, ticks will take only integer values, provided at least min_n_ticks integers are found within the view limits.  \nsymmetricbool, default: False\n\n\nIf True, autoscaling will result in a range symmetric about zero.  \nprune{'lower', 'upper', 'both', None}, default: None\n\n\nRemove edge ticks -- useful for stacked or ganged plots where the upper tick of one axes overlaps with the lower tick of the axes above it, primarily when rcParams[\"axes.autolimit_mode\"] (default: 'data') is 'round_numbers'. If prune=='lower', the smallest tick will be removed. If prune == 'upper', the largest tick will be removed. If prune == 'both', the largest and smallest ticks will be removed. If prune is None, no ticks will be removed.  \nmin_n_ticksint, default: 2\n\n\nRelax nbins and integer constraints if necessary to obtain this minimum number of ticks.       __call__(v1, v2)[source]\n \nReturn the locations of the ticks. \n \n  Examples using mpl_toolkits.axisartist.grid_finder.MaxNLocator\n \n   axis_direction demo   \n\n   Demo CurveLinear Grid2   \n\n   mpl_toolkits.axisartist.floating_axes features   \n\n   Simple Axis Pad   \n\n"}, {"name": "axisartist.grid_finder.MaxNLocator.__call__()", "path": "_as_gen/mpl_toolkits.axisartist.grid_finder.maxnlocator#mpl_toolkits.axisartist.grid_finder.MaxNLocator.__call__", "type": "axisartist", "text": "  __call__(v1, v2)[source]\n \nReturn the locations of the ticks. \n"}, {"name": "axisartist.grid_helper_curvelinear", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_helper_curvelinear An experimental support for curvilinear grid.  Classes  \nFixedAxisArtistHelper(grid_helper, side[, ...]) Helper class for a fixed axis.  \nFloatingAxisArtistHelper(grid_helper, ...[, ...]) nth_coord = along which coordinate value varies.  \nGridHelperCurveLinear(aux_trans[, ...]) aux_trans : a transform from the source (curved) coordinate to target (rectilinear) coordinate.   \n"}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper   classmpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper(grid_helper, side, nth_coord_ticks=None)[source]\n \nBases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Fixed Helper class for a fixed axis.  nth_coord = along which coordinate value varies.\n\nnth_coord = 0 -> x axis, nth_coord = 1 -> y axis     change_tick_coord(coord_number=None)[source]\n \n[Deprecated] Notes  Deprecated since version 3.5:   \n   get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label \n   get_tick_transform(axes)[source]\n\n   update_lim(axes)[source]\n\n \n\n"}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.change_tick_coord()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.change_tick_coord", "type": "axisartist", "text": "  change_tick_coord(coord_number=None)[source]\n \n[Deprecated] Notes  Deprecated since version 3.5:   \n"}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_iterators", "type": "axisartist", "text": "  get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label \n"}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.get_tick_transform", "type": "axisartist", "text": "  get_tick_transform(axes)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.fixedaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FixedAxisArtistHelper.update_lim", "type": "axisartist", "text": "  update_lim(axes)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper   classmpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper(grid_helper, nth_coord, value, axis_direction=None)[source]\n \nBases: mpl_toolkits.axisartist.axislines.AxisArtistHelper.Floating  nth_coord = along which coordinate value varies.\n\nnth_coord = 0 -> x axis, nth_coord = 1 -> y axis     get_axislabel_pos_angle(axes)[source]\n\n   get_axislabel_transform(axes)[source]\n\n   get_line(axes)[source]\n\n   get_line_transform(axes)[source]\n\n   get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label, (optionally) tick_label \n   get_tick_transform(axes)[source]\n\n   propertygrid_info[source]\n\n   set_extremes(e1, e2)[source]\n\n   update_lim(axes)[source]\n\n \n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_pos_angle()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_pos_angle", "type": "axisartist", "text": "  get_axislabel_pos_angle(axes)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_axislabel_transform", "type": "axisartist", "text": "  get_axislabel_transform(axes)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line", "type": "axisartist", "text": "  get_line(axes)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_line_transform", "type": "axisartist", "text": "  get_line_transform(axes)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_iterators()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_iterators", "type": "axisartist", "text": "  get_tick_iterators(axes)[source]\n \ntick_loc, tick_angle, tick_label, (optionally) tick_label \n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_transform()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.get_tick_transform", "type": "axisartist", "text": "  get_tick_transform(axes)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.set_extremes()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.set_extremes", "type": "axisartist", "text": "  set_extremes(e1, e2)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.update_lim()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.floatingaxisartisthelper#mpl_toolkits.axisartist.grid_helper_curvelinear.FloatingAxisArtistHelper.update_lim", "type": "axisartist", "text": "  update_lim(axes)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear", "type": "axisartist", "text": "mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear   classmpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear(aux_trans, extreme_finder=None, grid_locator1=None, grid_locator2=None, tick_formatter1=None, tick_formatter2=None)[source]\n \nBases: mpl_toolkits.axisartist.axislines.GridHelperBase aux_trans : a transform from the source (curved) coordinate to target (rectilinear) coordinate. An instance of MPL's Transform (inverse transform should be defined) or a tuple of two callable objects which defines the transform and its inverse. The callables need take two arguments of array of source coordinates and should return two target coordinates. e.g., x2, y2 = trans(x1, y1)   get_gridlines(which='major', axis='both')[source]\n \nReturn list of grid lines as a list of paths (list of points). which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n   get_tick_iterator(nth_coord, axis_side, minor=False)[source]\n\n   propertygrid_info[source]\n\n   new_fixed_axis(loc, nth_coord=None, axis_direction=None, offset=None, axes=None)[source]\n\n   new_floating_axis(nth_coord, value, axes=None, axis_direction='bottom')[source]\n\n   update_grid_finder(aux_trans=None, **kw)[source]\n\n \n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_gridlines()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_gridlines", "type": "axisartist", "text": "  get_gridlines(which='major', axis='both')[source]\n \nReturn list of grid lines as a list of paths (list of points). which : \"major\" or \"minor\" axis : \"both\", \"x\" or \"y\" \n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_tick_iterator()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.get_tick_iterator", "type": "axisartist", "text": "  get_tick_iterator(nth_coord, axis_side, minor=False)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_fixed_axis()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_fixed_axis", "type": "axisartist", "text": "  new_fixed_axis(loc, nth_coord=None, axis_direction=None, offset=None, axes=None)[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_floating_axis()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.new_floating_axis", "type": "axisartist", "text": "  new_floating_axis(nth_coord, value, axes=None, axis_direction='bottom')[source]\n\n"}, {"name": "axisartist.grid_helper_curvelinear.GridHelperCurveLinear.update_grid_finder()", "path": "_as_gen/mpl_toolkits.axisartist.grid_helper_curvelinear.gridhelpercurvelinear#mpl_toolkits.axisartist.grid_helper_curvelinear.GridHelperCurveLinear.update_grid_finder", "type": "axisartist", "text": "  update_grid_finder(aux_trans=None, **kw)[source]\n\n"}, {"name": "axisartist.parasite_axes", "path": "_as_gen/mpl_toolkits.axisartist.parasite_axes", "type": "axisartist", "text": "mpl_toolkits.axisartist.parasite_axes\n"}, {"name": "backend_agg", "path": "backend_agg_api", "type": "backend_agg", "text": "backend_agg An Anti-Grain Geometry (AGG) backend. Features that are implemented:  capstyles and join styles dashes linewidth lines, rectangles, ellipses clipping to a rectangle output to RGBA and Pillow-supported image formats alpha blending DPI scaling properly - everything scales properly (dashes, linewidths, etc) draw polygon freetype2 w/ ft2font  Still TODO:  integrate screen dpi w/ ppi and text    matplotlib.backends.backend_agg.FigureCanvas[source]\n \nalias of matplotlib.backends.backend_agg.FigureCanvasAgg \n   classmatplotlib.backends.backend_agg.FigureCanvasAgg(figure=None)[source]\n \nBases: matplotlib.backend_bases.FigureCanvasBase   buffer_rgba()[source]\n \nGet the image as a memoryview to the renderer's buffer. draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure. \n   copy_from_bbox(bbox)[source]\n\n   draw()[source]\n \nRender the Figure. It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk. \n   get_renderer(cleared=False)[source]\n\n   print_jpeg(filename_or_obj, *args, pil_kwargs=None, **kwargs)[source]\n \nWrite the figure to a JPEG file.  Parameters \n \nfilename_or_objstr or path-like or file-like\n\n\nThe file to write to.    Other Parameters \n \npil_kwargsdict, optional\n\n\nAdditional keyword arguments that are passed to PIL.Image.Image.save when saving the figure.     \n   print_jpg(filename_or_obj, *args, pil_kwargs=None, **kwargs)[source]\n \nWrite the figure to a JPEG file.  Parameters \n \nfilename_or_objstr or path-like or file-like\n\n\nThe file to write to.    Other Parameters \n \npil_kwargsdict, optional\n\n\nAdditional keyword arguments that are passed to PIL.Image.Image.save when saving the figure.     \n   print_png(filename_or_obj, *args, metadata=None, pil_kwargs=None)[source]\n \nWrite the figure to a PNG file.  Parameters \n \nfilename_or_objstr or path-like or file-like\n\n\nThe file to write to.  \nmetadatadict, optional\n\n\nMetadata in the PNG file as key-value pairs of bytes or latin-1 encodable strings. According to the PNG specification, keys must be shorter than 79 chars. The PNG specification defines some common keywords that may be used as appropriate:  Title: Short (one line) title or caption for image. Author: Name of image's creator. Description: Description of image (possibly long). Copyright: Copyright notice. Creation Time: Time of original image creation (usually RFC 1123 format). Software: Software used to create the image. Disclaimer: Legal disclaimer. Warning: Warning of nature of content. Source: Device used to create the image. Comment: Miscellaneous comment; conversion from other image format.  Other keywords may be invented for other purposes. If 'Software' is not given, an autogenerated value for Matplotlib will be used. This can be removed by setting it to None. For more details see the PNG specification.  \npil_kwargsdict, optional\n\n\nKeyword arguments passed to PIL.Image.Image.save. If the 'pnginfo' key is present, it completely overrides metadata, including the default 'Software' key.     \n   print_raw(filename_or_obj, *args)[source]\n\n   print_rgba(filename_or_obj, *args)[source]\n\n   print_tif(filename_or_obj, *, pil_kwargs=None)[source]\n\n   print_tiff(filename_or_obj, *, pil_kwargs=None)[source]\n\n   print_to_buffer()[source]\n\n   restore_region(region, bbox=None, xy=None)[source]\n\n   tostring_argb()[source]\n \nGet the image as ARGB bytes. draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure. \n   tostring_rgb()[source]\n \nGet the image as RGB bytes. draw must be called at least once before this function will work and to update the renderer for any subsequent changes to the Figure. \n \n   classmatplotlib.backends.backend_agg.RendererAgg(width, height, dpi)[source]\n \nBases: matplotlib.backend_bases.RendererBase The renderer handles all the drawing primitives using a graphics context instance that controls the colors/styles   buffer_rgba()[source]\n\n   clear()[source]\n\n   draw_mathtext(gc, x, y, s, prop, angle)[source]\n \nDraw mathtext using matplotlib.mathtext. \n   draw_path(gc, path, transform, rgbFace=None)[source]\n \nDraw a Path instance using the given affine transform. \n   draw_tex(gc, x, y, s, prop, angle, *, mtext=None)[source]\n\n   draw_text(gc, x, y, s, prop, angle, ismath=False, mtext=None)[source]\n \nDraw the text instance.  Parameters \n \ngcGraphicsContextBase\n\n\nThe graphics context.  \nxfloat\n\n\nThe x location of the text in display coords.  \nyfloat\n\n\nThe y location of the text baseline in display coords.  \nsstr\n\n\nThe text string.  \npropmatplotlib.font_manager.FontProperties\n\n\nThe font properties.  \nanglefloat\n\n\nThe rotation angle in degrees anti-clockwise.  \nmtextmatplotlib.text.Text\n\n\nThe original text object to be rendered.     Notes Note for backend implementers: When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py: if 0: bbox_artist(self, renderer)\n to if 1, and then the actual bounding box will be plotted along with your text. \n   get_canvas_width_height()[source]\n \nReturn the canvas width and height in display coords. \n   get_content_extents()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n   get_text_width_height_descent(s, prop, ismath)[source]\n \nGet the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop. \n   lock=<unlocked _thread.RLock object owner=0 count=0>\n\n   option_image_nocomposite()[source]\n \nReturn whether image composition by Matplotlib should be skipped. Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return not rcParams[\"image.composite_image\"]. \n   option_scale_image()[source]\n \nReturn whether arbitrary affine transformations in draw_image() are supported (True for most vector backends). \n   points_to_pixels(points)[source]\n \nConvert points to display units. You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch: points to pixels = points * pixels_per_inch/72 * dpi/72\n  Parameters \n \npointsfloat or array-like\n\n\na float or a numpy array of float    Returns \n Points converted to pixels\n   \n   restore_region(region, bbox=None, xy=None)[source]\n \nRestore the saved region. If bbox (instance of BboxBase, or its extents) is given, only the region specified by the bbox will be restored. xy (a pair of floats) optionally specifies the new position (the LLC of the original region, not the LLC of the bbox) where the region will be restored. >>> region = renderer.copy_from_bbox()\n>>> x1, y1, x2, y2 = region.get_extents()\n>>> renderer.restore_region(region, bbox=(x1+dx, y1, x2, y2),\n...                         xy=(x1-dx, y1))\n \n   start_filter()[source]\n \nStart filtering. It simply create a new canvas (the old one is saved). \n   stop_filter(post_processing)[source]\n \nSave the plot in the current canvas as a image and apply the post_processing function.  def post_processing(image, dpi):\n\n# ny, nx, depth = image.shape # image (numpy array) has RGBA channels and has a depth of 4. ... # create a new_image (numpy array of 4 channels, size can be # different). The resulting image may have offsets from # lower-left corner of the original image return new_image, offset_x, offset_y   The saved renderer is restored and the returned image from post_processing is plotted (using draw_image) on it. \n   tostring_argb()[source]\n\n   tostring_rgb()[source]\n\n   tostring_rgba_minimized()[source]\n \n[Deprecated] Notes  Deprecated since version 3.4:   \n \n   matplotlib.backends.backend_agg.get_hinting_flag()[source]\n\n\n"}, {"name": "backend_bases", "path": "backend_bases_api", "type": "backend_bases", "text": "matplotlib.backend_bases Abstract base classes define the primitives that renderers and graphics contexts must implement to serve as a Matplotlib backend.  RendererBase\n\nAn abstract base class to handle drawing/rendering operations.  FigureCanvasBase\n\nThe abstraction layer that separates the Figure from the backend specific details like a user interface drawing area.  GraphicsContextBase\n\nAn abstract base class that provides color, line styles, etc.  Event\n\nThe base class for all of the Matplotlib event handling. Derived classes such as KeyEvent and MouseEvent store the meta data like keys and buttons pressed, x and y locations in pixel and Axes coordinates.  ShowBase\n\nThe base class for the Show class of each interactive backend; the 'show' callable is then set to Show.__call__.  ToolContainerBase\n\nThe base class for the Toolbar class of each interactive backend.     classmatplotlib.backend_bases.CloseEvent(name, canvas, guiEvent=None)[source]\n \nBases: matplotlib.backend_bases.Event An event triggered by a figure being closed. \n   classmatplotlib.backend_bases.DrawEvent(name, canvas, renderer)[source]\n \nBases: matplotlib.backend_bases.Event An event triggered by a draw operation on the canvas. In most backends, callbacks subscribed to this event will be fired after the rendering is complete but before the screen is updated. Any extra artists drawn to the canvas's renderer will be reflected without an explicit call to blit.  Warning Calling canvas.draw and canvas.blit in these callbacks may not be safe with all backends and may cause infinite recursion.  A DrawEvent has a number of special attributes in addition to those defined by the parent Event class.  Attributes \n \nrendererRendererBase\n\n\nThe renderer for the draw event.     \n   classmatplotlib.backend_bases.Event(name, canvas, guiEvent=None)[source]\n \nBases: object A Matplotlib event. The following attributes are defined and shown with their default values. Subclasses may define additional attributes.  Attributes \n \nnamestr\n\n\nThe event name.  \ncanvasFigureCanvasBase\n\n\nThe backend-specific canvas instance generating the event.  guiEvent\n\nThe GUI event that triggered the Matplotlib event.     \n   classmatplotlib.backend_bases.FigureCanvasBase(figure=None)[source]\n \nBases: object The canvas the figure renders into.  Attributes \n \nfigurematplotlib.figure.Figure\n\n\nA high-level figure instance.       blit(bbox=None)[source]\n \nBlit the canvas in bbox (default entire canvas). \n   propertybutton_pick_id\n\n   button_press_event(x, y, button, dblclick=False, guiEvent=None)[source]\n \nCallback processing for mouse button press events. Backend derived classes should call this function on any mouse button press. (x, y) are the canvas coords ((0, 0) is lower left). button and key are as defined in MouseEvent. This method will call all functions connected to the 'button_press_event' with a MouseEvent instance. \n   button_release_event(x, y, button, guiEvent=None)[source]\n \nCallback processing for mouse button release events. Backend derived classes should call this function on any mouse button release. This method will call all functions connected to the 'button_release_event' with a MouseEvent instance.  Parameters \n \nxfloat\n\n\nThe canvas coordinates where 0=left.  \nyfloat\n\n\nThe canvas coordinates where 0=bottom.  guiEvent\n\nThe native UI event that generated the Matplotlib event.     \n   propertycallbacks\n\n   close_event(guiEvent=None)[source]\n \nPass a CloseEvent to all functions connected to close_event. \n   propertydevice_pixel_ratio\n \nThe ratio of physical to logical pixels used for the canvas on screen. By default, this is 1, meaning physical and logical pixels are the same size. Subclasses that support High DPI screens may set this property to indicate that said ratio is different. All Matplotlib interaction, unless working directly with the canvas, remains in logical pixels. \n   draw(*args, **kwargs)[source]\n \nRender the Figure. It is important that this method actually walk the artist tree even if not output is produced because this will trigger deferred work (like computing limits auto-limits and tick values) that users may want access to before saving to disk. \n   draw_event(renderer)[source]\n \nPass a DrawEvent to all functions connected to draw_event. \n   draw_idle(*args, **kwargs)[source]\n \nRequest a widget redraw once control returns to the GUI event loop. Even if multiple calls to draw_idle occur before control returns to the GUI event loop, the figure will only be rendered once. Notes Backends may choose to override the method and implement their own strategy to prevent multiple renderings. \n   enter_notify_event(guiEvent=None, xy=None)[source]\n \nCallback processing for the mouse cursor entering the canvas. Backend derived classes should call this function when entering canvas.  Parameters \n guiEvent\n\nThe native UI event that generated the Matplotlib event.  \nxy(float, float)\n\n\nThe coordinate location of the pointer when the canvas is entered.     \n   events=['resize_event', 'draw_event', 'key_press_event', 'key_release_event', 'button_press_event', 'button_release_event', 'scroll_event', 'motion_notify_event', 'pick_event', 'figure_enter_event', 'figure_leave_event', 'axes_enter_event', 'axes_leave_event', 'close_event']\n\n   filetypes={'eps': 'Encapsulated Postscript', 'jpeg': 'Joint Photographic Experts Group', 'jpg': 'Joint Photographic Experts Group', 'pdf': 'Portable Document Format', 'pgf': 'PGF code for LaTeX', 'png': 'Portable Network Graphics', 'ps': 'Postscript', 'raw': 'Raw RGBA bitmap', 'rgba': 'Raw RGBA bitmap', 'svg': 'Scalable Vector Graphics', 'svgz': 'Scalable Vector Graphics', 'tif': 'Tagged Image File Format', 'tiff': 'Tagged Image File Format'}\n\n   fixed_dpi=None\n\n   flush_events()[source]\n \nFlush the GUI events for the figure. Interactive backends need to reimplement this method. \n   get_default_filename()[source]\n \nReturn a string, which includes extension, suitable for use as a default filename. \n   classmethodget_default_filetype()[source]\n \nReturn the default savefig file format as specified in rcParams[\"savefig.format\"] (default: 'png'). The returned string does not include a period. This method is overridden in backends that only support a single file type. \n   classmethodget_supported_filetypes()[source]\n \nReturn dict of savefig file formats supported by this backend. \n   classmethodget_supported_filetypes_grouped()[source]\n \nReturn a dict of savefig file formats supported by this backend, where the keys are a file type name, such as 'Joint Photographic Experts Group', and the values are a list of filename extensions used for that filetype, such as ['jpg', 'jpeg']. \n   get_width_height(*, physical=False)[source]\n \nReturn the figure width and height in integral points or pixels. When the figure is used on High DPI screens (and the backend supports it), the truncation to integers occurs after scaling by the device pixel ratio.  Parameters \n \nphysicalbool, default: False\n\n\nWhether to return true physical pixels or logical pixels. Physical pixels may be used by backends that support HiDPI, but still configure the canvas using its actual size.    Returns \n \nwidth, heightint\n\n\nThe size of the figure, in points or pixels, depending on the backend.     \n   get_window_title()[source]\n \n[Deprecated] Return the title text of the window containing the figure, or None if there is no window (e.g., a PS backend). Notes  Deprecated since version 3.4.  \n   grab_mouse(ax)[source]\n \nSet the child Axes which is grabbing the mouse events. Usually called by the widgets themselves. It is an error to call this if the mouse is already grabbed by another axes. \n   inaxes(xy)[source]\n \nReturn the topmost visible Axes containing the point xy.  Parameters \n \nxy(float, float)\n\n\n(x, y) pixel positions from left/bottom of the canvas.    Returns \n \nAxes or None\n\nThe topmost visible axes containing the point, or None if no axes.     \n   is_saving()[source]\n \nReturn whether the renderer is in the process of saving to a file, rather than rendering for an on-screen buffer. \n   key_press_event(key, guiEvent=None)[source]\n \nPass a KeyEvent to all functions connected to key_press_event. \n   key_release_event(key, guiEvent=None)[source]\n \nPass a KeyEvent to all functions connected to key_release_event. \n   leave_notify_event(guiEvent=None)[source]\n \nCallback processing for the mouse cursor leaving the canvas. Backend derived classes should call this function when leaving canvas.  Parameters \n guiEvent\n\nThe native UI event that generated the Matplotlib event.     \n   motion_notify_event(x, y, guiEvent=None)[source]\n \nCallback processing for mouse movement events. Backend derived classes should call this function on any motion-notify-event. This method will call all functions connected to the 'motion_notify_event' with a MouseEvent instance.  Parameters \n \nxfloat\n\n\nThe canvas coordinates where 0=left.  \nyfloat\n\n\nThe canvas coordinates where 0=bottom.  guiEvent\n\nThe native UI event that generated the Matplotlib event.     \n   mpl_connect(s, func)[source]\n \nBind function func to event s.  Parameters \n \nsstr\n\n\nOne of the following events ids:  'button_press_event' 'button_release_event' 'draw_event' 'key_press_event' 'key_release_event' 'motion_notify_event' 'pick_event' 'resize_event' 'scroll_event' 'figure_enter_event', 'figure_leave_event', 'axes_enter_event', 'axes_leave_event' 'close_event'.   \nfunccallable\n\n\nThe callback function to be executed, which must have the signature: def func(event: Event) -> Any\n For the location events (button and key press/release), if the mouse is over the axes, the inaxes attribute of the event will be set to the Axes the event occurs is over, and additionally, the variables xdata and ydata attributes will be set to the mouse location in data coordinates. See KeyEvent and MouseEvent for more info.    Returns \n cid\n\nA connection id that can be used with FigureCanvasBase.mpl_disconnect.     Examples def on_press(event):\n    print('you pressed', event.button, event.xdata, event.ydata)\n\ncid = canvas.mpl_connect('button_press_event', on_press)\n \n   mpl_disconnect(cid)[source]\n \nDisconnect the callback with id cid. Examples cid = canvas.mpl_connect('button_press_event', on_press)\n# ... later\ncanvas.mpl_disconnect(cid)\n \n   new_timer(interval=None, callbacks=None)[source]\n \nCreate a new backend-specific subclass of Timer. This is useful for getting periodic events through the backend's native event loop. Implemented only for backends with GUIs.  Parameters \n \nintervalint\n\n\nTimer interval in milliseconds.  \ncallbackslist[tuple[callable, tuple, dict]]\n\n\nSequence of (func, args, kwargs) where func(*args, **kwargs) will be executed by the timer every interval. Callbacks which return False or 0 will be removed from the timer.     Examples >>> timer = fig.canvas.new_timer(callbacks=[(f1, (1,), {'a': 3})])\n \n   pick(mouseevent)[source]\n\n   pick_event(mouseevent, artist, **kwargs)[source]\n \nCallback processing for pick events. This method will be called by artists who are picked and will fire off PickEvent callbacks registered listeners. Note that artists are not pickable by default (see Artist.set_picker). \n   print_figure(filename, dpi=None, facecolor=None, edgecolor=None, orientation='portrait', format=None, *, bbox_inches=None, pad_inches=None, bbox_extra_artists=None, backend=None, **kwargs)[source]\n \nRender the figure to hardcopy. Set the figure patch face and edge colors. This is useful because some of the GUIs have a gray figure face color background and you'll probably want to override this on hardcopy.  Parameters \n \nfilenamestr or path-like or file-like\n\n\nThe file where the figure is saved.  \ndpifloat, default: rcParams[\"savefig.dpi\"] (default: 'figure')\n\n\nThe dots per inch to save the figure in.  \nfacecolorcolor or 'auto', default: rcParams[\"savefig.facecolor\"] (default: 'auto')\n\n\nThe facecolor of the figure. If 'auto', use the current figure facecolor.  \nedgecolorcolor or 'auto', default: rcParams[\"savefig.edgecolor\"] (default: 'auto')\n\n\nThe edgecolor of the figure. If 'auto', use the current figure edgecolor.  \norientation{'landscape', 'portrait'}, default: 'portrait'\n\n\nOnly currently applies to PostScript printing.  \nformatstr, optional\n\n\nForce a specific file format. If not given, the format is inferred from the filename extension, and if that fails from rcParams[\"savefig.format\"] (default: 'png').  \nbbox_inches'tight' or Bbox, default: rcParams[\"savefig.bbox\"] (default: None)\n\n\nBounding box in inches: only the given portion of the figure is saved. If 'tight', try to figure out the tight bbox of the figure.  \npad_inchesfloat, default: rcParams[\"savefig.pad_inches\"] (default: 0.1)\n\n\nAmount of padding around the figure when bbox_inches is 'tight'.  \nbbox_extra_artistslist of Artist, optional\n\n\nA list of extra artists that will be considered when the tight bbox is calculated.  \nbackendstr, optional\n\n\nUse a non-default backend to render the file, e.g. to render a png file with the \"cairo\" backend rather than the default \"agg\", or a pdf file with the \"pgf\" backend rather than the default \"pdf\". Note that the default backend is normally sufficient. See The builtin backends for a list of valid backends for each file format. Custom backends can be referenced as \"module://...\".     \n   release_mouse(ax)[source]\n \nRelease the mouse grab held by the Axes ax. Usually called by the widgets. It is ok to call this even if ax doesn't have the mouse grab currently. \n   required_interactive_framework=None\n\n   resize(w, h)[source]\n \nUNUSED: Set the canvas size in pixels. Certain backends may implement a similar method internally, but this is not a requirement of, nor is it used by, Matplotlib itself. \n   resize_event()[source]\n \nPass a ResizeEvent to all functions connected to resize_event. \n   scroll_event(x, y, step, guiEvent=None)[source]\n \nCallback processing for scroll events. Backend derived classes should call this function on any scroll wheel event. (x, y) are the canvas coords ((0, 0) is lower left). button and key are as defined in MouseEvent. This method will call all functions connected to the 'scroll_event' with a MouseEvent instance. \n   propertyscroll_pick_id\n\n   set_cursor(cursor)[source]\n \nSet the current cursor. This may have no effect if the backend does not display anything. If required by the backend, this method should trigger an update in the backend event loop after the cursor is set, as this method may be called e.g. before a long-running task during which the GUI is not updated.  Parameters \n \ncursorCursors\n\n\nThe cursor to display over the canvas. Note: some backends may change the cursor for the entire window.     \n   set_window_title(title)[source]\n \n[Deprecated] Set the title text of the window containing the figure. Note that this has no effect if there is no window (e.g., a PS backend). Notes  Deprecated since version 3.4.  \n   start_event_loop(timeout=0)[source]\n \nStart a blocking event loop. Such an event loop is used by interactive functions, such as ginput and waitforbuttonpress, to wait for events. The event loop blocks until a callback function triggers stop_event_loop, or timeout is reached. If timeout is 0 or negative, never timeout. Only interactive backends need to reimplement this method and it relies on flush_events being properly implemented. Interactive backends should implement this in a more native way. \n   stop_event_loop()[source]\n \nStop the current blocking event loop. Interactive backends need to reimplement this to match start_event_loop \n   supports_blit=False\n\n   switch_backends(FigureCanvasClass)[source]\n \nInstantiate an instance of FigureCanvasClass This is used for backend switching, e.g., to instantiate a FigureCanvasPS from a FigureCanvasGTK. Note, deep copying is not done, so any changes to one of the instances (e.g., setting figure size or line props), will be reflected in the other \n \n   classmatplotlib.backend_bases.FigureManagerBase(canvas, num)[source]\n \nBases: object A backend-independent abstraction of a figure container and controller. The figure manager is used by pyplot to interact with the window in a backend-independent way. It's an adapter for the real (GUI) framework that represents the visual figure on screen. GUI backends define from this class to translate common operations such as show or resize to the GUI-specific code. Non-GUI backends do not support these operations an can just use the base class. This following basic operations are accessible: Window operations  show destroy full_screen_toggle resize get_window_title set_window_title  Key and mouse button press handling The figure manager sets up default key and mouse button press handling by hooking up the key_press_handler to the matplotlib event system. This ensures the same shortcuts and mouse actions across backends. Other operations Subclasses will have additional attributes and functions to access additional functionality. This is of course backend-specific. For example, most GUI backends have window and toolbar attributes that give access to the native GUI widgets of the respective framework.  Attributes \n \ncanvasFigureCanvasBase\n\n\nThe backend-specific canvas instance.  \nnumint or str\n\n\nThe figure number.  \nkey_press_handler_idint\n\n\nThe default key handler cid, when using the toolmanager. To disable the default key press handling use: figure.canvas.mpl_disconnect(\n    figure.canvas.manager.key_press_handler_id)\n  \nbutton_press_handler_idint\n\n\nThe default mouse button handler cid, when using the toolmanager. To disable the default button press handling use: figure.canvas.mpl_disconnect(\n    figure.canvas.manager.button_press_handler_id)\n       button_press(event)[source]\n \n[Deprecated] The default Matplotlib button actions for extra mouse buttons. Notes  Deprecated since version 3.4.  \n   destroy()[source]\n\n   full_screen_toggle()[source]\n\n   get_window_title()[source]\n \nReturn the title text of the window containing the figure, or None if there is no window (e.g., a PS backend). \n   key_press(event)[source]\n \n[Deprecated] Implement the default Matplotlib key bindings defined at Navigation keyboard shortcuts. Notes  Deprecated since version 3.4.  \n   resize(w, h)[source]\n \nFor GUI backends, resize the window (in physical pixels). \n   set_window_title(title)[source]\n \nSet the title text of the window containing the figure. This has no effect for non-GUI (e.g., PS) backends. \n   show()[source]\n \nFor GUI backends, show the figure window and redraw. For non-GUI backends, raise an exception, unless running headless (i.e. on Linux with an unset DISPLAY); this exception is converted to a warning in Figure.show. \n \n   classmatplotlib.backend_bases.GraphicsContextBase[source]\n \nBases: object An abstract base class that provides color, line styles, etc.   copy_properties(gc)[source]\n \nCopy properties from gc to self. \n   get_alpha()[source]\n \nReturn the alpha value used for blending - not supported on all backends. \n   get_antialiased()[source]\n \nReturn whether the object should try to do antialiased rendering. \n   get_capstyle()[source]\n \nReturn the CapStyle. \n   get_clip_path()[source]\n \nReturn the clip path in the form (path, transform), where path is a Path instance, and transform is an affine transform to apply to the path before clipping. \n   get_clip_rectangle()[source]\n \nReturn the clip rectangle as a Bbox instance. \n   get_dashes()[source]\n \nReturn the dash style as an (offset, dash-list) pair. The dash list is a even-length list that gives the ink on, ink off in points. See p. 107 of to PostScript blue book for more info. Default value is (None, None). \n   get_forced_alpha()[source]\n \nReturn whether the value given by get_alpha() should be used to override any other alpha-channel values. \n   get_gid()[source]\n \nReturn the object identifier if one is set, None otherwise. \n   get_hatch()[source]\n \nGet the current hatch style. \n   get_hatch_color()[source]\n \nGet the hatch color. \n   get_hatch_linewidth()[source]\n \nGet the hatch linewidth. \n   get_hatch_path(density=6.0)[source]\n \nReturn a Path for the current hatch. \n   get_joinstyle()[source]\n \nReturn the JoinStyle. \n   get_linewidth()[source]\n \nReturn the line width in points. \n   get_rgb()[source]\n \nReturn a tuple of three or four floats from 0-1. \n   get_sketch_params()[source]\n \nReturn the sketch parameters for the artist.  Returns \n tuple or None\n\n\nA 3-tuple with the following elements:  \nscale: The amplitude of the wiggle perpendicular to the source line. \nlength: The length of the wiggle along the line. \nrandomness: The scale factor by which the length is shrunken or expanded.  May return None if no sketch parameters were set.     \n   get_snap()[source]\n \nReturn the snap setting, which can be:  True: snap vertices to the nearest pixel center False: leave vertices as-is None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center  \n   get_url()[source]\n \nReturn a url if one is set, None otherwise. \n   restore()[source]\n \nRestore the graphics context from the stack - needed only for backends that save graphics contexts on a stack. \n   set_alpha(alpha)[source]\n \nSet the alpha value used for blending - not supported on all backends. If alpha=None (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, alpha will override them. \n   set_antialiased(b)[source]\n \nSet whether object should be drawn with antialiased rendering. \n   set_capstyle(cs)[source]\n \nSet how to draw endpoints of lines.  Parameters \n \ncsCapStyle or {'butt', 'projecting', 'round'}\n\n   \n   set_clip_path(path)[source]\n \nSet the clip path to a TransformedPath or None. \n   set_clip_rectangle(rectangle)[source]\n \nSet the clip rectangle to a Bbox or None. \n   set_dashes(dash_offset, dash_list)[source]\n \nSet the dash style for the gc.  Parameters \n \ndash_offsetfloat\n\n\nThe offset (usually 0).  \ndash_listarray-like or None\n\n\nThe on-off sequence as points. None specifies a solid line.     Notes See p. 107 of to PostScript blue book for more info. \n   set_foreground(fg, isRGBA=False)[source]\n \nSet the foreground color.  Parameters \n \nfgcolor\n\n\nisRGBAbool\n\n\nIf fg is known to be an (r, g, b, a) tuple, isRGBA can be set to True to improve performance.     \n   set_gid(id)[source]\n \nSet the id. \n   set_hatch(hatch)[source]\n \nSet the hatch style (for fills). \n   set_hatch_color(hatch_color)[source]\n \nSet the hatch color. \n   set_joinstyle(js)[source]\n \nSet how to draw connections between line segments.  Parameters \n \njsJoinStyle or {'miter', 'round', 'bevel'}\n\n   \n   set_linewidth(w)[source]\n \nSet the linewidth in points. \n   set_sketch_params(scale=None, length=None, randomness=None)[source]\n \nSet the sketch parameters.  Parameters \n \nscalefloat, optional\n\n\nThe amplitude of the wiggle perpendicular to the source line, in pixels. If scale is None, or not provided, no sketch filter will be provided.  \nlengthfloat, default: 128\n\n\nThe length of the wiggle along the line, in pixels.  \nrandomnessfloat, default: 16\n\n\nThe scale factor by which the length is shrunken or expanded.     \n   set_snap(snap)[source]\n \nSet the snap setting which may be:  True: snap vertices to the nearest pixel center False: leave vertices as-is None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center  \n   set_url(url)[source]\n \nSet the url for links in compatible backends. \n \n   classmatplotlib.backend_bases.KeyEvent(name, canvas, key, x=0, y=0, guiEvent=None)[source]\n \nBases: matplotlib.backend_bases.LocationEvent A key event (key press, key release). A KeyEvent has a number of special attributes in addition to those defined by the parent Event and LocationEvent classes. Notes Modifier keys will be prefixed to the pressed key and will be in the order \"ctrl\", \"alt\", \"super\". The exception to this rule is when the pressed key is itself a modifier key, therefore \"ctrl+alt\" and \"alt+control\" can both be valid key values. Examples def on_key(event):\n    print('you pressed', event.key, event.xdata, event.ydata)\n\ncid = fig.canvas.mpl_connect('key_press_event', on_key)\n  Attributes \n \nkeyNone or str\n\n\nThe key(s) pressed. Could be None, a single case sensitive Unicode character (\"g\", \"G\", \"#\", etc.), a special key (\"control\", \"shift\", \"f1\", \"up\", etc.) or a combination of the above (e.g., \"ctrl+alt+g\", \"ctrl+alt+G\").     \n   classmatplotlib.backend_bases.LocationEvent(name, canvas, x, y, guiEvent=None)[source]\n \nBases: matplotlib.backend_bases.Event An event that has a screen location. A LocationEvent has a number of special attributes in addition to those defined by the parent Event class.  Attributes \n \nx, yint or None\n\n\nEvent location in pixels from bottom left of canvas.  \ninaxesAxes or None\n\n\nThe Axes instance over which the mouse is, if any.  \nxdata, ydatafloat or None\n\n\nData coordinates of the mouse within inaxes, or None if the mouse is not over an Axes.       lastevent=None\n\n \n   classmatplotlib.backend_bases.MouseButton(value)[source]\n \nBases: enum.IntEnum An enumeration.   BACK=8[source]\n\n   FORWARD=9[source]\n\n   LEFT=1[source]\n\n   MIDDLE=2[source]\n\n   RIGHT=3[source]\n\n \n   classmatplotlib.backend_bases.MouseEvent(name, canvas, x, y, button=None, key=None, step=0, dblclick=False, guiEvent=None)[source]\n \nBases: matplotlib.backend_bases.LocationEvent A mouse event ('button_press_event', 'button_release_event', 'scroll_event', 'motion_notify_event'). A MouseEvent has a number of special attributes in addition to those defined by the parent Event and LocationEvent classes. Examples def on_press(event):\n    print('you pressed', event.button, event.xdata, event.ydata)\n\ncid = fig.canvas.mpl_connect('button_press_event', on_press)\n  Attributes \n \nbuttonNone or MouseButton or {'up', 'down'}\n\n\nThe button pressed. 'up' and 'down' are used for scroll events. Note that LEFT and RIGHT actually refer to the \"primary\" and \"secondary\" buttons, i.e. if the user inverts their left and right buttons (\"left-handed setting\") then the LEFT button will be the one physically on the right.  \nkeyNone or str\n\n\nThe key pressed when the mouse event triggered, e.g. 'shift'. See KeyEvent.  Warning This key is currently obtained from the last 'key_press_event' or 'key_release_event' that occurred within the canvas. Thus, if the last change of keyboard state occurred while the canvas did not have focus, this attribute will be wrong.   \nstepfloat\n\n\nThe number of scroll steps (positive for 'up', negative for 'down'). This applies only to 'scroll_event' and defaults to 0 otherwise.  \ndblclickbool\n\n\nWhether the event is a double-click. This applies only to 'button_press_event' and is False otherwise. In particular, it's not used in 'button_release_event'.     \n   classmatplotlib.backend_bases.NavigationToolbar2(canvas)[source]\n \nBases: object Base class for the navigation cursor, version 2. Backends must implement a canvas that handles connections for 'button_press_event' and 'button_release_event'. See FigureCanvasBase.mpl_connect() for more information. They must also define  save_figure()\n\nsave the current figure  \ndraw_rubberband() (optional)\n\ndraw the zoom to rect \"rubberband\" rectangle  \nset_message() (optional)\n\ndisplay message  \nset_history_buttons() (optional)\n\nyou can change the history back / forward buttons to indicate disabled / enabled state.   and override __init__ to set up the toolbar -- without forgetting to call the base-class init. Typically, __init__ needs to set up toolbar buttons connected to the home, back, forward, pan, zoom, and save_figure methods and using standard icons in the \"images\" subdirectory of the data path. That's it, we'll do the rest!   back(*args)[source]\n \nMove back up the view lim stack. For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them. \n   configure_subplots(*args)[source]\n\n   drag_pan(event)[source]\n \nCallback for dragging in pan/zoom mode. \n   drag_zoom(event)[source]\n \nCallback for dragging in zoom mode. \n   draw_rubberband(event, x0, y0, x1, y1)[source]\n \nDraw a rectangle rubberband to indicate zoom limits. Note that it is not guaranteed that x0 <= x1 and y0 <= y1. \n   forward(*args)[source]\n \nMove forward in the view lim stack. For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them. \n   home(*args)[source]\n \nRestore the original view. For convenience of being directly connected as a GUI callback, which often get passed additional parameters, this method accepts arbitrary parameters, but does not use them. \n   mouse_move(event)[source]\n\n   pan(*args)[source]\n \nToggle the pan/zoom tool. Pan with left button, zoom with right. \n   press_pan(event)[source]\n \nCallback for mouse button press in pan/zoom mode. \n   press_zoom(event)[source]\n \nCallback for mouse button press in zoom to rect mode. \n   push_current()[source]\n \nPush the current view limits and position onto the stack. \n   release_pan(event)[source]\n \nCallback for mouse button release in pan/zoom mode. \n   release_zoom(event)[source]\n \nCallback for mouse button release in zoom to rect mode. \n   remove_rubberband()[source]\n \nRemove the rubberband. \n   save_figure(*args)[source]\n \nSave the current figure. \n   set_cursor(cursor)[source]\n \n[Deprecated] Set the current cursor to one of the Cursors enums values. If required by the backend, this method should trigger an update in the backend event loop after the cursor is set, as this method may be called e.g. before a long-running task during which the GUI is not updated. Notes  Deprecated since version 3.5.  \n   set_history_buttons()[source]\n \nEnable or disable the back/forward button. \n   set_message(s)[source]\n \nDisplay a message on toolbar or in status bar. \n   toolitems=(('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous view', 'back', 'back'), ('Forward', 'Forward to next view', 'forward', 'forward'), (None, None, None, None), ('Pan', 'Left button pans, Right button zooms\\nx/y fixes axis, CTRL fixes aspect', 'move', 'pan'), ('Zoom', 'Zoom to rectangle\\nx/y fixes axis', 'zoom_to_rect', 'zoom'), ('Subplots', 'Configure subplots', 'subplots', 'configure_subplots'), (None, None, None, None), ('Save', 'Save the figure', 'filesave', 'save_figure'))\n\n   update()[source]\n \nReset the axes stack. \n   zoom(*args)[source]\n \nToggle zoom to rect mode. \n \n   exceptionmatplotlib.backend_bases.NonGuiException[source]\n \nBases: Exception Raised when trying show a figure in a non-GUI backend. \n   classmatplotlib.backend_bases.PickEvent(name, canvas, mouseevent, artist, guiEvent=None, **kwargs)[source]\n \nBases: matplotlib.backend_bases.Event A pick event. This event is fired when the user picks a location on the canvas sufficiently close to an artist that has been made pickable with Artist.set_picker. A PickEvent has a number of special attributes in addition to those defined by the parent Event class. Examples Bind a function on_pick() to pick events, that prints the coordinates of the picked data point: ax.plot(np.rand(100), 'o', picker=5)  # 5 points tolerance\n\ndef on_pick(event):\n    line = event.artist\n    xdata, ydata = line.get_data()\n    ind = event.ind\n    print('on pick line:', np.array([xdata[ind], ydata[ind]]).T)\n\ncid = fig.canvas.mpl_connect('pick_event', on_pick)\n  Attributes \n \nmouseeventMouseEvent\n\n\nThe mouse event that generated the pick.  \nartistmatplotlib.artist.Artist\n\n\nThe picked artist. Note that artists are not pickable by default (see Artist.set_picker).  other\n\nAdditional attributes may be present depending on the type of the picked object; e.g., a Line2D pick may define different extra attributes than a PatchCollection pick.     \n   classmatplotlib.backend_bases.RendererBase[source]\n \nBases: object An abstract base class to handle drawing/rendering operations. The following methods must be implemented in the backend for full functionality (though just implementing draw_path() alone would give a highly capable backend):  draw_path() draw_image() draw_gouraud_triangle()  The following methods should be implemented in the backend for optimization reasons:  draw_text() draw_markers() draw_path_collection() draw_quad_mesh()    close_group(s)[source]\n \nClose a grouping element with label s. Only used by the SVG renderer. \n   draw_gouraud_triangle(gc, points, colors, transform)[source]\n \nDraw a Gouraud-shaded triangle.  Parameters \n \ngcGraphicsContextBase\n\n\nThe graphics context.  \npoints(3, 2) array-like\n\n\nArray of (x, y) points for the triangle.  \ncolors(3, 4) array-like\n\n\nRGBA colors for each point of the triangle.  \ntransformmatplotlib.transforms.Transform\n\n\nAn affine transform to apply to the points.     \n   draw_gouraud_triangles(gc, triangles_array, colors_array, transform)[source]\n \nDraw a series of Gouraud triangles.  Parameters \n \npoints(N, 3, 2) array-like\n\n\nArray of N (x, y) points for the triangles.  \ncolors(N, 3, 4) array-like\n\n\nArray of N RGBA colors for each point of the triangles.  \ntransformmatplotlib.transforms.Transform\n\n\nAn affine transform to apply to the points.     \n   draw_image(gc, x, y, im, transform=None)[source]\n \nDraw an RGBA image.  Parameters \n \ngcGraphicsContextBase\n\n\nA graphics context with clipping information.  \nxscalar\n\n\nThe distance in physical units (i.e., dots or pixels) from the left hand side of the canvas.  \nyscalar\n\n\nThe distance in physical units (i.e., dots or pixels) from the bottom side of the canvas.  \nim(N, M, 4) array-like of np.uint8\n\n\nAn array of RGBA pixels.  \ntransformmatplotlib.transforms.Affine2DBase\n\n\nIf and only if the concrete backend is written such that option_scale_image() returns True, an affine transformation (i.e., an Affine2DBase) may be passed to draw_image(). The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override x and y, and has to be applied before translating the result by x and y (this can be accomplished by adding x and y to the translation vector defined by transform).     \n   draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace=None)[source]\n \nDraw a marker at each of path's vertices (excluding control points). This provides a fallback implementation of draw_markers that makes multiple calls to draw_path(). Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.  Parameters \n \ngcGraphicsContextBase\n\n\nThe graphics context.  \nmarker_transmatplotlib.transforms.Transform\n\n\nAn affine transform applied to the marker.  \ntransmatplotlib.transforms.Transform\n\n\nAn affine transform applied to the path.     \n   draw_path(gc, path, transform, rgbFace=None)[source]\n \nDraw a Path instance using the given affine transform. \n   draw_path_collection(gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)[source]\n \nDraw a collection of paths selecting drawing properties from the lists facecolors, edgecolors, linewidths, linestyles and antialiaseds. offsets is a list of offsets to apply to each of the paths. The offsets in offsets are first transformed by offsetTrans before being applied. offset_position is unused now, but the argument is kept for backwards compatibility. This provides a fallback implementation of draw_path_collection() that makes multiple calls to draw_path(). Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods _iter_collection_raw_paths() and _iter_collection() are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of draw_path_collection() can be made globally. \n   draw_quad_mesh(gc, master_transform, meshWidth, meshHeight, coordinates, offsets, offsetTrans, facecolors, antialiased, edgecolors)[source]\n \nFallback implementation of draw_quad_mesh() that generates paths and then calls draw_path_collection(). \n   draw_tex(gc, x, y, s, prop, angle, *, mtext=None)[source]\n\n   draw_text(gc, x, y, s, prop, angle, ismath=False, mtext=None)[source]\n \nDraw the text instance.  Parameters \n \ngcGraphicsContextBase\n\n\nThe graphics context.  \nxfloat\n\n\nThe x location of the text in display coords.  \nyfloat\n\n\nThe y location of the text baseline in display coords.  \nsstr\n\n\nThe text string.  \npropmatplotlib.font_manager.FontProperties\n\n\nThe font properties.  \nanglefloat\n\n\nThe rotation angle in degrees anti-clockwise.  \nmtextmatplotlib.text.Text\n\n\nThe original text object to be rendered.     Notes Note for backend implementers: When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py: if 0: bbox_artist(self, renderer)\n to if 1, and then the actual bounding box will be plotted along with your text. \n   flipy()[source]\n \nReturn whether y values increase from top to bottom. Note that this only affects drawing of texts and images. \n   get_canvas_width_height()[source]\n \nReturn the canvas width and height in display coords. \n   get_image_magnification()[source]\n \nGet the factor by which to magnify images passed to draw_image(). Allows a backend to have images at a different resolution to other artists. \n   get_texmanager()[source]\n \nReturn the TexManager instance. \n   get_text_width_height_descent(s, prop, ismath)[source]\n \nGet the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string s with FontProperties prop. \n   new_gc()[source]\n \nReturn an instance of a GraphicsContextBase. \n   open_group(s, gid=None)[source]\n \nOpen a grouping element with label s and gid (if set) as id. Only used by the SVG renderer. \n   option_image_nocomposite()[source]\n \nReturn whether image composition by Matplotlib should be skipped. Raster backends should usually return False (letting the C-level rasterizer take care of image composition); vector backends should usually return not rcParams[\"image.composite_image\"]. \n   option_scale_image()[source]\n \nReturn whether arbitrary affine transformations in draw_image() are supported (True for most vector backends). \n   points_to_pixels(points)[source]\n \nConvert points to display units. You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch: points to pixels = points * pixels_per_inch/72 * dpi/72\n  Parameters \n \npointsfloat or array-like\n\n\na float or a numpy array of float    Returns \n Points converted to pixels\n   \n   start_filter()[source]\n \nSwitch to a temporary renderer for image filtering effects. Currently only supported by the agg renderer. \n   start_rasterizing()[source]\n \nSwitch to the raster renderer. Used by MixedModeRenderer. \n   stop_filter(filter_func)[source]\n \nSwitch back to the original renderer. The contents of the temporary renderer is processed with the filter_func and is drawn on the original renderer as an image. Currently only supported by the agg renderer. \n   stop_rasterizing()[source]\n \nSwitch back to the vector renderer and draw the contents of the raster renderer as an image on the vector renderer. Used by MixedModeRenderer. \n \n   classmatplotlib.backend_bases.ResizeEvent(name, canvas)[source]\n \nBases: matplotlib.backend_bases.Event An event triggered by a canvas resize. A ResizeEvent has a number of special attributes in addition to those defined by the parent Event class.  Attributes \n \nwidthint\n\n\nWidth of the canvas in pixels.  \nheightint\n\n\nHeight of the canvas in pixels.     \n   classmatplotlib.backend_bases.ShowBase[source]\n \nBases: matplotlib.backend_bases._Backend Simple base class to generate a show() function in backends. Subclass must override mainloop() method. \n   classmatplotlib.backend_bases.TimerBase(interval=None, callbacks=None)[source]\n \nBases: object A base class for providing timer events, useful for things animations. Backends need to implement a few specific methods in order to use their own timing mechanisms so that the timer events are integrated into their event loops. Subclasses must override the following methods:  \n_timer_start: Backend-specific code for starting the timer. \n_timer_stop: Backend-specific code for stopping the timer.  Subclasses may additionally override the following methods:  \n_timer_set_single_shot: Code for setting the timer to single shot operating mode, if supported by the timer object. If not, the Timer class itself will store the flag and the _on_timer method should be overridden to support such behavior. \n_timer_set_interval: Code for setting the interval on the timer, if there is a method for doing so on the timer object. \n_on_timer: The internal function that any timer object should call, which will handle the task of running all callbacks that have been set.   Parameters \n \nintervalint, default: 1000ms\n\n\nThe time between timer events in milliseconds. Will be stored as timer.interval.  \ncallbackslist[tuple[callable, tuple, dict]]\n\n\nList of (func, args, kwargs) tuples that will be called upon timer events. This list is accessible as timer.callbacks and can be manipulated directly, or the functions add_callback and remove_callback can be used.       add_callback(func, *args, **kwargs)[source]\n \nRegister func to be called by timer when the event fires. Any additional arguments provided will be passed to func. This function returns func, which makes it possible to use it as a decorator. \n   propertyinterval\n \nThe time between timer events, in milliseconds. \n   remove_callback(func, *args, **kwargs)[source]\n \nRemove func from list of callbacks. args and kwargs are optional and used to distinguish between copies of the same function registered to be called with different arguments. This behavior is deprecated. In the future, *args, **kwargs won't be considered anymore; to keep a specific callback removable by itself, pass it to add_callback as a functools.partial object. \n   propertysingle_shot\n \nWhether this timer should stop after a single run. \n   start(interval=None)[source]\n \nStart the timer object.  Parameters \n \nintervalint, optional\n\n\nTimer interval in milliseconds; overrides a previously set interval if provided.     \n   stop()[source]\n \nStop the timer. \n \n   classmatplotlib.backend_bases.ToolContainerBase(toolmanager)[source]\n \nBases: object Base class for all tool containers, e.g. toolbars.  Attributes \n \ntoolmanagerToolManager\n\n\nThe tools with which this ToolContainer wants to communicate.       add_tool(tool, group, position=- 1)[source]\n \nAdd a tool to this container.  Parameters \n \ntooltool_like\n\n\nThe tool to add, see ToolManager.get_tool.  \ngroupstr\n\n\nThe name of the group to add this tool to.  \npositionint, default: -1\n\n\nThe position within the group to place this tool.     \n   add_toolitem(name, group, position, image, description, toggle)[source]\n \nAdd a toolitem to the container. This method must be implemented per backend. The callback associated with the button click event, must be exactly self.trigger_tool(name).  Parameters \n \nnamestr\n\n\nName of the tool to add, this gets used as the tool's ID and as the default label of the buttons.  \ngroupstr\n\n\nName of the group that this tool belongs to.  \npositionint\n\n\nPosition of the tool within its group, if -1 it goes at the end.  \nimagestr\n\n\nFilename of the image for the button or None.  \ndescriptionstr\n\n\nDescription of the tool, used for the tooltips.  \ntogglebool\n\n\n \nTrue : The button is a toggle (change the pressed/unpressed state between consecutive clicks). \nFalse : The button is a normal button (returns to unpressed state after release).      \n   remove_toolitem(name)[source]\n \nRemove a toolitem from the ToolContainer. This method must get implemented per backend. Called when ToolManager emits a tool_removed_event.  Parameters \n \nnamestr\n\n\nName of the tool to remove.     \n   set_message(s)[source]\n \nDisplay a message on the toolbar.  Parameters \n \nsstr\n\n\nMessage text.     \n   toggle_toolitem(name, toggled)[source]\n \nToggle the toolitem without firing event.  Parameters \n \nnamestr\n\n\nId of the tool to toggle.  \ntoggledbool\n\n\nWhether to set this tool as toggled or not.     \n   trigger_tool(name)[source]\n \nTrigger the tool.  Parameters \n \nnamestr\n\n\nName (id) of the tool triggered from within the container.     \n \n   matplotlib.backend_bases.button_press_handler(event, canvas=None, toolbar=None)[source]\n \nThe default Matplotlib button actions for extra mouse buttons. Parameters are as for key_press_handler, except that event is a MouseEvent. \n   matplotlib.backend_bases.get_registered_canvas_class(format)[source]\n \nReturn the registered default canvas for given file format. Handles deferred import of required backend. \n   matplotlib.backend_bases.key_press_handler(event, canvas=None, toolbar=None)[source]\n \nImplement the default Matplotlib key bindings for the canvas and toolbar described at Navigation keyboard shortcuts.  Parameters \n \neventKeyEvent\n\n\nA key press/release event.  \ncanvasFigureCanvasBase, default: event.canvas\n\n\nThe backend-specific canvas instance. This parameter is kept for back-compatibility, but, if set, should always be equal to event.canvas.  \ntoolbarNavigationToolbar2, default: event.canvas.toolbar\n\n\nThe navigation cursor toolbar. This parameter is kept for back-compatibility, but, if set, should always be equal to event.canvas.toolbar.     \n   matplotlib.backend_bases.register_backend(format, backend, description=None)[source]\n \nRegister a backend for saving to a given file format.  Parameters \n \nformatstr\n\n\nFile extension  \nbackendmodule string or canvas class\n\n\nBackend for handling file output  \ndescriptionstr, default: \"\"\n\n\nDescription of the file type.     \n\n"}, {"name": "backend_bases.button_press_handler()", "path": "backend_bases_api#matplotlib.backend_bases.button_press_handler", "type": "backend_bases", "text": "  matplotlib.backend_bases.button_press_handler(event, canvas=None, toolbar=None)[source]\n \nThe default Matplotlib button actions for extra mouse buttons. Parameters are as for key_press_handler, except that event is a MouseEvent. \n"}, {"name": "backend_bases.CloseEvent", "path": "backend_bases_api#matplotlib.backend_bases.CloseEvent", "type": "backend_bases", "text": "  classmatplotlib.backend_bases.CloseEvent(name, canvas, guiEvent=None)[source]\n \nBases: matplotlib.backend_bases.Event An event triggered by a figure being closed. \n"}, {"name": "backend_bases.DrawEvent", "path": "backend_bases_api#matplotlib.backend_bases.DrawEvent", "type": "backend_bases", "text": "  classmatplotlib.backend_bases.DrawEvent(name, canvas, renderer)[source]\n \nBases: matplotlib.backend_bases.Event An event triggered by a draw operation on the canvas. In most backends, callbacks subscribed to this event will be fired after the rendering is complete but before the screen is updated. Any extra artists drawn to the canvas's renderer will be reflected without an explicit call to blit.  Warning Calling canvas.draw and canvas.blit in these callbacks may not be safe with all backends and may cause infinite recursion.  A DrawEvent has a number of special attributes in addition to those defined by the parent Event class.  Attributes \n \nrendererRendererBase\n\n\nThe renderer for the draw event.     \n"}, {"name": "backend_bases.Event", "path": "backend_bases_api#matplotlib.backend_bases.Event", "type": "backend_bases", "text": "  classmatplotlib.backend_bases.Event(name, canvas, guiEvent=None)[source]\n \nBases: object A Matplotlib event. The following attributes are defined and shown with their default values. Subclasses may define additional attributes.  Attributes \n \nnamestr\n\n\nThe event name.  \ncanvasFigureCanvasBase\n\n\nThe backend-specific canvas instance generating the event.  guiEvent\n\nThe GUI event that triggered the Matplotlib event.     \n"}, {"name": "backend_bases.FigureCanvasBase", "path": "backend_bases_api#matplotlib.backend_bases.FigureCanvasBase", "type": "backend_bases", "text": "  classmatplotlib.backend_bases.FigureCanvasBase(figure=None)[source]\n \nBases: object The canvas the figure renders into.  Attributes \n \nfigurematplotlib.figure.Figure\n\n\nA high-level figure instance.       blit(bbox=None)[source]\n \nBlit the canvas in bbox (default entire canvas). \n   propertybutton_pick_id\n\n   button_press_event(x, y, button, dblclick=False, guiEvent=None)[source]\n \nCallback processing for mouse button press events. Backend derived classes should call this function on any mouse button press. (x, y) are the canvas coords ((0, 0) is lower left). button and key are as defined in MouseEvent. This method will call all functions connected to the 'button_press_event' with a MouseEvent instance. \n   button_release_event(x, y, button, guiEvent=None)[source]\n \nCallback processing for mouse button release events. Backend derived classes should call this function on any mouse button release. This method will call all functions connected to the 'button_release_event' with a MouseEvent instance.  Parameters \n \nxfloat\n\n\nThe canvas coordinates where 0=left.  \nyfloat\n\n\nThe canvas coordinates where 0=bottom.  guiEvent\n\nThe native UI event that generated the Matplotlib event.     \n   propertycallbacks\n\n   close_event(guiEvent=None)[source]\n \nPass a CloseEvent to all functions connected to close_event. \n   propertydevice_pixel_ratio\n \nThe ratio of physical to logical pixels used for the canvas on screen. By default, this is 1, meaning physical and logical pixels are the sam